<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>我的微服务之路 - xuanbg</title>
<link>http://www.cnblogs.com/xuanbg/p/12079024.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuanbg/p/12079024.html</guid>
<description>&lt;p&gt;还记得在14年的某一天，为生活所迫，走上了程序员这条路。到如今，已是第六个年头了。所幸的是，写代码是我人生所经历的各种职业中最喜欢的职业。如无意外，我会一直做下去，直到生命终止。2019年即将过去，写下这篇文字以作纪念，也希望给阅读这篇文字的同学们一些启发。特别是想要转行程序员的，或者.NET、PHP想转Java方向的程序员，希望能够给你们一点鼓励和帮助。&lt;/p&gt;
&lt;p&gt;微服务是一个热门的话题，作为一个在微服务上面实践了4年多的老司机，说一下我的经历。&lt;/p&gt;
&lt;p&gt;15年我入职了一家新公司，负责一个商城系统的开发。鉴于以往的小小经验，为了解决多业务系统共用一套用户的需求。把用户、用户组、组织机构、角色权限和Token从整个系统中独立了出来。商城以及管理系统作为另外一个独立的系统存在。后面又陆续开发了几个系统，他们之间采用http协议进行接口的调用。无疑，这个仅仅是一个非常简陋和原始的多服务架构。为什么不算微服务架构呢？首先，单个服务仍然比较庞大。然后也没有RPC框架，就是httpClient直接上。更没有什么服务注册/发现、配置中心、网关、限流/熔断、监控了，简直要啥没啥。不过这次把各个业务拆开来，为后面真正的微服务化奠定了基础，同时也走出了重要的一步。由于采用的是.NET技术栈，所以后面在往真正的微服务系统转化的路上踩了不少坑。真是说来话长，这里暂且略过不表。&lt;/p&gt;
&lt;p&gt;17年我从北京回到了杭州，进入了一家互联网初创公司担任架构师。初创公司嘛，前期都很简陋，包括公司的业务系统也是。我的任务就是重新设计公司的业务系统，要满足xxx和yyy，还有zzz。总之，要求相当地高大上。那个时候，微服务的概念已经蛮流行了，对于微服务，我也有了一些自己的理解和那么一丢丢的实践经验。为了满足老板这个宏大的远景蓝图，没说的，就是微服务，就是前后端分离。几个架构图一画，果不其然，老板非常满意，转头就拿去忽悠投资人去了……&lt;/p&gt;
&lt;p&gt;我们一个规划了四个中心：&lt;br/&gt;用户中心，包含资源、用户、用户组、组织机构、角色权限、租户、验证，共拆了7个服务。&lt;br/&gt;消息中心，负责消息通知、短信、邮件、应用内消息等，没有进一步拆分服务。&lt;br/&gt;支付中心，负责对接支付宝、微信、银联等支付通道，也没有更多的拆分。&lt;br/&gt;订单中心，拆分成订单领域服务和订单管理服务两个服务。&lt;/p&gt;
&lt;p&gt;因为技术团队是Java向，所以自然而然地采用了Spring全家桶，里面什么都有，真香。消息中心和支付中心我负责了接口设计，订单中心则只提出了领域服务和管理服务分离的原则，具体的设计是另一个架构师负责的。用户中心对我而言轻车熟路，只是增加了租户的概念，以支持多租户平台的需求。另外把资源服务搞起来，使得资源可配置。总体来说相当于用Java重新写一遍代码。在重写的过程中，由于Java语言的特性和C#还是有很多不同的地方，实现的思路也有所变化。用不同的语言来实现同一个需求，还是比较有趣的。感觉就像打开了一扇门，发现了一个新的世界。Spring boot也给了我很多的惊喜，经常会发现一些新的玩法，然后感叹一声：卧槽，居然还可以这样搞！&lt;/p&gt;
&lt;p&gt;这一次实践，最大的问题是基础强而业务弱。那时候阿里还没有明确提出它的中台战略，而我们的系统 ，就已经有点中台的意思了。从业务需求来看，其实根本不需要微服务，有点过度设计了。事实上仅仅1年之后，这家公司就呜呼哀哉，烟消云散了。当然这个结局的主要原因在于老板而不在技术。而这些基础服务的好处，则在我之后入职的新公司得到了体现。业务所依赖的基础设施都已经建设好了，剩下的只需要关心业务的实现就够了。就像国家已经给你通了高速公路网和高铁、机场、港口什么的都建好了，地方政府只需要一门心思搞经济建设就好了。如果一个小国、穷国也这么搞，估计会把自己搞死掉。基建真的烧钱啊，咱们国家也是攒了20多年的家当，抓住了国际形势天时地利人和的机会才能这么玩一次。&lt;/p&gt;
&lt;p&gt;对于微服务系统来说，我们关注这三点就足够了：一是微服务组件的选型，二是服务如何划分，三是数据一致性问题如何解决。&lt;/p&gt;
&lt;p&gt;微服务组件的选型问题，其实我也没有太多的建议，因为我也仅仅接触过Spring Cloud这一套。对我而言，Spring Cloud是比较成熟、易用的解决方案。支持的语言也很多，即使不支持，也很容易自己照着别的语言造个轮子来用。不过我到现在都没有用过任何的配置中心，而是简单搞了个配置数据库，在jenkins里面通过脚本根据环境来替换配置。一直想自己搞个简单的配置中心，但一直没想好实现哪些功能，就一直搁置了。&lt;/p&gt;
&lt;p&gt;第二个问题和第三个问题其实是存在相关性的。我的建议是，服务可以按逻辑是否完备(和其他服务不存在逻辑依赖)的标准进行最小粒度的划分。特别是领域服务和领域上的业务管理服务，建议分拆成多个服务。因为领域数据相对稳定，而业务逻辑则很容易发生变化，分拆后既能有效提升领域服务的稳定性，同时也方便业务需求的随时变更。数据分库可以按领域来，譬如订单数据 和订单流程处理数据就没必要分。也就是说，正常情况下，应该是多个服务共享一个数据库。&lt;/p&gt;
&lt;p&gt;对于数据一致性问题，我的经验就是：&lt;br/&gt;1、能够使用数据库事务保证的，就用数据库事务。这也是为什么数据库按领域分的原因。&lt;br/&gt;2、跨库数据就是MQ一把梭，保证数据的最终一致性就可以了。如果是服务器掉电之类的意外导致的丢数据引起的数据不一致，我的方案就是人工修复。只要数据可推导，就不存在不可修复的数据，人工跑个脚本，分分钟修好。&lt;/p&gt;
&lt;p&gt;最后，我要和大家分享一下我的开源项目：&lt;a href=&quot;https://github.com/xuanbg&quot;&gt;xuanbg (Brian Xan) · GitHub&lt;/a&gt;。目前已经完成了上文提到的消息中心的服务端和用户中心的大部分服务端，后续还会增加一个财务中心以及它们的客户端。我希望这个项目能够为大家提供一些可组合的、开箱即用的微服务基础设施，以降低转换到微服务架构的开发成本。&lt;/p&gt;
&lt;p&gt;已完成部分清单如下：&lt;br/&gt;用户服务：&lt;a href=&quot;https://github.com/xuanbg/insight_user&quot; class=&quot;uri&quot;&gt;https://github.com/xuanbg/insight_user&lt;/a&gt;&lt;br/&gt;租户服务：&lt;a href=&quot;https://github.com/xuanbg/insight_tenant&quot;&gt;GitHub - xuanbg/insight_tenant: 租户服务&lt;/a&gt;&lt;br/&gt;角色服务：&lt;a href=&quot;https://github.com/xuanbg/insight_role&quot; class=&quot;uri&quot;&gt;https://github.com/xuanbg/insight_role&lt;/a&gt;&lt;br/&gt;身份认证：&lt;a href=&quot;https://github.com/xuanbg/insight_auth&quot;&gt;GitHub - xuanbg/insight_auth: 身份验证服务&lt;/a&gt;&lt;br/&gt;网关：&lt;a href=&quot;https://github.com/xuanbg/gateway&quot;&gt;GitHub - xuanbg/gateway: 基于Spring Cloud Gateway的微服务网关&lt;/a&gt;&lt;br/&gt;消息中心：&lt;a href=&quot;https://github.com/xuanbg/insight_message&quot;&gt;GitHub - xuanbg/insight_message: 消息中心服务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;未完成：&lt;br/&gt;资源管理服务&lt;br/&gt;组织机构服务&lt;br/&gt;第三方支付统一接入&lt;br/&gt;结算服务(收款、付款、退款)&lt;br/&gt;资金账户服务&lt;br/&gt;用户账户服务&lt;br/&gt;钱包管理服务&lt;/p&gt;
&lt;p&gt;多租户平台管理客户端&lt;br/&gt;租户系统管理客户端&lt;br/&gt;财务中心管理客户端&lt;/p&gt;
</description>
<pubDate>Sun, 22 Dec 2019 00:48:00 +0000</pubDate>
<dc:creator>xuanbg</dc:creator>
<og:description>还记得在14年的某一天，为生活所迫，走上了程序员这条路。到如今，已是第六个年头了。所幸的是，写代码是我人生所经历的各种职业中最喜欢的职业。如无意外，我会一直做下去，直到生命终止。2019年即将过去，写</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xuanbg/p/12079024.html</dc:identifier>
</item>
<item>
<title>软件设计的哲学：第十一章 两次设计 - peida</title>
<link>http://www.cnblogs.com/peida/p/12078980.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peida/p/12078980.html</guid>
<description>&lt;p&gt;设计软件是困难的，所以你对如何构建一个模块或系统的最初想法不太可能产生最好的设计。如果您为每个主要的设计决策考虑多个选项，您将得到一个更好的结果：&lt;strong&gt;设计两次&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设您正在为GUI文本编辑器设计管理文件文本的类。第一步是定义类将呈现给编辑器其余部分的接口；与其选择第一个出现在脑海中的想法，不如考虑几种可能性。一种选择是面向行的接口，它具有插入、修改和删除整行文本的操作。另一个选项是基于单个字符插入和删除的接口。第三种选择是面向字符串的接口，它可以跨行操作任意范围的字符。你不需要确定每种选择的每个特性;在这一点上，勾勒出几个最重要的方法就足够了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尝试选择那些彼此截然不同的方法，这样你会学到更多。&lt;/strong&gt; 即使您确定只有一种合理的方法，无论您认为第二种设计有多糟糕，都要考虑采用第二种设计。思考该设计的弱点并将其与其他设计的特点进行对比将是有益的。&lt;/p&gt;
&lt;p&gt;在你草拟出可供选择的设计方案后，列出每种方案的优缺点。对于接口最重要的考虑是对于高级软件的易用性。在上面的例子中，面向行的接口和面向字符的接口都需要在使用text类的软件中进行额外的工作。在部分行和多行操作(如剪切和粘贴选择)期间，面向行的界面将需要更高级别的软件来分割和连接行。面向字符的接口将需要循环来实现修改多个字符的操作。这也值得考虑其他因素：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一种替代方案的接口是否比另一种简单?在文本示例中，所有的文本接口都比较简单。&lt;/li&gt;
&lt;li&gt;一个接口比另一个接口更通用吗?&lt;/li&gt;
&lt;li&gt;一个接口是否能够比另一个接口更有效地实现?在文本示例中，面向字符的方法可能比其他方法慢得多，因为它需要对每个字符分别调用文本模块。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一旦你比较了不同的设计，你就能更好地确定最佳的设计&lt;/strong&gt;。最好的选择可能是一个备选方案，或者您可能会发现可以将多个备选方案的功能组合到一个比任何原始选择更好的新设计中。&lt;/p&gt;
&lt;p&gt;有时，没有一种选择特别有吸引力，当这种情况发生时，看看是否可以提出其他方案。使用您在最初的替代方案中确定的问题来驱动新的设计。如果您正在设计文本类，并且只考虑面向行的和面向字符的方法，那么您可能会注意到每种替代方法都很笨拙，因为它需要更高级别的软件来执行额外的文本操作。这是一个危险信号:如果有一个文本类，它应该处理所有的文本操作。为了消除额外的文本操作，文本界面需要更紧密地匹配发生在高级软件中的操作。这些操作并不总是对应于单个字符或单个行。这一行推理应该会为文本提供面向范围的API，从而消除了早期设计的问题。&lt;/p&gt;
&lt;p&gt;两次设计原则可以应用于系统的许多层次。对于模块，您可以首先使用这种方法来选择接口，如上所述。然后您可以在设计实现时再次应用它：对于text类，您可以考虑诸如行链表、固定大小的字符块或“间隙缓冲区”之类的实现。“实现的目标和接口的目标是不同的：对于实现来说，最重要的是简单性和性能。在系统的更高层次上探索多种设计也很有用，比如何时为用户界面选择特性，或者何时将系统分解为主要模块。在每种情况下，如果您可以比较几个备选方案，就更容易确定最佳方法。&lt;/p&gt;
&lt;p&gt;设计两次并不需要花费很多额外的时间。对于较小的模块(如类)，您可能不需要超过一两个小时的时间来考虑替代方案。与您将花费几天或几周的时间来实现这个类相比，这只是一小部分时间。最初的设计实验很可能会产生一个更好的设计，这将比花两次时间来设计要好得多。对于较大的模块，您将在最初的设计探索中花费更多的时间，但是实现也会花费更长的时间，而且更好的设计的好处也会更大。&lt;/p&gt;
&lt;p&gt;我注意到“两次设计”的原则有时很难被真正聪明的人所接受。当他们长大后，聪明的人发现他们对任何问题的第一个快速想法就足以获得一个好成绩；没有必要考虑第二种或第三种可能性。这很容易养成不好的工作习惯。然而，随着这些人年龄的增长，他们会被提升到越来越困难的环境中。最终，每个人都会到达一个临界点，你的第一个想法不再足够好；如果你想获得真正好的结果，你必须考虑第二种可能，或者第三种，不管你有多聪明。大型软件系统的设计就属于这一类：&lt;strong&gt;没有人有足够的能力在第一次尝试时就把它做好。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不幸的是，我经常看到聪明的人坚持执行他们脑海中出现的第一个想法，这导致他们没有发挥出他们真正的潜力(这也让他们在工作中感到沮丧)。也许他们潜意识里认为“聪明人第一次就能成功”，所以如果他们尝试多种设计，那就意味着他们根本不聪明。事实并非如此。这并不是说你不聪明，问题是真的很难。此外，这是一件好事：&lt;strong&gt;解决一个需要仔细思考的难题要比解决一个根本不需要思考的简单问题有趣得多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两次设计的方法不仅提高了你的设计，也提高了你的设计能力。设计和比较多种方法的过程将教会您使设计更好或更差的因素。&lt;/strong&gt; 随着时间的推移，这将使你更容易排除糟糕的设计，并专注于真正伟大的设计。&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 23:25:00 +0000</pubDate>
<dc:creator>peida</dc:creator>
<og:description>两次设计的方法不仅提高了你的设计，也提高了你的设计能力。设计和比较多种方法的过程将教会您使设计更好或更差的因素。随着时间的推移，这将使你更容易排除糟糕的设计，并专注于真正伟大的设计。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/peida/p/12078980.html</dc:identifier>
</item>
<item>
<title>Linux下搭建HttpRunnerManager接口测试平台 - wintest</title>
<link>http://www.cnblogs.com/wintest/p/12078867.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wintest/p/12078867.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前在学习HttpRunner时，我们都是把用例写在 &lt;code&gt;YAML/JSON&lt;/code&gt; 中进行维护，使用起来也很方便。其实，现在有不少大佬都喜欢开发自动化测试平台，比如我们今天要搭建的&lt;code&gt;HttpRunnerManager&lt;/code&gt;，这就是已开发好的基于HttpRunner开发的接口自动化测试平台。&lt;/p&gt;
&lt;blockquote readability=&quot;1.2096774193548&quot;&gt;
&lt;p&gt;Github地址：&lt;a href=&quot;https://github.com/HttpRunner/HttpRunnerManager&quot; class=&quot;uri&quot;&gt;https://github.com/HttpRunner/HttpRunnerManager&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然现在HttpRunnerManager的作者已经停止维护该平台了，但我们仍可以通过搭建HttpRunnerManager来进一步学习，在平台搭建完成后，我们可在平台上直接编写接口自动化测试用例。&lt;/p&gt;
&lt;blockquote readability=&quot;5.4975609756098&quot;&gt;
&lt;p&gt;&lt;strong&gt;需要在Linux上提前准备的环境（下面是本人搭建时的环境）：&lt;/strong&gt;&lt;br/&gt;1，Python 3.6.8 （可参考文章：&lt;a href=&quot;https://www.cnblogs.com/wintest/p/12057170.html&quot;&gt;Linux下安装Python3&lt;/a&gt;）&lt;br/&gt;2，MySQL 5.7（可参考文章：&lt;a href=&quot;https://www.cnblogs.com/wintest/p/11483559.html&quot;&gt;Linux下安装MySQL 5.7&lt;/a&gt; ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;下载httprunnermanager源码&quot;&gt;下载HttpRunnerManager源码&lt;/h2&gt;
&lt;p&gt;首先，我们直接到 &lt;code&gt;Github&lt;/code&gt; 上下载 &lt;code&gt;HttpRunnerManager&lt;/code&gt; ，把它下载到本地，或者通过 git 上直接 clone 。在这里，我是先直接下载压缩包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-299d8e287c7acb9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;下载HttpRunnerManager&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下载完成，解压后传到Linux服务器上，或者先传到Linux再通过 &lt;code&gt;unzip&lt;/code&gt; 命令解压，最后，我们得到如下内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-2dd32fd9f7695d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;解压后&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装-requirements.txt-里的依赖包&quot;&gt;安装 requirements.txt 里的依赖包&lt;/h2&gt;
&lt;p&gt;因为已经在Linux下安装了python3和pip3，因此这里直接通过 pip3 来安装即可。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;安装命令：&lt;strong&gt;pip3 install -r requirements.txt&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入命令安装后，等待安装完成。我在安装时遇到了如下错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-019d03e52b7da57c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装mysqlclient报错&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的报错是在安装 &lt;code&gt;mysqlclient&lt;/code&gt; 时报错，在网上查了下，发现原因是Linux系统在装mysql相关的包时要先装依赖包 &lt;code&gt;mysql-devel&lt;/code&gt;，因此我们需要先安装 &lt;code&gt;mysql-devel&lt;/code&gt; ，命令如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;yum install mysql-devel&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装之后，再重新安装 &lt;code&gt;requirements.txt&lt;/code&gt; 里的依赖包，就不会报错了。&lt;/p&gt;
&lt;h2 id=&quot;mysql上创建httprunner数据库&quot;&gt;MySQL上创建HttpRunner数据库&lt;/h2&gt;
&lt;p&gt;接下来，我们需要在MySQL上创建相应HttpRunner数据库，设置好相应用户名、密码，并启动MySQL。下面是我在 Windows 下通过 &lt;code&gt;Navicat&lt;/code&gt; 连接MySQL后创建的数据库，名称为 &lt;code&gt;hrun&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-60cbd2c1544dbbab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;HttpRunner数据库&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建完成，就可以不用管它了，后面会进行同步数据库，进而得到数据表结构。&lt;/p&gt;
&lt;h2 id=&quot;修改配置文件&quot;&gt;修改配置文件&lt;/h2&gt;
&lt;p&gt;修改 &lt;code&gt;HttpRunnerManager/settings.py&lt;/code&gt; 配置文件里DATABASES字典，需要修改的地方（&lt;strong&gt;大约在settings.py中第120行左右&lt;/strong&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-deaec17e3f26240d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;修改前的settings.py&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们本次只修改数据库配置相关的内容，可以通过 &lt;strong&gt;vim&lt;/strong&gt; 命令进行修改，修改之后如下（&lt;strong&gt;根据自己实际情况修改&lt;/strong&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-1f1beb0d25f6244c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;修改后的settings.py&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;同步数据库&quot;&gt;同步数据库&lt;/h2&gt;
&lt;p&gt;上面，我们只是创建了一个名称为 &lt;code&gt;hrun&lt;/code&gt; 的数据库，但这个数据库下没有任何数据表，现在，我们将同步数据库得到数据表。需要先返回到 HttpRunnerManager 的根目录，在我们这里也就是 &lt;code&gt;HttpRunnerManager-master&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;生成数据迁移脚本：&lt;strong&gt;python3 manage.py makemigrations ApiManager&lt;/strong&gt;&lt;br/&gt;应用到db生成数据表：&lt;strong&gt;python3 manage.py migrate&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-badc4de424379549.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;同步数据库&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同步数据库完成之后，我们再到 MySQL 中查看，可以发现 &lt;code&gt;hrun&lt;/code&gt; 数据库下新增了很多数据表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-13e849e0223b8148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;新增的数据表&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建后台管理员用户&quot;&gt;创建后台管理员用户&lt;/h2&gt;
&lt;p&gt;到这里，我们基本的搭建工作已差不多完成。现在，我们创建一个超级用户，并按提示输入相应用户名，密码，邮箱。该用户可用于管理后台数据。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;创建后台用户：&lt;strong&gt;python3 manage.py createsuperuser&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-655792f2493e631b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;创建后台用户&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;启动django服务&quot;&gt;启动Django服务&lt;/h2&gt;
&lt;p&gt;我们还需要启动Django服务，Django默认端口一般是8000，启动服务的命令如下：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用上面的命令，有一个不足的地方，那就是不能在后台运行，因此我们最好通过后台运行的方式来启动Django服务，命令如下：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;nohup python3 manage.py runserver 0.0.0.0:8000 &amp;gt;hrun.log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HttpRunnerManager在后台运行的日志，将输出到 &lt;code&gt;hrun.log&lt;/code&gt; 下。&lt;/p&gt;
&lt;h2 id=&quot;登录httprunnermanager&quot;&gt;登录HttpRunnerManager&lt;/h2&gt;
&lt;p&gt;在Linux下启动服务之后，我们将在Windows下进行访问并登录HttpRunnerManager，我们需要检查一下 8000 等端口是否已开放，特别如果是在云服务器上搭建的环境，需要添加安全组规则，否则可能访问不到。&lt;/p&gt;
&lt;blockquote readability=&quot;1.6847826086957&quot;&gt;
&lt;p&gt;后台管理：&lt;a href=&quot;http://ip%E5%9C%B0%E5%9D%80:8000/admin/&quot; class=&quot;uri&quot;&gt;http://ip地址:8000/admin/&lt;/a&gt;&lt;br/&gt;注册界面：&lt;a href=&quot;http://ip%E5%9C%B0%E5%9D%80:8000/api/register/&quot; class=&quot;uri&quot;&gt;http://ip地址:8000/api/register/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后台运维管理登录界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-56dbc5554d2fbed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;后台管理登录&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入上一步骤创建的后台用户即可进行后台登录，登录后的界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-d78767167005ffdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;后台管理界面&quot;/&gt;&lt;/p&gt;
&lt;p&gt;HttpRunnerManager用户注册界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-5f9213aa2f809c63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;用户注册&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建普通用户之后，切换到登录界面，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-8d6ea38467f64337.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;用户登录&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户登录成功后的主界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-ba8205d7011a3294.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;主界面&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;在上面的主界面中，我们发现界面的样式似乎有些不对劲，这是因为我们从Github上下载的源码有些问题，这里就需要手动修改一下了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-2bc3c2bc0285a234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;需要修改的文件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-28dc844a093b46bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;需要修改的地方&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面 &lt;code&gt;templates/base.html&lt;/code&gt; 文件中第23行，需要修改一下，将 &lt;code&gt;http://cdn.amazeui.org/amazeui/2.7.2/css/amazeui.min.css&lt;/code&gt; 替换为 &lt;code&gt;http://cdn.bootcss.com/amazeui/2.7.2/css/amazeui.min.css&lt;/code&gt; ，替换之后，再次刷新页面，界面样式就正常了，最后显示的界面效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16853007-c5988ecf96315848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;HttpRunnerManager主界面&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;HttpRunnerManager中，异步执行、定时任务、任务监控等功能，需要搭建RabbitMQ消息中间件等，这些我们在后续再进一步学习吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK，现在我们的HttpRunnerManager接口测试平台已经基本搭建成功了，除了异步执行、定时任务、任务监控等之外，其他的功能都可以使用了。&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 17:24:00 +0000</pubDate>
<dc:creator>wintest</dc:creator>
<og:description>前言 之前在学习HttpRunner时，我们都是把用例写在 中进行维护，使用起来也很方便。其实，现在有不少大佬都喜欢开发自动化测试平台，比如我们今天要搭建的 ，这就是已开发好的基于HttpRunner</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wintest/p/12078867.html</dc:identifier>
</item>
<item>
<title>看完这篇博客，我保证你肯定会做接口测试了。 - bainianminguo</title>
<link>http://www.cnblogs.com/bainianminguo/p/12078838.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bainianminguo/p/12078838.html</guid>
<description>&lt;p&gt;&lt;strong&gt;最近给公司的新员工培训web api接口测试，发现这一块的内部需求还比较大，不仅仅是新员工，包括一些经常写接口测试老员工，对接口也是似懂非懂的，所以我绝对有必要写一篇博客来普及下。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我们公司内部，一般使用ruby或者python语言来做接口测试，这篇文件主要是讲解使用python语言来做接口测试。&lt;/p&gt;
&lt;p&gt;如果要做接口测试，其实只要会&lt;strong&gt;&lt;span&gt;抓包&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;会组装http请求头和请求体&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;会检查http响应头和响应体&lt;/span&gt;&lt;/strong&gt;，就可以可以，所以我们需要需要掌握下面这些知识！！！另外还需要掌握一些常用的测试框架，比如unittest和pytest等&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、python语言requests库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、http协议基本知识，包括请求头，响应头、请求体、响应体&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、session-cookie（如果大家对session和cookies不熟悉，可以看我之前写 的博客）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://www.cnblogs.com/bainianminguo/p/9147418.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://www.cnblogs.com/bainianminguo/p/8850043.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、fiddler抓包工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、测试框架，这里不会讲，大家有兴趣可以看下我之前写的博客，介绍unittest测试框架&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://www.cnblogs.com/bainianminguo/p/11706244.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://www.cnblogs.com/bainianminguo/p/11616526.html&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;下面进入正题，听我娓娓道来。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;一、http协议&lt;/h3&gt;
&lt;h4&gt;1、简介&lt;/h4&gt;
&lt;p&gt;web api接口大都是基于http协议的，所以要进行接口测试，首先要了解HTTP协议的基础知识。&lt;/p&gt;
&lt;p&gt;HTTP协议全称是超文本传输协议。由于HTTP最初是用来在浏览器和网站服务器之间传输超文本的（网页，视频，图片等）信息的。由于HTTP简洁易用，后来，不仅仅是浏览器和服务器之间使用它，服务器和服务器之间，手机app和服务器之间，都广泛的采用，成了一个软件系统间通信的首选协议之一。&lt;/p&gt;
&lt;p&gt;HTTP协议有好几个版本，包括0.9、1.0、1.1、1.2，当前最广泛使用的是HTTP/1.1版本&lt;/p&gt;
&lt;p&gt;HTTP协议最大的特点是通讯双方分为客户端和服务端。&lt;/p&gt;
&lt;p&gt;由于目前HTTP是基于TCP协议，所以要进行通讯，客户端必须先河服务端创建TCP连接。而且HTTP双方的信息交互，必须要这样一种形式&lt;/p&gt;
&lt;p&gt;a、客户端先发送http请求（request）给服务器&lt;/p&gt;
&lt;p&gt;b、然后服务器发送http响应（response）给客户端&lt;/p&gt;
&lt;p&gt;c、特别要注意，在http协议中，服务端是不能主动发消息给客户端的&lt;/p&gt;
&lt;p&gt;流程图如下&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191220231008123-1294563703.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;http1.1版本先创建TCP连接，然后在这个连接内可以进行多次交互信息，这里注意，是客户端主动给服务端发请求的&lt;/p&gt;

&lt;h4&gt;二、http请求&lt;/h4&gt;
&lt;p&gt;下面是http的get请求和http的post请求的示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
GET /mgr/login HTTP/1.1
Host: 192.168.3.1
User-Agent:Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36
Accept-Language:zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4
Accept-Encoding:gzip, deflate, sdch
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
POST /api/test HTTP/1.1
Host:192.168.3.1
Origin:http://192.168.3.1
Referer:http://192.168.3.1/html/index.html
User-Agent:Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36
Content-Type:application/json;charset=UTF-8
Content-Length:214
Accept-Language:zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4
Accept-Encoding:gzip, deflate

{&quot;csrf&quot;:{&quot;csrf_param&quot;:&quot;35iUJau6mdmmJeIg0N8W80OmoMK8A2Kr&quot;,&quot;csrf_token&quot;:&quot;KfKSfpH0hnsSc0uQyX6ZUB8i8KRFSZ0C&quot;},&quot;data&quot;:{&quot;username&quot;:&quot;admin&quot;,&quot;firstnonce&quot;:&quot;c7eb46830667147fc62838e7ba9a0c09187d28bafa45b133897efa9d4e46a880&quot;}}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一个http请求消息由下面几个部分组成&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a、请求行 request line&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是http的第一行的内容。表示要操作什么资源，使用的http协议的版本是什么，里面包含了三部分消息。请求的方法、操作资源的地址、协议的版本号&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
GET https://securepubads.g.doubleclick.net/pagead/adview?ai=C3a-FX0L-XZ7nH8Hn2gT1vpKQBofP2MxZl96OgJYKsfz66E0QASC3tpYCYJ0ByAEBqQIDDuevOSiDPuACAKgDAcgDCqoE5AFP0PxttPf1dpFDQI04YpU7K4Qhq0WGx-H6233i9kddKMRmZ8rfGeWBQrr479rzo9D8pahF4GnAvGpwUHZntCL7HcXpQi_xqWQt3alVu7iKmqOQ2r6wzaMJli0vfW_rWq9l6hMmC3THotaE3aaCu8-yQ18_cRaCfgKTCRRx0Eze2gWYfJic33lRDI5NHSVfSlXDsc3SItNtoxG4tZhzRdw3omfX6oWwyvxUVboGzJwd8Rfij2Abfe4gFMviIlfhgVkNNRVv3U-Zhi6Xu5dTGhbV952-dpPUto1PgnRuTQpfsnvJ9UbABKmyupce4AQBkgUECAQYAZIFBAgFGASAB9GIrh6oB47OG6gH1ckbqAeT2BuoB7oGqAfy2RuoB6a-G6gH7NUb2AcB8gcEEPCNAtIIBwiAYRABGB2ACgHICwHYEwKIFAE&amp;amp;sigh=RmPL7gCMtsg&amp;amp;tpd=AGWhJmu9ZlDGyMSGWoSTQKbLoOl12TOWdSdugT6uZH2DizpViw HTTP/1.1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;b、请求方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Get请求&lt;/p&gt;
&lt;p&gt;从服务器上获取资源信息，这是一种最常见的请求&lt;/p&gt;
&lt;p&gt;比如要从服务器获取网页资源，获取图片资源，获取用户信息数据等&lt;/p&gt;

&lt;p&gt;Post请求&lt;/p&gt;
&lt;p&gt;添加资源信息到服务器进行处理，例如要添加用户信息，上传图片数据到服务器等，具体的数据信息，通常在HTTP请求的消息体中，这个后面会讲&lt;/p&gt;

&lt;p&gt; Put请求&lt;/p&gt;
&lt;p&gt;请求服务器更新资源信息&lt;/p&gt;
&lt;p&gt;比如要更新用户、姓名地址等等&lt;/p&gt;
&lt;p&gt;具体的更新的数据信息，通常在HTTP的消息体中，后面会讲&lt;/p&gt;

&lt;p&gt;Delete请求&lt;/p&gt;
&lt;p&gt;请求服务器删除资源信息&lt;/p&gt;
&lt;p&gt;比如要删除某个用户，某个资源等等&lt;/p&gt;
&lt;p&gt;HTT片协议还有许多其他的方法，比如PATCH,HEAD等，不是特别常用，暂且不讲&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c、资源地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191220233619912-1607986106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;d、请求头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191220233734076-1923395597.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这里业务大家有个疑问，我的http请求是建立在tcp连接的基础上的，为什么这里还要传递一个host呢？因为我们知道ip地址了，但是这个ip地址上可能有多个网站，所以这里要指定我们要访问的具体是哪个网站&lt;/p&gt;
&lt;p&gt;请求体的http请求下面的内容，里面存放一些信息。&lt;/p&gt;
&lt;p&gt;比如请求发送的服务端的域名是什么，希望接受的响应消息使用语言，请求消息体的长度等等；&lt;/p&gt;
&lt;p&gt;通常请求头有好多个，一个请求头占据一行&lt;/p&gt;
&lt;p&gt;单个请求头的格式是：名字：值&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e、请求体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请求的url，请求头中可存放一些数据信息，但是有些数据信息，往往需求存放在消息体中国；特别是post，put的请求，添加，修改的数据信息通常都是存放在请求消息体中的；&lt;/p&gt;
&lt;p&gt;如果HTTP请求有消息体，协议规定，需要在消息头和消息体之间插入一个空行，隔开他们；&lt;/p&gt;
&lt;p&gt;请求消息体中保存了要提交个服务端的数据信息&lt;/p&gt;
&lt;p&gt;比如：客户端要上传一个文件给服务器，就可以通过http请求发送文件数据给服务端；&lt;/p&gt;
&lt;p&gt;文件的数据就应该在请求的消息体中&lt;/p&gt;
&lt;p&gt;请求的消息体通常是某种格式的字符串，常见的有三种，但是最常用的还是json格式&lt;/p&gt;
&lt;p&gt;Json&lt;/p&gt;
&lt;p&gt;Xml&lt;/p&gt;
&lt;p&gt;www-form-urlencoded&lt;/p&gt;
&lt;p&gt;后面会有详细的描述&lt;/p&gt;

&lt;p&gt;request payload就是一个请求体，下面这个格式就是Json格式的消息体&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191220234913215-1161454230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;请求体中不仅仅可以存放字符串，还可以放二进制信息，比如以下视频、文本之类的，用于我们上传文件的场景，不过通常接口测试不会涉及二进制信息，都是字符串信息，后面我会专门写一篇博客来介绍如何上传文件&lt;/p&gt;

&lt;h4&gt;2、http响应&lt;/h4&gt;
&lt;p&gt;响应的消息我们重点关注状态码&lt;/p&gt;
&lt;p&gt;a、2xx&lt;/p&gt;
&lt;p&gt;通常表示请求消息没有问题，而且服务器也正确处理了&lt;/p&gt;
&lt;p&gt;b、3xx&lt;/p&gt;
&lt;p&gt;这是重定向响应，常见的是是301、302，表示客户端的这个请求的url地址已经改变了，需要客户端重启发起一个请求到另外一个url&lt;/p&gt;
&lt;p&gt;c、400&lt;/p&gt;
&lt;p&gt;表示客户端请求不符合接口要求，比如格式完全错误&lt;/p&gt;
&lt;p&gt;d、401&lt;/p&gt;
&lt;p&gt;表示客户端需要先认证才能发送请求&lt;/p&gt;
&lt;p&gt;e、403&lt;/p&gt;
&lt;p&gt;表示客户端美誉哦权限要求服务器处理这样的请求，比如普通用户的没有管理员的权限&lt;/p&gt;
&lt;p&gt;f、404&lt;/p&gt;
&lt;p&gt;表示客户端方法的url不存在&lt;/p&gt;
&lt;p&gt;g、5xx&lt;/p&gt;
&lt;p&gt;表示服务端在处理请求中，发送了未知错误，通常是服务端的代码设计的问题，或者服务端系统出了故障了&lt;/p&gt;

&lt;p&gt;有了以上的基础，我们就可以做web的接口测试了&lt;/p&gt;
&lt;h3&gt;二、接口测试&lt;/h3&gt;
&lt;h4&gt;1、什么是接口测试&lt;/h4&gt;
&lt;p&gt;我们通常说的接口测试，其实就是对软件系统的消息交互接口的参数，消息交互接口是软件系统和其他软件系统交互的那部分，比如，你正在用浏览器使用一个网站，浏览器和后端服务器之间就是消息交互的；在比如，你手机上使用美团订餐，美团app和美团服务器之间，也是消息交互的，当你提交订单，使用功能微信支付的时候，美团服务器和微信服务器之间也是通过消息交互的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221000500062-1992000550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;接口测试就是&lt;/p&gt;
&lt;p&gt;依据接口规范，写出测试用例&lt;/p&gt;
&lt;p&gt;使用软件工具，直接通过消息接口对被测系统进行消息收发&lt;/p&gt;
&lt;p&gt;验证被测系统行为是否正确&lt;/p&gt;

&lt;p&gt;目前软件系统之间的消息接口大部分是基于HTTP协议收发的&lt;/p&gt;
&lt;p&gt;HTTP协议的特点是，客户端发出一个HTTP请求给服务端，服务端就返回一个HTTP相应，好像API程序调用；&lt;/p&gt;
&lt;p&gt;所有接口测试通常又被称为API接口测试或者WEB API接口测试&lt;/p&gt;

&lt;p&gt;API接口传递数据信息是通过HTTP协议进行收发的，网站获取网页，图片，css等资源，也是通过HTTP协议进行收发的&lt;/p&gt;
&lt;p&gt;那么这两者有什么区别呢？为什么获取网页，图片这些HTTP消息不叫做API接口消息呢？&lt;/p&gt;
&lt;p&gt;网页，图片，css这些资源都是静态资源，就是一个一个文件存储在服务器中，获取这些消息，服务端直接读取文件，返回给客户端即可，无需特别的数据处理&lt;/p&gt;

&lt;p&gt;而API接口请求消息，通常都需要服务端程序进行一番处理，比如对请求的权限检查，从数据库中读出数据，进行消息过滤和格式转换，最后在HTTP响应中返回给客户端&lt;/p&gt;
&lt;p&gt;接口测试需要工具和被测系统之间进行消息的收发，这个工具可以是别人开发的，也可以自己开发，基于HTTP的接口测试工具有Postman，Jmeter等&lt;/p&gt;

&lt;h4&gt;2、fiddler工具&lt;/h4&gt;
&lt;p&gt;这里我们使用python语言中的requests库和fiddler抓包工具&lt;/p&gt;
&lt;p&gt;Fiddler：代理式抓包&lt;/p&gt;
&lt;p&gt;大家一定会反问，我的浏览器就是可以抓包了，为什么还要安装fiddler，多此一举？&lt;/p&gt;
&lt;p&gt;其实不然，因为我们是用python的requests库去做接口测试，浏览器是抓不到我们发的请求的，所以需要安装fiddler来抓包，确保我们发送的http请求是正确的&lt;/p&gt;

&lt;p&gt;fiddler启动后，会启动一个代理服务器，监听在8888端口上，http客户端需要设置fiddler作为代理，把http请求消息发送给fiddler，fiddler转发http消息给服务端，服务端返回消息也是先返回给fiddler。再由fidddler转发给客户端&lt;/p&gt;
&lt;p&gt;如下图所示&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221001823164-1740517957.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;fiddler安装后，会默认配置操作系统级别的代理，可以通过下面的方式查看&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221001925276-1296773667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;安装fiddler需要配置一个过滤项，因为默认fiddler是作为一个系统代理，所以fiddler抓到包会很多，所以需要配置一个过滤项&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221002040306-714867979.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;同样，这里的配置是支持通配符的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221002057663-1043256364.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;抓包&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221002145773-798436540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;查看原始的请求消息&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221002207945-1226757813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;我们可以在python代码里配置代理，然后通过fiddler抓包来判断我们发的包是否准确，这里需要配置http和https协议的代理&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests

proxies = {
    &quot;http&quot;:&quot;127.0.0.1:8888&quot;,
    &quot;http1&quot;: &quot;127.0.0.1:8888&quot;
}

res = requests.get(
    url = &quot;htt://www.baidu.com&quot;,
    proxies = proxies
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们可以通过fiddler进行抓包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221002955568-1665329187.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;


&lt;p&gt;fiddler如果 要配置手机抓包代理，需要保证安装fiddler和手机在同一个局域网中&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221003111315-904809346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在手机的无线网络处配置代理，代理指向运行fiddler的电脑的ip即可，端口是8888&lt;/p&gt;

&lt;h4&gt;3、requests库的请求&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;a、构建请求的url参数，这个一般在get请求使用较多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么是url参数&lt;/p&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
https://www.baidu.com/s?wd=iphone&amp;amp;res_spt=1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;问号后面的部分wd=iphone&amp;amp;res_spt=1就是url参数，每个参数之间就用&amp;amp;隔开的。&lt;/p&gt;
&lt;p&gt;上面的例子中有两个参数wd和res_spt，他们的值分别iphone和1&lt;/p&gt;
&lt;p&gt;url参数参数的格式，有个术语叫urlencoded格式&lt;/p&gt;

&lt;p&gt;使用requests发送HTTP请求，url里面的参数，通常可以直接在url里面，比如&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221003558103-1444462416.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;但是有的时候，我们的url中参数里面有特殊字符，比如参数中的值包含了一个&amp;amp;这个符号或者参数很多的话，我们可以采用下面的方法，构建一个字典，然后把这个字典传递给params参数 &lt;/p&gt;
&lt;p&gt;也可以用下面的方式传递url参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
res = requests.get(
    url = &quot;http://www.baidu.com/&quot;,
    params = {
        &quot;wd&quot;:&quot;iphone&quot;,
        &quot;res_spt&quot;:&quot;1&quot;
    },
    proxies = proxies
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;b、构建请求消息头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的时候，我们需要自定义一些http的消息头&lt;/p&gt;
&lt;p&gt;每个消息头也就是一种键值对的格式存放数据，在requests，只需要把抓包中的请求头信息放在一个字典中，然后传递headers即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
res = requests.get(
    url = &quot;http://www.baidu.com/&quot;,
    headers = {
        &quot;Host&quot;: &quot;192.168.3.1&quot;,
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;
        },
    params = {
        &quot;wd&quot;:&quot;iphone&quot;,
        &quot;res_spt&quot;:&quot;1&quot;
    },
    proxies = proxies
)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;c、构建请求的消息体&lt;/h4&gt;
&lt;p&gt;当我们进行api接口测试的时候，根据接口规范，构建的http请求，通常需要构建消息体&lt;/p&gt;
&lt;p&gt;http的消息体就是一串字节，里面包含了一些信息，这些信息可能是文本，比如html网页作为消息体，也可能是视频，音频信息&lt;/p&gt;
&lt;p&gt;消息体可能很短，只有一个字节，比如字符a，也可能很长，有几百个字节&lt;/p&gt;
&lt;p&gt;最常见的消息体格式当然是表示网页内容的html&lt;/p&gt;
&lt;p&gt;当时在web api接口测试中，常见的HTTP消息体的格式有三种，urlencoded，json，xml&lt;/p&gt;
&lt;p&gt;注意：消息体采用什么格式，是由开发人员设计决定的，开发人员也可以自定义格式，但是我们通常不会自定义的&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;xml格式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;前面时候了，消息体就是存放信息的地方，信息的格式完全取决于设计者的需求，如果设计者决定使用xml格式传输一段信息，用requests库，只需要这样就可以了&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
playload = &quot;&quot;&quot;
    &amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
    &amp;lt;methodCall&amp;gt;
        &amp;lt;methodName&amp;gt;examples.getStateName&amp;lt;/methodName&amp;gt;
        &amp;lt;params&amp;gt;
            &amp;lt;param&amp;gt;
                &amp;lt;value&amp;gt;&amp;lt;i4&amp;gt;41&amp;lt;/i4&amp;gt;&amp;lt;/value&amp;gt;
            &amp;lt;/param&amp;gt;
        &amp;lt;/params&amp;gt;
    &amp;lt;/methodCall&amp;gt;&quot;&quot;&quot;

res2 = requests.post(
    url = &quot;http://www.baidu.com/&quot;,
    headers = {
        &quot;Host&quot;: &quot;192.168.3.1&quot;,
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,
        &quot;Content-Type&quot;: &quot;text/xml&quot;
        },
    data=playload.encode(&quot;utf-8&quot;),
    proxies = proxies
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于消息体都是字节串，我们直接把字符串使用utf-8解码，然后传递给data参数即可，这里需要注意，需要设置Content-type=text/xml&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221010248450-607256831.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;使用data参数，存储消息体的数据，如果传递的是一个字符串，在http请求中，需要编码为字节码，默认的编码格式latin-1，这种编码格式是不支持中文的；通常我们使用utf-8的编码格式&lt;/p&gt;
&lt;p&gt;通过fiddler抓包&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221011733380-858448030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;查看请求的原始信息&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221011802679-1244039241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221011822870-821188692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;Urlencoded格式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种格式的消息体就是一个key-value键值对的格式存放数据，如下所示&lt;/p&gt;
&lt;p&gt;key1=value1&amp;amp;key2=value2&lt;/p&gt;

&lt;p&gt;Requests发送这样的数据，当然可以直接把这种格式的字符串传入到data参数里；但是这样写的话，如果参数本身就有特殊字符，比如等号，就会有歧义&lt;/p&gt;
&lt;p&gt;我们还有更方便的方法，只需要将这些键值对的数据构建一个字典，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
playload = {
    &quot;key1&quot;:&quot;value1&quot;,
    &quot;key2&quot;:&quot;value2&quot;
}

res2 = requests.post(
    url = &quot;http://www.example.com&quot;,
    headers = {
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,
        &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded;charset=utf-8&quot;
        },
    data=playload,
    proxies = proxies
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里需要注意下面2个地方&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221010923970-848167277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;通过fiddler抓包&lt;/p&gt;
&lt;p&gt;先看请求头&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221011403103-1500179107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这里明显可以看到，请求头和请求体中间有一个空行&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221011439401-463156176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;看下请求体中的数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221011548766-1646066268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;Json格式的消息体&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Json字符串一律用双引号，不能用单引号&lt;/p&gt;
&lt;p&gt;Json字符串最后一个元素的后面不能加逗号&lt;/p&gt;

&lt;p&gt;其实我们要把数据放到消息体中，最终的数据都是字节串，也就是把str.encode()&lt;/p&gt;
&lt;p&gt;json格式当前被web api接口广泛采用&lt;/p&gt;
&lt;p&gt;json是一种表示数据的语法格式，他和python表示数据的语法非常像&lt;/p&gt;
&lt;p&gt;json格式有两种方式构建消息体&lt;/p&gt;
&lt;p&gt;方式1&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
playload = {&quot;title&quot;: &quot;test&quot;, &quot;sub&quot;: [1, 2, 3]}
res2 = requests.post(
    url = &quot;http://www.example.com&quot;,
    headers = {
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,
        &quot;Content-Type&quot;: &quot;application/json;charset=utf-8&quot;
        },
    json=playload,
    proxies = proxies
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意下面这里&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221012532416-317937958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;方式2&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;51&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import json
playload = {&quot;title&quot;: &quot;test&quot;, &quot;sub&quot;: [1, 2, 3]}
res3 = requests.post(
    url = &quot;http://www.example.com&quot;,
    headers = {
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,
        &quot;Content-Type&quot;: &quot;application/json;charset=utf-8&quot;
        },
    data = json.dumps(playload,ensure_ascii=False).encode(&quot;utf-8&quot;),
    proxies = proxies
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意下面这里&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221012608219-982258775.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;4、requests库的响应&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;a、检查HTTP响应状态码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要检查HTTP响应的状态码，直接通过response对象的status_code属性获取&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;51&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import json
playload = {&quot;title&quot;: &quot;test&quot;, &quot;sub&quot;: [1, 2, 3]}
res3 = requests.post(
    url = &quot;http://www.example.com&quot;,
    headers = {
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,
        &quot;Content-Type&quot;: &quot;application/json;charset=utf-8&quot;
        },
    data = json.dumps(playload,ensure_ascii=False).encode(&quot;utf-8&quot;),
    proxies = proxies
)


print(res3.status_code)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果发现返回的结果状态码就是200&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221232130641-2059189037.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;如果故意写一个不存在的地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests

proxies = {
    &quot;http&quot;:&quot;127.0.0.1:8888&quot;,
    &quot;http1&quot;: &quot;127.0.0.1:8888&quot;
}

res = requests.get(
    url = &quot;http://192.168.3.1/html/index4.html&quot;,
    proxies = proxies
)

print(res.status_code)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果发现返回的状态码就是404&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221232644549-333784629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;b、检查响应的消息头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要检查HTTP响应的消息头，直接通过response对象的header属性获取&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;52&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import json
import requests
import pprint
playload = {&quot;title&quot;: &quot;test&quot;, &quot;sub&quot;: [1, 2, 3]}
proxies = {
    &quot;http&quot;:&quot;127.0.0.1:8888&quot;,
    &quot;http1&quot;: &quot;127.0.0.1:8888&quot;
}
res3 = requests.post(
    url = &quot;http://www.example.com&quot;,
    headers = {
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,
        &quot;Content-Type&quot;: &quot;application/json;charset=utf-8&quot;
        },
    data = json.dumps(playload,ensure_ascii=False).encode(&quot;utf-8&quot;),
    proxies = proxies
)


print(pprint.pprint(dict(res3.headers)))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果如下&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221233419634-563023470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;






&lt;p&gt;&lt;strong&gt;c、检查响应消息体的文本内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面我们已经说过，要获取响应的消息体的文本内容，直接通过response对象的text属性即可获取&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests
import pprint
#
proxies = {
    &quot;http&quot;:&quot;127.0.0.1:8888&quot;,
    &quot;http1&quot;: &quot;127.0.0.1:8888&quot;
}
#
res = requests.get(
    url = &quot;http://mirrors.sohu.com&quot;,
    proxies = proxies
)
#
#
# print(res.text)
print(pprint.pprint(dict(res.headers)))
print(res.encoding)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;响应体其实也是字节串，但是我们调用text方法没有设置解码格式，他是怎么解码？他是根据响应头的contend-type来决定解码格式，有的时候会指定，但是大部分不会指定&lt;/p&gt;
&lt;p&gt;我们&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221233928946-315508693.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;我们可以看到我们打印的解码格式，和content-Type中是一样的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221234006380-2033983930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;如果有的时候中文解码出来是乱码，我们可以手动指定解码格式&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221234119148-197469811.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;如果我们想打印响应体的字节串可以使用content方法&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221234246392-1786736123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;h4&gt;5、session&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;a、原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们来思考一个问题，一个网站，比如一个购物网站，服务成千上万的的客户，那么多客户同时访问网站，挑选物品，购物估算，都是通过hTTP请求来访问网站的，这个网站的服务端怎么区分每个HTTP请求呢？网站的服务端是怎么实现的？&lt;/p&gt;
&lt;p&gt;一种最常见的方式就是：通过Session+cookies机制&lt;/p&gt;
&lt;p&gt;session翻译成中文就是会话的意思&lt;/p&gt;
&lt;p&gt;session大体的原理如下面2个图&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221235030099-1301981027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191221235449067-37846820.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;







&lt;p&gt;http协议规定了，网站的服务端放HTTP响应的消息头set-Cookies里面的数据，叫做cookies数据，浏览器客户端必须要保存下来。而且后续访问该网站，必须在http的请求头Cookies中携带保存的所有的cookie数据&lt;/p&gt;
&lt;p&gt;用户使用客户端登陆服务端，服务端进行验证，比如验证用户名和密码，验证通过后，服务端系统高就会为这次登陆创建一个seesion，同时创建一个唯一的sessionID。标志这个session。然后，服务端通过HTTP响应，把sessionID告诉客户端，客户端在后面的HTTP请求的消息头，都要包含这个sessionID。这样服务端就会知道，这个供求对应哪个session，从而知道这次的请求对应哪个用户；&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191222000435244-290876578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;从上图可以看出，服务端是通过HTTP的响应头set-cookies把产生的sessionID告诉客户端。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201912/1101486-20191222000506431-179718828.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;客户端的后续请求，是通过HTTP请求的请求头Cookies告诉服务端他所持有的sessionid的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b、request库支持session的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;request处理session-cookies&lt;/p&gt;
&lt;p&gt;我们在python代码中如果接收到服务器的http响应，其他set-cookies的数据怎么保存呢？后续怎么样把请求消息头中cookies中呢？&lt;/p&gt;
&lt;p&gt;前面学过HTTP响应中如何获取响应头，构建请求怎么设置请求头，完全可以处理。&lt;/p&gt;
&lt;p&gt;但是requests库为我们这个处理&lt;/p&gt;
&lt;p&gt;requests库给我们提供了一个session类。通过这个类，无需我们操心cookies和session这个事情。reqeusts库会自动帮我们保存服务端发挥的cookies数据，HTTP请求自动在消息头中放入cookies数据&lt;/p&gt;
&lt;p&gt;如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;52&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests
import json
session = requests.session()

playload = {&quot;title&quot;: &quot;test&quot;, &quot;sub&quot;: [1, 2, 3]}
proxies = {
    &quot;http&quot;:&quot;127.0.0.1:8888&quot;,
    &quot;http1&quot;: &quot;127.0.0.1:8888&quot;
}

res = session.post(
    url = &quot;http://www.example.com&quot;,
    headers = {
        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;,
        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&quot;,
        &quot;Accept-Encoding&quot;:&quot;gzip, deflate, sdch&quot;,
        &quot;Content-Type&quot;: &quot;application/json;charset=utf-8&quot;
        },
    data = json.dumps(playload,ensure_ascii=False).encode(&quot;utf-8&quot;),
    proxies = proxies
)



res = session.get()
&lt;/pre&gt;&lt;/div&gt;


</description>
<pubDate>Sat, 21 Dec 2019 16:44:00 +0000</pubDate>
<dc:creator>bainianminguo</dc:creator>
<og:description>最近给公司的新员工培训web api接口测试，发现这一块的内部需求还比较大，不仅仅是新员工，包括一些经常写接口测试老员工，对接口也是似懂非懂的，所以我绝对有必要写一篇博客来普及下。 在我们公司内部，一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bainianminguo/p/12078838.html</dc:identifier>
</item>
<item>
<title>浅谈编程语言的本质 - 小二十七</title>
<link>http://www.cnblogs.com/xiao2shiqi/p/12078822.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiao2shiqi/p/12078822.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://graph.baidu.com/resource/2222065e15eabe615697901576944097.png&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;
&lt;p&gt;最近博客和公众号文章差不多有二个多月没有更新了，相比之前每月一篇文章的更新频率，最近确实懒散了许多，一来年底收尾之际手上的工作繁重抽不出时间，二来自己最近的空闲时间的学习计划也排的紧密，久而久之就把写博客是事情落下了&lt;/p&gt;
&lt;p&gt;但是也得益于自己之前坚持写博客的习惯，累积了一些读者，我们知道人都是有惰性的，但每次想偷懒不写博客的时候，看到订阅栏里面读者就觉得心生愧疚，我想这也是开放分享的一个好处，就是通过的外部力量去督促你去坚持下去，经过实践，这确实是一种非常好的方式&lt;/p&gt;
&lt;p&gt;为什么会想写这篇文章？主要有如下几个原因&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;我最近利用空闲时间学习了一门新的编程语言，学习过程中有很多不同的体验和大家分享&lt;/li&gt;
&lt;li&gt;我发现很多文章只有当下才能写出来，所以我想把握好时机（例如我曾经写过&lt;a href=&quot;https://www.cnblogs.com/xiao2shiqi/p/11301052.html&quot;&gt;红黑树&lt;/a&gt;的文章，但是由于近期工作原因疏忽了算法的练习，所以我当下的状态肯定是再也写不出红黑树的代码了，甚至连反转双向链表都写不出来）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;今天想写下关于编程语言的本质，这个命题很大，所以只是从浅显的层次上谈一谈，从应用层面聊聊不同语言的差异，因为我未曾有时间深入学习过&lt;a href=&quot;https://book.douban.com/subject/3296317/&quot;&gt;《编译原理》&lt;/a&gt;（也是大家俗称的龙书），所以并未深入到编译原理等层次上，还请见谅&lt;/p&gt;
&lt;h4 id=&quot;正文&quot;&gt;正文&lt;/h4&gt;
&lt;p&gt;先抛出我的个人观点：编程语言的本质就是规则&lt;/p&gt;
&lt;p&gt;经历是我上两周花了周末两天的时间，学习了一门新的编程语言，并且在第三天就写了一个类似购物商城的简单程序，学完后我就在反复思考，为什么可以在熟悉一门编程语言后，再去学习其他的编程语言，可以仅仅花费几天时间就可以掌握，而我在学习第一门编程语言的时候却足足花费了半年时间才觉得自己仅仅入门？&lt;/p&gt;
&lt;p&gt;带着这个疑问我开始思考问题，我的学习路径是这样，我入门编程语言学的是 Java，后面自学了 JavaScript，Groovy，Ruby， 自我计划后续还继续打算深入学习 C 和 GO 语言，想学习 C 和 GO 主要是有以下几个目的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;主要是希望对操作系统底层能有更深入的理解（操作系统，数据库等基础软件都是 C 写的）&lt;/li&gt;
&lt;li&gt;目前的计算机世界是建立的 C 的基础之上的，不管是什么牛逼的软件，深入到底层都是 C 的源码&lt;/li&gt;
&lt;li&gt;学习 C 语言是为了更好的理解 GO 语言（GO 的创始人也就是 C 的创始人，没错就是 &lt;a href=&quot;https://baike.baidu.com/item/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A/7585160&quot;&gt;Ken Thompson&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;学习 GO 语言主要是希望对 PAAS 层有更深入的理解（Docker 和 Kunbernate 就是 GO 语言的代表作）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://graph.baidu.com/resource/222ca625ba6f5b19a37f501576944307.png&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图片来自 Medium：&lt;a href=&quot;https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65&quot;&gt;Why should you learn Go?&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;关于语言的应用场景，这方面我们就不继续展开讨论了，回到文章的主题，浅谈编程语言的本质，经过思考后我认为，任何一门编程语言实际上是包含了两种内容&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;知识（编程语言的共性，可迁移）&lt;/li&gt;
&lt;li&gt;规则（编程语言的特性，不可迁移）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;知识说是共性，是因为它面向所有编程语言通用，例如知识包含对以下内容的理解：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;数据类型&lt;/li&gt;
&lt;li&gt;流程控制&lt;/li&gt;
&lt;li&gt;逻辑控制&lt;/li&gt;
&lt;li&gt;异常处理&lt;/li&gt;
&lt;li&gt;集合容器&lt;/li&gt;
&lt;li&gt;并发模型&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以以上内容解释了，为什么入门学习编程语言这么慢？是因为你在刚刚接触第一门编程语言的时候，其实你面对的是两个知识体系的内容，既共性内容（知识）+ 特性内容（规则），例如你刚学习 Java 你除了需要去学习什么是布尔值 Boolean，整型 Integer，浮点 Float，字符串 String，这些通用的“知识”外，你还需要去学习它的规则，常见的 Java 语言规则就包含以下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;继承，接口的使用规则&lt;/li&gt;
&lt;li&gt;多态，面向对象的使用规则&lt;/li&gt;
&lt;li&gt;类和内部类的使用规则&lt;/li&gt;
&lt;li&gt;等等……&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如果明白了编程语言的本质后，你会发现共性的知识只要学习一遍就可以了，当你理解知识再去学习其他语言的时候，你会发现你学习一门新的语言并不是从零开始，你熟悉的共性知识都出现在你要学习的新语言里面，万变不离其宗，因为任何编程语言都无法跳过这些基础知识，正是这是知识加速你对新语言的学习理解，所以你只需要学习新语言的规则就可以了，了解下它的逻辑控制，异常怎么玩，有什么新特性，适用于什么场景，这都为你节省了大量的时间和精力&lt;/p&gt;
&lt;p&gt;例如 Ruby 我只需要大概了解它的 Meta Programing 怎么玩，逻辑和流程控制符的规则，Java 我只需要大概知道它的异常体系，接口，继承和封装怎么玩，泛型和相应的工具类怎么用就可以上手了&lt;/p&gt;
&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;
&lt;p&gt;今天写这篇文章自己在学习新语言中的体会，也刚好解释了一个问题，就是为什么很多程序员可以同时掌握多门语言？他们是怎么做到的？他们为什么会那么多的精力？&lt;/p&gt;
&lt;p&gt;其实答案就是，首先能区分和抽离 不同编程语言的基础共性（知识） + 不同编程语言的特性（规则），先把编程语言的共性练习的足够扎实，再去学习不同语言的特性规则，其实新语言学起来就容易得多，然后就是随着使用实践增加熟练程度，最后对整体架构的掌握，就可以做到熟练的切换和玩多种不同编程语言的程序&lt;/p&gt;
&lt;p&gt;这虽然是看似很 coooool 的事情，但是背后都是付出的都是持续关注和投入时间，精力的过程，所以不要觉得很简单，也不要觉得很困难，很多事情如果喜欢，做就是了。&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 16:29:00 +0000</pubDate>
<dc:creator>小二十七</dc:creator>
<og:description>前言 最近博客和公众号文章差不多有二个多月没有更新了，相比之前每月一篇文章的更新频率，最近确实懒散了许多，一来年底收尾之际手上的工作繁重抽不出时间，二来自己最近的空闲时间的学习计划也排的紧密，久而久之</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiao2shiqi/p/12078822.html</dc:identifier>
</item>
<item>
<title>使用littlefs-fuse在PC端调试littlefs文件系统 - zqb-all</title>
<link>http://www.cnblogs.com/zqb-all/p/12078659.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zqb-all/p/12078659.html</guid>
<description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;littlefs是arm面向嵌入式设备推出的一款掉电安全的小型文件系统，具有抗掉电，动态磨损均衡，RAM/ROM需求少等特点，具体介绍可见 &lt;a href=&quot;https://github.com/ARMmbed/littlefs&quot; class=&quot;uri&quot;&gt;https://github.com/ARMmbed/littlefs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作为一款在嵌入式设备上使用的文件系统，出问题时，一般是需要将数据dump出来进行分析的。此时就需要PC端的调试工具了。&lt;/p&gt;
&lt;h2 id=&quot;littlefs-fuse简介&quot;&gt;littlefs-fuse简介&lt;/h2&gt;
&lt;p&gt;这个项目提供了一个littlefs的FUSE封装，也就是你可以借助此项目，在PC上直接将littlefs镜像挂载起来，并正常进行一些文件系统的操作。&lt;/p&gt;
&lt;p&gt;源码位于：&lt;a href=&quot;https://github.com/ARMmbed/littlefs-fuse&quot; class=&quot;uri&quot;&gt;https://github.com/ARMmbed/littlefs-fuse&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;结构&quot;&gt;结构&lt;/h2&gt;
&lt;p&gt;我们直接下载下来&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt; $ git clone https://github.com/ARMmbed/littlefs-fuse.git
 $ cd littlefs-fuse&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先看下结构&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;$ tree -L 2

.
├── lfs_fuse_bd.c
├── lfs_fuse_bd.h
├── lfs_fuse.c
├── LICENSE.md
├── littlefs
│   ├── DESIGN.md
│   ├── emubd
│   ├── lfs.c
│   ├── lfs.h
│   ├── lfs_util.c
│   ├── lfs_util.h
│   ├── LICENSE.md
│   ├── Makefile
│   ├── README.md
│   ├── scripts
│   ├── SPEC.md
│   └── tests
├── Makefile
└── README.md&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;外层是封装，里面则直接包含了littlefs文件夹。当我们需要特定版本的littlefs，例如使用跟设备上同一版本的littlefs时，只需要替换掉里层的这个littlefs即可，非常方便。&lt;/p&gt;
&lt;h2 id=&quot;编译&quot;&gt;编译&lt;/h2&gt;
&lt;p&gt;根据README，项目依赖 FUSE version 2.6及以上的版本，可以使用如下命令查看版本&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;fusermount -V&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外还需要安装下 libfuse-dev:&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;sudo apt-get install libfuse-dev&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;依赖项满足之后，直接make即可生成lfs应用程序&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;生成设备并挂载使用&quot;&gt;生成设备并挂载使用&lt;/h2&gt;
&lt;p&gt;首先需要造一个块设备出来&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;sudo chmod a+rw /dev/loop0                  # make loop device user accessible
dd if=/dev/zero of=image bs=512 count=2048  # create a 1MB image
losetup /dev/loop0 image                    # attach the loop device&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们上一步是dd生成了一个空的image，所以需要先格式化，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./lfs --format /dev/loop0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再挂载&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir -p mount
./lfs /dev/loop0 mount&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;挂载成功后，执行mount可以看到挂载情况&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ mount | grep lfs
/home/zhuangqiubin/debug_littlefs/littlefs-fuse/lfs on /home/zhuangqiubin/debug_littlefs/littlefs-fuse/mount type fuse.lfs (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在就可以在mount目录下，随意进行操作了，创建删除读出写入，都会被转换成littlefs的操作，最终作用到image上&lt;/p&gt;
&lt;p&gt;过程中，可以随时dump出数据，就可以看到你的操作，最终存储到littlefs上时什么样的数据格式了，例如&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ echo &quot;www.cnblogs.com/zqb-all/&quot; &amp;gt;&amp;gt; mount/test_littlefs.txt

$ hexdump -C image
00000000  03 00 00 00 f0 0f ff f7  6c 69 74 74 6c 65 66 73  |........littlefs|
00000010  2f e0 00 10 00 00 02 00  00 02 00 00 00 08 00 00  |/...............|
00000020  ff 00 00 00 ff ff ff 7f  fe 03 00 00 20 00 04 09  |............ ...|
00000030  74 65 73 74 5f 6c 69 74  74 6c 65 66 73 2e 74 78  |test_littlefs.tx|
00000040  74 20 00 00 11 70 0f f9  b7 ee c0 48 bb ff ff ff  |t ...p.....H....|
00000050  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
*
00000200  04 00 00 00 f0 0f ff f7  6c 69 74 74 6c 65 66 73  |........littlefs|
00000210  2f e0 00 10 00 00 02 00  00 02 00 00 00 08 00 00  |/...............|
00000220  ff 00 00 00 ff ff ff 7f  fe 03 00 00 20 00 04 09  |............ ...|
00000230  74 65 73 74 5f 6c 69 74  74 6c 65 66 73 2e 74 78  |test_littlefs.tx|
00000240  74 20 00 00 08 77 77 77  2e 63 6e 62 6c 6f 67 73  |t ...www.cnblogs|
00000250  2e 63 6f 6d 2f 7a 71 62  2d 61 6c 6c 2f 0a 70 0f  |.com/zqb-all/.p.|
00000260  f9 87 46 fe c1 ad ff ff  ff ff ff ff ff ff ff ff  |..F.............|
00000270  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
*
00000400  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00100000
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用完毕之后，用以下命令卸载&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;umount mount
sudo losetup -d /dev/loop0&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;挂载一个指定镜像&quot;&gt;挂载一个指定镜像&lt;/h2&gt;
&lt;p&gt;以上是生成了空的镜像，格式化再挂载。如果要挂载一个现成的镜像，步骤也是差不多的，只是镜像换一下。假设现成的镜像叫littlefs.img，则&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;sudo chmod a+rw /dev/loop0                  # make loop device user accessible
losetup /dev/loop0 littlefs.img                    # attach the loop device
mkdir -p mount
./lfs /dev/loop0 mount&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;卸载命令没有差别&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;umount mount
sudo losetup -d /dev/loop0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但从设备上dump出的littlefs镜像，其配置不一定会跟littlefs-fuse的默认配置匹配。&lt;/p&gt;
&lt;p&gt;此时为了能正确挂载，以及准确地模拟littlefs在设备上运行的情况，我们需要将配置改成一样的。&lt;/p&gt;
&lt;p&gt;解决方式一，直接修改源码，例如&lt;/p&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;diff --git a/lfs_fuse.c b/lfs_fuse.c
index 3c87dad..d1a99a2 100644
--- a/lfs_fuse.c
+++ b/lfs_fuse.c
@@ -26,7 +26,16 @@
 
 
 // config and other state
-static struct lfs_config config = {0};
+/* static struct lfs_config config = {0}; */
+static struct lfs_config config = {
+    .read_size = 256,
+    .prog_size = 256,
+    .block_size = 4096,
+    .block_count = 1224,
+    .block_cycles = 512,
+    .cache_size = 256,
+    .lookahead_size = 32
+};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改后重新make生成即可&lt;/p&gt;
&lt;p&gt;解决方式二，在调用的时候，通过命令行参数指定，例如&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;./lfs --block_size=512 --format /dev/loop0
./lfs --block_size=512 /dev/loop0 mount&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;支持的选项，可以在help中找到&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$lfs -h
usage: ./lfs [options] device mountpoint

general options:
    -o opt,[opt...]        FUSE options
    -h   --help            print help
    -V   --version         print version

littlefs options:
    --format               format instead of mounting
    --migrate              migrate previous version  instead of mounting
    -b   --block_size      logical block size, overrides the block device
    --block_count          block count, overrides the block device
    --block_cycles         number of erase cycles before eviction (512)
    --read_size            readable unit (block_size)
    --prog_size            programmable unit (block_size)
    --cache_size           size of caches (block_size)
    --lookahead_size       size of lookahead buffer (8192)
    --name_max             max size of file names (255)
    --file_max             max size of file contents (2147483647)
    --attr_max             max size of custom attributes (1022)

FUSE options:
    -d   -o debug          enable debug output (implies -f)
    -f                     foreground operation
    -s                     disable multi-threaded operation

    -o allow_other         allow access to other users
    -o allow_root          allow access to root
    -o auto_unmount        auto unmount on process termination
    -o nonempty            allow mounts over non-empty file/dir
    -o default_permissions enable permission checking by kernel
    -o fsname=NAME         set filesystem name
    -o subtype=NAME        set filesystem type
    -o large_read          issue large read requests (2.4 only)
    -o max_read=N          set maximum size of read requests

    -o hard_remove         immediate removal (don't hide files)
    -o use_ino             let filesystem set inode numbers
    -o readdir_ino         try to fill in d_ino in readdir
    -o direct_io           use direct I/O
    -o kernel_cache        cache files in kernel
    -o [no]auto_cache      enable caching based on modification times (off)
    -o umask=M             set file permissions (octal)
    -o uid=N               set file owner
    -o gid=N               set file group
    -o entry_timeout=T     cache timeout for names (1.0s)
    -o negative_timeout=T  cache timeout for deleted names (0.0s)
    -o attr_timeout=T      cache timeout for attributes (1.0s)
    -o ac_attr_timeout=T   auto cache timeout for attributes (attr_timeout)
    -o noforget            never forget cached inodes
    -o remember=T          remember cached inodes for T seconds (0s)
    -o nopath              don't supply path if not necessary
    -o intr                allow requests to be interrupted
    -o intr_signal=NUM     signal to send on interrupt (10)
    -o modules=M1[:M2...]  names of modules to push onto filesystem stack

    -o max_write=N         set maximum size of write requests
    -o max_readahead=N     set maximum readahead
    -o max_background=N    set number of maximum background requests
    -o congestion_threshold=N  set kernel's congestion threshold
    -o async_read          perform reads asynchronously (default)
    -o sync_read           perform reads synchronously
    -o atomic_o_trunc      enable atomic open+truncate support
    -o big_writes          enable larger than 4kB writes
    -o no_remote_lock      disable remote file locking
    -o no_remote_flock     disable remote file locking (BSD)
    -o no_remote_posix_lock disable remove file locking (POSIX)
    -o [no_]splice_write   use splice to write to the fuse device
    -o [no_]splice_move    move data while splicing to the fuse device
    -o [no_]splice_read    use splice to read from the fuse device

Module options:

[iconv]
    -o from_code=CHARSET   original encoding of file names (default: UTF-8)
    -o to_code=CHARSET      new encoding of the file names (default: UTF-8)

[subdir]
    -o subdir=DIR       prepend this directory to all paths (mandatory)
    -o [no]rellinks     transform absolute symlinks to relative&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;调试&quot;&gt;调试&lt;/h2&gt;
&lt;p&gt;既然可以在PC上模拟挂载和读写，那首先最直观的，就是可以在littlefs的源码中按需添加调试代码，再重新挂载dump出来的镜像，通过打印来分析问题。&lt;/p&gt;
&lt;p&gt;其次，必要的时候，我们还可以上gdb&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;make DEBUG=1 clean all                # build with debug info
gdb --args ./lfs -d /dev/loop0 mount  # run with gdb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本文地址：https://www.cnblogs.com/zqb-all/p/12078659.html&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 16:13:00 +0000</pubDate>
<dc:creator>zqb-all</dc:creator>
<og:description>背景 littlefs是arm面向嵌入式设备推出的一款掉电安全的小型文件系统，具有抗掉电，动态磨损均衡，RAM/ROM需求少等特点，具体介绍可见 'https://github.com/ARMmbed</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zqb-all/p/12078659.html</dc:identifier>
</item>
<item>
<title>MySQL必知必会-官方数据库表及SQL脚本导入生成 - 滑稽zlx</title>
<link>http://www.cnblogs.com/zhoulixiangblog/p/12078724.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoulixiangblog/p/12078724.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 50612
 Source Host           : localhost:3306
 Source Schema         : zlx_mysql

 Target Server Type    : MySQL
 Target Server Version : 50612
 File Encoding         : 65001

 Date: 19/12/2019 23:03:46
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;SET&lt;/span&gt;&lt;span&gt; NAMES utf8mb4;
&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for customers&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `customers`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `customers`  (
  `cust_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `cust_name` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_address` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_city` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_state` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;5&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_zip` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_country` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_contact` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_email` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`cust_id`) USING BTREE
) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; InnoDB AUTO_INCREMENT &lt;span&gt;=&lt;/span&gt; &lt;span&gt;10006&lt;/span&gt; &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Compact;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Records of customers&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `customers` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;10001&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Coyote Inc.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;200 Maple Lane&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Detroit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MI&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;44444&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y Lee&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ylee@coyote.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `customers` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;10002&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mouse House&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;333 Fromage Lane&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Columbus&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;43333&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Jerry Mouse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `customers` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;10003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Wascals&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1 Sunny Place&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Muncie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;42222&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Jim Jones&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rabbit@wascally.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `customers` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;10004&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Yosemite Place&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;829 Riverside Drive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Phoenix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;AZ&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;88888&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y Sam&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sam@yosemite.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `customers` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;10005&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E Fudd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4545 53rd Street&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Chicago&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;54545&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E Fudd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for orderitems&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `orderitems`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `orderitems`  (
  `order_num` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `order_item` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `prod_id` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `quantity` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `item_price` &lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;(&lt;span&gt;8&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`order_num`, `order_item`) USING BTREE,
  &lt;/span&gt;&lt;span&gt;INDEX&lt;/span&gt;&lt;span&gt; `fk_orderitems_products`(`prod_id`) USING BTREE,
  &lt;/span&gt;&lt;span&gt;CONSTRAINT&lt;/span&gt; `fk_orderitems_products` &lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`prod_id`) &lt;span&gt;REFERENCES&lt;/span&gt; `products` (`prod_id`) &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;DELETE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;UPDATE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;CONSTRAINT&lt;/span&gt; `fk_orderitems_orders` &lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`order_num`) &lt;span&gt;REFERENCES&lt;/span&gt; `orders` (`order_num`) &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;DELETE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;UPDATE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt;&lt;span&gt;
) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; InnoDB &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Compact;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Records of orderitems&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20005&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;5.99&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20005&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;9.99&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20005&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;10.00&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20005&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;10.00&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20006&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JP2000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;55.00&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20007&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;10.00&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20008&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;, &lt;span&gt;2.50&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20009&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;10.00&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20009&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OL1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;8.99&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20009&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SLING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;4.49&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orderitems` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20009&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;14.99&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for orders&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `orders`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `orders`  (
  `order_num` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `order_date` &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `cust_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`order_num`) USING BTREE,
  &lt;/span&gt;&lt;span&gt;INDEX&lt;/span&gt;&lt;span&gt; `fk_orders_customers`(`cust_id`) USING BTREE,
  &lt;/span&gt;&lt;span&gt;CONSTRAINT&lt;/span&gt; `fk_orders_customers` &lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`cust_id`) &lt;span&gt;REFERENCES&lt;/span&gt; `customers` (`cust_id`) &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;DELETE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;UPDATE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt;&lt;span&gt;
) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; InnoDB AUTO_INCREMENT &lt;span&gt;=&lt;/span&gt; &lt;span&gt;20010&lt;/span&gt; &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Compact;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Records of orders&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orders` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20005&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-01 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10001&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orders` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20006&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-12 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10003&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orders` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20007&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-30 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10004&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orders` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20008&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-10-03 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10005&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `orders` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20009&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-10-08 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10001&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for productnotes&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `productnotes`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `productnotes`  (
  `note_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `prod_id` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `note_date` &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `note_text` &lt;/span&gt;&lt;span&gt;text&lt;/span&gt; &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`note_id`) USING BTREE,
  FULLTEXT &lt;/span&gt;&lt;span&gt;INDEX&lt;/span&gt;&lt;span&gt; `note_text`(`note_text`)
) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; MyISAM AUTO_INCREMENT &lt;span&gt;=&lt;/span&gt; &lt;span&gt;115&lt;/span&gt; &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Dynamic;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Records of productnotes&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;101&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-17 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Customer complaint:\r\nSticks not individually wrapped, too easy to mistakenly detonate all at once.\r\nRecommend individual wrapping.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;102&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OL1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-18 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Can shipped full, refills not available.\r\nNeed to order new can if refill needed.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;103&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAFE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-18 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Safe is combination locked, combination not provided with safe.\r\nThis is rarely a problem as safes are typically blown up or dropped by customers.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;104&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-19 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Quantity varies, sold by the sack load.\r\nAll guaranteed to be bright and orange, and suitable for use as rabbit bait.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;105&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-20 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Included fuses are short and have been known to detonate too quickly for some customers.\r\nLonger fuses are available (item FU1) and should be recommended.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;106&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-22 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Matches not included, recommend purchase of matches or detonator (item DTNTR).&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;107&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAFE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-23 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Please note that no returns will be accepted if safe opened using explosives.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;108&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-08-25 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Multiple customer returns, anvils failing to drop fast enough or falling backwards on purchaser. Recommend that customer considers using heavier anvils.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;109&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-01 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Item is extremely heavy. Designed for dropping, not recommended for use with slings, ropes, pulleys, or tightropes.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;110&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-01 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Customer complaint: rabbit has been able to detect trap, food apparently less effective now.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;111&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SLING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-02 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Shipped unassembled, requires common tools (including oversized hammer).&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;112&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAFE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-02 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Customer complaint:\r\nCircular hole in safe floor can apparently be easily cut with handsaw.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;113&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-05 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Customer complaint:\r\nNot heavy enough to generate flying stars around head of victim. If being purchased for dropping, recommend ANV02 or ANV03 instead.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `productnotes` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;114&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAFE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-09-07 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Call from individual trapped in safe plummeting to the ground, suggests an escape hatch be added.\r\nComment forwarded to vendor.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for products&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `products`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `products`  (
  `prod_id` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `vend_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `prod_name` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `prod_price` &lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;(&lt;span&gt;8&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `prod_desc` &lt;/span&gt;&lt;span&gt;text&lt;/span&gt; &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`prod_id`) USING BTREE,
  &lt;/span&gt;&lt;span&gt;INDEX&lt;/span&gt;&lt;span&gt; `fk_products_vendors`(`vend_id`) USING BTREE,
  &lt;/span&gt;&lt;span&gt;CONSTRAINT&lt;/span&gt; `fk_products_vendors` &lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`vend_id`) &lt;span&gt;REFERENCES&lt;/span&gt; `vendors` (`vend_id`) &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;DELETE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;UPDATE&lt;/span&gt; &lt;span&gt;RESTRICT&lt;/span&gt;&lt;span&gt;
) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; InnoDB &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Compact;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Records of products&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1001&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.5 ton anvil&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;5.99&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.5 ton anvil, black, complete with handy hook&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1001&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1 ton anvil&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;9.99&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1 ton anvil, black, complete with handy hook and carrying case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANV03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1001&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2 ton anvil&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;14.99&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2 ton anvil, black, complete with handy hook and carrying case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DTNTR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Detonator&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;13.00&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Detonator (plunger powered), fuses not included&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Bird seed&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10.00&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Large bag (suitable for road runners)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Carrots&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;2.50&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Carrots (rabbit hunting season only)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FU1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1002&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Fuses&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;3.42&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1 dozen, extra long&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JP1000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1005&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JetPack 1000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;35.00&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JetPack 1000, intended for single use&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JP2000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1005&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JetPack 2000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;55.00&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JetPack 2000, multi-use&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OL1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1002&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Oil can&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;8.99&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Oil can, red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAFE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Safe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;50.00&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Safe with combination lock&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SLING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sling&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;4.49&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sling, one size fits all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT (1 stick)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;2.50&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT, red, single stick&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `products` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT (5 sticks)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;10.00&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TNT, red, pack of 10 sticks&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for vendors&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `vendors`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `vendors`  (
  `vend_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `vend_name` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `vend_address` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `vend_city` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `vend_state` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;5&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `vend_zip` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `vend_country` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`vend_id`) USING BTREE
) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; InnoDB AUTO_INCREMENT &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1007&lt;/span&gt; &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Compact;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Records of vendors&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `vendors` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;1001&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Anvils R Us&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123 Main Street&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Southfield&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MI&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;48075&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `vendors` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;1002&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LT Supplies&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;500 Park Street&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Anytown&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;44333&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `vendors` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;1003&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ACME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;555 High Street&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Los Angeles&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;90046&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `vendors` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;1004&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Furball Inc.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1000 5th Avenue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;New York&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;11111&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `vendors` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;1005&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Jet Set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;42 Galaxy Road&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;London&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;N16 6PS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;England&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `vendors` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;1006&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Jouets Et Ours&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1 Rue Amusement&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Paris&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;45678&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;France&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;
&lt;/pre&gt;</description>
<pubDate>Sat, 21 Dec 2019 15:50:00 +0000</pubDate>
<dc:creator>滑稽zlx</dc:creator>
<og:description>最近在复习SQL语句，看的是MySQL必知必会这本书，但是发现附录中只有表设计，没有表的具体数据。所以在学习相应的语句中体验不是很好，去网上查了数据库的内容，自己慢慢导入到了数据库中。把表放出来作为参</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhoulixiangblog/p/12078724.html</dc:identifier>
</item>
<item>
<title>曹工说Spring Boot源码（4）--  我是怎么自定义ApplicationContext，从json文件读取bean definition的？ - 三国梦回</title>
<link>http://www.cnblogs.com/grey-wolf/p/12078673.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/grey-wolf/p/12078673.html</guid>
<description>&lt;p&gt;相关背景及资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/grey-wolf/p/12044199.html&quot;&gt;曹工说Spring Boot源码系列开讲了（1）-- Bean Definition到底是什么，附spring思维导图分享&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/ckl111/spring-boot-first-version-learn&quot;&gt;工程代码地址&lt;/a&gt; &lt;a href=&quot;https://www.processon.com/view/link/5deeefdee4b0e2c298aa5596&quot;&gt;思维导图地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工程结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/519126/201912/519126-20191215144930717-1919774390.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;总体来说，bean definition是什么，我们前面几讲，说了个大概了；目前，我们将聚焦于怎么获取bean definition。&lt;/p&gt;
&lt;p&gt;我们这次做个实验，就是将bean definition（一共两个bean，有依赖关系，依赖是手动指定的）定义在json文件内，然后自定义一个applicationcontext，从该文件内读取bean definiton，最后我们测试下是否能work。&lt;/p&gt;
&lt;p&gt;注意哈，这里的依赖，依然和前面讲的一样，都是手动指定依赖，类似@Autowired这种，还会放到后面才会讲，开车也要先学手动档嘛，是伐？&lt;/p&gt;
&lt;p&gt;建议大家直接拖源码下来看：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/ckl111/spring-boot-first-version-learn/tree/master/all-demo-in-spring-learning/spring-beans-json-extend&quot; class=&quot;uri&quot;&gt;https://gitee.com/ckl111/spring-boot-first-version-learn/tree/master/all-demo-in-spring-learning/spring-beans-json-extend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;json文件内，要表达bean definition，按照我们前面说的，基本就包括几个必要的就行了，比如beanClassName。但我这里还是展示一个完整的，但我也是用&lt;code&gt;fastjson&lt;/code&gt;先在之前的工程里生成了一个json，之后再拷贝到了json文件里：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 这里获取到的bean definition的实际类型是 GenericBeanDefiniton，所以序列化出来的的json，就是一个
// GenericBeanDefiniton集合的json
List&amp;lt;BeanDefinition&amp;gt; beanDefinitionList = factory.getBeanDefinitionList()
JSON.toJSONString(beanDefinitionList)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;json文件内容如下：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;[
  {
    &quot;abstract&quot;: false,
    &quot;autowireCandidate&quot;: true,
    &quot;autowireMode&quot;: 0,
    &quot;beanClass&quot;: &quot;org.springframework.simple.TestService&quot;,
    &quot;beanClassName&quot;: &quot;org.springframework.simple.TestService&quot;,
    &quot;constructorArgumentValues&quot;: {
      &quot;argumentCount&quot;: 0,
      &quot;empty&quot;: true,
      &quot;genericArgumentValues&quot;: [],
      &quot;indexedArgumentValues&quot;: {}
    },
    &quot;dependencyCheck&quot;: 0,
    &quot;enforceDestroyMethod&quot;: true,
    &quot;enforceInitMethod&quot;: true,
    &quot;lazyInit&quot;: false,
    &quot;lenientConstructorResolution&quot;: true,
    &quot;methodOverrides&quot;: {
      &quot;empty&quot;: true,
      &quot;overrides&quot;: []
    },
    &quot;nonPublicAccessAllowed&quot;: true,
    &quot;primary&quot;: false,
    &quot;propertyValues&quot;: {
      &quot;converted&quot;: false,
      &quot;empty&quot;: true,
      &quot;propertyValueList&quot;: [],
      &quot;propertyValues&quot;: []
    },
    &quot;prototype&quot;: false,
    &quot;qualifiers&quot;: [],
    &quot;resolvedAutowireMode&quot;: 0,
    &quot;role&quot;: 0,
    &quot;scope&quot;: &quot;&quot;,
    &quot;singleton&quot;: true,
    &quot;synthetic&quot;: false
  },
  {
    &quot;abstract&quot;: false,
    &quot;autowireCandidate&quot;: true,
    &quot;autowireMode&quot;: 0,
    &quot;beanClass&quot;: &quot;org.springframework.simple.byconstructor.TestControllerByConstructor&quot;,
    &quot;beanClassName&quot;: &quot;org.springframework.simple.byconstructor.TestControllerByConstructor&quot;,
    &quot;constructorArgumentValues&quot;: {
      &quot;argumentCount&quot;: 2,
      &quot;empty&quot;: false,
      &quot;genericArgumentValues&quot;: [],
      &quot;indexedArgumentValues&quot;: {
        0: {
          &quot;converted&quot;: false,
          &quot;value&quot;: {
            &quot;beanName&quot;: &quot;testService&quot;,
            &quot;toParent&quot;: false
          }
        },
        1: {
          &quot;converted&quot;: false,
          &quot;value&quot;: &quot;wire by constructor&quot;
        }
      }
    },
    &quot;dependencyCheck&quot;: 0,
    &quot;enforceDestroyMethod&quot;: true,
    &quot;enforceInitMethod&quot;: true,
    &quot;lazyInit&quot;: false,
    &quot;lenientConstructorResolution&quot;: true,
    &quot;methodOverrides&quot;: {
      &quot;empty&quot;: true,
      &quot;overrides&quot;: []
    },
    &quot;nonPublicAccessAllowed&quot;: true,
    &quot;primary&quot;: false,
    &quot;propertyValues&quot;: {
      &quot;converted&quot;: false,
      &quot;empty&quot;: true,
      &quot;propertyValueList&quot;: [],
      &quot;propertyValues&quot;: []
    },
    &quot;prototype&quot;: false,
    &quot;qualifiers&quot;: [],
    &quot;resolvedAutowireMode&quot;: 0,
    &quot;role&quot;: 0,
    &quot;scope&quot;: &quot;&quot;,
    &quot;singleton&quot;: true,
    &quot;synthetic&quot;: false
  }
]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大家可能看得有点懵，其实换成xml，就是类似下面这样的：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;    &amp;lt;bean name=&quot;testService&quot; class=&quot;org.springframework.simple.TestService&quot; /&amp;gt;

    &amp;lt;bean id=&quot;testController&quot; class=&quot;org.springframework.simple.TestController&quot;&amp;gt;
        &amp;lt;constructor-arg ref=&quot;testService&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package org.springframework.beans.extend.json.applicationcontext;

import org.springframework.beans.BeansException;
import org.springframework.beans.extend.json.JsonBeanDefinitionReader;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.beans.factory.xml.ResourceEntityResolver;
import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.AbstractRefreshableConfigApplicationContext;
import java.io.IOException;


public class ClassPathJsonApplicationContext extends AbstractRefreshableConfigApplicationContext {

    @Override
    protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {
        //其实主要内容和xmlapplicationcontext是一样的，主要就是下面这行不一样，new了一个json reader
        JsonBeanDefinitionReader beanDefinitionReader = new JsonBeanDefinitionReader(beanFactory);

        beanDefinitionReader.setEnvironment(this.getEnvironment());
        beanDefinitionReader.setResourceLoader(this);
        // 这里通过json bean definiton reader去读取bean definition
        loadBeanDefinitions(beanDefinitionReader);
    }

    /**
     *通过json bean definiton reader去读取bean definition
     **/
    protected void loadBeanDefinitions(JsonBeanDefinitionReader reader) throws BeansException, IOException {
        // 这里获取json文件的path，这个location是在new ClassPathJsonApplicationContext时传进来的
        String[] configResources = getConfigLocations();
        if (configResources != null) {
            reader.loadBeanDefinitions(configResources);
        }
    }

    public ClassPathJsonApplicationContext(String configLocation) throws BeansException {
        this(new String[] {configLocation}, true, null);
    }

    /**
     * 这里一模一样，不需要任何变化
     **/
    public ClassPathJsonApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)
            throws BeansException {

        super(parent);
        setConfigLocations(configLocations);
        if (refresh) {
            refresh();
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package org.springframework.beans.extend.json;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.BeanDefinitionStoreException;
import org.springframework.beans.factory.config.ConstructorArgumentValues;
import org.springframework.beans.factory.config.RuntimeBeanReference;
import org.springframework.beans.factory.support.AbstractBeanDefinitionReader;
import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.beans.factory.support.BeanNameGenerator;
import org.springframework.beans.factory.support.GenericBeanDefinition;
import org.springframework.context.annotation.AnnotationBeanNameGenerator;
import org.springframework.core.NamedThreadLocal;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.EncodedResource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StreamUtils;
import org.xml.sax.InputSource;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.*;

/**
 * 类似
 * {@link org.springframework.beans.factory.xml.XmlBeanDefinitionReader}
 * 只是本类是去json文件里读取bean definition
 *
 */
@Slf4j
public class JsonBeanDefinitionReader extends AbstractBeanDefinitionReader {
    private final ThreadLocal&amp;lt;Set&amp;lt;EncodedResource&amp;gt;&amp;gt; resourcesCurrentlyBeingLoaded =
            new NamedThreadLocal&amp;lt;Set&amp;lt;EncodedResource&amp;gt;&amp;gt;(&quot;json bean definition resources currently being loaded&quot;);


    public JsonBeanDefinitionReader(BeanDefinitionRegistry registry) {
        super(registry);
    }

    @Override
    public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {
        // 以下照抄xmlbeanDefintionReader开始
        Set&amp;lt;EncodedResource&amp;gt; currentResources = this.resourcesCurrentlyBeingLoaded.get();
        if (currentResources == null) {
            currentResources = new HashSet&amp;lt;EncodedResource&amp;gt;(4);
            this.resourcesCurrentlyBeingLoaded.set(currentResources);
        }

        EncodedResource encodedResource = new EncodedResource(resource);
        if (!currentResources.add(encodedResource)) {
            throw new BeanDefinitionStoreException(
                    &quot;Detected cyclic loading of &quot; + encodedResource + &quot; - check your import definitions!&quot;);
        }
        //照抄xmlbeanDefintionReader结束
        
        
        //这里的encodedResource.getResource()就是我们的json文件，这里通过spring core里面的一个工具类读取为InputStream
        String json = null;
        try (InputStream inputStream = encodedResource.getResource().getInputStream()) {
            json = StreamUtils.copyToString(inputStream, Charset.forName(&quot;UTF-8&quot;));
        } catch (IOException e) {
            log.error(&quot;{}&quot;,e);
            return 0;
        } finally {
            currentResources.remove(encodedResource);
            if (currentResources.isEmpty()) {
                this.resourcesCurrentlyBeingLoaded.remove();
            }
        }
        
        //熟悉的fastjson，熟悉的味道
        List&amp;lt;GenericBeanDefinition&amp;gt; list = JSON.parseArray(json, GenericBeanDefinition.class);
        if (CollectionUtils.isEmpty(list)) {
            return 0;
        }
        
        /**
         * 1：因为GenericBeanDefinition，只有setBeanClassName，所以bean反序列化时，只序列化了这个字        * 段；实际我们知道，beanClass很重要，所以我们只能自己处理一下了
         * 2：第二个问题，我们在下面解释
         **/
        for (GenericBeanDefinition genericBeanDefinition : list) {
            /**
             * 1、处理beanClass
             */
            Class&amp;lt;?&amp;gt; clazz = null;
            try {
                clazz = Thread.currentThread().getContextClassLoader().loadClass(genericBeanDefinition.getBeanClassName());
            } catch (ClassNotFoundException e) {
                log.error(&quot;bean class cant be load for beandefinition: {}&quot;,genericBeanDefinition);
                throw new RuntimeException();
            }

            genericBeanDefinition.setBeanClass(clazz);

            /**
             * 2、处理constructor问题，因为Object value = valueHolder.getValue();
             * 是Object类型，但这个实际是一个可变类型，当构造器参数为String类型时，这个Object就是                 * String类型的，当构造器参数类型为其他bean的引用时，这个object就是RuntimeBeanReference              * 的，
             * 因为fastjson把我的object转成jsonobject类型了，所以这里要手动搞成RuntimeBeanReference
             */
            ConstructorArgumentValues constructorArgumentValues = genericBeanDefinition.getConstructorArgumentValues();
            if (constructorArgumentValues.isEmpty()) {
                continue;
            }
            Map&amp;lt;Integer, ConstructorArgumentValues.ValueHolder&amp;gt; map = constructorArgumentValues.getIndexedArgumentValues();
            if (CollectionUtils.isEmpty(map)) {
                continue;
            }
            for (ConstructorArgumentValues.ValueHolder valueHolder : map.values()) {
                Object value = valueHolder.getValue();
                if (value instanceof JSONObject) {
                    JSONObject jsonObject = (JSONObject) value;
                    RuntimeBeanReference runtimeBeanReference = jsonObject.toJavaObject(RuntimeBeanReference.class);
                    valueHolder.setValue(runtimeBeanReference);
                }
            }
        }
        
        //这里new一个BeanNameGenerator，这是自带的
        setBeanNameGenerator(new AnnotationBeanNameGenerator());
        BeanNameGenerator beanNameGenerator = getBeanNameGenerator();
        // 获取BeanDefinitionRegistry，bean factory默认实现了BeanDefinitionRegistry
        BeanDefinitionRegistry registry = getRegistry();
        //注册bean definition到BeanDefinitionRegistry里面去
        for (GenericBeanDefinition genericBeanDefinition : list) {
            String beanName = beanNameGenerator.generateBeanName(genericBeanDefinition, registry);
            registry.registerBeanDefinition(beanName,genericBeanDefinition);
        }

        return list.size();
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class BootStrap {
    public static void main(String[] args) {
        // new一个我们的自定义json上下文
        ClassPathJsonApplicationContext context = new ClassPathJsonApplicationContext(&quot;beanDefinition.json&quot;);
        // getBean试一下
        TestControllerByConstructor bean = context.getBean(TestControllerByConstructor.class);
        System.out.println(bean);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/519126/201912/519126-20191221232309656-1287873155.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，已经注入进去了。没有什么问题。&lt;/p&gt;

&lt;p&gt;今天比较晚，写得也比较急，有问题的话，请大家务必指出，谢谢大家&lt;/p&gt;
&lt;p&gt;源码地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/ckl111/spring-boot-first-version-learn/tree/master/all-demo-in-spring-learning/spring-beans-json-extend&quot; class=&quot;uri&quot;&gt;https://gitee.com/ckl111/spring-boot-first-version-learn/tree/master/all-demo-in-spring-learning/spring-beans-json-extend&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 15:30:00 +0000</pubDate>
<dc:creator>三国梦回</dc:creator>
<og:description>写在前面的话 相关背景及资源： '曹工说Spring Boot源码系列开讲了（1） Bean Definition到底是什么，附spring思维导图分享' '工程代码地址' '思维导图地址' 工程结构</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/grey-wolf/p/12078673.html</dc:identifier>
</item>
<item>
<title>Python迭代器和生成器 - Yabea</title>
<link>http://www.cnblogs.com/ybjourney/p/12078640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ybjourney/p/12078640.html</guid>
<description>&lt;p&gt;Python的迭代器集成在语言之中，迭代器和生成器是Python中很重要的用法，本文将&lt;strong&gt;深入了解迭代器和生成器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先，我们都知道for循环是一个基础迭代操作，大多数的容器对象都可以使用for循环，那么，我们从&lt;strong&gt;for循环开始&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;你有没有想过，for循环的内部实现原理呢？&lt;/p&gt;
&lt;p&gt;其实，在Python中，for循环是对迭代器进行迭代的语法糖，内部运行机理就是：首先底层对循环对象实现迭代器包装（调用容器对象的&lt;code&gt;__iter__&lt;/code&gt;方法）返回一个迭代器对象，每循环一步，就调用一次迭代器对象的&lt;code&gt;__next__&lt;/code&gt;方法，直到循环结束时，自动处理StopIteration这个异常。&lt;/p&gt;
&lt;p&gt;对于像list，dict等容器对象而言，都可以使用for循环，但是它们并不是迭代器，它们属于可迭代对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是可迭代对象呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最简单的解释：实现了迭代方法可以被迭代的对象，可以使用isinstance()方法进行判断。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;In [1]: from collections import Iterable, Iterator
In [2]: a = [1, 2, 3]
In [3]: isinstance(a, Iterable)
Out[3]: True
In [4]: b = a.__iter__()
In [5]: isinstance(b, Iterator)
Out[5]: True&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可迭代对象实现了&lt;code&gt;__iter__&lt;/code&gt;方法，该方法返回一个迭代器对象。&lt;/p&gt;
&lt;p&gt;以上，可以看到，在迭代过程中，实际调用了迭代器的&lt;code&gt;__next__&lt;/code&gt;方法进行迭代。&lt;/p&gt;
&lt;p&gt;那么，&lt;strong&gt;什么是迭代器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现了迭代器协议的对象就是迭代器，所谓的迭代器协议可以简单归纳为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现&lt;code&gt;__iter__()&lt;/code&gt;方法，返回一个迭代器&lt;/li&gt;
&lt;li&gt;实现next方法，返回当前元素并指向下一个元素，如果当前位置已无元素，则抛出StopIteration异常 。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;迭代器和可迭代对象的区别是：迭代器可以使用next()方法不断调用并返回下一个值，除了调用可迭代对象的&lt;code&gt;__iter__&lt;/code&gt;方法来将可迭代对象转换为迭代器以外，还可以使用iter()方法。&lt;/p&gt;
&lt;p&gt;举个例子来验证以上说法：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;In [1]: iter_data = iter([1, 2, 3])
In [2]: print(next(iter_data))
1
In [3]: print(next(iter_data))
2
In [4]: print(next(iter_data))
3
In [5]: print(next(iter_data))
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
&amp;lt;ipython-input-16-425d66e859b8&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 print(next(iter_data))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;为什么要用迭代器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很重要的一点是，Python把迭代器内建在语言之中的，我们在遍历一个容器对象时并不需要去实现具体的遍历操作。&lt;/p&gt;
&lt;p&gt;迭代器时一个惰性序列，仅仅在迭代至当前元素时才计算该元素的值，在此之前可以不存在，在此之后可以随时销毁，也就是说，在迭代过程中不是将所有元素一次性加载，这样便不需要考虑内存的问题。通过定义迭代器协议，我们可以随时实现一个迭代器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么时候用迭代器？&lt;/strong&gt;&lt;br/&gt;具体在什么场景下可以使用迭代器：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数列的数据规模巨大&lt;/li&gt;
&lt;li&gt;数列有规律，但是不能使用列表推导式描述。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举个最简单的例子：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class Fib(object):
    def __init__(self):
        self._a = 0
        self._b = 1

    def __iter__(self):
        return self

    def __next__(self):
        self._a, self._b = self._b, self._a + self._b
        return self._a


if __name__ == '__main__':
    for index, item in enumerate(Fib()):
        print(item)
        if index &amp;gt;= 9:
            break&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;什么是生成器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生成器，顾名思义，就是按照一定的模式生成一个序列，是一种高级的迭代器，Python中有一个专门的关键字（yield）来实现生成器。&lt;/p&gt;
&lt;p&gt;如果一个函数，使用了yield语句，那么它就是一个生成器函数，当调用生成器函数函数时，它返回一个迭代器，不过这个迭代器时一个生成器对象。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from itertools import islice

def fib():
    a, b = 1, 1
    while True:
        yield a
        a, b = b, a + b

if __name__ == '__main__':
    fib_data = fib()
    print(list(islice(fib_data, 0, 10)))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，使用生成器后，代码简洁了很多！在上述代码中添加：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;print(type(fib_data))
print(dir(fib_data))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到函数返回的是一个generator对象，且对象实现了迭代器协议。&lt;/p&gt;
&lt;p&gt;但是，使用生成器必须要注意的一点是：&lt;strong&gt;生成器只能遍历一次&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么时候用生成器呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生成器可以使用更少的中间变量来写流式代码， 相比于其它容器对象占用的内存和CPU资源更少一些。当需要一个将返回一个序列或在循环中执行的函数时，就可以使用生成器，因为当这些元素被传递到另一个函数中进行后续处理时，一次返回一个元素可以有效的提升整体性能，最重要的是，比迭代器简洁！&lt;/p&gt;
&lt;p&gt;除此以外，生成器还有两个很棒的用处：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现with语句的上下文管理器协议&lt;/li&gt;
&lt;li&gt;实现协程&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;什么是生成器表达式？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列表推导式，大家应该都用到，但是由于内存的限制，列表的容量是有限的，如果要创建一个有几百万个元素的列表，会占用很多的储存空间，当我们只需要访问几个元素时，其它元素占用的空间就白白浪费了。&lt;/p&gt;
&lt;p&gt;这种时候你可以用生成器表达式啊，生成式表达式是一种实现生成器的便捷方式，将列表推导式的中括号替换为圆括号，生成器表达式是一种边循环边计算，使得列表的元素可以在循环过程中一个个的推算出来，不需要创建完整的列表，从而节省了大量的空间。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;In [1]: a = (item for item in range(10))

In [2]: type(a)
Out[2]: generator

In [3]: next(a)
Out[3]: 0

In [4]: next(a)
Out[4]: 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;代码可参考：&lt;a href=&quot;https://github.com/Yabea/Python/tree/master/learn_python/iterator&quot;&gt;my github&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 15:19:00 +0000</pubDate>
<dc:creator>Yabea</dc:creator>
<og:description>本文深入介绍了Python高级用法-迭代器和生成器。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/ybjourney/p/12078640.html</dc:identifier>
</item>
<item>
<title>Python基础-day01 - 杰小白博客</title>
<link>http://www.cnblogs.com/jiexiaobai/p/12078631.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiexiaobai/p/12078631.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;人生苦短，我用 Python —— Life is short, you need Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1805572/201912/1805572-20191221231011140-1794782841.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;目标&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Python 的起源&lt;/li&gt;
&lt;li&gt;为什么要用 Python？&lt;/li&gt;
&lt;li&gt;Python 的特点&lt;/li&gt;
&lt;li&gt;Python 的优缺点&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;python-的起源&quot;&gt;01. Python 的起源&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Python 的创始人为吉多·范罗苏姆（Guido van Rossum）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1805572/201912/1805572-20191221231021260-1250638477.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的&lt;strong&gt;解释程序&lt;/strong&gt;，作为 ABC 语言的一种继承（&lt;strong&gt;感觉下什么叫牛人&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是&lt;strong&gt;专门为非专业程序员设计的&lt;/strong&gt;。但是 ABC 语言并没有成功，究其原因，吉多认为是&lt;strong&gt;非开放&lt;/strong&gt;造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果&lt;/li&gt;
&lt;li&gt;之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python's Flying Circus）的爱好者&lt;/li&gt;
&lt;li&gt;1991 年，第一个 Python &lt;strong&gt;解释器&lt;/strong&gt; 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;解释器科普&quot;&gt;1.1 解释器（科普）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;计算机不能直接理解任何除机器语言以外的语言&lt;/strong&gt;，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。&lt;strong&gt;将其他语言翻译成机器语言的工具，被称为编译器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编译器翻译的方式有两种：一个是&lt;strong&gt;编译&lt;/strong&gt;，另外一个是&lt;strong&gt;解释&lt;/strong&gt;。两种方式之间的区别在于&lt;strong&gt;翻译时间点的不同&lt;/strong&gt;。当编译器&lt;strong&gt;以解释方式运行的时候&lt;/strong&gt;，也称之为&lt;strong&gt;解释器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1805572/201912/1805572-20191221231054072-1532602616.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;编译型语言&lt;/strong&gt;：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解释型语言&lt;/strong&gt;：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;编译型语言和解释型语言对比&quot;&gt;编译型语言和解释型语言对比&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;速度&lt;/strong&gt; —— 编译型语言比解释型语言执行速度快&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台性&lt;/strong&gt; —— 解释型语言比编译型语言跨平台性好&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;python-的设计目标&quot;&gt;1.2 Python 的设计目标&lt;/h3&gt;
&lt;p&gt;1999 年，吉多·范罗苏姆向 DARPA 提交了一条名为 “Computer Programming for Everybody” 的资金申请，并在后来说明了他对 Python 的目标：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一门&lt;strong&gt;简单直观的语言&lt;/strong&gt;并与主要竞争者一样强大&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开源&lt;/strong&gt;，以便任何人都可以为它做贡献&lt;/li&gt;
&lt;li&gt;代码&lt;strong&gt;像纯英语那样容易理解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;适用于&lt;strong&gt;短期&lt;/strong&gt;开发的日常任务&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些想法中的基本都已经成为现实，Python 已经成为一门流行的编程语言&lt;/p&gt;
&lt;h3 id=&quot;python-的设计哲学&quot;&gt;1.3 Python 的设计哲学&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;优雅&lt;/li&gt;
&lt;li&gt;明确&lt;/li&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Python 开发者的哲学是：&lt;strong&gt;用一种方法，最好是只有一种方法来做一件事&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果面临多种选择，Python 开发者一般会拒绝花俏的语法，而选择&lt;strong&gt;明确没有或者很少有歧义的语法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在 Python 社区，吉多被称为“仁慈的独裁者”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么选择-python&quot;&gt;02. 为什么选择 Python？&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;代码量少&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;同一样问题，用不同的语言解决，代码量差距还是很多的，一般情况下 &lt;code&gt;Python&lt;/code&gt; 是 &lt;code&gt;Java&lt;/code&gt; 的 &lt;strong&gt;1/5&lt;/strong&gt;，所以说 &lt;strong&gt;人生苦短，我用 Python&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;python-特点&quot;&gt;03. Python 特点&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Python 是&lt;strong&gt;完全面向对象的语言&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;函数&lt;/strong&gt;、&lt;strong&gt;模块&lt;/strong&gt;、&lt;strong&gt;数字&lt;/strong&gt;、&lt;strong&gt;字符串&lt;/strong&gt;都是对象，&lt;strong&gt;在 Python 中一切皆对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;完全支持继承、重载、多重继承&lt;/li&gt;
&lt;li&gt;支持重载运算符，也支持泛型设计&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python &lt;strong&gt;拥有一个强大的标准库&lt;/strong&gt;，Python 语言的核心只包含 &lt;strong&gt;数字&lt;/strong&gt;、&lt;strong&gt;字符串&lt;/strong&gt;、&lt;strong&gt;列表&lt;/strong&gt;、&lt;strong&gt;字典&lt;/strong&gt;、&lt;strong&gt;文件&lt;/strong&gt; 等常见类型和函数，而由 Python 标准库提供了 &lt;strong&gt;系统管理&lt;/strong&gt;、&lt;strong&gt;网络通信&lt;/strong&gt;、&lt;strong&gt;文本处理&lt;/strong&gt;、&lt;strong&gt;数据库接口&lt;/strong&gt;、&lt;strong&gt;图形系统&lt;/strong&gt;、&lt;strong&gt;XML 处理&lt;/strong&gt; 等额外的功能&lt;/li&gt;
&lt;li&gt;Python 社区提供了&lt;strong&gt;大量的第三方模块&lt;/strong&gt;，使用方式与标准库类似。它们的功能覆盖 &lt;strong&gt;科学计算&lt;/strong&gt;、&lt;strong&gt;人工智能&lt;/strong&gt;、&lt;strong&gt;机器学习&lt;/strong&gt;、&lt;strong&gt;Web 开发&lt;/strong&gt;、&lt;strong&gt;数据库接口&lt;/strong&gt;、&lt;strong&gt;图形系统&lt;/strong&gt; 多个领域&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;面向对象的思维方式&quot;&gt;面向对象的思维方式&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;面向对象&lt;/strong&gt; 是一种 &lt;strong&gt;思维方式&lt;/strong&gt;，也是一门 &lt;strong&gt;程序设计技术&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要解决一个问题前，首先考虑 &lt;strong&gt;由谁&lt;/strong&gt; 来做，怎么做事情是 &lt;strong&gt;谁&lt;/strong&gt; 的职责，最后把事情做好就行！
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt; 就是 &lt;strong&gt;谁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;要解决复杂的问题，就可以找&lt;strong&gt;多个不同的对象&lt;/strong&gt;，&lt;strong&gt;各司其职&lt;/strong&gt;，共同实现，最终完成需求&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;python-的优缺点&quot;&gt;04. Python 的优缺点&lt;/h2&gt;
&lt;h3 id=&quot;优点&quot;&gt;4.1 优点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;简单、易学&lt;/li&gt;
&lt;li&gt;免费、开源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;丰富的库&lt;/li&gt;
&lt;li&gt;可扩展性
&lt;ul&gt;&lt;li&gt;如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 &lt;code&gt;C&lt;/code&gt; 或 &lt;code&gt;C++&lt;/code&gt; 编写，然后在 &lt;code&gt;Python&lt;/code&gt; 程序中使用它们&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;缺点&quot;&gt;4.2 缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;运行速度&lt;/li&gt;
&lt;li&gt;国内市场较小&lt;/li&gt;
&lt;li&gt;中文资料匮乏&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 21 Dec 2019 15:16:00 +0000</pubDate>
<dc:creator>杰小白博客</dc:creator>
<og:description>认识 Python 人生苦短，我用 Python —— Life is short, you need Python 目标 Python 的起源 为什么要用 Python？ Python 的特点 Py</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jiexiaobai/p/12078631.html</dc:identifier>
</item>
</channel>
</rss>