<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>装饰者模式 Decorator - _清风明月</title>
<link>http://www.cnblogs.com/blackteeth/p/10212218.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blackteeth/p/10212218.html</guid>
<description>&lt;p&gt;项目：咖啡计费系统&lt;/p&gt;
&lt;p&gt;背景：现有系统中有一个抽象类Beverage，有2个抽象方法GetDescription和Cost。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 饮料抽象类
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Beverage
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;饮料&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; price =&lt;span&gt; 0f;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetDescription();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; Cost();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;需求：目前有综合咖啡、深焙咖啡、浓缩咖啡，调料有牛奶、摩卡、豆浆、奶泡。未来可能增加新的咖啡种类和调料，当顾客点咖啡时，要求能够获得咖啡的描述和价格。&lt;/p&gt;
&lt;p&gt;设计方案1：设计综合咖啡、深焙咖啡、浓缩咖啡4个子类，继承Beverage。再用这4个子类分别派生4个子类，带有牛奶的综合咖啡，带有摩卡的综合咖啡，带有豆浆的综合咖啡...&lt;/p&gt;
&lt;p&gt;分析：缺点时显而易见的，这样做导致“类爆炸”，一共需要3*4=12个子类。&lt;/p&gt;
&lt;p&gt;设计方案2：把调料作为咖啡的属性设置在Beverage里，并增加方法HasMilk(),SetMilk()等类似的方法。&lt;/p&gt;
&lt;p&gt;分析：缺点这样做无疑时从一个灾难跳进另一个灾难中。我们在开发中应当尽量避免修改已有代码，遵循“开闭原则”。而且当增加新的饮料时，又要修改基类。&lt;/p&gt;
&lt;p&gt;另一个灾难是，子类在计算价格时，需要大量的分支结构来判断是否包含某种调料，以计算咖啡的价格，我们总是尽量的避免复杂的分支结构，这使得维护变得非常困难。&lt;/p&gt;
&lt;p&gt;还有针对实现编程带来的问题，不能够动态的添加职责。&lt;/p&gt;
&lt;p&gt;装饰者模式 Decorator 闪亮登场：&lt;/p&gt;
&lt;p&gt;装饰者模式动态的将职责附加到对象上。若要扩展共呢个，装饰者提供了比继承更有弹性的替代方案。&lt;/p&gt;
&lt;p&gt;1. 4个基类继承Beverage&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 综合咖啡
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HouseBlend:Beverage
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; HouseBlend(&lt;span&gt;float&lt;/span&gt;&lt;span&gt; price)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;综合咖啡&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; Cost()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetDescription()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.description;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 深焙咖啡
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DarkRoast:Beverage
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DarkRoast(&lt;span&gt;float&lt;/span&gt;&lt;span&gt; price)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深焙咖啡&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetDescription()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.description;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; Cost()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 浓缩咖啡
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Espresso:Beverage
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Espresso(&lt;span&gt;float&lt;/span&gt;&lt;span&gt; price)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;浓缩咖啡&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; Cost()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.price;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetDescription()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.description;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰者继承Beverage，注意这里继承的目的并不是为了获得基类的功能，而是为了类型匹配，达到多态的目的，获得功能由组合来实现。因此每一个装饰者都需要维护一个Beverage引用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 摩卡装饰者,为了能够取代Beverage，所以CondimentDecorator继承自Beverage,目的并非获得Beverage
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 而是为了类型匹配
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Mocha : Beverage
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;持有抽象类饮料的引用，达到运行时添加职责的目的&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        Beverage beverage;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;包装Beverage&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Mocha(Beverage b, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; price)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             beverage =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; Cost()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; beverage.Cost() +&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetDescription()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; beverage.GetDescription() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 摩卡&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 奶泡装饰者
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Whip : Beverage
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Beverage beverage;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Whip(Beverage b, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; price)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             beverage =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; Cost()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; beverage.Cost() +&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetDescription()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; (beverage.GetDescription() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ，奶泡&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 豆浆装饰者
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Soy : Beverage
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Beverage beverage;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Soy(Beverage b, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; price)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             beverage =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; Cost()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; beverage.Cost() +&lt;span&gt; price;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetDescription()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;( beverage.GetDescription() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 豆浆&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户端类：CoffeeShop.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CoffeeShop
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;来一杯浓缩咖啡，不要调料&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             Beverage beverage = &lt;span&gt;new&lt;/span&gt; Espresso(&lt;span&gt;1.99f&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             Console.WriteLine(beverage.GetDescription() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; beverage.Cost());
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;来一杯摩卡奶泡深焙咖啡&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             Beverage beverage2 = &lt;span&gt;new&lt;/span&gt; DarkRoast(&lt;span&gt;0.99f&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             beverage2 = &lt;span&gt;new&lt;/span&gt; Whip(beverage2, &lt;span&gt;0.1f&lt;/span&gt;);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用奶泡装饰深焙咖啡&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             beverage2 = &lt;span&gt;new&lt;/span&gt; Mocha(beverage2, &lt;span&gt;0.2f&lt;/span&gt;);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;再用摩卡装饰&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             Console.WriteLine(beverage2.GetDescription() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; beverage2.Cost());
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            Console.ReadKey();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/750720/201901/750720-20190103065313513-1642379202.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考资料《Head First 设计模式》&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 22:55:00 +0000</pubDate>
<dc:creator>_清风明月</dc:creator>
<og:description>项目：咖啡计费系统 背景：现有系统中有一个抽象类Beverage，有2个抽象方法GetDescription和Cost。 需求：目前有综合咖啡、深焙咖啡、浓缩咖啡，调料有牛奶、摩卡、豆浆、奶泡。未来可</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blackteeth/p/10212218.html</dc:identifier>
</item>
<item>
<title>vue-cli@3.x之使用vue ui创建项目-来自一个战五渣的体验 - 炼心</title>
<link>http://www.cnblogs.com/hezhi/p/10212060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hezhi/p/10212060.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/node-v10.13.0-green.svg&quot; alt=&quot;image&quot;/&gt;&lt;img src=&quot;https://img.shields.io/badge/npm-v6.5.0-green.svg&quot; alt=&quot;image&quot;/&gt;&lt;img src=&quot;https://img.shields.io/badge/yarn-v1.12.3-brightgreen.svg&quot; alt=&quot;image&quot;/&gt;&lt;img src=&quot;https://img.shields.io/badge/vue--cli-v3.2.2-green.svg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;全局安装vue-cli&quot;&gt;1. 全局安装vue-cli&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;yarn global add @vue/cli
// 检查安装是否成功
vue -V
// 3.2.2&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;初始化-vue-ui&quot;&gt;2. 初始化 vue ui&lt;/h2&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vue ui&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;section&quot;&gt;2.1&lt;/h4&gt;
&lt;p&gt;该命令会自动打开你的浏览器，默认地址为: &lt;strong&gt;localhost:8000/project/select&lt;/strong&gt;,浏览器展示的页面如下：&lt;br/&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/c294c6e6gy1fyskj64mjgj20so0ibt93.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;切换界面到创建,点击下面&lt;strong&gt;在此创建新项目按钮&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1. 输入项目文件夹名称
2. 包管理器，如果你已经安装了yarn，vue ui的默认包管理器是yarn&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;section-1&quot;&gt;2.2&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/c294c6e6gy1fyskyxqp6zj20g10l5ab6.jpg&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;section-2&quot;&gt;2.3&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/c294c6e6gy1fysl2nhwulj20qs0l0abk.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的两项不用管，是我之前创建过玩的。可能你打开不是这样的，只有默认，手动和远程预设这三项。这里选择手动，下一步。&lt;/p&gt;
&lt;h4 id=&quot;section-3&quot;&gt;2.4&lt;/h4&gt;
&lt;p&gt;接下来，你会被要求配置预装选项，根据你自己项目需求勾选即可。一般来说，Babel,Router,Vuex,Linter这四项是必装的，另外我还勾选了下使用配置文件，可能有的人看不惯项目生成很多的.babelrc 这样单独的配置文件，也可以不勾，这样的话会统一到package.json中去配置&lt;br/&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/c294c6e6gy1fysl8xpqwdj20sg0kxjz8.jpg&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;section-4&quot;&gt;2.5&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/c294c6e6gy1fyslbi2d6gj20sb0kwabr.jpg&quot;/&gt;&lt;br/&gt;第一个是问你router的mode要不要设成history模式，一般正式项目都会设成这种模式的&lt;br/&gt;第二个问你选用哪种Eslint风格，从vue-cli@2.x似乎就是standard选的多一些。&lt;br/&gt;第三个是表示当你保存/提交时自动做Lint&lt;/p&gt;
&lt;p&gt;接下来会弹窗问你要不要保存为新预设，如果保存的话以后创建项目就可以像2.3中的那种图一样直接选择预设创建项目了&lt;/p&gt;
&lt;h2 id=&quot;与vue-cli2.x的不同之处&quot;&gt;3.与vue-cli@2.x的不同之处&lt;/h2&gt;
&lt;p&gt;这篇博文感觉都有点写不下去了- -，因为我使用vue ui整个创建项目过程实在过于简单，都是中文版的，直接介绍一下我认为的几个亮点吧。&lt;/p&gt;
&lt;p&gt;3.1 关于插件与预设&lt;br/&gt;以前vue-cli@2.x是只提供6种默认模板供大家下载使用，如果想要自己高度自定义，比如你想基于typescritp去做项目，只能去fork官方模板，然后自己修改它，基本上没有生态圈可言。而现在vue-cli@3.x很多特性都是基于插件来灵活扩展的，会有很多大佬去开发各种各样的插件体系，相当于一个插件就可以是一种模板了，比如你在插件面板中可以搜一下elementUI,安装它的话就可以直接帮你生成一套整个基于elementUI的模板了。下载了就能用，基本上零配置。这是因为&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;每个插件都可以对项目文件操作&lt;/li&gt;
&lt;li&gt;每个插件都可以对项目中已有的webpack配置进行操作&lt;/li&gt;
&lt;li&gt;每个插件都可以对项目中注入一些script命令，比如serve,build之类的，还可以往一些钩子上注入一些想要执行的事件，比如install之后要做什么&lt;/li&gt;
&lt;li&gt;每个插件都可以引入其他插件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以前每次创建一个新项目，都需要自己手动去安装各种依赖什么的，然后又一顿配置改改改。而有了预设之后，下次创建项目的时候都出现在选项列表里，只要勾选了就可以创建一个和之前一样配置和依赖的项目。&lt;/p&gt;
&lt;p&gt;（此章节暂时对于我这个战5渣显得太过高深，大家自行去了解更好）&lt;/p&gt;
&lt;p&gt;3.2 关于依赖&lt;br/&gt;以前安装插件，需要在vscode编辑器的命令行里执行 yarn add axios 等依赖，&lt;br/&gt;现在可以直接去vue ui 的依赖面板中点右上角的添加依赖，来搜索你想要安装的依赖直接安装。&lt;/p&gt;
&lt;p&gt;3.3 关于项目配置&lt;/p&gt;
&lt;p&gt;vue-cli@3.x可以让vue ui的界面上直接通过勾选还是不勾选来决定开启还是关闭某些功能(我估计是官方实在是看不惯vue-cli@2.x中一群人瞎改它build目录里的配置然后玩崩了之后去github提各种乱七八糟的issue了，哈哈哈)，这种图形化界面的操作方式无疑对我这种战无渣更友好了...再也不用去记一些乱七八糟的命令，百度各种不怎么靠谱的解决方式。&lt;/p&gt;
&lt;p&gt;3.4 关于vue ui的任务面板&lt;br/&gt;这个让我感觉特神奇的就是，再也不用在我的编辑器里去执行yarn dev 或者npm run dev了，敲个业务代码还得特意留四分之一的窗口去看它命令行有没有报错...它可以直接在一个网页里跑起来我的项目，还有各种报告生成（虽然我现在很多功能也看不太懂，但是很酷炫有木有）。&lt;br/&gt;同样也可以直接在vue ui界面上去执行run build。查看各种数据，比如打包后的大小等&lt;/p&gt;
&lt;p&gt;3.5 关于生成的项目文件夹&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;.
├── public
│   ├── favicon.ico
│   └── index.html
├── src
│   ├── assets
│   │   └── logo.png
│   ├── components
│   │   └── HelloWorld.vue
│   ├── views
│   │   ├── About.vue
│   │   └── Home.vue
│   ├── App.vue
│   ├── main.js
│   ├── router.js
│   └── store.js
├── .browserslistrc
├── .editorconfig
├── .eslintrc.js
├── .gitignore
├── README.md
├── babel.config.js
├── package.json
├── postcss.config.js
└── yarn.lock
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相比于vue-cli@2.x也简洁了很多，没有build和config目录。&lt;br/&gt;后期遇到坑点应该会记录一下。&lt;/p&gt;
&lt;p&gt;番外篇：&lt;/p&gt;
&lt;p&gt;另外介绍下mac系统中这种树文件是如何生成的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 1. 安装brew
/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
// 2. 利用brew安装tree
brew install tree
// 3. 列出文件树
tree -a  -I &quot;node_modules|.git|.vscode&quot; --dirsfirst &amp;gt;a.md
// -a表示列出所有文件,这样可以列出来 .eslintrc.js 这样的以.开头的隐藏文件
// -I &quot;node_modules|.git|.vscode&quot; 这样表示忽略这三个文件夹
// --dirsfirst 表示以文件夹优先排序
// &amp;gt;a.md  表示输出到 a.md文件中&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 02 Jan 2019 16:22:00 +0000</pubDate>
<dc:creator>炼心</dc:creator>
<og:description>1. 全局安装vue cli 2. 初始化 vue ui 执行命令 2.1 该命令会自动打开你的浏览器，默认地址为: localhost:8000/project/select ,浏览器展示的页面如下</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hezhi/p/10212060.html</dc:identifier>
</item>
<item>
<title>产品经理历险记-2-如何把需求聊得更细 - Lionel Andrés Messi</title>
<link>http://www.cnblogs.com/LionelMessi/p/10184812.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LionelMessi/p/10184812.html</guid>
<description>&lt;p&gt;&lt;span&gt;以前，认为开发很复杂，需要了解需求，需要分析需求，需要针对需求进行设计，还要自我测试，发布功能，维护系统，忙都忙不完的事，而那些产品，只需要把需求文档扔过来，说一句，我不管你怎么实现，但我需要这个功能实现，这么简单的事，谁不会做？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我要为曾经年少的我，单纯的我，无邪的我表达深深的鄙视，斜视，无视之意。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;和做开发这几年比起来，踩过的坑，转产品这半年，简直连车尾灯都看不到&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;做产品最重要的是什么，需求。了解需求，梳理需求，分析需求，解析需求，制定需求，进而设计，推动研发，验收，上线，维护&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;了解需求是第一步，需求从哪里来，由谁提出，为什么ta会提出这样的需求，ta要解决的问题是什么？ta的痛点到底是什么？是不是这个需求就是ta说描述的那样？这个需求实现了真的能解决ta的痛点吗？ta的痛点是系统的痛点还是业务的痛点？这个需求实现了对历史数据有没有影响？有影响怎么处理？对现有系统的改动点有多少.............&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;无穷无尽的问题，但这些问题都只有一步一步的深挖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;冰山理论，可能是产品人最喜欢用的一张图了&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;postTitle&quot; readability=&quot;108&quot;&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/344021/201901/344021-20190102234122941-2041674201.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;p&gt;&lt;span&gt; 如图所示，你看到的只是那1%甚至更少，只有不断的挖掘才能知道的更多&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本次系统在迭代的时候，进入UAT阶段，由用户验收功能的时候，用户使用bug提交系统提交了一个bug，开发人员直接转给了我，我一看，这哪是bug呀，这是需求，于是赶紧电话确认，聊了半天，最后发现我们的问题是，业务人员以为这个功能是理所当然必然会有的，故未在需求上进行确认和指出，最后这个功能由于缺失，上线后也无法正常使用，得呢，得再继续优化并再继续完善&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;回首望去，类似的案例有很多，几乎每次都是相同的情况，业务总是说“我以为这个是肯定有的，这么简单的啊，还要提需求啊？”，“这个不是标准配置吗？没有这个功能我提这个需求干嘛呢？”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而我总是解释或争辩说，“不是，我们聊需求的时候不是这样说的”，“没有，你没有提就是新需求，最差也是个需求变更，如果是变更，就得往后排”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尤其是在系统还没有上线，在0到1的孵化过程中的时候，这样的案例比比皆是&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我心力憔悴，他们心有怨言&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在看来，需求是没有做完的一天，所有的需求，都得分轻重缓急，而不同的角度，不同的角色，轻重缓急的看待又是不一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;受时间，资源限制，不可能对一个需求完完全全，透透彻彻了解清楚后，再开始进行开发，那样，每个需求可能对系统的改造都是推翻从来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以我现在的做法是，在需求范围确定后&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、先嚼一遍需求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对每个需求先从产品的思维角度，对系统的影响程度，要修改的范围，要测试的点有个大概的度的把握。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再自己提问题给自己，为什么要这个需求，需求的出发点是什么，有没有更好的解决方案，对历史数据是否有影响等等，尽可能的问倒自己并记录下自己的问题和答案&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过大致的梳理后，会对这一版的需求有个大致的了解，整个过程不会很长，快则1至2个小时，慢则半天，期间可能还会和研发或测试的同学进行沟通，前端怎么实现简单又美观，后台现有数据是否满足，测试的逻辑梳理是否有漏洞。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个流程梳理下来，研发主管及测试心里会有一个大概的底，并且在此过程中会给很多的建议和意见&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、和业务部门进行详聊&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每次详聊，我们的业务同事已经知道我的套路，先问为什么要提出整个需求，需求的目的是什么，要解决的痛点是什么，你们希望的流程是什么样，再他们描述的过程中，我也会逐步的抛出我理需求时候遇到的问题，给出我的解决方案征求他们的意见&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以前是我单打独斗，现在整个team人员较为充足，我会拉上我们的开发，研发主管一起旁听，从他们的角度去分析需求对系统的影响和提出他们的疑问&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个过程耗时会比较长，至少是3个小时左右的一个用户访谈时间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、整理文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;和用户访谈结束后，我会用最快的速度，整理出需求文档，从需求目的，需求逻辑，和需求实现3个层面去描述需求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需求目的主要是回答为什么要这样做，这样做的好处，解决的问题等等一些比较宽泛的问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需求逻辑主要是梳理整个需求的逻辑，对数据的修改的点，对历史数据的处理，需要测试的点，在这模块会罗列出很多逻辑性的文字，作为业务方需求确认的重要信息，以及开发人员，测试人员的开发和测试的出发点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需求实现主要是从图片上展示系统页面如何实现需求，有哪些按钮，有哪些列，有哪些字段展示，此作为和业务部门确认界面，开发同事照此研发&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、需求总结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;文档整理后，会再花点时间和业务部门进行再次确认，确认文档中的逻辑内容无误，确认界面上展示的字段无误，也可能经历多次修改。带大家确认后，会进行归档，归档后，无大的逻辑变更的情况下，不再接受业务方的变更。我们会找时间再给研发的同事进行需求的具体讲解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实需求的整理还有很多步骤，以上4步，是我经历过太多带血带肉撕裂的痛慢慢领悟总结出来并现在正在实施的一套方案&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在产品的路上，我还是个小学生，还在不停的摸索，求学&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;望未来，更进一步&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 02 Jan 2019 16:14:00 +0000</pubDate>
<dc:creator>Lionel Andr&amp;#233;s Messi</dc:creator>
<og:description>以前，认为开发很复杂，需要了解需求，需要分析需求，需要针对需求进行设计，还要自我测试，发布功能，维护系统，忙都忙不完的事，而那些产品，只需要把需求文档扔过来，说一句，我不管你怎么实现，但我需要这个功能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LionelMessi/p/10184812.html</dc:identifier>
</item>
<item>
<title>当代前端应该怎么写这个hello world？ - 叶小钗</title>
<link>http://www.cnblogs.com/yexiaochai/p/10197234.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yexiaochai/p/10197234.html</guid>
<description>&lt;p&gt;大概16年的时候我们队react进行了简单的学习：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/yexiaochai/p/5515264.html&quot;&gt;从DOM操作看Vue&amp;amp;React的前端组件化，顺带补齐React的demo&lt;/a&gt;，当时我们只是站在框架角度在学习，随着近几年前端的变化，想写个hello world似乎变得复杂起来，我们今天便一起来看看现代化的前端，应该如何做一个页面，今天我们学习react首先说一下React的体系圈&lt;/p&gt;
&lt;p&gt;无论Vue还是React整个体系圈十分的完备，就一个中级前端想要提高自己，完全就可以学习其中一个体系，便可以收获很多东西，从而突破自身&lt;/p&gt;
&lt;p&gt;从工程化角度来说，前端脚手架，性能优化，构建等等一系列的工作可以使用webpack处理，这里又会涉及到SSR相关工作，稍微深入一点便会踏进node的领域，可以越挖越深&lt;/p&gt;
&lt;p&gt;从前端框架角度来说，如何使用React这种框架解决大型项目的目录设计，小项目拆分，代码组织，UI组件，项目与项目之间的影响，路由、数据流向等等问题处理完毕便会进步很大一步&lt;/p&gt;
&lt;p&gt;从大前端角度来说，使用React处理Native领域的问题，使用React兼容小程序的问题，一套代码解决多端运行的策略，比如兼容微信小程序，随便某一点都值得我们研究几个月&lt;/p&gt;
&lt;p&gt;从规范来说，我们可以看看React如何组织代码的，测试用例怎么写，怎么维护github，怎么做升级，甚至怎么写文档，都是值得学习的&lt;/p&gt;
&lt;p&gt;从后期来说，如何在这个体系上做监控、做日志、做预警，如何让&lt;strong&gt;业务与框架更好的融合&lt;/strong&gt;都是需要思考的&lt;/p&gt;
&lt;p&gt;react体系是非常完善的，他不只是一个框架，而是一个庞大的技术体系，优秀的解决方案，基于此，我们十分有必要基于React或者Vue中的一个进行深入学习&lt;/p&gt;
&lt;p&gt;也正是因为这个庞大的体系，反而导致我们有时只是想写一个hello world，都变得似乎很困难，于是我们今天就先来使用标准的知识写一个demo试试&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;文章对应代码地址：&lt;a href=&quot;https://github.com/yexiaochai/react-demo&quot; target=&quot;_blank&quot;&gt;https://github.com/yexiaochai/react-demo&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;演示地址：&lt;a href=&quot;https://yexiaochai.github.io/react-demo/build/index.html&quot; target=&quot;_blank&quot;&gt;https://yexiaochai.github.io/react-demo/build/index.html&lt;/a&gt;&lt;a href=&quot;https://github.com/yexiaochai/react-demo&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;现在的框架已经十分完备了，而且把市场教育的很好，一个框架除了输出源码以外，还需要输出对应脚手架，直接引入框架源文件的做法已经不合适了，如果我们开发react项目，便可以直接使用框架脚手架创建项目，就react来说，暂时这个脚手架&lt;a href=&quot;https://github.com/react-community/create-react-native-app/&quot; target=&quot;_blank&quot;&gt;create-react-app&lt;/a&gt;比较常用，他有以下特点：&lt;/p&gt;
&lt;p&gt;① 基本配置为你写好了，如果按照规范来可做到零配置&lt;/p&gt;
&lt;p&gt;② 继承了React、JSX、ES6、Flow的支持，这个也是类React框架的标准三件套&lt;/p&gt;
&lt;p&gt;③ 因为现在进入了前端编译时代，服务器以及热加载必不可少，一个命令便能运行&lt;/p&gt;
&lt;p&gt;首先，我们一个命令安装依赖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install -g create-react-app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以使用脚手架创建项目了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
create-react-app react-demo
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;├── README.md
├── package.json
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
├── src
│   ├── App.css
│   ├── App.js
│   ├── App.test.js
│   ├── index.css
│   ├── index.js
│   ├── logo.svg
│   └── serviceWorker.js
└── yarn.lock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接浏览器打开的方法也不适用了，这里开发环境使用一个node服务器，执行代码运行起来：&lt;/p&gt;

&lt;p&gt;系统自动打开一个页面，并且会热更新，看一个项目首先看看其package.json：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;name&quot;: &quot;demo&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;version&quot;: &quot;0.1.0&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;private&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;dependencies&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;react&quot;: &quot;^16.6.3&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;react-dom&quot;: &quot;^16.6.3&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;react-scripts&quot;: &quot;2.1.1&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;scripts&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;start&quot;: &quot;react-scripts start&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;build&quot;: &quot;react-scripts build&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;test&quot;: &quot;react-scripts test&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;eject&quot;: &quot;react-scripts eject&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;eslintConfig&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;extends&quot;: &quot;react-app&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;browserslist&quot;&lt;span&gt;: [
    &lt;/span&gt;&quot;&amp;gt;0.2%&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;not dead&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;not ie &amp;lt;= 11&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;not op_mini all&quot;&lt;span&gt;
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以当我们执行npm run start的时候事实上是执行node_modules/react-script目录下对应脚本，可以看到项目目录本身连webpack的配置文件都没有，所有的配置全部在react-scripts中，如果对工程配置有什么定制化需求，执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm run eject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就将node_modules中对应配置拷贝出来了，可随意修改：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;config
├── env.js
├── jest
│   ├── cssTransform.js
│   └── fileTransform.js
├── paths.js
├── webpack.config.dev.js
├── webpack.config.prod.js
└── webpackDevServer.config.js
scripts
├── build.js
├── start.js
└── test.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以安装个服务器，可以直接运行build文件中的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install -g pushstate-&lt;span&gt;server
pushstate&lt;/span&gt;-server build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的代码开始比较简单，只写一个hello world就行了，所以把多余的目录文件全部删除之，修改下index.js代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;├── README.md
├── build
│   ├── asset&lt;/span&gt;-&lt;span&gt;manifest.json
│   ├── index.html
│   ├── precache&lt;/span&gt;-&lt;span&gt;manifest.ced1e61ba13691d3414ad116326a23a5.js
│   ├── service&lt;/span&gt;-&lt;span&gt;worker.js
│   └── static
│       └── js
│           ├── &lt;/span&gt;1&lt;span&gt;.794557b9.chunk.js
│           ├── &lt;/span&gt;1&lt;span&gt;.794557b9.chunk.js.map
│           ├── main.931cdb1a.chunk.js
│           ├── main.931cdb1a.chunk.js.map
│           ├── runtime&lt;/span&gt;~&lt;span&gt;main.229c360f.js
│           └── runtime&lt;/span&gt;~&lt;span&gt;main.229c360f.js.map
├── config
│   ├── env.js
│   ├── jest
│   │   ├── cssTransform.js
│   │   └── fileTransform.js
│   ├── paths.js
│   ├── webpack.config.js
│   └── webpackDevServer.config.js
├── package.json
├── public
│   └── index.html
├── scripts
│   ├── build.js
│   ├── start.js
│   └── test.js
├── src
│   └── index.js
└── yarn.lock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hello world&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;, document.getElementById('root'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个代码不难，我想关键是，这个代码写完了，突然就开服务器了，突然就打包成功了，突然就可以运行了，这个对于一些同学有点玄幻，这里就有必要说一下这里的webpack了&lt;/p&gt;

&lt;p&gt;我们说框架的脚手架，其实说白了就是工程化一块的配置，最初几年的工程化主要集中在压缩和优化、到requireJS时代后工程化变得必不可少，当时主要依赖grunt和gulp这类工具，后续为了把重复的工作杀掉工程化就越走越远了，但是和最初其实变化不大，都是一点一点的将各种优化往上加，加之最近两年typescript一击es6新语法需要编译进行，我们就进入了编译时代&lt;/p&gt;
&lt;p&gt;webpack已经进入了4.X时代，一般一个团队会有一个同事（可能是架构师）对webpack特别熟悉，将脚手架进行更改后，就可以很长时间不改一下，这个同事有时候主要就做这么一件事情，所以我们偶尔会称他为webpack配置工程师，虽然是个笑话，从侧门也可以看出，webpack至少不是个很容易学习的东西，造成这个情况的原因还不是其本身有多难，主要是最初文档不行，小伙伴想实现一个功能的时候连去哪里找插件，用什么合适的插件只能一个个的试，所以文档是工程化中很重要的一环&lt;/p&gt;
&lt;p&gt;这里再简单介绍下webpack，webpack是现在最常用的JavaScript程序的静态模块打包器（module bundler），他的特点就是以模块（module）为中心，我们只要给一个入口文件，他会根据这个入口文件找到所有的依赖文件，最后捆绑到一起，这里盗个图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201811/294743-20181114163536424-470269648.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里几个核心概念是：&lt;/p&gt;
&lt;p&gt;① 入口 - 指示webpack应该以哪个模块（一般是个js文件），作为内部依赖图的开始&lt;/p&gt;
&lt;p&gt;② 输出 - 告诉将打包后的文件输出到哪里，或者文件名是什么&lt;/p&gt;
&lt;p&gt;③ loader - 这个非常关键，这个让webpack能够去处理那些非JavaScript文件，或者是自定义文件，转换为可用的文件，比如将jsx转换为js，将less转换为css&lt;/p&gt;
&lt;p&gt;test就是正则标志，标识哪些文件会被处理；use表示用哪个loader &lt;/p&gt;
&lt;p&gt;④ 插件（plugins）&lt;/p&gt;
&lt;p&gt;插件被用于转换某些类型的模块，适用于的范围更广，包括打包优化、压缩、重新定义环境中的变量等等，这里举一个小例子进行说明，react中的jsx这种事实上是浏览器直接不能识别的，但是我们却可以利用webpack将之进行一次编译：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原 JSX 语法代码&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt; &amp;lt;h1&amp;gt;Hello,Webpack&amp;lt;/h1&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 被转换成正常的 JavaScript 代码&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt; React.createElement('h1', &lt;span&gt;null&lt;/span&gt;, 'Hello,Webpack')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我们来做个小demo介绍webpack的低阶使用，我们先建立一个文件夹webpack-demo，先建立一个文件src/index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们建立一个js文件src/index.js以及src/data.js以及style.css&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import data from './data'&lt;span&gt;
console.log(data);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
    name: &lt;/span&gt;'叶小钗'&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;* &lt;/span&gt;{&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.
├── package.json
└── src
    ├── data.js
    ├── index.html
    ├── index.js
    └── style.css&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候轮到我们的webpack登场，以及会用到的几个加载器（这里不讲安装过程）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
npm install webpack webpack-cli webpack-serve html-webpack-plugin html-loader css-loader style-loader file-loader url-loader --save-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;① webpack-cli是命令行工具，有了他我们就需要在他的规则下写配置即可，否则我们要自己在node环境写很多文件操作的代码&lt;/p&gt;
&lt;p&gt;② loader结尾的都是文件加载器，读取对应的文件需要对应的加载器，比如你自己定义一个.tpl的文件，如果没有现成的loader，你就只能自己写一个&lt;/p&gt;
&lt;p&gt;③ 其中还有个node服务器，方便我们调试&lt;/p&gt;
&lt;p&gt;因为我们这里的import是es6语法，浏览器不能识别，所以需要安装babel解析语言：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install babel-core babel-preset-env babel-loader --save-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们在package.json中加入一行代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&quot;babel&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;presets&quot;: [&quot;env&quot;&lt;span&gt;]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候就可以创建webpack文件了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('276a7ddd-ec2f-4e47-85a9-ff2531f6ae6b')&quot; readability=&quot;45&quot;&gt;&lt;img id=&quot;code_img_closed_276a7ddd-ec2f-4e47-85a9-ff2531f6ae6b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_276a7ddd-ec2f-4e47-85a9-ff2531f6ae6b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('276a7ddd-ec2f-4e47-85a9-ff2531f6ae6b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_276a7ddd-ec2f-4e47-85a9-ff2531f6ae6b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; const { resolve } = require('path'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; const HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用 WEBPACK_SERVE 环境变量检测当前是否是在 webpack-server 启动的开发环境中&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt; const dev =&lt;span&gt; Boolean(process.env.WEBPACK_SERVE)
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;  webpack 执行模式
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;  development：开发环境，它会在配置文件中插入调试相关的选项，比如 moduleId 使用文件路径方便调试
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;  production：生产环境，webpack 会将代码做压缩等优化
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;   &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;   mode: dev ? 'development' : 'production'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;  配置 source map
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;  开发模式下使用 cheap-module-eval-source-map, 生成的 source map 能和源码每行对应，方便打断点调试
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;  生产模式下使用 hidden-source-map, 生成独立的 source map 文件，并且不在 js 文件中插入 source map 路径，用于在 error report 工具中查看 （比如 Sentry)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;   &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;   devtool: dev ? 'cheap-module-eval-source-map' : 'hidden-source-map'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置页面入口 js 文件&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;   entry: './src/index.js'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置打包输出相关&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;  output: {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打包输出目录&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;     path: resolve(__dirname, 'dist'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口 js 的打包输出文件名&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;     filename: 'index.js'
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;  module: {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;    配置各种类型文件的加载器，称之为 loader
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    webpack 当遇到 import ... 时，会调用这里配置的 loader 对引用的文件进行编译
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    rules: [
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        使用 babel 编译 ES6 / ES7 / ES8 为 ES5 代码
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;        使用正则表达式匹配后缀名为 .js 的文件
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;         test: /\.js$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除 node_modules 目录下的文件，npm 安装的包不需要编译&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         exclude: /node_modules/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        use 指定该文件的 loader, 值可以是字符串或者数组。
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        这里先使用 eslint-loader 处理，返回的结果交给 babel-loader 处理。loader 的处理顺序是从最后一个到第一个。
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        eslint-loader 用来检查代码，如果有错误，编译的时候会报错。
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        babel-loader 用来编译 js 文件。
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         use: ['babel-loader', 'eslint-loader'&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 匹配 html 文件&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         test: /\.html$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        使用 html-loader, 将 html 内容存为 js 字符串，比如当遇到
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        import htmlString from './template.html';
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;        template.html 的文件内容会被转成一个 js 字符串，合并到 js 文件里。
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         use: 'html-loader'
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 匹配 css 文件&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         test: /\.css$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;        先使用 css-loader 处理，返回的结果交给 style-loader 处理。
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        css-loader 将 css 内容存为 js 字符串，并且会把 background, @font-face 等引用的图片，
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        字体文件交给指定的 loader 打包，类似上面的 html-loader, 用什么 loader 同样在 loaders 对象中定义，等会下面就会看到。
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;         use: ['style-loader', 'css-loader'&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;    ]
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;  配置 webpack 插件
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;  plugin 和 loader 的区别是，loader 是在 import 时根据不同的文件名，匹配不同的 loader 对这个文件做处理，
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;  而 plugin, 关注的不是文件的格式，而是在编译的各个阶段，会触发不同的事件，让你可以干预每个编译阶段。
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;   &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;  plugins: [
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    html-webpack-plugin 用来打包入口 html 文件
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    entry 配置的入口是 js 文件，webpack 以 js 文件为入口，遇到 import, 用配置的 loader 加载引入文件
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    但作为浏览器打开的入口 html, 是引用入口 js 的文件，它在整个编译过程的外面，
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    所以，我们需要 html-webpack-plugin 来打包作为入口的 html 文件
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;       &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;      template 参数指定入口 html 文件路径，插件会把这个文件交给 webpack 去编译，
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;      webpack 按照正常流程，找到 loaders 中 test 条件匹配的 loader 来编译，那么这里 html-loader 就是匹配的 loader
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;      html-loader 编译后产生的字符串，会由 html-webpack-plugin 储存为 html 文件到输出目录，默认文件名为 index.html
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;      可以通过 filename 参数指定输出的文件名
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;      html-webpack-plugin 也可以不指定 template 参数，它会使用默认的 html 模板。
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;       &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;       template: './src/index.html'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;       &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;      因为和 webpack 4 的兼容性问题，chunksSortMode 参数需要设置为 none
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;      https://github.com/jantimon/html-webpack-plugin/issues/870
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;       &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;       chunksSortMode: 'none'
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;  ]
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;webpack.config.js&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;然后执行webpack命令便构建好了我们的文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.
├── dist
│   ├── index.html
│   ├── index.js
│   └── index.js.map
├── package&lt;/span&gt;-&lt;span&gt;lock.json
├── package.json
├── src
│   ├── data.js
│   ├── index.html
│   ├── index.js
│   └── style.css
└── webpack.config.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，只要找到我们的入口文件index.js，便能轻易的将所有的模块打包成一个文件，包括样式文件，我们关于webpack的介绍到此为止，更详细的介绍请看这里：https://juejin.im/entry/5b63eb8bf265da0f98317441&lt;/p&gt;
&lt;p&gt;我们脚手架中的webpack配置实现相对比较复杂，我们先学会基本使用，后面点再来怎么深入这块，因为现有的配置肯定不能满足我们项目的需求&lt;/p&gt;

&lt;p&gt;这里为了更多的解决大家工作中会遇到到问题，我们这里实现两个页面：&lt;/p&gt;
&lt;p&gt;① 首页，包括城市列表选择页面&lt;/p&gt;
&lt;p&gt;② 列表页面，并且会实现滚动刷新等效果&lt;/p&gt;
&lt;p&gt;页面大概长这个样子（因为这个页面之前我就实现过，所以样式部分我便直接拿过来使用即可，大家关注逻辑实现即可）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181229182407209-172581852.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们这里先捡硬骨头坑，直接就来实现这里的列表页面，这里是之前的页面，&lt;a href=&quot;http://yexiaochai.github.io/mvc/webapp/bus/list.html&quot; target=&quot;_blank&quot;&gt;大家可以点击对比看看&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;组件拆分&lt;/h2&gt;
&lt;p&gt;react两个核心第一是摆脱dom操作，第二是组件化开发，这两点在小型项目中意义都不是十分大，只有经历过多人维护的大项目，其优点才会体现出来，我们这里第一步当然也是拆分页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181230134740147-1255485815.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里每一个模块都是一个组件，从通用性来说我们可以将之分为：&lt;/p&gt;
&lt;p&gt;① UI组件，与业务无关的组件，只需要填充数据，比如这里的header组件和日历组件以及其中的列表模块也可以分离出一个组件，但看业务耦合大不大&lt;/p&gt;
&lt;p&gt;② 页面组件，页面中的元素&lt;/p&gt;
&lt;p&gt;工欲善其事必先利其器，所以我们这里先来实现几个组件模块，这里首先是对于新人比较难啃的日历模块，我们代码过程中也会给大家说目录该如何划分&lt;/p&gt;
&lt;h2&gt;日历组件&lt;/h2&gt;
&lt;p&gt;日了组件是相对比较复杂的组件了，单单这个组件又可以分为：&lt;/p&gt;
&lt;p&gt;① 月组件，处理月部分&lt;/p&gt;
&lt;p&gt;② 日部分，处理日期部分&lt;/p&gt;
&lt;p&gt;能够将这个组件做好，基本对组件系统会有个初步了解了，我们这里首先来实现日历-日部分，这里我们为项目建立一个src/ui/calendar目录，然后创建我们的文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.
├── index.js
└── ui
    └── calendar
        └── calendar.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import React from 'react';
import ReactDOM from 'react-dom';
import Calendar from './ui/calendar/calendar';

ReactDOM.render(&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Calendar&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;, document.getElementById('root'));
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import React from 'react';

export default class Calendar extends React.Component {

    render() {
        return (
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;日历&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        )
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候再执行以下命令便会编译运行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm run start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然不知为什么，但是我们的代码运行了，大概就是这么一个情况：），接下来我们开始来完善我们的代码，日历组件，我们外层至少得告诉日历年和月，日历才好做展示，那么这里出现了第一个问题，我们怎么将属性数据传给组件呢？这里我们来简单描述下react中的state与props&lt;/p&gt;
&lt;p&gt;state是react中的状态属性，定义一个正确的状态是写组件的第一步，state需要代表组件UI的完整状态集，任何UI的改变都应该从state体现出来，判断组件中一个变量是不是该作为state有以下依据：&lt;/p&gt;
&lt;p&gt;① 这个变量是否是从父组件获取，如果是，那么他应该是一个属性&lt;/p&gt;
&lt;p&gt;② 这个变量是否在组件的整个生命周期不会变化，如果是，那么他也是个属性&lt;/p&gt;
&lt;p&gt;③ 这个变量是否是通过其他状态或者属性计算出来的，如果是，那么他也不是一个状态&lt;/p&gt;
&lt;p&gt;④ 状态需要在组件render时候被用到&lt;/p&gt;
&lt;p&gt;这里的主要区别是state是可变的，而props是只读的，如果想要改变props，只能通过父组件修改，就本章内容，我们将年月等设置为属性，这里先忽略样式的处理，简单几个代码，轮廓就出来了，这里有以下变化：&lt;/p&gt;
&lt;p&gt;① 新增common文件夹，放了工具类函数&lt;/p&gt;
&lt;p&gt;② 新增static目录存放css，这里的css我们后续会做特殊处理，这里先不深入&lt;/p&gt;
&lt;p&gt;于是，我们目录变成了这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.
├── README.md
├── package&lt;/span&gt;-&lt;span&gt;lock.json
├── package.json
├── public
│   ├── index.html
│   └── static
│       └── css
│           ├── global.css
│           └── index.css
├── src
│   ├── common
│   │   └── utils.js
│   ├── index.js
│   └── ui
│       └── calendar
│           ├── calendar.js
│           ├── day.js
│           └── month.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们将calendar代码贴出来看看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
import React from 'react'&lt;span&gt;;
import dateUtils from &lt;/span&gt;'../../common/utils'&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; class Calendar extends React.Component {
    render() {
        let year &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
        let month &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
        let weekDayArr &lt;/span&gt;= ['日', '一', '二', '三', '四', '五', '六'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前日期数据&lt;/span&gt;
        let displayInfo = dateUtils.getDisplayInfo(&lt;span&gt;new&lt;/span&gt; Date(year, month, 0&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;ul className=&quot;cm-calendar &quot;&amp;gt;
                &amp;lt;ul className=&quot;cm-calendar-hd&quot;&amp;gt;&lt;span&gt;
                    {
                        weekDayArr.map((data, i) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &amp;lt;li className=&quot;cm-item--disabled&quot;&amp;gt;{data}&amp;lt;/li&amp;gt;
&lt;span&gt;                        })
                    }
                &lt;/span&gt;&amp;lt;/ul&amp;gt;
            &amp;lt;/ul&amp;gt;
&lt;span&gt;        )
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;样式基本出来了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181230171749985-400330384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候我们需要将月组件实现了，这里贴出来第一阶段的完整代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import React from 'react'&lt;span&gt;;
import ReactDOM from &lt;/span&gt;'react-dom'&lt;span&gt;;
import Calendar from &lt;/span&gt;'./ui/calendar/calendar'&lt;span&gt;;

ReactDOM.render(
    &lt;/span&gt;&amp;lt;Calendar year=&quot;2018&quot; month=&quot;12&quot;/&amp;gt;, 
    document.getElementById('root'&lt;span&gt;)
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('964fb97a-9c8b-427f-a369-3b09fc8b64a9')&quot; readability=&quot;51&quot;&gt;&lt;img id=&quot;code_img_closed_964fb97a-9c8b-427f-a369-3b09fc8b64a9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_964fb97a-9c8b-427f-a369-3b09fc8b64a9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('964fb97a-9c8b-427f-a369-3b09fc8b64a9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_964fb97a-9c8b-427f-a369-3b09fc8b64a9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;97&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let isDate = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (date) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; date &amp;amp;&amp;amp;&lt;span&gt; date.getMonth;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;兼容小程序日期&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; let getDate = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(year, month, day) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!day) day = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(year, month, day);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; let isLeapYear = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (year) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;传入为时间格式需要处理&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (isDate(year)) year =&lt;span&gt; year.getFullYear()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((year % 4 == 0 &amp;amp;&amp;amp; year % 100 != 0) || (year % 400 == 0)) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; let getDaysOfMonth = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (date) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; month = date.getMonth() + 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意此处月份要加1&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; year =&lt;span&gt; date.getFullYear();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][parseInt(month) - 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; let getBeginDayOfMouth = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (date) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; month =&lt;span&gt; date.getMonth();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; year =&lt;span&gt; date.getFullYear();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; d = getDate(year, month, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; d.getDay();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; let getDisplayInfo = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(date) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isDate(date)) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;       date =&lt;span&gt; getDate(date)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; year =&lt;span&gt; date.getFullYear();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; month =&lt;span&gt; date.getMonth();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; d =&lt;span&gt; getDate(year, month);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个月一共多少天&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; days =&lt;span&gt; getDaysOfMonth(d);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个月是星期几开始的&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; beginWeek =&lt;span&gt; getBeginDayOfMouth(d);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;      year: year,
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;      month: month,
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;      days: days,
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;      beginWeek: beginWeek
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;   let isOverdue = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isOverdue(year, month, day) {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     let date = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(year, month, day);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     let now = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     now = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(now.getFullYear(), now.getMonth(), now.getDate());
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; date.getTime() &amp;lt;&lt;span&gt; now.getTime();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;   
&lt;span&gt;61&lt;/span&gt;   let isToday = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isToday(year, month, day, selectedDate) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     let date = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(year, month, day);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; date.getTime() ==&lt;span&gt; selectedDate;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt; let dateUtils =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    isLeapYear,
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    getDaysOfMonth,
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    getBeginDayOfMouth,
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    getDisplayInfo,
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    isOverdue,
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    isToday
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt; dateUtils;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;utils.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1a553ebd-30ee-4f05-bba0-f23a2f01da11')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_1a553ebd-30ee-4f05-bba0-f23a2f01da11&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1a553ebd-30ee-4f05-bba0-f23a2f01da11&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1a553ebd-30ee-4f05-bba0-f23a2f01da11',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1a553ebd-30ee-4f05-bba0-f23a2f01da11&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; import dateUtils from '../../common/utils'
&lt;span&gt; 3&lt;/span&gt; import CalendarMonth from './month'
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class Calendar extends React.Component {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         let year = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         let month = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         let weekDayArr = ['日', '一', '二', '三', '四', '五', '六'&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前日期数据&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         let displayInfo = dateUtils.getDisplayInfo(&lt;span&gt;new&lt;/span&gt; Date(year, month, 0&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &amp;lt;ul className=&quot;cm-calendar &quot;&amp;gt;
&lt;span&gt;15&lt;/span&gt;                 &amp;lt;ul className=&quot;cm-calendar-hd&quot;&amp;gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         weekDayArr.map((data, index) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt; &amp;lt;li key={index} className=&quot;cm-item--disabled&quot;&amp;gt;{data}&amp;lt;/li&amp;gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                        })
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &amp;lt;/ul&amp;gt;
&lt;span&gt;22&lt;/span&gt;                 &amp;lt;CalendarMonth year={year} month={month}/&amp;gt;
&lt;span&gt;23&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;calendar.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b0daec5f-7d32-4b81-8f60-5078213495df')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_b0daec5f-7d32-4b81-8f60-5078213495df&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b0daec5f-7d32-4b81-8f60-5078213495df&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b0daec5f-7d32-4b81-8f60-5078213495df',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b0daec5f-7d32-4b81-8f60-5078213495df&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; import dateUtils from '../../common/utils'
&lt;span&gt; 3&lt;/span&gt; import CalendarDay from './day'
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class CalendarMonth extends React.Component {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取首次空格&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    _renderBeginDayOfMouth(beforeDays) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         let html =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (let i = 0; i &amp;lt; beforeDays; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             html.push(&amp;lt;li key={i} className=&quot;cm-item--disabled&quot;&amp;gt;&amp;lt;/li&amp;gt;);
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; html;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;和_renderBeginDayOfMouth类似可以重构掉&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    _renderDays(year, month, days) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         let html =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(let i = 0; i &amp;lt; days; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            html.push(    
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &amp;lt;CalendarDay key={i} year={year} month={month} day={i} /&amp;gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; html;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         let year = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         let month = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         let displayInfo = dateUtils.getDisplayInfo(&lt;span&gt;new&lt;/span&gt; Date(year, parseInt(month) - 1), 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;console.log(displayInfo)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &amp;lt;ul className=&quot;cm-calendar-bd &quot;&amp;gt;
&lt;span&gt;34&lt;/span&gt;                 &amp;lt;h3 className=&quot;cm-month calendar-cm-month js_month&quot;&amp;gt;{year + '-' + month}&amp;lt;/h3&amp;gt;
&lt;span&gt;35&lt;/span&gt;                 
&lt;span&gt;36&lt;/span&gt;                 &amp;lt;ul className=&quot;cm-day-list&quot;&amp;gt;
&lt;span&gt;37&lt;/span&gt;                     { &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._renderBeginDayOfMouth( displayInfo.beginWeek) }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                     { &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._renderDays(year, month, displayInfo.days) }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &amp;lt;/ul&amp;gt;
&lt;span&gt;40&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;month.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('deb331c9-a329-462e-9a6b-ee6e715537e0')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_deb331c9-a329-462e-9a6b-ee6e715537e0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_deb331c9-a329-462e-9a6b-ee6e715537e0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('deb331c9-a329-462e-9a6b-ee6e715537e0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_deb331c9-a329-462e-9a6b-ee6e715537e0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; import dateUtils from '../../common/utils'
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class CalendarDay extends React.Component {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         let year = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         let month = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         let day = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.day;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         let klass = dateUtils.isOverdue(year, parseInt(month) - 1, day) ? 'cm-item--disabled' : ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &amp;lt;li year={year} month={month} day={day}  &amp;gt;
&lt;span&gt;16&lt;/span&gt;                 &amp;lt;div className=&quot;cm-field-wrapper &quot;&amp;gt;
&lt;span&gt;17&lt;/span&gt;                     &amp;lt;div className=&quot;cm-field-title&quot;&amp;gt;{day + 1}&amp;lt;/div&amp;gt;
&lt;span&gt;18&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt;19&lt;/span&gt;             &amp;lt;/li&amp;gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;day.js&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这段代码的效果是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181230185154407-1559956527.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;基础框架结构出来后，我们就需要一点一点向上面加肉了，首先我们加一个选中日期，需要一点特效，这里稍微改下代码，具体各位去GitHub上面看代码了，这段代码就不贴出来了，&lt;span&gt;因为我们这里是写demo，这个日历组件功能完成60%即可，不会全部完成&lt;/span&gt;，这里我们做另一个操作，就是在页面上添加一个上一个月下一个月按钮，并且点击日历时候在控制台将当前日期打印出来即可，这里是效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181230192907982-593418820.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候我们首先为左右两个按钮添加事件，这里更改下代码变成了这个样子，这里贴出阶段代码，完整代码请大家在git上查看&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2e7a853d-755f-4ef9-bce6-1544066d9907')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_2e7a853d-755f-4ef9-bce6-1544066d9907&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2e7a853d-755f-4ef9-bce6-1544066d9907&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2e7a853d-755f-4ef9-bce6-1544066d9907',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2e7a853d-755f-4ef9-bce6-1544066d9907&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; import ReactDOM from 'react-dom'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; import Calendar from './ui/calendar/calendar'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class CalendarMain extends React.Component {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    constructor(props) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        super(props);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         let today = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             month: 12&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            selectdate: today
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    preMonth() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             month: &lt;span&gt;this&lt;/span&gt;.state.month - 1
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    nextMonth() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             month: &lt;span&gt;this&lt;/span&gt;.state.month + 1
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    ondayclick(year, month, day) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             selectdate: &lt;span&gt;new&lt;/span&gt; Date(year, parseInt(month) - 1&lt;span&gt;, day).getTime()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         let selectdate = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.selectdate;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         let month = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.month;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &amp;lt;div className=&quot;calendar-wrapper-box&quot;&amp;gt;
&lt;span&gt;37&lt;/span&gt;                 &amp;lt;div className=&quot;box-hd&quot;&amp;gt;
&lt;span&gt;38&lt;/span&gt;                     &amp;lt;span className=&quot;fl icon-back js_back &quot; onClick={&lt;span&gt;this&lt;/span&gt;.preMonth.bind(&lt;span&gt;this&lt;/span&gt;)}  &amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;39&lt;/span&gt;                     &amp;lt;span className=&quot;fr icon-next js_next&quot; onClick={&lt;span&gt;this&lt;/span&gt;.nextMonth.bind(&lt;span&gt;this&lt;/span&gt;)} &amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;40&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt;41&lt;/span&gt;                 &amp;lt;Calendar ondayclick={&lt;span&gt;this&lt;/span&gt;.ondayclick.bind(&lt;span&gt;this&lt;/span&gt;)} year=&quot;2018&quot; month={month} selectdate={selectdate} /&amp;gt;
&lt;span&gt;42&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;ReactDOM.render(
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &amp;lt;CalendarMain /&amp;gt;
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    ,
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     document.getElementById('root'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; );
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;index.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c9e68efc-db47-4ebd-99cc-5d2d14874cf7')&quot; readability=&quot;52&quot;&gt;&lt;img id=&quot;code_img_closed_c9e68efc-db47-4ebd-99cc-5d2d14874cf7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c9e68efc-db47-4ebd-99cc-5d2d14874cf7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c9e68efc-db47-4ebd-99cc-5d2d14874cf7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c9e68efc-db47-4ebd-99cc-5d2d14874cf7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;99&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let isDate = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (date) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; date &amp;amp;&amp;amp;&lt;span&gt; date.getMonth;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;兼容小程序日期&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; let getDate = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(year, month, day) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!day) day = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(year, month, day);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; let isLeapYear = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (year) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;传入为时间格式需要处理&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (isDate(year)) year =&lt;span&gt; year.getFullYear()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((year % 4 == 0 &amp;amp;&amp;amp; year % 100 != 0) || (year % 400 == 0)) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; let getDaysOfMonth = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (date) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; month = date.getMonth() + 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意此处月份要加1&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; year =&lt;span&gt; date.getFullYear();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][parseInt(month) - 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; let getBeginDayOfMouth = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (date) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; month =&lt;span&gt; date.getMonth();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; year =&lt;span&gt; date.getFullYear();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; d = getDate(year, month, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; d.getDay();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; let getDisplayInfo = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(date) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isDate(date)) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;       date =&lt;span&gt; getDate(date)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; year =&lt;span&gt; date.getFullYear();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; month =&lt;span&gt; date.getMonth();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; d =&lt;span&gt; getDate(year, month);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个月一共多少天&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; days =&lt;span&gt; getDaysOfMonth(d);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个月是星期几开始的&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; beginWeek =&lt;span&gt; getBeginDayOfMouth(d);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;      year: year,
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;      month: month,
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;      days: days,
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;      beginWeek: beginWeek
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;   let isOverdue = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isOverdue(year, month, day) {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     let date = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(year, month, day);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     let now = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     now = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(now.getFullYear(), now.getMonth(), now.getDate());
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; date.getTime() &amp;lt;&lt;span&gt; now.getTime();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;   
&lt;span&gt;61&lt;/span&gt;   let isToday = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isToday(year, month, day, selectedDate) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     let date = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(year, month, day);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;     let d = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(selectedDate);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;     d = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(d.getFullYear(), d.getMonth(), d.getDate());
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     selectedDate =&lt;span&gt; d.getTime();
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; date.getTime() ==&lt;span&gt; selectedDate;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; let dateUtils =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    isLeapYear,
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    getDaysOfMonth,
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    getBeginDayOfMouth,
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;    getDisplayInfo,
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    isOverdue,
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    isToday
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt; dateUtils;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;utils.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3a9312f0-133c-48db-b37c-988b6d37f094')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_3a9312f0-133c-48db-b37c-988b6d37f094&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a9312f0-133c-48db-b37c-988b6d37f094&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3a9312f0-133c-48db-b37c-988b6d37f094',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a9312f0-133c-48db-b37c-988b6d37f094&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
import React from 'react'&lt;span&gt;;
import dateUtils from &lt;/span&gt;'../../common/utils'&lt;span&gt;
import CalendarMonth from &lt;/span&gt;'./month'&lt;span&gt;


export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; class Calendar extends React.Component {
    render() {
        let year &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
        let month &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
        let weekDayArr &lt;/span&gt;= ['日', '一', '二', '三', '四', '五', '六'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前日期数据&lt;/span&gt;
        let displayInfo = dateUtils.getDisplayInfo(&lt;span&gt;new&lt;/span&gt; Date(year, month, 0&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;ul className=&quot;cm-calendar &quot;&amp;gt;
                &amp;lt;ul className=&quot;cm-calendar-hd&quot;&amp;gt;&lt;span&gt;
                    {
                        weekDayArr.map((data, index) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &amp;lt;li key={index} className=&quot;cm-item--disabled&quot;&amp;gt;{data}&amp;lt;/li&amp;gt;
&lt;span&gt;                        })
                    }
                &lt;/span&gt;&amp;lt;/ul&amp;gt;
                &amp;lt;CalendarMonth ondayclick={&lt;span&gt;this&lt;/span&gt;.props.ondayclick} selectdate={&lt;span&gt;this&lt;/span&gt;.props.selectdate} year={year} month={month}/&amp;gt;
            &amp;lt;/ul&amp;gt;
&lt;span&gt;        )
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;calendar.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('62546f4b-89c6-4338-882b-ddde46ab9bb2')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_62546f4b-89c6-4338-882b-ddde46ab9bb2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_62546f4b-89c6-4338-882b-ddde46ab9bb2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('62546f4b-89c6-4338-882b-ddde46ab9bb2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_62546f4b-89c6-4338-882b-ddde46ab9bb2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; import dateUtils from '../../common/utils'
&lt;span&gt; 3&lt;/span&gt; import CalendarDay from './day'
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class CalendarMonth extends React.Component {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取首次空格&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    _renderBeginDayOfMouth(beforeDays) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         let html =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (let i = 0; i &amp;lt; beforeDays; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             html.push(&amp;lt;li key={i} className=&quot;cm-item--disabled&quot;&amp;gt;&amp;lt;/li&amp;gt;);
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; html;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;和_renderBeginDayOfMouth类似可以重构掉&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    _renderDays(year, month, days) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         let html =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(let i = 1; i &amp;lt;= days; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            html.push(    
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &amp;lt;CalendarDay ondayclick={&lt;span&gt;this&lt;/span&gt;.props.ondayclick}  selectdate={&lt;span&gt;this&lt;/span&gt;.props.selectdate}  key={i} year={year} month={month} day={i} /&amp;gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; html;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         let year = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         let month = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         
&lt;span&gt;31&lt;/span&gt;         let name = &lt;span&gt;new&lt;/span&gt; Date(year, parseInt(month) - 1, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         name = name.getFullYear() + '-' + (name.getMonth() + 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         let displayInfo = dateUtils.getDisplayInfo(&lt;span&gt;new&lt;/span&gt; Date(year, parseInt(month) - 1), 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;console.log(displayInfo)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &amp;lt;ul className=&quot;cm-calendar-bd &quot;&amp;gt;
&lt;span&gt;38&lt;/span&gt;                 &amp;lt;h3 className=&quot;cm-month calendar-cm-month js_month&quot;&amp;gt;{name}&amp;lt;/h3&amp;gt;
&lt;span&gt;39&lt;/span&gt;                 
&lt;span&gt;40&lt;/span&gt;                 &amp;lt;ul className=&quot;cm-day-list&quot;&amp;gt;
&lt;span&gt;41&lt;/span&gt;                     { &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._renderBeginDayOfMouth( displayInfo.beginWeek) }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     { &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._renderDays(year, month, displayInfo.days) }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &amp;lt;/ul&amp;gt;
&lt;span&gt;44&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;month.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8ffb69e5-bce4-4cf6-9b8b-fc529ae1b9f8')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_8ffb69e5-bce4-4cf6-9b8b-fc529ae1b9f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8ffb69e5-bce4-4cf6-9b8b-fc529ae1b9f8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8ffb69e5-bce4-4cf6-9b8b-fc529ae1b9f8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8ffb69e5-bce4-4cf6-9b8b-fc529ae1b9f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; import dateUtils from '../../common/utils'
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class CalendarDay extends React.Component {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    onClick(e) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         let year = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         let month = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         let day = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.day;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.ondayclick(year, month, day)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         let year = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.year;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         let month = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.month;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         let day = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.day;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         let selectdate = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.selectdate;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         let klass = dateUtils.isOverdue(year, parseInt(month) - 1, day) ? 'cm-item--disabled' : ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(dateUtils.isToday(year, parseInt(month) - 1&lt;span&gt;, day, selectdate))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             klass += ' active '
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &amp;lt;li onClick={&lt;span&gt;this&lt;/span&gt;.onClick.bind(&lt;span&gt;this&lt;/span&gt;)} className={klass} year={year} month={month} day={day}  &amp;gt;
&lt;span&gt;26&lt;/span&gt;                 &amp;lt;div className=&quot;cm-field-wrapper &quot;&amp;gt;
&lt;span&gt;27&lt;/span&gt;                     &amp;lt;div className=&quot;cm-field-title&quot;&amp;gt;{day }&amp;lt;/div&amp;gt;
&lt;span&gt;28&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt;29&lt;/span&gt;             &amp;lt;/li&amp;gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;day.js&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;至此，我们日历一块的基本代码完成，完成度应该有60%，我们继续接下来的组件编写&lt;/p&gt;
&lt;h2&gt;header组件&lt;/h2&gt;
&lt;p&gt;日历组件结束后，我们来实现另一个UI类组件-header组件，我们这里实现的header算是比较中规中矩的头部组件，复杂的情况要考虑hybrid情况，那就会很复杂了，话不多说，我们先在ui目录下建立一个header目录，写下最简单的代码后，我们的index：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ReactDOM.render(
    &lt;/span&gt;&amp;lt;Header title=&quot;我是标题&quot; /&amp;gt;
&lt;span&gt;    ,
    document.getElementById(&lt;/span&gt;'root'&lt;span&gt;)
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后是我们的header组件:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class Header extends React.Component {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &amp;lt;div class=&quot;cm-header&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;                 &amp;lt;span class=&quot; cm-header-icon fl  js_back&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;                     &amp;lt;i class=&quot;icon-back&quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;span&gt; 8&lt;/span&gt;                 &amp;lt;/span&amp;gt;
&lt;span&gt; 9&lt;/span&gt;                 &amp;lt;h1 class=&quot;cm-page-title js_title&quot;&amp;gt;
&lt;span&gt;10&lt;/span&gt;                     {&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.title}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &amp;lt;/h1&amp;gt;
&lt;span&gt;12&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181231144328619-286658644.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;于是header部分的框架就出来了，这个时候我们来将之加强，这里也不弄太强，就将后退的事件加上，以及左边按钮加上对应的按钮和事件，这里改造下index和header代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('10044bab-4fb0-4d86-b494-30f505d65aef')&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_10044bab-4fb0-4d86-b494-30f505d65aef&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_10044bab-4fb0-4d86-b494-30f505d65aef&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('10044bab-4fb0-4d86-b494-30f505d65aef',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_10044bab-4fb0-4d86-b494-30f505d65aef&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
import React from 'react'&lt;span&gt;;
import ReactDOM from &lt;/span&gt;'react-dom'&lt;span&gt;;
import Calendar from &lt;/span&gt;'./ui/calendar/calendar'&lt;span&gt;;
import Header from &lt;/span&gt;'./ui/header/header'&lt;span&gt;;

class CalendarMain extends React.Component {
    constructor(props) {
        super(props);
        let today &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
            month: &lt;/span&gt;12&lt;span&gt;,
            selectdate: today
        };
    }
    preMonth() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
            month: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state.month - 1&lt;span&gt;
        });
    }
    nextMonth() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
            month: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state.month + 1&lt;span&gt;
        });
    }
    ondayclick(year, month, day) {

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
            selectdate: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Date(year, parseInt(month) - 1&lt;span&gt;, day).getTime()
        })

    }
    render() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        let selectdate = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.selectdate;;
        let month &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.month;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div className=&quot;calendar-wrapper-box&quot;&amp;gt;
                &amp;lt;div className=&quot;box-hd&quot;&amp;gt;
                    &amp;lt;span className=&quot;fl icon-back js_back &quot; onClick={&lt;span&gt;this&lt;/span&gt;.preMonth.bind(&lt;span&gt;this&lt;/span&gt;)}  &amp;gt;&amp;lt;/span&amp;gt;
                    &amp;lt;span className=&quot;fr icon-next js_next&quot; onClick={&lt;span&gt;this&lt;/span&gt;.nextMonth.bind(&lt;span&gt;this&lt;/span&gt;)} &amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;Calendar ondayclick={&lt;span&gt;this&lt;/span&gt;.ondayclick.bind(&lt;span&gt;this&lt;/span&gt;)} year=&quot;2018&quot; month={month} selectdate={selectdate} /&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}

class HeaderMain extends React.Component {
    constructor(props) {
        super(props);

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
            title: &lt;/span&gt;'我是标题'&lt;span&gt;
        };

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里定义，右边按钮规则&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.state.right =&lt;span&gt; [
            {
                tagname: &lt;/span&gt;'search'&lt;span&gt;,
                callback: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                    console.log(&lt;/span&gt;'搜索'&lt;span&gt;)
                }
            },
            {
                tagname: &lt;/span&gt;'tips'&lt;span&gt;,
                value: &lt;/span&gt;'说明'&lt;span&gt;,
                callback: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                    alert(&lt;/span&gt;'我是按钮'&lt;span&gt;)
                }
            }
        ]

    }
    onBackaction() {
        console.log(&lt;/span&gt;'返回'&lt;span&gt;)
    }
    render() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;Header right={&lt;span&gt;this&lt;/span&gt;.state.right} title={&lt;span&gt;this&lt;/span&gt;.state.title} backaction={&lt;span&gt;this&lt;/span&gt;.onBackaction.bind(&lt;span&gt;this&lt;/span&gt;)} /&amp;gt;
&lt;span&gt;        )
    }
}

class PageMain extends React.Component {
    constructor(props) {
        super(props);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {};
    }
    render() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        let selectdate = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.selectdate;;
        let month &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.month;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;HeaderMain /&amp;gt;
&lt;span&gt;        )
    }
}

ReactDOM.render(
    &lt;/span&gt;&amp;lt;PageMain /&amp;gt;, document.getElementById('root')
);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;index.js&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import React from 'react'&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; class Header extends React.Component {

    _renderRight() {
        let html &lt;/span&gt;=&lt;span&gt; [];
        let arr &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.right;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!arr) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i = 0, len = arr.length; i &amp;lt; len; i++&lt;span&gt;) {
            let item &lt;/span&gt;=&lt;span&gt; arr[i];
            html.push(   
                &lt;/span&gt;&amp;lt;span onClick={item.callback} key={i} className={item.value ? 'cm-header-btn fr' : 'cm-header-icon fr'} &amp;gt;&lt;span&gt;
                    {item.value &lt;/span&gt;? item.value : &amp;lt;i className={'icon-' + item.tagname}&amp;gt;&amp;lt;/i&amp;gt;}
                &amp;lt;/span&amp;gt;
&lt;span&gt;            )
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; html;
    }

    onClick() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.backaction) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.backaction();
        }
    }

    render() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div className=&quot;cm-header&quot;&amp;gt;&lt;span&gt;
                {&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._renderRight()}
                &lt;/span&gt;&amp;lt;span className=&quot; cm-header-icon fl  js_back&quot; onClick={&lt;span&gt;this&lt;/span&gt;.onClick.bind(&lt;span&gt;this&lt;/span&gt;)} &amp;gt;
                    &amp;lt;i className=&quot;icon-back&quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;/span&amp;gt;
                &amp;lt;h1 className=&quot;cm-page-title js_title&quot;&amp;gt;&lt;span&gt;
                    {&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.title}
                &lt;/span&gt;&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181231153524720-1543451189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就这样按钮和点击时候的事件回调都做好了，这里图标有点丑这个事情大家就别关注了，注意这里是一种规则，设定了规则后按照规则写代码后续会极大提高工作效率，到此我们header部分的代码就完成了，很是轻松加愉快啊！！！&lt;/p&gt;
&lt;h2&gt;列表组件&lt;/h2&gt;
&lt;p&gt;列表组件这里涉及到部分业务代码了，因为存在请求后端数据了，于是我们就比较尴尬了，因为我一点点都不想去为了写一个demo而去写建立数据库或者写代码，于是我们这里使用mock搞定数据部分，工欲善其事必先利其器，我们这里首先将数据部分解决掉（PS：因为原来项目的接口不能访问，所以直接胡乱mock数据，这样也许会造成之前做的日历没有多大的意义，事实上数据应该是用日期参数请求的）&lt;/p&gt;
&lt;p&gt;现在想做假数据已经有很多成熟的平台了，比如这个：&lt;a href=&quot;https://www.easy-mock.com&quot; target=&quot;_blank&quot;&gt;https://www.easy-mock.com&lt;/a&gt;，使用起来非常简单，大家去看看他的教程就行，我们这里直接使用之：&lt;/p&gt;
&lt;p&gt;现在访问这个url就能看到我们的列表数据：&lt;a href=&quot;https://www.easy-mock.com/mock/5c29d45956db174d47ce162a/example_copy/train/list#!method=get&quot; target=&quot;_blank&quot;&gt;https://www.easy-mock.com/mock/5c29d45956db174d47ce162a/example_copy/train/list#!method=get&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在react中我们使用fetch获取数据，这里直接上代码了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;fetch(
    &lt;/span&gt;'https://www.easy-mock.com/mock/5c29d45956db174d47ce162a/example_copy/train/list'&lt;span&gt;
)
.then(res &lt;/span&gt;=&amp;gt;&lt;span&gt; res.json())
.then(data &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        console.log(data)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就会将我们的数据打印到控制台，但是实际项目中我们不会这样请求数据，而会对他进行两层封装，第一层封装隐藏fetch，让我们无论是ajax或者fetch都可以，第二层是要给他加上缓存功能比如我们的localstorage，包括一些公告参数处理撒的，所以我们会在我们的目录中新增data目录专门用来处理数据请求部分，甚至我们会为没一个数据请求建立一个“实体”，让各个页面重复调用，我这里偷懒就直接将之前微信小程序的请求模块和换成模块拿过来使用即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import listModel from './data/demo'&lt;span&gt;;
listModel.setParam({
    a: &lt;/span&gt;1&lt;span&gt;,
    b: &lt;/span&gt;'aa'&lt;span&gt;
});

listModel.execute(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
    console.log(data)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2d27f899-c78d-46f0-a84d-38c67d53c431')&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_2d27f899-c78d-46f0-a84d-38c67d53c431&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2d27f899-c78d-46f0-a84d-38c67d53c431&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2d27f899-c78d-46f0-a84d-38c67d53c431',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2d27f899-c78d-46f0-a84d-38c67d53c431&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class Model {
  constructor() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.url = ''&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.param =&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.validates =&lt;span&gt; [];
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'GET'&lt;span&gt;;
  }
  pushValidates(handler) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; handler === 'function'&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.validates.push(handler);
    }
  }
  setParam(key, val) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; key === 'object'&lt;span&gt;) {
      Object.assign(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.param, key);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.param[key] =&lt;span&gt; val;
    }
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@override&lt;/span&gt;
&lt;span&gt;  buildurl() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.url;
  }
  onDataSuccess() {
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行数据请求逻辑&lt;/span&gt;
&lt;span&gt;  execute(onComplete, onError) {
    let scope &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    let _success &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
      let _data &lt;/span&gt;=&lt;span&gt; data;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; data == 'string') _data =&lt;span&gt; JSON.parse(data);

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @description 开发者可以传入一组验证方法进行验证&lt;/span&gt;
      &lt;span&gt;for&lt;/span&gt; (let i = 0, len = scope.validates.length; i &amp;lt; len; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;scope.validates[i](data)) {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @description 如果一个验证不通过就返回&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; onError === 'function'&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; onError.call(scope || &lt;span&gt;this&lt;/span&gt;&lt;span&gt;, _data, data);
          } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
          }
        }
      }

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @description 对获取的数据做字段映射&lt;/span&gt;
      let datamodel = &lt;span&gt;typeof&lt;/span&gt; scope.dataformat === 'function' ?&lt;span&gt; scope.dataformat(_data) : _data;

      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (scope.onDataSuccess) scope.onDataSuccess.call(scope, datamodel, data);
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; onComplete === 'function'&lt;span&gt;) {
        onComplete.call(scope, datamodel, data);
      }
    };
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._sendRequest(_success);
  }

  _getParamStr(s) {
    let str &lt;/span&gt;= '', f = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let k &lt;span&gt;in&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.param) {
      f &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
      str &lt;/span&gt;= str + k + '=' + (&lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.param[k] === 'object' ? JSON.stringify(&lt;span&gt;this&lt;/span&gt;.param[k]) : &lt;span&gt;this&lt;/span&gt;.param[k])  +&lt;span&gt; s;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(f) str = str.substr(0, str.length - 1&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除过期缓存&lt;/span&gt;
&lt;span&gt;  _sendRequest(callback) {
    let url &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.buildurl();
    let param &lt;/span&gt;=&lt;span&gt; {
      method: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type,
      headers: {
        &lt;/span&gt;'Content-Type': 'application/json;charset=UTF-8'&lt;span&gt;
      },
      mode: &lt;/span&gt;'cors'&lt;span&gt;,
      cache: &lt;/span&gt;'no-cache'&lt;span&gt;
    };
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.type === 'POST'&lt;span&gt;) {
      param.body &lt;/span&gt;= JSON.stringify(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.param);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (url.search(/\?/) === -1&lt;span&gt;) {
        url &lt;/span&gt;+= '?' + &lt;span&gt;this&lt;/span&gt;._getParamStr('&amp;amp;'&lt;span&gt;)
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        url &lt;/span&gt;+= '&amp;amp;' + &lt;span&gt;this&lt;/span&gt;._getParamStr('&amp;amp;'&lt;span&gt;)
      }
    }

    fetch(url, param)
      .then(res &lt;/span&gt;=&amp;gt;&lt;span&gt; res.json())
      .then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        callback &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; callback(data);
      })

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小程序模块&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; wx.request({&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   url: this.buildurl(),&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   data: this.param,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   success: function success(data) {&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     callback &amp;amp;&amp;amp; callback(data);&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   }&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; });&lt;/span&gt;
&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;view code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d57eae49-b87c-4524-bbe9-b0c37c531fea')&quot; readability=&quot;45.5&quot;&gt;&lt;img id=&quot;code_img_closed_d57eae49-b87c-4524-bbe9-b0c37c531fea&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d57eae49-b87c-4524-bbe9-b0c37c531fea&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d57eae49-b87c-4524-bbe9-b0c37c531fea',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d57eae49-b87c-4524-bbe9-b0c37c531fea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;86&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理微信小程序兼容&lt;/span&gt;
let wx =&lt;span&gt; {
  getStorageSync: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (key) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; localStorage.getItem(key)
  },
  setStorage: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (o) {
    let k &lt;/span&gt;=&lt;span&gt; o.key;
    let v &lt;/span&gt;=&lt;span&gt; JSON.stringify(o.data)
    let callback &lt;/span&gt;=&lt;span&gt; o.callback;
    localStorage.setItem(k, v);
    callback &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; callback();
  },
  getStorage: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (key, callback) {
    let data &lt;/span&gt;=&lt;span&gt; localStorage.getItem(key);
    callback(data);
  }
}

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; class Store {
  constructor(opts) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; opts === 'string') &lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; opts;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; Object.assign(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, opts);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有传过期时间,则默认30分钟&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;.lifeTime) &lt;span&gt;this&lt;/span&gt;.lifeTime = 1&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;本地缓存用以存放所有localstorage键值与过期日期的映射&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;._keyCache = 'SYSTEM_KEY_TIMEOUT_MAP'&lt;span&gt;;

  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取过期时间,单位为毫秒&lt;/span&gt;
&lt;span&gt;  _getDeadline() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.lifeTime * 60 * 1000&lt;span&gt;;
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取一个数据缓存对象,存可以异步,获取我同步即可&lt;/span&gt;
&lt;span&gt;  get(sign) {
    let key &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.key;
    let now &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; wx.getStorageSync(key);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!data) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    data &lt;/span&gt;=&lt;span&gt; JSON.parse(data);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据过期&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (data.deadLine &amp;lt;&lt;span&gt; now) {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.removeOverdueCache();
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data.sign) {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sign === data.sign) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data.data;
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
  }

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;产出页面组件需要的参数
  sign 为格式化后的请求参数，用于同一请求不同参数时候返回新数据，比如列表为北京的城市，后切换为上海，会判断tag不同而更新缓存数据，tag相当于签名
  每一键值只会缓存一条信息
  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  set(data, sign) {
    let timeout &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
    let time &lt;/span&gt;= timeout.setTime(timeout.getTime() + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._getDeadline());
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._saveData(data, time, sign);
  }
  _saveData(data, time, sign) {
    let key &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.key;
    let entity &lt;/span&gt;=&lt;span&gt; {
      deadLine: time,
      data: data,
      sign: sign
    };
    let scope &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;

    wx.setStorage({
      key: key,
      data: JSON.stringify(entity),
      success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次真实存入前,需要往系统中存储一个清单&lt;/span&gt;
&lt;span&gt;        scope._saveSysList(key, entity.deadLine);
      }
    });
  }
  _saveSysList(key, timeout) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!key || !timeout || timeout &amp;lt; &lt;span&gt;new&lt;/span&gt; Date().getTime()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    let keyCache &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._keyCache;
    wx.getStorage({
      key: keyCache,
      complete: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
        let oldData &lt;/span&gt;=&lt;span&gt; {};
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data.data) oldData =&lt;span&gt; JSON.parse(data.data);
        oldData[key] &lt;/span&gt;=&lt;span&gt; timeout;
        wx.setStorage({
          key: keyCache,
          data: JSON.stringify(oldData)
        });
      }
    });
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除过期缓存&lt;/span&gt;
&lt;span&gt;  removeOverdueCache() {
    let now &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
    let keyCache &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._keyCache;
    wx.getStorage({
      key: keyCache,
      success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data &amp;amp;&amp;amp; data.data) data =&lt;span&gt; JSON.parse(data.data);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data) {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data[k] &amp;lt;&lt;span&gt; now) {
            &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; data[k];
            wx.removeStorage({
              key: k,
              success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () { }
            });
          }
        }
        wx.setStorage({
          key: keyCache,
          data: JSON.stringify(data)
        });
      }
    });
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a05b4e43-7a2b-4474-ba6c-98829e417f89')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_a05b4e43-7a2b-4474-ba6c-98829e417f89&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a05b4e43-7a2b-4474-ba6c-98829e417f89&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a05b4e43-7a2b-4474-ba6c-98829e417f89',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a05b4e43-7a2b-4474-ba6c-98829e417f89&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; import Model from './abstractmodel'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; import Store from './abstractstore'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;class DemoModel extends Model {
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;     let scope = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.domain = 'https://www.easy-mock.com/mock/5c29d45956db174d47ce162a/example_copy'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.param =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;      head: {
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         version: '1.0.1'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         ct: 'ios'
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要缓存,可以在此设置缓存对象&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.cacheData = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.pushValidates(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt;&lt;span&gt; scope._baseDataValidate(data);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;首轮处理返回数据，检查错误码做统一验证处理&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;  _baseDataValidate(data) {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; data === 'string') data =&lt;span&gt; JSON.parse(data);
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.errno === 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (data.data) data =&lt;span&gt; data.data;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;  dataformat(data) {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; data === 'string') data =&lt;span&gt; JSON.parse(data);
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.data) data =&lt;span&gt; data.data;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.data) data =&lt;span&gt; data.data;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; 
&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;  buildurl() {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.domain + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.url;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;  getSign() {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; JSON.stringify(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.param);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;  onDataSuccess(fdata, data) {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.cacheData &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cacheData.set)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.cacheData.set(fdata, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSign());
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有缓存直接读取缓存,没有才请求&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;  execute(onComplete, ajaxOnly) {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;     let data = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!ajaxOnly &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.cacheData &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cacheData.get) {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;       data = &lt;span&gt;this&lt;/span&gt;.cacheData.get(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSign());
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        onComplete(data);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    super.execute(onComplete);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;class ListStore extends Store {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.key = 'DEMO_LIST'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;30分钟过期时间&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.lifeTime = 30&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;class ListModel extends DemoModel {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.url = '/train/list'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.type = 'GET'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; this.type = 'POST';&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.cacheData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ListStore;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次数据访问成功，错误码为0时皆会执行这个回调&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;  onDataSuccess(fdata, data) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;    super.onDataSuccess(fdata, data);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始执行自我逻辑&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;     let o =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;       _indate: &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime()
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; for (let k in fdata) {&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   o[k] = typeof fdata[k];&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行数据上报逻辑&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;     console.log('执行数据上报逻辑'&lt;span&gt;, o);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; let listModel = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ListModel()
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt; listModel
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这里data目录是，然后可以看到数据请求成功，并且localstrage中有数据了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data
├── abstractmodel.js
├── abstractstore.js
└── demo.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了数据后，我们来完善我们的列表，因为数据原因，我们这里便不做滚动分页功能了，一般来说列表类组件特点还是比较突出的：需要提供一个数据请求模块以及一个数据处理器，最后加一个模板就可以完成所有功能了，这里还是先来实现列表部分代码，这个列表组件因为涉及的业务比较多而且每个页面的列表变化也比较大，我们暂且将之放到ui目录，后续看看这块怎么处理一下，我们依然先在这里建立list目录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class PageMain extends React.Component {
    constructor(props) {
        super(props);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {};
    }
    render() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div class=&quot;page-list cm-page&quot;&amp;gt;
                &amp;lt;HeaderMain /&amp;gt;
                &amp;lt;div className=&quot;calendar-bar-wrapper js_calendar_wrapper&quot;&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;List /&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}
ReactDOM.render(
    &lt;/span&gt;&amp;lt;PageMain /&amp;gt;, document.getElementById('root')
);
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('78a78de9-60e7-4cc0-a91b-2bfea3a69152')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_78a78de9-60e7-4cc0-a91b-2bfea3a69152&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_78a78de9-60e7-4cc0-a91b-2bfea3a69152&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('78a78de9-60e7-4cc0-a91b-2bfea3a69152',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_78a78de9-60e7-4cc0-a91b-2bfea3a69152&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import React from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; class List extends React.Component {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &amp;lt;ul class=&quot;bus-list js_bus_list &quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;                 &amp;lt;li data-index=&quot;0&quot; data-dstation=&quot;上海南&quot; class=&quot;bus-list-item &quot;&amp;gt;
&lt;span&gt; 8&lt;/span&gt;                     &amp;lt;div class=&quot;bus-seat&quot;&amp;gt;
&lt;span&gt; 9&lt;/span&gt;                         &amp;lt;span class=&quot; fl&quot;&amp;gt;K1805 | 其它&amp;lt;/span&amp;gt;&amp;lt;span class=&quot; fr&quot;&amp;gt;2小时7分 &amp;lt;/span&amp;gt;
&lt;span&gt;10&lt;/span&gt;                     &amp;lt;/div&amp;gt;
&lt;span&gt;11&lt;/span&gt;                     &amp;lt;div class=&quot;detail&quot;&amp;gt;
&lt;span&gt;12&lt;/span&gt;                         &amp;lt;div class=&quot;sub-list set-out&quot;&amp;gt;
&lt;span&gt;13&lt;/span&gt;                             &amp;lt;span class=&quot;bus-go-off&quot;&amp;gt;04:22&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;start&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon1&quot;&amp;gt;
&lt;span&gt;14&lt;/span&gt;                             &amp;lt;/span&amp;gt;上海南&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr price&quot;&amp;gt;￥28.5起&amp;lt;/span&amp;gt;
&lt;span&gt;15&lt;/span&gt;                         &amp;lt;/div&amp;gt;
&lt;span&gt;16&lt;/span&gt;                         &amp;lt;div class=&quot;sub-list&quot;&amp;gt;
&lt;span&gt;17&lt;/span&gt;                             &amp;lt;span class=&quot;bus-arrival-time&quot;&amp;gt;06:29&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;end&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon2&quot;&amp;gt;
&lt;span&gt;18&lt;/span&gt;                             &amp;lt;/span&amp;gt;杭州&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr &quot;&amp;gt;2598张&amp;lt;/span&amp;gt;
&lt;span&gt;19&lt;/span&gt;                         &amp;lt;/div&amp;gt;
&lt;span&gt;20&lt;/span&gt;                     &amp;lt;/div&amp;gt;
&lt;span&gt;21&lt;/span&gt;                     &amp;lt;div class=&quot;bus-seats-info&quot;&amp;gt;
&lt;span&gt;22&lt;/span&gt;                         &amp;lt;span&amp;gt;硬座(555) &amp;lt;/span&amp;gt;
&lt;span&gt;23&lt;/span&gt;                         &amp;lt;span&amp;gt;硬卧(1653) &amp;lt;/span&amp;gt;
&lt;span&gt;24&lt;/span&gt;                         &amp;lt;span&amp;gt;软卧(56) &amp;lt;/span&amp;gt;
&lt;span&gt;25&lt;/span&gt;                         &amp;lt;span&amp;gt;无座(334) &amp;lt;/span&amp;gt;
&lt;span&gt;26&lt;/span&gt;                     &amp;lt;/div&amp;gt;
&lt;span&gt;27&lt;/span&gt;                 &amp;lt;/li&amp;gt;
&lt;span&gt;28&lt;/span&gt;                 &amp;lt;li data-index=&quot;1&quot; data-dstation=&quot;上海南&quot; class=&quot;bus-list-item &quot;&amp;gt;
&lt;span&gt;29&lt;/span&gt;                     &amp;lt;div class=&quot;bus-seat&quot;&amp;gt;
&lt;span&gt;30&lt;/span&gt;                         &amp;lt;span class=&quot; fl&quot;&amp;gt;K1511 | 其它&amp;lt;/span&amp;gt;&amp;lt;span class=&quot; fr&quot;&amp;gt;1小时49分 &amp;lt;/span&amp;gt;
&lt;span&gt;31&lt;/span&gt;                     &amp;lt;/div&amp;gt;
&lt;span&gt;32&lt;/span&gt;                     &amp;lt;div class=&quot;detail&quot;&amp;gt;
&lt;span&gt;33&lt;/span&gt;                         &amp;lt;div class=&quot;sub-list set-out&quot;&amp;gt;
&lt;span&gt;34&lt;/span&gt;                             &amp;lt;span class=&quot;bus-go-off&quot;&amp;gt;04:56&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;start&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon1&quot;&amp;gt;
&lt;span&gt;35&lt;/span&gt;                             &amp;lt;/span&amp;gt;上海南&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr price&quot;&amp;gt;￥24.5起&amp;lt;/span&amp;gt;
&lt;span&gt;36&lt;/span&gt;                         &amp;lt;/div&amp;gt;
&lt;span&gt;37&lt;/span&gt;                         &amp;lt;div class=&quot;sub-list&quot;&amp;gt;
&lt;span&gt;38&lt;/span&gt;                             &amp;lt;span class=&quot;bus-arrival-time&quot;&amp;gt;06:45&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;end&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon2&quot;&amp;gt;
&lt;span&gt;39&lt;/span&gt;                             &amp;lt;/span&amp;gt;杭州东&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr &quot;&amp;gt;34张&amp;lt;/span&amp;gt;
&lt;span&gt;40&lt;/span&gt;                         &amp;lt;/div&amp;gt;
&lt;span&gt;41&lt;/span&gt;                     &amp;lt;/div&amp;gt;
&lt;span&gt;42&lt;/span&gt;                     &amp;lt;div class=&quot;bus-seats-info&quot;&amp;gt;
&lt;span&gt;43&lt;/span&gt;                         &amp;lt;span&amp;gt;硬座(8) &amp;lt;/span&amp;gt;
&lt;span&gt;44&lt;/span&gt;                         &amp;lt;span&amp;gt;硬卧(24) &amp;lt;/span&amp;gt;
&lt;span&gt;45&lt;/span&gt;                         &amp;lt;span&amp;gt;软卧(2) &amp;lt;/span&amp;gt;
&lt;span&gt;46&lt;/span&gt;                         &amp;lt;span&amp;gt;无座(0) &amp;lt;/span&amp;gt;
&lt;span&gt;47&lt;/span&gt;                     &amp;lt;/div&amp;gt;
&lt;span&gt;48&lt;/span&gt;                 &amp;lt;/li&amp;gt;
&lt;span&gt;49&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;list文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这样一来，我们轻易的就将页面做出来了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201812/294743-20181231190921974-261047047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们使用组件完成其功能，这里我们将代码做一层分离，将列表组件分成两部分，第一部分是不变放在UI中的部分，另一部分是我们要求传入的模板组件，因为每个页面的列表展示都是不一样的，于是我们先实现外层列表，这里就相当于要传递一个组件给另一个组件使用，我们简单的尝试了下可行性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f210270b-8722-46d8-969d-54bab8badee7')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_f210270b-8722-46d8-969d-54bab8badee7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f210270b-8722-46d8-969d-54bab8badee7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f210270b-8722-46d8-969d-54bab8badee7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f210270b-8722-46d8-969d-54bab8badee7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;业务列表项目，因为每个页面列表展示皆不一样，所以将这段代码外放&lt;/span&gt;
&lt;span&gt;class ListItem extends React.Component {
    constructor(props) {
        super(props);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {};
    }
    render() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;li data-index=&quot;0&quot; data-dstation=&quot;上海南&quot; class=&quot;bus-list-item &quot;&amp;gt;
                &amp;lt;div class=&quot;bus-seat&quot;&amp;gt;
                    &amp;lt;span class=&quot; fl&quot;&amp;gt;K1805 | 其它&amp;lt;/span&amp;gt;&amp;lt;span class=&quot; fr&quot;&amp;gt;2小时7分 &amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;detail&quot;&amp;gt;
                    &amp;lt;div class=&quot;sub-list set-out&quot;&amp;gt;
                        &amp;lt;span class=&quot;bus-go-off&quot;&amp;gt;04:22&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;start&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon1&quot;&amp;gt;
                        &amp;lt;/span&amp;gt;上海南&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr price&quot;&amp;gt;￥28.5起&amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;sub-list&quot;&amp;gt;
                        &amp;lt;span class=&quot;bus-arrival-time&quot;&amp;gt;06:29&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;end&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon2&quot;&amp;gt;
                        &amp;lt;/span&amp;gt;杭州&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr &quot;&amp;gt;2598张&amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;bus-seats-info&quot;&amp;gt;
                    &amp;lt;span&amp;gt;硬座(555) &amp;lt;/span&amp;gt;
                    &amp;lt;span&amp;gt;硬卧(1653) &amp;lt;/span&amp;gt;
                    &amp;lt;span&amp;gt;软卧(56) &amp;lt;/span&amp;gt;
                    &amp;lt;span&amp;gt;无座(334) &amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/li&amp;gt;
&lt;span&gt;        )
    }
}

class PageMain extends React.Component {
    constructor(props) {
        super(props);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {};
    }
    render() {

        let _ListItem &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.list;

        let list &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; _ListItem();

        &lt;/span&gt;&lt;span&gt;debugger&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div class=&quot;page-list cm-page&quot;&amp;gt;
                &amp;lt;HeaderMain /&amp;gt;
&lt;span&gt;                {list.render()}
                &lt;/span&gt;&amp;lt;div className=&quot;calendar-bar-wrapper js_calendar_wrapper&quot;&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;List /&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}
ReactDOM.render(
    &lt;/span&gt;&amp;lt;PageMain list={ListItem} /&amp;gt;, document.getElementById('root')
);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;证明是可行的，其实React早就知道我们有这种骚操作，所以衍生了高阶组件的概率，这里我们简单介绍下&lt;/p&gt;
&lt;p&gt;PS：大家可以看到，我们文中的例子都不是生拉硬套的要应用某个知识点是确实有这种需求&lt;/p&gt;
&lt;h2&gt;高阶组件-继承的应用&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://github.com/sunyongjian/blog/issues/25&quot; target=&quot;_blank&quot;&gt;https://github.com/sunyongjian/blog/issues/25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;高阶组件只是名字比较高阶罢了，其实跟我们上面代码的例子差不多，每个React组件事实上都是一个js对象，我们可以实例化一下他，完成任何骚操作，但是出于规范化和代码可控（&lt;span&gt;在不非常熟悉底层代码的时候，随意使用骚操作，可能会出莫名其妙的BUG，但是也是因为莫名其妙的BUG会导致你更熟悉框架，BUG带来的框架理解有时候优于机械源码阅读，所以在非核心项目上，我们非常建议你骚操作&lt;/span&gt;）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;一个高阶组件只是一个包装了另一个React组件的React组件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的说法有点不好理解，这里换个方式说，所谓高阶组件，就是我们有一个组件，这个时候我们会给他传递各种参数，其中一个参数是另一个React组件，并且我们需要在父组件中使用他：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
const EnhancedComponent = higherOrderComponent(WrappedComponent); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子依旧不够清晰，我们再举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class A extends React.Component {
    render() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div&amp;gt;我是组件A&amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}
const AContainer &lt;/span&gt;= WrappedComponent =&amp;gt;&lt;span&gt; {
    console.log(&lt;/span&gt;'simpleHoc'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; class extends React.Component {
        render() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
                &lt;/span&gt;&amp;lt;h1&amp;gt;&lt;span&gt;
                    我是组件A的爸爸
                &lt;/span&gt;&amp;lt;WrappedComponent  {...&lt;span&gt;this&lt;/span&gt;.props} /&amp;gt;
                &amp;lt;/h1&amp;gt;
&lt;span&gt;            )
        }
    }
}
let Parent &lt;/span&gt;=&lt;span&gt; AContainer(A);
ReactDOM.render(
    &lt;/span&gt;&amp;lt;Parent /&amp;gt;, document.getElementById('root')
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里会输出（这里说爸爸可能不太合适，这里应该是个组合关系）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;我是组件A的爸爸&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;我是组件A&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里核心概念还是这里使用了一个继承解决这个问题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; class extends React.Component {
    render() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;ul class=&quot;bus-list js_bus_list &quot;&amp;gt;
                &amp;lt;WrappedComponent  {...&lt;span&gt;this&lt;/span&gt;.props} /&amp;gt;
            &amp;lt;/ul&amp;gt;
&lt;span&gt;        )
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，高阶组件其实并不神秘，就是实现了一个用于继承的组件，然后在子组件里面做业务性操作，在之前属于非常常规的操作，&lt;span&gt;这里推荐看一点老一点的东西，脱离框架的东西，类比帮助大家了解高阶组件&lt;/span&gt;：&lt;a href=&quot;https://www.cnblogs.com/yexiaochai/p/3888373.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/yexiaochai/p/3888373.html&lt;/a&gt;，于是这里我们稍微改造下我们的list组件的框架结构：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PS：这里一定要注意，一个项目或者几个项目中，列表的大体HTML结构一定是非常一致的，这里是个规则约定，规则先与代码，先于框架&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('88f9ffc4-4829-4dba-af66-6a23c41ced67')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_88f9ffc4-4829-4dba-af66-6a23c41ced67&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_88f9ffc4-4829-4dba-af66-6a23c41ced67&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('88f9ffc4-4829-4dba-af66-6a23c41ced67',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_88f9ffc4-4829-4dba-af66-6a23c41ced67&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
import React from 'react'&lt;span&gt;;

let ListContainer &lt;/span&gt;= WrappedComponent =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; class extends React.Component {
        render() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
                &lt;/span&gt;&amp;lt;ul class=&quot;bus-list js_bus_list &quot;&amp;gt;
                    &amp;lt;WrappedComponent  {...&lt;span&gt;this&lt;/span&gt;.props} /&amp;gt;
                &amp;lt;/ul&amp;gt;
&lt;span&gt;            )
        }
    }
}

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; ListContainer;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('38cb4816-65fc-4579-baf8-3a76a0af7aa8')&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_38cb4816-65fc-4579-baf8-3a76a0af7aa8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_38cb4816-65fc-4579-baf8-3a76a0af7aa8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('38cb4816-65fc-4579-baf8-3a76a0af7aa8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_38cb4816-65fc-4579-baf8-3a76a0af7aa8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
import React from 'react'&lt;span&gt;;
import ReactDOM from &lt;/span&gt;'react-dom'&lt;span&gt;;
import Calendar from &lt;/span&gt;'./ui/calendar/calendar'&lt;span&gt;;
import Header from &lt;/span&gt;'./ui/header/header'&lt;span&gt;;
import ListContainer from &lt;/span&gt;'./ui/list/list'&lt;span&gt;;
import listModel from &lt;/span&gt;'./data/demo'&lt;span&gt;;

listModel.setParam({
    a: &lt;/span&gt;1&lt;span&gt;,
    b: &lt;/span&gt;'aa'&lt;span&gt;
});

listModel.execute(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
    console.log(data)
})

class CalendarMain extends React.Component {
    constructor(props) {
        super(props);
        let today &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
            month: &lt;/span&gt;12&lt;span&gt;,
            selectdate: today
        };
    }
    preMonth() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
            month: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state.month - 1&lt;span&gt;
        });
    }
    nextMonth() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
            month: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state.month + 1&lt;span&gt;
        });
    }
    ondayclick(year, month, day) {

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
            selectdate: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Date(year, parseInt(month) - 1&lt;span&gt;, day).getTime()
        })

    }
    render() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        let selectdate = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.selectdate;;
        let month &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.month;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div className=&quot;calendar-wrapper-box&quot;&amp;gt;
                &amp;lt;div className=&quot;box-hd&quot;&amp;gt;
                    &amp;lt;span className=&quot;fl icon-back js_back &quot; onClick={&lt;span&gt;this&lt;/span&gt;.preMonth.bind(&lt;span&gt;this&lt;/span&gt;)}  &amp;gt;&amp;lt;/span&amp;gt;
                    &amp;lt;span className=&quot;fr icon-next js_next&quot; onClick={&lt;span&gt;this&lt;/span&gt;.nextMonth.bind(&lt;span&gt;this&lt;/span&gt;)} &amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;Calendar ondayclick={&lt;span&gt;this&lt;/span&gt;.ondayclick.bind(&lt;span&gt;this&lt;/span&gt;)} year=&quot;2018&quot; month={month} selectdate={selectdate} /&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}

class HeaderMain extends React.Component {
    constructor(props) {
        super(props);

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
            title: &lt;/span&gt;'我是标题'&lt;span&gt;
        };

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里定义，右边按钮规则&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.state.right =&lt;span&gt; [
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;希望代码执行时候的作用域&lt;/span&gt;
                view: &lt;span&gt;this&lt;/span&gt;&lt;span&gt;,
                tagname: &lt;/span&gt;'search'&lt;span&gt;,
                callback: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
                    console.log(&lt;/span&gt;'搜索'&lt;span&gt;)
                }
            },
            {
                view: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,
                tagname: &lt;/span&gt;'tips'&lt;span&gt;,
                value: &lt;/span&gt;'说明'&lt;span&gt;,
                callback: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    alert(&lt;/span&gt;'我是按钮'&lt;span&gt;)
                }
            }
        ]

    }
    onBackaction() {
        console.log(&lt;/span&gt;'返回'&lt;span&gt;)
    }
    render() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;Header right={&lt;span&gt;this&lt;/span&gt;.state.right} title={&lt;span&gt;this&lt;/span&gt;.state.title} backaction={&lt;span&gt;this&lt;/span&gt;.onBackaction.bind(&lt;span&gt;this&lt;/span&gt;)} /&amp;gt;
&lt;span&gt;        )
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;业务列表项目，因为每个页面列表展示皆不一样，所以将这段代码外放&lt;/span&gt;
&lt;span&gt;class ListItem extends React.Component {
    constructor(props) {
        super(props);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {};
    }
    render() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;li data-index=&quot;0&quot; data-dstation=&quot;上海南&quot; class=&quot;bus-list-item &quot;&amp;gt;
                &amp;lt;div class=&quot;bus-seat&quot;&amp;gt;
                    &amp;lt;span class=&quot; fl&quot;&amp;gt;K1805 | 其它&amp;lt;/span&amp;gt;&amp;lt;span class=&quot; fr&quot;&amp;gt;2小时7分 &amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;detail&quot;&amp;gt;
                    &amp;lt;div class=&quot;sub-list set-out&quot;&amp;gt;
                        &amp;lt;span class=&quot;bus-go-off&quot;&amp;gt;04:22&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;start&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon1&quot;&amp;gt;
                        &amp;lt;/span&amp;gt;上海南&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr price&quot;&amp;gt;￥28.5起&amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;sub-list&quot;&amp;gt;
                        &amp;lt;span class=&quot;bus-arrival-time&quot;&amp;gt;06:29&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;end&quot;&amp;gt;&amp;lt;span class=&quot;icon-circle s-icon2&quot;&amp;gt;
                        &amp;lt;/span&amp;gt;杭州&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;fr &quot;&amp;gt;2598张&amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;bus-seats-info&quot;&amp;gt;
                    &amp;lt;span&amp;gt;硬座(555) &amp;lt;/span&amp;gt;
                    &amp;lt;span&amp;gt;硬卧(1653) &amp;lt;/span&amp;gt;
                    &amp;lt;span&amp;gt;软卧(56) &amp;lt;/span&amp;gt;
                    &amp;lt;span&amp;gt;无座(334) &amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/li&amp;gt;
&lt;span&gt;        )
    }
}

class PageMain extends React.Component {
    constructor(props) {
        super(props);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {};
    }
    render() {
        let List &lt;/span&gt;=&lt;span&gt; ListContainer(ListItem);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; today = new Date(today.getFullYear(), today.getMonth(), 1);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div class=&quot;page-list cm-page&quot;&amp;gt;
                &amp;lt;HeaderMain /&amp;gt;
                &amp;lt;div className=&quot;calendar-bar-wrapper js_calendar_wrapper&quot;&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;List /&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}

ReactDOM.render(
    &lt;/span&gt;&amp;lt;PageMain list={ListItem} /&amp;gt;, document.getElementById('root')
);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;由此，基本框架就出来了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201901/294743-20190102121317314-1332454109.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们这里继续完善这个组件即可，这里具体代码各位github上看吧：&lt;a href=&quot;https://github.com/yexiaochai/react-demo&quot; target=&quot;_blank&quot;&gt;https://github.com/yexiaochai/react-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS：事实上，我们index.js里面代码已经很多了，应该分离开，但是我们代码已经接近尾声就懒得分离了，&lt;span&gt;大家实际工作中一定要分离&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们代码稍作改造后就变成了这个样子（&lt;span&gt;由于只是demo，对于一些需要计算展示比如筛选硬座票数等未做实现&lt;/span&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201901/294743-20190102174006302-2084611765.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，我们的demo就结束了，如果有必要可以添加各种筛选条件，比如这里的排序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201901/294743-20190102174238548-2136978772.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如这里的筛选：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201901/294743-20190102174304320-492138760.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是我们这里由于是简单的demo加之本篇博客篇幅已经很长了，我们这里就不做实现了，反正也是操作数据，就此，我们业务部分代码结束了，接下来我们来做一点工程化的操作&lt;/p&gt;
&lt;h2&gt;组件样式问题&lt;/h2&gt;
&lt;p&gt;可以看到，之前我们的组件样式，全部被我们柔和到了global.css或者index.css中了，对于有些工厂作业做的很好的公司，会具体分出重构工程师（写css的）和程序工程师（写js的）两个岗位，一般是重构同事将css直接交给js同事，这样做起来效率会很高，所以多数情况下，我们全局会有一个样式文件，业务页面会有一个样式文件，这其实没什么大问题，可能出现的问题请大家阅读下这篇文章：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/yexiaochai/p/4165386.html&quot;&gt;【前端优化之拆分CSS】前端三剑客的分分合合&lt;/a&gt;，这里其实已经涉及到了一个工作习惯他要求我们做页面的时候就分成模块，做模块的时候要考虑模块的css，这样做也会有一个弊端就是全局性的东西就比较难过了，所以一个大项目的样式相关工作最好由一个资深一点的同事设计规则和公共的点，其次不然很容易各自为战，我们这里完成一个简单的工作，将列表部分的代码从global中分离出来，我们先找到对应的样式代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('702bf5a1-7e1c-4e85-ba23-9a964f91a6f3')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_702bf5a1-7e1c-4e85-ba23-9a964f91a6f3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_702bf5a1-7e1c-4e85-ba23-9a964f91a6f3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('702bf5a1-7e1c-4e85-ba23-9a964f91a6f3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_702bf5a1-7e1c-4e85-ba23-9a964f91a6f3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.page-list &lt;/span&gt;{&lt;span&gt; padding-bottom&lt;/span&gt;:&lt;span&gt; 45px&lt;/span&gt;; }&lt;span&gt;


.page-list .icon-setout &lt;/span&gt;{&lt;span&gt;
  margin&lt;/span&gt;:&lt;span&gt; 0 5px&lt;/span&gt;;&lt;span&gt;
  border-color&lt;/span&gt;:&lt;span&gt; #00B358&lt;/span&gt;;
}&lt;span&gt;

.page-list .icon-arrival &lt;/span&gt;{&lt;span&gt;
  margin&lt;/span&gt;:&lt;span&gt; 0 5px&lt;/span&gt;;&lt;span&gt;
  border-color&lt;/span&gt;:&lt;span&gt; #f06463&lt;/span&gt;;
}&lt;span&gt;

.page-list .icon-sec &lt;/span&gt;{&lt;span&gt;
  position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
  top&lt;/span&gt;:&lt;span&gt; -4px&lt;/span&gt;;&lt;span&gt;
  display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;&lt;span&gt;
  width&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
  height&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
  vertical-align&lt;/span&gt;:&lt;span&gt; middle&lt;/span&gt;;&lt;span&gt;
  border-left&lt;/span&gt;:&lt;span&gt; 1px solid&lt;/span&gt;;&lt;span&gt;
  border-bottom&lt;/span&gt;:&lt;span&gt; 1px solid&lt;/span&gt;;&lt;span&gt;
  -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg)&lt;/span&gt;;&lt;span&gt;
  transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg)&lt;/span&gt;;&lt;span&gt;
  -webkit-box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
  box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
  margin-left&lt;/span&gt;:&lt;span&gt; 5px&lt;/span&gt;;
}&lt;span&gt;

.page-list .active .icon-sec &lt;/span&gt;{&lt;span&gt;
  top&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;&lt;span&gt;
  -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(135deg)&lt;/span&gt;;&lt;span&gt;
  transform&lt;/span&gt;:&lt;span&gt; rotate(135deg)&lt;/span&gt;;
}&lt;span&gt;

.page-list .active .icon-setout, .page-list .active .icon-arrival  &lt;/span&gt;{&lt;span&gt;
  border-color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-tabs.list-filter &lt;/span&gt;{&lt;span&gt;
  position&lt;/span&gt;:&lt;span&gt;  fixed&lt;/span&gt;;&lt;span&gt;
  left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
  bottom&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
  height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;&lt;span&gt;
  line-height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;&lt;span&gt;
  background-color&lt;/span&gt;:&lt;span&gt; #fcfcfc&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-tabs.list-filter .tabs-item &lt;/span&gt;{&lt;span&gt;
  border-right&lt;/span&gt;:&lt;span&gt; 1px solid #d2d2d2&lt;/span&gt;;&lt;span&gt;
  border-top&lt;/span&gt;:&lt;span&gt; 1px solid #d2d2d2&lt;/span&gt;;
}&lt;span&gt;



.page-list .bus-tabs.list-filter .tabs-item.active &lt;/span&gt;{&lt;span&gt;
  color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
  background-color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-tabs.list-filter .tabs-item .line&lt;/span&gt;{&lt;span&gt;
  height&lt;/span&gt;:&lt;span&gt; 22px&lt;/span&gt;;&lt;span&gt;
  line-height&lt;/span&gt;:&lt;span&gt; 22px&lt;/span&gt;;&lt;span&gt;
  text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
  font-size&lt;/span&gt;:&lt;span&gt; 12px&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-tabs.list-filter .tabs-item .line:last-child&lt;/span&gt;{&lt;span&gt;
  color&lt;/span&gt;:&lt;span&gt; #00b358
&lt;/span&gt;}&lt;span&gt;

.page-list .bus-tabs.list-filter .tabs-item.active .line:last-child&lt;/span&gt;{&lt;span&gt;
  color&lt;/span&gt;:&lt;span&gt; #fff
&lt;/span&gt;}&lt;span&gt;

.page-list .bus-tabs.list-filter .tabs-item .line .icon-time&lt;/span&gt;{&lt;span&gt;
 top&lt;/span&gt;:&lt;span&gt; 2px&lt;/span&gt;;&lt;span&gt;
 margin-right&lt;/span&gt;:&lt;span&gt; 4px&lt;/span&gt;;
}&lt;span&gt;


.page-list .bus-list .bus-list-item &lt;/span&gt;{&lt;span&gt;
 position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
 height&lt;/span&gt;:&lt;span&gt; 110px&lt;/span&gt;;&lt;span&gt;
 background-color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt; 
 margin&lt;/span&gt;:&lt;span&gt; 8px 0&lt;/span&gt;;&lt;span&gt;
 border&lt;/span&gt;:&lt;span&gt; 1px solid #e5e5e5&lt;/span&gt;;&lt;span&gt;
 border-width&lt;/span&gt;:&lt;span&gt; 1px 0&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-list-item.disabled, .page-list .bus-list .bus-list-item.disabled  .price &lt;/span&gt;{&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; #c5c5c5&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-seat &lt;/span&gt;{&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 32px&lt;/span&gt;;&lt;span&gt;
    line-height&lt;/span&gt;:&lt;span&gt; 32px&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 0 15px&lt;/span&gt;;
    
}&lt;span&gt;


.page-list .bus-list .bus-list-item .bus-time &lt;/span&gt;{&lt;span&gt;
 position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
 left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
 width&lt;/span&gt;:&lt;span&gt; 67px&lt;/span&gt;;&lt;span&gt;
 height&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;&lt;span&gt;
 line-height&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;&lt;span&gt;
 margin&lt;/span&gt;:&lt;span&gt; 15px 0&lt;/span&gt;;&lt;span&gt;
 color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;&lt;span&gt;
 text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
 font-size&lt;/span&gt;:&lt;span&gt; 20px&lt;/span&gt;;&lt;span&gt;
 font-family&lt;/span&gt;:&lt;span&gt; Arial&lt;/span&gt;;
}&lt;span&gt;


.page-list .bus-list .bus-list-item .detail &lt;/span&gt;{&lt;span&gt;
 margin&lt;/span&gt;:&lt;span&gt; 0 15px 0 15px&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-seats-info &lt;/span&gt;{&lt;span&gt;
 margin&lt;/span&gt;:&lt;span&gt; 0 15px 0 15px&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-list-item .detail  .sub-list&lt;/span&gt;{&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 26px&lt;/span&gt;;
}&lt;span&gt;

.page-list .sub-list.set-out &lt;/span&gt;{&lt;span&gt;
 font-size&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;   
 font-weight&lt;/span&gt;:&lt;span&gt; 600&lt;/span&gt;;
}&lt;span&gt;


.page-list .bus-list .bus-go-off,.page-list .bus-list .bus-arrival-time&lt;/span&gt;{&lt;span&gt;
   display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;&lt;span&gt;
   width&lt;/span&gt;:&lt;span&gt;   50px&lt;/span&gt;; 
    
}&lt;span&gt;


.page-list .bus-list .bus-list-item .price &lt;/span&gt;{&lt;span&gt;
 font-family&lt;/span&gt;:&lt;span&gt; Arial&lt;/span&gt;;&lt;span&gt;
 color&lt;/span&gt;:&lt;span&gt; #fd8f01&lt;/span&gt;;&lt;span&gt;
 font-size&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;
 font-weight&lt;/span&gt;:&lt;span&gt; 600&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-list-item.disabled .ticket &lt;/span&gt;{&lt;span&gt;
 display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-list-item .ticket &lt;/span&gt;{&lt;span&gt;
  color&lt;/span&gt;:&lt;span&gt; #fd8f01&lt;/span&gt;;&lt;span&gt;
  font-size&lt;/span&gt;:&lt;span&gt; 12px&lt;/span&gt;;&lt;span&gt;
  border&lt;/span&gt;:&lt;span&gt; 1px solid #fd8f01&lt;/span&gt;;&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 1px 4px&lt;/span&gt;;&lt;span&gt;
  border-radius&lt;/span&gt;:&lt;span&gt; 5px&lt;/span&gt;;&lt;span&gt;
  font-family&lt;/span&gt;:&lt;span&gt; Arial&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-list-item.disabled .ticket &lt;/span&gt;{&lt;span&gt;
  color&lt;/span&gt;:&lt;span&gt; #c5c5c5&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-list-item .s-icon1 &lt;/span&gt;{&lt;span&gt;
  margin&lt;/span&gt;:&lt;span&gt; 0 5px&lt;/span&gt;;&lt;span&gt;
  border-color&lt;/span&gt;:&lt;span&gt; #00B358&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .bus-list-item .s-icon2 &lt;/span&gt;{&lt;span&gt;
  margin&lt;/span&gt;:&lt;span&gt; 0 5px&lt;/span&gt;;&lt;span&gt;
  border-color&lt;/span&gt;:&lt;span&gt; #f06463&lt;/span&gt;;
}&lt;span&gt;

.page-list .calendar-bar-wrapper &lt;/span&gt;{&lt;span&gt;
  height&lt;/span&gt;:&lt;span&gt; 52px&lt;/span&gt;;
}&lt;span&gt;

.page-list .calendar-bar &lt;/span&gt;{&lt;span&gt;
  height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;&lt;span&gt;
  line-height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;&lt;span&gt;
  background-color&lt;/span&gt;:&lt;span&gt; #08c563&lt;/span&gt;;&lt;span&gt;
  color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
  top&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;&lt;span&gt;
  left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
  position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;
}&lt;span&gt;

.page-list  .calendar-bar .tabs-item &lt;/span&gt;{&lt;span&gt;
  font-size&lt;/span&gt;:&lt;span&gt; 13px&lt;/span&gt;;&lt;span&gt;
  border-right&lt;/span&gt;:&lt;span&gt; 1px solid #02ad56&lt;/span&gt;;
}&lt;span&gt;

.page-list  .calendar-bar .tabs-item.disabled &lt;/span&gt;{&lt;span&gt;
  color&lt;/span&gt;:&lt;span&gt; #01994c&lt;/span&gt;;
}&lt;span&gt;


.baidubox .page-list .calendar-bar&lt;/span&gt;{&lt;span&gt;
   top&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;
 }&lt;span&gt;
 
 .baidubox .page-list .sort-bar&lt;/span&gt;{&lt;span&gt;
   top&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;
 }&lt;span&gt;
 
 .page-list .sort-bar-wrapper &lt;/span&gt;{&lt;span&gt;
   height&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;
 }&lt;span&gt;
 
.page-list .sort-bar &lt;/span&gt;{&lt;span&gt;
  height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;&lt;span&gt;
  line-height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;&lt;span&gt;
  background-color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
  top&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;&lt;span&gt;
  left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
  position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;&lt;span&gt;
  border-bottom&lt;/span&gt;:&lt;span&gt; 1px solid #EAEAEA&lt;/span&gt;;
}&lt;span&gt;

.page-list .icon-sort &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 0 0 0 8px&lt;/span&gt;;&lt;span&gt;
    border-top&lt;/span&gt;:&lt;span&gt; 4px solid #c3c3c3&lt;/span&gt;;&lt;span&gt;
    border-right&lt;/span&gt;:&lt;span&gt; 4px solid #c3c3c3&lt;/span&gt;;&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; 4px solid #c3c3c3&lt;/span&gt;;&lt;span&gt;
    border-left&lt;/span&gt;:&lt;span&gt; 4px solid #c3c3c3&lt;/span&gt;;&lt;span&gt;
    bottom&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;&lt;span&gt;
     -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(-225deg)&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; rotate(-225deg)&lt;/span&gt;;
    
    
}&lt;span&gt;

.page-list .icon-sort.up &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;&lt;span&gt;
     -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(-225deg)&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; rotate(-225deg)&lt;/span&gt;;&lt;span&gt;
       border-bottom&lt;/span&gt;:&lt;span&gt; 4px solid #02ad56&lt;/span&gt;;&lt;span&gt;
    border-left&lt;/span&gt;:&lt;span&gt; 4px solid #02ad56&lt;/span&gt;;
}&lt;span&gt;

.page-list .icon-sort.down &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;&lt;span&gt;
     -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg)&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg)&lt;/span&gt;;&lt;span&gt;
       border-bottom&lt;/span&gt;:&lt;span&gt; 4px solid #02ad56&lt;/span&gt;;&lt;span&gt;
    border-left&lt;/span&gt;:&lt;span&gt; 4px solid #02ad56&lt;/span&gt;;
}&lt;span&gt;

.page-list .icon-sort::before &lt;/span&gt;{&lt;span&gt;
    content&lt;/span&gt;:&lt;span&gt; ''&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;&lt;span&gt;
    left&lt;/span&gt;:&lt;span&gt; -8px&lt;/span&gt;;&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 18px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 2px&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
    -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(-135deg)&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; rotate(-135deg)&lt;/span&gt;;
}&lt;span&gt;

 .page-list.page-list--search .bus-list .bus-list-item .tobooking&lt;/span&gt;{&lt;span&gt;
   display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
 }&lt;span&gt;
 
 .page-list.page-list--search .bus-list .bus-list-item .detail &lt;/span&gt;{&lt;span&gt;
   margin-right&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;
 }&lt;span&gt;
 .page-list .ad-wrapper &lt;/span&gt;{&lt;span&gt;
  display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;; 
 }&lt;span&gt;
 .page-list.page-list--search .ad-wrapper &lt;/span&gt;{&lt;span&gt;
  display&lt;/span&gt;:&lt;span&gt; block&lt;/span&gt;;&lt;span&gt; 
  position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;&lt;span&gt;
  bottom&lt;/span&gt;:&lt;span&gt; 45px&lt;/span&gt;;&lt;span&gt;
  left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
  width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
  z-index&lt;/span&gt;:&lt;span&gt; 500&lt;/span&gt;;
 }&lt;span&gt;
 
.page-list.page-list--search .ad-wrapper img &lt;/span&gt;{&lt;span&gt;
  width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
 }&lt;span&gt;
 .page-list .b-tags &lt;/span&gt;{&lt;span&gt;
     position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
  bottom&lt;/span&gt;:&lt;span&gt; 15px&lt;/span&gt;;&lt;span&gt;
  right&lt;/span&gt;:&lt;span&gt; 70px&lt;/span&gt;;
 }&lt;span&gt;
.page-list .bus-tips &lt;/span&gt;{&lt;span&gt;
    background&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 10px 15px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 33px&lt;/span&gt;;&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; 1px solid #e5e5e5&lt;/span&gt;;
}&lt;span&gt;
.page-list .bus-tip-text &lt;/span&gt;{&lt;span&gt;
    margin-right&lt;/span&gt;:&lt;span&gt; 150px&lt;/span&gt;;&lt;span&gt;
    word-break&lt;/span&gt;:&lt;span&gt; break-all&lt;/span&gt;;&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 13px&lt;/span&gt;;&lt;span&gt;
    line-height&lt;/span&gt;:&lt;span&gt; 17px&lt;/span&gt;;&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; #8c8c8c&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;
}&lt;span&gt;
.page-list .bus-tip-icon &lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid #00b358&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 2px 12px&lt;/span&gt;;&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 22px&lt;/span&gt;;
}&lt;span&gt;

.page-list  .cm-modal &lt;/span&gt;{&lt;span&gt;
  background-color&lt;/span&gt;:&lt;span&gt; #efefef&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line &lt;/span&gt;{&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
    -webkit-box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; 1px solid #e5e5e5&lt;/span&gt;;&lt;span&gt;
    border-top&lt;/span&gt;:&lt;span&gt; 1px solid #e5e5e5&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 8px 0&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line ul&lt;/span&gt;{&lt;span&gt;
   display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line.active ul&lt;/span&gt;{&lt;span&gt;
   display&lt;/span&gt;:&lt;span&gt;  block&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line:first-child &lt;/span&gt;{&lt;span&gt;
    margin-top&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
    border-top&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line:last-child &lt;/span&gt;{&lt;span&gt;
    margin-bottom&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line .filter-time-title&lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;
    padding-right&lt;/span&gt;:&lt;span&gt; 30px&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 0 10px &lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 46px&lt;/span&gt;;&lt;span&gt;
    line-height&lt;/span&gt;:&lt;span&gt; 46px&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line.active .filter-time-title&lt;/span&gt;{&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; 1px solid #e5e5e5&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line .filter-time-title::after &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
    content&lt;/span&gt;:&lt;span&gt; ''&lt;/span&gt;;&lt;span&gt;
    right&lt;/span&gt;:&lt;span&gt; 15px&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; 17px&lt;/span&gt;;&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
    border-left&lt;/span&gt;:&lt;span&gt; 1px solid&lt;/span&gt;;&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; 1px solid&lt;/span&gt;;&lt;span&gt;
    -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg)&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg)&lt;/span&gt;;&lt;span&gt;
    -webkit-box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
    box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
    border-color&lt;/span&gt;:&lt;span&gt;  #00b358&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line.active .filter-time-title::after &lt;/span&gt;{&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; 21px&lt;/span&gt;;&lt;span&gt;
    -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(135deg)&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; rotate(135deg)&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line .filter-time-title .fr&lt;/span&gt;{&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 14px&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;
}&lt;span&gt;
.page-list .more-filter-line.active .filter-time-title .fr&lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; none &lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line ul &lt;/span&gt;{&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 5px 15px &lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line ul li&lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
   height&lt;/span&gt;:&lt;span&gt; 32px&lt;/span&gt;;&lt;span&gt;
   line-height&lt;/span&gt;:&lt;span&gt; 32px&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line ul li.active&lt;/span&gt;{&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line ul li.active::after &lt;/span&gt;{&lt;span&gt;
    content&lt;/span&gt;:&lt;span&gt; &quot;&quot;&lt;/span&gt;;&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 14px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 6px&lt;/span&gt;;&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; 2px solid #00b358&lt;/span&gt;;&lt;span&gt;
    border-left&lt;/span&gt;:&lt;span&gt; 2px solid #00b358&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;&lt;span&gt;
    right&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
    margin-top&lt;/span&gt;:&lt;span&gt; -4px&lt;/span&gt;;&lt;span&gt;
    -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg) translateY(-50%)&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; rotate(-45deg) translateY(-50%)&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-line1 &lt;/span&gt;{&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
    -webkit-box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
    border-bottom&lt;/span&gt;:&lt;span&gt; 1px solid #e5e5e5&lt;/span&gt;;&lt;span&gt;
    border-top&lt;/span&gt;:&lt;span&gt; 1px solid #e5e5e5&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 8px 0&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 0 10px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 48px&lt;/span&gt;;&lt;span&gt;
    line-height&lt;/span&gt;:&lt;span&gt; 48px&lt;/span&gt;;
}&lt;span&gt;

.page-list .more-filter-wrapper .btn-wrapper &lt;/span&gt;{&lt;span&gt;
 text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
 margin&lt;/span&gt;:&lt;span&gt; 15px 0&lt;/span&gt;;&lt;span&gt;
 padding-bottom&lt;/span&gt;:&lt;span&gt; 15px&lt;/span&gt;;
 
}&lt;span&gt;

.page-list .more-filter-wrapper .btn-primary &lt;/span&gt;{&lt;span&gt;
 border-radius&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;&lt;span&gt;   
 width&lt;/span&gt;:&lt;span&gt; 80%&lt;/span&gt;;&lt;span&gt;
 border&lt;/span&gt;:&lt;span&gt; 1px solid #00b358&lt;/span&gt;;&lt;span&gt;
 color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;&lt;span&gt;
 background-color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;
}&lt;span&gt;

.page-list .lazy-load .bus-seat &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;
.page-list .lazy-load .detail &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;
.page-list .lazy-load .bus-seats-info &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;
.page-list .bus-list .lazy-info &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
}&lt;span&gt;

.page-list .bus-list .lazy-load .lazy-info &lt;/span&gt;{&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 10px 0&lt;/span&gt;;&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt;  block&lt;/span&gt;;
}


&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * station group
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
.page-list .bs-price &lt;/span&gt;{&lt;span&gt;
    font-family&lt;/span&gt;:&lt;span&gt; Arial&lt;/span&gt;;&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; #fd8f01&lt;/span&gt;;&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;
    font-weight&lt;/span&gt;:&lt;span&gt; 600&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-ellipsis &lt;/span&gt;{&lt;span&gt;
    white-space&lt;/span&gt;:&lt;span&gt; nowrap&lt;/span&gt;;&lt;span&gt;
    overflow-x&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    text-overflow&lt;/span&gt;:&lt;span&gt; ellipsis&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-icon-bus, .page-list .bs-icon-carpool, .page-list .bs-icon-train, .page-list .bs-icon-icline &lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 31px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 31px&lt;/span&gt;;&lt;span&gt;
    background-size&lt;/span&gt;:&lt;span&gt; 31px 31px&lt;/span&gt;;&lt;span&gt;
    background-repeat&lt;/span&gt;:&lt;span&gt; no-repeat&lt;/span&gt;;&lt;span&gt;
    background-position&lt;/span&gt;:&lt;span&gt; 0 0&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-icon-arrow &lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 15px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 4px&lt;/span&gt;;&lt;span&gt;
    background&lt;/span&gt;:&lt;span&gt; url(/webapp/bus/static/images/icon-arrow.png) 0 0 no-repeat&lt;/span&gt;;&lt;span&gt;
    background-size&lt;/span&gt;:&lt;span&gt; 15px 4px&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-icon-bus &lt;/span&gt;{&lt;span&gt;
    background-image&lt;/span&gt;:&lt;span&gt; url(/webapp/bus/static/images/icon-bus.png)&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-icon-carpool &lt;/span&gt;{&lt;span&gt;
    background-image&lt;/span&gt;:&lt;span&gt; url(/webapp/bus/static/images/icon-carpool.png)&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-icon-train &lt;/span&gt;{&lt;span&gt;
    background-image&lt;/span&gt;:&lt;span&gt; url(/webapp/bus/static/images/icon-train.png)&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-icon-icline &lt;/span&gt;{&lt;span&gt;
    background-image&lt;/span&gt;:&lt;span&gt; url(/webapp/bus/static/images/icon-icline.png)&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-st-wrapper &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
    background&lt;/span&gt;:&lt;span&gt; url(/webapp/bus/static/images/icon-dot.png) 5px 19px no-repeat&lt;/span&gt;;&lt;span&gt;
    background-size&lt;/span&gt;:&lt;span&gt; 2px 10px&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-st-end &lt;/span&gt;{&lt;span&gt;
    margin-top&lt;/span&gt;:&lt;span&gt; 6px&lt;/span&gt;;
}&lt;span&gt;

.page-list .bs-st-start:before, .page-list .bs-st-end:before &lt;/span&gt;{&lt;span&gt;
    content&lt;/span&gt;:&lt;span&gt; ''&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
    margin-right&lt;/span&gt;:&lt;span&gt;5px&lt;/span&gt;;&lt;span&gt;
    vertical-align&lt;/span&gt;:&lt;span&gt; -2px&lt;/span&gt;;&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 50% 50%&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-st-start:before &lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 2px solid #13bd65&lt;/span&gt;;
}&lt;span&gt;
.page-list .bs-st-end:before &lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 2px solid #f06463&lt;/span&gt;;
}&lt;span&gt;


.page-list .sch-prem &lt;/span&gt;{&lt;span&gt;
  margin&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;&lt;span&gt;
  border&lt;/span&gt;:&lt;span&gt; 1px solid #e8e8e8&lt;/span&gt;;&lt;span&gt;
  background&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
  position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;
}&lt;span&gt;

.page-list .sch-prem .icon-wrapper &lt;/span&gt;{&lt;span&gt;
  width&lt;/span&gt;:&lt;span&gt; 49px&lt;/span&gt;;&lt;span&gt;
  float&lt;/span&gt;:&lt;span&gt; left&lt;/span&gt;;&lt;span&gt;
  margin-top&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;
}&lt;span&gt;
.page-list .sch-prem .info-wrapper &lt;/span&gt;{&lt;span&gt;
  margin&lt;/span&gt;:&lt;span&gt; 0 70px 0 49px&lt;/span&gt;;
}&lt;span&gt;
.page-list .sch-prem .st-name &lt;/span&gt;{&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;
}&lt;span&gt;
.page-list .sch-prem .st-name .bs-icon-arrow &lt;/span&gt;{&lt;span&gt;
  margin&lt;/span&gt;:&lt;span&gt;0 10px&lt;/span&gt;;&lt;span&gt;
  vertical-align&lt;/span&gt;:&lt;span&gt; 4px&lt;/span&gt;;
}&lt;span&gt;
.page-list .sch-prem .price-wrapper &lt;/span&gt;{&lt;span&gt;
  position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
  right&lt;/span&gt;:&lt;span&gt; 15px&lt;/span&gt;;&lt;span&gt;
  width&lt;/span&gt;:&lt;span&gt; 70px&lt;/span&gt;;&lt;span&gt;
  text-align&lt;/span&gt;:&lt;span&gt; right&lt;/span&gt;;&lt;span&gt;
  bottom&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;
}&lt;span&gt;
.page-list .sch-prem-icline .icon-wrapper, .page-list .sch-prem-bus .icon-wrapper&lt;/span&gt;{&lt;span&gt;
    margin-top&lt;/span&gt;:&lt;span&gt; 19px&lt;/span&gt;;
}&lt;span&gt;
.page-list .sch-prem-icline .price-wrapper, .page-list .sch-prem-bus .price-wrapper&lt;/span&gt;{&lt;span&gt;
    bottom&lt;/span&gt;:&lt;span&gt; 19px&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;新建一个style.css暂且放到ui/list目录中，其实这个list的样式跟业务代码更有关系，放里面不合适，但是我们这里做demo就无所谓了，这里分离出来后稍作改造即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;list.js&lt;/span&gt;
import React from 'react'&lt;span&gt;;
import &lt;/span&gt;'./style.css';&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这段css样式会被style标签插入到header中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里未做高阶使用，关于高阶的用法，我们后续有机会再介绍，接下来就是部署以及工程化相关工作了，考虑篇幅，我们后续再继续&lt;/p&gt;

&lt;p&gt;本文代码地址：&lt;strong&gt;&lt;a href=&quot;https://github.com/yexiaochai/react-demo&quot; target=&quot;_blank&quot;&gt;https://github.com/yexiaochai/react-demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;演示地址：&lt;a href=&quot;https://yexiaochai.github.io/react-demo/build/index.html&quot; target=&quot;_blank&quot;&gt;https://yexiaochai.github.io/react-demo/build/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到，从组件化一块的设计，React是做的十分好的，我们没花什么时间就把一个简单的页面搭建了出来，实际项目过程中正确的使用React会有很高的效率；另一方面，webpack一块的配置，create-react-app已经完全帮我们做完了，我们只需要按照他的规则来即可，这个黑匣子里面的东西又非常多，我们后续根据实际的项目再深入了解吧，一时之间也说不完，后续我们继续研究如何使用这套代码兼容小程序开发，以及一些工程化问题&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 16:09:00 +0000</pubDate>
<dc:creator>叶小钗</dc:creator>
<og:description>前言 大概16年的时候我们队react进行了简单的学习：从DOM操作看Vue&amp;React的前端组件化，顺带补齐React的demo，当时我们只是站在框架角度在学习，随着近几年前端的变化，想写个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yexiaochai/p/10197234.html</dc:identifier>
</item>
<item>
<title>JAVAORM框架之Mybatis (Ibatis) 详解 - jimisun</title>
<link>http://www.cnblogs.com/jimisun/p/10212018.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jimisun/p/10212018.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;h2 id=&quot;mybatis基础概念&quot;&gt;Mybatis基础概念&lt;/h2&gt;
&lt;p&gt;Mybatis是一个持久层框架&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000056408-2112193430.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;它对JDBC操作数据库进行封装,让我们更关注SQL本身,而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。下面是Mybatis的架构图&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000125909-100173221.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Mybatis又是如何解决JDBC中存在的问题呢?&lt;/p&gt;
&lt;p&gt;1、 创建数据库连接相关操作，存在硬编码&lt;br/&gt;​ a) 解决方案：通过Mybatis全局配置文件，对数据库连接进行配置&lt;br/&gt;​&lt;br/&gt;2、 statement相关操作，存在硬编码&lt;br/&gt;​ a) 解决方案：通过Mapper映射文件，对statement相关处理进行配置。&lt;br/&gt;​&lt;br/&gt;3、 频繁开启数据库连接，会降低数据库处理性能。&lt;br/&gt;​ a) 解决方案：通过Mybatis全局配置文件，配置连接池。&lt;br/&gt;​&lt;br/&gt;​&lt;/p&gt;
&lt;h2 id=&quot;mybatis开放方式演进&quot;&gt;Mybatis开放方式演进&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000154108-2024894772.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000210626-1572693060.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000229752-120346304.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;mybatis框架核心要点&quot;&gt;Mybatis框架核心要点&lt;/h2&gt;
&lt;h3 id=&quot;关联查询&quot;&gt;关联查询&lt;/h3&gt;
&lt;p&gt;所谓的关联查询就是一对一和一对多以及多对多的应用,例如下面的例子&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000253585-436809210.png&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;一对一 : 例如在获取订单的时候需要获取该订单所属的用户信息&lt;br/&gt;解决思路 : 使用ResultMap或者ResultType自定义一个POJO进行结果映射&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;一对多 : 例如在获取用户信息的时候需要获取该用户的所有订单信息&lt;br/&gt;解决思路 : 自定义一个POJO使用(只能使用)ResultMap进行结果映射&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;延迟加载懒加载&quot;&gt;延迟加载(懒加载)&lt;/h3&gt;
&lt;h4 id=&quot;关于延迟加载&quot;&gt;关于延迟加载&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;MyBatis中的延迟加载，也称为懒加载，是指在进行关联查询时，按照设置延迟规则推迟对关联对象的select查询。延迟加载可以有效的减少数据库压力。&lt;/li&gt;
&lt;li&gt;Mybatis的延迟加载，需要通过resultMap标签中的association和collection子标签才能演示成功。&lt;/li&gt;
&lt;li&gt;Mybatis的延迟加载，也被称为是嵌套查询，对应的还有嵌套结果的概念，可以参考一对多关联的案例。&lt;/li&gt;
&lt;li&gt;注意：MyBatis的延迟加载只是对关联对象的查询有延迟设置，对于主加载对象都是直接执行查询语句的。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;延迟加载分类&quot;&gt;延迟加载分类&lt;/h4&gt;
&lt;p&gt;MyBatis根据对关联对象查询的select语句的执行时机，分为三种类型：直接加载、侵入式加载与深度延迟加载&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;直接加载： 执行完对主加载对象的select语句，马上执行对关联对象的select查询。&lt;/li&gt;
&lt;li&gt;侵入式延迟：执行对主加载对象的查询时，不会执行对关联对象的查询。但当要访问主加载对象的详情时，就会马上执行关联对象的select查询。即对关联对象的查询执行，侵入到了主加载对象的详情访问中。也可以这样理解：将关联对象的详情侵入到了主加载对象的详情中，即将关联对象的详情作为主加载对象的详情的一部分出现了。&lt;/li&gt;
&lt;li&gt;深度延迟：执行对主加载对象的查询时，不会执行对关联对象的查询。访问主加载对象的详情时也不会执行关联对象的select查询。只有当真正访问关联对象的详情时，才会执行对关联对象的select查询。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;延迟加载策略需要在Mybatis的全局配置文件中，通过标签进行设置。&lt;/p&gt;
&lt;h4 id=&quot;如何使用&quot;&gt;如何使用&lt;/h4&gt;
&lt;p&gt;直接加载 通过对全局参数：lazyLoadingEnabled进行设置，默认就是false。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;settings&amp;gt;
    &amp;lt;!-- 延迟加载总开关 --&amp;gt;
    &amp;lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;false&quot;/&amp;gt;
&amp;lt;/settings&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;侵入式加载&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;settings&amp;gt;
    &amp;lt;!-- 延迟加载总开关 --&amp;gt;
    &amp;lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&amp;gt;
    &amp;lt;!-- 侵入式延迟加载开关 --&amp;gt;
    &amp;lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&amp;gt;
&amp;lt;/settings&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;深度延迟加载&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;settings&amp;gt;
    &amp;lt;!-- 延迟加载总开关 --&amp;gt;
    &amp;lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&amp;gt;
    &amp;lt;!-- 侵入式延迟加载开关 --&amp;gt;
    &amp;lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&amp;gt;
&amp;lt;/settings&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;动态sql&quot;&gt;动态SQL&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;动态SQL的思想：就是使用不同的动态SQL标签去完成SQL字符串的拼接处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;解决的问题&quot;&gt;解决的问题 :&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;在映射文件中，会编写很多有重叠部分的SQL语句，比如SELECT语句和WHERE语句等这些重叠语句，该如何处理&lt;/li&gt;
&lt;li&gt;如果页面传递过来一个参数，但是SQL语句中的条件有多个，此时会发生问题。&lt;br/&gt;​&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;主要标签&quot;&gt;主要标签&lt;/h4&gt;
&lt;p&gt;if标签 where标签 sql片段 foreach标签&lt;/p&gt;
&lt;h3 id=&quot;mybatis缓存&quot;&gt;Mybatis缓存&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Mybatis提供查询缓存，如果缓存中有数据就不用从数据库中获取，用于减轻数据压力，提高系统性能。&lt;/li&gt;
&lt;li&gt;Mybatis的查询缓存总共有两级，我们称之为一级缓存和二级缓存，如图：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000354959-1337253635.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;• 一级缓存是SqlSession级别的缓存。在操作数据库时需要构造 sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。

• 二级缓存是Mapper（namespace）级别的缓存。多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;一级缓存原理图&quot;&gt;一级缓存原理图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000420490-1080563584.png&quot;/&gt;&lt;/p&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息，将查询到的用户信息存储到一级缓存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;如果中间sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;二级缓存原理图&quot;&gt;二级缓存原理图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1218060/201901/1218060-20190103000441283-1804983992.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1. 第一次调用mapper下的SQL去查询用户信息。查询到的信息会存到该mapper对应的二级缓存区域内。
2. 第二次调用相同namespace下的mapper映射文件中相同的SQL去查询用户信息。会去对应的二级缓存内取结果。
3. 如果调用相同namespace下的mapper映射文件中的增删改SQL，并执行了commit操作。此时会清空该namespace下的二级缓存。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;如何开启二级缓存默认关闭&quot;&gt;如何开启二级缓存(默认关闭)&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;在核心配置文件SqlMapConfig.xml中加入以下内容（开启二级缓存总开关）：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 开启二级缓存总开关 --&amp;gt;
&amp;lt;settings&amp;gt;
    &amp;lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&amp;gt;
&amp;lt;/settings&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;在UserMapper映射文件中，加入以下内容，开启二级缓存：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 开启本mapper下的namespace的二级缓存，默认使用的是mybatis提供的PerpetualCache --&amp;gt;
&amp;lt;cache&amp;gt;&amp;lt;/cache&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明 : 由于二级缓存的数据不一定都是存储到内存中，它的存储介质多种多样，比如说存储到文件系统中，所以需要给缓存的对象执行序列化。如果该类存在父类，那么父类也要实现序列化。(既查询结果对象要实现序列化接口)&lt;/p&gt;
&lt;h3 id=&quot;mybatis逆向工程&quot;&gt;Mybatis逆向工程&lt;/h3&gt;
&lt;p&gt;由于Mybatis是半自动化的ORM框架,所以仍然有很多事情需要我们去做&lt;br/&gt;例如 : 编写与数据库表对应的实体,编写Mapper接口,编写Mapper配置文件&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;所谓的Mybatis逆向工程仅仅是一个项目所以只需要在下面配置中填写好自己数据库的相关信息,运行main方法既可以为我们生成POJO类,Mapper接口,Mapper配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE generatorConfiguration
  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&amp;gt;

&amp;lt;generatorConfiguration&amp;gt;
    &amp;lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&amp;gt;
        &amp;lt;commentGenerator&amp;gt;
            &amp;lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&amp;gt;
            &amp;lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&amp;gt;
        &amp;lt;/commentGenerator&amp;gt;
        &amp;lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&amp;gt;
        &amp;lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;
            connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis&quot; userId=&quot;root&quot; password=&quot;root&quot;&amp;gt;
        &amp;lt;/jdbcConnection&amp;gt;
        &amp;lt;!-- &amp;lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot; connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot; 
            userId=&quot;yycg&quot; password=&quot;yycg&quot;&amp;gt; &amp;lt;/jdbcConnection&amp;gt; --&amp;gt;

        &amp;lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 
            和 NUMERIC 类型解析为java.math.BigDecimal --&amp;gt;
        &amp;lt;javaTypeResolver&amp;gt;
            &amp;lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&amp;gt;
        &amp;lt;/javaTypeResolver&amp;gt;

        &amp;lt;!-- targetProject:生成PO类的位置 --&amp;gt;
        &amp;lt;javaModelGenerator targetPackage=&quot;com.kkb.ms.po&quot;
            targetProject=&quot;.\src&quot;&amp;gt;
            &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
            &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&amp;gt;
            &amp;lt;!-- 从数据库返回的值被清理前后的空格 --&amp;gt;
            &amp;lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&amp;gt;
        &amp;lt;/javaModelGenerator&amp;gt;
        &amp;lt;!-- targetProject:mapper映射文件生成的位置 --&amp;gt;
        &amp;lt;sqlMapGenerator targetPackage=&quot;com.kkb.ms.mapper&quot;
            targetProject=&quot;.\src&quot;&amp;gt;
            &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
            &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&amp;gt;
        &amp;lt;/sqlMapGenerator&amp;gt;
        &amp;lt;!-- targetPackage：mapper接口生成的位置 --&amp;gt;
        &amp;lt;javaClientGenerator type=&quot;XMLMAPPER&quot;
            targetPackage=&quot;com.kkb.ms.mapper&quot; targetProject=&quot;.\src&quot;&amp;gt;
            &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
            &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&amp;gt;
        &amp;lt;/javaClientGenerator&amp;gt;
        &amp;lt;!-- 指定数据库表 --&amp;gt;
        &amp;lt;table schema=&quot;&quot; tableName=&quot;user&quot;&amp;gt;&amp;lt;/table&amp;gt;
        &amp;lt;table schema=&quot;&quot; tableName=&quot;order&quot;&amp;gt;&amp;lt;/table&amp;gt;
    &amp;lt;/context&amp;gt;
&amp;lt;/generatorConfiguration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意 :每次执行逆向工程代码之前，先删除原来已经生成的mapper xml文件再进行生成。mapper.xml文件的内容不是被覆盖而是进行内容追加，会导致mybatis解析失败。po类及mapper.java文件的内容是直接覆盖没有此问题。&lt;/p&gt;
&lt;h3 id=&quot;pagehelper分页插件&quot;&gt;PageHelper分页插件&lt;/h3&gt;
&lt;p&gt;如果你也在用Mybatis，建议尝试该分页插件，这个一定是最方便使用的分页插件。&lt;/p&gt;
&lt;p&gt;使用方法如下&lt;br/&gt;首先增加依赖&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.github.pagehelper&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;pagehelper&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.1.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置PageHelper&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    • Mybatis全局配置文件
&amp;lt;plugins&amp;gt;
    &amp;lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&amp;gt;
        &amp;lt;!-- config params as the following --&amp;gt;
        &amp;lt;property name=&quot;helperDialect&quot; value=&quot;mysql&quot;/&amp;gt;
    &amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;    • Spring配置文件
&amp;lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&amp;gt;
  &amp;lt;!-- other configuration --&amp;gt;
  &amp;lt;property name=&quot;plugins&quot;&amp;gt;
    &amp;lt;array&amp;gt;
      &amp;lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&amp;gt;
        &amp;lt;property name=&quot;properties&quot;&amp;gt;
          &amp;lt;!-- config params as the following --&amp;gt;
          &amp;lt;value&amp;gt;
            helperDialect=mysql
          &amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
      &amp;lt;/bean&amp;gt;
    &amp;lt;/array&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在项目中使用PageHelper&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//获取第1页，10条内容，默认查询总数count
PageHelper.startPage(1, 10);
List&amp;lt;Country&amp;gt; list = countryMapper.selectAll();
//用PageInfo对结果进行包装
PageInfo page = new PageInfo(list);
//测试PageInfo全部属性
//PageInfo包含了非常全面的分页属性
assertEquals(1, page.getPageNum());
assertEquals(10, page.getPageSize());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1. 需要分页的查询语句，必须是处于PageHelper.startPage(1, 10);后面的第一条语句。
2. 如果查询语句是使用resultMap进行的嵌套结果映射，则无法使用PageHelper进行分页。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;​&lt;br/&gt;Mybatis插件介绍&lt;/p&gt;
&lt;p&gt;参考地址：https://www.cnblogs.com/fangjian0423/p/mybatis-interceptor.html&lt;br/&gt;StatementHandler&lt;br/&gt;ParameterHandler&lt;br/&gt;ResultSetHandler&lt;/p&gt;
&lt;h3 id=&quot;注解开发&quot;&gt;注解开发&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用注解开发,我们不再需要XML配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用注解说明&lt;/p&gt;
&lt;h4 id=&quot;增删改查-静态sql&quot;&gt;增删改查-静态SQL&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;@Insert:相当于标签，实现新增&lt;/li&gt;
&lt;li&gt;@Update: 相当于标签，实现更新&lt;/li&gt;
&lt;li&gt;@Delete: 相当于标签，实现删除&lt;/li&gt;
&lt;li&gt;@Select: 相当于&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 02 Jan 2019 16:05:00 +0000</pubDate>
<dc:creator>jimisun</dc:creator>
<og:description>[TOC] Mybatis基础概念 Mybatis是一个持久层框架 它对JDBC操作数据库进行封装,让我们更关注SQL本身,而不需要花费精力去处理例如注册驱动、创建connection、创建state</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jimisun/p/10212018.html</dc:identifier>
</item>
<item>
<title>一个平凡但不平庸的程序猿2018个人总结 - 虚无境</title>
<link>http://www.cnblogs.com/xuwujing/p/10211265.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuwujing/p/10211265.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;又到了一年一度的年终总结了，相信大家估计也开始写总结，本人也不例外。在公司中写完模板化的总结之后，自己还是写了一个给自己的总结。本篇总结主要是讲述去年所定下目标的完成情况和人生感悟以及明年的目标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;去年目标以及完成情况&quot;&gt;去年目标以及完成情况&lt;/h2&gt;
&lt;h3 id=&quot;去年目标&quot;&gt;去年目标&lt;/h3&gt;
&lt;p&gt;完整的链接在这里:&lt;a href=&quot;https://www.cnblogs.com/xuwujing/p/8158716.html&quot;&gt;一个两年java程序猿的2017个人总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里先列举一下去年定的目标:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;阅读2本以上的技术相关书籍，并作出相应的实践；&lt;/li&gt;
&lt;li&gt;阅读5本以上国内外有意思的书籍；&lt;/li&gt;
&lt;li&gt;阅读jdk常用类的源码，能够理解其中的涵义；&lt;/li&gt;
&lt;li&gt;能够熟练掌握3个常用的技术框架；&lt;/li&gt;
&lt;li&gt;继续坚持每天一万步，一年中最少要达到250天；&lt;/li&gt;
&lt;li&gt;每月至少一次户外运动；&lt;/li&gt;
&lt;li&gt;每天睡眠时间不低于7小时，不高于9小时，一年至少要达到300天；&lt;/li&gt;
&lt;li&gt;每个月坚持写4以上篇博客，一年所写的博客不低于40篇；&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;。。。 现在看来，去年定的目标有点多并且完成的难度还不小 o(╥﹏╥)o&lt;/p&gt;
&lt;p&gt;既然要做总结，那么还是需要看看这些是否达成了。&lt;/p&gt;
&lt;h3 id=&quot;完成情况&quot;&gt;完成情况&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;首先第一条:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;阅读2本以上的技术相关书籍，并作出相应的实践；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先是技术书籍，今年主要看完并做出实践的有:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;《编写高质量代码：改善Java程序的151个建议》&lt;/li&gt;
&lt;li&gt;《Effective Java》&lt;/li&gt;
&lt;li&gt;《阿里巴巴Java开发手册》&lt;/li&gt;
&lt;li&gt;《大话设计模式》&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其中1、2、3这三本书对我编写代码的帮助非常大，特别是第三本，很大的程度上提升了我代码的质量。以前的我写代码仅仅只是为了应付工作，功能实现了就行，基本不管代码格式是否规范，性能是否最优，代码注释是否完整。。。 看完这三本书之后，慢慢开始在写代码的时候注意这些了，先不说代码质量写不写得好，但是起码的代码规范、参数命名、方法使用、异常处理等等已经改善了很多了，比如集合参数获取或遍历的时候，习惯先进行空指针的判断，需要关闭流的时候必须在finally中进行，if中条件过多时会抽出来并使用一个final boolean变量进行判断等等。其中改变最大的这块应该是注释这块了，在类、类属性、类方法使用Javadoc注释，方法中复杂逻辑概述使用块注释，简单的使用行注释，后续可能恢复的代码使用 &lt;code&gt;///&lt;/code&gt;注释等等。第四本 《大话设计模式》中主要学习的是设计模式思想，理解了一些并写成了相应的&lt;a href=&quot;https://www.cnblogs.com/xuwujing/category/1249313.html&quot;&gt;博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;从这几本书中得到的收获远远不止这些，但这里就不在细说了。&lt;/p&gt;
&lt;p&gt;看过的书并做了一些实践的有:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;《Java 编程思想》&lt;/li&gt;
&lt;li&gt;《Java 并发编程实战》&lt;/li&gt;
&lt;li&gt;《Spring Boot实战 》&lt;/li&gt;
&lt;li&gt;《SpringCloud参考指南》&lt;/li&gt;
&lt;li&gt;《分布式服务框架原理与实践》&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;很多书都是看过一些，也做过一些实践，比如学习的SpringBoot和SpringCloud技术知识就来源于这些书籍。 但是因为各种原因最后没有坚持下来-_-||，也比较可惜的，所以这里就只能简单的列举下了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二条:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;阅读5本以上国内外有意思的书籍；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年阅读完的书籍有:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;《人性的弱点》&lt;/li&gt;
&lt;li&gt;《傲慢与偏见》&lt;/li&gt;
&lt;li&gt;《满愿》&lt;/li&gt;
&lt;li&gt;《冰菓》&lt;/li&gt;
&lt;li&gt;《愿你归来，仍是少年》&lt;/li&gt;
&lt;li&gt;《人间失格》&lt;/li&gt;
&lt;li&gt;《别输在不会表达上》&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;《傲慢与偏见》看完此书之后顺便也看了下该电影，总的来情结说在意料之中，有意思一点的是谁傲慢，谁偏见到后面才知晓 罒ω罒。&lt;/p&gt;
&lt;p&gt;《冰菓》 是以前看过的一部叫做《冰菓》的动漫，越看越好看的那种，已经看过很多次了，因此买了一整套小说在看一遍。《满愿》则是该作者写的另一本推理小说，还算比较有意思的一本小说。&lt;/p&gt;
&lt;p&gt;《人间失格》 这本书是大文豪太宰治的最后一本小说，这本书从某种方面来说过于阴暗了，可能会引起不适，因此不怎么推荐去看。从现在来说的话，这本书的主角应该是有重度抑郁症吧。。。&lt;/p&gt;
&lt;p&gt;《愿你归来，仍是少年》 这本书主要思想也就是常说的&lt;code&gt;勿忘初心&lt;/code&gt;，记载的是作者前半生的所见所闻和感想，看完之后略有感触。不过在生活中也发现了一点，越是把&lt;code&gt;勿忘初心&lt;/code&gt;挂在嘴边的，越是忘了初心。。。&lt;/p&gt;
&lt;p&gt;《人性的弱点》 这本书是同事推荐的，看完真的感触很大，可以说在这一年是对我影响最大的一本书了，里面的道理都简单容易理解，建议每个人看一看，或许发现人生又是另一种了。&lt;/p&gt;
&lt;p&gt;《别输在不会表达上》 这本书说得很对，很有道理，但是看完也就看完了，并没有留下什么。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三条:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;阅读jdk常用类的源码，能够理解其中的涵义；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;emmmm，这个源码是看过一点，但是没有坚持看下去，现在也忘得差不多。&lt;br/&gt;总得来说，看过但是没啥印象了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四条:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;能够熟练掌握3个常用的技术框架；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年熟练掌握了springboot、netty、kafka、zookeeper这些相关的技术框架，基本都可以熟练使用了，也编写了相关博客进行记载，相关的项目进行实践。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五、六、七条:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;继续坚持每天一万步，一年中最少要达到250天；&lt;/li&gt;
&lt;li&gt;每月至少一次户外运动；&lt;/li&gt;
&lt;li&gt;每天睡眠时间不低于7小时，不高于9小时，一年至少要达到300天；&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;上述这三条都可以作为保持身体指定的目标，因此放到一起说。&lt;br/&gt;首先是坚持每天一万步，大概就是每天步行7~8公里，这个到目前为止并没达到250天，实际接近200天，至于为什么没有达到，各种原因都有，这里就不找那些借口了。&lt;br/&gt;每月至少一次户外运动，这个也没有每个月都去户外运动，不过还是有一些的。&lt;br/&gt;保持良好的睡眠时间，这个基本达标，目前差不多有300天良好的睡眠了。睡眠真的很重要，良好的睡眠才能开心的工作、学习和娱乐！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第八条:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;每个月坚持写4以上篇博客，一年所写的博客不低于40篇；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个月坚持写4以上篇博客，这个有很多个月没有达到，不过今年所写的博客已达到40篇了。总得来说，对比去年写的博客，虽然数量要少了不少，但是今年写的博客无论是页面排版还是质量都提升了不少，这也是一个不小的进步了 (*￣︶￣) 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181225163027848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FhendzeHBjbQ==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于上述这些定制的目标，我做了一个简单的Excel表格进行记录。这个Excel顺便也上传了，有兴趣的话查看的话，地址在这里，&lt;a href=&quot;https://files.cnblogs.com/files/xuwujing/%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92.rar&quot;&gt;2018个人计划&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;去年目标总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按照去年所定的状态进行评估。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;阅读2本以上的技术相关书籍，并作出相应的实践； -- 超越&lt;/li&gt;
&lt;li&gt;阅读5本以上国内外有意思的书籍； -- 达标&lt;/li&gt;
&lt;li&gt;阅读jdk常用类的源码，能够理解其中的涵义； -- 未达标&lt;/li&gt;
&lt;li&gt;能够熟练掌握3个常用的技术框架； -- 达标&lt;/li&gt;
&lt;li&gt;继续坚持每天一万步，一年中最少要达到250天； -- 未达标&lt;/li&gt;
&lt;li&gt;每月至少一次户外运动； -- 未达标&lt;/li&gt;
&lt;li&gt;每天睡眠时间不低于7小时，不高于9小时，一年至少要达到300天； -- 达标&lt;/li&gt;
&lt;li&gt;每个月坚持写4以上篇博客，一年所写的博客不低于40篇；-- 达标&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;总的来说，达标的是属于刚刚达标的，未达标基本是接近完成目标，但是差一些而已，至于为什么差一些的原因，思前想后，除了加班、天气不好、身体不舒服、重要的事情等等之外，好像就没有其他的了，o(╥﹏╥)o，其实那些都是借口，总结就一个字 &lt;code&gt;懒&lt;/code&gt;而已 。 虽然有一些目标没有达标，但是好在都是是在进行，而不是都没启动，这点还算不错，起码做了。 至于哪一个唯一超越的，大概是因为比较容易达成一些吧。&lt;/p&gt;
&lt;h2 id=&quot;今年事件&quot;&gt;今年事件&lt;/h2&gt;
&lt;p&gt;今年底事件就分为几个模块来说吧。&lt;/p&gt;
&lt;h3 id=&quot;在社区&quot;&gt;在社区&lt;/h3&gt;
&lt;p&gt;主要是在博客园、CSDN、GitHub技术社区这块；&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编写了&lt;a href=&quot;https://www.cnblogs.com/xuwujing/category/1145997.html&quot;&gt;SpringBoot&lt;/a&gt;整合系列的博客，并将这些项目放到&lt;a href=&quot;https://github.com/xuwujing/springBoot-study&quot;&gt;GitHub&lt;/a&gt;进行了开源；&lt;/li&gt;
&lt;li&gt;完成Java中的&lt;a href=&quot;https://www.cnblogs.com/xuwujing/category/1249313.html&quot;&gt;设计模式系列&lt;/a&gt;博客的编写；&lt;/li&gt;
&lt;li&gt;新建了一个&lt;a href=&quot;https://github.com/xuwujing/java-study&quot;&gt;GitHub&lt;/a&gt;仓库，记录自己在学习java中学习到的知识点，也包括之前编写的博客相关代码；&lt;/li&gt;
&lt;li&gt;有不少的博文访问量破万，并且在CSDN取得了博客专家称号；&lt;/li&gt;
&lt;li&gt;在github终于有过百star的项目了；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;虽然上面的成绩对于很多大佬来说没什么，但是对于个人来说有很大的鼓励作用，起码写的博文，开源的项目不是没有用，而是能够确切的帮助到一些人的。&lt;/p&gt;
&lt;h3 id=&quot;在公司&quot;&gt;在公司&lt;/h3&gt;
&lt;p&gt;可能因为今年是本命年，所以过年后运气一直都不错 ~_~&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;运气不错在年会中了一等奖；&lt;/li&gt;
&lt;li&gt;成为了公司的核心员工；&lt;/li&gt;
&lt;li&gt;获得了技术分享奖；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在工作中，成长了许多，除了技术方面外，最大的收获就是人际之间的关系处理以及做事这方面的吧。技术方面因经常分享一些新技术框架、开源工具的使用，因此得到一个技术分享将；做事方面而言可能是因为态度比较好一些，沟通闭环执行比较到位， 做的小事情多一些，不过也可能是因为运气比较好，部门人数较少，所以成为了核心员工(实际貌似没有什么用)。。。&lt;/p&gt;
&lt;h3 id=&quot;个人&quot;&gt;个人&lt;/h3&gt;
&lt;p&gt;坚持做了一些事情，有新增了一些有益于身体的事项。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;学习了不少新知识，看了一些有趣的书籍；&lt;/li&gt;
&lt;li&gt;去参加计算机软考了，但是很可惜没过；&lt;/li&gt;
&lt;li&gt;因牙疼去拔智齿了，并坚持每年洗牙；&lt;/li&gt;
&lt;li&gt;因眼睛疼，开始佩戴防辐射眼镜(零度数)；&lt;/li&gt;
&lt;li&gt;因脖子和肩膀疼，开始去做推拿了；&lt;/li&gt;
&lt;li&gt;因手指疼，开始有意识锻炼手指了；&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;个人方面，和去年相比，在技术方面提升了不少。但是身体却不如去年了，明明在锻炼，在注意身体，但是感觉身体的确是一年不如一年。去年基本没有上述问题，但是在今年下半年尤为明显，明显的感觉到身体素质下降了，各种身体问题接踵而出。因此需要加强身体的锻炼，多运动，少久坐，多吃蔬菜水果，少吃酸辣刺激食物 ，保持良好睡眠，少熬夜 。。。 当然最重要的是少加班，只要少加班或不加班，那么上述的身体问题或许不会存在吧！&lt;/p&gt;
&lt;h2 id=&quot;明年目标&quot;&gt;明年目标&lt;/h2&gt;
&lt;p&gt;回过神来，发现一年就这么过了。虽然在2018年中国甚至全世界都发生了很多重大的事件，但是对个人来说，并没有特别留下深刻印象的东西，可能因为圈子太窄，对外接触较少吧...&lt;/p&gt;
&lt;p&gt;明天的目标，应该算是今年的目标吧。如果按照去年的我制定目标的话，可能就是以下的这些了:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;每几小时坚持远眺和活动手指;&lt;/li&gt;
&lt;li&gt;每天坚持运动锻炼身体;&lt;/li&gt;
&lt;li&gt;每周坚持去电影院看一场电影;&lt;/li&gt;
&lt;li&gt;每周坚持写一篇博客；&lt;/li&gt;
&lt;li&gt;每月坚持去做推拿保护颈椎和脖子;&lt;/li&gt;
&lt;li&gt;每月坚持户外运动；&lt;/li&gt;
&lt;li&gt;每年坚持一次洗牙保护牙齿;&lt;/li&gt;
&lt;li&gt;每年坚持写年度总结；&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;但是今年的我并不想这么做了，经历过一些事情之后，还是觉得活得简单开心就好。所以今年的我只想希望明年的自己完成这几个目标：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;活得开心，开心最重要；&lt;/li&gt;
&lt;li&gt;喜欢做某件事情；&lt;/li&gt;
&lt;li&gt;喜欢一个人；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现实是如此残酷，人生又如此短暂，何不活的开心一点呢？&lt;br/&gt;找到一个自己真正想做的事情，只要不触犯法律道德底线，那么就去做吧。&lt;br/&gt;找到一个喜欢的人，无论是现实的，还是非现实的。&lt;/p&gt;
&lt;h2 id=&quot;感悟&quot;&gt;感悟&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;2018年，真的算是比较有意思的一年。在这一年中学会了太多，同时也失去了太多，可能有所得就必有所失吧。在这一年中，学会了在社会中如何合群，学会了控制自己的情绪，学会了在公司如何做&lt;strong&gt;一个领导放心、同事舒心的好人&lt;/strong&gt;，学会了职业性的微笑，学会习惯性的谎言 。。。 总之就是学会了很多技巧。但是学会这些的同时，自己也失去了很多，失去了一部分的自律生活，失去了一些健康的生活，失去了内心感动，失去了发至内心的笑容，失去了一部分的真诚... 失去了不少东西，可能再也不会回来，但是我还是希望以后的自己能够把找回来 ^_^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写到这里差不多该写的都写了， 本篇博文主要的目的还是让自己有个清晰的认识，并且好对未来做些规划。今年收获了很多的感悟，其中发现高中自己写的日记中的一条感悟非常有意思，也算做今年的感悟吧！&lt;br/&gt;今年的感悟如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;活着是为了更好的活着而活着！&lt;/li&gt;
&lt;li&gt;对生活的不满的原因无在乎是想得太多，做的太少。&lt;/li&gt;
&lt;li&gt;当你觉得迷茫困惑的时候，放下手中的一切，出门去走走，散散心，听听纯音乐，发下呆，或许就不在困惑了&lt;/li&gt;
&lt;li&gt;种一颗树最好的时间是过去，其次是现在，最次的是未来，所以有什么想做的事情最好立马去做。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;其它&quot;&gt;其它&lt;/h2&gt;
&lt;p&gt;其实本篇文章在之前写过，但是感觉写的不太好，就删除进行重写了...&lt;/p&gt;
&lt;p&gt;本文的标题想法来自以前看到的一篇文章，该篇文章如下:&lt;/p&gt;
&lt;blockquote readability=&quot;85&quot;&gt;
&lt;p&gt;我们可以平凡,但绝不可以平庸.&lt;br/&gt;平凡与平庸,既有共性,也有不同.共性在于两者都含有平平常常、普普通通的意思,都没有轰轰烈烈、惊天动地的壮举,也没有卓著功勋、叱咤风云的伟业和气势.不同在于,平凡是中性概念,指人有一颗平常心,在普通岗位兢兢业业、任劳任怨地工作和生活.平庸则带有贬意,消极颓废、没有追求,无所事事、碌碌无为,随波逐流、自暴自弃,生活得没有个性、没有张力、没有特色.&lt;br/&gt;平凡是人生的常态.大千世界,芸芸众生,成就非凡、出类拔萃、彪柄史册的人是少数,大奸大恶、民怨沸腾、遗臭万年的人也是少数.绝大多数人岗位平凡,角色普通,生活平淡,每天开门面对柴米油盐酱醋茶几件事,考学、升职、买房、找工作……与左邻右舍的人一样,有着接踵而至的忧愁烦恼,每天要感受百姓人生的喜怒哀乐.&lt;br/&gt;平凡不等于平淡.平凡人不一定有惊涛骇浪的壮举,却完全可以在平凡的岗位上,凭着一颗平凡却不平淡的心,珍惜光阴,执着追求,矢志不渝,朝着理想的方向奔跑,&quot;秀&quot;出自己的精彩.全国劳动模范徐虎,没想成名成家,也没想出人头地,平时的工作就是钻下水道、通排粪管、修水龙头,一干就是30年,默默地为社会作奉献,看似平凡的人生,却蕴涵着熠熠光华.&lt;br/&gt;平凡更不是平庸.平凡的人,可以无过人之才,可以默默无闻,但不能不知道为什么而活,不能没有理想与追求,不能消极悲观、无所作为.生活平凡,成就一般,永远不能成为浑浑噩噩、碌碌无为的理由和借口.平凡的人应是一块铺路石,个头虽小却双肩负重；平凡的人还应是一颗螺丝钉,毫不起眼却时刻发挥作用.&lt;br/&gt;平凡不平庸,必须坚定理想与追求.人生有了理想与追求,就有前进方向和力量.如果没有理想,精神空虚,人生会得过且过；如果有理想而不去追求,到头来仍是一无所获.人生十分短暂,只有目标明确、珍惜光阴,才能有所收获,赢得主动；只有执着上进、不懈求索,才能扬起前行的风帆,缩短现实与理想的距离.&lt;br/&gt;平凡不平庸,必须脚踏实地,尽力而为.远离平庸,不是喊在嘴上、贴在墙上的口号.人生平凡,并不妨碍自己在平凡的岗位上,对别人、对企业、对国家有所帮助、有所裨益、有所贡献.如果人生一无是处、毫无价值,不仅在平庸的泥淖中越陷越深,最终会成为社会、企业和别人的包袱.惟有脚踏实地,积极进取,做出实实在在的成绩,有所建树,方能平凡之中升华修养、彰显品格、实现价值.&lt;br/&gt;平凡不平庸,必须拒绝懒惰与懈怠、拒绝浅薄与浮躁,培养积极平和健康的心态.没有人注定平凡,也没有人一生卓越,不同的只是面对生活的态度.积极的态度,就要拥抱勤劳和坚韧,拒绝懒惰与懈怠；就要拥抱敦厚和务实,拒绝浅薄与浮燥；就要拥抱本色自我和独立人格,拒绝朝三暮四与随波逐流.心态积极平和健康,真诚对待每一个人,努力做好每一件事,就能身处平凡而超越平凡,让生活洒满灿烂阳光.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;音乐推荐&quot;&gt;音乐推荐&lt;/h3&gt;
&lt;p&gt;这首音乐是以前看过的一部动漫，也可能是我感触最深的一部动漫。&lt;/p&gt;
&lt;p&gt;写作CLANNAD，译作经典，读作人生。&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 15:38:00 +0000</pubDate>
<dc:creator>虚无境</dc:creator>
<og:description>前言 又到了一年一度的年终总结了，相信大家估计也开始写总结，本人也不例外。在公司中写完模板化的总结之后，自己还是写了一个给自己的总结。本篇总结主要是讲述去年所定下目标的完成情况和人生感悟以及明年的目标</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuwujing/p/10211265.html</dc:identifier>
</item>
<item>
<title>python爬虫之反爬虫（随机user-agent，获取代理ip，检测代理ip可用性） - -零</title>
<link>http://www.cnblogs.com/-wenli/p/10211942.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-wenli/p/10211942.html</guid>
<description>&lt;p&gt;目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
随机User-Agent

获取代理ip

检测代理ip可用性
&lt;/pre&gt;&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;&lt;strong&gt;fake_useragent库，伪装请求头&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
from fake_useragent import UserAgent

ua = UserAgent()
# ie浏览器的user agent
print(ua.ie)

# opera浏览器
print(ua.opera)

# chrome浏览器
print(ua.chrome)

# firefox浏览器
print(ua.firefox)

# safri浏览器
print(ua.safari)

# 最常用的方式
# 写爬虫最实用的是可以随意变换headers，一定要有随机性。支持随机生成请求头
print(ua.random)
print(ua.random)
print(ua.random)
&lt;/pre&gt;&lt;/div&gt;





&lt;p&gt;&lt;strong&gt;在免费的代理网站爬取代理ip，免费代理的采集也很简单，无非就是：访问页面页面 —&amp;gt; 正则/xpath提取 —&amp;gt; 保存&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
代理ip网站
有代理：https://www.youdaili.net/Daili/guonei/
66代理：http://www.66ip.cn/6.html
西刺代理：https://www.xicidaili.com/
快代理：https://www.kuaidaili.com/free/
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
#根据网页结果，适用正则表达式匹配
#这种方法适合翻页的网页
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
import re
import requests
import  time

def get_ip():
    url='https://www.kuaidaili.com/free/inha/'
    url_list=[url+str(i+1) for i in range(5)] #生成url列表，5代表只爬取5页
    print(url_list)
    ip_list = []
    for i in range(len(url_list)):
        url =url_list[i]
        html = requests.get(url=url,).text
        regip = '&amp;lt;td.*?&amp;gt;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})&amp;lt;/td&amp;gt;.*?&amp;lt;td.*?&amp;gt;(\d{1,5})&amp;lt;/td&amp;gt;'
        matcher = re.compile(regip,re.S)
        ipstr = re.findall(matcher, html)
        time.sleep(1)

        for j in ipstr:
            ip_list.append(j[0]+':'+j[1])  #ip+port
    print(ip_list)
    print('共收集到%d个代理ip' % len(ip_list))
    return ip_list
if __name__=='__main__':
    get_ip()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1477786/201901/1477786-20190102225909321-1927544505.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;





&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
#先获取特定标签
#解析
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
import requests
from bs4 import BeautifulSoup
def get_ip_list(obj):
    ip_text = obj.findAll('tr', {'class': 'odd'})   # 获取带有IP地址的表格的所有行
    ip_list = []
    for i in range(len(ip_text)):
        ip_tag = ip_text[i].findAll('td')   
        ip_port = ip_tag[1].get_text() + ':' + ip_tag[2].get_text() # 提取出IP地址和端口号
        ip_list.append(ip_port)
    print(&quot;共收集到了{}个代理IP&quot;.format(len(ip_list)))
    print(ip_list)
    return ip_list
url = 'http://www.xicidaili.com/'
headers = {
    'User-Agent': 'User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36'}
request = requests.get(url, headers=headers)
response =request.text
bsObj = BeautifulSoup(response, 'lxml')     # 解析获取到的html
lists=get_ip_list(bsObj)
&lt;/pre&gt;&lt;/div&gt;






&lt;p&gt;第一种方法：通过返回的状态码判断&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;51&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
import requests
import random
import re
import time



def get_ip():
    url='https://www.kuaidaili.com/free/inha/'
    url_list=[url+str(i+1) for i in range(1)]
    print(url_list)
    ip_list = []
    for i in range(len(url_list)):
        url =url_list[i]
        html = requests.get(url=url,).text
        regip = '&amp;lt;td.*?&amp;gt;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})&amp;lt;/td&amp;gt;.*?&amp;lt;td.*?&amp;gt;(\d{1,5})&amp;lt;/td&amp;gt;'
        matcher = re.compile(regip,re.S)
        ipstr = re.findall(matcher, html)
        time.sleep(1)

        for j in ipstr:
            ip_list.append(j[0]+':'+j[1])
    print('共收集到%d个代理ip' % len(ip_list))
    print(ip_list)
    return ip_list
def valVer(proxys):
    badNum = 0
    goodNum = 0
    good=[]
    for proxy in proxys:
        try:
            proxy_host = proxy
            protocol = 'https' if 'https' in proxy_host else 'http'
            proxies = {protocol: proxy_host}
            print('现在正在测试的IP：',proxies)
            response = requests.get('http://www.baidu.com', proxies=proxies, timeout=2)
            if response.status_code != 200:
                badNum += 1
                print (proxy_host, 'bad proxy')
            else:
                goodNum += 1
                good.append(proxies)
                print (proxy_host, 'success proxy')
        except Exception as e:
            print( e)
            # print proxy_host, 'bad proxy'
            badNum += 1
            continue
    print ('success proxy num : ', goodNum)
    print( 'bad proxy num : ', badNum)
    print(good)

if __name__ == '__main__':
    ip_list=get_ip()
    valVer(ip_list)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1477786/201901/1477786-20190102233401134-1461738707.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;第二种方法：使用requests包来进行验证&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
import requests
import random
import re
import time



def get_ip():
    url='https://www.kuaidaili.com/free/inha/'
    url_list=[url+str(i+1) for i in range(1)]
    print(url_list)
    ip_list = []
    for i in range(len(url_list)):
        url =url_list[i]
        html = requests.get(url=url,).text
        regip = '&amp;lt;td.*?&amp;gt;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})&amp;lt;/td&amp;gt;.*?&amp;lt;td.*?&amp;gt;(\d{1,5})&amp;lt;/td&amp;gt;'
        matcher = re.compile(regip,re.S)
        ipstr = re.findall(matcher, html)
        time.sleep(1)

        for j in ipstr:
            ip_list.append(j[0]+':'+j[1])
    print(ip_list)
    print('共收集到%d个代理ip' % len(ip_list))
    return ip_list
def valVer(proxys):
    badNum = 0
    goodNum = 0
    good=[]
    for proxy in proxys:
        print(&quot;现在正在检测ip&quot;,proxy)
        try:
            requests.get('http://wenshu.court.gov.cn/', proxies={&quot;http&quot;:&quot;http://&quot;+str(proxy)}, timeout=2)
        except:
            badNum+=1
            print('connect failed')
        else:
            goodNum=1
            good.append(proxy)
            print('success')

    print ('success proxy num : ', goodNum)
    print( 'bad proxy num : ', badNum)
    print(good)

if __name__ == '__main__':
    ip_list=get_ip()
    valVer(ip_list)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1477786/201901/1477786-20190102232557215-741843662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;第三种方法：使用telnet&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
import telnetlib


try:

    telnetlib.Telnet('127.0.0.1', port='80', timeout=20)

except:

    print 'connect failed'

else:
    
    print 'success'
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 02 Jan 2019 15:36:00 +0000</pubDate>
<dc:creator>-零</dc:creator>
<og:description>python爬虫之反爬虫（随机user-agent，获取代理ip，检测代理ip可用性） 目录 随机User-Agent fake_useragent库，伪装请求头 获取代理ip 在免费的代理网站爬取代</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/-wenli/p/10211942.html</dc:identifier>
</item>
<item>
<title>2018年终总结——越过山丘 - 吕大豹</title>
<link>http://www.cnblogs.com/lvdabao/p/10211898.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lvdabao/p/10211898.html</guid>
<description>&lt;p&gt;又到了年终总结的时候了，每年花一点时间好好回顾下，看看收获与不足，然后在下一年里继续马不停蹄，人总要前进的嘛。&lt;/p&gt;
&lt;p&gt;今年也是并不轻松的一年啊，整个互联网行业都过得不容易。到年底了还传出各家裁员的消息，码农的处境真是前途堪忧。从宏观上看，是全球经济进入一个下行周期，哪个行业都会受影响，覆巢之下焉有完卵。&lt;/p&gt;
&lt;p&gt;这也促使我们进行更多的思考，今年我毕业满五年了，也已经是老码农队伍的一员。在未来的职业生涯中，要靠什么核心竞争力来维持自己的薪资呢？这是一个很现实的问题，毕竟跟年轻力壮的年轻人比起来，自己的精力明显不够了。据说有大厂招人已经不看五年以上工作经验的简历了，这就是形势，覆巢之下的形势。这种颓势应该会持续几年，所以我们必须得想明白这个问题了。&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;工作&lt;/h3&gt;
&lt;p&gt;今年我换工作了，入了美团。自己都有点意外，从有想法到辞职、面试、入职，前后也就一个月吧。&lt;/p&gt;
&lt;p&gt;之前在创业型公司，呆了将近三年，今年也走到E轮了。我一直会觉得自己会跟公司走到最后。但命运就是这么奇怪，今年年初的时候我突然感觉自己处于比较危险的状态，技术深度上没有提升，工作上带着几个组员做没有挑战的业务。有点安逸的等待公司上市那一天。&lt;/p&gt;
&lt;p&gt;一位前辈敲醒了我，他问我，你们公司上市后你就不敲代码了吗？不工作了吗？想想自己想要的是什么。我遂下决心逃离舒适区。去向也没想太多，还是去大厂深化一下自己的技术实力吧，感觉这两年有点脱节。&lt;/p&gt;
&lt;p&gt;年初美团打车是很风光的，媒体各种报道，我也就抱着很向往的态度过去了。面试的过程还是有点曲折的，毕竟自己也两三年没再被面试过了，最大的感受就是，行业对工作五年的工程师要求是比较高的。工作两三年的码农是最好找工作的，性价比高，公司爱要。五年的就要精挑细选了，毕竟要的薪资高，干活也不那么麻利了。这也给各位老码农提个醒，技术的道路上不能停下学习的脚步。&lt;/p&gt;
&lt;p&gt;到了新团队还是有一段时间的适应期的。自己也切实感受到了压力，真的有一帮优秀的年轻人，技术好，干劲强。自己一点不敢怠慢，该学学，该加班加班，确实是逃离舒适区的感觉，心理和身体上都有一定程度的压力。现在入职半年多了，我也不敢松口气，强迫自己多研究东西，提高执行力，提高工作效率。虽然累一些，但感觉自己的内心是接受的，是无愧的。&lt;/p&gt;
&lt;h3 id=&quot;生活&quot;&gt;生活&lt;/h3&gt;
&lt;p&gt;今年在生活上也发生了一件大事，在北京买房了。对于一个北漂来讲这可能是终极梦想了。对于买房这件事，我和媳妇意见很统一，要干就一口气干到彻底的，不要犹犹豫豫。&lt;/p&gt;
&lt;p&gt;于是从四月份开始，陆陆续续看房。然后马不停蹄的走流程、交房、装修、搬家。花光了所有积蓄，终于在一个月前搬进了新家。总算是在北京安家了。&lt;/p&gt;
&lt;p&gt;买房真是个苦力活，前后六个多月，几乎每个周末都在外面跑，各种细碎的事情太多了。导致这半年上班都很疲惫，业余时间也不能再搞点别的输出了，所以今年微信公众号算是正式停笔了，博客也没写，文章产出为零。生活的其他方面也没什么可总结的，都被买房装修挤占了。&lt;/p&gt;
&lt;p&gt;好在生活终于恢复平静，我可以好好筹划下个阶段的事情了。嘚瑟一下晒晒房子吧~&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/520134/201901/520134-20190102231632370-1112932341.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;读书写作&quot;&gt;读书写作&lt;/h3&gt;
&lt;p&gt;到这里我真是惭愧的不知写什么了。&lt;/p&gt;
&lt;p&gt;上面也提到了，今年的业余时间基本为零，再加上整个人处于比较浮躁的状态，读书写作基本都是负向的总结。&lt;/p&gt;
&lt;p&gt;往年基本能读个十本左右的书，相比之下今年就太少了。东野圭吾的读了两本：《拉普拉斯的魔女》、《新参者》。看完对东野的膜拜也降温了一些些，看来大师的作品也还是经典的好看。&lt;/p&gt;
&lt;p&gt;经济学相关：《牛奶可乐经济学》读了一半，技术类：《JavaScript设计模式与开发实践》读了一半。浮躁啊浮躁，一本书都读不完了。&lt;/p&gt;
&lt;p&gt;前几天朋友送了本《高效能人士的七个习惯》，经典中的经典，感觉很适合现在的我。刚刚开始看，决定深入阅读和实践。&lt;/p&gt;
&lt;p&gt;关于写作上面也提到了，零，没有。&lt;/p&gt;
&lt;p&gt;今年基本都在知识星球进行碎碎谈了，各种零碎的技术生活相关内容，一点点积累。前些天看了下生成的年度总结，我发表了46000多字，自己都有点吃惊。因为感觉今年输出的内容太少了，看来积累了力量真是不容忽视啊！&lt;/p&gt;
&lt;h3 id=&quot;技术认知&quot;&gt;技术认知&lt;/h3&gt;
&lt;p&gt;技术人的年终总结，总得谈谈技术。我用“技术认知”这个小标题，也代表了今年在技术领域的成长。&lt;/p&gt;
&lt;p&gt;翻去年的年终总结，提到今年要学react，要玩一些新技术新框架。但其实都没实现。今年在技术上确实没什么实质提升，作为技术人还是有点慌的。&lt;/p&gt;
&lt;p&gt;但我现在也不是太慌，因为我对技术的认知有了一次提升，这在我看来是十分珍贵的。&lt;/p&gt;
&lt;p&gt;第一个认知是：不要着眼于使用技术，而是着眼于完成某项任务。听起来像是一句没用的废话，认知提升这件事情，自己内心悟到了就感觉特别深刻，而在别人看来往往是没用的鸡汤。这个感悟可以认为是对全栈的一些诠释，我个人觉得它包含的内容比全栈还丰富一些。你首先是一个工程师，其次才是前端工程师，编程不应自我划限。&lt;/p&gt;
&lt;p&gt;第二个认知是：一切都是代码。这是从我的leader身上学到的。具体来讲，我们现在用的最多的webpack、vue、react这些框架，不要认为它就是固定不变的框架，也不要不敢去修改它。要有一种敢于解剖所有框架的勇气，乃至自己实现一个的勇气。&lt;/p&gt;
&lt;p&gt;我个人觉得，这两条认知加起来，足以给我指明下一个前进方向了。&lt;/p&gt;
&lt;p&gt;最后再发一下今年比较流行的这张图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/520134/201901/520134-20190102231653078-980885286.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我认真反思了现在的状态，得出的结论是：自己处于绝望之谷附近。这真不是谦虚，在我看来今年最大的成长就是认识到了自己的无知，当然，具备客观评判自我的能力也是十分重要的。再说一个感受，认识到自己处于绝望之谷后，我竟然特别渴望鸡汤，不论是公司的所谓洗脑价值观，还是某大V的心灵鸡汤，只要是自己评判为有价值的内容，通通输入。告别对鸡汤的蔑视，或许是从愚昧山峰开始往下走的开始。&lt;/p&gt;
&lt;h3 id=&quot;新年计划&quot;&gt;新年计划&lt;/h3&gt;
&lt;p&gt;2019年工作和生活又进入一个恒纪元，可以做些计划了。&lt;/p&gt;
&lt;p&gt;首先是工作，技术深度和技术产出上加大投入，搞几个能拿得出手的作品。就以得到晋升为目标吧。&lt;/p&gt;
&lt;p&gt;读书和写作是可以好好规划了，新的一年做到踏实+勤奋，多读书，写作方面的话，还是聚焦技术吧，不在微信公众号写鸡汤了，聚焦技术博客吧。&lt;/p&gt;
&lt;p&gt;生活的话，至少得有一次旅行吧。另外家里催着要孩子了，尽管对于这事我还未做好准备。。。&lt;/p&gt;
&lt;p&gt;大概就这些吧，回首一下今年，的变动还是挺大的，对于自己的人生也是一个关键节点，越过这个山丘，还有无数山丘，加油2019！&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 15:19:00 +0000</pubDate>
<dc:creator>吕大豹</dc:creator>
<og:description>又到了年终总结的时候了，每年花一点时间好好回顾下，看看收获与不足，然后在下一年里继续马不停蹄，人总要前进的嘛。 今年也是并不轻松的一年啊，整个互联网行业都过得不容易。到年底了还传出各家裁员的消息，码农</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lvdabao/p/10211898.html</dc:identifier>
</item>
<item>
<title>机器学习笔记  多项式回归 - sdu20112013</title>
<link>http://www.cnblogs.com/sdu20112013/p/10196767.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sdu20112013/p/10196767.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/sdu20112013/p/10186516.html&quot; target=&quot;_blank&quot;&gt;上一篇机器学习笔记&lt;/a&gt;里,我们讲了线性回归.线性回归有一个前提：即我们假设数据是存在线性关系的. 然而,理想很丰满,现实很骨感,现实世界里的真实数据往往是非线性的.&lt;/p&gt;
&lt;p&gt;比如你的数据分布,是符合y=0.5$x^2$ + x + 2的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/583030/201812/583030-20181229160049252-1236980305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那你用y=ax+b去拟合,无论如何都没法取的很好的效果.&lt;/p&gt;
&lt;p&gt;这时候,我们又想继续用上一篇笔记描述的线性回归来解决这个问题,我们要怎么办呢？一个很直观的想法就是,我们想造出一个新的特征$x^2$。那么现在我们拥有了2个特征x,$x^2$，我们就可以把问题转换为求解y=a$x^2$ + bx +c，从而把问题转换成我们熟悉的线性回归问题.&lt;/p&gt;

&lt;p&gt;通过上面的分析,我们可以看出,我们想做的事情是对样本做升维(即增加样本的特征数目),sklean中完成这一功能的类叫做&lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html#sklearn.preprocessing.PolynomialFeatures&quot; target=&quot;_blank&quot;&gt;PolynomialFeatures&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;24&quot;&gt;
&lt;p&gt;&lt;em class=&quot;property&quot;&gt;class &lt;/em&gt;&lt;code class=&quot;descclassname&quot;&gt;sklearn.preprocessing.&lt;/code&gt;&lt;code class=&quot;descname&quot;&gt;PolynomialFeatures&lt;/code&gt;&lt;span class=&quot;sig-paren&quot;&gt;(&lt;em&gt;degree=2&lt;/em&gt;, &lt;em&gt;interaction_only=False&lt;/em&gt;, &lt;em&gt;include_bias=True&lt;/em&gt;&lt;span class=&quot;sig-paren&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;degree&lt;/strong&gt; &lt;span class=&quot;classifier-delimiter&quot;&gt;: &lt;span class=&quot;classifier&quot;&gt;integer&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;first last&quot;&gt;The degree of the polynomial features. Default = 2.&lt;/p&gt;
&lt;p class=&quot;first last&quot;&gt;&lt;strong&gt;interaction_only&lt;/strong&gt; &lt;span class=&quot;classifier-delimiter&quot;&gt;: &lt;span class=&quot;classifier&quot;&gt;boolean, default = False&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;first last&quot;&gt;If true, only interaction features are produced: features that are products of at most &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;degree&lt;/span&gt;&lt;/code&gt;&lt;em&gt;distinct&lt;/em&gt; input features (so not &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;x[1] &lt;span class=&quot;pre&quot;&gt;** &lt;span class=&quot;pre&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;x[0] &lt;span class=&quot;pre&quot;&gt;* &lt;span class=&quot;pre&quot;&gt;x[2] &lt;span class=&quot;pre&quot;&gt;** &lt;span class=&quot;pre&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;p class=&quot;first last&quot;&gt;&lt;strong&gt;include_bias&lt;/strong&gt; &lt;span class=&quot;classifier-delimiter&quot;&gt;: &lt;span class=&quot;classifier&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;first last&quot;&gt;If True (default), then include a bias column, the feature in which all polynomial powers are zero (i.e. a column of ones - acts as an intercept term in a linear model).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设你的样本,原本有两个特征[a,b],那么当你进行一次degree=2的升维之后,你将得到5个特征[1,a,b,$a^2$,ab,$b^2$]，其中1又可以看做是$a^0或者b^0$。&lt;/p&gt;
&lt;p&gt;关于degree的理解你可以参考一下下面这个例子.&lt;span&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span&gt;import&lt;/span&gt; &lt;span&gt;PolynomialFeatures&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;x&lt;/span&gt;=pd.DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;col1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [2], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;col2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [3],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;col3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[4&lt;span&gt;]})
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(x)
poly2 &lt;/span&gt;= PolynomialFeatures(degree=2&lt;span&gt;)
poly2.fit_transform(x)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; array([[ 1.,  2.,  3.,  4.,  4.,  6.,  8.,  9., 12., 16&lt;span&gt;.]])

poly3 &lt;/span&gt;= PolynomialFeatures(degree=3&lt;span&gt;)
poly3.fit_transform(x)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; array([[ 1.,  2.,  3.,  4.,  4.,  6.,  8.,  9., 12., 16.,  8., 12., 16&lt;span&gt;.,
        &lt;/span&gt;18., 24., 32., 27., 36., 48., 64.]])
&lt;/pre&gt;
&lt;p&gt;  poly4 = PolynomialFeatures(degree=3,interaction_only=True)&lt;br/&gt;  poly4.fit_transform(x)&lt;/p&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;em id=&quot;__mceDel&quot;&gt;array([[ 1.,  2.,  3.,  4.,  6.,  8., 12., 24.]])&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的样本有3个特征,值分别为2,3,4,degree=2时,可能的取值有$2^0$,$3^0$,$4^0$(均为1),$2^1,2^2,3^1,3^2,4^1,4^2$,$2*3,2*4,3*4$共10个值.&lt;/p&gt;
&lt;p&gt;degree为3时,又新增了$2^3,3^3,4^3$，$2^2*3,2^2*4,3^2*2,3^2*4,4^2*2,4^2*3,2*3*4$共10个.总计20个.&lt;/p&gt;
&lt;p&gt;interaction_only=true时,表示新增的特征存在交互性,不存在自己*自己,比如[2,3,4]的交互式输出是[2*3,2*4,3*4,2*3*4].&lt;/p&gt;
&lt;p&gt;从上面的分析可以看出来,&lt;span&gt;随着degree的增加,PolynomialFeatures新生成的特征数目是呈指数级别增加的.这将带来模型训练速度的严重下降和模型的过拟合&lt;/span&gt;,所以实际上一般很少用多项式回归.&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;来个具体的例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np  
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PolynomialFeatures

x &lt;/span&gt;= np.random.uniform(-3, 3, size=100&lt;span&gt;)
X &lt;/span&gt;= x.reshape(-1, 1&lt;span&gt;)
y &lt;/span&gt;= 0.5 * x**2 + x + 2 + np.random.normal(0, 1, 100&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;升维,为样本生成新的特征&lt;/span&gt;
poly = PolynomialFeatures(degree=2&lt;span&gt;)
poly.fit(X)
X2 &lt;/span&gt;=&lt;span&gt; poly.transform(X)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;对新样本做训练&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.linear_model &lt;span&gt;import&lt;/span&gt;&lt;span&gt; LinearRegression
lin_reg2 &lt;/span&gt;=&lt;span&gt; LinearRegression()
lin_reg2.fit(X2, y)
y_predict2 &lt;/span&gt;=&lt;span&gt; lin_reg2.predict(X2)

plt.scatter(x, y)
plt.plot(np.sort(x), y_predict2[np.argsort(x)], color&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.show()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/583030/201812/583030-20181229163409926-333388435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 02 Jan 2019 15:09:00 +0000</pubDate>
<dc:creator>sdu20112013</dc:creator>
<og:description>上一篇机器学习笔记里,我们讲了线性回归.线性回归有一个前提：即我们假设数据是存在线性关系的. 然而,理想很丰满,现实很骨感,现实世界里的真实数据往往是非线性的. 比如你的数据分布,是符合y=0.5$x</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sdu20112013/p/10196767.html</dc:identifier>
</item>
<item>
<title>asp.net core mcroservices 架构之 分布式日志（三）：集成kafka - 无为有道</title>
<link>http://www.cnblogs.com/ck0074451665/p/10211725.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ck0074451665/p/10211725.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;一 kafka介绍                               &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;           &lt;span&gt;kafka是基于zookeeper的一个分布式流平台，既然是流，那么大家都能猜到它的存储结构基本上就是线性的了。硬盘大家都知道读写非常的慢，那是因为在随机情况下，线性下，硬盘的读写非常快。kafka官方文档，一直拿传统的消息队列来和kafka对比，这样大家会触类旁通更快了解kafka的特性。最熟悉的消息队列框架有&lt;a href=&quot;http://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt; 和 &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;.熟悉消息队列的，最熟悉的特性就是队列和发布订阅功能，因为这是大家最常用的，kafka实现了一些特有的机制，去规避传统的消息队列的一些瓶颈，比如并发，rabbitMQ在多个处理程序下，并不能保证执行顺序，还是必须自己去处理独占，而kafka使用consumer group的方式，实现了可以多个处理程序处理一个topic下的记录。如图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222905748-958399901.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222906453-1910197267.png&quot; alt=&quot;image&quot; width=&quot;505&quot; height=&quot;242&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个分区的记录保证能被每个组接受，这样可以并发去处理一个topic的记录，而且扩展组，则可以随意根据应用需求去扩展你的应用程序，但是每个组的消费者不能超过分区的数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;kafka &lt;a href=&quot;http://kafka.apache.org/documentation/#intro_distribution&quot;&gt;Distribution&lt;/a&gt; 提供了容错的功能，每一个partition都有一个服务器叫leader，还有零个或者一个以上的服务器叫follower，当这些follower都在同步数据的时候，leader扛起所有的写和读，当leader挂掉，follower会随机选取一个服务器当leader，当然必须有几个follower同步时 in-sync的。还有kafka虽然的那个记录具有原子性，但是并不支持事务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为这一篇并不是专门讲解kafka，所以点到为止。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt;&lt;span&gt;二&lt;/span&gt; &lt;span&gt;    扩展服务 开发                          &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     以前讲过，netcore的一个很重要的特性就是支持依赖注入，在这里一切皆服务。那么如果需要kafka作为日志服务的终端，就首先需要kafka服务，下面咱们就开发一个kafka服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，服务就是需要构建,这是netcore开发服务的第一步,我们首先建立一个IKafkaBuilder.cs接口类，如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;homusing&lt;/span&gt; Microsoft.Extensions.DependencyInjection;

&lt;span&gt;namespace&lt;/span&gt; Walt.Freamwork.Service
{
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; IKafkaBuilder
    {
         &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;/// Gets the &amp;lt;see cref=&quot;IServiceCollection&quot;/&amp;gt; where Logging services are configured.&lt;/span&gt;
        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        IServiceCollection Services { &lt;span&gt;get&lt;/span&gt;; }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;再实现它,KafkaBuilder.cs&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; Microsoft.Extensions.DependencyInjection;

&lt;span&gt;namespace&lt;/span&gt; Walt.Freamwork.Service
{
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; KafkaBuilder : IKafkaBuilder
    {
        &lt;span&gt;public&lt;/span&gt; IServiceCollection Services {&lt;span&gt;get&lt;/span&gt;;}

        &lt;span&gt;public&lt;/span&gt; KafkaBuilder(IServiceCollection services)
        {
            Services=services;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再利用扩展方法为serviceCollection类加上扩展方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection.Extensions;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Walt.Framework.Service.Kafka;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Walt.Framework.Service
{
  
  
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceCollectionExtensions
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Adds logging services to the specified &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;IServiceCollection&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;services&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;IServiceCollection&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt; to add services to.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;The &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;IServiceCollection&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; so that additional calls can be chained.&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IServiceCollection AddKafka(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IServiceCollection services)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; AddKafka(services, builder =&amp;gt;&lt;span&gt; { });
        }
 
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IServiceCollection AddKafka(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IServiceCollection services
        , Action&lt;/span&gt;&amp;lt;IKafkaBuilder&amp;gt;&lt;span&gt; configure)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (services == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(services));
            }

            services.AddOptions(); 
            configure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; KafkaBuilder(services));
            services.TryAddSingleton&lt;/span&gt;&amp;lt;IKafkaService,KafkaService&amp;gt;&lt;span&gt;();  &lt;span&gt;//kafka的服务类
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;            return&lt;/span&gt;&lt;span&gt; services;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
KafkaService的实现：
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Confluent.Kafka;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Options;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;  Walt.Framework.Service.Kafka
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; KafkaService : IKafkaService
    {

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; KafkaOptions _kafkaOptions;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Producer _producer;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; KafkaService(IOptionsMonitor&amp;lt;KafkaOptions&amp;gt;&lt;span&gt;  kafkaOptions)
        {
            _kafkaOptions&lt;/span&gt;=&lt;span&gt;kafkaOptions.CurrentValue; 
            kafkaOptions.OnChange((kafkaOpt,s)&lt;/span&gt;=&amp;gt;&lt;span&gt;{
                _kafkaOptions&lt;/span&gt;=&lt;span&gt;kafkaOpt; 
                    System.Diagnostics.Debug
                    .WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(kafkaOpt)&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;s);
                    
            });
             _producer&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Producer(_kafkaOptions.Properties);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] ConvertToByte(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; str)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Text.Encoding.Default.GetBytes(str);
        }
 
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;  &lt;span&gt;async&lt;/span&gt; Task&amp;lt;Message&amp;gt; Producer(&lt;span&gt;string&lt;/span&gt; topic,&lt;span&gt;string&lt;/span&gt; key,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {  
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(topic)
            &lt;/span&gt;||&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(value))
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;topic或者value不能为null.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
      
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; task=  &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _producer.ProduceAsync(topic,ConvertToByte(key),ConvertToByte(value)); 
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; task;
        }
 
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;那么咱们是不是忘记什么了，看上面的代码，是不是那个配置类KafkaOptions 还没有说明&lt;span&gt;？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222907427-914024122.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222908135-841502752.png&quot; alt=&quot;image&quot; width=&quot;241&quot; height=&quot;244&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;这个位置添加kafka的配置类KafkaConfigurationOptions&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; Microsoft.Extensions.Configuration;
&lt;span&gt;using&lt;/span&gt; Microsoft.Extensions.Options;
&lt;span&gt;using&lt;/span&gt; Walt.Freamwork.Service;

&lt;span&gt;namespace&lt;/span&gt; Walt.Freamwork.Configuration
{
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; KafkaConfigurationOptions : IConfigureOptions&amp;lt;KafkaOptions&amp;gt;
    {

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IConfiguration _configuration;


        &lt;span&gt;public&lt;/span&gt; KafkaConfigurationOptions(IConfiguration configuration)
        {
           _configuration=configuration;
        }


        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Configure(KafkaOptions options)
        {
                //这里仅仅自定义一些你自己的代码，使用上面configuration配置中的配置节，处理程序没法自动绑定的
&lt;/pre&gt;
&lt;pre&gt;
                  一些事情。
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，将配置类添加进服务:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection.Extensions;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Options;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Walt.Framework.Service;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Walt.Framework.Configuration
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; KafkaConfigurationExtensioncs
    {
          &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IKafkaBuilder AddConfiguration(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IKafkaBuilder builder
          ,IConfiguration configuration)
          {
               
                InitService( builder,configuration); 
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder;
          }


          &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; InitService(IKafkaBuilder builder,IConfiguration configuration)
          {
            builder.Services.TryAddSingleton&lt;/span&gt;&amp;lt;IConfigureOptions&amp;lt;KafkaOptions&amp;gt;&amp;gt;&lt;span&gt;(
                  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; KafkaConfigurationOptions(configuration));  /&lt;span&gt;/配置类和配置内容
&lt;/span&gt;
            builder.Services.TryAddSingleton
            (ServiceDescriptor.Singleton&lt;/span&gt;&amp;lt;IOptionsChangeTokenSource&amp;lt;KafkaOptions&amp;gt;&amp;gt;&lt;span&gt;(
                  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ConfigurationChangeTokenSource&amp;lt;KafkaOptions&amp;gt;&lt;span&gt;(configuration)) );&lt;span&gt;//这个是观察类，如果更改，会激发onchange方法&lt;/span&gt;

            builder.Services
            .TryAddEnumerable(ServiceDescriptor.Singleton&lt;/span&gt;&amp;lt;IConfigureOptions&amp;lt;KafkaOptions&amp;gt;&amp;gt;&lt;span&gt;
            (&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ConfigureFromConfigurationOptions&amp;lt;KafkaOptions&amp;gt;&lt;span&gt;(configuration))); &lt;span&gt;//这个是option类，没这个，配置无法将类绑定&lt;/span&gt;
            
             builder.Services.AddSingleton(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; KafkaConfiguration(configuration));
          }
    }
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;ok,推送nuget，业务部分调用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt;&lt;span&gt;三&lt;/span&gt; &lt;span&gt;    kafka服务调用                          &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在project中引用然后restore：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222907427-914024122.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222908689-1318314100.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;135&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;引入命名空间：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222909316-1529246311.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222909818-220283207.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;127&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;调用：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Hosting;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Logging; 
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Newtonsoft.Json;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Walt.Framework.Log;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Walt.Framework.Configuration;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Walt.Framework.Service;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Walt.TestMcroServoces.Webapi
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    { 
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        { 
             
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; host = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebHostBuilder()
            .ConfigureAppConfiguration((hostingContext, configContext) &lt;/span&gt;=&amp;gt;&lt;span&gt;{
                 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; en=&lt;span&gt;hostingContext.HostingEnvironment;
                 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(en.IsDevelopment())
                 {
                     configContext.AddJsonFile($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.{en.EnvironmentName}.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                 }
                 &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                 {
                     configContext.AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                 }
                   configContext.AddCommandLine(args)
             .AddEnvironmentVariables()
             .SetBasePath(Directory.GetCurrentDirectory()).Build(); 
              
            })&lt;span&gt;.ConfigureServices((context,configureServices)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;=&amp;gt;{
                   configureServices.AddKafka(KafkaBuilder=&amp;gt;{
                    KafkaBuilder.AddConfiguration(context.Configuration.GetSection(&quot;KafkaService&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;));
                   });
            })   //kafka的调用。&lt;/span&gt;
            .ConfigureLogging((hostingContext, logging) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
 
                logging.AddConfiguration(hostingContext.Configuration.GetSection(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                .AddCustomizationLogger();

            }).UseKestrel(KestrelServerOption&lt;/span&gt;=&amp;gt;&lt;span&gt;{
                KestrelServerOption.ListenAnyIP(&lt;/span&gt;&lt;span&gt;801&lt;/span&gt;&lt;span&gt;);
            })
            .UseStartup&lt;/span&gt;&amp;lt;Startup&amp;gt;&lt;span&gt;().Build(); 
            host.Run(); 
            Console.ReadKey();
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;然后提交git，让jenkins构建docker发布运行：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;jenkin是是非常牛的一款构建工具，不仅仅根据插件可以扩展不同环境，还支持分布式构建.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222912141-668790612.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222912733-1329843471.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;149&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这是我们用jenikins构建的的：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222913465-736696841.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222914089-793100891.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;70&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;span&gt;然&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;让它跑起来：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222914772-684175380.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222915307-1708515639.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;32&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;调用看看：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222915764-1787452457.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222916256-846178493.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;138&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这个方法是输出Properties数组的，这个配置结构只是演示，后面的结构要变，因为要放kafka的配置，比如连接服务ip等，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;改动也很简单，在配置好configuration和service后，改动这个类&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;KafkaOptions和配置文件中kafka节点中的json结构就行。&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222916679-1033612302.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222917056-205066570.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;72&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt;&lt;span&gt;四 集成kafka&lt;/span&gt;&lt;span&gt;                         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;kafka的接口不多，看看都有那些：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a title=&quot;https://docs.confluent.io/current/clients/confluent-kafka-dotnet/api/Confluent.Kafka.Producer.html&quot; href=&quot;https://docs.confluent.io/current/clients/confluent-kafka-dotnet/api/Confluent.Kafka.Producer.html&quot;&gt;&lt;span&gt;https://docs.confluent.io/current/clients/confluent-kafka-dotnet/api/Confluent.Kafka.Producer.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222917566-1441987015.png&quot; alt=&quot;image&quot; width=&quot;144&quot; height=&quot;244&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://docs.confluent.io/current/clients/confluent-kafka-dotnet/api/Confluent.Kafka.Consumer.html&quot;&gt;&lt;span&gt;Consumer&lt;/span&gt;&lt;/a&gt;&lt;span&gt;和&lt;a href=&quot;https://docs.confluent.io/current/clients/confluent-kafka-dotnet/api/Confluent.Kafka.Producer.html&quot;&gt;Producer&lt;/a&gt;是咱们发布消息和消费消息的两个主类,代码在上文已经实现的service&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;客户端代码：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;使用my-replicated-topic-morepart这儿topic，还是希望多分区，因为后面consumer使用分布式计算读取。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222917976-24421712.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222918758-1161843946.png&quot; alt=&quot;image&quot; width=&quot;722&quot; height=&quot;112&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;consumer先在客户端监听：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222919293-955987829.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222919812-1123172761.png&quot; alt=&quot;image&quot; width=&quot;838&quot; height=&quot;42&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;product端的调用代码：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222920459-174172336.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222921114-2114610743.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;156&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;执行这个接口后，再看consumer接收到的消息：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222921744-1611143846.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222922267-1507885320.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;53&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最后一步，将咱们kafka日志部分替换为真实的kafka环境,看结果：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222923203-1640110819.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46403/201901/46403-20190102222924331-1690488257.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;459&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那么最后的配置是这样的：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogLevel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Microsoft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;KafkaLog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Prix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是我的自定义日志提供程序&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  },
  &lt;/span&gt;&lt;span&gt;&quot;KafkaService&quot;:{
    &quot;Properties&quot;:{
      &quot;bootstrap.servers&quot;:&quot;192.168.249.106:9092&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    }
  }&lt;/span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;log使用这个kafka服务就很简单了，在前面文章中实现的log扩展类中，直接构造函数注入这个kafkaService，就可以以使用了。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分布式日志到这里结束，可能大家觉得后面还有日志索引和日志展现，因为这个读kafka需要分布式去处理，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我下面刚好要写分布式计算的文章，所以到时可以拿这个当例子，承前继后。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 02 Jan 2019 14:29:00 +0000</pubDate>
<dc:creator>无为有道</dc:creator>
<og:description>一 kafka介绍 kafka是基于zookeeper的一个分布式流平台，既然是流，那么大家都能猜到它的存储结构基本上就是线性的了。硬盘大家都知道读写非常的慢，那是因为在随机情况下，线性下，硬盘的读写</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ck0074451665/p/10211725.html</dc:identifier>
</item>
</channel>
</rss>