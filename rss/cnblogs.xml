<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>大数据技术之_09_Flume学习_Flume概述+Flume快速入门+Flume企业开发案例+Flume监控之Ganglia+Flume高级之自定义MySQLSource+Flume企业真实面试题（重点） - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10471066.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10471066.html</guid>
<description>&lt;p id=&quot;tocid_0&quot; class=&quot;toc&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h1flume&quot;&gt;第1章 Flume概述&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h11flume&quot;&gt;1.1 Flume定义&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h12flume&quot;&gt;1.2 Flume组成架构&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h121agent&quot;&gt;1.2.1 Agent&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h122source&quot;&gt;1.2.2 Source&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h123channel&quot;&gt;1.2.3 Channel&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h124sink&quot;&gt;1.2.4 Sink&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h125event&quot;&gt;1.2.5 Event&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h13flume&quot;&gt;1.3 Flume拓扑结构&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h14flumeagent&quot;&gt;1.4 Flume Agent内部原理&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h15hadoop&quot;&gt;1.5 Hadoop三大发行版本&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h2flume&quot;&gt;第2章 Flume快速入门&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h21flume&quot;&gt;2.1 Flume安装地址&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h22&quot;&gt;2.2 安装部署&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h3flume&quot;&gt;第3章 Flume企业开发案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h31&quot;&gt;3.1 监控端口数据官方案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h32hdfs&quot;&gt;3.2 实时读取本地文件到HDFS案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h33hdfs&quot;&gt;3.3 实时读取目录文件到HDFS案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h34&quot;&gt;3.4 单数据源多出口案例(选择器)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h35sink&quot;&gt;3.5 单数据源多出口案例(Sink组)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h36&quot;&gt;3.6 多数据源汇总案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h4flumeganglia&quot;&gt;第4章 Flume监控之Ganglia&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h41ganglia&quot;&gt;4.1 Ganglia的安装与部署&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h42flume&quot;&gt;4.2 操作Flume测试监控&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h5flumemysqlsource&quot;&gt;第5章 Flume高级之自定义MySQLSource&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h51source&quot;&gt;5.1 自定义Source说明&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h52mysqlsource&quot;&gt;5.2 自定义MySQLSource组成&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h53mysqlsource&quot;&gt;5.3 自定义MySQLSource步骤&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h54&quot;&gt;5.4 代码实现&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h541pom&quot;&gt;5.4.1 导入pom依赖&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h542&quot;&gt;5.4.2 添加配置信息&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h543sqlsourcehelper&quot;&gt;5.4.3 SQLSourceHelper&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h544mysqlsource&quot;&gt;5.4.4 MySQLSource&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h55&quot;&gt;5.5 测试&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h551jar&quot;&gt;5.5.1 Jar包准备&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h552&quot;&gt;5.5.2 配置文件准备&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h553mysql&quot;&gt;5.5.3 MySql表准备&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h554&quot;&gt;5.5.4测试并查看结果&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h6&quot;&gt;第6章 知识扩展&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h61&quot;&gt;6.1 常见正则表达式语法&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h62&quot;&gt;6.2 练习&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h7flume&quot;&gt;第7章 Flume企业真实面试题（重点）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h71flume&quot;&gt;7.1 你是如何实现Flume数据传输的监控的？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h72flumesourcesinkchannelsource&quot;&gt;7.2 Flume的Source，Sink，Channel的作用？你们Source是什么类型？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h73flumechannelselectors&quot;&gt;7.3 Flume的Channel Selectors&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h74flume&quot;&gt;7.4 Flume参数调优&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h75flume&quot;&gt;7.5 Flume的事务机制&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10471066.html#h76flume&quot;&gt;7.6 Flume采集数据会丢失吗？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;h1flume&quot;&gt;&lt;span&gt;&lt;strong&gt;第1章 Flume概述&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h11flume&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1 Flume定义&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  Flume(水槽) 是 Cloudera 提供的一个高可用的，高可靠的，&lt;code&gt;分布式的海量日志采集、聚合和传输的系统&lt;/code&gt;。Flume基于&lt;code&gt;流式架构&lt;/code&gt;，灵活简单。&lt;br/&gt;  在2009年Flume被捐赠了apache软件基金会，为hadoop相关组件之一。尤其近几年随着flume的不断被完善以及升级版本的逐一推出，特别是&lt;code&gt;flume-ng;&lt;/code&gt;，同时flume内部的各种组件不断丰富，用户在开发的过程中使用的便利性得到很大的改善，现已成为&lt;strong&gt;apache top项目之一&lt;/strong&gt;。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORqI0.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h12flume&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2 Flume组成架构&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  Flume组成架构如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORHZn.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;Flume组成架构&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORTqs.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;下面我们来详细介绍一下Flume架构中的组件。&lt;/p&gt;
&lt;h4 id=&quot;h121agent&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.1 Agent&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Agent是一个JVM进程，它以事件的形式将数据从源头送至目的地，&lt;code&gt;是Flume数据传输的基本单元&lt;/code&gt;。&lt;br/&gt;  Agent主要有3个部分组成，Source、Channel、Sink。&lt;/p&gt;
&lt;h4 id=&quot;h122source&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.2 Source&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  &lt;code&gt;Source是负责接收数据到Flume Agent的组件&lt;/code&gt;。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、&lt;code&gt;exec(Linux命令)&lt;/code&gt;、jms、&lt;code&gt;spooling directory&lt;/code&gt;、netcat、sequence generator、&lt;code&gt;syslog&lt;/code&gt;、http、legacy。&lt;/p&gt;
&lt;h4 id=&quot;h123channel&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.3 Channel&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  &lt;code&gt;Channel是位于Source和Sink之间的缓冲区&lt;/code&gt;。因此，Channel允许Source和Sink运作在不同的速率上。&lt;code&gt;Channel是线程安全的&lt;/code&gt;，可以同时处理几个Source的写入操作和几个Sink的读取操作。&lt;br/&gt;  Flume自带两种Channel：Memory Channel 和 File Channel。&lt;br/&gt;  &lt;code&gt;Memory Channel是内存中的队列&lt;/code&gt;。&lt;code&gt;Memory Channel 在不需要关心数据丢失的情景下适用&lt;/code&gt;。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。&lt;br/&gt;  &lt;code&gt;File Channel将所有事件写到磁盘&lt;/code&gt;。因此在程序关闭或机器宕机的情况下不会丢失数据。&lt;/p&gt;
&lt;h4 id=&quot;h124sink&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.4 Sink&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  &lt;code&gt;Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent&lt;/code&gt;。&lt;br/&gt;  &lt;code&gt;Sink是完全事务性的&lt;/code&gt;。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。&lt;br/&gt;  Sink组件目的地包括hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、自定义。&lt;/p&gt;
&lt;h4 id=&quot;h125event&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.5 Event&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  传输单元，Flume数据传输的基本单元，以事件的形式将数据从源头送至目的地。&lt;/p&gt;
&lt;h3 id=&quot;h13flume&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3 Flume拓扑结构&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Flume的拓扑结构如下图所示：&lt;br/&gt;Flume Agent连接&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOROiV.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;单source，多channel、sink&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORbaq.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;Flume负载均衡&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORXGT.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;Flume Agent聚合&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORjRU.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h14flumeagent&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4 Flume Agent内部原理&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORzM4.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h15hadoop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5 Hadoop三大发行版本&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul readability=&quot;3.1243243243243&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Hadoop（哈道普）三大发行版本：Apache、Cloudera、Hortonworks。&lt;br/&gt;  Apache 版本最原始（最基础）的版本，对于入门学习最好。&lt;br/&gt;  Cloudera 在大型互联网企业中用的较多。（简称：CDH版，收费）&lt;br/&gt;  Hortonworks 文档较好。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;1、Apache Hadoop&lt;/strong&gt;&lt;br/&gt;官网地址：&lt;a href=&quot;http://hadoop.apache.org/releases.html&quot; target=&quot;_blank&quot;&gt;http://hadoop.apache.org/releases.html&lt;/a&gt;&lt;br/&gt;下载地址：&lt;a href=&quot;https://archive.apache.org/dist/hadoop/common/&quot; target=&quot;_blank&quot;&gt;https://archive.apache.org/dist/hadoop/common/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;2、Cloudera Hadoop&lt;/strong&gt;&lt;br/&gt;官网地址：&lt;a href=&quot;https://www.cloudera.com/downloads/cdh/5-10-0.html&quot; target=&quot;_blank&quot;&gt;https://www.cloudera.com/downloads/cdh/5-10-0.html&lt;/a&gt;&lt;br/&gt;下载地址：&lt;a href=&quot;http://archive-primary.cloudera.com/cdh5/cdh/5/&quot; target=&quot;_blank&quot;&gt;http://archive-primary.cloudera.com/cdh5/cdh/5/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;（1）2008年成立的Cloudera是最早将Hadoop商用的公司，为合作伙伴提供Hadoop的商用解决方案，主要是包括支持、咨询服务、培训。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;（2）&lt;code&gt;2009年Hadoop的创始人Doug Cutting也加盟Cloudera公司。&lt;/code&gt;Cloudera产品主要为CDH，Cloudera Manager，Cloudera Support。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;（3）CDH是Cloudera的Hadoop发行版，完全开源，比Apache Hadoop在兼容性，安全性，稳定性上有所增强。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;（4）Cloudera Manager是集群的软件分发及管理监控平台，可以在几个小时内部署好一个Hadoop集群，并对集群的节点及服务进行实时监控。Cloudera Support即是对Hadoop的技术支持。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;（5）Cloudera的标价为每年每个节点4000美元。Cloudera开发并贡献了可实时处理大数据的Impala项目。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;3、Hortonworks Hadoop&lt;/strong&gt;&lt;br/&gt;官网地址：&lt;a href=&quot;https://hortonworks.com/products/data-center/hdp/&quot; target=&quot;_blank&quot;&gt;https://hortonworks.com/products/data-center/hdp/&lt;/a&gt;&lt;br/&gt;下载地址：&lt;a href=&quot;https://hortonworks.com/downloads/#data-platform&quot; target=&quot;_blank&quot;&gt;https://hortonworks.com/downloads/#data-platform&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;（1）2011年成立的Hortonworks是雅虎与硅谷风投公司Benchmark Capital合资组建。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;（2）&lt;code&gt;公司成立之初就吸纳了大约25名至30名专门研究Hadoop的雅虎工程师，上述工程师均在2005年开始协助雅虎开发Hadoop，贡献了Hadoop80%的代码。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;（3）雅虎工程副总裁、雅虎Hadoop开发团队负责人Eric Baldeschwieler出任Hortonworks的首席执行官。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;（4）Hortonworks的主打产品是Hortonworks Data Platform（HDP），也同样是100%开源的产品，HDP除常见的项目外还包括了Ambari，一款开源的安装和管理系统。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;（5）HCatalog，一个元数据管理系统，HCatalog现已集成到Facebook开源的Hive中。Hortonworks的Stinger开创性的极大的优化了Hive项目。Hortonworks为入门提供了一个非常好的，易于使用的沙盒。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;（6）Hortonworks开发了很多增强特性并提交至核心主干，这使得Apache Hadoop能够在包括Window Server和Windows Azure在内的Microsoft Windows平台上本地运行。定价以集群为基础，每10个节点每年为12500美元。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h2flume&quot;&gt;&lt;span&gt;&lt;strong&gt;第2章 Flume快速入门&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h21flume&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1 Flume安装地址&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1） Flume官网地址&lt;br/&gt;  &lt;a href=&quot;http://flume.apache.org/&quot; target=&quot;_blank&quot;&gt;http://flume.apache.org/&lt;/a&gt;&lt;br/&gt;2）文档查看地址&lt;br/&gt;  &lt;a href=&quot;http://flume.apache.org/FlumeUserGuide.html&quot; target=&quot;_blank&quot;&gt;http://flume.apache.org/FlumeUserGuide.html&lt;/a&gt;&lt;br/&gt;3）下载地址&lt;br/&gt;  &lt;a href=&quot;http://archive.apache.org/dist/flume/&quot; target=&quot;_blank&quot;&gt;http://archive.apache.org/dist/flume/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;h22&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2 安装部署&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1）将apache-flume-1.7.0-bin.tar.gz上传到linux的/opt/software目录下&lt;br/&gt;2）解压apache-flume-1.7.0-bin.tar.gz到/opt/module/目录下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 software]$ tar -zxf apache-flume-&lt;span class=&quot;hljs-number&quot;&gt;1.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-bin.tar.gz -C /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3）修改apache-flume-1.7.0-bin的名称为flume&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;]$ &lt;span class=&quot;hljs-title&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;apache&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;flume&lt;/span&gt;-1.7.0-&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;flume&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4）将flume/conf下的flume-env.sh.template文件修改为flume-env.sh，并配置flume-env.sh文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 conf]$ mv flume-env.sh.template flume-env.sh&lt;br/&gt;[atguigu@hadoop102 conf]$ vim flume-env.sh&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; JAVA_HOME=/opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/jdk1&lt;span class=&quot;hljs-number&quot;&gt;.8&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;_144&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h3flume&quot;&gt;&lt;span&gt;&lt;strong&gt;第3章 Flume企业开发案例&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h31&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1 监控端口数据官方案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1）案例需求：首先，Flume监控本机44444端口，然后通过telnet工具向本机44444端口发送消息，最后Flume将监听的数据实时显示在控制台。&lt;br/&gt;2）需求分析：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWSsJ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）实现步骤：&lt;br/&gt;1．安装telnet工具&lt;br/&gt;将rpm软件包(xinetd-2.3.14-40.el6.x86_64.rpm、telnet-0.17-48.el6.x86_64.rpm和telnet-server-0.17-48.el6.x86_64.rpm)拷入/opt/software文件夹下面。执行RPM软件包安装命令：
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 software]$ sudo rpm -ivh xinetd-&lt;span class=&quot;hljs-number&quot;&gt;2.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;.el6.x86_64.rpm&lt;br/&gt;[atguigu@hadoop102 software]$ sudo rpm -ivh telnet-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;.el6.x86_64.rpm&lt;br/&gt;[atguigu@hadoop102 software]$ sudo rpm -ivh telnet-server-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;.el6.x86_64.rpm&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2．判断44444端口是否被占用&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 flume-telnet]$ sudo netstat -tunlp | &lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;44444&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;功能描述：netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。&lt;br/&gt;基本语法：netstat [选项]&lt;br/&gt;选项参数：&lt;br/&gt;  -t或--tcp：显示TCP传输协议的连线状况；&lt;br/&gt;  -u或--udp：显示UDP传输协议的连线状况；&lt;br/&gt;  -n或--numeric：直接使用ip地址，而不通过域名服务器；&lt;br/&gt;  -l或--listening：显示监控中的服务器的Socket；&lt;br/&gt;  -p或--programs：显示正在使用Socket的程序识别码和程序名称；&lt;br/&gt;3．创建Flume Agent配置文件flume-telnet-logger.conf&lt;br/&gt;在flume目录下创建job文件夹并进入job文件夹。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;flume&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 flume]$ mkdir job&lt;br/&gt;[atguigu@hadoop102 flume]$ cd job/&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在job文件夹下创建Flume Agent配置文件flume-telnet-logger.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ touch flume-telnet-logger.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在flume-telnet-logger.conf文件中添加如下内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ vim flume-telnet-logger.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加内容如下：&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;10&quot;&gt;# Name the components on this agent&lt;br/&gt;a1.sources = r1&lt;br/&gt;a1.sinks = k1&lt;br/&gt;a1.channels = c1&lt;p&gt;# Describe/configure the source&lt;br/&gt;a1.sources.r1.type = netcat&lt;br/&gt;a1.sources.r1.bind = localhost&lt;br/&gt;a1.sources.r1.port = 44444&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a1.sinks.k1.type = logger&lt;/p&gt;&lt;p&gt;# Use a channel which buffers events in memory&lt;br/&gt;a1.channels.c1.type = memory&lt;br/&gt;a1.channels.c1.capacity = 1000&lt;br/&gt;a1.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a1.sources.r1.channels = c1&lt;br/&gt;a1.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注：配置文件来源于官方手册：http://flume.apache.org/FlumeUserGuide.html&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kORvzF.png&quot; alt=&quot;&quot;/&gt;&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;&lt;span&gt;先开启flume监听端口&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a1 --conf-file job/flume-telnet-logger.conf -Dflume.root.logger=INFO,&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数说明：&lt;br/&gt;  --conf conf/ ：表示配置文件存储在conf/目录&lt;br/&gt;  --name a1 ：表示给agent起名为a1（要与配置文件一致）&lt;br/&gt;  --conf-file job/flume-telnet.conf ：flume本次启动读取的配置文件是在job文件夹下的flume-telnet.conf文件&lt;br/&gt;  -Dflume.root.logger==INFO,console ：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error&lt;br/&gt;5．使用telnet工具向本机的44444端口发送内容&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 ~]$ telnet localhost &lt;span class=&quot;hljs-number&quot;&gt;44444&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWERO.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;6．在Flume监听页面观察接收数据情况&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWpL9.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h32hdfs&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2 实时读取本地文件到HDFS案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1）案例需求：实时监控Hive日志，并上传到HDFS中。（实际开发中是tomcat中产生的日志：订单日志、点击流日志等）&lt;br/&gt;2）需求分析：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWPd1.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）实现步骤：&lt;br/&gt;1．Flume要想将数据输出到HDFS，必须持有Hadoop相关jar包
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;将&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;commons-configuration-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;hadoop-auth-2&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;hadoop-common-2&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;hadoop-hdfs-2&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;commons-io-2&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.4&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;htrace-core-3&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0-incubating&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;拷贝到/opt/module/flume/lib文件夹下。&lt;br/&gt;2．创建flume-file-hdfs.conf文件&lt;br/&gt;创建文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ touch flume-file-hdfs.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注：&lt;/code&gt;要想读取Linux系统中的文件，就得按照Linux命令的规则执行命令。由于Hive日志在Linux系统中，所以读取文件的类型选择：exec即execute执行的意思。表示执行Linux命令来读取文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ vim flume-file-hdfs.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;9.5&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;13&quot;&gt;# Name the components on this agent&lt;br/&gt;a2.sources = r2&lt;br/&gt;a2.sinks = k2&lt;br/&gt;a2.channels = c2&lt;p&gt;# Describe/configure the source&lt;br/&gt;a2.sources.r2.type = exec&lt;br/&gt;a2.sources.r2.command = tail -F /opt/module/hive/logs/hive.log&lt;br/&gt;a2.sources.r2.shell = /bin/bash -c&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a2.sinks.k2.type = hdfs&lt;br/&gt;a2.sinks.k2.hdfs.path = hdfs://hadoop102:9000/flume/%Y%m%d/%H&lt;br/&gt;#上传文件的前缀&lt;br/&gt;a2.sinks.k2.hdfs.filePrefix = logs-&lt;br/&gt;#是否按照时间滚动文件夹&lt;br/&gt;a2.sinks.k2.hdfs.round = true&lt;br/&gt;#多少时间单位创建一个新的文件夹&lt;br/&gt;a2.sinks.k2.hdfs.roundValue = 1&lt;br/&gt;#重新定义时间单位&lt;br/&gt;a2.sinks.k2.hdfs.roundUnit = hour&lt;br/&gt;#是否使用本地时间戳&lt;br/&gt;a2.sinks.k2.hdfs.useLocalTimeStamp = true&lt;br/&gt;#积攒多少个Event才flush到HDFS一次&lt;br/&gt;a2.sinks.k2.hdfs.batchSize = 1000&lt;br/&gt;#设置文件类型，可支持压缩&lt;br/&gt;a2.sinks.k2.hdfs.fileType = DataStream&lt;br/&gt;#多久生成一个新的文件&lt;br/&gt;a2.sinks.k2.hdfs.rollInterval = 600&lt;br/&gt;#设置每个文件的滚动大小&lt;br/&gt;a2.sinks.k2.hdfs.rollSize = 134217700&lt;br/&gt;#文件的滚动与Event数量无关&lt;br/&gt;a2.sinks.k2.hdfs.rollCount = 0&lt;br/&gt;#最小冗余数&lt;br/&gt;a2.sinks.k2.hdfs.minBlockReplicas = 1&lt;/p&gt;&lt;p&gt;# Use a channel which buffers events in memory&lt;br/&gt;a2.channels.c2.type = memory&lt;br/&gt;a2.channels.c2.capacity = 1000&lt;br/&gt;a2.channels.c2.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a2.sources.r2.channels = c2&lt;br/&gt;a2.sinks.k2.channel = c2&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置文件解析：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWCZR.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3．执行监控配置
&lt;pre&gt;
&lt;code class=&quot;hljs delphi&quot;&gt;[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --&lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; a2 --conf-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; job/flume-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;-hdfs.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4．开启Hadoop和Hive并操作Hive产生日志&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-dfs.sh&lt;br/&gt;[atguigu@hadoop103 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-yarn.sh&lt;br/&gt;[atguigu@hadoop102 hive]$ bin/hive&lt;br/&gt;hive (default)&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5．在HDFS上查看文件。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWki6.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h33hdfs&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3 实时读取目录文件到HDFS案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1）案例需求：使用Flume监听整个目录的文件。&lt;br/&gt;2）需求分析：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWVzD.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）实现步骤：&lt;br/&gt;1．创建配置文件flume-dir-hdfs.conf&lt;br/&gt;创建一个文件
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ touch flume-dir-hdfs.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打开文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ vim flume-dir-hdfs.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;10&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;14&quot;&gt;# Name the components on this agent&lt;br/&gt;a3.sources = r3&lt;br/&gt;a3.sinks = k3&lt;br/&gt;a3.channels = c3&lt;p&gt;# Describe/configure the source&lt;br/&gt;a3.sources.r3.type = spooldir&lt;br/&gt;a3.sources.r3.spoolDir = /opt/module/flume/upload&lt;br/&gt;a3.sources.r3.fileSuffix = .COMPLETED&lt;br/&gt;a3.sources.r3.fileHeader = true&lt;br/&gt;#忽略所有以.tmp结尾的文件，不上传&lt;br/&gt;a3.sources.r3.ignorePattern = ([^ ]*\.tmp)&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a3.sinks.k3.type = hdfs&lt;br/&gt;a3.sinks.k3.hdfs.path = hdfs://hadoop102:9000/flume/upload/%Y%m%d/%H&lt;br/&gt;#上传文件的前缀&lt;br/&gt;a3.sinks.k3.hdfs.filePrefix = upload-&lt;br/&gt;#是否按照时间滚动文件夹&lt;br/&gt;a3.sinks.k3.hdfs.round = true&lt;br/&gt;#多少时间单位创建一个新的文件夹&lt;br/&gt;a3.sinks.k3.hdfs.roundValue = 1&lt;br/&gt;#重新定义时间单位&lt;br/&gt;a3.sinks.k3.hdfs.roundUnit = hour&lt;br/&gt;#是否使用本地时间戳&lt;br/&gt;a3.sinks.k3.hdfs.useLocalTimeStamp = true&lt;br/&gt;#积攒多少个Event才flush到HDFS一次&lt;br/&gt;a3.sinks.k3.hdfs.batchSize = 100&lt;br/&gt;#设置文件类型，可支持压缩&lt;br/&gt;a3.sinks.k3.hdfs.fileType = DataStream&lt;br/&gt;#多久生成一个新的文件&lt;br/&gt;a3.sinks.k3.hdfs.rollInterval = 600&lt;br/&gt;#设置每个文件的滚动大小大概是128M&lt;br/&gt;a3.sinks.k3.hdfs.rollSize = 134217700&lt;br/&gt;#文件的滚动与Event数量无关&lt;br/&gt;a3.sinks.k3.hdfs.rollCount = 0&lt;br/&gt;#最小冗余数&lt;br/&gt;a3.sinks.k3.hdfs.minBlockReplicas = 1&lt;/p&gt;&lt;p&gt;# Use a channel which buffers events in memory&lt;br/&gt;a3.channels.c3.type = memory&lt;br/&gt;a3.channels.c3.capacity = 1000&lt;br/&gt;a3.channels.c3.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a3.sources.r3.channels = c3&lt;br/&gt;a3.sinks.k3.channel = c3&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置文件解析：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWiIx.png&quot; alt=&quot;&quot;/&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;span&gt;启动监控文件夹命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a3 --conf-file job/flume-dir-hdfs.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;说明：&lt;/code&gt; 在使用Spooling Directory Source时&lt;br/&gt;  1) 不要在监控目录中创建并持续修改文件&lt;br/&gt;  2) 上传完成的文件会以.COMPLETED结尾&lt;br/&gt;  3) 被监控文件夹每500毫秒扫描一次文件变动&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;向upload文件夹中添加文件&lt;br/&gt;在/opt/module/flume目录下创建upload文件夹&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 flume]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; upload&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;向upload文件夹中添加文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 upload]$ touch atguigu.txt&lt;br/&gt;[atguigu@hadoop102 upload]$ touch atguigu.tmp&lt;br/&gt;[atguigu@hadoop102 upload]$ touch atguigu.log&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看数据&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;查看HDFS上的数据&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWmsH.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;等待1s，再次查询upload文件夹&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 upload]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;flume&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;upload&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 upload]$ ll&lt;br/&gt;总用量 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;-rw-rw-r--. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; atguigu atguigu &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;月   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;09 atguigu.log.COMPLETED&lt;br/&gt;-rw-rw-r--. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; atguigu atguigu &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;月   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;09 atguigu.tmp&lt;br/&gt;-rw-rw-r--. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; atguigu atguigu &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;月   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;09 atguigu.txt.COMPLETED&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h34&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4 单数据源多出口案例(选择器)&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;单Source多Channel、Sink，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWAJK.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;1）案例需求：使用Flume-1监控文件变动，Flume-1将变动内容传递给Flume-2，Flume-2负责存储到HDFS。同时Flume-1将变动内容传递给Flume-3，Flume-3负责输出到Local FileSystem。&lt;br/&gt;2）需求分析：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWeQe.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）实现步骤：&lt;br/&gt;0．准备工作&lt;br/&gt;在/opt/module/flume/job目录下创建group1文件夹
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ mkdir group1&lt;br/&gt;[atguigu@hadoop102 job]$ cd group1/&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在/opt/module/datas/目录下创建flume3文件夹&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 datas]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; flume3&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1．创建flume-file-flume.conf&lt;br/&gt;配置1个接收日志文件的source和2个channel、2个sink，分别输送给flume-flume-hdfs和flume-flume-dir。&lt;br/&gt;创建配置文件并打开：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 group1]$ touch flume-file-flume.conf&lt;br/&gt;[atguigu@hadoop102 group1]$ vim flume-file-flume.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;10.5&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;15&quot;&gt;# Name the components on this agent&lt;br/&gt;a1.sources = r1&lt;br/&gt;a1.sinks = k1 k2&lt;br/&gt;a1.channels = c1 c2&lt;br/&gt;# 将数据流复制给所有channel&lt;br/&gt;a1.sources.r1.selector.type = replicating&lt;p&gt;# Describe/configure the source&lt;br/&gt;a1.sources.r1.type = exec&lt;br/&gt;a1.sources.r1.command = tail -F /opt/module/hive/logs/hive.log&lt;br/&gt;a1.sources.r1.shell = /bin/bash -c&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a1.sinks.k1.type = avro&lt;br/&gt;a1.sinks.k1.hostname = hadoop102 &lt;br/&gt;a1.sinks.k1.port = 4141&lt;/p&gt;&lt;p&gt;a1.sinks.k2.type = avro&lt;br/&gt;a1.sinks.k2.hostname = hadoop102&lt;br/&gt;a1.sinks.k2.port = 4142&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a1.channels.c1.type = memory&lt;br/&gt;a1.channels.c1.capacity = 1000&lt;br/&gt;a1.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;a1.channels.c2.type = memory&lt;br/&gt;a1.channels.c2.capacity = 1000&lt;br/&gt;a1.channels.c2.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a1.sources.r1.channels = c1 c2&lt;br/&gt;a1.sinks.k1.channel = c1&lt;br/&gt;a1.sinks.k2.channel = c2&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注：&lt;/code&gt;Avro是由Hadoop创始人Doug Cutting创建的一种跟语言无关的数据序列化和RPC框架。&lt;br/&gt;&lt;code&gt;注：&lt;/code&gt;RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。&lt;br/&gt;2．创建flume-flume-hdfs.conf&lt;br/&gt;配置上级Flume输出的Source，输出是到HDFS的Sink。&lt;br/&gt;创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 group1]$ touch flume-flume-hdfs.conf&lt;br/&gt;[atguigu@hadoop102 group1]$ vim flume-flume-hdfs.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;9.5&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;13&quot;&gt;# Name the components on this agent&lt;br/&gt;a2.sources = r1&lt;br/&gt;a2.sinks = k1&lt;br/&gt;a2.channels = c1&lt;p&gt;# Describe/configure the source&lt;br/&gt;a2.sources.r1.type = avro&lt;br/&gt;a2.sources.r1.bind = hadoop102&lt;br/&gt;a2.sources.r1.port = 4141&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a2.sinks.k1.type = hdfs&lt;br/&gt;a2.sinks.k1.hdfs.path = hdfs://hadoop102:9000/flume2/%Y%m%d/%H&lt;br/&gt;#上传文件的前缀&lt;br/&gt;a2.sinks.k1.hdfs.filePrefix = flume2-&lt;br/&gt;#是否按照时间滚动文件夹&lt;br/&gt;a2.sinks.k1.hdfs.round = true&lt;br/&gt;#多少时间单位创建一个新的文件夹&lt;br/&gt;a2.sinks.k1.hdfs.roundValue = 1&lt;br/&gt;#重新定义时间单位&lt;br/&gt;a2.sinks.k1.hdfs.roundUnit = hour&lt;br/&gt;#是否使用本地时间戳&lt;br/&gt;a2.sinks.k1.hdfs.useLocalTimeStamp = true&lt;br/&gt;#积攒多少个Event才flush到HDFS一次&lt;br/&gt;a2.sinks.k1.hdfs.batchSize = 100&lt;br/&gt;#设置文件类型，可支持压缩&lt;br/&gt;a2.sinks.k1.hdfs.fileType = DataStream&lt;br/&gt;#多久生成一个新的文件&lt;br/&gt;a2.sinks.k1.hdfs.rollInterval = 600&lt;br/&gt;#设置每个文件的滚动大小大概是128M&lt;br/&gt;a2.sinks.k1.hdfs.rollSize = 134217700&lt;br/&gt;#文件的滚动与Event数量无关&lt;br/&gt;a2.sinks.k1.hdfs.rollCount = 0&lt;br/&gt;#最小冗余数&lt;br/&gt;a2.sinks.k1.hdfs.minBlockReplicas = 1&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a2.channels.c1.type = memory&lt;br/&gt;a2.channels.c1.capacity = 1000&lt;br/&gt;a2.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a2.sources.r1.channels = c1&lt;br/&gt;a2.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3．创建flume-flume-dir.conf&lt;br/&gt;配置上级Flume输出的Source，输出是到本地目录的Sink。&lt;br/&gt;创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 group1]$ touch flume-flume-dir.conf&lt;br/&gt;[atguigu@hadoop102 group1]$ vim flume-flume-dir.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;11&quot;&gt;# Name the components on this agent&lt;br/&gt;a3.sources = r1&lt;br/&gt;a3.sinks = k1&lt;br/&gt;a3.channels = c2&lt;p&gt;# Describe/configure the source&lt;br/&gt;a3.sources.r1.type = avro&lt;br/&gt;a3.sources.r1.bind = hadoop102&lt;br/&gt;a3.sources.r1.port = 4142&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a3.sinks.k1.type = file_roll&lt;br/&gt;a3.sinks.k1.sink.directory = /opt/module/datas/flume3&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a3.channels.c2.type = memory&lt;br/&gt;a3.channels.c2.capacity = 1000&lt;br/&gt;a3.channels.c2.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a3.sources.r1.channels = c2&lt;br/&gt;a3.sinks.k1.channel = c2&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;提示：&lt;/code&gt;输出的本地目录必须是已经存在的目录，如果该目录不存在，并不会创建新的目录。&lt;br/&gt;4．执行配置文件&lt;br/&gt;分别开启对应配置文件：flume-flume-dir，flume-flume-hdfs，flume-file-flume。&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs delphi&quot; readability=&quot;6&quot;&gt;[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --&lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; a3 --conf-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; job/group1/flume-flume-dir.conf&lt;p&gt;[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --&lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; a2 --conf-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; job/group1/flume-flume-hdfs.conf&lt;/p&gt;&lt;p&gt;[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --&lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; a1 --conf-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; job/group1/flume-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;-flume.conf&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5．启动Hadoop和Hive&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs ruby&quot; readability=&quot;2&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-dfs.sh&lt;br/&gt;[atguigu@hadoop103 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-yarn.sh&lt;p&gt;[atguigu@hadoop102 hive]$ bin/hive&lt;br/&gt;hive (default)&amp;gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6．检查HDFS上数据&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWnLd.png&quot; alt=&quot;&quot;/&gt;&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;&lt;span&gt;检查/opt/module/datas/flume3目录中数据&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;hljs diff&quot;&gt;[atguigu@hadoop102 flume3]$ pwd&lt;br/&gt;/opt/module/datas/flume3&lt;br/&gt;[atguigu@hadoop102 flume3]$ ll&lt;br/&gt;总用量 4&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu    0 3月   4 01:01 1551632490229-1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu 1594 3月   4 01:02 1551632490229-2&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 flume3]$ ll&lt;br/&gt;总用量 4&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu    0 3月   4 01:01 1551632490229-1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu 3808 3月   4 01:02 1551632490229-2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu    0 3月   4 01:02 1551632490229-3&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 flume3]$ ll&lt;br/&gt;总用量 8&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu    0 3月   4 01:01 1551632490229-1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu 3808 3月   4 01:02 1551632490229-2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu  538 3月   4 01:02 1551632490229-3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu    0 3月   4 01:03 1551632490229-4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-rw-rw-r--. 1 atguigu atguigu    0 3月   4 01:03 1551632490229-5&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h35sink&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5 单数据源多出口案例(Sink组)&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;单Source、Channel多Sink(负载均衡)，如下图所示。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWKeA.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;1）案例需求：使用Flume-1监控文件变动，Flume-1将变动内容传递给Flume-2，Flume-2负责存储到HDFS。同时Flume-1将变动内容传递给Flume-3，Flume-3也负责存储到HDFS&lt;br/&gt;2）需求分析：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWQot.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）实现步骤：&lt;br/&gt;0．准备工作&lt;br/&gt;在/opt/module/flume/job目录下创建group2文件夹
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ mkdir group2&lt;br/&gt;[atguigu@hadoop102 job]$ cd group2/&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1．创建flume-netcat-flume.conf&lt;br/&gt;配置1个接收日志文件的source和1个channel、2个sink，分别输送给flume-flume-console1和flume-flume-console2。&lt;br/&gt;创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 group2]$ touch flume-netcat-flume.conf&lt;br/&gt;[atguigu@hadoop102 group2]$ vim flume-netcat-flume.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;11.5&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;17&quot;&gt;# Name the components on this agent&lt;br/&gt;a1.sources = r1&lt;br/&gt;a1.channels = c1&lt;br/&gt;a1.sinkgroups = g1&lt;br/&gt;a1.sinks = k1 k2&lt;p&gt;# Describe/configure the source&lt;br/&gt;a1.sources.r1.type = netcat&lt;br/&gt;a1.sources.r1.bind = localhost&lt;br/&gt;a1.sources.r1.port = 44444&lt;/p&gt;&lt;p&gt;# 配置sink组相关信息&lt;br/&gt;a1.sinkgroups.g1.processor.type = load_balance&lt;br/&gt;a1.sinkgroups.g1.processor.backoff = true&lt;br/&gt;a1.sinkgroups.g1.processor.selector = round_robin&lt;br/&gt;a1.sinkgroups.g1.processor.selector.maxTimeOut=10000&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a1.sinks.k1.type = avro&lt;br/&gt;a1.sinks.k1.hostname = hadoop102&lt;br/&gt;a1.sinks.k1.port = 4141&lt;/p&gt;&lt;p&gt;a1.sinks.k2.type = avro&lt;br/&gt;a1.sinks.k2.hostname = hadoop102&lt;br/&gt;a1.sinks.k2.port = 4142&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a1.channels.c1.type = memory&lt;br/&gt;a1.channels.c1.capacity = 1000&lt;br/&gt;a1.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a1.sources.r1.channels = c1&lt;br/&gt;a1.sinkgroups.g1.sinks = k1 k2&lt;br/&gt;a1.sinks.k1.channel = c1&lt;br/&gt;a1.sinks.k2.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注：&lt;/code&gt;Avro是由Hadoop创始人Doug Cutting创建的一种语言无关的数据序列化和RPC框架。&lt;br/&gt;&lt;code&gt;注：&lt;/code&gt;RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。&lt;br/&gt;2．创建flume-flume-console1.conf&lt;br/&gt;配置上级Flume输出的Source，输出是到本地控制台。&lt;br/&gt;创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 group2]$ touch flume-flume-console1.conf&lt;br/&gt;[atguigu@hadoop102 group2]$ vim flume-flume-console1.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;10&quot;&gt;# Name the components on this agent&lt;br/&gt;a2.sources = r1&lt;br/&gt;a2.sinks = k1&lt;br/&gt;a2.channels = c1&lt;p&gt;# Describe/configure the source&lt;br/&gt;a2.sources.r1.type = avro&lt;br/&gt;a2.sources.r1.bind = hadoop102&lt;br/&gt;a2.sources.r1.port = 4141&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a2.sinks.k1.type = logger&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a2.channels.c1.type = memory&lt;br/&gt;a2.channels.c1.capacity = 1000&lt;br/&gt;a2.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a2.sources.r1.channels = c1&lt;br/&gt;a2.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3．创建flume-flume-console2.conf&lt;br/&gt;配置上级Flume输出的Source，输出是到本地控制台。&lt;br/&gt;创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 group2]$ touch flume-flume-console2.conf&lt;br/&gt;[atguigu@hadoop102 group2]$ vim flume-flume-console2.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;10&quot;&gt;# Name the components on this agent&lt;br/&gt;a3.sources = r1&lt;br/&gt;a3.sinks = k1&lt;br/&gt;a3.channels = c2&lt;p&gt;# Describe/configure the source&lt;br/&gt;a3.sources.r1.type = avro&lt;br/&gt;a3.sources.r1.bind = hadoop102&lt;br/&gt;a3.sources.r1.port = 4142&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a3.sinks.k1.type = logger&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a3.channels.c2.type = memory&lt;br/&gt;a3.channels.c2.capacity = 1000&lt;br/&gt;a3.channels.c2.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a3.sources.r1.channels = c2&lt;br/&gt;a3.sinks.k1.channel = c2&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4．执行配置文件&lt;br/&gt;分别开启对应配置文件：flume-flume-console2，flume-flume-console1，flume-netcat-flume。&lt;/p&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;hljs coffeescript&quot; readability=&quot;7&quot;&gt;[atguigu@hadoop102 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a3 --conf-file job/group2/flume-flume-console2.conf -Dflume.root.logger=INFO,&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;&lt;p&gt;[atguigu@hadoop102 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a2 --conf-file job/group2/flume-flume-console1.conf -Dflume.root.logger=INFO,&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;&lt;/p&gt;&lt;p&gt;[atguigu@hadoop102 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a1 --conf-file job/group2/flume-netcat-flume.conf&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5．使用telnet工具向本机的44444端口发送内容&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;$ telnet localhost 44444&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6．查看Flume2及Flume3的控制台打印日志&lt;/p&gt;
&lt;h3 id=&quot;h36&quot;&gt;&lt;span&gt;&lt;strong&gt;3.6 多数据源汇总案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;多Source汇总数据到单Flume，如下图所示。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWMdI.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;1）案例需求：&lt;br/&gt;hadoop103上的Flume-1监控文件/opt/module/group.log，&lt;br/&gt;hadoop102上的Flume-2监控某一个端口的数据流，&lt;br/&gt;Flume-1与Flume-2将数据发送给hadoop104上的Flume-3，Flume-3将最终数据打印到控制台。&lt;br/&gt;2）需求分析：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWgOJ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）实现步骤：&lt;br/&gt;0．准备工作&lt;br/&gt;分发Flume
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;]$ &lt;span class=&quot;hljs-title&quot;&gt;xsync&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;flume&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在hadoop102、hadoop103以及hadoop104的/opt/module/flume/job目录下创建一个group3文件夹。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 job]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; group3&lt;br/&gt;[atguigu@hadoop103 job]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; group3&lt;br/&gt;[atguigu@hadoop104 job]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; group3&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1．创建flume1-logger-flume.conf&lt;br/&gt;配置Source用于监控hive.log文件，配置Sink输出数据到下一级Flume。&lt;br/&gt;在hadoop103上创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop103 group3]$ touch flume1-logger-flume.conf&lt;br/&gt;[atguigu@hadoop103 group3]$ vim flume1-logger-flume.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;10&quot;&gt;# Name the components on this agent&lt;br/&gt;a1.sources = r1&lt;br/&gt;a1.sinks = k1&lt;br/&gt;a1.channels = c1&lt;p&gt;# Describe/configure the source&lt;br/&gt;a1.sources.r1.type = exec&lt;br/&gt;a1.sources.r1.command = tail -F /opt/module/group.log&lt;br/&gt;a1.sources.r1.shell = /bin/bash -c&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a1.sinks.k1.type = avro&lt;br/&gt;a1.sinks.k1.hostname = hadoop104&lt;br/&gt;a1.sinks.k1.port = 4141&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a1.channels.c1.type = memory&lt;br/&gt;a1.channels.c1.capacity = 1000&lt;br/&gt;a1.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a1.sources.r1.channels = c1&lt;br/&gt;a1.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2．创建flume2-netcat-flume.conf&lt;br/&gt;配置Source监控端口44444数据流，配置Sink数据到下一级Flume：&lt;br/&gt;在hadoop102上创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 group3]$ touch flume2-netcat-flume.conf&lt;br/&gt;[atguigu@hadoop102 group3]$ vim flume2-netcat-flume.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;10&quot;&gt;# Name the components on this agent&lt;br/&gt;a2.sources = r1&lt;br/&gt;a2.sinks = k1&lt;br/&gt;a2.channels = c1&lt;p&gt;# Describe/configure the source&lt;br/&gt;a2.sources.r1.type = netcat&lt;br/&gt;a2.sources.r1.bind = hadoop102&lt;br/&gt;a2.sources.r1.port = 44444&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a2.sinks.k1.type = avro&lt;br/&gt;a2.sinks.k1.hostname = hadoop104&lt;br/&gt;a2.sinks.k1.port = 4141&lt;/p&gt;&lt;p&gt;# Use a channel which buffers events in memory&lt;br/&gt;a2.channels.c1.type = memory&lt;br/&gt;a2.channels.c1.capacity = 1000&lt;br/&gt;a2.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a2.sources.r1.channels = c1&lt;br/&gt;a2.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3．创建flume3-flume-logger.conf&lt;br/&gt;配置source用于接收flume1与flume2发送过来的数据流，最终合并后sink到控制台。&lt;br/&gt;在hadoop104上创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop104 group3]$ touch flume3-flume-logger.conf&lt;br/&gt;[atguigu@hadoop104 group3]$ vim flume3-flume-logger.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;10&quot;&gt;# Name the components on this agent&lt;br/&gt;a3.sources = r1&lt;br/&gt;a3.sinks = k1&lt;br/&gt;a3.channels = c1&lt;p&gt;# Describe/configure the source&lt;br/&gt;a3.sources.r1.type = avro&lt;br/&gt;a3.sources.r1.bind = hadoop104&lt;br/&gt;a3.sources.r1.port = 4141&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;# Describe the sink&lt;br/&gt;a3.sinks.k1.type = logger&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a3.channels.c1.type = memory&lt;br/&gt;a3.channels.c1.capacity = 1000&lt;br/&gt;a3.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a3.sources.r1.channels = c1&lt;br/&gt;a3.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4．执行配置文件&lt;br/&gt;分别开启对应配置文件：flume3-flume-logger.conf，flume2-netcat-flume.conf，flume1-logger-flume.conf。&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs coffeescript&quot; readability=&quot;6&quot;&gt;[atguigu@hadoop104 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a3 --conf-file job/group3/flume3-flume-logger.conf -Dflume.root.logger=INFO,&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;&lt;p&gt;[atguigu@hadoop102 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a2 --conf-file job/group3/flume2-netcat-flume.conf&lt;/p&gt;&lt;p&gt;[atguigu@hadoop103 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a1 --conf-file job/group3/flume1-logger-flume.conf&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5．在hadoop103上向/opt/module目录下的group.log追加内容&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop103 &lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;]$ echo &lt;span class=&quot;hljs-string&quot;&gt;'hello'&lt;/span&gt; &amp;gt; group.log&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6．在hadoop102上向44444端口发送数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ telnet hadoop102 &lt;span class=&quot;hljs-number&quot;&gt;44444&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7．在hadoop102上向44444端口发送数据&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWRm9.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h4flumeganglia&quot;&gt;&lt;span&gt;&lt;strong&gt;第4章 Flume监控之Ganglia&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h41ganglia&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1 Ganglia的安装与部署&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1) 安装httpd服务与php&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo yum -y install httpd php&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 安装其他依赖&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo yum -y install rrdtool perl-rrdtool rrdtool-devel&lt;br/&gt;[atguigu@hadoop102 flume]$ sudo yum -y install apr-devel&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3) 安装ganglia&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo rpm -Uvh &lt;span class=&quot;hljs-symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;hljs-regexp&quot;&gt;/dl.fedoraproject.org/pub&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/epel/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;/x86_64/epel-release-&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;.noarch.rpm&lt;br/&gt;[atguigu@hadoop102 flume]$ sudo yum -y install ganglia-gmetad&lt;br/&gt;[atguigu@hadoop102 flume]$ sudo yum -y install ganglia-web&lt;br/&gt;[atguigu@hadoop102 flume]$ sudo yum install -y ganglia-gmond&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4) 修改配置文件/etc/httpd/conf.d/ganglia.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo vim /etc/httpd/conf.d/ganglia.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改为如下的配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;conf language-conf&quot;&gt;# Ganglia monitoring system php web frontend&lt;br/&gt;Alias /ganglia /usr/share/ganglia&lt;br/&gt;&amp;lt;Location /ganglia&amp;gt;&lt;br/&gt;Order deny,allow&lt;br/&gt;Deny from all&lt;br/&gt;Allow from all&lt;br/&gt;# Allow from 127.0.0.1&lt;br/&gt;# Allow from ::1&lt;br/&gt;# Allow from .example.com&lt;br/&gt;&amp;lt;/Location&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5) 修改配置文件/etc/ganglia/gmetad.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo vim /etc/ganglia/gmetad.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;conf language-conf&quot;&gt;data_source &quot;hadoop102&quot; 192.168.25.102&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6) 修改配置文件/etc/ganglia/gmond.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo vim /etc/ganglia/gmond.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;11&quot;&gt;cluster {&lt;br/&gt;name = &quot;hadoop102&quot;&lt;br/&gt;owner = &quot;unspecified&quot;&lt;br/&gt;latlong = &quot;unspecified&quot;&lt;br/&gt;url = &quot;unspecified&quot;&lt;br/&gt;}&lt;p&gt;udp_send_channel {&lt;br/&gt;#bind_hostname = yes # Highly recommended, soon to be default.&lt;br/&gt;# This option tells gmond to use a source address&lt;br/&gt;# that resolves to the machine's hostname.  Without&lt;br/&gt;# this, the metrics may appear to come from any&lt;br/&gt;# interface and the DNS names associated with&lt;br/&gt;# those IPs will be used to create the RRDs.&lt;br/&gt;# mcast_join = 239.2.11.71&lt;br/&gt;host = 192.168.25.102&lt;br/&gt;port = 8649&lt;br/&gt;ttl = 1&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;udp_recv_channel {&lt;br/&gt;# mcast_join = 239.2.11.71&lt;br/&gt;port = 8649&lt;br/&gt;# bind = 239.2.11.71&lt;br/&gt;bind = 192.168.25.102&lt;br/&gt;retry_bind = true&lt;br/&gt;# Size of the UDP buffer. If you are handling lots of metrics you really&lt;br/&gt;# should bump it up to e.g. 10MB or even higher.&lt;br/&gt;# buffer = 10485760&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7) 修改配置文件/etc/selinux/config&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo vim /etc/selinux/config&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;conf language-conf&quot;&gt;# This file controls the state of SELinux on the system.&lt;br/&gt;# SELINUX= can take one of these three values:&lt;br/&gt;#     enforcing - SELinux security policy is enforced.&lt;br/&gt;#     permissive - SELinux prints warnings instead of enforcing.&lt;br/&gt;#     disabled - No SELinux policy is loaded.&lt;br/&gt;# SELINUX=enforcing&lt;br/&gt;SELINUX=disabled&lt;br/&gt;# SELINUXTYPE= can take one of these two values:&lt;br/&gt;#     targeted - Targeted processes are protected,&lt;br/&gt;#     mls - Multi Level Security protection.&lt;br/&gt;SELINUXTYPE=targeted&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;尖叫提示：&lt;/code&gt;selinux本次生效关闭必须重启，如果此时不想重启，可以临时生效之：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo setenforce &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5) 启动ganglia&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ sudo service httpd start&lt;br/&gt;[atguigu@hadoop102 flume]$ sudo service gmetad start&lt;br/&gt;[atguigu@hadoop102 flume]$ sudo service gmond start&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6) 打开网页浏览ganglia页面&lt;br/&gt;http://192.168.25.102/ganglia&lt;br/&gt;&lt;code&gt;尖叫提示：&lt;/code&gt;如果完成以上操作依然出现权限不足错误，请修改/var/lib/ganglia目录的权限：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;atguigu@hadoop102 flume&lt;/span&gt;]$ sudo chmod -R &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt; /&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;/lib/ganglia&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h42flume&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2 操作Flume测试监控&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1) 修改/opt/module/flume/conf目录下的flume-env.sh配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sh language-sh hljs bash&quot;&gt;JAVA_OPTS=&lt;span class=&quot;hljs-string&quot;&gt;&quot;-Dflume.monitoring.type=ganglia&lt;br/&gt;-Dflume.monitoring.hosts=192.168.25.102:8649&lt;br/&gt;-Xms100m&lt;br/&gt;-Xmx200m&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 启动Flume任务&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs diff&quot;&gt;[atguigu@hadoop102 flume]$ bin/flume-ng agent \&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;--conf conf/ \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;--name a1 \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;--conf-file job/flume-telnet-logger.conf \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-Dflume.root.logger==INFO,console \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-Dflume.monitoring.type=ganglia \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-deletion&quot;&gt;-Dflume.monitoring.hosts=192.168.25.102:8649&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3) 发送数据观察ganglia监测图&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ telnet localhost &lt;span class=&quot;hljs-number&quot;&gt;44444&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;样式如图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOW4Fx.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图例说明：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWcy4.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h5flumemysqlsource&quot;&gt;&lt;span&gt;&lt;strong&gt;第5章 Flume高级之自定义MySQLSource&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h51source&quot;&gt;&lt;span&gt;&lt;strong&gt;5.1 自定义Source说明&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;  &lt;code&gt;Source是负责接收数据到Flume Agent的组件&lt;/code&gt;。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、&lt;code&gt;exec&lt;/code&gt;、jms、&lt;code&gt;spooling directory&lt;/code&gt;、netcat、sequence generator、syslog、http、legacy。官方提供的source类型已经很多，但是有时候并不能满足实际开发当中的需求，此时我们就需要根据实际需求自定义某些Source。&lt;br/&gt;  如：实时监控MySQL，从MySQL中获取数据传输到HDFS或者其他存储框架，所以此时需要我们自己实现MySQLSource。&lt;br/&gt;  官方也提供了自定义source的接口：&lt;br/&gt;  官网说明：https://flume.apache.org/FlumeDeveloperGuide.html#source&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;h52mysqlsource&quot;&gt;&lt;span&gt;&lt;strong&gt;5.2 自定义MySQLSource组成&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWIfK.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h53mysqlsource&quot;&gt;&lt;span&gt;&lt;strong&gt;5.3 自定义MySQLSource步骤&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  根据官方说明自定义MySqlSource需要继承AbstractSource类并实现Configurable和PollableSource接口。&lt;br/&gt;  实现相应方法：&lt;br/&gt;    getBackOffSleepIncrement() // 暂不用&lt;br/&gt;    getMaxBackOffSleepInterval() // 暂不用&lt;br/&gt;    configure(Context context) // 初始化context&lt;br/&gt;    process() // 获取数据（从MySql获取数据，业务处理比较复杂，所以我们定义一个专门的类SQLSourceHelper来处理跟MySql的交互），封装成Event并写入Channel，这个方法被循环调用）&lt;br/&gt;    stop() // 关闭相关的资源&lt;/p&gt;
&lt;h3 id=&quot;h54&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4 代码实现&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h541pom&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4.1 导入pom依赖&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.flume&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;flume-ng-core&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.7.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.1.27&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h542&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4.2 添加配置信息&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;在ClassPath下添加jdbc.properties和log4j. properties&lt;br/&gt;jdbc.properties:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;properties language-properties&quot;&gt;dbDriver=com.mysql.jdbc.Driver&lt;br/&gt;dbUrl=jdbc:mysql://hadoop102:3306/mysqlsource?useUnicode=true&amp;amp;characterEncoding=utf-8&lt;br/&gt;dbUser=root&lt;br/&gt;dbPassword=123456&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;log4j. properties:&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;properties language-properties&quot; readability=&quot;5&quot;&gt;#--------console-----------&lt;br/&gt;log4j.rootLogger=info,myconsole,myfile&lt;br/&gt;log4j.appender.myconsole=org.apache.log4j.ConsoleAppender&lt;br/&gt;log4j.appender.myconsole.layout=org.apache.log4j.SimpleLayout&lt;br/&gt;#log4j.appender.myconsole.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n&lt;p&gt;#log4j.rootLogger=error,myfile&lt;br/&gt;log4j.appender.myfile=org.apache.log4j.DailyRollingFileAppender&lt;br/&gt;log4j.appender.myfile.File=/tmp/flume.log&lt;br/&gt;log4j.appender.myfile.layout=org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.myfile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h543sqlsourcehelper&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4.3 SQLSourceHelper&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）属性说明：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWWwR.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;2）方法说明：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOW5Y6.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）代码分析：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWfT1.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;4）代码实现：
&lt;pre readability=&quot;106&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;206&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.Context;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.conf.ConfigurationException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.sql.*;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Properties;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SQLSourceHelper&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Logger LOG = LoggerFactory.getLogger(SQLSourceHelper.class);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; runQueryDelay,  &lt;br/&gt;startFrom,          &lt;br/&gt;currentIndex,       &lt;br/&gt;recordSixe = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,     &lt;br/&gt;maxRow;             &lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String table,       &lt;br/&gt;columnsToSelect,    &lt;br/&gt;customQuery,        &lt;br/&gt;query,              &lt;br/&gt;defaultCharsetResultSet;    &lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Context context;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; DEFAULT_QUERY_DELAY = &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; DEFAULT_START_VALUE = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; DEFAULT_MAX_ROWS = &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String DEFAULT_COLUMNS_SELECT = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String DEFAULT_CHARSET_RESULTSET = &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Connection conn = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; PreparedStatement ps = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String connectionURL, connectionUserName, connectionPassword;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {&lt;/p&gt;&lt;p&gt;Properties p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Properties();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;p.load(SQLSourceHelper.class.getClassLoader().getResourceAsStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc.properties&quot;&lt;/span&gt;));&lt;br/&gt;connectionURL = p.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dbUrl&quot;&lt;/span&gt;);&lt;br/&gt;connectionUserName = p.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dbUser&quot;&lt;/span&gt;);&lt;br/&gt;connectionPassword = p.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dbPassword&quot;&lt;/span&gt;);&lt;br/&gt;Class.forName(p.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dbDriver&quot;&lt;/span&gt;));&lt;/p&gt;&lt;p&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException | ClassNotFoundException e) {&lt;br/&gt;LOG.error(e.toString());&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Connection &lt;span class=&quot;hljs-title&quot;&gt;InitConnection&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String url, String user, String pw)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;/p&gt;&lt;p&gt;Connection conn = DriverManager.getConnection(url, user, pw);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (conn == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SQLException();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; conn;&lt;/p&gt;&lt;p&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;SQLSourceHelper(Context context) &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ParseException {&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.context = context;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.columnsToSelect = context.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;columns.to.select&quot;&lt;/span&gt;, DEFAULT_COLUMNS_SELECT);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.runQueryDelay = context.getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;run.query.delay&quot;&lt;/span&gt;, DEFAULT_QUERY_DELAY);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.startFrom = context.getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;start.from&quot;&lt;/span&gt;, DEFAULT_START_VALUE);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.defaultCharsetResultSet = context.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;default.charset.resultset&quot;&lt;/span&gt;, DEFAULT_CHARSET_RESULTSET);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.table = context.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;table&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.customQuery = context.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;custom.query&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;connectionURL = context.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection.url&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;connectionUserName = context.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection.user&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;connectionPassword = context.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection.password&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;conn = InitConnection(connectionURL, connectionUserName, connectionPassword);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;checkMandatoryProperties();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;currentIndex = getStatusDBIndex(startFrom);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;query = buildQuery();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkMandatoryProperties&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (table == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigurationException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;property table not set&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (connectionURL == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigurationException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection.url property not set&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (connectionUserName == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigurationException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection.user property not set&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (connectionPassword == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigurationException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection.password property not set&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;buildQuery&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;String sql = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;currentIndex = getStatusDBIndex(startFrom);&lt;br/&gt;LOG.info(currentIndex + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (customQuery == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;sql = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT &quot;&lt;/span&gt; + columnsToSelect + &lt;span class=&quot;hljs-string&quot;&gt;&quot; FROM &quot;&lt;/span&gt; + table;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;sql = customQuery;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;StringBuilder execSql = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(sql);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!sql.contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;where&quot;&lt;/span&gt;)) {&lt;br/&gt;execSql.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot; where &quot;&lt;/span&gt;);&lt;br/&gt;execSql.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;).append(currentIndex);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; execSql.toString();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; length = execSql.toString().length();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; execSql.toString().substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length - String.valueOf(currentIndex).length()) + currentIndex;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;List&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt; executeQuery() {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;customQuery = buildQuery();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;List&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt; results = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ps == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;ps = conn.prepareStatement(customQuery);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;ResultSet result = ps.executeQuery(customQuery);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (result.next()) {&lt;/p&gt;&lt;p&gt;&lt;br/&gt;List&amp;lt;Object&amp;gt; row = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= result.getMetaData().getColumnCount(); i++) {&lt;br/&gt;row.add(result.getObject(i));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;results.add(row);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;LOG.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;execSql:&quot;&lt;/span&gt; + customQuery + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\nresultSize:&quot;&lt;/span&gt; + results.size());&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {&lt;br/&gt;LOG.error(e.toString());&lt;/p&gt;&lt;p&gt;&lt;br/&gt;conn = InitConnection(connectionURL, connectionUserName, connectionPassword);&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;List&amp;lt;String&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getAllRows&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt; queryResult)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;List&amp;lt;String&amp;gt; allRows = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (queryResult == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || queryResult.isEmpty())&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; allRows;&lt;/p&gt;&lt;p&gt;StringBuilder row = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (List&amp;lt;Object&amp;gt; rawRow : queryResult) {&lt;/p&gt;&lt;p&gt;Object value = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object aRawRow : rawRow) {&lt;/p&gt;&lt;p&gt;value = aRawRow;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;row.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;row.append(aRawRow.toString()).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;allRows.add(row.toString());&lt;br/&gt;row = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; allRows;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateOffset2DB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String sql = &lt;span class=&quot;hljs-string&quot;&gt;&quot;insert into flume_meta(source_tab,currentIndex) VALUES('&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.table + &lt;span class=&quot;hljs-string&quot;&gt;&quot;','&quot;&lt;/span&gt; + (recordSixe += size)&lt;br/&gt;+ &lt;span class=&quot;hljs-string&quot;&gt;&quot;') on DUPLICATE key update source_tab=values(source_tab),currentIndex=values(currentIndex)&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;LOG.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;updateStatus Sql:&quot;&lt;/span&gt; + sql);&lt;/p&gt;&lt;p&gt;execSql(sql);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execSql&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String sql)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;ps = conn.prepareStatement(sql);&lt;/p&gt;&lt;p&gt;LOG.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exec::&quot;&lt;/span&gt; + sql);&lt;/p&gt;&lt;p&gt;ps.execute();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer &lt;span class=&quot;hljs-title&quot;&gt;getStatusDBIndex&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; startFrom)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String dbIndex = queryOne(&lt;span class=&quot;hljs-string&quot;&gt;&quot;select currentIndex from flume_meta where source_tab='&quot;&lt;/span&gt; + table + &lt;span class=&quot;hljs-string&quot;&gt;&quot;'&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dbIndex != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Integer.parseInt(dbIndex);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; startFrom;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;queryOne&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String sql)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;ResultSet result = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;ps = conn.prepareStatement(sql);&lt;br/&gt;result = ps.executeQuery();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (result.next()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result.getString(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;ps.close();&lt;br/&gt;conn.close();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getCurrentIndex&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; currentIndex;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setCurrentIndex&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; newValue)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;currentIndex = newValue;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getRunQueryDelay&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; runQueryDelay;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;String &lt;span class=&quot;hljs-title&quot;&gt;getQuery&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; query;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;String &lt;span class=&quot;hljs-title&quot;&gt;getConnectionURL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; connectionURL;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isCustomQuerySet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (customQuery != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;Context &lt;span class=&quot;hljs-title&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; context;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getConnectionUserName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; connectionUserName;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getConnectionPassword&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; connectionPassword;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;String &lt;span class=&quot;hljs-title&quot;&gt;getDefaultCharsetResultSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; defaultCharsetResultSet;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h544mysqlsource&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4.4 MySQLSource&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;pre readability=&quot;31&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;56&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.Context;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.Event;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.EventDeliveryException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.PollableSource;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.conf.Configurable;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.event.SimpleEvent;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.flume.source.AbstractSource;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SQLSource&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractSource&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Configurable&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;PollableSource&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Logger LOG = LoggerFactory.getLogger(SQLSource.class);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SQLSourceHelper sqlSourceHelper;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getBackOffSleepIncrement&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getMaxBackOffSleepInterval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;sqlSourceHelper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SQLSourceHelper(context);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Status &lt;span class=&quot;hljs-title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; EventDeliveryException &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;List&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt; result = sqlSourceHelper.executeQuery();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;List&amp;lt;Event&amp;gt; events = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;HashMap&amp;lt;String, String&amp;gt; header = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!result.isEmpty()) {&lt;/p&gt;&lt;p&gt;List&amp;lt;String&amp;gt; allRows = sqlSourceHelper.getAllRows(result);&lt;/p&gt;&lt;p&gt;Event event = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String row : allRows) {&lt;br/&gt;event = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleEvent();&lt;br/&gt;event.setBody(row.getBytes());&lt;br/&gt;event.setHeaders(header);&lt;br/&gt;events.add(event);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.getChannelProcessor().processEventBatch(events);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;sqlSourceHelper.updateOffset2DB(result.size());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Thread.sleep(sqlSourceHelper.getRunQueryDelay());&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Status.READY;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;LOG.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error procesing row&quot;&lt;/span&gt;, e);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Status.BACKOFF;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;LOG.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stopping sql source {} ...&quot;&lt;/span&gt;, getName());&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;sqlSourceHelper.close();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.stop();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h55&quot;&gt;&lt;span&gt;&lt;strong&gt;5.5 测试&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h551jar&quot;&gt;&lt;span&gt;&lt;strong&gt;5.5.1 Jar包准备&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1) 将MySql驱动包放入Flume的lib目录下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 flume]$ cp \&lt;br/&gt;/opt/sorfware/mysql-libs/mysql-connector-java-&lt;span class=&quot;hljs-number&quot;&gt;5.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;/mysql-connector-java-&lt;span class=&quot;hljs-number&quot;&gt;5.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;-bin.jar \&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;flume&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;lib&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 打包项目并将Jar包放入Flume的lib目录下&lt;/p&gt;
&lt;h4 id=&quot;h552&quot;&gt;&lt;span&gt;&lt;strong&gt;5.5.2 配置文件准备&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）创建配置文件并打开&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 job]$ touch mysql.conf&lt;br/&gt;[atguigu@hadoop102 job]$ vim mysql.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2）添加如下内容&lt;/p&gt;
&lt;pre readability=&quot;9&quot;&gt;
&lt;code class=&quot;conf language-conf&quot; readability=&quot;12&quot;&gt;a1.sources = r1&lt;br/&gt;a1.sinks = k1&lt;br/&gt;a1.channels = c1&lt;p&gt;# Describe/configure the source&lt;br/&gt;a1.sources.r1.type = com.atguigu.source.SQLSource  &lt;br/&gt;a1.sources.r1.connection.url = jdbc:mysql://192.168.9.102:3306/mysqlsource&lt;br/&gt;a1.sources.r1.connection.user = root  &lt;br/&gt;a1.sources.r1.connection.password = 000000  &lt;br/&gt;a1.sources.r1.table = student  &lt;br/&gt;a1.sources.r1.columns.to.select = *  &lt;br/&gt;#a1.sources.r1.incremental.column.name = id  &lt;br/&gt;#a1.sources.r1.incremental.value = 0 &lt;br/&gt;a1.sources.r1.run.query.delay=5000&lt;/p&gt;&lt;p&gt;# Describe the sink&lt;br/&gt;a1.sinks.k1.type = logger&lt;/p&gt;&lt;p&gt;# Describe the channel&lt;br/&gt;a1.channels.c1.type = memory&lt;br/&gt;a1.channels.c1.capacity = 1000&lt;br/&gt;a1.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# Bind the source and sink to the channel&lt;br/&gt;a1.sources.r1.channels = c1&lt;br/&gt;a1.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h553mysql&quot;&gt;&lt;span&gt;&lt;strong&gt;5.5.3 MySql表准备&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1) 创建MySqlSource数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql language-sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DATABASE&lt;/span&gt; mysqlsource；&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 在MySqlSource数据库下创建数据表Student和元数据表Flume_meta&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql language-sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`student`&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;,&lt;br/&gt;PRIMARY &lt;span class=&quot;hljs-keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt;)&lt;br/&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`flume_meta`&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;`source_tab`&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;`currentIndex`&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;,&lt;br/&gt;PRIMARY &lt;span class=&quot;hljs-keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;`source_tab`&lt;/span&gt;)&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3)向数据表中添加数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;1 zhangsan&lt;br/&gt;2 lisi&lt;br/&gt;3 wangwu&lt;br/&gt;4 zhaoliu&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h554&quot;&gt;&lt;span&gt;&lt;strong&gt;5.5.4测试并查看结果&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1)任务执行&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 flume]$ bin&lt;span class=&quot;hljs-regexp&quot;&gt;/flume-ng agent --conf conf/&lt;/span&gt; --name a1 \&lt;br/&gt;--conf-file job/mysql.conf -Dflume.root.logger=INFO,&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2)结果展示，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWH6e.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h6&quot;&gt;&lt;span&gt;&lt;strong&gt;第6章 知识扩展&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h61&quot;&gt;&lt;span&gt;&lt;strong&gt;6.1 常见正则表达式语法&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWbOH.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h62&quot;&gt;&lt;span&gt;&lt;strong&gt;6.2 练习&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;案例需求：&lt;br/&gt;  1）flume-1监控hive.log日志，flume-1的数据传送给flume-2，flume-2将数据追加到本地文件，同时将数据传输到flume-3。&lt;br/&gt;  2）flume-4监控本地另一个自己创建的文件any.txt，并将数据传送给flume-3。&lt;br/&gt;  3）flume-3将汇总数据写入到HDFS。&lt;br/&gt;请先画出结构图，再开始编写任务脚本。&lt;/p&gt;
&lt;h2 id=&quot;h7flume&quot;&gt;&lt;span&gt;&lt;strong&gt;第7章 Flume企业真实面试题（重点）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h71flume&quot;&gt;&lt;span&gt;&lt;strong&gt;7.1 你是如何实现Flume数据传输的监控的？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  使用第三方框架Ganglia实时监控Flume。&lt;/p&gt;
&lt;h3 id=&quot;h72flumesourcesinkchannelsource&quot;&gt;&lt;span&gt;&lt;strong&gt;7.2 Flume的Source，Sink，Channel的作用？你们Source是什么类型？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、作用&lt;/strong&gt;&lt;br/&gt;（1）Source组件是专门用来&lt;code&gt;收集数据&lt;/code&gt;的，可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。&lt;br/&gt;（2）Channel组件对采集到的&lt;code&gt;数据进行缓存&lt;/code&gt;，可以存放在Memory或File中。&lt;br/&gt;（3）Sink组件是用于&lt;code&gt;把数据发送到目的地的组件&lt;/code&gt;，目的地包括Hdfs、Logger、avro、thrift、ipc、file、Hbase、solr、自定义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、我公司采用的Source类型为：&lt;/strong&gt;&lt;br/&gt;（1）监控后台日志：exec&lt;br/&gt;（2）监控后台产生日志的端口：netcat&lt;br/&gt;　　　　Exec 　　 spooldir&lt;/p&gt;
&lt;h3 id=&quot;h73flumechannelselectors&quot;&gt;&lt;span&gt;&lt;strong&gt;7.3 Flume的Channel Selectors&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOWTSO.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h74flume&quot;&gt;&lt;span&gt;&lt;strong&gt;7.4 Flume参数调优&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Source&lt;/strong&gt;&lt;br/&gt;  增加 Source个（使用 Tair Dir Source 时可增加 FileGroups 个数）可以增大 Source 的读取数据的能力。例如：当某一个目录产生的文件过多时需要将这个文件目录拆分成多个文件目录，同时配置好多个 Source 以保证 Source 有足够的能力获取到新产生的数据。&lt;br/&gt;  batchSize 参数决定 Source 一次批量运输到 Channel 的 Event 条数，适当调大这个参数可以提高 Source 搬运 Event 到 Channel 时的性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Channel&lt;/strong&gt;&lt;br/&gt;  type 选择 memory 时 Channel 的&lt;code&gt;性能&lt;/code&gt;最好，但是如果 Flume 进程意外挂掉可能会丢失数据。type 选择 file 时 Channel 的&lt;code&gt;容错性&lt;/code&gt;更好，但是性能上会比 memory Channel 差。&lt;br/&gt;  使用 file Channel 时 dataDirs 配置多个不同盘下的目录可以提高性能。&lt;br/&gt;  Capacity 参数决定 Channel 可容纳最大的 Event 条数。transactionCapacity 参数决定每次 Source 往 Channel 里面写的最大 Event 条数和每次 Sink 从 Channel 里面读的最大 Event 条数。transactionCapacity 需要大于 Source 和 Sink 的 batchSize 参数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Sink&lt;/strong&gt;&lt;br/&gt;  增加 Sink 的个数可以增加 Sink 消费 Event 的能力。Sink 也不是越多越好够用就行，过多的 Sink 会占用系统资源，造成系统资源不必要的浪费。&lt;br/&gt;  batchSize 参数决定 Sink 一次批量从 Channel 读取的 Event 条数，适当调大这个参数可以提高 Sink 从 Channel 搬出 Event 的性能。&lt;/p&gt;
&lt;h3 id=&quot;h75flume&quot;&gt;&lt;span&gt;&lt;strong&gt;7.5 Flume的事务机制&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  Flume的事务机制（类似数据库的事务机制）：Flume 使用两个独立的事务分别负责从 Soucrce 到 Channel，以及从 Channel 到 Sink 的事件传递。比如 spooling directory source 为文件的每一行创建一个事件，一旦事务中所有的事件全部传递到 Channel 且提交成功，那么 Soucrce 就将该文件标记为完成。同理，事务以类似的方式处理从 Channel 到 Sink 的传递过程，如果因为某种原因使得事件无法记录，那么事务将会回滚。且所有的事件都会保持到 Channel 中，等待重新传递。&lt;br/&gt;  如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/04/kOW7lD.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h76flume&quot;&gt;&lt;span&gt;&lt;strong&gt;7.6 Flume采集数据会丢失吗？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  不会，Channel存储可以存储在File中，数据传输自身有事务。&lt;br/&gt;  但是如果使用内存存储的话，掉电可能会丢失数据。&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 07:43:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>第1章 Flume概述1.1 Flume定义1.2 Flume组成架构1.2.1 Agent1.2.2 Source1.2.3 Channel1.2.4 Sink1.2.5 Event1.3 Flum</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10471066.html</dc:identifier>
</item>
<item>
<title>Java岗 面试考点精讲（基础篇01期） - 后端技术精选</title>
<link>http://www.cnblogs.com/javazhiyin/p/10470712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/javazhiyin/p/10470712.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;即将到来金三银四人才招聘的高峰期，渴望跳槽的朋友肯定跟我一样四处找以往的面试题，但又感觉找的又不完整，在这里我将把我所见到的题目做一总结，并尽力将答案术语化、标准化。预祝大家面试顺利。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;术语会让你的面试更有说服力，让你感觉更踏实，建议大家多记背点术语。&lt;/p&gt;
&lt;h3&gt;1. 简单说下什么是跨平台&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;术语：操作系统指令集、屏蔽系统之间的差异&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于各种操作系统所支持的指令集不是完全一致，所以在操作系统之上加个虚拟机可以来提供统一接口，屏蔽系统之间的差异。&lt;/p&gt;
&lt;h3&gt;2. Java有几种基本数据类型&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;有八种基本数据类型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;字节&lt;/th&gt;
&lt;th width=&quot;20&quot;&gt;默认值&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;0.0f&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;0.0d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;'u0000'&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td height=&quot;0&quot;&gt;boolean&lt;/td&gt;
&lt;td height=&quot;0&quot;&gt;4&lt;/td&gt;
&lt;td width=&quot;89.33333333333333&quot; height=&quot;0&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;各自占用几字节也记一下。&lt;/p&gt;
&lt;h3&gt;3. 面向对象特征&lt;/h3&gt;
&lt;p&gt;面向对象的编程语言有封装、继承 、抽象、多态等4个主要的特征。&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;封装： 把描述一个对象的属性和行为的代码封装在一个模块中，也就是一个类中，属性用变量定义，行为用方法进行定义，方法可以直接访问同一个对象中的属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;抽象： 把现实生活中的对象抽象为类。分为过程抽象和数据抽象&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;数据抽象 --&amp;gt;鸟有翅膀,羽毛等(类的属性)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;过程抽象 --&amp;gt;鸟会飞,会叫(类的方法)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;继承：子类继承父类的特征和行为。子类可以有父类的方法，属性（非private）。子类也可以对父类进行扩展，也可以重写父类的方法。缺点就是提高代码之间的耦合性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;多态： 多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定(比如：向上转型，只有运行才能确定其对象属性)。方法覆盖和重载体现了多态性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;4. 为什么要有包装类型&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;术语：让基本类型也具有对象的特征&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;基本类型&lt;/th&gt;
&lt;th width=&quot;94.33333333333333&quot;&gt;包装器类型&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;boolean&lt;/td&gt;
&lt;td width=&quot;108.33333333333333&quot;&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;char&lt;/td&gt;
&lt;td width=&quot;122.33333333333334&quot;&gt;Character&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int&lt;/td&gt;
&lt;td width=&quot;136.33333333333334&quot;&gt;Integer&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;
&lt;td width=&quot;150.33333333333334&quot;&gt;Byte&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;short&lt;/td&gt;
&lt;td width=&quot;164.33333333333334&quot;&gt;Short&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;long&lt;/td&gt;
&lt;td width=&quot;178.33333333333334&quot;&gt;Long&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;float&lt;/td&gt;
&lt;td width=&quot;192.33333333333334&quot;&gt;Float&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;double&lt;/td&gt;
&lt;td width=&quot;206.33333333333334&quot;&gt;Double&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;为了让基本类型也具有对象的特征，就出现了包装类型（如我们在使用集合类型Collection时就一定要使用包装类型而非基本类型）因为容器都是装object的，这是就需要这些基本类型的包装器类了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;自动装箱：&lt;code&gt;new Integer(6);&lt;/code&gt;，底层调用:&lt;code&gt;Integer.valueOf(6)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;自动拆箱: &lt;code&gt;int i = new Integer(6);&lt;/code&gt;，底层调用&lt;code&gt;i.intValue();&lt;/code&gt;方法实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Integer i  = 6&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; Integer j = 6&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; System.out.println(i==j);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;答案在下面这段代码中找：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer valueOf(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (i &amp;gt;= IntegerCache.low &amp;amp;&amp;amp; i &amp;lt;=&lt;span&gt; IntegerCache.high)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; IntegerCache.cache[i + (-&lt;span&gt;IntegerCache.low)];
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Integer(i);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;二者的区别：&lt;/h5&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;声明方式不同：基本类型不使用new关键字，而包装类型需要使用new关键字来在&lt;strong&gt;堆中分配存储空间&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;存储方式及位置不同：基本类型是直接将变量值存储在栈中，而包装类型是将对象放在堆中，然后通过引用来使用；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;初始值不同：基本类型的初始值如int为0，boolean为false，而包装类型的初始值为null；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;使用方式不同：基本类型直接赋值直接使用就好，而包装类型在集合如Collection、Map时会使用到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;5. ==和equals区别&lt;/h3&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;==&lt;/code&gt;较的是两个引用在内存中指向的是不是同一对象（即同一内存空间），也就是说在内存空间中的存储位置是否一致。如果两个对象的引用相同时（指向同一对象时），“==”操作符返回true，否则返回flase。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;equals&lt;/code&gt;用来比较&lt;strong&gt;某些特征&lt;/strong&gt;是否一样。我们平时用的String类等的equals方法都是重写后的，实现比较两个对象的内容是否相等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们来看看String重写的equals方法：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;它不止判断了内存地址，还增加了字符串是否相同的比较。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object anObject) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断内存地址是否相同&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; ==&lt;span&gt; anObject) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断参数类型是否是String类型&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (anObject &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; String) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 强转&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         String anotherString =&lt;span&gt; (String)anObject;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; n =&lt;span&gt; value.length;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断两个字符串长度是否相等&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (n ==&lt;span&gt; anotherString.value.length) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;char&lt;/span&gt; v1[] =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;char&lt;/span&gt; v2[] =&lt;span&gt; anotherString.value;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 一一比较 字符是否相同&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (n-- != 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (v1[i] !=&lt;span&gt; v2[i])
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;6. String、StringBuffer和StringBuilder区别&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;java中String、StringBuffer、StringBuilder是编程中经常使用的字符串类，他们之间的区别也是经常在面试中会问到的问题。现在总结一下，看看他们的不同与相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt; &lt;/h5&gt;
&lt;h5&gt;1. 数据可变和不可变&lt;/h5&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt;底层使用一个不可变的字符数组&lt;code&gt;private final char value[];&lt;/code&gt;所以它内容不可变。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt;和&lt;code&gt;StringBuilder&lt;/code&gt;都继承了&lt;code&gt;AbstractStringBuilder&lt;/code&gt;底层使用的是可变字符数组：&lt;code&gt;char[] value;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h5&gt;2. 线程安全&lt;/h5&gt;
&lt;p&gt;通过他们的&lt;code&gt;append()&lt;/code&gt;方法来看，&lt;code&gt;StringBuffer&lt;/code&gt;是有同步锁，而&lt;code&gt;StringBuilder&lt;/code&gt;没有：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; StringBuffer append(Object obj) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     toStringCache = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.append(String.valueOf(obj));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}&lt;br/&gt;&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StringBuilder append(String str) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.append(str);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt; &lt;/h5&gt;
&lt;h5&gt;3. 相同点&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;StringBuilder&lt;/code&gt;与&lt;code&gt;StringBuffer&lt;/code&gt;有公共父类&lt;code&gt;AbstractStringBuilder&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最后，操作可变字符串速度：&lt;code&gt;StringBuilder &amp;gt; StringBuffer &amp;gt; String&lt;/code&gt;，这个答案就显得不足为奇了。&lt;/p&gt;
&lt;h3&gt;7. 讲一下Java中的集合&lt;/h3&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Collection下：List系(有序、元素允许重复)和Set系(无序、元素不重复)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;set根据equals和hashcode判断，一个对象要存储在Set中，必须重写equals和hashCode方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Map下：HashMap线程不同步；TreeMap线程同步&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Collection系列和Map系列：Map是对Collection的补充，两个没什么关系&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;8. ArrayList和LinkedList区别？&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;之前专门有写过ArrayList和LinkedList源码的文章。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote readability=&quot;0.094594594594594&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.javazhiyin.com/go?url=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&amp;amp;mid=2247487595&amp;amp;idx=1&amp;amp;sn=66ddcba9714ab9c38d76db14f5c22558&amp;amp;chksm=ebd62f47dca1a651a2eca99cb583c02ae8d6dadf50623d27122aea7761e058d8dc5b2e5cacc6&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;面试必会之ArrayList源码分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.javazhiyin.com/go?url=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&amp;amp;mid=2247487599&amp;amp;idx=1&amp;amp;sn=7b7b1694929079f3d30a380853b5eb8c&amp;amp;chksm=ebd62f43dca1a655f651eda28672df5ae05b3738eed1a4747b99146ee94c3f556c1c03ad8980&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;面试必会之LinkedList源码分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;9. ConcurrentModificationException异常出现的原因&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)  {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         ArrayList&amp;lt;Integer&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         list.add(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Iterator&amp;lt;Integer&amp;gt; iterator =&lt;span&gt; list.iterator();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(iterator.hasNext()){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             Integer integer =&lt;span&gt; iterator.next();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(integer==2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                list.remove(integer);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行上段代码是有问题的，会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：调用&lt;code&gt;list.remove()&lt;/code&gt;方法导致&lt;code&gt;modCount&lt;/code&gt;和&lt;code&gt;expectedModCount&lt;/code&gt;的值不一致。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; checkForComodification() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (modCount !=&lt;span&gt; expectedModCount)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConcurrentModificationException();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;：在迭代器中如果要删除元素的话，需要调用&lt;code&gt;Iterator&lt;/code&gt;类的&lt;code&gt;remove&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)  {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         ArrayList&amp;lt;Integer&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         list.add(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Iterator&amp;lt;Integer&amp;gt; iterator =&lt;span&gt; list.iterator();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(iterator.hasNext()){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             Integer integer =&lt;span&gt; iterator.next();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(integer==2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 iterator.remove();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意这个地方&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;10. HashMap和HashTable、ConcurrentHashMap区别？&lt;/h3&gt;
&lt;p&gt;相同点:&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;HashMap和Hashtable都实现了Map接口&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;都可以存储key-value数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;不同点：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;HashMap可以把null作为key或value，HashTable不可以&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;HashMap线程不安全，效率高。HashTable线程安全，效率低。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;什么是fail-fast?&lt;br/&gt;就是最快的时间能把错误抛出而不是让程序执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt; &lt;/h5&gt;
&lt;h5&gt;10.2 如何保证线程安全又效率高？&lt;/h5&gt;
&lt;p&gt;Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap将整个Map分为N个segment(类似HashTable)，可以提供相同的线程安全，但是效率提升N倍，默认N为16。&lt;/p&gt;
&lt;h5&gt;10.3 我们能否让HashMap同步？&lt;/h5&gt;
&lt;p&gt;HashMap可以通过下面的语句进行同步：&lt;br/&gt;&lt;code&gt;Map m = Collections.synchronizeMap(hashMap);&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;11. 拷贝文件的工具类使用字节流还是字符流&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;答案：字节流&lt;/p&gt;
&lt;h5&gt;11.1 什么是字节流，什么是字符流？&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;字节流：传递的是字节（二进制），&lt;/p&gt;
&lt;p&gt;字符流：传递的是字符&lt;/p&gt;
&lt;h5&gt;11.2 答案&lt;/h5&gt;
&lt;p&gt;我们并不支持下载的文件有没有包含字节流(图片、影像、音源)，所以考虑到通用性，我们会用字节流。&lt;/p&gt;
&lt;h3&gt;12. 线程创建方式&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这个之前自己做过总结，也算比较全面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;方法一：继承Thread类，作为线程对象存在（继承Thread对象）&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreatThreadDemo1 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     * 构造方法： 继承父类方法的Thread(String name)；方法
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CreatThreadDemo1(String name){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(name);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;interrupted()){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             System.out.println(getName()+&quot;线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 Thread.sleep(200&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         CreatThreadDemo1 d1 = &lt;span&gt;new&lt;/span&gt; CreatThreadDemo1(&quot;first&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         CreatThreadDemo1 d2 = &lt;span&gt;new&lt;/span&gt; CreatThreadDemo1(&quot;second&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        d1.start();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        d2.start();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         d1.interrupt();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;中断第一个线程&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;常规方法，不多做介绍了，interrupted方法，是来判断该线程是否被中断。（终止线程不允许用stop方法，该方法不会施放占用的资源。所以我们在设计程序的时候，要按照中断线程的思维去设计，就像上面的代码一样）。&lt;/p&gt;
&lt;h6&gt;让线程等待的方法&lt;/h6&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Thread.sleep(200); //线程休息2ms&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Object.wait()； //让线程进入等待，直到调用Object的notify或者notifyAll时，线程停止休眠&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;方法二：实现runnable接口，作为线程任务存在&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreatThreadDemo2 &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Runnable {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             System.out.println(&quot;线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将线程任务传给线程对象&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         Thread thread = &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CreatThreadDemo2());
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动线程&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        thread.start();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Runnable 只是来修饰线程所执行的任务，它不是一个线程对象。想要启动Runnable对象，必须将它放到一个线程对象里。&lt;/p&gt;
&lt;h4&gt;方法三：匿名内部类创建线程对象&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreatThreadDemo3 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建无参线程对象&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 System.out.println(&quot;线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }.start();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建带线程任务的线程对象&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 System.out.println(&quot;线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }).start();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建带线程任务并且重写run方法的线程对象&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 System.out.println(&quot;runnable run 线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 System.out.println(&quot;override run 线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }.start();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建带线程任务并且重写run方法的线程对象中，为什么只运行了Thread的run方法。我们看看Thread类的源码，&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;Java岗 面试考点精讲（基础篇01期）&quot; src=&quot;https://www.javazhiyin.com/wp-content/uploads/2019/03/java2-1551406989.png&quot; alt=&quot;Java岗 面试考点精讲（基础篇01期）&quot; data-original=&quot;https://www.javazhiyin.com/wp-content/uploads/2019/03/java2-1551406989.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;，我们可以看到Thread实现了Runnable接口，而Runnable接口里有一个run方法。&lt;br/&gt;所以，我们最终调用的重写的方法应该是Thread类的run方法。而不是Runnable接口的run方法。&lt;/p&gt;
&lt;h4&gt;方法四：创建带返回值的线程&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreatThreadDemo4 &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Callable {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ExecutionException, InterruptedException {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         CreatThreadDemo4 demo4 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CreatThreadDemo4();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;         FutureTask&amp;lt;Integer&amp;gt; task = &lt;span&gt;new&lt;/span&gt; FutureTask&amp;lt;Integer&amp;gt;(demo4); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FutureTask最终实现的是runnable接口&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         Thread thread = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(task);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        thread.start();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         System.out.println(&quot;我可以在这里做点别的业务逻辑...因为FutureTask是提前完成任务&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;拿出线程执行的返回值&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         Integer result =&lt;span&gt; task.get();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         System.out.println(&quot;线程中运算的结果为:&quot;+&lt;span&gt;result);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重写Callable接口的call方法&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object call() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         System.out.println(&quot;业务逻辑计算中...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         Thread.sleep(3000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;Callable接口介绍：
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; Callable&amp;lt;V&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;     * Computes a result, or throws an exception if unable to do so.
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; computed result
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception if unable to compute a result
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     V call() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;返回指定泛型的call方法。然后调用FutureTask对象的get方法得道call方法的返回值。&lt;/p&gt;
&lt;h4&gt;方法五：定时器Timer&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreatThreadDemo5 {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Timer timer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Timer();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         timer.schedule(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; TimerTask() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 System.out.println(&quot;定时器线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         },0,1000);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;延迟0，周期1s&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;方法六：线程池创建线程&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreatThreadDemo6 {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个具有10个线程的线程池&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         ExecutorService threadPool = Executors.newFixedThreadPool(10&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;long&lt;/span&gt; threadpoolUseTime =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0;i&amp;lt;10;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             threadPool.execute(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                @Override
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     System.out.println(Thread.currentThread().getName()+&quot;线程执行了...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;long&lt;/span&gt; threadpoolUseTime1 =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         System.out.println(&quot;多线程用时&quot;+(threadpoolUseTime1-&lt;span&gt;threadpoolUseTime));
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;销毁线程池&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        threadPool.shutdown();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         threadpoolUseTime =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;方法七：利用java8新特性 stream 实现并发&lt;/h4&gt;
&lt;p&gt;lambda表达式不懂的，可以看看我的java8新特性文章：&lt;/p&gt;
&lt;p&gt;java8-lambda：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;https://www.jianshu.com/p/3a08dc78a05f&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;java8-stream：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;https://www.jianshu.com/p/ea16d6712a00&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreatThreadDemo7 {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         List&amp;lt;Integer&amp;gt; values = Arrays.asList(10,20,30,40&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;parallel 平行的，并行的&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = values.parallelStream().mapToInt(p -&amp;gt; p*2&lt;span&gt;).sum();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        System.out.println(result);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;怎么证明它是并发处理呢&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         values.parallelStream().forEach(p-&amp;gt;&lt;span&gt; System.out.println(p));
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;200&lt;br/&gt;40&lt;br/&gt;10&lt;br/&gt;20&lt;br/&gt;30&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;怎么证明它是并发处理呢,他们并不是按照顺序输出的 。&lt;/p&gt;
&lt;h3&gt;文集介绍&lt;/h3&gt;
&lt;p&gt;该专题分为Java基础、计算机网络、操作系统、数据结构、算法精读、数据库面试题、框架面试题、服务高可用、分布式事务、分布式锁、消息队列等部分，尽量将全网的面试题一网打尽，方便大家手机阅读和收藏。&lt;/p&gt;
&lt;p&gt;每篇会精讲18个问题，数量可以商讨，评论区见。&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 06:56:00 +0000</pubDate>
<dc:creator>后端技术精选</dc:creator>
<og:description>即将到来金三银四人才招聘的高峰期，渴望跳槽的朋友肯定跟我一样四处找以往的面试题，但又感觉找的又不完整，在这里我将把我所见到的题目做一总结，并尽力将答案术语化、标准化。预祝大家面试顺利。 术语会让你的面</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/javazhiyin/p/10470712.html</dc:identifier>
</item>
<item>
<title>【Spring Boot】使用JDBC 获取相关的数据 - WangKane</title>
<link>http://www.cnblogs.com/primadonna/p/10470472.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/primadonna/p/10470472.html</guid>
<description>&lt;h2 id=&quot;什么是jdbc&quot;&gt;什么是JDBC&lt;/h2&gt;
&lt;p&gt;Java Database Connectivity 是一种用于执行SQL语句的Java API，与数据库建立连接、发送 操作数据库的语句并处理结果。&lt;/p&gt;
&lt;h2 id=&quot;spring-boot-使用-jdbc&quot;&gt;Spring Boot 使用 JDBC&lt;/h2&gt;
&lt;h3 id=&quot;增加依赖&quot;&gt;增加依赖&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;修改pom.xml：将dependecies 修改为如下两个&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;创建-customer.java-类&quot;&gt;创建 Customer.java 类&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.example.kane.Model;

public class Customer {
    private long id;
    private String firstName, lastName;

    public Customer(long id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return String.format(
                &quot;Customer[id=%d, firstName='%s', lastName='%s']&quot;,
                id, firstName, lastName);
    }

    // getters &amp;amp; setters omitted for brevity
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;修改application-类&quot;&gt;修改Application 类&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.example.kane;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.EnableScheduling;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.client.RestTemplate;

import com.example.kane.Model.Customer;

@SpringBootApplication
//@EnableScheduling
public class RestfulWebService1Application implements CommandLineRunner{
    
    private static final Logger log = LoggerFactory.getLogger(RestfulWebService1Application.class);

    public static void main(String args[]) {
        SpringApplication.run(RestfulWebService1Application.class, args);
    }

    @Autowired
    JdbcTemplate jdbcTemplate;

    @Override
    public void run(String... strings) throws Exception {

        log.info(&quot;Creating tables&quot;);

        jdbcTemplate.execute(&quot;DROP TABLE customers IF EXISTS&quot;);
        jdbcTemplate.execute(&quot;CREATE TABLE customers(&quot; +
                &quot;id SERIAL, first_name VARCHAR(255), last_name VARCHAR(255))&quot;);

        // Split up the array of whole names into an array of first/last names
        List&amp;lt;Object[]&amp;gt; splitUpNames = Arrays.asList(&quot;John Woo&quot;, &quot;Jeff Dean&quot;, &quot;Josh Bloch&quot;, &quot;Josh Long&quot;).stream()
                .map(name -&amp;gt; name.split(&quot; &quot;))
                .collect(Collectors.toList());

        // Use a Java 8 stream to print out each tuple of the list
        splitUpNames.forEach(name -&amp;gt; log.info(String.format(&quot;Inserting customer record for %s %s&quot;, name[0], name[1])));

        // Uses JdbcTemplate's batchUpdate operation to bulk load data
        jdbcTemplate.batchUpdate(&quot;INSERT INTO customers(first_name, last_name) VALUES (?,?)&quot;, splitUpNames);

        log.info(&quot;Querying for customer records where first_name = 'Josh':&quot;);
        jdbcTemplate.query(
                &quot;SELECT id, first_name, last_name FROM customers WHERE first_name = ?&quot;, new Object[] { &quot;Josh&quot; },
                (rs, rowNum) -&amp;gt; new Customer(rs.getLong(&quot;id&quot;), rs.getString(&quot;first_name&quot;), rs.getString(&quot;last_name&quot;))
        ).forEach(customer -&amp;gt; log.info(customer.toString()));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行项目看结果&quot;&gt;运行项目看结果&lt;/h3&gt;
&lt;pre class=&quot;bash&amp;amp;#39;&quot;&gt;
&lt;code&gt;2019-03-01 14:19:52.078  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Creating tables
2019-03-01 14:19:52.086  INFO 7436 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-03-01 14:19:52.392  INFO 7436 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-03-01 14:19:52.429  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Inserting customer record for John Woo
2019-03-01 14:19:52.430  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Inserting customer record for Jeff Dean
2019-03-01 14:19:52.430  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Inserting customer record for Josh Bloch
2019-03-01 14:19:52.430  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Inserting customer record for Josh Long
2019-03-01 14:19:52.461  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Querying for customer records where first_name = 'Josh':
2019-03-01 14:19:52.480  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Customer[id=3, firstName='Josh', lastName='Bloch']
2019-03-01 14:19:52.480  INFO 7436 --- [  restartedMain] c.e.kane.RestfulWebService1Application   : Customer[id=4, firstName='Josh', lastName='Long']
2019-03-01 14:20:01.122  INFO 7436 --- [nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-03-01 14:20:01.123  INFO 7436 --- [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-03-01 14:20:01.146  INFO 7436 --- [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;说明&quot;&gt;说明&lt;/h3&gt;
&lt;p&gt;官网的例子，没有配置JDBC Template的Datasource，默认使用的是H2 的内存存储的数据库，只能当做测试使用。下面会有介绍更改DataSource的方法&lt;/p&gt;
&lt;h2 id=&quot;介绍下-commandlinerunner&quot;&gt;介绍下 CommandLineRunner&lt;/h2&gt;
&lt;h3 id=&quot;功能&quot;&gt;功能&lt;/h3&gt;
&lt;p&gt;在项目启动后，执行执行功能，我们可以定一个类，去实现CommandLineRunner接口，重写run方法，执行一部分操作。&lt;strong&gt;需要注意的是，定义类必须标记为Spring管理的组件&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;测试类&quot;&gt;测试类&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.example.kane.Model;

import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
@Component
@Order(value=1) //因为可能有许多事情要做，Order 可以根据大小，判读执行的顺序
public class run_after_application implements CommandLineRunner{

    @Override
    public void run(String... args) throws Exception {
        // TODO Auto-generated method stub
        System.out.println(&quot;-----------------------&quot;);
    }
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;介绍下jdbctempalte&quot;&gt;介绍下JdbcTempalte&lt;/h2&gt;
&lt;p&gt;在JDBC核心包中，JdbcTemplate是主要的类，简化了JDBC的使用，避免了一些常规错误。它能够执行JDBC核心流程，在应用代码之上提供SQL语句、导出结果。这个类执行SQL查询、更新、对结果集重复操作捕获JDBC的异常。并将它翻译成&lt;code&gt;org.springframework.dao&lt;/code&gt; 包中定义的基本的、信息量更大的异常层次结构。&lt;/p&gt;
&lt;h3 id=&quot;jdbc构造方法&quot;&gt;JDBC构造方法&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;JdbcTemplate()&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;//为Bean创建一个JdbcTemplate以供使用
//再没配置DataSource的情况下 springboot提供了 一些嵌入式的数据库支持，上面的例子使用的就是H2数据库，是一个内存的数据库&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;JdbcTemplate(javax.sql.DataSource dataSource)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;//构造的时候传入一个 DataSource，来获取链接
//JdbcTemplate Spring boot默认链接的是H2 database，&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;在spring-boot中配置mysql-数据库&quot;&gt;在spring boot中配置mysql 数据库&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;数据库配置类 &lt;strong&gt;db_config&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.example.kane.config;

import org.apache.commons.dbcp.BasicDataSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import javax.sql.DataSource;
@Configuration
public class db_config {
    //这个类是一个Config类
        @Value(&quot;${db.driver}&quot;)
        private String DRIVER;

        @Value(&quot;${db.password}&quot;)
        private String PASSWORD;

        @Value(&quot;${db.url}&quot;)
        private String URL;

        @Value(&quot;${db.username}&quot;)
        private String USERNAME;
        @Bean
        public DataSource dataSource1() {
            BasicDataSource dataSource = new BasicDataSource();
            dataSource.setDriverClassName(DRIVER);
            dataSource.setUrl(URL);
            dataSource.setUsername(USERNAME);
            dataSource.setPassword(PASSWORD);
            return dataSource;
        }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;# Database
# mysqljdbc连接驱动
db.driver:com.mysql.cj.jdbc.Driver
db.url:jdbc:mysql://localhost:3306/test
db.username:root
db.password:root&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- 需要用到commons-dbcp连接池，以及连接mysql使用的drver--&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;application 启动类修改&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    @Autowired
    JdbcTemplate jdbcTemplate;
    //下面是加载了数据库的配置。只需要增加这个
    @Autowired
    db_config db_config;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;运行程序后会发现数据存储到本地数据库&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;SELECT * from customers;
------------------------
1   John    Woo
2   Jeff    Dean
3   Josh    Bloch
4   Josh    Long&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;另一个简单的方法配置mysql数据库&quot;&gt;另一个简单的方法配置mysql数据库&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;直接修改application.properties&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;# database
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;将properties改成yml文件 application.yml&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;yml&quot;&gt;
&lt;code&gt;spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注：这两种方式又回归到配置文件的方式了，&lt;/p&gt;
&lt;h3 id=&quot;jdbc-template常用方法&quot;&gt;JDBC Template常用方法&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;execute方法：&lt;/strong&gt;可以用于执行任何SQL语句，一般用于执行DDL语句；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update方法及batchUpdate方法：&lt;/strong&gt;update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query方法及queryForXXX方法：&lt;/strong&gt;用于执行查询相关语句；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;call方法：&lt;/strong&gt;用于执行存储过程、函数相关语句。&lt;/li&gt;
&lt;li&gt;参考官网 https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;关于连接池的一些内容&quot;&gt;关于连接池的一些内容&lt;/h3&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;为什么要使用数据库连接池？&lt;/p&gt;
&lt;p&gt;因为建立数据库连接是一个非常耗时的过程，使用连接池可以预先同数据库建立连接，放在内存中。应用需要使用数据库的时候直接使用连接池中的连接即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;当前三大主流连接池&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DBCP：提供最大空闲连接数，超过连接全部自动断开连接，其他两个没有。&lt;/li&gt;
&lt;li&gt;C3P0：提供最大空闲连接时间，这样可以做到自动收回空闲连接的机制&lt;/li&gt;
&lt;li&gt;Druid：阿里出品的，同样提供最大的空闲连接时间&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 04 Mar 2019 06:25:00 +0000</pubDate>
<dc:creator>WangKane</dc:creator>
<og:description>使用JDBC 获取相关的数据 什么是JDBC Java Database Connectivity 是一种用于执行SQL语句的Java API，与数据库建立连接、发送 操作数据库的语句并处理结果。 S</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/primadonna/p/10470472.html</dc:identifier>
</item>
<item>
<title>带你脱离视频测试的坑 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/10469855.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/10469855.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文由云+社区发表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：腾讯云视频&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小编这次分享主要是视频相关的专项测试，音频相关的暂不涉及。&lt;/p&gt;
&lt;p&gt;我们直接切入正题，关于视频通话质量对比，需要一些对比项，这里是从以下5个方面进行数据对比：码率、帧率、分辨率、清晰度、时延。&lt;/p&gt;
&lt;p&gt;接下来我分别介绍一下这5个方面。&lt;/p&gt;
&lt;p&gt;▽&lt;/p&gt;
&lt;p&gt;码率&lt;/p&gt;
&lt;p&gt;数据传输时单位时间内传送的数据位数，单位是kbps，即千位每秒。码率越高对应着传输能力越强，视频精度会越高。&lt;/p&gt;
&lt;p&gt;帧率&lt;/p&gt;
&lt;p&gt;帧率是用于测量显示帧数的量度，简称fps。每秒的帧数表示处理器处理时每秒钟能够更新的次数，高的帧率可以得到更流畅、更逼真的动画。&lt;/p&gt;
&lt;p&gt;分辨率/清晰度&lt;/p&gt;
&lt;p&gt;这个两个指标代表着视频画面的清晰程度，越高的话，给用户的画面就越清晰，用户体验会越好。清晰度的单位：LW/PH&lt;/p&gt;
&lt;p&gt;时延&lt;/p&gt;
&lt;p&gt;即实时性，简单来说就是两个人通话，本端说了一句话，对端需等待一段时间才能收到。单位一般用毫秒（ms）表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/r2cchp97f1.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;介绍完这些指标，接下来切入正题，这些数据在手机上，如何获取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/4awy15g9lv.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，在双人视频通话连接好后，在非纯净态画面顶部会出现名字，在名字上点击5下，会弹出一段log，这个log是开发为了好分析问题所特意加的，这里面就包含了我们所需要的3个数据，分辨率，帧率以及码率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/265d9kg48v.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/d14vaaiw7i.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/17b4kx928w.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/a8medf3bgm.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/h6qxuavtfo.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/zq4jbtznzb.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/5hvqyjjpx9.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;双人视频通话log&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/1g5lpyx3oc.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红色框框里面的即为我们要的3个数据，需要看本端的分辨率，码率，帧率，则需要找到Enc这个字段（Enc代表编码端，即本端；Dec代表解码端，即对端），后面对应的依次为分辨率，码率和帧率。&lt;/p&gt;
&lt;p&gt;测试时，需要等待视频通话稳定一段时间，取的数据才有意义，取最大、最小值都意义不大。视频通话分别率刚开始可能会低一些，等网络稳定后视情况，应该会增加分辨率，所以取的分辨率需要等稳定后再取。帧率和码率也一样，稳定后取平均值。&lt;/p&gt;
&lt;p&gt;上面说了手机APP分辨率、码率、帧率的测试方法，接下来说一下时延和清晰度。视频清晰度，本该用一个动态的视频进行分析，这里由于条件有限，采取的是等视频稳定后，互相截图，然后用专业的清晰度计算工具，算出图片的清晰度值，我们认为这个值就是该机型视频通话的清晰度。&lt;/p&gt;
&lt;p&gt;视频专项测试方法&lt;/p&gt;
&lt;p&gt;视频清晰度测试方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/x1wrzlikqa.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体操作如下：在音视频实验室，有专门的设备。两台手机视频通话后，一台手机切换至前摄像头，点出log后，放在架子上，另一台手机关掉本端摄像头；架子上的手机分辨率稳定后，另一端手机直接截图，这张图就是用来计算架子上的手机的分辨率的。&lt;/p&gt;
&lt;p&gt;有专门的计算工具Imatest进行计算，计算方法这里就不展开来说了。两部手机对调，就可以互相取得分辨率了。这里有个问题，即清晰度计算软件是和截图的质量也有关系，不同机型互测的时候，截图效果也是不一样的，这里是有可能会影响清晰度的最终计算结果的，这里还没有想到比较好的解决办法；但同机型互通则不存在该问题。&lt;/p&gt;
&lt;p&gt;时延测试方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/azt1ol8bcq.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;电脑上打开一个在线秒表，开始计时后。两台手机固定在屏幕前，通话后，稳定一段时间后，拿起第三部手机拍照，即是时延，这里拍照15次，计算差值后取平均值，即为时延。&lt;/p&gt;
&lt;p&gt;到此，手机APP五项性能数据测试方法就全部介绍完成；接下来介绍同类型的产品视频通话，这5项数据需要如何获取。想要得到码率、帧率、分辨率这些数据只能通过一些其他方法。&lt;/p&gt;
&lt;p&gt;▽&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先是码率，这里需要抓包看。准备mac机，确保mac机上有Xcode，手机连上mac后，打开Xcode后，点击window-Device and Simulators，找到identifier，后面的设备标识复制一下，看这里&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/e8racau8do.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开mac机的cmd，输入rvictl -s 手机标识，回车后即可，此时输入rvictl -l，即可查到已添加的设备。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/lbbc6doc8k.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开Wireshare，找到rvio端口，双击后，进入rvio端口，点击Statistics-I/O Graph。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/e6rhszt2qd.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/yrwlq8564e.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/2669993/v0pe40eas4.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;里面需要调整一下参数，就可以出现对方码率了，首先要先添加一行参数，即上图左下角的“+”号，点击“+”号后，在Enabled打上勾，然后Graph Name修改一下，Y Axis改成Bits，Interval改成1 sec。最后就要修改一下Display Filter，这个参数是用来过滤的，当你需要获取连着电脑的这部手机的码率是，你需要输入ip.src==X.X.X.X and udp；当你需要获取对端的码率时（即非连接mac的那台手机），需要输入ip.dst==X.X.X.X and udp。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此文已由腾讯云+社区在各渠道发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取更多新鲜技术干货，可以关注我们&lt;a href=&quot;https://www.zhihu.com/org/teng-xun-yun-ji-zhu-she-qu/activities&quot;&gt;腾讯云技术社区-云加社区官方号及知乎机构号&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 03:52:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<og:description>本文由云+社区发表 作者：腾讯云视频 小编这次分享主要是视频相关的专项测试，音频相关的暂不涉及。 我们直接切入正题，关于视频通话质量对比，需要一些对比项，这里是从以下5个方面进行数据对比：码率、帧率、</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/10469855.html</dc:identifier>
</item>
<item>
<title>asp.net core系列 36 WebAPI 搭建详细示例 - 花阴偷移</title>
<link>http://www.cnblogs.com/MrHSR/p/10457763.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MrHSR/p/10457763.html</guid>
<description>&lt;h3&gt;一.概述&lt;/h3&gt;
&lt;p&gt;　　&lt;span lang=&quot;EN-US&quot;&gt;HTTP不仅仅用于提供网页。&lt;span lang=&quot;EN-US&quot;&gt;HTTP也是构建公开服务和数据的&lt;span lang=&quot;EN-US&quot;&gt;API强大平台。&lt;span lang=&quot;EN-US&quot;&gt;HTTP简单灵活且无处不在。几乎任何你能想到的平台都有一个&lt;span lang=&quot;EN-US&quot;&gt;HTTP库，因此&lt;span lang=&quot;EN-US&quot;&gt;HTTP服务可以覆盖广泛的客户端，包括浏览器，移动设备和传统的桌面应用程序。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　ASP.NET Web API 是一个框架，基于.NET Framework 或.NET Core 之上构建 Web API。&lt;/p&gt;
&lt;p&gt;　　从本章开始学习Web API系列时，先从一个示例开始，下面使用ASP.NET Core MVC 创建 Web API。通过本次演示将了解到一个基础的Web API应用。环境使用vs 2017 +sql server 2012。示例主要知识点包括：&lt;/p&gt;
&lt;p&gt;                   (1)创建 Web API 项目。&lt;/p&gt;
&lt;p&gt;                   (2)添加模型类。&lt;/p&gt;
&lt;p&gt;                   (3)创建数据库上下文。&lt;/p&gt;
&lt;p&gt;                   (4)注册数据库上下文。&lt;/p&gt;
&lt;p&gt;                   (5)添加控制器。&lt;/p&gt;
&lt;p&gt;                   (6)添加 CRUD 方法。&lt;/p&gt;
&lt;p&gt;                   (7)配置路由和 URL 路径。&lt;/p&gt;
&lt;p&gt;                   (8)指定返回值。&lt;/p&gt;
&lt;p&gt;                   (9)使用Fiddle调用 Web API。&lt;/p&gt;
&lt;p&gt;                   (10)使用 jQuery 调用 Web API。&lt;/p&gt;
&lt;p&gt;　　在开发Web API之前，先制定几个有针对性的API 接口，至于api 接口业务很简单，主要是演示如何应用Web API。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;158&quot;&gt;
&lt;p&gt;&lt;strong&gt;API接口&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;&lt;strong&gt;请求报文&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;&lt;strong&gt;响应报文&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;158&quot;&gt;
&lt;p&gt;GET  /api/todo&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;获取所有待办事项&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;无&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;待办事项的数据&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;158&quot;&gt;
&lt;p&gt;GET /api/todo/{id}&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;按 ID 获取项&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;无&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;待办事项&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;158&quot;&gt;
&lt;p&gt;POST /api/todo&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;添加新项&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;待办事项&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;待办事项&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;158&quot;&gt;
&lt;p&gt;PUT /api/todo/{id}&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;更新现有项 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;待办事项&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;无&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;158&quot;&gt;
&lt;p&gt;DELETE /api/todo/{id}&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;删除项 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;无&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;无&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　&lt;strong&gt;　1.1 创建web项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　(1)从“文件”菜单中选择“新建” &amp;gt; “项目”。&lt;/p&gt;
&lt;p&gt;　　　　(2)选择“ASP.NET Core Web 应用程序”模板。 将项目命名为 TodoApi，然后单击“确定”。&lt;/p&gt;
&lt;p&gt;　　　　(3)在“新建 ASP.NET Core Web 应用程序 - TodoApi”对话框中，选择 ASP.NET Core 版本。 选择“API”模板，然后单击“确定”。 请不要选择“启用 Docker 支持”。&lt;/p&gt;
&lt;p&gt;　　　　项目模板会创建 &lt;code&gt;values&lt;/code&gt; API。 控制器方法中默认的Http[Verb] 属性路由包括GET，POST, PUT, DELETE接口&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;1.2 添加模型类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　在项目中，添加Models文件夹，新建一个 &lt;code&gt;TodoItem&lt;/code&gt; 类,如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TodoItem
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }    
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;待办事项名称&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否完成&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsComplete { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;1.3 添加数据库上下文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;在“Models”文件夹，然后选择“添加” &amp;gt; “类”。 将类命名为 TodoContext，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;using Microsoft.EntityFrameworkCore;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TodoContext: DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TodoContext(DbContextOptions&amp;lt;TodoContext&amp;gt;&lt;span&gt; options)
          : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;TodoItem&amp;gt; TodoItems { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　1.4 注册上下文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　在 ASP.NET Core 中，服务（如数据库上下文）必须向依赖关系注入 (DI) 容器进行注册。 该容器向控制器提供服务。这里使用Microsoft.EntityFrameworkCore.SqlServer数据提供程序。再根据模型生成数据库表(库名Todo,有一个表TodoItem)。关于如何安装数据提供程序,以及如何用模型生成数据库表，请参考“asp.net core 系列第 20 篇” 。使用迁移生成数据库后，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190301172926403-1760929747.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1.5 添加控制器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　在Controllers 文件夹中，选择“API 控制器类”模板。将类命名为 TodoController.cs, 代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    [ApiController]&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加特性，代表是一个Web API控制器类&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TodoController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; TodoContext _context;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 实例化一个EF上下文，进行数据库操作。开始初始入库一条数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TodoController(TodoContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_context.TodoItems.Count() == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new TodoItem if collection is empty,
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; which means you can't delete all TodoItems.&lt;/span&gt;
                _context.TodoItems.Add(&lt;span&gt;new&lt;/span&gt; TodoItem { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Item1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
                _context.SaveChanges();
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　&lt;strong&gt;1.6 添加GET方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;通过GET方法来查询待办事项的 API，将以下方法添加到 TodoController 类中。关于路由知识，请参考asp.net core 系列第5篇。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取所有事项
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; GET: api/Todo
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;IEnumerable&amp;lt;TodoItem&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; GetTodoItems()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;using Microsoft.EntityFrameworkCore;&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.TodoItems.ToListAsync();
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 根据id，获取一条事项
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; GET: api/Todo/5。  id 是参数，代表路由合并
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        [HttpGet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;TodoItem&amp;gt;&amp;gt; GetTodoItem(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; todoItem = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.TodoItems.FindAsync(id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (todoItem == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; todoItem;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　启动vs，测试结果，如下所示，&lt;span&gt;注意请求wep api 地址与action的方法名没有关系，是根据方法名之上的Http[Verb]特性来确定url地址的&lt;/span&gt;：　　　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190301173155941-1721881593.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　1.7 路由和URL路径&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;(1) Route特性&lt;/p&gt;
&lt;p&gt;　　　　　　Route是用来制定路由模板的，在第5章中也讲到。[Route(&quot;api/[controller]&quot;)]中是以api开头，替换&lt;code&gt;[controller]&lt;/code&gt; 为控制器的名称, 按照惯例，控制器类名称减去“Controller”后缀, 因此控制器名称为“todo” ,&lt;span&gt;路由不区分大小写&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　(2) HttpGet&lt;/p&gt;
&lt;p&gt;　　　　　　如果&lt;code&gt;[HttpGet]&lt;/code&gt;属性具有路径模板，例如：&lt;code&gt;[HttpGet(&quot;{id}&quot;)]&lt;/code&gt;&lt;code&gt;，&lt;/code&gt; &lt;code&gt;则将其&lt;/code&gt;附&lt;code&gt;加到路径&lt;/code&gt;&lt;code&gt;(如：api/todo/1)&lt;/code&gt;&lt;code&gt;。在这个示例中&lt;/code&gt;&lt;code&gt;,&lt;/code&gt; &lt;code&gt;&quot;{id}&quot;&lt;/code&gt;是占位符变量，用于待办事项的唯一标识符。&lt;/p&gt;

&lt;p&gt; 　　&lt;strong&gt;1.8 返回值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　上面的GetTodoItems和GetTodoItem方法的返回类型是ActionResult &amp;lt;T&amp;gt;类型。ASP.NET Core自动将对象序列化为JSON，并将JSON写入响应消息的正文中。假设没有异常，此返回类型的响应代码为200。未处理的异常被转换为5xx错误。&lt;/p&gt;
&lt;p&gt;　　　　&lt;code&gt;ActionResult&lt;/code&gt;返回类型可以表示各种HTTP状态代码，例如在上面的&lt;code&gt;GetTodoItem&lt;/code&gt;&lt;code&gt;方法中&lt;/code&gt;可以返回两个不同的状态值：一个是成功的200, 一个是404未到找。所有的HTTP状态代码可以在ControllerBase中找到，例如下图中的Forbid() 是Http状态码403，NoContent()是Http 状态码204 。 等等　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190304110806693-2078998533.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;二.测试Web API&lt;/h3&gt;
&lt;p&gt;　　下面简单使用Fiddler来测试一下增删改增。先在本机vs 2017中启动该项目，地址为http://localhost:62271。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2.1 查询&lt;/strong&gt;&lt;strong&gt;　　　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;在Fiddler工具中，选择GET，输入查询的http地址，右边是响应的http 状态码200, 以及查询的json结构对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190304111134383-1745495832.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2.2 新增&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;下面创建方法，添加以下 PostTodoItem 方法，在新增方法中调用了CreatedAtAction内置方法，如果新增成功，则返回 HTTP 201 状态代码。HTTP 201是HTTP POST方法的标准响应，该方法在服务器上创建新资源。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;POST: api/Todo&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;TodoItem&amp;gt;&amp;gt;&lt;span&gt; PostTodoItem(TodoItem item)
        {
            _context.TodoItems.Add(item);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; CreatedAtAction(nameof(GetTodoItem), &lt;span&gt;new&lt;/span&gt; { id =&lt;span&gt; item.Id }, item);
        }&lt;/span&gt;　　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190304111529376-644837474.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2.3 修改&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;添加以下 &lt;code&gt;PutTodoItem&lt;/code&gt; 方法, PutTodoItem 与 PostTodoItem 类似，但是使用的是 HTTP PUT。 响应是 204（无内容）。 根据 HTTP 规范，PUT 请求需要客户端发送整个更新的实体，而不仅仅是更改。若要支持部分更新，请使用HttpPatch特性。　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; PUT: api/Todo/1&lt;/span&gt;
        [HttpPut(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; PutTodoItem(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id, TodoItem item)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (id !=&lt;span&gt; item.Id)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http 403&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; BadRequest();
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前传过来的实体添加到上下文，并设置为修改&lt;/span&gt;
            _context.Entry(item).State =&lt;span&gt; EntityState.Modified;
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NoContent();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190304112326297-1288239514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2.4 删除&lt;/strong&gt;　　　　&lt;em&gt;　&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DELETE: api/Todo/2&lt;/span&gt;
        [HttpDelete(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; DeleteTodoItem(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; todoitem = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.TodoItems.FindAsync(id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (todoitem == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }

            _context.TodoItems.Remove(todoitem);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NoContent();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190304112605552-1809747111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　最后：关于jQuery 调用 Web API，不再演示，jQuery调用的配置和注意事项，请查看官网介绍。&lt;/p&gt;

&lt;p&gt;　　参考文献:&lt;/p&gt;
&lt;p&gt;　　　　&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.2&amp;amp;tabs=visual-studio&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;ASP.NET Core的Web API&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 04 Mar 2019 03:47:00 +0000</pubDate>
<dc:creator>花阴偷移</dc:creator>
<og:description>一.概述 HTTP不仅仅用于提供网页。HTTP也是构建公开服务和数据的API强大平台。HTTP简单灵活且无处不在。几乎任何你能想到的平台都有一个HTTP库，因此HTTP服务可以覆盖广泛的客户端，包括浏</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MrHSR/p/10457763.html</dc:identifier>
</item>
<item>
<title>SQL优化 MySQL版 - 多表优化及细节详讲 - StanleyBlogs</title>
<link>http://www.cnblogs.com/StanleyBlogs/p/10469815.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/StanleyBlogs/p/10469815.html</guid>
<description>&lt;p&gt;作者 ： Stanley 罗昊&lt;/p&gt;
&lt;h2&gt;【&lt;strong&gt;转载请注明出处和署名，谢谢！&lt;/strong&gt;】&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：本文章需要MySQL数据库优化基础或观看前几篇文章，传送门：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;B树索引详讲（初识SQL优化，认识索引）：https://www.cnblogs.com/StanleyBlogs/p/10413349.html&lt;/p&gt;
&lt;p&gt;B树索引进阶（索引分类、创建方式、删除索引、查看索引、SQL性能问题）：https://www.cnblogs.com/StanleyBlogs/p/10416865.html&lt;/p&gt;
&lt;p&gt;SQL执行计划于笛卡尔积（了解什么是SQL执行计划，优化原理）：https://www.cnblogs.com/StanleyBlogs/p/10422202.html&lt;/p&gt;
&lt;p&gt;Type详讲（理解优化级别）：https://www.cnblogs.com/StanleyBlogs/p/10426385.html&lt;/p&gt;
&lt;p&gt;Extra（理解最终优化概念）：https://www.cnblogs.com/StanleyBlogs/p/10429969.html&lt;/p&gt;
&lt;p&gt;单表优化（开启优化篇章）：https://www.cnblogs.com/StanleyBlogs/p/10442557.html&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;优化准备&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;首先我们需要有一个数据库&lt;strong&gt;，coursedb，分别创建course（课程表）、teacher（老师表）&lt;/strong&gt;，有以下字段，我们接下来将用以下这张表来做优化实例；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545884/201903/1545884-20190304085105926-1916319137.jpg&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545884/201903/1545884-20190304085226682-1119152562.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;teacher表里面的id 是代表一号老师教2号课程2号老师教1号课程3号老师教三号课程；id是主键&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;course表就是课程表1号代表java课程2号代表python...cid是主键&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;多表优化&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;此次教程不再使用可视化工具，因为效率太慢，我还是比较喜欢命令行操作；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;现在有表了，有数据了，我现在写一个左连接，二表关联写一个左连接：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; teacher t &lt;span&gt;left&lt;/span&gt; &lt;span&gt;outer&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; course c &lt;span&gt;on&lt;/span&gt; t.cid &lt;span&gt;=&lt;/span&gt; c.cid &lt;span&gt;where&lt;/span&gt; c.cnourse
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;左连接详解：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;left join 是left outer join的简写&lt;/span&gt;&lt;/strong&gt;【本语句使用left &lt;strong&gt;&lt;span&gt;outer join&lt;/span&gt;&lt;/strong&gt;】，它的全称是左外连接，是外连接中的一种。&lt;/p&gt;
&lt;p&gt;左(外)连接，左表(&lt;span&gt;teacher&lt;/span&gt;)的记录将会全部表示出来，而右表(&lt;span&gt;cnourse&lt;/span&gt;)只会显示符合搜索条件的记录。右表记录不足的地方均为&lt;strong&gt;&lt;span&gt;NUL&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;语句解释：&lt;strong&gt;现在我们需要两表合一，所以就用左连接的方式，on则表明连接条件，where后面则是查询条件，查询cnourse = java课程的数据；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545884/201903/1545884-20190304093701601-899276853.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在，我们就根据以上sql语句进行优化，所谓的优化，&lt;strong&gt;&lt;span&gt;那就是家加索引&lt;/span&gt;&lt;/strong&gt;，在加索引之前，我们需要考虑一些问题；&lt;/p&gt;
&lt;p&gt;对于这个问题，我有一个结论，就是&lt;strong&gt;&lt;span&gt;小表驱动大表&lt;/span&gt;&lt;/strong&gt;，什么意思呢？我举个例子：&lt;/p&gt;
&lt;p&gt;比方说我现在有一个&lt;strong&gt;&lt;span&gt;where 小表.x = 大表.y&lt;/span&gt;&lt;/strong&gt;；这个就被称之为小表驱动大表，就是把小表放左边大表放一边，这是一个结论，咱们可以稍微分析一下为啥这样干；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;假设小表里面有10条数据，我大表里面有300条数据，小表放左边大表放右边对于表里的每10条数据里的每一条，300条数据都会轮循遍历一次，10条里面第一条拿出来，右边执行300次，左边10条第二条拿出来，右边再300次，同理，第三条出来，再300次....；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;有一个编程原则我在这里说一下，在写for循环的时候，双层for循环，你外层数据越小内存数据越大，那它的性能就越高，这个是编程原则&lt;/span&gt;&lt;/strong&gt;，把这个原则放到这里也是一样的，&lt;strong&gt;&lt;span&gt;数据量最小的表放在前面，数据量最大的表放在后面（where 小表 cid= 大表 cid）&lt;/span&gt;&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;但是对于刚才我写的sql语句来说，t.cid = c.cid即便反过来查询结果也是一样的完全是等价写法仅从结果上来看，但是我们从这个性能上来看，你在写之前分析一下到底是t表数据小呢，还是c表数据小，将数据小的表放到左边；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;本题因为都是三条数据，所以不影响，再此就是提一提；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;连表查询添加索引原则&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;现在我们再来研究，我们的索引到底加给那个字段；&lt;/p&gt;
&lt;p&gt;在这里我需要再提一下，&lt;strong&gt;&lt;span&gt;索引一定要建立经常使用的字段上&lt;/span&gt;&lt;/strong&gt;，这句话对于本次优化应该这么理解：&lt;/p&gt;
&lt;p&gt;对于左边这个小表.x = 10，每一条我都要执行300次，因此左边这个表的使用量比较大，因为每用一次执行300次嘛，左边这个x字段使用频率比较高，因此我们就需要给&lt;strong&gt;&lt;span&gt;这个x字段加索引&lt;/span&gt;&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;所以呢？&lt;strong&gt;&lt;span&gt;本次优化 t.cid = c.cid很明显，t.cid使用最为频繁&lt;/span&gt;&lt;/strong&gt;，所以给该字段加索引，值得一提的是，&lt;span&gt;&lt;strong&gt;因为本次sql语句是左外连接，对于左外连接来说，一般情况下给左边加索引，因为是左外嘛，左边刚好是小表，同理，如果是右外连接我们就需要给右表加索引；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其实很好理解，&lt;span&gt;&lt;strong&gt;左外连接就是以左表为基准，意思就是左表的所有数据都要匹配，你全部要匹配，那你必然使用频繁，因此给左表加，右外连接以右表为基准，你右表使用频繁，那就给右表加索引，都是一个意思&lt;/strong&gt;；&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;添加索引&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;分析完了，接下来就开始我们的优化吧；&lt;/p&gt;
&lt;p&gt;在优化之前，我们先查询一下原生态SQL语句的执行情况，我们需要&lt;span&gt;&lt;strong&gt;&lt;span&gt;explain&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;,就是查看一下不加索引的情况：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
explain &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; teacher t &lt;span&gt;left&lt;/span&gt; &lt;span&gt;outer&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; course c &lt;span&gt;on&lt;/span&gt; t.cid &lt;span&gt;=&lt;/span&gt; c.cid &lt;span&gt;where&lt;/span&gt; c.cnourse &lt;span&gt;=&lt;/span&gt; &quot;java&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545884/201903/1545884-20190304104826633-1228762416.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很显然，级别都是ALL，也出现了Using where；&lt;/p&gt;
&lt;p&gt;我们现在开始加索引：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; teacher &lt;span&gt;add&lt;/span&gt; &lt;span&gt;index&lt;/span&gt; index_teacher_cid(cid);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加完索引再试试：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545884/201903/1545884-20190304104930210-177728955.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们能发现，有一张表点查询级别提到了&lt;strong&gt;&lt;span&gt;index&lt;/span&gt;&lt;/strong&gt;，其次，我们后面还增加了一个&lt;strong&gt;&lt;span&gt;Using index&lt;/span&gt;&lt;/strong&gt;索引覆盖提高了查询性能；&lt;/p&gt;
&lt;p&gt;到这里，我们是不是少加一个索引，我们把SQL语句拿过来看看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; teacher t &lt;span&gt;left&lt;/span&gt; &lt;span&gt;outer&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; course c &lt;span&gt;on&lt;/span&gt; t.cid &lt;span&gt;=&lt;/span&gt; c.cid &lt;span&gt;where&lt;/span&gt; c.cnourse &lt;span&gt;=&lt;/span&gt; &quot;java&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;查询条件必然是索引才对&lt;/span&gt;&lt;/strong&gt;，因为要根据它去查数据，所以我漏加了一个，现在我加上后再去执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; course &lt;span&gt;add&lt;/span&gt; &lt;span&gt;index&lt;/span&gt; index_course_cnourse(cnourse);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加完索引再去执行试试：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545884/201903/1545884-20190304105229018-1232123190.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先,查询级别全部提升到&lt;strong&gt;&lt;span&gt;fef&lt;/span&gt;&lt;/strong&gt;级别，其次在查看生效的索引，两个索引被检测到了，在最终效能里面出现了两个Using index因为两章表，此条语句优化完成；&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Using join buffer&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545884/201903/1545884-20190304110017425-840166758.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Extra字段里面出现了一个在前几章都没有见过的属性，我们来了解一下它：&lt;/p&gt;
&lt;p&gt;出现它的原因：&lt;strong&gt;&lt;span&gt;MySQL引擎使用了连接缓存；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;详解：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;说白了就是你这个SQL语句写的太差了，mysql看不下去了它给你加了一个连接缓存，出现这个就说明mysql底层动你的sql语句了，给你加了个缓存；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;后面我们自主优化性能提升后，mysql觉得我写的还不错，就不给我加缓存了；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;多表查询技巧&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;刚才我们介绍了两表查询，有些人就会问，那三张表呢？其实我告诉你，&lt;strong&gt;&lt;span&gt;100张表也是一样的.....即便你100张表连表查询，原则也是不变的&lt;/span&gt;&lt;/strong&gt;，因为没有新知识了，所以在这里我就说下多表查询的技巧；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.有多张表，如果你要优化，首先第一个原则我在上面介绍过，小表驱动大表，那个表数据少，就把它写到等号的左边，即便查询结果一样，就比如a表数据少b表数据多，我们就 where a.id= b.id;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.如果有多张表，索引就建立在经常查询的字段上，假设你有 a b c 三张表，一共有20个字段，这个20个字段你没有必要全加，看着三张表的20个字段里面，谁经常在查询，谁在where后面，以及一些常用字段；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;今日感悟：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;永远不要强力的去反对别人；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;海格斯效应告诉我们：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;           当你反对别人时，得到的，将是更加强力的反对；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;举例说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;          你剥夺了孩子万帅的时间，那么孩子多半会把学习成绩降下来了给你看；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;          你剥夺了妻自由的空间，她也会什么家务都不干，你也休想安宁；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;尝试用哪个另一个角度去解决问题，否则一定会面临任性的通病；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;              &lt;span&gt; 你跟我过不去，我也让你不痛快！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 03:46:00 +0000</pubDate>
<dc:creator>StanleyBlogs</dc:creator>
<og:description>多表优化及细节详讲 作者 ： Stanley 罗昊 【转载请注明出处和署名，谢谢！】 注：本文章需要MySQL数据库优化基础或观看前几篇文章，传送门： B树索引详讲（初识SQL优化，认识索引）：htt</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/StanleyBlogs/p/10469815.html</dc:identifier>
</item>
<item>
<title>Csrf_token  |||  CSRF跨站请求伪造 - 叫我先生</title>
<link>http://www.cnblogs.com/coolwxh/p/10469491.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/coolwxh/p/10469491.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;# 注： 部分内容参考网上，侵删  &lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;　　CSRF（Cross-site request forgery） 跨站请求伪造，是一种对网站的恶意利用  它会通过伪装成受信任用户的请求来利用受信任的网站来获取一些信息。&lt;/p&gt;
&lt;p&gt;举个小栗子来解释原理（故事纯属虚构）：&lt;/p&gt;
&lt;p&gt;　　　　A用户在某个银行有一笔不小的存款，A用户可以通过该银行的网站来进行存款和提现等请求，当请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且保存。 当黑客B发现了该目标用户A之后，黑客B便在该银行网站注册账户。黑客B可以通过A用户的某个URL来进行转账。但是，该URL的请求来自黑客B但并非来自用户A，所以无法通过验证。   这时，黑客B便可以自己创建一个网站，该网站的部分请求中会有A用户的转账的URL，黑客B的网站里面有许多诱人的东西，来诱惑用户A来访问该网站。  如果用户A刚刚在该银行网站上进行过转账等操作，便被黑客B的网站诱惑到，以至于来访问该黑客网站，这个时候用户A的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 用户A 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 用户A 的账号转移到 黑客B的账号，而 用户A 当时毫不知情，还在很开心的访问着黑客B的黑网站。&lt;/p&gt;

&lt;p&gt;CSRF攻击之所以能够成功，是因为黑客可以伪造用户的请求，请求的信息都是存在cookie或session中的。 要想抵御CSRF，关键在于在一些重要请求中放入一些黑客不能伪造的信息。&lt;/p&gt;
&lt;p&gt;抵御CSRF有三种方法：&lt;/p&gt;
&lt;p&gt;　　1.验证码&lt;/p&gt;
&lt;p&gt;　　2.refer头&lt;/p&gt;
&lt;p&gt;　　3.Token&lt;/p&gt;
&lt;p&gt;我们便来说说第三中方法Csrf_token&lt;/p&gt;
&lt;p&gt;　　Token就是一个令牌，他是一个随机的值，Token最大的特点就是随机性，不可预测&lt;/p&gt;
&lt;p&gt;他可以在请求的时候随机产生一个令牌，并在服务器上建立一个拦截器来验证该令牌，如果两者不匹配或者没存在令牌，便会拒绝该请求。&lt;/p&gt;
&lt;p&gt;注意当然不能&lt;strong&gt;写到cookie中&lt;/strong&gt;，因为浏览器在发出恶意csrf请求时，是自动带着你的cookie的&lt;/p&gt;

&lt;p&gt;运用的时候在form表单中需要加上   &lt;img src=&quot;https://img2018.cnblogs.com/blog/1542076/201903/1542076-20190304104837895-240652470.png&quot; alt=&quot;&quot; width=&quot;569&quot; height=&quot;62&quot;/&gt;&lt;/p&gt;
&lt;p&gt;并且在用的时候也需要获取一下该token&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1542076/201903/1542076-20190304105909986-222071009.gif&quot; alt=&quot;&quot; width=&quot;168&quot; height=&quot;185&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;温馨提示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在生活中，一定要注意网上的一些垃圾信息，和一些不健康网站。在我们刚刚在某网站转账完毕或者登陆完毕之后，就不要去访问内些垃圾网站，防止我们的信息被盗取。&lt;/p&gt;

</description>
<pubDate>Mon, 04 Mar 2019 03:01:00 +0000</pubDate>
<dc:creator>叫我先生</dc:creator>
<og:description># 注： 部分内容参考网上，侵删 CSRF（Cross-site request forgery） 跨站请求伪造，是一种对网站的恶意利用 它会通过伪装成受信任用户的请求来利用受信任的网站来获</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/coolwxh/p/10469491.html</dc:identifier>
</item>
<item>
<title>jmeter接口自动化部署jenkins教程 - LuLu泡</title>
<link>http://www.cnblogs.com/muzipaopao/p/10469494.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/muzipaopao/p/10469494.html</guid>
<description>


&lt;p&gt;首先，保证本地安装并部署了jenkins，jmeter，xslproc&lt;/p&gt;
&lt;p&gt;我搭建的自动化测试框架是jmeter+jenkins+xslproc&lt;/p&gt;
&lt;p&gt;---注意：原理是，jmeter自生成的报告jtl文件，通过xslproc工具，再结合jmeter自带的模板修改，自带模板目录如下，最终将测试结果报告转化为html格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304094059550-2099702326.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.jenkins新建一个任务,选择“构建一个自由风格的软件项目”，点击OK&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304094246371-1715031452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304094316449-621649795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2.选择构建触发器，根据时间点，每天到点进行自动触发构建&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304094551574-190296342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.输入构建命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304094958098-1027551705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（1）D:/soft/apache-jmeter-3.2/bin/jmeter -n -t D:/soft/apache-jmeter-3.2/jmx/接口测试.jmx &lt;/p&gt;
&lt;p&gt;这一句是通过cmd命令调用jmeter程序，执行jmeter的jmx自动化脚本；&lt;/p&gt;
&lt;p&gt;（2）D:/soft/xsltproc/bin/xsltproc D:/soft/apache-jmeter-3.2/xsl/jmeter-results-detail-report_new.xsl %WORKSPACE%/test.jtl&amp;gt;%WORKSPACE%/test.html&lt;/p&gt;
&lt;p&gt;这一句是调用xslproc程序，通过jmeter-results-detail-report_new.xsl模板，将jtl文件转换为html报告文件；&lt;/p&gt;
&lt;p&gt;4.&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304095509912-1530649915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304095531931-631600551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304095605231-1653890317.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304095624220-1039999199.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;邮件的格式代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;大家好，本次接口测试构建结果如下：
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;referrer&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;never&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${ENV, var=&quot;JOB_NAME&quot;}-第${BUILD_NUMBER}次构建日志&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;leftmargin&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; marginwidth&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; topmargin&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; marginheight&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;    offset&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;95%&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;&lt;span&gt;=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;(本邮件是程序自动下发的，请勿回复！)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;font &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;=&quot;#0000FF&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建结果 - ${BUILD_STATUS}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;font &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;=&quot;#0B610B&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;项目名称&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;：&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;${PROJECT_NAME}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建编号&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;：&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;第${BUILD_NUMBER}次构建&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;触发原因：&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;${CAUSE}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建日志：&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${BUILD_URL}console&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${BUILD_URL}console&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;Url&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;：&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${BUILD_URL}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${BUILD_URL}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;工作目录&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;：&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}ws&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}ws&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;项目&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;Url&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;：&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;font &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;=&quot;#0B610B&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Changes Since Last
                        Successful Build:&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;历史变更记录 : &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}changes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}changes&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; ${CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=&quot;Changes for Build #%n:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;%c&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&quot;,showPaths=true,changesFormat=&quot;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;[%a]&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;%m&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;,pathFormat=&quot;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;%p&quot;}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Failed Test Results&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre
                    &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;$FAILED_TESTS&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${FILE,path=&quot;D:/jenkins/workspace/test/test.html&quot;}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是jenkins的所有设置&lt;/p&gt;
&lt;p&gt;5.jenkins的版本太低的话，可能存在需要手动下载jenkins插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304095915727-1682447281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304095933017-79656963.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304100351354-1655618222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304100446970-1452834943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304100600662-1431393239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，附上模板代码给大家~&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:stylesheet &lt;/span&gt;&lt;span&gt;xmlns:xsl&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/1999/XSL/Transform&quot;&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the &quot;License&quot;); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 
    Stylesheet for processing 2.1 output format test result files 
    To uses this directly in a browser, add the following to the JTL file as line 2:
    &amp;lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;../extras/jmeter-results-detail-report_21.xsl&quot;?&amp;gt;
    and you can then view the JTL in a browser
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:output &lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;=&quot;html&quot;&lt;/span&gt;&lt;span&gt; indent&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt; encoding&lt;/span&gt;&lt;span&gt;=&quot;GB18030&quot;&lt;/span&gt;&lt;span&gt;  doctype-public&lt;/span&gt;&lt;span&gt;=&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Defined parameters (overrideable)   &amp;lt;td bgcolor=&quot;#ff00ff&quot;&amp;gt;  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:param    &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;showData&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;'y'&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:param    &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;titleReport&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;'接口测试'&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;match&lt;/span&gt;&lt;span&gt;=&quot;testResults&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$titleReport&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                
                body {
                    font:normal 95% verdana,arial,helvetica;
                    color:#000000;
                }
                table tr td, table tr th {
                    font-size: 95%;
                }
                table.details tr th{
                    word-wrap:break-word;
                    color: #ffffff;
                    font-weight: bold;
                    text-align:center;
                    background:#2674a6;
                    
                }
                table.details tr td{
                    width: 400px;
                    word-wrap:break-word;
                    background:#eeeee0;
                    
                }
                table{
                    table-layout:fixed ; 
                }
                h1 {
                    margin: 0px 0px 5px; font: 165% verdana,arial,helvetica
                }
                h2 {
                    margin-top: 1em; margin-bottom: 0.5em; font: bold 125% verdana,arial,helvetica
                }
                h3 {
                    margin-bottom: 0.5em; font: bold 115% verdana,arial,helvetica
                }
                .Failure {
                    font-weight:bold; color:red;
                }
                
    
                img
                {
                  border-width: 0px;
                }
                
                .expand_link
                {
                   position:absolute;
                   right: 0px;
                   width: 27px;
                   top: 1px;
                   height: 27px;
                }
                
                .page_details
                {
                   display: none;
                }
                                
                /* .page_details_expanded
                {
                    display: block;
                    displayhide this definition from  IE5/6: table-row;
                } */


            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;language&lt;/span&gt;&lt;span&gt;=&quot;JavaScript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span&gt;
                           function expand(details_id)
               {
                  
                  document.getElementById(details_id).className = &quot;page_details_expanded&quot;;
               }
               
               function collapse(details_id)
               {
                  
                  document.getElementById(details_id).className = &quot;page_details&quot;;
               }
               
               function change(details_id)
               {
                  if(document.getElementById(details_id+&quot;_image&quot;).src.match(&quot;expand&quot;))
                  {
                     document.getElementById(details_id+&quot;_image&quot;).src = &quot;collapse.png&quot;;
                     expand(details_id);
                  }
                  else
                  {
                     document.getElementById(details_id+&quot;_image&quot;).src = &quot;expand.png&quot;;
                     collapse(details_id);
                  } 
                           }
            &lt;/span&gt;&lt;span&gt;]]&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pageHeader&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myresult&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;    
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;summary&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;75%&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pagelist&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;75%&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;detail&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pageHeader&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$titleReport&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;left&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Date report:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;from 一卡通&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myresult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allFailCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(/testResults/*[attribute::s='false'])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$allFailCount = '0'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试结果:成功&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$allFailCount &amp;amp;gt; '0'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2  &lt;/span&gt;&lt;span&gt;bgcolor&lt;/span&gt;&lt;span&gt;=&quot;#ff00ff&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试结果:失败&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2  &lt;/span&gt;&lt;span&gt;bgcolor&lt;/span&gt;&lt;span&gt;=&quot;#ff00ff&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;失败个数:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;count(/testResults/*[attribute::s='false'])&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    

  

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;summary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;报告概况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;details&quot;&lt;/span&gt;&lt;span&gt; border&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;95%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;valign&lt;/span&gt;&lt;span&gt;=&quot;top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用例总数&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;失败数&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成功率&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;平均响应时间&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;valign&lt;/span&gt;&lt;span&gt;=&quot;top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(/testResults/*)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allFailureCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(/testResults/*[attribute::s='false'])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allSuccessCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(/testResults/*[attribute::s='true'])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allSuccessPercent&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$allSuccessCount div $allCount&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allTotalTime&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;sum(/testResults/*/@t)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allAverageTime&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$allTotalTime div $allCount&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allMinTime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;min&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;nodes&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;/testResults/*/@t&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:variable&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allMaxTime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;max&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;nodes&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;/testResults/*/@t&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:variable&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$allFailureCount &amp;amp;gt; 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Failure&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$allCount&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$allFailureCount&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;display-percent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;value&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$allSuccessPercent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;display-time&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;value&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$allAverageTime&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pagelist&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;详细情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;details&quot;&lt;/span&gt;&lt;span&gt; border&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;95%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;valign&lt;/span&gt;&lt;span&gt;=&quot;top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;50%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;功能模块&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;检查次数&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;失败数&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成功率&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;平均响应时间&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:for-each &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;/testResults/*[not(@tn = preceding::*/@tn)]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;label&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;@tn&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;count&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(../*[@tn = current()/@tn])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;failureCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(../*[@tn = current()/@tn][attribute::s='false'])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;successCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(../*[@tn = current()/@tn][attribute::s='true'])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;successPercent&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$successCount div $count&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;totalTime&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;sum(../*[@tn = current()/@tn]/@t)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;averageTime&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$totalTime div $count&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;minTime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;min&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;nodes&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;../*[@tn = current()/@tn]/@t&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:variable&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxTime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;max&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;nodes&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;../*[@tn = current()/@tn]/@t&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:variable&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
            
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;valign&lt;/span&gt;&lt;span&gt;=&quot;top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$failureCount &amp;amp;gt; 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Failure&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$failureCount &amp;gt; 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;href&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;#&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$label&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$label&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;0 &amp;gt;= $failureCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$label&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$count&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$failureCount&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;display-percent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;value&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$successPercent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:call-template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;display-time&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:with-param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;value&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;$averageTime&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:call-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            

        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:for-each&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;detail&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allFailureCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(/testResults/*[attribute::s='false'])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$allFailureCount &amp;gt; 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Failure Detail&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:for-each &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;/testResults/*[not(@lb = preceding::*/@lb)]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;       
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:variable &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;failureCount&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;count(../*[@lb = current()/@lb][attribute::s='false'])&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;          
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$failureCount &amp;gt; 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:for-each &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;/testResults/*[@lb = current()/@lb][attribute::s='false']&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;            
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;@tn&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;---&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;@lb&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;@tn&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                

                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;details&quot;&lt;/span&gt;&lt;span&gt; border&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;95%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;valign&lt;/span&gt;&lt;span&gt;=&quot;top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http请求&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;失败详细信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$showData = 'y'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;响应数据&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
                
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;java.net.URL&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;assertionResult/failureMessage&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;$showData = 'y'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;responseData&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                
                
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:for-each&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:for-each&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;min&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;nodes&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;/..&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;not($nodes)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;NaN&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:for-each &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$nodes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:sort &lt;/span&gt;&lt;span&gt;data-type&lt;/span&gt;&lt;span&gt;=&quot;number&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;position() = 1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;number(.)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:for-each&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;max&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;nodes&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;/..&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;not($nodes)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;NaN&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:for-each &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;$nodes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:sort &lt;/span&gt;&lt;span&gt;data-type&lt;/span&gt;&lt;span&gt;=&quot;number&quot;&lt;/span&gt;&lt;span&gt; order&lt;/span&gt;&lt;span&gt;=&quot;descending&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;position() = 1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;number(.)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:for-each&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;display-percent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;value&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;format-number($value,'0.00%')&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;display-time&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;value&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xsl:value-of &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;=&quot;format-number($value,'0 ms')&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xsl:stylesheet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模板的截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304110000499-243571493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203965/201903/1203965-20190304110027656-1591378235.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 04 Mar 2019 03:01:00 +0000</pubDate>
<dc:creator>LuLu泡</dc:creator>
<og:description>首先，保证本地安装并部署了jenkins，jmeter，xslproc 我搭建的自动化测试框架是jmeter+jenkins+xslproc 注意：原理是，jmeter自生成的报告jtl文件，通过xs</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/muzipaopao/p/10469494.html</dc:identifier>
</item>
<item>
<title>从壹开始前后端 [vue后台] 之二 || 完美实现 JWT 滑动授权刷新 - 老张的哲学</title>
<link>http://www.cnblogs.com/laozhang-is-phi/p/10462316.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laozhang-is-phi/p/10462316.html</guid>
<description>&lt;p&gt;哈喽大家周一好！不知道小伙伴们有没有学习呀，近来发现各种俱乐部搞起来了，啥时候群里小伙伴也搞一次分享会吧，好歹也是半千了（时间真快，还记得5个月前只有20多人），之前在上个公司，虽然也参与组织过几次活动，这个再说吧，毕竟都是五湖四海的小伙伴，不太好聚😂。今天要说的内容很简单，但是个人感觉很实用，从文章标题就可见一斑：JWT的滑动授权，这个问题我被问了不下 n 次，从 6 个月前开始第一次写 JWT 授权，就有小伙伴陆陆续续在群里提问，说如何然这种无序化的 Token 令牌（不像 Session 那样，一直存在会话状态），达到滑动刷新，实现用户的无感知授权，我也一直在思考，大抵有以下一些思路：&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;1、token 失效后，直接跳转到登录页； &lt;span&gt;// UE体验感贼差&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、将 JWT 、 用户标识 ( 如：id ) 、过期时间等令牌信息存到数据库，配合用户进行操作； &lt;span&gt;// 额外的操作太多，连接数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、同样的上边的这些信息放到 Redis 里，再配合缓存，也可以高效处理；&lt;span&gt;// 虽然不操作数据库，但是变相破坏Token的无序性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、前端通过 refresh_token 来刷新 access_token；&lt;span&gt;// 本文要说明的，和这个类似的策略方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5、等等其他&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这些方法和策略我也一直和群里小伙伴讨论，但是却一直没有写文章，也一直没有真正的通过代码写出来，以前偷懒是因为只有后台 .net core 项目，后来自己又偷懒说只有博客项目，直观上不好实现，现在好了，终于在这段时间上线了后台管理系统，终于把这个问题提上了日程，那下边就开始今天的说明吧。&lt;/p&gt;
&lt;p&gt;老规矩，还是先看效果（这篇文章比较简单，但是有一丢丢的绕，希望看的时候，可以有十多分钟的安静时间，不要着急，自己研究出来的永远比问出来的要高效的多）：&lt;/p&gt;

&lt;p&gt;故事背景：&lt;/p&gt;
&lt;p&gt;当前 Token 将于 18:05:14 失效，以前的情况是，在失效后，直接跳转到登录页，但是现在不是了，&lt;/p&gt;
&lt;p&gt;在 18:05:19 的时候，执行查询，我们重新对 Token 进行无缝刷新，然后自动重发请求并成功加载数据，是不是达到了你想要的目的？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201903/1468246-20190302181524111-1382284825.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 那这个到底是如何实现的呢，复杂不复杂呢？如果是你想要的，请往下看 👍，保证每个人都能看懂，前提是你有 JWT 基础，至少用过。&lt;/p&gt;


&lt;h3&gt;1、传统的授权流程&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201903/1468246-20190302213318569-1202983484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传统的授权登录呢，很简单，也很直白，就是我们平时使用的，因为不像 session 那样，可以一直保持着状态，当我们的 Token 失效了以后，就只能重新获取一个新的 Token 令牌，这不仅仅是它的优点也是一个缺点，&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;优点就是可以支持分布式，多点式的访问，session 就不能实现分布式；&lt;/p&gt;
&lt;p&gt;缺点当然也是显而易见，当其过期了，就无法续签，或者一直保持激活状态；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们就只能重新获取一个，所以一般有的开发者就索性把 Token 的过期时间定的很长，比如一天，一周，甚至十天，只有用户在当前电脑上登录一次，以后就可以随心访问了，除非自己手动点击退出登录，说真的，这种情况我也在使用，因为我们公司的项目有一些是内部的前台项目，比如一个Tool，一个图表系统，或者一个简单的个人数据展示，一不怕被外网看到，不会被篡改，二没有公司其他人来使用我的电脑，我就定义了一个月的失效时间，平时就完全不用登录了，想想也是可以的。&lt;/p&gt;

&lt;p&gt;但是，更多的是需要用户去实时登录的，相信大家也用过一直公网的管理后台，关闭浏览器或者一段时间不操作以后，就会提示需要我们重新登录，所以我们就会把 Token 的失效时间定义的很短暂，比如我的一些项目就是 30 分钟，或者一个小时，这样不仅更安全，而且也可以应对那些存在变化的，比如后台管理系统，当前用户的角色变了，总不能还用之前的令牌吧，所以短时的 Token 刷新还是很有必要的。&lt;/p&gt;
&lt;p&gt;这样就会出现一个问题，如何实现滑动授权，就是在流程上，Token还是会失效，但是在用户体验 UE 上，实现无感操作，让用户在没有察觉的情况下，实现这个功能，你可以先停下来，想想如何设计，如果想好了，请继续往下看，看是否和你的思路一致。&lt;/p&gt;

&lt;h3&gt;2、实现滑动的授权流程&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201903/1468246-20190302213405061-2052925491.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两个流程图对比起来，不同点就在于虚线的问题，由之前的失效即跳转到登录页，多了一个选择——在用户活跃期内，通过旧的 token 换取新的 token 继续体系内循环，这样就达到了效果（这里还有一种，就是同时发放两个 token 到前端，一个是access_token，一个是 refresh_token，我做了等价处理，其实这两种是一样的）。&lt;/p&gt;
&lt;p&gt;这样不仅能满足无缝刷新的问题，还能保持 Token 的无序性，那具体的如何在项目中使用呢，请往下继续看。&lt;/p&gt;


&lt;p&gt;从上边的流程图中，我们可以看出来，其实要实现滑动刷新很简单，只需要我们在 Token 失效的时候，重新获取一个 token，并重新执行一个请求即可，所以我总结了以下三个步骤：&lt;/p&gt;
&lt;h3&gt;1、定义刷新时间戳&lt;/h3&gt;
&lt;p&gt;你一定会好奇为什么定义一个刷新时间，不知道你是否还记得上边我刚刚说到了，其实一般的做法是：每次登录，向前端丢两个 token，当我们的 access_token 失效的时候，就判断 refresh_token 是否有效，如果 refresh_token 有效，我们就把这个 refresh_token 带到资源服务器，换取新的 access_token，这样就实现了我们的目的。&lt;/p&gt;
&lt;p&gt;但是我们不想这么操作，太麻烦，还需要生成两个，所以就人为的在前端定义了一个刷新时间点，只要在这个时间点内并且 token 失效了，我就用这个失效的 token 获取新的token：&lt;/p&gt;
&lt;p&gt;在 Login.vue 页面中定义一个刷新时间：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; token =&lt;span&gt; data.token;
 _this.$store.commit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;saveToken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, token);&lt;span&gt;// &lt;/span&gt;&lt;span&gt;保存 token&lt;/span&gt;

 &lt;span&gt;var&lt;/span&gt; curTime = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; expiredate = &lt;span&gt;new&lt;/span&gt; Date(curTime.setSeconds(curTime.getSeconds() + data.expires_in)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义过期时间&lt;/span&gt;
 _this.$store.commit(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;saveTokenExpire&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, expiredate); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存过期时间&lt;/span&gt;
 &lt;span&gt;window.localStorage.refreshtime = expiredate; // 保存刷新时间，这里的和过期时间一致&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在浏览器中查看两个时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201903/1468246-20190302222831818-1922887038.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2、当执行操作时更新刷新时间（重要）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; A：定义方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在 api.js 文件中，定义了保存刷新时间的方法 saveRefreshtime() ，这个的作用主要是记录当前用户的操作活跃期，当在这个活跃期内，就可以滑动更新，如果超过了这个时期，就跳转到登录页：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;const&lt;/span&gt; saveRefreshtime = &lt;span&gt;params&lt;/span&gt; =&amp;gt;&lt;span&gt; {

    let nowtime &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
    let lastRefreshtime &lt;/span&gt;= window.localStorage.refreshtime ? &lt;span&gt;new&lt;/span&gt; Date(window.localStorage.refreshtime) : &lt;span&gt;new&lt;/span&gt; Date(-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    let expiretime &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(Date.parse(window.localStorage.TokenExpire))

    &lt;span&gt;let refreshCount&lt;/span&gt;&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;滑动系数&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (lastRefreshtime &amp;gt;=&lt;span&gt; nowtime) {
        &lt;span&gt;lastRefreshtime&lt;/span&gt;&lt;/span&gt;&lt;span&gt;=nowtime&amp;gt;expiretime ?&lt;/span&gt;&lt;span&gt;&lt;span&gt; nowtime:expiretime;&lt;/span&gt;
        lastRefreshtime.setMinutes(lastRefreshtime.getMinutes() &lt;/span&gt;+&lt;span&gt; refreshCount);
        window.localStorage.refreshtime &lt;/span&gt;=&lt;span&gt; lastRefreshtime;
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        window.localStorage.refreshtime &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Date(-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上边的方法中，红色的是重要的两点：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、滑动系数 refreshCount&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个是什么意思呢，就是你自定义的用户的停止活跃时间段，比如你想用户最大的休眠时间是20分钟，说句人话就是，用户可以最多20分钟内不进行操作，如果20分钟后，再操作，就跳转到登录页，如果20分钟内，继续操作，那继续更新时间，休眠时间还是以当前时间+20分钟。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2、最后刷新时间 lastRefreshtime&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 这个就是上边说到的，当用户操作的时候，实时更新最后的刷新时间，保证用户活跃时间一直有效，这里有一个重要的就是：&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;lastRefreshtime=nowtime&amp;gt;expiretime ?&lt;span&gt; nowtime:expiretime;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;我为什么要这么写呢，因为你考虑一下，如果 Token 的过期时间比你自己定义的刷新时间还长，举个栗子，你后台定义的 token 过期时间是30分钟，但是你的前端页面刷新时间是20分钟，当你登录后，30分钟内没有任何操作，再31分钟的时候，重新操作，token 肯定是无效了，但是很巧，你的刷新时间也是十分钟前，那就只能去登录页了，这样达不到刷新的目的，所以我经过大量测试，无论是token过期时间，还是页面刷新时间，只要取一个较大者就行，然后加上滑动系数，这样就能满足各种情况，不信你可以试试。 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B：两处调用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那现在既然定义了这个刷新方法，在哪里调用呢，我这里想到了两个地方，当然，你也可以根据自己的需要进行自定义设计，我的是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;、在路由钩子里刷新； &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在 router.js  的 router.beforeEach 调用方法 saveRefreshtime(),保证每次进行路由切换的时候，都激活用户活跃时间。&lt;/span&gt;

&lt;span&gt;2&lt;/span&gt;、在 HttpRequest 钩子刷新；&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在 api.js 的 axios.interceptors.request.use 中调用 saveRefreshtime() ，因为有可能用户长时间操作同一个页面，没有进行路由切换。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我这里就处理了这两个地方，无论是用户切换路由，还是在同一个路由的不同按钮操作，都能保证当前用户是在操作活跃期的，进而实现滑动的效果。&lt;/p&gt;


&lt;h3&gt;3、Token无效时，无缝获取新Token，并重新请求（核心）&lt;/h3&gt;
&lt;p&gt; 现在就到了关键时刻了，定义好了刷新时间，那如何进行滑动效果呢？请先看下边代码，重点是红色的部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; http response 拦截器&lt;/span&gt;
&lt;span&gt;axios.interceptors.response.use(
    response &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; response;
    },
    error &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (error.response) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (error.response.status == &lt;span&gt;401&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; curTime = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date()
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; refreshtime = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(Date.parse(window.localStorage.refreshtime))&lt;br/&gt;&lt;span&gt;// 在用户操作的活跃期内
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;window.localStorage.refreshtime &amp;amp;&amp;amp; (curTime &amp;lt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt; refreshtime)&lt;/span&gt;) {&lt;br/&gt;&lt;span&gt;// 直接将整个请求 return 出去，不然的话，请求会晚于当前请求，无法达到刷新操作&lt;/span&gt; 
                    &lt;/span&gt;&lt;span&gt;return &lt;/span&gt; &lt;span&gt;refreshToken&lt;/span&gt;({token: window.localStorage.Token}).then((res) =&amp;gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (res.success) {
                            Vue.prototype.$message({
                                message: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;refreshToken success! loading data...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                            });

                            store.commit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;saveToken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, res.token);

                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; curTime = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; expiredate = &lt;span&gt;new&lt;/span&gt; Date(curTime.setSeconds(curTime.getSeconds() +&lt;span&gt; res.expires_in));
                            store.commit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;saveTokenExpire&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, expiredate);

                            &lt;span&gt;error.config.__isRetryRequest &lt;/span&gt;&lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                            &lt;span&gt;error.config.headers.Authorization&lt;/span&gt; &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Bearer &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; res.token;&lt;br/&gt;&lt;span&gt;                            // error.config 包含了当前请求的所有信息
                            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;&lt;span&gt; axios(error.config);&lt;/span&gt;
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 刷新token失败 清除token信息并跳转到登录页面&lt;/span&gt;
&lt;span&gt;                            ToLogin()
                        }
                    });
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回 401，并且不知用户操作活跃期内 清除token信息并跳转到登录页面&lt;/span&gt;
&lt;span&gt;                    ToLogin()
                }

            }
            &lt;span&gt;// 403 无权限
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (error.response.status == &lt;span&gt;403&lt;/span&gt;&lt;span&gt;) {
                Vue.prototype.$message({
                    message: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;失败！该操作无权限&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                });&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回接口返回的错误信息&lt;/span&gt;
&lt;span&gt;    }
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中要注意的是三点：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;1、判断是否是在用户操作活跃期，如果不在，直接跳转登录页，反之，进行 refresh 操作；&lt;/p&gt;
&lt;p&gt;2、return refreshToken ，这里是两个return 的第一个，需要将刷新token的网络请求返回过去，不然的话，刷新token的请求成功后，当前网络请求已经结束了，无法达到刷新的目的；&lt;/p&gt;
&lt;p&gt;3、return axios(error.config) ，这里就是重新进行一次请求，特别是 error.config ，这个就是我们当前请求的全部信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201903/1468246-20190304105031757-57794712.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;好啦，JWT 滑动授权刷新就到这里已经完成了，是不是很简单。&lt;/p&gt;


&lt;h3&gt;1、Redis，控制 Token 颁发 &lt;/h3&gt;
&lt;p&gt;除了这个前端方法以为，还有后端处理，设计思路也很简单，我就不多说了，简单说两句：&lt;/p&gt;
&lt;p&gt;当用户登录的时候，生成 access_token ，我们把 token 存在 redis 缓存中，对应匹配用户标识，状态等，当用户修改了密码，或者当前用户的权限被超级管理修改的时候，把 redis 中的当前用户的token 也更新操作，等用户再次使用的时候，先判断当前用的 token 是否有效，然后再判断是否有权限，这样也能达到效果。如果过期了，还可以把新的token 放到 Header 中返回过去，不过这样的方法，还是需要配合前端操作，个人感觉还不如上边的方法。&lt;/p&gt;
&lt;p&gt;如果有想尝试的小伙伴，可以自己尝试下，我简单提示一下，就是在后端项目的 PermissionHandler.cs 文件中，对当前 httpContext.Request.Headers[&quot;Authorization&quot;] 进行获取 token 判断，至于怎么操作这里就不表了。&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/anjoy8/Blog.Admin&quot; target=&quot;_blank&quot;&gt;https://github.com/anjoy8/Blog.Admin&lt;/a&gt; 前端&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/anjoy8/Blog.Core&quot; target=&quot;_blank&quot;&gt;https://github.com/anjoy8/Blog.Core&lt;/a&gt; 后端 &lt;/p&gt;
&lt;p&gt;-- ♥ -- ♥ -- ♥ -- ♥ -- ♥ -- ♥ --&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 02:58:00 +0000</pubDate>
<dc:creator>老张的哲学</dc:creator>
<og:description>缘起 哈喽大家周一好！不知道小伙伴们有没有学习呀，近来发现各种俱乐部搞起来了，啥时候群里小伙伴也搞一次分享会吧，好歹也是半千了（时间真快，还记得5个月前只有20多人），之前在上个公司，虽然也参与组织过</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laozhang-is-phi/p/10462316.html</dc:identifier>
</item>
<item>
<title>Java使用POI读取和写入Excel指南 - Dreamer-1</title>
<link>http://www.cnblogs.com/Dreamer-1/p/10469430.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dreamer-1/p/10469430.html</guid>
<description>&lt;p&gt;做项目时经常有通过程序读取Excel数据，或是创建新的Excel并写入数据的需求；&lt;/p&gt;&lt;p&gt;网上很多经验教程里使用的POI版本都比较老了，一些API在新版里已经废弃，这里基于最新的&lt;code&gt;Apache POI 4.0.1&lt;/code&gt;版本来总结一下整个读取和写入Excel的过程，希望能帮助到需要的人 ^_^&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;1. 准备工作&lt;/h2&gt;
&lt;h3 id=&quot;在项目中引入apache-poi相关类库&quot;&gt;1.1 在项目中引入Apache POI相关类库&lt;/h3&gt;
&lt;p&gt;引入 &lt;strong&gt;Apache POI&lt;/strong&gt; 和 &lt;strong&gt;Apache POI-OOXML&lt;/strong&gt; 这两个类库，Maven坐标如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.poi&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;poi&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.poi&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;poi-ooxml&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;读取或写入excel数据&quot;&gt;2. 读取或写入Excel数据&lt;/h2&gt;
&lt;h3 id=&quot;示例程序结构说明&quot;&gt;2.1 示例程序结构说明&lt;/h3&gt;
&lt;p&gt;简单说明一下示例程序的整体结构：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ExcelReader.java&lt;/code&gt;是实现读取Excel数据功能的类；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExcelWriter.java&lt;/code&gt;是创建新的Excel并向其中写入数据的类；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExcelDataVO.java&lt;/code&gt;封装了读取或写入时每一“行”的数据；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MainTest.java&lt;/code&gt;是示例程序的入口类，其中演示了读取和写入Excel数据的整个过程；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;读取数据&quot;&gt;2.2 读取数据&lt;/h3&gt;
&lt;p&gt;示例程序需要从桌面读取 readExample.xlsx 内的数据，readExample.xlsx 的内容如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/946400/201903/946400-20190304105005995-318255776.png&quot; alt=&quot;读取示例图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;读取Excel时主要调用&lt;code&gt;ExcelReader.java&lt;/code&gt;类来读取和解析Excel的具体内容，这里以读取系统文件的形式演示读取过程：（兼容 xls 和 xlsx）&lt;/p&gt;
&lt;h4 id=&quot;主程序入口类代码&quot;&gt;2.2.1 主程序入口类代码：&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * Author: Dreamer-1
 * Date: 2019-03-01
 * Time: 10:13
 * Description: 示例程序入口类
 */
public class MainTest {

    public static void main(String[] args) {
        // 设定Excel文件所在路径
        String excelFileName = &quot;/Users/Dreamer-1/Desktop/myBlog/java解析Excel/readExample.xlsx&quot;;
        // 读取Excel文件内容
        List&amp;lt;ExcelDataVO&amp;gt; readResult = ExcelReader.readExcel(excelFileName);
        
        // todo 进行业务操作
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;读取和写入时封装每一“行”数据的ExcelDataVO.java代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * Author: Dreamer-1
 * Date: 2019-03-01
 * Time: 11:33
 * Description: 读取Excel时，封装读取的每一行的数据
 */
public class ExcelDataVO {

    /**
     * 姓名
     */
    private String name;

    /**
     * 年龄
     */
    private Integer age;

    /**
     * 居住地
     */
    private String location;

    /**
     * 职业
     */
    private String job;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getJob() {
        return job;
    }

    public void setJob(String job) {
        this.job = job;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;excel解析类的代码&quot;&gt;2.2.2 Excel解析类的代码：&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * Author: Dreamer-1
 * Date: 2019-03-01
 * Time: 10:21
 * Description: 读取Excel内容
 */
public class ExcelReader {

    private static Logger logger = Logger.getLogger(ExcelReader.class.getName()); // 日志打印类

    private static final String XLS = &quot;xls&quot;;
    private static final String XLSX = &quot;xlsx&quot;;

    /**
     * 根据文件后缀名类型获取对应的工作簿对象
     * @param inputStream 读取文件的输入流
     * @param fileType 文件后缀名类型（xls或xlsx）
     * @return 包含文件数据的工作簿对象
     * @throws IOException
     */
    public static Workbook getWorkbook(InputStream inputStream, String fileType) throws IOException {
        Workbook workbook = null;
        if (fileType.equalsIgnoreCase(XLS)) {
            workbook = new HSSFWorkbook(inputStream);
        } else if (fileType.equalsIgnoreCase(XLSX)) {
            workbook = new XSSFWorkbook(inputStream);
        }
        return workbook;
    }

    /**
     * 读取Excel文件内容
     * @param fileName 要读取的Excel文件所在路径
     * @return 读取结果列表，读取失败时返回null
     */
    public static List&amp;lt;ExcelDataVO&amp;gt; readExcel(String fileName) {

        Workbook workbook = null;
        FileInputStream inputStream = null;

        try {
            // 获取Excel后缀名
            String fileType = fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1, fileName.length());
            // 获取Excel文件
            File excelFile = new File(fileName);
            if (!excelFile.exists()) {
                logger.warning(&quot;指定的Excel文件不存在！&quot;);
                return null;
            }

            // 获取Excel工作簿
            inputStream = new FileInputStream(excelFile);
            workbook = getWorkbook(inputStream, fileType);

            // 读取excel中的数据
            List&amp;lt;ExcelDataVO&amp;gt; resultDataList = parseExcel(workbook);

            return resultDataList;
        } catch (Exception e) {
            logger.warning(&quot;解析Excel失败，文件名：&quot; + fileName + &quot; 错误信息：&quot; + e.getMessage());
            return null;
        } finally {
            try {
                if (null != workbook) {
                    workbook.close();
                }
                if (null != inputStream) {
                    inputStream.close();
                }
            } catch (Exception e) {
                logger.warning(&quot;关闭数据流出错！错误信息：&quot; + e.getMessage());
                return null;
            }
        }
    }

    /**
     * 解析Excel数据
     * @param workbook Excel工作簿对象
     * @return 解析结果
     */
    private static List&amp;lt;ExcelDataVO&amp;gt; parseExcel(Workbook workbook) {
       List&amp;lt;ExcelDataVO&amp;gt; resultDataList = new ArrayList&amp;lt;&amp;gt;();
        // 解析sheet
        for (int sheetNum = 0; sheetNum &amp;lt; workbook.getNumberOfSheets(); sheetNum++) {
            Sheet sheet = workbook.getSheetAt(sheetNum);

            // 校验sheet是否合法
            if (sheet == null) {
                continue;
            }

            // 获取第一行数据
            int firstRowNum = sheet.getFirstRowNum();
            Row firstRow = sheet.getRow(firstRowNum);
            if (null == firstRow) {
                logger.warning(&quot;解析Excel失败，在第一行没有读取到任何数据！&quot;);
            }

            // 解析每一行的数据，构造数据对象
            int rowStart = firstRowNum + 1;
            int rowEnd = sheet.getPhysicalNumberOfRows();
            for (int rowNum = rowStart; rowNum &amp;lt; rowEnd; rowNum++) {
                Row row = sheet.getRow(rowNum);

                if (null == row) {
                    continue;
                }

                ExcelDataVO resultData = convertRowToData(row);
                if (null == resultData) {
                    logger.warning(&quot;第 &quot; + row.getRowNum() + &quot;行数据不合法，已忽略！&quot;);
                    continue;
                }
                resultDataList.add(resultData);
            }
        }

        return resultDataList;
    }

    /**
     * 将单元格内容转换为字符串
     * @param cell
     * @return
     */
    private static String convertCellValueToString(Cell cell) {
        if(cell==null){
            return null;
        }
        String returnValue = null;
        switch (cell.getCellType()) {
            case NUMERIC:   //数字
                Double doubleValue = cell.getNumericCellValue();

                // 格式化科学计数法，取一位整数
                DecimalFormat df = new DecimalFormat(&quot;0&quot;);
                returnValue = df.format(doubleValue);
                break;
            case STRING:    //字符串
                returnValue = cell.getStringCellValue();
                break;
            case BOOLEAN:   //布尔
                Boolean booleanValue = cell.getBooleanCellValue();
                returnValue = booleanValue.toString();
                break;
            case BLANK:     // 空值
                break;
            case FORMULA:   // 公式
                returnValue = cell.getCellFormula();
                break;
            case ERROR:     // 故障
                break;
            default:
                break;
        }
        return returnValue;
    }

    /**
     * 提取每一行中需要的数据，构造成为一个结果数据对象
     *
     * 当该行中有单元格的数据为空或不合法时，忽略该行的数据
     *
     * @param row 行数据
     * @return 解析后的行数据对象，行数据错误时返回null
     */
    private static ExcelDataVO convertRowToData(Row row) {
        ExcelDataVO resultData = new ExcelDataVO();

        Cell cell;
        int cellNum = 0;
        // 获取姓名
        cell = row.getCell(cellNum++);
        String name = convertCellValueToString(cell);
        resultData.setName(name);
        // 获取年龄
        cell = row.getCell(cellNum++);
        String ageStr = convertCellValueToString(cell);
        if (null == ageStr || &quot;&quot;.equals(ageStr)) {
            // 年龄为空
            resultData.setAge(null);
        } else {
            resultData.setAge(Integer.parseInt(ageStr));
        }
        // 获取居住地
        cell = row.getCell(cellNum++);
        String location = convertCellValueToString(cell);
        resultData.setLocation(location);
        // 获取职业
        cell = row.getCell(cellNum++);
        String job = convertCellValueToString(cell);
        resultData.setJob(job);

        return resultData;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;应用场景补充&quot;&gt;2.2.3 应用场景补充&lt;/h4&gt;
&lt;p&gt;一般我们会有这样的应用场景，即：在前台页面的文件上传入口上传本地的Excel文件到后台，后台收到Excel文件后进行解析并做对应的业务操作；&lt;/p&gt;&lt;p&gt;这里假设前台已经有了上传文件的入口，再简单贴一下后台的解析代码；&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;后台接收前台数据的Controller层代码示例：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    @PostMapping(&quot;/uploadExcel&quot;)
    public ResponseEntity&amp;lt;?&amp;gt; uploadImage(MultipartFile file) {

        // 检查前台数据合法性
        if (null == file || file.isEmpty()) {
            logger.warning(&quot;上传的Excel商品数据文件为空！上传时间：&quot; + new Date());
            return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.BAD_REQUEST);
        }

        try {
            // 解析Excel
            List&amp;lt;ExcelDataVO&amp;gt; parsedResult = ExcelReader.readExcel(file);
            // todo 进行业务操作

            return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.OK);
        } catch (Exception e) {
            logger.warning(&quot;上传的Excel商品数据文件为空！上传时间：&quot; + new Date());
            return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.BAD_REQUEST);
        }

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ExcelReader.java中的 &lt;em&gt;readExcel()&lt;/em&gt; 方法需要做一定的修改，代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 读取Excel文件内容
     * @param file 上传的Excel文件
     * @return 读取结果列表，读取失败时返回null
     */
    public static List&amp;lt;ExcelDataVO&amp;gt; readExcel(MultipartFile file) {

        Workbook workbook = null;

        try {
            // 获取Excel后缀名
            String fileName = file.getOriginalFilename();
            if (fileName == null || fileName.isEmpty() || fileName.lastIndexOf(&quot;.&quot;) &amp;lt; 0) {
                logger.warning(&quot;解析Excel失败，因为获取到的Excel文件名非法！&quot;);
                return null;
            }
            String fileType = fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1, fileName.length());

            // 获取Excel工作簿
            workbook = getWorkbook(file.getInputStream(), fileType);

            // 读取excel中的数据
            List&amp;lt;ExcelDataVO&amp;gt; resultDataList = parseExcel(workbook);

            return resultDataList;
        } catch (Exception e) {
            logger.warning(&quot;解析Excel失败，文件名：&quot; + file.getOriginalFilename() + &quot; 错误信息：&quot; + e.getMessage());
            return null;
        } finally {
            try {
                if (null != workbook) {
                    workbook.close();
                }
            } catch (Exception e) {
                logger.warning(&quot;关闭数据流出错！错误信息：&quot; + e.getMessage());
                return null;
            }
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;写入数据&quot;&gt;2.3 写入数据&lt;/h3&gt;
&lt;p&gt;写入数据时主要调用&lt;code&gt;ExcelWriter.java&lt;/code&gt;来创建Excel工作簿对象并写入数据，这里以写入系统文件数据为例演示写入的过程：&lt;/p&gt;
&lt;h4 id=&quot;主程序入口类代码-1&quot;&gt;2.3.1 主程序入口类代码&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * Author: Dreamer-1
 * Date: 2019-03-01
 * Time: 10:13
 * Description: 示例程序入口类
 */
public class MainTest {

    private static Logger logger = Logger.getLogger(MainTest.class.getName());

    public static void main(String[] args) {
        // 创建需要写入的数据列表
        List&amp;lt;ExcelDataVO&amp;gt; dataVOList = new ArrayList&amp;lt;&amp;gt;(2);
        ExcelDataVO dataVO = new ExcelDataVO();
        dataVO.setName(&quot;小明&quot;);
        dataVO.setAge(18);
        dataVO.setLocation(&quot;广州&quot;);
        dataVO.setJob(&quot;大学生&quot;);
        ExcelDataVO dataVO2 = new ExcelDataVO();
        dataVO2.setName(&quot;小花&quot;);
        dataVO2.setAge(19);
        dataVO2.setLocation(&quot;深圳&quot;);
        dataVO2.setJob(&quot;大学生&quot;);
        dataVOList.add(dataVO);
        dataVOList.add(dataVO2);

        // 写入数据到工作簿对象内
        Workbook workbook = ExcelWriter.exportData(dataVOList);

        // 以文件的形式输出工作簿对象
        FileOutputStream fileOut = null;
        try {
            String exportFilePath = &quot;/Users/Dreamer-1/Desktop/myBlog/java解析Excel/writeExample.xlsx&quot;;
            File exportFile = new File(exportFilePath);
            if (!exportFile.exists()) {
                exportFile.createNewFile();
            }

            fileOut = new FileOutputStream(exportFilePath);
            workbook.write(fileOut);
            fileOut.flush();
        } catch (Exception e) {
            logger.warning(&quot;输出Excel时发生错误，错误原因：&quot; + e.getMessage());
        } finally {
            try {
                if (null != fileOut) {
                    fileOut.close();
                }
                if (null != workbook) {
                    workbook.close();
                }
            } catch (IOException e) {
                logger.warning(&quot;关闭输出流时发生错误，错误原因：&quot; + e.getMessage());
            }
        }

    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;写入excel类的代码&quot;&gt;2.3.2 写入Excel类的代码&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ExcelWriter.java&lt;/code&gt;类中，你可以根据实际需要替换 &lt;strong&gt;CELL_HEADS&lt;/strong&gt; 列头的信息，然后重写 &lt;em&gt;convertDataToRow&lt;/em&gt; 方法，转换你自己的行数据；&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * Author: Dreamer-1
 * Date: 2019-03-01
 * Time: 11:09
 * Description: 生成Excel并写入数据
 */
public class ExcelWriter {

    private static List&amp;lt;String&amp;gt; CELL_HEADS; //列头

    static{
        // 类装载时就载入指定好的列头信息，如有需要，可以考虑做成动态生成的列头
        CELL_HEADS = new ArrayList&amp;lt;&amp;gt;();
        CELL_HEADS.add(&quot;姓名&quot;);
        CELL_HEADS.add(&quot;年龄&quot;);
        CELL_HEADS.add(&quot;居住城市&quot;);
        CELL_HEADS.add(&quot;职业&quot;);
    }

    /**
     * 生成Excel并写入数据信息
     * @param dataList 数据列表
     * @return 写入数据后的工作簿对象
     */
    public static Workbook exportData(List&amp;lt;ExcelDataVO&amp;gt; dataList){
        // 生成xlsx的Excel
        Workbook workbook = new SXSSFWorkbook();

        // 如需生成xls的Excel，请使用下面的工作簿对象，注意后续输出时文件后缀名也需更改为xls
        //Workbook workbook = new HSSFWorkbook();

        // 生成Sheet表，写入第一行的列头
        Sheet sheet = buildDataSheet(workbook);
        //构建每行的数据内容
        int rowNum = 1;
        for (Iterator&amp;lt;ExcelDataVO&amp;gt; it = dataList.iterator(); it.hasNext(); ) {
            ExcelDataVO data = it.next();
            if (data == null) {
                continue;
            }
            //输出行数据
            Row row = sheet.createRow(rowNum++);
            convertDataToRow(data, row);
        }
        return workbook;
    }

    /**
     * 生成sheet表，并写入第一行数据（列头）
     * @param workbook 工作簿对象
     * @return 已经写入列头的Sheet
     */
    private static Sheet buildDataSheet(Workbook workbook) {
        Sheet sheet = workbook.createSheet();
        // 设置列头宽度
        for (int i=0; i&amp;lt;CELL_HEADS.size(); i++) {
            sheet.setColumnWidth(i, 4000);
        }
        // 设置默认行高
        sheet.setDefaultRowHeight((short) 400);
        // 构建头单元格样式
        CellStyle cellStyle = buildHeadCellStyle(sheet.getWorkbook());
        // 写入第一行各列的数据
        Row head = sheet.createRow(0);
        for (int i = 0; i &amp;lt; CELL_HEADS.size(); i++) {
            Cell cell = head.createCell(i);
            cell.setCellValue(CELL_HEADS.get(i));
            cell.setCellStyle(cellStyle);
        }
        return sheet;
    }

    /**
     * 设置第一行列头的样式
     * @param workbook 工作簿对象
     * @return 单元格样式对象
     */
    private static CellStyle buildHeadCellStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        //对齐方式设置
        style.setAlignment(HorizontalAlignment.CENTER);
        //边框颜色和宽度设置
        style.setBorderBottom(BorderStyle.THIN);
        style.setBottomBorderColor(IndexedColors.BLACK.getIndex()); // 下边框
        style.setBorderLeft(BorderStyle.THIN);
        style.setLeftBorderColor(IndexedColors.BLACK.getIndex()); // 左边框
        style.setBorderRight(BorderStyle.THIN);
        style.setRightBorderColor(IndexedColors.BLACK.getIndex()); // 右边框
        style.setBorderTop(BorderStyle.THIN);
        style.setTopBorderColor(IndexedColors.BLACK.getIndex()); // 上边框
        //设置背景颜色
        style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        //粗体字设置
        Font font = workbook.createFont();
        font.setBold(true);
        style.setFont(font);
        return style;
    }

    /**
     * 将数据转换成行
     * @param data 源数据
     * @param row 行对象
     * @return
     */
    private static void convertDataToRow(ExcelDataVO data, Row row){
        int cellNum = 0;
        Cell cell;
        // 姓名
        cell = row.createCell(cellNum++);
        cell.setCellValue(null == data.getName() ? &quot;&quot; : data.getName());
        // 年龄
        cell = row.createCell(cellNum++);
        if (null != data.getAge()) {
            cell.setCellValue(data.getAge());
        } else {
            cell.setCellValue(&quot;&quot;);
        }
        // 所在城市
        cell = row.createCell(cellNum++);
        cell.setCellValue(null == data.getLocation() ? &quot;&quot; : data.getLocation());
        // 职业
        cell = row.createCell(cellNum++);
        cell.setCellValue(null == data.getJob() ? &quot;&quot; : data.getJob());
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例程序运行后将会在指定的系统路径下生成 &lt;code&gt;writeExample.xlsx&lt;/code&gt;文件，其内容如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/946400/201903/946400-20190304105027670-553175183.png&quot; alt=&quot;写入示例图&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;应用场景补充-1&quot;&gt;2.3.3 应用场景补充&lt;/h4&gt;
&lt;p&gt;一般写入Excel时会有这样的场景：前台页面上有一个导出按钮，点击后将后台某张表里的数据以Excel的形式导出，导出的Excel文件通过浏览器下载到用户系统中；&lt;/p&gt;&lt;p&gt;这里默认前台页面已经有相应的按钮功能，给出对应的Controller层代码供参考：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    @GetMapping(&quot;/exportExcel&quot;)
    public void exportExcel(HttpServletRequest request, HttpServletResponse response) {
        Workbook workbook = null;
        OutputStream out = null;
        try {
            // todo 根据业务需求获取需要写入Excel的数据列表 dataList

            // 生成Excel工作簿对象并写入数据
            workbook = ExcelWriter.exportData(dataList);

            // 写入Excel文件到前端
            if(null != workbook){
                String excelName = &quot;示例Excel导出&quot;;
                String fileName = excelName + DateUtil.format(new Date(), DateUtil.SHORT_DATE) + &quot;.xlsx&quot;;
                fileName = new String(fileName.getBytes(&quot;UTF-8&quot;),&quot;iso8859-1&quot;);
                response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName);
                response.setContentType(&quot;application/x-download&quot;);
                response.setCharacterEncoding(&quot;UTF-8&quot;);
                response.addHeader(&quot;Pargam&quot;, &quot;no-cache&quot;);
                response.addHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);
                response.flushBuffer();
                out = response.getOutputStream();
                workbook.write(out);
                out.flush();
            }
        } catch (Exception e) {
            logger.WARNING(&quot;写入Excel过程出错！错误原因：&quot; + e.getMessage());
        } finally {
            try {
                if (null != workbook) {
                    workbook.close();
                }
                if (null != out) {
                    out.close();
                }
            } catch (IOException e) {
                logger.WARNING(&quot;关闭workbook或outputStream出错！&quot;);
            }
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 前台页面发送请求到后台Controller时的JS代码可参考：

var url = &quot;/exportExcel&quot;;
window.location=url;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;源码下载&quot;&gt;3. 源码下载&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/Dreamer-1/Excel%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81.zip&quot;&gt;点我哦&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 02:52:00 +0000</pubDate>
<dc:creator>Dreamer-1</dc:creator>
<og:description>Java使用POI读取和写入Excel指南 ============== 做项目时经常有通过程序读取Excel数据，或是创建新的Excel并写入数据的需求； 网上很多经验教程里使用的POI版本都比较老</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dreamer-1/p/10469430.html</dc:identifier>
</item>
</channel>
</rss>