<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>简单易懂的JS继承图解 - 一只菜鸟攻城狮啊</title>
<link>http://www.cnblogs.com/suihang/p/13569381.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/suihang/p/13569381.html</guid>
<description>&lt;div class=&quot;lake-engine-view lake-typography-classic&quot; readability=&quot;68&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;JS继承的实现方式一共有八种。下面我们来一个一个瞅一下。注意⚠️：文章依据个人理解，难免有问题，还望各位及时指出!!!!!&lt;/p&gt;
&lt;ul data-lake-id=&quot;c6fd6657a76cb8bc16c248f2282c5ea3&quot;&gt;&lt;li data-lake-id=&quot;f4ac260799d318766480ed8b6f3d73ac&quot;&gt;原型链继承&lt;/li&gt;
&lt;li data-lake-id=&quot;d44a5866fa060be0ee2824ecee2e317f&quot;&gt;借用构造函数继承&lt;/li&gt;
&lt;li data-lake-id=&quot;448708863d38cf0d04c594ed9d16e9e8&quot;&gt;组合继承&lt;/li&gt;
&lt;li data-lake-id=&quot;d6edf60a42065d81ac84ff54788d342f&quot;&gt;原型式继承&lt;/li&gt;
&lt;li data-lake-id=&quot;19d064d12480c6a3b35915fa9e0ab2ed&quot;&gt;寄生继承&lt;/li&gt;
&lt;li data-lake-id=&quot;35d6bcd413c319500f4ec6eebb4c84b3&quot;&gt;寄生组合式继承&lt;/li&gt;
&lt;li data-lake-id=&quot;f8a9dc23d10fd3846aebe0844c84b2d4&quot;&gt;原型拷贝和构造函数实现继承&lt;/li&gt;
&lt;li data-lake-id=&quot;450596e846c028ae0ab1924896a2e3f2&quot;&gt;Class继承&lt;/li&gt;
&lt;li data-lake-id=&quot;f5f224c4e425c902f4791c098af79654&quot;&gt;混入方式继承多个对象&lt;/li&gt;
&lt;/ul&gt;&lt;p data-lake-id=&quot;ea647568e52f2f436960c80e7505b0ce&quot;&gt;我们先创建一个父类&lt;/p&gt;
&lt;div id=&quot;c3KOe&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%2F%2F%20%E7%88%B6%E7%B1%BB%5Cn%20%20function%20Animal(name%2C%20color)%7B%5Cn%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%20%20this.attribute%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20color%3A%20color%2C%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20this.action%20%3D%20function%20(currentAction)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log(this.name%20%2B%20currentAction)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%7D%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22c3KOe%22%2C%22autoWrap%22%3Afalse%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 父类&lt;/span&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(name, color){
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.attribute =&lt;span&gt; {
          color: color,
      }
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.action = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (currentAction) {
          console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name +&lt;span&gt; currentAction)
      }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;yB1vZ&quot; data-lake-id=&quot;d79d9e65cffae228c9ae1407222e0932&quot;&gt;原型链继承&lt;/h3&gt;
&lt;h4 id=&quot;qrJ30&quot; data-lake-id=&quot;8833ac6a7b66372daa8d7c1f44c730c7&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;0f2f6c91585dca110fb52ea5449a65ed&quot;&gt;原理：将父类的实例作为子类的原型&lt;/p&gt;
&lt;div id=&quot;rp2Lm&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20%20function%20OrangeCat()%7B%7D%3B%5Cn%20%20%20%20OrangeCat.prototype%20%3D%20new%20Animal('%E6%A9%98%E7%8C%AB'%2C'%E6%A9%98%E8%89%B2%F0%9F%8D%8A')%3B%5Cn%5Ct%5Ct%2F%2F%20%E7%9B%B8%E5%BD%93%E4%BA%8EOrangeCat.prototype.__proto__%20%3D%20new%20Animal('%E6%A9%98%E7%8C%AB'%2C'%E6%A9%98%E8%89%B2%F0%9F%8D%8A').__proto__%3B%5Cn%5Ct%5Ct%2F%2F%20__proto__%E6%98%AF%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%5Cn%20%20%20%20let%20firstOrangeCat%20%3D%20new%20OrangeCat()%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22rp2Lm%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; OrangeCat(){};
    OrangeCat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Animal('橘猫','橘色🍊'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 相当于OrangeCat.prototype.__proto__ = new Animal('橘猫','橘色🍊').__proto__;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __proto__是系统变量，可以省略&lt;/span&gt;
    let firstOrangeCat = &lt;span&gt;new&lt;/span&gt; OrangeCat();
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;pwye1&quot; data-lake-id=&quot;7fff19e10926e6819fcc1d1c8bafdd0c&quot;&gt;缺陷&lt;/h4&gt;
&lt;ul data-lake-id=&quot;53c5aa51c45d26680c3d1f50bd721086&quot;&gt;&lt;li data-lake-id=&quot;85c0b99e560e537e617cab25bfe1d456&quot;&gt;缺少constructor，需要手动添加&lt;/li&gt;
&lt;li data-lake-id=&quot;3e006fd1b58336b306c0663683506f69&quot;&gt;引用类型的属性被所有子类实例共享&lt;/li&gt;
&lt;li data-lake-id=&quot;3b68bb0d9623a9c2d374a513e3c2ed8b&quot;&gt;&lt;span class=&quot;lake-fontsize-11&quot;&gt;子类实例化时无法向父类构造函数传参&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-lake-id=&quot;5a5816da3f637750fe77950e8ec4f1dd&quot;&gt;&lt;strong&gt;缺少constructor&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;386a38f6d03710428d3cf89727d1ec2d&quot;&gt;我们直接打印一下OrangeCat,会发现缺少constructor,我们可以使用OrangeCat.prototype.constructor手动添加上constructor&lt;/p&gt;
&lt;p data-lake-id=&quot;e07b43f71c77646da2fa5317e9c326da&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598067126466-2ae93649-df5f-4440-9798-1aa954045ff3.png%22%2C%22originWidth%22%3A840%2C%22originHeight%22%3A172%2C%22name%22%3A%22image.png%22%2C%22size%22%3A30777%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A60.11112%2C%22y%22%3A7.801964%2C%22width%22%3A529.55282%2C%22height%22%3A28.096573%2C%22text%22%3A%22AnimaLfname%3A%5C%22%E6%A9%98%E7%8C%AB%2Cattribute%3Af%22%7D%2C%7B%22x%22%3A720.65094%2C%22y%22%3A8.803535%2C%22width%22%3A45.793859999999995%2C%22height%22%3A26.300137000000003%2C%22text%22%3A%22%E5%AE%81%22%7D%2C%7B%22x%22%3A606.8781%2C%22y%22%3A11.674819%2C%22width%22%3A96.14980000000003%2C%22height%22%3A21.364255%2C%22text%22%3A%22action%3A%22%7D%2C%7B%22x%22%3A89.97941%2C%22y%22%3A39.355545%2C%22width%22%3A361.63549%2C%22height%22%3A27.195524999999996%2C%22text%22%3A%22action%3Af(currentaction)%22%7D%2C%7B%22x%22%3A91.50217%2C%22y%22%3A67.87409%2C%22width%22%3A341.17323%2C%22height%22%3A31.582530000000006%2C%22text%22%3A%22attribute%3Atcolor%5C%22%E6%A9%98%E8%89%B2%22%7D%2C%7B%22x%22%3A92.111404%2C%22y%22%3A104.20857%2C%22width%22%3A154.109036%2C%22height%22%3A25.730930000000015%2C%22text%22%3A%22name%3A%5C%22%E6%A9%98%E7%8C%AB%22%7D%2C%7B%22x%22%3A249.05223%2C%22y%22%3A136.35612%2C%22width%22%3A90.0378%2C%22height%22%3A28.040670000000006%2C%22text%22%3A%22object%22%7D%2C%7B%22x%22%3A121.15897%2C%22y%22%3A139.45837%2C%22width%22%3A72.86995%2C%22height%22%3A23.47197%2C%22text%22%3A%22proto%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22AnimaLfname%3A%5C%22%E6%A9%98%E7%8C%AB%2Cattribute%3Af%20%E5%AE%81%20action%3A%20action%3Af(currentaction)%20attribute%3Atcolor%5C%22%E6%A9%98%E8%89%B2%20name%3A%5C%22%E6%A9%98%E7%8C%AB%20object%20proto%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A420%2C%22height%22%3A86%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598067126466-2ae93649-df5f-4440-9798-1aa954045ff3.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;86px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;b68ea7759f5413a9d65f9a20ac2ea4ea&quot;&gt;&lt;strong&gt;引用类型的属性被所有子类实例共享&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;3a34b125032b5fb6c3a7018d9543325d&quot;&gt;让我们来看一下下面的例子🌰&lt;/p&gt;
&lt;div id=&quot;8jpnn&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20%20function%20OrangeCat()%7B%7D%5Cn%20%20%20%20OrangeCat.prototype%20%3D%20new%20Animal('%E6%A9%98%E7%8C%AB'%2C'%E6%A9%98%E8%89%B2%F0%9F%8D%8A')%3B%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%5Cn%20%20%20%20let%20firstOrangeCat%20%3D%20new%20OrangeCat()%3B%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E5%8F%AA%E6%A9%98%E7%8C%AB%5Cn%20%20%20%20let%20secondOrangeCat%20%3D%20new%20OrangeCat()%3B%5Cn%20%20%20%20console.log('%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%9A'%20%2B%20firstOrangeCat.attribute.color)%3B%5Cn%20%20%20%20console.log('%E7%AC%AC%E4%BA%8C%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%9A'%20%2B%20secondOrangeCat.attribute.color)%3B%5Cn%20%20%20%20%2F%2F%20%E5%B0%86%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%E6%94%B9%E4%B8%BA%E9%BB%91%E8%89%B2%5Cn%20%20%20%20firstOrangeCat.attribute.color%20%3D%20'black'%3B%5Cn%20%20%20%20console.log('%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E5%90%8E%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%9A'%20%2B%20firstOrangeCat.attribute.color)%3B%5Cn%20%20%20%20console.log('%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E5%90%8E%E7%AC%AC%E4%BA%8C%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%9A'%20%2B%20secondOrangeCat.attribute.color)%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%228jpnn%22%2C%22autoWrap%22%3Afalse%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; OrangeCat(){}
    OrangeCat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Animal('橘猫','橘色🍊'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一只橘猫&lt;/span&gt;
    let firstOrangeCat = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrangeCat();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二只橘猫&lt;/span&gt;
    let secondOrangeCat = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrangeCat();
    console.log(&lt;/span&gt;'第一只橘猫的颜色：' +&lt;span&gt; firstOrangeCat.attribute.color);
    console.log(&lt;/span&gt;'第二只橘猫的颜色：' +&lt;span&gt; secondOrangeCat.attribute.color);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将第一只橘猫的颜色改为黑色&lt;/span&gt;
    firstOrangeCat.attribute.color = 'black'&lt;span&gt;;
    console.log(&lt;/span&gt;'颜色改变后第一只橘猫的颜色：' +&lt;span&gt; firstOrangeCat.attribute.color);
    console.log(&lt;/span&gt;'颜色改变后第二只橘猫的颜色：' + secondOrangeCat.attribute.color);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;05d298f0cedc60dc31d54fbf721d1f91&quot;&gt;结果：&lt;/p&gt;
&lt;p data-lake-id=&quot;01b80b06c555a6251ed41fc1f403a794&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598074974086-e5197989-673f-4936-a91c-657174171ede.png%22%2C%22originWidth%22%3A712%2C%22originHeight%22%3A194%2C%22name%22%3A%22image.png%22%2C%22size%22%3A27883%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A45.792923%2C%22y%22%3A10.489087%2C%22width%22%3A264.004597%2C%22height%22%3A25.635776%2C%22text%22%3A%22%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3A%E6%A9%98%E8%89%B2%22%7D%2C%7B%22x%22%3A44.98517%2C%22y%22%3A49.626892%2C%22width%22%3A265.72137000000004%2C%22height%22%3A26.690008000000006%2C%22text%22%3A%22%E7%AC%AC%E4%BA%8C%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3A%E6%A9%98%E8%89%B2%22%7D%2C%7B%22x%22%3A44.635914%2C%22y%22%3A88.30581%2C%22width%22%3A413.365336%2C%22height%22%3A31.176566000000008%2C%22text%22%3A%22%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E5%90%8E%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3Ablack%22%7D%2C%7B%22x%22%3A44.754448%2C%22y%22%3A127.72715%2C%22width%22%3A411.82905200000005%2C%22height%22%3A27.908289999999994%2C%22text%22%3A%22%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E5%90%8E%E7%AC%AC%E4%BA%8C%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3Ablack%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3A%E6%A9%98%E8%89%B2%20%E7%AC%AC%E4%BA%8C%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3A%E6%A9%98%E8%89%B2%20%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E5%90%8E%E7%AC%AC%E4%B8%80%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3Ablack%20%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E5%90%8E%E7%AC%AC%E4%BA%8C%E5%8F%AA%E6%A9%98%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%3Ablack%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A356%2C%22height%22%3A97%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598074974086-e5197989-673f-4936-a91c-657174171ede.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;97px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;trk0W&quot; data-lake-id=&quot;b79356bcda4c6e401fa810439f5b6f11&quot;&gt;图解&lt;/h4&gt;
&lt;p data-lake-id=&quot;e5c2d1b3d8cc0d9347b71cdfac11cd27&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598447129475-1507845b-5f05-4784-896a-8a2c9049f490.png%22%2C%22originWidth%22%3A2112%2C%22originHeight%22%3A1608%2C%22name%22%3A%22image.png%22%2C%22size%22%3A284950%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A132.24878%2C%22y%22%3A91.839424%2C%22width%22%3A228.96898999999996%2C%22height%22%3A51.191016000000005%2C%22text%22%3A%22%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A1298.8639%2C%22y%22%3A141.42403%2C%22width%22%3A75.04250000000002%2C%22height%22%3A23.952530000000024%2C%22text%22%3A%22%E5%9F%BA%E6%9E%97%E5%BD%93%E5%A4%84%22%7D%2C%7B%22x%22%3A1135.2489%2C%22y%22%3A143.0007%2C%22width%22%3A123.20339999999987%2C%22height%22%3A22.021620000000013%2C%22text%22%3A%22%E5%BC%95%E7%94%A8%E7%BE%8E%E4%B8%9A%E7%9A%84%E6%8B%8D%E5%90%91%22%7D%2C%7B%22x%22%3A721.76056%2C%22y%22%3A147.28125%2C%22width%22%3A164.9461399999999%2C%22height%22%3A24.301350000000014%2C%22text%22%3A%22%E7%88%B6%E8%8B%B1%E5%AD%90%22%7D%2C%7B%22x%22%3A1190.4899%2C%22y%22%3A281.59918%2C%22width%22%3A145.3514%2C%22height%22%3A25.656720000000007%2C%22text%22%3A%22Animal%E5%AE%9E%E4%BE%8B%22%7D%2C%7B%22x%22%3A859.4306%2C%22y%22%3A287.69308%2C%22width%22%3A61.22002999999995%2C%22height%22%3A20.384720000000016%2C%22text%22%3A%22noW%22%7D%2C%7B%22x%22%3A463.6139%2C%22y%22%3A287.6019%2C%22width%22%3A91.16844999999995%2C%22height%22%3A25.397119999999973%2C%22text%22%3A%22Animal%22%7D%2C%7B%22x%22%3A464.1959%2C%22y%22%3A370.4076%2C%22width%22%3A86.27676000000002%2C%22height%22%3A23.56164000000001%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A1560.953%2C%22y%22%3A391.7372%2C%22width%22%3A145.83999999999992%2C%22height%22%3A29.89653000000004%2C%22text%22%3A%22OrangeCat%22%7D%2C%7B%22x%22%3A402.80573%2C%22y%22%3A448.36288%2C%22width%22%3A214.55810000000002%2C%22height%22%3A33.66433999999998%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A802.2378%2C%22y%22%3A457.986%2C%22width%22%3A121.952%2C%22height%22%3A24.79115999999999%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A1558.3322%2C%22y%22%3A474.946%2C%22width%22%3A145.6172999999999%2C%22height%22%3A30.881359999999972%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A412.98938%2C%22y%22%3A527.06757%2C%22width%22%3A184.83227999999997%2C%22height%22%3A37.36498999999992%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A104.94562%2C%22y%22%3A532.7438%2C%22width%22%3A96.25642%2C%22height%22%3A30.444500000000062%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A437.0267%2C%22y%22%3A614.7234%2C%22width%22%3A144.13829999999996%2C%22height%22%3A30.64745000000005%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A1295.8873%2C%22y%22%3A747.74176%2C%22width%22%3A50.92639999999983%2C%22height%22%3A24.328139999999962%2C%22text%22%3A%22new%22%7D%2C%7B%22x%22%3A1671.9769%2C%22y%22%3A794.3817%2C%22width%22%3A57.854500000000144%2C%22height%22%3A22.754799999999932%2C%22text%22%3A%22neW%22%7D%2C%7B%22x%22%3A1564.7512%2C%22y%22%3A975.74493%2C%22width%22%3A246.93540000000007%2C%22height%22%3A32.87421000000006%2C%22text%22%3A%22firstOrangeCat%E5%AE%9E%E4%BE%8B%22%7D%2C%7B%22x%22%3A1072.3987%2C%22y%22%3A977.4377%2C%22width%22%3A245.40609999999992%2C%22height%22%3A29.776100000000042%2C%22text%22%3A%22firstorangeCat%E5%AE%9E%E4%BE%8B%22%7D%2C%7B%22x%22%3A1158.7228%2C%22y%22%3A1061.0853%2C%22width%22%3A68.5340000000001%2C%22height%22%3A32.12049999999999%2C%22text%22%3A%22%E6%A9%98%E7%8C%AB%22%7D%2C%7B%22x%22%3A1654.5804%2C%22y%22%3A1061.7053%2C%22width%22%3A68.31299999999987%2C%22height%22%3A32.156999999999925%2C%22text%22%3A%22%E6%A9%98%E7%8C%AB%22%7D%2C%7B%22x%22%3A1579.0193%2C%22y%22%3A1145.1857%2C%22width%22%3A214.0250000000001%2C%22height%22%3A35.1699000000001%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1087.7267%2C%22y%22%3A1148.8379%2C%22width%22%3A214.71410000000014%2C%22height%22%3A36.38779999999997%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1594.1259%2C%22y%22%3A1216.111%2C%22width%22%3A185.87300000000005%2C%22height%22%3A35.34109999999987%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1101.023%2C%22y%22%3A1217.106%2C%22width%22%3A182.65280000000007%2C%22height%22%3A35.47379999999998%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1546.2585%2C%22y%22%3A1459.9955%2C%22width%22%3A288.29290000000015%2C%22height%22%3A35.797199999999975%2C%22text%22%3A%22by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF%20%E5%9F%BA%E6%9E%97%E5%BD%93%E5%A4%84%20%E5%BC%95%E7%94%A8%E7%BE%8E%E4%B8%9A%E7%9A%84%E6%8B%8D%E5%90%91%20%E7%88%B6%E8%8B%B1%E5%AD%90%20Animal%E5%AE%9E%E4%BE%8B%20noW%20Animal%20name%20OrangeCat%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20prototype%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20prototype%20new%20neW%20firstOrangeCat%E5%AE%9E%E4%BE%8B%20firstorangeCat%E5%AE%9E%E4%BE%8B%20%E6%A9%98%E7%8C%AB%20%E6%A9%98%E7%8C%AB%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%E7%9A%84%E6%8C%87%E9%92%88%20by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1056%2C%22height%22%3A804%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598447129475-1507845b-5f05-4784-896a-8a2c9049f490.png?x-oss-process=image%2Fresize%2Cw_1500&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;804px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;GhdtZ&quot; data-lake-id=&quot;7bc3319b10fee71e6f9f3162426268b5&quot;&gt;借用构造函数继承&lt;/h3&gt;
&lt;h4 id=&quot;uWo0w&quot; data-lake-id=&quot;224afa7cf383847c337f9f4f876ca0ee&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;0a0387da35c3cbcaf4d44d03c435a183&quot;&gt;原理： 使用父类的构造函数来增强子类&lt;strong&gt;实例&lt;/strong&gt;，等同于复制父类的实例给子类（不使用原型），可以实现多继承（call多个父类对象）&lt;/p&gt;
&lt;div id=&quot;BWGuf&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20function%20YellowDog(name%2C%20color)%20%7B%5Cn%20%20%20%20%20%20Animal.call(this%2C%20name%2C%20color)%3B%5Cn%20%20%7D%5Cn%20%20let%20firstYellowDog%20%3D%20new%20YellowDog('%E7%8B%97'%2C%20'%E9%BB%84')%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22BWGuf%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; YellowDog(name, color) {
      Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, name, color);
  }
  let firstYellowDog &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; YellowDog('狗', '黄');
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;SKNxl&quot; data-lake-id=&quot;ad8a642f955eb70e114bf346b002278e&quot;&gt;缺陷&lt;/h4&gt;
&lt;ul data-lake-id=&quot;5c857615a7d4deda30a672226e4daf07&quot;&gt;&lt;li data-lake-id=&quot;53f4827e8f1d076153456c0f6cbdad42&quot;&gt;只能继承父类的实例属性和方法，不能继承原型属性/方法&lt;/li&gt;
&lt;/ul&gt;&lt;div id=&quot;vBrRC&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20console.log(firstYellowDog%20instanceof%20Animal)%3B%20%2F%2F%20false%5Cn%20%20console.log(firstYellowDog%20instanceof%20YellowDog)%3B%20%2F%2F%20true%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22vBrRC%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  console.log(firstYellowDog &lt;span&gt;instanceof&lt;/span&gt; Animal); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
  console.log(firstYellowDog &lt;span&gt;instanceof&lt;/span&gt; YellowDog); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul data-lake-id=&quot;c7e16a7911510364c3c9ad5e5b1e5c09&quot;&gt;&lt;li data-lake-id=&quot;818715f09d17277f483d4811c9bd9514&quot;&gt;无法实现复用，每个子类都有父类实例函数的副本，影响性能&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;dLsDE&quot; data-lake-id=&quot;526cba1fb229e566124ea01aa7a7dec4&quot;&gt;图解&lt;/h4&gt;
&lt;p data-lake-id=&quot;bcf238506c0506e037b49cd0455518d4&quot;&gt;新创建一个BlackDog子类&lt;/p&gt;
&lt;div id=&quot;qnYco&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5Ctfunction%20BlackDog(name%2C%20color)%20%7B%5Cn%20%20%20%20%20%20Animal.call(this%2C%20name%2C%20color)%3B%5Cn%20%20%7D%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22qnYco%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; BlackDog(name, color) {
      Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, name, color);
  　}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;c7896f4358ae54d38eee83b939d1749e&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598447209576-cc5ab0a7-d437-4867-a863-e156c002d24f.png%22%2C%22originWidth%22%3A2104%2C%22originHeight%22%3A1614%2C%22name%22%3A%22image.png%22%2C%22size%22%3A255619%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A84.156525%2C%22y%22%3A92.28487%2C%22width%22%3A370.09454500000004%2C%22height%22%3A54.775160000000014%2C%22text%22%3A%22%E5%80%9F%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A1294.0828%2C%22y%22%3A142.62463%2C%22width%22%3A77.80780000000004%2C%22height%22%3A23.078689999999995%2C%22text%22%3A%22%E8%A5%BF%E6%9C%AC%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A1132.3088%2C%22y%22%3A142.85432%2C%22width%22%3A128.5235%2C%22height%22%3A22.184709999999995%2C%22text%22%3A%22%E5%BC%95%E7%94%A8%E5%A4%AB%E5%9E%8B%E7%9A%84%E6%8B%8D%E5%90%91%22%7D%2C%7B%22x%22%3A1024.4735%2C%22y%22%3A145.56519%2C%22width%22%3A78.87120000000004%2C%22height%22%3A22.249809999999997%2C%22text%22%3A%22%E5%BC%95%E5%91%A8%E5%85%89%E5%9E%8B%22%7D%2C%7B%22x%22%3A720.0359%2C%22y%22%3A146.64946%2C%22width%22%3A165.43052999999998%2C%22height%22%3A25.85550999999998%2C%22text%22%3A%22%E7%88%B6%E7%82%8E%E5%AD%90%E7%B1%BB%22%7D%2C%7B%22x%22%3A910.08887%2C%22y%22%3A146.56021%2C%22width%22%3A64.10703000000001%2C%22height%22%3A23.463329999999985%2C%22text%22%3A%22%E7%82%8E%E4%BB%98%22%7D%2C%7B%22x%22%3A1010.70465%2C%22y%22%3A333.7418%2C%22width%22%3A275.02065000000005%2C%22height%22%3A28.294730000000015%2C%22text%22%3A%22%E5%88%B6%E6%89%80%E6%9C%89%E6%B0%91%E6%80%A7%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%AD%90%E8%B4%B9%22%7D%2C%7B%22x%22%3A461.4259%2C%22y%22%3A339.91614%2C%22width%22%3A89.6796%2C%22height%22%3A21.73782%2C%22text%22%3A%22Animal%22%7D%2C%7B%22x%22%3A1022.0987%2C%22y%22%3A443.35327%2C%22width%22%3A155.2249999999999%2C%22height%22%3A23.98620999999997%2C%22text%22%3A%22%E7%94%A8AniMaL.call%22%7D%2C%7B%22x%22%3A1560.4215%2C%22y%22%3A443.9947%2C%22width%22%3A142.07590000000005%2C%22height%22%3A28.235950000000003%2C%22text%22%3A%22YellowDog%22%7D%2C%7B%22x%22%3A399.23468%2C%22y%22%3A501.4965%2C%22width%22%3A213.55822%2C%22height%22%3A38.37373999999994%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A797.8727%2C%22y%22%3A507.6411%2C%22width%22%3A127.13670000000002%2C%22height%22%3A23.93440000000004%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A1583.7283%2C%22y%22%3A531.034%2C%22width%22%3A85.64619999999991%2C%22height%22%3A28.15549999999996%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A413.82288%2C%22y%22%3A583.12213%2C%22width%22%3A182.98169000000001%2C%22height%22%3A36.117270000000076%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A103.31053%2C%22y%22%3A589.15344%2C%22width%22%3A94.12236999999999%2C%22height%22%3A27.807559999999967%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1520.6125%2C%22y%22%3A606.8804%2C%22width%22%3A213.48929999999996%2C%22height%22%3A37.86789999999996%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1886.2706%2C%22y%22%3A619.96625%2C%22width%22%3A129.21929999999998%2C%22height%22%3A26.012390000000096%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A435.70465%2C%22y%22%3A673.31195%2C%22width%22%3A142.51330999999993%2C%22height%22%3A30.70929000000001%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A1533.1848%2C%22y%22%3A681.9956%2C%22width%22%3A187.19350000000009%2C%22height%22%3A34.85035000000005%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1224.06%2C%22y%22%3A685.42487%2C%22width%22%3A94.92769999999996%2C%22height%22%3A30.668629999999894%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A666.60675%2C%22y%22%3A856.3921%2C%22width%22%3A277.03742%2C%22height%22%3A29.915200000000027%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95%E6%9D%B0%E5%8A%A0%E5%88%97%E5%AD%90%22%7D%2C%7B%22x%22%3A433.05786%2C%22y%22%3A859.5185%2C%22width%22%3A155.07367%2C%22height%22%3A24.96849999999995%2C%22text%22%3A%22%E8%B0%83%E7%94%A8AnimaLcnl%22%7D%2C%7B%22x%22%3A444.33188%2C%22y%22%3A1069.676%2C%22width%22%3A128.48732%2C%22height%22%3A28.087200000000166%2C%22text%22%3A%22BlackDog%22%7D%2C%7B%22x%22%3A462.95947%2C%22y%22%3A1158.1626%2C%22width%22%3A85.61653000000001%2C%22height%22%3A25.44489999999996%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A399.28473%2C%22y%22%3A1234.1871%2C%22width%22%3A212.54943999999995%2C%22height%22%3A36.992499999999836%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A793.12427%2C%22y%22%3A1241.6464%2C%22width%22%3A130.90422999999998%2C%22height%22%3A30.030700000000024%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A412.34027%2C%22y%22%3A1308.3646%2C%22width%22%3A183.13457999999997%2C%22height%22%3A32.8771999999999%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A104.620964%2C%22y%22%3A1312.9011%2C%22width%22%3A92.20276600000001%2C%22height%22%3A30.017000000000053%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1547.2528%2C%22y%22%3A1461.9828%2C%22width%22%3A285.57220000000007%2C%22height%22%3A33.92450000000008%2C%22text%22%3A%22by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%80%9F%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF%20%E8%A5%BF%E6%9C%AC%E7%B1%BB%E5%9E%8B%20%E5%BC%95%E7%94%A8%E5%A4%AB%E5%9E%8B%E7%9A%84%E6%8B%8D%E5%90%91%20%E5%BC%95%E5%91%A8%E5%85%89%E5%9E%8B%20%E7%88%B6%E7%82%8E%E5%AD%90%E7%B1%BB%20%E7%82%8E%E4%BB%98%20%E5%88%B6%E6%89%80%E6%9C%89%E6%B0%91%E6%80%A7%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%AD%90%E8%B4%B9%20Animal%20%E7%94%A8AniMaL.call%20YellowDog%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20name%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20prototype%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20%E5%A4%8D%E5%88%B6%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95%E6%9D%B0%E5%8A%A0%E5%88%97%E5%AD%90%20%E8%B0%83%E7%94%A8AnimaLcnl%20BlackDog%20name%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1052%2C%22height%22%3A807%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598447209576-cc5ab0a7-d437-4867-a863-e156c002d24f.png?x-oss-process=image%2Fresize%2Cw_1500&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;807px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;JCDjG&quot; data-lake-id=&quot;2a86a3974cdd7a68512b376b734c33d9&quot;&gt;组合继承&lt;/h3&gt;
&lt;h4 id=&quot;sEsXD&quot; data-lake-id=&quot;095fda513be62023f06a392d5a3b0e0a&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;9619e390e6824dbd7eb43ffecbc92574&quot;&gt;原理：组合原型链继承和借用构造函数继承，用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。&lt;/p&gt;
&lt;p data-lake-id=&quot;b67605c69c8beeb8bfa3d1693ac0d669&quot;&gt;解决了原型链继承中父类引用类型的属性被所有子类实例共享问题以及借用构造函数继承中只能继承父类的实例属性和方法却不能继承原型属性/方法的问题，使子类实例共享引用对象子类实例既不共享父类的引用类型的数据，也继承了原型。&lt;/p&gt;
&lt;p data-lake-id=&quot;15d14e9d7dd449467dd6931908b68317&quot;&gt;如何解决父类引用类型的属性被所有子类实例共享问题？&lt;/p&gt;
&lt;p data-lake-id=&quot;d524b9481a08438801a696baebac6fd3&quot;&gt;因为构造函数会将属性附加到子类实例上，访问属性的时候直接会访问子类实例上的属性，相当于子类实例上的属性直接屏蔽了原型上的属性，避免了共享个问题的出现&lt;/p&gt;
&lt;div id=&quot;9pIB4&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20function%20Pig(name%2C%20color)%20%7B%5Cn%20%20%20%20%20%20Animal.call(this%2C%20name%2C%20color)%3B%5Cn%20%20%7D%5Cn%20%20Pig.prototype%20%3D%20new%20Animal()%3B%5Cn%20%20Pig.prototype.constructor%20%3D%20Pig%3B%5Cn%20%20let%20firstPig%20%3D%20new%20Pig('%E7%8C%AA'%2C%20'%E7%99%BD')%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%229pIB4%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Pig(name, color) {
      Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, name, color);
  }
  Pig.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();
  Pig.prototype.constructor &lt;/span&gt;=&lt;span&gt; Pig;
  let firstPig &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Pig('猪', '白');
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;Mvadv&quot; data-lake-id=&quot;60ad14f7520139ff3c41cf8884c2f1ad&quot;&gt;缺陷&lt;/h4&gt;
&lt;ul data-lake-id=&quot;e850429a6727031ace796c7a387e8a2e&quot;&gt;&lt;li data-lake-id=&quot;53bd7d30040007a918f6bebe8df397b2&quot;&gt;由于调用了两次Animal，会导致有重复属性&lt;/li&gt;
&lt;/ul&gt;&lt;div id=&quot;Y5qjd&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20console.log(firstPig)%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22Y5qjd%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot;&gt;
&lt;pre class=&quot;cm-s-default&quot;&gt;
&lt;span class=&quot;lake-preview-line&quot;&gt;&lt;span class=&quot;lake-preview-line-number lake-lm-pad-level-0&quot;&gt;&lt;span class=&quot;lake-preview-codeblock-content&quot;&gt; &lt;span class=&quot;cm-variable&quot;&gt;console.&lt;span class=&quot;cm-property&quot;&gt;log(&lt;span class=&quot;cm-variable&quot;&gt;firstPig)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;e047cfe14b98a5b4d72813749387d191&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598088153421-b19cb21b-24ee-48d6-b9fb-4e52d0c606e4.png%22%2C%22originWidth%22%3A826%2C%22originHeight%22%3A340%2C%22name%22%3A%22image.png%22%2C%22size%22%3A52610%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A234.9197%2C%22y%22%3A8.939065%2C%22width%22%3A487.514%2C%22height%22%3A32.382861%2C%22text%22%3A%22%5C%22%E7%8C%AA%5C%22%2Cattribute%3Afu%2Caction%3Bfi%22%7D%2C%7B%22x%22%3A67.61805%2C%22y%22%3A11.817564%2C%22width%22%3A43.47193%2C%22height%22%3A25.907656%2C%22text%22%3A%22Pig%22%7D%2C%7B%22x%22%3A126.5093%2C%22y%22%3A13.400005%2C%22width%22%3A85.15823%2C%22height%22%3A23.586399%2C%22text%22%3A%22tname%3A%22%7D%2C%7B%22x%22%3A90.22332%2C%22y%22%3A44.437645%2C%22width%22%3A360.43522%2C%22height%22%3A24.033755%2C%22text%22%3A%22action%3Af(currentaction)%22%7D%2C%7B%22x%22%3A90.29128%2C%22y%22%3A73.396866%2C%22width%22%3A343.25104999999996%2C%22height%22%3A30.581553999999997%2C%22text%22%3A%22attribute%3Atcolor%3A%5C%22%E7%99%BD%5C%22%22%7D%2C%7B%22x%22%3A183.62398%2C%22y%22%3A106.83943%2C%22width%22%3A35.67793%2C%22height%22%3A23.72669000000002%2C%22text%22%3A%22%E7%8C%AA%22%7D%2C%7B%22x%22%3A91.99408%2C%22y%22%3A110.92959%2C%22width%22%3A71.73138%2C%22height%22%3A18.93575%2C%22text%22%3A%22name%3A%22%7D%2C%7B%22x%22%3A250.46246%2C%22y%22%3A140.24219%2C%22width%22%3A86.66996000000003%2C%22height%22%3A21.014910000000015%2C%22text%22%3A%22AnimaL%22%7D%2C%7B%22x%22%3A118.96686%2C%22y%22%3A142.73138%2C%22width%22%3A76.02771000000001%2C%22height%22%3A21.60992999999999%2C%22text%22%3A%22proto%22%7D%2C%7B%22x%22%3A115.529274%2C%22y%22%3A170.50734%2C%22width%22%3A357.366446%2C%22height%22%3A27.51205999999999%2C%22text%22%3A%22action%3Af(currentaction)%22%7D%2C%7B%22x%22%3A115.58313%2C%22y%22%3A204.18637%2C%22width%22%3A417.95044000000007%2C%22height%22%3A23.423339999999996%2C%22text%22%3A%22attributeicolorundefined%22%7D%2C%7B%22x%22%3A319.11255%2C%22y%22%3A235.10533%2C%22width%22%3A242.06780999999995%2C%22height%22%3A26.268670000000014%2C%22text%22%3A%22fPig(name%2Ccolor)%22%7D%2C%7B%22x%22%3A115.611725%2C%22y%22%3A237.05093%2C%22width%22%3A244.52841499999997%2C%22height%22%3A22.169870000000003%2C%22text%22%3A%22constructorfPic%22%7D%2C%7B%22x%22%3A116.17274%2C%22y%22%3A267.96637%2C%22width%22%3A218.17434%2C%22height%22%3A22.939430000000016%2C%22text%22%3A%22name%3Aundefined%22%7D%2C%7B%22x%22%3A271.52924%2C%22y%22%3A297.5101%2C%22width%22%3A92.02276%2C%22height%22%3A25.847469999999987%2C%22text%22%3A%22object%22%7D%2C%7B%22x%22%3A144.89595%2C%22y%22%3A302.91788%2C%22width%22%3A73.04047%2C%22height%22%3A21.001419999999996%2C%22text%22%3A%22proto%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%5C%22%E7%8C%AA%5C%22%2Cattribute%3Afu%2Caction%3Bfi%20Pig%20tname%3A%20action%3Af(currentaction)%20attribute%3Atcolor%3A%5C%22%E7%99%BD%5C%22%20%E7%8C%AA%20name%3A%20AnimaL%20proto%20action%3Af(currentaction)%20attributeicolorundefined%20fPig(name%2Ccolor)%20constructorfPic%20name%3Aundefined%20object%20proto%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A413%2C%22height%22%3A170%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598088153421-b19cb21b-24ee-48d6-b9fb-4e52d0c606e4.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;170px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul data-lake-id=&quot;dc9ce330c065bca17edacceb46e9d889&quot;&gt;&lt;li data-lake-id=&quot;81ea37802564e885cd54891fb44dbb9a&quot;&gt;每个子类都有父类实例函数的副本，影响性能&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;47uyi&quot; data-lake-id=&quot;7cf91243b1a3e829064427128e7ac388&quot;&gt;图解&lt;/h4&gt;
&lt;p data-lake-id=&quot;1c3d08874340d3f92af58a23fded72aa&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598447293286-b5a803a8-ea37-4161-a526-a0a31472429b.png%22%2C%22originWidth%22%3A2118%2C%22originHeight%22%3A1532%2C%22name%22%3A%22image.png%22%2C%22size%22%3A206662%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A169.92091%2C%22y%22%3A94.52579%2C%22width%22%3A187.73687%2C%22height%22%3A46.129909999999995%2C%22text%22%3A%22%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A1298.6765%2C%22y%22%3A141.99733%2C%22width%22%3A72.26729999999998%2C%22height%22%3A21.939419999999984%2C%22text%22%3A%22*%E6%9C%AC%E5%B0%96%E5%9E%8B%22%7D%2C%7B%22x%22%3A1024.8241%2C%22y%22%3A142.79091%2C%22width%22%3A74.48879999999986%2C%22height%22%3A21.08689000000001%2C%22text%22%3A%22%E5%BC%95%E7%BE%8E%E5%9E%8B%22%7D%2C%7B%22x%22%3A718.0032%2C%22y%22%3A147.57405%2C%22width%22%3A57.02317000000005%2C%22height%22%3A22.27409%2C%22text%22%3A%22%E5%A5%BD%22%7D%2C%7B%22x%22%3A812.28174%2C%22y%22%3A147.81874%2C%22width%22%3A57.25015999999994%2C%22height%22%3A22.0625%2C%22text%22%3A%22%E5%AD%90%E7%B1%BB%22%7D%2C%7B%22x%22%3A1281.5703%2C%22y%22%3A411.37372%2C%22width%22%3A151.5519999999999%2C%22height%22%3A30.546600000000012%2C%22text%22%3A%22Animal%E5%AE%9E%E4%BE%8B%22%7D%2C%7B%22x%22%3A459.80685%2C%22y%22%3A419.17883%2C%22width%22%3A92.10740000000004%2C%22height%22%3A28.35169000000002%2C%22text%22%3A%22Animal%22%7D%2C%7B%22x%22%3A462.38828%2C%22y%22%3A505.57208%2C%22width%22%3A87.13467000000003%2C%22height%22%3A25.249720000000025%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A399.76144%2C%22y%22%3A584.2777%2C%22width%22%3A210.80771000000004%2C%22height%22%3A31.54480000000001%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A797.4963%2C%22y%22%3A589.17334%2C%22width%22%3A124.3637%2C%22height%22%3A27.22745999999995%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A415.28265%2C%22y%22%3A677.719%2C%22width%22%3A183.23225000000002%2C%22height%22%3A33.64653999999996%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A105.901024%2C%22y%22%3A680.6114%2C%22width%22%3A94.246726%2C%22height%22%3A27.637399999999957%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1622.7375%2C%22y%22%3A689.48456%2C%22width%22%3A46.589300000000094%2C%22height%22%3A29.999840000000063%2C%22text%22%3A%22Pig%22%7D%2C%7B%22x%22%3A910.43%2C%22y%22%3A722.0717%2C%22width%22%3A275.0748%2C%22height%22%3A24.419200000000046%2C%22text%22%3A%22%E5%88%B6%E6%89%80%E6%9C%89%E8%B5%A2%E6%80%A7%E6%96%B9%E6%B3%95%E9%85%92%E5%8A%A0%E5%88%AB%E5%AD%90%E7%AA%81.%22%7D%2C%7B%22x%22%3A438.2636%2C%22y%22%3A772.215%2C%22width%22%3A140.44074999999998%2C%22height%22%3A30.02084000000002%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A1578.1058%2C%22y%22%3A776.2015%2C%22width%22%3A141.15719999999988%2C%22height%22%3A25.856599999999958%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A1605.8228%2C%22y%22%3A864.8022%2C%22width%22%3A81.36509999999998%2C%22height%22%3A23.602160000000026%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A1545.3219%2C%22y%22%3A942.2614%2C%22width%22%3A213.2427%2C%22height%22%3A31.321000000000026%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1932.9917%2C%22y%22%3A949.9839%2C%22width%22%3A122.45829999999978%2C%22height%22%3A22.971850000000018%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A1554.4019%2C%22y%22%3A1029.9342%2C%22width%22%3A184.5483999999999%2C%22height%22%3A36.503400000000056%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1244.6338%2C%22y%22%3A1039.0364%2C%22width%22%3A97.49689999999987%2C%22height%22%3A25.553900000000112%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1537.1338%2C%22y%22%3A1452.8906%2C%22width%22%3A298.77559999999994%2C%22height%22%3A46.23890000000006%2C%22text%22%3A%22by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF%20*%E6%9C%AC%E5%B0%96%E5%9E%8B%20%E5%BC%95%E7%BE%8E%E5%9E%8B%20%E5%A5%BD%20%E5%AD%90%E7%B1%BB%20Animal%E5%AE%9E%E4%BE%8B%20Animal%20name%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20Pig%20%E5%88%B6%E6%89%80%E6%9C%89%E8%B5%A2%E6%80%A7%E6%96%B9%E6%B3%95%E9%85%92%E5%8A%A0%E5%88%AB%E5%AD%90%E7%AA%81.%20prototype%20prototype%20name%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1059%2C%22height%22%3A766%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598447293286-b5a803a8-ea37-4161-a526-a0a31472429b.png?x-oss-process=image%2Fresize%2Cw_1500&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;766px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;WnzkP&quot; data-lake-id=&quot;f83aeb210e9bcfeb8799dcf9eddcdfdf&quot;&gt;原型式继承&lt;/h3&gt;
&lt;h4 id=&quot;bLsMr&quot; data-lake-id=&quot;474b594ab3c1346b726e14e21eb7496a&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;9a10f7e66b20501996924d2380a5458a&quot;&gt;利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。&lt;/p&gt;
&lt;p data-lake-id=&quot;73f43a6c568c5cfe27306213b38595a2&quot;&gt;实现1:&lt;/p&gt;
&lt;div id=&quot;wQDvh&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20let%20cattle%20%3D%20%7B%5Cn%20%20%20%20%20%20name%3A'%E7%89%9B'%2C%5Cn%20%20%20%20%20%20attribute%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20color%3A%20'%E9%BB%84'%2C%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20let%20firstCattle%20%3D%20Object.create(cattle)%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22wQDvh%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
  let cattle =&lt;span&gt; {
      name:&lt;/span&gt;'牛'&lt;span&gt;,
      attribute: {
          color: &lt;/span&gt;'黄'&lt;span&gt;,
      }
  }
  let firstCattle &lt;/span&gt;= Object.create(cattle);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;c9544d6530977aa7a28a5d7279e48a43&quot;&gt;实现2:&lt;/p&gt;
&lt;div id=&quot;VEWih&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20function%20object(obj)%7B%5Cn%20%20%20%20%20%20function%20F()%7B%7D%3B%5Cn%20%20%20%20%20%20F.prototype%20%3D%20obj%3B%5Cn%20%20%20%20%20%20return%20new%20F()%3B%5Cn%20%20%7D%5Cn%20%20let%20cattle%20%3D%20%7B%5Cn%20%20%20%20%20%20name%3A'%E7%89%9B'%2C%5Cn%20%20%20%20%20%20attribute%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20color%3A%20'%E9%BB%84'%2C%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20let%20firstCattle%20%3D%20object(cattle)%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22VEWih%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; object(obj){
      &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; F(){};
      F.prototype &lt;/span&gt;=&lt;span&gt; obj;
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F();
  }
  let cattle &lt;/span&gt;=&lt;span&gt; {
      name:&lt;/span&gt;'牛'&lt;span&gt;,
      attribute: {
          color: &lt;/span&gt;'黄'&lt;span&gt;,
      }
  }
  let firstCattle &lt;/span&gt;= object(cattle);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;pTfIX&quot; data-lake-id=&quot;26dcd898500170ec94cdca2ad284eac2&quot;&gt;缺陷&lt;/h4&gt;
&lt;ul data-lake-id=&quot;87e277b166ee001c7075ab18087ed90d&quot;&gt;&lt;li data-lake-id=&quot;2332a943d71e73f94ad68e645d231440&quot;&gt;引用类型的属性被实例共享&lt;/li&gt;
&lt;/ul&gt;&lt;div id=&quot;SN8hz&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20let%20secondCattle%20%3D%20object(cattle)%3B%5Cn%20%20%20%20console.log(firstCattle.attribute)%3B%20%2F%2F%20%E9%BB%84%5Cn%20%20%20%20console.log(secondCattle.attribute)%3B%20%2F%2F%20%E9%BB%84%5Cn%20%20%20%20firstCattle.attribute.color%20%3D%20'%E7%BA%A2'%3B%5Cn%20%20%20%20console.log(firstCattle.attribute)%3B%20%2F%2F%20%E7%BA%A2%5Cn%20%20%20%20console.log(secondCattle.attribute)%3B%20%2F%2F%20%E7%BA%A2%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22SN8hz%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    let secondCattle =&lt;span&gt; object(cattle);
    console.log(firstCattle.attribute); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 黄&lt;/span&gt;
    console.log(secondCattle.attribute); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 黄&lt;/span&gt;
    firstCattle.attribute.color = '红'&lt;span&gt;;
    console.log(firstCattle.attribute); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 红&lt;/span&gt;
    console.log(secondCattle.attribute); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 红&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul data-lake-id=&quot;d0d4e710fe85ab90ef1ff60980e9eeb3&quot;&gt;&lt;li data-lake-id=&quot;26c277feb4775e0c26ab9a4e54719cb1&quot;&gt;子类实例化时无法传参&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;yAohL&quot; data-lake-id=&quot;e43b954d8a68065f7ca4ae24779b0dd2&quot;&gt;图解&lt;/h4&gt;
&lt;p data-lake-id=&quot;68ed818031160ed6d39f591229f9153e&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598447316377-d75d3a27-a6ac-40ce-8b17-9ca072b9e87c.png%22%2C%22originWidth%22%3A2110%2C%22originHeight%22%3A1564%2C%22name%22%3A%22image.png%22%2C%22size%22%3A146584%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A153.8523%2C%22y%22%3A103.302086%2C%22width%22%3A228.75448%2C%22height%22%3A46.15738400000001%2C%22text%22%3A%22%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A923.49774%2C%22y%22%3A139.2826%2C%22width%22%3A43.00296000000003%2C%22height%22%3A23.65986000000001%2C%22text%22%3A%22%E7%81%BE%E8%B0%A2%22%7D%2C%7B%22x%22%3A817.625%2C%22y%22%3A142.00964%2C%22width%22%3A46.15625%2C%22height%22%3A20.636200000000002%2C%22text%22%3A%22%E5%95%86%E7%AB%99%22%7D%2C%7B%22x%22%3A711.7183%2C%22y%22%3A142.86455%2C%22width%22%3A45.83330000000001%2C%22height%22%3A21.68119999999999%2C%22text%22%3A%22%E5%AF%B9%E6%A3%92%22%7D%2C%7B%22x%22%3A1284.7839%2C%22y%22%3A407.9187%2C%22width%22%3A77.77629999999999%2C%22height%22%3A29.56374999999997%2C%22text%22%3A%22F%E5%87%BD%E6%95%B0%22%7D%2C%7B%22x%22%3A462.7054%2C%22y%22%3A417.60413%2C%22width%22%3A73.46319999999997%2C%22height%22%3A24.177070000000015%2C%22text%22%3A%22cattle%22%7D%2C%7B%22x%22%3A1254.1991%2C%22y%22%3A501.05127%2C%22width%22%3A146.13239999999996%2C%22height%22%3A28.50403%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A455.58353%2C%22y%22%3A502.1708%2C%22width%22%3A86.49001999999996%2C%22height%22%3A25.37880000000007%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A391.69083%2C%22y%22%3A580.83527%2C%22width%22%3A213.78061000000002%2C%22height%22%3A35.52913000000001%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A791.5196%2C%22y%22%3A585.84827%2C%22width%22%3A125.40307000000007%2C%22height%22%3A25.297480000000064%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A1234.146%2C%22y%22%3A1122.6525%2C%22width%22%3A184.17100000000005%2C%22height%22%3A27.784900000000107%2C%22text%22%3A%22firstCattle%E5%AE%9E%E4%BE%8B%22%7D%2C%7B%22x%22%3A1534.4686%2C%22y%22%3A1452.7043%2C%22width%22%3A291.07000000000016%2C%22height%22%3A39.38169999999991%2C%22text%22%3A%22by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%99%AB%E5%95%8A%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF%20%E7%81%BE%E8%B0%A2%20%E5%95%86%E7%AB%99%20%E5%AF%B9%E6%A3%92%20F%E5%87%BD%E6%95%B0%20cattle%20prototype%20name%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20firstCattle%E5%AE%9E%E4%BE%8B%20by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%99%AB%E5%95%8A%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1055%2C%22height%22%3A782%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598447316377-d75d3a27-a6ac-40ce-8b17-9ca072b9e87c.png?x-oss-process=image%2Fresize%2Cw_1500&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;782px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;1OgFy&quot; data-lake-id=&quot;c66ce7475a480f3081955131ff7d734f&quot;&gt;寄生继承&lt;/h3&gt;
&lt;h4 id=&quot;jO2Uy&quot; data-lake-id=&quot;225c995b9ae71184b9d7cc43098748dc&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;55ddd9fc30ea81ef7961ac7388142ed2&quot;&gt;在原型式继承的基础上，增强对象，返回构造函数。&lt;/p&gt;
&lt;div id=&quot;rUdLm&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20let%20sheep%20%3D%20%7B%5Cn%20%20%20%20%20%20name%3A%20'%E7%BE%8A'%2C%5Cn%20%20%20%20%20%20action%3A%20(currrentAction)%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log(currrentAction)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20function%20createSheep(params)%20%7B%5Cn%20%20%20%20%20%20let%20clone%20%3D%20object(params)%3B%2F%2F%20%E6%AD%A4%E5%A4%84%E7%9A%84object%E5%B0%B1%E6%98%AF%E4%B8%8A%E6%96%87%E4%B8%AD%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF%E7%9A%84object%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20clone.say%20%3D%20()%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log('%E5%92%A9%E5%92%A9%E5%92%A9')%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20return%20clone%3B%5Cn%20%20%7D%5Cn%20%20let%20anSheep%20%3D%20createSheep(sheep)%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22rUdLm%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
  let sheep =&lt;span&gt; {
      name: &lt;/span&gt;'羊'&lt;span&gt;,
      action: (currrentAction)&lt;/span&gt;=&amp;gt;&lt;span&gt;{
          console.log(currrentAction)
      }
  }
  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; createSheep(params) {
      let clone &lt;/span&gt;= object(params);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处的object就是上文中原型式继承的object方法&lt;/span&gt;
      clone.say = ()=&amp;gt;&lt;span&gt;{
          console.log(&lt;/span&gt;'咩咩咩'&lt;span&gt;);
      }
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; clone;
  }
  let anSheep &lt;/span&gt;= createSheep(sheep);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;aDrIZ&quot; data-lake-id=&quot;bf51317b49d3a888e56c773a344e10c4&quot;&gt;缺陷&lt;/h4&gt;
&lt;ul data-lake-id=&quot;f33ac871dede59b5490cc64d22e6da7a&quot;&gt;&lt;li data-lake-id=&quot;0394a37af4078b1c27f3652cc3a449df&quot;&gt;引用类型的属性被实例共享（可参考原型式继承）&lt;/li&gt;
&lt;li data-lake-id=&quot;07fb650a40247d6c19ba53f6ede73b1d&quot;&gt;子类实例化时无法传参&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;0X9nG&quot; data-lake-id=&quot;009ea3190f325fa021752274a8f095fb&quot;&gt;图解&lt;/h4&gt;
&lt;p data-lake-id=&quot;7e30abfbef32a6175e6728cfb4ac8cdd&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598448024572-143b63c1-e52b-45a1-8fa4-18a2abc33cb2.png%22%2C%22originWidth%22%3A2114%2C%22originHeight%22%3A1612%2C%22name%22%3A%22image.png%22%2C%22size%22%3A221438%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A184.85915%2C%22y%22%3A99.53129%2C%22width%22%3A229.34294999999997%2C%22height%22%3A48.00422999999999%2C%22text%22%3A%22%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A1062.4242%2C%22y%22%3A135.0958%2C%22width%22%3A74.0431000000001%2C%22height%22%3A21.35479000000001%2C%22text%22%3A%22%E4%B8%87%E7%94%A8%E6%96%B9%E6%B5%AA%22%7D%2C%7B%22x%22%3A1288.3735%2C%22y%22%3A144.12859%2C%22width%22%3A125.54570000000012%2C%22height%22%3A23.22551999999999%2C%22text%22%3A%22%E5%BC%95%E7%94%A8%E5%B0%96%E5%9E%8B%E7%9A%84%E6%8C%87%E8%82%89%22%7D%2C%7B%22x%22%3A1451.92%2C%22y%22%3A146.90033%2C%22width%22%3A79.33739999999989%2C%22height%22%3A21.163160000000005%2C%22text%22%3A%22%E7%A6%81%E6%9C%AC%E5%B0%96%E5%9E%8B%22%7D%2C%7B%22x%22%3A1185.0094%2C%22y%22%3A147.2459%2C%22width%22%3A73.44560000000001%2C%22height%22%3A21.742879999999985%2C%22text%22%3A%22%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A746.1812%2C%22y%22%3A149.74167%2C%22width%22%3A49.90065000000004%2C%22height%22%3A23.342270000000013%2C%22text%22%3A%22%E5%AF%B9%E4%BA%AC%22%7D%2C%7B%22x%22%3A257.23587%2C%22y%22%3A295.52365%2C%22width%22%3A174.07233000000002%2C%22height%22%3A44.89285000000001%2C%22text%22%3A%22%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A1323.7819%2C%22y%22%3A414.64713%2C%22width%22%3A72.58490000000006%2C%22height%22%3A28.435540000000003%2C%22text%22%3A%22F%E5%87%BD%E6%95%B0%22%7D%2C%7B%22x%22%3A491.4352%2C%22y%22%3A424.94882%2C%22width%22%3A83.3732%2C%22height%22%3A26.02897999999999%2C%22text%22%3A%22sheep%22%7D%2C%7B%22x%22%3A488.9888%2C%22y%22%3A509.26883%2C%22width%22%3A85.10459999999995%2C%22height%22%3A24.363920000000007%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A1287.4379%2C%22y%22%3A508.68942%2C%22width%22%3A147.16650000000004%2C%22height%22%3A28.301729999999964%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A437.61792%2C%22y%22%3A586.228%2C%22width%22%3A188.03048%2C%22height%22%3A36.86166000000003%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A838.5644%2C%22y%22%3A594.8184%2C%22width%22%3A96.10160000000008%2C%22height%22%3A25.170499999999947%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1310.8013%2C%22y%22%3A751.20514%2C%22width%22%3A65.49939999999992%2C%22height%22%3A23.29045999999994%2C%22text%22%3A%22%E7%94%9C%E7%94%A8%2C%22%7D%2C%7B%22x%22%3A1297.5801%2C%22y%22%3A852.4053%2C%22width%22%3A127.2192%2C%22height%22%3A30.196699999999964%2C%22text%22%3A%22clone%E5%AF%B9%E8%B1%A1%22%7D%2C%7B%22x%22%3A1305.7145%2C%22y%22%3A925.02747%2C%22width%22%3A102.9822999999999%2C%22height%22%3A28.847229999999968%2C%22text%22%3A%22proto%22%7D%2C%7B%22x%22%3A1286.3756%2C%22y%22%3A1011.1473%2C%22width%22%3A145.5302999999999%2C%22height%22%3A36.13690000000008%2C%22text%22%3A%22say%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1686.6418%2C%22y%22%3A1021.74084%2C%22width%22%3A54.29859999999985%2C%22height%22%3A27.836259999999925%2C%22text%22%3A%22say%22%7D%2C%7B%22x%22%3A1245.9006%2C%22y%22%3A1214.5951%2C%22width%22%3A231.71720000000005%2C%22height%22%3A30.586199999999963%2C%22text%22%3A%22%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BA%E6%96%B0%E5%AF%B9%E8%B1%A1%22%7D%2C%7B%22x%22%3A1276.2681%2C%22y%22%3A1320.317%2C%22width%22%3A170.53179999999998%2C%22height%22%3A29.020299999999907%2C%22text%22%3A%22anSheep%E5%AF%B9%E8%B1%A1%22%7D%2C%7B%22x%22%3A1569.8552%2C%22y%22%3A1464.0333%2C%22width%22%3A287.98389999999995%2C%22height%22%3A33.54229999999984%2C%22text%22%3A%22by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF%20%E4%B8%87%E7%94%A8%E6%96%B9%E6%B5%AA%20%E5%BC%95%E7%94%A8%E5%B0%96%E5%9E%8B%E7%9A%84%E6%8C%87%E8%82%89%20%E7%A6%81%E6%9C%AC%E5%B0%96%E5%9E%8B%20%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%20%E5%AF%B9%E4%BA%AC%20%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%20F%E5%87%BD%E6%95%B0%20sheep%20name%20prototype%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20%E7%94%9C%E7%94%A8%2C%20clone%E5%AF%B9%E8%B1%A1%20proto%20say%E7%9A%84%E6%8C%87%E9%92%88%20say%20%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BA%E6%96%B0%E5%AF%B9%E8%B1%A1%20anSheep%E5%AF%B9%E8%B1%A1%20by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1057%2C%22height%22%3A806%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598448024572-143b63c1-e52b-45a1-8fa4-18a2abc33cb2.png?x-oss-process=image%2Fresize%2Cw_1500&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;806px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;uYHAj&quot; data-lake-id=&quot;f6041e04db64701a99f6cac42e1988ca&quot;&gt;寄生组合式继承&lt;/h3&gt;
&lt;h4 id=&quot;q5clo&quot; data-lake-id=&quot;d3221a8c99b0ec9cc41c7defb9804e45&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;a95b04b7664871223bf5668c5bd0c273&quot;&gt;结合借用构造函数传递参数和寄生模式实现继承。&lt;/p&gt;
&lt;p data-lake-id=&quot;578a1933bf3d2d10497bc32c7122bd70&quot;&gt;只调用了一次Animal构造函数，因此避免了在&lt;code&gt;Chicken.prototype&lt;/code&gt; 上创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用&lt;code&gt;instanceof&lt;/code&gt; 和&lt;code&gt;isPrototypeOf()&lt;/code&gt;。这是最成熟的方法，也是现在库实现的方法&lt;/p&gt;
&lt;div id=&quot;AVFh2&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20function%20Chicken(name%2C%20color)%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E5%80%9F%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E5%A2%9E%E5%BC%BA%E5%AD%90%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%EF%BC%88%E6%94%AF%E6%8C%81%E4%BC%A0%E5%8F%82%E5%92%8C%E9%81%BF%E5%85%8D%E7%AF%A1%E6%94%B9%EF%BC%89%5Cn%20%20%20%20%20%20Animal.call(this%2C%20name)%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E5%B0%86%E7%88%B6%E7%B1%BB%E5%8E%9F%E5%9E%8B%E6%8C%87%E5%90%91%E5%AD%90%E7%B1%BB%5Cn%5Ctlet%20clonePrototype%20%3D%20Object.create(Animal.prototype)%3B%20%2F%2F%20%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%88%9B%E5%BB%BA%E7%88%B6%E7%B1%BB%E5%8E%9F%E5%9E%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E5%89%AF%5Cn%20%5CtclonePrototype.constructor%20%3D%20Chicken%3B%2F%2F%20%E5%A2%9E%E5%BC%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%BC%A5%E8%A1%A5%E5%9B%A0%E9%87%8D%E5%86%99%E5%8E%9F%E5%9E%8B%E8%80%8C%E5%A4%B1%E5%8E%BB%E7%9A%84%E9%BB%98%E8%AE%A4%E7%9A%84constructor%5Cn%5CtChicken.prototype%20%3D%20clonePrototype%3B%20%2F%2F%20%E5%B0%86%E6%96%B0%E5%88%9B%E5%BB%BA%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC%E7%BB%99%E5%AD%90%E7%B1%BB%E7%9A%84%E5%8E%9F%E5%9E%8B%5Cn%5Cn%20%20let%20firstChicken%20%3D%20new%20Chicken(%5C%22%E9%B8%A1%5C%22%2C%20%5C%22%E4%B9%8C%5C%22)%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22AVFh2%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Chicken(name, color){
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 借用构造函数传递增强子类实例属性（支持传参和避免篡改）&lt;/span&gt;
      Animal.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, name);
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将父类原型指向子类&lt;/span&gt;
    let clonePrototype = Object.create(Animal.prototype); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建对象，创建父类原型的一个副&lt;/span&gt;
    clonePrototype.constructor = Chicken;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 增强对象，弥补因重写原型而失去的默认的constructor&lt;/span&gt;
    Chicken.prototype = clonePrototype; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将新创建的对象赋值给子类的原型&lt;/span&gt;
&lt;span&gt;
  let firstChicken &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Chicken(&quot;鸡&quot;, &quot;乌&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;433d7a12536a8b49c4ce02373a5ecb0e&quot;&gt;&lt;strong&gt;缺陷&lt;/strong&gt;&lt;/p&gt;
&lt;ul data-lake-id=&quot;4094e609ebed65f5e542fffb552b30ca&quot;&gt;&lt;li data-lake-id=&quot;e2670175d1d8b27dcf9924f54fe4fe2a&quot;&gt;每个子类都有父类实例函数的副本，影响性能&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;2Zqx8&quot; data-lake-id=&quot;1048462099b67634b515a717a924d6c9&quot;&gt;图解&lt;/h4&gt;
&lt;h3 id=&quot;ihVo3&quot; data-lake-id=&quot;7b875a22d851622f4506a255c694742a&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598450848119-6de1328d-d4e9-41a0-8895-2ceb08c6b2ed.png%22%2C%22originWidth%22%3A2116%2C%22originHeight%22%3A1580%2C%22name%22%3A%22image.png%22%2C%22size%22%3A255395%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A167.84726%2C%22y%22%3A96.38911%2C%22width%22%3A322.91702%2C%22height%22%3A49.94584999999999%2C%22text%22%3A%22%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A1155.7747%2C%22y%22%3A144.74525%2C%22width%22%3A132.54960000000005%2C%22height%22%3A24.371219999999994%2C%22text%22%3A%22%E5%91%A8%E5%A4%B1%E5%9E%8B%E7%9A%84%E6%B5%B4%E6%9C%88%22%7D%2C%7B%22x%22%3A1328.2701%2C%22y%22%3A146.87628%2C%22width%22%3A72.30300000000011%2C%22height%22%3A21.679059999999993%2C%22text%22%3A%22%E5%8D%8E%E5%8D%A1%E6%AC%A2%E5%9E%8B%22%7D%2C%7B%22x%22%3A748.43005%2C%22y%22%3A150.64395%2C%22width%22%3A64.82044999999994%2C%22height%22%3A22.093850000000003%2C%22text%22%3A%22%E7%88%B6%E8%8A%99%22%7D%2C%7B%22x%22%3A848.1976%2C%22y%22%3A151.80186%2C%22width%22%3A54.28150000000005%2C%22height%22%3A22.61193%2C%22text%22%3A%22%E5%AD%90%E5%88%A4%22%7D%2C%7B%22x%22%3A1043.0947%2C%22y%22%3A339.9414%2C%22width%22%3A272.5505999999998%2C%22height%22%3A25.18432999999999%2C%22text%22%3A%22%E5%AE%89%E5%88%A9%E6%89%80%E6%9C%89%E5%B1%9E%E4%BD%8F%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%AD%90%E7%B1%BB%22%7D%2C%7B%22x%22%3A491.06555%2C%22y%22%3A341.16977%2C%22width%22%3A89.59601000000004%2C%22height%22%3A22.18154999999996%2C%22text%22%3A%22Animal%22%7D%2C%7B%22x%22%3A492.47656%2C%22y%22%3A423.02884%2C%22width%22%3A83.96804000000003%2C%22height%22%3A22.94698999999997%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A1605.448%2C%22y%22%3A444.3565%2C%22width%22%3A109.2844%2C%22height%22%3A28.03815000000003%2C%22text%22%3A%22Chicken%22%7D%2C%7B%22x%22%3A1054.2592%2C%22y%22%3A485.05618%2C%22width%22%3A156.48880000000008%2C%22height%22%3A23.35322000000002%2C%22text%22%3A%22%E8%AF%9A%E7%94%A8Animal.call%22%7D%2C%7B%22x%22%3A428.93118%2C%22y%22%3A501.33258%2C%22width%22%3A213.31167999999997%2C%22height%22%3A37.391219999999976%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A828.72906%2C%22y%22%3A508.01636%2C%22width%22%3A125.39899000000003%2C%22height%22%3A27.974239999999952%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A1615.9613%2C%22y%22%3A544.55365%2C%22width%22%3A84.75549999999998%2C%22height%22%3A24.217290000000048%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A444.01727%2C%22y%22%3A572.8491%2C%22width%22%3A180.56513%2C%22height%22%3A33.938440000000014%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A133.29692%2C%22y%22%3A577.42596%2C%22width%22%3A98.03327999999999%2C%22height%22%3A27.525139999999965%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1550.2651%2C%22y%22%3A623.9568%2C%22width%22%3A215.5634%2C%22height%22%3A32.39323999999999%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1927.6433%2C%22y%22%3A624.86975%2C%22width%22%3A128.70000000000005%2C%22height%22%3A31.435850000000073%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A460.69733%2C%22y%22%3A653.3408%2C%22width%22%3A150.16692999999992%2C%22height%22%3A29.095600000000104%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A1570.0161%2C%22y%22%3A716.7902%2C%22width%22%3A180.55669999999986%2C%22height%22%3A38.60159999999996%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1258.0272%2C%22y%22%3A722.9823%2C%22width%22%3A94.70129999999995%2C%22height%22%3A27.09576000000004%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1584.5844%2C%22y%22%3A822.90216%2C%22width%22%3A148.67550000000006%2C%22height%22%3A27.929539999999974%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A223.56151%2C%22y%22%3A843.9697%2C%22width%22%3A369.89203999999995%2C%22height%22%3A27.897199999999998%2C%22text%22%3A%22%E9%80%82%E8%BF%87Object.createlAnimalprototypo)%22%7D%2C%7B%22x%22%3A434.48538%2C%22y%22%3A988.2317%2C%22width%22%3A202.76391999999993%2C%22height%22%3A26.274%2C%22text%22%3A%22clonePrototype%22%7D%2C%7B%22x%22%3A446.98532%2C%22y%22%3A1070.0082%2C%22width%22%3A177.44161999999994%2C%22height%22%3A25.748800000000074%2C%22text%22%3A%22constructor%22%7D%2C%7B%22x%22%3A1572.3486%2C%22y%22%3A1463.1498%2C%22width%22%3A289.83050000000003%2C%22height%22%3A35.83240000000001%2C%22text%22%3A%22by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF%20%E5%91%A8%E5%A4%B1%E5%9E%8B%E7%9A%84%E6%B5%B4%E6%9C%88%20%E5%8D%8E%E5%8D%A1%E6%AC%A2%E5%9E%8B%20%E7%88%B6%E8%8A%99%20%E5%AD%90%E5%88%A4%20%E5%AE%89%E5%88%A9%E6%89%80%E6%9C%89%E5%B1%9E%E4%BD%8F%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%AD%90%E7%B1%BB%20Animal%20name%20Chicken%20%E8%AF%9A%E7%94%A8Animal.call%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20name%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20prototype%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20prototype%20%E9%80%82%E8%BF%87Object.createlAnimalprototypo)%20clonePrototype%20constructor%20by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1058%2C%22height%22%3A790%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598450848119-6de1328d-d4e9-41a0-8895-2ceb08c6b2ed.png?x-oss-process=image%2Fresize%2Cw_1500&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;790px&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&quot;k54ck&quot; data-lake-id=&quot;74eff773ce0198d254c818c1c0e3d602&quot;&gt;原型拷贝和构造函数实现继承&lt;/h3&gt;
&lt;h4 id=&quot;qrwUv&quot; data-lake-id=&quot;63fdfe91ee61a71683f03c749cae03ea&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;9ea37e9cdfee8894d71d82801c6417d5&quot;&gt;结合借用构造函数传递参数和遍历父类的原型链循环赋值给子类原型链来实现继承。和组合继承以及寄生组合式继承一样会调用Amimal.call()，不同对是三者对原型链的处理方式不同&lt;/p&gt;
&lt;div id=&quot;8PxQg&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20function%20Fish(name%2C%20color)%7B%5Cn%20%20%20%20%20%20Animal.call(this%2C%20name%2C%20color)%5Cn%20%20%7D%5Cn%20%20for(var%20key%20in%20Animal.prototype)%20%7B%5Cn%20%20%20%20%20%20Fish.prototype%5Bkey%5D%20%3D%20Animal.prototype%5Bkey%5D%5Cn%20%20%7D%5Cn%20%20Fish.prototype.constructor%20%3D%20Fish%3B%5Cn%20%20let%20firstFish%20%3D%20new%20Fish('%E9%B1%BC'%2C%20'%E7%BA%A2')%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%228PxQg%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Fish(name, color){
      Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, name, color)
  }
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Animal.prototype) {
      Fish.prototype[key] &lt;/span&gt;=&lt;span&gt; Animal.prototype[key]
  }
  Fish.prototype.constructor &lt;/span&gt;=&lt;span&gt; Fish;
  let firstFish &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Fish('鱼', '红');
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;dxeyp&quot; data-lake-id=&quot;9c1800e7e8f5dcce7c20149a44309783&quot;&gt;缺陷&lt;/h4&gt;
&lt;ul data-lake-id=&quot;7ffd148414294ba7d5c57d51c45cc419&quot;&gt;&lt;li data-lake-id=&quot;2555b66abe1b4e6eda34a294cba2e717&quot;&gt;不可遍历的属性不会被继承&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;xN52I&quot; data-lake-id=&quot;cd1f37f0fec42835b8a8ef203967f3a4&quot;&gt;图解&lt;/h4&gt;
&lt;p data-lake-id=&quot;11a9a7af018e06568d2a2ae1e0735193&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598451657632-412d5666-5255-4387-a4ac-3589cef6f22f.png%22%2C%22originWidth%22%3A2112%2C%22originHeight%22%3A1528%2C%22name%22%3A%22image.png%22%2C%22size%22%3A223875%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A87.06707%2C%22y%22%3A87.948265%2C%22width%22%3A482.68042999999994%2C%22height%22%3A46.297995%2C%22text%22%3A%22%E5%8E%9F%E5%9E%8B%E6%8B%B7%E8%B4%9D%2B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF%22%7D%2C%7B%22x%22%3A1323.2957%2C%22y%22%3A136.03014%2C%22width%22%3A72.24760000000015%2C%22height%22%3A22.369880000000023%2C%22text%22%3A%22%E8%87%B3%E6%9C%AC%E8%8C%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A845.719%2C%22y%22%3A138.59999%2C%22width%22%3A46.10863999999992%2C%22height%22%3A26.40001000000001%2C%22text%22%3A%22%E5%AD%90%E8%B4%B9%22%7D%2C%7B%22x%22%3A484.5769%2C%22y%22%3A330.37454%2C%22width%22%3A89.88293999999996%2C%22height%22%3A27.225829999999974%2C%22text%22%3A%22Animal%22%7D%2C%7B%22x%22%3A988.8902%2C%22y%22%3A355.72867%2C%22width%22%3A276.13189999999986%2C%22height%22%3A24.937329999999974%2C%22text%22%3A%22%E4%BE%BF%E5%88%B6%E6%89%80%E6%9C%89%E5%8E%9F%E6%80%A7%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%AD%90%E7%B1%BB%22%7D%2C%7B%22x%22%3A487.64026%2C%22y%22%3A416.17944%2C%22width%22%3A80.08874000000003%2C%22height%22%3A22.819709999999986%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A1619.7723%2C%22y%22%3A436.41785%2C%22width%22%3A60.13609999999994%2C%22height%22%3A27.323669999999993%2C%22text%22%3A%22FIsh%22%7D%2C%7B%22x%22%3A1045.5835%2C%22y%22%3A476.82156%2C%22width%22%3A158.74940000000015%2C%22height%22%3A23.843740000000025%2C%22text%22%3A%22%E7%8E%A5%E7%94%A8AniMAL.cal%22%7D%2C%7B%22x%22%3A419.20346%2C%22y%22%3A493.27338%2C%22width%22%3A215.21434000000005%2C%22height%22%3A39.75332000000003%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A815.44855%2C%22y%22%3A497.87656%2C%22width%22%3A129.67325000000005%2C%22height%22%3A30.23520000000002%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A1605.785%2C%22y%22%3A536.3884%2C%22width%22%3A86.04700000000003%2C%22height%22%3A24.514549999999986%2C%22text%22%3A%22name%22%7D%2C%7B%22x%22%3A433.33554%2C%22y%22%3A565.97437%2C%22width%22%3A185.04312%2C%22height%22%3A36.40782999999999%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A126.15878%2C%22y%22%3A570.3052%2C%22width%22%3A93.17092000000001%2C%22height%22%3A27.591959999999972%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1542.7104%2C%22y%22%3A614.55365%2C%22width%22%3A214.8342%2C%22height%22%3A37.77655000000004%2C%22text%22%3A%22attribute%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1922.0637%2C%22y%22%3A620.0411%2C%22width%22%3A128.54880000000026%2C%22height%22%3A28.714330000000018%2C%22text%22%3A%22attribute%22%7D%2C%7B%22x%22%3A453.38458%2C%22y%22%3A646.1828%2C%22width%22%3A147.16076999999996%2C%22height%22%3A27.793399999999906%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A1556.6741%2C%22y%22%3A708.50525%2C%22width%22%3A187.32040000000006%2C%22height%22%3A40.76459%2C%22text%22%3A%22action%E7%9A%84%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A1249.3289%2C%22y%22%3A714.38934%2C%22width%22%3A96.91149999999993%2C%22height%22%3A30.13936000000001%2C%22text%22%3A%22action%22%7D%2C%7B%22x%22%3A1574.9415%2C%22y%22%3A811.79565%2C%22width%22%3A147.56780000000003%2C%22height%22%3A33.50744999999995%2C%22text%22%3A%22prototype%22%7D%2C%7B%22x%22%3A922.7707%2C%22y%22%3A898.91766%2C%22width%22%3A179.04729999999995%2C%22height%22%3A27.352640000000065%2C%22text%22%3A%22%E9%80%82%E8%BF%87forin%E4%B8%8E%E5%88%B6%E5%8E%9F%E5%9E%8B!%22%7D%2C%7B%22x%22%3A1562.8655%2C%22y%22%3A1454.3408%2C%22width%22%3A290.6731%2C%22height%22%3A38.58510000000001%2C%22text%22%3A%22by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8E%9F%E5%9E%8B%E6%8B%B7%E8%B4%9D%2B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF%20%E8%87%B3%E6%9C%AC%E8%8C%AF%E5%9E%8B%20%E5%AD%90%E8%B4%B9%20Animal%20%E4%BE%BF%E5%88%B6%E6%89%80%E6%9C%89%E5%8E%9F%E6%80%A7%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%AD%90%E7%B1%BB%20name%20FIsh%20%E7%8E%A5%E7%94%A8AniMAL.cal%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20name%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20attribute%E7%9A%84%E6%8C%87%E9%92%88%20attribute%20prototype%20action%E7%9A%84%E6%8C%87%E9%92%88%20action%20prototype%20%E9%80%82%E8%BF%87forin%E4%B8%8E%E5%88%B6%E5%8E%9F%E5%9E%8B!%20by%3A%E4%B8%80%E5%8F%AA%E8%8F%9C%E9%B8%9F%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%95%8A%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1056%2C%22height%22%3A764%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598451657632-412d5666-5255-4387-a4ac-3589cef6f22f.png?x-oss-process=image%2Fresize%2Cw_1500&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;764px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;PhK6g&quot; data-lake-id=&quot;c6452aed9eb536f6658fb6972e9086e1&quot;&gt;Class继承&lt;/h3&gt;
&lt;h4 id=&quot;6fZDp&quot; data-lake-id=&quot;c0c64cbff2b3ee1b4be74e81c351b21c&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;d146c285b28ef8ab15b3b7d7f894a709&quot;&gt;ES6提供的继承方式，其extends的实现和上述的寄生组合式继承方式一样.&lt;/p&gt;
&lt;div id=&quot;QgKtM&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20class%20Rabbit%20%7B%5Cn%20%20%20%20%20%20constructor(name)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20action(currentAction)%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log(%60%E5%BD%93%E5%89%8D%E5%8A%A8%E4%BD%9C%24%7BcurrentAction%7D%60)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20class%20FirstRabbit%20extends%20Rabbit%7B%5Cn%20%20%20%20%20%20constructor(name)%7B%5Cn%20%20%20%20%20%20%20%20%20%20super('%E5%85%94%E5%AD%90')%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20ownName()%7B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20let%20firstRabbit%20%3D%20new%20FirstRabbit('%E5%B0%8F%E7%99%BD%E5%85%94')%5Cn%20%20console.log(firstRabbit)%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22QgKtM%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  class Rabbit {
      constructor(name) {
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
      }
      action(currentAction){
          console.log(`当前动作${currentAction}`)
      }
  }
  class FirstRabbit extends Rabbit{
      constructor(name){
          super(&lt;/span&gt;'兔子'&lt;span&gt;);
      }
      ownName(){
      }
  }
  let firstRabbit &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FirstRabbit('小白兔'&lt;span&gt;)
  console.log(firstRabbit)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;04d77af0d24b65fbc20e939da67cb830&quot;&gt;我们来看下结果&lt;/p&gt;
&lt;p data-lake-id=&quot;dd3f77dc4cdb663aaa939d383249ac20&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F305942%2F1598452564944-18dba86f-63e4-47e1-9cbe-8082a117ed79.png%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A300%2C%22name%22%3A%22image.png%22%2C%22size%22%3A46671%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A64.05285%2C%22y%22%3A7.0082254%2C%22width%22%3A428.44230000000005%2C%22height%22%3A27.309034599999997%2C%22text%22%3A%22FirstRabbitname%5C%22%E5%B0%8F%E7%99%BD%E5%85%94%5C%22%22%7D%2C%7B%22x%22%3A90.484604%2C%22y%22%3A42.044533%2C%22width%22%3A178.288136%2C%22height%22%3A25.512057%2C%22text%22%3A%22name%3A%5C%22%E5%B0%8F%E7%99%BD%E5%85%94%5C%22%22%7D%2C%7B%22x%22%3A249.48451%2C%22y%22%3A73.174774%2C%22width%22%3A88.63963999999999%2C%22height%22%3A23.768366%2C%22text%22%3A%22Rabbit%22%7D%2C%7B%22x%22%3A117.402336%2C%22y%22%3A76.90633%2C%22width%22%3A79.33895399999999%2C%22height%22%3A22.800030000000007%2C%22text%22%3A%22proto%22%7D%2C%7B%22x%22%3A301.96194%2C%22y%22%3A105.66785%2C%22width%22%3A248.40139999999997%2C%22height%22%3A23.278559999999985%2C%22text%22%3A%22classFirstRabbit%22%7D%2C%7B%22x%22%3A116.53615%2C%22y%22%3A108.070946%2C%22width%22%3A168.31815%2C%22height%22%3A20.178963999999993%2C%22text%22%3A%22constructor%3A%22%7D%2C%7B%22x%22%3A274.63464%2C%22y%22%3A137.07764%2C%22width%22%3A128.25782000000004%2C%22height%22%3A27.16873000000001%2C%22text%22%3A%22ownName()%22%7D%2C%7B%22x%22%3A115.492226%2C%22y%22%3A139.28148%2C%22width%22%3A119.792534%2C%22height%22%3A21.58352000000002%2C%22text%22%3A%22ownName%3A%22%7D%2C%7B%22x%22%3A141.78812%2C%22y%22%3A171.58594%2C%22width%22%3A77.01828%2C%22height%22%3A25.244159999999994%2C%22text%22%3A%22proto%22%7D%2C%7B%22x%22%3A138.75804%2C%22y%22%3A199.13994%2C%22width%22%3A446.33626%2C%22height%22%3A27.559799999999996%2C%22text%22%3A%22actionfaction(currentaction)%22%7D%2C%7B%22x%22%3A327.18085%2C%22y%22%3A234.58699%2C%22width%22%3A175.20657%2C%22height%22%3A23.941910000000036%2C%22text%22%3A%22cLassRabbit%22%7D%2C%7B%22x%22%3A140.81293%2C%22y%22%3A236.56352%2C%22width%22%3A168.17773%2C%22height%22%3A20.673939999999988%2C%22text%22%3A%22constructor%3A%22%7D%2C%7B%22x%22%3A280.3865%2C%22y%22%3A264.76843%2C%22width%22%3A106.61737999999997%2C%22height%22%3A25.346619999999973%2C%22text%22%3A%22object%22%7D%2C%7B%22x%22%3A168.27972%2C%22y%22%3A267.41232%2C%22width%22%3A78.42342%2C%22height%22%3A21.437009999999987%2C%22text%22%3A%22proto%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22FirstRabbitname%5C%22%E5%B0%8F%E7%99%BD%E5%85%94%5C%22%20name%3A%5C%22%E5%B0%8F%E7%99%BD%E5%85%94%5C%22%20Rabbit%20proto%20classFirstRabbit%20constructor%3A%20ownName()%20ownName%3A%20proto%20actionfaction(currentaction)%20cLassRabbit%20constructor%3A%20object%20proto%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A450%2C%22height%22%3A150%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/305942/1598452564944-18dba86f-63e4-47e1-9cbe-8082a117ed79.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;150px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;abda4c7ae2891db23d44904163c5768b&quot;&gt;我们可以看到class继承也是通过原型链实现的，实际上ES6的class只是一个语法糖🍬。&lt;/p&gt;
&lt;h3 id=&quot;upCDP&quot; data-lake-id=&quot;7b95f81bf343d858b4e92194389d3167&quot;&gt;混入方式继承多个对象&lt;/h3&gt;
&lt;h4 id=&quot;IecsY&quot; data-lake-id=&quot;3af4d4d68c3d09f6df0d14c04884e0f0&quot;&gt;实现&lt;/h4&gt;
&lt;p data-lake-id=&quot;761c3479153a1abb7acc9ed49d36cc85&quot;&gt;通过借用构造函数继承和Object.assign()实现多继承。在寄生组合的基础上再进一步。&lt;/p&gt;
&lt;div id=&quot;heec3&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20%20%2F%2F%20%E6%B7%B7%E5%85%A5%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%A7%E6%89%BF%5Cn%20%20%20%20function%20OthenClass()%7B%7D%5Cn%20%20%20%20function%20Tiger()%7B%5Cn%20%20%20%20%20%20%20%20Animal.call(this)%3B%5Cn%20%20%20%20%20%20%20%20OthenClass.call(this)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E7%BB%A7%E6%89%BF%E4%B8%80%E4%B8%AA%E7%B1%BB%5Cn%20%20%20%20Tiger.prototype%20%3D%20Object.create(Animal.prototype)%3B%5Cn%20%20%20%20%2F%2F%20%E6%B7%B7%E5%90%88%E5%85%B6%E5%AE%83%5Cn%20%20%20%20Object.assign(Animal.prototype%2C%20OthenClass.prototype)%3B%5Cn%20%20%20%20%2F%2F%20%E9%87%8D%E6%96%B0%E6%8C%87%E5%AE%9Aconstructor%5Cn%20%20%20%20MyClass.prototype.constructor%20%3D%20MyClass%3B%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22heec3%22%7D&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 混入方式实现多继承&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; OthenClass(){}
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Tiger(){
        Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        OthenClass.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 继承一个类&lt;/span&gt;
    Tiger.prototype =&lt;span&gt; Object.create(Animal.prototype);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 混合其它&lt;/span&gt;
&lt;span&gt;    Object.assign(Animal.prototype, OthenClass.prototype);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新指定constructor&lt;/span&gt;
    MyClass.prototype.constructor = MyClass;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;jRzeW&quot; data-lake-id=&quot;4eed93016bc8dfe3dc82786b8da09771&quot;&gt;问题⚠️&lt;/h3&gt;
&lt;h4 id=&quot;zPvjO&quot; data-lake-id=&quot;0fc736376133a2d4f7d965ee8c1f7f44&quot;&gt;函数声明和类声明的区别&lt;/h4&gt;
&lt;p data-lake-id=&quot;fbf7cc69db50a23fa2c57563b616e54e&quot;&gt;函数声明会提升，类声明不会。首先需要声明你的类，然后访问它，否则会抛出一个ReferenceError。&lt;/p&gt;
&lt;h4 id=&quot;s8pRn&quot; data-lake-id=&quot;182ebcd326232231e8c929ef6149a755&quot;&gt;ES5继承和ES6继承的区别&lt;/h4&gt;
&lt;ul data-lake-id=&quot;ea8d5d3e85de5af9f894e490d592f912&quot;&gt;&lt;li data-lake-id=&quot;03a0a8f8a71bb7a8c520b75e4214f1fb&quot;&gt;ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.call(this)）.&lt;/li&gt;
&lt;li data-lake-id=&quot;8f0d9c229cb119e0242cb6c6ce6b9757&quot;&gt;ES6的继承有所不同，实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。因为子类没有自己的this对象，所以必须先调用父类的super()方法，否则新建实例报错。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;2ay4d&quot; data-lake-id=&quot;5a75a90a485959ff43d3097d56fedacb&quot;&gt;特别注意⚠️：&lt;/h4&gt;
&lt;p data-lake-id=&quot;26cb3ad4d06a39ca17567aff93c1a054&quot;&gt;基于原型链实现的继承都存在引用类型的属性共享的问题，文中所讲的的不共享引用类型的属性仅指不共享父类引用类型的属性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p data-lake-id=&quot;a8cb460722ed20e2e3aa8ce982aed287&quot;&gt;参考&lt;/p&gt;
&lt;p data-lake-id=&quot;69c09411411832fc5c0fea67f0386e64&quot;&gt;JS高级程序设计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;72fa9408d21a1c9f4439546bf3d25006&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 27 Aug 2020 00:48:00 +0000</pubDate>
<dc:creator>一只菜鸟攻城狮啊</dc:creator>
<og:description>JS继承的实现方式一共有八种。下面我们来一个一个瞅一下。注意⚠️：文章依据个人理解，难免有问题，还望各位及时指出!!!!! 原型链继承 借用构造函数继承 组合继承 原型式继承 寄生继承 寄生组合式继承</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/suihang/p/13569381.html</dc:identifier>
</item>
<item>
<title>我想贪图安逸，但又不甘心，怎么办？ - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/13569329.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/13569329.html</guid>
<description>&lt;blockquote readability=&quot;6.4637096774194&quot;&gt;
&lt;p&gt;先看再点赞，给自己一点思考的时间；欢迎微信搜索【&lt;strong&gt;沉默王二&lt;/strong&gt;】关注这个有颜值却假装靠才华苟且的程序员。&lt;br/&gt;本文 &lt;strong&gt;GitHub&lt;/strong&gt; &lt;a href=&quot;https://github.com/qinggee/itwanger.github.io&quot;&gt;github.com/itwanger&lt;/a&gt; 已收录，里面还有我精心准备的一线大厂面试题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读者小安给我发了一条很长的私信，我觉得蛮有代表性的，可能还有很多其他的读者有这样的困惑，所以我决定来详细的、一段一段的回答一下。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;二哥你好，在你的列表里当了好久的小透明。最近有点迷，翻了翻列表看到你，就想给你发条消息，如果打扰了很抱歉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;瞧瞧，多么友善诚恳的读者，点赞点赞。&lt;/p&gt;
&lt;p&gt;借这个机会，我再强调一次，每一个读者的每一条私信，我都会认真地回复，如果还没有收到回复，请保持一点耐心，毕竟我还有一些其他的事情要做，比如说吃饭睡觉打豆豆，至于打的什么豆豆，别问。&lt;/p&gt;
&lt;p&gt;有时候，很尴尬，认认真真写了回复，发过去后，发现我已经不是对方的好友，你说气不气！&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/08/anyi-01.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;“能不能给我一首歌的时间，紧紧的把那拥抱变成永远。”&lt;/p&gt;
&lt;p&gt;之前有读者给我提建议，“二哥，你建个知识星球呗，我们提问方便，你还能顺带收点费。”我加入过不少知识星球，说实话，氛围不是我想要的那种。&lt;/p&gt;
&lt;p&gt;我一直觉得，免费对一些读者提供帮助，是一种很高尚、很纯粹的行为。所以，想提问的话，尽管来，不要太客气。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;我从毕业一直在现在这家小公司做 Java 开发，刚毕业那会很明显能感觉到自己在进步，在成长，但是最近开始感觉自己变成老油条了。说实话，看不到公司在技术上的进步空间，之所以留下来可能就是贪图安逸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段话说得我挺“心有戚戚焉”的，真的。我 2014 年回洛阳后，也是一直在小公司，（主要是没有大公司），技术上成长很慢，基本上停滞不前。&lt;/p&gt;
&lt;p&gt;我之前写过一篇文章，《&lt;a href=&quot;https://mp.weixin.qq.com/s/dgTvU3hgtdfIcBLIdP6Gmg&quot;&gt;腾讯的技术职级&lt;/a&gt;》，我到现在，充其量就是一个工程师，不敢在前面加一个“高级”，真的是。不是我自谦，是确实没有成长的空间。&lt;/p&gt;
&lt;p&gt;必须得承认，这个世界上，优秀的人只有那么一小部分，如果天天喊着“我命由我不由天”，那也得生在李靖家里啊！&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/08/anyi-02.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;我们做程序员的，哪一个不想去大厂，哪一个不想工资高，福利待遇好？但也得认清现实，知道自己的能力处在什么样的水平。&lt;/p&gt;
&lt;p&gt;在我看来，小公司做开发，没什么丢人的，毕竟要生活，要挣面包钱。但同时，要清醒地意识到，小公司的技术的确是会有局限的，这是不可避免的。&lt;/p&gt;
&lt;p&gt;所以，我们并不是“贪图安逸”，我们只是迫不得已。当然了，我这不是在找借口，而是我们要做好心理建设，如果一直处在自怨自艾的情绪里，就很难有所突破，打破目前的局面。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;有时候，我想在下班后自己学习点东西，但是毫无头绪，不知道从哪开始，就这样日复一日地拖着。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我刚回洛阳那会，挺不适应的。每天上完班就没有事干了，确实感觉有点空虚，但又不知道该往哪里发力，很茫然，和小安差不多。于是，就打游戏，一遍又一遍的通关，每通关一次，激情就少一些，最后，游戏玩烦了。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/08/anyi-03.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;怎么办呢？&lt;/p&gt;
&lt;p&gt;我开始读很多小说，有技术相关的，比如说《乔布斯传》、《黑客与画家》、《浪潮之巅》，更多的是和技术无关的，比如说《金庸传》、《巨流河》、《情人》、《基督山伯爵》、《黄金时代》、《青铜时代》、《当我谈跑步的时候我谈些什么》等等等等。&lt;/p&gt;
&lt;p&gt;读书确实能够打发时间，也能够让烦躁的心安静下来。那时候，我每天在朋友圈晒读书心得和笔记，140 个字以内，很有文艺范。偶尔闲的特别无聊，我会回头看看，但是感觉很幼稚，特别幼稚！&lt;/p&gt;
&lt;p&gt;除了读书，我还参加了很多线下的读书会，付费订阅了《樊登读书》。一开始，觉得线下读书会可以锻炼我的表达力，后来觉得收获越来越少，就不再参加了；樊登读书也是，一开始选的书很不错，比如说《你就是孩子最好的玩具》、《幸福的方法》、《为什么你喜欢招蚊子》，后来选的心灵鸡汤比较多，我就很烦，就不再听了。&lt;/p&gt;
&lt;p&gt;再后来，我开始读更多偏重技术层面的书，毕竟是个程序员嘛。&lt;/p&gt;
&lt;ul readability=&quot;12&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;《人月神话》、《人件》，这两本算是软件管理图书领域最为璀璨的“双子星”。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;《代码大全》，这本书算是编程领域最佳的实用指南，比较厚，我没有读完。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;《代码整洁之道》，这本书给了我很多可遵循的编码规则，读完后，我还对当时的一个项目的方法名、参数名进行了大量的修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;《程序员修炼之道》、《重构：改善既有代码的设计》、《编程珠玑》、《修改代码的艺术》，这四本书非常经典，不过读起来确实比较枯燥，需要耐心。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;《算法》、《计算机程序设计艺术》、《计算机程序的构造和解释》、《企业应用架构模式》、《算法导论》、《深入浅出设计模式》，这六本书花费了我太多的时间去消化，但每感觉读一点，就真的是进化了一点。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;《软技能：代码之外的生存指南》，这本书的前几章很好，后面几章有点烂。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;《Java 编程思想》、《Java 核心技术卷 1 和 2》、《Effective Java》，可以说是 Java 领域的四大名著，每读完一章我就写一篇文章，感觉在 Java 编程方面成长特别大。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;《计算机是怎样跑起来的》、《程序是怎样跑起来的》、《网络是怎样连接的》，这三本书让我对计算机组成原理和基础有了更全面的认知。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;《图解 HTTP》、《图解 TCP/IP》、《图解网络硬件》、《HTTP 权威指南》，这四本书让我对计算机网络基础有了更深入的了解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/08/anyi-04.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;这些书我并不是一本挨着一本读的，也不是一章挨着一章读的，如果有些内容理解不了，我就选择跳过；如果这本书读得枯燥了，就换另外一本。总之，就是不去刻意要求自己，尽最大可能提高自己读书的兴趣和专注力。&lt;/p&gt;
&lt;p&gt;读书可以说是最好的学习办法了，也是提升能力最快的捷径。想一想，古往今来，所有的精华都是通过书传承过来的，里面蕴含了人类所有的智慧。尽管时代发展了，信息的承载体除了书，还有图片和视频，但归根结底，图片和视频都是文字的不同呈现形式而已。&lt;/p&gt;
&lt;p&gt;小安也可以读一读我推荐的这些书，真的，读完后一定会来感谢我的。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;最近有人问我以后还会继续做这行吗？说实话我不知道，对未来没有想法，没有目标，更没有规划，目前就是当一天和尚撞一天钟的心态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序员这个行业确实已经内卷了，加班严重，需要付出巨大的牺牲才能换来相对丰厚的收入。那要不要继续做个行业呢？&lt;/p&gt;
&lt;p&gt;我的答案是——要。因为程序员就是这个时代的弄潮儿，如果程序员都干不下去，那别的行业更干不下去了。&lt;/p&gt;
&lt;p&gt;对于大多数平凡的人（我在内）来说，能够随波逐流不被拍死在沙滩上，就是最大的成功。我对未来也没有计划，就是觉得，既然要当一天程序员，那我就敲一天的代码，挣一天的钱。&lt;/p&gt;
&lt;p&gt;假如真的有一天干不下去了，再说呗。就像是封建社会的农民，认知里就只有种地，那就种呗，当种不下去的那一天，就会出现工业革命。在时间的洪流里，我们要做的就是——做好自己，就行了。&lt;/p&gt;
&lt;p&gt;太多的空想，太多的焦虑，都于事无补。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;小公司人少，日常工作很杂没什么技术，二哥，你说我还要继续待下去吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果能够在技术领域深耕，那我觉得可以跳槽，换一家匹配自己能力的公司，那未来的发展肯定会大有改观。&lt;/p&gt;
&lt;p&gt;如果在技术领域无法更进一步了，那就要想想其他的出路。&lt;/p&gt;
&lt;p&gt;我们需要认清一个事实，就是有些人可以持续精进，有些人，武功修炼到一定程度后，就无法突破瓶颈，除非走火入魔。&lt;/p&gt;
&lt;p&gt;那这个时候，该怎么办呢？&lt;/p&gt;
&lt;p&gt;人这一辈子，其实就像一家企业，可以纵向发展，也可以横向发展，对吧？&lt;/p&gt;
&lt;p&gt;当纵向发展无法突破时，就要想着拓宽业务，在其他的领域再创辉煌。&lt;/p&gt;
&lt;p&gt;比如说我，技术上还有进步的空间，但已经接近瓶颈了，主要是因为洛阳的软件行业不景气，没有好的环境辅助我成长。那我就要另寻出路，写作，就是一条很适合我的道路。&lt;/p&gt;
&lt;p&gt;下面这些画，大家应该不会感到陌生。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/08/anyi-05.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;文艺复兴期间，涌现了大量的“神人”，不仅画画的好，自然科学、建筑、物理、数学、哲学等等，各方面都发展得特别好。比如说，《蒙娜丽莎》的作者达芬奇，他是美术家、雕塑家、建筑家、地理学家、工程师、科学家、哲学家、诗人、音乐家、发明家。&lt;/p&gt;
&lt;p&gt;当我们发现自己在某个领域遇到了瓶颈，那么就可以切换一下赛道，看看自己有没有做其他副业的可能性，对吧？&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;最后，谢谢你看到这里，都是一些负能量，实在不好意思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;确实，小安吐槽的这些充斥着满满的负能量，但这个阶段的我们，谁不是呢？谁身上没有背负压力呢？当压力过大的时候，就会出现焦虑，就会有负能量。&lt;/p&gt;
&lt;p&gt;这个时候，最能释放压力的办法，就是找个人，倾诉一下，把心中的苦水全部都倾倒出来。也只有这样，才能装新的水，快乐的水，对吧？&lt;/p&gt;
&lt;p&gt;可以来找我，不用不好意思，我愿意倾听大家的心声，也乐意给大家提供一些力所能及的帮助。&lt;/p&gt;
&lt;p&gt;最后，希望我这些建议能够帮助到小安，也希望能帮助那些和小安有类似问题的读者朋友们，谢谢大家。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;我是沉默王二，一枚在九朝古都洛阳苟且偷生的程序员。&lt;strong&gt;关注即可提升学习效率，感谢你的三连支持，奥利给🌹&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你觉得文章对你有些帮助，欢迎微信搜索「&lt;strong&gt;沉默王二&lt;/strong&gt;」第一时间阅读，回复关键字「&lt;strong&gt;面试&lt;/strong&gt;」可以免费获取我为你精心准备的大厂面试攻略；本文 &lt;strong&gt;GitHub&lt;/strong&gt; &lt;a href=&quot;https://github.com/itwanger/itwanger.github.io&quot;&gt;github.com/itwanger&lt;/a&gt; 已收录，欢迎 star。&lt;/p&gt;
</description>
<pubDate>Thu, 27 Aug 2020 00:20:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>先看再点赞，给自己一点思考的时间；欢迎微信搜索【沉默王二】关注这个有颜值却假装靠才华苟且的程序员。本文 GitHub github.com/itwanger 已收录，里面还有我精心准备的一线大厂面试题</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qing-gee/p/13569329.html</dc:identifier>
</item>
<item>
<title>ent orm笔记2---schema使用(上) - syncd</title>
<link>http://www.cnblogs.com/zhaof/p/13569090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/13569090.html</guid>
<description>&lt;p&gt;在上一篇关于快速使用ent orm的笔记中，我们再最开始使用&lt;code&gt;entc init User&lt;/code&gt; 创建schema，在ent orm 中的schema 其实就是数据库模型，在schema中我们可以通过Fields 定义数据库中表的字段信息；通过Edges 定义表之间的关系信息；通过Index 定义字段的索引信息等等，这篇文章会整理一下关于ent orm 中如何使用这些。&lt;/p&gt;
&lt;p&gt;备注：文章中的所有代码在&lt;code&gt;github.com/peanut-cc/ent_orm_notes&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;fileds&quot;&gt;Fileds&lt;/h2&gt;
&lt;p&gt;当我们执行 &lt;code&gt;entc init User&lt;/code&gt; 之后，会在当前目录下生成一个ent目录，在该目录下有一个schema目录，默认情况下schema/user.go文件如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import &quot;github.com/facebook/ent&quot;

// User holds the schema definition for the User entity.
type User struct {
        ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.Field {
        return nil
}

// Edges of the User.
func (User) Edges() []ent.Edge {
        return nil
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果要对user 这表添加字段，需要在Fileds方法中添加如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.Int(&quot;age&quot;),
                field.String(&quot;username&quot;).
                        Unique(),
                field.Time(&quot;created_at&quot;).
                        Default(time.Now),
                field.Float32(&quot;salary&quot;).
                        Optional(),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意： 默认情况下，所有字段都是必填字段，可以使用Optional方法将其设置为optional。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据类型&quot;&gt;数据类型&lt;/h3&gt;
&lt;p&gt;下面的数据类型都是支持的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;All Go numeric types. Like int, uint8, float64, etc.&lt;/li&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;time.Time&lt;/li&gt;
&lt;li&gt;[]byte (only supported by SQL dialects).&lt;/li&gt;
&lt;li&gt;JSON (only supported by SQL dialects).&lt;/li&gt;
&lt;li&gt;Enum (only supported by SQL dialects).&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.Int(&quot;age&quot;),
                field.String(&quot;username&quot;).
                        Unique(),
                field.Time(&quot;created_at&quot;).
                        Default(time.Now),
                field.Float32(&quot;salary&quot;).
                        Optional(),
                field.Bool(&quot;active&quot;).
                        Default(false),
                field.JSON(&quot;strings&quot;, []string{}).
                        Optional(),
                field.Enum(&quot;state&quot;).
                        Values(&quot;on&quot;, &quot;off&quot;).
                        Optional(),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;id字段&quot;&gt;ID字段&lt;/h3&gt;
&lt;p&gt;数据库表的id字段，默认是内置的，不需要单独添加，其类型默认为int, 并在数据库中自动递增，&lt;/p&gt;
&lt;p&gt;为了将id配置为在所有表中唯一，需要在schema migration的时候使用WithGlobalUniqueID&lt;/p&gt;
&lt;p&gt;如果需要对id字段进行其他配置，或者想要使用UUID格式存id，则需要覆盖id的配置。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.Int(&quot;id&quot;).
                        StructTag(`json:&quot;oid,omitempty&quot;`),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.UUID(&quot;id&quot;, uuid.UUID{}),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.String(&quot;id&quot;).
                        MaxLen(25).
                        NotEmpty().
                        Unique().
                        Immutable(),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;数据库类型&quot;&gt;数据库类型&lt;/h3&gt;
&lt;p&gt;每个数据库都有自己的从go的数据类型到数据库类型的映射，例如，Mysql 在数据库中将float64字段创建为双精度的。ent orm 有一个选项参数可以使用SchemaType 方法覆盖默认行为&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the Card.
func (Card) Fields() []ent.Field {
        return []ent.Field{
                field.Float(&quot;amount&quot;).
                        SchemaType(map[string]string{
                                dialect.MySQL:    &quot;decimal(6,2)&quot;, // Override MySQL.
                                dialect.Postgres: &quot;numeric&quot;,      // Override Postgres.
                        }),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;go-type&quot;&gt;GO Type&lt;/h3&gt;
&lt;p&gt;字段的默认类型是基本的Go数据类型，例如，对于字符串字段，类型为string, 对于时间字段，类型为time.Time&lt;/p&gt;
&lt;p&gt;GoType 方法提供了一个选项，可以使用自定义类型替换默认的ent类型。但自定义类型必须是可以转换为Go的基本类型的类型，或者实现了&lt;a href=&quot;https://pkg.go.dev/github.com/facebook/ent/schema/field?tab=doc#ValueScanner&quot;&gt;ValueScanner&lt;/a&gt;接口的类型&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the Card.
func (Card) Fields() []ent.Field {
        return []ent.Field{
                field.Float(&quot;amount&quot;).
                        GoType(Amount(0)),
                field.String(&quot;name&quot;).
                        Optional().
            // A ValueScanner type.
                        GoType(&amp;amp;sql.NullString{}),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;default-values-默认值&quot;&gt;Default Values 默认值&lt;/h3&gt;
&lt;p&gt;Non-unique 的字段可以通过Default 和 UpdateDefault方法设置默认值&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the Group.
func (Group) Fields() []ent.Field {
        return []ent.Field{
                field.Time(&quot;created_at&quot;).
                        Default(time.Now),
                field.Time(&quot;updated_at&quot;).
                        Default(time.Now).
                        UpdateDefault(time.Now),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;validators&quot;&gt;Validators&lt;/h3&gt;
&lt;p&gt;关于字段的validator是通过 func(T) error 函数，该函数使用Validate方法在schema中定义，并在创建或更新schema的时候应用于字段的校验&lt;/p&gt;
&lt;p&gt;字段的validator支持的类型有string 和所有的数字类型&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the Group.
func (Group) Fields() []ent.Field {
        return []ent.Field{
                field.String(&quot;name&quot;).
                        Match(regexp.MustCompile(&quot;[a-zA-Z_]+$&quot;)).
                        Validate(func(s string) error {
                                if strings.ToLower(s) == s {
                                        return errors.New(&quot;group name must begin with uppercase&quot;)
                                }
                                return nil
                        }),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;内置的-validators&quot;&gt;内置的 Validators&lt;/h3&gt;
&lt;p&gt;ent orm 提供了一些内置的validators, 如下：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Numeric types:&lt;br/&gt;Positive() - Positive adds a minimum value validator with the value of 1&lt;br/&gt;Negative() - Negative adds a maximum value validator with the value of -1&lt;br/&gt;NonNegative() - NonNegative adds a minimum value validator with the value of 0&lt;br/&gt;Min(i) - Validate that the given value is &amp;gt; i.&lt;br/&gt;Max(i) - Validate that the given value is &amp;lt; i.&lt;br/&gt;Range(i, j) - Validate that the given value is within the range [i, j].&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;string:&lt;/p&gt;
&lt;p&gt;MinLen(i)&lt;br/&gt;MaxLen(i)&lt;br/&gt;Match(regexp.Regexp)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;optional-可选字段&quot;&gt;Optional 可选字段&lt;/h3&gt;
&lt;p&gt;可选字段是在创建的时候不是必传的字段，并将在数据库设置为可为空的字段&lt;br/&gt;默认情况下，字段都是必填字段&lt;/p&gt;
&lt;h3 id=&quot;nillable&quot;&gt;Nillable&lt;/h3&gt;
&lt;p&gt;有时候你可能希望区分字段的零值和nil，如数据库的某列包含0 或者NULL,Nillable选项正是为此而存在的.&lt;/p&gt;
&lt;p&gt;如果有一个类型为T的字段设置为Nillable ，在通过go generate 生成代码的时候的时候生成的struct 中改字段的类型是*T, 如果数据库中该字段是NULL， 那么在ent orm的查询结果中就是nil, 否则对于没有设置Nillable的字段，如果数据库中字段的值是NULl，返回的则是改字段的零值&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.String(&quot;required_name&quot;),
                field.String(&quot;optional_name&quot;).Optional(),
                field.String(&quot;nilable_name&quot;).Optional().Nillable(),
                field.String(&quot;nilable_name2&quot;).Optional().Nillable(),
                field.Int(&quot;age&quot;).Optional(),
                field.Int(&quot;age2&quot;).Optional().Nillable(),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们通过如下代码进行数据的创建和查询，这里分别创建了两条数据，第一条数据的设置SetOptionalName，SetNilableName 的字段都没有设置内容，第二次的时候都设置了内容&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;context&quot;
        &quot;log&quot;

        &quot;github.com/peanut-cc/ent_orm_notes/schema_notes/ent/user&quot;

        _ &quot;github.com/go-sql-driver/mysql&quot;
        &quot;github.com/peanut-cc/ent_orm_notes/schema_notes/ent&quot;
)

func main() {
        client, err := ent.Open(&quot;mysql&quot;, &quot;root:123456@tcp(10.211.55.3:3306)/schema_notes?parseTime=True&quot;)
        if err != nil {
                log.Fatal(err)
        }
        defer client.Close()
        ctx := context.Background()
        // run the auto migration tool
        if err := client.Schema.Create(ctx); err != nil {
                log.Fatalf(&quot;failed creating schema resources:%v&quot;, err)
        }
        client.User.Create().SetRequiredName(&quot;peanut&quot;).Save(ctx)
        client.User.Create().SetRequiredName(&quot;syncd&quot;).
                SetOptionalName(&quot;option_name&quot;).
                SetNilableName(&quot;nil_name&quot;).
                SetNilableName2(&quot;nil_name2&quot;).
                SetAge(18).
                SetAge2(20).
                SaveX(ctx)
        u := client.User.Query().Where(user.RequiredNameEQ(&quot;peanut&quot;)).OnlyX(ctx)
        log.Printf(&quot;required_name is:%v option_name is:%v nil_name is:%v nil_name2 is:%v age is :%v age2 is:%v\n&quot;, u.RequiredName,
                u.OptionalName, u.NilableName, u.NilableName2, u.Age, u.Age2)
        u2 := client.User.Query().Where(user.RequiredNameEQ(&quot;syncd&quot;)).OnlyX(ctx)
        log.Printf(&quot;required_name is:%v option_name is:%v nil_name is:%v nil_name2 is:%v age is :%v age2 is:%v\n&quot;, u2.RequiredName,
                u2.OptionalName, u2.NilableName, u2.NilableName2, u2.Age, u2.Age2)
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是数据的打印结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;2020/08/26 20:39:47 required_name is:peanut option_name is: nil_name is:&amp;lt;nil&amp;gt; nil_name2 is:&amp;lt;nil&amp;gt; age is :0 age2 is:&amp;lt;nil&amp;gt;
2020/08/26 20:39:47 required_name is:syncd option_name is:option_name nil_name is:0xc000200580 nil_name2 is:0xc000200590 age is :18 age2 is:0xc00020c4d8

&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;immutable-不可变字段&quot;&gt;Immutable 不可变字段&lt;/h3&gt;
&lt;p&gt;不可变字段，是只能在创建的时候设置值&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the user.
func (User) Fields() []ent.Field {
    return []ent.Field{
        field.String(&quot;name&quot;),
        field.Time(&quot;created_at&quot;).
            Default(time.Now).
            Immutable(),
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;uniqueness-唯一索引&quot;&gt;Uniqueness 唯一索引&lt;/h3&gt;
&lt;p&gt;可以使用Unique方法给字段设置唯一索引。 注意：唯一所以字段不能具有默认值&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the user.
func (User) Fields() []ent.Field {
    return []ent.Field{
        field.String(&quot;name&quot;),
        field.String(&quot;nickname&quot;).
            Unique(),
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;storage-key&quot;&gt;Storage Key&lt;/h3&gt;
&lt;p&gt;可以使用StorageKey方法配置自定义存储名称。在SQL中映射为列名&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the user.
func (User) Fields() []ent.Field {
    return []ent.Field{
        field.String(&quot;name&quot;).
            StorageKey(`old_name&quot;`),
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;indexes-索引&quot;&gt;Indexes 索引&lt;/h3&gt;
&lt;p&gt;可以在多个字段和一些关系表中创建索引&lt;/p&gt;
&lt;h3 id=&quot;struct-tags&quot;&gt;Struct Tags&lt;/h3&gt;
&lt;p&gt;可以使用StructTag方法将自定义struct tag添加到生成的实体中。&lt;br/&gt;请注意，如果未提供此选项，或者提供的该选项不包含json标记，则默认json标记将与字段名称一起添加。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the user.
func (User) Fields() []ent.Field {
    return []ent.Field{
        field.String(&quot;name&quot;).
            StructTag(`gqlgen:&quot;gql_name&quot;`),
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;sensitive-fields&quot;&gt;Sensitive Fields&lt;/h3&gt;
&lt;p&gt;可以使用Sensitive方法将字符串字段定义为Sensitive Fields。&lt;br/&gt;Sensitive Fields不会被打印，并且在编码时将被忽略。&lt;br/&gt;请注意，Sensitive Fields不能具有struct标记。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the user.
func (User) Fields() []ent.Field {
    return []ent.Field{
        field.String(&quot;password&quot;).
            Sensitive(),
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;annotations&quot;&gt;Annotations&lt;/h3&gt;
&lt;p&gt;在代码生成中，Annotations用于将任意元数据附加到字段对象。模板扩展可以检索这个元数据并在它们的模板中使用它。注意，元数据对象必须可序列化为 JSON 原始值(例如，struct、 map 或 slice)。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;// Fields of the user.
func (User) Fields() []ent.Field {
    return []ent.Field{
        field.Time(&quot;creation_date&quot;).
            Annotations(entgql.Annotation{
                OrderField: &quot;CREATED_AT&quot;,
            }),
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;edges&quot;&gt;Edges&lt;/h2&gt;
&lt;h3 id=&quot;快速使用&quot;&gt;快速使用&lt;/h3&gt;
&lt;p&gt;Edges 也理解为表之间的association,通常指的我们表之间的一对多，多对多关系等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://entgo.io/assets/er_user_pets_groups.png&quot; alt=&quot;er-group-users&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ent/schema/pet.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
        &quot;github.com/facebook/ent&quot;
        &quot;github.com/facebook/ent/schema/edge&quot;
        &quot;github.com/facebook/ent/schema/field&quot;
)

// Pet holds the schema definition for the Pet entity.
type Pet struct {
        ent.Schema
}

// Fields of the Pet.
func (Pet) Fields() []ent.Field {
        return []ent.Field{
                field.String(&quot;name&quot;),
        }
}

// Edges of the Pet.
func (Pet) Edges() []ent.Edge {
        return []ent.Edge{
                edge.From(&quot;owner&quot;, User.Type).
                        Ref(&quot;pets&quot;).
                        Unique(),
        }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ent/schema/user.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
        &quot;github.com/facebook/ent&quot;
        &quot;github.com/facebook/ent/schema/edge&quot;
        &quot;github.com/facebook/ent/schema/field&quot;
)

// User holds the schema definition for the User entity.
type User struct {
        ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.String(&quot;name&quot;),
                field.Int(&quot;age&quot;),
        }
}

// Edges of the User.
func (User) Edges() []ent.Edge {
        return []ent.Edge{
                edge.To(&quot;pets&quot;, Pet.Type),
                edge.From(&quot;groups&quot;, Group.Type).Ref(&quot;users&quot;),
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ent/schema/group.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
        &quot;github.com/facebook/ent&quot;
        &quot;github.com/facebook/ent/schema/edge&quot;
        &quot;github.com/facebook/ent/schema/field&quot;
)

// Group holds the schema definition for the Group entity.
type Group struct {
        ent.Schema
}

// Fields of the Group.
func (Group) Fields() []ent.Field {
        return []ent.Field{
                field.String(&quot;name&quot;),
        }
}

// Edges of the Group.
func (Group) Edges() []ent.Edge {
        return []ent.Edge{
                edge.To(&quot;users&quot;, User.Type),
        }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的关系中，一个用户可以有多个宠物，但是一个宠物只能属于一个用户。所以这里对于宠物来说是一对一的关系，对于用户来说是多对一关系。&lt;/p&gt;
&lt;p&gt;我们查看一下创建的pets表的信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE `pets` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8mb4_bin NOT NULL,
  `user_pets` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `pets_users_pets` (`user_pets`),
  CONSTRAINT `pets_users_pets` FOREIGN KEY (`user_pets`) REFERENCES `users` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为在上述关系中：用户和宠物之间是一对多关系，所以这里使用的&lt;code&gt;edge.To&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;而对宠物来说是一对一的关系，所以这里使用&lt;code&gt;edge.From&lt;/code&gt;的&lt;code&gt;Ref&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;edge.To&lt;/code&gt;和&lt;code&gt;edge.From&lt;/code&gt; 是创建表关系的两个方法&lt;/p&gt;
&lt;h3 id=&quot;一对一关系&quot;&gt;一对一关系&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://entgo.io/assets/er_user_card.png&quot; alt=&quot;er-user-card&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，设定一个用户只能有一张信用卡，而一个信用卡也只能属于一个用户。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ent/schema/user.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// User holds the schema definition for the User entity.
type User struct {
   ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.Field {
   return []ent.Field{
      field.String(&quot;name&quot;),
      field.Int(&quot;age&quot;),
   }
}

// Edges of the User.
func (User) Edges() []ent.Edge {
   return []ent.Edge{
      edge.To(&quot;card&quot;, Card.Type).Unique(),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ent/schema/card.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// Card holds the schema definition for the Card entity.
type Card struct {
   ent.Schema
}

// Fields of the Card.
func (Card) Fields() []ent.Field {
   return []ent.Field{
      field.String(&quot;number&quot;),
      field.Time(&quot;expired&quot;),
   }
}

// Edges of the Card.
func (Card) Edges() []ent.Edge {
   return []ent.Edge{
      edge.From(&quot;owner&quot;, User.Type).
         Ref(&quot;card&quot;).
         Unique().
         // We add the &quot;Required&quot; method to the builder
         // to make this edge required on entity creation.
         // i.e. Card cannot be created without its owner.
         Required(),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;一对多关系&quot;&gt;一对多关系&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://entgo.io/assets/er_user_pets.png&quot; alt=&quot;er-user-pets&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中用户和宠物之间是一对多关系，每个用户可以有多个宠物，一个宠物只有一个主人&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ent/schema/user.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// User holds the schema definition for the User entity.
type User struct {
   ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.Field {
   return []ent.Field{
      field.String(&quot;name&quot;),
   }
}

// Edges of the User.
func (User) Edges() []ent.Edge {
   return []ent.Edge{
      edge.To(&quot;pets&quot;, Pet.Type),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ent/schema/pet.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// Pet holds the schema definition for the Pet entity.
type Pet struct {
   ent.Schema
}

// Fields of the Pet.
func (Pet) Fields() []ent.Field {
   return []ent.Field{
      field.String(&quot;name&quot;),
   }
}

// Edges of the Pet.
func (Pet) Edges() []ent.Edge {
   return []ent.Edge{
      edge.From(&quot;owner&quot;, User.Type).
         Ref(&quot;pets&quot;).
         Unique(),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相关的查询如下代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
   &quot;context&quot;
   &quot;fmt&quot;
   &quot;log&quot;

   _ &quot;github.com/go-sql-driver/mysql&quot;

   &quot;github.com/peanut-cc/ent_orm_notes/one_to_many/ent&quot;
)

func main() {
   client, err := ent.Open(&quot;mysql&quot;, &quot;root:123456@tcp(192.168.1.100:3306)/one_to_one?parseTime=True&quot;)
   if err != nil {
      log.Fatal(err)
   }
   defer client.Close()
   ctx := context.Background()
   // run the auto migration tool
   if err := client.Schema.Create(ctx); err != nil {
      log.Fatalf(&quot;failed creating schema resources:%v&quot;, err)
   }
   Do(ctx, client)
}

func Do(ctx context.Context, client *ent.Client) error {
   // Create the 2 pets.
   pedro, err := client.Pet.
      Create().
      SetName(&quot;pedro&quot;).
      Save(ctx)
   if err != nil {
      return fmt.Errorf(&quot;creating pet: %v&quot;, err)
   }
   lola, err := client.Pet.
      Create().
      SetName(&quot;lola&quot;).
      Save(ctx)
   if err != nil {
      return fmt.Errorf(&quot;creating pet: %v&quot;, err)
   }
   // Create the user, and add its pets on the creation.
   // 创建用户，并添加用户和宠物的关系
   a8m, err := client.User.
      Create().
      SetName(&quot;a8m&quot;).
      AddPets(pedro, lola).
      Save(ctx)
   if err != nil {
      return fmt.Errorf(&quot;creating user: %v&quot;, err)
   }
   fmt.Println(&quot;User created:&quot;, a8m)shell
   // Output: User(id=1, age=30, name=a8m)

   // Query the owner. Unlike `Only`, `OnlyX` panics if an error occurs.
   // 根据宠物反向查询所属的用户
   owner := pedro.QueryOwner().OnlyX(ctx)
   fmt.Println(owner.Name)
   // Output: a8m

   // Traverse the sub-graph. Unlike `Count`, `CountX` panics if an error occurs.
   // 根据宠物反向查询用户，并查询该用户有多少宠物
   count := pedro.
      QueryOwner(). // a8m
      QueryPets().  // pedro, lola
      CountX(ctx)   // count
   fmt.Println(count)
   // Output: 2
   return nil
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;多对多关系&quot;&gt;多对多关系&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://entgo.io/assets/er_user_groups.png&quot; alt=&quot;er-user-groups&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，用户和组之间是多对多关系，每个组有多个用户，每个用户也可以加入多个组&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ent/schema/group.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// Group holds the schema definition for the Group entity.
type Group struct {
   ent.Schema
}

// Fields of the Group.
func (Group) Fields() []ent.Field {
   return []ent.Field{
      field.String(&quot;name&quot;),
   }
}

// Edges of the Group.
func (Group) Edges() []ent.Edge {
   return []ent.Edge{
      edge.To(&quot;users&quot;, User.Type),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ent/schema/user.go&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// User holds the schema definition for the User entity.
type User struct {
   ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.Field {
   return []ent.Field{
      field.String(&quot;name&quot;),
   }
}

// Edges of the User.
func (User) Edges() []ent.Edge {
   return []ent.Edge{
      edge.From(&quot;groups&quot;, Group.Type).Ref(&quot;users&quot;),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个时候，会生成第三张表，group_users表，查看表的信息如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE `group_users` (
  `group_id` bigint(20) NOT NULL,
  `user_id` bigint(20) NOT NULL,
  PRIMARY KEY (`group_id`,`user_id`),
  KEY `group_users_user_id` (`user_id`),
  CONSTRAINT `group_users_group_id` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) ON DELETE CASCADE,
  CONSTRAINT `group_users_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;常用的查询方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// User holds the schema definition for the User entity.
type User struct {
   ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.Field {
   return []ent.Field{
      field.String(&quot;name&quot;),
   }
}

// Edges of the User.
func (User) Edges() []ent.Edge {
   return []ent.Edge{
      edge.From(&quot;groups&quot;, Group.Type).Ref(&quot;users&quot;),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;多对多（单张表）&quot;&gt;多对多（单张表）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://entgo.io/assets/er_following_followers.png&quot; alt=&quot;er-following-followers&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种关系其实也挺常见的，如我们微博账户，不同账户之间可以相关关注&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package schema

import (
   &quot;github.com/facebook/ent&quot;
   &quot;github.com/facebook/ent/schema/edge&quot;
   &quot;github.com/facebook/ent/schema/field&quot;
)

// User holds the schema definition for the User entity.
type User struct {
   ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.package schema

import (
        &quot;github.com/facebook/ent&quot;
        &quot;github.com/facebook/ent/schema/edge&quot;
        &quot;github.com/facebook/ent/schema/field&quot;
)

// User holds the schema definition for the User entity.
type User struct {
        ent.Schema
}

// Fields of the User.
func (User) Fields() []ent.Field {
        return []ent.Field{
                field.String(&quot;name&quot;),
        }
}

// Edges of the User.
func (User) Edges() []ent.Edge {
        return []ent.Edge{
                edge.To(&quot;following&quot;, User.Type).
                        From(&quot;followers&quot;),
        }
}
Field {
   return []ent.Field{
      field.String(&quot;name&quot;),
   }
}

// Edges of the User.
func (User) Edges() []ent.Edge {
   return []ent.Edge{
      edge.To(&quot;following&quot;, User.Type).
         From(&quot;followers&quot;),
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样会生成一个user_following表，表信息为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE `user_following` (
  `user_id` bigint(20) NOT NULL,
  `follower_id` bigint(20) NOT NULL,
  PRIMARY KEY (`user_id`,`follower_id`),
  KEY `user_following_follower_id` (`follower_id`),
  CONSTRAINT `user_following_follower_id` FOREIGN KEY (`follower_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  CONSTRAINT `user_following_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;
&lt;p&gt;在这里和在Fields中同样也有&lt;code&gt;Required&lt;/code&gt; &lt;code&gt;StorageKey&lt;/code&gt; &lt;code&gt;Indexes&lt;/code&gt; &lt;code&gt;Annotations&lt;/code&gt; 用法基本一样，这里不再说明&lt;/p&gt;
&lt;h2 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h2&gt;
</description>
<pubDate>Wed, 26 Aug 2020 23:57:00 +0000</pubDate>
<dc:creator>syncd</dc:creator>
<og:description>在上一篇关于快速使用ent orm的笔记中，我们再最开始使用entc init User 创建schema，在ent orm 中的schema 其实就是数据库模型，在schema中我们可以通过Fiel</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhaof/p/13569090.html</dc:identifier>
</item>
<item>
<title>使用Wasserstein GAN生成小狗图像 - 牛云杰</title>
<link>http://www.cnblogs.com/NosenLiu/p/13569047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NosenLiu/p/13569047.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一.前期学习经过&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;GAN(Generative Adversarial Nets)是生成对抗网络的简称，由生成器和判别器组成，在训练过程中通过生成器和判别器的相互对抗，来相互的促进、提高。最近一段时间对GAN进行了学习，并使用GAN做了一次实践，在这里做一篇笔记记录一下。&lt;/p&gt;
&lt;p&gt;最初我参照&lt;a class=&quot;follow-nickName&quot; href=&quot;https://blog.csdn.net/LEE18254290736/article/details/97371930&quot; target=&quot;_blank&quot;&gt;JensLee&lt;/a&gt;大神的讲解，使用keras构造了一个DCGAN(深度卷积生成对抗网络)模型，来对数据集中的256张小狗图像进行学习，都是一些类似这样的狗狗照片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1463653/202008/1463653-20200827005101294-1884054301.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 他的方法是通过随机生成的维度为1000的向量，生成大小为64*64的狗狗图。但经过较长时间的训练，设置了多种超参数进行调试，仍感觉效果不理想，总是在训练到一定程度之后，生成器的loss就不再改变，成为一个固定值，生成的图片也看不出狗的样子。&lt;/p&gt;
&lt;p&gt;后续经过查阅资料，了解到DCGAN模型损失函数的定义会使生成器和判别器优化目标相背离，判别器训练的越好，生成器的梯度消失现象越严重，在之前DCGAN的实验中，生成器的loss长时间不变动就是梯度消失引起的。而Wasserstein GAN(简称WGAN)对其进行了改进，修改了生成器和判别器的损失函数，避免了当判别器训练程度较好时，生成器的梯度消失问题，并参照&lt;a href=&quot;https://blog.csdn.net/xg123321123/article/details/78034859&quot; target=&quot;_blank&quot;&gt;这篇&lt;/a&gt;博客，构建了WGAN网络对小狗图像数据集进行学习。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;UserLink AuthorInfo-name&quot;&gt;&lt;a class=&quot;UserLink-link&quot; href=&quot;https://zhuanlan.zhihu.com/p/25071913&quot; target=&quot;_blank&quot; data-za-detail-view-element_name=&quot;User&quot;&gt;郑华滨&lt;/a&gt;&lt;/span&gt;大佬的这篇文章对WGAN的原理进行了细致的讲解，想要深入对模型原理进行挖掘的小伙伴可以去深入学习一下，本文重点讲实践应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二.模型实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里的代码是在TensorFlow框架(版本1.14.0)上实现的，python语言(版本3.6.4)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.对TensorFlow的卷积、反卷积、全连接等操作进行封装，使其变量名称规整且方便调用。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;97&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; conv2d(name, tensor,ksize, out_dim, stddev=0.01, stride=2, padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    with tf.variable_scope(name):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         w = tf.get_variable(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [ksize, ksize, tensor.get_shape()[-1],out_dim], dtype=&lt;span&gt;tf.float32,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                             initializer=tf.random_normal_initializer(stddev=&lt;span&gt;stddev))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         var = tf.nn.conv2d(tensor,w,[1,stride, stride,1],padding=&lt;span&gt;padding)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         b = tf.get_variable(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [out_dim], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;float32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,initializer=tf.constant_initializer(0.01&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tf.nn.bias_add(var, b)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; deconv2d(name, tensor, ksize, outshape, stddev=0.01, stride=2, padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    with tf.variable_scope(name):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         w = tf.get_variable(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [ksize, ksize, outshape[-1], tensor.get_shape()[-1]], dtype=&lt;span&gt;tf.float32,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                             initializer=tf.random_normal_initializer(stddev=&lt;span&gt;stddev))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         var = tf.nn.conv2d_transpose(tensor, w, outshape, strides=[1, stride, stride, 1], padding=&lt;span&gt;padding)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         b = tf.get_variable(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [outshape[-1]], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;float32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, initializer=tf.constant_initializer(0.01&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tf.nn.bias_add(var, b)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fully_connected(name,value, output_shape):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     with tf.variable_scope(name, reuse=&lt;span&gt;None) as scope:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         shape =&lt;span&gt; value.get_shape().as_list()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         w = tf.get_variable(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [shape[1], output_shape], dtype=&lt;span&gt;tf.float32,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                                     initializer=tf.random_normal_initializer(stddev=0.01&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         b = tf.get_variable(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [output_shape], dtype=tf.float32, initializer=tf.constant_initializer(0.0&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; tf.matmul(value, w) +&lt;span&gt; b
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; relu(name, tensor):
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tf.nn.relu(tensor, name)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; lrelu(name,x, leak=0.2&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; tf.maximum(x, leak * x, name=name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在卷积函数(conv2d)和反卷积函数(deconv2d)中，变量'w'就是指卷积核，他们的维度分布时有差异的，卷积函数中，卷积核的维度为[卷积核高，卷积核宽，输入通道维度，输出通道维度]，而反卷积操作中的卷积核则将最后两个维度顺序调换，变为[卷积核高，卷积核宽，输出通道维度，输入通道维度]。反卷积是卷积操作的逆过程，通俗上可理解为：已知卷积结果矩阵（维度y*y），和卷积核（维度k*k），获得卷积前的原始矩阵（维度x*x）这么一个过程。&lt;/p&gt;
&lt;p&gt;不论是卷积操作还是反卷积操作，都需要对输出的维度进行计算，并作为函数的参数（即out_dim和outshape变量）输入到函数中。经过个人总结，卷积（反卷积）操作输出维度的计算公式如下（公式为个人总结，如有错误欢迎指出）：&lt;/p&gt;
&lt;p&gt;正向卷积维度计算：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1463653/202008/1463653-20200826213547585-738963619.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其中，'⌊⌋'是向下取整符号，y是卷积后边长，x是卷积前边长，k指的是卷积核宽/高，stride指步长。&lt;/p&gt;
&lt;p&gt;反向卷积维度计算：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1463653/202008/1463653-20200826213921657-595902671.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其中，y是反卷积前的边长，x是反卷积后的边长，k指的是卷积核宽/高，stride指步长。&lt;/p&gt;
&lt;p&gt;relu()和lrelu()函数是两个激活函数，lrelu()其中LeakyRelu激活函数的实现，它能够减轻RELU的稀疏性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.对判别器进行构建。&lt;/span&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; Discriminator(name,inputs,reuse):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     with tf.variable_scope(name, reuse=&lt;span&gt;reuse):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         output = tf.reshape(inputs, [-1, pic_height_width, pic_height_width, inputs.shape[-1&lt;span&gt;]])
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         output1 = conv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_conv_1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output, ksize=5, out_dim=DEPTH) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;32*32&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         output2 = lrelu(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_lrelu_1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, output1)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         output3 = conv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_conv_2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output2, ksize=5, padding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VALID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,stride=1,out_dim=DEPTH) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;28*28&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         output4 = lrelu(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_lrelu_2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, output3)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         output5 = conv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_conv_3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output4, ksize=5, out_dim=2*DEPTH) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;14*14&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         output6 = lrelu(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_lrelu_3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, output5)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         output7 = conv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_conv_4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output6, ksize=5, out_dim=4*DEPTH) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;7*7&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         output8 = lrelu(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_lrelu_4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, output7)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         output9 = conv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_conv_5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output8, ksize=5, out_dim=6*DEPTH) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;4*4&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         output10 = lrelu(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_lrelu_5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, output9)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         output11 = conv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_conv_6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output10, ksize=5, out_dim=8*DEPTH) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2*2&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         output12 = lrelu(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_lrelu_6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, output11)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         chanel =&lt;span&gt; output12.get_shape().as_list()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         output13 = tf.reshape(output12, [batch_size, chanel[1]*chanel[2]*chanel[3&lt;span&gt;]])
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         output0 = fully_connected(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_fc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output13, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; output0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;判别器的作用是输入一个固定大小的图像，经过多层卷积、激活函数、全连接计算后，得到一个值，根据这个值可以判定该输入图像是否是狗。&lt;/p&gt;
&lt;p&gt;首先是命名空间问题，函数参数name即规定了生成器的命名空间，下面所有新生成的变量都在这个命名空间之内，另外每一步卷积、激活函数、全连接操作都需要手动赋命名空间，这些命名不能重复，如变量output1的命名空间为&lt;span&gt;'d_conv_1'&lt;/span&gt;，变量output5的命名空间为&lt;span&gt;'d_conv_3'&lt;/span&gt;，不重复的命名也方便后续对模型进行保存加载。&lt;/p&gt;
&lt;p&gt;先将输入图像inputs形变为[-1,64, 64, 3&lt;span&gt;]的tensor&lt;/span&gt;，其中第一个维度-1是指任意数量，即任意数量的图片，每张图片长宽各64个像素，有3个通道(RGB)，形变后的output维度为[batch_size，64，64，3]。&lt;/p&gt;
&lt;p&gt;接下来开始卷积操作得到变量output1，由于默认的stride=2、padding=&quot;SAME&quot;，根据上面的正向卷积维度计算公式，得到卷积后的图像大小为32*32，而通道数则由一个全局变量DEPTH来确定，这样计算每一层的输出维度，卷积核大小都是5*5，只有在output3这一行填充方式和步长进行了调整，以将其从32*32的图像卷积成28*28。&lt;/p&gt;
&lt;p&gt;最后将维度为[batch_size，2，2，8*DEPTH]的变量形变为[batch_size，2*2*8*DEPTH]的变量，在进行全连接操作（矩阵乘法），得到变量output0（维度为[batch_size,1]），即对输入中batch_size个图像的判别结果。&lt;/p&gt;
&lt;p&gt;一般的判别器会在全连接层后方加一个sigmoid激活函数，将数值归并到[0,1]之间，以直观的显示该图片是狗的概率，但WGAN使用Wasserstein距离来计算损失，因此需要去掉sigmoid激活函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.对生成器进行构建。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;94&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; generator(name, reuse=&lt;span&gt;False):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     with tf.variable_scope(name, reuse=&lt;span&gt;reuse):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         noise = tf.random_normal([batch_size, 128])&lt;span&gt;#&lt;/span&gt;&lt;span&gt;.astype('float32')&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;         noise = tf.reshape(noise, [batch_size, 128], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;noise&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         output = fully_connected(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_fc_1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, noise, 2*2*8*&lt;span&gt;DEPTH)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         output = tf.reshape(output, [batch_size, 2, 2, 8*DEPTH], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_conv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         output = deconv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_deconv_1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output, ksize=5, outshape=[batch_size, 4, 4, 6*&lt;span&gt;DEPTH])
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         output =&lt;span&gt; tf.nn.relu(output)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; output = tf.reshape(output, [batch_size, 4, 4, 6*DEPTH])&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         output = deconv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_deconv_2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output, ksize=5, outshape=[batch_size, 7, 7, 4*&lt;span&gt; DEPTH])
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         output =&lt;span&gt; tf.nn.relu(output)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         output = deconv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_deconv_3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output, ksize=5, outshape=[batch_size, 14, 14, 2*&lt;span&gt;DEPTH])
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         output =&lt;span&gt; tf.nn.relu(output)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         output = deconv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_deconv_4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output, ksize=5, outshape=[batch_size, 28, 28&lt;span&gt;, DEPTH])
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         output =&lt;span&gt; tf.nn.relu(output)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         output = deconv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_deconv_5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output, ksize=5, outshape=[batch_size, 32, 32, DEPTH],stride=1, padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VALID&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         output =&lt;span&gt; tf.nn.relu(output)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         output = deconv2d(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_deconv_6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, output, ksize=5, outshape=[batch_size, OUTPUT_SIZE, OUTPUT_SIZE, 3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; output = tf.nn.relu(output)&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         output =&lt;span&gt; tf.nn.sigmoid(output)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; tf.reshape(output,[-1,OUTPUT_SIZE,OUTPUT_SIZE,3])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成器的作用是随机产生一个随机值向量，并通过形变、反卷积等操作，将其转变为[64，64，3]的图像。&lt;/p&gt;
&lt;p&gt;首先生成随机值向量noise，其维度为[batch_size，128]，接下来的步骤和判别器完全相反，先通过全连接层，将其转换为[batch_size, 2*2*8*DEPTH]的变量，并形变为[batch_size, 2, 2, 8*DEPTH]。&lt;/p&gt;
&lt;p&gt;之后，通过不断的反卷积操作，将变量维度变为[batch_size, 4, 4, 6*&lt;span&gt;DEPTH]&lt;/span&gt;→[batch_size, 7, 7, 4* &lt;span&gt;DEPTH]&lt;/span&gt;→[batch_size, 14, 14, 2*&lt;span&gt;DEPTH]&lt;/span&gt;→[batch_size, 28, 28&lt;span&gt;, DEPTH]&lt;/span&gt;→[batch_size, 32, 32, DEPTH]→[batch_size, 64, 64, 3&lt;span&gt;]。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与卷积层不同之处在于，每一步反卷积操作的输出维度，需要手动规定，具体计算方法参加上方的反向卷积维度计算公式。最终得到的output变量即batch_size张生成的图像。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.数据预处理。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; load_data(path):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     X_train =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     img_list = glob.glob(path + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/*.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; img &lt;span&gt;in&lt;/span&gt;&lt;span&gt; img_list:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         _img =&lt;span&gt; cv2.imread(img)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         _img =&lt;span&gt; cv2.resize(_img, (pic_height_width, pic_height_width))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        X_train.append(_img)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;训练集图像数目：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,len(X_train))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(X_train[0],type(X_train[0]),X_train[0].shape)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; np.array(X_train, dtype=&lt;span&gt;np.uint8)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; normalization(input_matirx):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     input_shape =&lt;span&gt; input_matirx.shape
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     total_dim = 1
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(input_shape)):
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         total_dim = total_dim*&lt;span&gt;input_shape[i]
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     big_vector =&lt;span&gt; input_matirx.reshape(total_dim,)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     out_vector =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(big_vector)):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         out_vector.append(big_vector[i]/256)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 0~256值归一化&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     out_vector =&lt;span&gt; np.array(out_vector)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     out_matrix =&lt;span&gt; out_vector.reshape(input_shape)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; out_matrix
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; denormalization(input_matirx):
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     input_shape =&lt;span&gt; input_matirx.shape
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     total_dim = 1
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(input_shape)):
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         total_dim = total_dim*&lt;span&gt;input_shape[i]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     big_vector =&lt;span&gt; input_matirx.reshape(total_dim,)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     out_vector =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(big_vector)):
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         out_vector.append(big_vector[i]*256)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 0~256值还原&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     out_vector =&lt;span&gt; np.array(out_vector)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     out_matrix =&lt;span&gt; out_vector.reshape(input_shape)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; out_matrix
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些函数主要用于加载原始图像，并根据我们WGAN模型的要求，对原始图像进行预处理。&lt;span&gt;load_data()函数用来加载数据文件夹中的所有狗狗图像，并将载入的图像缩放到64*64像素的大小。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;normalization()函数和denormalization()函数用来对图像数据进行归一化和反归一化，每个像素在单个通道中的取值在[0~256]之间，我们需要将其归一化到[0,1]范围内，否则在模型训练过程中loss会出现较大波动；在使用生成器得到生成结果之后，每个像素内的数值都在[0,1]之间，需要将其反归一化到&lt;span&gt;&lt;span&gt;[0~256]&lt;/span&gt;&lt;/span&gt;。这一步也必不可少，最开始的几次试验没有对数据进行归一化，导致loss巨大，且难以收敛。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.模型训练。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; train():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    with tf.variable_scope(tf.get_variable_scope()):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         real_data = tf.placeholder(tf.float32, shape=[batch_size,pic_height_width,pic_height_width,3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        with tf.variable_scope(tf.get_variable_scope()):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             fake_data = generator(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,reuse=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             disc_real = Discriminator(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis_r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,real_data,reuse=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             disc_fake = Discriminator(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis_r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,fake_data,reuse=&lt;span&gt;True)   
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取变量列表，d_vars为判别器参数，g_vars为生成器的参数&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         t_vars =&lt;span&gt; tf.trainable_variables()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         d_vars = [var &lt;span&gt;for&lt;/span&gt; var &lt;span&gt;in&lt;/span&gt; t_vars &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; var.name]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         g_vars = [var &lt;span&gt;for&lt;/span&gt; var &lt;span&gt;in&lt;/span&gt; t_vars &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;g_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; var.name]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;计算损失&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         gen_cost = -&lt;span&gt;tf.reduce_mean(disc_fake)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         disc_cost = tf.reduce_mean(disc_fake) -&lt;span&gt; tf.reduce_mean(disc_real)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         alpha =&lt;span&gt; tf.random_uniform(
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             shape=[batch_size, 1],minval=0.,maxval=1&lt;span&gt;.)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         differences = fake_data -&lt;span&gt; real_data
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         interpolates = real_data + (alpha *&lt;span&gt; differences)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         gradients = tf.gradients(Discriminator(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis_r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,interpolates,reuse=&lt;span&gt;True), [interpolates])[0]
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         slopes = tf.sqrt(tf.reduce_sum(tf.square(gradients), reduction_indices=[1&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         gradient_penalty = tf.reduce_mean((slopes - 1.) ** 2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         disc_cost += LAMBDA *&lt;span&gt; gradient_penalty
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;定义优化器optimizer&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         with tf.variable_scope(tf.get_variable_scope(), reuse=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             gen_train_op =&lt;span&gt; tf.train.RMSPropOptimizer(
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 learning_rate=1e-4,decay=0.9).minimize(gen_cost,var_list=&lt;span&gt;g_vars)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             disc_train_op =&lt;span&gt; tf.train.RMSPropOptimizer(
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 learning_rate=1e-4,decay=0.9).minimize(disc_cost,var_list=&lt;span&gt;d_vars)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         saver =&lt;span&gt; tf.train.Saver()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         sess =&lt;span&gt; tf.InteractiveSession()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         coord =&lt;span&gt; tf.train.Coordinator()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         threads = tf.train.start_queue_runners(sess=sess, coord=&lt;span&gt;coord)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;初始化参数&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         init =&lt;span&gt; tf.global_variables_initializer()
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        sess.run(init)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;获得数据&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         dog_data =&lt;span&gt; load_data(data_path)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         dog_data =&lt;span&gt; normalization(dog_data)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; epoch &lt;span&gt;in&lt;/span&gt; range (1&lt;span&gt;, EPOCH):
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; iters &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(IDXS):
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(iters%4==3&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     img = dog_data[(iters%4)*&lt;span&gt;batch_size:]
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     img = dog_data[(iters%4)*batch_size:((iters+1)%4)*&lt;span&gt;batch_size]
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(1):           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; TODO 在对一批数据展开训练时，训练几次生成器&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                     _, g_loss =&lt;span&gt; sess.run([gen_train_op, gen_cost])
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(0,3):        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; TODO 训练一次生成器，训练几次判别器...&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;                     _, d_loss = sess.run([disc_train_op, disc_cost], feed_dict=&lt;span&gt;{real_data: img})
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[%4d:%4d/%4d] d_loss: %.8f, g_loss: %.8f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(epoch, iters, IDXS, d_loss, g_loss))
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            with tf.variable_scope(tf.get_variable_scope()):
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 samples = generator(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, reuse=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 samples = tf.reshape(samples, shape=[batch_size,pic_height_width,pic_height_width,3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 samples=&lt;span&gt;sess.run(samples)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 samples = denormalization(samples)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 还原0~256 RGB 通道数值&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;                 save_images(samples, [8,8], os.getcwd()+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/img/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sample_%d_epoch.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (epoch))
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; epoch%10==9&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                 checkpoint_path =&lt;span&gt; os.path.join(os.getcwd(),
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                                                &lt;span&gt;'&lt;/span&gt;&lt;span&gt;./models/WGAN/my_wgan-gp.ckpt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                 saver.save(sess, checkpoint_path, global_step=&lt;span&gt;epoch)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*********    model saved    *********&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        coord.request_stop()
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        coord.join(threads)
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         sess.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一部分代码中，在34行&quot;初始化参数&quot;之前，还都属于计算图绘制阶段，包括定义占位符，定义损失函数，定义优化器等。需要注意的是获取变量列表这一步，需要对计算图中的所有变量进行筛选，根据命名空间，将所有生成器所包含的参数存入g_vars，将所有判别器所包含的参数存入d_vars。在定义生成器优化器的时候，指定var_list=&lt;span&gt;g_vars；在定义判别器优化器的时候，指定var_list=&lt;span&gt;d_vars&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在训练的过程中，两个全局变量控制训练的程度，&lt;span&gt;EPOCH&lt;/span&gt;即训练的轮次数目，&lt;span&gt;IDXS则为每轮训练中训练多少个批次。第46行，48行的for循环用来控制对生成器、判别器的训练程度，本例中训练程度为1:3，即训练1次生成器，训练3次判别器，这个比例可以自己设定，WGAN模型其实对这个比例不是特别敏感。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;根据上述构建好的WGAN模型，设置EPOCH=200，IDXS=1000，在自己的电能上训练了24个小时，观察每一轮次的图像生成结果，可以看出生成器不断的进化，从一片混沌到初具狗的形状。下方4幅图像分别是训练第1轮，第5轮，第50轮，第200轮的生成器模型的输出效果，每张图像中包含64个小图，可以看出狗的外形逐步显现出来。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1463653/202008/1463653-20200827001850462-2044733926.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1463653/202008/1463653-20200827001920736-555015294.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1463653/202008/1463653-20200827001951784-795606424.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1463653/202008/1463653-20200827002227812-1162090070.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这次实验的代码在github上进行了保存：&lt;a href=&quot;https://github.com/NosenLiu/Dog-Generator-by-TensorFlow&quot;&gt;https://github.com/NosenLiu/Dog-Generator-by-TensorFlow&lt;/a&gt;   除了这个WGAN模型的训练代码外，还有对进行模型、加载、再训练的相关内容。有兴趣的朋友可以关注(star☆)一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三&lt;span&gt;.总结感悟&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 通过这次实践，对WGAN模型有了一定程度的理解，尤其是对生成器的训练是十分到位的，比较容易出效果。但是由于它的判别器最后一层没有sigmoid函数，单独应用这个判别器对一个图像进行计算，根据计算结果，很难直接的得到这张图片中是狗图的概率。&lt;/p&gt;
&lt;p&gt;另外由于没有使用目标识别来对数据集进行预处理，WGAN会认为数据集中照片中的所有内容都是狗，这也就导致了后面生成的部分照片中有较大区域的绿色，应该是生成器将数据集中的草地认作了狗的一部分。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/LEE18254290736/article/details/97371930&lt;/p&gt;
&lt;p&gt;https://zhuanlan.zhihu.com/p/25071913&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/xg123321123/article/details/78034859&lt;/p&gt;

</description>
<pubDate>Wed, 26 Aug 2020 16:46:00 +0000</pubDate>
<dc:creator>牛云杰</dc:creator>
<og:description>一.前期学习经过 GAN(Generative Adversarial Nets)是生成对抗网络的简称，由生成器和判别器组成，在训练过程中通过生成器和判别器的相互对抗，来相互的促进、提高。最近一段时间</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/NosenLiu/p/13569047.html</dc:identifier>
</item>
<item>
<title>趣解计算机网络(一)之入门概念介绍 - 行人观学</title>
<link>http://www.cnblogs.com/xingrenguanxue/p/13569024.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xingrenguanxue/p/13569024.html</guid>
<description>&lt;p&gt;本文介绍一些入门基本概念&lt;/p&gt;

&lt;h2 id=&quot;11-计算机网络&quot;&gt;1.1. 计算机网络&lt;/h2&gt;
&lt;p&gt;首先来看一张普通的网——蜘蛛网：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMDQ0LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么该蜘蛛网有什么特点呢？从几何上看，无外乎有两个特征：&lt;strong&gt;点&lt;/strong&gt;（红色部分）和&lt;strong&gt;线&lt;/strong&gt;（蓝色部分）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMDUwLnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实生活中你能见到的网，如渔网、铁网、绳网等等，都具有这个特征。&lt;/p&gt;
&lt;p&gt;以此类推，计算机网络也具有这两个特征，只不过再叫点和线就不合适了，我们换两个名词：&lt;strong&gt;结点&lt;/strong&gt;和&lt;strong&gt;链路&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;计算机网络就是由若干结点和连接这些结点的链路组成的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结点可以是计算机、交换机、路由器等设备。链路可以暂时简单理解为网线。&lt;/p&gt;
&lt;p&gt;下图是由五个结点（四台计算机、一台集线器）和四条链路组成的计算机网络，可以简称为网络：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMDU1LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在研究网络之间的关系时，我们需要把网络当成一个整体来看，忽略网络内部的复杂情况。这时，一个网络可以用一朵云来代替：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMTA0LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;把某个网络比作一个人，结点和链路则是心肝脾肺肾和血管。&lt;/p&gt;
&lt;p&gt;研究网络内部就好比医生看病，关注的是你身体内的某个器官，以及这些器官之间的联系。&lt;/p&gt;
&lt;p&gt;研究网络和网络之间的关系就好比人际交往，关注的是人这个完整的个体，而不关注器官，毕竟没人要和器官交朋友。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;12-网络的网络（互连网internet）&quot;&gt;1.2. 网络的网络（互连网/internet）&lt;/h2&gt;
&lt;p&gt;网络的网络就好比“人际关系网”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMTEyLnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;智能手机把人们连接在一起，构成了人际关系网。把人换成网络，智能手机换成路由器，“人际关系网”即是“网络的网络”。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;可以暂时把路由器看做一台特殊的计算机。打个比方：&lt;/p&gt;
&lt;p&gt;把&lt;strong&gt;结点&lt;/strong&gt;比作&lt;strong&gt;市&lt;/strong&gt;，&lt;strong&gt;链路&lt;/strong&gt;比作&lt;strong&gt;高速公路&lt;/strong&gt;，&lt;strong&gt;网络&lt;/strong&gt;比作&lt;strong&gt;省&lt;/strong&gt;，&lt;strong&gt;传送的数据&lt;/strong&gt;比作&lt;strong&gt;客运汽车&lt;/strong&gt;，&lt;strong&gt;路由器&lt;/strong&gt;比作&lt;strong&gt;省际高速公路收费站&lt;/strong&gt;，&lt;strong&gt;互连网&lt;/strong&gt;比作&lt;strong&gt;国&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;网络之间通过路由器连接起来构成一个范围更大的计算机网络，这种网络就是“网络的网络”，可称之为互连网（internet）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMTE5LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图1-4中一朵云代表了一个网络，该网络连接了多台计算机。图1-6中多朵蓝色的云（网络）连接在一起构成了一朵更大的灰色的云（互连网）。由这两张图，我们可以得出：&lt;strong&gt;计算机连接在一起构成网络，网络通过路由器连接在一起构成互连网。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;13-互联网（internet）&quot;&gt;1.3. 互联网（Internet）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;互联网（Internet）&lt;/strong&gt; 是全球最大、最重要的计算机网络。如果你真正了解了互联网，那么你也可以说自己真正了解计算机网络。&lt;/p&gt;
&lt;p&gt;那什么是互联网呢？&lt;/p&gt;
&lt;p&gt;我们每天都会上网，微信聊天、王者荣耀、看视频、看博客等等。我们上的这个“网”指的就是互联网。我们之所以能够一起聊天、玩游戏就是因为大家都被连接在了同一张“网”上了。这是互联网给我们用户的第一个体验：所有上网的人被无形地连在一起了，即&lt;strong&gt;连通&lt;/strong&gt;。各位现在能够看到我写的博客文章，这是互联网给我们用户的第二个体验：&lt;strong&gt;共享资源&lt;/strong&gt;，如果没互联网，大家就看不到我的文章了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互联网的两个特性：连通性、资源共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;internet&lt;/strong&gt;和&lt;strong&gt;Internet&lt;/strong&gt;要做区分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;internet&lt;strong&gt;泛指&lt;/strong&gt;多个计算机网络连接在一起而形成的计算机网络。&lt;/li&gt;
&lt;li&gt;Internet&lt;strong&gt;特指&lt;/strong&gt;互联网，即现在全球最大、最重要的那个计算机网络，我们平时上的那个是Internet，而不是internet。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;互联网发展至今，连接在其中的已经不仅仅只是我们平常使用的“电脑”了，诸如智能手机、智能手环、智能电器能都可以接入互联网中。这些设备我们可以都称之为&lt;strong&gt;主机&lt;/strong&gt;或&lt;strong&gt;端系统&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;图1-7强调了&lt;strong&gt;主机&lt;/strong&gt;接入网络中，而忽略网络中的路由器或链路。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMTI3LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那主机是怎样接入互联网中的呢？&lt;/p&gt;
&lt;p&gt;这就得先说说目前的互联网的基础结构了。现在的互联网是&lt;strong&gt;多层次ISP结构的互联网&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ISP即互联网服务提供商&lt;/strong&gt;（Internet Service Provider），比如中国移动。ISP从互联网管理机构中申请到许多IP地址，同时也拥有通信链路和路由器等设备。我们普通用户只需向ISP交纳费用，就可获得一个IP地址，然后就可以上网了（就是交网费上网，我家是交给中国移动）。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;举个例子，IP地址就像车牌一样，你只买了个车，但是没车牌是上不了路的。ISP就负责发车牌、修公路、修收费站。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IP地址经过了互联网管理机构、ISP、最后才到用户手中，并且互联网管理机构分给ISP的是一批IP地址。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这个模式类似于生产厂家、经销商、消费者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多层次是指根据提供服务的覆盖面积大小以及拥有的IP地址数目的不同，ISP可以分为不同层次的ISP：主干ISP、地区ISP、本地ISP。&lt;/p&gt;
&lt;p&gt;主干ISP服务面积最大（通常能覆盖全国），有几个专门的公司创建和维持。地区ISP次之，地区ISP之间可通过主干ISP连接起来。地区ISP则直接给用户提供服务。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;类似于国家、省、市，用户则类似于市民。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;互联网是全球最大的、覆盖全球的计算机网络。如此之大的网络，从工作方式上看可以分为两部分：&lt;strong&gt;边缘部分&lt;/strong&gt;和&lt;strong&gt;核心部分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMTM0LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-边缘部分&quot;&gt;2.1. 边缘部分&lt;/h2&gt;
&lt;p&gt;边缘部分由连接在互联网上的主机组成，这部分由用户直接使用，为用户提供数据通信和资源共享的服务。&lt;/p&gt;
&lt;p&gt;边缘部分要利用核心部分提供的服务，才能为用户提供通信和资源共享的服务。比如图1-8中任意两个人都可以利用面前的电脑进行通信。&lt;/p&gt;
&lt;p&gt;通信的方式有两种：客户-服务器方式和对等连接方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一. 客户-服务器方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方式是目前互联网上最常用的方式。网上的各种信息都存储在服务器上，我们需要某信息时就通过互联网的核心部分提供的服务向服务器发送请求，将其检索出来，然后服务器再发送给我们的设备。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMTQyLnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;客户是服务请求方，服务器是服务提供方。&lt;/p&gt;
&lt;p&gt;客户和服务器还具有以下特点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户主动向服务器发送请求，服务器被动接受请求，这就要求服务器要一直运行。&lt;/li&gt;
&lt;li&gt;客户需要知道服务器的地址，服务器不需要知道客户的地址。&lt;/li&gt;
&lt;li&gt;客户对硬件的要求不高（普通的电脑和智能手机即可），服务器对硬件要求较高。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;二. 对等连接方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即P2P（peer-to-peer），指两台主机在通信时并不区分哪一个是服务请求方，哪一个是服务提供方。二者可以互相下载对方提供的内容。其实这种方式也是一种特殊的客户-服务器方式，只不过二者地位相等。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;打个比方，客户-服务器方式就相当于学生向老师请教问题，而P2P方式就相当于学生之间互相请教问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;22-核心部分&quot;&gt;2.2. 核心部分&lt;/h2&gt;
&lt;p&gt;核心部分由大量网络和连接这些网络的路由器组成。核心部分为边缘部分提供了服务——连通性和交换，所以边缘部分中的主机才能够进行数据通信和资源共享。核心部分要比边缘部分复杂的多。&lt;/p&gt;
&lt;p&gt;核心部分中的大量网络提供了连通性，这不难理解。那交换是谁提供的？交换的是什么？分组是什么？怎么交换分组？下面就简单介绍一下这些问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q1：&lt;/strong&gt; 交换是谁提供的？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A1：&lt;/strong&gt; 路由器&lt;/p&gt;
&lt;p&gt;路由器是一种特殊的计算机，它的任务就是进行分组交换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q2：&lt;/strong&gt; 交换的是什么？分组是什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A2：&lt;/strong&gt; 交换的是分组&lt;/p&gt;
&lt;p&gt;在网络中，我们想要传输的信息即报文（message），不是整个的传输出去，因为有的会比较长（比如这篇文章），所以通常会将其划分一个个更小的数据段，但是这些数据块中只有数据，它并不认识路，怎样使它在复杂的网络中不迷路呢？需要给它再加上一些必要的控制信息（首部），数据块加上首部就构成了一个分组。&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;打个比方，一个公司要运100吨货物，这么多货物一下肯定运不完，所以要分开运，比如每个集装箱运10吨。但是这10吨货物也不认识路，就需要给集装箱加个货车头，货车头中有司机和地图，所以能找到目的地。&lt;/p&gt;
&lt;p&gt;100吨货物就是我们要发送的信息（报文），每个集装箱就是一个个划分后的数据段，货车头就是首部，货车头加上集装箱才是一个完整的货车，即分组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMjA1LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q3：&lt;/strong&gt; 怎么交换分组？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A3：&lt;/strong&gt; 使用分组交换技术&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;举个例子，我们平常使用微信交流，两人之间可能相隔十万八千里，你想说的话怎么会刚好到达对方的手机上？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是网络核心部分最重要的功能——分组交换。&lt;/p&gt;
&lt;p&gt;图1-6中路由器把许多网络连接在一起构成了一个更大的网络，互联网中的大大小小的网络更是不计其数，而且通信链路更是复杂多变。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;你可以打开中国地图，看看上面的铁路和公路，让人眼花缭乱。互联网中的情况和这差不多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;路由器是实现分组交换的关键部件，路由器收到一个分组，会先暂时存下来，然后根据分组中的首部信息，为其选择一条合适的接口，将其转发出去。分组交换使用了存储转发技术。&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;举个西游记中的师徒四人去取经的例子，分组交换就是“敢问路在何方”。&lt;/p&gt;
&lt;p&gt;唐僧每到一个地方都会说借宿人家说：“贫僧是从东土大唐而来，去往西天拜佛求经的和尚”，别人一听这句话，只要不是妖怪，自然会告诉他下一步该走哪。虽然可能会走弯路，或者被妖怪抓，但是总体上肯定会离西天越来越近，最终到达。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上面的情境中，“东土大唐”就是&lt;strong&gt;源地址&lt;/strong&gt;，“西天”就是&lt;strong&gt;目的地址&lt;/strong&gt;，这两个信息存在了分组的首部中，所以分组才能在网络中传送。“唐僧四人”就是分组，“借宿人家”就是路由器，分组交换就是你问路的过程，不过这种问路，路人不会告诉你全路线，只会告诉你下一步怎么走。&lt;/p&gt;

&lt;h2 id=&quot;31-定义&quot;&gt;3.1. 定义&lt;/h2&gt;
&lt;p&gt;上面介绍了好几种网，蜘蛛网、人际关系网、计算机网络、网络的网络（互连网 / internet）、互联网（Internet）。除了前两种，其余都是计算机网络。但是说了这么多，好像也没精准说清楚计算机网络到底是什么？能不能像数学定理一样，给出一个精准的定义？&lt;/p&gt;
&lt;p&gt;我认为现在大可不必。（定义在相关书籍和网上都能检索到）&lt;/p&gt;
&lt;p&gt;举个例子来说，在你第一次有想学计网这个念头的时候，首先做的（几乎是条件反射般的）是不是&lt;strong&gt;上网&lt;/strong&gt;查一查什么是计算机网络？这说明计算机网络已经深入了我们的生活，并且我们能够很熟练地使用它。所以我认为初学计网时，不必死扣它的定义。&lt;/p&gt;
&lt;p&gt;现在作为初学者的我们只需要提到计算机网络，就联想到一张网，然后有许多计算机连接在一起就可以了,如图1-4和图1-6。&lt;/p&gt;
&lt;h2 id=&quot;32-分类&quot;&gt;3.2. 分类&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一. 按照网络的作用范围分类：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;广域网WAN（Wide Area Network）：作用范围为几十到几千公里，能长距离地运送数据。&lt;/li&gt;
&lt;li&gt;城域网MAN（Metropolitan Area Network）：作用范围为5到50公里。&lt;/li&gt;
&lt;li&gt;局域网LAN（Local Area Network）：作用范围较小，学校和公司经常使用。&lt;/li&gt;
&lt;li&gt;个人区域网（Personal Area Network）：作用范围很小，10m左右，个人工作使用。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;二. 按照网络的使用者分类&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;公用网（public network）：电信公司出资建造的大型网络，普通用户交纳费用即可使用。&lt;/li&gt;
&lt;li&gt;专用网（private network）：某个单位自己建造的网络，不对本单位外的人提供使用。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;33-性能指标&quot;&gt;3.3. 性能指标&lt;/h2&gt;
&lt;p&gt;以人为例，要衡量一个人健康或强壮与否，需要制定各种指标，比如身高体重、血压、血糖、肺活量等来定量地衡量。计算机网络同样如此，即性能指标。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;在介绍计算机网络的几种性能指标前，先再看一遍前面的那个比喻：&lt;/p&gt;
&lt;p&gt;把&lt;strong&gt;结点&lt;/strong&gt;比作&lt;strong&gt;市&lt;/strong&gt;，&lt;strong&gt;链路&lt;/strong&gt;比作&lt;strong&gt;高速公路&lt;/strong&gt;，&lt;strong&gt;网络&lt;/strong&gt;比作&lt;strong&gt;省&lt;/strong&gt;，&lt;strong&gt;传送的数据&lt;/strong&gt;比作&lt;strong&gt;客运汽车&lt;/strong&gt;，&lt;strong&gt;路由器&lt;/strong&gt;比作&lt;strong&gt;省际高速公路收费站&lt;/strong&gt;，&lt;strong&gt;互连网&lt;/strong&gt;比作&lt;strong&gt;国&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;一. 速率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;速率指的是数据的传送速率，即&lt;strong&gt;每秒钟传送多少位信息&lt;/strong&gt;，也叫数据率。因为无论传送的是什么数据，都得转化为二进制数字，所以单位是bit/s或b/s或bps。&lt;/p&gt;
&lt;p&gt;注意这里是&lt;strong&gt;小写&lt;/strong&gt;的b，而平常我们下载东西时会看到的MB/s、KB/s中的B是大写的。小写的指位（bit），大写的指字节（Byte），1Byte = 8 bit。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMwMjExLnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二. 带宽&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在计算机网络中，带宽用来表示网络中某通道传送数据的能力。也即单位时间内网络中某信道所能通过的最高数据率，因此单位也为bit/s。&lt;/p&gt;
&lt;p&gt;所以带宽越宽，所能传送的最高数据率也越高。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;带宽类似于高速公路的路宽，路越宽，单位时间内能通过的车越多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;三. 吞吐量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;吞吐量表示在单位时间内通过某个网络的实际数据量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四. 时延&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时延指数据从网络的一端传送到另一端所需的时间，由多个部分组成。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;时延可以比作你坐客运汽车从出发地到目的地的总时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;（1）发送时延&lt;/strong&gt;：是主机或路由器发送数据帧所需要的的时间。&lt;/p&gt;
&lt;p&gt;发送时延 = 数据帧长度（bit）/ 发送速率（bit/s）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;发送时延可以比作你的客运汽车出收费站的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;（2）传播时延&lt;/strong&gt;：指&lt;strong&gt;电磁波&lt;/strong&gt;在信道中传播一定的距离需要花费的时间。&lt;/p&gt;
&lt;p&gt;传播时延 = 信道长度（m）/ 电磁波在信道上的传播速率（m/s）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;传播时延可以比作客运汽车（假设速度像电磁波一样恒定）在高速公路上花费的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;（3）处理时延&lt;/strong&gt;：主机或路由器收到分组后处理分组花费的时间。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;处理时延可以比作客运汽车经过收费站时缴费所花的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;（4）排队时延&lt;/strong&gt;：分组经过路由器后需要&lt;strong&gt;排队等待处理的时间&lt;/strong&gt;和处理完后&lt;strong&gt;排队等待离开的时间&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;排队时延可以比作进入收费站后排队等待缴费的时间。如果不需要排队，则排队时延为0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，&lt;strong&gt;总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延&lt;/strong&gt;。数据在网络中的时延由这四部分组成，不能只考虑一部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMyMTQwLnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五. 时延带宽积&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时延带宽积是&lt;strong&gt;传播时延&lt;/strong&gt;和&lt;strong&gt;带宽&lt;/strong&gt;的乘积。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMyMTQzLnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图，用传播时延表示长方形的长，带宽表示宽，则时延带宽积即是面积。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六. 往返时间RTT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;往返时间即两个结点双向交互一次所需的时间。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;类似于你买了个往返票，做客运汽车从车站出发到目的地一趟，再回到车站的总时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;七. 利用率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分为信道利用率和网络利用率两种。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;信道利用率：指某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的的信道的信道利用率为0。&lt;/li&gt;
&lt;li&gt;网络利用率：指全网络的信道利用率的加权平均值。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;信道或网络的利用率过高会产生非常大的时延，所以某些较大主干网ISP通常控制信道利用率不能超过50%，如果超过就要准备扩容，增大线路带宽。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;很好理解，路上车多了，就容易堵车，要么把路上的车变少，要么把路修的宽一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;34-非性能指标&quot;&gt;3.4. 非性能指标&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;如果把性能指标比作氪金游戏中玩家的技术水平的高低，那非性能指标就相当于玩家的钱包厚度。人民币玩家能够弥补一些技术上的差距，如果该玩家技术又棒，钱包又鼓，那称霸游戏便不再话下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非性能指标有：费用、质量、标准化、可靠性、可扩展性和可升级性、易于管理和维护。这些都是见名知意的名词，不用再解释了。&lt;/p&gt;

&lt;h2 id=&quot;41-分层&quot;&gt;4.1. 分层&lt;/h2&gt;
&lt;p&gt;观察我们的现实社会，会发现有许多事物都有其体系结构，比如社会、学校、医院、车站、人等等，这些都是复杂的集合体，正是有了体系结构，才使其能够正确运作。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;以车站为例，车站客流量大，但是人们进去之后能够保持有序，该干什么就干什么，不会像无头苍蝇一样乱撞。因为车站划分好了层次，卖票窗口、安检门、候车区、上车区、出站门......井井有序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMyMTQ3LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从下向上顺次经过，乘客能在每一层完成部分动作，下层为上层提供服务，但层次之间不相互干扰。比如我们撤销卖票窗口，改为取票机，并不影响其他层次，我们只要求过了安检门能去取票机取票，取完票的能去候车区候车。如此一来，就把乘车这个“大问题”划分成了若干小问题，这些小问题比较好解决。&lt;/p&gt;
&lt;p&gt;计算机网络也是如此，对其体系结构进行划分层次。这样就能像图1-12那样按部就班的进行工作。&lt;strong&gt;对计算机网络进行分层能把这个复杂大问题，也能分成若干局部小问题，便于研究和处理。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;42-协议分层&quot;&gt;4.2. 协议分层&lt;/h2&gt;
&lt;p&gt;我们使用互联网最常做的事就是通信，那两个通信实体（比如两台电脑）之间进行通信，是随便发送信息就能接收到吗？肯定不是。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;举个例子，甲乙的日常对话（乙不会英语）：&lt;/p&gt;
&lt;p&gt;甲：吃了吗？&lt;/p&gt;
&lt;p&gt;乙：吃了。&lt;/p&gt;
&lt;p&gt;甲：What a nice day！&lt;/p&gt;
&lt;p&gt;乙：你在说什么？？？？？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同一种意思可以用多种语言来表达，但甲和乙不用相同的语言是无法交流的，&lt;strong&gt;协议就好比语言&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;互联网中，涉及的两个通信实体受协议的约束，并且协议无处不在。协议定义了在两个或多个通信实体之间交换的报文的格式和 顺序，以及报文发送或接受报文或其他事件中所采取的动作。&lt;/p&gt;
&lt;p&gt;前面的车站已经进行分层了，井然有序。现在对协议进行分层（这里只介绍五层协议模型）。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;应用层：定义应用进程之间的通信和交互的规则。&lt;/li&gt;
&lt;li&gt;运输层：负责向两台主机中进程之间的通信提供通用的数据传输服务。&lt;/li&gt;
&lt;li&gt;网络层：负责为分组交换网上的不同主机提供通信服务、路由选择、IP地址管理。&lt;/li&gt;
&lt;li&gt;数据链路层：负责在互连设备之间传递数据。&lt;/li&gt;
&lt;li&gt;物理层：考虑怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是具体的传输媒体。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMyMTUxLnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;43-实体、服务、协议、协议访问点&quot;&gt;4.3. 实体、服务、协议、协议访问点&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一. 实体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实体就是用于发送和接收信息的硬件或软件进程。如图1-13中的用户电脑中的软件进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二. 服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在分层体系中，每层都有各自的功能，下层会为上层提供服务，但下层提供的服务并不是其全部功能。只有上层看的见的功能才算是下层提供的服务。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;打个比方，员工会为领导定时汇报工作，但汇报内容是有限的、精简的。如果你把一日三餐，吃喝拉撒等鸡毛蒜皮的小事都汇报了，那会被开的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;三. 协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;协议是控制两个（多个）对等实体进行通信的规则的集合。在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还要使用下面一层所提供的服务。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;打个比方，员工之间需要交流进度，共同协作才能完成工作，然后向领导汇报工作。而领导需要下属汇报的工作材料才能完成领导的工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;四. 服务访问点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上层使用下层提供的服务必须通过与下层交换一些命令——服务原语。&lt;/p&gt;
&lt;p&gt;在同一系统中，相邻两层的实体进行交互的地方称为服务访问点（Service Access Point，SAP），它是抽象的，实际上是一个逻辑接口。&lt;/p&gt;
&lt;p&gt;图1-14画出了上面四个名词的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veGluZ3Jlbmd1YW54dWUvYmxvZy1pbWFnZXMvcmF3L21hc3Rlci9pbWdzLzIwMjAwODI2MjMyMTU1LnBuZw?x-oss-process=image/format,png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出：协议是不同系统对等实体间的，是水平方向的；服务是同一系统上下层之间的，是垂直方向的。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;本文只是介绍了一些入门基本概念，并未真正深入。比如路由器、分组交换、协议、五层模型等，都只是稍微提一下。因为真正想要了解这些，只言片语肯定不够，比如对五层模型的理解，可能需要你把这五层都看了一篇，才能在心里建立真正的五层模型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;8.4892086330935&quot;&gt;
&lt;p&gt;我是「&lt;a href=&quot;https://mp.weixin.qq.com/s/PF7srGAwzd_w5pU6eOEZow&quot;&gt;行小观&lt;/a&gt;」，我会在公众号『&lt;a href=&quot;https://mp.weixin.qq.com/s/PF7srGAwzd_w5pU6eOEZow&quot;&gt;行人观学&lt;/a&gt;』中持续更新「Java」、「Go」、「数据结构和算法」、「计算机基础」等相关文章。&lt;/p&gt;
&lt;p&gt;本文章属于系列文章「&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;amp;album_id=1400530474371743745&quot;&gt;趣解计算机网络&lt;/a&gt;」。&lt;/p&gt;
&lt;p&gt;欢迎关注，我们一起踏上编程的行程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;如有错误，还请指正。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 26 Aug 2020 16:31:00 +0000</pubDate>
<dc:creator>行人观学</dc:creator>
<og:description>本文介绍一些入门基本概念</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xingrenguanxue/p/13569024.html</dc:identifier>
</item>
<item>
<title>消息型中间件之RabbitMQ集群 - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/13561247.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/13561247.html</guid>
<description>&lt;p&gt;　　在上一篇博客中我们简单的介绍了下rabbitmq安装配置相关指令的说明以及rabbitmqctl的相关子命令的说明；回顾请参考&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/13561245.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/13561245.html&lt;/a&gt;；今天我们来聊一聊rabbitmq集群；之所以要用集群是因为在一个分布式应用环境中，rabbitmq的作用是连接各组件，一旦rabbitmq服务挂掉，可能影响整个线上业务，为了避免这样的问题发生，我们就必须想办法对rabbitmq做高可用，能够让集群中的每个rabbitmq节点把自身接收到的消息通过网络同步到其他节点，这样一来使得每个节点都有整个rabbitmq集群的所有消息，即便其中一台rabbitmq宕机不影响消息丢失的情况；rabbitmq集群它的主要作用就是各节点互相同步消息，从而实现了数据的冗余；除了rabbitmq的数据冗余，我们还需要考虑，一旦后端有多台rabbitmq我们就需要通过对后端多台rabbitmq-server做负载均衡，使得每个节点能够分担一部分流量，同时对客户端访问提供一个统一的访问接口；客户端就可以基于负载均衡的地址来请求rabbitmq，通过负载均衡调度，把客户端的请求分摊到后端多个rabbitmq上；如果某一台rabbitmq宕机了，根据负载均衡的健康状态监测，自动将请求不调度到宕机的rabbitmq-server上，从而也实现了对rabbitmq高可用；&lt;/p&gt;
&lt;p&gt;　　在实现rabbitmq集群前我们需要做以下准备&lt;/p&gt;
&lt;p&gt;　　1、更改各节点的主机名同hosts文件解析的主机名相同，必须保证各节点主机名称不一样，并且可以通过hosts文件解析出来；&lt;/p&gt;
&lt;p&gt;　　2、时间同步，时间同步对于一个集群来讲是最基本的要求；&lt;/p&gt;
&lt;p&gt;　　3、各节点的cookie信息必须保持一致；&lt;/p&gt;
&lt;p&gt;　　实验环境说明&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;节点名&lt;/td&gt;
&lt;td&gt;主机名&lt;/td&gt;
&lt;td&gt;ip地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;node01&lt;/td&gt;
&lt;td&gt;node01&lt;/td&gt;
&lt;td&gt;192.168.0.41&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;node2&lt;/td&gt;
&lt;td&gt;node2&lt;/td&gt;
&lt;td&gt;192.168.0.42&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;负载均衡&lt;/td&gt;
&lt;td&gt;node3&lt;/td&gt;
&lt;td&gt;192.168.0.43&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;





&lt;p&gt;　　1、配置各节点的主机名称&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# hostnamectl set-hostname node01
[root@node01 ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.41 node01
192.168.0.42 node2
192.168.0.43 node3
[root@node01 ~]# scp /etc/hosts node2:/etc/
hosts                                                                                100%  218   116.4KB/s   00:00    
[root@node01 ~]# scp /etc/hosts node3:/etc/
hosts                                                                                100%  218   119.2KB/s   00:00    
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：对于rabbitmq集群来讲就只有node01和node2，这两个节点互相同步消息；而负载均衡是为了做流量负载而设定的，本质上不属于rabbitmq集群；所以对于负载均衡的主机名是什么都可以；&lt;/p&gt;
&lt;p&gt;　　验证：链接个节点验证主机名是否正确，以及hosts文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# hostname
node2
[root@node2 ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.41 node01
192.168.0.42 node2
192.168.0.43 node3
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在各节点安装rabbitmq-server&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
yum install rabbitmq-server -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　启动各节点rabbitmq-server&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826194954910-1675475668.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826195137843-709639473.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：node01上启动了rabbitmq-management插件，所以15672处于监听；而node2没有启动rabbitmq-management插件，15672端口并没有处于监听状体；对于一个rabbitmq集群，25672这个端口就是专用于集群个节点通信；&lt;/p&gt;
&lt;p&gt;　　现在基本环境已经准备好，现在我们就可以来配置集群了，rabbitmq集群的配置非常简单，默认情况启动一个rabbitmq，它就是一个集群，所以25672处于监听状态嘛，只不过集群中就只有一个自身节点；&lt;/p&gt;
&lt;p&gt;　　验证：各节点集群状态信息，节点名是否同主机hostname名称相同&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826195714435-1403767867.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826195752216-1299077413.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：从上面的信息可以看到两个节点的集群名称都是同host主机名相同；&lt;/p&gt;
&lt;p&gt;　　停止node2上的应用，把node2加入node01集群&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826200137314-1149372019.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：这里提示我们无法连接到rabbit@node01,出现以上错误的主要原因有两个，第一个是主机名称解析不正确；第二是cookie不一致；&lt;/p&gt;
&lt;p&gt;　　复制cookie信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# scp /var/lib/rabbitmq/.erlang.cookie node01:/var/lib/rabbitmq/
The authenticity of host 'node01 (192.168.0.41)' can't be established.
ECDSA key fingerprint is SHA256:EG9nua4JJuUeofheXlgQeL9hX5H53JynOqf2vf53mII.
ECDSA key fingerprint is MD5:57:83:e6:46:2c:4b:bb:33:13:56:17:f7:fd:76:71:cc.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'node01,192.168.0.41' (ECDSA) to the list of known hosts.
.erlang.cookie                                                                       100%   20    10.6KB/s   00:00    
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证：md5sum验证各节点cookie是否一致&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# md5sum /var/lib/rabbitmq/.erlang.cookie 
1d4f9e4d6c92cf0c749cc4ace68317f6  /var/lib/rabbitmq/.erlang.cookie
[root@node2 ~]# ssh node01
Last login: Wed Aug 26 19:41:30 2020 from 192.168.0.232
[root@node01 ~]# md5sum /var/lib/rabbitmq/.erlang.cookie 
1d4f9e4d6c92cf0c749cc4ace68317f6  /var/lib/rabbitmq/.erlang.cookie
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：现在两个节点的cookie信息一致了，再次把node2加入到node01上看看是否能够加入？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl join_cluster rabbit@node01
Clustering node rabbit@node2 with rabbit@node01 ...
Error: unable to connect to nodes [rabbit@node01]: nodedown

DIAGNOSTICS
===========

attempted to contact: [rabbit@node01]

rabbit@node01:
  * connected to epmd (port 4369) on node01
  * epmd reports node 'rabbit' running on port 25672
  * TCP connection succeeded but Erlang distribution failed
  * suggestion: hostname mismatch?
  * suggestion: is the cookie set correctly?

current node details:
- node name: rabbitmqctl2523@node2
- home dir: /var/lib/rabbitmq
- cookie hash: HU+eTWySzwx0nMSs5oMX9g==

[root@node2 ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：还是提示我们加不进去，这里的原因是我们更新了node01的cookie信息，没有重启rabbitmq-server，所以它默认还是以前的cookie；&lt;/p&gt;
&lt;p&gt;　　重启node01上的rabbitmq-server&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# systemctl restart rabbitmq-server.service 
[root@node01 ~]# ss -tnl
State       Recv-Q Send-Q              Local Address:Port                             Peer Address:Port              
LISTEN      0      128                     127.0.0.1:631                                         *:*                  
LISTEN      0      128                             *:15672                                       *:*                  
LISTEN      0      100                     127.0.0.1:25                                          *:*                  
LISTEN      0      100                     127.0.0.1:64667                                       *:*                  
LISTEN      0      128                             *:8000                                        *:*                  
LISTEN      0      128                             *:8001                                        *:*                  
LISTEN      0      128                             *:25672                                       *:*                  
LISTEN      0      5                       127.0.0.1:8010                                        *:*                  
LISTEN      0      128                             *:111                                         *:*                  
LISTEN      0      128                             *:80                                          *:*                  
LISTEN      0      128                             *:4369                                        *:*                  
LISTEN      0      5                   192.168.122.1:53                                          *:*                  
LISTEN      0      128                             *:22                                          *:*                  
LISTEN      0      128                           ::1:631                                        :::*                  
LISTEN      0      100                           ::1:25                                         :::*                  
LISTEN      0      128                            :::5672                                       :::*                  
LISTEN      0      128                            :::111                                        :::*                  
LISTEN      0      128                            :::80                                         :::*                  
LISTEN      0      128                            :::4369                                       :::*                  
LISTEN      0      128                            :::22                                         :::*                  
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：如果是把node01的cookie复制给node2，我们需要重启node2，总之拿到新cookie节点都要重启，保证在用cookie的信息一致就可以了；&lt;/p&gt;
&lt;p&gt;　　再次把node2加入到node01&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl join_cluster rabbit@node01
Clustering node rabbit@node2 with rabbit@node01 ...
...done.
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：加入对应节点集群没有报错就表示加入集群成功；&lt;/p&gt;
&lt;p&gt;　　验证：查看各节点的集群状态信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826202631167-517781945.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826202705698-144777186.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：在两个节点上我们都可以看到两个节点；到此node2就加入到node01这个集群中了；但是两个节点的集群状态信息不一样，原因是node2上没有启动应用，启动应用以后，它俩的状态信息就会是一样；&lt;/p&gt;
&lt;p&gt;　　启动node2上的应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826203019675-2027905791.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826203105445-1726546650.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：此时两个节点的状态信息就一样了；到此rabbitmq集群就搭建好了；&lt;/p&gt;
&lt;p&gt;　　验证：在浏览器登录node1的15672，看看web管理界面是否有节点信息？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826203751995-1672612408.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：node2之所以没有统计信息是因为node2上没有启动rabbitmq-management插件；启用插件就可以统计到数据；&lt;/p&gt;
&lt;p&gt;　　rabbitmqctl集群相关子命令&lt;/p&gt;
&lt;p&gt;　　join_cluster &amp;lt;clusternode&amp;gt; [--ram]：加入指定节点集群；&lt;/p&gt;
&lt;p&gt;　　cluster_status：查看集群状态&lt;/p&gt;
&lt;p&gt;　　change_cluster_node_type disc | ram：更改节点存储类型，disc表示磁盘，ram表示内存；一个集群中必须有一个节点为disc类型；&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2]}]},
 {running_nodes,[rabbit@node01,rabbit@node2]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node2 ~]# rabbitmqctl change_cluster_node_type ram
Turning rabbit@node2 into a ram node ...
Error: mnesia_unexpectedly_running
[root@node2 ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：这里提示我们mnesia_unexpectedly_running，所以我们更改不了节点类型；解决办法是停止node2上的应用，然后在更改类型，在启动应用即可；&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl stop_app
Stopping node rabbit@node2 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2]}]}]
...done.
[root@node2 ~]# rabbitmqctl change_cluster_node_type ram
Turning rabbit@node2 into a ram node ...
...done.
[root@node2 ~]# rabbitmqctl start_app
Starting node rabbit@node2 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status              
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01]},{ram,[rabbit@node2]}]},
 {running_nodes,[rabbit@node01,rabbit@node2]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到node2就变成了ram类型了；&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]#  rabbitmqctl change_cluster_node_type ram
Turning rabbit@node01 into a ram node ...
Error: mnesia_unexpectedly_running
[root@node01 ~]# rabbitmqctl stop_app
Stopping node rabbit@node01 ...
...done.
[root@node01 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node01 ...
[{nodes,[{disc,[rabbit@node01]},{ram,[rabbit@node2]}]}]
...done.
[root@node01 ~]#  rabbitmqctl change_cluster_node_type ram
Turning rabbit@node01 into a ram node ...
Error: {resetting_only_disc_node,&quot;You cannot reset a node when it is the only disc node in a cluster. Please convert another node of the cluster to a disc node first.&quot;}
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：这里需要注意一个集群中至少保持一个节点是disc类型；所以node2更改成ram类型，node01就必须是disc类型；&lt;/p&gt;
&lt;p&gt;　　forget_cluster_node [--offline]：离开集群；&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node01 ...
[{nodes,[{disc,[rabbit@node01]},{ram,[rabbit@node2]}]},
 {running_nodes,[rabbit@node2,rabbit@node01]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node01 ~]# rabbitmqctl forget_cluster_node rabbit@node2
Removing node rabbit@node2 from cluster ...
Error: {failed_to_remove_node,rabbit@node2,
                              {active,&quot;Mnesia is running&quot;,rabbit@node2}}
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：我们在node01上移除node2，提示我们node2节点处于活跃状态不能移除；这也告诉我们这个子命令只能移除不在线的节点；&lt;/p&gt;
&lt;p&gt;　　下线node2上的应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl stop_app
Stopping node rabbit@node2 ...
...done.
[root@node2 ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再次移除node2&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node01 ...
[{nodes,[{disc,[rabbit@node01]},{ram,[rabbit@node2]}]},
 {running_nodes,[rabbit@node01]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node01 ~]# rabbitmqctl forget_cluster_node rabbit@node2          
Removing node rabbit@node2 from cluster ...
...done.
[root@node01 ~]# rabbitmqctl cluster_status                  
Cluster status of node rabbit@node01 ...
[{nodes,[{disc,[rabbit@node01]}]},
 {running_nodes,[rabbit@node01]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　update_cluster_nodes clusternode：更新集群节点信息；&lt;/p&gt;
&lt;p&gt;　　把node2加入node01这个集群&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl stop_app
Stopping node rabbit@node2 ...
...done.
[root@node2 ~]# rabbitmqctl join_cluster rabbit@node01
Clustering node rabbit@node2 with rabbit@node01 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2]}]}]
...done.
[root@node2 ~]# rabbitmqctl start_app
Starting node rabbit@node2 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2]}]},
 {running_nodes,[rabbit@node01,rabbit@node2]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　停掉node2上的应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl stop_app
Stopping node rabbit@node2 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2]}]}]
...done.
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：如果此时有新节点加入集群，如果在把node01上的应用停掉，node2再次启动应用就会提示错误；如下&lt;/p&gt;
&lt;p&gt;　　把node3加入node01&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;54&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node3 ~]# rabbitmqctl cluster_status            
Cluster status of node rabbit@node3 ...
[{nodes,[{disc,[rabbit@node3]}]},
 {running_nodes,[rabbit@node3]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node3&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node3 ~]# rabbitmqctl stop_app
Stopping node rabbit@node3 ...
...done.
[root@node3 ~]# rabbitmqctl join_cluster rabbit@node01
Clustering node rabbit@node3 with rabbit@node01 ...
...done.
[root@node3 ~]# rabbitmqctl start_app
Starting node rabbit@node3 ...
...done.
[root@node3 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node3 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2,rabbit@node3]}]},
 {running_nodes,[rabbit@node01,rabbit@node3]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node3 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　停掉node01上的应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node01 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2,rabbit@node3]}]},
 {running_nodes,[rabbit@node3,rabbit@node01]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node01 ~]# rabbitmqctl stop_app
Stopping node rabbit@node01 ...
...done.
[root@node01 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node01 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2,rabbit@node3]}]}]
...done.
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　启动node2上的应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;76&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2]}]}]
...done.
[root@node2 ~]# rabbitmqctl start_app     
Starting node rabbit@node2 ...



BOOT FAILED
===========

Error description:
   {could_not_start,rabbit,
       {bad_return,
           {{rabbit,start,[normal,[]]},
            {'EXIT',
                {rabbit,failure_during_boot,
                    {error,
                        {timeout_waiting_for_tables,
                            [rabbit_user,rabbit_user_permission,rabbit_vhost,
                             rabbit_durable_route,rabbit_durable_exchange,
                             rabbit_runtime_parameters,
                             rabbit_durable_queue]}}}}}}}

Log files (may contain more information):
   /var/log/rabbitmq/rabbit@node2.log
   /var/log/rabbitmq/rabbit@node2-sasl.log

Error: {rabbit,failure_during_boot,
           {could_not_start,rabbit,
               {bad_return,
                   {{rabbit,start,[normal,[]]},
                    {'EXIT',
                        {rabbit,failure_during_boot,
                            {error,
                                {timeout_waiting_for_tables,
                                    [rabbit_user,rabbit_user_permission,
                                     rabbit_vhost,rabbit_durable_route,
                                     rabbit_durable_exchange,
                                     rabbit_runtime_parameters,
                                     rabbit_durable_queue]}}}}}}}}
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：此时node2就启动不起来了，这时我们就需要用到update_cluster_nodes子命令向node3更新集群信息，然后再次在node2上启动应用就不会报错了；&lt;/p&gt;
&lt;p&gt;　　向node3询问更新集群节点信息，并启动node2上的应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl update_cluster_nodes rabbit@node3
Updating cluster nodes for rabbit@node2 from rabbit@node3 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status                   
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2,rabbit@node3]}]}]
...done.
[root@node2 ~]# rabbitmqctl start_app
Starting node rabbit@node2 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2,rabbit@node3]}]},
 {running_nodes,[rabbit@node3,rabbit@node2]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到更新了集群节点信息后，在node2上查看集群状态信息就可以看到node3了；此时在启动node2上的应用就没有任何问题；&lt;/p&gt;
&lt;p&gt;　　sync_queue queue：同步指定队列；&lt;/p&gt;
&lt;p&gt;　　cancel_sync_queue queue：取消指定队列同步&lt;/p&gt;
&lt;p&gt;　　set_cluster_name name：设置集群名称&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;59&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node2 ~]# rabbitmqctl cluster_status
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2,rabbit@node3]}]},
 {running_nodes,[rabbit@node01,rabbit@node3,rabbit@node2]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@node01&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node2 ~]# rabbitmqctl set_cluster_name rabbit@rabbit_node02
Setting cluster name to rabbit@rabbit_node02 ...
...done.
[root@node2 ~]# rabbitmqctl cluster_status                       
Cluster status of node rabbit@node2 ...
[{nodes,[{disc,[rabbit@node01,rabbit@node2,rabbit@node3]}]},
 {running_nodes,[rabbit@node01,rabbit@node3,rabbit@node2]},
 {cluster_name,&amp;lt;&amp;lt;&quot;rabbit@rabbit_node02&quot;&amp;gt;&amp;gt;},
 {partitions,[]}]
...done.
[root@node2 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：在集群任意一个节点更改名称都会同步到其他节点；也就是说集群状态信息在每个节点都是保持一致的；&lt;/p&gt;
&lt;p&gt;　　基于haproxy负载均衡rabbitmq集群&lt;/p&gt;
&lt;p&gt;　　1、安装haproxy&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node3 ~]# yum install -y haproxy
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.aliyun.com
 * extras: mirrors.aliyun.com
 * updates: mirrors.aliyun.com
Resolving Dependencies
--&amp;gt; Running transaction check
---&amp;gt; Package haproxy.x86_64 0:1.5.18-9.el7 will be installed
--&amp;gt; Finished Dependency Resolution

Dependencies Resolved

====================================================================================================
 Package                Arch                  Version                     Repository           Size
====================================================================================================
Installing:
 haproxy                x86_64                1.5.18-9.el7                base                834 k

Transaction Summary
====================================================================================================
Install  1 Package

Total download size: 834 k
Installed size: 2.6 M
Downloading packages:
haproxy-1.5.18-9.el7.x86_64.rpm                                              | 834 kB  00:00:00     
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : haproxy-1.5.18-9.el7.x86_64                                                      1/1 
  Verifying  : haproxy-1.5.18-9.el7.x86_64                                                      1/1 

Installed:
  haproxy.x86_64 0:1.5.18-9.el7                                                                     

Complete!
[root@node3 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：haproxy可以重新找个主机部署，也可以在集群中的某台节点上部署；建议重新找个主机部署，这样可避免端口冲突；&lt;/p&gt;
&lt;p&gt;　　配置haproxy&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826221924544-685620716.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上就是haproxy负载均衡rabbitmq集群的示例，我们通过使用haproxy的tcp模式去代理rabbitmq，并且使用轮询的算法把请求调度到后端server上；&lt;/p&gt;
&lt;p&gt;　　验证：启动haproxy，看看对应的端口是否处于监听状态，状态页面是否能够正常检测到后端server是否在线？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826222309429-1085707180.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：此时负载均衡就搭建好了，后续使用这个集群，我们就可以把这个负载均衡上监听的地址给用户访问即可；这里要考虑一点haproxy是新的单点；&lt;/p&gt;
&lt;p&gt;　　在浏览器打开haproxy的状态页看看后端server是否在线？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826222523378-1988352320.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到后端3台rabbitmq-server都是正常在线；&lt;/p&gt;
&lt;p&gt;　　停止node3上的rabbitmq，看看haproxy是否能够及时发现node3不再线，并把它标记为down？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826222707930-984960201.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202008/1503305-20200826222732433-1004569306.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：我们根据haproxy对后端server做健康状态检查来实现rabbitmq集群的故障转移，所以对于rabbitmq集群来讲，它只复制消息的同步，实现数据冗余，真正高可用还是要靠前端的调度器实现；对于nginx负载均衡rabbitmq可以参考ngixn对tcp协议的代理来写配置；有关nginx负载均衡tcp应用相关话题，可以参考本人博客&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/12468946.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/12468946.html&lt;/a&gt;我这里就不过多阐述；&lt;/p&gt;
</description>
<pubDate>Wed, 26 Aug 2020 16:12:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>在上一篇博客中我们简单的介绍了下rabbitmq安装配置相关指令的说明以及rabbitmqctl的相关子命令的说明；回顾请参考https://www.cnblogs.com/qiuhom-1874/p</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/13561247.html</dc:identifier>
</item>
<item>
<title>Kubernetes K8S之资源控制器StatefulSets详解 - 踏歌行666</title>
<link>http://www.cnblogs.com/zhanglianghhh/p/13568866.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanglianghhh/p/13568866.html</guid>
<description>
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Kubernetes的资源控制器StatefulSet详解与示例&lt;/p&gt;
&lt;/blockquote&gt;


&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务器名称(hostname)&lt;/th&gt;
&lt;th&gt;系统版本&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;内网IP&lt;/th&gt;
&lt;th&gt;外网IP(模拟)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;k8s-master&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.110&lt;/td&gt;
&lt;td&gt;10.0.0.110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node01&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.111&lt;/td&gt;
&lt;td&gt;10.0.0.111&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node02&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.112&lt;/td&gt;
&lt;td&gt;10.0.0.112&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;kubernetes中内建了很多controller（控制器），这些相当于一个状态机，用来控制pod的具体状态和行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;部分控制器类型如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ReplicationController 和 ReplicaSet&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;DaemonSet&lt;/li&gt;
&lt;li&gt;StatefulSet&lt;/li&gt;
&lt;li&gt;Job/CronJob&lt;/li&gt;
&lt;li&gt;HorizontalPodAutoscaler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StatefulSet 是用来管理有状态应用的工作负载 API 对象。&lt;/p&gt;
&lt;p&gt;StatefulSet 中的 Pod 拥有一个具有黏性的、独一无二的身份标识。这个标识基于 StatefulSet 控制器分配给每个 Pod 的唯一顺序索引。&lt;span&gt;Pod 的名称的形式为&amp;lt;statefulset name&amp;gt;-&amp;lt;ordinal index&amp;gt; &lt;/span&gt;。例如：web的StatefulSet 拥有两个副本，所以它创建了两个 Pod：web-0和web-1。&lt;/p&gt;
&lt;p&gt;和 Deployment 相同的是，StatefulSet 管理了基于相同容器定义的一组 Pod。但和 Deployment 不同的是，StatefulSet 为它们的每个 Pod 维护了一个固定的 ID。这些 Pod 是基于相同的声明来创建的，但是不能相互替换：无论怎么调度，&lt;span&gt;每个 Pod 都有一个永久不变的 ID&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;【使用场景】StatefulSets 对于需要满足以下一个或多个需求的应用程序很有价值：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;稳定的、唯一的网络标识符，即Pod重新调度后其PodName和HostName不变【当然IP是会变的】&lt;/li&gt;
&lt;li&gt;稳定的、持久的存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC实现&lt;/li&gt;
&lt;li&gt;有序的、优雅的部署和缩放&lt;/li&gt;
&lt;li&gt;有序的、自动的滚动更新&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如上面，稳定意味着 Pod 调度或重调度的整个过程是有持久性的。&lt;/p&gt;
&lt;p&gt;如果应用程序不需要任何稳定的标识符或有序的部署、删除或伸缩，则应该使用由一组无状态的副本控制器提供的工作负载来部署应用程序，比如使用 Deployment 或者 ReplicaSet 可能更适用于无状态应用部署需要。&lt;/p&gt;

&lt;h2 id=&quot;限制&quot;&gt;限制&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;给定 &lt;span&gt;Pod 的存储必须由 PersistentVolume 驱动&lt;/span&gt; 基于所请求的 storage class 来提供，或者由管理员预先提供。&lt;/li&gt;
&lt;li&gt;删除或者收缩 StatefulSet 并不会删除它关联的存储卷。这样做是为了保证数据安全，它通常比自动清除 StatefulSet 所有相关的资源更有价值。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;StatefulSet 当前需要 headless 服务 来负责 Pod 的网络标识&lt;/span&gt;。你需要负责创建此服务。&lt;/li&gt;
&lt;li&gt;当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。为了实现 StatefulSet 中的 Pod 可以有序和优雅的终止，可以在删除之前将 StatefulSet 缩放为 0。&lt;/li&gt;
&lt;li&gt;在默认 Pod 管理策略(OrderedReady) 时使用滚动更新，可能进入需要人工干预才能修复的损坏状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;有序索引&quot;&gt;有序索引&lt;/h2&gt;
&lt;p&gt;对于具有 N 个副本的 StatefulSet，StatefulSet 中的每个 Pod 将被分配一个整数序号，从 0 到 N-1，该序号在 StatefulSet 上是唯一的。&lt;/p&gt;
&lt;p&gt;StatefulSet 中的每个 Pod 根据 StatefulSet 中的名称和 Pod 的序号来派生出它的主机名。组合主机名的格式为$(StatefulSet 名称)-$(序号)。&lt;/p&gt;

&lt;h2 id=&quot;部署和扩缩保证&quot;&gt;部署和扩缩保证&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;对于包含 N 个 副本的 StatefulSet，当部署 Pod 时，它们是依次创建的，顺序为 0~(N-1)。&lt;/li&gt;
&lt;li&gt;当删除 Pod 时，它们是逆序终止的，顺序为 (N-1)~0。&lt;/li&gt;
&lt;li&gt;在将缩放操作应用到 Pod 之前，它前面的所有 Pod 必须是 Running 和 Ready 状态。&lt;/li&gt;
&lt;li&gt;在 Pod 终止之前，所有的继任者必须完全关闭。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;StatefulSet 不应将 pod.Spec.TerminationGracePeriodSeconds 设置为 0。这种做法是不安全的，要强烈阻止。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;部署顺序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在下面的 nginx 示例被创建后，会按照 web-0、web-1、web-2 的顺序部署三个 Pod。在 web-0 进入 Running 和 Ready 状态前不会部署 web-1。在 web-1 进入 Running 和 Ready 状态前不会部署 web-2。&lt;/p&gt;
&lt;p&gt;如果 web-1 已经处于 Running 和 Ready 状态，而 web-2 尚未部署，在此期间发生了 web-0 运行失败，那么 web-2 将不会被部署，要等到 web-0 部署完成并进入 Running 和 Ready 状态后，才会部署 web-2。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;收缩顺序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果想将示例中的 StatefulSet 收缩为 replicas=1，首先被终止的是 web-2。在 web-2 没有被完全停止和删除前，web-1 不会被终止。当 web-2 已被终止和删除；但web-1 尚未被终止，如果在此期间发生 web-0 运行失败，那么就不会终止 web-1，必须等到 web-0 进入 Running 和 Ready 状态后才会终止 web-1。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;说明：本次示例不涉及存储，StatefulSet的存储示例会在「Kubernetes K8S之存储PV-PVC详解」文章中演示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master controller]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;controller
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master controller]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; statefulset.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Service
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  name: nginx
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  labels:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    app: nginx
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  ports:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   - port: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    name: http
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  clusterIP: None
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    app: nginx
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; ---
&lt;span&gt;18&lt;/span&gt; apiVersion: apps/&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;kind: StatefulSet
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;  name: web
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    matchLabels:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;      app: nginx # has to match .spec.template.metadata.labels
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;   serviceName: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;   replicas: &lt;span&gt;3&lt;/span&gt; # by default is &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;  template:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    metadata:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;      labels:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        app: nginx # has to match .spec.selector.matchLabels
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    spec:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;       terminationGracePeriodSeconds: &lt;span&gt;10&lt;/span&gt;&lt;span&gt;   # 默认30秒
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;      containers:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;       -&lt;span&gt; name: nginx
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         image: registry.cn-beijing.aliyuncs.com/google_registry/nginx:&lt;span&gt;1.17&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        ports:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         - containerPort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;           name: http
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动StatefulSet和Service，并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master controller]# kubectl apply -&lt;span&gt;f statefulset.yaml 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; service/&lt;span&gt;nginx created
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; statefulset.apps/&lt;span&gt;web created
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master controller]# kubectl get service -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; NAME         TYPE        CLUSTER-IP   EXTERNAL-&lt;span&gt;IP   PORT(S)   AGE   SELECTOR
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; kubernetes   ClusterIP   &lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;    &amp;lt;none&amp;gt;        &lt;span&gt;443&lt;/span&gt;/TCP   17d   &amp;lt;none&amp;gt;
&lt;span&gt; 7&lt;/span&gt; nginx        ClusterIP   None         &amp;lt;none&amp;gt;        &lt;span&gt;80&lt;/span&gt;/TCP    87s   app=&lt;span&gt;nginx
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [root@k8s-&lt;span&gt;master controller]# 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-master controller]# kubectl get statefulset -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;NAME   READY   AGE   CONTAINERS   IMAGES
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; web    &lt;span&gt;3&lt;/span&gt;/&lt;span&gt;3&lt;/span&gt;     15m   nginx        registry.cn-beijing.aliyuncs.com/google_registry/nginx:&lt;span&gt;1.17&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; [root@k8s-&lt;span&gt;master controller]# 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; [root@k8s-master controller]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;NAME    READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; web-&lt;span&gt;0&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          16m   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.95&lt;/span&gt;    k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;16&lt;/span&gt; web-&lt;span&gt;1&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          16m   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.103&lt;/span&gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;17&lt;/span&gt; web-&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          16m   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.104&lt;/span&gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由上可见，StatefulSet 中的pod是有序的。有N个副本，那么序列号为0~(N-1)。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;启动一个pod&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master test]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;test
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master test]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; myapp_demo.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Pod
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: myapp-&lt;span&gt;demo
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  labels:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     k8s-&lt;span&gt;app: myapp
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;  containers:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;   -&lt;span&gt; name: myapp
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     image: registry.cn-beijing.aliyuncs.com/google_registry/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    imagePullPolicy: IfNotPresent
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    ports:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     -&lt;span&gt; name: httpd
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;       containerPort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      protocol: TCP
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; [root@k8s-&lt;span&gt;master test]# 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; [root@k8s-master test]# kubectl apply -&lt;span&gt;f myapp_demo.yaml
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; pod/myapp-&lt;span&gt;demo created
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; [root@k8s-&lt;span&gt;master test]# 
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; [root@k8s-master test]# kubectl get pod -o wide | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;myapp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; myapp-demo   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          3m24s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.101&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;进入pod并查看StatefulSet域名信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# 进入一个k8s管理的myapp镜像容器。
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@k8s-master test]# kubectl exec -it myapp-demo &lt;span&gt;sh&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; / # nslookup &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.95&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; nslookup: can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t resolve &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;)&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: Name does not resolve&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; Name:      &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.95&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; Address &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.95&lt;/span&gt; web-&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.nginx.default.svc.cluster.local
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; / # nslookup &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.103&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; nslookup: can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t resolve &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;)&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: Name does not resolve&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; Name:      &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.103&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; Address &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.103&lt;/span&gt; web-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.nginx.default.svc.cluster.local
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; / # nslookup &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.104&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; nslookup: can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t resolve &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;)&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: Name does not resolve&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; Name:      &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.104&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; Address &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.104&lt;/span&gt; web-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.nginx.default.svc.cluster.local
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;##### nginx.default.svc.cluster.local   为service的域名信息
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; /&lt;span&gt; # nslookup nginx.default.svc.cluster.local
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; nslookup: can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t resolve &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;)&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: Name does not resolve&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;Name:      nginx.default.svc.cluster.local
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; Address &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.104&lt;/span&gt; web-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.nginx.default.svc.cluster.local
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; Address &lt;span&gt;2&lt;/span&gt;: &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.103&lt;/span&gt; web-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.nginx.default.svc.cluster.local
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; Address &lt;span&gt;3&lt;/span&gt;: &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.95&lt;/span&gt; web-&lt;span&gt;0&lt;/span&gt;.nginx.default.svc.cluster.local
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有上文可得如下信息：&lt;/p&gt;
&lt;p&gt;1、匹配StatefulSet的&lt;span&gt;Pod name(网络标识)&lt;/span&gt;的模式为：$(statefulset名称)-$(序号)，比如StatefulSet名称为web，副本数为3。则为：web-0、web-1、web-2&lt;/p&gt;
&lt;p&gt;2、StatefulSet&lt;span&gt;为每个Pod副本创建了一个DNS域名&lt;/span&gt;，这个域名的格式为：$(podname).(headless service name)，也就意味着服务之间是通过Pod域名来通信而非Pod IP。当Pod所在Node发生故障时，Pod会被漂移到其他Node上，Pod IP会发生改变，但Pod域名不会变化&lt;/p&gt;
&lt;p&gt;3、StatefulSet使用&lt;span&gt;Headless服务来控制Pod的域名&lt;/span&gt;，这个Headless服务域名的为：$(service name).$(namespace).svc.cluster.local，其中 cluster.local 指定的集群的域名&lt;/p&gt;
&lt;p&gt;4、根据volumeClaimTemplates，为每个Pod创建一个PVC，PVC的命令规则为：$(volumeClaimTemplates name)-$(pod name)，比如volumeClaimTemplates为www，pod name为web-0、web-1、web-2；那么创建出来的PVC为：www-web-0、www-web-1、www-web-2&lt;/p&gt;
&lt;p&gt;5、删除Pod不会删除对应的PVC，手动删除PVC将自动释放PV。&lt;/p&gt;


&lt;p&gt;1、&lt;a href=&quot;https://www.cnblogs.com/zhanglianghhh/p/13551109.html&quot; target=&quot;_blank&quot;&gt;Kubernetes K8S之资源控制器RC、RS、Deployment详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完毕！&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;———END———&lt;br/&gt;如果觉得不错就关注下呗 (-^O^-) ！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202008/1395193-20200826234901214-1819707252.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 26 Aug 2020 15:50:00 +0000</pubDate>
<dc:creator>踏歌行666</dc:creator>
<og:description>Kubernetes的资源控制器StatefulSet详解与示例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhanglianghhh/p/13568866.html</dc:identifier>
</item>
<item>
<title>Azure Logic App 入门（一） - Grant_Allen</title>
<link>http://www.cnblogs.com/AllenMaster/p/13562303.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/AllenMaster/p/13562303.html</guid>
<description>&lt;h2&gt;一，引言&lt;/h2&gt;
&lt;p&gt;　　前两天看一个azure相关的题，接触到一个叫 “Azure Logic App” 的服务，刚好，今天抽空学习以下，顺便结合它做一篇入门的分析文章。&lt;/p&gt;
&lt;p&gt;　　首先，我们得对它有个大概的认识，了解以下Azure Logic App 究竟是什么东西？&lt;/p&gt;
&lt;p&gt;--------------------我是分割线--------------------&lt;/p&gt;
&lt;p&gt;1，什么是Azure Logic App？它可以用来干什么&lt;/p&gt;
&lt;p&gt;答：（一）简单理解，Azure Logic 是Azure 提供的一项 Pass 服务，它有一个可视化的面板，我们可以在里面根据自己的需要选择不同的功能，将这些功能模块添加到自己的逻辑流程中，最终完成我们实际需要的业务逻辑。&lt;/p&gt;
&lt;p&gt;　　（二）我们可以通过Azure Logic App完成邮件的发送，预警信息，任务的推送等等。&lt;/p&gt;
&lt;p&gt;接下来，我们就开始今天的分析&lt;/p&gt;
&lt;h2&gt;二，正文&lt;/h2&gt;
&lt;h3&gt;1，创建Azure Logic App&lt;/h3&gt;
&lt;p&gt; Azure Portal 中点击 “Create a resource”，搜索框中输入 “Logic App”，进行搜索，创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200825201143529-1911964484.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Resource group 选择创建一个新的 ：“Web_Test_LogicApps_RG”&lt;/p&gt;
&lt;p&gt;Logic App name：“cnbateblogweb_logicapp”&lt;/p&gt;
&lt;p&gt;Select the location 选择默认 ：“Region”&lt;/p&gt;
&lt;p&gt;Location 选择 “East Asia”&lt;/p&gt;
&lt;p&gt;点击 “Review + create”，进行创建预校验，预校验完成后，我们点击 “Create” 进行创建 Azure Logic App 资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200825201325640-2008914043.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;等待创建完成后，我们在找到创建好的叫 “cnbateblogweb_logicapp” 的 Azure Logic App&lt;/p&gt;
&lt;p&gt;选择 “Development Tools=》Logic app designer”，点击 “ Blank Logic App” 创建空白的 Logic App&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826221134606-1546726200.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击图中的 “Schedule（计划）”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826221232782-2122744545.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 选择 “Recurrence（重复计划）”&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826221302000-51520682.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Interval（时间周期）改写成：1&lt;/p&gt;
&lt;p&gt;Frequency（频率）选择：“Day”&lt;/p&gt;
&lt;p&gt;点击 “Add new parameter” 新增多个参数，如&lt;/p&gt;
&lt;p&gt;勾选 “At these hours（在这些小时）”，“At these minute（在这些分钟）”&lt;/p&gt;
&lt;p&gt;重点注意：这里的时间是 UTC（世界时间） ，如果我们设置中国时间，就要在此基础上加 8 小时&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826221456228-931742164.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;At these hours :  我选择世界时间 6，7，8，9 点，对应到中国时间也就是  14点，15点，16点，17点&lt;/p&gt;
&lt;p&gt;At these minutes：选择 0，15 也就是结合上面的时间，在 分别在 14点整，14点15分，15点整，15点15分，16点整，16点15分，17点整，17点15分触发这个定时器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220335515-687149706.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 同时，我们也可以点击当前步骤的菜单，去修改当前步骤的名称，这里我作为演示将默认的 “Recurrence” 修改为 “Check travel time every weekday morning”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220514516-99263954.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 接下来，我们再添加一个发送邮件的步骤，我们点击 “New step”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220539452-156304606.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 选择图中的 “Outlook.com”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220559227-1854445566.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p&gt;点击 “Send an email（v2）”&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220616411-1746873338.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到当前发送邮件模块所需要参数内容&lt;/p&gt;
&lt;p&gt;Body 也就是邮件的正文，作为示例，邮件的内容如图中所示&lt;/p&gt;
&lt;p&gt;Subject 也就是主题：我们改写为 “提醒”&lt;/p&gt;
&lt;p&gt;to：指当前主题为提醒的邮件，我们需要发给谁，我这里选择发给自己的qq邮箱，而关于发件人，我们可以看到图中我圈到的内容，显示 “已连接到outlook.com”，这个是我自己以及配置好的发件人的outlook 邮箱，邮箱的类型不限，个人，公司的都是可以的，如果想配置其他outlook 邮箱，可以点击 “change connection” 去更改发件人的邮箱账号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220909309-1549970389.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 配置完成后，我们点击 “Save”，进行保存操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220946897-365768646.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 存完成后，不会立即触发，还记得我们上面的设置吗，每天对于的小时 14点，15点，16点，17点，分钟对于 0点，15点 才会触发提醒邮件的发送。我们我们想对自己的配置能够快速的进行测试，我们可以点击 “Run”，进行手动的触发。&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826221006043-715983817.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重点，如果我们想进行测试配置好的 Azure Logic App，我们可以直接点击 “Run Tigger” 进行手动触发，&lt;/p&gt;
&lt;p&gt;如果想要查看邮件发送的运行情况，我们可以在点击 “Overview” 进行查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826220150315-1653727557.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击具体的某一条信息，我们就可以看到详细的步骤，以及每个步骤的耗时，这样的话，如果那个步骤有问题的话，我们可以很好的，很快的定位到具体的问题，并且快速的解决。&lt;/p&gt;
&lt;p&gt;--------------------我是分割线--------------------&lt;/p&gt;
&lt;p&gt;我们登录到收件人的邮箱中查看这些手动，以及自动发送到邮件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1996262/202008/1996262-20200826224734219-2072685689.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; bingo，撒花🎉🎉🎉🎉🎉&lt;/p&gt;
&lt;h2&gt;三，结尾&lt;/h2&gt;
&lt;p&gt; 　　今天我们尝试通过添加Logic App 循环任务模块，OutLook邮箱模块，并且配置频率为每天时，在早上的 6，7，8，9 整点的时候，发送早上问候的邮件。这里只是简单的进行了发邮件的设置，我们可以根据实际项目进行配置&lt;/p&gt;
&lt;p&gt;　　比如：我们每天早会的时候，pm 都会去前一天分给每个人的任务的进度，是否完成，完成度如何等等操作，这个时候我们也是可以借助Azure Logic App 集成Azure DevOps 配置一个任务提醒，可以很好的帮助我们在Azure DevOps中任务的及时处理。&lt;/p&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://www.cnblogs.com/AllenMaster&quot; target=&quot;_blank&quot;&gt;Allen&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;版权：转载请在文章明显位置注明作者及出处。如发现错误，欢迎批评指正。&lt;/p&gt;
</description>
<pubDate>Wed, 26 Aug 2020 14:51:00 +0000</pubDate>
<dc:creator>Grant_Allen</dc:creator>
<og:description>一，引言 前两天看一个azure相关的题，接触到一个叫 “Azure Logic App” 的服务，刚好，今天抽空学习以下，顺便结合它做一篇入门的分析文章。 首先，我们得对它有个大概的认识，了解以下A</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/AllenMaster/p/13562303.html</dc:identifier>
</item>
<item>
<title>App 自动化，Appium 凭什么使用 UiAutomator2？ - AirPython</title>
<link>http://www.cnblogs.com/xingag/p/13568419.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xingag/p/13568419.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1466987-7448def5b0898c8b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-uiautomator2-是什么&quot;&gt;1. UiAutomator2 是什么&lt;/h2&gt;
&lt;p&gt;可能很多人对 UiAutomator2 和 UiAutomator 傻傻分不清楚&lt;/p&gt;
&lt;p&gt;UiAutomator 是 Google 开发的一款运行在 Android 设备上的 UI 自动化测试工具，基于JAVA语言，使用它有一个限制，就是必须打包成 APK 或 JAR，然后上传到设备，才能运行&lt;/p&gt;
&lt;p&gt;事实上，UiAutomator2 同样有 JAVA和 Python 版，今天我们聊的是 Python 版本的 UiAutomator2&lt;/p&gt;
&lt;p&gt;至于 JAVA 版本的可以参考之前写的文章：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1OTI0NjI1NQ==&amp;amp;mid=2247483953&amp;amp;idx=2&amp;amp;sn=ba9ea0780c4c73689f0f813a78391ecf&amp;amp;chksm=fc1b7cf1cb6cf5e7c318fe18a9589bea0d11c9dbf0a0484f4e4a2717b2a3f11d073d02effe0b&amp;amp;scene=21#wechat_redirect&quot;&gt;点我查看&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python 版本的 UiAutomator2 项目地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/openatx/uiautomator2&quot;&gt;https://github.com/openatx/uiautomator2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2appium-和-uiautomator2&quot;&gt;2.Appium 和 UiAutomator2&lt;/h2&gt;
&lt;p&gt;作为移动端自动化的鼻祖，早期版本的 Appium 是基于 UiAutomator 和 Bootstrap.jar&lt;/p&gt;
&lt;p&gt;其中，Bootstrap 在 Appium初始化的时候，被推送到 Android 设备上，负责监听 Appium 发过来的请求，并转换后发送给 UiAutomator 去处理，完成自动化操作&lt;/p&gt;
&lt;p&gt;最新版本的 Appium 加入了对 UiAutomator2 的支持，原理进行了更新，功能和稳定性更加完善&lt;/p&gt;
&lt;p&gt;原理图可以参考：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1466987-0bd848754e50f359?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;3准备&quot;&gt;3.准备&lt;/h2&gt;
&lt;p&gt;在使用 UiAutomator2 之前，需要做如下准备&lt;/p&gt;
&lt;p&gt;1、在 PC 端配置 Android 开发环境&lt;/p&gt;
&lt;p&gt;2、使用 pip 安装 uiautomator2 依赖&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 安装依赖
pip3 install -U uiautomator2

# 如果需要截屏，需要安装pillow
pip3 install pillow
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、在手机上安装 atx-agent 应用&lt;/p&gt;
&lt;p&gt;ps：atx-agent 作为服务端，一直运行在后台&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 安装apk服务到手机上
python -m uiautomator2 init
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、安装 weditor&lt;/p&gt;
&lt;p&gt;WEditor 通过 ip 连接手机，即可以实时查看 App 的界面元素信息&lt;/p&gt;
&lt;p&gt;和 Appium DeskTop 类似，可以模拟点击、滑动操作、生成操作源码等功能&lt;/p&gt;
&lt;p&gt;首先，通过 pip 安装 weditor 依赖包&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 基于浏览器查看 App 的界面元素
pip3 install -U weditor
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，在命令行输入 weditor，会自动在浏览器中打开，接着通过 ip 连接对应的设备，即可以获取设备端当前界面的控件信息&lt;/p&gt;
&lt;p&gt;信息内容包含：控件的层级关系、控件 ID、文本内容、坐标值等内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1466987-253dc9b300635128?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;4实战一下&quot;&gt;4.实战一下&lt;/h2&gt;
&lt;p&gt;还是以闲鱼搜索商品为例，聊聊 UiAutomator2 的使用&lt;/p&gt;
&lt;p&gt;1、连接设备&lt;/p&gt;
&lt;p&gt;使用 UiAutomator2 连接设备有 3 种方式，分别是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import uiautomator2 as u2

# 方式一：局域网设备ip地址
device = u2.connect(手机ip地址)

# 方式二：USB + 设备序列号
device = u2.connect(手机序列号)

# 方式三：ADB+
# 首先，设备用USB线连接PC，输入命令：adb tcpip 端口号进行映射
# 拔掉USB线，通过ip地址+端口号进行连接
device = u2.connect_adb_wifi(手机ip地址:端口号)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、打开闲鱼 APP&lt;/p&gt;
&lt;p&gt;调用上面 device 对象中 app_start() 方法，传入应用的包名作为参数可以打开应用&lt;/p&gt;
&lt;p&gt;需要注意的是，方法中的第二个参数如果传入 True，可以冷启动 App，默认值为 False&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 打开应用
device.app_start(PACKAGE_NAME, stop=True)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、点击搜索栏进入搜索界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1466987-b481864543addaec?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，全局设置一个隐式等待，保证查找元素的时候避免因为卡顿、网络导致的异常&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 隐式等待20s，保证控件加载完成
device.implicitly_wait(20)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，通过 WEditor 定位到搜索入口控件的基本信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1466987-e2022b27550e3372?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;常用的 UiAutomator2 定位方式有 6 种，分别是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;ID 定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Text 文本定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Description 定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClassName 定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xpath 定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合定位&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 常用的6种定位方式
# 方式一：ID定位
d(resourceId=元素ID).click()

# 方式二：Text文本定位
d(text=&quot;公众号：AirPython&quot;).click()

# 方式三：Description值定位
d(description=&quot;AirPython&quot;).click()

# 方式四：ClassName定位
d(className=&quot;android.widget.TextView&quot;).click()

# 方式五：Xpath定位
d.xpath(&quot;//*[@content-desc='AirPython']&quot;)

# 方式六：组合定位
d(className=&quot;android.widget.ListView&quot;, resourceId=元素ID)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要指出的是，当界面属性值不唯一的时候，组合定位就显得很实用&lt;/p&gt;
&lt;p&gt;本例直接使用 ID 去找到元素，然后执行点击操作，跳转到搜索界面&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 点击到搜索页面
device(resourceId=&quot;com.taobao.idlefish:id/search_bg_img_front&quot;,).click()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、搜索&lt;/p&gt;
&lt;p&gt;UiAutomator2 中提供了 send_keys() 方法，用于向输入框中设置文本&lt;/p&gt;
&lt;p&gt;注意：参数 clear 如果设置为 True，则在输入内容之前，会先清空输入框，默认值为 False&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 输入内容
device.send_keys(&quot;Python&quot;, clear=True)

# 点击搜索按钮
device(text=&quot;搜索&quot;).click()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、滑动&lt;/p&gt;
&lt;p&gt;UiAutomator2 提供了两个方法用于滑动界面，分别是：&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;swipe_ext( 滑动方向 )&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;swipe( 开始 x 轴,开始 y 轴,结束 x 轴,结束 y 轴值,滑动时间 )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;经过测试发现，滑动操作，swipe_ext() 使用效果不稳定，建议使用 swipe() 函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;for i in range(5):
    print('滑动一次')
    swipe_custom(device, 0.5, 0.8, 0.5, 0.2, 1.2)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外，为了保证兼容不同分辨率的设备，建议通过屏幕百分比自定义滑动方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def swipe_custom(device, start_x_percent, start_y_percent, end_x_percent, end_y_percent, during=1.0, interval=1):
    &quot;&quot;&quot;
    自定义滑动，适配性更高
    :param device:
    :param start_x_percent:
    :param start_y_percent:
    :param end_x_percent:
    :param end_y_percent:
    :param during:
    :return:
    &quot;&quot;&quot;
    # 获取屏幕的宽、高度
    width, height = device.window_size()
    device.swipe(start_x_percent * width, start_y_percent * height, end_x_percent * width, end_y_percent * height,
                 during)

    if interval &amp;gt; 0:
        sleep(interval)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、关闭应用&lt;/p&gt;
&lt;p&gt;在完成自动化操作后，就可以调用 app_stop() 方法强制关闭应用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 停止App
device.app_stop(PACKAGE_NAME)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然，可以在每次操作完，使用 UiAutomator2 提供的方法 app_clear() 清除 App 数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 清除App数据
# device.app_clear(PACKAGE_NAME)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;5最后&quot;&gt;5.最后&lt;/h2&gt;
&lt;p&gt;通过上面的实例，我们发现 UiAutomator2 相比 Appium，语法更简洁易懂，代码量也少了很多&lt;/p&gt;
&lt;p&gt;但是由于 Uiautomator2 仅适用于 Android 端，Appium 拥有多语言、跨平台的特性，企业级自动化一般会选择后者&lt;/p&gt;
&lt;p&gt;我已经将文中全部源码上传到后台，关注公众号「 &lt;strong&gt;AirPython&lt;/strong&gt; 」后回复「 &lt;strong&gt;uiauto2&lt;/strong&gt; 」即可获得全部源码&lt;/p&gt;
&lt;p&gt;如果你觉得文章还不错，请大家 &lt;strong&gt;点赞、分享、留言&lt;/strong&gt;下，因为这将是我持续输出更多优质文章的最强动力！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1OTI0NjI1NQ==&amp;amp;mid=2247486180&amp;amp;idx=1&amp;amp;sn=7a1d282e608ec14c655e8105984639f7&amp;amp;chksm=fc1b7424cb6cfd3207004c88cd8820a2d7f0b1ad31ba24ab7952a2d66810460bfddc6cd4bc18&amp;amp;scene=21#wechat_redirect&quot;&gt;带你用 Python 实现自动化群控（入门篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1OTI0NjI1NQ==&amp;amp;mid=2247485382&amp;amp;idx=1&amp;amp;sn=f88a15bfdcbd6d05d1f3bc71decf6357&amp;amp;chksm=fc1b7906cb6cf01014518deb38f0d8bcd64ada62f0946621d4b64b630cb343cf171843c1967f&amp;amp;scene=21#wechat_redirect&quot;&gt;聊聊 Python 做微信小程序自动化，那些踩过的坑？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1OTI0NjI1NQ==&amp;amp;mid=2247486205&amp;amp;idx=1&amp;amp;sn=33dd05fc416daf1cc041bc76b53b733a&amp;amp;chksm=fc1b743dcb6cfd2b3dd1f1585bf0c3a4175e39a6dfdc7fe8a5792a405c50da2d7569fb361454&amp;amp;scene=21#wechat_redirect&quot;&gt;Python 自动化，Helium 凭什么取代 Selenium？&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 26 Aug 2020 14:27:00 +0000</pubDate>
<dc:creator>AirPython</dc:creator>
<og:description>1. UiAutomator2 是什么 可能很多人对&amp;amp;#160;UiAutomator2&amp;amp;#160;和&amp;amp;#160;UiAutomator&amp;amp;#160;傻傻分不清楚 UiA</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xingag/p/13568419.html</dc:identifier>
</item>
<item>
<title>10、Entity Framework Core 3.1入门教程-执行原生SQL - hllive</title>
<link>http://www.cnblogs.com/hllive/p/13559793.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hllive/p/13559793.html</guid>
<description>&lt;blockquote readability=&quot;4.5791666666667&quot;&gt;
&lt;p&gt;本文章是根据 微软MVP solenovex（杨旭）老师的视频教程编写而来，再加上自己的一些理解。&lt;br/&gt;视频教程地址：&lt;a href=&quot;https://www.bilibili.com/video/BV1xa4y1v7rR&quot;&gt;https://www.bilibili.com/video/BV1xa4y1v7rR&lt;/a&gt;&lt;br/&gt;GitHub源码：&lt;a href=&quot;https://github.com/hllive/LearnEFCore3.1&quot;&gt;https://github.com/hllive/LearnEFCore3.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;无主键的entity&quot;&gt;无主键的Entity&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;.NetCore3.1允许无主键的Entity或Model&lt;/li&gt;
&lt;li&gt;它们不会被追踪，相当于是只读的&lt;/li&gt;
&lt;li&gt;映射到没有主键的Table或View&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如何在EFCore中使用原生SQL语句或执行存储过程以及视图&lt;br/&gt;首先执行两个SQL脚本，一个视图和一个存储过程&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE VIEW ViewPlayerClub
AS
    SELECT p.Id[PlayerId],p.Name[PlayerName],c.Name[ClubName],c.City[ClubCity]
    FROM Players p INNER JOIN Clubs c ON p.ClubId=c.Id
GO
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE PROCEDURE RemoveGamePlayer
    @PlayerId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    DELETE FROM GamePlayer WHERE PlayerId=@PlayerId
END
GO
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据视图ViewPlayerClub创建一个类&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;public class PlayerClub
{
    public Guid PlayerId { get; set; }
    public string PlayerName { get; set; }
    public string ClubName { get; set; }
    public string ClubCity { get; set; }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再把这个类添加到DBContext中&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;public DbSet&amp;lt;PlayerClub&amp;gt; PlayerClubs { get; set; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;DbSet使用这个没有主键的类是不行的，怎么才能使用无主键的类呢？&lt;br/&gt;可以在&lt;code&gt;OnModelCreating()&lt;/code&gt;方法里设置一下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;modelBuilder.Entity&amp;lt;PlayerClub&amp;gt;()
    .HasNoKey()//设置没有主键
    .ToView(&quot;ViewPlayerClub&quot;);//如果不写这句，当迁移的时候还会创建一个PlayerClub的Table，应该把这个类映射到一个视图上
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;针对这种没有主键的model查询出来都是无法追踪的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;[HttpGet(&quot;PlayerClub&quot;)]
public IActionResult GetViewPlayerClub()
{
    var playerClub = _dbContext.PlayerClubs.Where(px =&amp;gt; px.ClubCity.Contains(&quot;贵州&quot;)).ToList();
    return Ok(playerClub);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成的SQL语句&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;SELECT [v].[ClubCity], [v].[ClubName], [v].[PlayerId], [v].[PlayerName]
FROM [ViewPlayerClub] AS [v]
WHERE CHARINDEX(N'贵州', [v].[ClubCity]) &amp;gt; 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果使用&lt;code&gt;_dbContext.PlayerClubs.Find(Guid id)&lt;/code&gt;在编译的时候不会出错，但运行肯定会报错，因为Find()里的参数是主键&lt;/p&gt;
&lt;h2 id=&quot;原生sql查询&quot;&gt;原生SQL查询&lt;/h2&gt;
&lt;p&gt;执行原生SQL查询有两种方法&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;.FromSqlRaw(&quot;SELECT *...&quot;)&lt;/code&gt; 直接写SQL语句&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.FromSqlRawAsync(&quot;SELECT *...&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.FromSqlInterpolated(&quot;$SELECT *...WHERE x={var}&quot;)&lt;/code&gt; SQL语句需要使用参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.FromSqlInterpolatedAsync(&quot;$SELECT *...WHERE x={var}&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;code&gt;FromSqlRaw&lt;/code&gt;和&lt;code&gt;FromSqlInterpolated&lt;/code&gt;是DbSet()的方法，所以只能针对DbSet方法执行，需要在DbSet()后使用FromSqlRaw&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用fromsqlraw方法&quot;&gt;使用FromSqlRaw()方法&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;[HttpGet(&quot;SqlTest&quot;)]
public IActionResult GetSqlTest1()
{
    var leagues = _dbContext.Leagues.FromSqlRaw(&quot;SELECT * FROM Leagues&quot;).ToList();
    return Ok(leagues);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成的SQL语句就是FromSqlRaw()方法里的语句&lt;/p&gt;
&lt;h3 id=&quot;使用fromsqlinterpolated方法&quot;&gt;使用FromSqlInterpolated()方法&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;[HttpGet(&quot;SqlTest1&quot;)]
public IActionResult GetSqlTest1([FromQuery] string name)
{
    //使用带参数的FromSqlInterpolated
    var leagues = _dbContext.Leagues
        .FromSqlInterpolated($&quot;SELECT * FROM Leagues WHERE Name LIKE N'%{name}%'&quot;)
        .ToList();
    return Ok(leagues);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成的SQL语句就是FromSqlInterpolated()方法的语句，但是会使用SQL参数作为查询值&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;exec sp_executesql N'SELECT * FROM Leagues WHERE Name LIKE N''%@p0%''
',N'@p0 nvarchar(4000)',@p0=N'足球'
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;原生sql查询的要求&quot;&gt;原生SQL查询的要求&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;必须返回Entity类型的所有属性，一般都是&lt;code&gt;SELECT *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字段名和Entity的属性名必须匹配&lt;/li&gt;
&lt;li&gt;无法包含关联的数据，不能写JOIN语句&lt;/li&gt;
&lt;li&gt;只能查询已知的Entity，也就是Context中设定好的或间接能追踪到的数据&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;执行非查询类sql&quot;&gt;执行非查询类SQL&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Context.Database.ExecuteSqlRaw()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.Database.ExecuteSqlRawAsync()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.Database.ExecuteSqlInterpolated()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.Database.ExecuteSqlInterpolatedAsync()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无法用于查询&lt;/li&gt;
&lt;li&gt;只能返回影响的行数&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;[HttpGet(&quot;SqlTest2&quot;)]
public IActionResult GetSqlTest2()
{
    //使用ExecuteSqlRaw
    var count = _dbContext.Database.ExecuteSqlRaw(&quot;EXEC [dbo].[RemoveGamePlayer] {0}&quot;, new Guid(&quot;&quot;));
    //使用ExecuteSqlInterpolated
    var counts = _dbContext.Database.ExecuteSqlInterpolated($&quot;EXEC [dbo].[RemoveGamePlayer] {new Guid(&quot;&quot;)}&quot;);
    return Ok(new { count, counts });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成的SQL语句两个都一样&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;博客文章可以转载，但不可以声明为原创&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 26 Aug 2020 13:07:00 +0000</pubDate>
<dc:creator>hllive</dc:creator>
<og:description>本文章是根据 微软MVP solenovex（杨旭）老师的视频教程编写而来，再加上自己的一些理解。 视频教程地址：https://www.bilibili.com/video/BV1xa4y1v7rR</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/hllive/p/13559793.html</dc:identifier>
</item>
</channel>
</rss>