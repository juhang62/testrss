<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>熟透vue手机购物商城开发的重要性 - woxiuyaoqian</title>
<link>http://www.cnblogs.com/mahuang/p/12820674.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mahuang/p/12820674.html</guid>
<description>&lt;p&gt;带手机验证码登陆,&lt;/p&gt;
&lt;p&gt;带全套购物车系统&lt;/p&gt;
&lt;p&gt;带数据库&lt;/p&gt;
&lt;p&gt;前后端分离开发&lt;/p&gt;
&lt;p&gt;带定位用户功能&lt;/p&gt;
&lt;p&gt;数据库代码为本地制作好了&lt;/p&gt;
&lt;p&gt;带支付宝支付系统&lt;/p&gt;
&lt;p&gt;带django开发服务器接口教程 &lt;/p&gt;
&lt;p&gt;地址:   https://www.duanshuilu.com/&lt;/p&gt;


&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-57413c41427edb3c.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-57413c41427edb3c.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;319347&quot; data-image-index=&quot;0&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-86cab54613e771f8.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-86cab54613e771f8.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;139775&quot; data-image-index=&quot;1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-975112770cc6b654.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-975112770cc6b654.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;159237&quot; data-image-index=&quot;2&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-2511fa93f6d557da.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-2511fa93f6d557da.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;99785&quot; data-image-index=&quot;3&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-06e94c4639adf438.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-06e94c4639adf438.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;106461&quot; data-image-index=&quot;4&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-c733b2ae41355de3.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-c733b2ae41355de3.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;35675&quot; data-image-index=&quot;5&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-eef17b4a052092e5.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-eef17b4a052092e5.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;48511&quot; data-image-index=&quot;6&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-32815cb6be6700b4.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-32815cb6be6700b4.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;16116&quot; data-image-index=&quot;7&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-51923a6e980ca8c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-51923a6e980ca8c9.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;21219&quot; data-image-index=&quot;8&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;414&quot; data-height=&quot;736&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15432103-dc8b71bb8b5c86a1.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15432103-dc8b71bb8b5c86a1.png&quot; data-original-width=&quot;414&quot; data-original-height=&quot;736&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;19136&quot; data-image-index=&quot;9&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 03 May 2020 00:19:00 +0000</pubDate>
<dc:creator>woxiuyaoqian</dc:creator>
<og:description>带手机验证码登陆, 带全套购物车系统 带数据库 前后端分离开发 带定位用户功能 数据库代码为本地制作好了 带支付宝支付系统 带django开发服务器接口教程 地址: https://www.duans</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/mahuang/p/12820674.html</dc:identifier>
</item>
<item>
<title>你努力工作会让老板感动吗？ - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/12820638.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/12820638.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;二哥，你好呀，我想咨询你一个问题，困扰我很久了。我刚参加工作，每天早出晚归的，但我不明白为什么老板一直对我不感冒，仿佛看不到我的努力似的，是他有问题还是我有问题呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是读者小卢最近私信我的问题。其实这个问题蛮好回答的，努力工作，尤其是通过加班这种努力完全无法让老板感动。&lt;/p&gt;
&lt;p&gt;为什么呢？因为当下的环境下大家都在加班啊，你可能比别人早到一会或者晚到一会，但这对老板来说，无所谓。假如说公司只有你一个人加班，那我敢肯定，老板会对你一见倾心的。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;我在美国时，在和 IBM、CISCO 等几个大公司领导讨论问题时谈到，IT 是什么？他们说，IT 就是才员、才员、再才元（请原谅我故意写错几个错别字，因为这词敏感）。以电子流来替代人工的操作，以降低运作成本，增强企业竞争力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面这段话你听完是不是感觉心里拔凉拔凉的？当然，这句话不是我说的，而是菊厂老大说的。&lt;/p&gt;
&lt;p&gt;菊厂不知道是什么的话，建议问搜索引擎。总之，老板看待员工的眼光是冷酷的：在电子流没有替代人工之前，他所能做到的就是，让员工变成工具人。&lt;/p&gt;
&lt;p&gt;之前在苏州一家日企的时候，跳槽过来一位同事，我回洛阳后还曾一起做过私活。他是从菊厂过去的，说那里加班非常严重，他扛不住了，所以才到日企工作的，因为他觉得这里相对轻松一点。&lt;/p&gt;
&lt;p&gt;我在的这家日企总体给我印象还是非常不错的，项目工期紧张的时候确实加班挺厉害的；但如果不那么紧张的时候，基本上大家都是准时下班，几乎没有人主动加班的。&lt;/p&gt;
&lt;p&gt;当然了，绩效的评分和加班时长是有挂钩的，但更多的评分权力掌握在上级领导那里，我所经历的领导都是蛮可观的，如果你能够解决掉疑难杂症，基本上评分都不会差——除非你搞过一些严重的 bug。&lt;/p&gt;
&lt;p&gt;可一旦遇到提倡加班、拼命的老板，那就另说了。因为大家看起来都是很努力的样子，做不完的需求，改不完的 bug，加不完的班，那么你的努力在老板的眼里，就会显得显的一文不值了。&lt;/p&gt;
&lt;p&gt;就好像，小时候，生活质量差，你觉得吃一点好东西就觉得是在吃山珍海味。比如说我小时候最喜欢的就是火腿肠、奶粉、葡萄干，现在生活质量提高了，买买买，永远也买不回来小时候吃的那种味道了。&lt;/p&gt;
&lt;p&gt;我一直怀疑，是不是现在的食品做工有问题；但其实不是的，是我的胃随着生活品质的提升，变得越来越挑剔了。&lt;/p&gt;
&lt;p&gt;老板也是一样，一开始没人加班，遇到一两个拼命加班的，他一定觉得这就是他要寻找的人才。于是，升职加薪。然后，别的员工因此主动（被动）地也加了班，老板这时候就傻眼了，究竟该为谁感动呢？&lt;/p&gt;
&lt;p&gt;一定是那些既能拼（狼性）又能干事（修福报）的人。&lt;/p&gt;
&lt;p&gt;以前，只需要提高单位时间里的工作效率就行了，可现在完全不同了，那些定点上下班的员工几乎就是另类（闲鱼），哪怕你工作已经完成了。&lt;/p&gt;
&lt;p&gt;前天我经过小区门口的时候，还听见领班的师傅在那愤愤不平，他说，“我给你说啊，老黄，那他花一个小时讲的那些东西，我不用五分钟，就能讲明明白白。”&lt;/p&gt;
&lt;p&gt;从他那句话当中，我就能听得出来，领导办事效率低啊，搞得他做下属的，硬生生多站了 55 分钟！想着师傅的那些话，想着师傅站在那里左耳朵进右耳朵出的画面，我就觉得挺难过的。&lt;/p&gt;
&lt;p&gt;我认识一个朋友，他们公司流行的制度你猜怎么着，没有加班工资。但如果你加班多的话，那么绩效奖就会多。&lt;/p&gt;
&lt;p&gt;这种制度下，你努力工作会让老板感动吗？&lt;/p&gt;
&lt;p&gt;来，换一个角度来看待一下这个问题。我，在目前的公司，几乎从不加班，反而经常迟到早退，我给老板说得很明白，我讨厌加班，有事我干事，没事我就忙别的，比如读书写作啥的。&lt;/p&gt;
&lt;p&gt;由于老板付给我的工资不高，所以他就没有强制要求我加班的勇气。&lt;/p&gt;
&lt;p&gt;有人说，这样依赖员工的公司一定不成气候。我只能说，这样想的人真的是得了妄想症。&lt;/p&gt;
&lt;p&gt;你生下来，就从来不是为一个公司活着的，除非你是老板；你是为自己活着的，工作只是你谋生的一种方法。划重点了，一种。&lt;/p&gt;
&lt;p&gt;把该完成的工作完成，然后就滚回家好好地生活。不要把工作当成是生活的全部，除非你不需要生活。&lt;/p&gt;
&lt;p&gt;之前说过，很多人以为我是在全职写作，这个真不是的。我是在把工作收拾妥当后才开始写作的，否则，真饿死了。我写作不为别的，就是为了增加除了工作之外的生存能力。&lt;/p&gt;
&lt;p&gt;在老板眼里，我从来都不是一个努力工作的好员工，我也不会这么做。因为要让老板需要你，你不仅工作要干的漂亮，还得有些其他方面的优秀品质。&lt;/p&gt;
&lt;p&gt;否则，一旦公司来一个和你同等价位的员工，能力和你差不多，甚至还比你强，那么你的地位就尴尬了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要试图去感动老板，你应该做的，是让自己变得更强，而不是更努力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果觉得文章对你有点帮助，请微信搜索「 &lt;strong&gt;沉默王二&lt;/strong&gt; 」第一时间阅读。本回答已收录 GitHub，&lt;a href=&quot;https://github.com/qinggee/itwanger.github.io&quot;&gt;&lt;strong&gt;传送门~&lt;/strong&gt;&lt;/a&gt; ，里面更有大厂面试完整考点，欢迎 Star。&lt;/p&gt;
&lt;p&gt;我是沉默王二，一枚有颜值却靠才华苟且的程序员。&lt;strong&gt;关注即可提升学习效率，别忘了三连啊，点赞、收藏、留言，我不挑，嘻嘻&lt;/strong&gt;。&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 23:34:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>二哥，你好呀，我想咨询你一个问题，困扰我很久了。我刚参加工作，每天早出晚归的，但我不明白为什么老板一直对我不感冒，仿佛看不到我的努力似的，是他有问题还是我有问题呢？ 以上是读者小卢最近私信我的问题。其</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qing-gee/p/12820638.html</dc:identifier>
</item>
<item>
<title>Azkaban3.81.x部署+坑 - buildings</title>
<link>http://www.cnblogs.com/luengmingbiao/p/12820576.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luengmingbiao/p/12820576.html</guid>
<description>&lt;h2&gt;一、前提安装&lt;/h2&gt;
&lt;h3&gt;1.1 Java1.8环境搭建&lt;/h3&gt;
&lt;p&gt;　　1) 下载jdk1.8并解压：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;tar&lt;/span&gt; -zxvf  jdk-8u201-linux-i586.&lt;span&gt;tar&lt;/span&gt;.gz  -C /usr/local
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2) 添加Java环境变量，在/etc/profile中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export JAVA_HOME=/usr/local/jdk1.8&lt;span&gt;.0_201 
export PATH=$PATH:$JAVA_HOME/&lt;span&gt;bin
export JRE_HOME=$JAVA_HOME/&lt;span&gt;jre
export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;3) 保存后刷新环境变量：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
# source /etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;4) 检查Java是否配置成功，成功配置会有如下图所示。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
# java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1426803/201907/1426803-20190730204822984-129643553.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1.2 MySQL安装&lt;/h3&gt;
&lt;p&gt;　　Ubuntu可以参考我的MySQL安装&lt;a href=&quot;https://www.cnblogs.com/luengmingbiao/p/10864249.html&quot; target=&quot;_blank&quot;&gt;博文&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;1.3  git安装&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; git
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.4 下载azkaban&lt;/h3&gt;
&lt;p&gt;　　从github选取版本下载azkaban：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/azkaban/azkaban/releases&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在这里我选取了azkaban-3.18.4版本：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/azkaban/azkaban/archive/3.84.4.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　解压：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;tar&lt;/span&gt; -zxvf azkaban-&lt;span&gt;3.84&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;.gz -C /mnt/addDisk1/BigData/&lt;span&gt;
# cd &lt;/span&gt;/mnt/addDisk1/BigData/azkaban-&lt;span&gt;3.84&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.5 编译&lt;/h3&gt;
&lt;p&gt;　　执行gradlew编译命令，跳过测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# ./gradlew distTar -x test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　它会一下编译，直到编译成功，运行之后会生成5个压缩包，分别放在在azkaban-*/build/distributions/目录下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
azkaban-db-&lt;span&gt;3.47&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;-gdd67b02.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
azkaban&lt;/span&gt;-exec-server-&lt;span&gt;3.47&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;-gdd67b02.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
azkaban&lt;/span&gt;-hadoop-security-plugin-&lt;span&gt;3.47&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;-gdd67b02.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
azkaban&lt;/span&gt;-solo-server-&lt;span&gt;3.47&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;-gdd67b02.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
azkaban&lt;/span&gt;-web-server-&lt;span&gt;3.47&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;-gdd67b02.&lt;span&gt;tar&lt;/span&gt;.gz 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1426803/202005/1426803-20200503034054610-1364639365.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 　　接着把五个包分别解压在另外的目录下(/mnt/addDisk1/BigData/azkaban)，并重命名：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
cd /mnt/addDisk1/&lt;span&gt;BigData
&lt;/span&gt;&lt;span&gt;tar&lt;/span&gt; -zxvf ./azkaban-&lt;span&gt;3.81&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/azkaban-db/build/distributions/azkaban-db-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT.&lt;span&gt;tar&lt;/span&gt;.gz -C ./azkaban/
&lt;span&gt;tar&lt;/span&gt; -zxvf ./azkaban-&lt;span&gt;3.81&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/azkaban-exec-server/build/distributions/azkaban-exec-server-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT.&lt;span&gt;tar&lt;/span&gt;.gz -C ./azkaban/
&lt;span&gt;tar&lt;/span&gt; -zxvf ./azkaban-&lt;span&gt;3.81&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/azkaban-hadoop-security-plugin/build/distributions/azkaban-hadoop-security-plugin-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT.&lt;span&gt;tar&lt;/span&gt;.gz -C ./azkaban/
&lt;span&gt;tar&lt;/span&gt; -zxvf ./azkaban-&lt;span&gt;3.81&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/azkaban-solo-server/build/distributions/azkaban-solo-server-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT.&lt;span&gt;tar&lt;/span&gt;.gz -C ./azkaban/
&lt;span&gt;tar&lt;/span&gt; -zxvf ./azkaaban-&lt;span&gt;3.81&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/azkaban-web-server/build/distributions/azkaban-web-server-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT.&lt;span&gt;tar&lt;/span&gt;.gz -C ./azkaban/
&lt;span&gt;mv&lt;/span&gt; azkaban-solo-server-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT/ azkaban-solo-&lt;span&gt;server
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; azkaban-exec-server-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT/ azkaban-exec-&lt;span&gt;server
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; azkaban-web-server-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT/ azkaban-web-&lt;span&gt;server
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; azkaban-db-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT/ azkaban-&lt;span&gt;db
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; azkaban-hadoop-security-plugin-&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-SNAPSHOT/ azkaban-hadoop-security-plugin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1426803/202005/1426803-20200503034132205-46458147.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt; 二、azkaban部署&lt;/h3&gt;
&lt;h3&gt;2.1 在MySQL中创建azkaban数据库：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt;&lt;span&gt; azkaban;
&lt;/span&gt;&lt;span&gt;grant&lt;/span&gt; &lt;span&gt;all&lt;/span&gt; &lt;span&gt;privileges&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; azkaban.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; azkaban@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; identified &lt;span&gt;by&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;azkaban&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
flush &lt;/span&gt;&lt;span&gt;privileges&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; azkaban;
# 将azkaban sql表结构导入mysql
source &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mnt&lt;span&gt;/&lt;/span&gt;addDisk1&lt;span&gt;/&lt;/span&gt;BigData&lt;span&gt;/&lt;/span&gt;azkaban&lt;span&gt;/&lt;/span&gt;azkaban&lt;span&gt;-&lt;/span&gt;db&lt;span&gt;/&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;-all-&lt;/span&gt;sql&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;SNAPSHOT.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2 创建SSL配置：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
# keytool -keystore keystore -alias jetty -genkey -&lt;span&gt;keyalg RSA
运行此命令后,会提示输入当前生成 keystor的密码及相应信息,输入的密码请劳记,信息如下:

输入keystore密码： 
再次输入新密码:
您的名字与姓氏是什么？
  [Unknown]： 
您的组织单位名称是什么？
  [Unknown]： 
您的组织名称是什么？
  [Unknown]： 
您所在的城市或区域名称是什么？
  [Unknown]： 
您所在的州或省份名称是什么？
  [Unknown]： 
该单位的两字母国家代码是什么
  [Unknown]：  CN
CN&lt;/span&gt;=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=&lt;span&gt;CN 正确吗？
  [否]：  y
密码在此我输入的是hadoop
输入&lt;/span&gt;&amp;lt;jetty&amp;gt;&lt;span&gt;的主密码
        （如果和 keystore 密码相同，按回车）： 
再次输入新密码:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　完成上述工作后,将在当前目录生成 keystore 证书文件,将keystore 考贝到 azkaban web服务器根目:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;mv&lt;/span&gt; keystore azkaban/azkaban-web-server
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.3 部署 azkaban-web-server&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# cd ./&lt;span&gt;azkaban
# &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; -r  ./azkaban-solo-server/conf/ ./azkaban-web-server/&lt;span&gt;
# cd .&lt;/span&gt;/azkaban-web-server/conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置azkaban.properties:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
# 默认时区,已改为亚洲/&lt;span&gt;上海 默认为美国
default.timezone.&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;=Asia/&lt;span&gt;Shanghai
database.type&lt;/span&gt;=&lt;span&gt;mysql #数据库类型
# h2.path&lt;/span&gt;=./&lt;span&gt;h2
# h2.create.tables&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
mysql.port&lt;/span&gt;=&lt;span&gt;3306&lt;/span&gt;&lt;span&gt; #端口号
mysql.host&lt;/span&gt;=&lt;span&gt;localhost #数据库连接IP
mysql.database&lt;/span&gt;=&lt;span&gt;azkaban #数据库实例名
mysql.user&lt;/span&gt;=&lt;span&gt;root #数据库用户名
mysql.password&lt;/span&gt;=&lt;span&gt;root #数据库密码

jetty.use.ssl&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
jetty.maxThreads&lt;/span&gt;=&lt;span&gt;25&lt;/span&gt;&lt;span&gt; #最大线程数
jetty.ssl.port&lt;/span&gt;=&lt;span&gt;8443&lt;/span&gt;&lt;span&gt; #Jetty SSL端口
jetty.port&lt;/span&gt;=&lt;span&gt;8081&lt;/span&gt;&lt;span&gt; #Jetty端口
jetty.keystore&lt;/span&gt;=&lt;span&gt;keystore #SSL文件名
jetty.password&lt;/span&gt;=&lt;span&gt;hadoop #SSL文件密码
jetty.keypassword&lt;/span&gt;=&lt;span&gt;hadoop #Jetty主密码 与 keystore文件相同
jetty.truststore&lt;/span&gt;=&lt;span&gt;keystore #SSL文件名
jetty.trustpassword&lt;/span&gt;=&lt;span&gt;hadoop # SSL文件密码

# 执行服务器属性
executor.port&lt;/span&gt;=&lt;span&gt;12321&lt;/span&gt;&lt;span&gt; #执行服务器端口

# 邮件设置 可不设计
mail.sender&lt;/span&gt;=xxxxxxxx@&lt;span&gt;163&lt;/span&gt;&lt;span&gt;.com #发送邮箱
mail.host&lt;/span&gt;=smtp.&lt;span&gt;163&lt;/span&gt;&lt;span&gt;.com #发送邮箱smtp地址
mail.user&lt;/span&gt;=&lt;span&gt;xxxxxxxx #发送邮件时显示的名称
mail.password&lt;/span&gt;=**********&lt;span&gt; #邮箱密码
job.failure.email&lt;/span&gt;=xxxxxxxx@&lt;span&gt;163&lt;/span&gt;&lt;span&gt;.com #任务失败时发送邮件的地址
job.success.email&lt;/span&gt;=xxxxxxxx@&lt;span&gt;163&lt;/span&gt;&lt;span&gt;.com #任务成功时发送邮件的地址
lockdown.create.projects&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt; #
cache.directory&lt;/span&gt;=cache #缓存目录
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置log4j.properties（默认就可以了，如有其他需求可修改）:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
log4j.rootLogger=&lt;span&gt;INFO, Console
log4j.logger.azkaban&lt;/span&gt;=&lt;span&gt;INFO, server
log4j.appender.server&lt;/span&gt;=&lt;span&gt;org.apache.log4j.RollingFileAppender
log4j.appender.server.layout&lt;/span&gt;=&lt;span&gt;org.apache.log4j.PatternLayout
log4j.appender.server.File&lt;/span&gt;=logs/azkaban-&lt;span&gt;webserver.log
log4j.appender.server.layout.ConversionPattern&lt;/span&gt;=%d{yyyy/MM/&lt;span&gt;dd&lt;/span&gt; HH:mm:ss.SSS Z} %p [%c{&lt;span&gt;1&lt;/span&gt;}] [Azkaban] %m%&lt;span&gt;n
log4j.appender.server.MaxFileSize&lt;/span&gt;=&lt;span&gt;102400MB
log4j.appender.server.MaxBackupIndex&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
log4j.appender.Console&lt;/span&gt;=&lt;span&gt;org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout&lt;/span&gt;=&lt;span&gt;org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern&lt;/span&gt;=%d{yyyy/MM/&lt;span&gt;dd&lt;/span&gt; HH:mm:ss.SSS Z} %p [%c{&lt;span&gt;1&lt;/span&gt;}] [Azkaban] %m%n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　添加管理员用户:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;sudo&lt;/span&gt; vim azkaban-&lt;span&gt;users.xml

&lt;/span&gt;&amp;lt;azkaban-users&amp;gt;
  &amp;lt;user &lt;span&gt;groups&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;azkaban&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;azkaban&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; roles=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;azkaban&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;user password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; roles=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;user username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; roles=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin,metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;role name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; permissions=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ADMIN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;role name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; permissions=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;METRICS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/azkaban-users&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4 部署 azkaban-exec-server &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# cd /mnt/addDisk1/BigData/&lt;span&gt;azkaban
# &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; -r ./azkaban-solo-server/conf/ ./azkaban-exec-server/&lt;span&gt;
# cd .&lt;/span&gt;/azkaban-exec-server/conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置azkaban.properties：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;sudo&lt;/span&gt;&lt;span&gt; vim azkaban.properties

#Azkaban
default.timezone.&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;=Asia/&lt;span&gt;Shanghai #时区

# Azkaban JobTypes 插件配置
azkaban.jobtype.plugin.&lt;/span&gt;&lt;span&gt;dir&lt;/span&gt;=plugins/&lt;span&gt;jobtypes #jobtype 插件所在位置

#Loader &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; projects
executor.global.properties&lt;/span&gt;=conf/&lt;span&gt;global.properties
azkaban.project.&lt;/span&gt;&lt;span&gt;dir&lt;/span&gt;=&lt;span&gt;projects

#数据库设置
database.type&lt;/span&gt;=&lt;span&gt;mysql #数据库类型(目前只支持mysql)
mysql.port&lt;/span&gt;=&lt;span&gt;3306&lt;/span&gt;&lt;span&gt; #数据库端口号
mysql.host&lt;/span&gt;=&lt;span&gt;localhost #数据库IP地址
mysql.database&lt;/span&gt;=&lt;span&gt;azkaban #数据库实例名
mysql.user&lt;/span&gt;=&lt;span&gt;azkaba #数据库用户名
mysql.password&lt;/span&gt;=&lt;span&gt;azkaba #数据库密码
mysql.numconnections&lt;/span&gt;=&lt;span&gt;100&lt;/span&gt;&lt;span&gt; #最大连接数

# 执行服务器配置
executor.maxThreads&lt;/span&gt;=&lt;span&gt;50&lt;/span&gt;&lt;span&gt; #最大线程数
executor.port&lt;/span&gt;=&lt;span&gt;12321&lt;/span&gt;&lt;span&gt; #端口号(如修改,请与web服务中一致)
executor.flow.threads&lt;/span&gt;=&lt;span&gt;30&lt;/span&gt; #线程数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在azkaban-exec-server和azkaban-web-server安装目录下创建extlib目录，将lib目录下的mysql-connector-java-5.1.28.jar包拷备这extlib目录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
# cd /mnt/addDisk1/BigData/&lt;span&gt;azkaban
# &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; ./azkaban-web-server/lib/mysql-connector-java-&lt;span&gt;5.1&lt;/span&gt;.&lt;span&gt;28&lt;/span&gt;.jar ./azkaban-web-server/extlib/&lt;span&gt;
# &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; ./azkaban-exec-server/lib/mysql-connector-java-&lt;span&gt;5.1&lt;/span&gt;.&lt;span&gt;28&lt;/span&gt;.jar ./azkaban-exec-server/extlib/
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.5 启动web-server和exec-server&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# ./azkaban-exec-server/bin/start-exec.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
# .&lt;/span&gt;/azkaban-web-server/bin/start-web.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.6 访问https://ip:8443打开azkaban的web页面&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1426803/202005/1426803-20200503034830180-309599824.png&quot; alt=&quot;&quot; width=&quot;693&quot; height=&quot;356&quot;/&gt;&lt;/p&gt;


&lt;h3&gt; 2.7 测试&lt;/h3&gt;
&lt;h2&gt;三、遇到的问题&lt;/h2&gt;
&lt;h3&gt;3.1、 找到guava-*.jar包版本过低，但在/lib/下的是0.21版本，不低了，根据排除可知找到系统中版本过低的而使用。&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.573&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban] Exception &lt;span&gt;in&lt;/span&gt; thread &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.574&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban] java.lang.NoSuchMethodError: com.google.common.collect.ImmutableMap.toImmutableMap(Ljava/util/&lt;span&gt;function&lt;/span&gt;/Function;Ljava/util/&lt;span&gt;function&lt;/span&gt;/Function;)Ljava/util/stream/&lt;span&gt;Collector;
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.574&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.executor.Status.&amp;lt;clinit&amp;gt;(Status.java:&lt;span&gt;40&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.575&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.executor.FetchActiveFlowDao$FetchActiveExecutableFlows.&amp;lt;clinit&amp;gt;(FetchActiveFlowDao.java:&lt;span&gt;177&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.575&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.executor.FetchActiveFlowDao.fetchActiveFlows(FetchActiveFlowDao.java:&lt;span&gt;148&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.575&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.executor.JdbcExecutorLoader.fetchActiveFlows(JdbcExecutorLoader.java:&lt;span&gt;102&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.575&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.executor.ExecutorManager.loadRunningExecutions(ExecutorManager.java:&lt;span&gt;384&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.576&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.executor.ExecutorManager.initialize(ExecutorManager.java:&lt;span&gt;136&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.576&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.executor.ExecutorManager.start(ExecutorManager.java:&lt;span&gt;149&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.576&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.webapp.AzkabanWebServer.launch(AzkabanWebServer.java:&lt;span&gt;231&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;12&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;34.576&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt; ERROR [StdOutErrRedirect] [Azkaban]       at azkaban.webapp.AzkabanWebServer.main(AzkabanWebServer.java:&lt;span&gt;224&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解决方案： &lt;a href=&quot;https://blog.csdn.net/andyguan01_2/article/details/88353889&quot;&gt;https://blog.csdn.net/andyguan01_2/article/details/88353889&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# vim /mnt/addDisk1/BigData/azkaban/azkaban-web-server/bin/internal/internal-start-web.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;将如下：
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;file&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; $azkaban_dir/lib&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

改为：
for file in $azkaban_dir/lib/*.jar;
do
  CLASSPATH=$file:$CLASSPATH
done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# vim /mnt/addDisk1/BigData/azkaban/azkaban-exec-server/bin/internal/internal-start-executor.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;将如下：
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;file&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; $azkaban_dir/lib&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

改为：
for file in $azkaban_dir/lib/*.jar;
do
  CLASSPATH=$file:$CLASSPATH
done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.2 解决executor非active的问题&lt;/h3&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;1）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# cd ./azkaban/azkaban-exec-server/&lt;span&gt;
# curl &lt;/span&gt;-G &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:$(&amp;lt;./executor.port)/executor?action=activate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1426803/202005/1426803-20200503035143138-1730147356.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2）也可以通过在MySQL中修改：&lt;a href=&quot;https://blog.csdn.net/JavaDestiny/article/details/90091118&quot;&gt;https://blog.csdn.net/JavaDestiny/article/details/90091118&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 02 May 2020 19:53:00 +0000</pubDate>
<dc:creator>buildings</dc:creator>
<og:description>一、前提安装 1.1 Java1.8环境搭建 1) 下载jdk1.8并解压： # tar -zxvf jdk-8u201-linux-i586.tar.gz -C /usr/local 2) 添加Ja</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/luengmingbiao/p/12820576.html</dc:identifier>
</item>
<item>
<title>负载均衡服务之HAProxy https配置、四层负载均衡以及访问控制 - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/12820466.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/12820466.html</guid>
<description>&lt;p&gt;　　前文我们聊了下haproxy的访问控制ACL的配置，回顾请参考&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/12817773.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/12817773.html&lt;/a&gt;；今天我们来聊一聊haproxy的https的配置、基于tcp四层负载均衡以及访问控制的配置说明；&lt;/p&gt;
&lt;p&gt;　　首先我们来看一下haproxy的https的配置；https是什么我这里就不过多阐述了，有关证书的申请相关说明请参考&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/12237944.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/12237944.html&lt;/a&gt;；在haproxy的配置文件中，我们要明确的声明监听某个端口，该端口需要ssl协议来访问，类似nginx里的listen 443 ssl配置；除此之外我们还需要用crt来指定证书；不同于nginx里的配置是haproxy的证书内容包含私钥信息；所以在我们申请好证书后，还需要把证书文件内容同私钥文件做合并；&lt;/p&gt;
&lt;p&gt;　　示例：配置haproxy监听443端口，并支持https&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200502231742848-1232480391.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：红框中的内容表示监听443端口，并明确指定使用ssl协议访问；证书文件是/etc/haproxy/ssl/haproxy.pem&lt;/p&gt;
&lt;p&gt;　　创建ssl目录和证书文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@docker_node1 ~]# mkdir -p /etc/haproxy/ssl
[root@docker_node1 ~]# cd /etc/haproxy/ssl
[root@docker_node1 ssl]# ls
[root@docker_node1 ssl]# (umask 066;openssl genrsa -out haproxy.key 2048)
Generating RSA private key, 2048 bit long modulus
.......+++
...+++
e is 65537 (0x10001)
[root@docker_node1 ssl]# ls
haproxy.key
[root@docker_node1 ssl]# openssl req -new -x509 -key haproxy.key -out haproxy.crt -subj &quot;/CN=www.test.com&quot;
[root@docker_node1 ssl]# ls
haproxy.crt  haproxy.key
[root@docker_node1 ssl]# cat haproxy.crt haproxy.key &amp;gt; haproxy.pem
[root@docker_node1 ssl]# ls
haproxy.crt  haproxy.key  haproxy.pem
[root@docker_node1 ssl]# openssl  x509 -in haproxy.pem -noout -text
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            e6:c5:30:f9:10:e5:da:cf
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=www.test.com
        Validity
            Not Before: May  2 14:41:50 2020 GMT
            Not After : Jun  1 14:41:50 2020 GMT
        Subject: CN=www.test.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:e6:bd:db:2d:37:1e:b3:26:21:45:37:c3:bc:c2:
                    f8:f0:35:31:7c:af:f4:22:be:bc:f2:01:a1:ce:31:
                    32:91:37:06:14:a8:eb:ec:99:30:ae:8f:66:6b:51:
                    03:94:bb:d1:ae:7d:15:23:ea:9a:83:74:6d:d0:be:
                    30:5d:bf:4c:dd:79:c6:8d:51:01:ea:d7:a8:e5:93:
                    f9:11:d9:75:cc:2c:65:d6:31:db:15:20:7f:5e:9f:
                    56:15:3e:17:b9:82:a8:25:ba:40:17:1c:ef:f2:fc:
                    11:cb:72:ce:07:5b:57:5d:c3:f1:f6:42:1f:02:63:
                    b0:33:de:87:a3:43:c7:a0:1b:03:c4:ab:09:f4:67:
                    ce:ec:ef:1f:88:7a:c2:aa:ca:41:ed:1d:78:60:b1:
                    41:6d:b9:46:67:1e:c9:ce:43:d8:d6:36:be:ba:ed:
                    d9:2b:01:9a:0c:8e:64:59:07:3a:c2:2c:55:2b:9b:
                    06:e5:5b:c7:ba:e2:9f:ea:be:71:9f:76:da:79:c6:
                    f0:b8:94:70:c0:4f:7b:57:53:5c:30:71:c5:82:d0:
                    7a:a8:d0:71:32:2c:f0:38:61:69:9b:9e:ac:da:45:
                    74:63:25:76:78:91:c3:be:6c:7c:72:1c:54:4a:ac:
                    10:24:45:9c:89:6a:1f:5b:00:22:3a:b6:fe:3f:b8:
                    73:7b
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                B2:EC:53:AE:68:E0:65:1D:E6:DB:C8:16:E3:BA:D3:70:BC:E7:79:81
            X509v3 Authority Key Identifier: 
                keyid:B2:EC:53:AE:68:E0:65:1D:E6:DB:C8:16:E3:BA:D3:70:BC:E7:79:81

            X509v3 Basic Constraints: 
                CA:TRUE
    Signature Algorithm: sha256WithRSAEncryption
         91:a2:36:9b:b8:d3:fd:89:ea:6c:b4:b9:3c:b6:a1:f3:86:87:
         71:13:8b:10:a0:73:e9:96:b7:1b:dd:7e:91:64:41:a4:c3:80:
         7c:b6:f2:ce:a7:77:28:74:51:da:a6:52:98:a7:88:48:41:2f:
         ad:3d:cb:36:bd:94:f9:27:72:f1:e8:ae:f8:bd:38:2e:d6:ea:
         0b:26:2d:8b:49:3e:bc:4e:58:9e:bf:79:99:5b:88:23:da:98:
         e4:45:79:9c:d2:c9:05:05:9f:23:8a:0f:38:db:9a:c4:5c:e9:
         a0:f5:e5:aa:02:bc:df:a7:5d:11:cd:35:08:cc:41:08:40:b6:
         0b:e4:ad:79:df:9a:1d:7b:70:8b:65:e5:dc:85:34:55:5c:f2:
         94:dc:07:91:43:d0:bb:b4:fb:31:b9:74:19:7a:69:43:11:70:
         41:41:86:93:ad:83:42:62:e2:67:69:38:cd:18:c7:e9:f7:f4:
         be:78:22:ea:ee:20:db:27:1f:06:87:4c:51:67:19:0a:64:97:
         3a:e6:2c:32:bd:84:91:88:96:d2:01:e5:c3:62:59:11:c8:20:
         7d:a1:c8:5a:3d:8a:fc:f5:14:fe:41:15:97:ee:47:ec:e5:19:
         49:0b:c1:8a:c9:3f:10:4d:66:bf:d5:01:21:2d:fd:8b:a7:95:
         17:08:7e:46
[root@docker_node1 ssl]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：我这里就直接用-subj来指定证书/CN来生成自签名证书；haproxy的证书要求是把证书信息和私钥信息放在一起，所以我们需要把证书文件信息和私钥新信息通过重定向的方式合并在一起；&lt;/p&gt;
&lt;p&gt;　　测试：重启haproxy,用浏览器访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200502232911614-399512414.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到我们用https访问是可以正常的访问，只是证书浏览器不信任，所以会提示我们不安全；&lt;/p&gt;
&lt;p&gt;　　把80端口的请求重向定443&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200502233718921-1786049474.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：红框中的配置表示把http请求重定向为https，这个类似nginx里的重写url；&lt;/p&gt;
&lt;p&gt;　　测试：用浏览器访问http://192.168.0.22看看是否会把http重写为https?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200502234137853-1291152173.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到我们访问用http去访问，在响应报文中会用location告诉浏览器去访问https://192.168.0.22；这样一来就实现了全站https；&lt;/p&gt;
&lt;p&gt;　　向后端传递用户请求的协议和端口（frontend或backend）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200502234423652-861255966.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：红框中的内容就表示向后端请求报文中设置X-Forwarded-port首部的值为dst_port变量的值；添加X-Forwared-Proto首部，其值为https，在请求协议是https的请求时；通常这两个设置是后端应用server要求使用https访问时需要把前端https请求通过X-Forwared-Proto传递给后端；&lt;/p&gt;
&lt;p&gt;　　测试：在后端server上配置日志格式，分别将这两个首部记录到日志，然后通过访问，查看日志中记录这两个首部的值是否是我们访问的443端口和https协议？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200502235544401-965610337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上定义httpd的日志格式，分别记录{X-Forwarded-Port和X-Forwared-Proto首部的值&lt;/p&gt;
&lt;p&gt;　　用浏览器访问测试，看看日志中记录的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200502235823680-177308107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到日志中把对应访问端口和协议都传给了后端server；&lt;/p&gt;
&lt;p&gt;　　haproxy基于4层代理做tcp负载均衡&lt;/p&gt;
&lt;p&gt;　　示例：基于tcp对mysql做负载均衡&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503000050943-1446399611.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置表示用tcp协议来代理后端server；&lt;/p&gt;
&lt;p&gt;　　后端server环境准备&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@docker_node1 ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
wordpress           latest              c3fa1c8546fb        44 hours ago        540MB
mysql               5.7                 f965319e89de        4 days ago          448MB
httpd               2.4.37-alpine       dfd436f9a5d8        16 months ago       91.8MB
[root@docker_node1 ~]# docker run --name db1 -d --net bridge -e MYSQL_ROOT_PASSWORD=admin mysql:5.7
8cade03e4f28f40e7d7e970355735c8b881892754b18a637fef0d956f3f88877
[root@docker_node1 ~]# docker run --name db2 -d --net bridge -e MYSQL_ROOT_PASSWORD=admin mysql:5.7 
1bff841c226abe88441103764655dc86257d5b99079eaa113384fd04b62cf0f8
[root@docker_node1 ~]# docker ps 
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                 NAMES
1bff841c226a        mysql:5.7             &quot;docker-entrypoint.s…&quot;   7 seconds ago       Up 6 seconds        3306/tcp, 33060/tcp   db2
8cade03e4f28        mysql:5.7             &quot;docker-entrypoint.s…&quot;   12 seconds ago      Up 12 seconds       3306/tcp, 33060/tcp   db1
3572c621f827        wordpress             &quot;docker-entrypoint.s…&quot;   9 hours ago         Up 9 hours          80/tcp                wordpress
f07288d607e5        httpd:2.4.37-alpine   &quot;httpd-foreground&quot;       7 days ago          Up 13 hours         80/tcp                web3
971595b7f409        httpd:2.4.37-alpine   &quot;httpd-foreground&quot;       7 days ago          Up 13 hours         80/tcp                web2
5c74f3be1868        httpd:2.4.37-alpine   &quot;httpd-foreground&quot;       7 days ago          Up 13 hours         80/tcp                web1
[root@docker_node1 ~]# docker exec -it db1 /bin/sh
# mysql -padmin
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.7.30 MySQL Community Server (GPL)

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&amp;gt; grant all on *.* to &quot;myuser&quot;@'172.17.0.%' identified by 'admin';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&amp;gt; \q
Bye
# exit
[root@docker_node1 ~]# docker exec -it db2 /bin/sh
# mysql -padmin
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.7.30 MySQL Community Server (GPL)

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&amp;gt; grant all on *.* to &quot;myuser&quot;@'172.17.0.%' identified by 'admin';
Query OK, 0 rows affected, 1 warning (0.01 sec)

mysql&amp;gt; \q
Bye
# exit
[root@docker_node1 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：启动mysql容器时，我们需要对root设置密码；新建用户时，我们指定的主机IP地址应该是docker0桥的地址，虽然是基于4层tcp代理，但它还是要更改源ip；&lt;/p&gt;
&lt;p&gt;　　测试：重启haproxy，用mysql客户端访问haproxy所监听的3306端口，看看是否能够正常的连接到后端mysql容器里？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503001849946-1970027593.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到用别的主机上的mysql客户端是可以正常访问haproxy监听的3306端口；&lt;/p&gt;
&lt;p&gt;　　haproxy基于4层tcp做访问控制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503002403820-1125884775.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：tcp-request connection 表示根据第4层条件对传入连接执行操作；以上配置表示拒绝源地址为192.168.0.21的连接&lt;/p&gt;
&lt;p&gt;　　测试：重启haproxy，用192.168.0.21上的mysql客户端连接192.168.0.22：3306看看是否能够正常连接？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503002922590-2096048110.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到在192.168.0.21上用mysql工具就不能够连接192.168.0.22上的mysql了；&lt;/p&gt;
&lt;p&gt;　　示例：仅开放源地址为192.168.0.21的主机访问，拒绝其他主机的访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503003351966-1935971871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：tcp-request connection 允许访问用accept来标识，拒绝用reject；如果是联合使用后面范围大的可以不用写条件，表示除上面匹配到的ACL条目以外的所有条目；同http-request 类似，不同的是http-request允许是用allow标识，拒绝用deny标识；&lt;/p&gt;
&lt;p&gt;　　测试：分别用源地址为192.168.0.21的主机上的mysql客户端去连接192.168.0.22上的mysql和源地址非192.168.0.21上的mysql客户端连接192.168.0.22上的mysql看看是否都可以连接？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503004102417-1236975372.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到在源地址非192.168.0.21上使用mysql客户端是不能够连接到后端mysql容器的；这是因为它没有被我们定义ACL匹配，所以就会被tcp-request connect reject匹配；从而拒绝连接；&lt;/p&gt;
&lt;p&gt;　　最后一个话题，在前边的博客中我们聊的了haproxy的状态页的配置；其中我们演示的是通过页面展示给我们，通过鼠标点点点去管理后端server；这样一来在对于我们想要监控haproxy本身以及后端server就是一个难题；聪明的你一定注意到haproxy的全局配置段中有一个stat socket /var/lib/haproxy/stats这样的配置；我们接下来说说这个配置是干嘛用的；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503005120973-341147228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置是表示将监控页面信息绑定到一个socket文件上；我们可以通过对该socket文件发送特定指令，实现操作haproxy的目的&lt;/p&gt;
&lt;p&gt;　　示例：通过socat向/var/lib/haproxy/stats传递help信息，让其打印帮助页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@docker_node1 ~]# echo &quot;help&quot;|socat stdio /var/lib/haproxy/stats 
Unknown command. Please enter one of the following commands only :
  clear counters : clear max statistics counters (add 'all' for all counters)
  clear table    : remove an entry from a table
  help           : this message
  prompt         : toggle interactive mode with prompt
  quit           : disconnect
  show info      : report information about the running process
  show pools     : report information about the memory pools usage
  show stat      : report counters for each proxy and server
  show errors    : report last request and response errors for each proxy
  show sess [id] : report the list of current sessions or dump this session
  show table [id]: report table usage stats or dump this table's contents
  get weight     : report a server's current weight
  set weight     : change a server's weight
  set server     : change a server's state or weight
  set table [id] : update or create a table entry's data
  set timeout    : change a timeout setting
  set maxconn    : change a maxconn setting
  set rate-limit : change a rate limiting value
  disable        : put a server or frontend in maintenance mode
  enable         : re-enable a server or frontend which is in maintenance mode
  shutdown       : kill a session or a frontend (eg:to release listening ports)
  show acl [id]  : report available acls or dump an acl's contents
  get acl        : reports the patterns matching a sample for an ACL
  add acl        : add acl entry
  del acl        : delete acl entry
  clear acl &amp;lt;id&amp;gt; : clear the content of this acl
  show map [id]  : report available maps or dump a map's contents
  get map        : reports the keys and values matching a sample for a map
  set map        : modify map entry
  add map        : add map entry
  del map        : delete map entry
  clear map &amp;lt;id&amp;gt; : clear the content of this map
  set ssl &amp;lt;stmt&amp;gt; : set statement for ssl

[root@docker_node1 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面的帮助信息，我们可以了解到我们可以通过管道把对应指令传给/var/lib/haproxy/stats文件，从而实现管理后端server的目的；&lt;/p&gt;
&lt;p&gt;　　示例：通过socat命令把web1标记为disable&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503010622004-646797078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：我们执行把web1标记为disable，系统提示我们没有权限；接下来我们来配置权限即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503010910274-1453939129.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置表示该socket文件具有admin权限，接下来在来把web1标记为disable（修改haproxy配置文件，需要重启haproxy ）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503011209550-226463359.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：我们修改了权限以后，现在执行以上命令就没有报什么权限之类的错误了，接下来我们打开状态页，看看web1的状态是什么&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503012139225-1021458485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到web1变成了维护的模式；&lt;/p&gt;
&lt;p&gt;　　示例：列出监控页面指标数据的信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@docker_node1 ~]# echo &quot;show info &quot; |socat stdio /var/lib/haproxy/stats
Name: HAProxy
Version: 1.5.18
Release_date: 2016/05/10
Nbproc: 4
Process_num: 3
Pid: 6374
Uptime: 0d 0h05m04s
Uptime_sec: 304
Memmax_MB: 0
Ulimit-n: 8039
Maxsock: 8039
Maxconn: 4000
Hard_maxconn: 4000
CurrConns: 0
CumConns: 3
CumReq: 10
MaxSslConns: 0
CurrSslConns: 0
CumSslConns: 0
Maxpipes: 0
PipesUsed: 0
PipesFree: 0
ConnRate: 0
ConnRateLimit: 0
MaxConnRate: 1
SessRate: 0
SessRateLimit: 0
MaxSessRate: 1
SslRate: 0
SslRateLimit: 0
MaxSslRate: 0
SslFrontendKeyRate: 0
SslFrontendMaxKeyRate: 0
SslFrontendSessionReuse_pct: 0
SslBackendKeyRate: 0
SslBackendMaxKeyRate: 0
SslCacheLookups: 0
SslCacheMisses: 0
CompressBpsIn: 0
CompressBpsOut: 0
CompressBpsRateLim: 0
ZlibMemUsage: 0
MaxZlibMemUsage: 0
Tasks: 14
Run_queue: 1
Idle_pct: 100
node: docker_node1
description: 

[root@docker_node1 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上信息就是监控页面中的指标数据；&lt;/p&gt;
&lt;p&gt;　　示例：上线web1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503011756297-1487536909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在监控页面看web1的状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202005/1503305-20200503012055950-348582475.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到web1已经正常上线了；聪明的你一定想到了通过这样的方式动态的去管理后端server；这样就可以实现很多功能，比如通过zabbix去监控haproxy里的状态指标；通过脚本动态的上线和下线server、动态的修改后端server的权重（这个需要根据算法来，如果调度算法是动态的就支持，静态的就不支持）；&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 17:45:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>前文我们聊了下haproxy的访问控制ACL的配置，回顾请参考https://www.cnblogs.com/qiuhom-1874/p/12817773.html；今天我们来聊一聊haproxy的h</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/12820466.html</dc:identifier>
</item>
<item>
<title>【K8S】基于单Master节点安装K8S集群 - 冰河团队</title>
<link>http://www.cnblogs.com/binghe001/p/12820432.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/binghe001/p/12820432.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;最近在研究K8S，今天就输出部分研究成果吧，后续也会持续更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;集群规划&quot;&gt;集群规划&lt;/h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;192.168.175.101&lt;/td&gt;
&lt;td&gt;binghe101&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;CentOS 8.0.1905&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;192.168.175.102&lt;/td&gt;
&lt;td&gt;binghe102&lt;/td&gt;
&lt;td&gt;Worker&lt;/td&gt;
&lt;td&gt;CentOS 8.0.1905&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;192.168.175.103&lt;/td&gt;
&lt;td&gt;binghe103&lt;/td&gt;
&lt;td&gt;Worker&lt;/td&gt;
&lt;td&gt;CentOS 8.0.1905&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;基础配置&quot;&gt;基础配置&lt;/h2&gt;
&lt;p&gt;在三台服务器上的/etc/hosts文件中添加如下配置项。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;192.168.175.101  binghe101
192.168.175.102  binghe102
192.168.175.103  binghe103
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;检查系统环境&quot;&gt;检查系统环境&lt;/h2&gt;
&lt;p&gt;分别在三台服务器上检查系统的环境。&lt;/p&gt;
&lt;h3 id=&quot;1查看服务器操作系统版本&quot;&gt;1.查看服务器操作系统版本&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cat /etc/redhat-release
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装Docker和K8S集群的服务器操作系统版本需要在CentOS 7以上。&lt;/p&gt;
&lt;h3 id=&quot;2查看服务器的主机名&quot;&gt;2.查看服务器的主机名&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;hostname
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：集群中服务器的主机名不能是localhost。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3查看服务器的cpu核数&quot;&gt;3.查看服务器的CPU核数&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;lscpu
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：集群中服务器的CPU核数不能少于2个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4查看服务器网络&quot;&gt;4.查看服务器网络&lt;/h3&gt;
&lt;p&gt;以binghe101（Master）服务器为例。在服务器上执行 &lt;code&gt;ip route show&lt;/code&gt; 命令来查看服务器的默认网卡，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe101 ~]# ip route show
default via 192.168.175.2 dev ens33 proto static metric 100 
172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown 
192.168.175.0/24 dev ens33 proto kernel scope link src 192.168.175.101 metric 100 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的输出信息中有如下一行标注了binghe101服务器所使用的默认网卡。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;default via 192.168.175.2 dev ens33 proto static metric 100 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，binghe101服务器使用的默认网卡为ens33。&lt;/p&gt;
&lt;p&gt;接下来，使用&lt;code&gt;ip address&lt;/code&gt;命令查看服务器的IP地址，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe101 ~]# ip address
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 00:0c:29:68:06:63 brd ff:ff:ff:ff:ff:ff
    inet 192.168.175.101/24 brd 192.168.175.255 scope global noprefixroute ens33
       valid_lft forever preferred_lft forever
    inet6 fe80::890f:5a92:4171:2a11/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，binghe101服务器上的默认网卡的IP地址为&lt;code&gt;192.168.175.101&lt;/code&gt;，K8S将使用此 IP 地址与集群内的其他节点通信。集群中所有K8S所使用的IP地址必须可以互通。&lt;/p&gt;
&lt;h2 id=&quot;docker安装&quot;&gt;Docker安装&lt;/h2&gt;
&lt;p&gt;分别在三台服务器上安装Docker并配置阿里云镜像加速器。&lt;/p&gt;
&lt;h3 id=&quot;1安装docker&quot;&gt;1.安装Docker&lt;/h3&gt;
&lt;p&gt;新建auto_install_docker.sh脚本文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim auto_install_docker.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;export REGISTRY_MIRROR=https://registry.cn-hangzhou.aliyuncs.com
dnf install yum*
yum install -y yum-utils  device-mapper-persistent-data  lvm2
yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
dnf install https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.13-3.1.el7.x86_64.rpm
yum install docker-ce docker-ce-cli -y
systemctl enable docker.service
systemctl start docker.service
docker version
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者指定Docker的版本进行安装，此时auto_install_docker.sh脚本文件的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;export REGISTRY_MIRROR=https://registry.cn-hangzhou.aliyuncs.com
dnf install yum*
yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum install -y docker-ce-19.03.8 docker-ce-cli-19.03.8 containerd.io
systemctl enable docker.service
systemctl start docker.service
docker version
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用如下命令赋予auto_install_docker.sh文件可执行权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x ./auto_install_docker.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，直接运行auto_install_docker.sh脚本文件安装Docker即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./auto_install_docker.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;2配置阿里云镜像加速器&quot;&gt;2.配置阿里云镜像加速器&lt;/h3&gt;
&lt;p&gt;新建脚本文件aliyun_docker_images.sh。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim aliyun_docker_images.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir -p /etc/docker
tee /etc/docker/daemon.json &amp;lt;&amp;lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://zz3sblpi.mirror.aliyuncs.com&quot;]
}
EOF
systemctl daemon-reload
systemctl restart docker
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为aliyun_docker_images.sh脚本文件赋予可执行权限，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x ./aliyun_docker_images.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行aliyun_docker_images.sh脚本文件配置阿里云镜像加速器。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./aliyun_docker_images.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;系统设置&quot;&gt;系统设置&lt;/h2&gt;
&lt;p&gt;分别在三台服务器上进行系统设置。&lt;/p&gt;
&lt;h3 id=&quot;1安装nfs-utils&quot;&gt;1.安装nfs-utils&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;yum install -y nfs-utils
yum install -y wget
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;2关闭防火墙&quot;&gt;2.关闭防火墙&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;systemctl stop firewalld
systemctl disable firewalld
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3关闭-selinux&quot;&gt;3.关闭 SeLinux&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;setenforce 0
sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4关闭-swap&quot;&gt;4.关闭 swap&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;swapoff -a
yes | cp /etc/fstab /etc/fstab_bak
cat /etc/fstab_bak |grep -v swap &amp;gt; /etc/fstab
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;5修改-etcsysctlconf&quot;&gt;5.修改 /etc/sysctl.conf&lt;/h3&gt;
&lt;p&gt;新建sys_config.sh脚本文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim sys_config.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;sys_config.sh脚本文件的内容如下所示，&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;# 如果有配置，则修改
sed -i &quot;s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g&quot;  /etc/sysctl.conf
# 可能没有，追加
echo &quot;net.ipv4.ip_forward = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.bridge.bridge-nf-call-ip6tables = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.bridge.bridge-nf-call-iptables = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.all.disable_ipv6 = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.default.disable_ipv6 = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.lo.disable_ipv6 = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.all.forwarding = 1&quot;  &amp;gt;&amp;gt; /etc/sysctl.conf
# 执行命令以应用
sysctl -p
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行如下命令赋予sys_config.sh文件可执行权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x ./sys_config.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行sys_config.sh脚本文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./sys_config.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;安装k8s&quot;&gt;安装K8S&lt;/h2&gt;
&lt;p&gt;分别在三台服务器上安装K8S。&lt;/p&gt;
&lt;h3 id=&quot;1配置k8s-yum源&quot;&gt;1.配置K8S yum源&lt;/h3&gt;
&lt;p&gt;新建k8s_yum.sh脚本文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim k8s_yum.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;赋予k8s_yum.sh脚本文件的可执行权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x ./k8s_yum.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行k8s_yum.sh文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./k8s_yum.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;2卸载旧版本的k8s&quot;&gt;2.卸载旧版本的K8S&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;yum remove -y kubelet kubeadm kubectl
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3安装kubelet、kubeadm、kubectl&quot;&gt;3.安装kubelet、kubeadm、kubectl&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;yum install -y kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4修改docker-cgroup-driver为systemd&quot;&gt;4.修改docker Cgroup Driver为systemd&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;sed -i &quot;s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g&quot; /usr/lib/systemd/system/docker.service
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;5重启-docker，并启动-kubelet&quot;&gt;5.重启 docker，并启动 kubelet&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;systemctl daemon-reload
systemctl restart docker
systemctl enable kubelet &amp;amp;&amp;amp; systemctl start kubelet
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;综合安装脚本&quot;&gt;综合安装脚本&lt;/h2&gt;
&lt;p&gt;综上，上述安装Docker、进行系统设置，安装K8S的操作可以统一成auto_install_docker_k8s.sh脚本。脚本的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;#安装Docker 19.03.8
export REGISTRY_MIRROR=https://registry.cn-hangzhou.aliyuncs.com
dnf install yum*
yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum install -y docker-ce-19.03.8 docker-ce-cli-19.03.8 containerd.io
systemctl enable docker.service
systemctl start docker.service
docker version

#配置阿里云镜像加速器
mkdir -p /etc/docker
tee /etc/docker/daemon.json &amp;lt;&amp;lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://zz3sblpi.mirror.aliyuncs.com&quot;]
}
EOF
systemctl daemon-reload
systemctl restart docker

#安装nfs-utils
yum install -y nfs-utils
yum install -y wget

#关闭防火墙
systemctl stop firewalld
systemctl disable firewalld

#关闭SeLinux
setenforce 0
sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config

# 关闭 swap
swapoff -a
yes | cp /etc/fstab /etc/fstab_bak
cat /etc/fstab_bak |grep -v swap &amp;gt; /etc/fstab

#修改 /etc/sysctl.conf
# 如果有配置，则修改
sed -i &quot;s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g&quot;  /etc/sysctl.conf
sed -i &quot;s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g&quot;  /etc/sysctl.conf
# 可能没有，追加
echo &quot;net.ipv4.ip_forward = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.bridge.bridge-nf-call-ip6tables = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.bridge.bridge-nf-call-iptables = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.all.disable_ipv6 = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.default.disable_ipv6 = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.lo.disable_ipv6 = 1&quot; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &quot;net.ipv6.conf.all.forwarding = 1&quot;  &amp;gt;&amp;gt; /etc/sysctl.conf
# 执行命令以应用
sysctl -p

# 配置K8S的yum源
cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

# 卸载旧版本K8S
yum remove -y kubelet kubeadm kubectl

# 安装kubelet、kubeadm、kubectl，这里我安装的是1.18.2版本，你也可以安装1.17.2版本
yum install -y kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2

# 修改docker Cgroup Driver为systemd
# # 将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
# # 修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd
# 如果不修改，在添加 worker 节点时可能会碰到如下错误
# [WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. 
# Please follow the guide at https://kubernetes.io/docs/setup/cri/
sed -i &quot;s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g&quot; /usr/lib/systemd/system/docker.service

# 设置 docker 镜像，提高 docker 镜像下载速度和稳定性
# 如果您访问 https://hub.docker.io 速度非常稳定，亦可以跳过这个步骤
# curl -sSL https://kuboard.cn/install-script/set_mirror.sh | sh -s ${REGISTRY_MIRROR}

# 重启 docker，并启动 kubelet
systemctl daemon-reload
systemctl restart docker
systemctl enable kubelet &amp;amp;&amp;amp; systemctl start kubelet

docker version
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：我安装的K8S版本是1.18.2，大家在安装K8S时，也可以选择其他版本进行安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;赋予auto_install_docker_k8s.sh脚本文件可执行权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x ./auto_install_docker_k8s.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行auto_install_docker_k8s.sh脚本文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./auto_install_docker_k8s.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：需要在每台服务器上执行auto_install_docker_k8s.sh脚本文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;初始化master节点&quot;&gt;初始化Master节点&lt;/h2&gt;
&lt;p&gt;只在binghe101服务器上执行的操作。&lt;/p&gt;
&lt;h3 id=&quot;1初始化master节点的网络环境&quot;&gt;1.初始化Master节点的网络环境&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;# 只在 master 节点执行
# export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令
export MASTER_IP=192.168.175.101
# 替换 k8s.master 为 您想要的 dnsName
export APISERVER_NAME=k8s.master
# Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中
export POD_SUBNET=172.18.0.1/16
echo &quot;${MASTER_IP}    ${APISERVER_NAME}&quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;2初始化master节点&quot;&gt;2.初始化Master节点&lt;/h3&gt;
&lt;p&gt;在binghe101服务器上创建init_master.sh脚本文件，文件内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
# 脚本出错时终止执行
set -e

if [ ${#POD_SUBNET} -eq 0 ] || [ ${#APISERVER_NAME} -eq 0 ]; then
  echo -e &quot;\033[31;1m请确保您已经设置了环境变量 POD_SUBNET 和 APISERVER_NAME \033[0m&quot;
  echo 当前POD_SUBNET=$POD_SUBNET
  echo 当前APISERVER_NAME=$APISERVER_NAME
  exit 1
fi


# 查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2
rm -f ./kubeadm-config.yaml
cat &amp;lt;&amp;lt;EOF &amp;gt; ./kubeadm-config.yaml
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: v1.18.2
imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers
controlPlaneEndpoint: &quot;${APISERVER_NAME}:6443&quot;
networking:
  serviceSubnet: &quot;10.96.0.0/16&quot;
  podSubnet: &quot;${POD_SUBNET}&quot;
  dnsDomain: &quot;cluster.local&quot;
EOF

# kubeadm init
# 根据您服务器网速的情况，您需要等候 3 - 10 分钟
kubeadm init --config=kubeadm-config.yaml --upload-certs

# 配置 kubectl
rm -rf /root/.kube/
mkdir /root/.kube/
cp -i /etc/kubernetes/admin.conf /root/.kube/config

# 安装 calico 网络插件
# 参考文档 https://docs.projectcalico.org/v3.13/getting-started/kubernetes/self-managed-onprem/onpremises
echo &quot;安装calico-3.13.1&quot;
rm -f calico-3.13.1.yaml
wget https://kuboard.cn/install-script/calico/calico-3.13.1.yaml
kubectl apply -f calico-3.13.1.yaml
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;赋予init_master.sh脚本文件可执行权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x ./init_master.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行init_master.sh脚本文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./init_master.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3查看master节点的初始化结果&quot;&gt;3.查看Master节点的初始化结果&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;（1）确保所有容器组处于Running状态&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;# 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态
watch kubectl get pod -n kube-system -o wide
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe101 ~]# watch kubectl get pod -n kube-system -o wide
Every 2.0s: kubectl get pod -n kube-system -o wide                                                                                                                          binghe101: Sat May  2 23:40:33 2020

NAME                                       READY   STATUS    RESTARTS   AGE     IP                NODE        NOMINATED NODE   READINESS GATES
calico-kube-controllers-5b8b769fcd-l2tmm   1/1     Running   0          3m59s   172.18.203.67     binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
calico-node-8krsl                          1/1     Running   0          3m59s   192.168.175.101   binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
coredns-546565776c-rd2zr                   1/1     Running   0          3m59s   172.18.203.66     binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
coredns-546565776c-x8r7l                   1/1     Running   0          3m59s   172.18.203.65     binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
etcd-binghe101                             1/1     Running   0          4m14s   192.168.175.101   binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-apiserver-binghe101                   1/1     Running   0          4m14s   192.168.175.101   binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-controller-manager-binghe101          1/1     Running   0          4m14s   192.168.175.101   binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-proxy-qnffb                           1/1     Running   0          3m59s   192.168.175.101   binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-scheduler-binghe101                   1/1     Running   0          4m14s   192.168.175.101   binghe101   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（2） 查看 Master 节点初始化结果&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;kubectl get nodes -o wide
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe101 ~]# kubectl get nodes -o wide
NAME        STATUS   ROLES    AGE     VERSION   INTERNAL-IP       EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION         CONTAINER-RUNTIME
binghe101   Ready    master   5m43s   v1.18.2   192.168.175.101   &amp;lt;none&amp;gt;        CentOS Linux 8 (Core)   4.18.0-80.el8.x86_64   docker://19.3.8
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;初始化worker节点&quot;&gt;初始化Worker节点&lt;/h2&gt;
&lt;h3 id=&quot;1获取join命令参数&quot;&gt;1.获取join命令参数&lt;/h3&gt;
&lt;p&gt;在Master节点上执行如下命令获取join命令参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;kubeadm token create --print-join-command
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体执行如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe101 ~]# kubeadm token create --print-join-command
W0502 23:44:55.218947   59318 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
kubeadm join k8s.master:6443 --token s0hoh1.2cwyf1fyyjl2h04a     --discovery-token-ca-cert-hash sha256:6d78e360dc64d84762611ac6beec8ac0f0fe9f72a5c2cca008df949e07827c19
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，有如下一行输出。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;kubeadm join k8s.master:6443 --token s0hoh1.2cwyf1fyyjl2h04a     --discovery-token-ca-cert-hash sha256:6d78e360dc64d84762611ac6beec8ac0f0fe9f72a5c2cca008df949e07827c19
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这行代码就是获取到的join命令。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：join命令中的token的有效时间为 2 个小时，2小时内，可以使用此 token 初始化任意数量的 worker 节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2初始化worker节点&quot;&gt;2.初始化Worker节点&lt;/h3&gt;
&lt;p&gt;针对所有的 worker 节点执行，在这里，就是在binghe102服务器和binghe103服务器上执行。&lt;/p&gt;
&lt;p&gt;创建init_worker.sh脚本文件，文件内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;# 只在 worker 节点执行
# 192.168.175.101 为 master 节点的内网 IP
export MASTER_IP=192.168.175.101
# 替换 k8s.master 为初始化 master 节点时所使用的 APISERVER_NAME
export APISERVER_NAME=k8s.master
echo &quot;${MASTER_IP}    ${APISERVER_NAME}&quot; &amp;gt;&amp;gt; /etc/hosts

# 替换为 master 节点上 kubeadm token create 命令输出的join
kubeadm join k8s.master:6443 --token s0hoh1.2cwyf1fyyjl2h04a     --discovery-token-ca-cert-hash sha256:6d78e360dc64d84762611ac6beec8ac0f0fe9f72a5c2cca008df949e07827c19
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;其中，kubeadm join...就是master 节点上 kubeadm token create 命令输出的join。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;赋予init_worker.sh脚本文件文件可执行权限，并执行init_worker.sh脚本文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x ./init_worker.sh
./init_worker.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3查看初始化结果&quot;&gt;3.查看初始化结果&lt;/h3&gt;
&lt;p&gt;在Master节点执行如下命令查看初始化结果。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;kubectl get nodes -o wide
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe101 ~]# kubectl get nodes
NAME        STATUS   ROLES    AGE     VERSION
binghe101   Ready    master   20m     v1.18.2
binghe102   Ready    &amp;lt;none&amp;gt;   2m46s   v1.18.2
binghe103   Ready    &amp;lt;none&amp;gt;   2m46s   v1.18.2
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：kubectl get nodes命令后面加上-o wide参数可以输出更多的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;重启k8s集群引起的问题&quot;&gt;重启K8S集群引起的问题&lt;/h2&gt;
&lt;h3 id=&quot;1worker节点故障不能启动&quot;&gt;1.Worker节点故障不能启动&lt;/h3&gt;
&lt;p&gt;Master 节点的 IP 地址发生变化，导致 worker 节点不能启动。需要重新安装K8S集群，并确保所有节点都有固定的内网 IP 地址。&lt;/p&gt;
&lt;h3 id=&quot;2pod崩溃或不能正常访问&quot;&gt;2.Pod崩溃或不能正常访问&lt;/h3&gt;
&lt;p&gt;重启服务器后使用如下命令查看Pod的运行状态。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;kubectl get pods --all-namespaces
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发现很多 Pod 不在 Running 状态，此时，需要使用如下命令删除运行不正常的Pod。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;kubectl delete pod &amp;lt;pod-name&amp;gt; -n &amp;lt;pod-namespece&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：如果Pod 是使用 Deployment、StatefulSet 等控制器创建的，K8S 将创建新的 Pod 作为替代，重新启动的 Pod 通常能够正常工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果觉得文章对你有点帮助，请微信搜索并关注「 冰河技术 」微信公众号，跟冰河学习各种编程技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后附上K8S最全知识图谱链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.processon.com/view/link/5ac64532e4b00dc8a02f05eb?spm=a2c4e.10696291.0.0.6ec019a4bYSFIw#map&quot;&gt;https://www.processon.com/view/link/5ac64532e4b00dc8a02f05eb?spm=a2c4e.10696291.0.0.6ec019a4bYSFIw#map&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;祝大家在学习K8S时，少走弯路。&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 16:30:00 +0000</pubDate>
<dc:creator>冰河团队</dc:creator>
<og:description>写在前面 最近在研究K8S，今天就输出部分研究成果吧，后续也会持续更新。 集群规划 | IP | 主机名 | 节点 | 操作系统版本 | | | | | | | 192.168.175.101 | b</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/binghe001/p/12820432.html</dc:identifier>
</item>
<item>
<title>高级数据结构---堆树和堆排序 - 白露非霜</title>
<link>http://www.cnblogs.com/nijunyang/p/12820356.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nijunyang/p/12820356.html</guid>
<description>&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;堆树介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之前在二叉树的时候说到过一种特殊的二叉树&lt;/span&gt;---&lt;span&gt;完全二叉树（除了最后一层，其他层的每个结点都是满的，且最后一层结点全部靠左排列，这样就可以很方便的用数组来表示，下标从&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;开始如果父结点索引是&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;那么它两个子结点的索引就是&lt;/span&gt;&lt;span&gt;2i+1&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;2i+2,&lt;/span&gt;&lt;span&gt;具体的图解见二叉树）。而&lt;span&gt;堆树又是一种特殊的完全二叉树。它的每一个结点值都大于等于或者小于等于其左右结点的值&lt;/span&gt;。这里和二叉搜索树不一样，搜索树是左节点小于根，右结点大于根。为什么是大于等于或者小于等于呢，如果大于等于，那么根就是最大的数，这样的就是大顶堆；如果是小于等于，那么根就是最小的数，这样就是小顶堆。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1216484/202005/1216484-20200502235301686-870450745.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;堆树的操作：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;插入：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;堆树插入之后要进行一个堆化的操作，也就是让这棵树满足堆树的性质。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一种是&lt;span&gt;从下往上&lt;/span&gt;另一种是&lt;span&gt;从上往下&lt;/span&gt;的堆化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从下往上：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为完全二叉树用数据构造之后，那么新插入的数据都在最后，但是插入之后，可能就不满足堆树的要求了，所以需要进行变动。以上图的大顶堆为例，我们在最后插入&lt;/span&gt;9&lt;span&gt;之后是不满足堆树的性质的。所以我们需要与其父结点进行交换，直到不能再交换位置。不用担心数据量大了交换的次数问题，完全二叉树近似一个满二叉树，最多交换&lt;/span&gt;&lt;span&gt;logn-1&lt;/span&gt;&lt;span&gt;次，想想&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;&lt;span&gt;的次方是多少，这么大的数据最多才&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;&lt;span&gt;次。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1216484/202005/1216484-20200502235343183-1892533195.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;删除：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设我们要删除掉根结点&lt;/span&gt;10&lt;span&gt;，并且删除之后，还要满足堆树的性质。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如何才能删除之后还能保证性质呢。其实就是将要删除的元素和最后一个元素交换之后，删除最后一个元素之后，再从上往下进行堆化的操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1216484/202005/1216484-20200502235405853-1777585004.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;修改数据之后，同样要进行堆化操作，根据修改之后的数据和他父结点和子结点比较来决定是向上还是向下进行堆化操作。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;堆排序：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;排序算法一种，就是先将数组构造成堆树，再进行排序。那么怎么将一个数组构造成堆树。其实一个数组我们都可以看成是一棵完全二叉树，但是需要将这棵树进行改造，才能得到堆树。如何改造？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如这个数组：&lt;/span&gt;[8 4 20 7 3 1 25 14 17]&lt;/p&gt;
&lt;p&gt;&lt;span&gt;树结构：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1216484/202005/1216484-20200502235421336-237799169.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;我们从最后一个非叶子结点逆向依次进行向下堆化操作，如上图也就是先从&lt;/span&gt;7&lt;span&gt;（最后一个非叶子结点）开始向下堆化，&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;会和&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;进行对换，然后逆向一次执行，接下来就是&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;向下执行堆化，会和&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;对换；然后是&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;，这个时候会将刚才换上来&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;换上去，然后&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;继续和下面比较，和&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;进行交换&lt;/span&gt;&lt;span&gt;.......&lt;/span&gt;&lt;span&gt;依次这样操作之后就可以得到一棵堆树了。图解如下：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1216484/202005/1216484-20200502235459090-2112353295.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;那么得到堆树之后，看起来也是无序的啊，怎么就能实现排序呢&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到堆树的根要么是最大的数要么是最小的数，那我们依次将根取出来，之后再进行堆化操作，又会得到剩余数中最大或者最小的。所以，我们将根与最后一个数交换之后，再进行堆化操作（这里的堆化操作就要除开最后一个点了），然后再新的根和倒数第二个交换再堆化，依次这样操作，后面数慢慢的都是有序的了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图解如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1216484/202005/1216484-20200502235529759-875800014.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;代码实现数组转堆树和堆排序（不稳定）：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 堆排序
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; arr
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; heapSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; arr.length;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 数组构造堆树，从倒数第一个非叶子结点开始逆向一次进行堆化操作。最后一个叶子结点的父结点就是最后一个非叶子结点。
         * 索引从0开始。两个子结点索引是2i+1和2i+2,所以最后一个非叶子结点的索引就是 len/2 - 1
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = len / 2 - 1; i &amp;gt;=0 ; i--) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;时间复杂度nlogn&lt;/span&gt;
&lt;span&gt;            createMaxHeap(arr, i, len);
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = len - 1; i &amp;gt; 0 ; i--) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;时间复杂度nlogn&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; maxData = arr[0]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个数最大&lt;/span&gt;
            arr[0] =&lt;span&gt; arr[i];
            arr[i] &lt;/span&gt;=&lt;span&gt; maxData;
            &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
             * 交换第一个最后一个位置,然后重新构造大顶堆。每循环一次就构造好了一个数的位置，
             * 最后到i为止都是排好序的，堆化的时候不需要再操作了
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            createMaxHeap(arr, &lt;/span&gt;0&lt;span&gt;, i);
        }
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 大顶堆构造及堆化过程
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; arr
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; start  
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; end  end之后是已经排好序的，所以需要end下标来判断截止
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createMaxHeap(&lt;span&gt;int&lt;/span&gt;[] arr, &lt;span&gt;int&lt;/span&gt; start, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; end) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; parentIndex =&lt;span&gt; start;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; leftChildIndex = 2 * parentIndex + 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (leftChildIndex &amp;lt;&lt;span&gt; end) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; tempIndex =&lt;span&gt; leftChildIndex;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较左右结点谁大，记录谁的下标&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (leftChildIndex + 1 &amp;lt; end &amp;amp;&amp;amp; arr[leftChildIndex] &amp;lt; arr[leftChildIndex + 1&lt;span&gt;]) {
                tempIndex &lt;/span&gt;= leftChildIndex + 1&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父结点比孩子大，不交换&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (arr[parentIndex] &amp;gt;&lt;span&gt; arr[tempIndex]) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;交换数据，刷新父结点继续执行堆化操作&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt; tempData =&lt;span&gt; arr[parentIndex];
                arr[parentIndex] &lt;/span&gt;=&lt;span&gt; arr[tempIndex];
                arr[tempIndex] &lt;/span&gt;=&lt;span&gt; tempData;
                parentIndex &lt;/span&gt;=&lt;span&gt; tempIndex;
                leftChildIndex &lt;/span&gt;= 2 * parentIndex + 1&lt;span&gt;;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 堆树和堆排序在JDK中的应用，可以参见优先队列：java.util.PriorityQueue&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 15:58:00 +0000</pubDate>
<dc:creator>白露非霜</dc:creator>
<og:description>堆树介绍： 之前在二叉树的时候说到过一种特殊的二叉树 完全二叉树（除了最后一层，其他层的每个结点都是满的，且最后一层结点全部靠左排列，这样就可以很方便的用数组来表示，下标从0开始如果父结点索引是i那么</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/nijunyang/p/12820356.html</dc:identifier>
</item>
<item>
<title>salesforce零基础学习（九十六）Platform Event浅谈 - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/12809898.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/12809898.html</guid>
<description>&lt;p&gt;本篇参考：&lt;a href=&quot;https://developer.salesforce.com/blogs/2018/07/which-streaming-event-do-i-use.html&quot;&gt;https://developer.salesforce.com/blogs/2018/07/which-streaming-event-do-i-use.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://trailhead.salesforce.com/content/learn/modules/platform_events_basics&quot;&gt;https://trailhead.salesforce.com/content/learn/modules/platform_events_basics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.platform_events.meta/platform_events/platform_events_intro.htm&quot;&gt;https://developer.salesforce.com/docs/atlas.en-us.platform_events.meta/platform_events/platform_events_intro.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们在之前的篇章中讲过 Streaming API的使用，可以参看：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/zero-zyq/p/7955469.html&quot;&gt;salesforce零基础学习（八十五）streaming api 简单使用（接近实时获取你需要跟踪的数据的更新消息状态）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天讲的是另外一个针对消息发布订阅的实现，即 Platform Event。Platform Event的详细描述可以参看上面的trailhead练习，如何选取streaming event可以参看第一个链接。接下来通过三步来讲 Platform Event。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一. 什么是Platform Event&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Platform Event是一个基于发布订阅的消息管理架构。通过Platform Event，你可以监听你的系统数据并且满足某种条件下，和自己或者其他外部系统进行交流通讯。比如salesforce系统的Account数据在其他的外部系统有备份。当 Account的Owner或者Account类型有改变以后，需要外部关联的系统同时知道当前的数据进行了改变并作出相应的处理。我们以前针对此种case可能通过callout，将我们的数据变化通过http方式发布到对端系统，然后对端系统进行处理以后返回response告诉salesforce系统处理完成。此种方式可能有以下的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当数据量大的时候，因为salesforce有callout的各种limitation，容易有government limitation的风险；&lt;/li&gt;
&lt;li&gt;当对端系统迁移或者需要增加对端系统时，可能需要有额外的effort进行处理。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Platform Event是基于发布订阅模式，即salesforce发布了消息以后，所有他的订阅者理论上都有权力去订阅到发布的数据。如果有新增的订阅者，我们只需要配置相关的订阅端即可。需要了解的是，使用Platform Event不仅可以和内部系统进行发布订阅，也可以和外部系统进行连携。Platform Event有几个名词需要了解。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Event：在业务流程中有意义的状态更改，比如account change owner&lt;/li&gt;
&lt;li&gt;Event message：Event发生时需要发送的消息。通常我们需要创建 PlatForm Event来进行对应，这个后期讲&lt;/li&gt;
&lt;li&gt;Event producer：消息的发布者&lt;/li&gt;
&lt;li&gt;Event channel：消息发布者发布消息的渠道，这里我们用到的就是Event Bus&lt;/li&gt;
&lt;li&gt;Event consumer：从渠道中接受消息的订阅者。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/910966/202005/910966-20200501105638670-129267741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 所以我们将操作连接起来可以理解成：当salesforce某些有意义的业务数据变化以后，发布者通过Event Bus这个渠道进行了数据发布，将数据广播出去，订阅者通过EventBus进行数据的接收即完成了数据的发布以及订阅。数据的发布和订阅可以有多种方式实现，篇中的头部URL展示了Platform Event的开发文档，包含了全部的操作手册，本篇只是以其中的trigger方式进行扫盲，详情操作还请查看官方这个API文档。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二. PlatForm发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）创建PlatForm Event:在Set Up处搜索platform event，在Integrations下面点击Platform Events便可以看到系统配置的Platform Event信息，点击New Platform Event即可新建一条我们需要的PlatForm Event&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/910966/202005/910966-20200502113718187-989410686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 2)当我们创建以后，可以选择Publish Behavior，salesforce提供了两个值可供选择： Publish After Commit / Publish Immediately。这两种有很大的区别：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Publish Immediately当对一个platform event列表进行publish时，即使有一些失败，成功的那些也会继续进行发布，即保存时allOrNone属性会被自动忽略；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Publish Immediately如果设置了此种模式， setSavePoint以及rollback不支持，即发送了就发送了，没有某种case回滚模式；反之Publish After Commit可以有回滚操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Event Type选择的值为High Volume，salesforce可以将发布的广播数据保存三天。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/910966/202005/910966-20200502113906393-357581223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 3)当我们创建完以后，我们会发现API Name是__e结尾的。针对Platform Event是以这种特殊的表进行存储，当然里面的数据不支持SOQL或者apex方式去搜索出来，订阅者只能通过其他的方式去查询。标准的字段区域我们发现有一个 Reply Id。这个字段是一个非常重要的字段。有什么作用呢？&lt;/p&gt;
&lt;p&gt;每一个Event Message都会包含一个 Reply Id，当广播传递给订阅者时由系统填充，代表着当前的事件在时间流中的位置(index)。对于连续的事件，Reply Id不一定是连续的，所以不要考虑使用+1的方式去找到下一个 ReplyId.当订阅者因为某些原因丢失了接受的订阅的信息，可以通过Reply Id去找回，但是因为 Publish Event只保留3天，所以需要在3天以内去完成。&lt;/p&gt;
&lt;p&gt;同时我们也可以看到，下方区域还包含Trigger以及Subscription，这意味着Publish Event可以进行trigger操作，但是只能监听trigger.afterInsert，其他的不支持。我们也可以进行创建字段操作去创建我们需要的类型以及变量数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/910966/202005/910966-20200502114438011-141750271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 4）当我们点击Custom Fields New按钮以后，我们可以看到包含以下的字段类型可供选择。按照需求选择我们需要的字段类型创建字段即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/910966/202005/910966-20200502115420795-834565452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 如图我们创建了三个字段，和自定义字段类似，后缀也是__c，所以很好理解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/910966/202005/910966-20200502115707829-331072839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 我们的模拟需求外部系统有备份salesforce的Account数据，当Account的industry变化以后，会发一个Task告诉Owner，同时将变化的数据告诉外部连携系统。Publish Platform可以有很多种方式，可以通过apex / process builder / flow / rest api（通常demo中会使用workbench来操作）。我们的实现为使用apex trigger来实现。&lt;/p&gt;
&lt;p&gt;trigger中核心的一个语句就是EventBus.publish了，和Datebase.insert一样，可以传递一个list或者一个item都可以。以下的代码便可以实现了一个Platform Event的发布广播操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;trigger AccountTrigger on Account(after update) {
    List&lt;/span&gt;&amp;lt;Account__e&amp;gt; needPublishAccountList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Account__e&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Account accountItem : (List&amp;lt;Account&amp;gt;)Trigger.&lt;span&gt;new&lt;/span&gt;&lt;span&gt;) {
        Account oldAccount &lt;/span&gt;=&lt;span&gt; Trigger.oldMap.get(accountItem.Id);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(oldAccount != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; oldAccount.Industry !=&lt;span&gt; accountItem.Industry) {
            Account__e accountPublishItem &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Account__e();
            accountPublishItem.Account_Id__c &lt;/span&gt;=&lt;span&gt; accountItem.Id;
            accountPublishItem.After_Industry__c &lt;/span&gt;=&lt;span&gt; accountItem.Industry;
            accountPublishItem.Before_Industry__c &lt;/span&gt;=&lt;span&gt; oldAccount.Industry;
            needPublishAccountList.add(accountPublishItem);
        }
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;needPublishAccountList.isEmpty()) {
        List&lt;/span&gt;&amp;lt;Database.SaveResult&amp;gt; results =&lt;span&gt; EventBus.publish(needPublishAccountList);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Database.SaveResult sr : results) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (sr.isSuccess()) {
                System.debug(&lt;/span&gt;'Successfully published event.'&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Database.Error err : sr.getErrors()) {
                    System.debug(&lt;/span&gt;'Error returned: ' +&lt;span&gt;
                                err.getStatusCode() &lt;/span&gt;+
                                ' - ' +&lt;span&gt;
                                err.getMessage());
                }
            }       
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三. PlatForm Event的订阅&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然Event已经发布了，我们需要知道我们写的代码是否正确，订阅者是否可以收到信息。上面也说过通过SOQL没法搜索到Platform Event的信息，那么我们应该如何去查询或者操作去了解是否发布成功呢？官方提供了特别多的订阅方式。比如我们可以通过apex trigger / lightning component / lightning web component / process builder / CometD(针对外部系统连携可以通过轮询去订阅)&lt;/p&gt;
&lt;p&gt;所以我们使用哪种方式的订阅要取决于我们项目的需要，如果订阅在内部系统执行，作为公用操作可以使用trigger。如果我们需要在程序中监听，可以使用lightning aura或者lwc去监听。并进行页面实时变更操作。如果外部连携，可以考虑使用CometD进行连携。具体的使用方式可以查看上面的官方文档链接，本篇demo主要通过trigger/去实现订阅的测试。&lt;/p&gt;
&lt;p&gt;AccountEventTrigger.trigger：只能使用after insert，用于广播以后针对owner创建一个task信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;trigger AccountEventTrigger on Account__e (after insert) {
    List&lt;/span&gt;&amp;lt;Task&amp;gt; taskList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Task&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Account__e accountEvent : Trigger.New) {
        Task taskItem &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Task();
        taskItem.Subject &lt;/span&gt;= 'Industry change reminder'&lt;span&gt;;
        taskItem.Description &lt;/span&gt;= 'old industry : ' + accountEvent.Before_Industry__c + ' new industry : ' +&lt;span&gt; accountEvent.After_Industry__c;
        taskItem.ActivityDate &lt;/span&gt;=&lt;span&gt; System.today();
        taskItem.Priority &lt;/span&gt;= 'Medium'&lt;span&gt;;
        taskItem.OwnerId &lt;/span&gt;=&lt;span&gt; UserInfo.getUserId();
        taskList.add(taskItem);
    }
    insert taskList;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在订阅处便可以看到trigger作为订阅者实现了订阅。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/910966/202005/910966-20200502221444772-1698891674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;总结：&lt;/strong&gt;Platform Event在和内部外部系统信息交互有着很好用的效果，本篇只是简单的进行功能扫盲，详情使用自行查看开发文档。&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 15:45:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<og:description>本篇参考：https://developer.salesforce.com/blogs/2018/07/which-streaming-event-do-i-use.html https://trai</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zero-zyq/p/12809898.html</dc:identifier>
</item>
<item>
<title>C# 基础知识系列- 14 IO篇 文件的操作  - 月影西下</title>
<link>http://www.cnblogs.com/c7jie/p/12820192.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/c7jie/p/12820192.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;本篇继续前两篇内容，跟大家介绍一下Path类以及FileSystemInfo这个类的主要方法和属性。&lt;/p&gt;
&lt;p&gt;上文提到，在《C# 基础知识系列-IO篇》之文件相关的内容完结之后，会带领大家开发一个小工具-快速检索文件所在目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;13-path&quot;&gt;1.3. Path&lt;/h2&gt;
&lt;p&gt;Path的中文名称有路径的意思，所以Path类就是路径类，C#把Path设置为工具类，路径的实例被区分为文件和目录了。以下是它的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static class Path
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;路径是描述文件和目录的位置的字符串，路径并不一定指向硬盘上，换句话说就是路径不一定是物理路径也有可能是虚拟路径或者网络路径。在不同的操作系统和平台上，路径有着不同的表现，所以Path类是对不同平台行为的统一抽象。具体的路径表示需要参照具体的系统表示形式。&lt;/p&gt;
&lt;p&gt;那么我们先来看看Path为我们提供了哪些内容，让我们一睹为快：&lt;/p&gt;
&lt;h3 id=&quot;131-字段&quot;&gt;1.3.1 字段&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static readonly char AltDirectorySeparatorChar;
public static readonly char DirectorySeparatorChar;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这两个是特定系统下的目录分隔符，其中AltDirectorySeparatorChar表示正斜线（/），DirectorySeparatorChar 表示反斜线（\）。为什么说是特定系统下的目录分隔符呢，因为Windows环境对两种分隔符都支持，但是Unix和类Unix系统只支持 / 作为目录分隔符。所以如果系统需要跨平台支持，则最好使用 &lt;strong&gt;AltDirectorySeparatorChar&lt;/strong&gt;作为目录分隔符来使用。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static readonly char PathSeparator;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个字段返回在环境变量中分隔路径字符串的平台特定的分隔符。Windows中返回一个分号（;）,其他平台可能会有不一样的表现。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static readonly char VolumeSeparatorChar;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个表示卷分隔符，是个很有意思的特定。对于Linux系统来说并没有类似于Windows一样的卷，所以该字段会返回一个/ ，而Windows中例如：&lt;/p&gt;
&lt;p&gt;D:\Temp\ 这个目录则会返回冒号（：）。&lt;/p&gt;
&lt;h3 id=&quot;132-方法&quot;&gt;1.3.2 方法&lt;/h3&gt;
&lt;p&gt;介绍完了字段，我们来看看Path给我们提供了哪些方法吧。&lt;/p&gt;
&lt;p&gt;先从最常用的说起吧：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string Combine (params string[] paths);
public static string Combine (string path1, string path2);
public static string Combine (string path1, string path2, string path3);
public static string Combine (string path1, string path2, string path3, string path4);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这一组方法用来拼接路径，除第一个参数外，每个参数都应当是相对于之前参数拼接结果路径的相对路径。如果后续出现了绝对路径，那之前计算出的路径信息则会全部抛弃，重新计算。&lt;/p&gt;
&lt;p&gt;以下是一个示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;string[] paths = {@&quot;d:\archives&quot;, &quot;2001&quot;, &quot;media&quot;, &quot;images&quot;};
string fullPath = Path.Combine(paths);
Console.WriteLine(fullPath);            

paths = new string[] {@&quot;d:\archives\&quot;, @&quot;2001\&quot;, &quot;media&quot;, &quot;images&quot;};
fullPath = Path.Combine(paths);
Console.WriteLine(fullPath); 

paths = new string[] {&quot;d:/archives/&quot;, &quot;2001/&quot;, &quot;media&quot;, &quot;images&quot;};
fullPath = Path.Combine(paths);
Console.WriteLine(fullPath); 
// Windows系统下的执行结果
//    d:\archives\2001\media\images
//    d:\archives\2001\media\images
//    d:/archives/2001/media\images
//
// 类Unix系统的执行结果
//    d:\archives/2001/media/images
//    d:\archives\/2001\/media/images
//    d:/archives/2001/media/images 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继续下一个方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string GetFullPath (string path, string basePath);
public static string GetFullPath (string path);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取相对路径的绝对路径，其中 path 是相对路径，basePath是绝对路径。如果指定basePath，则从basePath根据path计算全路径。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string GetRelativePath (string relativeTo, string path);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回从一个路径到另一个路径的相对路径，其中relativeTo是源路径，path为目标路径。其中relativeTo始终是目录，或者被认为是目录。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string GetDirectoryName (string path);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回路径path里的目录信息，例如：&quot;C:\Directory\SubDirectory\test.txt&quot; ，返回&quot;C:\Directory\SubDirectory&quot;，如果path是目录，则返回其上级目录的路径字符串。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string Join (string path1, string path2, string path3, string path4);
public static string Join (string path1, string path2, string path3);
public static string Join (params string[] paths);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与Combine方法差不多，不过Join方法是把所以参数均按照相对目录来拼接。&lt;/p&gt;
&lt;p&gt;说完了目录的一些操作，我们看看Path对文件路径提供了哪些支持：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string GetFileName (string path);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取路径里的文件名，例如说：“C:\mydir\myfile.ext”，返回结果就是“myfile.ext”，也就是说这个方法会返回携带后缀名的文件名。因为文件名本身就包含后缀名。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string GetFileNameWithoutExtension (string path);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回不带后缀名的文件名，与GetFileName类似，但是不好含文件格式后缀。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static bool HasExtension (string path);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;确定是否包含后缀名，也称格式名或者扩展名。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string GetExtension (string path);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回所代表的文件的后缀名。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public static string ChangeExtension (string path, string extension);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改文件的后缀名。&lt;/p&gt;
&lt;p&gt;这些是Path的常用方法，大家有个印象就好。&lt;/p&gt;
&lt;h2 id=&quot;13-filesysteminfo&quot;&gt;1.3 FileSystemInfo&lt;/h2&gt;
&lt;p&gt;文件系统信息，这是FileInfo和DirectoryInfo的两个类的基类，它定义了文件系统中文件和目录共有的一些属性和方法。接下来让我们简单看一看。&lt;/p&gt;
&lt;p&gt;先来看一下类的声明：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public abstract class FileSystemInfo : MarshalByRefObject, System.Runtime.Serialization.ISerializable
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一个abstract类，这个标记意味着这个类是一个抽象类，抽象类不能直接实例化，所以我们可能不会自己去直接实例化一个FileSystemInfo了。&lt;/p&gt;
&lt;p&gt;所以我们先略过FileSystemInfo的构造函数，直接看属性和方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public System.IO.FileAttributes Attributes { get; set; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取或者设置当前文件或目录的特性，这个特性是一个枚举，而且是一个位标记的枚举类型。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;21.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Archive&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;此文件标记为包含在增量备份操作中。 每当修改文件时，Windows 会设置该属性，并且在增量备份期间处理文件时，备份软件应进行清理该属性。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Compressed&lt;/td&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;td&gt;此文件是压缩文件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Device&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;留待将来使用。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Directory&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;此文件是一个目录。 &lt;code&gt;Directory&lt;/code&gt; 在 Windows、Linux 和 macOS 上受支持。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Encrypted&lt;/td&gt;
&lt;td&gt;16384&lt;/td&gt;
&lt;td&gt;此文件或目录已加密。 对于文件来说，表示文件中的所有数据都是加密的。 对于目录来说，表示新创建的文件和目录在默认情况下是加密的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Hidden&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;文件是隐藏的，因此没有包括在普通的目录列表中。 &lt;code&gt;Hidden&lt;/code&gt; 在 Windows、Linux 和 macOS 上受支持。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;IntegrityStream&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;文件或目录包括完整性支持数据。 在此值适用于文件时，文件中的所有数据流具有完整性支持。 此值将应用于一个目录时，所有新文件和子目录在该目录中和默认情况下应包括完整性支持。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;该文件是没有特殊属性的标准文件。 仅当其单独使用时，此特性才有效。 &lt;code&gt;Normal&lt;/code&gt; 在 Windows、Linux 和 macOS 上受支持。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;NoScrubData&lt;/td&gt;
&lt;td&gt;131072&lt;/td&gt;
&lt;td&gt;文件或目录从完整性扫描数据中排除。 此值将应用于一个目录时，所有新文件和子目录在该目录中和默认情况下应不包括数据完整性。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;NotContentIndexed&lt;/td&gt;
&lt;td&gt;8192&lt;/td&gt;
&lt;td&gt;将不会通过操作系统的内容索引服务来索引此文件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Offline&lt;/td&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;td&gt;此文件处于脱机状态， 文件数据不能立即供使用。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ReadOnly&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;文件为只读文件。 &lt;code&gt;ReadOnly&lt;/code&gt; 在 Windows、Linux 和 macOS 上受支持。 在 Linux 和 macOS 上，更改 &lt;code&gt;ReadOnly&lt;/code&gt; 标记是权限操作。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ReparsePoint&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;文件包含一个重新分析点，它是一个与文件或目录关联的用户定义的数据块。 &lt;code&gt;ReparsePoint&lt;/code&gt; 在 Windows、Linux 和 macOS 上受支持。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;SparseFile&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;此文件是稀疏文件。 稀疏文件一般是数据通常为零的大文件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;System&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;此文件是系统文件。 即，该文件是操作系统的一部分或者由操作系统以独占方式使用。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Temporary&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;文件是临时文件。 临时文件包含当执行应用程序时需要的，但当应用程序完成后不需要的数据。 文件系统尝试将所有数据保存在内存中，而不是将数据刷新回大容量存储，以便可以快速访问。 当临时文件不再需要时，应用程序应立即删除它。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;通过以下方式进行判断：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;FileSystemInfo fsi;
bool isXXX = (fsi.Attributes &amp;amp; FileAttributes.XXX) == FileAttributes.XXX; 
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public DateTime CreationTime { get; set; }
public DateTime CreationTimeUtc { get; set; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回文件/目录的创建时间，其中UTC指协调世界时 。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public string Extension { get; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取文件的文件后缀名（扩展名），带点号（.）。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public virtual string FullName { get; }
public abstract string Name { get; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;都是返回文件或目录的名称，不过FullName返回的是全路径名称，Name只返回了文件名。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public DateTime LastAccessTime { get; set; }
public DateTime LastAccessTimeUtc { get; set; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取或设置文件最后一次访问的时间，该属性的返回值并不是严格意义上的最后一次访问时间，因为部分系统不会及时更新。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;public DateTime LastWriteTime { get; set; }
public DateTime LastWriteTimeUtc { get; set; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后一次修改时间，可以自己设置或修改，类似与LastAccessTime，可能不是正确的值。&lt;/p&gt;

&lt;p&gt;到目前为止，常用的文件API已经介绍完毕。接下来将为大家演示各种流的使用，以及各种流的操作场景。&lt;/p&gt;
&lt;blockquote readability=&quot;2.1052631578947&quot;&gt;
&lt;p&gt;更多内容烦请关注&lt;a href=&quot;https://blogs.attachie.club&quot;&gt;我的博客《高先生小屋》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1266612/202005/1266612-20200502231628047-1172999562.png&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 15:16:00 +0000</pubDate>
<dc:creator>月影西下</dc:creator>
<og:description>本篇继续前两篇内容，跟大家介绍一下Path类以及FileSystemInfo这个类的主要方法和属性。 上文提到，在《C 基础知识系列 IO篇》之文件相关的内容完结之后，会带领大家开发一个小工具 快速检</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/c7jie/p/12820192.html</dc:identifier>
</item>
<item>
<title>判断两个对象的内容是否相等 - codingOrange</title>
<link>http://www.cnblogs.com/zhangguicheng/p/12820148.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangguicheng/p/12820148.html</guid>
<description>&lt;p&gt;由于在做&lt;a href=&quot;https://github.com/happyCoding1024/keyboardnavigation&quot;&gt;键盘导航组件&lt;/a&gt;的项目时，有这样一个需求，当用户传入按键字母和网址的映射时，如果和 localStorage 中的不一样那么就用 localStorage 中存储的，这个时候就需要比较两个对象的内容是否相等，但是在 JS 中对象是一种引用类型.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;obj1 = {
  a: 1
}
obj2 = {
  a: 1
}
console.log(obj1 === obj2) // false
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即使两个对象的内容完全相同，因为它们的地址不同，因此 &lt;code&gt;obj1 === obj2&lt;/code&gt; 会返回 fasle。&lt;/p&gt;
&lt;p&gt;所以自己根据深拷贝时递归的思想写了一个比较两个对象之间内容是否相同的函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function compareObject (obj1, obj2) {
  // 递归终止条件，当 obj1 或 obj2 不是对象时，此时就可以进行判断了
  if (typeof obj1 !== 'object' || typeof obj2 !== 'object') {
    if (obj1 === obj2) {
      return true
    } else if (obj1 !== obj2) {
      return false
    }
  }
  // 获取对象的自由属性组成的数组
  const obj1PropsArr = Object.getOwnPropertyNames(obj1)
  const obj2PropsArr = Object.getOwnPropertyNames(obj2) 
  // 如果数组的长度不相等，那么说明对象属性的个数都不同，返回 false
  if (obj1PropsArr.length !== obj2PropsArr.length) {
    return false
  }
  // 记录当前 compareObject 的返回值，默认是 true
  let status = true
  for (key of obj1PropsArr) {
    status = compareObject(obj1[key], obj2[key])
    // 关键代码，当 status 为 false 时下面就不用再进行判断了，说明两个对象的内容并不相同
    // 如果没有下面这条语句，那么只要对象底层的内容是相同的那么就返回 true
    if (!status) {
      break
    }
  }
  // 每次 compareObject 执行的返回结果
  return status
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 判断两个对象的内容相等
const obj1 = {
  a: 1,
  b: {
    c: 2,
    d: {
      e: 4
    }
  }
}
const obj2 = {
  a: 1,
  b: {
    c: 2,
    d: {
      e: 4
    }
  }
}
console.log(compareObject(obj1, obj2)) // true

// 判断两个对象的内容不相等
const obj1 = {
  a: 1,
  b: {
    c: 2,
    d: {
      e: 4
    }
  }
}
const obj2 = {
  a: 1,
  b: {
    c: 2,
    d: {
      e: 5
    }
  }
}
console.log(compareObject(obj1, obj2)) // false
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来再来强调一下 &lt;code&gt;compareObject&lt;/code&gt; 函数中第 23 行这句关键代码，如果没有这条语句那么最后的返回结果只会取决于两个对象最底层属性（最后一次）的比较结果。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;if (!status) {
  break
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如，我将两个对象变为下面这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const obj1 = {
  a: 1,
  b: {
    c: 3, // 和 obj2 不相等
    d: {
      e: 4
    }
  }
}
const obj2 = {
  a: 1,
  b: {
    c: 2,
    d: {
      e: 4
    }
  }
}
console.log(compareObject(obj1, obj2)) // true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到最后的返回结果是 true，因为最后的一次比较是 e 属性，它们的值是相等的。&lt;/p&gt;
&lt;p&gt;上面这样的写法应该还有一些情况没有考虑到，对于我的项目需求而言已经足够了，如果哪位小伙伴发现了希望可以提出来，然后再将它改进一下，非常感谢。&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 15:05:00 +0000</pubDate>
<dc:creator>codingOrange</dc:creator>
<og:description>由于在做 &amp;quot;键盘导航组件&amp;quot; 的项目时，有这样一个需求，当用户传入按键字母和网址的映射时，如果和 localStorage 中的不一样那么就用 localStorage 中存储的，这</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhangguicheng/p/12820148.html</dc:identifier>
</item>
<item>
<title>计算机组成及系统结构-第六章 中央处理器 - 方知有</title>
<link>http://www.cnblogs.com/fangzhiyou/p/12779677.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fangzhiyou/p/12779677.html</guid>
<description>&lt;h2 id=&quot;中央处理器&quot;&gt;中央处理器&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426135258044-1521772882.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426135409461-280526265.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、控制器的组成&quot;&gt;一、控制器的组成&lt;/h3&gt;
&lt;hr/&gt;&lt;h4 id=&quot;1控制器的功能&quot;&gt;1.控制器的功能&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426135935955-36120218.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426135955303-258429245.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426140149849-1558444385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2控制器的组成&quot;&gt;2.控制器的组成&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426140619266-352148981.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426140637507-1035177100.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426140648709-1384108265.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426140657920-1344173533.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426140709189-1639790943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;3指令执行过程运算器与控制器配合&quot;&gt;3.指令执行过程(运算器与控制器配合)&lt;/h4&gt;
&lt;h5 id=&quot;ⅰ控制器的基本电路&quot;&gt;ⅰ控制器的基本电路&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426141337089-901410921.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426141348041-1394208024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅱ指令执行过程举例&quot;&gt;ⅱ指令执行过程举例&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;一条加法指令的执行过程&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426141556580-1478884786.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426141730870-255865765.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426141753788-1274304427.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;条件转移指令的执行过程&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426141919915-872427141.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426142010267-1302360643.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;ⅲ其他指令&quot;&gt;ⅲ其他指令&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426142100928-2067340951.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;二、微程序控制计算机的基本工作原理&quot;&gt;二、微程序控制计算机的基本工作原理&lt;/h3&gt;
&lt;hr/&gt;&lt;h4 id=&quot;1基本概念&quot;&gt;1.基本概念&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426142659295-890663910.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426142707222-54726680.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426145354352-1063612000.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426145522801-995719338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2实现微程序控制的基本原理&quot;&gt;2.实现微程序控制的基本原理&lt;/h4&gt;
&lt;h5 id=&quot;ⅰ控制信号&quot;&gt;ⅰ控制信号&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150036491-1884601761.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150058337-65456166.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150405005-1898556221.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150500113-2011985196.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150520085-1379419219.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150700133-1788537337.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150700471-1721356303.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150818423-2017116366.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426150917221-125041323.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426151000507-1079072482.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426151217377-923472608.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426151407697-1722973389.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426151303567-1216441657.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426151600449-448240482.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426152229607-1972572935.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426152507162-110036194.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅱ微程序控制器&quot;&gt;ⅱ微程序控制器&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426152658648-1241711714.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426152746687-1898237728.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅲ时序信号及工作脉冲的形成&quot;&gt;ⅲ时序信号及工作脉冲的形成&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426154033687-1608999900.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426154056993-1791996528.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426154154266-1274152861.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426154316045-1914524190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅳ电路配合中的常见问题&quot;&gt;ⅳ电路配合中的常见问题&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;电路延迟引起的波形畸变&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426154823538-1516934731.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426154836370-1244228599.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426154851057-1622561409.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机器周期的确定&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426155132770-1229441035.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时钟脉冲CLK和工作脉冲CP的标准性&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426155302829-1277728873.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;ⅴ工作过程简单的总结&quot;&gt;ⅴ工作过程简单的总结&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426155359737-1346863520.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426155522226-1726533330.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426160050507-791930235.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;三、微程序设计技术&quot;&gt;三、微程序设计技术&lt;/h3&gt;
&lt;hr/&gt;&lt;h4 id=&quot;1微指令控制字段的编译法&quot;&gt;1.微指令控制字段的编译法&lt;/h4&gt;
&lt;h5 id=&quot;ⅰ直接控制法&quot;&gt;ⅰ直接控制法&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426160740549-1703573345.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅱ字段直接编译法&quot;&gt;ⅱ字段直接编译法&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426160802855-1814679049.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426160827749-1022791725.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅲ字段间编译法&quot;&gt;ⅲ字段间编译法&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426160903428-37424642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅳ常数源字段e&quot;&gt;ⅳ常数源字段E&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426160922987-1748436215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2微程序流的控制&quot;&gt;2.微程序流的控制&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426161108066-1446239602.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅰ增量与下址字段结合产生后继微指令地址的方法&quot;&gt;ⅰ增量与下址字段结合产生后继微指令地址的方法&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426161313342-953901596.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426161735145-2000235331.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162000460-743984213.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162051378-462069692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅱ多路转移方式&quot;&gt;ⅱ多路转移方式&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162253234-481331589.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162304978-1484407133.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅲ微中断&quot;&gt;ⅲ微中断&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162357419-1021983071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;3微指令格式&quot;&gt;3.微指令格式&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162614614-1264304233.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅰ水平型微指令&quot;&gt;ⅰ水平型微指令&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162632943-822931273.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅱ垂直型微指令&quot;&gt;ⅱ垂直型微指令&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162644898-751175882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅲ二者比较&quot;&gt;ⅲ二者比较&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426162655350-1390829595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;4微程序控制存储器和动态微程序设计&quot;&gt;4.微程序控制存储器和动态微程序设计&lt;/h4&gt;
&lt;h5 id=&quot;ⅰ微程序控制存储器&quot;&gt;ⅰ微程序控制存储器&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426163106500-1741011529.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅱ动态微程序设计&quot;&gt;ⅱ动态微程序设计&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426163126781-386057698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅲ控制存储器的操作&quot;&gt;ⅲ控制存储器的操作&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426163152828-99345632.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426163316061-1334054019.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426163409548-946117354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅳ豪微程序设计的基本概念&quot;&gt;ⅳ豪微程序设计的基本概念&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426164009899-1882764059.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426164024211-1482747095.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;5微程序设计语言&quot;&gt;5.微程序设计语言&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202004/1520604-20200426163540575-1633781589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;四、硬布线控制的计算机&quot;&gt;四、硬布线控制的计算机&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502203051601-937088165.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;1时序和节拍&quot;&gt;1.时序和节拍&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502203501000-758993127.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502203816038-52967531.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502204059870-171587358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2操作控制信号的产生&quot;&gt;2.操作控制信号的产生&lt;/h4&gt;
&lt;h5 id=&quot;ⅰ操作码译码器&quot;&gt;ⅰ操作码译码器&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502204756501-751510317.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;ⅱ操作控制信号的产生&quot;&gt;ⅱ操作控制信号的产生&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502205020290-1160663624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;加法指令的控制逻辑表达式&lt;/strong&gt;：&lt;strong&gt;取指周期&lt;/strong&gt;(&lt;strong&gt;cy1&lt;/strong&gt;)&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502205419158-1429048149.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加法指令的控制逻辑表达式&lt;/strong&gt;：&lt;strong&gt;计算地址周期&lt;/strong&gt;(&lt;strong&gt;cy2&lt;/strong&gt;)&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502205503469-114821399.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对表达式综合分析1&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502205523109-1479373335.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对表达式综合分析2&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502210428076-1542038591.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对表达式综合分析3&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502210438233-286159070.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对表达式综合分析4&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502210503308-445356313.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502210523590-523691877.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;3硬布线控制器的组成&quot;&gt;3.硬布线控制器的组成&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502210729590-1146446298.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502210744915-232060348.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502210951582-349930044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;4硬布线控制逻辑设计中的若干问题&quot;&gt;4.硬布线控制逻辑设计中的若干问题&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211015353-1014355831.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211023621-1500682333.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211036842-1958526330.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211046954-966711241.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211202705-1076268941.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;5控制器的控制方式&quot;&gt;5.控制器的控制方式&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211220251-1223397022.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211232273-2091682109.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211240824-1254617399.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211255825-1301676846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;五、流水线工作原理&quot;&gt;五、流水线工作原理&lt;/h3&gt;
&lt;hr/&gt;&lt;h4 id=&quot;1流水线基本工作原理&quot;&gt;1.流水线基本工作原理&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211623939-1868068911.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211710348-284643670.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502211838460-1069810212.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502212131150-963511784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2流水线中的相关问题&quot;&gt;2.流水线中的相关问题&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502212729740-1904681418.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502212904057-1883780707.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;3程序转移对流水线的影响&quot;&gt;3.程序转移对流水线的影响&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502213013996-2138807385.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502213056595-403538212.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502213129395-1599773472.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502213242828-1744080852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;4指令预取和乱序执行&quot;&gt;4.指令预取和乱序执行&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502213258427-1845936105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;六、cpu举例&quot;&gt;六、CPU举例&lt;/h3&gt;
&lt;h3 id=&quot;七、计算机供电&quot;&gt;七、计算机供电&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502213329278-166585789.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1520604/202005/1520604-20200502213620981-1065031626.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考-《计算机组成于结构》-清华大学 王爱英&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 May 2020 13:37:00 +0000</pubDate>
<dc:creator>方知有</dc:creator>
<og:description>中央处理器 一、控制器的组成 1.控制器的功能 2.控制器的组成 3.指令执行过程(运算器与控制器配合) ⅰ控制器的基本电路 ⅱ指令执行过程举例 一条加法指令的执行过程 ： 条件转移指令的执行过程 ：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/fangzhiyou/p/12779677.html</dc:identifier>
</item>
</channel>
</rss>