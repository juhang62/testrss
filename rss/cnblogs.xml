<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>.NETCore 新型 ORM 功能介绍 - nicye</title>
<link>http://www.cnblogs.com/kellynic/p/10645049.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kellynic/p/10645049.html</guid>
<description>&lt;p&gt;FreeSql 是一个功能强大的 .NETStandard 库，用于对象关系映射程序(O/RM)，支持 .NETCore 2.1+ 或 .NETFramework 4.6.1+。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;IFreeSql fsql = new FreeSql.FreeSqlBuilder()
    .UseConnectionString(FreeSql.DataType.Sqlite, 
        @&quot;Data Source=|DataDirectory|/test.db;Pooling=true;Max Pool Size=10&quot;)
    .UseAutoSyncStructure(true) //自动同步实体结构到数据库
    .Build();&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;查询&quot;&gt;查询&lt;/h2&gt;
&lt;p&gt;1、查询一条&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Select&amp;lt;Xxx&amp;gt;.Where(a =&amp;gt; a.Id == 1).First();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、分页：第1页，每页20条&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Select&amp;lt;Xxx&amp;gt;.Page(1, 20).ToList();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;细节说明：SqlServer 2012 以前的版本，使用 row_number 分页；SqlServer 2012+ 版本，使用最新的 fetch next rows 分页；&lt;/p&gt;
&lt;p&gt;3、IN&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Select&amp;lt;Xxx&amp;gt;.Where(a =&amp;gt; new { 1,2,3 }.Contains(a.Id)).ToList();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、联表&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Select&amp;lt;Xxx&amp;gt;.LeftJoin&amp;lt;Yyy&amp;gt;((a, b) =&amp;gt; a.YyyId == b.Id).ToList();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、Exists子表&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Select&amp;lt;Xxx&amp;gt;.Where(a =&amp;gt; fsql.Select&amp;lt;Yyy&amp;gt;(b =&amp;gt; b.Id == a.YyyId).Any()).ToList();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、GroupBy &amp;amp; Having&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Select&amp;lt;Xxx&amp;gt;.GroupBy(a =&amp;gt; new { a.CategoryId }).Having(a =&amp;gt; a.Count &amp;gt; 2).ToList(a =&amp;gt; new { a.Key, a.Count() });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7、指定字段查询&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Select&amp;lt;Xxx&amp;gt;.Limit(10).ToList(a =&amp;gt; a.Id);

fsql.Select&amp;lt;Xxx&amp;gt;.Limit(10).ToList(a =&amp;gt; new { a.Id, a.Name });

fsql.Select&amp;lt;Xxx&amp;gt;.Limit(10).ToList(a =&amp;gt; new Dto());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8、执行SQL返回实体&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Ado.Query&amp;lt;Xxx&amp;gt;(&quot;select * from xxx&quot;);

fsql.Ado.Query&amp;lt;(int, string, string)&amp;gt;(&quot;select * from xxx&quot;);

fsql.Ado.Query&amp;lt;dynamic&amp;gt;(&quot;select * from xxx&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;插入&quot;&gt;插入&lt;/h2&gt;
&lt;p&gt;1、单条&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、单条，返回自增值&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).ExecuteIdentity();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、单条，返回插入的行（SqlServer 的 output 特性）&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).ExecuteInserted();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、批量&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(数组).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、批量，返回插入的行（SqlServer 的 output 特性）&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(数组).ExecuteInserted();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、指定列&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).InsertColumns(a =&amp;gt; a.Title).ExecuteAffrows();

fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).InsertColumns(a =&amp;gt; new { a.Id, a.Title}).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7、忽略列&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).IgnoreColumns(a =&amp;gt; a.Title).ExecuteAffrows();

fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).IgnoreColumns(a =&amp;gt; new { a.Id, a.Title}).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8、事务&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Insert&amp;lt;Xxx&amp;gt;().AppendData(new Xxx()).WithTransaction(事务对象).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;更新&quot;&gt;更新&lt;/h2&gt;
&lt;p&gt;1、指定列&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Update&amp;lt;Xxx&amp;gt;(1).Set(a =&amp;gt; a.CreateTime, DateTime.Now).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、累加，set clicks = clicks + 1&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Update&amp;lt;Xxx&amp;gt;(1).Set(a =&amp;gt; a.Clicks + 1).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、保存&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Update&amp;lt;Xxx&amp;gt;().SetSource(单个实体).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、批量保存&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Update&amp;lt;Xxx&amp;gt;().SetSource(数组).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、忽略列&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Update&amp;lt;Xxx&amp;gt;().SetSource(数组).IgnoreColumns(a =&amp;gt; new { a.Clicks, a.CreateTime }).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、更新条件&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Update&amp;lt;Xxx&amp;gt;().SetSource(数组).Where(a =&amp;gt; a.Clicks &amp;gt; 100).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7、事务&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Update&amp;lt;Xxx&amp;gt;(1).Set(a =&amp;gt; a.Clicks + 1).WithTransaction(事务对象).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;删除&quot;&gt;删除&lt;/h2&gt;
&lt;p&gt;1、dywhere&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;主键值&lt;/li&gt;
&lt;li&gt;new[] { 主键值1, 主键值2 }&lt;/li&gt;
&lt;li&gt;Xxx对象&lt;/li&gt;
&lt;li&gt;new[] { Xxx对象1, Xxx对象2 }&lt;/li&gt;
&lt;li&gt;new { id = 1 }&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Delete&amp;lt;Xxx&amp;gt;(new[] { 1, 2 }).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (`Id` = 1 OR `Id` = 2)

fsql.Delete&amp;lt;Xxx&amp;gt;(new Xxx { Id = 1, Title = &quot;test&quot; }).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (`Id` = 1)

fsql.Delete&amp;lt;Xxx&amp;gt;(new[] { new Xxx { Id = 1, Title = &quot;test&quot; }, new Xxx { Id = 2, Title = &quot;test&quot; } }).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (`Id` = 1 OR `Id` = 2)

fsql.Delete&amp;lt;Xxx&amp;gt;(new { id = 1 }).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (`Id` = 1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、条件&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Delete&amp;lt;Xxx&amp;gt;().Where(a =&amp;gt; a.Id == 1).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (`Id` = 1)

fsql.Delete&amp;lt;Xxx&amp;gt;().Where(&quot;id = ?id&quot;, new { id = 1 }).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (id = ?id)

var item = new Xxx { Id = 1, Title = &quot;newtitle&quot; };
var t7 = fsql.Delete&amp;lt;Xxx&amp;gt;().Where(item).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (`Id` = 1)

var items = new List&amp;lt;Xxx&amp;gt;();
for (var a = 0; a &amp;lt; 10; a++) items.Add(new Xxx { Id = a + 1, Title = $&quot;newtitle{a}&quot;, Clicks = a * 100 });
fsql.Delete&amp;lt;Xxx&amp;gt;().Where(items).ExecuteAffrows();
//DELETE FROM `xxx` WHERE (`Id` IN (1,2,3,4,5,6,7,8,9,10))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、事务&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Delete&amp;lt;Xxx&amp;gt;().Where(a =&amp;gt; a.Id == 1).WithTransaction(事务对象).ExecuteAffrows();&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;表达式&quot;&gt;表达式&lt;/h2&gt;
&lt;p&gt;支持功能丰富的表达式函数解析，方便程序员在不了解数据库函数的情况下编写代码。这是 FreeSql 非常特色的功能之一，深入细化函数解析尽量做到满意，所支持的类型基本都可以使用对应的表达式函数，例如 日期、字符串、IN查询、数组（PostgreSQL的数组）、字典（PostgreSQL HStore)等等。&lt;/p&gt;
&lt;p&gt;1、查找今天创建的数据&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Delete&amp;lt;Xxx&amp;gt;().Where(a =&amp;gt; a.CreateTime.Date == DateTime.Now.Date).ToList();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、SqlServer 下随机获取记录&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.Delete&amp;lt;Xxx&amp;gt;().OrderBy(a =&amp;gt; Guid.NewGuid()).Limit(1).ToSql();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、表达式函数全览&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;10&quot;&gt;&lt;td&gt;a ? b : c&lt;/td&gt;
&lt;td&gt;case when a then b else c end&lt;/td&gt;
&lt;td&gt;case when a then b else c end&lt;/td&gt;
&lt;td&gt;case when a then b else c end&lt;/td&gt;
&lt;td&gt;case when a then b else c end&lt;/td&gt;
&lt;td&gt;a成立时取b值，否则取c值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a ?? b&lt;/td&gt;
&lt;td&gt;ifnull(a, b)&lt;/td&gt;
&lt;td&gt;isnull(a, b)&lt;/td&gt;
&lt;td&gt;coalesce(a, b)&lt;/td&gt;
&lt;td&gt;nvl(a, b)&lt;/td&gt;
&lt;td&gt;当a为null时，取b值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;数字 + 数字&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;数字相加&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;数字 + 字符串&lt;/td&gt;
&lt;td&gt;concat(a, b)&lt;/td&gt;
&lt;td&gt;cast(a as varchar) + cast(b as varchar)&lt;/td&gt;
&lt;td&gt;case(a as varchar) + b&lt;/td&gt;
&lt;td&gt;a+b&lt;/td&gt;
&lt;td&gt;字符串相加，a或b任意一个为字符串时&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;减&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a * b&lt;/td&gt;
&lt;td&gt;a * b&lt;/td&gt;
&lt;td&gt;a * b&lt;/td&gt;
&lt;td&gt;a * b&lt;/td&gt;
&lt;td&gt;a * b&lt;/td&gt;
&lt;td&gt;乘&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a / b&lt;/td&gt;
&lt;td&gt;a / b&lt;/td&gt;
&lt;td&gt;a / b&lt;/td&gt;
&lt;td&gt;a / b&lt;/td&gt;
&lt;td&gt;a / b&lt;/td&gt;
&lt;td&gt;除&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a % b&lt;/td&gt;
&lt;td&gt;a % b&lt;/td&gt;
&lt;td&gt;a % b&lt;/td&gt;
&lt;td&gt;a % b&lt;/td&gt;
&lt;td&gt;mod(a,b)&lt;/td&gt;
&lt;td&gt;模&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;
&lt;p&gt;等等...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5、数组&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.Length&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;case when a is null then 0 else array_length(a,1) end&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;数组长度&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;常量数组.Length&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;array_length(array[常量数组元素逗号分割],1)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;数组长度&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.Any()&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;case when a is null then 0 else array_length(a,1) end &amp;gt; 0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;数组是否为空&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;8&quot;&gt;&lt;td&gt;常量数组.Contains(b)&lt;/td&gt;
&lt;td&gt;b in (常量数组元素逗号分割)&lt;/td&gt;
&lt;td&gt;b in (常量数组元素逗号分割)&lt;/td&gt;
&lt;td&gt;b in (常量数组元素逗号分割)&lt;/td&gt;
&lt;td&gt;b in (常量数组元素逗号分割)&lt;/td&gt;
&lt;td&gt;IN查询&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;a.Contains(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a @&amp;gt; array[b]&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a数组是否包含b元素&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Concat(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;数组相连&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.Count()&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;同 Length&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;数组长度&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;一个细节证明 FreeSql 匠心制作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通用的 in 查询 select.Where(a =&amp;gt; new []{ 1,2,3 }.Contains(a.xxx))&lt;/p&gt;
&lt;p&gt;假设 xxxs 是 pgsql 的数组字段类型，其实会与上面的 in 查询起冲突，FreeSql 解决了这个矛盾 select.Where(a =&amp;gt; a.xxxs.Contains(1))&lt;/p&gt;
&lt;p&gt;6、字典 Dictionary&amp;lt;string, string&amp;gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.Count&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;case when a is null then 0 else array_length(akeys(a),1) end&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;字典长度&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;a.Keys&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;akeys(a)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;返回字典所有key数组&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;a.Values&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;avals(a)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;返回字典所有value数组&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Contains(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a @&amp;gt; b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;字典是否包含b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.ContainsKey(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a? b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;字典是否包含key&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Concat(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;字典相连&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.Count()&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;同 Count&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;字典长度&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;7、JSON JToken/JObject/JArray&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.Count&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;jsonb_array_length(coalesce(a, '[]))&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;json数组类型的长度&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.Any()&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;jsonb_array_length(coalesce(a, '[])) &amp;gt; 0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;json数组类型，是否为空&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.Contains(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;coalesce(a, '{}') @&amp;gt; b::jsonb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;json中是否包含b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.ContainsKey(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;coalesce(a, '{}') ? b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;json中是否包含键b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.Concat(b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;coalesce(a, '{}') + b::jsonb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;连接两个json&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Parse(a)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a::jsonb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;转化字符串为json类型&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;8、字符串&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;string.Empty&lt;/td&gt;
&lt;td&gt;''&lt;/td&gt;
&lt;td&gt;''&lt;/td&gt;
&lt;td&gt;''&lt;/td&gt;
&lt;td&gt;''&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;string.IsNullOrEmpty(a)&lt;/td&gt;
&lt;td&gt;(a is null or a = '')&lt;/td&gt;
&lt;td&gt;(a is null or a = '')&lt;/td&gt;
&lt;td&gt;(a is null or a = '')&lt;/td&gt;
&lt;td&gt;(a is null or a = '')&lt;/td&gt;
&lt;td&gt;(a is null or a = '')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;a.CompareTo(b)&lt;/td&gt;
&lt;td&gt;strcmp(a, b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;case when a = b then 0 when a &amp;gt; b then 1 else -1 end&lt;/td&gt;
&lt;td&gt;case when a = b then 0 when a &amp;gt; b then 1 else -1 end&lt;/td&gt;
&lt;td&gt;case when a = b then 0 when a &amp;gt; b then 1 else -1 end&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Contains('b')&lt;/td&gt;
&lt;td&gt;a like '%b%'&lt;/td&gt;
&lt;td&gt;a like '%b%'&lt;/td&gt;
&lt;td&gt;a ilike'%b%'&lt;/td&gt;
&lt;td&gt;a like '%b%'&lt;/td&gt;
&lt;td&gt;a like '%b%'&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.EndsWith('b')&lt;/td&gt;
&lt;td&gt;a like '%b'&lt;/td&gt;
&lt;td&gt;a like '%b'&lt;/td&gt;
&lt;td&gt;a ilike'%b'&lt;/td&gt;
&lt;td&gt;a like '%b'&lt;/td&gt;
&lt;td&gt;a like '%b'&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.IndexOf(b)&lt;/td&gt;
&lt;td&gt;locate(a, b) - 1&lt;/td&gt;
&lt;td&gt;locate(a, b) - 1&lt;/td&gt;
&lt;td&gt;strpos(a, b) - 1&lt;/td&gt;
&lt;td&gt;instr(a, b, 1, 1) - 1&lt;/td&gt;
&lt;td&gt;instr(a, b) - 1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.Length&lt;/td&gt;
&lt;td&gt;char_length(a)&lt;/td&gt;
&lt;td&gt;len(a)&lt;/td&gt;
&lt;td&gt;char_length(a)&lt;/td&gt;
&lt;td&gt;length(a)&lt;/td&gt;
&lt;td&gt;length(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.PadLeft(b, c)&lt;/td&gt;
&lt;td&gt;lpad(a, b, c)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;lpad(a, b, c)&lt;/td&gt;
&lt;td&gt;lpad(a, b, c)&lt;/td&gt;
&lt;td&gt;lpad(a, b, c)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.PadRight(b, c)&lt;/td&gt;
&lt;td&gt;rpad(a, b, c)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;rpad(a, b, c)&lt;/td&gt;
&lt;td&gt;rpad(a, b, c)&lt;/td&gt;
&lt;td&gt;rpad(a, b, c)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Replace(b, c)&lt;/td&gt;
&lt;td&gt;replace(a, b, c)&lt;/td&gt;
&lt;td&gt;replace(a, b, c)&lt;/td&gt;
&lt;td&gt;replace(a, b, c)&lt;/td&gt;
&lt;td&gt;replace(a, b, c)&lt;/td&gt;
&lt;td&gt;replace(a, b, c)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.StartsWith('b')&lt;/td&gt;
&lt;td&gt;a like 'b%'&lt;/td&gt;
&lt;td&gt;a like 'b%'&lt;/td&gt;
&lt;td&gt;a ilike'b%'&lt;/td&gt;
&lt;td&gt;a like 'b%'&lt;/td&gt;
&lt;td&gt;a like 'b%'&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Substring(b, c)&lt;/td&gt;
&lt;td&gt;substr(a, b, c + 1)&lt;/td&gt;
&lt;td&gt;substring(a, b, c + 1)&lt;/td&gt;
&lt;td&gt;substr(a, b, c + 1)&lt;/td&gt;
&lt;td&gt;substr(a, b, c + 1)&lt;/td&gt;
&lt;td&gt;substr(a, b, c + 1)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.ToLower&lt;/td&gt;
&lt;td&gt;lower(a)&lt;/td&gt;
&lt;td&gt;lower(a)&lt;/td&gt;
&lt;td&gt;lower(a)&lt;/td&gt;
&lt;td&gt;lower(a)&lt;/td&gt;
&lt;td&gt;lower(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.ToUpper&lt;/td&gt;
&lt;td&gt;upper(a)&lt;/td&gt;
&lt;td&gt;upper(a)&lt;/td&gt;
&lt;td&gt;upper(a)&lt;/td&gt;
&lt;td&gt;upper(a)&lt;/td&gt;
&lt;td&gt;upper(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.Trim&lt;/td&gt;
&lt;td&gt;trim(a)&lt;/td&gt;
&lt;td&gt;trim(a)&lt;/td&gt;
&lt;td&gt;trim(a)&lt;/td&gt;
&lt;td&gt;trim(a)&lt;/td&gt;
&lt;td&gt;trim(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.TrimEnd&lt;/td&gt;
&lt;td&gt;rtrim(a)&lt;/td&gt;
&lt;td&gt;rtrim(a)&lt;/td&gt;
&lt;td&gt;rtrim(a)&lt;/td&gt;
&lt;td&gt;rtrim(a)&lt;/td&gt;
&lt;td&gt;rtrim(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.TrimStart&lt;/td&gt;
&lt;td&gt;ltrim(a)&lt;/td&gt;
&lt;td&gt;ltrim(a)&lt;/td&gt;
&lt;td&gt;ltrim(a)&lt;/td&gt;
&lt;td&gt;ltrim(a)&lt;/td&gt;
&lt;td&gt;ltrim(a)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用字符串函数可能会出现性能瓶颈，虽然不推荐使用，但是作为功能库这也是不可缺少的功能之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;9、日期&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;91&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;DateTime.Now&lt;/td&gt;
&lt;td&gt;now()&lt;/td&gt;
&lt;td&gt;getdate()&lt;/td&gt;
&lt;td&gt;current_timestamp&lt;/td&gt;
&lt;td&gt;systimestamp&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;DateTime.UtcNow&lt;/td&gt;
&lt;td&gt;utc_timestamp()&lt;/td&gt;
&lt;td&gt;getutcdate()&lt;/td&gt;
&lt;td&gt;(current_timestamp at time zone 'UTC')&lt;/td&gt;
&lt;td&gt;sys_extract_utc(systimestamp)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;DateTime.Today&lt;/td&gt;
&lt;td&gt;curdate&lt;/td&gt;
&lt;td&gt;convert(char(10),getdate(),120)&lt;/td&gt;
&lt;td&gt;current_date&lt;/td&gt;
&lt;td&gt;trunc(systimestamp)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt;DateTime.MaxValue&lt;/td&gt;
&lt;td&gt;cast('9999/12/31 23:59:59' as datetime)&lt;/td&gt;
&lt;td&gt;'9999/12/31 23:59:59'&lt;/td&gt;
&lt;td&gt;'9999/12/31 23:59:59'::timestamp&lt;/td&gt;
&lt;td&gt;to_timestamp('9999-12-31 23:59:59','YYYY-MM-DD HH24:MI:SS.FF6')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;7&quot;&gt;&lt;td&gt;DateTime.MinValue&lt;/td&gt;
&lt;td&gt;cast('0001/1/1 0:00:00' as datetime)&lt;/td&gt;
&lt;td&gt;'1753/1/1 0:00:00'&lt;/td&gt;
&lt;td&gt;'0001/1/1 0:00:00'::timestamp&lt;/td&gt;
&lt;td&gt;to_timestamp('0001-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS.FF6')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;DateTime.Compare(a, b)&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;extract(epoch from a::timestamp-b::timestamp)&lt;/td&gt;
&lt;td&gt;extract(day from (a-b))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;16&quot;&gt;&lt;td&gt;DateTime.DaysInMonth(a, b)&lt;/td&gt;
&lt;td&gt;dayofmonth(last_day(concat(a, '-', b, '-1')))&lt;/td&gt;
&lt;td&gt;datepart(day, dateadd(day, -1, dateadd(month, 1, cast(a as varchar) + '-' + cast(b as varchar) + '-1')))&lt;/td&gt;
&lt;td&gt;extract(day from (a&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;DateTime.Equals(a, b)&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;11&quot;&gt;&lt;td&gt;DateTime.IsLeapYear(a)&lt;/td&gt;
&lt;td&gt;a%4=0 and a%100&amp;lt;&amp;gt;0 or a%400=0&lt;/td&gt;
&lt;td&gt;a%4=0 and a%100&amp;lt;&amp;gt;0 or a%400=0&lt;/td&gt;
&lt;td&gt;a%4=0 and a%100&amp;lt;&amp;gt;0 or a%400=0&lt;/td&gt;
&lt;td&gt;mod(a,4)=0 AND mod(a,100)&amp;lt;&amp;gt;0 OR mod(a,400)=0&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;DateTime.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as datetime)&lt;/td&gt;
&lt;td&gt;cast(a as datetime)&lt;/td&gt;
&lt;td&gt;a::timestamp&lt;/td&gt;
&lt;td&gt;to_timestamp(a,'YYYY-MM-DD HH24:MI:SS.FF6')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;7&quot;&gt;&lt;td&gt;a.Add(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b microsecond)&lt;/td&gt;
&lt;td&gt;dateadd(millisecond, b / 1000, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.AddDays(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b day)&lt;/td&gt;
&lt;td&gt;dateadd(day, b, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.AddHours(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b hour)&lt;/td&gt;
&lt;td&gt;dateadd(hour, b, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt;a.AddMilliseconds(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b*1000 microsecond)&lt;/td&gt;
&lt;td&gt;dateadd(millisecond, b, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.AddMinutes(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b minute)&lt;/td&gt;
&lt;td&gt;dateadd(minute, b, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.AddMonths(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b month)&lt;/td&gt;
&lt;td&gt;dateadd(month, b, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.AddSeconds(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b second)&lt;/td&gt;
&lt;td&gt;dateadd(second, b, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt;a.AddTicks(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b/10 microsecond)&lt;/td&gt;
&lt;td&gt;dateadd(millisecond, b / 10000, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.AddYears(b)&lt;/td&gt;
&lt;td&gt;date_add(a, interval b year)&lt;/td&gt;
&lt;td&gt;dateadd(year, b, a)&lt;/td&gt;
&lt;td&gt;a::timestamp+(b&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.Date&lt;/td&gt;
&lt;td&gt;cast(date_format(a, '%Y-%m-%d') as datetime)&lt;/td&gt;
&lt;td&gt;convert(char(10),a,120)&lt;/td&gt;
&lt;td&gt;a::date&lt;/td&gt;
&lt;td&gt;trunc(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.Day&lt;/td&gt;
&lt;td&gt;dayofmonth(a)&lt;/td&gt;
&lt;td&gt;datepart(day, a)&lt;/td&gt;
&lt;td&gt;extract(day from a::timestamp)&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'DD') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;a.DayOfWeek&lt;/td&gt;
&lt;td&gt;dayofweek(a)&lt;/td&gt;
&lt;td&gt;datepart(weekday, a) - 1&lt;/td&gt;
&lt;td&gt;extract(dow from a::timestamp)&lt;/td&gt;
&lt;td&gt;case when to_char(a)='7' then 0 else cast(to_char(a) as number) end&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.DayOfYear&lt;/td&gt;
&lt;td&gt;dayofyear(a)&lt;/td&gt;
&lt;td&gt;datepart(dayofyear, a)&lt;/td&gt;
&lt;td&gt;extract(doy from a::timestamp)&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'DDD') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.Hour&lt;/td&gt;
&lt;td&gt;hour(a)&lt;/td&gt;
&lt;td&gt;datepart(hour, a)&lt;/td&gt;
&lt;td&gt;extract(hour from a::timestamp)&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'HH24') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;7&quot;&gt;&lt;td&gt;a.Millisecond&lt;/td&gt;
&lt;td&gt;floor(microsecond(a) / 1000)&lt;/td&gt;
&lt;td&gt;datepart(millisecond, a)&lt;/td&gt;
&lt;td&gt;extract(milliseconds from a::timestamp)-extract(second from a::timestamp)*1000&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'FF3') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.Minute&lt;/td&gt;
&lt;td&gt;minute(a)&lt;/td&gt;
&lt;td&gt;datepart(minute, a)&lt;/td&gt;
&lt;td&gt;extract(minute from a::timestamp)&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'MI') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.Month&lt;/td&gt;
&lt;td&gt;month(a)&lt;/td&gt;
&lt;td&gt;datepart(month, a)&lt;/td&gt;
&lt;td&gt;extract(month from a::timestamp)&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'FF3') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;a.Second&lt;/td&gt;
&lt;td&gt;second(a)&lt;/td&gt;
&lt;td&gt;datepart(second, a)&lt;/td&gt;
&lt;td&gt;extract(second from a::timestamp)&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'SS') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;10&quot;&gt;&lt;td&gt;a.Subtract(b)&lt;/td&gt;
&lt;td&gt;timestampdiff(microsecond, b, a)&lt;/td&gt;
&lt;td&gt;datediff(millisecond, b, a) * 1000&lt;/td&gt;
&lt;td&gt;(extract(epoch from a::timestamp-b::timestamp)*1000000)&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;13&quot;&gt;&lt;td&gt;a.Ticks&lt;/td&gt;
&lt;td&gt;timestampdiff(microsecond, '0001-1-1', a) * 10&lt;/td&gt;
&lt;td&gt;datediff(millisecond, '1970-1-1', a) * 10000 + 621355968000000000&lt;/td&gt;
&lt;td&gt;extract(epoch from a::timestamp)*10000000+621355968000000000&lt;/td&gt;
&lt;td&gt;cast(to_char(a,'FF7') as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;11&quot;&gt;&lt;td&gt;a.TimeOfDay&lt;/td&gt;
&lt;td&gt;timestampdiff(microsecond, date_format(a, '%Y-%m-%d'), a)&lt;/td&gt;
&lt;td&gt;'1970-1-1 ' + convert(varchar, a, 14)&lt;/td&gt;
&lt;td&gt;extract(epoch from a::time)*1000000&lt;/td&gt;
&lt;td&gt;a - trunc(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;a.Year&lt;/td&gt;
&lt;td&gt;year(a)&lt;/td&gt;
&lt;td&gt;datepart(year, a)&lt;/td&gt;
&lt;td&gt;extract(year from a::timestamp)&lt;/td&gt;
&lt;td&gt;年&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.Equals(b)&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.CompareTo(b)&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;9&quot;&gt;&lt;td&gt;a.ToString()&lt;/td&gt;
&lt;td&gt;date_format(a, '%Y-%m-%d %H:%i:%s.%f')&lt;/td&gt;
&lt;td&gt;convert(varchar, a, 121)&lt;/td&gt;
&lt;td&gt;to_char(a, 'YYYY-MM-DD HH24:MI:SS.US')&lt;/td&gt;
&lt;td&gt;to_char(a,'YYYY-MM-DD HH24:MI:SS.FF6')&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;10、时间&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;28.5&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;TimeSpan.Zero&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;0微秒&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;TimeSpan.MaxValue&lt;/td&gt;
&lt;td&gt;922337203685477580&lt;/td&gt;
&lt;td&gt;922337203685477580&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(233720368.5477580,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;TimeSpan.MinValue&lt;/td&gt;
&lt;td&gt;-922337203685477580&lt;/td&gt;
&lt;td&gt;-922337203685477580&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(-233720368.5477580,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;TimeSpan.Compare(a, b)&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;extract(day from (a-b))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;TimeSpan.Equals(a, b)&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt;TimeSpan.FromDays(a)&lt;/td&gt;
&lt;td&gt;a * 1000000 * 60 * 60 * 24&lt;/td&gt;
&lt;td&gt;a * 1000000 * 60 * 60 * 24&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(a*86400,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;TimeSpan.FromHours(a)&lt;/td&gt;
&lt;td&gt;a * 1000000 * 60 * 60&lt;/td&gt;
&lt;td&gt;a * 1000000 * 60 * 60&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(a*3600,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;TimeSpan.FromMilliseconds(a)&lt;/td&gt;
&lt;td&gt;a * 1000&lt;/td&gt;
&lt;td&gt;a * 1000&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(a/1000,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;TimeSpan.FromMinutes(a)&lt;/td&gt;
&lt;td&gt;a * 1000000 * 60&lt;/td&gt;
&lt;td&gt;a * 1000000 * 60&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(a*60,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;TimeSpan.FromSeconds(a)&lt;/td&gt;
&lt;td&gt;a * 1000000&lt;/td&gt;
&lt;td&gt;a * 1000000&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(a,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;TimeSpan.FromTicks(a)&lt;/td&gt;
&lt;td&gt;a / 10&lt;/td&gt;
&lt;td&gt;a / 10&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numtodsinterval(a/10000000,'second')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Add(b)&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a + b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.Subtract(b)&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.CompareTo(b)&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;a - b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;extract(day from (a-b))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;a.Days&lt;/td&gt;
&lt;td&gt;a div (1000000 * 60 * 60 * 24)&lt;/td&gt;
&lt;td&gt;a div (1000000 * 60 * 60 * 24)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;extract(day from a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;a.Hours&lt;/td&gt;
&lt;td&gt;a div (1000000 * 60 * 60) mod 24&lt;/td&gt;
&lt;td&gt;a div (1000000 * 60 * 60) mod 24&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;extract(hour from a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;a.Milliseconds&lt;/td&gt;
&lt;td&gt;a div 1000 mod 1000&lt;/td&gt;
&lt;td&gt;a div 1000 mod 1000&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;cast(substr(extract(second from a)-floor(extract(second from a)),2,3) as number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.Seconds&lt;/td&gt;
&lt;td&gt;a div 1000000 mod 60&lt;/td&gt;
&lt;td&gt;a div 1000000 mod 60&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;extract(second from a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.Ticks&lt;/td&gt;
&lt;td&gt;a * 10&lt;/td&gt;
&lt;td&gt;a * 10&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;(extract(day from a)&lt;em&gt;86400+extract(hour from a)&lt;/em&gt;3600+extract(minute from a)&lt;em&gt;60+extract(second from a))&lt;/em&gt;10000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;a.TotalDays&lt;/td&gt;
&lt;td&gt;a / (1000000 * 60 * 60 * 24)&lt;/td&gt;
&lt;td&gt;a / (1000000 * 60 * 60 * 24)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;extract(day from a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;a.TotalHours&lt;/td&gt;
&lt;td&gt;a / (1000000 * 60 * 60)&lt;/td&gt;
&lt;td&gt;a / (1000000 * 60 * 60)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;(extract(day from a)*24+extract(hour from a))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.TotalMilliseconds&lt;/td&gt;
&lt;td&gt;a / 1000&lt;/td&gt;
&lt;td&gt;a / 1000&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;(extract(day from a)&lt;em&gt;86400+extract(hour from a)&lt;/em&gt;3600+extract(minute from a)&lt;em&gt;60+extract(second from a))&lt;/em&gt;1000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.TotalMinutes&lt;/td&gt;
&lt;td&gt;a / (1000000 * 60)&lt;/td&gt;
&lt;td&gt;a / (1000000 * 60)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;a.TotalSeconds&lt;/td&gt;
&lt;td&gt;a / 1000000&lt;/td&gt;
&lt;td&gt;a / 1000000&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;(extract(day from a)&lt;em&gt;86400+extract(hour from a)&lt;/em&gt;3600+extract(minute from a)*60+extract(second from a))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;a.Equals(b)&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;a.ToString()&lt;/td&gt;
&lt;td&gt;cast(a as varchar)&lt;/td&gt;
&lt;td&gt;cast(a as varchar)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;to_char(a)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;11、数学函数&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Abs(a)&lt;/td&gt;
&lt;td&gt;abs(a)&lt;/td&gt;
&lt;td&gt;abs(a)&lt;/td&gt;
&lt;td&gt;abs(a)&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Acos(a)&lt;/td&gt;
&lt;td&gt;acos(a)&lt;/td&gt;
&lt;td&gt;acos(a)&lt;/td&gt;
&lt;td&gt;acos(a)&lt;/td&gt;
&lt;td&gt;acos(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Asin(a)&lt;/td&gt;
&lt;td&gt;asin(a)&lt;/td&gt;
&lt;td&gt;asin(a)&lt;/td&gt;
&lt;td&gt;asin(a)&lt;/td&gt;
&lt;td&gt;asin(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Atan(a)&lt;/td&gt;
&lt;td&gt;atan(a)&lt;/td&gt;
&lt;td&gt;atan(a)&lt;/td&gt;
&lt;td&gt;atan(a)&lt;/td&gt;
&lt;td&gt;atan(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Atan2(a, b)&lt;/td&gt;
&lt;td&gt;atan2(a, b)&lt;/td&gt;
&lt;td&gt;atan2(a, b)&lt;/td&gt;
&lt;td&gt;atan2(a, b)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Ceiling(a)&lt;/td&gt;
&lt;td&gt;ceiling(a)&lt;/td&gt;
&lt;td&gt;ceiling(a)&lt;/td&gt;
&lt;td&gt;ceiling(a)&lt;/td&gt;
&lt;td&gt;ceil(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Cos(a)&lt;/td&gt;
&lt;td&gt;cos(a)&lt;/td&gt;
&lt;td&gt;cos(a)&lt;/td&gt;
&lt;td&gt;cos(a)&lt;/td&gt;
&lt;td&gt;cos(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Exp(a)&lt;/td&gt;
&lt;td&gt;exp(a)&lt;/td&gt;
&lt;td&gt;exp(a)&lt;/td&gt;
&lt;td&gt;exp(a)&lt;/td&gt;
&lt;td&gt;exp(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Floor(a)&lt;/td&gt;
&lt;td&gt;floor(a)&lt;/td&gt;
&lt;td&gt;floor(a)&lt;/td&gt;
&lt;td&gt;floor(a)&lt;/td&gt;
&lt;td&gt;floor(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Log(a)&lt;/td&gt;
&lt;td&gt;log(a)&lt;/td&gt;
&lt;td&gt;log(a)&lt;/td&gt;
&lt;td&gt;log(a)&lt;/td&gt;
&lt;td&gt;log(e,a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Log10(a)&lt;/td&gt;
&lt;td&gt;log10(a)&lt;/td&gt;
&lt;td&gt;log10(a)&lt;/td&gt;
&lt;td&gt;log10(a)&lt;/td&gt;
&lt;td&gt;log(10,a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.PI(a)&lt;/td&gt;
&lt;td&gt;3.1415926535897931&lt;/td&gt;
&lt;td&gt;3.1415926535897931&lt;/td&gt;
&lt;td&gt;3.1415926535897931&lt;/td&gt;
&lt;td&gt;3.1415926535897931&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Pow(a, b)&lt;/td&gt;
&lt;td&gt;pow(a, b)&lt;/td&gt;
&lt;td&gt;power(a, b)&lt;/td&gt;
&lt;td&gt;pow(a, b)&lt;/td&gt;
&lt;td&gt;power(a, b)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Round(a, b)&lt;/td&gt;
&lt;td&gt;round(a, b)&lt;/td&gt;
&lt;td&gt;round(a, b)&lt;/td&gt;
&lt;td&gt;round(a, b)&lt;/td&gt;
&lt;td&gt;round(a, b)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Sign(a)&lt;/td&gt;
&lt;td&gt;sign(a)&lt;/td&gt;
&lt;td&gt;sign(a)&lt;/td&gt;
&lt;td&gt;sign(a)&lt;/td&gt;
&lt;td&gt;sign(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Sin(a)&lt;/td&gt;
&lt;td&gt;sin(a)&lt;/td&gt;
&lt;td&gt;sin(a)&lt;/td&gt;
&lt;td&gt;sin(a)&lt;/td&gt;
&lt;td&gt;sin(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Sqrt(a)&lt;/td&gt;
&lt;td&gt;sqrt(a)&lt;/td&gt;
&lt;td&gt;sqrt(a)&lt;/td&gt;
&lt;td&gt;sqrt(a)&lt;/td&gt;
&lt;td&gt;sqrt(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Math.Tan(a)&lt;/td&gt;
&lt;td&gt;tan(a)&lt;/td&gt;
&lt;td&gt;tan(a)&lt;/td&gt;
&lt;td&gt;tan(a)&lt;/td&gt;
&lt;td&gt;tan(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Math.Truncate(a)&lt;/td&gt;
&lt;td&gt;truncate(a, 0)&lt;/td&gt;
&lt;td&gt;floor(a)&lt;/td&gt;
&lt;td&gt;trunc(a, 0)&lt;/td&gt;
&lt;td&gt;trunc(a, 0)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;12、类型转换&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;43&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;8&quot;&gt;&lt;td&gt;Convert.ToBoolean(a), bool.Parse(a)&lt;/td&gt;
&lt;td&gt;a not in ('0','false')&lt;/td&gt;
&lt;td&gt;a not in ('0','false')&lt;/td&gt;
&lt;td&gt;a::varchar not in ('0','false','f','no')&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a not in ('0','false')&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToByte(a), byte.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as unsigned)&lt;/td&gt;
&lt;td&gt;cast(a as tinyint)&lt;/td&gt;
&lt;td&gt;a::int2&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as int2)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;12&quot;&gt;&lt;td&gt;Convert.ToChar(a)&lt;/td&gt;
&lt;td&gt;substr(cast(a as char),1,1)&lt;/td&gt;
&lt;td&gt;substring(cast(a as nvarchar),1,1)&lt;/td&gt;
&lt;td&gt;substr(a::char,1,1)&lt;/td&gt;
&lt;td&gt;substr(to_char(a),1,1)&lt;/td&gt;
&lt;td&gt;substr(cast(a as character),1,1)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;Convert.ToDateTime(a), DateTime.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as datetime)&lt;/td&gt;
&lt;td&gt;cast(a as datetime)&lt;/td&gt;
&lt;td&gt;a::timestamp&lt;/td&gt;
&lt;td&gt;to_timestamp(a,'YYYY-MM-DD HH24:MI:SS.FF6')&lt;/td&gt;
&lt;td&gt;datetime(a)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;12&quot;&gt;&lt;td&gt;Convert.ToDecimal(a), decimal.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as decimal(36,18))&lt;/td&gt;
&lt;td&gt;cast(a as decimal(36,19))&lt;/td&gt;
&lt;td&gt;a::numeric&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as decimal(36,18))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;9&quot;&gt;&lt;td&gt;Convert.ToDouble(a), double.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as decimal(32,16))&lt;/td&gt;
&lt;td&gt;cast(a as decimal(32,16))&lt;/td&gt;
&lt;td&gt;a::float8&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as double)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToInt16(a), short.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as signed)&lt;/td&gt;
&lt;td&gt;cast(a as smallint)&lt;/td&gt;
&lt;td&gt;a::int2&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as smallint)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToInt32(a), int.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as signed)&lt;/td&gt;
&lt;td&gt;cast(a as int)&lt;/td&gt;
&lt;td&gt;a::int4&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as smallint)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToInt64(a), long.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as signed)&lt;/td&gt;
&lt;td&gt;cast(a as bigint)&lt;/td&gt;
&lt;td&gt;a::int8&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as smallint)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToSByte(a), sbyte.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as signed)&lt;/td&gt;
&lt;td&gt;cast(a as tinyint)&lt;/td&gt;
&lt;td&gt;a::int2&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as smallint)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Convert.ToString(a)&lt;/td&gt;
&lt;td&gt;cast(a as decimal(14,7))&lt;/td&gt;
&lt;td&gt;cast(a as decimal(14,7))&lt;/td&gt;
&lt;td&gt;a::float4&lt;/td&gt;
&lt;td&gt;to_char(a)&lt;/td&gt;
&lt;td&gt;cast(a as character)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToSingle(a), float.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as char)&lt;/td&gt;
&lt;td&gt;cast(a as nvarchar)&lt;/td&gt;
&lt;td&gt;a::varchar&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as smallint)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToUInt16(a), ushort.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as unsigned)&lt;/td&gt;
&lt;td&gt;cast(a as smallint)&lt;/td&gt;
&lt;td&gt;a::int2&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as unsigned)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToUInt32(a), uint.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as unsigned)&lt;/td&gt;
&lt;td&gt;cast(a as int)&lt;/td&gt;
&lt;td&gt;a::int4&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as decimal(10,0))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Convert.ToUInt64(a), ulong.Parse(a)&lt;/td&gt;
&lt;td&gt;cast(a as unsigned)&lt;/td&gt;
&lt;td&gt;cast(a as bigint)&lt;/td&gt;
&lt;td&gt;a::int8&lt;/td&gt;
&lt;td&gt;cast(a as number)&lt;/td&gt;
&lt;td&gt;cast(a as decimal(21,0))&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;10&quot;&gt;&lt;td&gt;Guid.Parse(a)&lt;/td&gt;
&lt;td&gt;substr(cast(a as char),1,36)&lt;/td&gt;
&lt;td&gt;cast(a as uniqueidentifier)&lt;/td&gt;
&lt;td&gt;a::uuid&lt;/td&gt;
&lt;td&gt;substr(to_char(a),1,36)&lt;/td&gt;
&lt;td&gt;substr(cast(a as character),1,36)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Guid.NewGuid()&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;newid()&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;new Random().NextDouble()&lt;/td&gt;
&lt;td&gt;rand()&lt;/td&gt;
&lt;td&gt;rand()&lt;/td&gt;
&lt;td&gt;random()&lt;/td&gt;
&lt;td&gt;dbms_random.value&lt;/td&gt;
&lt;td&gt;random()&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;codefirst&quot;&gt;CodeFirst&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;IsAutoSyncStructure&lt;/td&gt;
&lt;td&gt;【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;IsSyncStructureToLower&lt;/td&gt;
&lt;td&gt;转小写同步结构&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;IsSyncStructureToUpper&lt;/td&gt;
&lt;td&gt;转大写同步结构，适用 Oracle&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;IsConfigEntityFromDbFirst&lt;/td&gt;
&lt;td&gt;使用数据库的主键和自增，适用 DbFirst 模式，无须在实体类型上设置 [Column(IsPrimary)] 或者 ConfigEntity。此功能目前可用于 mysql/sqlserver/postgresql。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;IsNoneCommandParameter&lt;/td&gt;
&lt;td&gt;不使用命令参数化执行，针对 Insert/Update，调试神器&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;IsLazyLoading&lt;/td&gt;
&lt;td&gt;延时加载导航属性对象，导航属性需要声明 virtual&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;1、配置实体（特性）&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class Song {
    [Column(IsIdentity = true)]
    public int Id { get; set; }

    public string Title { get; set; }
    public string Url { get; set; }

    public virtual ICollection&amp;lt;Tag&amp;gt; Tags { get; set; }

    [Column(IsVersion = true)]
    public long versionRow { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在外部配置实体&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.CodeFirst
    .ConfigEntity&amp;lt;Song&amp;gt;(a =&amp;gt; {
        a.Property(b =&amp;gt; b.Id).IsIdentity(true);
        a.Property(b =&amp;gt; b.versionRow).IsVersion(true);
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;dbfirst&quot;&gt;DbFirst&lt;/h2&gt;
&lt;p&gt;1、获取所有数据库&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.DbFirst.GetDatabases();
//返回字符串数组, [&quot;cccddd&quot;, &quot;test&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、获取指定数据库的表信息&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.DbFirst.GetTablesByDatabase(fsql.DbFirst.GetDatabases()[0]);
//返回包括表、列详情、主键、唯一键、索引、外键、备注等信息&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、生成实体&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;new FreeSql.Generator.TemplateGenerator()
.Build(fsql.DbFirst, 
    @&quot;C:\Users\28810\Desktop\github\FreeSql\Templates\MySql\simple-entity&quot;, 
    //模板目录（事先下载）
    @&quot;C:\Users\28810\Desktop\你的目录&quot;,
    //生成后保存的目录
    &quot;cccddd&quot;
    //数据库
);&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;repository-仓储实现&quot;&gt;Repository 仓储实现&lt;/h2&gt;
&lt;p&gt;1、单个仓储&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var curd = fsql.GetRepository&amp;lt;Xxx, int&amp;gt;();
//curd.Find(1);
var item = curd.Get(1);
curd.Update(item);

curd.Insert(item);
curd.Delete(1);
curd.Select.Limit(10).ToList();&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;工作单元&quot;&gt;工作单元&lt;/h2&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var uow = fsql.CreateUnitOfWork()) {
    var songRepos = uow.GetRepository&amp;lt;Song&amp;gt;();
    var userRepos = uow.GetRepository&amp;lt;User&amp;gt;();

    //上面两个仓储，由同一UnitOfWork uow 创建
    //在此执行仓储操作
    
    //这里不受异步方便影响

    uow.Commit();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;局部过滤器-数据验证&quot;&gt;局部过滤器 + 数据验证&lt;/h2&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var topicRepository = fsql.GetGuidRepository&amp;lt;Topic&amp;gt;(a =&amp;gt; a.UserId == 1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;之后在使用 topicRepository 操作方法时：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;查询/修改/删除时附过滤条件，从而达到不会修改其他用户的数据；&lt;/li&gt;
&lt;li&gt;添加时，使用过滤条件验证合法性，若不合法则抛出异常；如以下方法就会报错：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;topicRepository.Insert(new Topic { UserId = 2 })&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;乐观锁&quot;&gt;乐观锁&lt;/h2&gt;
&lt;p&gt;更新实体数据，在并发情况下极容易造成旧数据将新的记录更新。FreeSql 核心部分已经支持乐观锁。&lt;/p&gt;
&lt;p&gt;乐观锁的原理，是利用实体某字段，如：long version，更新前先查询数据，此时 version 为 1，更新时产生的 SQL 会附加 where version = 1，当修改失败时（即 Affrows == 0）抛出异常。&lt;/p&gt;
&lt;p&gt;每个实体只支持一个乐观锁，在属性前标记特性：[Column(IsVersion = true)] 即可。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;无论是使用 FreeSql/FreeSql.Repository/FreeSql.DbContext，每次更新 version 的值都会增加 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dbcontext&quot;&gt;DbContext&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;dotnet add package FreeSql.DbContext&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现类似 EFCore 使用方法，跟踪对象状态，最终通过 SaveChanges 方法以事务的方式提交整段操作。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var ctx = new SongContext()) {
    var song = new Song { BigNumber = &quot;1000000000000000000&quot; };
    ctx.Songs.Add(song);

    song.BigNumber = (BigInteger.Parse(song.BigNumber) + 1).ToString();
    ctx.Songs.Update(song);

    var tag = new Tag {
        Name = &quot;testaddsublist&quot;,
        Tags = new[] {
            new Tag { Name = &quot;sub1&quot; },
            new Tag { Name = &quot;sub2&quot; },
            new Tag {
                Name = &quot;sub3&quot;,
                Tags = new[] {
                    new Tag { Name = &quot;sub3_01&quot; }
                }
            }
        }
    };
    ctx.Tags.Add(tag);

    ctx.SaveChanges();
}

public class Song {
    [Column(IsIdentity = true)]
    public int Id { get; set; }
    public string BigNumber { get; set; }

    [Column(IsVersion = true)] //乐观锁
    public long versionRow { get; set; }
}
public class Tag {
    [Column(IsIdentity = true)]
    public int Id { get; set; }

    public int? Parent_id { get; set; }
    public virtual Tag Parent { get; set; }

    public string Name { get; set; }

    public virtual ICollection&amp;lt;Tag&amp;gt; Tags { get; set; }
}

public class SongContext : DbContext {
    public DbSet&amp;lt;Song&amp;gt; Songs { get; set; }
    public DbSet&amp;lt;Tag&amp;gt; Tags { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder builder) {
        builder.UseFreeSql(fsql);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;导航属性&quot;&gt;导航属性&lt;/h2&gt;
&lt;p&gt;支持 1对1、1对多、多对1、多对多 的约定导航属性配置，主要用于表达式内部查询；&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//OneToOne、ManyToOne
var t0 = fsql.Select&amp;lt;Tag&amp;gt;().Where(a =&amp;gt; a.Parent.Parent.Name == &quot;粤语&quot;).ToList();

//OneToMany
var t1 = fsql.Select&amp;lt;Tag&amp;gt;().Where(a =&amp;gt; a.Tags.AsSelect().Any(t =&amp;gt; t.Parent.Id == 10)).ToList();

//ManyToMany
var t2 = fsql.Select&amp;lt;Song&amp;gt;().Where(s =&amp;gt; s.Tags.AsSelect().Any(t =&amp;gt; t.Name == &quot;国语&quot;)).ToList();&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;读写分离&quot;&gt;读写分离&lt;/h2&gt;
&lt;p&gt;数据库读写分离，本功能是客户端的读写分离行为，数据库服务器该怎么配置仍然那样配置，不受本功能影响，为了方便描术后面讲到的【读写分离】都是指客户端的功能支持。&lt;/p&gt;
&lt;p&gt;各种数据库的读写方案不一，数据库端开启读写分离功能后，读写分离的实现大致分为以下几种：&lt;/p&gt;
&lt;p&gt;1、nginx代理，配置繁琐且容易出错；&lt;/p&gt;
&lt;p&gt;2、中件间，如MyCat，MySql可以其他数据库怎么办？&lt;/p&gt;
&lt;p&gt;3、在client端支持；&lt;/p&gt;
&lt;p&gt;FreeSql 实现了第3种方案，支持一个【主库】多个【从库】，【从库】的查询策略为随机方式。&lt;/p&gt;
&lt;p&gt;若某【从库】发生故障，将切换到其他可用【从库】，若已全部不可用则使用【主库】查询。&lt;/p&gt;
&lt;p&gt;出现故障【从库】被隔离起来间隔性的检查可用状态，以待恢复。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;IFreeSql fsql = new FreeSql.FreeSqlBuilder()
    .UseConnectionString(FreeSql.DataType.MySql, connstr)
    .UseSlave(&quot;connectionString1&quot;, &quot;connectionString2&quot;)
    //使用从数据库，支持多个
    .Build();

select.Where(a =&amp;gt; a.Id == 1).ToOne();
//读【从库】（默认）

select.Master().WhereId(a =&amp;gt; a.Id == 1).ToOne();
//强制读【主库】&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是以前某项目的测试图片，以供参考，整个过程无感切换和恢复：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.cnblogs.com/images/cnblogs_com/kellynic/133561/o_1111.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.cnblogs.com/images/cnblogs_com/kellynic/133561/o_2222.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;分区分表&quot;&gt;分区分表&lt;/h2&gt;
&lt;p&gt;FreeSql 提供 AsTable 分表的基础方法，GuidRepository 作为分存式仓储将实现了分表与分库（不支持跨服务器分库）的封装。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var logRepository = fsql.GetGuidRepository&amp;lt;Log&amp;gt;(null, oldname =&amp;gt; $&quot;{oldname}_{DateTime.Now.ToString(&quot;YYYYMM&quot;)}&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面我们得到一个日志仓储按年月分表，使用它 CURD 最终会操作 Log_201903 表。&lt;/p&gt;
&lt;p&gt;合并两个仓储，实现分表下的联表查询：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;fsql.GetGuidRepository&amp;lt;User&amp;gt;().Select.FromRepository(logRepository)
    .LeftJoin&amp;lt;Log&amp;gt;(b =&amp;gt; b.UserId == a.Id)
    .ToList();&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;租户&quot;&gt;租户&lt;/h2&gt;
&lt;p&gt;1、按租户字段区分&lt;/p&gt;
&lt;p&gt;FreeSql.Repository 现实了 filter（过滤与验证）功能，如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var topicRepos = fsql.GetGuidRepository&amp;lt;Topic&amp;gt;(t =&amp;gt; t.TerantId == 1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用 topicRepos 对象进行 CURD 方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在查询/修改/删除时附加此条件，从而达到不会修改 TerantId != 1 的数据；&lt;/li&gt;
&lt;li&gt;在添加时，使用表达式验证数据的合法性，若不合法则抛出异常；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;利用这个功能，我们可以很方便的实现数据分区，达到租户的目的。&lt;/p&gt;
&lt;p&gt;2、按租户分表&lt;/p&gt;
&lt;p&gt;FreeSql.Repository 现实了 分表功能，如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var tenantId = 1;
var reposTopic = orm.GetGuidRepository&amp;lt;Topic&amp;gt;(null, oldname =&amp;gt; $&quot;{oldname}{tenantId}&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面我们得到一个仓储按租户分表，使用它 CURD 最终会操作 Topic_1 表。&lt;/p&gt;
&lt;p&gt;3、按租户分库&lt;/p&gt;
&lt;p&gt;与方案二相同，只是表存储的位置不同。&lt;/p&gt;
&lt;p&gt;4、全局设置&lt;/p&gt;
&lt;p&gt;通过注入的方式设置仓储类的全局过滤器。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services) {
    services.AddMvc();

    services.AddSingleton&amp;lt;IFreeSql&amp;gt;(Fsql);
    services.AddFreeRepository(filter =&amp;gt; {
        var tenantId = 求出当前租户id;
        filter
        .Apply&amp;lt;ISoftDelete&amp;gt;(&quot;softdelete&quot;, a =&amp;gt; a.IsDeleted == false)
        .Apply&amp;lt;ITenant&amp;gt;(&quot;tenant&quot;, a =&amp;gt; a.TenantId == tenantId)
    }, this.GetType().Assembly
    );
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这次全方位介绍 FreeSql 的功能，只抽取了重要内容发布，由于功能实在太多不方便在一篇文章介绍祥尽。&lt;/p&gt;
&lt;p&gt;我个人是非常想展开编写，将每个功能的设计和实现放大来介绍，但还是先希望得到更多人的关注，不然就是一台独角戏了。&lt;/p&gt;
&lt;p&gt;gayhub: &lt;a href=&quot;https://github.com/2881099/FreeSql&quot; class=&quot;uri&quot;&gt;https://github.com/2881099/FreeSql&lt;/a&gt;，肯请献上宝贵的一星，谢谢！&lt;/p&gt;
</description>
<pubDate>Tue, 02 Apr 2019 22:59:00 +0000</pubDate>
<dc:creator>nicye</dc:creator>
<og:description>简介 FreeSql 是一个功能强大的 .NETStandard 库，用于对象关系映射程序(O/RM)，支持 .NETCore 2.1+ 或 .NETFramework 4.6.1+。 定义 入门篇</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kellynic/p/10645049.html</dc:identifier>
</item>
<item>
<title>【JVM虚拟机】(5)---深入理解JVM-Class中常量池 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/10646088.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/10646088.html</guid>
<description>&lt;center&gt;

&lt;/center&gt;
&lt;h2 id=&quot;一概念&quot;&gt;&lt;span&gt;一、概念&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;jvm生命周期&quot;&gt;1、jvm生命周期&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;启动&lt;/code&gt;：当启动一个java程序时，一个jvm实例就诞生了，任何一个拥有&lt;code&gt;main&lt;/code&gt;方法的class都可以作为jvm实例运行的起点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;运行&lt;/code&gt;：main()函数作为程序初始线程起点，其它线程由该线程启动，包括守护线程(daemon)和non-daemon(普通线程)。守护线程是JVM自己使用的线程比如GC线程就是个守护线程，只要这个jvm实例还有普通线程执行，就不会停止，但是可以用exit()强制终止程序。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;消亡&lt;/code&gt;：所有非守护线程退出时，JVM实例结束生命，若安全管理器允许，程序也可以使用java.lang.Runtime类或者System.exit(0)来退出。实际上exit也是用到Runtime类来退出，Runtime是个神奇的类，它还可以用于启动和关闭非java进程。&lt;/p&gt;
&lt;h4 id=&quot;jvm与class文件&quot;&gt;2、JVM与Class文件&lt;/h4&gt;
&lt;p&gt;我们一直说java虚拟机实现的与&lt;code&gt;语言是无关的&lt;/code&gt;，java虚拟机不和包含java在内的任何语言绑定,它只和与&lt;code&gt;class文件&lt;/code&gt;这种特殊的二进制文件格式所关联，class文件中包含了java虚拟机&lt;code&gt;指令集&lt;/code&gt;和&lt;code&gt;符号表&lt;/code&gt;以及若干其他辅助信息。基于安全方面的考虑， Java 虑拟机规范要求在 &lt;code&gt;Class 文件中使用许多强制性的语法和结构化约束&lt;/code&gt;，但任一门功能性语言都可以表示为一个能被 Java 虚拟机所接受的有效的 Class 文件。作为一个通用的、机器无关的执行平台，任何其他语言的实现者都可以将 Java 虚拟机作为语言的产品交付媒介。例如，使用 Java 编译器可以把 Java 代码编译为存储字节码的 Class 文件，使用 JRuby 等其他语言的编译器同样可以把程序代码编译成 Class 文件，虚拟机并不关心Class 的来源是何种语言，如图。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230658760-1895967044.jpg&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;什么是class文件&quot;&gt;3、什么是Class文件&lt;/h4&gt;
&lt;p&gt;Java字节码类文件（.class）是Java编译器编译Java源文件（.java）产生的“目标文件”。它是一种8位字节的二进制流文件， 各个数据项按顺序紧密的从前向后排列， 相邻的项之间没有间隙， 这样可以使得class文件非常紧凑， 体积轻巧， 可以被JVM快速的加载至内存， 并且占据较少的内存空间（方便于网络的传输）。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class文件是一组以8位字节为基础单位的二进制流。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;class文件中的信息是一项一项排列的， 每项数据都有它的固定长度， 有的占一个字节， 有的占两个字节， 还有的占四个字节或8个字节， 数据项的不同长度分别用u1, u2, u4, u8表示， 分别表示一种数据项在class文件中占据一个字节， 两个字节， 4个字节和8个字节。&lt;/p&gt;
&lt;h4 id=&quot;什么是魔数&quot;&gt;4、什么是魔数&lt;/h4&gt;
&lt;p&gt;当我们把class文件转成16进制,我们可以看到文件的头四个字节是&lt;code&gt;cafe babe&lt;/code&gt;，这个就称为&lt;code&gt;魔数&lt;/code&gt;。,它唯一作用就告诉虚拟机当前的文件就是class文件。&lt;br/&gt;使用魔数而不是用扩展名来进行识别主要是基于安全考虑，因为扩展名我们可以随意通过重命名等方式改动。而通过魔数就算你把结尾改成.clss。但它同样还能在JVM运行,因为它的头部还是&lt;code&gt;cafe babe&lt;/code&gt;没变。&lt;br/&gt;很多文件存储标准中都用魔数进行身份标识，如图片gif，jpeg都在文件头部中存储着魔数。&lt;/p&gt;
&lt;h4 id=&quot;jvm常量池&quot;&gt;5、jvm常量池&lt;/h4&gt;
&lt;p&gt;我先讲下概念，接下来我会将class文件转为16进制流后,在举例说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常量池中每一项常量都是一个表,jdk1.8有14种结构不同的表结构，这14个表有个共同特点，就是表开始的第一位都是一个u1类型的标志位，JVM根据这个标志位[tag]来确定某个常量池项表示什么类型的字面量，比如tag为1就是指CONSTANT_utf8_info&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230716805-1007965433.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再看常量池类型表&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230724776-2119201312.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这14种常量项结构还有一个特点是，&lt;code&gt;其中13表占用得字节固定，只有CONSTANT_Utf8_info占用字节不固定&lt;/code&gt;，其大小由length决定。为什么呢？因为从常量池存放的内容可知，其存放的是字面量和符号引用，最终这些内容都会是一个字符串，&lt;br/&gt;这些字符串的大小是在编写程序时才确定，比如你定义一个类，类名可以取长取短，所以在没编译前，无法确定大小不固定，编译后，通过utf-8编码，就可以知道其长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在看每一项常量表对应的说明&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230734647-688291211.jpg&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;二16进制class文件解析&quot;&gt;&lt;span&gt;二、16进制class文件解析&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;先看java代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.jincou.demo.domain;
public class XiaoXiao {
    private String father;
    public String fatherName() {
        return &quot;小小她爹&quot;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过命令自动生成class文件（会在同一目录生成）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;javac XiaoXiao.java&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在将class文件拖入文本编辑器里,显示自然就是16进制流了，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230800719-150205933.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的表其实可以划分为以下七个部分，.class 字节码文件包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;魔数与class文件版本&lt;/li&gt;
&lt;li&gt;常量池&lt;/li&gt;
&lt;li&gt;访问标志&lt;/li&gt;
&lt;li&gt;类索引、父类索引、接口索引&lt;/li&gt;
&lt;li&gt;字段表集合&lt;/li&gt;
&lt;li&gt;方法表集合&lt;/li&gt;
&lt;li&gt;属性表集合&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这篇博客只讲到常量池,其它的下篇讲，接下来我们一行一行解释,首先是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cafe babe&lt;/code&gt;：上面说过了这个是魔数，告诉JVM虚拟机我就是class文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0000 0034&lt;/code&gt;：次版本号组成u2+主版本号u2。共占4个字节。0034转10进制为52，代表当前JDK版本为1.8。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0013&lt;/code&gt; ：说明有19-1即18个常量。&lt;/p&gt;
&lt;p&gt;上面这些位置是固定的。接下来就是说明每一个常量：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0a&lt;/code&gt;：这就是tag代表一个标志，0a代表10,去找常量池列表。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230811987-1228549624.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;得知它是一个接口中方法的符号引用,然后去找&lt;code&gt;CONSTANT_Methodref_info&lt;/code&gt;对应常量列表描述:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230821020-1692428270.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从常量列表我们可以知道该类型一共占了5u,即&lt;code&gt;0a00 0400 0f&lt;/code&gt;，那么下一个tag就是&lt;code&gt;08&lt;/code&gt;代表字符串类型常量，以此类推就可以知道一共18个常量的信息。&lt;/p&gt;
&lt;h2 id=&quot;三class反编译&quot;&gt;&lt;span&gt;三、class反编译&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;通过上面看16进制的却太麻烦了，现在我们可以通过JDK自带反编译工具查看会更加清晰。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;javap -verbose 文件名&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201904/1090617-20190402230838771-814684472.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过反编译看去就很直观,比如第一个字符常量很明显告诉你是&lt;code&gt;CONSTANT_Methodref_info&lt;/code&gt;，而且对于的就是4和15和上面完美对应。&lt;/p&gt;
&lt;p&gt;最后思考，到底哪些会放到常量池？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.常量池可以理解为class文件中的资源仓库，有很多种类型，主要存放两大常量
①.字面量 
字面量就是通俗理解的java常量，如文本字符串，8大基本数据类型，final修饰的常量值等
②.符号引用
符号引用属于编译原理的概念，主要包含以下三种
1）类和接口的全限定名
2）字段的名称和描述符
3）方法的名称和描述符&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;参考&quot;&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、深入了解java虚拟机第2版第六章&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://www.jianshu.com/p/88a34f2959e0&quot;&gt;深入理解JVM-Class文件结构和类加载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;https://www.jianshu.com/p/247e2475fc3a&quot;&gt;深入理解JVM之Java字节码（.class）文件详解&lt;/a&gt;&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;只要自己变优秀了，其他的事情才会跟着好起来（少将3）&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 02 Apr 2019 16:49:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<og:description>深入理解Class 常量池 一、概念 1、jvm生命周期 ：当启动一个java程序时，一个jvm实例就诞生了，任何一个拥有 方法的class都可以作为jvm实例运行的起点。 ：main()函数作为程序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/10646088.html</dc:identifier>
</item>
<item>
<title>Android之RxJava详解 - 故事爱人</title>
<link>http://www.cnblogs.com/WUXIAOCHANG/p/10646434.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WUXIAOCHANG/p/10646434.html</guid>
<description>&lt;h2&gt;文章大纲&lt;/h2&gt;
&lt;p&gt;一、什么是RxJava&lt;br/&gt;二、为什么要用RxJava&lt;br/&gt;三、RxJava使用详解&lt;br/&gt;四、项目源码下载&lt;br/&gt;五、参考文章&lt;/p&gt;
&lt;h2&gt;一、什么是RxJava&lt;/h2&gt;
&lt;p&gt;  Rx(Reactive Extensions)是一个库，用来处理事件和异步任务，在很多语言上都有实现，RxJava是Rx在Java上的实现。简单来说，RxJava就是处理异步的一个库，最基本是基于观察者模式来实现的。通过Obserable和Observer的机制，实现所谓响应式的编程体验。&lt;/p&gt;
&lt;h2&gt;二、为什么要用RxJava&lt;/h2&gt;
&lt;p&gt;  比如说一个庞大的项目，一个事件传递的整个过程可能要经历很多方法，方法套方法，每个方法的位置七零八落，一个个方法跳进去看,跳过去跳过来很容易把脑袋弄晕，不够直观。但是Rxjava可以把所有逻辑用链式加闭包的方式呈现，做了哪些操作，谁在前谁在后非常直观，逻辑清晰，维护就会非常轻松。就算不是你写的你也可以很快的了解，你可以把它看作一条河流，整个过程就是对里面的水流做进行加工。懂了这个特性我们才知道在复杂的逻辑中运用Rxjava是多么的重要。&lt;br/&gt;  假设有这样一个需求：界面上有一个自定义的视图 imageCollectorView ，它的作用是显示多张图片，并能使用 addImage(Bitmap) 方法来任意增加显示的图片。现在需要程序将一个给出的目录数组 File[] folders 中每个目录下的 png 图片都加载出来并显示在 imageCollectorView 中。需要注意的是，由于读取图片的这一过程较为耗时，需要放在后台执行，而图片的显示则必须在 UI 线程执行。常用的实现方式有多种，我这里贴出其中一种：&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Thread() {
    &lt;span class=&quot;hljs-meta&quot;&gt;@Override
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;run&lt;span class=&quot;hljs-params&quot;&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super.run();
        &lt;span class=&quot;hljs-keyword&quot;&gt;for (File folder : folders) {
            File[] files = folder.listFiles();
            &lt;span class=&quot;hljs-keyword&quot;&gt;for (File file : files) {
                &lt;span class=&quot;hljs-keyword&quot;&gt;if (file.getName().endsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.png&quot;)) {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;final Bitmap bitmap = getBitmapFromFile(file);
                    getActivity().runOnUiThread(&lt;span class=&quot;hljs-keyword&quot;&gt;new Runnable() {
                        &lt;span class=&quot;hljs-meta&quot;&gt;@Override
                        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;run&lt;span class=&quot;hljs-params&quot;&gt;() {
                            imageCollectorView.addImage(bitmap);
                        }
                    });
                }
            }
        }
    }
}.start();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而如果使用 RxJava ，实现方式是这样的：&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;Observable.from(folders)
    .flatMap(&lt;span class=&quot;hljs-keyword&quot;&gt;new Func1&amp;lt;File, Observable&amp;lt;File&amp;gt;&amp;gt;() {
        &lt;span class=&quot;hljs-meta&quot;&gt;@Override
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Observable&amp;lt;File&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;call&lt;span class=&quot;hljs-params&quot;&gt;(File file) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;return Observable.from(file.listFiles());
        }
    })
    .filter(&lt;span class=&quot;hljs-keyword&quot;&gt;new Func1&amp;lt;File, Boolean&amp;gt;() {
        &lt;span class=&quot;hljs-meta&quot;&gt;@Override
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Boolean &lt;span class=&quot;hljs-title&quot;&gt;call&lt;span class=&quot;hljs-params&quot;&gt;(File file) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;return file.getName().endsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.png&quot;);
        }
    })
    .map(&lt;span class=&quot;hljs-keyword&quot;&gt;new Func1&amp;lt;File, Bitmap&amp;gt;() {
        &lt;span class=&quot;hljs-meta&quot;&gt;@Override
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Bitmap &lt;span class=&quot;hljs-title&quot;&gt;call&lt;span class=&quot;hljs-params&quot;&gt;(File file) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;return getBitmapFromFile(file);
        }
    })
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(&lt;span class=&quot;hljs-keyword&quot;&gt;new Action1&amp;lt;Bitmap&amp;gt;() {
        &lt;span class=&quot;hljs-meta&quot;&gt;@Override
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;call&lt;span class=&quot;hljs-params&quot;&gt;(Bitmap bitmap) {
            imageCollectorView.addImage(bitmap);
        }
    });
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;三、RxJava使用详解&lt;/h2&gt;
&lt;h3&gt;1. RxJava设计模式&lt;/h3&gt;
&lt;p&gt;  RxJava 的异步实现，是通过一种扩展的观察者模式来实现的。&lt;br/&gt;  观察者模式面向的需求是：A 对象（观察者）对 B 对象（被观察者）的某种变化高度敏感，需要在 B 变化的一瞬间做出反应。举个例子，新闻里喜闻乐见的警察抓小偷，警察需要在小偷伸手作案的时候实施抓捕。在这个例子里，警察是观察者，小偷是被观察者，警察需要时刻盯着小偷的一举一动，才能保证不会漏过任何瞬间。程序的观察者模式和这种真正的『观察』略有不同，观察者不需要时刻盯着被观察者（例如 A 不需要每过 2ms 就检查一次 B 的状态），而是采用注册(Register)或者称为订阅(Subscribe)的方式，告诉被观察者：我需要你的某某状态，你要在它变化的时候通知我。 Android 开发中一个比较典型的例子是点击监听器 &lt;code&gt;OnClickListener&lt;/code&gt; 。对设置 &lt;code&gt;OnClickListener&lt;/code&gt;来说， &lt;code&gt;View&lt;/code&gt; 是被观察者， &lt;code&gt;OnClickListener&lt;/code&gt; 是观察者，二者通过 &lt;code&gt;setOnClickListener()&lt;/code&gt; 方法达成订阅关系。订阅之后用户点击按钮的瞬间，Android Framework 就会将点击事件发送给已经注册的 &lt;code&gt;OnClickListener&lt;/code&gt; 。采取这样被动的观察方式，既省去了反复检索状态的资源消耗，也能够得到最高的反馈速度。当然，这也得益于我们可以随意定制自己程序中的观察者和被观察者，而警察叔叔明显无法要求小偷『你在作案的时候务必通知我』。&lt;/p&gt;
&lt;p&gt;OnClickListener 的模式大致如下图：&lt;/p&gt;
&lt;div class=&quot;image-package&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;575&quot; data-height=&quot;135&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16598307-c9411de64f72d575.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/575/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/16598307-c9411de64f72d575.jpg&quot; data-original-width=&quot;575&quot; data-original-height=&quot;135&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;17894&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;OnClickListener 观察者模式&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;RxJava 的观察者模式&lt;br/&gt;  RxJava 有四个基本概念：&lt;code&gt;Observable&lt;/code&gt; (可观察者，即被观察者)、 &lt;code&gt;Observer&lt;/code&gt; (观察者)、 &lt;code&gt;subscribe&lt;/code&gt; (订阅)、事件。&lt;code&gt;Observable&lt;/code&gt; 和 &lt;code&gt;Observer&lt;/code&gt; 通过 &lt;code&gt;subscribe()&lt;/code&gt; 方法实现订阅关系，从而 &lt;code&gt;Observable&lt;/code&gt; 可以在需要的时候发出事件来通知 &lt;code&gt;Observer&lt;/code&gt;。&lt;br/&gt;  与传统观察者模式不同， RxJava 的事件回调方法除了普通事件 &lt;code&gt;onNext()&lt;/code&gt; （相当于 &lt;code&gt;onClick()&lt;/code&gt; / &lt;code&gt;onEvent()&lt;/code&gt;）之外，还定义了两个特殊的事件：&lt;code&gt;onCompleted()&lt;/code&gt; 和 &lt;code&gt;onError()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;onCompleted()&lt;/code&gt;: 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的 &lt;code&gt;onNext()&lt;/code&gt; 发出时，需要触发 &lt;code&gt;onCompleted()&lt;/code&gt; 方法作为标志。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onError()&lt;/code&gt;: 事件队列异常。在事件处理过程中出异常时，&lt;code&gt;onError()&lt;/code&gt; 会被触发，同时队列自动终止，不允许再有事件发出。&lt;/li&gt;
&lt;li&gt;在一个正确运行的事件序列中, &lt;code&gt;onCompleted()&lt;/code&gt; 和 &lt;code&gt;onError()&lt;/code&gt; 有且只有一个，并且是事件序列中的最后一个。需要注意的是，&lt;code&gt;onCompleted()&lt;/code&gt; 和 &lt;code&gt;onError()&lt;/code&gt; 二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;RxJava 的观察者模式大致如下图：&lt;/p&gt;
&lt;div class=&quot;image-package&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;599&quot; data-height=&quot;170&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16598307-c3eea81d151b495c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/599/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/16598307-c3eea81d151b495c.jpg&quot; data-original-width=&quot;599&quot; data-original-height=&quot;170&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;21787&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;RxJava 的观察者模式&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;开始接入RxJava之间，添加依赖&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;dependencies {
　　compile &lt;span class=&quot;hljs-string&quot;&gt;'io.reactivex:rxandroid:1.2.1'
　　compile &lt;span class=&quot;hljs-string&quot;&gt;'io.reactivex:rxjava:1.1.6'
　　}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;2. 创建RxJava几种方式&lt;/h3&gt;
&lt;p&gt;方式1：简单创建Rxjava&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下所示：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;895&quot; data-height=&quot;168&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16598307-c822275f617aa769.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/895/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/16598307-c822275f617aa769.png&quot; data-original-width=&quot;895&quot; data-original-height=&quot;168&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;22637&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;方式2：just(T...): 将传入的参数依次发送出来&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;createTwo&lt;span class=&quot;hljs-params&quot;&gt;()
    {

        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下所示：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;970&quot; data-height=&quot;167&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16598307-d7bc455b5eaf4a3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/970/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/16598307-d7bc455b5eaf4a3a.png&quot; data-original-width=&quot;970&quot; data-original-height=&quot;167&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;23715&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;方式3：将传入的数组或 Iterable 拆分成具体对象后，依次发送出来&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;createThree&lt;span class=&quot;hljs-params&quot;&gt;()
    {

        String[] words = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;wu&quot;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;xiaochang&quot;};

        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下图所示：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;913&quot; data-height=&quot;156&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16598307-4f3d39d6c100ac95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/913/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/16598307-4f3d39d6c100ac95.png&quot; data-original-width=&quot;913&quot; data-original-height=&quot;156&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;21757&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;方式4：发送多种类型参数&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下所示：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;894&quot; data-height=&quot;180&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16598307-37014d61a8322c72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/894/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/16598307-37014d61a8322c72.png&quot; data-original-width=&quot;894&quot; data-original-height=&quot;180&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;22870&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;方式5：自定义Subscriber&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;   &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下图所示：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1331&quot; data-height=&quot;230&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16598307-4aee1dd64bc2c1ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/16598307-4aee1dd64bc2c1ea.png&quot; data-original-width=&quot;1331&quot; data-original-height=&quot;230&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;38255&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;3. 创建观察者方法&lt;/h3&gt;
&lt;p&gt;创建方式如下：&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;        Observer&amp;lt;String&amp;gt; observer = &lt;span class=&quot;hljs-keyword&quot;&gt;new Observer&amp;lt;String&amp;gt;() {
            &lt;span class=&quot;hljs-meta&quot;&gt;@Override
            &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;onNext&lt;span class=&quot;hljs-params&quot;&gt;(String s) {
                Log.d(tag, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Item: &quot; + s);
            }

            &lt;span class=&quot;hljs-meta&quot;&gt;@Override
            &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;onCompleted&lt;span class=&quot;hljs-params&quot;&gt;() {
                Log.d(tag, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Completed!&quot;);
            }

            &lt;span class=&quot;hljs-meta&quot;&gt;@Override
            &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;onError&lt;span class=&quot;hljs-params&quot;&gt;(Throwable e) {
                Log.d(tag, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error!&quot;);
            }
        };

        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  实质上，在 RxJava 的 subscribe 过程中，Observer 也总是会先被转换成一个 Subscriber 再使用。所以如果你只想使用基本功能，选择 Observer 和 Subscriber 是完全一样的。它们的区别对于使用者来说主要有两点：&lt;br/&gt;  onStart(): 这是 Subscriber 增加的方法。它会在 subscribe 刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法，具体可以在后面的文中看到。&lt;br/&gt;  unsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。&lt;/p&gt;
&lt;h3&gt;3. 线程Scheduler (调度器）&lt;/h3&gt;
&lt;p&gt;  在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）。&lt;br/&gt;在RxJava 中，Scheduler ——调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程。RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：&lt;br/&gt;  Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。&lt;br/&gt;  Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。&lt;br/&gt;  Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。&lt;br/&gt;  Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。&lt;br/&gt;另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。&lt;br/&gt;  有了这几个 Scheduler ，就可以使用 subscribeOn() 和 observeOn() 两个方法来对线程进行控制了。 * subscribeOn(): 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。 * observeOn(): 指定 Subscriber 所运行在的线程。或者叫做事件消费的线程。&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;RxJavaScheduler {

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;showScheduler&lt;span class=&quot;hljs-params&quot;&gt;()
    {
        Observable.just(&lt;span class=&quot;hljs-number&quot;&gt;1, &lt;span class=&quot;hljs-number&quot;&gt;2, &lt;span class=&quot;hljs-number&quot;&gt;3, &lt;span class=&quot;hljs-number&quot;&gt;4)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;四、项目源码下载&lt;/h2&gt;
&lt;p&gt;链接:&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fpan.baidu.com%2Fs%2F1Na7DH_N2rf-pXEadmQxgUQ&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1Na7DH_N2rf-pXEadmQxgUQ&lt;/a&gt;&lt;br/&gt;密码:xvr2&lt;/p&gt;
&lt;h2&gt;五、参考文章&lt;/h2&gt;

</description>
<pubDate>Tue, 02 Apr 2019 16:47:00 +0000</pubDate>
<dc:creator>故事爱人</dc:creator>
<og:description>文章大纲 一、什么是RxJava二、为什么要用RxJava三、RxJava使用详解四、项目源码下载五、参考文章 一、什么是RxJava Rx(Reactive Extensions)是一个库，用来处理</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WUXIAOCHANG/p/10646434.html</dc:identifier>
</item>
<item>
<title>linux FTP安全配置 - 雨中落叶</title>
<link>http://www.cnblogs.com/yuzly/p/10646114.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuzly/p/10646114.html</guid>
<description>&lt;p&gt;&lt;span&gt;linux FTP安全配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关闭防火墙，selinux安全机制   service iptables stop  setenforce 0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;匿名用户&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;匿名用户只能访问ftp服务器上的/var/ftp/pub目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ftp普通用户访问的文件在ftp用户的宿主目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;匿名访问:有两个匿名账户ftp和anonymous&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ftp的密码为空，anonymous的密码为空或者guest&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下图可以看到匿名用户只能访问pub文件夹下的内容，不能访问ftp服务器上其他目录下的内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230109732-668135875.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230148149-696529232.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;本地用户登陆ftp&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本地用户登录ftp，会出现信息泄露的问题，本地用户不止可以访问ftp站点的内容，还可以访问ftp服务器上的其他目录，解决办法就是用虚拟用户&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230224108-869103862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;虚拟用户&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.创建FTP根目录及虚拟用户映射的系统用户&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;useradd -d /home/vftpuser -s /sbin/nologin vftpuser&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230305898-861773906.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为保证其他用户可以访问，给予rwxr-xr-x权限：chmod 755 /home/vftpuser&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 建立虚拟FTP用户数据库文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;db_load -T -t hash -f vuser_login.txt vuser_login.db&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230341052-4829063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.建立支持虚拟用户的PAM认证文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230401594-1806679920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.参数db用于指向刚刚生成的vuser_login文件，但不要写后缀&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Find / -name pam_userdb.so找到认证文件的路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230424941-583164186.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4. 在vsftpd.conf文件中添加支持配置&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;#以下这些是关于vsftpd虚拟用户支持的重要配置项，默认vsftpd.conf中不包含这些设定项目，需要自己手动添加&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;guest_enable=YES //设定启用虚拟用户功能&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;guest_username=vsftpd //指定虚拟用户的宿主用户&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;user_config_dir=/etc/vsftpd/vuser_conf //设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230446542-883372222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5. 为虚拟用户设置不同的权限&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;指定用户独立的权限配置文件存放的目录：vim /etc/vsftpd/vsftpd.conf （user_config_dir=/etc/vsftpd/vsftpd_user_conf）&lt;/span&gt;&lt;br/&gt;&lt;span&gt; 创建用户独立的权限配置文件存放的目录：mkdir /etc/vsftpd/vsftpd_user_conf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 切换进入到该目录中：cd  /etc/vsftpd/vsftpd_user_conf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230509443-244348740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建yuzly1和yuzly2文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置权限yuzly1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;anon_mkdir_write_enable=YES   允许用户创建文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;anon_world_readable_only=YES       只读&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;anon_upload_enable=YES   允许wang用户上传文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230652158-1808756100.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;验证权限，下图可以看到可以创建文件，可以上传文件,但不能修改,删除&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201904/1592114-20190402230712011-955182195.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;加上anon_other_write_enable=YES这句话，用户就具有修改和删除文件的权限了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;yuzly2不添加任何权限，默认是可读权限&lt;/span&gt;&lt;/p&gt;




&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Tue, 02 Apr 2019 16:09:00 +0000</pubDate>
<dc:creator>雨中落叶</dc:creator>
<og:description>linux FTP安全配置 关闭防火墙，selinux安全机制 service iptables stop setenforce 0 匿名用户 匿名用户只能访问ftp服务器上的/var/ftp/pub</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuzly/p/10646114.html</dc:identifier>
</item>
<item>
<title>论文分享NO.3 - deeplearning_210</title>
<link>http://www.cnblogs.com/lab210/p/10633381.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lab210/p/10633381.html</guid>
<description>&lt;p&gt;论文分享第三期-2019.03.29&lt;/p&gt;
&lt;p&gt;Fully convolutional networks for semantic segmentation，CVPR 2015，&lt;a href=&quot;https://ieeexplore.ieee.org/document/7298965&quot; target=&quot;_blank&quot;&gt;FCN&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;一、全连接层与全局平均池化&lt;/h3&gt;
&lt;p&gt;在介绍FCN网络的全卷积连接之前，先介绍一下全连接层(fully connected layers)和全局平均池化(global average pooling)&lt;/p&gt;
&lt;div readability=&quot;7.2606382978723&quot;&gt;
&lt;div readability=&quot;9.6808510638298&quot;&gt;全连接层可以将前面的多层卷积学到的“分布式特征表示”（或者说是高层的鲁棒特征）映射到样本类别空间，与softmax组合具有“分类器”的作用。传统的用于分类的卷积网络，输出的是对应于类别的概率，并非是空间结构的输出。全连接层和卷积层的相互转换关系，可以&lt;a href=&quot;https://www.cnblogs.com/gujianhan/p/6030639.html&quot; target=&quot;_blank&quot;&gt;参考链接&lt;/a&gt;。&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1404759/201903/1404759-20190329093503540-548252491.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上两种实现GAP的方法，好像在程序中都有见过，也不太清楚那种更加合理，欢迎各位讨论指正。&lt;/p&gt;
&lt;div readability=&quot;10.093959731544&quot;&gt;在2017年的一篇文献中，&lt;a href=&quot;https://cs.nju.edu.cn/wujx/paper/PCM2017_FC.pdf&quot; target=&quot;_blank&quot;&gt;In Defense of Fully Connected Layers in Visual Representation Transfer&lt;/a&gt;，FC可在模型表示能力迁移过程中充当“防火墙”的作用。在使用微调(fine tuning)进行迁移学习的时候，如果源域(source domain)与目标域(target domain)中的图像差异较大时，不含FC的网络微调后的结果要差于含FC的网络。在领域差异较大时，FC可以保证迁移学习的能力。&lt;/div&gt;
&lt;h3&gt;二、FCN网络&lt;/h3&gt;
&lt;p&gt;对于FCN网络的一些博文，可以&lt;a href=&quot;https://blog.csdn.net/taigw/article/details/51401448&quot; target=&quot;_blank&quot;&gt;参考1&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/sinat_24143931/article/details/78696442?locationNum=4&amp;amp;fps=1&quot; target=&quot;_blank&quot;&gt;参考2&lt;/a&gt;、&lt;a href=&quot;https://www.cnblogs.com/gujianhan/p/6030639.html&quot; target=&quot;_blank&quot;&gt;参考3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;优点：输入图像的尺寸任意，输出是与输入相同尺寸的语义分割图，即是像素级别的分类图。将浅层特征图谱和深层特征图谱反卷积的结果融合，再进行反卷积，使获得的结果兼具鲁棒性和细节。较浅层的结果更精细，较深层的结果更鲁棒。&lt;/p&gt;
&lt;p&gt;缺点：仅借助卷积操作，考虑的图像中空间信息是局部的、不全面的。可以借助条件随机场CRF、非局部均值NML等方法改进。生成的结果细节表现能力有待提升。FCN是第一个端到端训练的、进行像素预测(语义分割)的全卷积网络。&lt;/p&gt;
&lt;p&gt;FCN程序1-&lt;a href=&quot;https://github.com/MarvinTeichmann/tensorflow-fcn&quot; target=&quot;_blank&quot;&gt;Marivn Teicha'mann/tensorflow-fcn&lt;/a&gt;，程序2-&lt;a href=&quot;https://github.com/shelhamer/fcn.berkeleyvision.org&quot; target=&quot;_blank&quot;&gt;shelamer/fcn.berkeleyvision.org&lt;/a&gt;。本博文结合程序1，研究论文。&lt;/p&gt;
&lt;p&gt; FCN-8算法&lt;a href=&quot;https://www.draw.io/?lightbox=1&amp;amp;highlight=0000ff&amp;amp;edit=_blank&amp;amp;layers=1&amp;amp;nav=1&amp;amp;title=FCN-8.drawio#R7V1bk6JIFv41PLaRd%2BBRrarpiOneqZiOmdmdlw6UVJlGcRG7rP31SyKpkpmlaMnN0uiOggOkwHfOyXNNLTycb36JveXsa%2BTz0ELA31j4wUII2a6b%2FhGU1y2FUbwlTOPA35LgnvAt%2BB%2FfEmlOXAc%2BXxXOS6IoTIJlkTiOFgs%2BTgo0L46jl%2BJpkygsfunSm3KN8G3shTr1r8BPZluqg%2Bw9%2FTMPpjP5zZDlzzv35MlgS1jNPD96OSDhRwsP4yhKtlvzzZCH4t3J17K97umNo7sbi%2FkiKXPB7NfNn2D29yh%2BmT3%2F9fuPCfjjd%2F6JONthfnrhOn%2Fi%2FG6TV%2FkK0htfis3xepT%2BGbzMgoR%2FW3pjQXtJQU9ps2Qepnsw3RxF64XP%2FS%2BjHcEb%2F5jGgvrbOgmDBc%2Fpvhf%2F%2BC0dJkgEZ4AeoEUiyqjizNWWKSBItydBGA6jMIqze8OTCWfjsTgniaMf%2FOCIb7sjIK7Q31P%2B6n7yOOGbA1L%2B3n7h0Zwn8Wt6Sn70EwFse03OxC7MmfhlzxM0x3l2wA44f5tezoXT3dB7oNKNHKtzcLPvuJXBjbjtwk1%2B2R2347i5qF24EdQh3NzGcGOgKG%2BOQzXcmAE3Sbs%2BbvCOWxncKG0XbrhL81tzuNkAtAw31m3cOPQpt024uczGHrsWbqRt8ka7gxtqzi5xoIIb03GTqvQQN6cy3Do0vzWJG2Xtwg25d9zK4Oa2DbeO68ma5jdXXnMEN%2BzWiRvuDm6YNiZvrmMXccPl5A3CyoDr0ATXIHAQyAhJa5CDHQotm5CrSVVCgJyTyMkwRhG5qoJdsENOHCENypyjRLuArcscMiBHKpO5DoWXm0Quha5tyBmAY2Ei3mHwswAg%2B%2B9apAwH6cMmn7wwmC4s3E%2FPCPkk2R9Nt6b533D79ykbSFLbyhRC4eYP9ZA9ER4IYIOxF%2FZzchKJ25nGnh%2BkPCB5ZBGJb9UZSnxMDAWyz%2B6ITO5m9yIzteLwOJoH43z7OrxH7NO8Z4j9VMd7hon60bEGj5aLrUdqOdTqU7HhDgRRULDlPEnOGsWSq9J5apP%2Bt9AQ6wc1lhP8W2SrIkYGQHOS5I9xCgOPDRwyD3w%2FfIuP4y3zXhVSVgzDukSH1CY6pLgybVLCaub%2BlH%2FLd6M4mUXTaOGFj3uq8qb253yJhARmkP3Dk%2BQ1L9rw1klUBJRvguTfmYi7Tr77n2yXYZbvP2zy4bOd14OdZx4H6dsQAB9HahWt4zE%2FrVvFAx%2FFM%2BahlwQ%2FeWF0Ezb5pc9RkN5KwSBQwvEyfCEHSbx4ypP8OgXj3Y28A3ZikORUXB%2BsgW092lY%2F%2Ffc0jhZiQtmgjyWjwCGXySiuSkb1UNJegTJyy1hAWDScbYeVwgKyirBAJezmm9GXNehBXDRxXECLg2xVtqYHTUMprKINVbFKRSUS0Xzh90WpoRCx0FuthL14COvlSJwwCSXtvYC5Mo20K7dBF%2BLlQnJ8pKrh0m1ZCNEmi5UMoTx6m1oVIMX6kO%2B%2BKa2Kda069zbfl1EUfijbwyUtMz1wiWxI55WarTplFys1tVqjbqWGdbOeso1IaQ%2BRTGzfpOA4xO4pBReyELMpnUZ0nYacjZhYhhTqUnQ7WOz6No6kdOtFwuDs3pwSo2oBO7rUkqaYHh%2BpYiVGOlQ5Yap8rykdqMHUeOW7XqkEyUaY%2BTeu8Ag%2BXaNZq8KjHSqFsBsTIKwaa8iQTmc6bKiqWLzMI970PIWVAksXXzpPafipI1U8T1HdN7I39s1rO0wVb0l2FpyoSL%2BGtlt9%2F%2BPzfOl64fwJ%2FQ2eg6d%2FjZAxIX6R1CgiYnhRjUkNchXrTsZNz5aadHY6PtL1pMaIVgkd15apCelTk%2B8AYGPT1NSnAJDMGoz2pQaHdQVvCFopLtuDp4TLDRVgjokNKxI9XQPCTfoIQwLcdkcb3gkDU2AwmN61qsCrObhtVoFA5f1LVSB0VROkXhXYIf%2B2fSoQum9YfQ2pQL0C9kOoQGifjj7UqgI7VENuECoGPBcaXV70YDNQuVARrITPXdvp6YKFDH0BVQmWIZqUCdaumOsmxQpCDQhDVMLUnlGZe2Xwr7RSMeuRWX1gDZwDD%2FjWVWDq%2BRaQcmykz0RIR%2BoayVozUoZk7dtIHU5TNw8VAGp60ASWQayqA6tMBaYZrMx%2B%2F75Yz28YMYhUxFxDQhdCQ3y2Osg61O1kSkz5lDs%2BMRkZDhphJuLqaq%2BEiLnbPrDtawkiISqszNFglUVm105bmVE9YwGZScg3uRc9OOVQy%2Bch23PzUk7Ug4xuKbtGkr3MtNj9xkrzoesogJSP2wN8fKSK3W9Du6nMU960bYmUugxXpglPuWxVWfhQN%2FE7pU8bdtqwWrbG9Nr4WjVpmQ78Qzk6bJ7zvdVsx%2B3lJUeyx3wzFYvK9rYLuaLeaK%2BdB9l6sqgHxCJO2Wqzdi%2FrKF1EyXgmv1Gc%2B5l74g4g6lGiSaAfxHycBJH4eu6thE6YhMHyc35YbP%2BZP9ilrarvYweqrDjkUj0vB00zxDW6Bc38gO7y%2FS7%2Fsjjj7su2GxPwEnkGVSJHy%2FmilxMPoZQi%2FcUb8fA5WgW5bI2iJInm6QmhODDY4Wt6y%2BZ%2BX017LA%2F6XdKnDJYrftACM4i2nDPcrQsN9sR0b5V4i5RzfMEHr%2FNRJB4gRdELQx5%2BXYv1pTNNdBWNDrToj0mnm4q6KpPhM5IVH9g6RoSqyF1sHyNbc31rtpCRIanxESxkApUUIzUFwWu1kct0ld3l7xNymCozsmLmggoZdax9b2FdAvhRXVSmvnhcsrisMvkr4aM25dMQ6dAg2mP2EY8G0XPcGai4M4aY4GTiUWBc7HHsI6dyVwdTV2ETpocyHEPFdXWFUB1aTsm0mnELQsNECQtCQHRQZQ7g2ksdm0HV4xmyg%2BumtTBBapA%2BdT0bjhVKn%2FZuBx21g4irAmcriJQ2g4gNTgxVsRFUpvf4Hm14h5gzRxNzObE2FW4wNDDfxdwgmyJGfTVBx2rvdP2ifo8ylYKdqmV6EMjfPzofdiUdCCGpGfQulVMYbOaG0wOUqvNz4%2FZyiVjVPf9XlVNsq%2F0RhrVjdiuKFmz2ygqmsB7G%2BhAOFFX6g1L3CWlY1Os%2BdanUon26ltiaRwyJbirXqm2PrC9z28JFlHkPspKtJ1UJV5d%2B8tG0lnoLgn%2FpaAqoJo3pGECtrHqFnBF%2B%2BMA%2BCVRXhJTScH5bpjpSzU7oOesOXQI4RAXEWQ9RfPAhCvqkx4qfilIxbeYtdamJy2sqoDrSrtKmLu6qOJEPmcIvToHbcM92FAZzUjfo8IM%2FHoMRpagdQrk6xvnhFKCaJepQVXeVG7JVu1XCxbvR1lEV7UZMdByJ33B4sPpD0W6U7vaR9UisQUrsi04kB1v9h%2Bzkvvhhh93PO3RrYdZ32icIKugaMs6uoRaTHGHKN8yTdDeOxE%2Bz7LlDxDa%2BRj4XZ%2Fwf&quot; target=&quot;_blank&quot;&gt;框图&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1404759/201904/1404759-20190402154939492-1399914136.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;框图中的模块说明：浅黄色的框和箭头表示卷积操作，正黄色的箭头表示反卷积操作，浅紫色的框表示最大池化，圆圈加号表示对应通道逐像素求和。紫红色的框为卷积操作得到的特征图，并非全连接层得到。&lt;/p&gt;
&lt;p&gt;FCN-8模型，当输入图像为224x224x3时：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;经过五组卷积和池化操作之后得到7x7x512大小的特征图谱，&lt;/li&gt;
&lt;li&gt;然后用卷积操作代替传统的全连接层，第一个使用7x7的卷积核得到一个1x1x4096的特征图谱，第二个使用1x1的卷积核得到一个1x1x4096的特征图谱。&lt;/li&gt;
&lt;li&gt;接下来为了得到像素级别的分类（语义分割），以VOC2007数据集为例，算上背景共有21类，所以将1x1x4096的特征图谱用1x1的卷积核得到一个1x1x21的类别图谱（程序中用score_fr表示），也就是一幅224x224大小的图像经过一系列的卷积操作后在21个各类别的概率得分，&lt;/li&gt;
&lt;li&gt;然后进行反卷积得到整幅图像各像素点在21个各类别的概率得分。需要经过三次反卷积操作（正黄色的箭头），第一次1x1x21的类别图谱经过4x4、步长为2的卷积核，得到14x14x21的类别图谱（程序中用upscore表示），然后将pool-4输出的14x14x512特征图谱经过1x1、步长为1的卷积，得到14x14x21的类别图谱，最后再将两个类别图谱依通道逐像素求和，得到了融合浅层卷积特征的14x14x21的类别图谱。第二次与第一次反卷积的操作流程相同，最后得到的是28x28x21的类别图谱；第三次反卷积没有在融合更浅层的特征了，将28x28x21的类别图谱经过16x16、步长为8的卷积核，得到224x224x21的类别图谱，尺寸与输入的图像相同，&lt;/li&gt;
&lt;li&gt;最后再转换为热力图可视化显示。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;对于FCN-16，反卷积操作有两次，第一次使用4x4、步长为2的卷积核，第二次使用32x32、步长为16的卷积核。对于FCN-32，反卷积操作有一次，使用64x64、步长为32的卷积核（没有融合浅层的特征）。&lt;/p&gt;
&lt;p&gt;FCN的一大特点就是允许任意尺寸的输入图像，对于不同尺寸的输入图像，所使用的操作都是上述框图中的，区别在于特征图谱的尺寸。&lt;a href=&quot;https://www.draw.io/?lightbox=1&amp;amp;highlight=0000ff&amp;amp;edit=_blank&amp;amp;layers=1&amp;amp;nav=1&amp;amp;title=FCN-8-%E5%AF%B9%E6%AF%94.drawio#R7Vxbc6M2FP41PMaDJNDl0U6c3Zluu5ndabfdlw4G2abBxsU4If31lbgZkJIQx%2BBL7NmN4YBl0Pedo3MzBrpeJJ8iZzX%2FNfR4YEDTSwx0Y0AIbUzFm5Q8ZRJso0wwi3wvE4Gt4Lv%2FH8%2BEdi7c%2BB5f186LwzCI%2FVVd6IbLJXfjmsyJovCxfto0DOpfunJmXBF8d51Alf7wvXieSSkkW%2Fln7s%2FmxTcDzLIjC6c42cwE67njhY8VERob6DoKwzjbWiTXPJBzV0xL9rnbZ46WFxbxZdzmA%2Bu%2Ff%2F%2B8WDEnWNzCn%2Badf%2FvbBF4BALNxHpxgk9%2ByAXEgRhx5%2FoO87Pgpnwv870Ze6yjmSXzlBP5saaChOCPg03h7VGzN8vcge79NByqksDYmFLOykpvuZiLeRo9zP%2BbfV44rZY%2BCUUI2jxeB2ANicxJulh73vkxKgePezyIp%2FbqJA3%2FJc7nnRPdfxTB%2BLGlnDky7LoSpVJ65zhhnEbGd39RNekdo9MCj2BdUGObiOJSXM%2FWD4DoMwii9ATSdcuy6cqA4Cu955YhH2MQ0yyMFfdIvLbggD7vhwnfzbRXUHGd5LTypiHKQP%2FFwwePoSZySH71iVq5yucYBk%2BUUfKwwONeveZW8Vn6ekyvNrBx8yyuxkVPrTTQDF5qdG82YfXQ0M%2BmFZvJD2D4bmokVqskzS8MzqPJMnPl%2Bns1%2FSf4w5z8n0eP87se3%2B6n5%2Bzd%2BBZGGZkdKBWTvhPJeLAQlNeQoshXgbJ2B6A443TJ0AU7ROROgI0MO6Cz7CSHHgWdzokOOYYIcvDfkIH0VOQvokINdIYdPBznLOqDOUVZHziSqzmmWub24U3rkzAtyrTwUkx4bchc3%2BG3R1ixyPF9woODIMpTfqhJKvnSEMtPXIbxji7zOPbNP7mkW6jExhkODEWNsG%2FTWGCK5wUbGaJxKkBTmzJpEBavEOpWI%2Fwa8RupBhXKSv3Va1THSAJqLCn64AgYeaRiy8D0veI7HUUbevUKKzRqkzFIhJZYKKerMmrTwmrk349%2Fz3TCK5%2BEsXDrBeCttzNT2nC%2Bh1MAUsn94HD%2FlKWBnE4d1QHnix3%2BmKs5ovvtXuosRzvdvknz4dOepsnPHI1%2FMhgT4ZaTW4SZy%2Beu2Vd7wi3hGPHBi%2F6GeR9Zhk3%2F0LvTFpdQcgjoPKMP1QWInmvE4%2F1wD4%2FJC3gG7pdFkoa43xoikKi3%2B3brhUi4oCfxYOmpSazcdRV3pqK2AtTWg2DpnLACoO86E4lZYANwRFrCF33w29rIHO4jqLg4z7fogmclW7KBuqAZVlKE6NqlQdY5E4J2kwfc1KI6ep5qasLGcFRmHHtRUWy2wNevbR4yS2hcLTjZKgriezyTFiljlniZK2ksJQU8%2BXVbsA5Jv94Iodbk%2BuTOhtmUfBcuo6hRavRZEbXLxRPboiQDaSPSxnT0RYNsvD7U%2FT0TPDF2ahsqMDEuzM9Q2hnabNA2iVoLoB0zTQAzrviRpF3bsI02jh5S9ruzHYvaJatCx6TCgrZDBG4JTt2Eabn2PqqOxDzyJkm1RC2cIalyEruDELaLIqh5VlzbPWc9LtrfXnIIdi2QmmzkHWQMlzN7lsBm6gmhiW04cIAOExM4yjN15%2FnUH6jUADXuqSQJgzdqL7K7gO8OkaUkrcOh1uJkRoLuvw2iAK69XBu54VS6WlFMw4fDoTDi16isyLdy1ig2AGhvQmQlQEww4wcbYMkbUGA5BAhJxS2NisKEhPCixMQLGaJQ6W%2BKEUcX9Ep6ZKY%2Berz9FSWP9RUABj2pCdPSC%2FXgfempG%2FeQN%2BOFsdlmXLi1roxLS2mQTSl%2B02I1xu7bYJ9TddAIWmxzYYrfIl1zQfB5NUEeTHRjNFj2jYhh%2FtW4BpLNeZb8vm%2FqJtOfNuS9z23uZSQQG9Xim9ESr8Yw6lV3VSnCL3MLJTCXQhIb9TSVpUx0%2BlamEah2lz6k8oXb%2B4zfXDKlg9mmuiTZcSuA5Rz2E1fuIKNH80ELXvtmZSrWIegqVmgY8GeapQb708s0bN3DWa1lZqwJU3A%2BA2cl5vIMH0EaVl5UdLWt2Vs3VFy9DrUKneuHYpjb56HqQ7pZ8fDUkegWiQvbeyIlYjXZQEw52LTth1vQqlLE6jpeoyq9tBenM%2B9QKVSp%2ByAhtTRdCnx0wtEXweklxtFVU%2BcPUhn8EAMY7KyswIRwgmwAL0vQvU8cGFdPYsyLrIoIP2MDyEbqn7OYDJZAajPbbPsXOsLp2QMsFGu3s28fY7FJRAwPTIhiw7K8y8KA0aLToT%2BrJZjGosubS9PI2U1BPt4PSzT1U1ws7oWcxHGHXC1H1U8Gz17YXpmYBFDwvbS9lDsdWDLeqj732vQBTjfA%2BQBoHNWCwVDXqNY8DzDcUJi%2BJnF4SOahpa8nuwSFmTcVXB%2BvYmwKmrlp6CQFP%2B2lbdr0o0O%2FTtp7h2SXV8L7fyrR4%2BFDfPDObyVDd0wN1jkuXD6lUK7OAwQTIsPG8c9MMN%2FKW0NJkePaTmha724feZmvR9snBaPw%2F&quot; target=&quot;_blank&quot;&gt;如下图&lt;/a&gt;所示为全卷积网络，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1404759/201904/1404759-20190402232800392-37822190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当输入为384×384的图像时：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;经过五组卷积和池化操作后，pool-5的输出为12x12x512，&lt;/li&gt;
&lt;li&gt;然后使用两个卷积核分别为7x7和1x1的全卷积操作，得到的输出为6x6x4096（输入尺寸=卷积核大小+步长x(输出尺寸-1)），&lt;/li&gt;
&lt;li&gt;再使用1x1的卷积核得到6x6x21的类别图谱。&lt;/li&gt;
&lt;li&gt;接下来就是框图中的三次反卷积操作，最终得到384x384x21的类别图谱，&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上的反卷积层因为是于pool-4和pool-3的尺寸对应，因此不受输入尺寸的影响。对比使用全连接层时的操作，因为需要将pool-5的特征图谱reshape成一条特征向量，对于224的输入，特征向量维度为7x7x512，则全连接层的权值尺寸为(7x7x512,4096)；对于384的输入，特征向量维度为12x12x512，则全连接层的权值尺寸为(12x21x512,4096)，全连接层的权值尺寸发生变化而不能训练。&lt;/p&gt;
&lt;p&gt;如下图为带有全连接层的网络，对于384的输入图像，当使用224×224尺寸的窗口、步长为32在384×384的图片上滑动，可以得到6x6个224x224的输入图像送给带全连接层的网络，然后得到6x6x21的类别图谱，与直接使用全卷积网络是相同的，但是使用全卷网络效率更高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1404759/201904/1404759-20190402234255252-1123050463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 02 Apr 2019 15:46:00 +0000</pubDate>
<dc:creator>deeplearning_210</dc:creator>
<og:description>论文分享第三期-2019.03.29 Fully convolutional networks for semantic segmentation，C</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lab210/p/10633381.html</dc:identifier>
</item>
<item>
<title>jvm垃圾回收算法 - 五色花的博客</title>
<link>http://www.cnblogs.com/luao/p/10646236.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luao/p/10646236.html</guid>
<description>&lt;h2&gt;1、标记 - 清除算法 (Mark-sweep算法) 最基础的收集算法&lt;/h2&gt;
&lt;h3&gt;两个阶段：&lt;/h3&gt;
&lt;p&gt;分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。&lt;/p&gt;
&lt;h3&gt;两个不足：&lt;/h3&gt;
&lt;p&gt;1、效率问题，标记和清除两个过程的效率都不高。&lt;br/&gt;2、空间问题，标记清除之后会产生大量的不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大的对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1613061/201904/1613061-20190402233338996-1823246286.png&quot; alt=&quot;&quot; width=&quot;539&quot; height=&quot;423&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2、复制算法（Copying）为了解决效率问题&lt;/h2&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;它将可用内存按容量划分为大小相等的两块，每次之使用其中的一块。当这一块内存用完了，就将还存活这着的对象复制到另外一块上面，然后再把已使用过的内存空间一次性清理掉。这样使得每次都对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。&lt;/p&gt;
&lt;h3&gt;缺点&lt;/h3&gt;
&lt;p&gt;将内存缩小为原来的一半，代价太高。&lt;/p&gt;
&lt;h3&gt;应用&lt;/h3&gt;
&lt;p&gt;将内存分为一块较大的Eden（新生代）空间和两块较小的Survivor（幸存者区）空间，每次使用Eden和其中一块Survivor。回收时，将Eden与Survivor中还存活的对象一次性地复制到另一块Survivor空上，最后清理掉Eden和刚才用过的Survivor空间。 HotSpot虚拟机默认Eden与Survivor的比例8:1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80% + 10%），只有10% 的内存会被浪费。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1613061/201904/1613061-20190402233543968-460265768.png&quot; alt=&quot;&quot; width=&quot;557&quot; height=&quot;439&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3、标记 - 整理算法（Mark-Compact）&lt;/h2&gt;
&lt;p&gt;适用于老年代，将所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存&lt;/p&gt;
&lt;h3&gt;标记-复制算法的缺点&lt;/h3&gt;
&lt;p&gt;1、复制算法在对象存活率较高时就要进行较多的复制操作，效率就会变低。&lt;br/&gt;2、如果不想浪费50%的空间，就需要额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况。所以，老年代一般不能直接使用这种算法。&lt;/p&gt;
&lt;h3&gt;标记-整理算法原理&lt;/h3&gt;
&lt;p&gt;标记过程仍然与“标记 - 清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1613061/201904/1613061-20190402233901904-174836171.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;421&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4、分代收集算法（Generational Collention 算法）新生代、老年代&lt;/h2&gt;
&lt;p&gt;1、当前商业虚拟机的垃圾收集器都采用“分代收集”（generational collection）算法，这种算法并没有什么新的思想，只是根据对象存活周期的不同，将内存划分为几块。&lt;br/&gt;2、一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。&lt;br/&gt;3、在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。&lt;br/&gt;4、而老年代中因为对象存活率高，没有额外空间对他进行分配担保，就必须使用“标记 - 清除”算法，或“标记 - 整理”算法来进行回收。&lt;/p&gt;
</description>
<pubDate>Tue, 02 Apr 2019 15:37:00 +0000</pubDate>
<dc:creator>五色花的博客</dc:creator>
<og:description>1、标记 - 清除算法 (Mark-sweep算法) 最基础的收集算法 两个阶段： 分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。 两个不足： 1</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luao/p/10646236.html</dc:identifier>
</item>
<item>
<title>C语言实现将日期、时间保存到文本文件中 - 逆夏的流年</title>
<link>http://www.cnblogs.com/wychen5/p/10646237.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wychen5/p/10646237.html</guid>
<description>&lt;p&gt;今天突然兴起，看来一下C语言的文件操作，以前在学习的时候，总是一带而过，觉得没有什么用处；但是现在看来，还真的没有什么用处，最后，我现在还有用到，当然这只是我的个人认为，并不能说明什么，在此我将自己写的一段代码附上，希望能和大家一同学习&lt;/p&gt;
&lt;p&gt;1、打开一个文本文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; FILE *fopen( &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * filename, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * mode );
&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&quot;1143-1554211676983&quot; data-theme=&quot;default&quot; data-language=&quot;javascript&quot; readability=&quot;41.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;linux文件路径：
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; linux：fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/tmp/test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;windows文件路径：
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; windows:fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:/Desktop/cyuyan_sz/vs2010/one/jiguoti/temp/a.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1603360/201904/1603360-20190402232148276-1627424877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：&lt;/p&gt;
&lt;div readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rb+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r+b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w+b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a+b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;、
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、写入文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; fputc( &lt;span&gt;int&lt;/span&gt; c, FILE *&lt;span&gt;fp );
c:写入的字符    fp:打开的文件流&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div readability=&quot;18&quot;&gt;3、读取文件
&lt;div id=&quot;3274-1554212788807&quot; data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; fgetc( FILE * fp );
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;fgetc() 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回 EOF。下面的函数允许您从流中读取一个字符串&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt; 
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;char&lt;/span&gt; *fgets( &lt;span&gt;char&lt;/span&gt; *buf, &lt;span&gt;int&lt;/span&gt; n, FILE *fp );
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;函数 fgets() 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 buf，并在最后追加一个 null 字符来终止字符串。&lt;/p&gt;
&lt;p&gt;如果这个函数在读取最后一个字符之前就遇到一个换行符 '\n' 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。您也可以使用 int fscanf(FILE *fp, const char *format, ...) 函数来从文件中读取字符串，但是在遇到第一个空格字符时，它会停止读取。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;4、关闭文件&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
fclose( FILE *fp );
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     FILE *fp =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     fp = fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:/Desktop/cyuyan_sz/vs2010/one/jiguoti/temp/a.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello word......\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello word......\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    fclose(fp);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    getchar();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;所示代码运行结果为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1603360/201904/1603360-20190402232345027-934069898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面进入正题：&lt;/p&gt;
&lt;p&gt;如何将日期、时间存储到记事本文件中,&lt;/p&gt;
&lt;p&gt;1、如何获取日期、时间（time.h）&lt;/p&gt;
&lt;p&gt;2、如何保存&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;vs2010在编译生成程序之后，dos界面会出现闪退的情况，
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;解决办法:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;1.在源程序后面添加getchar();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;2.添加头文件#include之后在main函数结尾前写上system(&quot;pause&quot;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 8&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 9&lt;/span&gt; #include &amp;lt;time.h&amp;gt;
&lt;span&gt;10&lt;/span&gt; #include &amp;lt;Windows.h&amp;gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     FILE *fp =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; *s=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;adasdsadasd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    time_t timep;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; tm *&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     fp = fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:/Desktop/cyuyan_sz/vs2010/one/jiguoti/temp/a.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         time(&amp;amp;&lt;span&gt;timep);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         p=gmtime(&amp;amp;&lt;span&gt;timep);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;   
&lt;span&gt;25&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;日期:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;tm_year+&lt;span&gt;1900&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取年&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;tm_mon+&lt;span&gt;1&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取月&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;tm_mday);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取日&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;      &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;时间:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;tm_hour+&lt;span&gt;8&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取时&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;tm_min);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取分&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;tm_sec);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取秒&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;      &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天是今年的第 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         fprintf(fp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;tm_yday);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取今年的第几天&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 天\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,fp);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;换行&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         
&lt;span&gt;45&lt;/span&gt;         fputs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fp);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         Sleep(&lt;span&gt;1000&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1s保存一次&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    fclose(fp);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    getchar();
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;运行结果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1603360/201904/1603360-20190402232722509-271509134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 有问题可在下方评论，希望能共同学习&lt;/p&gt;












&lt;/div&gt;
</description>
<pubDate>Tue, 02 Apr 2019 15:37:00 +0000</pubDate>
<dc:creator>逆夏的流年</dc:creator>
<og:description>今天突然兴起，看来一下C语言的文件操作，以前在学习的时候，总是一带而过，觉得没有什么用处；但是现在看来，还真的没有什么用处，最后，我现在还有用到，当然这只是我的个人认为，并不能说明什么，在此我将自己写</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wychen5/p/10646237.html</dc:identifier>
</item>
<item>
<title>python3 对拉勾数据进行可视化分析 - Max_Lyu</title>
<link>http://www.cnblogs.com/lyuzt/p/10643941.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyuzt/p/10643941.html</guid>
<description>&lt;p&gt;　　上回说到我们如何如何把拉勾的数据抓取下来的，既然获取了数据，就别放着不动，把它拿出来分析一下，看看这些数据里面都包含了什么信息。（本次博客源码地址：&lt;a href=&quot;https://github.com/MaxLyu/Lagou_Analyze&quot; target=&quot;_blank&quot;&gt;https://github.com/MaxLyu/Lagou_Analyze&lt;/a&gt;）&lt;/p&gt;
&lt;h2&gt;一、前期准备&lt;/h2&gt;
&lt;p&gt;　　由于上次抓的数据里面包含有 ID 这样的信息，我们需要将它去掉，并且查看描述性统计，确认是否存在异常值或者确实值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
read_file = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;analyst.csv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取文件获得数据&lt;/span&gt;
data = pd.read_csv(read_file, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gbk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 去除数据中无关的列&lt;/span&gt;
data = data[:].drop([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], axis=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 描述性统计&lt;/span&gt;
data.describe()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;             　　　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1458123/201904/1458123-20190402165417438-1122664711.png&quot; alt=&quot;&quot; width=&quot;323&quot; height=&quot;171&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果中的 unique 表示的是在该属性列下面存在的不同值个数，以学历要求为例子，它包含【本科、大专、硕士、不限】这4个不同的值，top 则表示数量最多的值为【本科】，freq 表示出现的频率为 387。由于薪资的 unique 比较多，我们查看一下存在什么值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;学历要求&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].unique())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;工作经验&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].unique())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;薪资&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].unique())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;                 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1458123/201904/1458123-20190402170318027-1505235912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二、预处理&lt;/h2&gt;
&lt;p&gt;　　从上述两张图可以看到，学历要求和工作经验的值比较少且没有缺失值与异常值，可以直接进行分析；但薪资的分布比较多，总计有75种，为了更好地进行分析，我们要对薪资做一个预处理。根据其分布情况，可以将它分成【5k 以下、5k-10k、10k-20k、20k-30k、30k-40k、40k 以上】，为了更加方便我们分析，取每个薪资范围的中位数，并划分到我们指定的范围内。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对薪资进行预处理&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; pre_salary(data):
    salarys &lt;/span&gt;= data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;薪资&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].values
    salary_dic &lt;/span&gt;=&lt;span&gt; {}
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; salary &lt;span&gt;in&lt;/span&gt;&lt;span&gt; salarys:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据'-'进行分割并去掉'k',分别将两端的值转换成整数&lt;/span&gt;
        min_sa = int(salary.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0][:-1&lt;span&gt;])
        max_sa &lt;/span&gt;= int(salary.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[1][:-1&lt;span&gt;])
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 求中位数&lt;/span&gt;
        median_sa = (min_sa + max_sa) / 2
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断其值并划分到指定范围&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; median_sa &amp;lt; 5&lt;span&gt;:
            salary_dic[u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5k以下&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = salary_dic.get(u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5k以下&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 0) + 1
        &lt;span&gt;elif&lt;/span&gt; median_sa &amp;gt; 5 &lt;span&gt;and&lt;/span&gt; median_sa &amp;lt; 10&lt;span&gt;:
            salary_dic[u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5k-10k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = salary_dic.get(u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5k-10k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 0) + 1
        &lt;span&gt;elif&lt;/span&gt; median_sa &amp;gt; 10 &lt;span&gt;and&lt;/span&gt; median_sa &amp;lt; 20&lt;span&gt;:
            salary_dic[u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10k-20k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = salary_dic.get(u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10k-20k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 0) + 1
        &lt;span&gt;elif&lt;/span&gt; median_sa &amp;gt; 20 &lt;span&gt;and&lt;/span&gt; median_sa &amp;lt; 30&lt;span&gt;:
            salary_dic[u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20k-30k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = salary_dic.get(u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20k-30k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 0) + 1
        &lt;span&gt;elif&lt;/span&gt; median_sa &amp;gt; 30 &lt;span&gt;and&lt;/span&gt; median_sa &amp;lt; 40&lt;span&gt;:
            salary_dic[u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;30k-40k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = salary_dic.get(u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;30k-40k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 0) + 1
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            salary_dic[u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;40以上&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = salary_dic.get(u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;40以上&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 0) + 1
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(salary_dic)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; salary_dic
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对【薪资】进行预处理之后，还要对【任职要求】的文本进行预处理。因为要做成词云图，需要对文本进行分割并去除掉一些出现频率较多但没有意义的词，我们称之为停用词，所以我们用 jieba 库进行处理。jieba 是一个python实现的分词库，对中文有着很强大的分词能力。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; jieba
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cut_text(text):
    stopwords &lt;/span&gt;=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;熟悉&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;技术&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;职位&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;相关&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;工作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开发&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;使用&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;能力&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;优先&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;描述&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;任职&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;经验&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;经验者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;具有&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;具备&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;以上&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;善于&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;一种&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;以及&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;一定&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;进行&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;能够&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;我们&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; stopword &lt;span&gt;in&lt;/span&gt;&lt;span&gt; stopwords:
        jieba.del_word(stopword)
    
    words &lt;/span&gt;=&lt;span&gt; jieba.lcut(text)
    content &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.join(words)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　预处理完成之后，就可以进行可视化分析了。&lt;/p&gt;
&lt;h2&gt;三、可视化分析&lt;/h2&gt;
&lt;p&gt;　　我们先绘制环状图和柱状图，然后将数据传进去就行了，环状图的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_pie(dic):
    labels &lt;/span&gt;=&lt;span&gt; []
    count &lt;/span&gt;=&lt;span&gt; []
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; key, value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dic.items():
        labels.append(key)
        count.append(value)
        
    fig, ax &lt;/span&gt;= plt.subplots(figsize=(8, 6), subplot_kw=dict(aspect=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;equal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绘制饼状图，wedgeprops 表示每个扇形的宽度&lt;/span&gt;
    wedges, texts = ax.pie(count, wedgeprops=dict(width=0.5), startangle=&lt;span&gt;0)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文本框设置&lt;/span&gt;
    bbox_props = dict(boxstyle=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;square,pad=0.9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, fc=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ec=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, lw=&lt;span&gt;0)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 线与箭头设置&lt;/span&gt;
    kw = dict(xycoords=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, textcoords=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, arrowprops=dict(arrowstyle=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
              bbox&lt;/span&gt;=bbox_props, zorder=0, va=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i, p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(wedges):
        ang &lt;/span&gt;= (p.theta2 - p.theta1)/2. +&lt;span&gt; p.theta1
        y &lt;/span&gt;=&lt;span&gt; np.sin(np.deg2rad(ang))
        x &lt;/span&gt;=&lt;span&gt; np.cos(np.deg2rad(ang))
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置文本框在扇形的哪一侧&lt;/span&gt;
        horizontalalignment = {-1: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 1: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}[int(np.sign(x))]
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于设置箭头的弯曲程度&lt;/span&gt;
        connectionstyle = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;angle,angleA=0,angleB={}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(ang)
        kw[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;arrowprops&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].update({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;connectionstyle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: connectionstyle})
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; annotate()用于对已绘制的图形做标注，text是注释文本，含 'xy' 的参数跟坐标点有关&lt;/span&gt;
        text = labels[i] + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.2f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %((count[i])/sum(count)*100)) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ax.annotate(text, size&lt;/span&gt;=13, xy=(x, y), xytext=(1.35*np.sign(x), 1.4*&lt;span&gt;y),
                     horizontalalignment&lt;/span&gt;=horizontalalignment, **&lt;span&gt;kw)
    plt.show()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　柱状图的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_workYear(data):
    workyears &lt;/span&gt;= list(data[u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;工作经验&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].values)
    wy_dic &lt;/span&gt;=&lt;span&gt; {}
    labels &lt;/span&gt;=&lt;span&gt; []
    count &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 得到工作经验对应的数目并保存到count中&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; workyear &lt;span&gt;in&lt;/span&gt;&lt;span&gt; workyears:
        wy_dic[workyear] &lt;/span&gt;= wy_dic.get(workyear, 0) + 1
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(wy_dic)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; wy_series = pd.Series(wy_dic)&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分别得到 count 的 key 和 value&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; key, value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; wy_dic.items():
        labels.append(key)
        count.append(value)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成 keys 个数的数组&lt;/span&gt;
    x = np.arange(len(labels)) + 1
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将 values 转换成数组&lt;/span&gt;
    y =&lt;span&gt; np.array(count)
    
    fig, axes &lt;/span&gt;= plt.subplots(figsize=(10, 8&lt;span&gt;))
    axes.bar(x, y, color&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#1195d0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    plt.xticks(x, labels, size&lt;/span&gt;=13, rotation=&lt;span&gt;0)
    plt.xlabel(u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;工作经验&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize=15&lt;span&gt;)
    plt.ylabel(u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;数量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize=15&lt;span&gt;)
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据坐标将数字标在图中，ha、va 为对齐方式&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; a, b &lt;span&gt;in&lt;/span&gt;&lt;span&gt; zip(x, y):
        plt.text(a, b&lt;/span&gt;+1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.0f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % b, ha=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, va=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bottom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize=12&lt;span&gt;)
    plt.show()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们再把学历要求和薪资的数据稍微处理一下变成字典形式，传进绘制好的环状图函数就行了。另外，我们还要对【任职要求】的文本进行可视化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; wordcloud &lt;span&gt;import&lt;/span&gt;&lt;span&gt; WordCloud
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绘制词云图&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_wordcloud(content):
    
    wc &lt;/span&gt;=&lt;span&gt; WordCloud(
        font_path &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c:\\Windows\Fonts\msyh.ttf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        background_color &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        max_font_size&lt;/span&gt;=150,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 字体最大值&lt;/span&gt;
        min_font_size=24,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 字体最小值&lt;/span&gt;
        random_state=800, &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 随机数&lt;/span&gt;
        collocations=False, &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 避免重复单词&lt;/span&gt;
        width=1600,height=1200,margin=35, &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 图像宽高，字间距&lt;/span&gt;
&lt;span&gt;    )
    wc.generate(content)

    plt.figure(dpi&lt;/span&gt;=160) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 放大或缩小&lt;/span&gt;
    plt.imshow(wc, interpolation=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;catrom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,vmax=1000&lt;span&gt;)
    plt.axis(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;off&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 隐藏坐标&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;四、成果与总结&lt;/h2&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1458123/201904/1458123-20190402231238392-1018757486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　python数据分析师的学历大部分要求是本科，占了86%。&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1458123/201904/1458123-20190402231330654-1250769002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从柱状图可以看出，python数据分析师的工作经验绝大部分要求1-5年。&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1458123/201904/1458123-20190402231403027-1243117984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　由此可以得出python数据分析的工资为10k-20k的比较多，40以上的也不少，工资高估计要求会比较高，所以我们看一下职位要求。&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1458123/201904/1458123-20190402231507525-48851779.png&quot; alt=&quot;&quot; width=&quot;731&quot; height=&quot;523&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从词云图可看出，数据分析肯定要对数据比较敏感，并且对统计学、excel、python、数据挖掘、hadoop等也有一定的要求。不仅如此，还要求具有一定的抗压能力、解决问题的能力、良好的表达能力、思维能力等。&lt;/p&gt;

</description>
<pubDate>Tue, 02 Apr 2019 15:21:00 +0000</pubDate>
<dc:creator>Max_Lyu</dc:creator>
<og:description>上回说到我们如何如何把拉勾的数据抓取下来的，既然获取了数据，就别放着不动，把它拿出来分析一下，看看这些数据里面都包含了什么信息。（本次博客源码地址：https://github.com/MaxLyu/</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyuzt/p/10643941.html</dc:identifier>
</item>
<item>
<title>《从0开始学架构》——学习笔记（基础篇、高性能篇、高可用篇和可扩展篇） - 姜小泮</title>
<link>http://www.cnblogs.com/jpcflyer/p/10645872.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jpcflyer/p/10645872.html</guid>
<description>&lt;p&gt;&lt;span&gt;       继去年写完&quot;&lt;a href=&quot;https://www.cnblogs.com/jpcflyer/p/9194679.html&quot; target=&quot;_blank&quot;&gt;《从0开始学架构》——学习笔记（基础篇和高性能篇）&lt;/a&gt;&quot;之后，一直忙于项目的开发中，无暇顾及后面的篇章。最近一段时间，忙碌的项目工作已经接近尾声，突然想起来，之前与大家约好的《从0开始学架构》学习笔记的高可用和可扩展篇还未写，于是，这几天整理了一下，把最新的成果给大家分享一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       请尊重作者劳动成果，转载请标明原文链接：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 《从0开始学架构》——学习笔记（基础篇和高性能篇）&quot; href=&quot;https://www.cnblogs.com/jpcflyer/p/9194679.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/jpcflyer/p/9194679.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       首先，还是让我们用一张图把精华总结一下吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/364723/201904/364723-20190402222409919-2069117525.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/364723/201904/364723-20190402222409919-2069117525.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/364723/201904/364723-20190402222409919-2069117525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;       然后简单的总结一下：架构设计的核心就是围绕高性能、高可用和可扩展等方面，针对不同的设计复杂度和关键点，进行架构方案的设计和取舍。图中对各方面的基本概念、场景分类和不同架构的优缺点进行了总结，总结的非常全面。大家在看图的时候，一定要结合自己在实际工作的场景分析，哪些场景是否用了各自场景的架构方案，如果没有，那是为什么？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       《从0开始学构架》整体来说面向的是无架构基础的开发人员，概念丰富，而且通俗易懂。但对于经验丰富的开发人员，则本篇的知识还不够深入。后面准备继续深入阅读李智慧的《大型网站技术架构-核心原理与案例分析》，从更深入全面的角度对架构进行分析，让更多的读者能够与我一起学习到架构的乐趣，敬请期待吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;搜索关注微信公众号“程序员姜小白”，获取更新精彩内容哦。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 02 Apr 2019 14:43:00 +0000</pubDate>
<dc:creator>姜小泮</dc:creator>
<og:description>继去年写完&quot;《从0开始学架构》——学习笔记（基础篇和高性能篇）&quot;之后，一直忙于项目的开发中，无暇顾及后面的篇章。最近一段时间，忙碌的项目工作已经接近尾声，突然想起来，之前与大家约好</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jpcflyer/p/10645872.html</dc:identifier>
</item>
<item>
<title>进行API开发选gRPC还是HTTP APIs? - 依乐祝</title>
<link>http://www.cnblogs.com/yilezhu/p/10645804.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yilezhu/p/10645804.html</guid>
<description>&lt;p&gt;上一篇文章我带着大家体验了一把《&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/10631420.html&quot;&gt;ASP.NET Core 3.0 上的gRPC服务模板初体验(多图)&lt;/a&gt;》，如果有兴趣的可以点击链接进行查看，相信跟着做的你，也是可以跑起来的。这篇文章我们将一起来探讨下gRPC服务如何与HTTP APIs进行比较。用于为应用程序提供API的技术是一个重要的选择，与HTTP API相比，gRPC提供了独特的优势。本文从gRPC的优缺点出发，并推荐了一些建议使用gRPC服务以及不建议使用gRPC服务的场景。&lt;/p&gt;
&lt;blockquote readability=&quot;2.0987654320988&quot;&gt;
&lt;p&gt;作者：依乐祝&lt;br/&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/10645804.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/yilezhu/p/10645804.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开始之前先看一下gRPC与带有j'son的HTTP APIs对比表格&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201904/1377250-20190402221115154-1611563738.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;grpc的优势&quot;&gt;gRPC的优势&lt;/h2&gt;
&lt;h3 id=&quot;性能&quot;&gt;性能&lt;/h3&gt;
&lt;p&gt;gRPC消息使用一种有效的二进制消息格式protobuf进行序列化。Protobuf在服务器和客户机上的序列化非常快。Protobuf序列化后的消息体积很小，能够有效负载，在移动应用程序等有限带宽场景中显得很重要。&lt;/p&gt;
&lt;p&gt;gRPC是为HTTP/2而设计的，它是HTTP的一个主要版本，与HTTP 1.x相比具有显著的性能优势：：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;二进制框架和压缩。HTTP/2协议在发送和接收方面都很紧凑和高效。&lt;/li&gt;
&lt;li&gt;通过单个TCP连接复用多个HTTP/2调用。多路复用消除了&lt;a href=&quot;https://en.wikipedia.org/wiki/Head-of-line_blocking&quot;&gt;线头阻塞&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;代码生成&quot;&gt;代码生成&lt;/h3&gt;
&lt;p&gt;所有gRPC框架都为代码生成提供了一流的支持。gRPC开发的核心文件是&lt;code&gt;*.proto&lt;/code&gt;文件 ，它定义了gRPC服务和消息的约定。根据这个文件，gRPC框架将生成服务基类，消息和完整的客户端代码。&lt;/p&gt;
&lt;p&gt;通过在服务器和客户端之间共享&lt;code&gt;*.proto&lt;/code&gt;文件，可以从端到端生成消息和客户端代码。客户端的代码生成消除了客户端和服务器上的重复消息，并为您创建了一个强类型的客户端。无需编写客户端代码，可在具有许多服务的应用程序中节省大量开发时间。&lt;/p&gt;
&lt;h3 id=&quot;严格的规范&quot;&gt;严格的规范&lt;/h3&gt;
&lt;p&gt;不存在具有JSON的HTTP API的正式规范。开发人员不需要讨论URL，HTTP动词和响应代码的最佳格式。（想想，是用Post还是Get好？使用Get还是用Put好？一想到有选择恐惧症的你是不是又开了纠结，然后浪费了大量的时间）&lt;/p&gt;
&lt;p&gt;该&lt;a href=&quot;https://github.com/gRPC/gRPC/blob/master/doc/PROTOCOL-HTTP2.md&quot;&gt;gRPC规范&lt;/a&gt;是规定有关gRPC服务必须遵循的格式。gRPC消除了争论并节省了开发人员的时间，因为gPRC在各个平台和实现之间是一致的。&lt;/p&gt;
&lt;h3 id=&quot;流&quot;&gt;流&lt;/h3&gt;
&lt;p&gt;HTTP/2为长期的实时通信流提供了基础。gRPC通过HTTP/2为流媒体提供一流的支持。&lt;/p&gt;
&lt;p&gt;gRPC服务支持所有流组合：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一元（没有流媒体）&lt;/li&gt;
&lt;li&gt;服务器到客户端流&lt;/li&gt;
&lt;li&gt;客户端到服务器流&lt;/li&gt;
&lt;li&gt;双向流媒体&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;截至时间超时和取消&quot;&gt;截至时间/超时和取消&lt;/h3&gt;
&lt;p&gt;gRPC允许客户端指定他们愿意等待RPC完成的时间。该&lt;a href=&quot;https://gRPC.io/blog/deadlines&quot;&gt;期限&lt;/a&gt;被发送到服务端，服务端可以决定在超出了限期时采取什么行动。例如，服务器可能会在超时时取消正在进行的gRPC / HTTP /数据库请求。&lt;/p&gt;
&lt;p&gt;通过子gRPC调用截至时间和取消操作有助于实施资源使用限制。&lt;/p&gt;
&lt;h2 id=&quot;推荐使用grpc的场景&quot;&gt;推荐使用gRPC的场景&lt;/h2&gt;
&lt;p&gt;gRPC非常适合以下场景：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;微服务&lt;/strong&gt; - gRPC设计为低延迟和高吞吐量通信。gRPC非常适用于效率至关重要的轻型微服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点对点实时通信&lt;/strong&gt; - gRPC对双向流媒体提供出色的支持。gRPC服务可以实时推送消息而无需轮询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多语言混合开发环境&lt;/strong&gt; - gRPC工具支持所有流行的开发语言，使gRPC成为多语言开发环境的理想选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络受限环境&lt;/strong&gt; - 使用Protobuf（一种轻量级消息格式）序列化gRPC消息。gRPC消息始终小于等效的JSON消息。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;grpc的弱点&quot;&gt;gRPC的弱点&lt;/h2&gt;
&lt;h3 id=&quot;浏览器支持有限&quot;&gt;浏览器支持有限&lt;/h3&gt;
&lt;p&gt;当下，不可能直接从浏览器调用gRPC服务。gRPC大量使用HTTP/2功能，没有浏览器提供支持gRPC客户机的Web请求所需的控制级别。例如，浏览器不允许调用者要求使用的HTTP/2，或者提供对底层HTTP/2框架的访问。&lt;/p&gt;
&lt;p&gt;gRPC Web是gRPC团队的一项附加技术，它在浏览器中提供有限的gRPC支持。gRPC Web由两部分组成：支持所有现代浏览器的JavaScript客户端和服务器上的gRPC Web代理。gRPC Web客户端调用代理，代理将在gRPC请求上转发到gRPC服务器。&lt;/p&gt;
&lt;p&gt;gRPC Web并非支持所有gRPC功能。不支持客户端和双向流，并且对服务器流的支持有限。&lt;/p&gt;
&lt;h3 id=&quot;不是人类可读的&quot;&gt;不是人类可读的&lt;/h3&gt;
&lt;p&gt;HTTP API请求以文本形式发送，可以由人读取和创建。&lt;/p&gt;
&lt;p&gt;默认情况下，gRPC消息使用protobuf编码。虽然protobuf的发送和接收效率很高，但它的二进制格式是不可读的。protobuf需要在*.proto文件中指定的消息接口描述才能正确反序列化。需要额外的工具来分析线路上的Protobuf有效负载，并手工编写请求。&lt;/p&gt;
&lt;p&gt;存在诸如服务器反射和gRPC命令行工具等功能，以帮助处理二进制protobuf消息。另外，Protobuf消息支持与JSON之间的转换。内置的JSON转换提供了一种有效的方法，可以在调试时将Protobuf消息转换为可读的形式。&lt;/p&gt;
&lt;h2 id=&quot;不建议使用grpc的场景&quot;&gt;不建议使用gRPC的场景&lt;/h2&gt;
&lt;p&gt;在以下场景中，建议使用其他框架而不是gRPC：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;浏览器可访问的API&lt;/strong&gt; - &lt;strong&gt;浏览器&lt;/strong&gt;不完全支持gRPC。gRPC-Web可以提供浏览器支持，但它有局限性并引入了服务器代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广播实时通信&lt;/strong&gt; - gRPC支持通过流媒体进行实时通信，但不存在向已注册连接广播消息的概念。例如，在应该将新聊天消息发送到聊天室中的所有客户端的聊天室场景中，需要每个gRPC呼叫以单独地将新的聊天消息流传输到客户端。对于这种场景，&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-3.0&quot;&gt;SignalR&lt;/a&gt;是这种情况的有用框架。SignalR具有持久连接的概念和对广播消息的内置支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程间通信&lt;/strong&gt; - 进程必须承载HTTP/2服务才能接受传入的gRPC调用。对于Windows，进程间通信&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/io/pipe-operations&quot;&gt;管道&lt;/a&gt;是一种快速，轻量级的通信方法。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;继上一篇介绍了《&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/10631420.html&quot;&gt;ASP.NET Core 3.0 上的gRPC服务模板初体验(多图)&lt;/a&gt;》后，我们又一起来探讨了一下gRPC服务的优缺点并给出了gRPC的一些使用场景以及非适用场景，希望对大家的使用有所帮助。最后感谢大家的阅读。另外，文中大多内容来自于https://docs.microsoft.com/en-us/aspnet/core/gRPC/comparison?view=aspnetcore-3.0 有兴趣的小伙伴可以阅读原文进行查看。&lt;/p&gt;
</description>
<pubDate>Tue, 02 Apr 2019 14:32:00 +0000</pubDate>
<dc:creator>依乐祝</dc:creator>
<og:description>上一篇文章我带着大家体验了一把《 'ASP.NET Core 3.0 上的gRPC服务模板初体验(多图)' 》，如果有兴趣的可以点击链接进行查看，相信跟着做的你，也是可以跑起来的。这篇文章我们将一起来</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yilezhu/p/10645804.html</dc:identifier>
</item>
</channel>
</rss>