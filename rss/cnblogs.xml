<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>EF6学习笔记二十八：并发冲突（二） - 张四海</title>
<link>http://www.cnblogs.com/jinshan-go/p/10393583.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jinshan-go/p/10393583.html</guid>
<description>&lt;h3&gt;&lt;span&gt;要专业系统地学习EF推荐《你必须掌握的Entity Framework 6.x与Core 2.0》。这本书作者（汪鹏，Jeffcky）的博客：https://www.cnblogs.com/CreateMyself/&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;继续来弄EF中的并发，虽然上一篇也弄了，但是总觉得不得要领，这次继续书中的学习，回顾上次的学习，可能还是会理解的不太准确。&lt;/p&gt;
&lt;p&gt;并发分为乐观并发和悲观并发，乐观就不用管了，客户端随便去修改。所以我们一直弄的是悲观并发。&lt;/p&gt;
&lt;p&gt;这次所学的东西主要是针对悲观并发我们所采取的有哪些策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端获胜&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库获胜&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端数据库合并获胜&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先我有这样一个疑问，这几个概念是程序员给的，还是官方就有这个说法，乍一听感觉“获胜”带有很强烈的感情色彩啊，计算机术语一般给人的感觉比较高冷吧。&lt;/p&gt;
&lt;p&gt;幸好我在看他人博客的时候发现了EF中有一个枚举，呵呵，还真是&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/819807/201902/819807-20190218000039649-1714236690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在ObjectContext定义了一个方法Refresh，就是要求传递上面枚举作为参数。之前我们了解到早起的EF提供的是ObjectContext供程序员们去派生，现在是改良后的DbContext,他们之间可以互相转换，来眼熟下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  这里写法可能毫无意义，纯粹只是温习下DbContext转换ObjectContext，认识下这个枚举&lt;/span&gt;
EFDbContext ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFDbContext();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context =&lt;span&gt; ((IObjectContextAdapter)ctx).ObjectContext;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 = context.CreateQuery&amp;lt;Student3&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from tb_Students3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
context.Refresh(RefreshMode.ClientWins, stu1);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于ObjectContext和这个枚举就到这里了，后面我没有去弄到，那到底有没有必要用到，我觉得没有，并且作者在书中也是如此&lt;/p&gt;
&lt;p&gt;继续说回上面三个概念，其实理解起来非常简单。客户端获胜就是随便客户端请求更新数据；数据库获胜，那就是数据库说了算的，比如数据库中某张表某个字段设置了阈值；客户端数据库合并获胜，那就是商量着来，下面的内容主要说这个。&lt;/p&gt;
&lt;p&gt;回顾一下上次的内容，要想捕获并发冲突需要做配置，两种方式：并发Token、行版本（RowVersion）&lt;/p&gt;
&lt;p&gt;其实这里就有两个问题&lt;/p&gt;
&lt;p&gt;1、为什么要额外配置才能捕获到并发异常，我用1除以0，就会报异常：&lt;span&gt;System.DivideByZeroException: 尝试除以零。&lt;span&gt;这个为什么就不需要配置才能捕获呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2、并发Token和RowVersion有什么区别？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;第一个问题，如果我们不为属性或者实体配置并发的话，那么其实就是属于乐观并发，数据库中保留最后一次更新的内容，这个完全没有问题，对吧？所以如果你不需要做并发处理的话，那么对你来说并发就不算异常。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;我想想看我上一家公司有没有做并发异常的处理，应该是没有。最主要的是用户少，而且还有权限，各个功能模块都由不同的角色去操作，这就又降低了并发的可能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;第二个问题，其实我是没太弄清楚。并发Token是为某个属性配置，而RowVersion是在实体中新添加的一个属性，那是不是rowVersion是作用这个实体的所有属性呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;前面用到EF提供的DbUpdateConcurrencyException类来处理并发冲突。那客户端获胜和数据库获胜我就不说了，下面来说客户端数据库合并获胜。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;怎么合并，来看看作者怎么说&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;1、如果原始值与数据库中的值不同，意味着数据库中的值已被其他并发客户端更新，就放弃更新此属性，并保留数据库中的值。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;2、如果原始值与数据库中的值相同，意味着此属性不会产生并发冲突，就会正常处理&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;我知道这两句话肯定是重点，但是我理解不了，而且我原封不动地按照作者的代码写并没有得到想要的结果，所以我就不去理会了，来说说我自己的理解&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这里有一个student4类，我为Name属性配置了并发Token&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student4:BaseEntity
{
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Score { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 还有一个Score属性没有配置并发Token，数据库中student原始值为{name:&quot;张三&quot;,score=100},并发进来修改的内容分别为{name:&quot;李四&quot;,score=99}、{name:&quot;王五&quot;,score=88},最后我想要的结果是数据库中修改为{name:&quot;李四&quot;,score=88}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;如果有两个请求进来同时修改同一个Student,我想要的结果就是Name属性只会第一次更新成功，Score因为没有做并发，两次更新都可以。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么思路是不是就是，找到实体中设置了并发的属性，将它的IsModified = false,我是这样想的，我觉得就应该就这样啊，并发的不更新，非并发的更新，有毛病吗？&lt;/p&gt;
&lt;p&gt;但是如何知道这个属性有没有设置并发，这真的很让人抓狂。因为我没找到，按理说EF应该提供了某个方法的。&lt;/p&gt;
&lt;p&gt;你说我们用Fluent API对实体或者属性做的那些配置，那到底怎么去获取这些配置呢？&lt;/p&gt;
&lt;p&gt;我只能想到DataAnnotations方式配置，因为是通过特性的方式来的，那么首先就要知道如何通过DataAnnotations的方式来配置并发属性，还好我找到了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student4:BaseEntity
{
     [ConcurrencyCheck]
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Score { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么最后我是这样写的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (EFDbContext ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFDbContext())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (EFDbContext ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFDbContext())
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students4.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students4.FirstOrDefault();
    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    stu1.Score &lt;/span&gt;= &lt;span&gt;99&lt;/span&gt;&lt;span&gt;;
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    stu2.Score &lt;/span&gt;= &lt;span&gt;88&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        ctx2.SaveChanges();
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tracking =&lt;span&gt; ex.Entries.Single();
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; originalValues =&lt;span&gt; tracking.OriginalValues;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; databaseValues =&lt;span&gt; tracking.GetDatabaseValues();
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentValues =&lt;span&gt; tracking.CurrentValues;
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;original-name:{originalValues.GetValue&amp;lt;string&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Name&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)},original-score:{originalValues.GetValue&amp;lt;int&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Score&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  //  original-name:张三,original-score:100
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;database-name:{databaseValues.GetValue&amp;lt;string&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Name&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)},database-score:{databaseValues.GetValue&amp;lt;int&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Score&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  //  database-name:李四,database-score:99
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;current-name:{currentValues.GetValue&amp;lt;string&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Name&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)},current-score:{currentValues.GetValue&amp;lt;int&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Score&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  //  current-name:王五,current-score:88

        originalValues.SetValues(databaseValues);

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tracking2 =&lt;span&gt; ex.Entries.Single();
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; originalValues2 =&lt;span&gt; tracking2.OriginalValues;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; databaseValues2 =&lt;span&gt; tracking2.GetDatabaseValues();
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentValues2 =&lt;span&gt; tracking2.CurrentValues;
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;original2-name:{originalValues2.GetValue&amp;lt;string&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Name&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)},original2-score:{originalValues2.GetValue&amp;lt;int&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Score&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  //  original2-name:李四,original2-score:99
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;database2-name:{databaseValues2.GetValue&amp;lt;string&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Name&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)},database2-score:{databaseValues2.GetValue&amp;lt;int&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Score&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  //  database2-name:李四,database2-score:99
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;current2-name:{currentValues2.GetValue&amp;lt;string&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Name&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)},current2-score:{currentValues2.GetValue&amp;lt;int&amp;gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Score&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  //  current2-name:王五,current2-score:88

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; concurrencyProp = ((Student4)databaseValues.ToObject()).GetType().GetProperties().Where(x =&amp;gt; Attribute.IsDefined(x, &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(ConcurrencyCheckAttribute))).Single();
        Console.WriteLine(concurrencyProp.Name);
        tracking.Property(concurrencyProp.Name).IsModified &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        ctx2.SaveChanges();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/819807/201902/819807-20190218004616570-1446246778.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后虽然得到了想要的结果但还是感觉不行 ，后面还有一节高级版的解析，利用Polly库来实现重试策略。后面接着学。&lt;/p&gt;

</description>
<pubDate>Sun, 17 Feb 2019 17:01:00 +0000</pubDate>
<dc:creator>张四海</dc:creator>
<og:description>要专业系统地学习EF推荐《你必须掌握的Entity Framework 6.x与Core 2.0》。这本书作者（汪鹏，Jeffcky）的博客：https://www.cnblogs.com/Creat</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jinshan-go/p/10393583.html</dc:identifier>
</item>
<item>
<title>salesforce零基础学习（九十二）使用Ant Migration Tool 实现Metadata迁移 - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/10384767.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/10384767.html</guid>
<description>&lt;p&gt;我们在做项目时经常会使用changeset作为部署工具，但是某些场景使用changeset会比较难操作，比如当我们在sandbox将apex class更改名字想要部署到生产的org或者其他环境的org，使用changeset是没法实现的，这个时候我们需要使用Ant Migration Tool还是更好的。&lt;/p&gt;
&lt;p&gt;salesforce基于metadata进行管理，Ant Migration Tool 是一个基于 Java/Ant的命令行工具用于将metadata从本地迁移至Sales Org. Migration Tool通常用于以下场景：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;开发的项目有很多的改动点，这些改动点使用Web界面可能需要花费很长时间；&lt;/li&gt;
&lt;li&gt;多个阶段Release的发布：开发过程需要重复的构建，测试等才能发布到生产，脚本化的组件检索和部署会更高效；&lt;/li&gt;
&lt;li&gt;重复部署相同的参数：可以检索出所有的metadata，进行更改，以及部署组件的子集；&lt;/li&gt;
&lt;li&gt;IT进行迁移到生产的操作：Force.com Migration Tool对于喜欢脚本化操作的人来说是一个很熟悉的过程；&lt;/li&gt;
&lt;li&gt;定时调度部署。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; Migration Tool基于Metadata API, Metadata API 包含了一组对象，这些对象用于管理你的org的系统预置的以及自定义的metadata， 我们可以使用SOAP calls来操作这些对象。下面介绍 Migration Tool 如何使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Migration Tool 使用前的准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我们使用Migration Tool时，我们需要保证电脑中已经安装了java的运行环境以及ant。由于salesforce对TLS1.0已经弃用，所以建议java JDK使用1.8（曾经java项目使用1.7，尽管按照要求各种配置了 tls信息仍然会有各种位置错误，使用1.8以后便一点问题没有了，所以推荐使用1.8）。&lt;/p&gt;
&lt;p&gt;1. JDK 1.8 下载地址：&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt; 按照要求下载以后正常安装即可，安装完如果想确认电脑中是否已经就绪JDK 1.8环境，可以打开命令行，输入 java -version 回车即可(需要配置java的jdk的环境变量，网上找一大堆，如果不配置，ant运行会有问题，因为找不到jdk位置)；&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190216131156111-385461457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 下载和配置 Ant: Ant下载地址： http://ant.apache.org/bindownload.cgi ， 官方建议下载1.6 及以上版本，目前版本最高为1.10.5， 我这里下载的是这个版本，解压后我放在了C:\ant\apache-ant-1.10.5文件夹下面了。当我们解压以后运行 ant -version后，会发现ant指令是未识别的命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190216133649847-1320315457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;原因是bin目录以及lib目录用于运行ant指令，我们没有将bin目录放在path中。我们右键计算机，选择属性，选择高级，下面系统变量栏new一个，name为ANT_HOME，value为你解压的ant的根目录；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190216134031284-343797902.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;找到你的path的信息，新增%ANT_HOME%\bin即可，如果你的环境是win7，在最后需要加;然后输入下面信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190216134320461-895557502.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重新运行 ant -version，如果提示你安装的ant 安装的版本，说明安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190216135014820-1198580738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 下载 Migration Tool，可以在你的org的setup 搜索出搜索 Tools,然后选择 Lightning Platform Tools and Toolkits.在跳转的页面选择下载Ant Migration Tools即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190216135150508-334740091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190216140225110-449722014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二. Ant Migration Tool的使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以通过以下的步骤去实现 Ant Migration Tool的使用。&lt;/p&gt;
&lt;p&gt;1. 配置 Salesforce Connection 信息&lt;/p&gt;
&lt;p&gt;我们目的是为了检索和部署metadata组件，所以我们需要源及目标的登陆salesforce的账号以及密码等信息，这些信息配置在build.properties，这个文件存在于解压的 Ant Migration Tool 文件中。&lt;/p&gt;
&lt;p&gt;配置信息主要有以下内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;sf.username ： 用于配置的salesforce的账号名称；&lt;/li&gt;
&lt;li&gt;sf.password ： 用于配置的salesforce的账号密码，如果存在security token，将token放在密码后面填写；&lt;/li&gt;
&lt;li&gt;sf.sessionId ： 用于配置的salesforce的sessionId，如果配置sessionId，则不用配置username以及password，两者写一个就好，不能同时存在；&lt;/li&gt;
&lt;li&gt;sf.serverurl ： 根据生产或者测试环境，分别对应于：https://login.salesforce.com / https://test.salesforce.com。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.构建项目检索/部署清单&lt;/p&gt;
&lt;p&gt; 在package.xml中，我们主要需要配置以下的节点的信息：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;fullName：server端想要部署的package的名字，如果不指定则默认unpackage这个package；&lt;/li&gt;
&lt;li&gt;types：这个元素包含了一个name的标签以及多个members标签，用于逻辑哪些类型的哪些metadata组件需要被检索或者部署；&lt;/li&gt;
&lt;li&gt;members：组件元素的API名称；&lt;/li&gt;
&lt;li&gt;name：salesforce 规定的metadata type，可用的metadata type的取值需要参看：&lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.200.0.api_meta.meta/api_meta/meta_types_list.htm&quot; target=&quot;_blank&quot;&gt;https://developer.salesforce.com/docs/atlas.en-us.200.0.api_meta.meta/api_meta/meta_types_list.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;version：文件用于检索和部署的metadata API的版本号。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的具体怎么使用，后面会给一个例子进行简单说明。&lt;/p&gt;
&lt;p&gt;3. 使用Migration Tool 的指令从salesforce org检索/ 部署 / 移除 metadata组件&lt;/p&gt;
&lt;p&gt;Ant的jar包里面封装了好多的soap的标准方法，常见的有 retrieve / deploy等等。通过ant指令在cmd中进行操作即可实现通过ant 部署salesforce的metadata组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三. Ant Migration Tool实际操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 下面通过一个例子来进行演示，例子浅入浅出，描述的是将我一个org里面的custom label全部迁移至另外一个org里面，然后再将指定的custom label从我的新的org删除(检索、部署以及删除操作的简单描述)。想要了解更多使用的小伙伴欢迎查看Ant Migration Tool的官方文档：&lt;a href=&quot;https://resources.docs.salesforce.com/218/latest/en-us/sfdc/pdf/salesforce_migration_guide.pdf&quot; target=&quot;_blank&quot;&gt;https://resources.docs.salesforce.com/218/latest/en-us/sfdc/pdf/salesforce_migration_guide.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218000406761-680142953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中的内容为例子中的层级结构： My First Test中包含了两个文件夹：remove(用于指定移除的 destructureChanges.xml的metadata结构)、retrieve(用于指定需要检索部署的metadata结构)。&lt;/p&gt;
&lt;p&gt;build.properties配置了登陆salesforce org A的账号信息，build.xml中用来配置你的操作指令。这里主要有三个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;retrieveOperation：配置的检索的指令，当使用ant执行这个指令以后，会生成一个retrieveFolder的文件夹，并且读取retrieve/package.xml里面的metadata文件信息生成到retrieveFolder中&lt;/li&gt;
&lt;li&gt;deployOperation： 配置的执行的指令，当使用ant执行这个指令以后，会将retrieveFolder中的文件内容部署到你指定的salesforce org中；&lt;/li&gt;
&lt;li&gt;removeOperation：配置的删除的指令，当使用ant执行这个指令以后，会将 destructiveChanges.xml中的metadata移除。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_98195007-2943-461a-87b9-8939289a3724&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_98195007-2943-461a-87b9-8939289a3724&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_98195007-2943-461a-87b9-8939289a3724&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Sample usage of Salesforce Ant tasks&quot;&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt; basedir&lt;/span&gt;&lt;span&gt;=&quot;.&quot;&lt;/span&gt;&lt;span&gt; xmlns:sf&lt;/span&gt;&lt;span&gt;=&quot;antlib:com.salesforce&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=&quot;build.properties&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;=&quot;env&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Setting default value for username, password and session id properties to empty string 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;         will be treated literally.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;sf.username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;isset &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;sf.username&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;sf.password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;isset &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;sf.password&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;sf.sessionId&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;isset &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;sf.sessionId&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;taskdef &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/salesforce/antlib.xml&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&quot;antlib:com.salesforce&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;classpath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pathelement &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;../ant-salesforce.jar&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;            
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;classpath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;taskdef&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;retrieveOperation&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mkdir &lt;/span&gt;&lt;span&gt;dir&lt;/span&gt;&lt;span&gt;=&quot;retrieveFolder&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sf:retrieve &lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;=&quot;${sf.username}&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;${sf.password}&quot;&lt;/span&gt;&lt;span&gt; sessionId&lt;/span&gt;&lt;span&gt;=&quot;${sf.sessionId}&quot;&lt;/span&gt;&lt;span&gt; serverurl&lt;/span&gt;&lt;span&gt;=&quot;${sf.serverurl}&quot;&lt;/span&gt;&lt;span&gt; maxPoll&lt;/span&gt;&lt;span&gt;=&quot;${sf.maxPoll}&quot;&lt;/span&gt;&lt;span&gt; retrieveTarget&lt;/span&gt;&lt;span&gt;=&quot;retrieveFolder&quot;&lt;/span&gt;&lt;span&gt; pollWaitMillis&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;span&gt; unpackaged&lt;/span&gt;&lt;span&gt;=&quot;retrieve/package.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;deployOperation&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sf:deploy &lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;=&quot;${sf.username}&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;${sf.password}&quot;&lt;/span&gt;&lt;span&gt; sessionId&lt;/span&gt;&lt;span&gt;=&quot;${sf.sessionId}&quot;&lt;/span&gt;&lt;span&gt; serverurl&lt;/span&gt;&lt;span&gt;=&quot;${sf.serverurl}&quot;&lt;/span&gt;&lt;span&gt; maxPoll&lt;/span&gt;&lt;span&gt;=&quot;${sf.maxPoll}&quot;&lt;/span&gt;&lt;span&gt; deployRoot&lt;/span&gt;&lt;span&gt;=&quot;retrieveFolder&quot;&lt;/span&gt;&lt;span&gt; rollbackOnError&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;removeOperation&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sf:deploy &lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;=&quot;${sf.username}&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;${sf.password}&quot;&lt;/span&gt;&lt;span&gt; sessionId&lt;/span&gt;&lt;span&gt;=&quot;${sf.sessionId}&quot;&lt;/span&gt;&lt;span&gt; serverurl&lt;/span&gt;&lt;span&gt;=&quot;${sf.serverurl}&quot;&lt;/span&gt;&lt;span&gt; maxPoll&lt;/span&gt;&lt;span&gt;=&quot;${sf.maxPoll}&quot;&lt;/span&gt;&lt;span&gt; deployRoot&lt;/span&gt;&lt;span&gt;=&quot;remove&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;build.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;salesforce  org A：存在custom label&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218001222875-589483471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;salesforce org B：不存在custom label&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218001259303-278547341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 我们将retrieve文件夹下的package.xml中配置以下的内容，目的是读取所有的custom label&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218001511891-512262691.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 切换到 My First Test 文件夹下，执行 ant -p build.xml可以搜索出来当前目录下所有可以执行的ant的指令，因为我们在build.xml中只配置了3个，所以当前目录下ant的指令总共有3个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218001801191-1691745116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行 ant retrieveOperation便可以将所有的retrieve目录下的metadata xml信息检索出来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218001955560-1452171366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;retrieveFolder中生成相关的文件信息以及package.xml文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218002019640-206694307.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;更改build.properties文件，切换成salesforce org B的账号，执行 ant deployOperation操作便可以将retrieveFolder中的metadata文件部署到salesforce org B中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218002254048-1620361108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Salesforce Org B已经存在刚部署的metadata component了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218002329988-699356905.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在remove文件夹中的destructiveChanges.xml中配置需要移除的metadata组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218003128402-788092674.png&quot; alt=&quot;&quot;/&gt; 执行 ant deleteOperation以后，便可以删除salesforce org B中的配置的metadata组件了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218003218158-587045123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; salesforce org B已经移除指定的metadata组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201902/910966-20190218003028471-1854640993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 总结：&lt;/strong&gt;篇中只是简单的描述Ant Migration Tool的使用，深入的细节的学习还是要自行查看官方提供的文档以及download下来的ant jar中的sample，篇中有问题的欢迎指出，有不懂的欢迎留言。&lt;/p&gt;
</description>
<pubDate>Sun, 17 Feb 2019 16:42:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<og:description>我们在做项目时经常会使用changeset作为部署工具，但是某些场景使用changeset会比较难操作，比如当我们在sandbox将apex class更改名字想要部署到生产的org或者其他环境的or</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zero-zyq/p/10384767.html</dc:identifier>
</item>
<item>
<title>（数据科学学习手札55）利用ggthemr来美化ggplot2图像 - 费弗里</title>
<link>http://www.cnblogs.com/feffery/p/10393566.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feffery/p/10393566.html</guid>
<description>&lt;p&gt;&lt;span&gt;一、简介&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　R中的ggplot2是一个非常强大灵活的数据可视化包，熟悉其绘图规则后便可以自由地生成各种可视化图像，但其默认的色彩和样式在很多时候难免有些过于朴素，本文将要介绍的ggthemr包专门针对原生ggplot2图像进行美化，掌握它之后你就可以创作出更具特色和美感的数据可视化作品。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;二、基础内容&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.1 安装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　不同于常规的R包，ggthemr并没有在CRAN上发布，因此我们需要使用devtools中的install_github()直接从github上安装它，参照github上ggthemr的项目说明页：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;library(devtools)

install_github(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cttobin/ggthemr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　笔者在遵循上述步骤时不太顺利，遇到了如下错误：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217212755444-1306043738.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　不过不用担心，按照上述的错误提示，我们打开对应目录，找到了对应的压缩包：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217212925131-163402094.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实际上我们通过上述语句已经将ggthemr的压缩包下载到本地如上图所示，所以我们可以很容易地使用手动安装本地压缩包的形式来完成ggthemr的安装（注意要吧.tar格式改为.tar.gz格式，我想这可能是install_github()安装失败的原因）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217213056006-1073969206.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　经过上述步骤我们便完成了ggthemr的安装准备工作；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;2.2 傻瓜式用法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在我之前写得某篇文章中使用过Python中matplotlib.pyplot.style，仅仅使用style.use()这个语句，便可傻瓜式地载入各种精美的自适应绘图主题，在ggthemr中也有类似的功能，我们在利用ggplot2创建图像的语句之前，加上ggthemr('主题名称')，便可简单套用多种内建主题，下面是几个简单的例子：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
rm(list=&lt;span&gt;ls())
library(ggplot2)
library(ggthemr)

data(mpg)
data &lt;/span&gt;&amp;lt;-&lt;span&gt; mpg

#chalk风格
ggthemr(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;chalk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p1 &lt;/span&gt;&amp;lt;- ggplot(data=data, aes(displ, hwy))+&lt;span&gt;
  geom_point(mapping &lt;/span&gt;= aes(shape=factor(cyl)))+&lt;span&gt;
  geom_smooth(mapping &lt;/span&gt;= aes(displ,hwy,colour=&lt;span&gt;factor(cyl)))
print(p1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217221059082-1539253446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#dust风格
ggthemr(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dust&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p2 &lt;/span&gt;&amp;lt;- ggplot(data=data, aes(displ, hwy))+&lt;span&gt;
  geom_point(mapping &lt;/span&gt;= aes(shape=factor(cyl)))+&lt;span&gt;
  geom_smooth(mapping &lt;/span&gt;= aes(displ,hwy,colour=&lt;span&gt;factor(cyl)))
print(p2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217221147645-51518127.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#flat风格
ggthemr(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;flat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p3 &lt;/span&gt;&amp;lt;- ggplot(data=data, aes(displ, hwy))+&lt;span&gt;
  geom_point(mapping &lt;/span&gt;= aes(shape=factor(cyl)))+&lt;span&gt;
  geom_smooth(mapping &lt;/span&gt;= aes(displ,hwy,colour=&lt;span&gt;factor(cyl)))
print(p3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217221223808-1882351516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　而官方文档中提到可以用ggthemr_reset()来恢复ggplot2默认风格，但笔者经过实践发现这个函数并不能彻底抹除之前施加的主题模式，因此这里不细说，读者们可以自行尝试；&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三、自定义主题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　尽管ggthemr内建了很多风格迥异的主题，有的过于花哨，有的又过于商务硬朗，除了直接套用这些主题，我们还可以自己创建新的主题以加入自己对构图的想法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br/&gt;3.1 Palettes（调色板）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　palette决定了图像中所有元素的颜色，包括所有图层、背景、网格线等，而swatch则专门用于控制图层元素的配色方案，我们使用define_palette()来构造自定义调色方案，其主要参数如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;swatch：一个颜色向量，用于定义图层元素的配色方案（要注意图像中需要用到的色彩数量要小于等于swatch的向量长度，否则会报错）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;gradient：一个长度为2的向量，lower位置和upper位置用于控制梯度色彩的上下限&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;background:设置背景色彩&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;text：设置文本部分的字体颜色&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;line：设置坐标轴颜色&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;gridline：控制网格线的颜色&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下面我们自定义一个色彩简单的主题：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
demo &amp;lt;-&lt;span&gt; define_palette(
  swatch &lt;/span&gt;= c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;brown&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yellow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), 
  gradient &lt;/span&gt;= c(lower = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, upper = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
)

ggthemr(demo)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　下面来看看应用上述主题之后的图像效果：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
rm(list=&lt;span&gt;ls())
library(ggplot2)
library(ggthemr)

data(mpg)
data &lt;/span&gt;&amp;lt;-&lt;span&gt; mpg

demo &lt;/span&gt;&amp;lt;-&lt;span&gt; define_palette(
  swatch &lt;/span&gt;= c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;brown&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yellow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), 
  gradient &lt;/span&gt;= c(lower = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, upper = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
)

ggthemr(demo)
p &lt;/span&gt;&amp;lt;- ggplot(data=data, aes(displ, hwy))+&lt;span&gt;
  geom_point(mapping &lt;/span&gt;= aes(shape=factor(cyl)))+&lt;span&gt;
  geom_smooth(mapping &lt;/span&gt;= aes(displ,hwy,colour=&lt;span&gt;factor(cyl)))
print(p)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217232458619-1587427050.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为我们的demo主题中还设置了色彩梯度，下面我们绘制密度图（此例来自我的&lt;strong&gt;（数据科学学习手札38）ggplot2基本图形简述&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;）：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
data &amp;lt;- data.frame(matrix(rnorm(&lt;span&gt;200&lt;/span&gt;),nrow=&lt;span&gt;100&lt;/span&gt;&lt;span&gt;))
p &lt;/span&gt;&amp;lt;- ggplot(data, aes(x = X1, y = X2)) +&lt;span&gt;
  stat_density2d(aes(fill &lt;/span&gt;= ..density..), geom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;raster&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, contour =&lt;span&gt; F)
p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217232959818-2144673145.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可以看到，密度图中色彩在预设的红色与绿色之间过渡；&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3.2 ggthemr()的其他关键参数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前文中我们使用函数ggthemr()来挂载主题，而除了最关键的主题参数之外，ggthemr()还有若干控制其他图像样式的参数，如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;layout：用于网格线样式，有clean、clear、minimal、plain、scientific可选，默认clear&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;spacing：用于控制图像在图床上的紧凑程度，越高意味着图像被挤压得越严重，默认1.6，下面分别为0,1,2时的示例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217234730607-1222396791.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217234740261-642224540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217234750365-575306483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;text_size：用于控制文本部分字体大小，默认12&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;type：用于控制背景区域填充的形式，当'inner'时如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217234354105-1939790621.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当设置为'outer'时如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190217234424189-1654467106.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;line_weight：设置坐标轴和网格线的宽度，默认0.5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;set_theme：逻辑型变量，控制是否启动palette传入的主题，默认为TRUE&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3.3 微调图像对比度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　ggthemr中十分贴心地提供了调节图像对比度的函数，具体如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;darken_swatch()&lt;/code&gt; / &lt;code&gt;lighten_swatch()&lt;/code&gt;: 暗化或亮化所有图形元素的对比度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;darken_gradient()&lt;/code&gt; / &lt;code&gt;lighten_gradient()&lt;/code&gt;: 暗化或亮化所有梯度元素的对比度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;darken_palette()&lt;/code&gt; / &lt;code&gt;lighten_palette()&lt;/code&gt;: 暗化或亮化所有元素的对比度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;下面是简单的示例：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
rm(list=&lt;span&gt;ls())
library(ggplot2)
library(ggthemr)

data(mpg)
data &lt;/span&gt;&amp;lt;-&lt;span&gt; mpg


ggthemr(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;chalk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p1 &lt;/span&gt;&amp;lt;- ggplot(data=data, aes(displ, hwy))+&lt;span&gt;
  geom_point(mapping &lt;/span&gt;= aes(shape=factor(cyl)))+&lt;span&gt;
  geom_smooth(mapping &lt;/span&gt;= aes(displ,hwy,colour=&lt;span&gt;factor(cyl)))
print(p1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190218002812812-1842107056.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下面我们来分别调低和调高全局色彩对比度：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
darken_palette(amount = &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;)
print(p1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190218002929904-893976899.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
lighten_palette(amount = &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;)
print(p1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1344061/201902/1344061-20190218003014659-453221625.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　以上就是本文的全部内容，如有笔误望指出。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;参考资料：https://github.com/cttobin/ggthemr&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 17 Feb 2019 16:32:00 +0000</pubDate>
<dc:creator>费弗里</dc:creator>
<og:description>一、简介 R中的ggplot2是一个非常强大灵活的数据可视化包，熟悉其绘图规则后便可以自由地生成各种可视化图像，但其默认的色彩和样式在很多时候难免有些过于朴素，本文将要介绍的ggthemr包专门针对原</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feffery/p/10393566.html</dc:identifier>
</item>
<item>
<title>Springboot 系列（三）Spring Boot 自动配置 - 雪漫士兵</title>
<link>http://www.cnblogs.com/niumoo/p/10393547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/niumoo/p/10393547.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：本 Spring Boot 系列文章基于 Spring Boot 版本 &lt;strong&gt;v2.1.1.RELEASE&lt;/strong&gt; 进行学习分析，版本不同可能会有细微差别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2626549-e38b6d344d19cb76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;关于配置文件可以配置的内容，在 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#common-application-properties&quot;&gt;Spring Boot 官方网站&lt;/a&gt;已经提供了完整了配置示例和解释。&lt;/p&gt;
&lt;p&gt;可以这么说，Spring Boot 的一大精髓就是自动配置，为开发省去了大量的配置时间，可以更快的融入业务逻辑的开发，那么自动配置是怎么实现的呢？&lt;br/&gt;&lt;/p&gt;
&lt;h2 id=&quot;springbootapplication&quot;&gt;1. @SpringBootApplication&lt;/h2&gt;
&lt;p&gt;跟着 Spring Boot 的启动类的注解 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 进行源码跟踪，寻找自动配置的原理。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(
    excludeFilters = {@Filter(
    type = FilterType.CUSTOM,
    classes = {TypeExcludeFilter.class}
), @Filter(
    type = FilterType.CUSTOM,
    classes = {AutoConfigurationExcludeFilter.class}
)}
)
public @interface SpringBootApplication {&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 开启自动配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@ComponentScan&lt;/code&gt; 开启注解扫描&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;SpringBootApplication&lt;/code&gt; 我们可以发现，这是一个简便的注解配置，它包含了自动配置，配置类，包扫描等一系列功能。&lt;/p&gt;
&lt;h2 id=&quot;enableautoconfiguration&quot;&gt;2. @EnableAutoConfiguration&lt;/h2&gt;
&lt;p&gt;继续跟踪，查看&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 源码，里面比较重要的是 &lt;code&gt;@Import&lt;/code&gt; ，导入了一个翻译名为自动配置的选择器的类。这个类其实就是自动配置的加载选择器。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@AutoConfigurationPackage
@Import({AutoConfigurationImportSelector.class})
public @interface EnableAutoConfiguration {
    String ENABLED_OVERRIDE_PROPERTY = &quot;spring.boot.enableautoconfiguration&quot;;

    Class&amp;lt;?&amp;gt;[] exclude() default {};

    String[] excludeName() default {};
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继续跟踪 &lt;code&gt;AutoConfigurationImportSelector.class&lt;/code&gt; .在这个类有一个重要的方法 &lt;code&gt;getCandidateConfigurations&lt;/code&gt;.用于加载 Spring Boot 配置的自动配置类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getAutoConfigurationEntry&lt;/code&gt; 会筛选出有效的自动配置类。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;protected AutoConfigurationEntry getAutoConfigurationEntry(
            AutoConfigurationMetadata autoConfigurationMetadata,
            AnnotationMetadata annotationMetadata) {
        if (!isEnabled(annotationMetadata)) {
            return EMPTY_ENTRY;
        }
        AnnotationAttributes attributes = getAttributes(annotationMetadata);
        List&amp;lt;String&amp;gt; configurations = getCandidateConfigurations(annotationMetadata,
                attributes);
        configurations = removeDuplicates(configurations);
        Set&amp;lt;String&amp;gt; exclusions = getExclusions(annotationMetadata, attributes);
        checkExcludedClasses(configurations, exclusions);
        configurations.removeAll(exclusions);
        configurations = filter(configurations, autoConfigurationMetadata);
        fireAutoConfigurationImportEvents(configurations, exclusions);
        return new AutoConfigurationEntry(configurations, exclusions);
    }   

protected List&amp;lt;String&amp;gt; getCandidateConfigurations(AnnotationMetadata metadata,
            AnnotationAttributes attributes) {
        List&amp;lt;String&amp;gt; configurations = SpringFactoriesLoader.loadFactoryNames(
                getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());
        Assert.notEmpty(configurations,
                &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;
                        + &quot;are using a custom packaging, make sure that file is correct.&quot;);
        return configurations;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下图是 DEBUG 模式下筛选之后的结果，因为我只添加了 web 模块，所以只有 web 相关的自动配置。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/26371673/50733348-ec781400-11c6-11e9-8f0d-01797d797d69.png&quot; alt=&quot;筛选过后的自动配置&quot;/&gt;&lt;/div&gt;
&lt;h2 id=&quot;xxxautoconfiguration-与-xxxproperties&quot;&gt;3. xxxAutoConfiguration 与 xxxProperties&lt;/h2&gt;
&lt;p&gt;在上面的 debug 里，我们看到了成功加载的自动配置，目前只看到了配置类，却还没有发现自动配置值，随便选择一个 &lt;code&gt;AutoConfiguration&lt;/code&gt; 查看源码。&lt;/p&gt;
&lt;p&gt;这里选择了 &lt;code&gt;ServletWebServerFactoryAutoConfiguration&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Configuration
@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)
//判断当前项目有没有这个类
//CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；
@ConditionalOnClass(ServletRequest.class)
//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果
//满足指定的条件，整个配置类里面的配置就会生效； 判断当前应用是否是web应用，如果是，当前配置类生效
@ConditionalOnWebApplication(type = Type.SERVLET)
@EnableConfigurationProperties(ServerProperties.class)
@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,
        ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,
        ServletWebServerFactoryConfiguration.EmbeddedJetty.class,
        ServletWebServerFactoryConfiguration.EmbeddedUndertow.class })
public class ServletWebServerFactoryAutoConfiguration {&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是 &lt;code&gt;@EnableConfigurationProperties(ServerProperties.class)&lt;/code&gt;.他的意思是启动指定类的&lt;br/&gt;&lt;code&gt;ConfigurationProperties&lt;/code&gt;功能；将配置文件中对应的值和 &lt;code&gt;ServerProperties&lt;/code&gt; 绑定起来；并把&lt;br/&gt;&lt;code&gt;ServerProperties&lt;/code&gt; 加入到 IOC 容器中。&lt;/p&gt;
&lt;p&gt;再来看一下 &lt;code&gt;ServerProperties&lt;/code&gt; .&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)
public class ServerProperties {

    /**
     * Server HTTP port.
     */
    private Integer port;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显而易见了，这里使用 ConfigurationProperties 绑定属性映射文件中的 server 开头的属性。结合默认配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 路径spring-boot-autoconfigure-2.1.1.RELEASE.jar
# /META-INF/spring-configuration-metadata.json

    {
      &quot;name&quot;: &quot;server.port&quot;,
      &quot;type&quot;: &quot;java.lang.Integer&quot;,
      &quot;description&quot;: &quot;Server HTTP port.&quot;,
      &quot;sourceType&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;,
      &quot;defaultValue&quot;: 8080
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;达到了自动配置的目的。&lt;/p&gt;
&lt;h2 id=&quot;自动配置总结&quot;&gt;4. 自动配置总结&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;SpringBoot 启动的时候加载主配置类，开启了自动配置功能 @EnableAutoConfiguration 。&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration 给容器导入META-INF/spring.factories 里定义的自动配置类。&lt;/li&gt;
&lt;li&gt;筛选有效的自动配置类。&lt;/li&gt;
&lt;li&gt;每一个自动配置类结合对应的 xxxProperties.java 读取配置文件进行自动配置功能 。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;配置类&quot;&gt;5. 配置类&lt;/h2&gt;
&lt;p&gt;通过自动配置，我们发现已经帮我们省去了大量的配置文件的编写，那么在自定义配置的时候，我们是不是需要编写XML呢？Spring boot 尽管可以使用 &lt;code&gt;SpringApplication&lt;/code&gt;XML 文件进行配置，但是我们通常会使用 &lt;code&gt;@Configuration&lt;/code&gt; 类进行代替，这也是官方推荐的方式。&lt;/p&gt;
&lt;h3 id=&quot;xml配置&quot;&gt;5.1 XML配置&lt;/h3&gt;
&lt;p&gt;定义 helloService Bean.&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;

    &amp;lt;bean id=&quot;helloService&quot; class=&quot;net.codingme.boot.service.HelloService&quot;&amp;gt;&amp;lt;/bean&amp;gt;

&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;引入配置。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@ImportResource(value = &quot;classpath:spring-service.xml&quot;)
@SpringBootApplication
public class BootApplication {

    public static void main(String[] args) {
        SpringApplication.run(BootApplication.class, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;注解配置&quot;&gt;5.2 注解配置&lt;/h3&gt;
&lt;p&gt;此种方式和上面的XML配置是等效的，也是官方推荐的方式。&lt;code&gt;@Configuration&lt;/code&gt; 注解的类（要在扫描的包路径中）会被扫描到。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * &amp;lt;p&amp;gt;
 * 配置类，相当于传统Spring 开发中的 xml-&amp;gt; bean的配置
 *
 * @Author niujinpeng
 * @Date 2018/12/7 0:04
 */
@Configuration
public class ServiceConfig {

    /**
     * 默认添加到容器中的 ID 为方法名（helloService）
     *
     * @return
     */
    @Bean
    public HelloService helloService() {
        return new HelloService();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;附录&quot;&gt;6. 附录&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;13&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;@ConditionalOnJava&lt;/td&gt;
&lt;td&gt;系统的java版本是否符合要求&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;@ConditionalOnBean&lt;/td&gt;
&lt;td&gt;容器中存在指定Bean；&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;@ConditionalOnMissingBean&lt;/td&gt;
&lt;td&gt;容器中不存在指定Bean；&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;@ConditionalOnExpression&lt;/td&gt;
&lt;td&gt;满足SpEL表达式指定&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;@ConditionalOnClass&lt;/td&gt;
&lt;td&gt;系统中有指定的类&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;@ConditionalOnMissingClass&lt;/td&gt;
&lt;td&gt;系统中没有指定的类&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;@ConditionalOnSingleCandidate&lt;/td&gt;
&lt;td&gt;容器中只有一个指定的Bean，或者这个Bean是首选Bean&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;@ConditionalOnProperty&lt;/td&gt;
&lt;td&gt;系统中指定的属性是否有指定的值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;@ConditionalOnResource&lt;/td&gt;
&lt;td&gt;类路径下是否存在指定资源文件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;@ConditionalOnWebApplication&lt;/td&gt;
&lt;td&gt;当前是web环境&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;@ConditionalOnNotWebApplication&lt;/td&gt;
&lt;td&gt;当前不是web环境&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;@ConditionalOnJndi&lt;/td&gt;
&lt;td&gt;JNDI存在指定项&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;文章代码已经上传到 GitHub &lt;a href=&quot;https://github.com/niumoo/springboot/tree/master/springboot-config&quot;&gt;Spring Boot 自动配置&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;完&amp;gt;&lt;br/&gt;本文原发于个人博客：&lt;a href=&quot;https://www.codingme.net/&quot; class=&quot;uri&quot;&gt;https://www.codingme.net&lt;/a&gt; 转载请注明出处&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2626549-e1b06fdf782b78e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 17 Feb 2019 16:16:00 +0000</pubDate>
<dc:creator>雪漫士兵</dc:creator>
<og:description>注意：本 Spring Boot 系列文章基于 Spring Boot 版本 v2.1.1.RELEASE 进行学习分析，版本不同可能会有细微差别。 前言 关于配置文件可以配置的内容，在 'Sprin</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/niumoo/p/10393547.html</dc:identifier>
</item>
<item>
<title>docker完整配置nginx+php+mysql - 冒雨ing</title>
<link>http://www.cnblogs.com/saysmy/p/10389902.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/saysmy/p/10389902.html</guid>
<description>&lt;p&gt;　　docker在1.3.X版本之后还提供了一个新的命令exec用于进入容器，这种方式相对更简单一些，下面我们来看一下该命令的使用：&lt;/p&gt;&lt;div readability=&quot;184.27916213275&quot;&gt;

&lt;p&gt;查找 &lt;a href=&quot;https://hub.docker.com/r/library/nginx/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Docker Hub&lt;/a&gt; 上的 nginx 镜像&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;nginx$ docker search nginx
NAME                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
nginx                     &lt;span class=&quot;typ&quot;&gt;Official&lt;span class=&quot;pln&quot;&gt; build of &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;                        &lt;span class=&quot;lit&quot;&gt;3260&lt;span class=&quot;pln&quot;&gt;      &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;       
jwilder&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;proxy       &lt;span class=&quot;typ&quot;&gt;Automated&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; reverse proxy &lt;span class=&quot;kwd&quot;&gt;for&lt;span class=&quot;pln&quot;&gt; docker c&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;674&lt;span class=&quot;pln&quot;&gt;                  &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
richarvey&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;fpm   &lt;span class=&quot;typ&quot;&gt;Container&lt;span class=&quot;pln&quot;&gt; running &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;+&lt;span class=&quot;pln&quot;&gt; PHP&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;FPM capable &lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;207&lt;span class=&quot;pln&quot;&gt;                  &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
million12&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;php       &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;+&lt;span class=&quot;pln&quot;&gt; PHP&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;FPM &lt;span class=&quot;lit&quot;&gt;5.5&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;5.6&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;7.0&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;NG&lt;span class=&quot;pun&quot;&gt;),&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;CentOS&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;67&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
maxexcloo&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;php       &lt;span class=&quot;typ&quot;&gt;Docker&lt;span class=&quot;pln&quot;&gt; framework container &lt;span class=&quot;kwd&quot;&gt;with&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;and&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;57&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
webdevops&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;nginx       &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;with&lt;span class=&quot;pln&quot;&gt; PHP&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;FPM                              &lt;span class=&quot;lit&quot;&gt;39&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
h3nrik&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;ldap         NGINX web server &lt;span class=&quot;kwd&quot;&gt;with&lt;span class=&quot;pln&quot;&gt; LDAP&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;AD&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; SSL &lt;span class=&quot;kwd&quot;&gt;and&lt;span class=&quot;pln&quot;&gt; pro&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;27&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
bitnami&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx             &lt;span class=&quot;typ&quot;&gt;Bitnami&lt;span class=&quot;pln&quot;&gt; nginx &lt;span class=&quot;typ&quot;&gt;Docker&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Image&lt;span class=&quot;pln&quot;&gt;                      &lt;span class=&quot;lit&quot;&gt;19&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
maxexcloo&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx           &lt;span class=&quot;typ&quot;&gt;Docker&lt;span class=&quot;pln&quot;&gt; framework container &lt;span class=&quot;kwd&quot;&gt;with&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; inst&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;7&lt;span class=&quot;pln&quot;&gt;                    &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这里我们拉取官方的镜像&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;nginx$ docker pull nginx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;等待下载完成后，我们就可以在本地镜像列表里查到 REPOSITORY 为 nginx 的镜像。&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;nginx$ docker images nginx
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              &lt;span class=&quot;lit&quot;&gt;555bbd91e13c&lt;span class=&quot;pln&quot;&gt;        &lt;span class=&quot;lit&quot;&gt;3&lt;span class=&quot;pln&quot;&gt; days ago          &lt;span class=&quot;lit&quot;&gt;182.8&lt;span class=&quot;pln&quot;&gt; MB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;p&gt;创建并运行容器：
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run --name mynginx -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -v /&lt;span&gt;var&lt;/span&gt;/www:/&lt;span&gt;var&lt;/span&gt;/www -v /usr/local/nginx/conf/conf.d:/etc/nginx/conf.d -d nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;-v 添加文件映射关系，这样在宿主机上更改的文件可以直接映射到容器中。这里的目录根据自己实际情况进行映射。&lt;/p&gt;
&lt;p&gt;创建并运行容器后，docker内的nginx即启动成功，无需进入docker内部再次启动nginx, 否则会提示80等端口被占用，因为nginx已经启动。&lt;/p&gt;
&lt;p&gt;这时候便可以访问nginx配置的域名验证了。&lt;/p&gt;
&lt;p&gt;我这里映射的conf.d主要包含nginx的配置文件，php的配置信息为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# php
server {
    charset utf&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
    client_max_body_size 128M;

    listen &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;; ## listen &lt;span&gt;for&lt;/span&gt;&lt;span&gt; ipv4
    #listen [::]:&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; default_server ipv6only=on; ## listen &lt;span&gt;for&lt;/span&gt;&lt;span&gt; ipv6

    server_name www.baidu.com;
    root        &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/&lt;span&gt;www;
    index       index.php;

    location &lt;/span&gt;/&lt;span&gt; {
        #&lt;/span&gt;-&lt;span&gt;e表示只要filename存在，则为真
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!-&lt;span&gt;e $request_filename){
            rewrite  &lt;/span&gt;^(.*)$  /index.php?s=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;  last;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
        # Redirect everything that isn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t a real file to index.php&lt;/span&gt;
        try_files $uri $uri/ /&lt;span&gt;index.php$is_args$args;
    }

    # uncomment to avoid processing of calls to non&lt;/span&gt;-existing &lt;span&gt;static&lt;/span&gt;&lt;span&gt; files by Yii
    #location &lt;/span&gt;~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|&lt;span&gt;rar)$ {
    #    try_files $uri &lt;/span&gt;=&lt;span&gt;404&lt;/span&gt;&lt;span&gt;;
    #}
    #error_page &lt;/span&gt;&lt;span&gt;404&lt;/span&gt; /&lt;span&gt;404&lt;/span&gt;&lt;span&gt;.html;

    # deny accessing php files &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; the /&lt;span&gt;assets directory
    location &lt;/span&gt;~ ^/assets/.*&lt;span&gt;\.php$ {
        deny all;
    }

    location &lt;/span&gt;~&lt;span&gt; \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;0.3&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;;
        #fastcgi_pass unix:&lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/run/php5-&lt;span&gt;fpm.sock;
        try_files $uri &lt;/span&gt;=&lt;span&gt;404&lt;/span&gt;&lt;span&gt;;
    }

    location &lt;/span&gt;~* /&lt;span&gt;\. {
        deny all;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意最后面的fastcgi_pass的ip地址，在php配置常见问题有详细介绍。&lt;/p&gt;


&lt;p&gt;查找Docker Hub上的php镜像&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;fpm$ docker search php
NAME                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
php                       &lt;span class=&quot;typ&quot;&gt;While&lt;span class=&quot;pln&quot;&gt; designed &lt;span class=&quot;kwd&quot;&gt;for&lt;span class=&quot;pln&quot;&gt; web development&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; the PH&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;1232&lt;span class=&quot;pln&quot;&gt;      &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;       
richarvey&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;fpm   &lt;span class=&quot;typ&quot;&gt;Container&lt;span class=&quot;pln&quot;&gt; running &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;+&lt;span class=&quot;pln&quot;&gt; PHP&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;FPM capable &lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;207&lt;span class=&quot;pln&quot;&gt;                  &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
phpmyadmin&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;phpmyadmin     A web &lt;span class=&quot;kwd&quot;&gt;interface&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;for&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;and&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;MariaDB&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;          &lt;span class=&quot;lit&quot;&gt;123&lt;span class=&quot;pln&quot;&gt;                  &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
eboraas&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;apache&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;php        PHP5 on &lt;span class=&quot;typ&quot;&gt;Apache&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;kwd&quot;&gt;with&lt;span class=&quot;pln&quot;&gt; SSL support&lt;span class=&quot;pun&quot;&gt;),&lt;span class=&quot;pln&quot;&gt; built o&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;69&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;zendserver            &lt;span class=&quot;typ&quot;&gt;Zend&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Server&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt; the integrated PHP applicati&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;69&lt;span class=&quot;pln&quot;&gt;        &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;       
million12&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;nginx&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;php       &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;+&lt;span class=&quot;pln&quot;&gt; PHP&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;FPM &lt;span class=&quot;lit&quot;&gt;5.5&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;5.6&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;7.0&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;NG&lt;span class=&quot;pun&quot;&gt;),&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;CentOS&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;67&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
webdevops&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;nginx       &lt;span class=&quot;typ&quot;&gt;Nginx&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;with&lt;span class=&quot;pln&quot;&gt; PHP&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;FPM                              &lt;span class=&quot;lit&quot;&gt;39&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
webdevops&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;apache      &lt;span class=&quot;typ&quot;&gt;Apache&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;with&lt;span class=&quot;pln&quot;&gt; PHP&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;FPM &lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;based on webdevops&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;)&lt;span class=&quot;pln&quot;&gt;    &lt;span class=&quot;lit&quot;&gt;14&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
phpunit&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;phpunit           &lt;span class=&quot;typ&quot;&gt;PHPUnit&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;is&lt;span class=&quot;pln&quot;&gt; a programmer&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;oriented testing f&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;14&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
tetraweb&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;php              PHP &lt;span class=&quot;lit&quot;&gt;5.3&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;5.4&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;5.5&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;5.6&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;7.0&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;for&lt;span class=&quot;pln&quot;&gt; CI &lt;span class=&quot;kwd&quot;&gt;and&lt;span class=&quot;pln&quot;&gt; run&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;12&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
webdevops&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;php             PHP &lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;FPM &lt;span class=&quot;kwd&quot;&gt;and&lt;span class=&quot;pln&quot;&gt; CLI&lt;span class=&quot;pun&quot;&gt;)&lt;span class=&quot;pln&quot;&gt; service container             &lt;span class=&quot;lit&quot;&gt;10&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这里我们拉取官方的镜像,标签为5.6-fpm&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;fpm$ docker pull php&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;lit&quot;&gt;5.6&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;fpm&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为php,标签为5.6-fpm的镜像。&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;php&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;fpm$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
php                 &lt;span class=&quot;lit&quot;&gt;5.6&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;fpm             &lt;span class=&quot;lit&quot;&gt;025041cd3aa5&lt;span class=&quot;pln&quot;&gt;        &lt;span class=&quot;lit&quot;&gt;6&lt;span class=&quot;pln&quot;&gt; days ago          &lt;span class=&quot;lit&quot;&gt;456.3&lt;span class=&quot;pln&quot;&gt; MB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;创建并运行php容器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run -p &lt;span&gt;9000&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt; --name  phpfpm -v /&lt;span&gt;var&lt;/span&gt;/www:/&lt;span&gt;var&lt;/span&gt;/www -d php:&lt;span&gt;5.6&lt;/span&gt;-fpm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这里一定要创建文件映射，或者php容器内有对应的php代码。上一步nginx的文件映射，在这里是找不到的。所以如果没有文件映射，127.0.0.1:9000 在此容器内就找不到文件 。&lt;/p&gt;

&lt;h2&gt;常见问题：&lt;/h2&gt;
&lt;p&gt;启动php容器后，如果访问nginx为：502 Bad Gateway&lt;/p&gt;
&lt;p&gt;尝试以下方法：&lt;/p&gt;
&lt;p&gt;查看php镜像的ip地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker inspect --format=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{{.NetworkSettings.IPAddress}}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; phpfpm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;br/&gt;如：192.168.4.202&lt;br/&gt; &lt;br/&gt;那么修改nginx的conf配置文件，使fastcgi_pass的值为 192.168.4.202:9000&lt;br/&gt;vim /docker/nginx/conf.d/default.conf&lt;br/&gt;fastcgi_pass 192.168.4.202:9000;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;重启nginx容器后，就可以正常访问。&lt;/p&gt;


&lt;p&gt;查找Docker Hub上的mysql镜像&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:/&lt;span class=&quot;pln&quot;&gt;mysql$ docker search mysql
NAME                     DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
mysql                    &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;is&lt;span class=&quot;pln&quot;&gt; a widely used&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; open&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;source relati&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;2529&lt;span class=&quot;pln&quot;&gt;      &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;       
mysql&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;server       &lt;span class=&quot;typ&quot;&gt;Optimized&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Server&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Docker&lt;span class=&quot;pln&quot;&gt; images&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Crea&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;161&lt;span class=&quot;pln&quot;&gt;                  &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
centurylink&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql        &lt;span class=&quot;typ&quot;&gt;Image&lt;span class=&quot;pln&quot;&gt; containing mysql&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Optimized&lt;span class=&quot;pln&quot;&gt; to be li&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;45&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
sameersbn&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql                                                          &lt;span class=&quot;lit&quot;&gt;36&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
google&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql             &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; server &lt;span class=&quot;kwd&quot;&gt;for&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Google&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Compute&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Engine&lt;span class=&quot;pln&quot;&gt;          &lt;span class=&quot;lit&quot;&gt;16&lt;span class=&quot;pln&quot;&gt;                   &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
appcontainers&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql      &lt;span class=&quot;typ&quot;&gt;Centos&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;typ&quot;&gt;Debian&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Based&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Customizable&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Con&lt;span class=&quot;pun&quot;&gt;...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;8&lt;span class=&quot;pln&quot;&gt;                    &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
marvambass&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql         &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Server&lt;span class=&quot;pln&quot;&gt; based on &lt;span class=&quot;typ&quot;&gt;Ubuntu&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;lit&quot;&gt;14.04&lt;span class=&quot;pln&quot;&gt;              &lt;span class=&quot;lit&quot;&gt;6&lt;span class=&quot;pln&quot;&gt;                    &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
drupaldocker&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql       &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;for&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Drupal&lt;span class=&quot;pln&quot;&gt;                                &lt;span class=&quot;lit&quot;&gt;2&lt;span class=&quot;pln&quot;&gt;                    &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
azukiapp&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mysql           &lt;span class=&quot;typ&quot;&gt;Docker&lt;span class=&quot;pln&quot;&gt; image to run &lt;span class=&quot;typ&quot;&gt;MySQL&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;by&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Azuki&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt; http&lt;span class=&quot;pun&quot;&gt;:...&lt;span class=&quot;pln&quot;&gt;   &lt;span class=&quot;lit&quot;&gt;2&lt;span class=&quot;pln&quot;&gt;                    &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;OK&lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这里我们拉取官方的镜像,标签为5.6&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;mysql$ docker pull mysql&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;lit&quot;&gt;5.6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为mysql,标签为5.6的镜像。&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;runoob@runoob&lt;span class=&quot;pun&quot;&gt;:~/&lt;span class=&quot;pln&quot;&gt;mysql$ docker images &lt;span class=&quot;pun&quot;&gt;|&lt;span class=&quot;pln&quot;&gt;grep mysql
mysql               &lt;span class=&quot;lit&quot;&gt;5.6&lt;span class=&quot;pln&quot;&gt;                 &lt;span class=&quot;lit&quot;&gt;2c0964ec182a&lt;span class=&quot;pln&quot;&gt;        &lt;span class=&quot;lit&quot;&gt;3&lt;span class=&quot;pln&quot;&gt; weeks ago         &lt;span class=&quot;lit&quot;&gt;329&lt;span class=&quot;pln&quot;&gt; MB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;创建并运行MySQL容器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run -p &lt;span&gt;3306&lt;/span&gt;:&lt;span&gt;3306&lt;/span&gt; --name mysql -v /usr/local/mysql:/etc/mysql/sqlinit -e MYSQL_ROOT_PASSWORD=&lt;span&gt;123456&lt;/span&gt; -d mysql:&lt;span&gt;5.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的文件映射主要目的是把宿主机的sql数据库数据文件映射到docker mysql容器，方便导入，注意这里mysql容器的目录不能是已有的目录，否则会覆盖。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;这里创建容易已经有了my.cnf，无需自己添加。&lt;/p&gt;

&lt;h2&gt; 拓展&lt;/h2&gt;
&lt;p&gt;使用外部工具navicat连接docker 内mysql&lt;/p&gt;
&lt;p&gt;mysql的host 填写docker内的IP，获取方式为： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; docker inspect --format=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{{.NetworkSettings.IPAddress}}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979473/201902/979473-20190217175955592-1470710005.png&quot; alt=&quot;&quot; width=&quot;727&quot; height=&quot;648&quot;/&gt;&lt;/p&gt;
&lt;p&gt;填写ssh连接信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979473/201902/979473-20190217180058941-1815427262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;即可连接成功！&lt;/p&gt;


&lt;p&gt;docker的容器启动顺序问题会导致容器的IP地址不一致，如果在连接数据库和fastcgi处有用到容器的IP，要注意容器的启动顺序。&lt;/p&gt;
&lt;p&gt;重启容器：docker restart 容器名/容器ID&lt;/p&gt;
&lt;p&gt;关闭容器：docker stop xxx&lt;/p&gt;
&lt;p&gt;开启容器：docker start xxx&lt;/p&gt;
&lt;p&gt;查看正在运行的容器：docker ps&lt;/p&gt;
&lt;p&gt;查看所有容器（包括未运行的容器）： docker ps -a&lt;/p&gt;
&lt;p&gt;创建并运行容器： docker run&lt;/p&gt;

&lt;p&gt; ---------------------------------------&lt;/p&gt;


&lt;h2&gt;1.  thinkphp报错 Undefined class constant 'MYSQL_ATTR_INIT_COMMAND'&lt;/h2&gt;
&lt;p&gt;缺少pdo_mysql扩展，链接数据库失败&lt;/p&gt;
&lt;p&gt;找到php.ini，docker中在/usr/local/etc/php中，复制一份php.ini，增加 &lt;span class=&quot;cnblogs_code&quot;&gt;extension=pdo_mysql.so&lt;/span&gt;  ，重启phpfpm。&lt;/p&gt;
&lt;p&gt;如果还不行，访问phpinfo页面，查看是否有pdo_mysql&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979473/201902/979473-20190217193623501-615016357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果没有，说名扩展不存在，需要编译。&lt;/p&gt;
&lt;p&gt;编译方法如下：&lt;/p&gt;
&lt;p&gt;可以通过两种方式实现&lt;br/&gt;方式一(未验证)：&lt;/p&gt;
&lt;p&gt;pecl pdo_msql&lt;/p&gt;
&lt;p&gt;方式二（已验证可行）：&lt;/p&gt;
&lt;p&gt;到docker的php容器中，在php文件夹下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker-php-ext-install pdo pdo_mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果报 /usr/local/bin/docker-php-ext-enable: cannot create /usr/local/etc/php/conf.d/docker-php-ext-pdo_mysql.ini: Directory nonexistent&lt;br/&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;br/&gt;直接在/usr/local/etc/php目录下面新建 conf.d目录和对应的docker-php-ext-pdo_msql.ini文件&lt;br/&gt;其中docker-php-ext-pdo_msql.ini的内容为：&lt;br/&gt;extension=pdo_mysql.so&lt;/p&gt;

&lt;h2&gt;2. thinkphp 报错 _STORAGE_WRITE_ERROR_:./Application/Runtime/Cache/Home/4e64ea6a2012f26b832b14cbc2152b28.php&lt;/h2&gt;
&lt;p&gt;是因为服务器缓存文件夹的操作权限不够，即Runtime没有权限，把缓存文件全部删除，再给Runtime777权限就行了&lt;/p&gt;
&lt;p&gt;sudo chmod 777 Runtime 或者直接对代码库最外层设置777权限&lt;/p&gt;

&lt;h2&gt;3. thinkphp验证码图片显示不出来&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979473/201902/979473-20190217201257680-2059779290.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;79&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 缺少gd扩展，安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker-php-ext-install gd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可能以下报错：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
If configure fails &lt;span&gt;try&lt;/span&gt; --with-webp-dir=&amp;lt;DIR&amp;gt;&lt;span&gt;
If configure fails &lt;/span&gt;&lt;span&gt;try&lt;/span&gt; --with-jpeg-dir=&amp;lt;DIR&amp;gt;&lt;span&gt;
configure: error: png.h not found.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
apt-&lt;span&gt;get&lt;/span&gt; install libpng-dev libjpeg-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
// 增加freetype配置&lt;br/&gt;docker-php-ext-configure gd --enable-gd-native-ttf --with-freetype-dir=/usr/include/freetype2 --with-png-dir=/usr/include --with-jpeg-dir=/usr/include&lt;p&gt;// 安装&lt;br/&gt;docker-php-ext-install gd
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;php.ini增加php_gd2.so&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979473/201902/979473-20190217201211530-1482875627.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;phpinfo中显示gd库 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/979473/201902/979473-20190217211451696-2128743819.png&quot; alt=&quot;&quot; width=&quot;601&quot; height=&quot;333&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意如果phpinfo的gd库中没有freetype的支持，验证码依然显示不出来, 会报错：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Call to undefined function Think\imagettftext()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果gd库中没有freeType，则按照以下步骤进行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker-php-ext-configure gd --enable-gd-native-ttf --with-freetype-dir=/usr/include/freetype2 --with-png-dir=/usr/&lt;span&gt;include

重新编译：
docker&lt;/span&gt;-php-ext-install gd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果报错：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
configure: error: freetype-config not found.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行： &lt;span class=&quot;cnblogs_code&quot;&gt;apt-&lt;span&gt;get&lt;/span&gt; -y install libfreetype6-dev&lt;/span&gt; ，然后再继续运行上面的命令。 &lt;/p&gt;
&lt;p&gt;gd库中有了freetype，则验证码显示正常了：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/979473/201902/979473-20190217211610034-433197172.png&quot; alt=&quot;&quot; width=&quot;392&quot; height=&quot;85&quot;/&gt;&lt;/p&gt;


&lt;/div&gt;</description>
<pubDate>Sun, 17 Feb 2019 16:13:00 +0000</pubDate>
<dc:creator>冒雨ing</dc:creator>
<og:description>首先了解一个方法： 使用docker exec进入Docker容器 docker在1.3.X版本之后还提供了一个新的命令exec用于进入容器，这种方式相对更简单一些，下面我们来看一下该命令的使用： 接</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/saysmy/p/10389902.html</dc:identifier>
</item>
<item>
<title>彩色图到灰度图究竟是怎么变换的 - shayue111</title>
<link>http://www.cnblogs.com/shayue/p/10393542.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shayue/p/10393542.html</guid>
<description>&lt;p&gt;  之前对彩色图与灰度图仅仅停留在前者是3通道后者是单通道的理解上。我也知道计算机看图片是将它们当成数组，但是一直搞不清楚将一张彩色图转变为灰度图是怎么操作的。当然，很多库函数都提供借口，包括OpenCV、PIL等。这里我参考https://blog.csdn.net/saltriver/article/details/79677116 手动实现将一张彩色图转换为灰色图。当然还是以帅气的哈士奇.jpg作为我的练习对象，看到它敲代码都有动力。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from PIL import  Image
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;rgb_img = Image.open('Husky.jpg')
grey_img = rgb_img.convert('L')&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;rgb_img&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201902/1531067-20190218000659177-332533463.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;grey_img&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201902/1531067-20190218000701505-635146334.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到通过PIL的函数，可以轻松将图片转换为灰度图。&lt;br/&gt;这里的哈士奇照片实在太大了，将它变得小一些。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;rgb_img.thumbnail((800, 800))
grey_img.thumbnail((800, 800))&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;rgb_img&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201902/1531067-20190218000710490-1641603533.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;grey_img&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201902/1531067-20190218000728285-366502829.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最终的效果应该变为类似上面这张灰度图&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 获取彩色图的数据
rgb_arr = np.array(rgb_img)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 窥探下这个数组，第一印象它是一个3维的
rgb_arr&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;array([[[ 93, 153, 203],
        [ 91, 151, 201],
        [ 90, 149, 200],
        ...,
        [  3, 120, 189],
        [  2, 119, 188],
        [  4, 121, 190]],

       [[ 90, 151, 200],
        [ 89, 150, 199],
        [ 90, 150, 200],
        ...,
        [  2, 119, 188],
        [  2, 119, 188],
        [  2, 119, 188]],

       [[ 86, 149, 196],
        [ 86, 149, 196],
        [ 89, 151, 198],
        ...,
        [  1, 119, 188],
        [  1, 119, 188],
        [  1, 118, 187]],

       ...,

       [[ 24,  22,  24],
        [ 25,  22,  24],
        [ 29,  26,  26],
        ...,
        [ 10,   9,  14],
        [  9,   8,  13],
        [  6,   5,  10]],

       [[ 23,  24,  28],
        [ 27,  28,  32],
        [ 44,  45,  48],
        ...,
        [ 10,   9,  14],
        [  7,   6,  11],
        [  6,   5,  10]],

       [[ 38,  41,  47],
        [ 50,  53,  59],
        [ 64,  66,  71],
        ...,
        [  8,   7,  12],
        [  6,   5,  10],
        [  7,   6,  11]]], dtype=uint8)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 行 列 通道
rgb_arr.shape&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;(633, 800, 3)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 宽（列数） 高（行数）
rgb_img.size&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;(800, 633)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 可以用matlibplot.pyplot将数组显示为图片
plt.imshow(rgb_arr)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;matplotlib.image.AxesImage at 0x110cb71d0&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201902/1531067-20190218000739798-48685775.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来对数组进行操作，第一种想法是将3个通道的数据取平均。&lt;br/&gt;那么不禁要问，三个通道的数据是哪些？其实这也是我之前一直有些疑惑的地方。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;x = rgb_arr[0][0]&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# x代表图片中的1个像素点，它的颜色由[93, 153, 203]表示，因此这3个值为3个通道的值
x&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;array([ 93, 153, 203], dtype=uint8)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 那么不难想象，可以通过两个for循环对这些值取平均
grey_arr = np.zeros(rgb_arr.shape[0:2])

# grey_arr.shape (633, 800)

for row in range(633):
    for col in range(800):
        grey_arr[row][col] = (int(rgb_arr[row][col][0]) + int(rgb_arr[row][col][1]) + int(rgb_arr[row][col][2])) / 3&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;grey_arr = np.array(grey_arr, dtype=np.uint8)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;grey_arr&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;array([[149, 147, 146, ..., 104, 103, 105],
       [147, 146, 146, ..., 103, 103, 103],
       [143, 143, 146, ..., 102, 102, 102],
       ...,
       [ 23,  23,  27, ...,  11,  10,   7],
       [ 25,  29,  45, ...,  11,   8,   7],
       [ 42,  54,  67, ...,   9,   7,   8]], dtype=uint8)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;out_img = Image.fromarray(grey_arr)
out_img&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201902/1531067-20190218000749789-230504541.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;std_grey_arr = np.asarray(grey_img)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;std_grey_arr&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;array([[140, 138, 136, ...,  92,  91,  93],
       [138, 137, 137, ...,  91,  91,  91],
       [135, 135, 137, ...,  91,  91,  90],
       ...,
       [ 22,  22,  26, ...,   9,   8,   5],
       [ 23,  27,  45, ...,   9,   6,   5],
       [ 40,  52,  66, ...,   7,   5,   6]], dtype=uint8)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;自行生成的数据和通过借口函数转换得到的标准灰度图的数据还是有一定差距，&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;## 通过给定不同权重的方法再试一次

for row in range(633):
    for col in range(800):
        grey_arr[row][col] = 0.11 * rgb_arr[row][col][0] + 0.59 * rgb_arr[row][col][1] + 0.3 * rgb_arr[row][col][2]&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;grey_arr = np.array(grey_arr, dtype=np.uint8)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;grey_arr&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;array([[161, 159, 157, ..., 127, 126, 128],
       [158, 157, 158, ..., 126, 126, 126],
       [156, 156, 158, ..., 126, 126, 125],
       ...,
       [ 22,  22,  26, ...,  10,   9,   6],
       [ 25,  29,  45, ...,  10,   7,   6],
       [ 42,  54,  67, ...,   8,   6,   7]], dtype=uint8)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;out_img = Image.fromarray(grey_arr)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;out_img&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201902/1531067-20190218000802944-2006413538.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上就是手动实现将RGB图片转为灰度图的过程，注意图片的数值类型为unit8&lt;/p&gt;
</description>
<pubDate>Sun, 17 Feb 2019 16:09:00 +0000</pubDate>
<dc:creator>shayue111</dc:creator>
<og:description>  之前对彩色图与灰度图仅仅停留在前者是3通道后者是单通道的理解上。我也知道计算机看图片是将它们当成数组，但是一直搞不清楚将一张彩色图转变为灰度图是怎么操作的。当然，很多库函数都提</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shayue/p/10393542.html</dc:identifier>
</item>
<item>
<title>SLAM+语音机器人DIY系列：（二）ROS入门——8.理解roslaunch在大型项目中的作用 - 小虎哥哥爱学习</title>
<link>http://www.cnblogs.com/hiram-zhang/p/10393328.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hiram-zhang/p/10393328.html</guid>
<description>&lt;p&gt;&lt;span&gt;ROS&lt;span&gt;机器人操作系统&lt;/span&gt;在机器人应用领域很流行，依托代码开源和模块间协作等特性，给机器人开发者带来了很大的方便。我们的机器人“&lt;span&gt;miiboo&lt;/span&gt;”中的大部分程序也采用ROS进行开发，所以本文就重点对ROS基础知识进行详细的讲解，给不熟悉ROS的朋友起到一个抛砖引玉的作用。本章节主要内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.ROS是什么&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.ROS系统整体架构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.在ubuntu16.04中安装ROS kinetic&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.如何编写ROS的第一个程序hello_world&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.编写简单的消息发布器和订阅器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6.编写简单的service和client&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7.理解tf的原理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8.理解roslaunch在大型项目中的作用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9.熟练使用rviz&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10.在实际机器人上运行ROS高级功能预览&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;1&lt;span&gt;）&lt;/span&gt;&lt;span&gt;roslaunch&lt;/span&gt;&lt;span&gt;的作用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在一个大型的机器人项目中，经常涉及到多个&lt;/span&gt;node&lt;span&gt;协同工作，并且每个&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;都有很多可设置的&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;。比如我们的机器人&lt;/span&gt;miiboo_nav&lt;span&gt;导航项目，涉及到地图服务节点、定位算法节点、运动控制节点、底盘控制节点、激光雷达数据获取节点等众多节点，和几百个影响着这些&lt;/span&gt;node&lt;span&gt;行为模式的&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;。如果全部手动&lt;/span&gt;&lt;span&gt;rosrun&lt;/span&gt;&lt;span&gt;逐个启动&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;并传入&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;，工程的复杂程度将难以想象。所以这个时候就需要用&lt;/span&gt;&lt;span&gt;roslaunch&lt;/span&gt;&lt;span&gt;来解决问题，将需要启动的节点和需要设置的&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;全部写入一个&lt;/span&gt;&lt;span&gt;*.launch&lt;/span&gt;&lt;span&gt;文件，然后用&lt;/span&gt;&lt;span&gt;roslaunch&lt;/span&gt;&lt;span&gt;一次性的启动&lt;/span&gt;&lt;span&gt;*.launch&lt;/span&gt;&lt;span&gt;文件，这样所有的节点就轻而易举的启动了。&lt;/span&gt;miiboo_nav&lt;span&gt;导航项目的&lt;/span&gt;miiboo_nav.launch&lt;span&gt;文件内容如图&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190217225807210-473734253.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;28&lt;span&gt;）&lt;/span&gt;miiboo_nav&lt;span&gt;导航项目的&lt;/span&gt;miiboo_nav.launch&lt;span&gt;文件内容&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;2&lt;span&gt;）&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;标签介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;launch&lt;span&gt;文件采用&lt;/span&gt;&lt;span&gt;xml&lt;/span&gt;&lt;span&gt;文本标记语言进行编写，对比较常用的标签进行介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&amp;lt;launch&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;这个是顶层标签，所有的描述标签都要写在&lt;/span&gt;&amp;lt;launch&amp;gt;&amp;lt;/launch&amp;gt;&lt;span&gt;之间。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
...
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&amp;lt;node&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;这个是最常见的标签，每个&lt;/span&gt;node&lt;span&gt;标签里包含了&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;图中节点的名称属性&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;、该节点所在的包名&lt;/span&gt;&lt;span&gt;pkg&lt;/span&gt;&lt;span&gt;、节点的类型&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;为可执行文件名称，如果节点用&lt;/span&gt;&lt;span&gt;c++&lt;/span&gt;&lt;span&gt;编写；&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;为&lt;/span&gt;&lt;span&gt;*.py&lt;/span&gt;&lt;span&gt;，如果节点用&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;编写）、调试属性&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;（如果&lt;/span&gt;&lt;span&gt;output=&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;screen&lt;/span&gt;&lt;span&gt;”，终端输出信息将被打印到当前控制台，而不是存入&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;日志文件）。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;node &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=”xx” &lt;/span&gt;&lt;span&gt;pkg&lt;/span&gt;&lt;span&gt;=”xx” &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=”xx” &lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;=”xx”&amp;gt;
&lt;/span&gt;&lt;span&gt;...
&amp;lt;/node&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&amp;lt;include&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;这个标签是用于导入另一个&lt;/span&gt;*.launch&lt;span&gt;文件到当前文件。也就是说高层级的&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;文件可以通过&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;的方法调用其它&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;文件，这样可以使&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;文件的组织方式更加模块化，便于移植与复用。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=”$(find &lt;/span&gt;&lt;span&gt;pkg_name)/launch/xx.launch”&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;remap&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个标签是用于将&lt;/span&gt;topic&lt;span&gt;的名称进行重映射，&lt;/span&gt; from&lt;span&gt;中填入原来的&lt;/span&gt;&lt;span&gt;topic&lt;/span&gt;&lt;span&gt;名称，&lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;中填入新的&lt;/span&gt;&lt;span&gt;topic&lt;/span&gt;&lt;span&gt;名称。&lt;/span&gt;&lt;span&gt;&amp;lt;remap&amp;gt;&lt;/span&gt;&lt;span&gt;标签根据放置在&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;文件的层级不同，在相应的层级起作用。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;remap &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;=”orig_topic_name” &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=”new_topic_name”/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;param&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个标签用于在参数服务器中创建或设置一个指定名称的参数值。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=”param_name” &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=”xx” &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=”xx”/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;rosparam&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个标签用于从&lt;/span&gt;yaml&lt;span&gt;文件中一次性导入大量参数到参数服务器中。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rosparam &lt;/span&gt;&lt;span&gt;command&lt;/span&gt;&lt;span&gt;=”load” &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=”$(find &lt;/span&gt;&lt;span&gt;pkg_name)/path_to_file.yaml”&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;arg&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个标签用于在&lt;/span&gt;launch&lt;span&gt;文件中定义用于存储的临时变量，该标签定义的变量只在当前&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;文件中使用。推荐使用第一种方式赋值，这样可以方便从命令行中传入参数。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=”xx” &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=”xx”/&amp;gt;
&lt;/span&gt;&lt;span&gt;或者
&amp;lt;arg name&lt;/span&gt;&lt;span&gt;=”xx” &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=”xx”/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;&lt;strong&gt;group&amp;gt;&lt;span&gt;标签：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个标签用于将&lt;/span&gt;node&lt;span&gt;批量划分到某个命名空间。便于大项目中节点的批量管理。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;group &lt;/span&gt;&lt;span&gt;ns&lt;/span&gt;&lt;span&gt;=”group_one”&amp;gt;
&lt;/span&gt;&lt;span&gt;&amp;lt; node ... &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;... &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;group &lt;/span&gt;&lt;span&gt;ns&lt;/span&gt;&lt;span&gt;=”group_two”&amp;gt;
&lt;/span&gt;&lt;span&gt;&amp;lt; node ... &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;... &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;3&lt;span&gt;）&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;的使用方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先在相应功能包目录下新建一个&lt;/span&gt;launch&lt;span&gt;文件夹。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后在&lt;/span&gt;launch&lt;span&gt;文件夹中新建&lt;/span&gt;&lt;span&gt;*.launch&lt;/span&gt;&lt;span&gt;文件，并按照上面的&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;标签规则编写好&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;文件的内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后在终端中用&lt;/span&gt;roslaunch&lt;span&gt;命令启动&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;文件，命令如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd ~/catkin_ws/&lt;span&gt;
source devel&lt;/span&gt;/&lt;span&gt;setup.bash
roslaunch &lt;/span&gt;&amp;lt;pkg_name&amp;gt; &amp;lt;file_name.launch&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;特别说明，&lt;span&gt;由于&lt;/span&gt;&lt;/span&gt;&lt;span&gt;roslaunch&lt;span&gt;命令会自动去启动&lt;/span&gt;&lt;span&gt;roscore&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，所以不需要像之前使用&lt;/span&gt;&lt;span&gt;rosrun&lt;/span&gt;&lt;span&gt;那样特意先去手动启动&lt;/span&gt;&lt;span&gt;roscore&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 17 Feb 2019 15:54:00 +0000</pubDate>
<dc:creator>小虎哥哥爱学习</dc:creator>
<og:description>摘要 ROS机器人操作系统在机器人应用领域很流行，依托代码开源和模块间协作等特性，给机器人开发者带来了很大的方便。我们的机器人“miiboo”中的大部分程序也采用ROS进行开发，所以本文就重点对ROS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hiram-zhang/p/10393328.html</dc:identifier>
</item>
<item>
<title>Vue2.5开发去哪儿网App 第三章笔记  上 - 最美的烟火</title>
<link>http://www.cnblogs.com/donghaoblogs/p/10393285.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/donghaoblogs/p/10393285.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.  vue 生命周期函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些 生命周期钩子 ，这就给我们提供了执行自定义逻辑的机会&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;生命周期图示&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://doc.vue-js.com/images/lifecycle.png&quot; alt=&quot;&quot; width=&quot;529&quot; height=&quot;979&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_0fda732b-fd0e-42f5-8ae9-4dbdf57f1316&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0fda732b-fd0e-42f5-8ae9-4dbdf57f1316&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0fda732b-fd0e-42f5-8ae9-4dbdf57f1316&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Vue实例生命周期函数&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../../vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        data:{
            test:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;template option&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;{{test}}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        beforeCreate:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。&lt;/span&gt;
&lt;span&gt;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;beforCreate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        },
        created:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。&lt;/span&gt;
&lt;span&gt;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;created&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        },
        beforeMount:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在挂载开始之前被调用：相关的 render 函数首次被调用&lt;/span&gt;
&lt;span&gt;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;beforeMount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$el);
        },
        mounted:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。&lt;/span&gt;
&lt;span&gt;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mounted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$el);

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$data.test &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我改变了test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; beforeUpdate   updated方法&lt;/span&gt;
&lt;span&gt;

        },
        beforeDestroy:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例销毁之前调用。在这一步，实例仍然完全可用。&lt;/span&gt;
&lt;span&gt;            
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;beforeDestrory&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        },
        destroyed:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。&lt;/span&gt;
&lt;span&gt;            
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;destroyed&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        },
        beforeUpdate:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。&lt;/span&gt;
&lt;span&gt;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;boforeUpdate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        },
        updated:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。&lt;/span&gt;
&lt;span&gt;

            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;updated&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$destroy();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发 beforeDestroy 和 destroyed 的钩子。&lt;/span&gt;
&lt;span&gt;        }
    })
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. 模板语法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。&lt;/p&gt;
&lt;p&gt;在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_db35a481-6a9a-4627-8b4f-7035807a4c03&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_db35a481-6a9a-4627-8b4f-7035807a4c03&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_db35a481-6a9a-4627-8b4f-7035807a4c03&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;模板语法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../../vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{name}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;#插值表达式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-text&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;文本&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-html&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; :title&lt;/span&gt;&lt;span&gt;=&quot;title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;被插入的内容都会被当做 HTML —— 数据绑定会被忽略&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-text&lt;/span&gt;&lt;span&gt;=&quot;age + '岁'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;#过滤器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{ msg | capitalize }}

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;v-bind:href&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;百度一下&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


    v-bind 缩写
    &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 完整语法 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;v-bind:href&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 缩写 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;:href&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


    v-on 缩写
    &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 完整语法 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;v-on:click&lt;/span&gt;&lt;span&gt;=&quot;doSomething&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 缩写 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;doSomething&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        data:{
            name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;h1&amp;gt;Dell&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            title:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;this is a title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            age:&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;,
            msg:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;this is a message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            url:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        filters: {
            capitalize: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;value) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;
                value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; value.toString()
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value.charAt(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;).toUpperCase() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; value.slice(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            }
        }
    })
    console.log(app.$data)
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 计算属性，方法，侦听器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_4763e17f-5743-40fa-973f-988d5bb6b4d6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4763e17f-5743-40fa-973f-988d5bb6b4d6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4763e17f-5743-40fa-973f-988d5bb6b4d6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;计算属性，方法，侦听器&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../../vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;获取fullName&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;第一种方式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;{{ fullName }}&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;第二种方式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;{{getFullName()}}&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;第三种方式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{fullName}}

    {{ age }}

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        data:{
            firstName:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dell&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            lastName:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Lee&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            age:&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;,
            fullName:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dell Lee&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; #计算属性  缓存机制，如果依赖的值没有发生改变，不会重新执行&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; computed:{&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     fullName:function () {&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         console.log('fullName 计算了一次')&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         return this.firstName+&quot;   &quot;+this.lastName&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; },&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; methods:{&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     // 即使依赖的值没有发生改变，也会重新执行&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     getFullName:function () {&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         console.log('getFullName 计算了一次')&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         return this.firstName+&quot;   &quot;+this.lastName&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; },&lt;/span&gt;
&lt;span&gt;        watch:{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; #类似computed&lt;/span&gt;
&lt;span&gt;            firstName:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;我执行了firstName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fullName &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.firstName&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lastName
            },
            lastName:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fullName &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.firstName&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lastName
                console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;我执行了lastName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            },
        }
    })
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. 计算属性的 setter,getter&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_ba45600c-0abe-47b2-ae33-2df2e565d69b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ba45600c-0abe-47b2-ae33-2df2e565d69b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ba45600c-0abe-47b2-ae33-2df2e565d69b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;计算属性setter和getter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../../vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{fullName}}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        el:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        data:{
            firstName:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dell&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            lastName:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Lee&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        },
        computed: {
            fullName: {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; #依赖的值发生改变时，执行&lt;/span&gt;
&lt;span&gt;                get:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.firstName &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lastName
                },
                set:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; value.split(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    console.log(name);
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.firstName &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; name[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lastName &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; name[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
                }
            }
        }
    })
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 17 Feb 2019 15:31:00 +0000</pubDate>
<dc:creator>最美的烟火</dc:creator>
<og:description>1. vue 生命周期函数 每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 D</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/donghaoblogs/p/10393285.html</dc:identifier>
</item>
<item>
<title>快速排序算法分析解析 - friendwrite</title>
<link>http://www.cnblogs.com/friendwrite/p/10393255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/friendwrite/p/10393255.html</guid>
<description>&lt;p&gt;快速排序算法的时间复杂度和各次标准数据元素的值关系很大。如果每次选取的标准元素都能均分两个子数组的长度,这样的快速排序过程是一个完全二叉树结构。(即每个结点都把当前数组分成两个大小相等的数组结点,n个元素数组的根结点的分解次数就构成一棵完全二叉树)。这时分解次数等于完全二叉树的深度log2n;每次快速排序过程无论把数组怎样划分、全部的比较次数都接近于n-1次，所以最好情况下快速排序算法的时间复杂度为O(nlog2n):快速排序算法的最坏情况是数据元素已全部有序，此时数据元素数组的根结点的分需次数构成一棵二叉退化树(即单分支二叉树),一棵二叉退化树的深度是n,所以最坏情况下快速排序算法的时间复杂度为O(n2)。般情况下 ,标准元素值的分布是随机的，数组的分邮大数构成模二又树，这样的二叉树的深度接近于log2n, 所以快速排序算法的平均(或称期望）时间复杂度为O(nlog2n)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; findKey(&amp;amp;&lt;span&gt;$arr&lt;/span&gt;, &lt;span&gt;$low&lt;/span&gt;, &lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;$target&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$low&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;$low&lt;/span&gt; &amp;lt; &lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;) {

        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;$low&lt;/span&gt; &amp;lt; &lt;span&gt;$hight&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;$target&lt;/span&gt; &amp;lt; &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;]) {
            &lt;/span&gt;&lt;span&gt;$hight&lt;/span&gt;--&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$low&lt;/span&gt;] = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;$low&lt;/span&gt; &amp;lt; &lt;span&gt;$hight&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;$target&lt;/span&gt; &amp;gt; &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$low&lt;/span&gt;&lt;span&gt;]) {
            &lt;/span&gt;&lt;span&gt;$low&lt;/span&gt;++&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$hight&lt;/span&gt;] = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$low&lt;/span&gt;&lt;span&gt;];
    }
    &lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$hight&lt;/span&gt;]=&lt;span&gt;$target&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt; quickSort(&amp;amp;&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$low&lt;/span&gt;,&lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;$posKey&lt;/span&gt;=findKey(&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$low&lt;/span&gt;,&lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$low&lt;/span&gt;&amp;lt;&lt;span&gt;$posKey&lt;/span&gt;&lt;span&gt;){
        quickSort(&lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$low&lt;/span&gt;,&lt;span&gt;$posKey&lt;/span&gt;-1&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$posKey&lt;/span&gt;&amp;lt;&lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;){
        quickSort(&lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$posKey&lt;/span&gt;+1,&lt;span&gt;$hight&lt;/span&gt;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt; = [12, 56, 98, 32, 16, 34, 2, 9, 1&lt;span&gt;];

&lt;/span&gt;&lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
quickSort(&lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;, 0, &lt;span&gt;$len&lt;/span&gt; - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);&lt;span&gt;die&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 17 Feb 2019 15:20:00 +0000</pubDate>
<dc:creator>friendwrite</dc:creator>
<og:description>快速排序算法的时间复杂度和各次标准数据元素的值关系很大。如果每次选取的标准元素都能均分两个子数组的长度,这样的快速排序过程是一个完全二叉树结构。(即每个结点都把当前数组分成两个大小相等的数组结点,n个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/friendwrite/p/10393255.html</dc:identifier>
</item>
<item>
<title>我们为什么要搞长沙.NET技术社区？ - 溪源More</title>
<link>http://www.cnblogs.com/xiyuanMore/p/10393240.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiyuanMore/p/10393240.html</guid>
<description>&lt;p&gt;　　感谢大家的关注，请允许我冒昧的向大家汇报长沙.NET技术社区第一次交流会的会议进展情况。&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;活动过程汇报&lt;/h2&gt;
&lt;p&gt;　　2019年2月17日，继深圳，广州，西安，成都，苏州相继成立了.net社区之后，酝酿已久的长沙.net社区也终于组织了第一次线下交流会。&lt;/p&gt;
&lt;p&gt;　　作为第一次交流活动，之前只在小范围进行了宣传，但依然有幸邀请到.net社区爱好者十余位，大家一起分享自己过去的工作经历，以及对于社区的美好愿景，思想的火花在此碰撞，取得了非常不错的效应。&lt;/p&gt;
&lt;p&gt;　　活动分成了三个环节，一个是自我介绍环节，其次是成立社区的目标和实现形式，一个是社区成立所面临的问题。大家针对相关内容进行了讨论，氛围热烈，效果显著，为后期社区的进一步发展种下了一颗扎实的种子。 &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201902/191302-20190217231608956-1037718960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 align=&quot;center&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;　　长沙，固然是一座优秀的历史文化名城，但IT产业的发展水平，相对于北上广深来说，则远远不如。在近日发布的中国互联网产业排行榜100强中，没有一家长沙本土的IT企业，而在湖南规模产业一百强中，上榜的IT企业也只有不过两家。&lt;/p&gt;
&lt;p&gt;　　虽然必须承认，是经济基础决定的上层建筑，资本市场对于一线城市的热捧才造就了今日北京，上海，广州，深圳，杭州地区IT产业的辉煌。一家又一家优秀的IT企业的诞生，为地方带来了巨大的经济效应，同时也促进了IT技术社群的繁荣。而反过来，极其繁荣的IT产业背后，紧随企业发展步伐的IT技术社区也同样是一个充满黄金的宝库。IT企业和IT社区，就像是水乳交融的关系，互相紧密衔接，密不可分。 &lt;/p&gt;
&lt;p&gt;　　每一个回到长沙的优秀开发者们都会说的一句话是：长沙IT社区非常的闭塞。确实如此，长沙技术社区之闭塞，是中国内地城市的缩影。当你回到长沙时，也许也曾想知道哪家企业拥有非常不错的技术讨论氛围，或者在哪里可以找到为你提供技术思路的组织，这一点之前大概无法实现。虽然说，互联网的发达，可以让你通过网络找到任何你想要的，但是，或许有那么一段时间，你也会渴望通过线下的交流，获得更多的交流机会。&lt;/p&gt;
&lt;p&gt;　　当然，曾经一度，长沙的IT社区更加闭塞，后来有了致力于互联网社区环境的长沙互联网活动基地（其前身是唐胡子俱乐部），唐胡子俱乐部此前在长沙每年举办了数十次大大小小的技术活动，为不少开发者提供了一些开天窗看世界的机会。&lt;/p&gt;
&lt;p&gt;　　不过这些活动更多的是更高格局的技术交流、或职业规划、企业发展规划等，其层次太高无法为不同层次的开发者带来便利。尤其是.NET开发者社区，或者整个后端开发、容器、大数据等开发者社区，也更是如此，技术活动或少之又少，没办法为更多在工作过程中、感觉到一脸懵逼的新手们或者技术吃不饱的高手们提供太多帮助。 &lt;/p&gt;
&lt;p&gt;　　今天的第一次技术交流活动，汇集的代表有的从北上广深杭回来，有的则是在本土土生土长。大家都来自不同的行业，但都有一致的标签，那就是技术出生的资深开发者，对于技术社区充满了期待，而其他城市.NET社区的成立，更是为长沙社区的成立树立了榜样。&lt;/p&gt;
&lt;p&gt;　　我们也期待，通过建立社区、通过大家的努力，能在长沙开发者技术圈形成破冰效应，让我们的开发者闭塞的技术氛围有所改观。 &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;　　我们为什么一定要搞社区呢？&lt;/p&gt;
&lt;p&gt;　　我们认为在每个人的职场过程中，或许我们曾经做过不同的项目或者产品，也接触过不同的人，但脱掉业务的标签，其实大家都是一类人，都是为了实现自己梦想的奋斗者，代码是我们改变世界的方式和手段。而IT行业与其他行业的显著特点，正是在于他的飞速发展特性。尤其是市场的飞速变化，更是带来了技术的飞速变化。而开发语言尤其如此，每一门优秀的开发语言，如果不适应市场的变化，就容易被淘汰。&lt;/p&gt;
&lt;p&gt;　　而开发者同样如此，从来没有一成不变的稳定，只有一如既往的持续学习。在学习过程中，有许多方式，例如看书、看论坛灌水、培训听讲座等形式，究竟哪种形式更好，每个人有自己不同的观点。但是，无论哪种方式，我们都会面临一个类似的需求，那就是要跟人交流。定期的总结自己的学习到的知识，定期的分享知识。&lt;/p&gt;
&lt;p&gt;　　而我们成立社区，就是为了知识的分享。每一位优秀的开发者共同参与其中，交流学习心得，将优秀的技术、理念、思想、优秀的管理方法播撒给更多人，让大家感受到知识的价值。&lt;/p&gt;
&lt;p&gt;　　总体上，组建社区的目的大概可以分成以下三个方面。 &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1、      组建社区，是为了栽树，着眼于未来，从今天开始做。还是那句话，尽绵薄之力改变社区环境。毕竟长沙这么大，没有人能妄图改变所有开发者，总有叫不醒的人，先从改变周边开始。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2、      沉淀互联网技术氛围，形成互联网社区文化。让北上广深回来的优秀开发者们将成熟的社区模式带回来，再与长沙本土的互联网社区融合，逐渐形成长沙本土氛围的互联网文化。 &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3、      抱团学习，互相赋能。有了优秀的领头羊，才能知道学习的方向，而大家共同努力，可以形成协同效应，实现学习效果的倍增。 &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;我们打算怎么搞？ &lt;/h2&gt;
&lt;p&gt;总结了以下几点： &lt;/p&gt;
&lt;p&gt;1、    打造属于开发者自己的技术社区。其核心思想依然是，开放、分享、合作，互利、共赢的互联网精神。 &lt;/p&gt;
&lt;p&gt;2、    不是为了成立吹水群线下交流组织，而是通过优秀开发者的榜样力量、和热心社区事业的开发者共同努力，尽绵薄之力改善长沙互联网环境。&lt;/p&gt;
&lt;p&gt;3、    社区活动。通过社区活动的形式，带来技能的分享。带动长沙本土开发者的互联网意识，让大家明确学习的目标，形成积极乐观的学习态度，为社群的进一步完善提供助力。 &lt;/p&gt;
&lt;p&gt;4、    博客矩阵，鼓励社区参与者分享笔记和博客，实现自己技能的沉淀。&lt;/p&gt;
&lt;p&gt;5、    文档编译。通过带领开发者参与翻译文档、编纂技术资料的形式，为技术圈技能的沉淀提供助力。&lt;/p&gt;
&lt;p&gt;6、    开源贡献。通过带领开发者参与一些开源项目，为开源技术社区提供贡献。 &lt;/p&gt;
&lt;p&gt;7、    不限语言。.NET开发或互联网开发只是一个开头，但是语言并非仅仅局限于.NET本身。 &lt;/p&gt;
&lt;p&gt;8、    小目标：2019年4月底，5月初组织第一次线下技术分享，争取年内组织较大规模的活动3-4次。&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;组织形式 &lt;/h2&gt;
&lt;p&gt;1、    参考其他城市的先进典型，成立长沙.NET技术社区。&lt;/p&gt;
&lt;p&gt;2、    总体上分为两个部分，一部分主要负责开源项目和各类基础文档的编纂和翻译工作；一部分则负责组织活动和宣传工作。   &lt;/p&gt;
&lt;p&gt;3、    推选李文强担任社区会长（执行主席），推选长沙地区互联网活动发起人唐胡子担任名誉主席，长沙社区发起人邹溪源担任秘书长。 &lt;/p&gt;
&lt;p&gt;4、    以上领导干部同志都是无偿劳动、带头贡献，社区拳头最大的依然是开发者，随时可以罢免领导干部。 &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;谁能参与？ &lt;/h2&gt;
&lt;p&gt;　　人人皆可参与其中，开放是我们的基本原则，不管你是不是长沙IT社区的开发者、不管你什么语言、什么工作岗位，不管你想参与其中、或者你只是想看看热闹，你都可以参与其中。&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;如何参与？&lt;/h2&gt;
&lt;p&gt;　　您可以随时加入以下微信群，跟大家一起愉快的交流。我们非常诚挚的欢迎大家过来提意见，不管是正面的，还是反对的。都是我们进步的阶梯。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201902/191302-20190217231626316-958363366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sun, 17 Feb 2019 15:18:00 +0000</pubDate>
<dc:creator>溪源More</dc:creator>
<og:description>我们为什么要搞长沙.NET技术社区？ 感谢大家的关注，请允许我冒昧的向大家汇报长沙.NET技术社区第一次交流会的会议进展情况。 活动过程汇报 2019年2月17日，继深圳，广州，西安，成都，苏州相继成</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiyuanMore/p/10393240.html</dc:identifier>
</item>
</channel>
</rss>