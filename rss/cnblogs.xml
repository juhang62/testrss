<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Mybatis简单入门 - 风沙迷了眼</title>
<link>http://www.cnblogs.com/fsmly/p/10324491.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fsmly/p/10324491.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、Mybatis概述&lt;/span&gt;&lt;/strong&gt;　　&lt;/p&gt;
&lt;p&gt;　　MyBatis 是支持普通 SQL 查询（相比较于Hibernate的封装，Mybatis是半自动化的JDBC封装，一个特点就是Mybatis执行的SQL查询语句需要自己在配置文件中写），存储过程和高级映射的优秀持久层框架。MyBatis 消除了几乎所有的 JDBC 代码和参数的手工设置以及对结果集的检索。MyBatis 可以使用简单的XML 或注解用于配置和原始映射，将接口和 Java 的 POJO（Plain Old Java Objects，普通的Java 对象）映射成数据库中的记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、Mybatis原理解析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;span&gt;下面以Mybatis简单的执行流程&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126100834916-1243928277.png&quot; alt=&quot;&quot; width=&quot;597&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1、加载mybatis全局配置文件（数据源、mapper映射文件等），解析配置文件，MyBatis基于XML配置文件生成Configuration，和一个个MappedStatement（包括了参数映射配置、动态SQL语句、结果映射配置），其对应着&amp;lt;select | update | delete | insert&amp;gt;标签项。&lt;/p&gt;
&lt;p&gt;　　2、SqlSessionFactoryBuilder通过Configuration对象生成SqlSessionFactory，用来开启SqlSession。&lt;/p&gt;
&lt;p&gt;　　3、SqlSession对象完成和数据库的交互：&lt;/p&gt;
&lt;p&gt;　　a、用户程序调用mybatis接口层api（即Mapper接口中的方法）&lt;/p&gt;
&lt;p&gt;　　b、SqlSession通过调用api的Statement ID找到对应的MappedStatement对象&lt;/p&gt;
&lt;p&gt;　　c、通过Executor（负责动态SQL的生成和查询缓存的维护）将MappedStatement对象进行解析，sql参数转化、动态sql拼接，生成jdbc Statement对象&lt;/p&gt;
&lt;p&gt;　　d、JDBC执行sql。&lt;/p&gt;
&lt;p&gt;　　e、借助MappedStatement中的结果映射关系，将返回结果转化成HashMap、JavaBean等存储结构并返回。&lt;/p&gt;
&lt;p&gt; 　　&lt;strong&gt;&lt;span&gt;下面是Mybatis的框架原理图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126102125995-2121531265.png&quot; alt=&quot;&quot; width=&quot;544&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、Mybatis简单实例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　（1）导入相关jar包以及Mybatis运行环境核心jar包和连接数据库的包&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126102722635-1659459830.png&quot; alt=&quot;&quot; width=&quot;243&quot; height=&quot;238&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）创建一张简单的数据表&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126173413800-627841428.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;77&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）创建Java对象（PO类型）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_b4c49b0f-648e-4613-8594-db645748f5f9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b4c49b0f-648e-4613-8594-db645748f5f9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b4c49b0f-648e-4613-8594-db645748f5f9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String sex;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAddress() {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getSex() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAddress(String address) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSex(String sex) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;User{&quot; +
&lt;span&gt;53&lt;/span&gt;                 &quot;id=&quot; + id +
&lt;span&gt;54&lt;/span&gt;                 &quot;, username='&quot; + username + '\'' +
&lt;span&gt;55&lt;/span&gt;                 &quot;, password='&quot; + password + '\'' +
&lt;span&gt;56&lt;/span&gt;                 &quot;, address='&quot; + address + '\'' +
&lt;span&gt;57&lt;/span&gt;                 &quot;, sex='&quot; + sex + '\'' +
&lt;span&gt;58&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;User实体类&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 　　（4）创建Mybatis核心配置文件（SqlMapConfig.xml）&lt;/p&gt;
&lt;p&gt;　　在核心配置文件配置连接数据库的相关信息，（如果是和Spring整合，则可以放在Spring配置文件中进行对数据库的配置）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f5541aa1-66e7-4ca7-901e-963e1e386f1d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f5541aa1-66e7-4ca7-901e-963e1e386f1d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f5541aa1-66e7-4ca7-901e-963e1e386f1d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;加载资源文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;    &amp;lt;properties resource=&quot;jdbc.properties&quot;&amp;gt;&amp;lt;/properties&amp;gt;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    &amp;amp;lt;!&amp;amp;ndash;settings配置LOG4J输出日志 &amp;amp;ndash;&amp;amp;gt;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    &amp;lt;settings&amp;gt;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        &amp;lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&amp;gt;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    &amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;typeAliases配置包的别名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;environments配置了数据库连接，配置了driver、url、username、password属性&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;property name=&quot;&quot; value=&quot;&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;transactionManager&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql:///mybatis01&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;123&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置一个SQL语句和映射的配置文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;UserMapper.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Mybatis核心配置文件&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 　　（5）创建一个Mapper.xml文件，对应编写所需要的Sql查询操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f62f4edf-786b-4281-bd0d-85f02aaa7a73&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f62f4edf-786b-4281-bd0d-85f02aaa7a73&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f62f4edf-786b-4281-bd0d-85f02aaa7a73&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mapper为根元素，namespace指定了命名空间&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义一个SELECT查询&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;parameterType:指定输入参数的类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;#{}表示占位符&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;#{id}：其中的id表示的就是接受的输入参数，
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                参数名称就是id，
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        这里指出：如果输入参数是简单类型，#{}中的参数名可以任意设置（value或者其他名称）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;resultType：指定输出类型(即指定输出结果所映射的Java对象类型)&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        SELECT * FROM t_user WHERE id = #{id}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserMapper配置文件&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 　　（7）创建测试程序，对刚刚编写的select查询进行测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_1910f463-dabd-43e4-8117-eb4c4ddd53c7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1910f463-dabd-43e4-8117-eb4c4ddd53c7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1910f463-dabd-43e4-8117-eb4c4ddd53c7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.first;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; User findUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到mybatis配置文件&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         String resource = &quot;SqlMapConfig.xml&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到配置文件的文件流信息&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         InputStream inputStream =&lt;span&gt; Resources.getResourceAsStream(resource);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建会话工厂 传入mybatis的配置文件信息&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过会话工厂得到SqlSession&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过sqlSession来操作数据库
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数就是映射文件中statment的id：namespace +statment的id
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个参数就是制定映射文件中的parameterType类型的参数&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         User user = sqlSession.selectOne(&quot;test.findUserById&quot;,1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(user);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放会话资源&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            sqlSession.close();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         Test test = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Test();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            System.out.println(test.findUserById());
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Test测试程序&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 　　（8）加入Log4j日志文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_23f91360-85f0-4cfe-b0bf-9e7a680c5a39&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_23f91360-85f0-4cfe-b0bf-9e7a680c5a39&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_23f91360-85f0-4cfe-b0bf-9e7a680c5a39&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;### direct log messages to stdout ###
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; log4j.rootLogger=&lt;span&gt;DEBUG, stdout
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; log4j.appender.stdout=&lt;span&gt;org.apache.log4j.ConsoleAppender
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; log4j.appender.stdout.layout=&lt;span&gt;org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Log4j.properties&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　（9）测试结果&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126174215171-1736790324.png&quot; alt=&quot;&quot; width=&quot;481&quot; height=&quot;222&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 4.其他CRUD操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　（1）insert操作&lt;/p&gt;
&lt;p&gt;　　在Mapper文件中添加响应的SQL配置，以及使用MySQL中的LAST_INSERT_ID()函数得到增加的数据的主键值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;addUser&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
        现在需要得到刚刚插入的记录中的主键值,只适用于自增主键的情况
        LAST_INSERT_ID()
        keyProperty：将查询到的主键值设置到parameterType指定对象中的那个属性
        order：指定相对于insert的顺序
        resultType：指定映射结果的结果类型
        &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;selectKey &lt;/span&gt;&lt;span&gt;keyProperty&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; order&lt;/span&gt;&lt;span&gt;=&quot;AFTER&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            SELECT LAST_INSERT_ID()
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;selectKey&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        INSERT INTO t_user(id,username,password,address,sex) VALUES(#{id},#{username},#{password},#{address}, #{sex});
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　插入数据的日志信息，没有使用sqlSession.commit();之前的日志情况&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128144410629-701326141.png&quot; alt=&quot;&quot; width=&quot;464&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从上面的图中可以看出，没有添加commit的时候，事务进行了回滚，所以要想添加数据，需要自己手动提交（在没有整合Spring之前）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128151331627-1363470053.png&quot; alt=&quot;&quot; width=&quot;543&quot; height=&quot;172&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　附上insertUser的函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_a504dd77-7aed-4fed-945e-f967945555a8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a504dd77-7aed-4fed-945e-f967945555a8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a504dd77-7aed-4fed-945e-f967945555a8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; inserUser()  &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到配置文件的文件流信息&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         User user = &lt;span&gt;new&lt;/span&gt; User(&quot;World&quot;,&quot;1234&quot;,&quot;武汉市&quot;,&quot;男&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         sqlSession.insert(&quot;test.addUser&quot;&lt;span&gt;,user);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        System.out.println(user.getId());
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放会话资源&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            sqlSession.close();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;inserUser函数&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　（2）模糊查询&lt;/p&gt;
&lt;p&gt;　　首先配置Mapper文件，${}和#{}的简单区别如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        模糊查询可能会查询多条记录
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        resultType:指定的就是查询结果对应的单条记录类型
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        ${}:表示将输入的参数不加任何的修饰，直接作为字符串拼接在SQL中
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        但是这样直接拼接，容易导致SQL注入的隐患
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        ${value}中的value表示接受的输入参数，注意如果输入参数是简单类型，其中的形参只能用value
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserByUsername&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        SELECT * FROM t_user WHERE username LIKE '%${value}%'
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128150245687-1531827441.png&quot; alt=&quot;&quot; width=&quot;853&quot; height=&quot;210&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用查询的时候碰到一个小错误，由于之前测试的insert方法，其中在User实体类中添加了有参构造函数，所以出现了下面的错误，分析原因就是：使用Mybatis查询的时候需要在实体类中加入无参构造方法（当然如果实体类本身没有构造函数，就会是默认的无参构造函数）&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128145337663-1055648319.png&quot; alt=&quot;&quot; width=&quot;656&quot; height=&quot;21&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　附上findByUsername的函数实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e43b4f53-64bb-4628-aae6-5b4cece2993d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e43b4f53-64bb-4628-aae6-5b4cece2993d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e43b4f53-64bb-4628-aae6-5b4cece2993d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; findUserByUsername()  &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到配置文件的文件流信息&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         List&amp;lt;User&amp;gt; userList = sqlSession.selectList(&quot;test.findUserByUsername&quot;,&quot;u&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        System.out.println(userList);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放会话资源&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            sqlSession.close();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;findByUsername函数实现&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 　　（3）删除操作&lt;/p&gt;
&lt;p&gt;　　首先在Mapper中配置删除的操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteUser&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        DELETE FROM t_user WHERE id = #{value}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　运行测试程序，同insert中一样，需要手动提交事务，如下面所示&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128153721634-996229795.png&quot; alt=&quot;&quot; width=&quot;555&quot; height=&quot;252&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最终结果：&lt;/p&gt;
&lt;p&gt;　　数据表中删除了编号为10的数据记录&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128154246639-540601135.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;88&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128154137617-1087686636.png&quot; alt=&quot;&quot; width=&quot;312&quot; height=&quot;96&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.细节整理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（1）关于示例程序中一些相关类的理解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　&lt;/strong&gt;a）SqlSessionFactoryBuilder&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　用来创建SqlSessionFactory。因为SqlSessionFactory使用了单例模式，所以不需要使用单例模式来管理SqlSessionFactoryBuilder，只需要在创建SqlSessionFactory时　候使用一次就可以&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　b）SqlSessionFactory&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　会话工厂，用来创建SqlSession。可以使用单例模式来管理SqlSessionFactory这个会话工厂，工厂创建之后，就一直使用一个实例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　c）SqlSession&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　面向程序员的接口，提供了操作数据库的方法。SqlSession是线程不安全的（原因：在SqlSession实现类中除了接口中的操作数据库的方法之外，还有数据域的属性，比如说一些提交的数据等等，所以在多线程并发请求的时候，会导致线程不安全），所以我们可以将SqlSession使用在方法体里面，这样每个线程都有自己的方法，就不会冲突&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;（2）Mybatis中mapper映射文件&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;如同解释Mybatis执行原理的时候一样，Mapper映射文件中配置的Sql语句，实际上在执行的时候都被封装称为一个个MapperStatment对象，即Mapper映射文件是按照statment来管理不同的Sql。在编写程序的时候，我们在使用SqlSession其中的操作数据库的方法（selectOne，selectList等等）的时候，传入的参数除了实参（id，模糊查询的字符串等等）之外，还需要传入的就是相应的Sql位置，而Sql是被Statment管理，所以就是传入namespace+statmentId&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;（3）占位符&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;#{id}：其中的id表示的就是接受的输入参数，&lt;/span&gt;&lt;span&gt;参数名称就是id，&lt;/span&gt;&lt;span&gt;这里指出：如果输入参数是简单类型，#{}中的参数名可以任意设置（value或者其他名称）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;/span&gt;${value}：表示将输入的参数不加任何的修饰，直接作为字符串拼接在SQL中但是这样直接拼接，容易导致SQL注入的隐患${value}中的value表示接受的输入参数，注意如果输入参数是简单类型，其中的形参只能用value&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（4）别名定义&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　  ①单个别名的定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;针对单个别名的定义&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAlias &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt; alias&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAlias&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　  定义别名后的使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserByIdTest&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM t_user WHERE id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　  ②批量别名的定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;批量别名定义：Mybatis在定义别名的时候会自动扫描包中的po类，自动的将别名定义为类名（首字母大写或者小写都可以）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（5）在SqlMapConfig.xml中加载Mapper映射文件的时候，除了通过resource的方式，还可以使用mapper接口加载的方式来实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　  ①首先先注意一点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　  在配置mybatis-config.xml时，其中的节点是有顺序的，配置顺序依次为：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
properties/settings/typeAliases/typeHandlers/objectFactory/objectWrapperFactory/plugins/environments/databaseIdProvider/mappers
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　  ②使用mapper加载的方式，要将mapper接口和mapper配置文件放在同一目录下面，并且文件名称一致，而且要遵循mapper代理的方式进行开发&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.mapper.UserMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　  &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129163010976-1394718505.png&quot; alt=&quot;&quot; width=&quot;167&quot; height=&quot;52&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.Mybatis开发dao方法简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（1）使用dao接口+实现类的方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;　a）首先编写接口，如同一般编写模式方式进行编写&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_613c62f8-0bb5-4408-94af-cf09e0391c7c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_613c62f8-0bb5-4408-94af-cf09e0391c7c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_613c62f8-0bb5-4408-94af-cf09e0391c7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.dao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * 原始Dao方式开发：dao接口+dao实现类的方式
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserDao {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据id查询信息&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; User findUserById(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加信息&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; insertUser(User user) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除信息&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteUser(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;dao接口&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　　b）然后编写接口实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_56d32ff5-9863-4c75-906c-580f8b2ccbb1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_56d32ff5-9863-4c75-906c-580f8b2ccbb1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_56d32ff5-9863-4c75-906c-580f8b2ccbb1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.daoImpl;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.UserDao;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserDaoImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserDao {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用构造方法注入SqlSessionFactory&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserDaoImpl(SqlSessionFactory sqlSessionFactory) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sqlSessionFactory =&lt;span&gt; sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; User findUserById(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         User user = sqlSession.selectOne(&quot;test.findUserById&quot;&lt;span&gt;,id);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; insertUser(User user) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        User user1 = new User(&quot;test1&quot;,&quot;123&quot;,&quot;洪山区&quot;,&quot;男&quot;);&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         sqlSession.insert(&quot;test.findUserById&quot;&lt;span&gt;,user);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteUser(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         sqlSession.delete(&quot;test.findUserById&quot;&lt;span&gt;,id);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;dao接口实现类&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　&lt;/strong&gt;c）Mapper配置文件和SqlConfig配置文件不变&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　d）使用Junit进行测试&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_b1a1c5c6-6788-4070-a7f6-76bdfb2e7740&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b1a1c5c6-6788-4070-a7f6-76bdfb2e7740&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b1a1c5c6-6788-4070-a7f6-76bdfb2e7740&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.testdao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.UserDao;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.daoImpl.UserDaoImpl;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDaoImplTest {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUp() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建UserDao的对象&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         UserDao userDao = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserDaoImpl(sqlSessionFactory);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用UserDao的方法&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         User user = userDao.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        System.out.println(user );
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Junit测试&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt; 　　   e）测试结果&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129123005266-661594076.png&quot; alt=&quot;&quot; width=&quot;409&quot; height=&quot;196&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　f）原始dao方法的问题&lt;/p&gt;
&lt;p&gt;　　　　①dao接口实现中存在大量的模板方法（即很多重复性的代码 ）&lt;/p&gt;
&lt;p&gt;　　　　②调用SqlSession方法的时候将statmentid硬编码了&lt;/p&gt;
&lt;p&gt;　　　　③条用SqlSession方法的时候传入的参数，由于使用泛型，所以在编译阶段不会报错（即使传入参数错误）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（2）使用Mapper代理的方法（即只需要Mapper接口）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　（a）使用mapper方式的规范&lt;/p&gt;
&lt;p&gt;　　　　①在使用mapper代理的方式中，namespace的值应该是mapper接口的路径&lt;/p&gt;
&lt;p&gt;　　　　②在mapper.java接口文件中的接口方法名称和mapper.xml中的statment的id一致&lt;/p&gt;
&lt;p&gt;　　　　③在mapper.java接口文件中的接口方法的输入参数和mapper.xml中的statment的parameterType一致&lt;/p&gt;
&lt;p&gt;　　　　④在mapper.java接口文件中的接口方法的返回值类型和mapper.xml中的statment的resultType一致&lt;/p&gt;
&lt;p&gt;　　（b）查询、删除操作实例&lt;/p&gt;
&lt;p&gt;　　　　①编写mapper.xml配置文件，其中包含select和delete的sql配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_4aa44906-ee22-4aaf-bf63-ecf66aaa14a1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4aa44906-ee22-4aaf-bf63-ecf66aaa14a1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4aa44906-ee22-4aaf-bf63-ecf66aaa14a1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mapper为根元素，namespace指定了命名空间&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;在使用mapper代理的方式中，namespace的值应该是mapper接口的路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.mapper.UserMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM t_user WHERE id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteUser&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        DELETE FROM t_user WHERE id = #{value}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;mapper.xml配置文件&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　　　②编写mapper接口，按照mapper代理的方式开发规范来编写mapper的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6d0ba45b-2d27-4b4d-b59d-2285dec380b6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6d0ba45b-2d27-4b4d-b59d-2285dec380b6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6d0ba45b-2d27-4b4d-b59d-2285dec380b6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.testmapper;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.mapper.UserMapper;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserMapperTest {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUp() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到UserMapper的代理对象&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         User user = userMapper.findUserById(9&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        System.out.println(user);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testDeleteUser() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         userMapper.deleteUser(9&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    @After
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; tearDown() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;mapper接口&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　　　③Junit测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_dc95b396-6de4-430e-af4b-42fb4d9b366f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dc95b396-6de4-430e-af4b-42fb4d9b366f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dc95b396-6de4-430e-af4b-42fb4d9b366f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.testmapper;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.mapper.UserMapper;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserMapperTest {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUp() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到UserMapper的代理对象&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         User user = userMapper.findUserById(8&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        System.out.println(user);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testDeleteUser() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         userMapper.deleteUser(8&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    @After
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; tearDown() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Junit测试&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　④查询结果展示&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129144241598-1038656848.png&quot; alt=&quot;&quot; width=&quot;422&quot; height=&quot;169&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　⑤删除结果展示&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129144617946-358333043.png&quot; alt=&quot;&quot; width=&quot;464&quot; height=&quot;168&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 03 Feb 2019 22:51:00 +0000</pubDate>
<dc:creator>风沙迷了眼</dc:creator>
<og:description>1、Mybatis概述 MyBatis 是支持普通 SQL 查询（相比较于Hibernate的封装，Mybatis是半自动化的JDBC封装，一个特点就是Mybatis执行的SQL查询语句需要自己在配置</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fsmly/p/10324491.html</dc:identifier>
</item>
<item>
<title>多媒体文件格式（二）：FLV 格式 - 灰色飘零</title>
<link>http://www.cnblogs.com/renhui/p/10348629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renhui/p/10348629.html</guid>
<description>&lt;p&gt;在网络的直播与点播场景中，FLV也是一种常见的格式，FLV是Adobe发布的一种可以作为直播也可以作为点播的封装格式，其封装格式非常简单，均以FLVTAG的形式存在，并且每一个TAG都是独立存在的，接下来就详细介绍一下FLV标准。&lt;/p&gt;&lt;p&gt;FLV包括文件头（File Header）和文件体（File Body）两部分，其中文件体由一系列的Tag组成。FLV文件的结构如下图：&lt;/p&gt;&lt;p&gt;Header 部分记录了FLV的类型、版本等信息，是FLV的开头。一般差不多占9bytes。具体格式如下：&lt;/p&gt;&lt;p&gt;1. 文件标识（3B）：总是为”FLV”, 0x46 0x4c 0x56&lt;/p&gt;&lt;p&gt;2. 版本（1B）：目前为0x01&lt;/p&gt;&lt;p&gt;3. 流信息（1B）：文件的标志位说明。前5位保留，必须为0；第6位为音频Tag：1表示有音频；第七位保留，为0； 第8位为视频Tag：1表示有视频&lt;/p&gt;&lt;p&gt;4. Header长度（4B）：整个Header的长度，一般为9（版本为0x01时）；大于9表示下面还有扩展信息。即0x00000009。&lt;/p&gt;&lt;p&gt;其中，每个Tag前面还包含了Previous Tag Size字段，表示前面一个Tag的大小。Tag的类型可以是视频、音频和Script，每个Tag只能包含以上三种类型的数据中的一种。&lt;/p&gt;&lt;p&gt;每个Tag由也是由两部分组成的：Tag Header和Tag Data。Tag Header里存放的是当前Tag的类型、数据区（Tag Data）长度等信息，具体如下：&lt;/p&gt;&lt;p&gt;Tag类型（1）：0x08：音频;     0x09：视频;      0x12：脚本;     其他：保留&lt;/p&gt;&lt;p&gt;时间戳（3）：整数，单位是毫秒。对于脚本型的tag总是0 （CTS）&lt;/p&gt;&lt;p&gt;时间戳扩展（1）：将时间戳扩展为4bytes，代表高8位。很少用到&lt;/p&gt;&lt;p&gt;在上节的内容中，我们介绍了FLV的格式信息，同时也提到了FlvAnalyzer工具，下面我们就介绍两个工具，帮助大家整理和学习FLV相关知识：&lt;/p&gt;&lt;p&gt;通过FlvAnalyzer可以很清晰的看到FLV文件的基本结构，这样能够结合上面了解的FLV的知识，更清晰的查看FLV的格式及结构。&lt;/p&gt;&lt;p&gt;点击左侧节点，右侧显示对应hex与ascii信息，这样就不必打开二进制编辑器了;&lt;/p&gt;&lt;p&gt;通过此工具可以查看audio tag与video tag各个字节（精确到bit）的详细信息，了解每个tag是如何构造的，同时右下角黑色输出框显示某个值的意义;&lt;/p&gt;&lt;p&gt;此工具是雷霄骅整理flvparse的开源代码，制作的flvformatanalysis工具，此工具可以用来帮助学习FLV封装格式结构。此外它还支持分离FLV中的视频流和音频流。&lt;/p&gt;&lt;p&gt;在网络视频点播文件为FLV格式文件时，人们经常用工具先对FLV文件进行一次转换，主要是将FLV文件中的关键帧建立一个索引，并将索引写到Metadata头中，这个步骤用FFmpeg同样也可以实现，使用参数&lt;span class=&quot;s1&quot;&gt;add_keyframe_index即可：&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -i 好汉歌.mp4 -c copy -f flv -flvflags add_keyframe_index out.flv 
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成FLV包含了关键帧索引信息，这些关键帧索引信息并不是FLV的标准字段，但是由于其被广泛使用，已经成为常用的字段，所以FFmpeg也同样支持了这个功能。&lt;/p&gt;&lt;p&gt;除了在第二节介绍的两个工具，我们也可以使用ffprobe来解析FLV文件，并且还能将关键帧索引的相关信息打印出来，命令如下：&lt;/p&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffprobe -v trace -i out.flv 
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;301&quot;&gt;
&lt;pre&gt;
[NULL @ &lt;span&gt;0x7fc669002a00&lt;/span&gt;] Opening &lt;span&gt;'&lt;/span&gt;&lt;span&gt;out.flv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; reading
[&lt;/span&gt;&lt;span&gt;file&lt;/span&gt; @ &lt;span&gt;0x7fc667f00480&lt;/span&gt;] Setting default whitelist &lt;span&gt;'&lt;/span&gt;&lt;span&gt;file,crypto&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
Probing flv score:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; size:&lt;span&gt;2048&lt;/span&gt;&lt;span&gt;
Probing mp3 score:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; size:&lt;span&gt;2048&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] Format flv probed with size=&lt;span&gt;2048&lt;/span&gt; and score=&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] Before avformat_find_stream_info() pos: &lt;span&gt;13&lt;/span&gt; bytes read:&lt;span&gt;32768&lt;/span&gt; seeks:&lt;span&gt;0&lt;/span&gt; nb_streams:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;18&lt;/span&gt;, size:&lt;span&gt;1184&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;21&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe stream hasn&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t been created&lt;/span&gt;
[flv @ &lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;45&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;1220&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;1296&lt;/span&gt; times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;159283&lt;/span&gt; times = &lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;258004&lt;/span&gt; times = &lt;span&gt;4000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;272776&lt;/span&gt; times = &lt;span&gt;4000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;405340&lt;/span&gt; times = &lt;span&gt;6000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;1215104&lt;/span&gt; times = &lt;span&gt;16000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;2529035&lt;/span&gt; times = &lt;span&gt;26000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;3198814&lt;/span&gt; times = &lt;span&gt;36000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;3623757&lt;/span&gt; times = &lt;span&gt;41000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;4882191&lt;/span&gt; times = &lt;span&gt;51000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;5951597&lt;/span&gt; times = &lt;span&gt;61000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;6256906&lt;/span&gt; times = &lt;span&gt;63000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;7235927&lt;/span&gt; times = &lt;span&gt;73000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;8175324&lt;/span&gt; times = &lt;span&gt;83000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;9203399&lt;/span&gt; times = &lt;span&gt;93000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;9936528&lt;/span&gt; times = &lt;span&gt;103000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;11056393&lt;/span&gt; times = &lt;span&gt;113000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;12183978&lt;/span&gt; times = &lt;span&gt;123000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;13014068&lt;/span&gt; times = &lt;span&gt;133000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;13610750&lt;/span&gt; times = &lt;span&gt;143000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;14628601&lt;/span&gt; times = &lt;span&gt;153000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;15873046&lt;/span&gt; times = &lt;span&gt;163000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;17112198&lt;/span&gt; times = &lt;span&gt;173000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;18301365&lt;/span&gt; times = &lt;span&gt;182000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;18604436&lt;/span&gt; times = &lt;span&gt;186000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;17&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;9&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;1280&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;2117&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;1304&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;17&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[NULL @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;7&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[NULL @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;8&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[NULL @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] user data:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x264 - core 142 r2 dd79a61 - H.264/MPEG-4 AVC codec - Copyleft 2003-2014 - http://www.videolan.org/x264.html - options: cabac=1 ref=8 deblock=1:-1:-1 analyse=0x1:0x131 me=umh subme=9 psy=1 psy_rd=1.00:0.15 mixed_ref=1 me_range=24 chroma_me=1 trellis=2 8x8dct=0 cqm=0 deadzone=21,11 fast_pskip=0 chroma_qp_offset=-3 threads=24 lookahead_threads=2 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 stitchable=1 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=2 b_bias=0 direct=3 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=60 rc=2pass mbtree=1 bitrate=680 ratetol=1.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 cplxblur=20.0 qblur=0.5 ip_ratio=1.40 aq=1:1.00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;7&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;8&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;6&lt;/span&gt;, nal_ref_idc: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;5&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] user data:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x264 - core 142 r2 dd79a61 - H.264/MPEG-4 AVC codec - Copyleft 2003-2014 - http://www.videolan.org/x264.html - options: cabac=1 ref=8 deblock=1:-1:-1 analyse=0x1:0x131 me=umh subme=9 psy=1 psy_rd=1.00:0.15 mixed_ref=1 me_range=24 chroma_me=1 trellis=2 8x8dct=0 cqm=0 deadzone=21,11 fast_pskip=0 chroma_qp_offset=-3 threads=24 lookahead_threads=2 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 stitchable=1 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=2 b_bias=0 direct=3 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=60 rc=2pass mbtree=1 bitrate=680 ratetol=1.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 cplxblur=20.0 qblur=0.5 ip_ratio=1.40 aq=1:1.00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;&lt;span&gt;] Reinit context to 576x432, pix_fmt: yuv420p
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;&lt;span&gt;] no picture 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;1653&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;40&lt;/span&gt; pos:&lt;span&gt;3436&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;323&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;80&lt;/span&gt; pos:&lt;span&gt;5104&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;41&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;80&lt;/span&gt; pos:&lt;span&gt;5442&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;103&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;120&lt;/span&gt; pos:&lt;span&gt;5498&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;314&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;126&lt;/span&gt; pos:&lt;span&gt;5616&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;156&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;160&lt;/span&gt; pos:&lt;span&gt;5945&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;634&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;173&lt;/span&gt; pos:&lt;span&gt;6116&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;751&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;200&lt;/span&gt; pos:&lt;span&gt;6765&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;636&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;219&lt;/span&gt; pos:&lt;span&gt;7531&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;208&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;240&lt;/span&gt; pos:&lt;span&gt;8182&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;625&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;266&lt;/span&gt; pos:&lt;span&gt;8405&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;134&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;280&lt;/span&gt; pos:&lt;span&gt;9045&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;607&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;312&lt;/span&gt; pos:&lt;span&gt;9194&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;73&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;320&lt;/span&gt; pos:&lt;span&gt;9816&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;599&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;359&lt;/span&gt; pos:&lt;span&gt;9904&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;358&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;360&lt;/span&gt; pos:&lt;span&gt;10518&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;108&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;400&lt;/span&gt; pos:&lt;span&gt;10891&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;628&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;405&lt;/span&gt; pos:&lt;span&gt;11014&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;61&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;440&lt;/span&gt; pos:&lt;span&gt;11657&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;614&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;452&lt;/span&gt; pos:&lt;span&gt;11733&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;53&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;480&lt;/span&gt; pos:&lt;span&gt;12362&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;630&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;498&lt;/span&gt; pos:&lt;span&gt;12430&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;287&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;520&lt;/span&gt; pos:&lt;span&gt;13075&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;625&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;544&lt;/span&gt; pos:&lt;span&gt;13377&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;47&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;560&lt;/span&gt; pos:&lt;span&gt;14017&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;622&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;591&lt;/span&gt; pos:&lt;span&gt;14079&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;79&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;600&lt;/span&gt; pos:&lt;span&gt;14716&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;625&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;637&lt;/span&gt; pos:&lt;span&gt;14810&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;324&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;640&lt;/span&gt; pos:&lt;span&gt;15450&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;55&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;680&lt;/span&gt; pos:&lt;span&gt;15789&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;605&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;684&lt;/span&gt; pos:&lt;span&gt;15859&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;67&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;720&lt;/span&gt; pos:&lt;span&gt;16479&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;613&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;730&lt;/span&gt; pos:&lt;span&gt;16561&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;350&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;760&lt;/span&gt; pos:&lt;span&gt;17189&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;604&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;777&lt;/span&gt; pos:&lt;span&gt;17554&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;89&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;800&lt;/span&gt; pos:&lt;span&gt;18173&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;620&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;823&lt;/span&gt; pos:&lt;span&gt;18277&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;68&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;840&lt;/span&gt; pos:&lt;span&gt;18912&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;601&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;869&lt;/span&gt; pos:&lt;span&gt;18995&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;58&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;880&lt;/span&gt; pos:&lt;span&gt;19611&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;603&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;916&lt;/span&gt; pos:&lt;span&gt;19684&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;307&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;920&lt;/span&gt; pos:&lt;span&gt;20302&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;89&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;960&lt;/span&gt; pos:&lt;span&gt;20624&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;596&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;962&lt;/span&gt; pos:&lt;span&gt;20728&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;64&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1000&lt;/span&gt; pos:&lt;span&gt;21339&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;625&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1009&lt;/span&gt; pos:&lt;span&gt;21418&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;58&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1040&lt;/span&gt; pos:&lt;span&gt;22058&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;604&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1055&lt;/span&gt; pos:&lt;span&gt;22131&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;333&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1080&lt;/span&gt; pos:&lt;span&gt;22750&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;598&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1102&lt;/span&gt; pos:&lt;span&gt;23098&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;94&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1120&lt;/span&gt; pos:&lt;span&gt;23711&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;605&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1148&lt;/span&gt; pos:&lt;span&gt;23820&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;58&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1160&lt;/span&gt; pos:&lt;span&gt;24440&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;613&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1195&lt;/span&gt; pos:&lt;span&gt;24513&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;58&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1200&lt;/span&gt; pos:&lt;span&gt;25141&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;352&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1240&lt;/span&gt; pos:&lt;span&gt;25214&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;607&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1241&lt;/span&gt; pos:&lt;span&gt;25581&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;129&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1280&lt;/span&gt; pos:&lt;span&gt;26203&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;620&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1287&lt;/span&gt; pos:&lt;span&gt;26347&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;81&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1320&lt;/span&gt; pos:&lt;span&gt;26982&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;604&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1334&lt;/span&gt; pos:&lt;span&gt;27078&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;57&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1360&lt;/span&gt; pos:&lt;span&gt;27697&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;618&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1380&lt;/span&gt; pos:&lt;span&gt;27769&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;350&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1400&lt;/span&gt; pos:&lt;span&gt;28402&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;609&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1427&lt;/span&gt; pos:&lt;span&gt;28767&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;83&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1440&lt;/span&gt; pos:&lt;span&gt;29391&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;626&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1473&lt;/span&gt; pos:&lt;span&gt;29489&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;44&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1480&lt;/span&gt; pos:&lt;span&gt;30130&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;86&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1520&lt;/span&gt; pos:&lt;span&gt;30189&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;608&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1520&lt;/span&gt; pos:&lt;span&gt;30290&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;298&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1560&lt;/span&gt; pos:&lt;span&gt;30913&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;629&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1566&lt;/span&gt; pos:&lt;span&gt;31226&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;88&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1600&lt;/span&gt; pos:&lt;span&gt;31870&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] All &lt;span&gt;info&lt;/span&gt;&lt;span&gt; found
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] stream &lt;span&gt;0&lt;/span&gt;: start_time: &lt;span&gt;0.080&lt;/span&gt; duration: -&lt;span&gt;9223372036854776.000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] stream &lt;span&gt;1&lt;/span&gt;: start_time: &lt;span&gt;0.080&lt;/span&gt; duration: -&lt;span&gt;9223372036854776.000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] format: start_time: &lt;span&gt;0.080&lt;/span&gt; duration: &lt;span&gt;189.440&lt;/span&gt; bitrate=&lt;span&gt;787&lt;/span&gt; kb/&lt;span&gt;s
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] After avformat_find_stream_info() pos: &lt;span&gt;31965&lt;/span&gt; bytes read:&lt;span&gt;32768&lt;/span&gt; seeks:&lt;span&gt;0&lt;/span&gt; frames:&lt;span&gt;74&lt;/span&gt;&lt;span&gt;
Input #&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, flv, from &lt;span&gt;'&lt;/span&gt;&lt;span&gt;out.flv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
  Metadata:
    major_brand     : isom
    minor_version   : &lt;/span&gt;&lt;span&gt;512&lt;/span&gt;&lt;span&gt;
    compatible_brands: isomiso2avc1mp41
    artist          : yinyuetai.com
    album           : Yinyuetai
    &lt;/span&gt;&lt;span&gt;date&lt;/span&gt;            : &lt;span&gt;04&lt;/span&gt;/&lt;span&gt;01&lt;/span&gt;/&lt;span&gt;15&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;51&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;&lt;span&gt;
    comment         : Yinyuetai&lt;/span&gt;-&lt;span&gt;1TR1026
    encoder         : Lavf57.&lt;/span&gt;&lt;span&gt;83.100&lt;/span&gt;&lt;span&gt;
    hasVideo        : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    hasKeyframes    : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    hasAudio        : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    hasMetadata     : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    canSeekToEnd    : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    datasize        : &lt;/span&gt;&lt;span&gt;18639072&lt;/span&gt;&lt;span&gt;
    videosize       : &lt;/span&gt;&lt;span&gt;16303552&lt;/span&gt;&lt;span&gt;
    audiosize       : &lt;/span&gt;&lt;span&gt;2335015&lt;/span&gt;&lt;span&gt;
    lasttimestamp   : &lt;/span&gt;&lt;span&gt;189&lt;/span&gt;&lt;span&gt;
    lastkeyframetimestamp: &lt;/span&gt;&lt;span&gt;187&lt;/span&gt;&lt;span&gt;
    lastkeyframelocation: &lt;/span&gt;&lt;span&gt;18603951&lt;/span&gt;&lt;span&gt;
  Duration: &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;03&lt;/span&gt;:&lt;span&gt;09.44&lt;/span&gt;, start: &lt;span&gt;0.080000&lt;/span&gt;, bitrate: &lt;span&gt;787&lt;/span&gt; kb/&lt;span&gt;s
    Stream #&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;41&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1000&lt;/span&gt;: Video: h264 (Main), &lt;span&gt;1&lt;/span&gt; reference frame, yuv420p(progressive, left), 576x432, &lt;span&gt;0&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;684&lt;/span&gt; kb/s, &lt;span&gt;25&lt;/span&gt; fps, &lt;span&gt;25&lt;/span&gt; tbr, 1k tbn, &lt;span&gt;50&lt;/span&gt;&lt;span&gt; tbc
    Stream #&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;33&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1000&lt;/span&gt;: Audio: aac (HE-AAC), &lt;span&gt;44100&lt;/span&gt; Hz, stereo, fltp, &lt;span&gt;95&lt;/span&gt; kb/&lt;span&gt;s
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668824400&lt;/span&gt;] nal_unit_type: &lt;span&gt;7&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668824400&lt;/span&gt;] nal_unit_type: &lt;span&gt;8&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[AVIOContext @ &lt;/span&gt;&lt;span&gt;0x7fc667f005c0&lt;/span&gt;] Statistics: &lt;span&gt;32768&lt;/span&gt; bytes read, &lt;span&gt;0&lt;/span&gt; seeks
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从以上内容可以看到，输出信息包含了keyframe关键帧存储在文件中的偏移位置及时间戳。&lt;/p&gt;</description>
<pubDate>Sun, 03 Feb 2019 14:21:00 +0000</pubDate>
<dc:creator>灰色飘零</dc:creator>
<og:description>在网络的直播与点播场景中，FLV也是一种常见的格式，FLV是Adobe发布的一种可以作为直播也可以作为点播的封装格式，其封装格式非常简单，均以FLVTAG的形式存在，并且每一个TAG都是独立存在的，接</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renhui/p/10348629.html</dc:identifier>
</item>
<item>
<title>EF6学习笔记二十七：并发冲突（一） - 张四海</title>
<link>http://www.cnblogs.com/jinshan-go/p/10351135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jinshan-go/p/10351135.html</guid>
<description>&lt;h3&gt;&lt;span&gt;要专业系统地学习EF推荐《你必须掌握的Entity Framework 6.x与Core 2.0》。这本书作者（汪鹏，Jeffcky）的博客：https://www.cnblogs.com/CreateMyself/&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 来到并发这里了，我自己得先承认，并发对我来说完全是一个熟悉又真正陌生的东西，总的来说，我对并发一无所知。&lt;/p&gt;
&lt;p&gt;那么不管是怎么回事，我也要说一下。之前看过零星的一些讲硬件的东西，说的是，很多个应用你看似同时开启，同时运行的，其实只是，CPU速度太快，让你察觉不了。&lt;/p&gt;
&lt;p&gt;所以不可能存在两个任务同时进行，这只是错觉。所以我现在给自己一些自信，我断定！不存在，就像一个啤酒瓶，口就那么大，一次只容许一颗珠子进去，不可能两个同时进去，都是错觉！&lt;/p&gt;
&lt;p&gt;来看EF中的并发。&lt;/p&gt;
&lt;p&gt;我们在使用EF上下文时，遵循的是一个请求对应一个上下文，对事务也是这个态度，不要事务那么长，越短越好。&lt;/p&gt;
&lt;p&gt;一个请求对应一个上下文，那么服务器同时接受到了多个请求，构造出多个上下文对象，针对同一资源操作，问题就出来这里。&lt;/p&gt;
&lt;p&gt;因为不同的上下文中查询出的实体都是各自的，并不是同一个引用。&lt;/p&gt;
&lt;p&gt;这里有两个上下文，都得到了名叫“张三”的学生实体，第一个上下文修改为“李四”，第二个上下文修改为“张三”，那么最终的结果应该是“张三”，但是看看下面的代码，其实最终数据库的结果是“李四”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();
    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    ctx2.SaveChanges();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;你觉得应该是第一个上文查询修改完，再第二个上下文接着查询修改就行了。但是高并发的情况下是无法保证的。&lt;/p&gt;
&lt;p&gt;那么我们看下一个上下文中查询相同的两个实体。引用是相等的。所以整个解决方案就使用一个上下文是不是就行了？我觉得是，但是这是不科学的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx.Students.FirstOrDefault();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx.Students.FirstOrDefault();
                Console.WriteLine(ReferenceEquals(stu1, stu2));  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  True&lt;/span&gt;
                Console.WriteLine($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stu1.Name:{stu1.Name},stu2.Name:{stu2.Name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  stu1.Name:小新77,stu2.Name:小新77&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并发冲突做个分初级、中级和高级来讲，我这篇笔记主要记录初级内容的学习心得。&lt;/p&gt;
&lt;p&gt;现在来认识一下悲观并发和乐观并发，这是两种并发的控制方法&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;悲观并发：当更新特定记录时，同一记录上的所有其他并发更新将被阻塞，直到当前操作完成或者放弃，其他并发操作才可以继续。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;乐观并发：当更新特定记录时，同一记录上的所有其他并发将导致最后一条记录被保存（获胜）。假设由于并发访问共享资源而导致资源冲突并不是不可能过的，而是不可用的，此时将采取一定手段来解决并发冲突。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上面的张三李四就是属于乐观并发，就是我就随他去了，它自己修改到哪里就是哪里，我也不关心过程。&lt;/p&gt;
&lt;p&gt;那么如何解决上面的问题，上面是什么问题？就是我第二个上下文查询出实体不是最新的，应该将这种情况看做是一种异常，但是如果你用Try/catch来捕获是捕获不到的。&lt;/p&gt;
&lt;p&gt;因为捕获并发冲突需要特殊配置，EF就为我们提供了两种方式：&lt;em&gt;&lt;strong&gt;并发Token、行版本（RowVersion）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果我们对student的Name属性这是并发Token,需要将属性进行如下配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
modelBuilder.Entity&amp;lt;Student&amp;gt;().Property(x =&amp;gt; x.Name).IsConcurrencyToken();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在来用try/catch就可以捕获了&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;System.Data.Entity.Infrastructure.DbUpdateConcurrencyException: Store update, insert, or delete statement affected an unexpected number of rows (0).&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Entities may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=472540 for information on understanding and handling optimistic concurrency exceptions.&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;---&amp;gt; System.Data.Entity.Core.OptimisticConcurrencyException: Store update, insert, or delete statement affected an unexpected number of rows (0).&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Entities may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=472540 for information on understanding and handling optimistic concurrency exceptions.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个异常我之前没有学到这里来的时候碰到过，没有记录下来当时是写的什么代码，真可惜！&lt;/p&gt;
&lt;p&gt;来看看行版本的方式。这就需要为实体添加一个字节数组类型的属性，并且该属性需要配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] RowVersion { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
modelBuilder.Entity&amp;lt;Student&amp;gt;().Property(x =&amp;gt; x.RowVersion).IsRowVersion();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在数据库中就是这样的，每次数据更新时，数据库中的RowVersion也会如时间戳一样得到更新，从而检测数据库中所存储的值与实体中的值是否一致来检测并发冲突。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/819807/201902/819807-20190203213438432-1656803985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么接下来我们就开始在异常处理中进行操作，他不是数据不是最新的吗？那么我就让他得到最新的。因为EF中有针对并发异常的类（DbUpdateConcurrencyException）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();
    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新111&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        ctx2.SaveChanges();
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; s =&lt;span&gt; ex.Entries.Single();
        s.Reload();
        Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stu2.Name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + stu2.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  小新11&lt;/span&gt;
        stu2.Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        ctx2.SaveChanges();
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;调用Reload方法来刷新数据库中的最新值到当前内存中的值，就是造成并发冲突的这个对象，更新它。&lt;/p&gt;
&lt;p&gt; 如果说不用Relod，也有另外一种方式来实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ctx1.Database.Log = msg =&amp;gt; Console.WriteLine(&quot;ctx11111111111111:&quot; + msg);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ctx2.Database.Log = msg =&amp;gt; Console.WriteLine(&quot;ctx22222222222222:&quot; + msg);&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();

    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        ctx2.SaveChanges();
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取并发异常被追踪的实体&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; tracking =&lt;span&gt; ex.Entries.Single();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取数据库原始值对象，数据库中没被修改之前的值&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; original = (Student)tracking.OriginalValues.ToObject(); Console.WriteLine(original.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   小新
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取更新后数据库最新的值对象,就是数据库中目前的值，这一句会发起查询&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; database = (Student)tracking.GetDatabaseValues().ToObject(); Console.WriteLine(database.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  小新11
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取当前内存的值，就是造成并发异常的值&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; current = (Student)tracking.CurrentValues.ToObject(); Console.WriteLine(current.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  小新22&lt;/span&gt;
&lt;span&gt;        tracking.OriginalValues.SetValues(database);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tracking.GetDatabaseValues().SetValues(current);  &lt;/span&gt;
        ctx2.SaveChanges();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  需要调用savechanges方法&lt;/span&gt;

        &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 这里有一个疑问，照我的理解应该是将current的值赋值给当前数据库中的值，也就是tracking.GetDatabaseValues().SetValues(current);&lt;/p&gt;
&lt;p&gt;但是这样写报错，虽然作者也专门解释了，但是我还是懵的……&lt;/p&gt;
&lt;p&gt;行吧，这个还是必要自己去动手弄一下，体会一下。初级版的并发冲突解决方案就到这里了。&lt;/p&gt;
&lt;p&gt;后面还是不得不说一下，我也是今天才知道多个using可以这个很简单的堆叠起来写，很优雅啊。&lt;/p&gt;
&lt;p&gt;然后利用上下文的日志打印真的很有用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    ctx1.Database.Log &lt;/span&gt;= msg =&amp;gt; Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctx111111111111111:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; msg);
    ctx2.Database.Log &lt;/span&gt;= msg =&amp;gt; Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctx222222222222222:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; msg);

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();
    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    ctx2.SaveChanges();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/819807/201902/819807-20190203220234449-593977741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从打印的结果可以看到，关于数据库初始化的任务全部是由ctx1去执行的，就是这些什么Migration这些东西&lt;/p&gt;
&lt;p&gt;难道是我ctx1对象先构造的问题？或者ctx1的log先打印的问题，于是我改成ctx2先构造，然后ctx2的log也先执行，发现还是上面打印的结果，还是ctx1去执行数据库初始化的工作。&lt;/p&gt;
&lt;p&gt;直到我将ctx2先查询出student对象才变成ctx2先执行这些操作。所以是不是就认识到，多个上下文到底是谁来负责数据库初始化的任务呢？那就看看是谁先与数据库交互了，现在构造上下文对象这里并没有与数据库发生交互。&lt;/p&gt;
&lt;p&gt;行吧，就这了，后面还会继续学习。&lt;/p&gt;

</description>
<pubDate>Sun, 03 Feb 2019 14:09:00 +0000</pubDate>
<dc:creator>张四海</dc:creator>
<og:description>要专业系统地学习EF推荐《你必须掌握的Entity Framework 6.x与Core 2.0》。这本书作者（汪鹏，Jeffcky）的博客：https://www.cnblogs.com/Creat</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jinshan-go/p/10351135.html</dc:identifier>
</item>
<item>
<title>Redis客户端——Jedis的使用 - James-Shangguan</title>
<link>http://www.cnblogs.com/sgh1023/p/10351096.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sgh1023/p/10351096.html</guid>
<description>&lt;p&gt;本文介绍基于Java语言的Redis客户端——Jedis的使用，包括Jedis简介、获取Jedis、Jedis直连、Jedis连接池以及二者的对比的选择。&lt;/p&gt;
&lt;h2&gt;Jedis简介&lt;/h2&gt;
&lt;p&gt;Jedis 是 &lt;a href=&quot;http://www.oschina.net/p/redis&quot;&gt;Redis&lt;/a&gt; 官方首选的基于Java语言的客户端开发包。Jedis功能强大，提供了完整Redis命令，与 Redis 2.8.x, 3.x.x及以上版本完全兼容。而且使用简单方便，绝对是Java语言的首选客户端。&lt;/p&gt;
&lt;h2&gt;获取Jedis&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;获取Jedis可以在&lt;/span&gt; &lt;a href=&quot;http://github.com/xetorthio/jedis/releases&quot;&gt;http://github.com/xetorthio/jedis/releases&lt;/a&gt;下载最新的版本；或者引入Maven依赖：&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;redis.clients&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jedis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;compile&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Jedis直连&lt;/h2&gt;
&lt;p&gt;Jedis直连需要生成Jedis对象，这个对象负责和指定Redis节点进行通信。&lt;/p&gt;
&lt;div readability=&quot;21.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Jedis jedis = &lt;span&gt;new&lt;/span&gt; Jedis(&quot;127.0.0.1&quot;,6379);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以进行基本操作：&lt;/p&gt;

&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
jedis.set(&quot;hello&quot;,&quot;world&quot;&lt;span&gt;);
jedis.get(&lt;/span&gt;&quot;hello&quot;&lt;span&gt;);
jedis.incr(&lt;/span&gt;&quot;counter&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
jedis.hset(&quot;myhash&quot;,&quot;f1&quot;,&quot;v1&quot;&lt;span&gt;);
jedis.hset(&lt;/span&gt;&quot;myhash&quot;,&quot;f2&quot;,&quot;v2&quot;&lt;span&gt;);
jedis.hgetAll(&lt;/span&gt;&quot;myhash&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
jedis.rpush(&quot;mylist&quot;,&quot;1&quot;&lt;span&gt;);
jedis.rpush(&lt;/span&gt;&quot;mylist&quot;,&quot;2&quot;&lt;span&gt;);
jedis.rpush(&lt;/span&gt;&quot;mylist&quot;,&quot;3&quot;&lt;span&gt;);
jedis.lrange(&lt;/span&gt;&quot;mylist&quot;,0,-1);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
jedis.sadd(&quot;myset&quot;,&quot;a&quot;&lt;span&gt;);
jedis.sadd(&lt;/span&gt;&quot;myset&quot;,&quot;b&quot;&lt;span&gt;);
jedis.sadd(&lt;/span&gt;&quot;myset&quot;,&quot;a&quot;&lt;span&gt;);
jedis.smember(&lt;/span&gt;&quot;myset&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div readability=&quot;41.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
jedis.zadd(&quot;myzset&quot;,99,&quot;alan&quot;&lt;span&gt;);
jedis.zadd(&lt;/span&gt;&quot;myzset&quot;,88,&quot;paul&quot;&lt;span&gt;);
jedis.zadd(&lt;/span&gt;&quot;myzset&quot;,77,&quot;077&quot;&lt;span&gt;);
jedis.zrangeWithScores(&lt;/span&gt;&quot;myzset&quot;,0,-1);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Jedis连接池&lt;/h2&gt;
&lt;p&gt;什么是连接池？举个类比，线程池是把线程放到便于统一管理的容器里面，那么连接池就是把连接放到一个容器里面，方便连接的管理和使用，达到节省系统资源开销和时间的效果。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果没有连接池，在实际应用开发中，每一次Jedis请求都必须经历生成Jedis对象、Jedis执行命令、Jedis返回执行结果和关闭Jedis连接等步骤，而新建Jedis对象，然后新建连接并打开数据库是一件既消耗资源又费时的工作，如果频繁发生这种数据库操作，系统的性能必然会急剧下降，甚至会导致系统崩溃。如果运用池化技术，将连接作为对象存储在一个容器中（连接池），一旦连接池建立后，这些连接是共享的，极大地节省系统资源和时间，这就是Jedis连接池。如果之前已经了解过线程池，我想这儿看着会相当轻松写意。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Jedis连接池使用主要有以下几个步骤：创建连接池池、向连接池借Jedis对象、Jedis执行命令、返回执行结果、归还Jedis对象给连接池。具体代码如下：&lt;/p&gt;
&lt;p&gt;创建Jedis连接池并初始化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
GenericObjectPoolConfig poolConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GenericObjectPoolConfig();
JedisPool jedisPool &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; JedisPool(poolConfig,&quot;127.0.0.1&quot;,6739);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，JedisPool大部分配置都在GenericObjectPoolConfig中完成的，GenericObjectPoolConfig参数说明如下表：&lt;/p&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;16.5&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;参数说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;maxTotal&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;最大连接数，默认8个。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;maxIdle&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;最大空闲连接数， 默认8个。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;minIdle&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;最小空闲连接数，默认0个。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p&gt;maxWaitMillis&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p&gt;testOnBorrow&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;在borrow一个jedis实例时，是否提前检查连接可用性（ping()）操作；如果为true，则得到的jedis实例均是可用的。默认为false。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td&gt;
&lt;p&gt;blockWhenExhausted&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;testOnReturn&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;在return一个jedis实例时，是否检查连接可用性（ping()），默认为false。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td&gt;
&lt;p&gt;testWhileIdle&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;如果为true，表示有一个idle object evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉。&lt;/p&gt;
&lt;p&gt;这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9.5&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;minEvictableIdleTimeMillis&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐。这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义。&lt;/p&gt;
&lt;p&gt;JedisPoolConfig中默认设置为60000。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;timeBetweenEvictionRunsMillis&lt;/p&gt;

&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;表示idle object evitor两次扫描之间要sleep的毫秒数，默认设置为30000。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;创建和初始化Jedis连接池以后，可以从Jedis连接池中获取Jedis对象，进而进行操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Jedis jedis = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.从连接池获取jedis对象&lt;/span&gt;
    jedis =&lt;span&gt; jedisPool.getResource();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.执行操作&lt;/span&gt;
    jedis.set(&quot;hello&quot;,&quot;world&quot;&lt;span&gt;);
}&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
    e.printStackTrace();
}&lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(jedis != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;归还连接池&lt;/span&gt;
&lt;span&gt;        jedis.close();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;如何选择&lt;/h2&gt;
&lt;p&gt;Jedis直连和使用Jedis连接池各有所长，可以根据生产环境的需要因地制宜。&lt;/p&gt;
&lt;p&gt;如果是少量的连接，并且每次连接时间较长，适合使用Jedis直连的方式。&lt;/p&gt;
&lt;p&gt;如果是较为频繁的连接则使用Jedis连接池。&lt;/p&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;优点&lt;/td&gt;
&lt;td&gt;缺点&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;直连&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;&lt;li&gt;简单方便&lt;/li&gt;
&lt;li&gt;用于少量长期连接的场景&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;&lt;li&gt;每次新建/关闭TCP开销较大&lt;/li&gt;
&lt;li&gt;资源无法控制，存在连接泄漏的可能&lt;/li&gt;
&lt;li&gt;Jedis对象线程不安全&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;连接池&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;&lt;li&gt;Jedis预先生成，降低开销使用&lt;/li&gt;
&lt;li&gt;连接池的形式保护和控制资源的使用&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;&lt;li&gt;相对于直连，使用相对麻烦，尤其在资源的管理上需要很多参数来保证，一旦规划不合理也会出现问题&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 03 Feb 2019 13:50:00 +0000</pubDate>
<dc:creator>James-Shangguan</dc:creator>
<og:description>本文介绍基于Java语言的Redis客户端——Jedis的使用，包括Jedis简介、获取Jedis、Jedis直连、Jedis连接池以及二者的对比的选择。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sgh1023/p/10351096.html</dc:identifier>
</item>
<item>
<title>【详解】换一个角度看Socket的数据读写 - 猫毛·波拿巴</title>
<link>http://www.cnblogs.com/longfurcat/p/10349365.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/longfurcat/p/10349365.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;　　以前对IO、NIO还算了解，也写过Netty的项目。但是对底层的数据传递不是很了解，一直存有这方面的疑惑。但是由于有其他事情就被打断了。前阵子因为想要了解volatile关键字的原理，学习了下JMM（Java内存模型），了解到对象数据是如何存储的。后来又想知道Tomcat是如何传递Http报文的，源码翻着翻着就到了Socket，想来Socket还有些东西没学清楚，就干脆乘着兴致查阅了不少资料。&lt;/p&gt;
&lt;p&gt;这里就以数据读写位置为中心，整理分享一下相关内容吧。&lt;/p&gt;
&lt;h2&gt;整体视图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1313132/201902/1313132-20190202221202213-2131990802.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;从“互联网” 到“本机网卡”&lt;/h2&gt;
&lt;p&gt;网卡会判断网络数据报是否是给本机的，如果是则接收，否则丢弃。它是如何判断的？数据报中有目的地址，如果为本机IP地址，则接收下来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网卡的存储空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网卡是有存储空间的，不过很小，只有几KB。它只能作为临时缓冲用的，一般需要存入内存。&lt;/p&gt;
&lt;h2&gt;从“本机网卡”到“内核空间”&lt;/h2&gt;
&lt;p&gt;网卡会使用DMA把数据报写入到内核空间中，这个过程不需要CPU干预。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内核空间与用户空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内存分为两大块，用户空间和内核空间。内核空间是归属于操作系统使用的，为了安全，用户空间中的程序只能访问分配给它的地址空间，一般不能访问内核空间。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;地址空间：也就是操作系统分配给进程的内存空间，它只能访问自己的内存空间，不能干预其他进程。即指针只能在一定范围内活动。地址空间是可以扩容的，这是后话了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Socket的读写队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个Socket都在内核空间中都有与之相关联的读写队列（存储空间），一个读队列，一个写队列。且读队列的大小一般要大于写队列。Socket要读数据就从对应的读队列中读，写数据就写到相应的写队列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据报如何正确地写入到相关的Socket队列中？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，如何知道数据报是归属于哪个socket。首先IP地址肯定有了，其次TCP/UDP数据报中就有&quot;目的端口&quot;的字段，这自然就能映射到相关的Socket了，因为本机中的socket就是用占用的端口来彼此区分的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux如何查看读写队列大小&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相关信息在这两个配置文件中，内容依次是最小，默认，最大&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/proc/sys/net/ipv4/tcp_rmem (读队列大小配置&lt;span&gt;)
/proc/sys/net/ipv4/tcp_wmem (写队列大小配置)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;从“内核空间”到“用户空间”&lt;/h2&gt;
&lt;p&gt;socket对象调用read方法，就是从内核空间中读取数据到用户空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面说了，用户空间的程序一般是不能访问内核空间的。但是程序要运行，有时候不得不访问磁盘和网络数据。于是乎，操作系统就提供一些库函数，用户程序可以调用这些库函数来间接使用操作系统的功能。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：这里与socket相关的操作都是系统调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果读队列没有数据可读会怎样？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这取决于socket的mode，默认是阻塞的。也就是说，如果读队列中没有数据可读，那么当前执行这个read函数的线程将被挂起，然后等到内核空间来数据的时候再唤醒这个线程开始读数据，这就是同步阻塞。当然也有非阻塞式的，就是说，如果没有数据可读，执行线程不会被挂起，而是完成read函数，返回一个&quot;-1&quot;的错误码。同步非阻塞，说的就是，反复调用read函数直到成功。&lt;/p&gt;
&lt;p&gt;待解决：内核空间如何唤醒这个线程，用的是什么机制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读出来的数据放在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般，我们会分配一个空间来存储，也就是创建一个byte数组来缓存读取进来的数据。为什么说是缓存？因为我们使用socket肯定不是简单的把数据读出来，肯定还要进行下一步的处理，byte数组只是用来暂时存储数据的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IO复用的思想&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面说的，不管是同步阻塞，还是同步非阻塞。根本上都是说，线程要等到可以读写的时候，才开始读写操作。这样看来，这段等待的时间就算是浪费了。（不管你等待的方式是挂起，还是轮询），IO复用的思想就是认为，这段等待的时间可以利用起来，去执行其他socket的IO操作（当然是满足读写状态的socket）。或者说，就是只有你满足读写条件后，你准备好后，我（也就是线程）才来处理你的读写操作，而不是我来了，还要等你梳妆打扮半小时才能出发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;select、poll、epoll等函数的使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IO复用中，一个线程同时负责多个socket连接的读写。select、poll、epoll函数简单地说，就是把满足读写状态的socket挑选出来。不同的是，它们挑选的方式不同而已。这里由于博主涉猎不深，也就不展开介绍了。&lt;/p&gt;
&lt;h2&gt;FAQ 常见问题&lt;/h2&gt;
&lt;p&gt;说是常见问题，其实只是我个人想到的，看客可能会存在的疑惑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Java的socket API与window或linux底层的socket API是什么关系？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java的socket是上层封装的API，它使得不管什么平台，都能使用同一套API。它的底层实现还是c语言的库函数。到底用哪个看运行环境，如果是window，那底层用的就是windows的socket api，否则就是linux的socket api。其实你装JDK的时候就已经确定了，因为下jdk的时候就已经选择了windows/linux。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.如果读队列已满，发送方继续发送的数据会丢失吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 这就涉及到TCP的拥塞控制了，当队列已满的时候，新来的数据不会被确认。没有确认收到的数据，它是会重新发的。读者可以往拥塞控制（congestion control）方向去看。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://eklitzke.org/how-tcp-sockets-work&quot; target=&quot;_blank&quot;&gt;1.How TCP Socket works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_interface_controller&quot; target=&quot;_blank&quot;&gt;2.Network Interface Controller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_socket&quot; target=&quot;_blank&quot;&gt;3.Network Socket&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_socket&quot; target=&quot;_blank&quot;&gt;4.How to find the socket buffer size of Linux?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://linux.die.net/man/2/socketcall&quot; target=&quot;_blank&quot;&gt;5.system call about socket&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 03 Feb 2019 13:36:00 +0000</pubDate>
<dc:creator>猫毛&amp;#183;波拿巴</dc:creator>
<og:description>前言 以前对IO、NIO还算了解，也写过Netty的项目。但是对底层的数据传递不是很了解，一直存有这方面的疑惑。但是由于有其他事情就被打断了。前阵子因为想要了解volatile关键字的原理，学习了下J</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/longfurcat/p/10349365.html</dc:identifier>
</item>
<item>
<title>操作系统与程序运行以及进程简介 多线程上篇（一） - noteless</title>
<link>http://www.cnblogs.com/noteless/p/10350112.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noteless/p/10350112.html</guid>
<description>&lt;p&gt;&lt;span&gt;本系列将对Java多线程进行简单的介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分为上中下三个章节。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上篇对操作系统中关于进程、并发的相关概念以及问题进行了介绍；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;中篇对Java多线程的基础进行介绍；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下篇将会对Java多线程编程提供的工具、模式进行介绍；&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Java多线程，首先需要了解线程，了解线程又需要对进程有所了解，而了解进程你需要知道程序的概念，知道程序的概念，你还需要了解操作系统。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;线程与操作系统&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;操作系统是对计算机硬件资源的管理程序，是应用程序与计算机硬件交互的中间层，其本质仍旧是运行于硬件电路上的程序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对计算机硬件来说不存在操作系统，只是处理器对指令的执行，不过操作系统是一个特殊一点的程序。&lt;/span&gt; &lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124600092-222555942.png&quot;&gt;&lt;img title=&quot;image_5c56721a_5013&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124602322-1132935434.png&quot; alt=&quot;image_5c56721a_5013&quot; width=&quot;463&quot; height=&quot;114&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;而对于应用开发者来说，以JavaWeb为例，我们却接触了太多的东西，首先是Java语言本身，然后........... &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;servlet？jsp？MVC？Spring？SpringBoot？ORM？Mybatis？Dubbo？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然而，这些其实仍旧还是Java本身--Java语言编写的程序，纵然有那么多的规范，协议，他也只是一个Java编写的程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以不管你用了多少技术，框架，模式，实现了怎么样的协议与功能，原理是什么，也只是人类意识层面上的内容，到底层只有指令。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用到的一些应用软件，MYSQL？REDIS？也只是程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以，运行于计算机之上的这一切都只是程序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这些程序经过指定的步骤，从高级到低级，从人类可以理解到无法识别，最终转换为计算机可以识别的指令。&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124606472-2084008006.png&quot;&gt;&lt;img title=&quot;image_5c56721a_602&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124608695-709772615.png&quot; alt=&quot;image_5c56721a_602&quot; width=&quot;815&quot; height=&quot;417&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;我们编写的所有的源代码，最终都要转换成计算机系统可以识别的内容，而计算机系统包括硬件以及运行其上的系统软件。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;我们所有的编码，都是面向指定的语法，而这门语言本身，则是面向操作系统的，因为外部软件通常是不能直接操纵硬件资源，需要借助于操作系统。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以某种程度上可以这样认为，所有的源代码都是面向语言的，而语言本身面向操作系统。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124609075-490426968.png&quot;&gt;&lt;img title=&quot;image_5c56721a_a16&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124609348-852993898.png&quot; alt=&quot;image_5c56721a_a16&quot; width=&quot;251&quot; height=&quot;319&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;操作系统提供了对于计算机硬件资源的管理，对于这些资源的访问，提供了一系列的方法途径，这些途径方法如同机器的操作面板，如同驾驶舱的按钮手柄。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说，计算机有什么不重要，计算机操作系统有什么才重要。最简单的例子就是重装系统后，如果没有网卡驱动，你的电脑将无法了解Internet，尽管你的网卡就好端端的插在哪里。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;对绝大多数应用程序员来说，操作系统，便是神一样的存在，所有的一切都要仰仗于他。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;什么是程序？&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;遵循某种语言的源代码经过编译、翻译等步骤转换后的一组计算机能识别和执行的指令，这就是程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是一种静态的资源，当你的电脑中安装一个软件后，如果不启动软件，该软件仅仅是占用磁盘空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个程序就像一个用汉字（程序设计语言）写下的红烧肉菜谱（程序），用于指导懂汉语和烹饪手法的人来做这个菜。菜谱就是存在于纸上的文字。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当程序需要运行时，操作系统会加载该程序的信息到内存中，并且分配CPU时间片以及其他硬件硬件资源，并且会对这些资源进行管理，比如数据加载到内存的什么位置了？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而且，现代操作系统都可以同时并发执行多个程序，内存中的这些数据又都是哪个程序的？某个软件在进行切换时执行到哪里了？等等这些都需要操作系统进行管理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;操作系统将程序的一次运行抽象为进程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简言之，如果   &lt;/span&gt; &lt;span&gt;你&lt;/span&gt;&lt;span&gt;（处理器）&lt;/span&gt;&lt;span&gt;按照  &lt;/span&gt; &lt;span&gt;菜谱&lt;/span&gt;&lt;span&gt;（程序）&lt;/span&gt;&lt;span&gt;去&lt;/span&gt;&lt;span&gt;    做菜&lt;/span&gt;&lt;span&gt;（执行程序）&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;这个过程就叫做      &lt;/span&gt; &lt;span&gt;下厨做饭&lt;/span&gt;&lt;span&gt;（进程）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124609545-986784145.png&quot;&gt;&lt;img title=&quot;image_5c56721a_7767&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124609729-2042514335.png&quot; alt=&quot;image_5c56721a_7767&quot; width=&quot;874&quot; height=&quot;203&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;抽象的概念，没有人会陌生，如果我们想使用Java语言描述一个学生，我们可能会创建一个Student类，里面有各种属性，比如姓名、年龄等&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student {

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Long id;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;

&lt;span&gt;private&lt;/span&gt; String name;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 姓名&lt;/span&gt;

&lt;span&gt;private&lt;/span&gt; Integer age;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 年龄&lt;/span&gt;

&lt;span&gt;private&lt;/span&gt; String sex;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 性别

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.............等等&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样一个Class就是一个数据结构，通过他对学生进行描述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而进程是操作系统对程序的一次执行的抽象，也就是说一个程序运行需要哪些信息、数据？这些所有的数据项集合就叫做进程。简言之就是一个程序运行所需信息的描述集合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们以类来比喻的话可能是这样子：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; 进程 {
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long 进程号;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String 程序计数器PC;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String xxx寄存器;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String 堆栈内容;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ............................等等&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;还有一个概念是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;进程上下文&lt;/strong&gt;&lt;/span&gt;，&lt;span&gt;刚才说到现代系统还可以并发的执行多道程序，必然存在着CPU的切换，那么从一个程序切换到另一个程序时，如何才能够恢复？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;既然进程是程序的一次运行过程中所需要信息的集合，如果在切换时，将这一瞬时状态，这一集合体各项数据记录下来，当再次切换回来时，只需要将数据恢复不就好了吗&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程执行活动全过程的这一个静态描述叫做进程上下文&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程间的切换，也被称之为上下文切换。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;通俗比喻：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果只有一个厨房，你做菜做一半了，然后需要让出来厨房让别人做，你需要做什么？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;收拾好你的食材，记住你刚才食材放置的位置以及处理的进度，哪个菜洗过了？盐放过了么？。。。等等这些数据就是进程上下文，当别人撤出去之后，你需要将这些状态还原，这就是上下文切换。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;随着现代计算机技术的发展，进程的弊端开始出现，由于进程是资源拥有者，创建、撤消与切换存在较大的时空开销，因此需要引入轻型进程，线程就是轻量级的进程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程仍然是资源分配的基本单位，线程是程序执行的最小单位&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程的出现可以理解为计算机操作系统对于程序的执行进行了更加精细化的控制，将资源分配，程序运行进行了更加细致的分工。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个线程都运行在进程的上下文中，共享同样的代码和全局数据，很显然，多线程比多进程更容易共享数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总之，线程的出现是操作系统技术的发展，为了更加细化分工，节省开销的一种做法，是在进程的基础上发展而来的。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;并发与并行&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;下面这幅图可以很好地解释并发与并行&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124610015-595560345.png&quot;&gt;&lt;img title=&quot;image_5c56721a_413d&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203124610375-398451890.png&quot; alt=&quot;image_5c56721a_413d&quot; width=&quot;584&quot; height=&quot;564&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;一个咖啡机两个队伍，就是并发；两个咖啡机，两个队伍，就是并行。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;并发 concurrent&lt;/strong&gt;&lt;/span&gt; ，&lt;span&gt;通过CPU调度算法，进行进程间的切换，也就是多任务执行，操作系统将CPU时间片分配给每个进程，给人并行处理的感觉&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;并行  parallel&lt;/strong&gt;&lt;/span&gt;，&lt;span&gt;并行就是同时执行的意思，多个CPU或者多个机器同时执行一段处理逻辑，是真正的同时。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;21&quot;&gt;
&lt;h4&gt;&lt;span&gt;多线程&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;很久很久很久以前，操作系统以串行的方式运行，当正在执行的程序遇到阻塞操作，比如等待IO时，CPU空闲等待，极大地浪费了CPU&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以后来出现了多任务操作系统，可以对程序进行切换，当遇到阻塞操作时，CPU可以去执行另外的程序，提高了CPU的利用率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于线程也是如此，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;多线程技术相当于是应用程序内部的“多任务”&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就好比一个应用程序内部有多个线程，其中一个线程等待IO操作时，可以切换执行其他的线程，完成其他的任务，所以对于多线程编写的程序，看起来程序能够更快的完成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以刚才说线程是操作系统对于程序运行过程的更加细致的划分与掌控，对于一个多线程程序，能够更加充分的利用CPU资源，看起来执行快了，是因为CPU的效率变高了，而不是程序的运行所需时间变少了&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div readability=&quot;56&quot;&gt;
&lt;p&gt;&lt;span&gt;对于一个单CPU系统，对于多任务的实现就是并发，操作系统不断地进行着切换，将时间片分配给不同的程序，以看起来像多个程序是共同运行的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过多线程，将一个应用程序本身拆解为多任务，如果像上面说的某个线程等待IO导致阻塞，可以执行其他的线程任务，那么将会提高CPU的利用率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是如果是类似1+2+3+4......+N的计算呢？假设计算过程是均等的，这不会出现IO阻塞的情况，每一次的运算都是相同的，CPU本身也没有空闲等待的浪费，所以CPU利用率没有上升，相反还会有线程切换维护的开销，所以整体看性能或许略有下降。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;单核场景下，尽管多线程在有些场景下可以提高CPU的利用率，但是对于单CPU系统（单核）系统，在有些场景下，反而会降低整体性能。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为有的时候你并不能提高利用率；而且有的时候即使提高了利用率，如果提高的那一部分利用率，还不足以抵消做的那些不该做的事情的开销，整体看并不一定是往好的方向发展。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;很显然，对于单CPU（单核）尽管有些场景多线程可以提高利用率，但是有时也并不能，所以多线程编程并没有强势发展。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;但是后来，CPU主频的发展越来越缓慢，对于CPU主频的升级，摩尔定律开始失效了，因为发展太快，集成电路越来越接近极限了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;既然纵向不能发展，人们总是有办法的，开始横向发展，不再追究单核的计算速度，而是研究如何能够将多个独立的计算单元整合到一个CPU中，也就是现在说的多核。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;随着技术的发展， 能够装载的核心数目越来越多&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;对于多核CPU，能够真正的做到在同一瞬时，执行多个线程，是真正的并行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以很显然，这种场景对于真正的并行，不管你的程序任务是什么样子的，对于多线程程序，必然能够提高程序的执行速度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果只要一个老师辅导三个学生，你需要合理的安排时间任务，才有可能提高整体的效率；但是如果三个学生对应着三个老师同时在辅导，整体的效率肯定是提高的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以随着多核CPU以及超线程技术的发展，多线程编程就显得格外重要。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果单核CPU的性能可以无限制的快速提高，软件开发者完全不用关心多线程编程，一切交给CPU就好了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，目前的情况却是CPU的性能已经达到瓶颈，硬件在横向发展，所以如果想要提高CPU的利用率，让你的程序更快的执行，你将不得不面对多线程编程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《实战Java高并发程序设计》中提到：“顶级计算机科学家唐纳德·尔文·克努斯(Donald Ervin Knuth )，如此评价这种情况:&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;29&quot;&gt;
&lt;p&gt;&lt;span&gt;在我看来，这种现象(并发)或多或少是由于硬件设计者己经无计可施了导致的，他们将摩尔定律失效的责任推脱给软件开发者。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也说明了这个问题----&lt;/span&gt;&lt;span&gt;&lt;strong&gt;现在为什么要更加关注多线程技术？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多核场景以及超线程技术的发展下，不是你主动地想要去使用多线程技术，而是现有的硬件体系，想要获得更好地程序性能，你将不得不使用多线程技术进行编程。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当我处理器还是只能一个一个的来的时候，你们是不是多线程并没有那么重要&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是当我可以瞬时同时处理多个线程的时候，如果你还是只有一个线程，你每一时刻也只会有一个线程在执行，但是别人-多线程程序，可能就是多个，所以你的程序的速度与别人相比怎么样？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尽管借助于多线程技术，因为有线程切换等系统开销，所以总共需要CPU做的事情，要大于单线程的时候；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是CPU多核的并行处理能力以及CPU利用率的提高，将会大大的提高程序的整体效率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以在多核时代，多线程是必须要考虑的问题。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;不管是进程还是线程，都是操作系统对于程序执行的抽象描述，是相关数据：寄存器状态、堆栈值等所有相关数据的集合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过进程的相关信息的维护管理，操作系统保障多道程序可以顺利的切换执行；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而对于多线程的应用程序，需要开发者对线程的数据等相关信息进行控制，以保证多线程间可以正确的运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多线程共享进程资源，而有些资源是互斥的，并不能允许同时访问，比如对计数器+1，如果临界区代码可以同时访问，可能两个人同时过来，每个人同时从1开始执行加1操作，结果却是2，这显然是不正确的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;多线程编程需要解决的核心就是&lt;/span&gt;&lt;span&gt;互斥资源的访问&lt;/span&gt;&lt;span&gt;以及&lt;/span&gt;&lt;span&gt;如何高效的利用CPU&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;保障资源的互斥访问是为了保证程序的正确性，否则再快的程序也没有意义；如果编写的程序非常的不合理，逻辑不清晰，反而可能会带来性能问题，而不是提高效率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以多线程相关的技术的确很复杂，而且非常容易出错，而且学习成本很高，但是，他终归是为了提高CPU的利用率的同时并且保障临界资源的正确访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作为多线程编程人员，如同交警，你需要合理的指挥，提高路口的通行效率，尽最大可能缓解交通堵塞情况，而且需要保证不能在你的指挥下还发生了交通事故或者造成了更大的拥堵；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是两个主要方面，就是前面提到的效率和互斥访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外路口我应该清场出来多大空间用来调度指挥？（锁粒度）过几分钟这个方向的走，过几分钟那个方向的走（锁时间）？我是轮流几秒钟切换下？还是哪边车多让哪边多走一会还是怎么样（锁偏向）？这些细节非常复杂繁琐。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在未来的一段时间内，多线程编程模型是必然的趋势，也是程序员必须要面对的一件事情，过去的单处理器系统，并发可能是多余的，但是今天，已经成为了势不可挡的趋势。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;随着技术的发展，多线程的开发也在从复杂往简单的方向演化（尽管现在仍旧看起来很复杂），随后可能会慢慢地出现很多集成、封装、框架等以让多线程编程更加简单 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就如同EJB-Spring-SpringBoot的发展，企业级应用的开发过程一直在简化，但是核心原理却不断的被封装在深处，如果不了解底层，只会招式，永远也打不出来有力的拳头，所以建议大家尽可能的深入学习多线程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本系列文章作为自己的学习记录，从操作系统中关于进程线程并发的相关概念切入，开始介绍Java多线程编程。&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 03 Feb 2019 12:03:00 +0000</pubDate>
<dc:creator>noteless</dc:creator>
<og:description>本文从计算机操作系统，程序的概念开始引入进程的概念，开始介绍进程、线程与并发之间的关系，操作系统对于并发的概念，是学习任何语言多线程必不可少的步骤之一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noteless/p/10350112.html</dc:identifier>
</item>
<item>
<title>SpringMVC入门 - 风沙迷了眼</title>
<link>http://www.cnblogs.com/fsmly/p/10349361.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fsmly/p/10349361.html</guid>
<description>&lt;p&gt;&lt;span&gt;一、SpringMVC原理解析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1、我们首先分析一下整个请求处理的流程：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;①&lt;/strong&gt;在B/S架构的系统中，用户首先从浏览器中发出Http请求（请求中会包含用户的请求内容信息或者表单信息），然后首先经过前端控制器（DispatcherServlet）进行处理，&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;②&lt;/strong&gt;然后前端控制器需要接触处理器映射器知道自己使用哪一个处理器处理请求信息，&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;③&lt;/strong&gt;然后处理器映射器会返回给前端控制器一个处理器执行链，&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;④&lt;/strong&gt;前端控制器通过处理器适配器去执行处理器，然后让处理器适配器返回给自己模型和视图，&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑤&lt;/strong&gt;处理器适配器去调用相应的处理器&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑥&lt;/strong&gt;执行后的处理器返回给处理器适配器信息，具体就是返回处理结果（ModelAndView）&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑦&lt;/strong&gt;处理器适配器得到模型视图（ModelAndView）之后，将之返回给前端控制器&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑧&lt;/strong&gt;前端控制器自己本身不对ModelAndView进行解析，而是交给视图解析器进行视图解析&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑨&lt;/strong&gt;视图解析器完成视图解析后，将视图（View）返回给前端控制器&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑩&lt;/strong&gt;前端控制器得到view后，会交给视图进行渲染，具体就是jsp、freemaker等等，最后响应给用户&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190202194730052-1969937710.png&quot; alt=&quot;&quot; width=&quot;638&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、通过上面的解释和线面图例的理解，我们可以对SpringMVC这个框架的处理流程有一个大致的了解。上面只是介绍了一部分组件，我们下面可以简单的介绍各个组件的功能&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;①&lt;/strong&gt;前端控制器DispatcherServlet：作为整个SpringMVC的中央处理器，可以发现整个流程中大部分都经过它。用户请求首先到达前端处理器（MVC模式中C层），作为整个流程的中心，由他调用其他组件，其存在大大降低了各个组件的耦合性&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;②&lt;/strong&gt;处理器映射器HandlerMapping：顾名思义，处理器映射器就是根据用户请求找到相应的处理器Handler进行处理请求，SpringMVC中提供配置文件方式、接口方式、注解方式等等实现不同的映射方式&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;③&lt;/strong&gt;处理器适配器HandlerAdapter：不同于处理器映射器，处理器适配器的作用是对处理器进行执行（处理器映射器是找到处理器），HandlerAdapter可以通过扩展适配器对多种类型的适配器进行执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;④&lt;/strong&gt;处理器Handler：处理器也可以说是后端控制器，需要由自己根据处理器适配器的规范来进行编写，在DispatcherServlet的控制下对具体的用户请求进行处理&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑤&lt;/strong&gt;视图解析器ViewResolver：负责将结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jsp、freemarker、pdf等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、搭建SpringMVC程序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、首先我们需要知道SpringMVC是Spring的一个部分，所以在编写程序开始的时候需要导入SpringMVC的jar包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203125005546-1773246879.png&quot; alt=&quot;&quot; width=&quot;252&quot; height=&quot;313&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、在导入springmvc的相关jar包之后，需要在web.xml中配置前端控制器DispatcherServlet，在配置前端控制器的时候，我们自己需要手动修改配置springmvc的配置文件以及他的路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203125332954-2079025317.png&quot; alt=&quot;&quot; width=&quot;307&quot; height=&quot;71&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面就是在web.xml中配置到的前端控制器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;         version&lt;/span&gt;&lt;span&gt;=&quot;4.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置前端控制器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;SpringMvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            org.springframework.web.servlet.DispatcherServlet
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            配饰SpringMVC的配置文件（处理器映射器、适配器等）
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            注明需要这样配置的原因：自己配置contextConfigLocation，就不会自己默认加载/WEB-INF/下面的dispatch-servlet.xml
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;contextConfigLocation&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;classpath:springmvc.xml&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;SpringMvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.do&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3、下面说明一下上面配置的url-pattern的问题，在SpringMVC中，DispatcherServlet的拦截方式有下面两种&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①*&lt;/strong&gt;.do、*.action：表示拦截指定后缀的url，这种方式对于服务器端的静态资源（jsp、css、image等）不会拦截&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;②/ ：&lt;/strong&gt;表示拦截所有资源，这种拦截方式的设计可以实现RESTful风格，后面会介绍到&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 需要注意的是：不能使用/*（这种方式下，当请求到action后，action处理完返回ModelAndView的jsp信息时，又会被拦截，导致不能根据jsp映射成功）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、我们上面修改了SpringMVC的配置文件，所以我们下来需要自己修改SpringMVC的配置文件。而在springmvc.xml中，我们需要配置处理器映射器，处理器（Handler），处理器适配器、视图解析器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①&lt;/strong&gt;配置处理器映射器，处理器映射器会根据配置的beanname找到相应的URL，找到的就是制定的Handler，然后交给Handler进行处理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        处理器映射器
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        将bean的NAME作为url进行查找，需要配置handler的时候指定bean的NAME（即url）
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;②&lt;/strong&gt;配置处理器适配器，我们配置的是SimpleControllerHandlerAdapter，查看该类的源代码，会发现下面这个方法，这个方法就是判断我们自己编写的处理器（Handler）是否满足条件（实现Controller接口），所以在接下来编写Handler时需要实现Controller接口以及其中的方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203130546031-1754516058.png&quot; alt=&quot;&quot; width=&quot;528&quot; height=&quot;31&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面这是处理器适配器的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        处理器适配器
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        所有处理器适配器都实现了Handler Adapter这个接口，通过观察SimpleControllerHandlerAdapter中的support方法可以发现，
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;        我们自己需要实现Controller接口 才能执行
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;③&lt;/strong&gt;根据上面讲的，我们就需要自己编写Handler，我们先查看一下Controller接口的代码，发现Controller只有一个方法，即请求处理然后返回ModelAndView对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203131005403-72861950.png&quot; alt=&quot;&quot; width=&quot;573&quot; height=&quot;53&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以下来我们就自己实现这个方法，然后返回ModelAndView（包括其中的数据，和路径信息）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.springmvc.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.test.springmvc.po.Product;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.mvc.Controller;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * 实现Controller的Handler
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ItemController &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Controller {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟数据&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         List&amp;lt;Product&amp;gt; products = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         Product product1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         product1.setPname(&quot;笔记本&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         product1.setShop_price(123&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        products.add(product1);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         Product product2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         product2.setPname(&quot;手机&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         product2.setShop_price(123&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        products.add(product2);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回ModelAndView&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         ModelAndView modelAndView = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;想模型视图中添加数据&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         modelAndView.addObject(&quot;products&quot;&lt;span&gt;, products);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定视图&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         modelAndView.setViewName(&quot;/WEB-INF/items/itemsList.jsp&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们自己编写好Handler之后，就需要根据处理器映射器的要求，在springmvc.xml中配置Handler&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置Handler&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;/queryItemList.do&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.test.springmvc.controller.ItemController&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置的beanname就会处理器映射器进行映射，然后执行相应的处理器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;④&lt;/strong&gt;上面我们返回的是jsp页面信息，所以下俩就需要配置视图解析器，解析jsp。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;视图解析器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 我们来看一下InternalResourceViewResolver这个类中的代码，该类默认支持jstl解析，所以我们就导入jstl的jar包，正好解释了前面第一步中导包（其中含有jstl包）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; jstlPresent = ClassUtils.isPresent(&quot;javax.servlet.jsp.jstl.core.Config&quot;, InternalResourceViewResolver.&lt;span&gt;class&lt;/span&gt;.getClassLoader());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;⑤&lt;/strong&gt;在上面的Handler中，我们返回了一个jsp页面，下面就简单的根据返回信息编写一张简单的jsp页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_564648e9-dcbf-416a-8cc5-8f09357a1daa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_564648e9-dcbf-416a-8cc5-8f09357a1daa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_564648e9-dcbf-416a-8cc5-8f09357a1daa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ taglib uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://java.sun.com/jsp/jstl/core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ taglib uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://java.sun.com/jsp/jstl/fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;查询商品列表&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;${pageContext.request.contextPath }/item/queryItem.action&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;查询条件：
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; border&lt;/span&gt;&lt;span&gt;=1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;查询&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;商品列表：
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; border&lt;/span&gt;&lt;span&gt;=1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;商品名称&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;商品价格&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:forEach &lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;${products }&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${item.pname }&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${item.shop_price }&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${pageContext.request.contextPath }/item/editItem.do?id=${item.pid}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;修改&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;jsp测试页面&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;⑥&lt;/strong&gt;然后在IDEA中部署Tomcat，进行测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203132028562-39111721.png&quot; alt=&quot;&quot; width=&quot;1006&quot; height=&quot;114&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 三、基于非注解方式进行编写&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、处理器映射器的非注解配置&lt;/p&gt;
&lt;p&gt;　　上面使用的是BeanNameURLHandlerMapping来进行映射。其简单的执行过程就是：BeanNameUrlHandlerMapping根据请求的url与spring容器中定义的bean的name进行匹配，从而从spring容器中找到bean实例。下面我们使用简单映射器（SimpleSimpleUrlHandlerMapping）进行处理器映射器的配置&lt;/p&gt;
&lt;p&gt;　　其中prop中的key就是配置好url，而value就是我们配置的Handler的id值：&lt;span&gt;&amp;lt;bean id=&quot;test&quot; name=&quot;/queryItemList.do&quot; class=&quot;cn.test.springmvc.controller.ItemController&quot;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;非注解的处理器映射器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mappings&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;对指定的Controller进行映射&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;test1.do&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　然后我们重启启动项目，在浏览器中输入http://localhost:8080/springmvc1/test1.do，就可以同样实现上面BeanNameUrlHandlerMapping实现的这个功能。&lt;/p&gt;
&lt;p&gt;　　总结一下就是：simpleUrlHandlerMapping是BeanNameUrlHandlerMapping的增强版本，它可以将url和处理器bean的id进行统一映射配置。&lt;/p&gt;
&lt;p&gt;　　2、处理器适配器的非注解配置，我们使用HttpRequestHandlerAdapter来实现，并且通过观察该类可以发现，该适配器所要求的处理器是需要实现HttpRequestHandler接口的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203152438365-1993377900.png&quot; alt=&quot;&quot; width=&quot;683&quot; height=&quot;41&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　下面就是具体的实现方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.springmvc.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.test.springmvc.po.Product;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.HttpRequestHandler;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ItemHandler &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HttpRequestHandler {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟数据&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         List&amp;lt;Product&amp;gt; products = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         Product p1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         p1.setPid(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         p1.setPname(&quot;test1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         p1.setShop_price(12&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        products.add(p1);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         Product p2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         p1.setPid(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         p2.setPname(&quot;test2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         p2.setShop_price(13&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        products.add(p2);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         httpServletRequest.setAttribute(&quot;products&quot;&lt;span&gt;, products);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         httpServletRequest.getRequestDispatcher(&quot;/WEB-INF/items/itemsList.jsp&quot;&lt;span&gt;).forward(httpServletRequest,httpServletResponse);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　2、然后同样可以再浏览器中输入http://localhost:8080/springmvc1/test2.do得到测试结果&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203171347033-661183922.png&quot; alt=&quot;&quot; width=&quot;985&quot; height=&quot;116&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、基于注解方式进行开发&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、注解方式和非注解方式开发的不同就是处理器映射器和处理器适配器的配置不同（而且需要注意，如果使用注解的方式进行，那么需要同时使用注解方式的处理器适配器和处理器映射器，不能一个使用非注解的一个使用注解的），我们首先配置基于注解的HandlerMapping&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;基于注解的处理器映射器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2、然后配置基于注解的处理器适配器 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;基于注解的处理器适配器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、既然是基于注解的方式进行，那么可以不继承或者实现某个特定的接口来进行编写Handler。只需要注意使用Controller注解来表示编写的类是一个处理器，同时编写的方法的返回类型应该是前端控制器所需要的ModelAndView，下面就是简单的一个Handler的编写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.springmvc.annotation;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.test.springmvc.po.Product;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryListHandler {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     @RequestMapping(&quot;/queryList.do&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; ModelAndView queryList() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟数据&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         List&amp;lt;Product&amp;gt; productList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         Product p1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         p1.setPname(&quot;AnnotationTest1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         p1.setShop_price(12&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         Product p2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         p2.setPname(&quot;AnnotationTest2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         p2.setShop_price(12&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        productList.add(p1);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        productList.add(p2);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         ModelAndView modelAndView = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;想模型视图中添加数据&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         modelAndView.addObject(&quot;productList&quot;&lt;span&gt;, productList);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定视图&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         modelAndView.setViewName(&quot;/WEB-INF/items/itemsList.jsp&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　4、然后在浏览器中进行测试如下： &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203181959287-359540645.png&quot; alt=&quot;&quot; width=&quot;968&quot; height=&quot;116&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、SpringMVC执行过程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、按照开始介绍的SpringMVC的执行原理框架图来进行分析，首先请求到达前端控制器，这里会调用一个叫做doDispatcher的方法&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203183134563-1292182056.png&quot; alt=&quot;&quot; width=&quot;745&quot; height=&quot;26&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、前端控制器中需要找到处理器映射器，即前端控制器将请求url交给处理器映射器，从而根据url得到handler&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203183906459-337238562.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、处理器映射器包装请求信息，返回给前端控制器一个处理器执行链&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203184059859-184455443.png&quot; alt=&quot;&quot; width=&quot;661&quot; height=&quot;304&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4、前端控制器调用HandlerAdapter(处理器适配器)对HandlerMapping找到Handler进行包装、执行。HandlerAdapter执行Handler完成后，返回了一个ModleAndView(springmvc封装对象)。这个过程就分为两步，第一步就是找到处理器适配器&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203184403504-1232553342.png&quot; alt=&quot;&quot; width=&quot;547&quot; height=&quot;32&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　第二步就是找到处理器适配器调用响应的处理器Handler。然后返回给前端控制器一个ModelAndView&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203184457459-212935111.png&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;37&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　5、这样现在前端控制器就得到了ModelAndView，下面就是交给视图解析器进行解析，解析得到视图View&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203184912027-1876973508.png&quot; alt=&quot;&quot; width=&quot;731&quot; height=&quot;82&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　6、前端控制器将模型数据进行渲染，然后放在reques中&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190203185944845-1970837074.png&quot; alt=&quot;&quot; width=&quot;875&quot; height=&quot;275&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 03 Feb 2019 11:07:00 +0000</pubDate>
<dc:creator>风沙迷了眼</dc:creator>
<og:description>一、SpringMVC原理解析 1、我们首先分析一下整个请求处理的流程： ①在B/S架构的系统中，用户首先从浏览器中发出Http请求（请求中会包含用户的请求内容信息或者表单信息），然后首先经过前端控制</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fsmly/p/10349361.html</dc:identifier>
</item>
<item>
<title>java设计模式--Builder模式 - 喜欢日向雏田一样的女子啊</title>
<link>http://www.cnblogs.com/lvbinbin2yujie/p/10350847.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lvbinbin2yujie/p/10350847.html</guid>
<description>&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/lvbinbin2yujie/p/10350847.html#titleOne&quot;&gt;&lt;span&gt;一.Builder模式&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/lvbinbin2yujie/p/10350847.html#titleTwo&quot;&gt;&lt;span&gt;二.使用例子&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/lvbinbin2yujie/p/10350847.html#titleThreee&quot;&gt;&lt;span&gt;三.Spring中的Builder模式&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Builder模式，构建者、构造者模式，在《图解设计模式》中归为 生成实例 一栏，该模式用于组装具有复杂结构的实例；&lt;/p&gt;
&lt;p&gt;　　　　当需要逐步获取对象的初始值时，可以使用Builder模式；&lt;/p&gt;

&lt;h2 id=&quot;titleOne&quot;&gt;一.Builder模式角色&lt;/h2&gt;
&lt;h3&gt;Builder：建造者，Builder角色负责定义用来生成实例的接口API，Builder角色中准备了用于生成实例的具体方法；&lt;/h3&gt;
&lt;h3&gt;ConcreteBuilder：具体的建造者，负责实现Builder接口的的类，定义了生成实例时实际调用的方法，定义了获取最终生成结果的方法；&lt;/h3&gt;
&lt;h3&gt;Director：监工，负责使用Builder角色的接口来生成实例，不依赖于ConcreteBuilder；&lt;/h3&gt;

&lt;h2 id=&quot;titleTwo&quot;&gt;二.使用例子&lt;/h2&gt;
&lt;p&gt;Demo：比如有一段预约信息，将其解析为  预约 对象； 预约信息如下：&quot;Date, November 5, Headcount, 250, City, Shanghai, DollarsPerHead, 60,HasSite, false&quot;；&lt;/p&gt;
&lt;p&gt;date为预约日期，headCount为预期来人数，city为城市，DollarsPerHead为人均预算，hasSite为是否提供地址(比如预约某场演出，是否给表演者提供地点了)；&lt;/p&gt;
&lt;p&gt;类结构图：&lt;/p&gt;
&lt;p&gt;                                            &lt;img src=&quot;https://img2018.cnblogs.com/blog/1550387/201902/1550387-20190203182919381-1717737679.png&quot; alt=&quot;&quot; width=&quot;576&quot; height=&quot;388&quot;/&gt;&lt;/p&gt;
&lt;p&gt;预约信息  &lt;span&gt;&lt;span&gt;Reservation.java&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;@Getter
@Setter
@ToString   //lombok的注解，方便代码查看以及编写
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Reservation {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Date, November 5, Headcount, 250, City, Shanghai, DollarsPerHead, 60,HasSite, false&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date date;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; headCount;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String city;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; dollarsPerHead;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasSite;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ReservationBuilder.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ReservationBuilder {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ReservationBuilder futurize(Date date) ;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ReservationBuilder setCity(String city);
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ReservationBuilder setDollarsPerHead(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; dollarsPerHead);
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ReservationBuilder setSite(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasSite);
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ReservationBuilder setHeadCount(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; headCount);
    
    Reservation build();
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DefaultReservationBuilder.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DefaultReservationBuilder &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ReservationBuilder{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date date;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; headCount;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String city;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; dollarsPerHead;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasSite;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ReservationBuilder futurize(Date date) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.date=&lt;span&gt;date;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ReservationBuilder setCity(String city) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.city=&lt;span&gt;city;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ReservationBuilder setDollarsPerHead(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; dollarsPerHead) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dollarsPerHead=&lt;span&gt;dollarsPerHead;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ReservationBuilder setSite(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasSite) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hasSite=&lt;span&gt;hasSite;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ReservationBuilder setHeadCount(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; headCount) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headCount=&lt;span&gt;headCount;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Reservation build() {
        Reservation reservation &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Reservation();
        reservation.setCity(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.city);
        reservation.setDate(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.date);
        reservation.setDollarsPerHead(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dollarsPerHead);
        reservation.setHasSite(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hasSite);
        reservation.setHeadCount(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.headCount);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; reservation;
    }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ReservationDirector.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReservationDirector {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ReservationBuilder builder;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ReservationDirector(ReservationBuilder builder) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.builder=&lt;span&gt;builder;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Reservation construct(String input) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        String[] strings &lt;/span&gt;= input.split(&quot;,\\s*&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;strings.length-1;i++&lt;span&gt;) {
            String type&lt;/span&gt;=&lt;span&gt;strings[i];
            String val&lt;/span&gt;=strings[i+1&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&quot;date&quot;&lt;span&gt;.equalsIgnoreCase(type)) {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; year =&lt;span&gt; Calendar.getInstance().get(Calendar.YEAR);
                String res&lt;/span&gt;=year+ &quot; &quot;+val.substring(0, 3)+&quot; &quot;+val.substring(val.length()-2&lt;span&gt;);
                SimpleDateFormat sdf &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy MMM dd&quot;&lt;span&gt;, Locale.ENGLISH);
                Date date &lt;/span&gt;=&lt;span&gt; sdf.parse(res);
                builder.futurize(date);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&quot;headcount&quot;&lt;span&gt;.equalsIgnoreCase(type)) {
                builder.setHeadCount(Integer.valueOf(val));
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&quot;city&quot;&lt;span&gt;.equalsIgnoreCase(type)) {
                builder.setCity(val);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&quot;dollarsperHead&quot;&lt;span&gt;.equalsIgnoreCase(type)) {
                builder.setDollarsPerHead(Double.parseDouble(val));
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&quot;hassite&quot;&lt;span&gt;.equalsIgnoreCase(type)) {
                builder.setSite(Boolean.parseBoolean(val));
            }
        }
        Reservation reservation &lt;/span&gt;=&lt;span&gt; builder.build();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; reservation;
    }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Date, November 5, Headcount, 250, City, Shanghai, DollarsPerHead, 60,HasSite, false&lt;/span&gt;
        String input=&quot;Date, November 5, Headcount, 20, City, Shanghai, DollarsPerHead, 60,HasSite, false&quot;&lt;span&gt;;
        ReservationBuilder builder&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultReservationBuilder();
        ReservationDirector director&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReservationDirector(builder);
        Reservation reservation &lt;/span&gt;=&lt;span&gt; director.construct(input);
        System.out.println(reservation);
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1550387/201902/1550387-20190203182004225-771306036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;titleThreee&quot;&gt;三.Spring中的Builder模式&lt;/h2&gt;
&lt;p&gt;　　Spring中 RequestMappingInfo中内部接口Builder 、内部静态类DefaultBuilder等，就是采用了Builer模式，RequestMappingInfo就是监工Director对象；类结构图：&lt;/p&gt;
&lt;p&gt;               &lt;img src=&quot;https://img2018.cnblogs.com/blog/1550387/201902/1550387-20190203185351380-2005666734.png&quot; alt=&quot;&quot; width=&quot;622&quot; height=&quot;389&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Builder {
        &lt;/span&gt;&lt;span&gt;/* &lt;/span&gt;&lt;span&gt;Set the path patterns&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder paths(String... paths);

        &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;* Set the request method conditions&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder methods(RequestMethod... methods);&lt;br/&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Set the request param conditions&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder params(String... params);

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;Set the header conditions&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder headers(String... headers);

        &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;* Set the consumes conditions&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder consumes(String... consumes);

        &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;* Set the produces conditions&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder produces(String... produces);

        &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;* Set the mapping name&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder mappingName(String name);

        &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;* Set a custom condition to use&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder customCondition(RequestCondition&lt;/span&gt;&amp;lt;?&amp;gt;&lt;span&gt; condition);

        &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;* Provide additional configuration needed for request mapping purposes&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Builder options(BuilderConfiguration options);

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* Build the RequestMappingInfo&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        RequestMappingInfo build();
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建RequestMappingInfo对象地方：作用就是解析RequestMapping注解生成对应RequestMappingInfo对象；    &lt;/p&gt;
&lt;p&gt;Builder方法大部分返回值为Builder类型，作用是为了链式执行，看起来生成RequestMappingInfo对象代码只有一句简洁；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1550387/201902/1550387-20190203185545892-47459522.png&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;314&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 03 Feb 2019 11:06:00 +0000</pubDate>
<dc:creator>喜欢日向雏田一样的女子啊</dc:creator>
<og:description>一.Builder模式 二.使用例子 三.Spring中的Builder模式 Builder模式，构建者、构造者模式，在《图解设计模式》中归为 生成实例 一栏，该模式用于组装具有复杂结构的实例； 当需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lvbinbin2yujie/p/10350847.html</dc:identifier>
</item>
<item>
<title>ArrayBlcokingQueue，LinkedBlockingQueue与Disruptor三种队列对比与分析 - bigfan</title>
<link>http://www.cnblogs.com/dafanjoy/p/10345897.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dafanjoy/p/10345897.html</guid>
<description>&lt;p&gt;一、基本介绍&lt;/p&gt;
&lt;p&gt;ArrayBlcokingQueue，LinkedBlockingQueue是jdk中内置的阻塞队列，网上对它们的分析已经很多，主要有以下几点：&lt;/p&gt;
&lt;p&gt;1、底层实现机制不同，ArrayBlcokingQueue是基于数组的，LinkedBlockingQueue是基于链表的；&lt;/p&gt;
&lt;p&gt;2、初始化方式不同，ArrayBlcokingQueue是有界的，初始化时必须指定队列的大小；LinkedBlockingQueue可以是无界的，但如果初始化时指定了队列大小，也可以做为有界队列使用；&lt;/p&gt;
&lt;p&gt;3、锁机制实现不同，ArrayBlcokingQueue生产和消费使用的是同一把锁，并没有做锁分离；LinkedBlockingQueue中生产、消费分别通过putLock与takeLock保证同步，进行了锁的分离；&lt;/p&gt;
&lt;p&gt;使用的过程中，根据应该场景提供了可选插入和删除策略，我们需要掌握和区分&lt;/p&gt;
&lt;p&gt;1、插入操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列未满时，返回true；队列满则抛出IllegalStateException(“Queue full”)异常&lt;/span&gt;
&lt;span&gt;add(e);&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列未满时，直接插入没有返回值；队列满时会阻塞等待，一直等到队列未满时再插入。&lt;/span&gt;
&lt;span&gt;put(e);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列未满时，返回true；队列满时返回false。非阻塞立即返回。&lt;/span&gt;
&lt;span&gt;offer(e);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定等待的时间，如果在指定时间内还不能往队列中插入数据则返回false，插入成功返回true。 &lt;/span&gt;
offer(e, timeout, unit);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、删除操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列不为空时，返回队首值并移除；队列为空时抛出NoSuchElementException()异常&lt;/span&gt;
&lt;span&gt;remove();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列不为空返回队首值并移除；当队列为空时会阻塞等待，一直等到队列不为空时再返回队首值。&lt;/span&gt;
&lt;span&gt;queue.take();&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列不为空时返回队首值并移除；队列为空时返回null。非阻塞立即返回。 &lt;/span&gt;
&lt;span&gt;queue.poll();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定等待的时间，如果在指定时间内队列还未孔则返回null，不为空则返回队首值  &lt;/span&gt;
queue.poll(timeout, unit)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Disruptor框架是由LMAX公司开发的一款高效的无锁内存队列。 &lt;/p&gt;
&lt;p&gt;Disruptor的最大特点就是高性能，它的内部与众不同的使用了环形队列（RingBuffer）来代替普通的线型队列，相比普通队列环形队列不需要针对性的同步head和tail头尾指针，减少了线程协作的复杂度，再加上它本身基于无锁操作的特性，从而可以达到了非常高的性能；&lt;/p&gt;
&lt;p&gt;在使用Disruptor框架时，我们需要注意以下几个方面&lt;/p&gt;
&lt;p&gt;1、Disruptor的构造&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; eventFactory   定义的事件工厂
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; ringBufferSize  环形队列RingBuffer的大小，必须是2的N次方
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; threadFactory  消费者线程工厂
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; producerType 生产者线程的设置，当你只有一个生产者线程时设置为 ProducerType.SINGLE，多个生产者线程ProducerType.MULTI
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; waitStrategy  消费者的等待策略
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Disruptor(
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; EventFactory&amp;lt;T&amp;gt;&lt;span&gt; eventFactory,
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ringBufferSize,
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; ThreadFactory threadFactory,
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; ProducerType producerType,
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; WaitStrategy waitStrategy)
    {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(
            RingBuffer.create(producerType, eventFactory, ringBufferSize, waitStrategy),
            &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BasicExecutor(threadFactory));
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的消费者等待策略有以下：&lt;/p&gt;
&lt;p&gt;BlockingWaitStrategy： 使用锁和条件变量。CPU资源的占用少，延迟大；&lt;/p&gt;
&lt;p&gt;SleepingWaitStrategy： 在多次循环尝试不成功后，选择让出CPU，等待下次调度，多次调度后仍不成功，尝试前睡眠一个纳秒级别的时间再尝试。这种策略平衡了延迟和CPU资源占用，但延迟不均匀。&lt;/p&gt;
&lt;p&gt;YieldingWaitStrategy： 在多次循环尝试不成功后，通过Thread.yield()让出CPU，等待下次调度。性能和CPU资源占用上较为平衡，但要注意使用该策略时消费者线程最好小于CPU的核心数&lt;/p&gt;
&lt;p&gt;BusySpinWaitStrategy： 性能最高的一种，一直不停的自旋等待，获取资源。可以压榨出最高的性能，但会占用最多的CPU资源&lt;/p&gt;
&lt;p&gt;PhasedBackoffWaitStrategy： 上面多种策略的综合，CPU资源的占用少，延迟大。&lt;/p&gt;

&lt;p&gt;2、handleEventsWith与handleEventsWithWorkerPool的区别&lt;/p&gt;
&lt;p&gt;这两个方法区别主要就是在于是否重复消费队列中的消息，前者加载的不同消费者会各自对消息进行消费，各个消费者之间不存在竞争。后者消费者对于队列中的同一条消息不重复消费；&lt;/p&gt;

&lt;p&gt;二、性能对比&lt;/p&gt;
&lt;p&gt;上面我们对三种阻塞队列做了一个基本的介绍，下面我们分别对它们进行性能上的测试与比对，看下ArrayBlcokingQueue与LinkedBlockingQueue性能上有哪些差别，而Disruptor是否像说的那样具备很高的并发性能&lt;/p&gt;
&lt;p&gt;首先我们构造一个加单的消息事件实体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InfoEvent &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String value;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; InfoEvent() {

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; InfoEvent(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id, String value) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getValue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setValue(String value) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义事件工厂&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InfoEventFactory &lt;span&gt;implements&lt;/span&gt; EventFactory&amp;lt;InfoEvent&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; InfoEvent newInstance() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InfoEvent();
    }
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义Disruptor的消费者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InfoEventConsumer &lt;span&gt;implements&lt;/span&gt; WorkHandler&amp;lt;InfoEvent&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; startTime;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cnt;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; InfoEventConsumer() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.startTime =&lt;span&gt; System.currentTimeMillis();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onEvent(InfoEvent event) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        cnt++&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cnt ==&lt;span&gt; DisruptorTest.infoNum) {
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; endTime =&lt;span&gt; System.currentTimeMillis();
            System.out.println(&lt;/span&gt;&quot; 消耗时间： &quot; + (endTime - startTime) + &quot;毫秒&quot;&lt;span&gt;);
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来分别针对ArrayBlockingQueue、LinkedBlockingQueue与Disruptor编写测试程序&lt;/p&gt;
&lt;p&gt;ArrayBlcokingQueueTest&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ArrayBlcokingQueueTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; infoNum = 5000000&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; BlockingQueue&amp;lt;InfoEvent&amp;gt; queue = &lt;span&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;InfoEvent&amp;gt;(100&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; startTime =&lt;span&gt; System.currentTimeMillis();
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; pcnt = 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (pcnt &amp;lt;&lt;span&gt; infoNum) {
                    InfoEvent kafkaInfoEvent &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; InfoEvent(pcnt, pcnt+&quot;info&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        queue.put(kafkaInfoEvent);
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                        e.printStackTrace();
                    }
                    pcnt&lt;/span&gt;++&lt;span&gt;;
                }
            }
        }).start();

        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; cnt = 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (cnt &amp;lt;&lt;span&gt; infoNum) {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        queue.take();
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                        e.printStackTrace();
                    }
                    cnt&lt;/span&gt;++&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; endTime =&lt;span&gt; System.currentTimeMillis();
                System.out.println(&lt;/span&gt;&quot;消耗时间 ： &quot; + (endTime - startTime) + &quot;毫秒&quot;&lt;span&gt;);
            }
        }).start();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LinkedBlockingQueueTest&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LinkedBlockingQueueTest {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; infoNum = 50000000&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; BlockingQueue&amp;lt;InfoEvent&amp;gt; queue = &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;InfoEvent&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; startTime =&lt;span&gt; System.currentTimeMillis();
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; pcnt = 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (pcnt &amp;lt;&lt;span&gt; infoNum) {
                    InfoEvent kafkaInfoEvent &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; InfoEvent(pcnt, pcnt + &quot;info&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        queue.put(kafkaInfoEvent);
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                        e.printStackTrace();
                    }
                    pcnt&lt;/span&gt;++&lt;span&gt;;
                }
            }
        }).start();

        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; cnt = 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (cnt &amp;lt;&lt;span&gt; infoNum) {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        queue.take();
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                        e.printStackTrace();
                    }
                    cnt&lt;/span&gt;++&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; endTime =&lt;span&gt; System.currentTimeMillis();
                System.out.println(&lt;/span&gt;&quot;消耗时间： &quot; + (endTime - startTime) + &quot;毫秒&quot;&lt;span&gt;);
            }
        }).start();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DisruptorTest&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DisruptorTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; infoNum = 5000000&lt;span&gt;;
    @SuppressWarnings(&lt;/span&gt;&quot;unchecked&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        InfoEventFactory factory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InfoEventFactory();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ringBufferSize = 65536; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据缓冲区的大小 必须为2的次幂&lt;/span&gt;
        
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 
         *  factory，定义的事件工厂
         *  ringBufferSize，环形队列RingBuffer的大小，必须是2的N次方
         *  ProducerType，生产者线程的设置，当你只有一个生产者线程时设置为 ProducerType.SINGLE，多个生产者线程ProducerType.MULTI
         *  waitStrategy，消费者的等待策略  
         *  
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;final&lt;/span&gt; Disruptor&amp;lt;InfoEvent&amp;gt; disruptor = &lt;span&gt;new&lt;/span&gt; Disruptor&amp;lt;InfoEvent&amp;gt;&lt;span&gt;(factory, ringBufferSize,
                DaemonThreadFactory.INSTANCE, ProducerType.SINGLE, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; YieldingWaitStrategy());

        InfoEventConsumer consumer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InfoEventConsumer();
        disruptor.handleEventsWithWorkerPool(consumer);
        disruptor.start();
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                RingBuffer&lt;/span&gt;&amp;lt;InfoEvent&amp;gt; ringBuffer =&lt;span&gt; disruptor.getRingBuffer();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; infoNum; i++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; seq =&lt;span&gt; ringBuffer.next();
                    InfoEvent infoEvent &lt;/span&gt;=&lt;span&gt; ringBuffer.get(seq);
                    infoEvent.setId(i);
                    infoEvent.setValue(&lt;/span&gt;&quot;info&quot; +&lt;span&gt; i);
                    ringBuffer.publish(seq);
                }
            }
        }).start();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在十万、百万、千万三个数量级上，分别对ArrayBlockingQueue，LinkedBlockingQueue初始化为无界和有界队列，Disruptor的BlockingWaitStrategy和YieldingWaitStrategy，进行三次测试，生产者与消费者均在单线程模式下运行，对结果进行统计记录；&lt;/p&gt;
&lt;p&gt;测试环境：&lt;/p&gt;
&lt;p&gt;操作系统：win7 64位，CPU：Intel Core i7-3250M 2.9GHz ，内存：8G，JDK：1.8，disruptor版本：3.4.2&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;五十万数据&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table class=&quot;MsoTableGrid&quot; border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot;&gt; &lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第一次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第二次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第三次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;ArrayBlcokingQueue&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;229ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;233ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;253ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;LinkedBlockingQueue&lt;span&gt;（无界）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;211ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;207ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;202ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;LinkedBlockingQueue&lt;span&gt;（有界）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;265ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;207ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;256ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Disruptor&lt;span&gt;（&lt;/span&gt;&lt;span&gt;BlockingWaitStrategy&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;71ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;56ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;65ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Disruptor&lt;span&gt;（&lt;/span&gt;&lt;span&gt;YieldingWaitStrategy&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;56ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;48ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;49ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;五百万数据&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table class=&quot;MsoTableGrid&quot; border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot;&gt; &lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第一次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第二次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第三次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;ArrayBlcokingQueue&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1530ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1603ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1576ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;LinkedBlockingQueue&lt;span&gt;（无界）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1369ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1390ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1409ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;LinkedBlockingQueue&lt;span&gt;（有界）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1408ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1397ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;1494ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Disruptor&lt;span&gt;（&lt;/span&gt;&lt;span&gt;BlockingWaitStrategy&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;345ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;363ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;357ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Disruptor&lt;span&gt;（&lt;/span&gt;&lt;span&gt;YieldingWaitStrategy&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;104ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;108ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;107ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;五千万数据&lt;/p&gt;
&lt;table class=&quot;MsoTableGrid&quot; border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第一次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第二次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;第三次&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;ArrayBlcokingQueue&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;14799ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;14928ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;15122ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;LinkedBlockingQueue&lt;span&gt;（无界）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;14226ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;14008ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;13518ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;LinkedBlockingQueue&lt;span&gt;（有界）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;14039ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;14434ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;13839ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Disruptor&lt;span&gt;（&lt;/span&gt;&lt;span&gt;BlockingWaitStrategy&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;2972ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;2910ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;2848ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;226&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Disruptor&lt;span&gt;（&lt;/span&gt;&lt;span&gt;YieldingWaitStrategy&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;116&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;699ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;742ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;698ms&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre readability=&quot;9&quot;&gt;
&lt;span readability=&quot;12&quot;&gt;&lt;br/&gt;然后我对程序进行了修改，让测试程序持续运行，每五千万输出一次，对运行期间CPU和内存使用情况进行了记录&lt;p&gt;ArrayBlcokingQueue&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780676/201902/780676-20190203151842597-1326150061.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;LinkedBlockingQueue（无界）&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780676/201902/780676-20190203152034115-328794348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;LinkedBlockingQueue（有界）&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780676/201902/780676-20190203152103155-769530396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Disruptor（BlockingWaitStrategy）&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780676/201902/780676-20190203182319830-860859130.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;Disruptor（YieldingWaitStrategy）&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780676/201902/780676-20190203182328107-798477624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上面的测试中我们可以看到ArrayBlcokingQueue与LinkedBlockingQueue性能上区别不是很大，LinkedBlockingQueue由于读写锁的分离，平均性能会稍微好些，但差距并不明显。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;而Disruptor&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;性能表现突出，特别是随着数据量的增大，优势会越发明显。同时在单线程生产和消费的应用场景下，相比jdk内置的阻塞队列,CPU和GC的压力反而更小。&lt;p&gt;三、总结&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;pre&quot;&gt;&lt;span&gt; 1、ArrayBlcokingQueue与LinkedBlockingQueue，一般认为前者基于数组实现，初始化后不需要再创建新的对象，但没有进行锁分离，所以内存GC压力较小，但性能会相对较低；后者基于链表实现，每次都需要创建  一个node对象，会存在频繁的创建销毁操作，GC压力较大，但插入和删除数据是不同的锁，进行了锁分离，性能会相对较好；从测试结果上看，其实两者性能和GC上差别都不大，在实际运用过程中，我认为一般场景下ArrayBlcokingQueue的性能已经足够应对，处于对GC压力的考虑，及潜在的OOM的风险我建议普通情况下使用ArrayBlcokingQueue即可。当然你也可以使用LinkedBlockingQueue，从测试结果上看，它相比ArrayBlcokingQueue性能上有有所提升但并不明显，结合gc的压力和潜在OOM的风险，所以结合应用的场景需要综合考虑。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;2、Disruptor做为一款高性能队列框架，确实足够优秀，在测试中我们可以看到无论是性能和GC压力都远远好过ArrayBlcokingQueue与LinkedBlockingQueue;如果你追求更高的性能，那么Disruptor是一个很好的选择。&lt;br/&gt;但需要注意的是，你需要结合自己的硬件配置和业务场景，正确配置Disruptor，选择合适的消费策略，这样不仅可以获取较高的性能，同时可以保证硬件资源的合理分配。&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;3、对这三种阻塞队列的测试，并不是为了比较孰优孰劣，主要是为了加强理解，实际的业务应用需要根据情况合理进行选择。这里只是结合自己的使用，对它们进行一个简单的总结，并没有进行较深入的探究，如有错误的的地方还请指正与海涵。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;em&gt; &lt;/em&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;em&gt; &lt;/em&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;em&gt; &lt;/em&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;em/&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt; &lt;/em&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 03 Feb 2019 11:00:00 +0000</pubDate>
<dc:creator>bigfan</dc:creator>
<og:description>一、基本介绍 ArrayBlcokingQueue，LinkedBlockingQueue是jdk中内置的阻塞队列，网上对它们的分析已经很多，主要有以下几点： 1、底层实现机制不同，ArrayBlco</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dafanjoy/p/10345897.html</dc:identifier>
</item>
<item>
<title>教你学木马攻防 | 隧道木马 | 第一课 - 七夜的故事</title>
<link>http://www.cnblogs.com/qiyeboy/p/10350621.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiyeboy/p/10350621.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;今天开始讲讲木马攻防，感觉这些内容大家应该会更感兴趣一些，就从隧道木马说起。为什么会有隧道木马这一说呢？这是根据通信协议进行分类的。讲隧道木马之前，先讲讲端口映射和转发。端口映射和端口转发其实是一回事，原理是一样的，由于应用场景不同，才产生了不同的含义。&lt;/p&gt;

&lt;h2&gt;场景1 端口映射&lt;/h2&gt;
&lt;p&gt;端口映射的使用，以下图为例，这是一个在渗透测试中，比较常见的场景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190203163047382-719925093.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;一个hacker通过扫描暴露到公网中的主机A ，主机A开放了一些敏感端口，而且是弱口令，导致主机A被hacker完全控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;接着hacker就想往公司内网中渗透，通过在主机A监控流量或者扫描的方式，发现了主机B，但是主机B只能由主机A进行访问，开放了80端口，而且没有公网ip。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果hacker想直接访问主机B的 80端口，对上面的Web服务进行继续渗透，这就需要进行端口映射，让hacker可以远程连接到80端口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从上图场景中看，端口映射是将内网主机B的80端口映射到了具有公网ip的主机A上，本质上是将一个本来无法访问的端口映射到可以访问的ip上了。&lt;/p&gt;
&lt;h2&gt;场景2 端口转发&lt;/h2&gt;
&lt;p&gt;端口转发又是另外一个场景，在渗透测试中，也很常见。如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190203163212930-1716128543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;hacker位于主机A，主机A可能是个人电脑，也可能是hacker控制的主机。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;hacker通过发送恶意邮件的方式给主机B，主机B的用户点开邮件，运行恶意木马导致主机B被感染，就成了我们俗称的“肉鸡”。虽然已经有木马运行在主机B中，但是由于主机B不在公网中，hacker无法访问到主机B。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;主机B运行着ssh服务，开放着22端口，hacker如果想在主机A上直接连接主机B的22端口，执行shell命令，这就需要端口转发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么木马怎么实现端口转发，才能让hacker访问主机B的22端口呢？ 这就需要一台主机C，一个公网的VPS，去阿里云或者腾讯云买。木马的服务端运行在主机C,同时监听两个端口 port1 与port2，木马的客户端运行在主机B，分别主动连接主机B的22端口和主机C的port2,而hacker只需要主动连接主机C的port1,这样就打通了到主机B 22端口的线路。如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190203163339181-422409529.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;lcx是一款内网端口转发工具，用于将内网主机开放的内部端口映射到外网主机（有公网IP）任意端口。这个工具很早就已经有了，现在已经有跨平台的了，支持在windows、linux下使用。还有一些根据lcx源码开发的其他版本，比如jsp版，http隧道版等等。代码如下：&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;https://github.com/windworst/LCX/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面说一下它的使用以及功能说明：&lt;/p&gt;

&lt;blockquote readability=&quot;19&quot;&gt;
&lt;p&gt;Usage of Packet Transmit:&lt;/p&gt;
&lt;p&gt;  ./lcx -&amp;lt;listen|tran|slave&amp;gt; &amp;lt;option&amp;gt; [&amp;lt;-log|-hex|-text&amp;gt; file]&lt;/p&gt;
&lt;p&gt;  ./lcx -about&lt;/p&gt;

&lt;p&gt;[options:]&lt;/p&gt;
&lt;p&gt;  -listen &amp;lt;local port1&amp;gt;  &amp;lt;local port2&amp;gt;&lt;/p&gt;
&lt;p&gt;  -tran   &amp;lt;local port&amp;gt;   &amp;lt;remote host&amp;gt;  &amp;lt;remote port&amp;gt;&lt;/p&gt;
&lt;p&gt;  -slave  &amp;lt;remote host1&amp;gt; &amp;lt;remote port1&amp;gt; &amp;lt;remote host2&amp;gt; &amp;lt;remote port2&amp;gt;&lt;/p&gt;

&lt;p&gt;  -hex   : hex mode data dump&lt;/p&gt;
&lt;p&gt;  -text  : text mode data dump&lt;/p&gt;
&lt;p&gt;  -log   : save transfer log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;对于场景1，可以使用lcx的tran模式来实现。假设主机A 公网ip 10.10.10.1，主机B 内网ip为192.168.1.5，开放80端口。 在主机A上运行 :&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;./lcx -tran 8080 192.168.1.5 80&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个时候，hacker只要连接到主机A的8080端口，即可访问到主机B的80端口。&lt;/p&gt;

&lt;p&gt;对于场景2，使用lcx的listen和slave模式来实现。假设主机C 公网ip 10.10.10.1，主机B 内网ip为192.168.1.5，开放22端口。 在主机C上监听8080和8081端口：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;./lcx -listen 8080 8081&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在主机B上连接22端口，并连接主机C的8081端口：&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;./lcx -slave 192.168.1.5 22  10.10.10.1 8081&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个时候，hacker只需要连接ip10.10.10.1的8080端口，即可直接连接到22端口，执行命令。&lt;/p&gt;
&lt;h2&gt; 取代lcx&lt;/h2&gt;
&lt;p&gt; 使用工具很简单，但是对这些工具的封锁也很简单。这些开源的网络安全工具早就处于防御端的黑名单里。因此自己写一个类似的工具也是一项必备的能力。 在github中就有这样类似的项目：&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt; https://github.com/cw1997/NATBypass&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;代码很简单，只是单个golang文件，仿照lcx是实现了listen,tran和slave功能。关键的代码很简单，对应了下图中三个红框圈住的三个函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201902/899843-20190203163623971-76924372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;关注公众号：&lt;strong&gt;七夜安全博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/899843/201604/899843-20160412112303145-1979448153.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;回复【1】：领取 Python数据分析 教程大礼包&lt;/li&gt;
&lt;li&gt;回复【2】：领取 Python Flask 全套教程&lt;/li&gt;
&lt;li&gt;回复【3】：领取 某学院 机器学习 教程&lt;/li&gt;
&lt;li&gt;回复【4】：领取 爬虫 教程&lt;/li&gt;
&lt;li&gt;回复【5】：领取 编译原理 教程 &lt;/li&gt;
&lt;li&gt;回复【6】：领取 渗透测试 教程 &lt;/li&gt;
&lt;li&gt;回复【7】：领取 人工智能数学基础 教程&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 03 Feb 2019 08:40:00 +0000</pubDate>
<dc:creator>七夜的故事</dc:creator>
<og:description>前言 今天开始讲讲木马攻防，感觉这些内容大家应该会更感兴趣一些，就从隧道木马说起。为什么会有隧道木马这一说呢？这是根据通信协议进行分类的。讲隧道木马之前，先讲讲端口映射和转发。端口映射和端口转发其实是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiyeboy/p/10350621.html</dc:identifier>
</item>
</channel>
</rss>