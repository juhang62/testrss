<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【读书笔记】关于《精通C#(第6版)》与《C#5.0图解教程》中的一点矛盾的地方 - shanzm</title>
<link>http://www.cnblogs.com/shanzhiming/p/12275431.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanzhiming/p/12275431.html</guid>
<description>&lt;p&gt;志铭-2020年2月8日 03:32:03&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;先说明，这是一个旧问题，很久很久以前大家就讨论了，&lt;/p&gt;
&lt;p&gt;哈哈哈，而且先声明这是一个很无聊的问题，😅！&lt;/p&gt;
&lt;p&gt;只是以前我不了解，今天我遇到了，故记录于此。&lt;/p&gt;
&lt;p&gt;《精通C#(第6版)》P571：说明：“如果异步调用一个无返回值的方法，仅仅调用BeginInvoke()就可以了。在这种情况下，我们不需要缓存IAsyncResult兼容对象，也不需要首先调用EndInvoke()（因为没有收到返回值）。”&lt;/p&gt;
&lt;p&gt;《C#5.0图解教程》P432：说明：“因为EndInvoke是为开启的线程进行清理，所以必须确保对每一个BeginInvoke都调用EndInvoke。”&lt;/p&gt;
&lt;p&gt;好像两本书中对此的观点不一样,&lt;/p&gt;
&lt;p&gt;其实关于EndInvoke()和EndInvoke()是否一定要配对使用，是不是可以省略EndInvoke()的讨论有很多，而且现在几乎就没有人在查阅这个问题了，因为现在大家都不在使用APM异步编程模式了！&lt;/p&gt;
&lt;p&gt;但是既然我遇到了，那我就查一查呗&lt;/p&gt;
&lt;p&gt;网上讨论可以参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://q.cnblogs.com/q/57002/&quot;&gt;博客园:BeginInvoke 如果不调用EndInvoke会怎么样？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_27508477/article/details/88045121&quot;&gt;CSDN : C#异步委托BeginInvoke是否必须和EndInvoke成对调用？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;路人甲说：BeginInvoke()和EndInvoke()必须配对使用，以便清理线程池资源，&lt;/p&gt;
&lt;p&gt;路人乙说：只要你不需要接收异步操作的返回值且不查看异步操作的状态就可以不调用EndInvoke()，而且即使不用EndInvoke()清理线程，GC也会很快的清理用完的Delegate对象。&lt;/p&gt;
&lt;p&gt;查阅&lt;a href=&quot;https://stackoverflow.com/questions/532722/is-endinvoke-optional-sort-of-optional-or-definitely-not-optional&quot;&gt;StackOverFlow:Is EndInvoke() optional, sort-of optional, or definitely not optional?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到最高赞答案如下，截图翻译了一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1576687/202002/1576687-20200208035826832-294605463.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;简单的说在MSDN中两中说法都有，写不写都可以！&lt;/p&gt;
&lt;p&gt;好吧，一般我查阅问题可能就得出结论了，嘿嘿，但是我手贱又看了下面的一个18赞的答案，答案给了一个连接：&lt;/p&gt;
&lt;p&gt;文章连接&lt;a href=&quot;http://www.interact-sw.co.uk/iangblog/2005/05/16/endinvokerequired&quot;&gt;EndInvoke Not Optional&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;简单的看看了，文章中说是一个大佬长期误导了一些人，&lt;/p&gt;
&lt;p&gt;理论上：&lt;code&gt;&quot;CAUTION Always call EndInvoke after your asynchronous call completes.&quot;&lt;/code&gt;（注意，异步调用完成后一定要调用EndInvoke）&lt;/p&gt;
&lt;p&gt;其次，文章提到：&lt;br/&gt;“&lt;code&gt;Microsoft obviously have the right to relax this requirement in the future if they want to, but for now, you have to call EndInvoke.&lt;/code&gt;”&lt;/p&gt;
&lt;p&gt;简单的翻译一下：微软显然有权利在将来放宽这一要求，但现在，您必须调用EndInvoke（哈哈，这句是2005年以前的情形，现在如何，就不考证了，嘿嘿！）&lt;/p&gt;
&lt;p&gt;其实呀，&lt;strong&gt;简而言之，调用EndInvoke一定没坏处&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;我的理解就是，在没有返回值的引用函数时实现异步，不使用EndInvoke,&lt;/p&gt;
&lt;p&gt;就是相当于&lt;code&gt;async &amp;amp; await&lt;/code&gt;关键字实现返回值为&lt;code&gt;void&lt;/code&gt;的异步方法，&lt;/p&gt;
&lt;p&gt;即不需要对该异步方法进一步交互，称之为：调用并忘记（fire and forget），&lt;/p&gt;
&lt;p&gt;许多时候异步编程就是需要这样呀！只是现在我们一般都不使用APM模式罢了！&lt;/p&gt;
</description>
<pubDate>Fri, 07 Feb 2020 20:07:00 +0000</pubDate>
<dc:creator>shanzm</dc:creator>
<og:description>志铭 2020年2月8日 03:32:03 先说明，这是一个旧问题，很久很久以前大家就讨论了， 哈哈哈，而且先声明这是一个很无聊的问题，&amp;#128517;！ 只是以前我不了解，今天我遇到了，故记录于此</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/shanzhiming/p/12275431.html</dc:identifier>
</item>
<item>
<title>图像增强之空间域锐化 - 啊哈彭</title>
<link>http://www.cnblogs.com/pingwen/p/12275235.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pingwen/p/12275235.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、图像锐化理论&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图像锐化的目的是使图像变得清晰起来，锐化主要用于增强图像的灰度跳变部分，这一点与图像平滑对灰度跳变的抑制正好相反。锐化提高图像的高频分量，增加灰度反差增强图像的边缘和轮廓，以便后期图像识别。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在图像增强过程中，常用平滑算法来消除噪声，平滑属于低通滤波，图像的能量主要集中在低频部分，噪声所在频段主要在高频部分，同时图像的边缘也集中在高频部分，这意味着图像平滑后，高频被衰减轮廓会出现模糊。图像锐化就是为了减少这种现象，通过高通滤波使图像边缘和轮廓变得清晰。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、一阶微分图像增强--梯度算子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207234555895-1554547358.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207234649953-475458370.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;梯度的方向就是函数&lt;span lang=&quot;EN-US&quot;&gt;f(x,y)&lt;/span&gt;最大变化率的方向。梯度的幅值作为最大变化率大小的度量，值为：  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207234719502-1782369155.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;离散的二维函数&lt;span lang=&quot;EN-US&quot;&gt;f(i,j)&lt;/span&gt;，可以用有限差分作为梯度的一个近似值。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207234806002-253393167.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了简化计算，可以用绝对值来近似。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;|&lt;/span&gt;▽&lt;span lang=&quot;EN-US&quot;&gt;f(i,j)|= |f(i+1,j)-f(i,j)| +|f(i,j+1)-f(i,j)|&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1 Robert&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;算子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;   |&lt;/span&gt;▽&lt;span lang=&quot;EN-US&quot;&gt;f(i,j)|= |f(i+1,j+1)-f(i,j)| +|f(i,j+1)-f(i+1,j)|&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;上面算式采用对角相差的差分法来代替微分，写为滤波模板形式为：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207234852402-270200900.png&quot; alt=&quot;&quot;/&gt;其中&lt;span lang=&quot;EN-US&quot;&gt;w1&lt;/span&gt;对接近&lt;span lang=&quot;EN-US&quot;&gt;45°&lt;/span&gt;的边缘有较强响应，&lt;span lang=&quot;EN-US&quot;&gt;w2&lt;/span&gt;对接近&lt;span lang=&quot;EN-US&quot;&gt;-45°&lt;/span&gt;的边缘有较强响应。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;imgPath = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E:\opencv_pic\src_pic\pic6.bmp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
img &lt;/span&gt;=&lt;span&gt; imread(imgPath);
img&lt;/span&gt;=&lt;span&gt;rgb2gray(img);
w1 &lt;/span&gt;=[-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;; &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
w2 &lt;/span&gt;=[&lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
 
G1&lt;/span&gt;=imfilter(img, w1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;corr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;replicate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
G2&lt;/span&gt;=imfilter(img, w2, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;corr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;replicate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
G&lt;/span&gt;=abs(G1)+&lt;span&gt;abs(G2);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;),imshow(img), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;原始图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;),imshow(abs(G1)), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w1图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;),imshow(abs(G2)),title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w2滤波&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;),imshow(G),title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Robert交叉梯度图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207234925803-1216116917.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可见&lt;span lang=&quot;EN-US&quot;&gt;w1&lt;/span&gt;滤波后&lt;span lang=&quot;EN-US&quot;&gt;45°&lt;/span&gt;的边缘被突出，&lt;span lang=&quot;EN-US&quot;&gt;w2&lt;/span&gt;滤波后&lt;span lang=&quot;EN-US&quot;&gt;-45°&lt;/span&gt;的边缘被突出。&lt;span lang=&quot;EN-US&quot;&gt;Robert&lt;/span&gt;交叉滤波后全部边缘突出显示。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.2 Sobel&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;算子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;滤波时一般更多使用奇数尺寸的模板，下面是&lt;span lang=&quot;EN-US&quot;&gt;Sobel&lt;/span&gt;算子。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207234952272-1023473620.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;imgPath = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E:\opencv_pic\src_pic\pic6.bmp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
img &lt;/span&gt;=&lt;span&gt; imread(imgPath);
img&lt;/span&gt;=&lt;span&gt;rgb2gray(img);
 
 
w1 &lt;/span&gt;=[-&lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;2&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;;  &lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
w2 &lt;/span&gt;=[ -&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;;  -&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;; -&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
G1&lt;/span&gt;=&lt;span&gt;imfilter(img, w1);
G2&lt;/span&gt;=&lt;span&gt;imfilter(img, w2);
G&lt;/span&gt;=abs(G1)+&lt;span&gt;abs(G2);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;),imshow(img), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;原始图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;),imshow(abs(G1)), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w1图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;),imshow(abs(G2)),title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w2滤波&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;),imshow(G),title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sobel交叉梯度图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;同&lt;span lang=&quot;EN-US&quot;&gt;Robert&lt;/span&gt;算子，&lt;span lang=&quot;EN-US&quot;&gt;w1&lt;/span&gt;滤波后&lt;span lang=&quot;EN-US&quot;&gt;45°&lt;/span&gt;的边缘被突出，&lt;span lang=&quot;EN-US&quot;&gt;w2&lt;/span&gt;滤波后&lt;span lang=&quot;EN-US&quot;&gt;-45°&lt;/span&gt;的边缘被突出。&lt;span lang=&quot;EN-US&quot;&gt;Sobel&lt;/span&gt;交叉滤波后全部边缘突出显示。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235022641-387363363.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;、二阶微分滤波&lt;span lang=&quot;EN-US&quot;&gt;--&lt;/span&gt;拉普拉斯算子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;二维函数&lt;span lang=&quot;EN-US&quot;&gt;f(x,y)&lt;/span&gt;在二阶微分（拉普拉斯算子）的定义为：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235044841-1354958935.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235107690-1568694105.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将上式相加后就得到拉普拉斯算子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235135961-368122572.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;对应的滤波模板如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235148862-1850976793.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;考虑到求绝对值计算梯度，正负系数图形的响应一样，上面的模板也可以表示为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235208843-1772849037.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;上面的模板具有对称性，所以求一次滤波就可以，不需要像一阶微分那样计算&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;次。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;imgPath = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E:\opencv_pic\src_pic\pic6.bmp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
img &lt;/span&gt;=&lt;span&gt; imread(imgPath);
img&lt;/span&gt;=&lt;span&gt;rgb2gray(img);
 
w1 &lt;/span&gt;=[&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;;  &lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;;   &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
w2 &lt;/span&gt;=[&lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;; -&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;;  &lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
w3 &lt;/span&gt;=[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;4&lt;/span&gt;,-&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;;  &lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
G1&lt;/span&gt;=imfilter(img, w1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;corr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;replicate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
G2&lt;/span&gt;=imfilter(img, w2, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;corr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;replicate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
G3&lt;/span&gt;=imfilter(img, w3, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;corr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;replicate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;),imshow(img,[]), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;原始图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;),imshow(abs(G1)), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w1图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;),imshow(abs(G2)),title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w2滤波&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;),imshow(abs(G3)),title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;加权二阶滤波&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;二阶滤波比之前的一阶滤波锐化程度更加强烈，留下了非常清晰的边缘图案。&lt;span lang=&quot;EN-US&quot;&gt;w1&lt;/span&gt;和&lt;span lang=&quot;EN-US&quot;&gt;w2&lt;/span&gt;滤波的方向性不明显图像基本一致，仅&lt;span lang=&quot;EN-US&quot;&gt;w2&lt;/span&gt;滤波图像的轮廓更加深一些。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235237659-454913542.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;span lang=&quot;EN-US&quot;&gt;imsharpen&lt;/span&gt;对图像进行锐化，对锐化强度参数进行控制，可见太高的锐化强度导致图像出现“纹理”，效果变差。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;b1=imsharpen(img,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Radius&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Amount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;);
b2&lt;/span&gt;=imsharpen(img,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Radius&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Amount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
b3&lt;/span&gt;=imsharpen(img,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Radius&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Amount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;),imshow(img), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;原始图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;),imshow(b1), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;imsharpen图像1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;),imshow(b2), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;imsharpen图像2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;),imshow(b3), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;imsharpen图像3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235303663-596485748.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;4&lt;/span&gt;、锐化图像后续处理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;无论一阶微分算子还是二阶微分算子，各系数之和都为&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;，说明算子在灰度恒定区域的响应为&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;，即锐化后的图像，在原图比较平坦的区域几乎都变为黑色，而在图像边缘，灰度跳变点的细节被突出显示。一般图像锐化是希望增强图像的边缘和细节，而非将平滑区域的灰度信息丢失。因此，可以用原图像加上锐化后的图像，得到比较理想的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;使用&lt;span lang=&quot;EN-US&quot;&gt;Sobel&lt;/span&gt;算子锐化和&lt;span lang=&quot;EN-US&quot;&gt;matlab&lt;/span&gt;内置锐化函数锐化之后的图像对比，下图是内置函数锐化结果：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;b=imsharpen(img,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Radius&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Amount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;),imshow(img), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;原始图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
subplot(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;),imshow(b), title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;imsharpen图像&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235322837-1805670540.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;imsharpen滤波图像明显比算子锐化的图像亮度更高，保留了原图比较平坦的部分，比如背景图部分。如果希望上面的滤波函数也达到这个效果，只需要把原图加上滤波后的图像即可，系数是为了防止溢出，比如下面的例子。使用函数为&lt;span lang=&quot;EN-US&quot;&gt;imshow(G+0.7*img),title(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'Sobel&lt;/span&gt;&lt;span&gt;交叉梯度图像&lt;span lang=&quot;EN-US&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200207235343184-1881153787.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、参考文献&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;、&lt;span lang=&quot;EN-US&quot;&gt;MATLAB--&lt;/span&gt;数字图像处理 图像锐化&lt;span lang=&quot;EN-US&quot;&gt;(&lt;/span&gt;原理篇&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://www.csdn.net/gather_24/MtjaMg4sMjg1OS1ibG9n.html&quot;&gt;https://www.csdn.net/gather_24/MtjaMg4sMjg1OS1ibG9n.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;、&lt;span lang=&quot;EN-US&quot;&gt;imsharpen&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://ww2.mathworks.cn/help/images/ref/imsharpen.html&quot;&gt;https://ww2.mathworks.cn/help/images/ref/imsharpen.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;、《数字图像处理与机器视觉》&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;第二版。 张铮、徐超、任淑霞、韩海玲等编著。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;3.5368421052632&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt; 尊重原创技术文章，转载请注明。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/pingwen/p/12275235.html&quot;&gt;https://www.cnblogs.com/pingwen/p/12275235.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 07 Feb 2020 16:05:00 +0000</pubDate>
<dc:creator>啊哈彭</dc:creator>
<og:description>图像增强之空间域锐化</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/pingwen/p/12275235.html</dc:identifier>
</item>
<item>
<title>hadoop-2.10.0安装hive-2.3.6 - 七星6609</title>
<link>http://www.cnblogs.com/qixing/p/12275185.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qixing/p/12275185.html</guid>
<description>&lt;p&gt;公司建立数仓，hive是必不可少的，hive是建立在hadoop基础上的数据库，前面已经搭建起了hadoop高可用，要学习hive，先从搭建开始，下面梳理一下hive搭建过程&lt;/p&gt;
&lt;p&gt;1.下载hive安装包 ，下载地址：&lt;a href=&quot;https://hive.apache.org/downloads.html&quot;&gt;https://hive.apache.org/downloads.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;找到自己hadoop对应的版本下载安装，我这里下载的是 apache-hive-2.3.6-bin.tar.gz&lt;/p&gt;
&lt;p&gt;2.安装hive，将安装包解压到/opt/soft下，并建立软链接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tar -zxvf apache-hive-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;-bin.tar.gz -C /opt/soft/&lt;span&gt;
cd &lt;/span&gt;/opt/&lt;span&gt;soft
mv apache&lt;/span&gt;-hive-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;-bin hive-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;&lt;span&gt;
ln &lt;/span&gt;-s hive-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt; hive
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.配置环境变量/etc/profile&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;vim /etc/profile&lt;p&gt;#hive
export HIVE_HOME&lt;/p&gt;&lt;/span&gt;=/opt/soft/&lt;span&gt;hive
export PATH&lt;/span&gt;=$PATH:$HIVE_HOME/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存后别忘记编译一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
source /etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.配置hive配置文件，hive元数据默认存储到derby数据库中，我们这里使用mysql来存储，hive-site.xml配置信息较多建议下载到windows下修改，然后再传上去&lt;/p&gt;
&lt;p&gt;首先复制默认的配置文件模板，里面已经包含hive所有的默认配置信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cp hive-&lt;span&gt;default&lt;/span&gt;.xml.template hive-site.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改hive-site.xml配置文件，将元数据存放数据库改为mysql，在hive-site.xml中找到下列属性，修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;javax.jdo.option.ConnectionDriverName&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;Driver &lt;span&gt;class&lt;/span&gt; name &lt;span&gt;for&lt;/span&gt; a JDBC metastore&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;javax.jdo.option.ConnectionURL&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;192.168.118.1:3306/hive2&amp;lt;/value&amp;gt;&lt;/span&gt;
    &amp;lt;description&amp;gt;&lt;span&gt;
      JDBC connect &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; a JDBC metastore.
      To use SSL to encrypt&lt;/span&gt;/authenticate the connection, provide database-specific SSL flag &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the connection URL.
      For example, jdbc:postgresql:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;myhost/db?ssl=true for postgres database.&lt;/span&gt;
    &amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;javax.jdo.option.ConnectionUserName&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;Username to use against metastore database&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;javax.jdo.option.ConnectionPassword&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;&lt;span&gt;111111&lt;/span&gt;&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;password to use against metastore database&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据库驱动为mysql驱动com.mysql.jdbc.Driver，URL改为mysql的hive2(自定义)数据库，用户名密码为自己数据库对应的用户名密码&lt;/p&gt;
&lt;p&gt;修改hive配置的一些目录，指定到自己选择的目录，搜索以 ${system 开头的 value 替换为自己的目录，我这里替换为：/home/hdfs/hive下相关目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hive.exec.local.scratchdir&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/home/hdfs/hive&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;Local scratch space &lt;span&gt;for&lt;/span&gt; Hive jobs&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hive.downloaded.resources.dir&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/home/hdfs/hive/downloads&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;Temporary local directory &lt;span&gt;for&lt;/span&gt; added resources &lt;span&gt;in&lt;/span&gt; the remote file system.&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hive.querylog.location&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/home/hdfs/hive/querylog&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;Location of Hive run time structured log file&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hive.server2.logging.operation.log.location&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/home/hdfs/hive/server2_logs&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;Top level directory &lt;span&gt;where&lt;/span&gt; operation logs are stored &lt;span&gt;if&lt;/span&gt; logging functionality &lt;span&gt;is&lt;/span&gt; enabled&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改权限验证为false&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hive.server2.enable.doAs&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;&lt;span&gt;false&lt;/span&gt;&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;&lt;span&gt;
      Setting &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; property to &lt;span&gt;true&lt;/span&gt;&lt;span&gt; will have HiveServer2 execute
      Hive operations &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; the user making the calls to it.
    &lt;/span&gt;&amp;lt;/description&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.既然修改元数据存放在mysql库里，就需要将mysql驱动包放入到hive/lib中，注意mysql版本和驱动包一致&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mv mysql-connector-java-&lt;span&gt;8.0&lt;/span&gt;.&lt;span&gt;18&lt;/span&gt;.jar /opt/soft/hive/lib/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.在mysql数据库中创建hive2库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/480564/202002/480564-20200207232106186-445531199.png&quot; alt=&quot;&quot; width=&quot;153&quot; height=&quot;254&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7.初始化hive的元数据(表结构)到mysql中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd /opt/soft/hive/&lt;span&gt;bin
schematool &lt;/span&gt;-dbType mysql -initSchema
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出现如下信息，代表成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/480564/202002/480564-20200207232450351-114370066.png&quot; alt=&quot;&quot; width=&quot;1189&quot; height=&quot;206&quot;/&gt;&lt;/p&gt;

&lt;p&gt;也可以查看mysql中hive2库，所有表初始化完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/480564/202002/480564-20200207232554151-1985052439.png&quot; alt=&quot;&quot; width=&quot;323&quot; height=&quot;525&quot;/&gt;&lt;/p&gt;


&lt;p&gt;8.启动hadoop，如果没有安装可以参考：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/qixing/p/12252111.html&quot;&gt;centos7搭建hadoop2.10高可用(HA)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
start-all.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9.启动hive&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/480564/202002/480564-20200207232759753-1365013548.png&quot; alt=&quot;&quot; width=&quot;1038&quot; height=&quot;177&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 查看目前只有default数据库&lt;/p&gt;
&lt;p&gt;创建数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
create database myhivedb2;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/480564/202002/480564-20200207233006272-1949242369.png&quot; alt=&quot;&quot; width=&quot;343&quot; height=&quot;121&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 查看创建的mysqhivedb2已经出来了&lt;/p&gt;
&lt;p&gt;我们查一下hdfs中是否创建了对应的目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hdfs dfs -ls -R /user/hive/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/480564/202002/480564-20200207233327615-681241870.png&quot; alt=&quot;&quot; width=&quot;578&quot; height=&quot;42&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 也可以查看mysql中hive2库的dbs表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/480564/202002/480564-20200207233545693-1515627150.png&quot; alt=&quot;&quot; width=&quot;1043&quot; height=&quot;330&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 至此hive环境搭建完成&lt;/p&gt;

</description>
<pubDate>Fri, 07 Feb 2020 15:40:00 +0000</pubDate>
<dc:creator>七星6609</dc:creator>
<og:description>公司建立数仓，hive是必不可少的，hive是建立在hadoop基础上的数据库，前面已经搭建起了hadoop高可用，要学习hive，先从搭建开始，下面梳理一下hive搭建过程 1.下载hive安装包</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qixing/p/12275185.html</dc:identifier>
</item>
<item>
<title>使用Bundle在Activity之间交换数据 - 清风紫雪</title>
<link>http://www.cnblogs.com/xiaofengzai/p/12275168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaofengzai/p/12275168.html</guid>
<description>&lt;p&gt;&lt;span&gt;（一）Bundle介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Bundle主要用于传递数据；它保存的数据，是以key-value(键值对)的形式存在的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们经常使用Bundle在Activity之间传递数据，传递的数据可以是boolean、byte、int、long、float、double、string等基本类型或它们对应的数组，也可以是对象或对象数组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当Bundle传递的是对象或对象数组时，必须实现&lt;a href=&quot;http://blog.csdn.net/mer1234567/article/details/7841657&quot;&gt;Serializable 或Parcelable&lt;/a&gt;接口。下面分别介绍Activity之间如何传递基本类型、传递对象。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Bundle提供了各种常用类型的putXxx()/getXxx()方法，用于读写基本类型的数据。Bundle操作基本数据类型的API表格如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/common/1717524/202002/1717524-20200207225754994-343192511.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;写数据的方法如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
btn.setOnClickListener(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; View.OnClickListener() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
                String sate1&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.site1)).getText().toString();
                String sate2&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.site2)).getText().toString();
                String sate3&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.site3)).getText().toString();
                String phone&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.phone)).getText().toString();
                String name&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.name)).getText().toString();

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&quot;&quot;.equals(sate1)&amp;amp;&amp;amp;!&quot;&quot;.equals(sate2)&amp;amp;&amp;amp;!&quot;&quot;.equals(sate3)&amp;amp;&amp;amp;!&quot;&quot;.equals(phone)&amp;amp;&amp;amp;!&quot;&quot;&lt;span&gt;.equals(name)){
                    Intent intent&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Intent(MainActivity.&lt;span&gt;this&lt;/span&gt;,AddressActivity.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                    Bundle bundle&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bundle();
                    bundle.putString(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,name);
                    bundle.putString(&lt;/span&gt;&quot;phone&quot;&lt;span&gt;,phone);
                    bundle.putString(&lt;/span&gt;&quot;sate&quot;,sate1+sate2+&lt;span&gt;sate3);
                    intent.putExtra(&lt;/span&gt;&quot;bundle&quot;&lt;span&gt;,bundle);
                    startActivity(intent);
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    Toast.makeText(MainActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;,&quot;请将信息填写完整&quot;&lt;span&gt;,Toast.LENGTH_SHORT).show();
                }
            }
        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对应的读数据的方法如下：将读取的数据设置给TextView组件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Intent intent=&lt;span&gt;getIntent();
        Bundle bundle&lt;/span&gt;=intent.getBundleExtra(&quot;bundle&quot;&lt;span&gt;);

        TextView site&lt;/span&gt;=&lt;span&gt;(TextView) findViewById(R.id.site);
        TextView name&lt;/span&gt;=&lt;span&gt;(TextView)findViewById(R.id.name);
        TextView phone&lt;/span&gt;=&lt;span&gt;(TextView)findViewById(R.id.phone);

        site.setText(bundle.getString(&lt;/span&gt;&quot;sate&quot;&lt;span&gt;));
        phone.setText(bundle.getString(&lt;/span&gt;&quot;phone&quot;&lt;span&gt;));
        name.setText(bundle.getString(&lt;/span&gt;&quot;name&quot;));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;我们根据所学的hundle的知识，来简单的制作一个案例：实现通过bundle进行activity之间的数据传递&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;activity_main.xml&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;androidx.constraintlayout.widget.ConstraintLayout &lt;/span&gt;&lt;span&gt;xmlns:android&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:app&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:tools&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
    tools:context&lt;/span&gt;&lt;span&gt;=&quot;.MainActivity&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ImageView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/imageView&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginBottom&lt;/span&gt;&lt;span&gt;=&quot;190dp&quot;&lt;/span&gt;&lt;span&gt;
        android:background&lt;/span&gt;&lt;span&gt;=&quot;@drawable/top&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintBottom_toTopOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/site3&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintHorizontal_bias&lt;/span&gt;&lt;span&gt;=&quot;0.0&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toTopOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintVertical_bias&lt;/span&gt;&lt;span&gt;=&quot;0.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;EditText
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/site1&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;71dp&quot;&lt;/span&gt;&lt;span&gt;
        android:hint&lt;/span&gt;&lt;span&gt;=&quot;请输入省份&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toTopOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;EditText
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/site2&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;20dp&quot;&lt;/span&gt;&lt;span&gt;
        android:hint&lt;/span&gt;&lt;span&gt;=&quot;请输入市&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/site1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;EditText
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/site3&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;24dp&quot;&lt;/span&gt;&lt;span&gt;
        android:hint&lt;/span&gt;&lt;span&gt;=&quot;请输入县&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/site2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;EditText
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/phone&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;26dp&quot;&lt;/span&gt;&lt;span&gt;
        android:hint&lt;/span&gt;&lt;span&gt;=&quot;请输入手机电话&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/site3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;EditText
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/name&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;22dp&quot;&lt;/span&gt;&lt;span&gt;
        android:hint&lt;/span&gt;&lt;span&gt;=&quot;请输入姓名&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/phone&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/btnok&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginEnd&lt;/span&gt;&lt;span&gt;=&quot;16dp&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginRight&lt;/span&gt;&lt;span&gt;=&quot;16dp&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginBottom&lt;/span&gt;&lt;span&gt;=&quot;98dp&quot;&lt;/span&gt;&lt;span&gt;
        android:background&lt;/span&gt;&lt;span&gt;=&quot;#045786&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;&lt;span&gt;=&quot;保存&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintBottom_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;activity_address.xml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;androidx.constraintlayout.widget.ConstraintLayout &lt;/span&gt;&lt;span&gt;xmlns:android&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:app&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:tools&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;match_parent&quot;&lt;/span&gt;&lt;span&gt;
    tools:context&lt;/span&gt;&lt;span&gt;=&quot;.AddressActivity&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ImageView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/close&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginStart&lt;/span&gt;&lt;span&gt;=&quot;10dp&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginLeft&lt;/span&gt;&lt;span&gt;=&quot;10dp&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;&lt;span&gt;=&quot;@drawable/guanbi&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintBottom_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/imageView2&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ImageView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/imageView2&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;0dp&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;&lt;span&gt;=&quot;@drawable/top&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintHorizontal_bias&lt;/span&gt;&lt;span&gt;=&quot;0.0&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toTopOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/name&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;66dp&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;&lt;span&gt;=&quot;收货姓名&quot;&lt;/span&gt;&lt;span&gt;
        android:textSize&lt;/span&gt;&lt;span&gt;=&quot;20sp&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toTopOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/phone&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;30dp&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;&lt;span&gt;=&quot;电话&quot;&lt;/span&gt;&lt;span&gt;
        android:textSize&lt;/span&gt;&lt;span&gt;=&quot;20sp&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/site&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;&lt;span&gt;=&quot;68dp&quot;&lt;/span&gt;&lt;span&gt;

        android:textSize&lt;/span&gt;&lt;span&gt;=&quot;20sp&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/phone&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintHorizontal_bias&lt;/span&gt;&lt;span&gt;=&quot;0.0&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;
        app:layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;=&quot;@+id/phone&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;MainActivity.java&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.bundle;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; androidx.appcompat.app.AppCompatActivity;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.content.Intent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.net.Uri;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.os.Bundle;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.view.View;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.Button;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.EditText;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.Toast;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MainActivity &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AppCompatActivity {

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button btn&lt;/span&gt;=&lt;span&gt;(Button) findViewById(R.id.btnok);

        btn.setOnClickListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; View.OnClickListener() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
                String sate1&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.site1)).getText().toString();
                String sate2&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.site2)).getText().toString();
                String sate3&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.site3)).getText().toString();
                String phone&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.phone)).getText().toString();
                String name&lt;/span&gt;=&lt;span&gt;((EditText)findViewById(R.id.name)).getText().toString();

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&quot;&quot;.equals(sate1)&amp;amp;&amp;amp;!&quot;&quot;.equals(sate2)&amp;amp;&amp;amp;!&quot;&quot;.equals(sate3)&amp;amp;&amp;amp;!&quot;&quot;.equals(phone)&amp;amp;&amp;amp;!&quot;&quot;&lt;span&gt;.equals(name)){
                    Intent intent&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Intent(MainActivity.&lt;span&gt;this&lt;/span&gt;,AddressActivity.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                    Bundle bundle&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bundle();
                    bundle.putString(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,name);
                    bundle.putString(&lt;/span&gt;&quot;phone&quot;&lt;span&gt;,phone);
                    bundle.putString(&lt;/span&gt;&quot;sate&quot;,sate1+sate2+&lt;span&gt;sate3);
                    intent.putExtra(&lt;/span&gt;&quot;bundle&quot;&lt;span&gt;,bundle);
                    startActivity(intent);
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    Toast.makeText(MainActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;,&quot;请将信息填写完整&quot;&lt;span&gt;,Toast.LENGTH_SHORT).show();
                }
            }
        });

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;AddressActivity.java&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.bundle;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; androidx.appcompat.app.AppCompatActivity;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.content.Intent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.os.Bundle;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.view.View;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.Button;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.ImageView;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.TextView;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AddressActivity &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AppCompatActivity {

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onCreate(savedInstanceState);
        setContentView(R.layout.activity_address);

        Intent intent&lt;/span&gt;=&lt;span&gt;getIntent();
        Bundle bundle&lt;/span&gt;=intent.getBundleExtra(&quot;bundle&quot;&lt;span&gt;);

        TextView site&lt;/span&gt;=&lt;span&gt;(TextView) findViewById(R.id.site);
        TextView name&lt;/span&gt;=&lt;span&gt;(TextView)findViewById(R.id.name);
        TextView phone&lt;/span&gt;=&lt;span&gt;(TextView)findViewById(R.id.phone);

        site.setText(bundle.getString(&lt;/span&gt;&quot;sate&quot;&lt;span&gt;));
        phone.setText(bundle.getString(&lt;/span&gt;&quot;phone&quot;&lt;span&gt;));
        name.setText(bundle.getString(&lt;/span&gt;&quot;name&quot;&lt;span&gt;));

        ImageView close&lt;/span&gt;=&lt;span&gt;(ImageView) findViewById(R.id.close);
        close.setOnClickListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; View.OnClickListener() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
                finish();
            }
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;初始界面：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200207231956006-192987470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 传递数据后的页面：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200207232012390-2030543478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 07 Feb 2020 15:37:00 +0000</pubDate>
<dc:creator>清风紫雪</dc:creator>
<og:description>（一）Bundle介绍 Bundle主要用于传递数据；它保存的数据，是以key-value(键值对)的形式存在的。 我们经常使用Bundle在Activity之间传递数据，传递的数据可以是boolea</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaofengzai/p/12275168.html</dc:identifier>
</item>
<item>
<title>Kafka动态配置实现原理解析 - 李志涛</title>
<link>http://www.cnblogs.com/lizherui/p/12271285.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lizherui/p/12271285.html</guid>
<description>&lt;h2 id=&quot;Kafka动态配置实现原理解析-问题导读&quot;&gt;问题导读&lt;/h2&gt;
&lt;p&gt;Apache Kafka在全球各个领域各大公司获得广泛使用，得益于它强大的功能和不断完善的生态。其中Kafka动态配置是一个比较高频好用的功能，下面我们就来一探究竟。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;动态配置是如何设计的？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;动态配置优先级是怎样的？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Broker初始化是如何读取配置的？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;动态配置支持哪些特性功能？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;动态配置如何使用呢？&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Kafka动态配置实现原理解析-前言介绍&quot;&gt;前言介绍&lt;/h2&gt;
&lt;p&gt; Kafka初始开源的几个版本，当broker初始化启动时，所有配置信息只能从server.properties静态文件读取，以后不再发生任何更改，随着Kafka逐步迭代，在线业务对稳定性和个性化要求越来越突出，需要能支持在线修改功能动态生效的需求应运而生。例如：按照topic维度清理数据，依据clientid限流，根据用户名称进行访问权限控制等等。目前Kafka最新版本支持以下几类动态配置。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206223101210-1589498841.png&quot; alt=&quot;&quot; width=&quot;287&quot; height=&quot;139&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;Kafka动态配置实现原理解析-发展历程&quot;&gt;发展历程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206230010945-213659491.png&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;391&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;动态配置文件发展历程：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;kafka在0.8.0对topic的管理功能分布在三个shell中，它们分别是kafka-list-topic.sh、kafka-create-topic.sh、kafka-delete-topic.sh、kafka-add-partitions.sh，后来社区考虑到topic管理功能过于分散，到了0.8.1版本有关topic所有功能收敛到kafka-topics.sh中。0.8.0中只有topic的创建、删除和列表及添加分区功能，到了0.8.1开始支持topics动态配置了。 &lt;/p&gt;
&lt;p&gt;0.9.0.0开始支持client(producer和consumer)客户端配额限流支持，确保不因为某个或少数几个topic的客户端占满了broker带宽资源和磁盘IO资源，影响其他客户端的正常读写，导致集群内主从同步也受到影响。这个功能对确保系统SLA大有好处，通过服务降级，保证写/生产不受影响，降低或暂停读/消费流量更容易解决系统资源瓶颈。&lt;/p&gt;
&lt;p&gt;0.9.0版本动态配置与topic管理分离，为了保持向下兼容kafka-topics.sh依然包含操作topic动态配置功能，新增kafka-configs.sh支持clients和topics动态配置功能，所以kafka-topics.sh和kafka-configs.sh任意一个都可以修改topic动态配置&lt;/p&gt;
&lt;p&gt;0.10.1.0版本新增支持users和brokers动态配置功能，user动态配置用于访问资源的权限控制，提升集群的访问和数据安全性，例如：用户对读/写/创建/删除等操作和API、topic、group资源访问控制。broker动态配置，在不用重启及影响服务运行情况下，broker级别功能实现动态生效，例如：副本注册复制速率、磁盘内挂载点间数据迁移速率、网络请求的线程数、处理请求的I/O线程数等等全局参数等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;0.10.1.0~2.3.1版本&lt;/span&gt;&lt;/strong&gt;都支持topics、clients、users、brokers四类型动态配置的11种粒度配置对象，只是配置模块和属性字段有增减与调整。&lt;/p&gt;
&lt;h2 id=&quot;Kafka动态配置实现原理解析-动态配置设计原理&quot;&gt;动态配置设计原理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206230132964-1312868962.png&quot; alt=&quot;&quot; width=&quot;370&quot; height=&quot;461&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户使用kafka-configs.sh脚本，根据格式和参数规范要求，ConfigCommand类进行相关逻辑处理、json格式和内容校验，生成notification json，写入到序列化持久节点上，zk路径为xxx/config/changes/config_change_seqNo，节点名称为config_change_seqNo，其中seqNo从1开始的自增序号。kafka集群中所有broker通过监听zk上xxx/config/changes的children变化，每次获得比当前内存中last_seqNo大的seqNo的json内容，从中读取entity_type/entity_name相对路径，由此判断如何从xxx/config/topics|clients|users|brokers四种类型中读取哪个配置路径。同一个Broker在操作过程中任何时刻只能串行读写一种类型的配置，多种配置需要串行操作。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;各个角色的作用：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;kafka-config.sh: 负责写dynamic config和notification，写顺序上图有先后标识。&lt;/p&gt;
&lt;p&gt;broker：负责监听xxx/config/changes子节点变化和读取entity_type/entity_name路径节点上内容&lt;/p&gt;
&lt;p&gt;zk：负责存储notification和dynamic config及下发配置给相应的broker&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;notification json内容：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;V1 0.10.0.1及以前版本有效&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;version&quot;: 1&lt;span&gt;,
    &lt;/span&gt;&quot;entity_type&quot;: &quot;topics&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;entity_name&quot;:  &quot;finalTest&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;V2 0.10.1.0~2.3.1 当前最新版本都有效&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; readability=&quot;89.384482758621&quot;&gt;
&lt;p&gt;以上不管是version 1还是version2，本质上没有变化。都是通过entity_type/entity_name获得entity_path的zk相对路径，全路径为xxx/config/entityType/entityName，具体请看如下详图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206231425337-1090268899.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;333&quot;/&gt;&lt;/p&gt;
&lt;p&gt;entity_type=topics | clients | users | brokers&lt;/p&gt;
&lt;p&gt;entity_name=topicName | clientId | userId | (brokerId | &amp;lt;default&amp;gt;)&lt;/p&gt;
&lt;p&gt;当entity_type为brokers时，brokerId为broker编号与自己的server.properties对应，只对某个broker生效。“&amp;lt;default&amp;gt;”指对所有broker生效。而entity_type为topics | clients | users对所有broker都生效。通过以上entity_type/entity_name六种组合成六个zk相对路径。&lt;/p&gt;
&lt;p&gt;topics和clients组合原理一样，但users和brokers却略有不同，他们各自有2个组合，除了普通组合还有复合组合，两种类型组合在一起，例如users有users与clients组合，zk路径为users/&amp;lt;user&amp;gt;/clients/&amp;lt;clientId&amp;gt;；brokers动态配置非常实用，不需要重启就能动态更改任意数量brokers配置，更改所有brokers为xxx/brokers/&amp;lt;default&amp;gt;&lt;/p&gt;
&lt;p&gt;四类动态配置11种zk相对路径，根据11种zk相对路径可以读取11种粒度配置对象dynamic config。&lt;/p&gt;
&lt;p&gt;&amp;lt;default&amp;gt;说明：某种类型下所有作用域生效，例如xxx/clients/&amp;lt;default&amp;gt;和xxx/brokers/&amp;lt;default&amp;gt;就是集群内所有All clients和集群内所有All brokers配置都会生效，其他同理。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;dynamic config内容示例：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;entity_type/entity_name=topics/&amp;lt;topic_name&amp;gt;=topics/finalTest&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206231827808-539268405.png&quot; alt=&quot;&quot; width=&quot;694&quot; height=&quot;270&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;version&quot;: 1&lt;span&gt;,
    &lt;/span&gt;&quot;config&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;retention.bytes&quot;: &quot;102400000&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;flush.ms&quot;: &quot;5000&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;cleanup.policy&quot;: &quot;compact&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;flush.messages&quot;&lt;span&gt;,
        ...
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;entity_type/entity_name=clients/&amp;lt;clientId&amp;gt;=clients/camusall&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206232329515-1026494621.png&quot; alt=&quot;&quot; width=&quot;688&quot; height=&quot;264&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;version&quot;: 1&lt;span&gt;,
    &lt;/span&gt;&quot;config&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;producer_byte_rate&quot;: &quot;20971520&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;consumer_byte_rate&quot;: &quot;20971520&quot;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;entity_type/entity_name=brokers/all brokers=brokers/&amp;lt;default&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206232737219-239590509.png&quot; alt=&quot;&quot; width=&quot;699&quot; height=&quot;348&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;version&quot;: 1&lt;span&gt;,
    &lt;/span&gt;&quot;config&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;leader.replication.throttled.rate&quot;: &quot;5000&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;follower.replication.throttled.rate&quot;: &quot;60000&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;replica.alter.log.dirs.io.max.bytes.per.second&quot;: &quot;5000&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;log.retention.hours&quot;: &quot;24&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;log.flush.interval.messages&quot;: &quot;5000&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;min.insync.replicas&quot;: &quot;2&quot;&lt;span&gt;,
        ...
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;entity_type/entity_name=brokers/brokerId     与&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;all brokers的配置形成完全一样，只是作用域范围不同而已，此处省略。&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;写配置格式校验&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果写入配置不进行规范校验，broker就会读取处理过程中，就会卡住或阻塞，影响服务运行稳定性。所以配置校验至关重要，校验规则如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;配置参数格式必须合法，否则报错不予接收&lt;/li&gt;
&lt;li&gt;输入配置项进行校验，输入参数必须是kafka包含的配置项，否则过滤掉&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;config_change_seqNo生成规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;line number1 index0 alt2&quot; readability=&quot;12&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206232926370-915965576.png&quot; alt=&quot;&quot; width=&quot;195&quot; height=&quot;289&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200206233001778-2144677476.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;108&quot;/&gt;&lt;/p&gt;
&lt;p&gt; kafka-configs.sh脚本每成功执行一次，在zk上就创建一个新的seqNode节点(即/xxx/config/changes/config_change_seqNo)，seqNode是zk的持久顺序节点（PERSISTENT_SEQUENTIAL），它的组成是seqNode = seqNodePrefix + seqNodeSuffix，config_change_固定为seqNode的前缀，seqNodeSuffix = seqNo为seqNode的后缀，seqNo是10位数字的序列号，这个序列号后缀是自增的，由zk服务端自动生成和维护，每次事务请求成功就加1，它与MySQL的自增id原理一样。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;config_change_seqno清除规则&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200207231739291-1319098620.png&quot; alt=&quot;&quot; width=&quot;634&quot; height=&quot;116&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;集群经过长期运行积累，xxx/config/changes下会留存大量历史节点，如果不及时清理，会有以下影响：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;大量无用的seqNode进行传输，会增加网络带宽负担&lt;/li&gt;
&lt;li&gt;占用zk服务端内存及存储资源&lt;/li&gt;
&lt;li&gt;Kafka会做大量无效判断和计算&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;综上所述，因此必须要及时清除无用的seqNode集合，清除公式步骤如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当broker监听到notification变化回调时，记录系统时间。&lt;/li&gt;
&lt;li&gt;获取xxx/config/changes下所有子节点，读取每个seqNode的创建时间&lt;/li&gt;
&lt;li&gt;系统时间减去seqNode创建时间，如果时间差值大于过期时间，即changeExpirationMs，就会被删除&lt;/li&gt;
&lt;li&gt;changeExpirationMs默认为15分钟，可由broker配置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;config_change_seqno&lt;/strong&gt;判断处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200207232023512-1481369022.png&quot; alt=&quot;&quot; width=&quot;246&quot; height=&quot;299&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200207232127834-1394479502.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;119&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前面提到每当触发回调处理，seqNode节点创建时间过期15分钟会被删除，删除条件是触发才会被执行，如果长时间不创建就可能有少数几个seqNode一直保留。如果短时间内(15分钟内)创建大量seqNode，又不会立即被删除，只有等到下次触发达到条件才行，那怎么判断哪些会被处理呢？broker缓存中维护一个变量lastExecutedSeqNo，它负责保存执行历史中seqNode最大顺序号，所以每当触发回调获取seqNodeSet列表时，都能轻易判断出哪些需要处理计算，也会同步更新lastExecutedSeqNo。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;notification作用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通知broker有新的动态配置产生，读取相应的动态配置&lt;/li&gt;
&lt;li&gt;不用监听大量四种类型配置下子节点，每个broker只需要监听一个notification节点即可，高效且性能也高&lt;/li&gt;
&lt;li&gt;大大减少broker监听数量，如果像controller监听/xxx/partitions/[0-N]/state一样，监听数量就是四种类型配置zk路径乘以broker数量了&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Kafka动态配置实现原理解析-静态与动态的配置及优先级&quot;&gt;静态与动态的配置及优先级&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200207232415536-399583457.png&quot; alt=&quot;&quot; width=&quot;564&quot; height=&quot;260&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/i-beta/273782/202002/273782-20200207232515073-1164921658.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;358&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;静态与动态区别&lt;/strong&gt;&lt;/span&gt;。静态配置是Broker内置默认配置和静态配置文件server.properties，broker启动前可以任意修改，启动后不可修改。动态配置是broker启动运行后，可以在线更新生效，偷偷说一句离线也可以改，就是不生效而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;配置优先级&lt;/span&gt;。&lt;/strong&gt;以上4个图包含4类型配置既有动态也有静态，那优先级如何呢？动态配置优先级高于静态配置。如上图1、2、4，环越小优先级越高，对于动态配置来说，修改配置作用域范围越小优先级越高，反之亦然。优先级最高的，会逐级覆盖相同配置项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;当broker启动时&lt;/span&gt;。&lt;/strong&gt;读取顺序依次为broker内置默认配置，broker静态配置文件，动态配置。当配置项相同时，高优先级覆盖次优先的，其他依次类推&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;图示说明&lt;/span&gt;：&lt;/strong&gt;上图1、2、3、4中，其中图1、2、4中环数字表示配置优先级关系，数字从1~5表示优先级从高到低。&lt;strong&gt;图3为两级关联。&lt;/strong&gt;Users和Clients组合实现配置管理，这两者组合用于客户端配额限流，Users与Clients就像两级目录一样，一个User可以包含一个、多个clientId或所有clientId。&lt;strong&gt;图4&lt;/strong&gt;中既有优先级关系也有配置参数包含关系，topics类型配置是brokers类型配置的子集，brokers除了包含topic配置外还有DynamicThreadPool、DynamicListenerConfig、DynamicConnectionQuota、LogCleaner配置。&lt;/p&gt;
&lt;h2 id=&quot;Kafka动态配置实现原理解析-如何使用动态配置&quot;&gt;如何使用动态配置&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;使用脚本kafka-configs.sh和kafka-topics.sh，kafka-configs.sh支持四种类型，kafka-topics.sh仅支持topics类型&lt;/li&gt;
&lt;li&gt;使用Apache-kafka官方提供的java版本客户端API调用&lt;/li&gt;
&lt;li&gt;直接写zk实现，具体遵循如上写notification和dynamic_config规范&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如想更深入了解&lt;a href=&quot;https://www.cnblogs.com/lizherui/p/12275193.html&quot; target=&quot;_blank&quot;&gt;kafka-configs.sh用法&lt;/a&gt;，请查看&lt;/p&gt;
&lt;h2 id=&quot;Kafka动态配置实现原理解析-总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li&gt;Kafka配置参数分为静态配置和动态配置，静态分为内置默认与外置用户配置，用户配置优先于内置配置&lt;/li&gt;
&lt;li&gt;动态配置为4类型11个zk相对路径，即11种粒度配置对象生效，同类型作用域范围越小优先级越高&lt;/li&gt;
&lt;li&gt;动态配置优先级比静态配置优先级高，动态配置中Users与Clients可以组合配置&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;从设计原理中了解config_change_seqNo生成规则&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;写上文中理解了写Notification的作用，从而理解什么场景会适合使用zk中持久顺序节点(PERSISTENT_SEQUENTIAL)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;注意事项&lt;/span&gt;：以上配置解析，是基于Kafka-&lt;strong&gt;2.3.1版本分析&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Kafka动态配置实现原理解析-参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;Release Notes - Kafka - Version 0.8.1：&lt;a class=&quot;external-link&quot; href=&quot;https://archive.apache.org/dist/kafka/0.8.1/RELEASE_NOTES.html&quot; rel=&quot;nofollow&quot;&gt;https://archive.apache.org/dist/kafka/0.8.1/RELEASE_NOTES.html&lt;/a&gt;&lt;br/&gt;Release Notes - Kafka - Version 0.10.1.0：&lt;a class=&quot;external-link&quot; href=&quot;https://archive.apache.org/dist/kafka/0.10.1.0/RELEASE_NOTES.html&quot; rel=&quot;nofollow&quot;&gt;https://archive.apache.org/dist/kafka/0.10.1.0/RELEASE_NOTES.html&lt;/a&gt;&lt;br/&gt;Release Notes - Kafka - Version 0.10.2.0：&lt;a class=&quot;external-link&quot; href=&quot;https://archive.apache.org/dist/kafka/0.10.2.0/RELEASE_NOTES.html&quot; rel=&quot;nofollow&quot;&gt;https://archive.apache.org/dist/kafka/0.10.2.0/RELEASE_NOTES.html&lt;/a&gt;&lt;br/&gt;Release Notes - Kafka - Version 0.10.2.1：&lt;a class=&quot;external-link&quot; href=&quot;https://archive.apache.org/dist/kafka/0.10.2.1/RELEASE_NOTES.html&quot; rel=&quot;nofollow&quot;&gt;https://archive.apache.org/dist/kafka/0.10.2.1/RELEASE_NOTES.html&lt;/a&gt;&lt;br/&gt;Release Notes - Kafka - Version 1.1.0：&lt;a class=&quot;external-link&quot; href=&quot;https://archive.apache.org/dist/kafka/1.1.0/RELEASE_NOTES.html&quot; rel=&quot;nofollow&quot;&gt;https://archive.apache.org/dist/kafka/1.1.0/RELEASE_NOTES.html&lt;/a&gt;&lt;br/&gt;Release Notes - Kafka - Version 1.1.1：&lt;a class=&quot;external-link&quot; href=&quot;https://archive.apache.org/dist/kafka/1.1.1/RELEASE_NOTES.html&quot; rel=&quot;nofollow&quot;&gt;https://archive.apache.org/dist/kafka/1.1.1/RELEASE_NOTES.html&lt;/a&gt;&lt;br/&gt;Release Notes - Kafka - Version 2.0.0：&lt;a class=&quot;external-link&quot; href=&quot;https://archive.apache.org/dist/kafka/2.0.0/RELEASE_NOTES.html&quot; rel=&quot;nofollow&quot;&gt;https://archive.apache.org/dist/kafka/2.0.0/RELEASE_NOTES.html&lt;/a&gt;&lt;br/&gt;KIP-21 - Dynamic Configuration：&lt;a class=&quot;external-link&quot; href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-21+-+Dynamic+Configuration&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-21+-+Dynamic+Configuration&lt;/a&gt;&lt;br/&gt;KIP-226 - Dynamic Broker Configuration：&lt;a class=&quot;external-link&quot; href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-226+-+Dynamic+Broker+Configuration&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-226+-+Dynamic+Broker+Configuration&lt;/a&gt;&lt;br/&gt;Make DynamicConfigManager to use the ZkNodeChangeNotificationListener introduced as part of KAFKA-2211：&lt;a class=&quot;external-link&quot; href=&quot;https://issues.apache.org/jira/browse/KAFKA-2547&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/KAFKA-2547&lt;/a&gt;&lt;br/&gt;KIP-257 - Configurable Quota Management：&lt;a class=&quot;external-link&quot; href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-257+-+Configurable+Quota+Management&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-257+-+Configurable+Quota+Management&lt;/a&gt;&lt;br/&gt;KIP-73 Replication Quotas：&lt;a class=&quot;external-link&quot; href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-73+Replication+Quotas&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-73+Replication+Quotas&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 07 Feb 2020 15:28:00 +0000</pubDate>
<dc:creator>李志涛</dc:creator>
<og:description>问题导读 Apache Kafka在全球各个领域各大公司获得广泛使用，得益于它强大的功能和不断完善的生态。其中Kafka动态配置是一个比较高频好用的功能，下面我们就来一探究竟。 动态配置是如何设计的？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/lizherui/p/12271285.html</dc:identifier>
</item>
<item>
<title>python笔记13 - cuiyongchao007</title>
<link>http://www.cnblogs.com/cuiyongchao007/p/12275107.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cuiyongchao007/p/12275107.html</guid>
<description>&lt;p&gt;今日内容&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;装饰器&lt;/li&gt;
&lt;li&gt;推导式&lt;/li&gt;
&lt;li&gt;模块【可选】&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;内容回顾&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;函数&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;参数
&lt;ul&gt;&lt;li&gt;def (a1,a2):pass&lt;/li&gt;
&lt;li&gt;def (a1,a2=None):pass 默认参数推荐用不可变类型，慎用可变类型。&lt;/li&gt;
&lt;li&gt;def(*args,**kwargs):pass&lt;/li&gt;
&lt;li&gt;注意：位置参数 &amp;gt; 关键字参数&lt;/li&gt;
&lt;li&gt;面试题
&lt;ul readability=&quot;1&quot;&gt;&lt;li&gt;函数可以做参数【知识点】。&lt;br/&gt;def func(arg):&lt;br/&gt;arg()&lt;br/&gt;def show():&lt;br/&gt;pass&lt;br/&gt;func(show)&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;函数的参数传递的是什么？【内存地址=引用 or 值】&lt;br/&gt;v = [11,2,33,4]&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def func(arg):
    print(id(arg)) # 列表内存地址

print(id(v)) # 列表内存地址
func(v)

# 传递的是内存地址。&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;*args和**kwargs的作用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;返回值
&lt;/li&gt;
&lt;li&gt;执行函数
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;函数不被调用，内部代码永远不执行。&lt;br/&gt;def func():&lt;br/&gt;return i&lt;br/&gt;func_list = []&lt;br/&gt;for i in range(10):&lt;br/&gt;func_list.append(func)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;print(i) # 9
v1 = func_list[4]()#9
v2 = func_list[0]()#9
func_list = []
for i in range(10):
    # func_list.append(lambda :x) # 函数不被调用，内部永远不执行（不知道是什么。）
    func_list.append(lambda :i) # 函数不被调用，内部永远不执行（不知道是什么。）

print(func_list)#列表，10个函数的内存地址。

print(func_list[2]())#9&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;执行函数时，会新创建一块内存保存自己函数执行的信息 =&amp;gt; 闭包&lt;br/&gt;def base():&lt;br/&gt;return i&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def func(arg):
    def inner():
        return arg
    return inner

base_list = [] # [base,base,]
func_list = [] # [由第一次执行func函数的内存地址，内部arg=0 创建的inner函数，有arg=1的inner函数 ]
for i in range(10): # i = 0 ，1
    base_list.append(base)
    func_list.append(func(i))

# 1. base_list 和 func_list中分别保存的是什么？
&quot;&quot;&quot;
base_list中存储都是base函数。
func_list中存储的是inner函数，特别要说的是每个inner是在不同的地址创建。
&quot;&quot;&quot;
# 2. 如果循环打印什么？
for item in base_list:
    v = item() # 执行base函数
    print(v) # 都是9
for data in func_list:
    v = data()
    print(v) # 0 1 2 3 4 。在for循环过程中，func（i）已经执行，for循环过程中i的变化值已经被包在其中。&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;传参：位置参数 &amp;gt; 关键字参数&lt;/li&gt;
&lt;li&gt;函数不被调用，内部代码永远不执行。&lt;/li&gt;
&lt;li&gt;每次调用函数时，都会为此次调用开辟一块内存，内存可以保存自己以后想要用的值。&lt;/li&gt;
&lt;li&gt;函数是作用域，如果自己作用域中没有，则往上级作用域找。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;内置和匿名函数（精英）&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;内置函数&lt;/li&gt;
&lt;li&gt;匿名函数&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;模块&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;getpass&lt;/li&gt;
&lt;li&gt;random&lt;/li&gt;
&lt;li&gt;hashlib&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;内容详细&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;作业题讲解&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;2.装饰器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;v = 1
v = 2 
# ########################
def func():
    pass 
v = 10
v = func

# ##########################
def base():
    print(1)

def bar():
    print(2)

bar = base
bar()

def func():
    def inner():
        pass
    return inner 

v = func()
print(v) # inner函数
# #########################################
def func(arg):
    def inner():
        print(arg)
    return inner 

v1 = func(1)
v2 = func(2)

print(v1,v2)
#两个inner函数内存地址。
# #########################################
def func(arg):
    def inner():
        arg()
    return inner

def f1():
    print(123)

v1 = func(f1)
v1()
# ###########################################
def func(arg):
    def inner():
        arg()
    return inner

def f1():
    print(123)
    return 666

v1 = func(f1)
result = v1() # 执行inner函数 / f1含函数 -&amp;gt; 123 
print(result) # None
# ###########################################
def func(arg):
    def inner():
        return arg()
    return inner

def f1():
    print(123)
    return 666

v1 = func(f1)
result = v1() # 执行inner函数 / f1含函数 -&amp;gt; 123
print(result) # 666


def func():
    print(1)
    
v1 = func
func = 666&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;===========================装饰器=========&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def func(arg):
    def inner():
        print('before')
        v = arg()
        print('after')
        return v 
    return inner 

def index():
    print('123')
    return '666'


# 示例一
&quot;&quot;&quot;
v1 = index() # 执行index函数，打印123并返回666赋值给v1.
&quot;&quot;&quot;
# 示例二
&quot;&quot;&quot;
v2 = func(index) # v2是inner函数，arg=index函数
index = 666 
v3 = v2()
&quot;&quot;&quot;
# 示例三
&quot;&quot;&quot;
v4 = func(index)
index = v4  # index ==&amp;gt; inner 
index()
&quot;&quot;&quot;

# 示例四
index = func(index)
index()

def func(arg):
    def inner():
        v = arg()
        return v 
    return inner 

# 第一步：执行func函数并将下面的函数参数传递，相当于：func(index)
# 第二步：将func的返回值重新赋值给下面的函数名。 index = func(index)
@func 
def index():
    print(123)
    return 666

print(index)
index=func(index)
index()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;装饰器：在不改变原函数内部代码的基础上，在函数执行之前和之后自动执行某个功能。 （之前和之后增加某些功能-func）&lt;/p&gt;
&lt;p&gt;应用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 计算函数执行时间
import time
def wrapper(func):
    def inner():
        start_time = time.time()
        v = func()
        end_time = time.time()
        print(end_time-start_time)
        return v
    return inner

@wrapper
def func1():
    time.sleep(2)
    print(123)
@wrapper
def func2():
    time.sleep(1)
    print(123)

def func3():
    time.sleep(1.5)
    print(123)

func1()
#装饰器作用，在变动原函数（func）的基础上，增加原函数的功能(在wrapper里增加)。
#在不改变原函数内部代码的基础上，在函数执行之前和之后自动执行某个功能。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;目的：在不改变原函数的基础上，再函数执行前后自定义功能。&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;编写装饰器 和应用&lt;br/&gt;# 装饰器的编写&lt;br/&gt;def x(func):&lt;br/&gt;def y():&lt;br/&gt;# 前&lt;br/&gt;ret = func()&lt;br/&gt;# 后&lt;br/&gt;return ret&lt;br/&gt;return y&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 装饰器的应用
@x
def index():
    return 10

@x
def manage():
    pass

# 执行函数，自动触发装饰器了
v = index()
print(v)&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;应用场景：想要为函数扩展功能时，可以选择用装饰器。&lt;/li&gt;
&lt;li&gt;记住：
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li&gt;装饰器编写格式&lt;br/&gt;def 外层函数(参数): #参数是函数名&lt;br/&gt;def 内层函数(*args,**kwargs):&lt;br/&gt;return 参数(*args,**kwargs)&lt;br/&gt;return 内层函数&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;装饰器应用格式&lt;br/&gt;@外层函数&lt;br/&gt;def index():&lt;br/&gt;pass&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;index()&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;问题：为什么要加 *args, **kwargs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3.推导式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;列表推导式
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;基本格式&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;目的：方便的生成一个列表。&lt;br/&gt;格式：&lt;br/&gt;v1 = [i for i in 可迭代对象 ]&lt;br/&gt;v2 = [i for i in 可迭代对象 if 条件 ] # 条件为true才进行append&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;v1 = [ i for i in 'alex' ]&lt;br/&gt;v2 = [i+100 for i in range(10)]&lt;br/&gt;v3 = [99 if i&amp;gt;5 else 66 for i in range(10)]&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def func():
    return 100
v4 = [func for i in range(10)]

v5 = [lambda : 100 for i in range(10)]
result = v5[9]()

def func():
    return i
v6 = [func for i in range(10)]
result = v6[5]()

v7 = [lambda :i for i in range(10)]
result = v7[5]()


v8 = [lambda x:x*i for i in range(10)] # 新浪微博面试题
# 1.请问 v8 是什么？
# 2.请问 v8[0](2) 的结果是什么？

# 面试题
def num():
    return [lambda x:i*x for i in range(4)]
# num() -&amp;gt; [函数,函数,函数,函数]
print([ m(2) for m in num() ]) # [6,6,6,6]

# ##################### 筛选 #########################
v9 = [i for i in range(10) if i &amp;gt; 5]&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;集合推导式&lt;br/&gt;v1 = { i for i in 'alex' }&lt;/li&gt;
&lt;li&gt;字典的推导式&lt;br/&gt;v1 = { 'k'+str(i):i for i in range(10) }&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;今日总结&lt;/p&gt;
</description>
<pubDate>Fri, 07 Feb 2020 15:17:00 +0000</pubDate>
<dc:creator>cuiyongchao007</dc:creator>
<og:description>今日内容 装饰器 推导式 模块【可选】 内容回顾 1. 函数 参数 def (a1,a2):pass def (a1,a2=None):pass 默认参数推荐用不可变类型，慎用可变类型。 def( a</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cuiyongchao007/p/12275107.html</dc:identifier>
</item>
<item>
<title>并发队列之ConcurrentLinkedQueue - java小新人</title>
<link>http://www.cnblogs.com/wyq1995/p/12271664.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyq1995/p/12271664.html</guid>
<description>&lt;p&gt;　　本来想着直接说线程池的，不过在说线程池之前，我们必须要知道并发安全队列；因为一般情况下线程池中的线程数量是一定的，肯定不会超过某个阈值，那么当任务太多了的时候，我们必须把多余的任务保存到并发安全队列中，当线程池中的线程空闲下来了，就会到并发安全队列中拿任务；&lt;/p&gt;
&lt;p&gt;　　那么什么是并发安全队列呢？其实可以简单看作是一个链表，然后我们先办法去存取节点；总的来说，并发安全队列分为两种，一种是阻塞的，一种是非阻塞的，前者是用锁来实现的，后者用CAS实现的；&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一.简单介绍ConcurrentLinkedQueue&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　这个队列用法没什么好说的，就类似LinkedList的用法，怎么对一个链表继续增删改查，不多说，我们就说一下其中几个关键的方法；&lt;/p&gt;
&lt;p&gt;　　首先，这个队列是一个线程安全的无界非阻塞队列，其实就是一个单向链表，无界的意思就是没有限制最大长度，非阻塞表示用CAS实现入队和出队操作，我们打开这个类就可以知道，有一个内部类Node，其中重要的属性如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207171741540-1608739999.png&quot; alt=&quot;&quot; width=&quot;329&quot; height=&quot;212&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于存放节点的值&lt;/span&gt;
&lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; E item;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向下一个节点&lt;/span&gt;
&lt;span&gt;volatile&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里也是用的是UNSAFE类，前面说过了，这个类直接提供CAS操作&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; sun.misc.Unsafe UNSAFE;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;item字段的偏移量&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; itemOffset;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;next的偏移量&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; nextOffset;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　然后ConcurrentLinkedQueue中几个重要的属性，好像也没什么重要的，就保存了头节点和尾节点，注意，默认情况下头节点和尾节点都是哨兵节点，也就是一个存null的Node节点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存放链表的头节点&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存放链表的尾节点&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt; tail;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;UNSAFE对象&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; sun.misc.Unsafe UNSAFE;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;head字段的偏移量&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; headOffset;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tail字段偏移量&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; tailOffset;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207172743551-236154494.png&quot; alt=&quot;&quot; width=&quot;322&quot; height=&quot;67&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　下面我们直接看一些重要方法吧！慢慢分析其中的算法才是关键的&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;二.offer方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　这个方法的作用就是在队列末端添加一个节点，如果传递的参数是null，就抛出空指针异常，否则由于该队列是无界队列，该方法会一直返回true，而且该方法使用CAS算法实现的，所以不会阻塞线程；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列末端添加一个节点&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; offer(E e) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果e为空，那么抛出空指针异常&lt;/span&gt;
&lt;span&gt;    checkNotNull(e);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将传进来的元素封装成一个节点，Node的构造器中调用UNSAFE.putObject(this, itemOffset, item)把e赋值给节点中的item&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Node&amp;lt;E&amp;gt; newNode = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt;(e);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;strong&gt;[1]
    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的for循环从最后的节点开始&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (Node&amp;lt;E&amp;gt; t = tail, p =&lt;span&gt; t;;) {
      Node&lt;/span&gt;&amp;lt;E&amp;gt; q =&lt;span&gt; p.next;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[2]&lt;/strong&gt;&lt;/span&gt;如果q为null，说明p就是最后的节点了&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (q == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[3]&lt;/strong&gt;&lt;/span&gt;CAS更新：如果p节点的下一个节点是null，就把写个节点更新为newNode&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (p.casNext(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, newNode)) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[4]&lt;/strong&gt;&lt;/span&gt;CAS成功，但是这时p==t,所以不会进入到这里的if里面，直接返回true
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;那么什么时候会走到这里面来呢？其实是要有另外一个线程也在调用offer方法的时候，会进入到这里面来&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (p !=&lt;span&gt; t) 
                    casTail(t, newNode);  
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (p == q) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;strong&gt;[5]&lt;/strong&gt;&lt;/span&gt;
&lt;span&gt;            
            p &lt;/span&gt;= (t != (t = tail)) ?&lt;span&gt; t : head;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;strong&gt;[6]&lt;/strong&gt;&lt;/span&gt;
            p = (p != t &amp;amp;&amp;amp; t != (t = tail)) ?&lt;span&gt; t : q;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　上面执行到[3]的时候，由于头节点和尾节点默认都是指向哨兵节点的，由于这个时候p的下一个节点为null，所以当前线程A执行CAS会成功，下图所示；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207210203472-787903552.png&quot; alt=&quot;&quot; width=&quot;542&quot; height=&quot;164&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　如果此时还有一个线程B也来尝试[3]中CAS，由于此时p节点的下一个节点不是null了，于是线程B会跳到[1]出进行第二次循环，然后会到[6]中，由于p和t此时是相等的，所以这里是false，即p=q，下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207204817101-80550711.png&quot; alt=&quot;&quot; width=&quot;322&quot; height=&quot;160&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　然后线程B又会跳到[1]处进行第三次循环，由于执行了Node&amp;lt;E&amp;gt; q = p.next，所以此时q指向最后的null，就到了[3]处进行CAS，这次是可以成功的，成功之后如下图所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207205408211-1638673804.png&quot; alt=&quot;&quot; width=&quot;451&quot; height=&quot;168&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　这个时候因为p！=t，所以可以进入到[4]，这里又会进行一个CAS：如果tail和t指向的节点一样，那么就将tail指向新添加的节点，如图所示，这个时候线程B也就执行完了；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207205903878-1551556016.png&quot; alt=&quot;&quot; width=&quot;415&quot; height=&quot;152&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　其实还有[5]没有走到，这个是在poll操作之后才执行的，我们先跳过，等说完poll方法之后再回头看看；另外说一下，add方法其实就是调用的是offer方法，就不多说了；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207210544380-2115760831.png&quot; alt=&quot;&quot; width=&quot;241&quot; height=&quot;71&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;三.poll方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　这个方法是获取头部的这个节点，如果队列为空则返回null；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; E poll() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里其实就是一个goto的标记，用于跳出for循环&lt;/span&gt;
&lt;span&gt;    restartFromHead:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;strong&gt;[1]&lt;/strong&gt;&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Node&amp;lt;E&amp;gt; h = head, p =&lt;span&gt; h, q;;) {
            E item &lt;/span&gt;=&lt;span&gt; p.item;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[2]&lt;/strong&gt;&lt;/span&gt;如果当前节点中存的值不为空，则CAS设置为null&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (item != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; p.casItem(item, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[3]&lt;/strong&gt;&lt;/span&gt;CAS成功就更新头节点的位置&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (p !=&lt;span&gt; h) 
                    updateHead(h, ((q &lt;/span&gt;= p.next) != &lt;span&gt;null&lt;/span&gt;) ?&lt;span&gt; q : p);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[4]&lt;/strong&gt;&lt;/span&gt;当前队列为空，就返回null&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((q = p.next) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                updateHead(h, p);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[5]&lt;/strong&gt;&lt;/span&gt;当前节点和下一个节点一样，说明节点自引用，则重新找头节点&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (p ==&lt;span&gt; q)
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt; restartFromHead;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;strong&gt;[6]&lt;/strong&gt;&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                p &lt;/span&gt;=&lt;span&gt; q;
        }
    }
}

&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; updateHead(Node&amp;lt;E&amp;gt; h, Node&amp;lt;E&amp;gt;&lt;span&gt; p) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (h != p &amp;amp;&amp;amp;&lt;span&gt; casHead(h, p))
        h.lazySetNext(h);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　分为几种情况，第一种情况是线程A调用poll方法的时候，发现队列是空的，即头节点和尾节点都指向哨兵节点，就会直接到[4]，返回null&lt;/p&gt;
&lt;p&gt;　　第二种情况，线程A执行到了[4]，此时有一个线程却调用offer方法添加了一个节点，下图所示，那么此时线程A就不会走[4]了，[5]也不满足，于是会到[6]这里来，然后线程A又会跳到[1]处进行循环，此时p指向的节点中item不为null，所以会到[2]中；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207215314867-1643520705.png&quot; alt=&quot;&quot; width=&quot;719&quot; height=&quot;177&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　到了[2]中将p指向的节点中item用CAS设置为null，然后就到了[3],下面第一个图，由于p！=h，q=null，所以最后调用的是updateHead(h,p)，这方法：如果头节点和h指向的是一样的，就将头节点指向p，我们还能看到updateHead方法中h.lazySetNext(h)表示h的下一个节点指向自己，下面图二&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207220300636-2132734633.png&quot; alt=&quot;&quot; width=&quot;767&quot; height=&quot;207&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　到了这里还没完，还记不记得offer方法中有一个地方的代码没有执行的啊！就是这种情况，尾节点自己引用自己，我们再调用offer会怎么样呢？&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;回到offer方法&lt;/strong&gt;&lt;/span&gt;，先会到[1]，然后q指向自己这个哨兵节点（注意，此时虽然p指向的节点中存的是null，但是p！=null}，于是再到[5]，此时的图如下左图所示；此时由于t==tail，所以p=head；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207222122216-1037025903.png&quot; alt=&quot;&quot; width=&quot;710&quot; height=&quot;167&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　再在offer方法循环一次，此时q指向null，下面左图所示，然后就可以进入[2]中进行CAS，CAS成功，因为此时p！=t，所以还要进行CAS将tail指向新节点，下面右图所示，可以让GC回收那个垃圾！&lt;/p&gt;
&lt;p&gt;妈耶，这里比较绕！哈哈哈哈哈哈哈哈哈哈哈&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207222818601-1821991280.png&quot; alt=&quot;&quot; width=&quot;773&quot; height=&quot;165&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;四.peek方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　这个方法的作用就是获取队列头部的元素，&lt;span&gt;&lt;strong&gt;只获取不移除&lt;/strong&gt;&lt;/span&gt;，注意这个方法和上面的poll方法的区别啊！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; E peek() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1]goto标志&lt;/span&gt;
&lt;span&gt;    restartFromHead:
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Node&amp;lt;E&amp;gt; h = head, p =&lt;span&gt; h, q;;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[2]&lt;/span&gt;
            E item =&lt;span&gt; p.item;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[3]&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (item != &lt;span&gt;null&lt;/span&gt; || (q = p.next) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                updateHead(h, p);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[4]&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (p ==&lt;span&gt; q)
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt; restartFromHead;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[5]&lt;/span&gt;
                p =&lt;span&gt; q;
        }
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;  final void updateHead(Node&amp;lt;E&amp;gt; h, Node&amp;lt;E&amp;gt; p) {&lt;br/&gt;　　  if (h != p &amp;amp;&amp;amp; casHead(h, p))&lt;br/&gt;　　      h.lazySetNext(h);&lt;br/&gt;  }&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　如果队列中为空的时候，走到[3]的时候，就会如下图所示，由于h==p,所以updateHead方法啥也不做，然后返回就返回item为null&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207224456425-242673091.png&quot; alt=&quot;&quot; width=&quot;269&quot; height=&quot;172&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　如果队列不为空，那么如下左图所示，此时进入循环内不满足条件，会到[5]这里，将p指向q，然后再进行一次循环到[3]，将q指向p的后一个节点，下面右图所示；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207225535132-1587909088.png&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;141&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　然后调用updateHead方法，用CAS将头节点指向p这里，然后将h自己指向自己，下图所示，最后返回item&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207225845495-1427763903.png&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;183&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;五.总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　其实还有几个方法没说，但是感觉比较容易就不浪费篇幅了，有兴趣的可以看看：size方法用于计算队列中节点的数量，可是由于没有加锁，在并发的条件下不准确；remove方法删除某个节点，其实就是遍历然后用equals方法比较item是不是一样，只不过如果存在多个符合条件的节点只删除第一个，然后返回true，否则返回false；contains方法判断队列中是否包含指定item的节点，也就是遍历，很容易；&lt;/p&gt;
&lt;p&gt;　　最麻烦的就是offer方法和poll方法，offer方法是在队列的最后面添加节点，而poll是获取头节点，并且删除第一个真正的队列节点(注意，节点分为两种，一种是哨兵节点，一种是真正的存了数据的节点啊)，还简单的说了一下poll方法和peek方法的区别，后者只是获取，而不删除啊！用下面这个图帮助记忆一下；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1368608/202002/1368608-20200207231202417-1875891540.png&quot; alt=&quot;&quot; width=&quot;548&quot; height=&quot;190&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 07 Feb 2020 15:16:00 +0000</pubDate>
<dc:creator>java小新人</dc:creator>
<og:description>本来想着直接说线程池的，不过在说线程池之前，我们必须要知道并发安全队列；因为一般情况下线程池中的线程数量是一定的，肯定不会超过某个阈值，那么当任务太多了的时候，我们必须把多余的任务保存到并发安全队列中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wyq1995/p/12271664.html</dc:identifier>
</item>
<item>
<title>.Net Core初识以及启动配置 - 小智Owner</title>
<link>http://www.cnblogs.com/sagecheng/p/12274959.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sagecheng/p/12274959.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;这段时间，会陆续把去年一年在公司做的相关培训，整理成博客分享给大家，在团队内部已经把大部分的.net项目容器化并部署到k8s,中间也踩了很多坑，也会把相关问题整理处理，大家一起学习交流，哈。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul readability=&quot;2.4497487437186&quot;&gt;&lt;li readability=&quot;5.6842105263158&quot;&gt;
&lt;p&gt;.Net Core 是.Net的未来，微软在19年 5月已经明确说明，未来只有.Net 5(=.NET Core vNext),.Net 5是.net core的下一个版本，你可以用它来开发&lt;code&gt;Windows&lt;/code&gt;,&lt;code&gt;Linux&lt;/code&gt;,&lt;code&gt;MacOs&lt;/code&gt;,&lt;code&gt;IOS&lt;/code&gt;,&lt;code&gt;Android&lt;/code&gt;等等应用。&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200203124330Net5.png&quot; alt=&quot;avatar&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/introducing-net-5/&quot;&gt;图片来源&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;在容器、k8s、Devops、微服务等技术的推动下，2020年云原生将势不可挡，.net Cor而设计之初就了适配云原生，它有很多优点，都说明它是云原生时代，是一个很好的选择。&lt;/li&gt;
&lt;li&gt;它体积更小，启动速度更快、占用资源更少、支持水平扩展&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;考虑自己的职业发展，.net core也是必须需要熟悉的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;开源通用的开发框架 &lt;a href=&quot;https://github.com/dotnet/core&quot;&gt;github地址&lt;/a&gt;，微软和社区共同维护&lt;/li&gt;
&lt;li&gt;.net core 模块化管理，按需引用对应组件&lt;/li&gt;
&lt;li&gt;支持跨平台、跨架构开发，部署灵活&lt;/li&gt;
&lt;li&gt;兼容性强&lt;/li&gt;
&lt;li&gt;支持命令行&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;包含了&lt;code&gt;.Net Framework&lt;/code&gt;的类库 （3.0版本之前很多都是从.Net Framework类库移植的，现在已经不再移植老的代码 ）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote readability=&quot;4.3181818181818&quot;&gt;
&lt;p&gt;推荐一篇讲的很好的文章，这里就不展开了&lt;a href=&quot;https://www.cnblogs.com/vipyoumay/p/5603928.html&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;同父异母的兄弟关系&lt;/li&gt;
&lt;li&gt;.Net core可以认为是.net Framework的下一代产品，到2020后都统一为.Net 5&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/900243/o_200203124537schedule.png&quot; alt=&quot;.Net Schedule&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;.net core 3.1 2019年12月正式发布 LTS 可以商用&lt;/li&gt;
&lt;li&gt;兼容winform和WPF，这部分目前不跨平台、&lt;/li&gt;
&lt;li&gt;体积更小，启动速度更快，占用资源更少，支持水平扩展,更好适配云原生和微服务&lt;/li&gt;
&lt;li&gt;Blazor&lt;/li&gt;
&lt;li&gt;GRPC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;asp.net-core-web应用启动过程&quot;&gt;ASP.NET Core Web应用启动过程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200203134627startup.png&quot; alt=&quot;启动过程&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上图大概可以把启动过程总结为：&lt;/p&gt;
&lt;p&gt;创建主机生成器-配置主机-&amp;gt;创建主机-&amp;gt;运行主机&lt;/p&gt;
&lt;h2 id=&quot;asp.net-core-web应用&quot;&gt;ASP.NET Core Web应用&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200206034821NetApplication.png&quot; alt=&quot;applicarion&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;主机host&quot;&gt;主机（Host）&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;主机主要负责应用程序的启动和生命周期的管理，配置服务器和请求处理管道，实质是一个封装了应用资源的&lt;code&gt;object&lt;/code&gt;&lt;br/&gt;配置日志、依赖服务的注入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.Net core 中的主机分为&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.1&quot;&gt;泛型主机&lt;/a&gt;和 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/web-host?view=aspnetcore-3.1&quot;&gt;web主机&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;kestrel-介绍&quot;&gt;Kestrel 介绍&lt;/h2&gt;
&lt;p&gt;Kestrel 是 ASP.NET Core 项目模板指定的默认 Web 服务器。是一个跨平台的高性能的WEB服务器，角色定位类似于IIS，但不是IIS，它在linux下性能更强，相比于IIS它功能相对较少，不支持反向代理。&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200203131821kestrel.png&quot; alt=&quot;Kestrel&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;启动配置&quot;&gt;启动配置&lt;/h2&gt;
&lt;p&gt;这里说的配置，主要分为两种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;主机配置&lt;/li&gt;
&lt;li&gt;服务配置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们以实际代码来看下，怎么新增和修改默认的启动配置&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt;
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =&amp;gt;
            {
                webBuilder.UseStartup&amp;lt;Startup&amp;gt;();
            });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个是我们通过vs生成的一个最简单的.net core 3.1空的模板项目。&lt;code&gt;Host.CreateDefaultBuilder()&lt;/code&gt;这个方法默认会&lt;code&gt;加载命令行参数&lt;/code&gt;, &lt;code&gt;加载配置&lt;/code&gt; &lt;code&gt;应用配置（appsettings.json）``加载环境变量&lt;/code&gt;,&lt;code&gt;加载日志组件&lt;/code&gt;等默认配置。&lt;/p&gt;
&lt;p&gt;看到这些大家可能会疑问，如果环境配型、应用配置、命令行中有相同的配置，应用会以那个配置的优先级生效呢，下面我们以最简单启动urls参数为例，验证下，这些配置的优先级。&lt;/p&gt;
&lt;h3 id=&quot;urls-配置&quot;&gt;urls 配置&lt;/h3&gt;
&lt;p&gt;.net core 中提供了三种设置urls的方法&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;环境变量, 在 &lt;code&gt;launchSettings.json&lt;/code&gt;的 &lt;code&gt;environmentVariables&lt;/code&gt;增加&lt;code&gt;ASPNETCORE_URLS&lt;/code&gt;来设置urls&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;profiles&quot;: {
    &quot;CoreStudyLesson1&quot;: {
      &quot;commandName&quot;: &quot;Project&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;,
        &quot;ASPNETCORE_URLS&quot;: &quot;http://*:7000&quot;
      },
      &quot;applicationUrl&quot;: &quot;http://localhost:5000&quot;
    }
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;运行效果&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200207140309dotnet_run_3.png&quot; alt=&quot;dotnet_run_3&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;应用配置。修改&lt;code&gt;appsettings.json&lt;/code&gt;,增加&lt;code&gt;urls&lt;/code&gt;节点&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;Logging&quot;: {
    &quot;LogLevel&quot;: {
      &quot;Default&quot;: &quot;Information&quot;,
      &quot;Microsoft&quot;: &quot;Warning&quot;,
      &quot;Microsoft.Hosting.Lifetime&quot;: &quot;Information&quot;
    }
  },
  &quot;AllowedHosts&quot;: &quot;*&quot;,
  &quot;urls&quot;:&quot;http://*:8000&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;运行效果&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200207140320dotnet_run_4.png&quot; alt=&quot;dotnet_run_4&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;命令行启动， 使用 &lt;code&gt;--urls&lt;/code&gt; 参数指定url&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;cmd&quot;&gt;
&lt;code&gt;dotnet run --urls https://*:9000&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;运行效果&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200207140257dotnet_run_2.png&quot; alt=&quot;dotnet_run_2&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;代码指定&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;
public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt;
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =&amp;gt;
            {
                webBuilder.UseStartup&amp;lt;Startup&amp;gt;();
                // 设置监听Url 命令行  硬编码 应用配置 环境变量  
                webBuilder.UseUrls(&quot;http://*:6001&quot;);
            });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;运行效果&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/sagecheng/1264371/o_200207142150dotnet_run_5.png&quot; alt=&quot;dotnet_run_5&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体优先级是&lt;/p&gt;
&lt;p&gt;命令行 &amp;gt;应用配置&amp;gt;硬编码&amp;gt;环境变量&lt;/p&gt;
&lt;h3 id=&quot;组件配置-kestrel配置&quot;&gt;组件配置-Kestrel配置&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt;
        Host.CreateDefaultBuilder(args)
            // 配置web主机 kestrel
            .ConfigureWebHostDefaults(webBuilder =&amp;gt;
            {
                //组件配置
                webBuilder.ConfigureKestrel((context,options)=&amp;gt;
                    options.Limits.MaxConcurrentConnections=10);//默认没有限制
                // 主机配置项
                webBuilder.UseStartup&amp;lt;Startup&amp;gt;();
            });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;组件配置log配置&quot;&gt;组件配置log配置&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;移除默认的日志组件，并添加制定的logProvider.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt;
        Host.CreateDefaultBuilder(args)
            // 配置web主机 kestrel
            .ConfigureWebHostDefaults(webBuilder =&amp;gt;
            {
                //组件配置
                webBuilder.ConfigureKestrel((context,options)=&amp;gt;
                    options.Limits.MaxConcurrentConnections=10);//默认没有限制
                
                webBuilder.ConfigureLogging(logging =&amp;gt;
                    {
                        logging.ClearProviders();// 移除.net Core默认注入的日志Providers
                        logging.AddLog4Net();//所有日志统一使用log4net
                    });
                
                // 主机配置项
                webBuilder.UseStartup&amp;lt;Startup&amp;gt;();
            });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;主机配置-启动配置&quot;&gt;主机配置-启动配置&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt; // 主机配置项
 webBuilder.UseStartup&amp;lt;Startup&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 07 Feb 2020 14:40:00 +0000</pubDate>
<dc:creator>小智Owner</dc:creator>
<og:description>更新计划 这段时间，会陆续把去年一年在公司做的相关培训，整理成博客分享给大家，在团队内部已经把大部分的.net项目容器化并部署到k8s,中间也踩了很多坑，也会把相关问题整理处理，大家一起学习交流，哈。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/sagecheng/p/12274959.html</dc:identifier>
</item>
<item>
<title>Linux防火墙之iptables常用扩展匹配条件（一） - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/12273755.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/12273755.html</guid>
<description>&lt;p&gt;　　上一篇博文讲了iptables的基本匹配条件和隐式匹配条件，回顾请参考&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/12269717.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/12269717.html&lt;/a&gt;；今天在来说说iptabels的一些常用的显示扩展匹配条件，何谓显示扩展匹配条件呢？显示扩展匹配条件就是我们需要用到一些扩展的模块，用-m选项去指定动态加载它。要用iptabels的扩展匹配条件的前提是，我们的系统上要有对应的扩展模块。在Linux主机上/usr/lib64/xtables/这个目录用来存放iptables的模块的，这里面的模块以libip6t开头的，表示适用于ipv6，其余的是ipv4协议版本的模块。这个目录下的模块命名是这样的，libipt_或者libip6t_后面的名字如果全是大写，则该模块用于处理动作扩展模块，如果是小写就是匹配条件的扩展模块。对于这些模块的帮助信息，在centos上用man iptables命令就可以找到相应的模块说明和用法，以及模块的选项等等，在centos7上我们要查看扩展模块的用法帮助，需要用man iptables-extensions命令来查看；了解了iptables的扩展模块，我们接下来说说常用的几种扩展模块的使用和说明&lt;/p&gt;
&lt;p&gt;　　1、multiport扩展，这个扩展模块主要用于匹配多个源端口或目标端口，前面我们了解了tcp和udp他们都有两个隐式扩展来指定连续或单个源端口或目标端口，它不能同时指定多个离散的端口，multiport这个模块就可以以离散方式定义多端口匹配，当然它也支持连续的端口匹配，连续端口匹配同tcp/udp的连续端口匹配用法和写法一直，它也支持，连续和非连续端口的混合匹配，但这个模块最多匹配15个端口。这里的15个端口不同于我们理解的15个端口，这里的15个端口是说用逗号隔开的离散端口，也就是说连续的端口，在这里只算一个。&lt;/p&gt;
&lt;p&gt;　　[!] --source-ports,--sports port[,port|,port:port]...，这个选项表示匹配多个源端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;51&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 18 packets, 1292 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 13 packets, 1212 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT -s 172.16.0.0/16 -d 192.168.0.99 -p tcp -m multiport --sports 20:50,80,3306,9000 -j ACCEPT 
[root@test ~]# iptables -A my_chain  -s 172.16.0.0/16 -d 192.168.0.99 -p tcp -m multiport ! --sports 53,123,323 -j DROP
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 24 packets, 1740 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     tcp  --  *      *       172.16.0.0/16        192.168.0.99         multiport sports 20:50,80,3306,9000

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 17 packets, 1580 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 DROP       tcp  --  *      *       172.16.0.0/16        192.168.0.99         multiport sports  !53,123,323
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：--sports支持对指定端口取反，表示匹配除了指定端口以外的其他端口。&lt;/p&gt;
&lt;p&gt;　　[!] --destination-ports,--dports port[,port|,port:port]...，这个选项表示匹配多个目标端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F  
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 8 packets, 528 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 5 packets, 620 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT -d 192.168.0.99 -p tcp -m multiport --dports 22,80,3306,41319 -j ACCEPT  
[root@test ~]# iptables -A INPUT -d 192.168.0.99 -p tcp -m multiport ! --dports 22,80,3306,41319 -j DROP
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         
  152 12112 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.0.99         multiport dports 22,80,3306,41319
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            192.168.0.99         multiport dports  !22,80,3306,41319

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 17 packets, 1580 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　[!] --ports port[,port|,port:port]...多个源或目标端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 18 packets, 1292 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 13 packets, 1212 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT -d 192.168.0.99 -p tcp -m multiport --ports 22,3306,41319 -j ACCEPT
[root@test ~]# iptables -A INPUT -d 192.168.0.99 -p tcp -m multiport ! --ports 22,3306,41319 -j DROP
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         
  121  9468 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.0.99         multiport ports 22,3306,41319
    6   304 DROP       tcp  --  *      *       0.0.0.0/0            192.168.0.99         multiport ports  !22,3306,41319

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 25 packets, 3120 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：--ports表示匹配到的端口不管是源还是目标，只要是指定的端口都能匹配得到，然后做出相应的处理动作&lt;/p&gt;
&lt;p&gt;　　2、iprange扩展，此扩展模块主要用于匹配连续的ip地址范围&lt;/p&gt;
&lt;p&gt;　　[!] --src-range from[-to]  此选项表示匹配源ip地址范围&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 25 packets, 1832 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 19 packets, 1832 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT -p tcp -m iprange --src-range 192.168.0.200-192.168.0.245 -j ACCEPT 
[root@test ~]# iptables -A INPUT -p tcp -m iprange ! --src-range 192.168.0.200-192.168.0.245 -j DROP   
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         
  144 12000 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            source IP range 192.168.0.200-192.168.0.245
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            source IP range ! 192.168.0.200-192.168.0.245

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 15 packets, 1396 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　[!] --dst-range from[-to]，此选项表示匹配目标地址范围&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 29 packets, 2096 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 20 packets, 1856 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A OUTPUT -p tcp -m iprange --dst-range 192.168.0.100-192.168.0.245 -j ACCEPT
[root@test ~]# iptables -A OUTPUT -p tcp -m iprange ! --dst-range 192.168.0.100-192.168.0.245 -j DROP
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 103 packets, 7240 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         
  175 16212 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            destination IP range 192.168.0.100-192.168.0.245
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            destination IP range ! 192.168.0.100-192.168.0.245

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、mac扩展，该模块用于匹配主机的MAC地址，适用于PREROUTING和FORWARD，INPUT链上&lt;/p&gt;
&lt;p&gt;　　[!] --mac-source XX:XX:XX:XX:XX:XX，此选项表示匹配源MAC地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 19 packets, 1332 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 13 packets, 1212 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT -p tcp -m mac --mac-source 00:24:81:68:ce:45 -j ACCEPT
[root@test ~]# iptables -A INPUT -s 192.168.0.151 -p tcp -j DROP
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 65 packets, 16202 bytes)
 pkts bytes target     prot opt in     out     source               destination         
   18  1480 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            MAC 00:24:81:68:CE:45
    0     0 DROP       tcp  --  *      *       192.168.0.151        0.0.0.0/0           

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 70 packets, 19646 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、string扩展，此模块主要对报文中的应用层数据做字符串模式匹配检测&lt;/p&gt;
&lt;p&gt;　　--algo {bm|kmp} ，指定字符串匹配检测算法，这个必须指定&lt;/p&gt;
&lt;p&gt;　　--from offset:从第几个字节开始匹配&lt;/p&gt;
&lt;p&gt;　　--to offset :到底几个字节结束&lt;/p&gt;
&lt;p&gt;　　[!] --string pattern 指定要检测到字符串模式&lt;/p&gt;
&lt;p&gt;　　[!] --hex-string pattern 知道那个要检测字符串模式，16进制格式&lt;/p&gt;
&lt;p&gt;　　示例:入站报文有loganalyzer的字眼的报文,给予丢弃&lt;/p&gt;
&lt;p&gt;　　在没有设置规则的是可以正常访问的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207191935294-83535565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　添加如下规则&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -A INPUT -p tcp --dport 80 -m string --algo bm --string &quot;loganalyzer&quot; -j DROP
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 35 packets, 2328 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    8  1840 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 STRING match  &quot;loganalyzer&quot; ALGO name bm TO 65535

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 28 packets, 3200 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207192528244-1650003118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　提示:可以看到添加了规则后,我们客户端就不能再访问我们的网站了,这个就是通过过滤字符串来实现控制用户的访问&lt;/p&gt;
&lt;p&gt;　　5、time扩展,此模块根据将报文到达的时间与指定的时间范围进行匹配&lt;/p&gt;
&lt;p&gt;　　--datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]]  指定开始日期&lt;/p&gt;
&lt;p&gt;　　--datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]  指定结束日期&lt;/p&gt;
&lt;p&gt;　　--timestart hh:mm[:ss]  指定开始时间&lt;/p&gt;
&lt;p&gt;　　--timestop hh:mm[:ss]   指定结束时间&lt;/p&gt;
&lt;p&gt;　　[!] --monthdays day[,day...] 指定每个月的几号&lt;/p&gt;
&lt;p&gt;　　[!] --weekdays day[,day...]  指定星期几，1 – 7 分别表示星期一到星期日&lt;/p&gt;
&lt;p&gt;　　--kerneltz：使用内核配置的时区而非默认的UTC，CentOS7系统默认为UTC;注意： centos6 不支持kerneltz ，--localtz指定本地时区(默认)&lt;/p&gt;
&lt;p&gt;　　通常情况我们用--mouthdays 和--timestart 、--timestop结合或者--weekdays day 和--timestart 、--timestop来结合使用很少和--datastart 、datastop使用；最后我们还有指定为使用的时区，如果我们不指定，它默认使用的是UTC时区，在centos6 上需要用--localtz来指定时区&lt;/p&gt;
&lt;p&gt;　　示例：允许任何客户端在晚上的20：00：00 到20：50：00 通过telnet 来访问我们服务器&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 19 packets, 1332 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 13 packets, 1212 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT -p tcp --dport 23 -m time --timestart 20:00:00 --timestop 20:50:00 --kerneltz -j ACCEPT
[root@test ~]# iptables -A INPUT -p tcp --dport 23 -j DROP
[root@test ~]# iptables -A OUTPUT -p tcp --sport 23 -m time --timestart 20:00:00 --timestop 20:50:00 --kerneltz -j ACCEPT
[root@test ~]# iptables -A OUTPUT -p tcp --sport 23 -j DROP          
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 19 packets, 1332 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23 TIME from 20:00:00 to 20:50:00
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 13 packets, 1212 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp spt:23 TIME from 20:00:00 to 20:50:00
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp spt:23

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试：在允许的时间内通过Telnet访问服务器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207204838199-1138277690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：可以看到在允许的时间访问服务器上没有问题，我们等会不再允许的时间范围内在访问下，看看是不是可以正常访问呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207205053550-42978224.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：可以看到不再允许的时间范围呢 是不可以访问的&lt;/p&gt;
&lt;p&gt;　　通过time模块我们可以做到在某个时间允许或拒绝客户端的访问，时间可以用上面的三种时间组合来确定一个范围，也可以同其他扩展模块联合使用，比如我们又要控制时间，又要控制部分源ip 来访问我们服务器，我们可以用-m指定iprange 的范围，iptables里的一条规则匹配条件都是取并集，也就说一条规则是否匹配到报文，要看这条规则里的匹配条件是否对数据包都匹配，换句话说就是一个数据要通过某一条规则，那么这个数据包需要满足我们给定规则的所有条件。&lt;/p&gt;
&lt;p&gt; 　　示例2：允许192.168.0.10-192.168.0.200 的服务器在21：00：00到21：20：00 允许通过Telnet访问我们服务器&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 20 packets, 1372 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 13 packets, 1212 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT  -p tcp --dport 23 -m iprange --src-range 192.168.0.10-192.168.0.200 -m time --timestart 21:00:00 --timestop 21:20:00 --kerneltz -j ACCEPT
[root@test ~]# iptables -A INPUT -p tcp --dport 23 -j DROP
[root@test ~]# iptables -A OUTPUT  -p tcp --sport 23 -m iprange --dst-range 192.168.0.10-192.168.0.200 -m time --timestart 21:00:00 --timestop 21:20:00 --kerneltz -j ACCEPT  
[root@test ~]# iptables -A OUTPUT -p tcp --dport 23 -j DROP     
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 14 packets, 924 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23 source IP range 192.168.0.10-192.168.0.200 TIME from 21:00:00 to 21:20:00
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 11 packets, 1908 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp spt:23 destination IP range 192.168.0.10-192.168.0.200 TIME from 21:00:00 to 21:20:00
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试：不在允许范围的主机和在允许范围的主机都在允许时间是否能访问服务器？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207211535487-1399953954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：可以看到虽然都是在允许的时间，在允许范围的主机是可以访问的，不再允许范围的主机上不能访问的。&lt;/p&gt;
&lt;p&gt;　　测试：允许的主机和不允许的主机，都在不在允许的时间是否可以访问服务器？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207212228220-159926572.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：可以看到都不在允许的时间，它俩是都不能访问的，所以要满足在允许的时间内的同时还要满足是允许的主机才可以，它俩条件必须是交集。&lt;/p&gt;
&lt;p&gt;　　6、connlimit扩展，此模块可根据每客户端IP做并发连接数数量匹配，可防止CC(Challenge Collapsar挑战黑洞)攻击&lt;/p&gt;
&lt;p&gt;　　--connlimit-upto #：连接的数量小于等于#时匹配&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 14 packets, 1004 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 11 packets, 996 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT -p tcp --dport 23 -m connlimit --connlimit-upto 2 -j ACCEPT
[root@test ~]# iptables -A INPUT -p tcp --dport 23 -j DROP
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 23 packets, 1668 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23 #conn src/32 &amp;lt;= 2
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 17 packets, 1548 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上规则表示，同一客户端连接我本机服务器上的23号端口（Telnet服务），如果连接数小于等于2 允许连接。&lt;/p&gt;
&lt;p&gt;测试：同一主机开三个窗口对服务器，看看第三个连接是否可以连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207215313796-990667686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　提示：可以看到当192.168.0.151 的第三个连接是被服务器拒绝了 &lt;/p&gt;
&lt;p&gt;　　--connlimit-above #：连接的数量大于#时匹配&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@test ~]# iptables -F
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 20 packets, 1372 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 13 packets, 1212 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# iptables -A INPUT  -d 192.168.0.99 -p tcp --dport 23 -m connlimit --connlimit-above 2 -j DROP 
[root@test ~]# iptables -nvL
Chain INPUT (policy ACCEPT 23 packets, 1596 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 DROP       tcp  --  *      *       0.0.0.0/0            192.168.0.99         tcp dpt:23 #conn src/32 &amp;gt; 2

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 15 packets, 1396 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain my_chain (0 references)
 pkts bytes target     prot opt in     out     source               destination         
[root@test ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：我们把上面的规则更改为同一主机连接数大于2时 就丢弃，其他连接走默认同意放行连接，也就是说只要同一ip 连接数大于2 就拒绝&lt;/p&gt;
&lt;p&gt;　　测试：同一主机开三个窗口对服务器，看看第三个连接是否可以连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207220758802-285275107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：可以看到同一主机连接大于2时就拒绝链接了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1503305/202002/1503305-20200207221118591-90309036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：在同一主机连接数大于2时 用另外的主机去连接是不受影响的&lt;/p&gt;
&lt;p&gt;　　从以上测试看，connlimit模块可以控制单台客户端的并发连接数，并且不对其他客户端产生影响，通常情况--connlimit-upto 和--connlimit-above 和默认策略结合使用，如果默认策略是允许所有不匹配的报文，那么我就用--connlimit-above 来控制连接上限，然后再拒绝。如果默认策略是拒绝所有不匹配的报文那么我们就用--connlimit-upto来允许连接数小于等于某个数来控制连接请求。&lt;/p&gt;
</description>
<pubDate>Fri, 07 Feb 2020 14:29:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>上一篇博文讲了iptables的基本匹配条件和隐式匹配条件，回顾请参考https://www.cnblogs.com/qiuhom-1874/p/12269717.html；今天在来说说iptabel</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/12273755.html</dc:identifier>
</item>
<item>
<title>SystemVerilog搭建APB_I2C IP 层次化验证平台 - 没落骑士</title>
<link>http://www.cnblogs.com/moluoqishi/p/12262434.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/moluoqishi/p/12262434.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;近期疫情严重，身为社畜的我只能在家中继续钻研技术了。之前写过一篇关于搭建FIFO验证平台的博文，利用SV的OOP特性对FIFO进行初步验证，但有很多不足之处，比如结构不够规范、验证组件类不独立于DUT等问题。此次尝试验证更复杂的IP，并利用SV的更多高级特性来搭建层次化验证平台。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、APB_I2C IP概述&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　实践出真知，于是在opencores网站上下载了个APB_I2C的IP核，便着手展开验证工作。第一步是理清楚这个IP的整体功能、引脚作用以及顶层结构。整体功能从模块名称便可得知是带有APB总线接口的I2C_master。要了解引脚作用与时序，直接截取SPEC上的示意图查看：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;APB_WRITE:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207202315247-1029566031.png&quot; alt=&quot;&quot; width=&quot;526&quot; height=&quot;298&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; APB_READ:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207202353263-513104212.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;317&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; I2C_PROTOCOL:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207202439010-796245573.png&quot; alt=&quot;&quot; width=&quot;736&quot; height=&quot;53&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;接口和协议这里就不细说了，感兴趣的朋友查找相关的资料。至于顶层结构这方面，最好还是交给工具方便点。无奈回家没有带回我的虚拟机硬盘，只能下载个WINDOW版本的EDA工具了。本文使用QuestaSim，原理图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200205085706835-523496812.png&quot; alt=&quot;&quot; width=&quot;886&quot; height=&quot;342&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　很容易看出该模块顶层包含APB接口模块APB、分别用于缓存发送和接收数据的FIFO_TX和FIFO_RX，以及I2C协议转换模块I2X_INTERNAL_RX_TX。master通过APB总线访问该IP核内部的数据缓存区和配置寄存器，无需关注内部实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　除了这几个方面，配置寄存器的访问也非常重要。IP核必须做出正确的配置和使能才可以按照需要正常工作。配置寄存器见下表：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200205093813460-946016644.png&quot; alt=&quot;&quot; width=&quot;773&quot; height=&quot;184&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;三、QuestaSim常用指令&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;QuestaSim工具的WINDOWS/LINUX版本很容易下载到，和Modelsim的主要区别是对SV UVM的支持性较好，这一点非常符合本文的意愿。但仿真过程中一次次点击鼠标很麻烦，只好学习学习操作命令了，写个脚本配合SV实现自动化仿真。以下是在官方文档user manual和tutorial中截取的常用指令及解释。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1 Compile the source files.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;vlog&lt;/strong&gt; gates.v and2.v cache.v memory.v proc.v set.v top.v&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;2 Use the &lt;span class=&quot;fontstyle0&quot;&gt;&lt;strong&gt;vopt&lt;/strong&gt; &lt;span class=&quot;fontstyle0&quot;&gt;command to optimize the design with full visibility into all design units &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;lines ApplCommand&quot;&gt;&lt;span&gt;&lt;strong&gt;vopt +acc &amp;lt;design_name&amp;gt; -o &amp;lt;optimized_design_name&amp;gt; -debugdb&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;The &lt;span class=&quot;ph FontStyle bold&quot;&gt;+acc argument enables full visibility into the design for debugging purposes. The &lt;span class=&quot;ph FontStyle bold&quot;&gt;-oargument  is required for naming the optimized design object. The &lt;span class=&quot;ph FontStyle bold&quot;&gt;-debugdb argument collects combinatorial and sequential logic data into the work library.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;3 Use the optimized design name to load the design with the &lt;span class=&quot;fontstyle0&quot;&gt;vsim &lt;span class=&quot;fontstyle0&quot;&gt;command:&lt;br/&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;strong&gt;vsim testcounter_opt -debugdb&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;4 &lt;strong&gt;set WildcardFilter &quot;Variable Constant Generic Parameter SpecParam Memory&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Assertion Endpoint ImmediateAssert&quot;&lt;/strong&gt;&lt;br/&gt;&lt;span class=&quot;fontstyle2&quot;&gt;With this command, you &lt;em&gt;remove “CellInternal”&lt;/em&gt; from the default list of Wildcard filters.&lt;br/&gt;This allows all signals in cells to be logged by the simulator so they will be visible in the&lt;br/&gt;debug environment. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;5 &lt;strong&gt;Add Wave&lt;/strong&gt; *&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;add log /*&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;This will provide the historic values of the events of interest plus its drivers&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;&lt;strong&gt;7 run 500&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;　　一并给出我的do脚本文件:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ff6e7c76-5182-4e2e-a3be-f7ac5fdb1d2c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ff6e7c76-5182-4e2e-a3be-f7ac5fdb1d2c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ff6e7c76-5182-4e2e-a3be-f7ac5fdb1d2c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ff6e7c76-5182-4e2e-a3be-f7ac5fdb1d2c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ff6e7c76-5182-4e2e-a3be-f7ac5fdb1d2c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #quit -&lt;span&gt;sim
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;set filename testbench
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; vlog *.v *&lt;span&gt;.sv
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; vopt -debugdb +acc work.$filename -&lt;span&gt;o top_opt1
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; vsim -&lt;span&gt;debugdb top_opt1
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; #vsim -vopt -debugdb +&lt;span&gt;acc work.$filename
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;# change WildcardFilter variables
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; set WildcardFilter &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Variable Constant Generic Parameter SpecParam Memory Assertion Cover Endpoint ScVariable ImmediateAssert VHDLFile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; add wave /$filename&lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;add log -r /*
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;run 1000ns&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sim.do&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 四、搭建验证环境&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;这一节是本文的核心内容了。通用的验证环境的结构和组件如图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207205821568-86457834.png&quot; alt=&quot;&quot; width=&quot;693&quot; height=&quot;239&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;Stimulus将测试激励送入待测试模块DUT，Monitor观察响应并发送给检Checker。遇到复杂的设计还需要设计Reference model，进而对比实际响应与黄金参考的响应区别。并且当Monitor无法简单直接地收集DUT响应时，还需要设计VIP来解析复杂的响应信号时序。这几天参照工具书和网上的教程视频，根据APB_I2C模块的特性构思出基本的验证环境。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　APB_I2C模块并不复杂，所以没必要设计reference model。若想利用Monitor组件获取DUT响应需要解析I2C协议时序，这里编写个VIP来帮助它解析出有效数据，进而与Stimulus数据对比。Monitor因VIP的存在得到了很大程度上的简化，主要的功能为将等待触发事件发生后，将数据通过MAILBOX传输给Checker进行比较。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　另外，为了让Stimulus脱离具体接口信号操作，建立Generator和Initiator类分别用于产生读写访问和将读写访问转换成读写操作对应的具体信号逻辑。为了实现OOP特性中的“细节隐藏”，建立配置类Config来配置验证环境，这里主要是配置Generator发送特定场景的读写请求。想要测试不同的功能特性，只需改动传入Config的参数即可。到此验证环境包含了Generator Initiator Monitor Checker Config五个验证组件，这里再建立Environment类将这些组件包在一起，方便调用方法。还是上图更直观些（有点丑，凑活看吧）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207214230557-1074402786.png&quot; alt=&quot;&quot; width=&quot;814&quot; height=&quot;323&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;除了验证环境结构，好的代码结构也能极大提高平台的重用性。这里将所有类及对应的属性方法封装到Package components中，方便被import到testbench中。验证过程中用到的所有变量类型、参数放置在defines.sv中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('92907b50-c21e-4324-962c-56178d5c24bc')&quot; readability=&quot;45&quot;&gt;&lt;img id=&quot;code_img_closed_92907b50-c21e-4324-962c-56178d5c24bc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_92907b50-c21e-4324-962c-56178d5c24bc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('92907b50-c21e-4324-962c-56178d5c24bc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_92907b50-c21e-4324-962c-56178d5c24bc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package components;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;     `&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;defines.sv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;     
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    apb_bus_t apb_bus;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    logic event_tx_i2c_vld,event_tx_vld;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    data_t data_tx_i2c;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;    logic data_tx_i2c_vld;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Driver&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;    class Initiator;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; void init_en();
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;             apb_bus.sel = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;             apb_bus.wdata = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;             apb_bus.addr = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;             apb_bus.write = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;             apb_bus.enable = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; write_oper(address_t address,data_t data_w);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;             @(&lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; apb_bus.clk);
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             apb_bus.sel = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;             apb_bus.write = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             apb_bus.wdata =&lt;span&gt; data_w;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             apb_bus.addr =&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;            #T;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             apb_bus.enable = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;            #T;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;            init_en();
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         
&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt; read_oper(address_t address,&lt;span&gt;output&lt;/span&gt;&lt;span&gt; data_t data_r);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;             @(&lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; apb_bus.clk);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             apb_bus.sel = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             apb_bus.write = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             apb_bus.addr =&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;            #T;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             apb_bus.enable = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;            #T;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             data_r =&lt;span&gt; apb_bus.rdata;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;            init_en();
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;    endclass
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    typedef class Config;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Generator&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;    class Request; 
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        data_t data_w;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        data_t data_r;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        Initiator initiator;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; new();
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             data_w = &lt;span&gt;32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h1234_5678;//32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0001_0010_0011_0100_0101_0110_0111_1000
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             initiator =&lt;span&gt; new();
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            clear_req();
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; void clear_req();
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            initiator.init_en();
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; configure_reg(data_t data_reg_config,data_t data_reg_timeout);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;            initiator.write_oper(ADDR_REG_CONFIG,data_reg_config);
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             #(T*&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;            initiator.write_oper(ADD_REG_TIMEOUT,data_reg_timeout);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; write_data(data_t data_w);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;            initiator.write_oper(ADDR_TX_FIFO,data_w);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt; read_data(&lt;span&gt;output&lt;/span&gt;&lt;span&gt; data_t data_r);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;            initiator.read_oper(ADDR_RX_FIFO,data_r);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; req_run(Config req_config);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(req_config.config_type == CONFIG_WR_DATA)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;                 configure_reg(data_t&lt;span&gt;'&lt;/span&gt;&lt;span&gt;({30&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;d10,WRI_EN}),data_t&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d10000));
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;                write_data(data_w);
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(req_config.config_type == CONFIG_RD_DATA)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;                 configure_reg(data_t&lt;span&gt;'&lt;/span&gt;&lt;span&gt;({30&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;d10,RD_EN}),data_t&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d10000));
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;                read_data(data_r);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;     
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    endclass:Request
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    class Config;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        config_type_t config_type;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         
&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt; new(config_type_t config_type=&lt;span&gt;CONFIG_RD_DATA);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             this.config_type =&lt;span&gt; config_type;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;         
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    endclass:Config
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;    class Monitor;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        mailbox #(data_t) mb_data_i2c_tx;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        mailbox #(data_t) mb_data_tx;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; new(mailbox mb1,mailbox mb2);
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             this.mb_data_i2c_tx =&lt;span&gt; mb1;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;             this.mb_data_tx =&lt;span&gt; mb2;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;         
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; store_res_tx();
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;wait&lt;/span&gt;&lt;span&gt;(event_tx_i2c_vld);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             #(T/&lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;            mb_data_i2c_tx.put(data_tx_i2c);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;store_res_tx:MAILBOX PUT:'h%h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,data_tx_i2c);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         
&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; store_source_tx();
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;             &lt;span&gt;wait&lt;/span&gt;&lt;span&gt;(event_tx_vld);
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;             #(T/&lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;            mb_data_tx.put(apb_bus.wdata);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;             $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;store_source_tx:MAILBOX PUT:'h%h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,apb_bus.wdata);
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         
&lt;span&gt;124&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; mon_run();
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             &lt;span&gt;fork&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;                store_res_tx();
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;                store_source_tx();
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;             &lt;span&gt;join&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;     
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;    endclass:Monitor
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;     
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;    class Checker;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; cmp_cnt;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; err_cnt;
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;        data_t data_A,data_B;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;        mailbox #(data_t) mb_data_A,mb_data_B;
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;        sim_res_t check_res;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         
&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; new(mailbox mb_A,mailbox mb_B);
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;             cmp_cnt = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;             err_cnt = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;             this.mb_data_A =&lt;span&gt; mb_A;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             this.mb_data_B =&lt;span&gt; mb_B;
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;         
&lt;span&gt;147&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; collect_res();
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;            mb_data_A.get(this.data_A);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;            mb_data_B.get(this.data_B);
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;             $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MAILBOX GET:'h%h, 'h%h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,this.data_A,this.data_B);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         
&lt;span&gt;153&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sim_res_t compare(data_t dataA,data_t dataB);
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(dataA == dataB)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;                 check_res =&lt;span&gt; TRUE;
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;                 err_cnt ++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;                 check_res =&lt;span&gt; FALSE;
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt; &lt;span&gt;            return check_res;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;         
&lt;span&gt;164&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; check_run();
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;            sim_res_t check_res;
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;            collect_res();
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;             check_res =&lt;span&gt; compare(data_A,data_B);
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(check_res ==&lt;span&gt; TRUE)
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;                 $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RUN PASS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;                 $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RUN FAIL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;     
&lt;span&gt;174&lt;/span&gt; &lt;span&gt;    endclass:Checker
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;     
&lt;span&gt;176&lt;/span&gt; &lt;span&gt;    class Environment;
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;         mailbox #(data_t) mb[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;        Checker chk;
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt;        Request req;
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;        Monitor monitor;
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; &lt;span&gt;        Config req_config;
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;         
&lt;span&gt;183&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; new();
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;             &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;             req_config =&lt;span&gt; new();
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;             req =&lt;span&gt; new();
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;            foreach(mb[i])
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;                 mb[i] =&lt;span&gt; new();
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;             monitor = new(mb[&lt;span&gt;0&lt;/span&gt;],mb[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;             chk = new(mb[&lt;span&gt;0&lt;/span&gt;],mb[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;         &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt;         
&lt;span&gt;193&lt;/span&gt;         &lt;span&gt;task&lt;/span&gt;&lt;span&gt; env_run();
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;             &lt;span&gt;fork&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt; &lt;span&gt;                req.req_run(req_config);
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; &lt;span&gt;                monitor.mon_run();
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;             &lt;span&gt;join&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt; &lt;span&gt;            chk.check_run();
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;        endtask
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;         
&lt;span&gt;201&lt;/span&gt; &lt;span&gt;    endclass:Environment
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;     
&lt;span&gt;203&lt;/span&gt; endpackage
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;components.sv&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a33a67bf-01ba-4539-ab43-c6582dfcb6f3')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_a33a67bf-01ba-4539-ab43-c6582dfcb6f3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a33a67bf-01ba-4539-ab43-c6582dfcb6f3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a33a67bf-01ba-4539-ab43-c6582dfcb6f3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a33a67bf-01ba-4539-ab43-c6582dfcb6f3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;parameter&lt;/span&gt; T = &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;parameter&lt;/span&gt; DATA_W = &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;parameter&lt;/span&gt; bit [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] WRI_EN = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B01,&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;                         RD_EN = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B10;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;     typedef &lt;span&gt;int&lt;/span&gt; &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ADDR_REG_CONFIG = 'd8,&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;configure register
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ADD_REG_TIMEOUT = 'd12;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;time before starting&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     typedef enum &lt;span&gt;uint&lt;/span&gt; {ADDR_TX_FIFO = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0,ADDR_RX_FIFO = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;d4,ADDR_REG_CONFIG = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d8,ADD_REG_TIMEOUT = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d12} address_t;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     typedef enum &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; {TRUE,FALSE} sim_res_t;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     typedef logic [DATA_W-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] data_t;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    typedef struct {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    logic clk;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    logic write;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    logic sel;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    logic enable;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    data_t wdata;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    data_t rdata;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    data_t addr;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    logic ready;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    logic slverr;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    } apb_bus_t;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    typedef enum {WR,RD} gen_t;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     typedef enum {CONFIG_WR_DATA,CONFIG_RD_DATA} config_type_t;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;defines.sv&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a84bfce7-05b0-4aeb-ad56-82f2c52e9dcb')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_a84bfce7-05b0-4aeb-ad56-82f2c52e9dcb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a84bfce7-05b0-4aeb-ad56-82f2c52e9dcb&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a84bfce7-05b0-4aeb-ad56-82f2c52e9dcb',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a84bfce7-05b0-4aeb-ad56-82f2c52e9dcb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; `timescale 1ns/&lt;span&gt;1ps
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;module&lt;/span&gt;&lt;span&gt; i2c_slave
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; #(&lt;span&gt;parameter&lt;/span&gt; DATA_WIDTH=&lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;input&lt;/span&gt;&lt;span&gt; clk,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;input&lt;/span&gt;&lt;span&gt; scl,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;inout&lt;/span&gt;&lt;span&gt; sda,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;input&lt;/span&gt;&lt;span&gt; sda_master_en,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;output&lt;/span&gt; logic [DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] data_r,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;master --&amp;gt; slave&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;output&lt;/span&gt;&lt;span&gt; logic data_r_vld,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;input&lt;/span&gt; [DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] data_w,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;input&lt;/span&gt;&lt;span&gt; data_w_vld
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;logic sda_r;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;logic sda_neg,sda_pos;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;logic cond_end,cond_start;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; sda = sda_master_en ? &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bz : 1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;@(&lt;span&gt;posedge&lt;/span&gt; clk)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     sda_r &amp;lt;=&lt;span&gt; sda;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; sda_neg = sda_r &amp;amp; ~&lt;span&gt;sda;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; sda_pos = ~sda_r &amp;amp;&lt;span&gt; sda;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; cond_start = sda_neg &amp;amp;&lt;span&gt; scl;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; cond_end = sda_pos &amp;amp;&lt;span&gt; scl;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; bit_index=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     data_r_vld = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;wait&lt;/span&gt;&lt;span&gt;(cond_start);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TRANSMISSION START&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     @(&lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; scl);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(bit_index &amp;lt; DATA_WIDTH)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         @(&lt;span&gt;negedge&lt;/span&gt;&lt;span&gt; scl);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (sda_master_en)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;             @(&lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; clk);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             data_r = {sda,data_r[DATA_WIDTH-&lt;span&gt;1&lt;/span&gt; -:DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]};
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             bit_index = bit_index+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Get bit%d:%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,bit_index,sda);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     data_r_vld = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;repeat&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         @(&lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; clk);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     data_r_vld = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     $display(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TRANSMISSION END&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     bit_index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;i2c_slave.sv&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e9eca8d2-1608-489b-b23b-d37d53847c5c')&quot; readability=&quot;48&quot;&gt;&lt;img id=&quot;code_img_closed_e9eca8d2-1608-489b-b23b-d37d53847c5c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9eca8d2-1608-489b-b23b-d37d53847c5c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e9eca8d2-1608-489b-b23b-d37d53847c5c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9eca8d2-1608-489b-b23b-d37d53847c5c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;91&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; `timescale 1ns/&lt;span&gt;1ps
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; import components::*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;module&lt;/span&gt;&lt;span&gt; testbench;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;logic pclk,presetn;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; logic [DATA_W-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] paddr,pwdata,prdata;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;logic pwrite,pselx,penable;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;logic req_tx_vld;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; pready,pslverr;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; int_rx,int_tx;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; sda_enable,scl_enable;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; scl;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; sda;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [DATA_W-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] data_r;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; data_r_vld;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;apb_bus_t apb_bus;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; pwrite =&lt;span&gt; apb_bus.write; 
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; pselx =&lt;span&gt; apb_bus.sel;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; penable =&lt;span&gt; apb_bus.enable;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; pwdata =&lt;span&gt; apb_bus.wdata;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; paddr =&lt;span&gt; apb_bus.addr;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; apb_bus.rdata =&lt;span&gt; prdata;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; apb_bus.ready =&lt;span&gt; pready;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; apb_bus.slverr =&lt;span&gt; pslverr;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; apb_bus.clk =&lt;span&gt; pclk;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;logic event_tx_i2c_vld,event_tx_vld;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; event_tx_vld     = req_tx_vld == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; event_tx_i2c_vld = data_r_vld == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;data_t data_tx_i2c;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;logic data_tx_i2c_vld;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; data_tx_i2c =&lt;span&gt; data_r;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; data_tx_i2c_vld =&lt;span&gt; data_r_vld;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;     pclk = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;forever&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;         #(T/&lt;span&gt;2.0&lt;/span&gt;) pclk = ~&lt;span&gt;pclk;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;     presetn = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;     presetn = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     #(T*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;     presetn = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; req_tx_vld = pselx &amp;amp; pwrite &amp;amp; penable &amp;amp; pready &amp;amp; ~pslverr &amp;amp; (paddr == ADDR_TX_FIFO || paddr ==&lt;span&gt; ADDR_RX_FIFO);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;Environment env;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;Config req_config;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;     
&lt;span&gt; 65&lt;/span&gt;     env =&lt;span&gt; new();
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;req_config = new(CONFIG_WR_DATA);&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;     req_config =&lt;span&gt; new(CONFIG_RD_DATA);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;     env.req_config =&lt;span&gt; req_config;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;     
&lt;span&gt; 70&lt;/span&gt;     #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;     #(T*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    env.env_run();
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;///////////////////////////&lt;/span&gt;      
&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;i2c_slave 
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;#(.DATA_WIDTH(DATA_W))
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;i2c_slave_vip(
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;.clk            (pclk),
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;.scl            (scl),
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;.sda            (sda),
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;.sda_master_en  (sda_enable),
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;.data_r            (data_r),
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;.data_r_vld        (data_r_vld),
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;.data_w            (),
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;.data_w_vld        ()
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt; 
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;i2c DUT(
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;APB PORTS&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    .PCLK            (pclk),
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    .PRESETn        (presetn),
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    .PADDR            (paddr),
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    .PWDATA            (pwdata),
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    .PWRITE            (pwrite),
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    .PSELx            (pselx),
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    .PENABLE        (penable),
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;    . PREADY        (pready),
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;    . PSLVERR        (pslverr),
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    . INT_RX        (int_rx),    
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    . INT_TX        (int_tx),
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;    . PRDATA        (prdata),
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    . SDA_ENABLE    (sda_enable),
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;    . SCL_ENABLE    (scl_enable),
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    .SDA            (sda),
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;    .SCL            (scl)    
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;      );
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;testbench.sv&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、仿真分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;当Config类对象的配置参数为CONFIG_WR_DATA时，generator发起写请求。波形如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200205182042099-1186020764.png&quot; alt=&quot;&quot; width=&quot;947&quot; height=&quot;224&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;观察打印的Log可以看出每个SCL时钟周期采集到一个bit，MAILBOX正确传输，checker对比正确，故而仿真PASS。&lt;/span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200206184843128-1341662728.png&quot; alt=&quot;&quot; width=&quot;336&quot; height=&quot;657&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;验证过程中发现该模块有很多BUG！！这里举两个例子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1 SDA为双向端口，但当sda_enable为0时，并没有赋值为高阻态，即释放信号线控制权给slave。做出如下修改并让VIP在ACK阶段拉低SDA。&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207093214961-442677054.png&quot; alt=&quot;&quot; width=&quot;644&quot; height=&quot;260&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;2 SCL在读操作状态机中没有被toggle，因此config的配置参数为CONFIG_RD_DATA时SCL没有翻转。在读操作状态机中添加翻转逻辑，使BR_CLK_RX_O信号在counter_receive_data == clk_t_1_4时拉高，counter_receive_data==clk_t_3_4时拉低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207215644075-802626151.png&quot; alt=&quot;&quot; width=&quot;713&quot; height=&quot;76&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;波形显示在读操作时SCL正常翻转。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1201289/202002/1201289-20200207200615353-919487614.png&quot; alt=&quot;&quot; width=&quot;966&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;该模块的读操作很多地方不正确还有待修改，就不一一赘述了。总的来说就是根本不能用o(╥﹏╥)o 不抱希望了，之后我还是自己写一个吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本文利用APB_I2C模块为例搭建了层次化验证平台，但还有待改善。这里列出几点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1 没有完全做到测试用例与环境分离&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2 没有构建场景层给予丰富的pattern&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;七、参考&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1 《SystemVerilog验证——测试平台编写指南》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2 《QuestaSim Tutorial》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3 《QuestaSim User Manual》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4 《apbi2c_spec》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5 &lt;/span&gt;Overview :: APB to I2C :: OpenCores &lt;strong&gt;&lt;em id=&quot;__mceDel&quot;&gt;https://opencores.org/projects/apbi2c&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 07 Feb 2020 14:14:00 +0000</pubDate>
<dc:creator>没落骑士</dc:creator>
<og:description>一、前言 近期疫情严重，身为社畜的我只能在家中继续钻研技术了。之前写过一篇关于搭建FIFO验证平台的博文，利用SV的OOP特性对FIFO进行初步验证，但有很多不足之处，比如结构不够规范、验证组件类不独</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/moluoqishi/p/12262434.html</dc:identifier>
</item>
</channel>
</rss>