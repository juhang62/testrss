<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>CentOS7.0小随笔——指令基本操作（Part.A） - 悲催世界一雷</title>
<link>http://www.cnblogs.com/lilywhite/p/10633981.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lilywhite/p/10633981.html</guid>
<description>&lt;p&gt;与其说是CentOS7.0的小随笔，说老实话，基本指令在每个发行版本的Linux中都基本上是一致的。&lt;/p&gt;
&lt;p&gt;Part.A部分我们讲述以下四个方面：命令行界面与图形界面、Linux系统的关闭与重启、命令行帮助、导航类命令。&lt;/p&gt;

&lt;p&gt;一、命令行界面与图形界面&lt;/p&gt;
&lt;p&gt;Linux操作系统中存在着两种不同的操作方式：文本模式和图形模式&lt;/p&gt;
&lt;p&gt;对于CentOS系统而言，如果安装选项选择的是最小安装或基本服务（basic service）安装，那么默认进入的是文本模式，且GUI组件并未连带安装（后续可以通过yum进行安装）。&lt;/p&gt;
&lt;p&gt;tips：如果要从文本模式进入图形界面，可以输入startx命令或init 5指令&lt;/p&gt;
&lt;p&gt;因为Linux是属于多用户操作系统，所以它可以接受多个用户登录。Linxu和Unix一样，提供了虚拟控制台的访问方式，这样就可以允许一个用户进行多终端、多次登录。&lt;/p&gt;
&lt;p&gt;例如：输入快捷键Ctrl+Alt+F2，用户又可以看到“login:”这样的提示字符，这就说明了用户切换到了第二个虚拟控制台。&lt;/p&gt;
&lt;p&gt;在文本模式下，我们经常看到类似于下面两种格式的内容：&lt;/p&gt;
&lt;p&gt;[Sakurauchi_Riko@llss ~]$&lt;/p&gt;
&lt;p&gt;[Sakurauchi_Riko@llss ~]#&lt;/p&gt;
&lt;p&gt;上面两种格式中，相同的地方有三处：Sakurauchi_Riko代表当前用户；llss指的是主机名；~当前用户的家目录&lt;/p&gt;
&lt;p&gt;唯一的区别就是$和#了。$表示该用户是普通用户；#代表该用户是拥有超级用户（root）的权限。&lt;/p&gt;

&lt;p&gt;二、Linux系统的关闭与重启&lt;/p&gt;
&lt;p&gt;以下四条指令都可以将Linux系统关闭&lt;/p&gt;
&lt;p&gt;# shutdown -h now　　//系统马上关机，如果now改为数字可设置为几分钟后关机&lt;/p&gt;
&lt;p&gt;# poweroff&lt;/p&gt;
&lt;p&gt;# init 0&lt;/p&gt;
&lt;p&gt;# halt　　//这条指令起到的作用只是停止系统，不关闭计算机（服务器）电源&lt;/p&gt;
&lt;p&gt;tips：在Linux系统中，普通用户在没有权限的情况下，是无法关闭系统的。只有超级用户（root）才能够关闭它。&lt;/p&gt;
&lt;p&gt;以下三条指令都可以讲Linux系统重启&lt;/p&gt;
&lt;p&gt;# shutdown -r now　　//系统马上重启。如果now改为数字可设置为几分钟后重启&lt;/p&gt;
&lt;p&gt;# reboot&lt;/p&gt;
&lt;p&gt;# init 6&lt;/p&gt;
&lt;p&gt;tips：快键键Ctrl+Alt+Del也可以使Linux系统重启&lt;/p&gt;

&lt;p&gt;三、命令行帮助&lt;/p&gt;
&lt;p&gt;熟知帮助选项-h和详细帮助信息指令man&lt;/p&gt;
&lt;p&gt;shell中使用-help的选项来获得帮助信息，即在输入相关命令后再加入-h的参数以了解该命令的使用方法&lt;/p&gt;
&lt;p&gt;例如：# mount -h&lt;/p&gt;
&lt;p&gt;详细帮助信息指令man的路径在/usr/share/man文件中（这里要说一点，在Linux中，万物皆可文件！）&lt;/p&gt;
&lt;p&gt;例如：# man ls （这个指令就是查看ls命令的详细用法，查看原理是调取/usr/share/man文件中ls的部分）&lt;/p&gt;

&lt;p&gt;四、导航类命令&lt;/p&gt;
&lt;p&gt;pwd用于显示用户当前所在的目录&lt;/p&gt;
&lt;p&gt;例如：# pwd&lt;/p&gt;
&lt;p&gt;　　　# /var/www/html/lilywhite&lt;/p&gt;
&lt;p&gt;（表示用户当前所在的路径为/var/www/html/lilywhite）&lt;/p&gt;

&lt;p&gt;cd命令说白了就是切换路径的作用&lt;/p&gt;
&lt;p&gt;例如：# cd /usr/bin　　//进入/usr/bin目录&lt;/p&gt;
&lt;p&gt;# cd ..　　//可以进入上一层目录&lt;/p&gt;
&lt;p&gt;# cd -　　//可以进入上一个进入的目录&lt;/p&gt;
&lt;p&gt;# cd ~　　//可以进入当前用户的家目录&lt;/p&gt;

&lt;p&gt;ls命令的作用使列出目录&lt;/p&gt;
&lt;p&gt;语法： ls  [选项]  {目标目录}&lt;/p&gt;
&lt;p&gt;常用选项：-a：显示所用的文件和目录&lt;/p&gt;
&lt;p&gt;　　　　   -A：显示所有的文件和目录（但不显示前目录和上层目录）&lt;/p&gt;
&lt;p&gt;　　　　    -l：显示详细格式列表（文件权限，所述用户、组，修改时间等信息）&lt;/p&gt;
&lt;p&gt;　　　　　　　　tips：在CentOS中，ls -l和ll指令等价&lt;/p&gt;

&lt;p&gt;su命令常用于不同用户间的切换&lt;/p&gt;
&lt;p&gt;例如，目前登录的用户为Sakurauchi_Riko，要切换为用户Aida_Rikako，需输入命令$ su Aida_Rikako&lt;/p&gt;

&lt;p&gt;who命令显示了系统中登陆了哪些用户（通过不同的参数列出信息可以详细到用户使用的终端，上线时间，停留时间，当前动作等内容。）&lt;/p&gt;

&lt;p&gt;which命令可以实现命令的全路径&lt;/p&gt;
&lt;p&gt;例如：# which man&lt;/p&gt;
&lt;p&gt;　　　　/usr/share/man&lt;/p&gt;
&lt;p&gt;这条指令在编译安装过程中起到极为重要的作用。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 15:25:00 +0000</pubDate>
<dc:creator>悲催世界一雷</dc:creator>
<og:description>与其说是CentOS7.0的小随笔，说老实话，基本指令在每个发行版本的Linux中都基本上是一致的。 Part.A部分我们讲述以下四个方面：命令行界面与图形界面、Linux系统的关闭与重启、命令行帮助</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lilywhite/p/10633981.html</dc:identifier>
</item>
<item>
<title>对象关系之聚合关系 - 迹流</title>
<link>http://www.cnblogs.com/creasing/p/10633949.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/creasing/p/10633949.html</guid>
<description>&lt;h2&gt;概念背景&lt;/h2&gt;
&lt;p&gt;现实世界中的实体被看成对象，对象之间可能存在着联系或关系，基于对象之间可能存在的关系，引入了对象关系的概念。&lt;/p&gt;
&lt;h2&gt;对象关系的定义&lt;/h2&gt;
&lt;p&gt;对象之间存在的关系称为对象关系。&lt;/p&gt;
&lt;h2&gt;对象关系的分类&lt;/h2&gt;
&lt;p&gt;根据对象之间存在的关系的性质，对象关系分为&lt;/p&gt;
&lt;p&gt;1）关联关系&lt;/p&gt;
&lt;p&gt;2）聚合关系&lt;/p&gt;
&lt;p&gt;3）继承关系&lt;/p&gt;
&lt;p&gt;其中聚合关系又可分为&lt;/p&gt;
&lt;p&gt;1）组合关系&lt;/p&gt;
&lt;p&gt;2）非组合关系&lt;/p&gt;

&lt;p&gt;下面较详细地介绍一下聚合关系及其来源。&lt;/p&gt;
&lt;h2&gt;聚合关系&lt;/h2&gt;
&lt;h3&gt;什么是聚合？什么是组合？什么是非组合？&lt;/h3&gt;
&lt;p&gt;首先来说明它们的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚合&lt;/strong&gt;是将几个对象收集在一起生成一个新对象的行为，其特性是聚合的内部对象与聚合的外部对象相对独立。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组合&lt;/strong&gt;是将几个对象收集在一起生成一个新对象的行为，其特性是聚合的内部对象与聚合的外部对象相对独立，但&lt;strong&gt;两者的生命周期一致&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非组合&lt;/strong&gt;是将几个对象收集在一起生成一个新对象的行为，其特性是聚合的内部对象与聚合的外部对象相对独立，但&lt;strong&gt;两者的生命周期不一致&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;可以看到&lt;strong&gt;聚合包括组合和非组合&lt;/strong&gt;，它们三者都有“聚合的内部对象与聚合的外部对象相对独立”的特征，但什么是聚合的内部对象和聚合的外部对象呢？&lt;/p&gt;
&lt;p&gt;举个现实世界中的简单的例子，&lt;/p&gt;
&lt;p&gt;我们知道，一副棋具由棋子和棋盘两样东西组成，&lt;/p&gt;
&lt;p&gt;以对象的角度来看，棋具、棋子和棋盘都是对象，&lt;/p&gt;
&lt;p&gt;但是棋具是由棋子和棋盘这两个对象组成的，本身又是一个对象，&lt;/p&gt;
&lt;p&gt;这个棋具对象就是一个聚合的外部对象，棋子和棋盘就是聚合的内部对象。&lt;/p&gt;

&lt;p&gt;一般情况下，聚合指的是非组合。&lt;/p&gt;
&lt;h3&gt;什么是聚合关系？什么是组合关系？什么是非组合关系？&lt;/h3&gt;
&lt;p&gt;根据上面的内容，可以归纳出，&lt;/p&gt;
&lt;p&gt;聚合关系是聚合的关系，&lt;/p&gt;
&lt;p&gt;展开就是&lt;/p&gt;
&lt;p&gt;聚合关系就是将几个对象收集在一起生成一个新对象、内部对象与外部对象相对独立的关系。&lt;/p&gt;
&lt;p&gt;同理，&lt;/p&gt;
&lt;p&gt;组合关系是组合的关系，&lt;/p&gt;
&lt;p&gt;非组合关系是非组合的关系。&lt;/p&gt;
&lt;h3&gt;有什么用？&lt;/h3&gt;
&lt;p&gt;在软件工程中，面向对象程序设计方法是解决复杂问题的常用方法。&lt;/p&gt;
&lt;p&gt;面向对象程序设计方法的内容包括：&lt;/p&gt;
&lt;p&gt;1）对对象进行建模&lt;/p&gt;
&lt;p&gt;2）对对象之间的联系或关系进行建模&lt;/p&gt;
&lt;p&gt;于是，对对象之间的关系进行建模是软件工程中使用面向对象程序设计方法解决问题各阶段需要经历的过程。&lt;/p&gt;
&lt;p&gt;掌握对象之间的关系能够帮助开发者对对象之间的关系建模&lt;/p&gt;
&lt;h3&gt;实例&lt;/h3&gt;
&lt;p&gt;实例采用Python语言实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# 对象之间的组合关系建模
class&lt;span&gt; Cpu:
    def __init__&lt;span&gt;(self):
        self.core = 4
class&lt;span&gt; Computer:
    def __init__&lt;span&gt;(self):
        self.cpu =&lt;span&gt; Cpu()

cp =&lt;span&gt; Computer()
print&lt;span&gt;(cp.cpu.core)
del cp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由以上代码可以知道， 当创建一个Computer类的实例时，同时会创建一个Cpu类的实例，并且它们的生命周期一致，即它们是组合的。&lt;/p&gt;
&lt;p&gt;当删除创建的Computer类的实例时，也会删除同时创建的Cpu类的实例。&lt;/p&gt;
&lt;p&gt;这也反映了一定的现实：当计算机对象存在时，处理器对象必定和计算机对象组合地存在。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
# 对象之间的聚合关系建模
class&lt;span&gt; ChessPieces:
    def __init__&lt;span&gt;(self):
        self.number = 32
class&lt;span&gt; ChessBoard:
    def __init__&lt;span&gt;(self):
        self.texture = 'marble'
class&lt;span&gt; ChessSet:
    def __init__&lt;span&gt;(self, chesspieces, chessboard):
        self.chesspieces =&lt;span&gt; chesspieces
        self.chessboard =&lt;span&gt; chessboard

cp =&lt;span&gt; ChessPieces()
cb =&lt;span&gt; ChessBoard()
cs =&lt;span&gt; ChessSet(cp,cb)
print&lt;span&gt;(cs.chesspieces.number, cs.chessboard.texture)
del&lt;span&gt; cs
print(cp.number, cb.texture)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由以上代码可以知道，当创建一个ChessSet类的实例时，必须先创建一个ChessPieces类的实例和一个ChessBoard类的实例，再将它们聚合成一个ChessSet类的实例。&lt;/p&gt;
&lt;p&gt;创建的ChessSet类的实例和创建的ChessPieces类的实例和创建的ChessBoard类的实例的生命周期可能不同。&lt;/p&gt;
&lt;p&gt;当删除创建的ChessSet类的实例时，并不会删除创建的ChessPieces类的实例和创建的ChessBoard类的实例。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 15:15:00 +0000</pubDate>
<dc:creator>迹流</dc:creator>
<og:description>概念背景 现实世界中的实体被看成对象，对象之间可能存在着联系或关系，基于对象之间可能存在的关系，引入了对象关系的概念。 对象关系的定义 对象之间存在的关系称为对象关系。 对象关系的分类 根据对象之间存</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/creasing/p/10633949.html</dc:identifier>
</item>
<item>
<title>Python 小试牛刀，Django详细解读，让你更快的掌握它！！！ - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/10514121.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/10514121.html</guid>
<description>&lt;p&gt;MVC：将web应用分为模型(M)，控制器(C)，视图(V)三层；他们之间以一种插件似的，松耦合的方式连接在一起。&lt;/p&gt;
&lt;p&gt;模型负责业务对象与数据库的对象(ORM)，视图负责与用户的交互(页面)，控制器(C)接受用户的输入调用模型和视图完成用户的请求。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190311235812685-1728066385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Django的MTV模型本质上与MVC没有什么差别，也是各组件之间为了保持松耦合关系，只不过定义上有些不同，Django的MTV分别是：&lt;/p&gt;
&lt;p&gt;　　• Model(模型)：负责业务对象与数据库的对象(ORM)&lt;/p&gt;
&lt;p&gt;　　• Template(模板)：负责如何把页面展示给用户&lt;/p&gt;
&lt;p&gt;　　• View(视图)：负责业务逻辑，并在适当的时候调用Model和Template&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190312001859096-1808767348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c53189ae-23fd-4e35-be7c-22e78e86ac56')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_c53189ae-23fd-4e35-be7c-22e78e86ac56&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c53189ae-23fd-4e35-be7c-22e78e86ac56&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c53189ae-23fd-4e35-be7c-22e78e86ac56',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c53189ae-23fd-4e35-be7c-22e78e86ac56&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;django
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;安装： pip3 install django&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;          添加环境变量
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;1  创建project&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;        django-&lt;span&gt;admin startproject mysite
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;        ---&lt;span&gt;mysite
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;           ---&lt;span&gt;settings.py
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;           ---&lt;span&gt;url.py
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;           ---&lt;span&gt;wsgi.py
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;        ----&lt;span&gt; manage.py(启动文件)  
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2  创建APP       &lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;       python mannage.py startapp  app01
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;3  settings配置&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;       TEMPLATES
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;        STATICFILES_DIRS=&lt;span&gt;(
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             os.path.join(BASE_DIR,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;statics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;        STATIC_URL = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/static/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  我们只能用 STATIC_URL，但STATIC_URL会按着你的STATICFILES_DIRS去找#4  根据需求设计代码&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;           url.py
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;           view.py
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;5  使用模版&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;        render(req,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)   
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;6  启动项目&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;        python manage.py runserver  127.0.0.1:8090
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;7  连接数据库，操作数据&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;        model.py
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;命令行创建&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;文件介绍：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190312005038886-1334614343.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; • manage.py  --- Django项目里面的工具，通过它可以调用django shell和数据库等&lt;/p&gt;
&lt;p&gt;• settings.py  --- 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。&lt;/p&gt;
&lt;p&gt;• urls.py --- 负责把url模式映射到应用程序&lt;/p&gt;
&lt;p&gt;- 生成同步数据库的脚本：python manage.py makemigrations&lt;/p&gt;
&lt;p&gt;　　　　同步数据库：python manage.py migrate&lt;/p&gt;
&lt;p&gt;注：开发过程中，数据库同步误操作之后，难免会遇到后面不能同步成功的情况，解决这个问题的一个粗暴方法是将migrations目录下的脚本(除了__init__.py之外)全部删掉，再把数据库删掉之后创建一个新的数据库,数据库同步操作再重新做一遍。&lt;/p&gt;
&lt;p&gt;-- 访问http://127.0.0.1:8000/admin/login/?next=/admin/时,需要为进入这个项目后台创建超级管理员:python manage.py createsuperuser，设置好账户密码就可以登陆&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190324213749077-489475931.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;-- 清空数据库：python manage.py flush&lt;/p&gt;
&lt;p&gt;-- 查询某个命令的详细信息:django-admin.py help startapp&lt;/p&gt;
&lt;p&gt;-- 启动交互界面：python manage.py shell(和直接运行python进入shell的区别是:你可以在这个shell里面调用当前项目的models.py中的API，对于操作数据，还有一些小测试非常方便)&lt;/p&gt;
&lt;p&gt;-- 终端上输入python manage.py 可以看到详细的列表，在忘记子名称的时候特别有用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('08d111ab-a682-4111-97c5-364870a4e01c')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_08d111ab-a682-4111-97c5-364870a4e01c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_08d111ab-a682-4111-97c5-364870a4e01c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('08d111ab-a682-4111-97c5-364870a4e01c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_08d111ab-a682-4111-97c5-364870a4e01c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;创建个人信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;/userInfor/&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;性别&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;信息展示&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;性别&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {% for i in info_list %}
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ i.username }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ i.sex }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ i.email }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    {% endfor %}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;-----------------------url.py---------------------------------------
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;url(r'^userInfor/', views.userInfor)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;-----------------------views.py--------------------------------------
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;info_list=[]
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;def userInfor(req):
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    if req.method==&quot;POST&quot;:
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        username=req.POST.get(&quot;username&quot;,None)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        sex=req.POST.get(&quot;sex&quot;,None)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        email=req.POST.get(&quot;email&quot;,None)
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        info={&quot;username&quot;:username,&quot;sex&quot;:sex,&quot;email&quot;:email}
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        info_list.append(info)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;     return render(req,&quot;userInfor.html&quot;,{&quot;info_list&quot;:info_list})
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;提交数据并展示&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('33eb37ee-2d77-42df-8c1f-b50f54673d36')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_33eb37ee-2d77-42df-8c1f-b50f54673d36&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_33eb37ee-2d77-42df-8c1f-b50f54673d36&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('33eb37ee-2d77-42df-8c1f-b50f54673d36',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_33eb37ee-2d77-42df-8c1f-b50f54673d36&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;创建个人信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;/userInfor/&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;性别&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;信息展示&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;性别&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {% for i in info_list %}
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ i.username }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ i.sex }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ i.email }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    {% endfor %}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;----------------------------------------------models.py
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;from django.db import models
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;# Create your models here.
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;class UserInfor(models.Model):
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    username=models.CharField(max_length=64)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    sex=models.CharField(max_length=64)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    email=models.CharField(max_length=64)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;----------------------------------------------views.py
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;from django.shortcuts import render
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;from app01 import models
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;# Create your views here.
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;def userInfor(req):
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    if req.method==&quot;POST&quot;:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        u=req.POST.get(&quot;username&quot;,None)
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        s=req.POST.get(&quot;sex&quot;,None)
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        e=req.POST.get(&quot;email&quot;,None)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt; &lt;span&gt;       #---------表中插入数据方式一
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;            # info={&quot;username&quot;:u,&quot;sex&quot;:e,&quot;email&quot;:e}
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;            # models.UserInfor.objects.create(**info)
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt; &lt;span&gt;       #---------表中插入数据方式二
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;        models.UserInfor.objects.create(
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;            username=u,
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;            sex=s,
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;            email=e
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; 
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;        info_list=models.UserInfor.objects.all()
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; 
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;        return render(req,&quot;userInfor.html&quot;,{&quot;info_list&quot;:info_list})
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; 
&lt;span&gt;89&lt;/span&gt;     return render(req,&quot;userInfor.html&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;提交数据并展示(数据库)&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　URL配置(URLconf)就像Django所支持网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表；就是以这种方式告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;urlpatterns = [
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        url(正则表达式，views视图函数，参数，别名)，
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('94de71b4-c089-4473-ace9-97ad4eaa11d8')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_94de71b4-c089-4473-ace9-97ad4eaa11d8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_94de71b4-c089-4473-ace9-97ad4eaa11d8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('94de71b4-c089-4473-ace9-97ad4eaa11d8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94de71b4-c089-4473-ace9-97ad4eaa11d8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from django.conf.urls import url
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from django.contrib import admin
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from app01 import views
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;urlpatterns = [
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    url(r'^articles/2003/$', views.special_case_2003),
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    #url(r'^articles/[0-9]{4}/$', views.year_archive),
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    url(r'^articles/([0-9]{4})/$', views.year_archive),  #no_named group
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    url(r'^articles/([0-9]{4})/([0-9]{2})/$', views.month_archive),
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    url(r'^articles/([0-9]{4})/([0-9]{2})/([0-9]+)/$', views.article_detail),
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;示例&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190325233750658-292803634.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Http请求中产生两个核心对象：&lt;/p&gt;
&lt;p&gt;　　http请求:HttpRequest对象&lt;/p&gt;
&lt;p&gt;　　http响应:HttpResponse对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5036201e-f8a1-463b-baad-bb01d01c436d')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_5036201e-f8a1-463b-baad-bb01d01c436d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5036201e-f8a1-463b-baad-bb01d01c436d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5036201e-f8a1-463b-baad-bb01d01c436d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5036201e-f8a1-463b-baad-bb01d01c436d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# path：       请求页面的全路径，不包括域名
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;# method：     请求中使用的HTTP方法的字符串表示。全大写表示。例如
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#                    if  req.method==&quot;GET&quot;:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#                              do_something()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#                    elseif req.method==&quot;POST&quot;:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#                              do_something_else()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;# GET:         包含所有HTTP GET参数的类字典对象
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;# POST：       包含所有HTTP POST参数的类字典对象
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#              服务器收到空的POST请求的情况也是可能发生的，也就是说，表单form通过
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#              HTTP POST方法提交请求，但是表单中可能没有数据，因此不能使用
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#              if req.POST来判断是否使用了HTTP POST 方法；应该使用  if req.method==&quot;POST&quot;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;# COOKIES:     包含所有cookies的标准Python字典对象；keys和values都是字符串。
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; # FILES：      包含所有上传文件的类字典对象；FILES中的每一个Key都是&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;标签中                     name属性的值，FILES中的每一个value同时也是一个标准的python字典对象，包含下面三个Keys：
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#             filename：      上传文件名，用字符串表示
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#             content_type:   上传文件的Content Type
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#             content：       上传文件的原始内容
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;# user：       是一个django.contrib.auth.models.User对象，代表当前登陆的用户。如果访问用户当前
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#              没有登陆，user将被初始化为django.contrib.auth.models.AnonymousUser的实例。你
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;#              可以通过user的is_authenticated()方法来辨别用户是否登陆：
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#              if req.user.is_authenticated();只有激活Django中的AuthenticationMiddleware
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;#              时该属性才可用
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;# session：    唯一可读写的属性，代表当前会话的字典对象；自己有激活Django中的session支持时该属性才可用。
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;#方法
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;get_full_path(),   比如：http://127.0.0.1:8000/index33/?name=123 ,req.get_full_path()得到的结果就是/index33/?name=123
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; req.path:/index33
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HttpResponse对象的属性和方法&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;注:常用request.POST.getlist('')&lt;/p&gt;
&lt;p&gt;　　对于HttpReques对象来说，是由django自动创建的。但是，HttpResponse对象就必须我们自己创建。每个view请求处理方法必须返回一个HttpResponse对象。&lt;/p&gt;
&lt;p&gt;　　HttpResponse类在django.http.HttpResponse&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;HttpResponse对象上扩展的常用方法：
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    页面渲染:    render()    render_to_response()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    页面跳转:    redirect(&quot;路径&quot;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; locals():可以直接将函数中所有的变量传给模板
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;模板语法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;• 模板的组成&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; HTML代码+逻辑控制代码
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　• 逻辑控制代码的组成&lt;/p&gt;
&lt;p&gt;　　1、变量(使用双大括号来引用变量)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 格式：    {{ var_name }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;---------Template和Context对象&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Django模板解析非常便捷。大部分的解析工作都是在后台通过对简短正则表达式一次性调用来完成。相比于XML的模板引擎形成鲜明对比，那些引擎承担了XML解析器的开销，且往往比Django模板渲染引擎要慢的多。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1eba9bad-e49d-4239-8836-6d53f40947d8')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_1eba9bad-e49d-4239-8836-6d53f40947d8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1eba9bad-e49d-4239-8836-6d53f40947d8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1eba9bad-e49d-4239-8836-6d53f40947d8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1eba9bad-e49d-4239-8836-6d53f40947d8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from django.shortcuts import render,HttpResponse
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from django.template.loader import get_template #记得导入
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;# Create your views here.
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import datetime
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;from django.template import Template,Context
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;# def current_time(req):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    #原始的视图函数
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    # now=datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     # html=&quot;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;现在时刻：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;%s.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot; %now
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    # return HttpResponse(html)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;# def current_time(req):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      #django模板修改的视图函数
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#     now=datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; #     t=Template('&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;现在时刻是:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color:red&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{current_date}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;')
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;      #t=get_template('current_datetime.html')
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#     c=Context({'current_date':now})
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#     html=t.render(c)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#     return HttpResponse(html)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#另一种写法(推荐)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;def current_time(req):
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    now=datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    return render(req, 'current_datetime.html', {'current_date':now})
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; 推荐方式
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;推荐&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------深度变量的查找(万能的句点号)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　以上的例子中，通过context传递的简单参数值主要是字符串，然而，模板系统能够非常简洁地处理更加复杂的数据结构，如：list、dictionary和自定义的对象。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　Django模板中遍历复杂数据结构的关键是句点字符(.)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e529b120-d3ca-4359-ab41-504bd80e353d')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_e529b120-d3ca-4359-ab41-504bd80e353d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e529b120-d3ca-4359-ab41-504bd80e353d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e529b120-d3ca-4359-ab41-504bd80e353d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e529b120-d3ca-4359-ab41-504bd80e353d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#最好是用几个例子来说明一下。
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;# 首先，句点可用于访问列表索引，例如：
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; from django.template import Template, Context
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t = Template('Item 2 is {{ items.2 }}.')
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; c = Context({'items': ['apples', 'bananas', 'carrots']})
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t.render(c)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;'Item 2 is carrots.'
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#假设你要向模板传递一个 Python 字典。 要通过字典键访问该字典的值，可使用一个句点：
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; from django.template import Template, Context
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; person = {'name': 'Sally', 'age': '43'}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t = Template('{{ person.name }} is {{ person.age }} years old.')
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; c = Context({'person': person})
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t.render(c)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;'Sally is 43 years old.'
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#同样，也可以通过句点来访问对象的属性。 比方说， Python 的 datetime.date 对象有
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#year 、 month 和 day 几个属性，你同样可以在模板中使用句点来访问这些属性：
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; from django.template import Template, Context
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; import datetime
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; d = datetime.date(1993, 5, 2)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; d.year
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; d.month
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; d.day
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t = Template('The month is {{ date.month }} and the year is {{ date.year }}.')
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; c = Context({'date': d})
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t.render(c)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;'The month is 5 and the year is 1993.'
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;# 这个例子使用了一个自定义的类，演示了通过实例变量加一点(dots)来访问它的属性，这个方法适
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;# 用于任意的对象。
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; from django.template import Template, Context
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; class Person(object):
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;...     def __init__(self, first_name, last_name):
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;...         self.first_name, self.last_name = first_name, last_name
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t = Template('Hello, {{ person.first_name }} {{ person.last_name }}.')
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; c = Context({'person': Person('John', 'Smith')})
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t.render(c)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;'Hello, John Smith.'
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;# 点语法也可以用来引用对象的方法。 例如，每个 Python 字符串都有 upper() 和 isdigit()
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;# 方法，你在模板中可以使用同样的句点语法来调用它们：
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; from django.template import Template, Context
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t = Template('{{ var }} -- {{ var.upper }} -- {{ var.isdigit }}')
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t.render(Context({'var': 'hello'}))
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;'hello -- HELLO -- False'
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; t.render(Context({'var': '123'}))
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;'123 -- 123 -- True'
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;# 注意这里调用方法时并* 没有* 使用圆括号 而且也无法给该方法传递参数；你只能调用不需参数的
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; # 方法。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------变量的过滤器(filter)的使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 格式：    {{obj|filter:param}}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('239483c7-c254-4864-9988-9a2ef1eee083')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_239483c7-c254-4864-9988-9a2ef1eee083&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_239483c7-c254-4864-9988-9a2ef1eee083&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('239483c7-c254-4864-9988-9a2ef1eee083',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_239483c7-c254-4864-9988-9a2ef1eee083&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# 1  add          ：   给变量加上相应的值
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;   #
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;   # 2  addslashes   :    给变量中的引号前加上斜线
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;   #
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;   # 3  capfirst     :    首字母大写
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;   #
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;   # 4  cut          ：   从字符串中移除指定的字符
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;   #
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;   # 5  date         ：   格式化日期字符串
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;   #
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;   # 6  default      ：   如果值是False,就替换成设置的默认值，否则就是用本来的值
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;   #
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;   # 7  default_if_none:  如果值是None，就替换成设置的默认值，否则就使用本来的值
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#实例:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#value1=&quot;aBcDe&quot;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; {{ value1|upper }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#value2=5
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; {{ value2|add:3 }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#value3='he  llo wo r ld'
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; {{ value3|cut:' ' }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#import datetime
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#value4=datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; {{ value4|date:'Y-m-d' }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;#value5=[]
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; {{ value5|default:'空的' }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; #value6='&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;跳转&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;{{ value6 }}
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;{% autoescape off %}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;  {{ value6 }}
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;{% endautoescape %}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; {{ value6|safe }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;{{ value6|striptags }}
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;#value7='1234'
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; {{ value7|filesizeformat }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; {{ value7|first }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; {{ value7|length }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; {{ value7|slice:&quot;:-1&quot; }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; #value8='http://www.baidu.com/?a=1&lt;span&gt;&amp;amp;b&lt;/span&gt;&lt;span&gt;=3'
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; {{ value8|urlencode }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     value9='hello I am yuan'
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　2、标签(tag)的使用(使用大括号和百分比的组合来表示使用tag)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {%tags%}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------{% if %} 的使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　{% if %}标签计算一个变量值，如果是&quot;true&quot;，即它不存在、不为空并且不是false的boolean值，系统则会显示{% if %}和{% endif %}间的所有内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('92a3f730-44b7-40d9-a03c-6f85eb01e681')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_92a3f730-44b7-40d9-a03c-6f85eb01e681&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_92a3f730-44b7-40d9-a03c-6f85eb01e681&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('92a3f730-44b7-40d9-a03c-6f85eb01e681',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_92a3f730-44b7-40d9-a03c-6f85eb01e681&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;{% if num &amp;gt;= 100 and 8 %}
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    {% if num &amp;gt; 200 %}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;num大于200&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {% else %}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;num大于100小于200&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {% endif %}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; {% elif num &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; 100&lt;/span&gt;&lt;span&gt;%}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    &amp;lt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;num小于100&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;{% else %}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;num等于100&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;{% endif %}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;{% if %} 标签接受and，or或者not来测试多个变量值或者否定一个给定的变量
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;{% if %} 标签不允许同一标签里同时出现and和or，否则逻辑容易产生歧义，例如下面的标签是不合法的：
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; {% if obj1 and obj2 or obj3 %}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------{% for %} 的使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 {% for %}标签允许你按顺序遍历一个序列中的各个元素，每次循环模板系统都会渲染{% for %}和{% endfor %}之间的所有哦内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9c480f19-9e73-459c-81fe-d3bde43f6b6b')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_9c480f19-9e73-459c-81fe-d3bde43f6b6b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9c480f19-9e73-459c-81fe-d3bde43f6b6b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9c480f19-9e73-459c-81fe-d3bde43f6b6b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9c480f19-9e73-459c-81fe-d3bde43f6b6b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{% for obj in list %}
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ obj.name }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{% endfor %}
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#在标签里添加reversed来反序循环列表：
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    {% for obj in list reversed %}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    ...
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {% endfor %}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#{% for %}标签可以嵌套：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {% for country in countries %}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ country.name }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;         {% for city in country.city_list %}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ city }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;         {% endfor %}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    {% endfor %}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#系统不支持中断循环，系统也不支持continue语句，{% for %}标签内置了一个forloop模板变量，
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#这个变量含有一些属性可以提供给你一些关于循环的信息
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;1，forloop.counter表示循环的次数，它从1开始计数，第一次循环设为1:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {% for item in todo_list %}
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ forloop.counter }}: {{ item }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    {% endfor %}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;2，forloop.counter0 类似于forloop.counter，但它是从0开始计数，第一次循环设为0
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;3，forloop.revcounter
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;4，forloop.revcounter0
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;5，forloop.first当第一次循环时值为True，在特别情况下很有用：
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    {% for object in objects %}   
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;          {% if forloop.first %}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;first&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{% else %}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{% endif %}   
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;         {{ object }}   
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    {% endfor %}  
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;# 富有魔力的forloop变量只能在循环中得到，当模板解析器到达{% endfor %}时forloop就消失了
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;# 如果你的模板context已经包含一个叫forloop的变量，Django会用{% for %}标签替代它
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;# Django会在for标签的块中覆盖你定义的forloop变量的值
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;# 在其他非循环的地方，你的forloop变量仍然可用
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;#{% empty %}
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;{{li }}
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;      {%  for i in li %}
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ forloop.counter0 }}----{{ i }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;      {% empty %}
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;this is empty!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;      {% endfor %}
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;#         [11, 22, 33, 44, 55]
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;#            0----11
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;#            1----22
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;#            2----33
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;#            3----44
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; #            4----55
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------{% csrf_token%}:csrf_token标签&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　用于生成csrf_token的标签，用于防治跨站攻击验证。&lt;strong&gt;&lt;span&gt;注：若在view的index里用的是render_to_response方法，不会生效&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　这里生成一个input标签，和其他表单标签一起提交给 后台&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------{% url %}：引用路由配置的地址&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e52408f1-27bb-4982-a4a8-4096b23f479c')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_e52408f1-27bb-4982-a4a8-4096b23f479c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e52408f1-27bb-4982-a4a8-4096b23f479c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e52408f1-27bb-4982-a4a8-4096b23f479c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e52408f1-27bb-4982-a4a8-4096b23f479c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;{% url &quot;&lt;/span&gt;&lt;span&gt;bieming&quot;%}&quot; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;          {%csrf_token%}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------{% with %}：用更简单的变量名替代复杂的变量名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% with total=fhjsaldfhjsdfhlasdfhljsdal %} {{ total }} {% endwith %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------{% verbatim%}：禁止render&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;{% verbatim %}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;         {{ hello }}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; {% endverbatim %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------{% load%}：加载标签库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　3、自定义filter和simple_tag&lt;/p&gt;
&lt;p&gt;　　　　a.在app中创建templatetags模块(必须的)&lt;/p&gt;
&lt;p&gt;　　　　b.创建任意.py文件，如:my_tags.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bdc8d8e5-4280-4a32-b5ef-940d9d900651')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_bdc8d8e5-4280-4a32-b5ef-940d9d900651&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bdc8d8e5-4280-4a32-b5ef-940d9d900651&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bdc8d8e5-4280-4a32-b5ef-940d9d900651',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bdc8d8e5-4280-4a32-b5ef-940d9d900651&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from django import template
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from django.utils.safestring import mark_safe
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;register = template.Library()   #register的名字是固定的,不可改变
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;@register.filter
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def filter_multi(v1,v2):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    return  v1 * v2
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;@register.simple_tag
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;def simple_tag_multi(v1,v2):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    return  v1 * v2
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;@register.simple_tag
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;def my_input(id,arg):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     result = &quot;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;='text' &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;='%s' &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;='%s' &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&quot; %(id,arg,)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     return mark_safe(result)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　c.在使用自定义simple_tag和filter的html文件中导入之间创建的 my_tags.py:{% load my_tags.py %}&lt;/p&gt;
&lt;p&gt;　　　　d.使用simple_tag和filter&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('eb3af0a0-7c66-476c-9449-20fbe54f5f5f')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_eb3af0a0-7c66-476c-9449-20fbe54f5f5f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eb3af0a0-7c66-476c-9449-20fbe54f5f5f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('eb3af0a0-7c66-476c-9449-20fbe54f5f5f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eb3af0a0-7c66-476c-9449-20fbe54f5f5f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;-------------------------------.html
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{% load xxx %}   #首行
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     
&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; # num=12
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{{ num|filter_multi:2 }} #24
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{{ num|filter_multi:&quot;[22,333,4444]&quot; }}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{% simple_tag_multi 2 5 %}  参数不限,但不能放在if for语句中
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; {% simple_tag_multi num 5 %}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　e.在settings中的INSTALLED_APPS配置当前app，不然django无法找到自定义的simple_tag&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4e8f01d9-bc42-49b8-924d-36eaf59b9211')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_4e8f01d9-bc42-49b8-924d-36eaf59b9211&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4e8f01d9-bc42-49b8-924d-36eaf59b9211&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4e8f01d9-bc42-49b8-924d-36eaf59b9211',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4e8f01d9-bc42-49b8-924d-36eaf59b9211&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;{% if num|filter_multi:30 &amp;gt; 100 %}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    {{ num|filter_multi:30 }}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; {% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注:filter可以用在if等语句后，simple_tag不可以&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　4、extend模板继承&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------include 模板标签&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　{% include %}：该标签允许在(模块中)包含其它的模板的内容。标签的参数是所要包含的模板名称，可以是一个变量，也可以是用单/双引号硬编码的字符串。每当在多个模板中出现相同的代码时，就应该考虑是否要使用{% include %}来减少重复。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;---------extend(继承)模板标签&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在实际应用中，将用Django模板系统来创建整个HTML页面。这就带来一个常见Web开发问题:在整个网站中，如何减少共用页面区域(如站点导航)所引起的重复和冗余代码？&lt;/p&gt;
&lt;p&gt;　　解决该问题的传统做法是使用 服务器端的includes，可以在HTML页面中使用该制定将一个网页嵌入到另一个中。事实上，Django通过上面的{% include %}支持这种方式。但是用Django解决此类问题的首选方法是使用更加优雅的策略----模板继承。&lt;/p&gt;
&lt;p&gt;　　本质上来说，模板继承就是先构造一个基础框架模板，而后在其子模版中对它所包含站点公用部分和定义块进行重载。&lt;/p&gt;
&lt;p&gt;　　第一步：定义基础模板，该框架将由子模板所继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9da16328-03b3-4a16-bfc1-c50f5bbfd984')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_9da16328-03b3-4a16-bfc1-c50f5bbfd984&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9da16328-03b3-4a16-bfc1-c50f5bbfd984&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9da16328-03b3-4a16-bfc1-c50f5bbfd984',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9da16328-03b3-4a16-bfc1-c50f5bbfd984&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{% block title %}{% endblock %}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;My helpful timestamp site&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {% block content %}{% endblock %}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {% block footer %}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Thanks for visiting my site.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {% endblock %}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　以上定义了一个简单的HTML框架文档，将在本站点的所有页面中使用。子模板的作用就是重载、添加或保留那些块的内容。&lt;/p&gt;
&lt;p&gt;　　所有的{% block %}标签告诉模板引擎，子模板可以重载这些部分。每个{% block %}标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bc286385-3887-4c44-8c77-75402a7dd2e7')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_bc286385-3887-4c44-8c77-75402a7dd2e7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc286385-3887-4c44-8c77-75402a7dd2e7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bc286385-3887-4c44-8c77-75402a7dd2e7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bc286385-3887-4c44-8c77-75402a7dd2e7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;{% extends &quot;base.html&quot; %}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;{% block title %}The current time{% endblock %}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;{% block content %}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;It is now {{ current_date }}.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; {% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d39ccc9e-c3a4-466f-9aa0-6a8de5f66311')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_d39ccc9e-c3a4-466f-9aa0-6a8de5f66311&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d39ccc9e-c3a4-466f-9aa0-6a8de5f66311&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d39ccc9e-c3a4-466f-9aa0-6a8de5f66311',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d39ccc9e-c3a4-466f-9aa0-6a8de5f66311&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;{% extends &quot;base.html&quot; %}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;{% block title %}Future time{% endblock %}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;{% block content %}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;In {{ hour_offset }} hour(s), it will be {{ next_time }}.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; {% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　这样一来，每个模板只包含对自己而言独一无二的代码。无需多余的部分。如果想进行站点级的设计修改，仅需修改基础模板即可，所有其他模板都会被修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据库配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、django默认支持sqlite，mysql，oracle，postgresql数据库。&lt;/p&gt;
&lt;p&gt;　　a.sqlite&lt;/p&gt;
&lt;p&gt;　　　　django默认使用sqlite的数据库，默认自带sqlite的数据库驱动，引擎名称:django.db.backends.sqlite3&lt;/p&gt;
&lt;p&gt;　　b.mysql&lt;/p&gt;
&lt;p&gt;　　　　引擎名称:django.db.backends.mysql&lt;/p&gt;
&lt;p&gt;2、mysql驱动程序&lt;/p&gt;
&lt;p&gt;　　a.MySQLdb(mysql python)&lt;/p&gt;
&lt;p&gt;　　b.mysqlclient&lt;/p&gt;
&lt;p&gt;　　c.MySQL&lt;/p&gt;
&lt;p&gt;　　d.PyMySQL(纯python的mysql驱动程序)&lt;/p&gt;
&lt;p&gt;3、在django的项目中会默认使用sqlite数据库，在settings有如下配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; DATABASES =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;books&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;你的数据库名称&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;你的数据库用户名&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;#&lt;/span&gt;&lt;span&gt;你的数据库密码&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;#&lt;/span&gt;&lt;span&gt;你的数据库主机，留空默认为localhost&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PORT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;#&lt;/span&gt;&lt;span&gt;你的数据库端口&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8dbda097-98d7-4ca7-9773-edb88f6ee458')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_8dbda097-98d7-4ca7-9773-edb88f6ee458&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8dbda097-98d7-4ca7-9773-edb88f6ee458&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8dbda097-98d7-4ca7-9773-edb88f6ee458',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8dbda097-98d7-4ca7-9773-edb88f6ee458&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;NAME即数据库的名字，在mysql连接前该数据库必须已经创建，而上面的sqlite数据库下的db.sqlite3则是项目自动创建
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;USER和PASSWORD分别是数据库的用户名和密码。
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;设置完后，再启动我们的Django项目前，我们需要激活我们的mysql。
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;然后，启动项目，会报错：no module named MySQLdb
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;这是因为django默认你导入的驱动是MySQLdb，可是MySQLdb对于py3有很大问题，所以我们需要的驱动是PyMySQL
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;所以，我们只需要找到项目名文件下的__init__,在里面写入：
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;pymysql.install_as_MySQLdb()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 问题解决！
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;注意!!!&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt; ORM(对象关系映射)&lt;/h2&gt;
&lt;p&gt;　　用于实现面向对象编程语言里不同类型系统的数据之间的转换，换言之，就是用面向对象的方式去操作数据库的创建表以及增删改查等操作。&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;p&gt;　　1、ORM使得我们的通用数据库交互变得简单易行，而且完全不用考虑该死的SQL语句。快速开发，由此而来的。&lt;/p&gt;
&lt;p&gt;　　2、可以避免一些新手程序员写SQL语句带来的性能问题。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1、性能有所牺牲，不过现在的各种ORM框架都在尝试各种方法，比如缓存，延迟加载等来减轻这个问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　2、对于个别复杂查询，ORM仍然力不从心，为了解决这个问题，ORM一般也支持写raw sql。&lt;/p&gt;
&lt;p&gt;　　3、通过QuerySet的query属性查询对应操作的sql语句。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; author_obj=models.Author.objects.filter(id=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(author_obj.query)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e8a127c6-62bc-44f0-83e2-3fba5fc4699d')&quot; readability=&quot;57.5&quot;&gt;&lt;img id=&quot;code_img_closed_e8a127c6-62bc-44f0-83e2-3fba5fc4699d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e8a127c6-62bc-44f0-83e2-3fba5fc4699d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e8a127c6-62bc-44f0-83e2-3fba5fc4699d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e8a127c6-62bc-44f0-83e2-3fba5fc4699d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;110&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;1&amp;gt;&lt;span&gt; CharField
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;字符串字段, 用于较短的字符串.&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;CharField 要求必须有一个参数 maxlength, 用于从数据库层和Django校验层限制该字段所允许的最大字符数.&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &amp;lt;2&amp;gt;&lt;span&gt; IntegerField
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用于保存一个整数.&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &amp;lt;3&amp;gt;&lt;span&gt; FloatField
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个浮点数. 必须 提供两个参数:&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数    描述&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; max_digits    总位数(不包括小数点和符号)&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; decimal_places    小数位数&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 举例来说, 要保存最大值为 999 (小数点后保存2位),你要这样定义字段:&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;                 &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; models.FloatField(..., max_digits=5, decimal_places=2)&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 要保存最大值一百万(小数点后保存10位)的话,你要这样定义:&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;                 &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; models.FloatField(..., max_digits=19, decimal_places=10)&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; admin 用一个文本框(&amp;lt;input type=&quot;text&quot;&amp;gt;)表示该字段保存的数据.&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &amp;lt;4&amp;gt;&lt;span&gt; AutoField
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个 IntegerField, 添加记录时它会自动增长. 你通常不需要直接使用这个字段; &lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自定义一个主键：my_id=models.AutoField(primary_key=True)&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果你不指定主键的话,系统会自动添加一个主键字段到你的 model.&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; &amp;lt;5&amp;gt;&lt;span&gt; BooleanField
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; A true/false field. admin 用 checkbox 来表示此类字段.&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt; &amp;lt;6&amp;gt;&lt;span&gt; TextField
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个容量很大的文本字段.&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; admin 用一个 &amp;lt;textarea&amp;gt; (文本区域)表示该字段数据.(一个多行编辑框).&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &amp;lt;7&amp;gt;&lt;span&gt; EmailField
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个带有检查Email合法性的 CharField,不接受 maxlength 参数.&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; 
&lt;span&gt; 37&lt;/span&gt; &amp;lt;8&amp;gt;&lt;span&gt; DateField
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个日期字段. 共有下列额外的可选参数:&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Argument    描述&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; auto_now    当对象被保存时,自动将该字段的值设置为当前时间.通常用于表示 &quot;last-modified&quot; 时间戳.&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; auto_now_add    当对象首次被创建时,自动将该字段的值设置为当前时间.通常用于表示对象创建时间.&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;（仅仅在admin中有意义...)&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt; &amp;lt;9&amp;gt;&lt;span&gt; DateTimeField
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  一个日期时间字段. 类似 DateField 支持同样的附加选项.&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt; &amp;lt;10&amp;gt;&lt;span&gt; ImageField
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 类似 FileField, 不过要校验上传对象是否是一个合法图片.#它有两个可选参数:height_field和width_field,&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果提供这两个参数,则图片将按提供的高度和宽度规格保存.     &lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &amp;lt;11&amp;gt;&lt;span&gt; FileField
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个文件上传字段.&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;要求一个必须有的参数: upload_to, 一个用于保存上载文件的本地文件系统路径. 这个路径必须包含 strftime #formatting, &lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;该格式将被上载文件的 date/time &lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;替换(so that uploaded files don't fill up the given directory).&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; admin 用一个&amp;lt;input type=&quot;file&quot;&amp;gt;部件表示该字段保存的数据(一个文件上传部件) .&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;注意：在一个 model 中使用 FileField 或 ImageField 需要以下步骤:&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;（1）在你的 settings 文件中, 定义一个完整路径给 MEDIA_ROOT 以便让 Django在此处保存上传文件. &lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; (出于性能考虑,这些文件并不保存到数据库.) 定义MEDIA_URL 作为该目录的公共 URL. 要确保该目录对 &lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  WEB服务器用户帐号是可写的.&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;（2） 在你的 model 中添加 FileField 或 ImageField, 并确保定义了 upload_to 选项,以告诉 Django&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用 MEDIA_ROOT 的哪个子目录保存上传文件.你的数据库中要保存的只是文件的路径(相对于 MEDIA_ROOT). &lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 出于习惯你一定很想使用 Django 提供的 get_&amp;lt;#fieldname&amp;gt;_url 函数.举例来说,如果你的 ImageField &lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 叫作 mug_shot, 你就可以在模板中以 {{ object.#get_mug_shot_url }} 这样的方式得到图像的绝对路径.&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt; &amp;lt;12&amp;gt;&lt;span&gt; URLField
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于保存 URL. 若 verify_exists 参数为 True (默认), 给定的 URL 会预先检查是否存在( 即URL是否被有效装入且&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 没有返回404响应).&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; admin 用一个 &amp;lt;input type=&quot;text&quot;&amp;gt; 文本框表示该字段保存的数据(一个单行编辑框)&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; &amp;lt;13&amp;gt;&lt;span&gt; NullBooleanField
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 类似 BooleanField, 不过允许 NULL 作为其中一个选项. 推荐使用这个字段而不要用 BooleanField 加 null=True 选项&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; admin 用一个选择框 &amp;lt;select&amp;gt; (三个可选择的值: &quot;Unknown&quot;, &quot;Yes&quot; 和 &quot;No&quot; ) 来表示这种字段数据.&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt; &amp;lt;14&amp;gt;&lt;span&gt; SlugField
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; &quot;Slug&quot; 是一个报纸术语. slug 是某个东西的小小标记(短签), 只包含字母,数字,下划线和连字符.#它们通常用于URLs&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 若你使用 Django 开发版本,你可以指定 maxlength. 若 maxlength 未指定, Django 会使用默认长度: 50.  #在&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 以前的 Django 版本,没有任何办法改变50 这个长度.&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这暗示了 db_index=True.&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 它接受一个额外的参数: prepopulate_from, which is a list of fields from which to auto-#populate &lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; the slug, via JavaScript,in the object's admin form: models.SlugField&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; (prepopulate_from=(&quot;pre_name&quot;, &quot;name&quot;))prepopulate_from 不接受 DateTimeFields.&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt; &amp;lt;13&amp;gt;&lt;span&gt; XMLField
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;一个校验值是否为合法XML的 TextField,必须提供参数: schema_path, 它是一个用来校验文本的 RelaxNG schema #的文件系统路径.&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt; &amp;lt;14&amp;gt;&lt;span&gt; FilePathField
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可选项目为某个特定目录下的文件名. 支持三个特殊的参数, 其中第一个是必须提供的.&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数    描述&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; path    必需参数. 一个目录的绝对文件系统路径. FilePathField 据此得到可选项目. &lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Example: &quot;/home/images&quot;.&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; match    可选参数. 一个正则表达式, 作为一个字符串, FilePathField 将使用它过滤文件名.  &lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注意这个正则表达式只会应用到 base filename 而不是&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 路径全名. Example: &quot;foo.*\.txt^&quot;, 将匹配文件 foo23.txt 却不匹配 bar.txt 或 foo23.gif.&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; recursive可选参数.要么 True 要么 False. 默认值是 False. 是否包括 path 下面的全部子目录.&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这三个参数可以同时使用.&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; match 仅应用于 base filename, 而不是路径全名. 那么,这个例子:&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; FilePathField(path=&quot;/home/images&quot;, match=&quot;foo.*&quot;, recursive=True)&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ...会匹配 /home/images/foo.gif 而不匹配 /home/images/foo/bar.gif&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; &amp;lt;15&amp;gt;&lt;span&gt; IPAddressField
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个字符串形式的 IP 地址, (i.e. &quot;24.124.1.30&quot;).&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt; &amp;lt;16&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; CommaSeparatedIntegerField&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于存放逗号分隔的整数值. 类似 CharField, 必须要有maxlength参数.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;模型常用的字段类型参数&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f646cc53-2977-401a-8e96-71f1f30f4cff')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_f646cc53-2977-401a-8e96-71f1f30f4cff&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f646cc53-2977-401a-8e96-71f1f30f4cff&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f646cc53-2977-401a-8e96-71f1f30f4cff',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f646cc53-2977-401a-8e96-71f1f30f4cff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;1&amp;gt;&lt;span&gt; null ： 数据库中字段是否可以为空
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &amp;lt;2&amp;gt;&lt;span&gt; blank： django的 Admin 中添加数据时是否可允许空值
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;3&amp;gt;&lt;span&gt; default：设定缺省值
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;4&amp;gt;&lt;span&gt; editable：如果为假，admin模式下将不能改写。缺省为真
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;5&amp;gt;&lt;span&gt; primary_key：设置主键，如果没有设置django创建表时会自动加上：
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         id = meta.AutoField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, primary_key=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         primary_key=True implies blank=False, null=False &lt;span&gt;and&lt;/span&gt; unique=&lt;span&gt;True. Only one
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         primary key &lt;span&gt;is&lt;/span&gt;&lt;span&gt; allowed on an object.
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &amp;lt;6&amp;gt;&lt;span&gt; unique：数据唯一
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &amp;lt;7&amp;gt;&lt;span&gt; verbose_name　　Admin中字段的显示名称
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &amp;lt;8&amp;gt;&lt;span&gt; validator_list：有效性检查。非有效产生 django.core.validators.ValidationError 错误
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &amp;lt;9&amp;gt;&lt;span&gt; db_column，db_index 如果为真将为此字段创建索引
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &amp;lt;10&amp;gt;&lt;span&gt;choices：一个用来选择值的2维元组。第一个值是实际存储的值，第二个用来方便进行选择。
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 如SEX_CHOICES= (( ‘F’,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Female’),(‘M’,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Male’),)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 gender = models.CharField(max_length=2,choices = SEX_CHOICES)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Field重要参数&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('05f93d05-4753-4af8-8731-39777a3ea351')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_05f93d05-4753-4af8-8731-39777a3ea351&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_05f93d05-4753-4af8-8731-39777a3ea351&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('05f93d05-4753-4af8-8731-39777a3ea351',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_05f93d05-4753-4af8-8731-39777a3ea351&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,HttpResponse
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; app01.models &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your views here.&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(req):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; render(req,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; addbook(req):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; b = Book(name=&quot;python基础&quot;, price=99, author=&quot;alex&quot;, pub_date=&quot;2019-03-30&quot;)&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; b.save()&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     Book.objects.create(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, price=99, author=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, pub_date=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2019-03-30&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;添加成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;表单的添加--&amp;gt; views.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('05be45c6-0e52-4596-8ba3-0bcd6323908f')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_05be45c6-0e52-4596-8ba3-0bcd6323908f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_05be45c6-0e52-4596-8ba3-0bcd6323908f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('05be45c6-0e52-4596-8ba3-0bcd6323908f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_05be45c6-0e52-4596-8ba3-0bcd6323908f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,HttpResponse
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; app01.models &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your views here.&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(req):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; render(req, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; update(req):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Book.objects.filter(name=&quot;linux&quot;).update(price=199)&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     b = Book.objects.get(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     b.price = 299
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    b.save()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注：update是QuerySet对象的方法，get返回的是一个model对象，它没有update方法，而filter返回的是一个QuerySet对象(filter里面的条件可能有多个条件符合)&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 若想查看sql语句，需要在settings中加上日志&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; LOGGING = {&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'version': 1,&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'disable_existing_loggers': False,&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'handlers': {&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         'console': {&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'level': 'DEBUG',&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'class': 'logging.StreamHandler',&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         },&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     },&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'loggers': {&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         'django.db.backends': {&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'handlers': ['console'],&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'propagate': True,&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'level': 'DEBUG',&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         },&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;表单的修改--&amp;gt;views.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('32f28505-5513-4379-a79f-4426946ea763')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_32f28505-5513-4379-a79f-4426946ea763&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_32f28505-5513-4379-a79f-4426946ea763&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('32f28505-5513-4379-a79f-4426946ea763',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_32f28505-5513-4379-a79f-4426946ea763&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,HttpResponse
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; app01.models &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your views here.&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(req):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; render(req, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; delete(req):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     Book.objects.filter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).delete()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;表单的删除--&amp;gt;views.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('05d5b688-eaea-401a-890a-1c31ca991178')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_05d5b688-eaea-401a-890a-1c31ca991178&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_05d5b688-eaea-401a-890a-1c31ca991178&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('05d5b688-eaea-401a-890a-1c31ca991178',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_05d5b688-eaea-401a-890a-1c31ca991178&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询相关API：&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;1&amp;gt;filter(**kwargs):      它包含了与所给筛选条件相匹配的对象&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;2&amp;gt;all():                 查询所有结果&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;3&amp;gt;get(**kwargs):         返回与所给筛选条件相匹配的对象，返回结果有且只有一个，如果符合筛选条件的对象超过一个或者没有都会抛出错误。&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;-----------下面的方法都是对查询的结果再进行处理:比如 objects.filter.values()--------&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;4&amp;gt;values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列 model的实例化对象，而是一个可迭代的字典序列&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                                      
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;5&amp;gt;exclude(**kwargs):     它包含了与所给筛选条件不匹配的对象&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;6&amp;gt;order_by(*field):      对查询结果排序&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;7&amp;gt;reverse():             对查询结果反向排序&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;8&amp;gt;distinct():            从返回结果中剔除重复纪录&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;9&amp;gt;values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;10&amp;gt;count():              返回数据库中匹配查询(QuerySet)的对象数量。&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; &amp;lt;11&amp;gt;first():               返回第一条记录&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; &amp;lt;12&amp;gt;last():                返回最后一条记录&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  &amp;lt;13&amp;gt;exists():             如果QuerySet包含数据，就返回True，否则返回False。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;表单的查询--&amp;gt;查询API&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('04d8cd7a-3475-4391-847e-839ca4768b72')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_04d8cd7a-3475-4391-847e-839ca4768b72&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_04d8cd7a-3475-4391-847e-839ca4768b72&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('04d8cd7a-3475-4391-847e-839ca4768b72',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_04d8cd7a-3475-4391-847e-839ca4768b72&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;扩展查询,有时候DJANGO的查询API不能方便的设置查询条件，提供了另外的扩展查询方法extra:&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;extra(select=None, where=None, params=None, tables=None,order_by=None, select_params=None&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; (1)  Entry.objects.extra(select={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_recent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pub_date &amp;gt; '2006-01-01'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; (2&lt;span&gt;)  Blog.objects.extra(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         select=SortedDict([(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]),
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         select_params=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; (3)  q = Entry.objects.extra(select={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_recent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pub_date &amp;gt; '2006-01-01'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      q = q.extra(order_by = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-is_recent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; (4)  Entry.objects.extra(where=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;headline=%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], params=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Lennon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;表单的查询--&amp;gt;补充&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8f1ecb51-c77a-4318-a6d8-590944703935')&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_8f1ecb51-c77a-4318-a6d8-590944703935&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8f1ecb51-c77a-4318-a6d8-590944703935&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8f1ecb51-c77a-4318-a6d8-590944703935',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8f1ecb51-c77a-4318-a6d8-590944703935&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,HttpResponse
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; app01.models &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your views here.&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(req):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; render(req, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; addbook(req):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; b = Book(name=&quot;python基础&quot;, price=99, author=&quot;alex&quot;, pub_date=&quot;2019-03-30&quot;)&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; b.save()&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     Book.objects.create(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, price=99, author=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, pub_date=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2019-03-30&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;添加成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; update(req):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Book.objects.filter(name=&quot;linux&quot;).update(price=199)&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     b = Book.objects.get(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     b.price = 299
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    b.save()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注：update是QuerySet对象的方法，get返回的是一个model对象，它没有update方法，而filter返回的是一个QuerySet对象(filter里面的条件可能有多个条件符合)&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 若想查看sql语句，需要在settings中加上日志&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; LOGGING = {&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'version': 1,&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'disable_existing_loggers': False,&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'handlers': {&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         'console': {&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'level': 'DEBUG',&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'class': 'logging.StreamHandler',&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         },&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     },&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     'loggers': {&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         'django.db.backends': {&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'handlers': ['console'],&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'propagate': True,&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;             'level': 'DEBUG',&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         },&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; delete(req):
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     Book.objects.filter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).delete()
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; select(req):
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.all()&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(book_list[0])&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;     book_list = Book.objects.filter(id=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.all()[:3]&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.all().first()&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.all().last()&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.get(id=2)  # 只能取一条记录时才不会报错&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.filter(author=&quot;alex&quot;).values(&quot;name&quot;)&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.filter(author=&quot;alex&quot;).values_list(&quot;name&quot;)&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.exclude(author=&quot;alex&quot;).values(&quot;name&quot;)&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.filter(author=&quot;alex&quot;).values(&quot;name&quot;).distinct()&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; book_list = Book.objects.filter(author=&quot;alex&quot;).values(&quot;name&quot;).distinct().count()&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; render(req, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;book_list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: book_list})
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5aa39fb3-2696-4e20-9080-db6aee9c783f')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_5aa39fb3-2696-4e20-9080-db6aee9c783f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5aa39fb3-2696-4e20-9080-db6aee9c783f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5aa39fb3-2696-4e20-9080-db6aee9c783f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5aa39fb3-2696-4e20-9080-db6aee9c783f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Django的queryset是惰性的
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     Django的queryset对应于数据库的若干记录（row），通过可选的查询来过滤。例如，下面的代码会得
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     到数据库中名字为‘Dave’的所有的人:person_set = Person.objects.filter(first_name=&quot;Dave&quot;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     上面的代码并没有运行任何的数据库查询。你可以使用person_set，给它加上一些过滤条件，或者将它传给某个函数，
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     这些操作都不会发送给数据库。这是对的，因为数据库查询是显著影响web应用性能的因素之一。
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;要真正从数据库获得数据，你可以遍历queryset或者使用if queryset,总之你用到数据时就会执行sql.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;   为了验证这些,需要在settings里加入 LOGGING(验证方式)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        obj=models.Book.objects.filter(id=3)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        # for i in obj:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        #     print(i)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        # if obj:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        #     print(&quot;ok&quot;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;queryset是具有cache的
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     当你遍历queryset时，所有匹配的记录会从数据库获取，然后转换成Django的model。这被称为执行
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    （evaluation）.这些model会保存在queryset内置的cache中，这样如果你再次遍历这个queryset，
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;     你不需要重复运行通用的查询。
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        obj=models.Book.objects.filter(id=3)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        # for i in obj:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        #     print(i)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                          ## models.Book.objects.filter(id=3).update(title=&quot;GO&quot;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                          ## obj_new=models.Book.objects.filter(id=3)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        # for i in obj:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        #     print(i)   #LOGGING只会打印一次
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;     简单的使用if语句进行判断也会完全执行整个queryset并且把数据放入cache，虽然你并不需要这些
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;     数据！为了避免这个，可以用exists()方法来检查是否有数据：
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            obj = Book.objects.filter(id=4)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            #  exists()的检查可以避免数据放入queryset的cache。
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            if obj.exists():
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                print(&quot;hello world!&quot;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;当queryset非常巨大时，cache会成为问题
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;     处理成千上万的记录时，将它们一次装入内存是很浪费的。更糟糕的是，巨大的queryset可能会锁住系统
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;     进程，让你的程序濒临崩溃。要避免在遍历数据的同时产生queryset cache，可以使用iterator()方法
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;     来获取数据，处理完数据就将其丢弃。
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        objs = Book.objects.all().iterator()
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        # iterator()可以一次只从数据库获取少量数据，这样可以节省内存
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        for obj in objs:
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            print(obj.name)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        #BUT,再次遍历没有打印,因为迭代器已经在上一次遍历(next)到最后一次了,没得遍历了
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        for obj in objs:
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            print(obj.name)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;     #当然，使用iterator()方法来防止生成cache，意味着遍历同一个queryset时会重复执行查询。所以使
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;     #用iterator()的时候要当心，确保你的代码在操作一个大的queryset时没有重复执行查询
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;总结:
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    queryset的cache是用于减少程序对数据库的查询，在通常的使用下会保证只有在需要的时候才会查询数据库。
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;使用exists()和iterator()方法可以优化程序对内存的使用。不过，由于它们并不会生成queryset cache，可能
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 会造成额外的数据库查询。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;QuerySet的特性&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d17440a2-e997-4578-a594-256cd8fc8c31')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_d17440a2-e997-4578-a594-256cd8fc8c31&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d17440a2-e997-4578-a594-256cd8fc8c31&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d17440a2-e997-4578-a594-256cd8fc8c31',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d17440a2-e997-4578-a594-256cd8fc8c31&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from django.db.models import Avg,Min,Sum,Max
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;从整个查询集生成统计值。比如，你想要计算所有在售书的平均价钱。Django的查询语法提供了一种方式描述所有
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;图书的集合。
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; Book.objects.all().aggregate(Avg('price'))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{'price__avg': 34.35}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;aggregate()子句的参数描述了我们想要计算的聚合值，在这个例子中，是Book模型中price字段的平均值
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;aggregate()是QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;一个名称，可以向聚合子句提供它:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; Book.objects.aggregate(average_price=Avg('price'))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;{'average_price': 34.35}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;如果你也想知道所有图书价格的最大值和最小值，可以这样查询：
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;gt;&amp;gt; Book.objects.aggregate(Avg('price'), Max('price'), Min('price'))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; {'price__avg': 34.35, 'price__max': Decimal('81.20'), 'price__min': Decimal('12.99')}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;聚合查询和分组查询aggregate(*args,**kwargs)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8f7c491a-f3ad-44c9-ac0e-4adee2942c50')&quot; readability=&quot;44.5&quot;&gt;&lt;img id=&quot;code_img_closed_8f7c491a-f3ad-44c9-ac0e-4adee2942c50&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8f7c491a-f3ad-44c9-ac0e-4adee2942c50&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8f7c491a-f3ad-44c9-ac0e-4adee2942c50',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8f7c491a-f3ad-44c9-ac0e-4adee2942c50&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# F 使用查询条件的值,专门取对象中某列值的操作
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    # from django.db.models import F
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    # models.Tb1.objects.update(num=F('num')+1)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;# Q 构建搜索条件
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    from django.db.models import Q
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    #1 Q对象(django.db.models.Q)可以对关键字参数进行封装，从而更好地应用多个查询
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    q1=models.Book.objects.filter(Q(title__startswith='P')).all()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     print(q1)#[&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Book: &lt;/span&gt;&lt;span&gt;Python&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;, &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Book: &lt;/span&gt;&lt;span&gt;Perl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    # 2、可以组合使用&amp;amp;,|操作符，当一个操作符是用于两个Q的对象,它产生一个新的Q对象。
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    Q(title__startswith='P') | Q(title__startswith='J')
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    # 3、Q对象可以用~操作符放在前面表示否定，也可允许否定与不否定形式的组合
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    Q(title__startswith='P') | ~Q(pub_date__year=2005)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    # 4、应用范围：
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    # Each lookup function that takes keyword-arguments (e.g. filter(),
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    #  exclude(), get()) can also be passed one or more Q objects as
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    # positional (not-named) arguments. If you provide multiple Q object
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    # arguments to a lookup function, the arguments will be “AND”ed
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    # together. For example:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    Book.objects.get(
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        Q(title__startswith='P'),
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    #sql:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    # SELECT * from polls WHERE question LIKE 'P%'
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    #     AND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    # import datetime
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    # e=datetime.date(2005,5,6)  #2005-05-06
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    # 5、Q对象可以与关键字参数查询一起使用，不过一定要把Q对象放在关键字参数查询的前面。
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    # 正确：
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    Book.objects.get(
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        title__startswith='P')
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    # 错误：
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    Book.objects.get(
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        question__startswith='P',
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;F查询和Q查询&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4b651b2f-3da6-4f7f-b889-26b5a4b71b4e')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_4b651b2f-3da6-4f7f-b889-26b5a4b71b4e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4b651b2f-3da6-4f7f-b889-26b5a4b71b4e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4b651b2f-3da6-4f7f-b889-26b5a4b71b4e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4b651b2f-3da6-4f7f-b889-26b5a4b71b4e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;python manage.py makemigrations
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;创建表&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7f44d883-b964-4836-8b5d-f7aa6033227c')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_7f44d883-b964-4836-8b5d-f7aa6033227c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7f44d883-b964-4836-8b5d-f7aa6033227c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7f44d883-b964-4836-8b5d-f7aa6033227c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7f44d883-b964-4836-8b5d-f7aa6033227c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; LOGGING =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;disable_existing_loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: False,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.StreamHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;在settings加上日志记录&lt;/span&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注:若创建表失败，请看:https://www.cnblogs.com/chenyanbin/p/10628646.html&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　admin是Django强大功能之一，它能从数据库中读取数据，呈现在页面中，进行管理。默认情况下，它的功能已经非常强大，如果你不需要复杂的功能，它已经够用了，但是有时候，一些特殊的功能还需要定制，比如搜索功能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('90a20c73-fa59-4247-8e6f-bdfab52f7735')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_90a20c73-fa59-4247-8e6f-bdfab52f7735&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_90a20c73-fa59-4247-8e6f-bdfab52f7735&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('90a20c73-fa59-4247-8e6f-bdfab52f7735',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_90a20c73-fa59-4247-8e6f-bdfab52f7735&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;在setting.py中修改以下选项
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; LANGUAGE_CODE = 'en-us'  #LANGUAGE_CODE = 'zh-hans'
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;修改页面字&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8e52206f-71d4-4606-a421-b085b164affb')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_8e52206f-71d4-4606-a421-b085b164affb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8e52206f-71d4-4606-a421-b085b164affb&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8e52206f-71d4-4606-a421-b085b164affb',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8e52206f-71d4-4606-a421-b085b164affb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;1、register
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;admin.site.register(Book,MyAdmin)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;2、register的装饰器
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; @admin.register(Book)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;注册medel类到admin的两种方式&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一些常用的设置技巧&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　• list_display:指定要显示的字段&lt;/p&gt;
&lt;p&gt;　　• search_fields:指定搜索的字段&lt;/p&gt;
&lt;p&gt;　　• list_filter:指定列表过滤器&lt;/p&gt;
&lt;p&gt;　　• ordering:指定排序字段&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from django.contrib import admin
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from app01.models import *
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;# Register your models here.
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;# @admin.register(Book)#-----&amp;gt;单给某个表加一个定制
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class MyAdmin(admin.ModelAdmin):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    list_display = (&quot;title&quot;,&quot;price&quot;,&quot;publisher&quot;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    search_fields = (&quot;title&quot;,&quot;publisher&quot;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    list_filter = (&quot;publisher&quot;,)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    ordering = (&quot;price&quot;,)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    fieldsets =[
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        (None,               {'fields': ['title']}),
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        ('price information', {'fields': ['price',&quot;publisher&quot;], 'classes': ['collapse']}),
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    ]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;admin.site.register(Book,MyAdmin)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;admin.site.register(Publish)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; admin.site.register(Author)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考文献：http://www.admin10000.com/document/2220.html&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 15:12:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>一、MVC和MTV模式 MVC：将web应用分为模型(M)，控制器(C)，视图(V)三层；他们之间以一种插件似的，松耦合的方式连接在一起。 模型负责业务对象与数据库的对象(ORM)，视图负责与用户的交</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenyanbin/p/10514121.html</dc:identifier>
</item>
<item>
<title>图像的膨胀与腐蚀——OpenCV与C++的具体实现 - charlee44</title>
<link>http://www.cnblogs.com/charlee44/p/10633890.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/charlee44/p/10633890.html</guid>
<description>&lt;p&gt;膨胀与腐蚀是数学形态学在图像处理中最基础的操作。在笔者之前的文章&lt;a href=&quot;https://www.cnblogs.com/charlee44/p/10582216.html&quot;&gt;《图像的卷积(滤波)运算(一)——图像梯度》&lt;/a&gt;、&lt;a href=&quot;https://www.cnblogs.com/charlee44/p/10592588.html&quot;&gt;《图像的卷积(滤波)运算(二)——高斯滤波》&lt;/a&gt;具体介绍了图像卷积\滤波的具体的概念与操作，图像的膨胀与腐蚀其实也是一种类似的卷积操作。其卷积操作非常简单，对于图像的每个像素，取其一定的邻域，计算最大值/最小值作为新图像对应像素位置的像素值。其中，取最大值就是膨胀，取最小值就是腐蚀。&lt;/p&gt;

&lt;h2 id=&quot;opencv实现&quot;&gt;1) OpenCV实现&lt;/h2&gt;
&lt;p&gt;在OpenCV中实现了图像膨胀的函数dilate()，可以直接调用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Mat img = imread(imagename, IMREAD_GRAYSCALE);
if (img.empty())
{
    fprintf(stderr, &quot;Can not load image %s\n&quot;, imagename);
    return -1;
}

//OpenCV方法
Mat dilated_cv;
dilate(img, dilated_cv, Mat());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;dilate()函数第一个参数表示输入影像，第二个参数表示输出影像，第三个表示一个默认的核，在3X3的范围内寻找最大值。&lt;/p&gt;
&lt;h2 id=&quot;cc实现&quot;&gt;2) C/C++实现&lt;/h2&gt;
&lt;p&gt;在一般的图像处理时，图像读写是由专门的组件进行读取的。这这里仍然使用OpenCV进行读取，以为增加复杂性。而在CV::Mat类中，提供了at()函数访问某一行某一列的像素值，可以通过at()函数去访问每一个像素的领域。&lt;/p&gt;
&lt;p&gt;与之前OpenCV实现的一样，对于每一个像素，遍历以其像素位置为中心的3X3邻域，取最大值作为新图像对应位置的像素值。&lt;br/&gt;其具体实现如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//从文件中读取成灰度图像
const char* imagename = &quot;D:\\Data\\imgDemo\\lena.jpg&quot;;
Mat img = imread(imagename, IMREAD_GRAYSCALE);
if (img.empty())
{
    fprintf(stderr, &quot;Can not load image %s\n&quot;, imagename);
    return -1;
}

//自定义方法
Mat dilated_my;
dilated_my.create(img.cols, img.rows, CV_8UC1);
for (int i = 0; i &amp;lt; img.rows; ++i)
{
    for (int j = 0; j &amp;lt; img.cols; ++j)
    {   
        //uchar minV = 255;
        uchar maxV = 0;
    
        //遍历周围最大像素值
        for (int yi = i-1; yi &amp;lt;= i+1; yi++)
        {
            for (int xi = j-1; xi &amp;lt;= j+1; xi++)
            {                   
                if (xi&amp;lt;0||xi&amp;gt;= img.cols|| yi&amp;lt;0 || yi &amp;gt;= img.rows)
                {
                    continue;
                }                   
                //minV = (std::min&amp;lt;uchar&amp;gt;)(minV, img.at&amp;lt;uchar&amp;gt;(yi, xi));
                maxV = (std::max&amp;lt;uchar&amp;gt;)(maxV, img.at&amp;lt;uchar&amp;gt;(yi, xi));          
            }
        }
        dilated_my.at&amp;lt;uchar&amp;gt;(i, j) = maxV;
    }
}   &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;验证与结果&quot;&gt;3) 验证与结果&lt;/h2&gt;
&lt;p&gt;为了验证自己的算法是否正确，可以通过把两者膨胀的结果通过compare()函数进行比较。compare()函数会逐个比较两者的像素值，如果相同就会返回255（白色），如果不相同就会返回0（黑色）。整个过程的具体实现如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;opencv2\opencv.hpp&amp;gt;

using namespace cv;
using namespace std;

int main()
{
    //从文件中读取成灰度图像
    const char* imagename = &quot;D:\\Data\\imgDemo\\lena.jpg&quot;;
    Mat img = imread(imagename, IMREAD_GRAYSCALE);
    if (img.empty())
    {
        fprintf(stderr, &quot;Can not load image %s\n&quot;, imagename);
        return -1;
    }
    
    //OpenCV方法
    Mat dilated_cv;
    dilate(img, dilated_cv, Mat());

    //自定义方法
    Mat dilated_my;
    dilated_my.create(img.cols, img.rows, CV_8UC1);
    for (int i = 0; i &amp;lt; img.rows; ++i)
    {
        for (int j = 0; j &amp;lt; img.cols; ++j)
        {   
            //uchar minV = 255;
            uchar maxV = 0;
        
            //遍历周围最大像素值
            for (int yi = i-1; yi &amp;lt;= i+1; yi++)
            {
                for (int xi = j-1; xi &amp;lt;= j+1; xi++)
                {                   
                    if (xi&amp;lt;0||xi&amp;gt;= img.cols|| yi&amp;lt;0 || yi &amp;gt;= img.rows)
                    {
                        continue;
                    }                   
                    //minV = (std::min&amp;lt;uchar&amp;gt;)(minV, img.at&amp;lt;uchar&amp;gt;(yi, xi));
                    maxV = (std::max&amp;lt;uchar&amp;gt;)(maxV, img.at&amp;lt;uchar&amp;gt;(yi, xi));          
                }
            }
            dilated_my.at&amp;lt;uchar&amp;gt;(i, j) = maxV;
        }
    }   

    //比较两者的结果
    Mat c;
    compare(dilated_cv, dilated_my, c, CMP_EQ);

    //显示
    imshow(&quot;原始&quot;, img);
    imshow(&quot;膨胀_cv&quot;, dilated_cv);
    imshow(&quot;膨胀_my&quot;, dilated_my);
    imshow(&quot;比较结果&quot;, c);
        
    waitKey();
    
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其运行结果如下所示。可以发现最后的比较结果是一张白色的图像，说明自己实现的算法是正确的。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201903/1000410-20190331225814430-1230604211.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;同样的办法可以实现图像腐蚀的过程，只要将求局部最大值改成局部最小值就可以了。具体实现过程如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;opencv2\opencv.hpp&amp;gt;

using namespace cv;
using namespace std;

int main()
{
    //从文件中读取成灰度图像
    const char* imagename = &quot;D:\\Data\\imgDemo\\lena.jpg&quot;;
    Mat img = imread(imagename, IMREAD_GRAYSCALE);
    if (img.empty())
    {
        fprintf(stderr, &quot;Can not load image %s\n&quot;, imagename);
        return -1;
    }
    
    //OpenCV方法
    Mat eroded_cv;
    erode(img, eroded_cv, Mat());

    //自定义方法
    Mat eroded_my;
    eroded_my.create(img.cols, img.rows, CV_8UC1);
    for (int i = 0; i &amp;lt; img.rows; ++i)
    {
        for (int j = 0; j &amp;lt; img.cols; ++j)
        {   
            uchar minV = 255;
            //uchar maxV = 0;
        
            //遍历周围最大像素值
            for (int yi = i-1; yi &amp;lt;= i+1; yi++)
            {
                for (int xi = j-1; xi &amp;lt;= j+1; xi++)
                {                   
                    if (xi&amp;lt;0||xi&amp;gt;= img.cols|| yi&amp;lt;0 || yi &amp;gt;= img.rows)
                    {
                        continue;
                    }                   
                    minV = (std::min&amp;lt;uchar&amp;gt;)(minV, img.at&amp;lt;uchar&amp;gt;(yi, xi));
                    //maxV = (std::max&amp;lt;uchar&amp;gt;)(maxV, img.at&amp;lt;uchar&amp;gt;(yi, xi));            
                }
            }
            eroded_my.at&amp;lt;uchar&amp;gt;(i, j) = minV;
        }
    }   

    //比较两者的结果
    Mat c;
    compare(eroded_cv, eroded_my, c, CMP_EQ);

    //显示
    imshow(&quot;原始&quot;, img);
    imshow(&quot;膨胀_cv&quot;, eroded_cv);
    imshow(&quot;膨胀_my&quot;, eroded_my);
    imshow(&quot;比较结果&quot;, c);
        
    waitKey();
    
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其运行结果如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201903/1000410-20190331225831827-1211258463.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 15:01:00 +0000</pubDate>
<dc:creator>charlee44</dc:creator>
<og:description>分别用OpenCV和自己的算法简要介绍了图像的膨胀与腐蚀的具体实现过程。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/charlee44/p/10633890.html</dc:identifier>
</item>
<item>
<title>Docker - 容器部署 Consul 集群 - 阿凌</title>
<link>http://www.cnblogs.com/lfzm/p/10633595.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lfzm/p/10633595.html</guid>
<description>&lt;h2 id=&quot;说明&quot;&gt;说明&lt;/h2&gt;
&lt;p&gt;本文主要介绍怎么使用 &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; 在 &lt;code&gt;Linux&lt;/code&gt; 环境部署 &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; 集群，如果你对 Docker 不了解的同学，请先学习一下 Docker。推荐一本学习 Docker 在线书籍 ：&lt;a href=&quot;https://docker_practice.gitee.io&quot;&gt;【Docker入门到实践】&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;本文介绍 Consul 部署已经在准备好 Docker 环境好前提下开始的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CentOS 7.3&lt;/li&gt;
&lt;li&gt;Docker CE 18.09.2&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/aqa510415008/frx5k8qbkxx4z6qtithmeowp/image_1d78seg768pbqmr1le6on71p0h19.png&quot; alt=&quot;image_1d78seg768pbqmr1le6on71p0h19.png-172.3kB&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;了解-consul&quot;&gt;了解 &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; 是一个支持多数据中心分布式高可用的 &lt;code&gt;服务发现&lt;/code&gt; 和 &lt;code&gt;配置共享&lt;/code&gt; 的服务软件,由 &lt;code&gt;HashiCorp&lt;/code&gt; 公司用 &lt;code&gt;Go&lt;/code&gt; 语言开发, 基于 &lt;code&gt;Mozilla Public License 2.0&lt;/code&gt; 的协议进行开源。 Consul 支持 &lt;code&gt;健康检查&lt;/code&gt;，并允许 &lt;code&gt;HTTP&lt;/code&gt; 、&lt;code&gt;GRPC&lt;/code&gt; 和 &lt;code&gt;DNS&lt;/code&gt; 协议调用 API 存储键值对.&lt;br/&gt;命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.&lt;br/&gt;一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.&lt;/p&gt;
&lt;h3 id=&quot;consul-使用场景&quot;&gt;Consul 使用场景&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Docker&lt;/code&gt; 实例的注册与配置共享&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Coreos&lt;/code&gt; 实例的注册与配置共享&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SaaS&lt;/code&gt; 应用的配置共享、服务发现和健康检查。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vitess&lt;/code&gt; 集群&lt;/li&gt;
&lt;li&gt;与 confd 服务集成，动态生成 nginx 和 haproxy 配置文件&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;consul-优势&quot;&gt;Consul 优势&lt;/h3&gt;
&lt;p&gt;市面现在有很多类似的软件比如：&lt;code&gt;zookeeper&lt;/code&gt; 、&lt;code&gt;Etcd&lt;/code&gt;、&lt;code&gt;doozerd&lt;/code&gt;、&lt;code&gt;eureka&lt;/code&gt;，Consul 相比这些软件有什么优势呢？&lt;br/&gt;官方出了相比较这些软件区别的一篇 &lt;a href=&quot;https://www.consul.io/intro/vs/zookeeper.html&quot;&gt;Consul vs. ZooKeeper，doozerd，etcd&lt;/a&gt; 文章。&lt;/p&gt;
&lt;p&gt;下面总结一下 Consul 的优势有那几点：&lt;/p&gt;
&lt;ul readability=&quot;6.9616438356164&quot;&gt;&lt;li readability=&quot;2.9205298013245&quot;&gt;
&lt;p&gt;使用 &lt;a href=&quot;https://www.jdon.com/artichect/raft.html&quot;&gt;&lt;code&gt;Raft&lt;/code&gt;&lt;/a&gt; 算法来保证一致性, 比复杂的 &lt;code&gt;Paxos&lt;/code&gt; 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;支持 &lt;code&gt;多数据中心&lt;/code&gt;，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障，而其部署则需要考虑网络延迟，分片等情况等. zookeeper 和 etcd 均不提供多数据中心功能的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支持 &lt;code&gt;健康检查&lt;/code&gt;。 etcd 不提供此功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;支持 &lt;code&gt;HTTP&lt;/code&gt;、&lt;code&gt;DNS&lt;/code&gt; 和 &lt;code&gt;GPRS&lt;/code&gt; 协议接口。 zookeeper 的集成较为复杂，etcd 只支持 http 协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;官方提供 &lt;code&gt;WEB管理界面&lt;/code&gt;，etcd 无此功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;综合比较, Consul 作为服务注册和配置管理的新星，比较值得关注和研究。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;consul-中的概念&quot;&gt;Consul 中的概念&lt;/h3&gt;
&lt;p&gt;&lt;span id=&quot;Consul概念&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://static.zybuluo.com/aqa510415008/umgbi0d4a9749fz53uzgzuuc/image_1d78u4elv18glqtipc18f1aiv9.png&quot; alt=&quot;image_1d78u4elv18glqtipc18f1aiv9.png-474.2kB&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;6.571752265861&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;：表示 Consul 客户端模式，是 Consul 节点的一种模式，所有注册到 Client 节点的服务会被转发到 Server 。本身无状态不持久化如何数据。Client 通过 HTTP、DNS、GRPC 接口请求转发给局域网内的服务端集群。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;：表示 Consul 的服务端模式， Server 功能和 Client 都一样，不同的是 Server 持久化数据到本地。在局域网内与本地 Client 通讯，通过广域网与其他数据中心通讯。每个数据中心的 Server 数量推荐为 3 个或是 5 个。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.9765395894428&quot;&gt;
&lt;p&gt;&lt;strong&gt;Server-Leader&lt;/strong&gt; ：表示这个 Server 是它们的老大，它和其它 Server 不一样的一点是，它需要负责同步注册的信息给其它的 Server 节点，同时也要负责各个节点的健康监测。如果 Leader 宕机了，通数据中心的所有 Server 内部会使用 &lt;a href=&quot;https://www.jdon.com/artichect/raft.html&quot;&gt;&lt;code&gt;Raft&lt;/code&gt;&lt;/a&gt; 算法来在其中选取一个 Leader 出来。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Agent&lt;/strong&gt; ：Agent 是 Consul 的核心进程，Agent 的工作是维护成员关系信息、注册服务、健康检查、响应查询等等。Consul 集群的每一个节点都必须运行 agent 进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.66521739130435&quot;&gt;
&lt;p&gt;&lt;strong&gt;其它&lt;/strong&gt;&lt;br/&gt;需要了解 Consul 原理、的通信方式、协议信息、算法、帮助文档等。有兴趣可以前往官方查看 &lt;a href=&quot;https://www.consul.io/docs/agent/basics.html&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;1.1309523809524&quot;&gt;
&lt;p&gt;文档：&lt;a href=&quot;https://www.consul.io/docs/agent/basics.html&quot; class=&quot;uri&quot;&gt;https://www.consul.io/docs/agent/basics.html&lt;/a&gt;&lt;br/&gt;官网：&lt;a href=&quot;https://www.consul.io&quot; class=&quot;uri&quot;&gt;https://www.consul.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;h3 id=&quot;准备-consul-镜像&quot;&gt;准备 Consul 镜像&lt;/h3&gt;
&lt;p&gt;拉取 Consul 镜像到本地，我本次讲解的是 Consul &lt;code&gt;V1.4.4&lt;/code&gt; 版本。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ docker pull consul:1.4.4
  1.4.4: Pulling from library/consul
  5d20c808ce19: Pull complete
  ded83912d17e: Pull complete
  a7fbb7ddd3ea: Pull complete
  6cdcd1f7ea42: Pull complete
  a0ea9ef64acd: Pull complete
  267ee3fb0b30: Pull complete
  Digest: sha256:9113b1043308b4193d2be8516c64fcdc2e9740e3c626be058076de697c407be7
  Status: Downloaded newer image for consul:1.4.4&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Consul 镜像提供了几个个常用环境变量&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;CONSUL_CLIENT_INTERFACE&lt;/code&gt; ：配置 Consul 的 &lt;code&gt;-client=&amp;lt;interface ip&amp;gt;&lt;/code&gt; 命令参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONSUL_BIND_INTERFACE&lt;/code&gt; ：配置 Consul 的 &lt;code&gt;-bind=&amp;lt;interface ip&amp;gt;&lt;/code&gt; 命令参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONSUL_DATA_DIR&lt;/code&gt; ：配置 Consul 的数据持久化目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONSUL_CONFIG_DIR&lt;/code&gt;：配置 Consul 的配置文件目录。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Consul 镜像的详细说明请前往&lt;a href=&quot;https://github.com/docker-library/docs/tree/master/consul&quot;&gt;官方使用文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;安装单个-consul&quot;&gt;安装单个 Consul&lt;/h3&gt;
&lt;p&gt;先启动一个单机版 Consul，由于单机肯定需要安装 Server 模式的 Consul。&lt;/p&gt;
&lt;h4 id=&quot;启动-consul-和-web-管理器&quot;&gt;启动 Consul 和 Web 管理器&lt;/h4&gt;
&lt;p&gt;我们启动一个命名为 &lt;code&gt;consul_server_1&lt;/code&gt; 的 Docker 容器来运行 Consul ，启动的 Consul 的版本是 &lt;code&gt;1.4.4&lt;/code&gt;。&lt;code&gt;CONSUL_BIND_INTERFACE&lt;/code&gt; 设置为默认桥接网络 &lt;a href=&quot;https://jingyan.baidu.com/article/4d58d54119b9db9dd5e9c047.html&quot;&gt;&lt;code&gt;eth0&lt;/code&gt;&lt;/a&gt; 并且主机上不显示任何服务。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ docker run -d -p 8500:8500 -v /data/consul:/consul/data -e CONSUL_BIND_INTERFACE='eth0' --name=consul_server_1 consul:1.4.4 agent -server -bootstrap -ui -node=1 -client='0.0.0.0'
  9e86237f42d3c2cefab5de0dc9888d2bd4ed3e7a1aa2ca8e1ebc54cef9ea47b7&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;提示：&lt;code&gt;/consul/data&lt;/code&gt; 是 Consul 持久化地方，如果需要持久化那 Dooker 启动时候需要给它指定一个数据卷 &lt;code&gt;-v /data/consul:/consul/data&lt;/code&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;consul-命令简单介绍&quot;&gt;Consul 命令简单介绍&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;agent&lt;/code&gt; : 表示启动 Agent 进程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-server&lt;/code&gt;：表示启动 Consul Server 模式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-client&lt;/code&gt;：表示启动 Consul Cilent 模式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-bootstrap&lt;/code&gt;：表示这个节点是 &lt;code&gt;Server-Leader&lt;/code&gt; ，每个数据中心只能运行一台服务器。技术角度上讲 Leader 是通过 Raft 算法选举的，但是集群第一次启动时需要一个引导 Leader，在引导群集后，建议不要使用此标志。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ui&lt;/code&gt;：表示启动 Web UI 管理器，默认开放端口 &lt;code&gt;8500&lt;/code&gt;，所以上面使用 Docker 命令把 8500 端口对外开放。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-node&lt;/code&gt;：节点的名称，集群中必须是唯一的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-client&lt;/code&gt;：表示 Consul 将绑定客户端接口的地址，&lt;code&gt;0.0.0.0&lt;/code&gt; 表示所有地址都可以访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-join&lt;/code&gt;：表示加入到某一个集群中去。 如：&lt;code&gt;-json=192.168.1.23&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;web-管理器&quot;&gt;Web 管理器&lt;/h4&gt;
&lt;p&gt;上面命令已经启动了 Consul 和 Web 管理器，我们现在打开 Web 管理器来看一下是否启动成功。通过浏览器浏览 &lt;code&gt;Http://{serverIp}:8500&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/aqa510415008/uayc6iil3vnxrqfepq9r9ypz/image_1d79to3v33sr78lgahfmeojr3m.png&quot; alt=&quot;image_1d79to3v33sr78lgahfmeojr3m.png-37.8kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图显示已经启动成功了，启动了一个节点名称为 &lt;code&gt;-node=1&lt;/code&gt; 的节点 ，并且可以通过管理器管理 Node 节点、Key/Value 功能等。&lt;br/&gt;这里就不讲怎么使用 Consul ，我在附件中引用几篇文章你可以去看看，更细化怎么使用可以去查相关资料。&lt;/p&gt;
&lt;h3 id=&quot;组装集群-consul&quot;&gt;组装集群 Consul&lt;/h3&gt;
&lt;p&gt;上面完成了一个单机版的 Consul 部署，下面我们将实现图中的的集群架构 Consul 部署。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/aqa510415008/szbewlyalj38kmi5x3kjg5g6/image_1d793pdkjsujv9n1trud848uf12.png&quot; alt=&quot;image_1d793pdkjsujv9n1trud848uf12.png-215.7kB&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;server-加入集群&quot;&gt;Server 加入集群&lt;/h4&gt;
&lt;p&gt;我们在上面单机版的基础上面来拓展集群，这样可以模拟集群的一步一步发展。下面我将加入二个 Server 模式的 Consul 到集群中，Server 模式在集群中建议是 &lt;code&gt;三个以上&lt;/code&gt;，这样更好的避免因为 Server 的宕机导致整个集群挂掉的风险。&lt;/p&gt;
&lt;ol readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;通过命令查一下当前运行 Consul 集群信息&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ docker exec consul_server_1 consul members
  Node  Address          Status  Type    Build  Protocol  DC   Segment
  1     172.17.0.2:8301  alive   server  1.4.4  2         dc1  &amp;lt;all&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;加入到集群， 命名为 &lt;code&gt;-node=2&lt;/code&gt; 、&lt;code&gt;-node=3&lt;/code&gt;。&lt;br/&gt;上面通过命令获取到引导 Consul 的 Ip 地址 &lt;code&gt;172.17.0.2&lt;/code&gt; ，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// -node=2
$ docker run -d -e CONSUL_BIND_INTERFACE='eth0' --name=consul_server_2 consul:1.4.4 agent -server -node=2  -join='172.17.0.2'
  5d999ade4f96e04b5a1dbbcb69dc117fafa11d450fd17268884b1254971a7450

// -node=3
$ docker run -d -e CONSUL_BIND_INTERFACE='eth0' --name=consul_server_3 consul:1.4.4 agent -server -node=3  -join='172.17.0.2'
  459948e6bd26e2b0b556ac6b4c5593b5dba2e4dc2b79d506d6ba4644f4ab0970&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过 Web 管理器查看是否成功加入集群中&lt;br/&gt;&lt;img src=&quot;http://static.zybuluo.com/aqa510415008/v828ug4xn3e2uqhdh3teiqlk/image_1d79vfuaf1cl9vgpv2jg2r1aqd5a.png&quot; alt=&quot;image_1d79vfuaf1cl9vgpv2jg2r1aqd5a.png-19kB&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;client-加入集群&quot;&gt;Client 加入集群&lt;/h4&gt;
&lt;p&gt;Client 在 Consul 集群中起到了代理 Server 的作用，Client 模式不持久化数据。一般情况每台应用服务器都会安装一个 Client ，这样可以减轻跨服务器访问带来性能损耗。也可以减轻 Server 的请求压力。&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;加入集群&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ docker run -d -e CONSUL_BIND_INTERFACE='eth0' --name=consul_server_4 consul:1.4.4 agent -client -node=4 -join='172.17.0.2' -client='0.0.0.0'
  6e0604490eb49363d28249a5277c03173b258aa55965d70eb5b5438a0a6b7eea

$ docker run -d -e CONSUL_BIND_INTERFACE='eth0' --name=consul_server_5 consul:1.4.4 agent -client -node=5 -join='172.17.0.2' -client='0.0.0.0'
  25e9792c6d5949ba3fcf73432ed2933568726d214d6819ab52d2b6eaa00d7842

$ docker run -d -e CONSUL_BIND_INTERFACE='eth0' --name=consul_server_6 consul:1.4.4 agent -client -node=5 -join='172.17.0.2' -client='0.0.0.0'
  c7333068c1679f8f9e8c8c0be0fcf68f93f85b2c45dd177e4757217bdfa55d7a&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;检查 Client 是否加入集群中&lt;br/&gt;&lt;code&gt;$ docker exec consul_server_1 consul members Node Address Status Type Build Protocol DC Segment 1 172.17.0.2:8301 alive server 1.4.4 2 dc1 &amp;lt;all&amp;gt; 2 172.17.0.3:8301 alive server 1.4.4 2 dc1 &amp;lt;all&amp;gt; 3 172.17.0.4:8301 alive server 1.4.4 2 dc1 &amp;lt;all&amp;gt; 25e9792c6d59 172.17.0.6:8301 alive client 1.4.4 2 dc1 &amp;lt;default&amp;gt; 6e0604490eb4 172.17.0.5:8301 alive client 1.4.4 2 dc1 &amp;lt;default&amp;gt; c7333068c167 172.17.0.7:8301 alive client 1.4.4 2 dc1 &amp;lt;default&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;Docker 部署 Consul 其实很简单，Consul 集群的配置主要是 Consul 的命令需要了解，建议多看看 Consul 的官方文档。&lt;/p&gt;
&lt;h2 id=&quot;引用和附件&quot;&gt;引用和附件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;Consul 原理和使用简介 ： &lt;a href=&quot;https://blog.coding.net/blog/intro-consul?type=hot&quot; class=&quot;uri&quot;&gt;https://blog.coding.net/blog/intro-consul?type=hot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Consul 镜像仓库地址 ：&lt;a href=&quot;https://hub.docker.com//_/consul&quot; class=&quot;uri&quot;&gt;https://hub.docker.com/\_/consul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Consul 镜像使用文档：&lt;a href=&quot;https://github.com/docker-library/docs/tree/master/consul&quot; class=&quot;uri&quot;&gt;https://github.com/docker-library/docs/tree/master/consul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Consul 官方文档 ：&lt;a href=&quot;https://www.consul.io/docs/agent/basics.html&quot; class=&quot;uri&quot;&gt;https://www.consul.io/docs/agent/basics.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用Consul和Registration对Docker容器进行服务发现&lt;br/&gt;&lt;a href=&quot;https://livewyer.io/blog/2015/02/05/service-discovery-docker-containers-using-consul-and-registrator&quot; class=&quot;uri&quot;&gt;https://livewyer.io/blog/2015/02/05/service-discovery-docker-containers-using-consul-and-registrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架&lt;br/&gt;&lt;a href=&quot;http://www.mamicode.com/info-detail-2222200.html&quot; class=&quot;uri&quot;&gt;http://www.mamicode.com/info-detail-2222200.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;.NET Core微服务之基于Consul实现服务治理&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/9124985.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/edisonchou/p/9124985.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code&gt;【版权声明】 
作品来自于长沙.NET技术社区成员【阿凌】，有兴趣了解长沙.NET技术社区详情，请关注公众号【DotNET技术圈】,作品版权归作者和博客园共有，作品采用知识共享署名-非商业性使用-相同方式共享4.0 国际许可协议进行许可。 &lt;/code&gt;
&lt;/pre&gt;

&lt;blockquote readability=&quot;0.84905660377358&quot;&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://www.cnblogs.com/lfzm/p/10633595.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/lfzm/p/10633595.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 31 Mar 2019 14:16:00 +0000</pubDate>
<dc:creator>阿凌</dc:creator>
<og:description>Consul 是一个支持多数据中心分布式高可用的 服务发现 和 配置共享 的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lfzm/p/10633595.html</dc:identifier>
</item>
<item>
<title>【js】高阶函数是个什么？ - 海瑞菌·博客</title>
<link>http://www.cnblogs.com/wuhairui/p/10632596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuhairui/p/10632596.html</guid>
<description>&lt;p&gt;所谓&lt;span&gt;&lt;strong&gt;高阶函数&lt;/strong&gt;&lt;/span&gt;，就是函数中可以传入另一个函数作为参数的函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; 高阶函数(函数){}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;这是一个高阶函数，f是传入的函数作为参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331184701616-1927074091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实高阶函数用的很多。其实平时也用，只是或许有些人并不知道那叫高阶函数。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;js函数可以传入变量，而函数也是一个变量，自然也是可以传递的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;map：&lt;/strong&gt;&lt;/span&gt;一般用于操作数组集合，&lt;span&gt;遍历&lt;/span&gt;操作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331185045219-1712430865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331190343355-92908014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用map(String)可以将数组的元素转字符串化：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是内部对象会变成[object Object]，数组会变成逗号分隔字符串，整个函数也会变成字符串。一般最好只转换基本类型元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331191004065-1951282974.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然也就有了map(Number)，可以将字符串转数字。引用类型直接变成NaN。如果字符串不是纯数字也会变成NaN。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331191346318-1971662045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;reduce：&lt;/span&gt;&lt;/strong&gt;数组元素&lt;span&gt;计算&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如：&lt;span&gt;这是数组求和，将元素全部加起来，相当于1+2+3+4+5。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331191612934-508751929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然也有数组求差，相当于1-2-3-4-5。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331191816504-968894011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;filter：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;筛选&lt;/span&gt;元素用。返回数组元素的&lt;span&gt;判断(boolean)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;如：&lt;span&gt;筛选出数组中的奇数，%2不为0的就是奇数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331215529095-68883716.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;筛选掉空字符串、null、undefined：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331215648673-1285117861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数组去重：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;筛选条件：当前元素位置===数组该元素的第一个位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331215758951-1138627080.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;sort：&lt;/span&gt;&lt;/strong&gt;数组重&lt;span&gt;排序&lt;/span&gt;。返回同一个数组对象。根据&lt;span&gt;ascii码&lt;/span&gt;进行排序。&lt;/p&gt;
&lt;p&gt;x&amp;gt;y：从小到大&lt;/p&gt;
&lt;p&gt;x&amp;lt;y：从大到小&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重排序的数组还是原来的数组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331220004571-1263385357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;英文也可以排序：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331220310823-1132270817.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;中文也可以排序：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所以我的名字是根据ascii排序来的吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/883015/201903/883015-20190331220330902-1816542597.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 31 Mar 2019 14:13:00 +0000</pubDate>
<dc:creator>海瑞菌&amp;#183;博客</dc:creator>
<og:description>所谓高阶函数，就是函数中可以传入另一个函数作为参数的函数。 这是一个高阶函数，f是传入的函数作为参数。 其实高阶函数用的很多。其实平时也用，只是或许有些人并不知道那叫高阶函数。 js函数可以传入变量，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuhairui/p/10632596.html</dc:identifier>
</item>
<item>
<title>Js-函数式编程 - 菜的黑人牙膏</title>
<link>http://www.cnblogs.com/Darlietoothpaste/p/10633550.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Darlietoothpaste/p/10633550.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;JavaScript是一门多范式语言，即可使用OOP（面向对象），也可以使用FP（函数式），由于笔者最近在学习React相关的技术栈，想进一步深入了解其思想，所以学习了一些FP相关的知识点，本文纯属个人的读书笔记，如果有错误，望轻喷且提点。&lt;/p&gt;
&lt;h2 id=&quot;什么是函数式编程&quot;&gt;什么是函数式编程&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;code&gt;函数式编程（英语：functional programming）&lt;/code&gt;或称函数程序设计、泛函编程，是一种&lt;code&gt;编程范式&lt;/code&gt;，它将计算机运算视为函数运算，并且避免使用程序状态以及易变对象。即&lt;code&gt;对过程进行抽象，将数据以输入输出流的方式封装进过程内部&lt;/code&gt;，从而也降低系统的耦合度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么js支持fp&quot;&gt;为什么Js支持FP&lt;/h2&gt;
&lt;p&gt;Js支持FP的一个重要原因在于，在JS中，&lt;code&gt;函数是一等公民&lt;/code&gt;。即你可以像对其他数据类型一样对其进行操作，把他们存在数组里，当作参数传递，赋值给变量...等等。如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const func = () =&amp;gt; {}

// 存储
const a = [func]

// 参数 返回值
const x = (func) =&amp;gt; {
    ......
    ......
    return func
}

x(func)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个特性在编写语言程序时带来了极大的便利，下面的知识及例子都建立在此基础上。&lt;/p&gt;
&lt;h2 id=&quot;纯函数&quot;&gt;纯函数&lt;/h2&gt;
&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;
&lt;p&gt;纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。&lt;br/&gt;副作用包括但不限于：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;打印/log&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;发送一个http请求&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;可变数据&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;DOM查询&lt;br/&gt;简单一句话， 即只要是与函数外部环境发生交互的都是副作用。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;像Js中， slice就是纯函数， 而splice则不是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var xs = [1,2,3,4,5];

// 纯的
xs.slice(0,3);
//=&amp;gt; [1,2,3]

xs.slice(0,3);
//=&amp;gt; [1,2,3]

xs.slice(0,3);
//=&amp;gt; [1,2,3]


// 不纯的
xs.splice(0,3);
//=&amp;gt; [1,2,3]

xs.splice(0,3);
//=&amp;gt; [4,5]

xs.splice(0,3);
//=&amp;gt; []&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;
&lt;p&gt;在React生态中，使用纯函数的例子很常见，如&lt;strong&gt;React Redner函数，Redux的reducer，Redux-saga的声明式effects&lt;/strong&gt;等等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;React Render&lt;/code&gt;&lt;br/&gt;在React中，Render返回了一个JSX表达式，&lt;code&gt;只要输入相同，即可以保证我们拿到同样的输出&lt;/code&gt;（最终结果渲染到DOM上），而&lt;code&gt;内部的封装细节我们不需要关心，只要知道它是没有副作用的&lt;/code&gt;，这在我们开发过程中带来了极大的便利。当我们的程序出问题时（渲染出来与预期不符合），我们只要关心我们的入参是否有问题即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Component extends React.Component {
    render() {
        return (
            &amp;lt;div /&amp;gt;
        )
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Redux的reducer&lt;/code&gt;&lt;br/&gt;Redux的reducer函数要求我们每一次都要&lt;code&gt;返回一个新的state&lt;/code&gt;, 并且在其中不能有任何副作用，只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，&lt;code&gt;单纯执行计算&lt;/code&gt;。这样做可以使得我们很容易的保存了每一次state改变的情况，对于时间旅行这种需求更是天然的亲近。特别是在调试的过程中，我们可以借助插件，&lt;code&gt;任意达到每一个state状态&lt;/code&gt;，能够轻松的捕捉到错误是在哪一个节点出现。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    case ADD_TODO:
      return Object.assign({}, state, {
        todos: [
          ...state.todos,
          {
            text: action.text,
            completed: false
          }
        ]
      })
    default:
      return state
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Redux-sage的声明式effects&lt;/code&gt;&lt;br/&gt;许多时候， 我们会写这样的函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const sendRequest = () =&amp;gt; {
    return axions.post(...)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是一个不纯的函数，因为它包含了副作用，发起了http请求，我们可以这样封装一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const sendRequestReducer = () =&amp;gt; {
    return () =&amp;gt; {
        return axios.post(...)
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ok, 现在是一个纯函数了，正如Redux-saga中的effects一样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import { call } from 'redux-saga/effects'

function* fetchProducts() {
  const products = yield call(Api.fetch, '/products')
  // ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上call不立即执行异步调用，相反，&lt;code&gt;call 创建了一条描述结果的信息&lt;/code&gt;。那么这样做除了增加代码的复杂度，还可以给我们带来什么？参考saga的官方文档就知道了， 答案是测试：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;这些 声明式调用（declarative calls） 的优势是，我们可以通过简单地遍历 Generator 并在 yield 后的成功的值上面做一个 deepEqual 测试， 就能测试 Saga 中所有的逻辑。这是一个真正的好处，因为复杂的异步操作都不再是黑盒，你可以详细地测试操作逻辑，不管它有多么复杂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;import { call } from 'redux-saga/effects'
import Api from '...'

const iterator = fetchProducts()

// expects a call instruction
assert.deepEqual(
  iterator.next().value,
  call(Api.fetch, '/products'),
  &quot;fetchProducts should yield an Effect call(Api.fetch, './products')&quot;
)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;纯函数有着以下的优点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;可缓存性&lt;/code&gt;&lt;br/&gt;首先，纯函数总能够根据输入来做缓存。实现缓存的一种典型方式是 memoize 技术：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var memoize = function(f) {
  var cache = {};

  return function() {
    var arg_str = JSON.stringify(arguments);
    cache[arg_str] = cache[arg_str] || f.apply(f, arguments);
    return cache[arg_str];
  };
};

var squareNumber  = memoize(function(x){ return x*x; });

squareNumber(4);
//=&amp;gt; 16

squareNumber(4); // 从缓存中读取输入值为 4 的结果
//=&amp;gt; 16

squareNumber(5);
//=&amp;gt; 25

squareNumber(5); // 从缓存中读取输入值为 5 的结果
//=&amp;gt; 25&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;可移植性&lt;/code&gt;&lt;br/&gt;纯函数因为不依赖外部环境，所以非常便于移植，你可以在任何地方使用它而不需要附带着引入其他不需要的属性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;可测试性&lt;/code&gt;&lt;br/&gt;如上面提到的Redux reducer和Redux-saga一样， 它对于测试天然亲近。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;并行代码&lt;/code&gt;&lt;br/&gt;我们可以并行运行任意纯函数。因为纯函数根本不需要访问共享的内存，而且根据其定义，纯函数也不会因副作用而进入竞争态（race condition）。&lt;/p&gt;
&lt;h2 id=&quot;柯里化&quot;&gt;柯里化&lt;/h2&gt;
&lt;h3 id=&quot;概念-1&quot;&gt;概念&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把&lt;code&gt;接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;var add = function(x) {
  return function(y) {
    return x + y;
  };
};

var increment = add(1);
var addTen = add(10);

increment(2);
// 3

addTen(2);
// 12&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;例子-1&quot;&gt;例子&lt;/h3&gt;
&lt;p&gt;在Lodash类库中，就有这么一个curry函数来帮助我们处理科里化，关于如何实现一个curry函数，推荐大家参考&lt;a href=&quot;https://www.jianshu.com/p/822c4bfeb8a9&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var abc = function(a, b, c) {
  return [a, b, c];
};
 
var curried = _.curry(abc);
 
curried(1)(2)(3);
// =&amp;gt; [1, 2, 3]
 
curried(1, 2)(3);
// =&amp;gt; [1, 2, 3]
 
curried(1, 2, 3);
// =&amp;gt; [1, 2, 3]
 
// Curried with placeholders.
curried(1)(_, 3)(2);
// =&amp;gt; [1, 2, 3]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;偏函数应用&quot;&gt;偏函数应用&lt;/h3&gt;
&lt;p&gt;偏函数本身与科里化并不相关， 但在日常的编写程序中，或许我们使用更多的是偏函数，所以在这里简单的介绍一下偏函数&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;偏函数应用是&lt;code&gt;找一个函数，固定其中的几个参数值，从而得到一个新的函数&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时候，我们会写一个专门发送http请求的函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const sendRequest = (host, fixPath, path) =&amp;gt; {
    axios.post(`${host}\${fixPath}\{path}`)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是大多数时候， host和fixPath是固定的， 我们不想每次都写一次host和fixPath，但我们又不能写死，因为我们需要sendRequest这个函数是可以移植的，不受环境的约束，那么我们可以这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const sendRequestPart = (path) =&amp;gt; {
    const host = '...'
    const fixPath = '...'
    return sendRequest(host, fixPath, path)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;总结-1&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;科里化和偏函数的&lt;code&gt;主要用途是在组合中&lt;/code&gt;，这一小节主要介绍了他们的使用方法和行为。&lt;/p&gt;
&lt;h2 id=&quot;组合-compose&quot;&gt;组合 compose&lt;/h2&gt;
&lt;p&gt;组合的功能非常强大， 也是函数式编程的一个核心概念， 所谓的&lt;code&gt;对过程进行封装很大程度上就是依赖于组合&lt;/code&gt;。那么什么是组合？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var compose = function(f,g) {
  return function(x) {
    return f(g(x));
  };
};

var toUpperCase = function(x) { return x.toUpperCase(); };
var exclaim = function(x) { return x + '!'; };
var shout = compose(exclaim, toUpperCase);

shout(&quot;send in the clowns&quot;);
//=&amp;gt; &quot;SEND IN THE CLOWNS!&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的compose就是一个最简单的组合函数， 当然组合函数并不限制于传入多少个函数参数，它最后只返回一个函数，我个人更喜欢将它认为&lt;code&gt;像管道一样，将数据经过不同函数的逐渐加工&lt;/code&gt;，最后得到我们想要的结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const testFunc = compose(func1, func2, func3, func4)  
testFunc(...args) &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在js中， 实现compose函数比较容易&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const compose = (...fns) =&amp;gt; {
    return (...args) =&amp;gt; {
        let res = args
        for (let i = fns.length - 1; i &amp;gt; -1; i--) {
            res = fns[i](res)
        }
        return res
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;例子-2&quot;&gt;例子&lt;/h3&gt;
&lt;p&gt;React官方推崇&lt;code&gt;组合优于继承&lt;/code&gt;这个概念，这里选择两个比较典型的例子来看&lt;/p&gt;
&lt;p&gt;&lt;code&gt;React中的高阶组件&lt;/code&gt;&lt;br/&gt;在React中，有许多使用高阶组件的地方，如React-router的withRouter函数，React-redux的connect函数返回的函数，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Navbar 和 Comment都是组件
const NavbarWithRouter = withRouter(Navbar);
const ConnectedComment = connect(commentSelector, commentActions)(Comment);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而由于高阶函数的签名是&lt;code&gt;Component =&amp;gt; Component&lt;/code&gt;。所以我们可以很容易的将他们组合到一起，这也是官方推荐的做法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 不要这样做……
const EnhancedComponent = withRouter(connect(commentSelector)(WrappedComponent))

// ……你可以使用一个函数组合工具
// compose(f, g, h) 和 (...args) =&amp;gt; f(g(h(...args)))是一样的
const enhance = compose(
  // 这些都是单独一个参数的高阶组件
  withRouter,
  connect(commentSelector)
)
const EnhancedComponent = enhance(WrappedComponent)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Redux的compose函数&lt;/code&gt;&lt;br/&gt;Redux的compose函数实现要比上面提到的简洁的多&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export default function compose(...funcs) {
  if (funcs.length === 0) {
    return arg =&amp;gt; arg
  }

  if (funcs.length === 1) {
    return funcs[0]
  }

  return funcs.reduce((a, b) =&amp;gt; (...args) =&amp;gt; a(b(...args)))
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个实现咋看之下有点懵逼， 所以可以拆开来看一下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;composeFn = compose(fn1, fn2, fn3, fn4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么reduce循环运行时， 第一次a就是fn1, b是fn2, 第二次a是(...args) =&amp;gt; fn1(fn2(...args)), b是fn3, 第三次运行的时候则是a是(...args) =&amp;gt; fn1(fn2(fn3(...args))), b是fn4， 最后返回了fn1(fn2(fn3(fn4(...args))))&lt;/p&gt;
&lt;h3 id=&quot;pointfree&quot;&gt;pointfree&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;它的意思是说，函数无须提及将要操作的数据是什么样的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;// 非 pointfree，因为提到了数据：word
var snakeCase = function (word) {
  return word.toLowerCase().replace(/\s+/ig, '_');
};

// pointfree
var snakeCase = compose(replace(/\s+/ig, '_'), toLowerCase);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;pointfree 模式能够帮助我们减少不必要的命名，让代码保持简洁和通用。对函数式代码来说，pointfree 是非常好的石蕊试验，因为它能告诉我们一个函数是否是接受输入返回输出的小函数。比如，while 循环是不能组合的。不过你也要警惕，pointfree 就像是一把双刃剑，有时候也能混淆视听。并非所有的函数式代码都是 pointfree 的，不过这没关系。可以使用它的时候就使用，不能使用的时候就用普通函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;总结-2&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;有了组合， 配合上面提到的科里化和偏函数应用， 可以将程序拆成一个个小函数然后组合起来， 优点已经很明显的呈现出来，也很直观的表达出了函数式编程的封装过程的核心概念。&lt;/p&gt;
&lt;h2 id=&quot;范畴学&quot;&gt;范畴学&lt;/h2&gt;
&lt;p&gt;函数式编程建立在范畴学上，很多时候讨论起来难免有点理论化，所以这里简单的介绍一下范畴。&lt;/p&gt;
&lt;p&gt;有着以下这些组件（component）的搜集（collection）就构成了一个范畴：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对象的搜集&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;态射的搜集&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;态射的组合&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;identity 这个独特的态射&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对象的搜集&lt;br/&gt;对象就是数据类型，例如 String、Boolean、Number 和 Object 等等。通常我们把数据类型视作所有可能的值的一个集合（set）。像 Boolean 就可以看作是 [true, false] 的集合，Number 可以是所有实数的一个集合。把类型当作集合对待是有好处的，因为我们可以利用集合论（set theory）处理类型。&lt;/p&gt;
&lt;p&gt;态射的搜集&lt;br/&gt;态射是标准的、普通的纯函数。&lt;/p&gt;
&lt;p&gt;态射的组合&lt;br/&gt;即上面提到的compose&lt;/p&gt;
&lt;p&gt;identity 这个独特的态射&lt;br/&gt;让我们介绍一个名为 id 的实用函数。这个函数接受随便什么输入然后原封不动地返回它：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var id = function(x){ return x; };&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;functor&quot;&gt;functor&lt;/h2&gt;
&lt;p&gt;在学习函数式编程的时候，第一次看到functor的时候一脸懵逼， 确实不理解这个东西是什么， 可以做什么，加上一堆术语，头都大了。在理解functor之前，先认识一个东西&lt;/p&gt;
&lt;h3 id=&quot;概念-2&quot;&gt;概念&lt;/h3&gt;
&lt;p&gt;容器&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;容器为函数式编程里普通的变量、对象、函数提供了一层极其强大的外衣，赋予了它们一些很惊艳的特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;var Container = function(x) {
  this.__value = x;
}
Container.of = x =&amp;gt; new Container(x);

//试试看
Container.of(1);
//=&amp;gt; Container(1)

Container.of('abcd');
//=&amp;gt; Container('abcd')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Container.of 把东西装进容器里之后，&lt;code&gt;由于这一层外壳的阻挡，普通的函数就对他们不再起作用了&lt;/code&gt;，所以我们需要加一个接口来让外部的函数也能作用到容器里面的值（像Array也是一个容器）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Container.prototype.fmap = function(f){
  return Container.of(f(this.__value))
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以这样使用它：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Container.of(3)
    .fmap(x =&amp;gt; x + 1)                //=&amp;gt; Container(4)
    .fmap(x =&amp;gt; 'Result is ' + x);    //=&amp;gt; Container('Result is 4')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们通过简单的代码就实现了一个链式调用，并且这也是一个&lt;code&gt;functor&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Functor（函子）是实现了 fmap 并遵守一些特定规则的容器类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样子看还是有点不好理解， 那么参考下面这句话可能会好一点：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;a functor is nothing more than a data structure you can map functions over with the purpose of lifting values from a container, modifying them, and then putting them back into a container. 都是些简单的单词，意会比起本人翻译会更容易理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加上一张图：&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/3/31/169d31a9978c9e0a?w=781&amp;amp;h=213&amp;amp;f=png&amp;amp;s=26412&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ok, 现在大概知道functor是一个什么样的东西了。&lt;/p&gt;
&lt;h3 id=&quot;作用&quot;&gt;作用&lt;/h3&gt;
&lt;p&gt;那么functor有什么作用呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;链式调用&lt;/code&gt;&lt;br/&gt;首先它可以链式调用，正如上面提到的一样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Immutable&lt;/code&gt;&lt;br/&gt;可以看到， 我们每次都是返回了一个新的Container.of， 所以数据是Immutable的， 而Immutable的作用就不在这里赘述了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;将控制权交给Container&lt;/code&gt;&lt;br/&gt;将控制权交给Container， 这样他就可以决定&lt;code&gt;何时何地怎么去调用&lt;/code&gt;我们传给fmap的function，这个作用非常强大，可以为我们做&lt;code&gt;空值判断、异步处理、惰性求值&lt;/code&gt;等一系列麻烦的事。&lt;/p&gt;
&lt;h3 id=&quot;例子-3&quot;&gt;例子&lt;/h3&gt;
&lt;p&gt;上面作用的第三点可能直观上有点难以理解， 下面举三个简单的例子&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Maybe Container&lt;/code&gt;&lt;br/&gt;定义一个Maybe Container来帮我们处理空值的判断&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var Maybe = function(x) {
  this.__value = x;
}

Maybe.of = function(x) {
  return new Maybe(x);
}

Maybe.prototype.fmap = function(f) {
  return this.isNothing() ? Maybe.of(null) : Maybe.of(f(this.__value));
}

Maybe.prototype.isNothing = function() {
  return (this.__value === null || this.__value === undefined);
}

//试试看
import _ from 'lodash';
var add = _.curry(_.add);

Maybe.of({name: &quot;Stark&quot;})
    .fmap(_.prop(&quot;age&quot;))
    .fmap(add(10));
//=&amp;gt; Maybe(null)

Maybe.of({name: &quot;Stark&quot;, age: 21})
    .fmap(_.prop(&quot;age&quot;))
    .fmap(add(10));
//=&amp;gt; Maybe(31)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然， 这里可以利用上面提到的科里化函数来简化掉一堆fmap的情况&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import _ from 'lodash';
var compose = _.flowRight;
var add = _.curry(_.add);

// 创造一个柯里化的 map
var map = _.curry((f, functor) =&amp;gt; functor.fmap(f));

var doEverything = map(compose(add(10), _.property(&quot;age&quot;)));

var functor = Maybe.of({name: &quot;Stark&quot;, age: 21});
doEverything(functor);
//=&amp;gt; Maybe(31)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Task Container&lt;/code&gt;&lt;br/&gt;我们可以编写一个Task Container来帮我们处理异步的情况&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var fs = require('fs');

//  readFile :: String -&amp;gt; Task(Error, JSON)
var readFile = function(filename) {
  return new Task(function(reject, result) {
    fs.readFile(filename, 'utf-8', function(err, data) {
      err ? reject(err) : result(data);
    });
  });
};

readFile(&quot;metamorphosis&quot;).fmap(split('\n')).fmap(head);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例子中的 reject 和 result 函数分别是失败和成功的回调。正如你看到的，我们只是简单地调用 Task 的 map 函数，就能操作将来的值，好像这个值就在那儿似的。(这看起来有点像Promise)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Io Container&lt;/code&gt;&lt;br/&gt;我们可以利用Io Container来做惰性求值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import _ from 'lodash';
var compose = _.flowRight;

var IO = function(f) {
    this.__value = f;
}

IO.of = x =&amp;gt; new IO(_ =&amp;gt; x);

IO.prototype.map = function(f) {
    return new IO(compose(f, this.__value))
};

var io_document = new IO(_ =&amp;gt; window.document);

io_document.map(function(doc){ return doc.title });
//=&amp;gt; IO(document.title)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意我们这里虽然感觉上返回了一个实际的值 IO(document.title)，但事实上只是一个对象：{ __value: [Function] }，它并没有执行，而是简单地把我们想要的操作存了起来，只有当我们在真的需要这个值得时候，IO 才会真的开始求值，&lt;/p&gt;
&lt;h3 id=&quot;functor-范畴&quot;&gt;functor 范畴&lt;/h3&gt;
&lt;p&gt;functor 的概念来自于范畴学，并满足一些定律。 即&lt;code&gt;functor 接受一个范畴的对象和态射（morphism），然后把它们映射（map）到另一个范畴里去&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;js中的functor&quot;&gt;Js中的functor&lt;/h3&gt;
&lt;p&gt;Js中也有一些实现了functor, 如map、filter&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;map    :: (A -&amp;gt; B)   -&amp;gt; Array(A) -&amp;gt; Array(B)
filter :: (A -&amp;gt; Boolean) -&amp;gt; Array(A) -&amp;gt; Array(A)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;monad&quot;&gt;Monad&lt;/h2&gt;
&lt;h3 id=&quot;普通functor的问题&quot;&gt;普通functor的问题&lt;/h3&gt;
&lt;p&gt;我们来写一个函数 cat，这个函数的作用和 Linux 命令行下的 cat 一样，读取一个文件，然后打出这个文件的内容&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import fs from 'fs';
import _ from 'lodash';

var map = _.curry((f, x) =&amp;gt; x.map(f));
var compose = _.flowRight;

var readFile = function(filename) {
    return new IO(_ =&amp;gt; fs.readFileSync(filename, 'utf-8'));
};

var print = function(x) {
    return new IO(_ =&amp;gt; {
        console.log(x);
        return x;
    });
}

var cat = compose(map(print), readFile);

cat(&quot;file&quot;)
//=&amp;gt; IO(IO(&quot;file的内容&quot;))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ok, 我们最后得到的是两层嵌套的IO, 要获取其中的值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cat(&quot;file&quot;).__value().__value()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;问题很明显的出来了， 我们需要连续调用两次_value才能获取， 那么假如我们嵌套了更多呢， 难道每次都要调用一大堆__value吗， 那当然是不可能的。&lt;/p&gt;
&lt;h3 id=&quot;概念-3&quot;&gt;概念&lt;/h3&gt;
&lt;p&gt;我们可以使用一个join函数， 来将Container里面的东西拿出来， 像这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var join = x =&amp;gt; x.join();
IO.prototype.join = function() {
  return this.__value ? IO.of(null) : this.__value();
}

// 试试看
var foo = IO.of(IO.of('123'));

foo.join();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;似乎这样也有点麻烦， 每次都要使用一个join来剖析&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var doSomething = compose(join, map(f), join, map(g), join, map(h));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以使用一个chain函数， 来帮助我们做这些事&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var chain = _.curry((f, functor) =&amp;gt; functor.chain(f));
IO.prototype.chain = function(f) {
  return this.map(f).join();
}

// 现在可以这样调用了
var doSomething = compose(chain(f), chain(g), chain(h));

// 当然，也可以这样
someMonad.chain(f).chain(g).chain(h)

// 写成这样是不是很熟悉呢？
readFile('file')
    .chain(x =&amp;gt; new IO(_ =&amp;gt; {
        console.log(x);
        return x;
    }))
    .chain(x =&amp;gt; new IO(_ =&amp;gt; {
        // 对x做一些事情，然后返回
    }))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ok, 事实上这就是一个Monad， 而且你也会很熟悉， 这就像一个Promise的then， 那么什么是Monad呢？&lt;br/&gt;Monad有一个bind方法， 就是上面讲到的chain（同一个东西不同叫法），&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function bind&amp;lt;T, U&amp;gt;(instance: M&amp;lt;T&amp;gt;, transform: (value: T) =&amp;gt; M&amp;lt;U&amp;gt;): M&amp;lt;U&amp;gt; {
    // ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实，Monad 的作用跟 Functor 类似，也是应用一个函数到一个上下文中的值。不同之处在于，Functor 应用的是一个接收一个普通值并且返回一个普通值的函数，而 Monad 应用的是一个接收一个普通值但是返回一个在上下文中的值的函数。上下文即一个Container。&lt;/p&gt;
&lt;h3 id=&quot;promise是monad&quot;&gt;Promise是Monad&lt;/h3&gt;
&lt;p&gt;需要被认为是Monad需要具备以下三个条件&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;拥有容器， 即Maybe、IO之类。&lt;/li&gt;
&lt;li&gt;一个可以将普通类型转换为具有上下文的值的函数， 即Contanier.of&lt;/li&gt;
&lt;li&gt;拥有bind函数（即上面提到的bind， 而不是ES5的bind）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;那么Promise具备了什么条件？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;拥有容器 Promise, 即上面第一点&lt;/li&gt;
&lt;li&gt;Promise.resolve(value)将值转换为一个具有上下文的值， 即上面第二点。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Promise.prototype.then(onFullfill: value =&amp;gt; Promise) 拥有一个bind（then）函数， 接受一个函数作为参数， 该函数接受一个普通值并返回一个含有上下文的值。 即上面第三点&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;不过Promise比Monad拥有更多的功能。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果then返回了一个正常的value， Promise会调用Promise.resolve将其转换为Promise&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;普通的Monad只能提供在计算的时候传递一个值， 而Promise有两个不同的值 - 一个用于成功值，一个用于错误（类似于Either monad）。可以使用then方法的第二个回调或使用特殊的.catch方法捕获错误&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;applicative-functor&quot;&gt;Applicative Functor&lt;/h2&gt;
&lt;p&gt;提到了Functor和Monad而不提Applicative Functor就不完整了。&lt;/p&gt;
&lt;h3 id=&quot;概念-4&quot;&gt;概念&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Applicative Functor就是让不同 functor 可以相互应用（apply）的能力&lt;/code&gt;。&lt;br/&gt;举一个简单的例子, 假设有两个同类型的 functor，我们想把这两者作为一个函数的两个参数传递过去来调用这个函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 这样是行不通的，因为 2 和 3 都藏在瓶子里。
add(Container.of(2), Container.of(3));
//NaN

// 使用可靠的 map 函数试试
var container_of_add_2 = map(add, Container.of(2));
// Container(add(2))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时候我们创建了一个 Container，它内部的值是一个局部调用的（partially applied）的函数。确切点讲就是，我们想让 Container(add(2)) 中的 add(2) 应用到 Container(3) 中的 3 上来完成调用。也就是说，我们想把一个 functor 应用到另一个上。&lt;br/&gt;巧的是，完成这种任务的工具已经存在了，即 chain 函数。我们可以先 chain 然后再 map 那个局部调用的 add(2)，就像这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Container.of(2).chain(function(two) {
  return Container.of(3).map(add(two));
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然而这样我们需要延迟Container.of(3)的建立， 这对我们来说是很不方便的也是没有必要的， 我们可以通过建立一个ap函数来达成我们想要的效果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Container.prototype.ap = function(other_container) {
  return other_container.map(this.__value);
}

Container.of(2).map(add).ap(Container.of(3));
// Container(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意上面的add是科里化函数， this.__value是一个纯函数。&lt;/p&gt;
&lt;p&gt;由于这种先 map 再 ap 的操作很普遍，我们可以抽象出一个工具函数 liftA2：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const liftA2 = (f, m1, m2) =&amp;gt; m1.map(f).ap(m2)
liftA2(add, Container.of(2), Container.of(3))&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;应用&quot;&gt;应用&lt;/h3&gt;
&lt;p&gt;正如我们上面所说， 我们可以独立创建两个Container， 那么在Task中也可以同时发起两个http请求，而不必等到第一个返回再执行第二个&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Http.get :: String -&amp;gt; Task Error HTML

var renderPage = curry(function(destinations, events) { /* render page */  });

Task.of(renderPage).ap(Http.get('/destinations')).ap(Http.get('/events'))
// Task(&quot;&amp;lt;div&amp;gt;some page with dest and events&amp;lt;/div&amp;gt;&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;functormonadapplicative-functor的数学规律&quot;&gt;Functor\Monad\Applicative Functor的数学规律&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Functor&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// identity
map(id) === id;

// composition
compose(map(f), map(g)) === map(compose(f, g));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bind(unit(x), f) ≡ f(x)
bind(m, unit) ≡ m
bind(bind(m, f), g) ≡ bind(m, x ⇒ bind(f(x), g))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Applicative Functor&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Identity: A.of(x =&amp;gt; x).ap(v) === v
Homomorphism: A.of(f).ap(A.of(x)) === A.of(f(x))
Interchange: u.ap(A.of(y)) === A.of(f =&amp;gt; f(y)).ap(u)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;js-与-函数式和面向对象&quot;&gt;js 与 函数式和面向对象&lt;/h2&gt;
&lt;p&gt;以下引用自文章&lt;a href=&quot;https://www.h5jun.com/post/js-functional-1.html&quot;&gt;漫谈 JS 函数式编程（一）&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;面向对象对数据进行抽象，将行为以对象方法的方式封装到数据实体内部，从而降低系统的耦合度。而函数式编程，选择对过程进行抽象，将数据以输入输出流的方式封装进过程内部，从而也降低系统的耦合度。两者虽是截然不同，然而在系统设计的目标上可以说是殊途同归的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;面向对象思想和函数式编程思想也是不矛盾的，因为一个庞大的系统，可能既要对数据进行抽象，又要对过程进行抽象，或者一个局部适合进行数据抽象，另一个局部适合进行过程抽象，这都是可能的。数据抽象不一定以对象实体为形式，同样过程抽象也不是说形式上必然是 functional 的，比如流式对象（InputStream、OutputStream）、Express 的 middleware，就带有明显的过程抽象的特征。但是在通常情况下，OOP更适合用来做数据抽象，FP更适合用来做过程抽象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然由于Javascript本身是多范式语言， 所以可以在合适的地方使用合适的编程方式。总而言之， 两者互不排斥，是可共存的。&lt;/p&gt;
&lt;h2 id=&quot;尾递归优化&quot;&gt;尾递归优化&lt;/h2&gt;
&lt;p&gt;由于函数式编程，如果尾递归不做优化，很容易爆栈， 这个知识点有很多文章提出来了， 这里推荐一篇&lt;a href=&quot;https://juejin.im/post/5c384438e51d454ddb2bcd75&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明式编程&quot;&gt;声明式编程&lt;/h2&gt;
&lt;p&gt;声明式主要表现在于只关心结果而不关心过程， 这里推荐一篇&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26085755&quot;&gt;轻松易懂的文章&lt;/a&gt;&lt;br/&gt;或者举个例子:&lt;br/&gt;在JQ时代的时候， 假如我们需要渲染一个DOM， 并改变其文字颜色, 我们需要这样的步骤：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;找到DOM的class或者id&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;根据class或者id找到DOM&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;重新赋值DOM的style属性的color属性&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;而在React中， 我们可以直接告诉JSX我们想要DOM的颜色变成红色即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const textColor = 'red'
const comp = () =&amp;gt; {
    return (
        &amp;lt;div style={{
            color: textColor
        }} /&amp;gt;
    )
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而关于声明式和函数式， 我个人认为函数式和声明式一样， 也是属于关心结果， 但是函数式最重要的特点是“函数第一位”，即函数可以出现在任何地方。 两者其实不应该做比较。&lt;/p&gt;
&lt;h2 id=&quot;函数式编程在js中的实践&quot;&gt;函数式编程在JS中的实践&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Undescore/Lodash/Ramda库 特别是Lodash， 打开node_modules基本都能看到&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Immutable-js 数据不可变&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Redux&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;ES6 尾递归优化&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;函数式编程在前端开发中的优势&quot;&gt;函数式编程在前端开发中的优势&lt;/h2&gt;
&lt;p&gt;以下引用自&lt;a href=&quot;https://www.zhihu.com/question/59871249/answer/170400954&quot;&gt;知乎答案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;优化绑定&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;说白了前端和后端不一样的关键点是后端HTTP较多，前端渲染多，前端真正的刚需是数据绑定机制。后端一次对话，计算好Response发回就完成任务了，所以后端吃了二十年年MVC老本还是挺好用的。前端处理的是连续的时间轴，并非一次对话，像后端那样赋值简单传递就容易断档，导致状态不一致，带来大量额外复杂度和Bug。不管是标准FRP还是Mobx这种命令式API的TFRP，内部都是基于函数式设计的。函数式重新发明的Return和分号是要比裸命令式好得多的（前端状态可以同步，后端线程安全等等，想怎么封装就怎么封装）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;封装作用&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;接上条，大幅简化异步，IO，渲染等作用/副作用相关代码。和很多人想象的不一样，函数式很擅长处理作用，只是多一层抽象，如果应用稍微复杂一点，这点成本很快就能找回来（Redux Saga是个例子，特别是你写测试的情况下）。渲染现在大家都可以理解幂等渲染地好处了，其实函数式编程各种作用和状态也是幂等的，对于复杂应用非常有帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;复用&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;引用透明，无副作用，代数设计让函数式代码可以正确优雅地复用。前端不像后端业务固定，做好业务分析和DDD就可以搭个静态结构，高枕无忧了。前端的好代码一定是活的，每处都可能乱改。可组合性其实很重要。通过高阶函数来组合效果和效率都要高于继承，试着多用ramda，你就可以发现绝大部分东西都能一行写完，最后给个实参就变成一个UI，来需求改两笔就变成另外一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结-3&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;函数式编程在JS的未来是大放异彩还是泯然众人，都不影响我们学习它的思想。本文里面有许多引用没有特别指出，但都会在底部放上链接（如介意请留言）， 望见谅。&lt;/p&gt;
&lt;h2 id=&quot;参考引用&quot;&gt;参考&amp;amp;引用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/22285830/answer/84552355&quot;&gt;声明式编程和命令式编程有什么区别？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56810671&quot;&gt;用 JS 代码完整解释 Monad&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/68121329&quot;&gt;怎么理解“声明式渲染”？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21926955&quot;&gt;JavaScript函数式编程（二）&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://dzone.com/articles/javascript-functors-explained-1&quot;&gt;JavaScript Functors Explained&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/59871249&quot;&gt;前端开发js函数式编程真实用途体现在哪里？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/61718449&quot;&gt;js 是更倾向于函数式编程了还是更倾向于面向对象？或者没有倾向？只是简单的提供了更多的语法糖？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.h5jun.com/post/js-functional-1.html&quot;&gt;漫谈 JS 函数式编程（一）&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/33652103&quot;&gt;有哪些函数式编程在前端的实践经验？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/42094770&quot;&gt;前端使用面向对象式编程 还是 函数式编程 针对什么问题用什么方式 分别有什么具体案例？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/19635359&quot;&gt;什么是 Monad (Functional Programming)？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://curiosity-driven.org/monads-in-javascript&quot;&gt;Monads In Javascript&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.leichunfeng.com/blog/2015/11/08/functor-applicative-and-monad/&quot;&gt;Functor、Applicative 和 Monad&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://juejin.im/post/59e55dbbf265da43333d7652#heading-4&quot;&gt;JavaScript 让 Monad 更简单&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/&quot;&gt;函数式编程&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 14:07:00 +0000</pubDate>
<dc:creator>菜的黑人牙膏</dc:creator>
<og:description>前言 JavaScript是一门多范式语言，即可使用OOP（面向对象），也可以使用FP（函数式），由于笔者最近在学习React相关的技术栈，想进一步深入了解其思想，所以学习了一些FP相关的知识点，本文</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Darlietoothpaste/p/10633550.html</dc:identifier>
</item>
<item>
<title>F#周报2019年第13期 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/10633345.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/10633345.html</guid>
<description>[unable to retrieve full-text content]新闻 &quot;Visual Studio 2019发布会&quot; &quot;Json2FSharp——在线类型生成器&quot; &quot;cs2fs online——从C 到F 的移植器&quot; &quot;AWS Lambda layer上的.NET Core&quot; &quot;AWS CDK F 的HelloWorld模板&quot; &quot;Compose NYC 2019</description>
<pubDate>Sun, 31 Mar 2019 13:39:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>新闻 'Visual Studio 2019发布会' 'Json2FSharp——在线类型生成器' 'cs2fs online——从C 到F 的移植器' 'AWS Lambda layer上的.NET</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/10633345.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——78.  同步访问共享的可变数据 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/10633368.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/10633368.html</guid>
<description>&lt;blockquote readability=&quot;5.0845771144279&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;书中的源代码地址：&lt;a href=&quot;https://github.com/jbloch/effective-java-3e-source-code&quot; class=&quot;uri&quot;&gt;https://github.com/jbloch/effective-java-3e-source-code&lt;/a&gt;&lt;br/&gt;注意，书中的有些代码里方法是基于Java 9 API中的，所以JDK 最好下载 JDK 9以上的版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4366140-8966e457a14bc8b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;并发&quot;&gt;并发&lt;/h3&gt;
&lt;p&gt;线程允许多个活动同时进行。 并发编程比单线程编程更难，因为更多的事情可能会出错，并且失败很难重现。 你无法避免并发。 它是平台中固有的，也是要从多核处理器获得良好性能的要求，现在无处不在。本章包含的建议可帮助你编写清晰，正确，文档完备的并发程序。&lt;/p&gt;

&lt;p&gt;synchronized关键字确保一次只有一个线程可以执行一个方法或代码块。许多程序员认为同步只是一种互斥的方法，以防止一个线程在另一个线程修改对象时看到对象处于不一致的状态。在这个观点中，对象以一致的状态创建(条目 17)，并由访问它的方法锁定。这些方法观察状态，并可选地引起状态转换，将对象从一个一致的状态转换为另一个一致的状态。正确使用同步可以保证没有任何方法会观察到处于不一致状态的对象。&lt;/p&gt;
&lt;p&gt;这种观点是正确的，但它只说明了一部分意义。如果没有同步，一个线程的更改可能对其他线程不可见。同步不仅阻止线程观察处于不一致状态的对象，而且确保每个进入同步方法或块的线程都能看到由同一锁保护的所有之前修改的效果。&lt;/p&gt;
&lt;p&gt;语言规范保证读取或写入变量是原子性（atomic）的，除非变量的类型是long或double [JLS, 17.4, 17.7]。换句话说，读取long或double以外的变量，可以保证返回某个线程存储到该变量中的值，即使多个线程在没有同步的情况下同时修改变量也是如此。&lt;/p&gt;
&lt;p&gt;你可能听说过，为了提高性能，在读取或写入原子数据时应该避免同步。这种建议大错特错。虽然语言规范保证线程在读取属性时不会看到任意值，但它不保证由一个线程编写的值对另一个线程可见。&lt;strong&gt;同步是线程之间可靠通信以及互斥所必需的&lt;/strong&gt;。这是语言规范中称之为内存模型（memory model）的一部分，它规定了一个线程所做的更改何时以及如何对其他线程可见[JLS, 17.4;Goetz06, 16)。&lt;/p&gt;
&lt;p&gt;即使数据是原子可读和可写的，未能同步对共享可变数据的访问的后果也是可怕的。 考虑从另一个线程停止一个线程的任务。 Java类库提供了Thread.stop方法，但是这个方法很久以前就被弃用了，因为它本质上是不安全的——它的使用会导致数据损坏。 不要使用Thread.stop。 从另一个线程中停止一个线程的推荐方法是让第一个线程轮询一个最初为false的布尔类型的属性，但是第二个线程可以设置为true以指示第一个线程要自行停止。 因为读取和写入布尔属性是原子的，所以一些程序员在访问属性时不需要同步：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Broken! - How long would you expect this program to run?
public class StopThread {
    private static boolean stopRequested;

    public static void main(String[] args)
            throws InterruptedException {
        Thread backgroundThread = new Thread(() -&amp;gt; {
            int i = 0;
            while (!stopRequested)
                i++;
        });
        backgroundThread.start();
        TimeUnit.SECONDS.sleep(1);
        stopRequested = true;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可能希望这个程序运行大约一秒钟，之后主线程将stoprequired设置为true，从而导致后台线程的循环终止。然而，在我的机器上，程序永远不会终止：后台线程永远循环!&lt;/p&gt;
&lt;p&gt;问题是在没有同步的情况下，无法确保后台线程何时（如果有的话）看到主线程所做的stopRequested值的变化。 在没有同步的情况下，虚拟机将下面代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   while (!stopRequested)
        i++;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;转换成这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (!stopRequested)
    while (true)
        i++;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种优化称为提升(hoisting，它正是OpenJDK Server VM所做的。 结果是活泼失败( liveness failure)：程序无法取得进展。 解决问题的一种方法是同步对stopRequested属性的访问。 正如预期的那样，该程序大约一秒钟终止：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Properly synchronized cooperative thread termination
public class StopThread {
    private static boolean stopRequested;

    private static synchronized void requestStop() {
        stopRequested = true;
    }

    private static synchronized boolean stopRequested() {
        return stopRequested;
    }

    public static void main(String[] args)
            throws InterruptedException {
        Thread backgroundThread = new Thread(() -&amp;gt; {
            int i = 0;
            while (!stopRequested())
                i++;
        });

        backgroundThread.start();
        TimeUnit.SECONDS.sleep(1);
        requestStop();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，写方法(requestStop)和读方法(stop- required)都是同步的。仅同步写方法是不够的！&lt;strong&gt;除非读和写操作同步，否则不能保证同步工作&lt;/strong&gt;。有时，只同步写(或读)的程序可能在某些机器上显示有效，但在这种情况下，表面的现象是具有欺骗性的。&lt;/p&gt;
&lt;p&gt;即使没有同步，StopThread中同步方法的操作也是原子性的。换句话说，这些方法上的同步仅用于其通信效果，而不是互斥。虽然在循环的每个迭代上同步的成本很小，但是有一种正确的替代方法，它不那么冗长，而且性能可能更好。如果stoprequest声明为volatile，则可以省略StopThread的第二个版本中的锁定。虽然volatile修饰符不执行互斥，但它保证任何读取属性的线程都会看到最近写入的值：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Cooperative thread termination with a volatile field
public class StopThread {
    private static volatile boolean stopRequested;

    public static void main(String[] args)
            throws InterruptedException {
        Thread backgroundThread = new Thread(() -&amp;gt; {
            int i = 0;
            while (!stopRequested)
                i++;
        });
        backgroundThread.start();
        TimeUnit.SECONDS.sleep(1);
        stopRequested = true;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在使用volatile时一定要小心。考虑下面的方法，该方法应该生成序列号:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Broken - requires synchronization!
private static volatile int nextSerialNumber = 0;

public static int generateSerialNumber() {
    return nextSerialNumber++;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该方法的目的是保证每次调用都返回一个唯一值（只要调用次数不超过2&lt;sup&gt;32&lt;/sup&gt;次）。 方法的状态由单个可原子访问的属性nextSerialNumber组成，该属性的所有可能值都是合法的。 因此，不需要同步来保护其不变量。 但是，如果没有同步，该方法将无法正常工作。&lt;/p&gt;
&lt;p&gt;问题是增量运算符（++）不是原子的。 它对nextSerialNumber属性执行两个操作：首先它读取值，然后它写回一个新值，等于旧值加1。 如果第二个线程在线程读取旧值并写回新值之间读取属性，则第二个线程将看到与第一个线程相同的值并返回相同的序列号。 这是安全性失败（safety failure）：程序计算错误的结果。&lt;/p&gt;
&lt;p&gt;修复generateSerialNumber的一种方法是将synchronized修饰符添加到其声明中。 这确保了多个调用不会交叉读取，并且每次调用该方法都会看到所有先前调用的效果。 完成后，可以并且应该从nextSerialNumber中删除volatile修饰符。 要保护该方法，请使用long而不是int，或者在nextSerialNumber即将包装时抛出异常。&lt;/p&gt;
&lt;p&gt;更好的是，遵循条目 59条中建议并使用AtomicLong类，它是java.util.concurrent.atomic包下的一部分。 这个包为单个变量提供了无锁，线程安全编程的基本类型。 虽然volatile只提供同步的通信效果，但这个包还提供了原子性。 这正是我们想要的generateSerialNumber，它可能强于同步版本的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Lock-free synchronization with java.util.concurrent.atomic
private static final AtomicLong nextSerialNum = new AtomicLong();

public static long generateSerialNumber() {
    return nextSerialNum.getAndIncrement();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;避免此条目中讨论的问题的最佳方法是不共享可变数据。 共享不可变数据（条目 17）或根本不共享。 换句话说，&lt;strong&gt;将可变数据限制在单个线程中&lt;/strong&gt;。 如果采用此策略，则必须对其进行文档记录，以便在程序发展改进时维护此策略。 深入了解正在使用的框架和类库也很重要，因为它们可能会引入你不知道的线程。&lt;/p&gt;
&lt;p&gt;一个线程可以修改一个数据对象一段时间后，然后与其他线程共享它，只同步共享对象引用的操作。然后，其他线程可以在不进一步同步的情况下读取对象，只要不再次修改该对象。这些对象被认为是有效不可变的（ effectively immutable）[Goetz06, 3.5.4]。将这样的对象引用从一个线程转移到其他线程称为安全发布（safe publication ）[Goetz06, 3.5.3]。安全地发布对象引用的方法有很多：可以将它保存在静态属性中，作为类初始化的一部分；也可以将其保存在volatile属性、final属性或使用正常锁定访问的属性中；或者可以将其放入并发集合中(条目 81)。&lt;/p&gt;
&lt;p&gt;总之，&lt;strong&gt;当多个线程共享可变数据时，每个读取或写入数据的线程都必须执行同步&lt;/strong&gt;。 在没有同步的情况下，无法保证一个线程的更改对另一个线程可见。 未能同步共享可变数据的代价是活性失败和安全性失败。 这些失败是最难调试的。 它们可以是间歇性的和时间相关的，并且程序行为可能在不同VM之间发生根本的变化。如果只需要线程间通信，而不需要互斥，那么volatile修饰符是一种可接受的同步形式，但是正确使用它可能会比较棘手。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 13:39:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<og:description>Tips 书中的源代码地址：https://github.com/jbloch/effective java 3e source code 注意，书中的有些代码里方法是基于Java 9 API中的，所</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/10633368.html</dc:identifier>
</item>
<item>
<title>理解 Linux 中 `ls` 的输出 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/understanding_output_of_linux_ls.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/understanding_output_of_linux_ls.html</guid>
<description>&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; 的输出会因各 Linux 版本变种而略有差异，这里只讨论一般情况下的输出。&lt;/p&gt;
&lt;p&gt;下面是来自 man page 关于 &lt;code&gt;ls&lt;/code&gt; 的描述：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ man ls
       ls - list directory contents
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出文件夹中的内容。&lt;/p&gt;
&lt;p&gt;但一般我们会配合着 &lt;code&gt;-l&lt;/code&gt; 参数使用，将输出展示成列表形式。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;ls&lt;/code&gt; 的 man page 中搜索 &lt;code&gt;-l&lt;/code&gt; 可看到该参数的意义：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
       -l     use a long listing format
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表形式下看到的输出大概成这样：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
-rwxrw-r--    10    root   root 2048    Jan 13 07:11 afile.exe
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;各列的含义&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;-rwxrw-r--    10    root   root 2048    Jan 13 07:11 afile.exe
?UUUGGGOOOS   00  UUUUUU GGGGGG ####    ^-- 修改日期及文件或文件夹名
^ ^  ^  ^ ^    ^      ^      ^    ^
| |  |  | |    |      |      |    \--- 文件大小，单位为字节（byte）
| |  |  | |    |      |      \-------- 所有者所处的分组
| |  |  | |    |      \--------------- 所有者名称
| |  |  | |    \---------------------- 包含的项目（item）数量
| |  |  | \--------------------------- 额外的权限（`.`，`+`，`s` 等，为空表示没有）
| \--\--\----------------------------- 分别对应 [U]ser, [G]roup, and [O]thers 三种账户的读，写，可执行权限
\------------------------------------- 标识文件类型
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt;文件权限/file permissions&lt;/h4&gt;
&lt;p&gt;包含三部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一位标识文件类型，
&lt;ul&gt;&lt;li&gt;&lt;code&gt;-&lt;/code&gt;：文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;：文件夹（directory）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;：软链（symlink）。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;后面的值三个一组，&lt;code&gt;xxx xxx xxx&lt;/code&gt;。分别对应了 &lt;code&gt;user&lt;/code&gt;，&lt;code&gt;group&lt;/code&gt; 与 &lt;code&gt;other&lt;/code&gt; 的权限。其中每一组包含三位，每一位则表示具体的读写及可执行权限，如果是字母表示有该权限， &lt;code&gt;-&lt;/code&gt; 表示没有相应的权限。
&lt;ul&gt;&lt;li&gt;&lt;code&gt;r&lt;/code&gt;：读取权限/readable。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt;：写入权限/writable。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;：可执行权限/executable，即将文件作为可执行文件运行。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最后位可选，表示还有额外的权限控制，如果没有则为空，参见&lt;a href=&quot;https://unix.stackexchange.com/a/206912/209192&quot; rel=&quot;nofollow&quot;&gt;这里的解释&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其中,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;user 即文件所属的用户，它的所有者，也可理解成其创建者，如果该文件没有被修改过权限的话。&lt;/li&gt;
&lt;li&gt;group 即用户所属的分组。&lt;/li&gt;
&lt;li&gt;other 表示既不是主人也不属于 user 所处的分组的其他任何身份。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以连起来的话，&lt;code&gt;-rwxrw-r--&lt;/code&gt; 表示该项是个文件，其所有者拥有全部三种权限（&lt;code&gt;rwx&lt;/code&gt;），和所有者同在一个分组下的用户没有可执行的权限（&lt;code&gt;rw-&lt;/code&gt;），其他用户只读（&lt;code&gt;r--&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tips: 系统会为文件默认赋予权限，但可通过 &lt;code&gt;chmod&lt;/code&gt; （change mode）命令来手动改变文件的权限。&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;one more thing&lt;/h4&gt;
&lt;p&gt;有趣的是，权限除了使用 &lt;code&gt;rwx&lt;/code&gt; 字母的方式表示，还可使用八进制（octal）数字来表示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;0：无权限 &lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1：可执行 &lt;code&gt;x&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2：写权限 &lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;3：可写和可执行 &lt;code&gt;wx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4：读权限 &lt;code&gt;r&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;5：可读可执行 &lt;code&gt;rx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;6：读写 &lt;code&gt;rw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;7：读写及可执行 &lt;code&gt;rwx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;数字形式的权限通常用于 &lt;code&gt;chmod&lt;/code&gt; 命令，方便修改文件的权限。比如将文件设置对用户有全部权限（对应数字 7），分组可读可执行（5），其他只读（4）：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ chmod 754 somefile.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你当然还是可以使用字母的方式来进行设置的，&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
$ chmod u=rwx,g=rx,o=r somefile.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;细心的你可能发现了，无论哪种权限组合，都可以通过三种其他的权限其数字相加而得到，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;比如 7 表示读写及可执行，7 = 4（读） + 2 （写） + 1 （可执行）&lt;/li&gt;
&lt;li&gt;再比如只读权限 4 = 4（读） + 0 （写） + 0 （可执行）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这便是其设计其妙之处，所以你应该理解为何 0~7 对应的是上面列出的权限。方便之处在于，只需要记住 4，2，1 分别对应读，写，可执行。其他权限通过相加计算即可。&lt;/p&gt;
&lt;h4&gt;链接数量/number of links&lt;/h4&gt;
&lt;p&gt;表示包含的项目数量。如果该项是文件，则无疑是 1。如果该项是文件夹，表示文件夹下还包含多少个文件或文件夹。&lt;/p&gt;
&lt;h4&gt;所属用户/owner name&lt;/h4&gt;
&lt;p&gt;文件的所有者。&lt;/p&gt;
&lt;h4&gt;所属分组/owner group&lt;/h4&gt;
&lt;p&gt;所有者所处的分组名。&lt;/p&gt;
&lt;h4&gt;文件大小/file size&lt;/h4&gt;
&lt;p&gt;文件或文件夹的大小，单位为字节（byte）。通过参数可配置输出为更加容易理解的形式，比如 &lt;code&gt;-h&lt;/code&gt; (&lt;code&gt;--human-readable&lt;/code&gt;)：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
-rw-rw-r--   1 liuwayong liuwayong 1.6K Mar 30 18:18 app.js
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;修改日期/time of last modification&lt;/h4&gt;
&lt;p&gt;最后的修改日期。&lt;/p&gt;
&lt;h4&gt;文件或目录名/file/directory name&lt;/h4&gt;
&lt;p&gt;文件或文件夹的名称。如果是软链接，会显示出其所指向的位置。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
lrwxrwxrwx  1 root      root        16 Aug  2  2018 videodata -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; /data/videodata/
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;相关资料&lt;/h3&gt;
</description>
<pubDate>Sun, 31 Mar 2019 12:46:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>ls 的输出会因各 Linux 版本变种而略有差异，这里只讨论一般情况下的输出。 下面是来自 man page 关于 ls 的描述： $ man ls ls list directory conten</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/understanding_output_of_linux_ls.html</dc:identifier>
</item>
</channel>
</rss>