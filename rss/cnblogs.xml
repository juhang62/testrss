<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>OpenCV3入门（二）Mat操作 - 啊哈彭</title>
<link>http://www.cnblogs.com/pingwen/p/12292693.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pingwen/p/12292693.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;Mat&lt;/strong&gt;&lt;strong&gt;结构&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.1&lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;Mat&lt;/strong&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mat本质上是由两个数据部分组成的类：&lt;/p&gt;
&lt;p&gt;矩阵头：包含信息有矩阵的大小，用于存储的方法，矩阵存储的地址等&lt;/p&gt;
&lt;p&gt;数据矩阵指针：指向包含了像素值的矩阵。&lt;/p&gt;
&lt;p&gt;矩阵头部的大小是恒定的，矩阵本身的大小因图像的不同而不同，通常是较大的数量级。&lt;/p&gt;
&lt;p&gt;在程序中传递图像并在有些时候创建图像副本需要花费很大的代价生成图像矩阵本身，而不是图像的头部。为了解决这一问题 OpenCV 使用引用计数系统。其思想是Mat的每个对象具有其自己的头，但可能他们通过让他们矩阵指针指向同一地址的两个实例之间共享该矩阵。此外，拷贝运算符将只能复制矩阵头部，也还将复制指针到大型矩阵，但不是矩阵本身。如果需要复制矩阵的本身，要使用 clone() 或 copyTo() 函数。&lt;/p&gt;
&lt;p&gt;其中 Mat 类中有一些基本属性：&lt;/p&gt;
&lt;p&gt;cols ：矩阵列数&lt;/p&gt;
&lt;p&gt;rows：矩阵行数&lt;/p&gt;
&lt;p&gt;channels：通道数&lt;/p&gt;
&lt;p&gt;type：数据类型&lt;/p&gt;
&lt;p&gt;total：矩阵总元素数&lt;/p&gt;
&lt;p&gt;data：指向矩阵数据块的指针&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2&lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;Mat&lt;/strong&gt;&lt;strong&gt;数据类型定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中 Mat 排列方式如下：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;pre&gt;
&lt;code&gt;CV_[&lt;/code&gt;位数&lt;code&gt;][&lt;/code&gt;带符号与否&lt;code&gt;][&lt;/code&gt;类型前缀&lt;code&gt;]C[&lt;/code&gt;&lt;code&gt;通道数&lt;/code&gt;&lt;code&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;带符号与否：S为符号整型，U为无符号整型，F为浮点型&lt;/p&gt;
&lt;p&gt;例如CV_8UC3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200210205031181-1626129194.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 多通道数据类型的定义如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#define&lt;/span&gt; CV_8U   0
&lt;span&gt;#define&lt;/span&gt; CV_8S   1
&lt;span&gt;#define&lt;/span&gt; CV_16U  2
&lt;span&gt;#define&lt;/span&gt; CV_16S  3
&lt;span&gt;#define&lt;/span&gt; CV_32S  4
&lt;span&gt;#define&lt;/span&gt; CV_32F  5
&lt;span&gt;#define&lt;/span&gt; CV_64F  6
&lt;span&gt;#define&lt;/span&gt; CV_USRTYPE1 7

&lt;span&gt;#define&lt;/span&gt; CV_MAT_DEPTH_MASK       (CV_DEPTH_MAX - 1)
&lt;span&gt;#define&lt;/span&gt; CV_MAT_DEPTH(flags)     ((flags) &amp;amp; CV_MAT_DEPTH_MASK)
&lt;span&gt;#define&lt;/span&gt; CV_MAKETYPE(depth,cn) (CV_MAT_DEPTH(depth) + (((cn)-1) &amp;lt;&amp;lt; CV_CN_SHIFT))
&lt;span&gt;#define&lt;/span&gt; CV_MAKE_TYPE CV_MAKETYPE

&lt;span&gt;#define&lt;/span&gt; CV_8UC1 CV_MAKETYPE(CV_8U,1)
&lt;span&gt;#define&lt;/span&gt; CV_8UC2 CV_MAKETYPE(CV_8U,2)
&lt;span&gt;#define&lt;/span&gt; CV_8UC3 CV_MAKETYPE(CV_8U,3)
&lt;span&gt;#define&lt;/span&gt; CV_8UC4 CV_MAKETYPE(CV_8U,4)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2、Mat应用&lt;/h2&gt;
&lt;h2&gt;&lt;span&gt;2.1 构造函数&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) Mat::Mat()
(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;) Mat::Mat(&lt;span&gt;int&lt;/span&gt; rows, &lt;span&gt;int&lt;/span&gt; cols, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; type)
(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;) Mat::Mat(Size size, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; type)
(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;) Mat::Mat(&lt;span&gt;int&lt;/span&gt; rows, &lt;span&gt;int&lt;/span&gt; cols, &lt;span&gt;int&lt;/span&gt; type, &lt;span&gt;const&lt;/span&gt; Scalar&amp;amp;&lt;span&gt; s)
(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;) Mat::Mat(Size size, &lt;span&gt;int&lt;/span&gt; type, &lt;span&gt;const&lt;/span&gt; Scalar&amp;amp;&lt;span&gt; s)
(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;) Mat::Mat(&lt;span&gt;const&lt;/span&gt; Mat&amp;amp;&lt;span&gt; m)
(&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;) Mat::Mat(&lt;span&gt;int&lt;/span&gt; rows, &lt;span&gt;int&lt;/span&gt; cols, &lt;span&gt;int&lt;/span&gt; type, &lt;span&gt;void&lt;/span&gt;* data, size_t step =&lt;span&gt; AUTO_STEP)
(&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;) Mat::Mat(Size size, &lt;span&gt;int&lt;/span&gt; type, &lt;span&gt;void&lt;/span&gt;* data, size_t step =&lt;span&gt; AUTO_STEP)
(&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;) Mat::Mat(&lt;span&gt;const&lt;/span&gt; Mat&amp;amp; m, &lt;span&gt;const&lt;/span&gt; Range&amp;amp; rowRange, &lt;span&gt;const&lt;/span&gt; Range&amp;amp;&lt;span&gt; colRange)
(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;) Mat::Mat(&lt;span&gt;const&lt;/span&gt; Mat&amp;amp; m, &lt;span&gt;const&lt;/span&gt; Rect&amp;amp;&lt;span&gt; roi)
(&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;) Mat::Mat(&lt;span&gt;const&lt;/span&gt; CvMat* m, &lt;span&gt;bool&lt;/span&gt; copyData = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;) Mat::Mat(&lt;span&gt;const&lt;/span&gt; IplImage* img, &lt;span&gt;bool&lt;/span&gt; copyData = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;) template&amp;lt;typename T, &lt;span&gt;int&lt;/span&gt; n&amp;gt;&lt;span&gt;explicit&lt;/span&gt; Mat::Mat(&lt;span&gt;const&lt;/span&gt; Vec&amp;lt;T, n&amp;gt;&amp;amp; vec, &lt;span&gt;bool&lt;/span&gt; copyData = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;) template&amp;lt;typename T, &lt;span&gt;int&lt;/span&gt; m, &lt;span&gt;int&lt;/span&gt; n&amp;gt; &lt;span&gt;explicit&lt;/span&gt; Mat::Mat(&lt;span&gt;const&lt;/span&gt; Matx&amp;lt;T, m, n&amp;gt;&amp;amp; vec, &lt;span&gt;bool&lt;/span&gt; copyData = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;) template &lt;span&gt;explicit&lt;/span&gt; Mat::Mat(&lt;span&gt;const&lt;/span&gt; vector&amp;amp; vec, &lt;span&gt;bool&lt;/span&gt; copyData = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;) Mat::Mat(&lt;span&gt;const&lt;/span&gt; MatExpr&amp;amp;&lt;span&gt; expr)
(&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;) Mat::Mat(&lt;span&gt;int&lt;/span&gt; ndims, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;* sizes, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; type)
(&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;) Mat::Mat(&lt;span&gt;int&lt;/span&gt; ndims, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;* sizes, &lt;span&gt;int&lt;/span&gt; type, &lt;span&gt;const&lt;/span&gt; Scalar&amp;amp;&lt;span&gt; s)
(&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;) Mat::Mat(&lt;span&gt;int&lt;/span&gt; ndims, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;* sizes, &lt;span&gt;int&lt;/span&gt; type, &lt;span&gt;void&lt;/span&gt;* data, &lt;span&gt;const&lt;/span&gt; size_t* steps = &lt;span&gt;0&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.2&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;创建&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mat&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;类型数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;）使用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mat&lt;/span&gt;&lt;span&gt;构造函数创建&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Mat mat = Mat(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;, CV_8UC1);

cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rows=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;mat.rows &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,cols=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; mat.cols &amp;lt;&amp;lt;&lt;span&gt; endl;

cout &lt;/span&gt;&amp;lt;&amp;lt; mat &amp;lt;&amp;lt; endl;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;输出：&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;
&lt;div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;rows=2,cols=3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;[205, 205, 205;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; 205, 205, 205]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;创建三通道矩阵&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mat&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;mat(2, 3,&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;CV_8UC3&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;span&gt;输出如下。&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;20&quot;&gt;&lt;td readability=&quot;13&quot;&gt;
&lt;div readability=&quot;25&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;rows=2,cols=3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;[205, 205, 205, 205, 205, 205, 205, 205, 205;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;205, 205, 205, 205, 205, 205, 205, 205, 205]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;创建三通道矩阵&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mat&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;mat(2, 3,&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;CV_8UC3&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;, &lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Scalar&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(0,0,255)&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;20&quot;&gt;&lt;td readability=&quot;13&quot;&gt;
&lt;div readability=&quot;25&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;rows=2,cols=3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;[ &lt;span&gt; &lt;/span&gt;0,  &lt;span&gt; &lt;/span&gt;0, 255,  &lt;span&gt; &lt;/span&gt;0,  &lt;span&gt; &lt;/span&gt;0, 255,  &lt;span&gt; &lt;/span&gt;0,  &lt;span&gt; &lt;/span&gt;0, 255;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;  &lt;span&gt; &lt;/span&gt;0,  &lt;span&gt; &lt;/span&gt;0, 255,  &lt;span&gt; &lt;/span&gt;0, &lt;span&gt; &lt;/span&gt; 0, 255,  &lt;span&gt; &lt;/span&gt;0,  &lt;span&gt; &lt;/span&gt;0, 255]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; 2）使用Create函数进行初始化&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Mat M;
M.create(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;, CV_8UC1);
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;M = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; M &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出如下。&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;
&lt;div&gt;
&lt;p&gt;M =&lt;/p&gt;
&lt;p&gt; [205, 205, 205;&lt;/p&gt;
&lt;p&gt; 205, 205, 205]&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;3）使用标准函数进行特定矩阵初始化&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Mat M;
M &lt;/span&gt;= Mat::eye(&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;, CV_8U);
Mat M1 &lt;/span&gt;= Mat::ones(&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;, CV_8U);&lt;br/&gt;Mat M2&lt;/span&gt;= Mat::zeros(&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;, CV_8U);
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;M = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; M &amp;lt;&amp;lt; endl &amp;lt;&amp;lt;&lt;span&gt; endl;
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;M1 = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; M1 &amp;lt;&amp;lt; endl &amp;lt;&amp;lt;&lt;span&gt; endl;
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;M2 = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; M2 &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出如下。&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;20.5&quot;&gt;&lt;tr readability=&quot;41&quot;&gt;&lt;td readability=&quot;33&quot;&gt;
&lt;div readability=&quot;65&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;M =&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; [  1,   0,   0,   0;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   0,   1,   0,   0;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   0,   0,   1,   0;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   0,   0,   0,   1]&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;M1 =&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; [  1,   1,   1,   1;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   1,   1,   1,   1;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   1,   1,   1,   1;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   1,   1,   1,   1]&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;M2 =&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; [  0,   0,   0,   0;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   0,   0,   0,   0;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   0,   0,   0,   0;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;   0,   0,   0,   0]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;输出&lt;span lang=&quot;EN-US&quot;&gt;Mat&lt;/span&gt;矩阵可以格式化不同的形式，如下所示。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;cout&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&quot;M = &quot;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;endl&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;format( M,&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Formatter&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;::&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;FMT_PYTHON&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;endl&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;endl;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;M =&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; [[  1,   0,   0,   0],&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; [  0,   1,   0,   0],&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; [  0,   0,   1,   0],&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; [  0,   0,   0,   1]]&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.3 Mat&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;操作像素&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;1. at&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;定位符访问&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;、指针访问&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;迭代器&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;iterator&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;访问&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mat::at&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mat&lt;/span&gt;&lt;span&gt;数据结构，操作灰度图像像素点：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;int gray_value = (int) image.at&amp;lt;uchar&amp;gt;(i , j) ;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;操作彩色图像像素点：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;int color_value = (int) image.at&amp;lt;Vec3b&amp;gt;(i , j) [k];&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;gray_value&lt;/span&gt;&lt;span&gt;中存放灰度值，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;image&lt;/span&gt;&lt;span&gt;是读入的图像，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;i&lt;/span&gt;&lt;span&gt;表示行，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;j&lt;/span&gt;&lt;span&gt;表示列；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;color_value&lt;/span&gt;&lt;span&gt;中存放彩色像素值，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;image&lt;/span&gt;&lt;span&gt;是读入的图像，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;i&lt;/span&gt;&lt;span&gt;表示行，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;j&lt;/span&gt;&lt;span&gt;表示列，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;k&lt;/span&gt;&lt;span&gt;表示通道，即&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;R&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;G&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;B&lt;/span&gt;&lt;span&gt;，取值范围为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;0.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;36&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;template&amp;lt;typename T&amp;gt; T&amp;amp; Mat::at(int i)const&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; const T&amp;amp;Mat::at(int i) const&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; T&amp;amp; Mat::at(int i,int j)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; const T&amp;amp;Mat::at(int i, int j) const&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; T&amp;amp; Mat::at(Pointpt)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; const T&amp;amp;Mat::at(Point pt) const&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; T&amp;amp; Mat::at(int i,int j, int k)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; const T&amp;amp;Mat::at(int i, int j, int k) const&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; T&amp;amp; Mat::at(constint* idx)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; template&amp;lt;typename T&amp;gt; const T&amp;amp;Mat::at(const int* idx) const&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;i&lt;/span&gt; &lt;span&gt;–索引&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt; &lt;span&gt;维度&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;j&lt;/span&gt; &lt;span&gt;–&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt; &lt;span&gt;维度的索引&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;k&lt;/span&gt; &lt;span&gt;–&lt;/span&gt; &lt;span&gt;沿&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt; &lt;span&gt;维度的索引&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;pt&lt;/span&gt; &lt;span&gt;–&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Point(j,i)&lt;/span&gt; &lt;span&gt;作为指定元素的位置。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;idx&lt;/span&gt; &lt;span&gt;–&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Mat::dims&lt;/span&gt; &lt;span&gt;数组的索引&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    Mat M&lt;/span&gt;= Mat::eye(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;&lt;span&gt;, CV_8U);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;M.rows; i++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; M.cols; j++&lt;span&gt;)
        {
            M.at&lt;/span&gt;&amp;lt;uchar&amp;gt;(i, j) = j / &lt;span&gt;10&lt;/span&gt; * &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
        }

    imshow(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pic1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, M);
    waitKey(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200210210436148-1076143116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;）指针访问&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
Mat mat = Mat(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;&lt;span&gt;, CV_8UC1);
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rows=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; mat.rows &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,cols=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; mat.cols &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; mat.rows; i++&lt;span&gt;)
{
    uchar&lt;/span&gt;* row = mat.ptr&amp;lt;uchar&amp;gt;(i); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 行指针&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; mat.cols; j++) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历每一行&lt;/span&gt;
&lt;span&gt;    {
        row[j] &lt;/span&gt;= (uchar)((j / 5) * &lt;span&gt;10&lt;/span&gt;&lt;span&gt;); 
    }
}
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;M = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; format(mat, Formatter::FMT_PYTHON) &amp;lt;&amp;lt; endl &amp;lt;&amp;lt;&lt;span&gt; endl;
waitKey(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;输出如下。&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;77.5&quot;&gt;&lt;tr readability=&quot;232.5&quot;&gt;&lt;td readability=&quot;158&quot;&gt;
&lt;p&gt;rows=10,cols=15&lt;br/&gt;M =&lt;br/&gt;[[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20],&lt;br/&gt;[ 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20]]&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; &lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;span&gt;）&lt;strong&gt;迭代器&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;iterator&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;访问&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
Mat M = Mat(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;&lt;span&gt;, CV_8UC3);
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rows=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; M.rows &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,cols=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; M.cols &amp;lt;&amp;lt;&lt;span&gt; endl;

Mat_&lt;/span&gt;&amp;lt;Vec3b&amp;gt;::iterator it = M.begin&amp;lt;Vec3b&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始位置的迭代器&lt;/span&gt;
Mat_&amp;lt;Vec3b&amp;gt;::iterator itend = M.end&amp;lt;Vec3b&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;终止位置的迭代器&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; (; it != itend; it++&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理BGR三个通道&lt;/span&gt;
    (*it)[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;182&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;
    (*it)[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;194&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;
    (*it)[&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;154&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;
&lt;span&gt;}
imshow(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pic1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, M);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;使用下面配色表实验：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200210210606257-496707742.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;配色&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;：&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;RGB&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;182&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;194,154&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200210210638891-348256228.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;配色&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;RGB&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;229&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;131, 8&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/743748/202002/743748-20200210210655071-6805842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.4&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;其他数据结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;）点的表示：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Point&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Point p1 = { &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt; };
Point p2 &lt;/span&gt;= Point2i(&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
Point2f p3;
p3.x &lt;/span&gt;= &lt;span&gt;1.1&lt;/span&gt;&lt;span&gt;;
p3.y &lt;/span&gt;= &lt;span&gt;1.2&lt;/span&gt;&lt;span&gt;;
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p1=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; p1 &amp;lt;&amp;lt;&lt;span&gt; endl;
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p2=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; p2 &amp;lt;&amp;lt;&lt;span&gt; endl;
cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p3=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; p3 &amp;lt;&amp;lt;&lt;span&gt; endl;
waitKey(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;输出为：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;p1=[2, 3]&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;p2=[3, 4]&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;p3=[1.1, 1.2]&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;）颜色表示：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Scalar&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;Scalar&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;r, g, b&lt;/span&gt;&lt;span&gt;）分别表示红绿蓝颜色。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;span&gt;）尺寸的表示：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Size&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Size a = Size(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;&lt;span&gt;);
cout &lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a.width=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a.width &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:a.height=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a.height;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;输出为：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;a.width=5:a.height=6&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4&lt;/span&gt;&lt;span&gt;）矩形的表示：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Rect&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
Rect rect = Rect(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:x、y、width、height&lt;/span&gt;
cout &amp;lt;&amp;lt; rect.area() &amp;lt;&amp;lt; endl;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回rect的面积 200&lt;/span&gt;
cout &amp;lt;&amp;lt; rect.size() &amp;lt;&amp;lt; endl;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回rect的尺寸 [10 × 20]&lt;/span&gt;
cout &amp;lt;&amp;lt; rect.tl() &amp;lt;&amp;lt; endl;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回rect的左上顶点的坐标 [100, 50]&lt;/span&gt;
cout &amp;lt;&amp;lt; rect.br() &amp;lt;&amp;lt; endl;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回rect的右下顶点的坐标 [110, 70]&lt;/span&gt;
cout &amp;lt;&amp;lt; rect.width &amp;lt;&amp;lt; endl;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回rect的宽度 10&lt;/span&gt;
cout &amp;lt;&amp;lt; rect.height &amp;lt;&amp;lt; endl;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回rect的高度 20&lt;/span&gt;
cout &amp;lt;&amp;lt;  rect.contains(Point(&lt;span&gt;101&lt;/span&gt;, &lt;span&gt;51&lt;/span&gt;) ) &amp;lt;&amp;lt; endl;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回布尔变量，判断是否包含Point点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;输出为：&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;
&lt;p&gt;200&lt;/p&gt;
&lt;p&gt;[10 x 20]&lt;/p&gt;
&lt;p&gt;[100, 50]&lt;/p&gt;
&lt;p&gt;[110, 70]&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;span&gt;、参考文献&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mat - The Basic Image Container&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://docs.opencv.org/master/d6/d6d/tutorial_mat_the_basic_image_container.html&quot;&gt;https://docs.opencv.org/master/d6/d6d/tutorial_mat_the_basic_image_container.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;cv::Mat Class Reference&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://docs.opencv.org/3.1.0/d3/d63/classcv_1_1Mat.html&quot;&gt;https://docs.opencv.org/3.1.0/d3/d63/classcv_1_1Mat.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;OpenCV Mat&lt;/span&gt; &lt;span&gt;常用的基础知识&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/Librarvl/article/details/89892352&quot;&gt;https://blog.csdn.net/Librarvl/article/details/89892352&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;OpenCV Mat&lt;/span&gt;&lt;span&gt;类详解和用法&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/Mason_Mao/article/details/82254285&quot;&gt;https://blog.csdn.net/Mason_Mao/article/details/82254285&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;5&lt;/span&gt;&lt;span&gt;、《&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;OpenCV3&lt;/span&gt; &lt;span&gt;编程入门》&lt;/span&gt; &lt;span&gt;，&lt;/span&gt; &lt;span&gt;电子工业出版社，毛星雨著&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;3.6082474226804&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;  尊重原创技术文章，转载请注明。&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/pingwen/p/12292693.html&quot;&gt;https://www.cnblogs.com/pingwen/p/12292693.html&lt;/a&gt;&lt;a href=&quot;https://i-beta.cnblogs.com/posts/edit-done;postId=12292693&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 11 Feb 2020 00:48:00 +0000</pubDate>
<dc:creator>啊哈彭</dc:creator>
<og:description>OpenCV3入门—Mat操作</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/pingwen/p/12292693.html</dc:identifier>
</item>
<item>
<title>重磅！K8S 1.18版本将内置支持SideCar容器。 - justmine</title>
<link>http://www.cnblogs.com/justmine/p/12292861.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/justmine/p/12292861.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;作者：&lt;strong&gt;justmine&lt;/strong&gt;&lt;br/&gt;头条号：&lt;strong&gt;大数据与云原生&lt;/strong&gt;&lt;br/&gt;微信公众号：&lt;strong&gt;大数据与云原生&lt;/strong&gt;&lt;br/&gt;创作不易，在满足创作共用版权协议的基础上可以转载，但请以超链接形式注明出处。&lt;br/&gt;为了方便阅读，微信公众号已按分类排版，后续的文章将在移动端首发，想学习&lt;strong&gt;云原生&lt;/strong&gt;相关知识，请&lt;strong&gt;关注我&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;Kubernetes的目标不仅是使分布式应用程序的部署和运维变得简单可靠，还旨在能轻松地创建“云原生”应用程序，即易于创建在云环境中运行的分布式应用程序和服务，于是从1.18版本开始K8S将原生支持生命周期类型为SideCar的容器。&lt;/p&gt;
&lt;p&gt;在云原生时代，通过将应用的非业务功能提到SideCar容器实现解耦，避免重复建设，给运维人员提供更为丰富而深入的控制同时，也大大减轻了开发人员的负担。&lt;/p&gt;
&lt;p&gt;随着越来越多的应用程序开始实施这种模式，在K8S中出现了很多的问题。很快，Kubernetes意识到应该提供一种边车模式的容器，并以不同的方式处理此类容器的生命周期。&lt;/p&gt;
&lt;h2 id=&quot;二痛点&quot;&gt;二、痛点&lt;/h2&gt;
&lt;p&gt;Sidecar容器的所有问题都与容器生命周期相关性有关。由于Pod中的常规容器之间没有区别，因此无法控制哪个容器首先启动或最后终止，但是先正确运行Sidecar容器通常是应用程序容器正确运行的要求。&lt;/p&gt;
&lt;h3 id=&quot;pod启动&quot;&gt;Pod启动&lt;/h3&gt;
&lt;p&gt;让我们看一个Istio服务网格示例。Envoy边车负责将所有传入和传出流量代理到应用程序容器。因此，在代理启动并运行之前，应用程序应该无法发送或接收流量。此时，如果应用程序尝试出站访问，则K8S的就绪性探针便形同虚设。如果应用容器先启动，您会在日志中看到很多莫名的错误消息，明明应用已启动了，为什么还报503呢？但如果代理容器正常启动，但业务容器遭遇&lt;code&gt;CrashLoopBackoffs&lt;/code&gt;时，应用容器根本启动失败，此时代理容器该何去何从？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1082769/202002/1082769-20200210223653702-1862907052.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实这也不是一个非常棘手的问题，我们可以在应用程序容器的启动脚本中添加几秒钟的延迟，通过一个丑陋的解决方法间接地解决此问题，这也是Istio当下的做法。&lt;/p&gt;
&lt;h2 id=&quot;三解决方案&quot;&gt;三、解决方案&lt;/h2&gt;
&lt;p&gt;为了彻底解决上述痛点，从1.18版本开始，K8S内置的Sidecar功能将确保边车在正常业务流程开始之前就启动并运行，即通过更改pod的启动生命周期，在init容器完成后启动sidecar容器，在sidecar容器就绪后启动业务容器，从启动流程上保证顺序性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1082769/202002/1082769-20200210223709746-1615498561.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四新功能的影响&quot;&gt;四、新功能的影响&lt;/h2&gt;
&lt;h3 id=&quot;作业完成&quot;&gt;作业完成&lt;/h3&gt;
&lt;p&gt;如果Kubernetes作业具有Sidecar容器，则即使主容器完成后它仍将继续运行，并且作业本身&lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/25908&quot;&gt;永远不会达到&lt;/a&gt;完成状态。因为解决该问题的唯一方法是在业务过程完成时以某种方式发送信号给sidecar容器以退出。&lt;/p&gt;
&lt;p&gt;这种解决方法存在一些问题：这意味着使用自定义逻辑扩展&lt;em&gt;所有作业&lt;/em&gt;，并以某种方式在容器之间进行同步：通过共享的暂存卷或某些临时解决方案，例如Envoy的&lt;code&gt;/quitquitquit&lt;/code&gt;终结点。&lt;/p&gt;
&lt;p&gt;故从Kubernetes 1.18开始，如果所有普通容器都已到达终端状态（&lt;code&gt;Succeeded&lt;/code&gt;for &lt;code&gt;restartPolicy=OnFailure&lt;/code&gt;或&lt;code&gt;Succeeded/Failed&lt;/code&gt;for &lt;code&gt;restartPolicy=Never&lt;/code&gt;），则将向所有sidecar容器发送 &lt;code&gt;SIGTERM&lt;/code&gt;信号。&lt;/p&gt;
&lt;h3 id=&quot;pod关闭&quot;&gt;Pod关闭&lt;/h3&gt;
&lt;p&gt;Pod关闭与Pod启动类似。如果Sidecar在业务过程之前终止，则在正常拆除业务应用程序期间可能会导致大量错误。在正常关闭期间，应用程序可以执行某种清除逻辑，例如关闭长期连接，回滚事务或将状态保存到外部存储(例如s3)。如果首先杀死了边车，则可能会导致清理逻辑无法正常运行。&lt;/p&gt;
&lt;p&gt;一个很好的例子是argo项目中报告的一个&lt;a href=&quot;https://github.com/argoproj/argo/issues/1282&quot;&gt;问题&lt;/a&gt;。Argo尝试将容器日志存储在s3中，但是如果&lt;code&gt;istio-proxy&lt;/code&gt;先杀死则无法这样做，因为所有流量都应流经该容器。&lt;/p&gt;
&lt;p&gt;此类问题的解决方案类似于启动问题。通过更改Pod终止生命周期，首先向所有应用容器发送一个&lt;code&gt;SIGTERM&lt;/code&gt;信号，等所有应用容器全部正常终止后，再向所有边车容器发送&lt;code&gt;SIGTERM&lt;/code&gt;信号。在正常的平滑期(&lt;code&gt;TerminationGracePeriod&lt;/code&gt;)内，如果所有的应用容器还未终止，像以前一样发送&lt;code&gt;SIGKILL&lt;/code&gt;信号强制终止，然后发送&lt;code&gt;SIGTERM&lt;/code&gt;信号给边车容器。&lt;/p&gt;
&lt;h2 id=&quot;五如何使用新功能&quot;&gt;五、如何使用新功能？&lt;/h2&gt;
&lt;p&gt;通过更改Pod规范中的&lt;code&gt;container.lifecycle.type&lt;/code&gt;将容器标记为边车类型：&lt;code&gt;Sidecar&lt;/code&gt;，默认为&lt;code&gt;Standard&lt;/code&gt;，如下：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: bookings-v1-b54bc7c9c-v42f6
  labels:
    app: demoapp
spec:
  containers:
  - name: bookings
    image: banzaicloud/allspark:0.1.1
    ...
  - name: istio-proxy
    image: docker.io/istio/proxyv2:1.4.3
    lifecycle:
      type: Sidecar
    ...&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：在k8s 1.18版本，边车模式仅仅作为支撑功能，故需要通过Api Server显示启用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;六总结&quot;&gt;六、总结&lt;/h2&gt;
&lt;p&gt;本篇先详细介绍了K8S即将推出的重磅功能，可以说此功能专为云原生而设计，这也是为什么K8S会越来越受欢迎的原因，然后进一步分析了当下K8S实施边车模式的痛点，以及引入新功能的一些影响，最后通过例子演示了如何应用边车模式到Pod中，可以看出此功能将从根本上解决目前很多使用边车模式存在的问题。&lt;/p&gt;
&lt;h2 id=&quot;七最后&quot;&gt;七、最后&lt;/h2&gt;
&lt;p&gt;如果有什么疑问和见解，欢迎评论区交流。&lt;/p&gt;
&lt;p&gt;如果觉得本篇有帮助的话，欢迎&lt;strong&gt;推荐&lt;/strong&gt;和&lt;strong&gt;转发&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果觉得本篇非常不错的话，可以请作者吃个鸡腿，创作的源泉将如滔滔江水连绵不断，嘿嘿。&lt;/p&gt;
&lt;h2 id=&quot;八参考资料&quot;&gt;八、参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://banzaicloud.com/blog/k8s-sidecars&quot; class=&quot;uri&quot;&gt;https://banzaicloud.com/blog/k8s-sidecars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/enhancements/issues/753&quot; class=&quot;uri&quot;&gt;https://github.com/kubernetes/enhancements/issues/753&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/blog/2016/06/container-design-patterns&quot; class=&quot;uri&quot;&gt;https://kubernetes.io/blog/2016/06/container-design-patterns&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 11 Feb 2020 00:44:00 +0000</pubDate>
<dc:creator>justmine</dc:creator>
<og:description>作者： justmine 头条号： 大数据与云原生 微信公众号： 大数据与云原生 创作不易，在满足创作共用版权协议的基础上可以转载，但请以超链接形式注明出处。 为了方便阅读，微信公众号已按分类排版，后</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/justmine/p/12292861.html</dc:identifier>
</item>
<item>
<title>Python中heapq与优先队列【详细】 - TechFlow2019</title>
<link>http://www.cnblogs.com/techflow/p/12293767.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/techflow/p/12293767.html</guid>
<description>&lt;p&gt;本文始发于个人公众号：&lt;strong&gt;TechFlow&lt;/strong&gt;, 原创不易，求个关注&lt;/p&gt;

&lt;p&gt;今天的文章来介绍Python当中一个蛮有用的库——&lt;strong&gt;heapq&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;heapq的全写是heap queue，是堆队列的意思。这里的&lt;strong&gt;堆和队列&lt;/strong&gt;都是数据结构，在后序的文章当中我们会详细介绍，今天只介绍heapq的用法，如果不了解heap和queue原理的同学可以忽略，我们并不会深入太多，会在之后的文章里详细阐述。&lt;/p&gt;
&lt;p&gt;在介绍用法之前，我们需要先知道优先队列的定义。&lt;strong&gt;队列&lt;/strong&gt;大家应该都不陌生，也是非常基础简单的数据结构。我们可以想象成队列里的所有元素排成一排，新的元素只能从队尾加入队列，元素要出队列只能通过队首，&lt;strong&gt;不能中途从队列当中退出&lt;/strong&gt;。而优先队列呢，是给队列当中的元素每一个都设置了优先级，使得队伍当中的元素会&lt;strong&gt;自动按照优先级排序&lt;/strong&gt;，优先级高的排在前面。&lt;/p&gt;
&lt;p&gt;也就是说Python当中的heapq就是一个维护优先队列的library，我们通过调用它可以轻松实现优先队列的功能。&lt;/p&gt;

&lt;h2 id=&quot;最大或最小的k个元素&quot;&gt;最大或最小的K个元素&lt;/h2&gt;

&lt;p&gt;我们来看一个实际的问题，假设我们当下有N个杂乱无章的元素，但是我们只关心其中最大的K个或者是最小的K个元素。我们想从整个数组当中将这部分抽取出来，应该怎么办呢？&lt;/p&gt;
&lt;p&gt;这个问题在实际当中非常常见，随便就可以举出例子来。比如用户输入了搜索词，我们根据用户的搜索词找到了大量的内容。我们想要根据算法筛选出用户最有可能点击的文本来，机器学习的模型可以给每一个文本一个预测的分数。之后，我们就需要&lt;strong&gt;选出分数最大的K个结果&lt;/strong&gt;。这种类似的场景还有很多，利用heapq库里的nlargest和nsmallest接口可以非常方便地做到这点。&lt;/p&gt;
&lt;p&gt;我们一起来看一个例子：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import heapq

nums = [14, 20, 5, 28, 1, 21, 16, 22, 17, 28]
heapq.nlargest(3, nums)
# [28, 28, 22]
heapq.nsmallest(3, nums)
# [1, 5, 14]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;heapq的nlargest和nsmallest接受两个参数，第一个参数是K，也就是返回的元素的数量，第二个参数是传入的数组，heapq返回的正是传入的数组当中的前K大或者是前K小。&lt;/p&gt;
&lt;p&gt;这里有一个问题，如果我们数组当中的元素是一个对象呢？应该怎么办？&lt;/p&gt;
&lt;p&gt;其实也很简单，有了解过Python自定义关键词排序的同学应该知道，和排序一样，我们可以通过&lt;strong&gt;匿名函数&lt;/strong&gt;实现。&lt;/p&gt;

&lt;h2 id=&quot;匿名函数&quot;&gt;匿名函数&lt;/h2&gt;

&lt;p&gt;我们都知道，在Python当中通过def可以定义一个函数。通过def定义的函数都有函数名，所以称为&lt;strong&gt;有名函数&lt;/strong&gt;。除了有名函数之外，Python还支持匿名函数。顾名思义，就是没有函数名的函数。也就是说它其他方面都和普通函数一样，只不过没有名字而已。&lt;/p&gt;
&lt;p&gt;初学者可能会纳闷，&lt;strong&gt;函数没有名字应该怎么调用呢&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;会有这个疑惑很正常，这是因为习惯了面向过程的编程，对面向对象理解不够深入导致的。在许多高级语言当中，&lt;strong&gt;一切皆对象&lt;/strong&gt;，一个类，一个函数，一个int都是对象。既然函数也是对象，那么函数自然也可以用来传递，不仅可以用来传递，还可以用来返回。这是函数式编程的概念了，我们这里不多做深入。&lt;/p&gt;
&lt;p&gt;当然，普通函数也一样可以传递，起到的效果一样。只不过在编程当中，有些函数我们只会使用一次，&lt;strong&gt;没必要再单独定义一个函数&lt;/strong&gt;，使用匿名函数会非常方便。&lt;/p&gt;
&lt;p&gt;举个例子，比方说我有一个这样的函数：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def operate(x, func):
  return func(x)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个operate函数它接受两个参数，第一个参数是变量x，第二个&lt;strong&gt;参数是一个函数&lt;/strong&gt;。它会在函数内部调用func，返回func调用的结果。我现在要做这样一件事情，我希望根据x这个整数对4取余的余数来判断应该用什么样的func。如果对4的余数为0，我希望求一次方，如果余数是2，我希望求平方，以此类推。如果按照正常的方法，我们需要实现4个方法，然后依次传递。&lt;/p&gt;
&lt;p&gt;这当然是可以的，不过非常麻烦，如果使用匿名函数，就可以&lt;strong&gt;大大简化&lt;/strong&gt;代码量：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def get_result(x):
  if x % 4 == 0:
    return operate(x, lambda x: x)
  elif x % 4 == 1:
    return operate(x, lambda x: x ** 2)
  elif x % 4 == 2:
    return operate(x, lambda x: x ** 3)
  else:
    return operate(x, lambda x: x ** 4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的代码当中，&lt;strong&gt;我们通过lambda关键字定义了匿名函数&lt;/strong&gt;，避免了定义四种函数用来传递的情况。当然，这个问题还有更简单的写法，可以只用一个函数解决。&lt;/p&gt;
&lt;p&gt;我们来看lambda定义匿名函数的语法，首先是lambda关键字，表示我们当下定义的是一个匿名函数。之后跟的是这个匿名函数的参数，我们只用到一个变量x，所以只需要写一个x。如果我们需要用到多个参数，通过逗号分隔，当然也可以不用参数。写完参数之后，我们用冒号分开，冒号后面写的是返回的结果。&lt;/p&gt;
&lt;p&gt;我们也可以把匿名函数赋值给一个变量，之后我们就可以和调用普通函数一样来调用了：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;square = lambda x: x ** 2

print(square(3))
print(operate(3, square))&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;自定义排序&quot;&gt;自定义排序&lt;/h2&gt;

&lt;p&gt;回到之前的内容，如果我们想要heapq排序的是一个对象。那么heapq并不知道应该依据对象当中的哪个参数来作为排序的衡量标准，所以这个时候，需要我们自己&lt;strong&gt;定义一个获取关键字的函数&lt;/strong&gt;，传递给heapq，这样才可以完成排序。&lt;/p&gt;
&lt;p&gt;比如说，我们现在有一批电脑，我们希望heapq能够根据电脑的价格排序：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;laptops = [
    {'name': 'ThinkPad', 'amount': 100, 'price': 91.1},
    {'name': 'Mac', 'amount': 50, 'price': 543.22},
    {'name': 'Surface', 'amount': 200, 'price': 21.09},
    {'name': 'Alienware', 'amount': 35, 'price': 31.75},
    {'name': 'Lenovo', 'amount': 45, 'price': 16.35},
    {'name': 'Huawei', 'amount': 75, 'price': 115.65}
]

cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])
expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在调用nlargest和nsmallest的时候，我们额外传递了一个参数key，我们传入的是一个匿名函数，它返回的结果是这个对象的price，也就是说我们希望heapq根据对象的price来进行排序。&lt;/p&gt;

&lt;h2 id=&quot;优先队列&quot;&gt;优先队列&lt;/h2&gt;

&lt;p&gt;heapq除了可以返回最大最小的K个数之外，还实现了优先队列的接口。我们可以直接调用heapq.heapify方法，输入一个数组，返回的结果是根据这个数组生成的堆（等价于优先队列）。&lt;/p&gt;
&lt;p&gt;当然我们也可以从零开始，直接通过调用heapq的push和pop来维护这个堆。接下来，我们就通过heapq来自己动手实现一个优先队列，代码非常的简单，我想大家应该可以&lt;strong&gt;瞬间学会&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先是实现优先队列的部分：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import heapq

class PriorityQueue:
  
  def __init__(self):
    self._queue = []
    self._index =0
    
  def push(self, item, priority):
    # 传入两个参数，一个是存放元素的数组，另一个是要存储的元素，这里是一个元组。
    # 由于heap内部默认有小到大排，所以对priority取负数
    heapq.heappush(self._queue, (-priority, self._index, item))
    self._index += 1
  
  def pop(self):
    return heapq.heappop(self._queue)[-1]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其次我们来实际看一下运用的情况：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;q = PriorityQueue()

q.push('lenovo', 1)
q.push('Mac', 5)
q.push('ThinkPad', 2)
q.push('Surface', 3)

q.pop()
# Mac
q.pop()
# Surface&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到这里，关于heapq的应用方面就算是介绍完了，但是还没有真正的结束。&lt;/p&gt;
&lt;p&gt;我们需要分析一下heapq当中操作的复杂度，关于堆的部分我们暂时跳过，我们先来看nlargest和nsmallest。我在github当中找到了这个库的&lt;strong&gt;源码&lt;/strong&gt;，在方法的注释上，作者写下了这个方法的复杂度，和&lt;strong&gt;排序之后取前K个开销五五开&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def nlargest(n, iterable, key=None):
    &quot;&quot;&quot;Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    &quot;&quot;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们都知道排序的复杂度的期望是&lt;span class=&quot;math inline&quot;&gt;\(O(nlogn)\)&lt;/span&gt;，如果你了解堆的话，会知道堆一次插入元素的复杂度是&lt;span class=&quot;math inline&quot;&gt;\(logn\)&lt;/span&gt;。如果我们限定堆的长度是K，我们插入n次之后也只能保留K个元素。每次插入的复杂度是&lt;span class=&quot;math inline&quot;&gt;\(logK\)&lt;/span&gt;，一共插入n次，所以整体的复杂度是&lt;span class=&quot;math inline&quot;&gt;\(nlogK\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果K小一些，可能开销会比排序稍小，但是程度有限。那么有没有什么办法可以不用排序并且尽可能快地筛选出前K大或者是前K小的元素呢？&lt;/p&gt;
&lt;p&gt;我这里先卖个关子，我们之后的文章当中再来讲解。&lt;/p&gt;
&lt;p&gt;今天的文章就到这里，如果觉得有所收获，请顺手点个关注吧，你的举手之劳对我很重要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/11/17031aa8c8f8cd87?w=258&amp;amp;h=258&amp;amp;f=png&amp;amp;s=23988&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料&lt;/p&gt;
&lt;p&gt;Python CookBook Version3&lt;/p&gt;
&lt;p&gt;维基百科&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 11 Feb 2020 00:37:00 +0000</pubDate>
<dc:creator>TechFlow2019</dc:creator>
<og:description>本文始发于个人公众号： TechFlow , 原创不易，求个关注 今天的文章来介绍Python当中一个蛮有用的库—— heapq 。 heapq的全写是heap queue，是堆队列的意思。这里的 堆</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/techflow/p/12293767.html</dc:identifier>
</item>
<item>
<title>DjangoBBS项目功能拆分 - 辜老板</title>
<link>http://www.cnblogs.com/guyouyin123/p/12293758.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guyouyin123/p/12293758.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210204230288-1126079724.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;url(r'^get_code/', views.get_code, name='get_code'),

# 获取随机3个0-255数
def get_random():
    &quot;&quot;&quot;
    :return: 返回0-255三个随机数,元组
    &quot;&quot;&quot;
    return random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)


# 获取验证码
def get_code(request):
    # 1.产生一张随机颜色的图片
    img_obj = Image.new('RGB', (350, 35), get_random())
    # 2.产生一只在图片上的画笔
    img_draw = ImageDraw.Draw(img_obj)
    # 3.产生字体样式
    img_font = ImageFont.truetype(r'static\font\font.ttf', 35)
    io_obj = BytesIO()

    # 产生5个随机验证码
    code = ''
    for i in range(5):
        upper_str = chr(random.randint(65, 90))  # 大写字母
        lower_str = chr(random.randint(97, 122))  # 小写字母
        random_int = str(random.randint(0, 9))  # 数字
        # 随机取一个
        temp_str = random.choice([upper_str, lower_str, random_int])
        # 写在图片上,位置，内容，颜色，字体
        img_draw.text((45 + i * 60, -2), temp_str, get_random(), font=img_font)
        # 储存
        code += temp_str
    print(code)
    img_obj.save(io_obj, 'png')
    request.session['code'] = code
    return HttpResponse(io_obj.getvalue())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;img src=&quot;/get_code/&quot; alt=&quot;图片验证码&quot; id=&quot;id_img&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;js代码：&lt;/p&gt;
&lt;p&gt;原理：src改变，立马刷新。点击一次图片，给url添加一个？号&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;$('#id_img').click(function () {
        var oldSrc = $(this).attr('src');
        $(this).attr('src', oldSrc += '?')
    });&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210204359898-1748692275.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;注册&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;&amp;gt;
    &amp;lt;script src=&quot;https://cdn.bootcss.com/sweetalert/2.0.0/sweetalert.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&quot;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.css&quot;&amp;gt;
    {% load static %}
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;{% static '/bootstrap-3.3.7-dist/css/bootstrap.min.css'%}&quot;&amp;gt;
    &amp;lt;script src=&quot;{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
        &amp;lt;h2 class=&quot;text-center&quot;&amp;gt;注册页面&amp;lt;/h2&amp;gt;
        &amp;lt;div class=&quot;col-md-8 col-md-offset-2&quot;&amp;gt;
            &amp;lt;form id=&quot;myform&quot;&amp;gt;
                {% csrf_token %}

                {% for form in form_obj %}
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;{{ form.id_for_label }}&quot;&amp;gt;{{ form.label }}&amp;lt;/label&amp;gt;
                        {{ form }}
                        &amp;lt;span style=&quot;color: red&quot; class=&quot;pull-right&quot;&amp;gt;&amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                {% endfor %}

                &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                    &amp;lt;label for=&quot;id_avatar&quot;&amp;gt;头像
                        &amp;lt;img src=&quot;/static/images/default.jpg&quot; alt=&quot;&quot; width=&quot;100&quot; style=&quot;margin-left: 10px&quot; id=&quot;id_img&quot;&amp;gt;
                    &amp;lt;/label&amp;gt;
                    &amp;lt;input type=&quot;file&quot; name=&quot;myfile&quot; id=&quot;id_avatar&quot;&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;a href=&quot;/login/&quot;&amp;gt;&amp;lt;input type=&quot;button&quot; value=&quot;登录&quot; class=&quot;btn btn-success pull-left&quot;&amp;gt;&amp;lt;/a&amp;gt;
                &amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;input type=&quot;button&quot; value=&quot;注册&quot; class=&quot;btn btn-danger&quot; id=&quot;id_submit&quot;&amp;gt;

            &amp;lt;/form&amp;gt;

        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
    $('#id_avatar').change(function () {
        // 1 先获取用户上传的头像文件
        var avatarFile = $(this)[0].files[0];
        // 2 利用文件阅读器对象
        var myFileReader = new FileReader();
        // 3 将文件交由阅读器对象读取
        myFileReader.readAsDataURL(avatarFile);
        // 4 修改img标签的src属性  等待文件阅读器对象读取文件之后再操作img标签
        myFileReader.onload = function(){
            $('#id_img').attr('src',myFileReader.result)
        }

    });

    // 点击按钮触发ajax提交动作
    $('#id_submit').on('click',function () {
        // 1 先生成一个内置对象 FormData
        var myFormData = new FormData();
        // 2 添加普通键值对
        {#console.log($('#myform').serializeArray())#}
        $.each($('#myform').serializeArray(),function (index,obj) {
            myFormData.append(obj.name,obj.value)
        });
        // 3 添加文件数据
        myFormData.append('avatar',$('#id_avatar')[0].files[0]);
        // 4 发送数据
        $.ajax({
            url:'',
            type:'post',
            data:myFormData,
            // 两个关键性参数
            contentType:false,
            processData:false,

            success:function (data) {
                if (data.code===1000){
                    // 注册成功之后 应该跳转到后端返回过来的url
                    location.href = data.url
                }else{
                    $.each(data.msg,function(index,obj){
                        // 1 先手动拼接字段名所对应的input框的id值
                        var targetId = '#id_' + index;  // #id_username
                        // 2 利用id选择器查找标签  并且将div标签添加报错类
                        $(targetId).next().text(obj[0]).parent().addClass('has-error')
                    })
                }
            }
        })
    });
    $('input').focus(function () {
        // 移除span标签内部的文本  还需要移除div标签的class中has-error属性
        $(this).next().text('').parent().removeClass('has-error')
    })
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端urls.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 注册
    url(r'^register/', views.register, name='register'),&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 注册
def register(request):
    form_obj = MyRegForm()
    if request.method == 'POST':
        back_dic = {'code': 1000, 'msg': &quot;&quot;}
        # 校验用户名、密码
        form_obj = MyRegForm(request.POST)
        if form_obj.is_valid():
            # 用变量接收正确的结果 clean_data = {'username'   'password'  're_password' 'email'}
            clean_data = form_obj.cleaned_data
            # 将确认密码键值对删除，表中没有re_password
            clean_data.pop('re_password')

            # 把签名、用户CSS名字存进Blog表中
            sign = clean_data.get('sign')
            username = clean_data.get('username')
            site_theme = username + '.css'
            models.Blog.objects.create(site_name=username, site_title=sign, site_theme=site_theme)

            # 添加字段
            clean_data['blog'] = models.Blog.objects.filter(site_name=username).first()
            clean_data.pop('sign')

            # 额外做的事情：给每个新的注册用户添加3个默认的分类和3个默认的标签
            create_list = []
            blog = models.Blog.objects.filter(site_name=username).first()
            for i in ['一', '二', '三']:
                category_name = username+'的分类'+i
                create_list.append(models.Category(name=category_name, blog=blog))
            models.Category.objects.bulk_create(create_list)

            # 添加3个默认标签
            create_list = []
            for i in ['一', '二', '三']:
                tag_name = username + '的标签' + i
                create_list.append(models.Tag(name=tag_name, blog=blog))
            models.Tag.objects.bulk_create(create_list)
            # 获取用户头像文件
            avatar_obj = request.FILES.get('avatar')
            # 判断用户头像文件是否为空,用户没有上传
            if avatar_obj:
                # 用户上传了，添加到clean_data中
                clean_data['avatar'] = avatar_obj  # clean_data = {'username'  'password'  'email' 'avatar'}
            models.UserInfo.objects.create_user(**clean_data)  # 打散传入  ？？=？？的形式
            back_dic['msg'] = '注册成功'
            back_dic['url'] = '/login/'
        else:
            back_dic['code'] = 2000
            back_dic['msg'] = form_obj.errors
        return JsonResponse(back_dic)
    return render(request, 'register.html', locals())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;myforms.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django import forms
from app01 import models

class MyRegForm(forms.Form):
    username = forms.CharField(min_length=3,max_length=8,label='用户名',
                               error_messages={
                                   &quot;min_length&quot;:'用户名最短3位',
                                   &quot;max_length&quot;:'用户名最长8位',
                                   &quot;required&quot;:'用户名不能为空',
                               },widget=forms.widgets.TextInput(attrs={'class':'form-control'})
                               )

    password = forms.CharField(min_length=3, max_length=8, label='密码',
                               error_messages={
                                   &quot;min_length&quot;: '密码最短3位',
                                   &quot;max_length&quot;: '密码最长8位',
                                   &quot;required&quot;: '密码不能为空',
                               }, widget=forms.widgets.PasswordInput(attrs={'class': 'form-control'})
                               )

    re_password = forms.CharField(min_length=3, max_length=8, label='确认密码',
                               error_messages={
                                   &quot;min_length&quot;: '确认密码最短3位',
                                   &quot;max_length&quot;: '确认密码最长8位',
                                   &quot;required&quot;: '确认密码不能为空',
                               }, widget=forms.widgets.PasswordInput(attrs={'class': 'form-control'})
                               )

    email = forms.EmailField(label='邮箱',
                             error_messages={
                                 &quot;required&quot;: '邮箱不能为空',
                                 &quot;invalid&quot;:&quot;邮箱格式不正确&quot;
                             },
                             widget=forms.widgets.EmailInput(attrs={'class': 'form-control'})
                             )
    sign = forms.CharField(min_length=5, max_length=15, label='学习宣言',
                           error_messages={
                               &quot;min_length&quot;: '学习宣言最短5位',
                               &quot;max_length&quot;: '学习宣言最长15位',
                               &quot;required&quot;: '学习宣言不能为空',}
                           , widget=forms.widgets.TextInput(attrs={'class': 'form-control'})
                           )

    # 钩子函数
    # 局部钩子校验用户名是否已存在
    def clean_username(self):
        username = self.cleaned_data.get('username')
        is_alive = models.UserInfo.objects.filter(username=username)
        if is_alive:
            self.add_error('username','用户名已存在')
        return username


    # 全局钩子校验密码与确认密码是否一致
    def clean(self):
        password = self.cleaned_data.get('password')
        re_password = self.cleaned_data.get('re_password')
        if not password == re_password:
            self.add_error('re_password','两次密码不一致')
        return self.cleaned_data&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210205120545-553090754.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;&amp;gt;
    &amp;lt;script src=&quot;https://cdn.bootcss.com/sweetalert/2.0.0/sweetalert.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&quot;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.css&quot;&amp;gt;
    {% load static %}
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;{% static '/bootstrap-3.3.7-dist/css/bootstrap.min.css'%}&quot;&amp;gt;
    &amp;lt;script src=&quot;{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;h2 class=&quot;text-center&quot;&amp;gt;登录页面&amp;lt;/h2&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
        &amp;lt;div class=&quot;col-md-8 col-md-offset-2&quot;&amp;gt;
            &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                &amp;lt;label for=&quot;id_username&quot;&amp;gt;用户名&amp;lt;/label&amp;gt;
                &amp;lt;input type=&quot;text&quot; name=&quot;username&quot; class=&quot;form-control&quot; id=&quot;id_username&quot;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                &amp;lt;label for=&quot;id_password&quot;&amp;gt;密码&amp;lt;/label&amp;gt;
                &amp;lt;input type=&quot;password&quot; name=&quot;password&quot; class=&quot;form-control&quot; id=&quot;id_password&quot;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                &amp;lt;label for=&quot;id_code&quot;&amp;gt;验证码&amp;lt;/label&amp;gt;
                &amp;lt;div class=&quot;row&quot;&amp;gt;
                    &amp;lt;div class=&quot;col-md-6&quot;&amp;gt;
                        &amp;lt;input type=&quot;text&quot; name=&quot;code&quot; class=&quot;form-control&quot; id=&quot;id_code&quot;&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;col-md-6&quot;&amp;gt;
                        &amp;lt;img src=&quot;/get_code/&quot; alt=&quot;图片验证码&quot; id=&quot;id_img&quot;&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input type=&quot;button&quot; value=&quot;登录&quot; class=&quot;btn btn-success&quot; id=&quot;id_submit&quot;&amp;gt;
            &amp;lt;a href=&quot;/register/&quot;&amp;gt;&amp;lt;input type=&quot;button&quot; value=&quot;注册&quot; class=&quot;btn btn-danger&quot;&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;span style=&quot;color: red&quot; id=&quot;error&quot;&amp;gt;&amp;lt;/span&amp;gt;

        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    $('#id_img').click(function () {
        var oldSrc = $(this).attr('src');
        $(this).attr('src', oldSrc += '?')
    });

    $('#id_submit').click(function () {
        $.ajax({
            url:'',
            type:'post',
            data:{
                'username': $('#id_username').val(),
                'password': $('#id_password').val(),
                'csrfmiddlewaretoken':'{{ csrf_token }}',
                'code':$('#id_code').val()
            },
            success:function (data) {
                if (data.code === 1000){
                    // 登录成功，跳转页面
                    location.href = data.url
                }else {
                    // 点击此按钮，添加文本信息
                    $('#error').text(data.msg)
                }
            }
        })
    })

&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端代码：&lt;/p&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 登录
    url(r'^login/', views.login, name='login'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 登录
def login(request):
    back_dic = {'code': None, 'msg': None}
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        code = request.POST.get('code')  # 从前端拿过来的验证码
        # 先对比验证码
        if request.session.get('code').lower() == code.lower():
            # 校验用户名和密码
            user_obj = auth.authenticate(username=username, password=password)
            if user_obj:
                # 记录登录状态
                auth.login(request, user_obj)
                back_dic['code'] = 1000
                back_dic['msg'] = '登录成功'
                back_dic['url'] = '/home/'
                # back_dic['url'] = '/%s/' % username
            else:
                back_dic['code'] = 2000
                back_dic['msg'] = '用户名或密码错误'
        else:
            back_dic['code'] = 3000
            back_dic['msg'] = '验证码错误'
        return JsonResponse(back_dic)
    return render(request, 'login.html')
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;settings.py:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LOGIN_URL = '/login/'
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210211641199-446934820.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; data-toggle=&quot;modal&quot; data-target=&quot;.bs-example-modal-lg&quot;&amp;gt;修改密码&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;


{#修改密码模态框#}
&amp;lt;div class=&quot;modal fade bs-example-modal-lg&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myLargeModalLabel&quot;&amp;gt;
    &amp;lt;div class=&quot;modal-dialog modal-lg&quot; role=&quot;document&quot;&amp;gt;
        &amp;lt;div class=&quot;modal-content&quot;&amp;gt;
            &amp;lt;h2 class=&quot;text-center&quot;&amp;gt;修改密码&amp;lt;/h2&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-md-8 col-md-offset-2&quot;&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;&quot;&amp;gt;用户名&amp;lt;/label&amp;gt;
                        &amp;lt;input type=&quot;text&quot; name=&quot;username&quot; value={{ request.user.username }} class=&quot;form-control&quot;
                               disabled&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;id_old_password&quot;&amp;gt;原密码&amp;lt;/label&amp;gt;
                        &amp;lt;input type=&quot;password&quot; name=&quot;old_password&quot; class=&quot;form-control&quot; id=&quot;id_old_password&quot;&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;id_new_password&quot;&amp;gt;新密码&amp;lt;/label&amp;gt;
                        &amp;lt;input type=&quot;password&quot; name=&quot;new_password&quot; class=&quot;form-control&quot; id=&quot;id_new_password&quot;&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;id_confirm_password&quot;&amp;gt;确认密码&amp;lt;/label&amp;gt;
                        &amp;lt;input type=&quot;password&quot; name=&quot;confirm_password&quot; class=&quot;form-control&quot; id=&quot;id_confirm_password&quot;&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;button class=&quot;btn btn-primary&quot; id=&quot;id_set&quot;&amp;gt;修改&amp;lt;/button&amp;gt;
                    &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&amp;gt;取消&amp;lt;/button&amp;gt;
                    &amp;lt;span style=&quot;color: red&quot;&amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;

            &amp;lt;/div&amp;gt;
            &amp;lt;br&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;js代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
{#修改密码#}
    $('#id_set').click(function () {
        var $btn = $(this);
        $.ajax({
            url: '{% url 'set_password' %}',
            type: 'post',
            data: {
                old_password: $('#id_old_password').val(),
                new_password: $('#id_new_password').val(),
                confirm_password: $('#id_confirm_password').val(),
                csrfmiddlewaretoken: '{{ csrf_token }}'
            },
            success: function (data) {
                if (data.code === 1000) {
                    location.href = data.url
                } else {
                    $btn.next().next().text(data.msg)
                }
            }
        })
    });
 &amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端代码：&lt;/p&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 修改密码
    url(r'^set_password', views.set_password, name='set_password'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 修改密码
@login_required
def set_password(request):
    if request.is_ajax():
        back_dic = {'code': 1000, 'msg': ''}
        old_password = request.POST.get('old_password')
        new_password = request.POST.get('new_password')
        confirm_password = request.POST.get('confirm_password')
        if new_password == confirm_password:
            is_right = request.user.check_password(old_password)
            if is_right:
                request.user.set_password(new_password)
                request.user.save()
                back_dic['msg'] = '修改成功'
                back_dic['url'] = reverse('login')
            else:
                back_dic['code'] = 2000
                back_dic['msg'] = '原密码错误'
        else:
            back_dic['code'] = 3000
            back_dic['msg'] = '两次密码不一致'
        return JsonResponse(back_dic)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210211746711-1856995233.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;/set_avatar/&quot;&amp;gt;修改头像&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;stt_avatar.html:&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;{% extends 'base.html' %}

{% block content %}
    &amp;lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;a href=&quot;/home/&quot;&amp;gt;返回&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;input type=&quot;file&quot; name=&quot;myfile&quot; id=&quot;id_avatar&quot;&amp;gt;&amp;lt;br&amp;gt;
        {% csrf_token %}
        &amp;lt;div class=&quot;form-group&quot;&amp;gt;
            &amp;lt;label for=&quot;id_avatar&quot;&amp;gt;
                &amp;lt;img src=&quot;/static/images/default.jpg&quot; alt=&quot;&quot; width=&quot;100&quot; id=&quot;id_img&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;span&amp;gt;新头像&amp;lt;/span&amp;gt;
            &amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;label for=&quot;id_avatar&quot;&amp;gt;
            &amp;lt;img src=&quot;/media/{{ request.user.avatar }}/&quot; width=&quot;200&quot; alt=&quot;原头像&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;span&amp;gt;原头像&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;input type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/form&amp;gt;



    &amp;lt;script&amp;gt;
        $('#id_avatar').change(function () {
            // 1 先获取用户上传的头像文件
            var avatarFile = $(this)[0].files[0];
            // 2 利用文件阅读器对象
            var myFileReader = new FileReader();
            // 3 将文件交由阅读器对象读取
            myFileReader.readAsDataURL(avatarFile);
            // 4 修改img标签的src属性  等待文件阅读器对象读取文件之后再操作img标签
            myFileReader.onload = function () {
                $('#id_img').attr('src', myFileReader.result)
            }

        });
    &amp;lt;/script&amp;gt;
{% endblock %}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端代码：&lt;/p&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 修改用户头像
    url(r'^set_avatar/', views.set_avatar, name='set_avatar'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 修改头像
@ login_required
def set_avatar(request):
    if request.method == 'POST':
        avatar_obj = request.FILES.get('myfile')
        # models.UserInfo.objects.filter(pk=request.user.pk).update(avatar=avatar_obj)   # 不会帮你自动添加前缀
        # 用自己的save方法，自动帮你添加前缀
        request.user.avatar = avatar_obj
        request.user.save()
    return render(request, 'set_avatar.html')
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210211818069-1621447233.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; data-toggle=&quot;modal&quot; data-target=&quot;.set_sign&quot;&amp;gt;编辑签名&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

{#编辑签名模态框#}
&amp;lt;div class=&quot;modal fade bs-example-modal-lg set_sign&quot; id=&quot;set_sign&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;
     aria-labelledby=&quot;myLargeModalLabel&quot;&amp;gt;
    &amp;lt;div class=&quot;modal-dialog modal-lg&quot; role=&quot;document&quot;&amp;gt;
        &amp;lt;div class=&quot;modal-content&quot;&amp;gt;
            &amp;lt;h2 class=&quot;text-center&quot;&amp;gt;编辑签名&amp;lt;/h2&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-md-8 col-md-offset-2&quot;&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;&quot;&amp;gt;用户名&amp;lt;/label&amp;gt;
                        &amp;lt;input type=&quot;text&quot; name=&quot;username&quot; value={{ request.user.username }} class=&quot;form-control&quot;
                               disabled&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;id_old_sign&quot;&amp;gt;原签名&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
                        &amp;lt;textarea name=&quot;old_sign&quot; id=&quot;id_old_sign&quot; cols=&quot;81&quot; rows=&quot;5&quot;
                                  disabled&amp;gt;{{ request.user.blog.site_title }}&amp;lt;/textarea&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label for=&quot;id_new_sign&quot;&amp;gt;新签名&amp;lt;/label&amp;gt;
                        &amp;lt;span style=&quot;color: red&quot; id=&quot;error_sign&quot;&amp;gt;&amp;lt;/span&amp;gt;
                        &amp;lt;textarea name=&quot;new_sign&quot; id=&quot;id_new_sign&quot; cols=&quot;81&quot; rows=&quot;5&quot;&amp;gt;&amp;lt;/textarea&amp;gt;
                    &amp;lt;/div&amp;gt;

                    &amp;lt;button class=&quot;btn btn-primary&quot; id=&quot;set_sign&quot;&amp;gt;修改&amp;lt;/button&amp;gt;
                    &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&amp;gt;取消&amp;lt;/button&amp;gt;

                &amp;lt;/div&amp;gt;

            &amp;lt;/div&amp;gt;
            &amp;lt;br&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;js代码：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;{#修改签名#}
    $(&quot;#set_sign&quot;).click(function () {
        $.ajax({
            url: '{% url 'set_sign' %}',
            type: 'post',
            data: {
                new_sign: $('#id_new_sign').val(),
                csrfmiddlewaretoken: '{{ csrf_token }}'
            },
            success: function (data) {
                if (data.code === 1000) {
                    location.href = data.url;
                    $('#error_sign').text(data.msg)
                } else {
                    $('#error_sign').text(data.msg)
                }
            }
        })

    });
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端代码：&lt;/p&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 编辑签名
    url(r'^set_sign', views.set_sign, name='set_sign'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 编辑签名
@login_required
def set_sign(request):
    if request.is_ajax():
        back_dic = {'code': 1000, 'msg': ''}
        site_name = request.user.username
        site_title = request.POST.get('new_sign')
        if len(site_title) &amp;lt; 5:
            back_dic['code'] = 2000
            back_dic['msg'] = '(你的学习宣言必须大于5位)'
        elif len(site_title) &amp;gt; 15:
            back_dic['code'] = 3000
            back_dic['msg'] = '(你的学习宣言必须小于于15位)'
        else:
            back_dic['code'] = 1000
            back_dic['url'] = reverse('home')
            back_dic['msg'] = '修改成功'
            models.Blog.objects.filter(site_name=site_name).update(site_title=site_title)
        return JsonResponse(back_dic)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210211909001-2111818687.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; data-toggle=&quot;modal&quot; data-target=&quot;.bs-example-modal-sm&quot;&amp;gt;注销&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;


{#    退出确认模态框#}
&amp;lt;div class=&quot;modal fade bs-example-modal-sm&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&amp;gt;
    &amp;lt;div class=&quot;modal-dialog modal-sm&quot; role=&quot;document&quot;&amp;gt;
        &amp;lt;div class=&quot;modal-content&quot;&amp;gt;
            &amp;lt;div class=&quot;modal-header&quot;&amp;gt;
                &amp;lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&amp;gt;&amp;lt;span
                        aria-hidden=&quot;true&quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
                &amp;lt;h4 class=&quot;modal-title&quot;&amp;gt;你忍心离开我吗&amp;lt;/h4&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;modal-body&quot;&amp;gt;
                &amp;lt;p&amp;gt;确定退出？&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;modal-footer&quot;&amp;gt;
                &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&amp;gt;关闭&amp;lt;/button&amp;gt;
                &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; id=&quot;exit&quot;&amp;gt;确定&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal-content --&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;js代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;{#注销#}
    $('#exit').click(function () {
        location.href = &quot;/logout/&quot;
    });
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端代码：&lt;/p&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 注销
    url(r'^logout', views.logout, name='logout'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 注销
@login_required
def logout(request):
    auth.logout(request)  # 原理删除了对应的session值
    return redirect(reverse('home'))
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;setting.py文件配置：&lt;/p&gt;
&lt;p&gt;配置好之后，文件夹自动创建&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# media配置
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')   # 用户上传的文件全部保存该文件下
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;请求头里面有一个referer请求头，用来标识你上一次是从哪一个网址过来的&lt;/p&gt;
&lt;p&gt;判断上一次这个网址是否有权限&lt;/p&gt;
&lt;p&gt;自己的项目：把图片所在的文件夹暴露，那么只能访问图片。&lt;/p&gt;
&lt;p&gt;别人的图片怎么解决防盗链？：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.用爬虫将所有的图片资源下载到本地    这是爬虫的价值所在
2.修改请求头参数  百度搜吧
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;referer属性：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210223428934-7529957.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;urls.py:&lt;/p&gt;
&lt;p&gt;注意：千万不要暴露重要文件资源，否则拍屁股走人&lt;/p&gt;
&lt;p&gt;MEDIA_ROOT,一定不要暴露关键文件&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django.views.static import serve
# 暴露任意后端资源配置
    url(r'^media/(?P&amp;lt;path&amp;gt;.*)', serve, {&quot;document_root&quot;: settings.MEDIA_ROOT}),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210220410929-1941085771.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图片文件地址：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;lt;img class=&quot;media-object&quot; src=&quot;/media/{{ article_obj.blog.userinfo.avatar }}&quot;
                                     style=&quot;width: 60px&quot; alt=&quot;这是你的头像&quot; width=&quot;60px;&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210222508907-220338077.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;分页器：新建py文件，把代码复制过来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210220845377-1224721649.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class Pagination(object):
    def __init__(self,current_page,all_count,per_page_num=2,pager_count=11):
        &quot;&quot;&quot;
        封装分页相关数据
        :param current_page: 当前页
        :param all_count:    数据库中的数据总条数
        :param per_page_num: 每页显示的数据条数
        :param pager_count:  最多显示的页码个数
        
        用法:
        queryset = model.objects.all()
        page_obj = Pagination(current_page,all_count)
        page_data = queryset[page_obj.start:page_obj.end]
        获取数据用page_data而不再使用原始的queryset
        获取前端分页样式用page_obj.page_html
        &quot;&quot;&quot;
        try:
            current_page = int(current_page)
        except Exception as e:
            current_page = 1

        if current_page &amp;lt;1:
            current_page = 1

        self.current_page = current_page

        self.all_count = all_count
        self.per_page_num = per_page_num


        # 总页码
        all_pager, tmp = divmod(all_count, per_page_num)
        if tmp:
            all_pager += 1
        self.all_pager = all_pager

        self.pager_count = pager_count
        self.pager_count_half = int((pager_count - 1) / 2)

    @property
    def start(self):
        return (self.current_page - 1) * self.per_page_num

    @property
    def end(self):
        return self.current_page * self.per_page_num

    def page_html(self):
        # 如果总页码 &amp;lt; 11个：
        if self.all_pager &amp;lt;= self.pager_count:
            pager_start = 1
            pager_end = self.all_pager + 1
        # 总页码  &amp;gt; 11
        else:
            # 当前页如果&amp;lt;=页面上最多显示11/2个页码
            if self.current_page &amp;lt;= self.pager_count_half:
                pager_start = 1
                pager_end = self.pager_count + 1

            # 当前页大于5
            else:
                # 页码翻到最后
                if (self.current_page + self.pager_count_half) &amp;gt; self.all_pager:
                    pager_end = self.all_pager + 1
                    pager_start = self.all_pager - self.pager_count + 1
                else:
                    pager_start = self.current_page - self.pager_count_half
                    pager_end = self.current_page + self.pager_count_half + 1

        page_html_list = []
        # 添加前面的nav和ul标签
        page_html_list.append('''
                    &amp;lt;nav aria-label='Page navigation&amp;gt;'
                    &amp;lt;ul class='pagination'&amp;gt;
                ''')
        first_page = '&amp;lt;li&amp;gt;&amp;lt;a href=&quot;?page=%s&quot;&amp;gt;首页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;' % (1)
        page_html_list.append(first_page)

        if self.current_page &amp;lt;= 1:
            prev_page = '&amp;lt;li class=&quot;disabled&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;上一页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;'
        else:
            prev_page = '&amp;lt;li&amp;gt;&amp;lt;a href=&quot;?page=%s&quot;&amp;gt;上一页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;' % (self.current_page - 1,)

        page_html_list.append(prev_page)

        for i in range(pager_start, pager_end):
            if i == self.current_page:
                temp = '&amp;lt;li class=&quot;active&quot;&amp;gt;&amp;lt;a href=&quot;?page=%s&quot;&amp;gt;%s&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;' % (i, i,)
            else:
                temp = '&amp;lt;li&amp;gt;&amp;lt;a href=&quot;?page=%s&quot;&amp;gt;%s&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;' % (i, i,)
            page_html_list.append(temp)

        if self.current_page &amp;gt;= self.all_pager:
            next_page = '&amp;lt;li class=&quot;disabled&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;下一页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;'
        else:
            next_page = '&amp;lt;li&amp;gt;&amp;lt;a href=&quot;?page=%s&quot;&amp;gt;下一页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;' % (self.current_page + 1,)
        page_html_list.append(next_page)

        last_page = '&amp;lt;li&amp;gt;&amp;lt;a href=&quot;?page=%s&quot;&amp;gt;尾页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;' % (self.all_pager,)
        page_html_list.append(last_page)
        # 尾部添加标签
        page_html_list.append('''
                                           &amp;lt;/nav&amp;gt;
                                           &amp;lt;/ul&amp;gt;
                                       ''')
        return ''.join(page_html_list)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;p&gt;后端代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from app01.utils.mypagenation import Pagination  # 分页器导

# 首页
def home(request):
    # 将网站的所有文章展示到前端
    article_list = models.Article.objects.all()
    # 分页处理
    page_obj = Pagination(current_page=request.GET.get('page',1),all_count=article_list.count())
    article_list = article_list[page_obj.start:page_obj.end]
    return render(request, 'home.html', locals())
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;{#分页器 #}
&amp;lt;div class=&quot;text-center&quot;&amp;gt;{{ page_obj.page_html|safe }}&amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;1.在注册的时候把用户的css文件的名字固定写好，写进数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210224231350-318836632.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.在用户编辑CSS的时候，再通过文件操作，创建用户固定的CSS文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210223946733-780023872.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.再应用导入自己的CSS文件&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;{#引用自己的css#}
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/media/css/{{ user_obj.blog.site_theme }}&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;前端代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;a href=&quot;{% url 'blog_css' %}&quot;&amp;gt;个人站点CSS设置&amp;lt;/a&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 个人站点CSS设置
    url(r'^blog_css/', views.blog_css, name='blog_css'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 个人站点CSS设置
@login_required
def blog_css(request):
    username = request.user.username
    site_theme = models.Blog.objects.filter(site_name=username).first().site_theme
    css_dir = f'media/css/{site_theme}'
    if request.method == 'POST':
        new_css = request.POST.get('new_css')
        with open(css_dir, 'w', encoding='utf-8')as f:
            for line in new_css:
                res = line.replace('\n', '')
                f.write(res)
            f.close()
        return redirect('/blog_css/')
    if request.method == 'GET':
        # 先判断用户css文件是否存在，不存在就创建。存在就读取
        isfile = os.path.exists(css_dir)
        # 不存在创建空的css文件
        if not isfile:
            with open(css_dir, 'w')as f:
                f.close()
        # 存在就读取
        with open(css_dir, 'r')as f:
            old_css = f.read()
        return render(request, 'backend/blog_css.html', locals())
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;backend/blog_css.html:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;{% extends 'backend/backend_base.html' %}
{% block article %}
    &amp;lt;form action=&quot;&quot; method=&quot;post&quot;&amp;gt;
        {% csrf_token %}
        &amp;lt;h2&amp;gt;页面定制 CSS 代码&amp;lt;/h2&amp;gt;
        &amp;lt;textarea name=&quot;new_css&quot; id=&quot;&quot; cols=&quot;100&quot; rows=&quot;30&quot;&amp;gt;{{ old_css }}&amp;lt;/textarea&amp;gt;
        &amp;lt;p&amp;gt;推荐客户端： &amp;lt;a href=&quot;&quot;&amp;gt;Open Live Writer&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;MetaWeblog访问地址: &amp;lt;a href=&quot;http://127.0.0.1:8000/home&quot;&amp;gt;http://127.0.0.1:8000/home&amp;lt;/a&amp;gt;/&amp;lt;/p&amp;gt;
        &amp;lt;input type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&amp;gt;
    &amp;lt;/form&amp;gt;
{% endblock %}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;-官方提供&lt;br/&gt;from django.db.models.functions import TruncMonth&lt;br/&gt;Article.objects&lt;br/&gt;.annotate(month=TruncMonth('timestamp')) # Truncate to month and add to select list&lt;br/&gt;.values('month') # Group By month&lt;br/&gt;.annotate(c=Count('id')) # Select the count of the grouping&lt;br/&gt;.values('month', 'c') # (might be redundant, haven't tested) select month and count&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210231429069-38421160.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210231536739-219460873.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 3.按照文章的年月分组
    date_list = models.Article.objects.filter(blog=blog).\
        annotate(month=TruncMonth('create_time')).values(
        'month').annotate(c=Count('pk')).values('c', 'month')
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;{% for date in date_list %}
            &amp;lt;p&amp;gt;
                &amp;lt;a href=&quot;/{{ username }}/archive/{{ date.month|date:'Y-m' }}/&quot;&amp;gt;
                    {{ date.month|date:'Y年m月' }}({{ date.c }})&amp;lt;/a&amp;gt;
            &amp;lt;/p&amp;gt;
{% endfor %}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;新建文件夹和py文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210231801010-1757498927.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;mytag.py代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django.template import Library
from app01 import models
from django.db.models import Count
from django.db.models.functions import TruncMonth
register = Library()


# 侧边栏渲染，自定义过滤器方法
@register.inclusion_tag('left_menu.html', name='my_left')
def index(username):
    # 提供left_menu所需要的所有数据
    user_obj = models.UserInfo.objects.filter(username=username).first()
    blog = user_obj.blog
    # 1.查询当前用户的分类及每个分类下的文章数
    category_list = models.Category.objects.all().filter(blog=blog).annotate(article_sum=Count('article__pk')).values(
        'article_sum', 'name', 'pk')

    # 2.查询当前用户的标签，及每个标签下的文章数
    tag_list = models.Tag.objects.all().filter(blog=blog).annotate(tag_sum=Count('article__pk')).values('tag_sum',
                                                                                                        'name', 'pk')

    # 3.按照文章的年月分组
    date_list = models.Article.objects.filter(blog=blog).\
        annotate(month=TruncMonth('create_time')).values(
        'month').annotate(c=Count('pk')).values('c', 'month')
    return locals()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;left_menu.html:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
        &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;文章分类&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        {% for category in category_list %}
            &amp;lt;p&amp;gt;&amp;lt;a href=&quot;/{{ username }}/category/{{ category.pk }}&quot;&amp;gt;{{ category.name }}({{ category.article_sum }})&amp;lt;/a&amp;gt;
            &amp;lt;/p&amp;gt;
        {% endfor %}
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;panel panel-danger&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
        &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;文章标签&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        {% for tag in tag_list %}
            &amp;lt;p&amp;gt;&amp;lt;a href=&quot;/{{ username }}/tag/{{ tag.pk }}&quot;&amp;gt;{{ tag.name }}({{ tag.tag_sum }})&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
        {% endfor %}
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;panel panel-warning&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
        &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;日期归档&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        {% for date in date_list %}
            &amp;lt;p&amp;gt;
                &amp;lt;a href=&quot;/{{ username }}/archive/{{ date.month|date:'Y-m' }}/&quot;&amp;gt;
                    {{ date.month|date:'Y年m月' }}({{ date.c }})&amp;lt;/a&amp;gt;
            &amp;lt;/p&amp;gt;
        {% endfor %}

    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;前端样式：可以直接去别人网站拷贝html代码,改改自己用&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;{#    点赞点踩前端样式#}
        &amp;lt;div class=&quot;clearfix&quot;&amp;gt;
            &amp;lt;div id=&quot;div_digg&quot;&amp;gt;
                &amp;lt;div class=&quot;diggit jeff&quot;&amp;gt;
                    &amp;lt;span class=&quot;diggnum&quot; id=&quot;digg_count&quot;&amp;gt;{{ article_obj.up_num }}&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;buryit jeff&quot;&amp;gt;
                    &amp;lt;span class=&quot;burynum&quot; id=&quot;bury_count&quot;&amp;gt;{{ article_obj.down_num }}&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;diggword&quot; id=&quot;digg_tips&quot; style=&quot;color: red&quot;&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;js代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210233132604-476969593.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
        {#点赞点踩JS代码#}
        $('.jeff').click(function () {
            var $divEle = $(this);
            $.ajax({
                url: '{% url 'updown' %}',
                type: 'post',
                data: {
                    'article_id':{{ article_obj.pk }},
                    'is_up': $(this).hasClass('diggit'),
                    'csrfmiddlewaretoken': '{{ csrf_token }}'
                },
                success: function (data) {
                    if (data.code === 1000) {
                        $('#digg_tips').text(data.msg);
                        $divEle.children().text(Number($divEle.children().text()) + 1)
                    } else {
                        $('#digg_tips').html(data.msg)
                    }

                }
            })

        });
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 点赞点踩
    url(r'^up_or_down/', views.up_or_down, name='updown'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 点赞点踩
import json
from django.contrib import auth
from django.db.models import F
def up_or_down(request):
    bank_dic = {'code': 1000, 'msg': ''}
    if request.is_ajax():
        article_id = request.POST.get('article_id')
        # 注意：前端返回来的bool值是str形式。拿到是点赞还是点踩   赞True 踩false
        is_up = request.POST.get('is_up')
        is_up = json.loads(is_up)  # 转成python形式的bool值
        '''
        1.必须是登录的用户才能点赞点踩，判断用户是否登录
        2.判断当前文章是否是用户自己写的，自己不能给自己点赞点踩
        3.当前用户是否已经给文章点过赞或踩了
        4.操作数据库---操作两张表，优化表字段
        '''
        # 1.判断用户是否已登录
        if request.user.is_authenticated():
            # 2.拿到当前文章,从文章里拿到当前用户，和登录的用户比较。如果用户一样，则证明是自己写的文章，不能点赞踩
            article_obj = models.Article.objects.filter(pk=article_id).first()
            if not article_obj.blog.userinfo.pk == request.user.pk:
                # 3.判断当前用户是否已经给当前文章点过赞或踩了。到点赞点踩表中查询是否有当前用户的记录，如果有，则证明当前用户已经点过了
                is_click = models.UpAndDown.objects.filter(user=request.user.pk, article=article_id)
                if not is_click:
                    # 用户没电点过，操作表数据.第一张表
                    # 点赞给点赞字段+1
                    if is_up:
                        models.Article.objects.filter(pk=article_id).update(up_num=F('up_num') + 1)
                        bank_dic['msg'] = '点赞成功'
                    # 点踩给点踩字段+1
                    else:
                        models.Article.objects.filter(pk=article_id).update(down_num=F('down_num') + 1)
                        bank_dic['msg'] = '点踩成功'
                    # 操作表数据，第二张表
                    models.UpAndDown.objects.create(user=request.user, article=article_obj, is_up=is_up)
                else:
                    bank_dic['code'] = 2000
                    bank_dic['msg'] = '你已经点过了'
            else:
                bank_dic['code'] = 3000
                bank_dic['msg'] = '不能给自己点'
        else:
            bank_dic['code'] = 4000
            bank_dic['msg'] = '请先&amp;lt;a href=&quot;/login/&quot;&amp;gt;登录&amp;lt;/a&amp;gt;'
        return JsonResponse(bank_dic)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;文章评论零时渲染：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//定义全局变量
        var parentId = null;
        // 文章评论js代码
        $('#id_comment').click(function () {
            var conTent = $('#id_content').val();
            // 如果是根评论不处理，如果是子评论需要处理，将@jeff 切割
            // @jeff 萨尔
            if (parentId) {
                //切割方式  获取第一个\n对应的索引
                var indexN = conTent.indexOf('\n') + 1  //顾头不顾尾
                // 按照获取的索引切割
                conTent = conTent.slice(indexN)  //将indexN之前的全部切除，中保留之后的
            }
            $.ajax({
                url: '{% url &quot;comment&quot; %}',
                type: 'post',
                data: {
                    &quot;article_id&quot;:{{ article_obj.pk }},
                    &quot;content&quot;: conTent,
                    &quot;csrfmiddlewaretoken&quot;: '{{ csrf_token }}',
                    &quot;parent_id&quot;: parentId
                },
                success: function (data) {
                    if (data.code === 1000) {

                        // 临时渲染评论内容
                        var UserName = '{{ request.user.username }}';
                        var conTent = $('#id_content').val();
                        // 将内容临时渲染到ul标签内
                        var temp = `
                        &amp;lt;li class=&quot;list-group-item&quot;&amp;gt;
                            &amp;lt;span&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-comment&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;a href=&quot;/${UserName}/&quot;&amp;gt;${UserName}&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
                            &amp;lt;div&amp;gt;
                                ${conTent}
                            &amp;lt;/div&amp;gt;
                            &amp;lt;/li&amp;gt;
                        `;
                        $('.list-group').append(temp);

                        // 将获取用户输入评论的内容框清空
                        $('#id_content').val('');
                        // 将全局的parentId清空，否则parentId后续一直有值，就一直是子评论
                        parentId = null
                    }
                }
            })
        });
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210233525528-1580699351.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;看官方文档&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210233629561-1584816382.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1736414/202002/1736414-20200210234023527-884022592.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前端内容：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;{% extends 'backend/backend_base.html' %}
{% block article %}
    &amp;lt;h2&amp;gt;添加文章&amp;lt;/h2&amp;gt;
    &amp;lt;form action=&quot;&quot; method=&quot;post&quot;&amp;gt;
        {% csrf_token %}
        &amp;lt;p&amp;gt;标题&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
            &amp;lt;input type=&quot;text&quot; name=&quot;title&quot; class=&quot;form-control&quot;&amp;gt;
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;内容(使用kindeditor编辑器)&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
            &amp;lt;textarea name=&quot;content&quot; id=&quot;id_content&quot; cols=&quot;60&quot; rows=&quot;20&quot;&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;/p&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;文章标签&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;
                {% for tag in tag_list %}
                    {{ tag.name }} &amp;lt;input type=&quot;checkbox&quot; name=&quot;tag&quot; value=&quot;{{ tag.pk }}&quot;&amp;gt;
                {% endfor %}
            &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;文章分类&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;
                {% for category in category_list %}
                    {{ category.name }} &amp;lt;input type=&quot;radio&quot; name=&quot;category&quot; value=&quot;{{ category.pk }}&quot;&amp;gt;
                {% endfor %}

            &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input type=&quot;submit&quot; class=&quot;btn btn-primary&quot; value=&quot;添加&quot;&amp;gt;
    &amp;lt;/form&amp;gt;



&amp;lt;script charset=&quot;utf-8&quot; src=&quot;/static/kindeditor/kindeditor-all-min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
        KindEditor.ready(function(K) {
                window.editor = K.create('#id_content',{
                    width:'100%',
                    height:'500px',
                    resizeType:0,
                    uploadJson : '/upload_image/',  //控制用户写文章上传文件的后端地址
                    extraFileUploadParams : {
                        'csrfmiddlewaretoken':'{{ csrf_token }}',
                }
                });

        });
&amp;lt;/script&amp;gt;
{% endblock %}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端代码：&lt;/p&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 添加文章
url(r'^add_article/', views.add_article, name='add_article'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 添加随笔
from bs4 import BeautifulSoup
@login_required
def add_article(request):
    if request.method == 'POST':
        # 获取从前端页面传来的文章数据
        title = request.POST.get('title')
        content = request.POST.get('content')
        tag_list = request.POST.get('tag')
        category_id = request.POST.get('category')
        # 先生成一个该模块beautifulsoup4的对象
        soup = BeautifulSoup(content, 'html.parser')
        for tag in soup.find_all():
            # 筛选除script标签直接删除，避免XSS攻击
            if tag.name == 'script':
                tag.decompose()  # 删除该标签

        # desc = content[0:150]   # 截取文章简介,错误示范。会从html代码截取
        desc = soup.text[0:150]  # 通过模块处理，直接从内容截取
        # 写入数据
        article_obj = models.Article.objects.create(title=title, desc=desc, content=str(soup), category_id=category_id, blog=request.user.blog)
        # 手动操作文章与标签的第三张表
        # 用批量插入数据 bulk_create
        b_list = []
        for tag_id in tag_list:
            b_list.append(models.Article2Tag(article=article_obj, tag_id=tag_id))
        models.Article2Tag.objects.bulk_create(b_list)
        return redirect(reverse('backend'))
    # 获取文章分类、文章标签列表，让用户选择添加文章的分类与标签
    category_list = models.Category.objects.filter(blog=request.user.blog)
    tag_list = models.Tag.objects.filter(blog=request.user.blog)
    return render(request, 'backend/add_article.html', locals())
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 11 Feb 2020 00:21:00 +0000</pubDate>
<dc:creator>辜老板</dc:creator>
<og:description>[TOC] 1、随机验证码 前端代码： js代码： 原理：src改变，立马刷新。点击一次图片，给url添加一个？号 2、注册功能 前端代码： 后端urls.py: views.py: myforms.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/guyouyin123/p/12293758.html</dc:identifier>
</item>
<item>
<title>用什么库写 Python 命令行程序？看这一篇就够了 - 削微寒</title>
<link>http://www.cnblogs.com/xueweihan/p/12293402.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xueweihan/p/12293402.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/759200/201911/759200-20191104220305180-1564290170.jpg&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br/&gt;作者：HelloGitHub-&lt;strong&gt;Prodesire&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;3.5660377358491&quot;&gt;
&lt;p&gt;HelloGitHub 的《讲解开源项目》系列，项目地址：&lt;a href=&quot;https://github.com/HelloGitHub-Team/Article&quot; class=&quot;uri&quot;&gt;https://github.com/HelloGitHub-Team/Article&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;在近半年的 Python 命令行旅程中，我们依次学习了 &lt;code&gt;argparse&lt;/code&gt;、&lt;code&gt;docopt&lt;/code&gt;、&lt;code&gt;click&lt;/code&gt; 和 &lt;code&gt;fire&lt;/code&gt; 库的特点和用法，逐步了解到 Python 命令行库的设计哲学与演变。&lt;br/&gt;本文作为本次旅程的终点，希望从一个更高的视角对这些库进行横向对比，总结它们的异同点和使用场景，以期在应对不同场景时能够分析利弊，选择合适的库为己所用。&lt;/p&gt;
&lt;pre class=&quot;plain&quot;&gt;
&lt;code&gt;本系列文章默认使用 Python 3 作为解释器进行讲解。
若你仍在使用 Python 2，请注意两者之间语法和库的使用差异哦~&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二设计理念&quot;&gt;二、设计理念&lt;/h2&gt;
&lt;p&gt;在讨论各个库的设计理念之前，我们先设计一个&lt;code&gt;计算器程序&lt;/code&gt;，其实这个例子在 &lt;code&gt;argparse&lt;/code&gt; 库的第一篇讲解中出现过，也就是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;命令行程序接受一个位置参数，它能出现多次，且是数字&lt;/li&gt;
&lt;li&gt;默认情况下，命令行程序会求出给定的一串数字的最大值&lt;/li&gt;
&lt;li&gt;如果指定了选项参数 &lt;code&gt;--sum&lt;/code&gt;，那么就会将求出给定的一串数字的和&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;希望从各个库实现该例子的代码中能进一步体会它们的设计理念。&lt;/p&gt;
&lt;h3 id=&quot;argparse&quot;&gt;2.1、argparse&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;argparse&lt;/code&gt; 的设计理念就是提供给你最细粒度的控制，你需要详细地告诉它参数是选项参数还是位置参数、参数值的类型是什么、该参数的处理动作是怎样的。&lt;br/&gt;总之，它就像是一个没有智能分析能力的初代机器人，你需要告诉它明确的信息，它才会根据给定的信息去帮助你做事情。&lt;/p&gt;
&lt;p&gt;以下示例为 &lt;code&gt;argparse&lt;/code&gt; 实现的 &lt;code&gt;计算器程序&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import argparse

# 1. 设置解析器
parser = argparse.ArgumentParser(description='Calculator Program.')

# 2. 定义参数
# 添加位置参数 nums，在帮助信息中显示为 num
# 其类型为 int，且支持输入多个，且至少需要提供一个
parser.add_argument('nums',  metavar='num', type=int, nargs='+',
                    help='a num for the accumulator')
# 添加选项参数 --sum，该参数被 parser 解析后所对应的属性名为 accumulate
# 若不提供 --sum，默认值为 max 函数，否则为 sum 函数
parser.add_argument('--sum', dest='accumulate', action='store_const',
                    const=sum, default=max,
                    help='sum the nums (default: find the max)')


# 3. 解析参数
args = parser.parse_args(['--sum', '1', '2', '3'])
print(args) # 结果：Namespace(accumulate=&amp;lt;built-in function sum&amp;gt;, nums=[1, 2, 3])

# 4. 业务逻辑
result = args.accumulate(args.nums)
print(result)  # 基于上文的 ['--sum', '1', '2', '3'] 参数，accumulate 为 sum 函数，其结果为 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述示例可以看到，我们需要通过 &lt;code&gt;add_argument&lt;/code&gt; 很明确地告诉 &lt;code&gt;argparse&lt;/code&gt; 参数长什么样：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;它是位置参数 &lt;code&gt;nums&lt;/code&gt;，还是选项参数 &lt;code&gt;--sum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;它的类型是什么，比如 &lt;code&gt;type=int&lt;/code&gt; 表示类型是 int&lt;/li&gt;
&lt;li&gt;这个参数能重复出现几次，比如 &lt;code&gt;nargs='+'&lt;/code&gt; 表示至少提供 1 个&lt;/li&gt;
&lt;li&gt;参数的是存什么的，比如 &lt;code&gt;action='store_const'&lt;/code&gt; 表示存常量&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后它才根据给定的这些元信息来解析命令行参数（也就是示例中的 &lt;code&gt;['--sum', '1', '2', '3']&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;这是很计算机的思维，虽然冗长，但也带来了灵活性。&lt;/p&gt;
&lt;h3 id=&quot;docopt&quot;&gt;2.2、docopt&lt;/h3&gt;
&lt;p&gt;从 &lt;code&gt;argparse&lt;/code&gt; 的理念可以看出，它是命令式的。这时候 &lt;code&gt;docopt&lt;/code&gt; 另辟蹊径，声明式是不是也可以？一个命令行程序的帮助信息其实已然包含了这个命令行的完整元信息，那不就可以通过定义帮助信息来定义命令行？&lt;code&gt;docopt&lt;/code&gt; 就是基于这样的想法去设计的。&lt;/p&gt;
&lt;p&gt;声明式的好处在于只要你掌握了声明式的语法，那么定义命令行的元信息就会很简单。&lt;/p&gt;
&lt;p&gt;以下示例为 &lt;code&gt;docopt&lt;/code&gt; 实现的 &lt;code&gt;计算器程序&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 1. 定义接口描述/帮助信息
&quot;&quot;&quot;Calculator Program.

Usage:
  calculator.py [--sum] &amp;lt;num&amp;gt;...
  calculator.py (-h | --help)

Options:
  -h --help     Show help.
  --sum         Sum the nums (default: find the max).
&quot;&quot;&quot;

from docopt import docopt

# 2. 解析命令行
arguments = docopt(__doc__, options_first=True, argv=['--sum', '1', '2', '3'])
print(arguments) # 结果：{'--help': False, '--sum': True, '&amp;lt;num&amp;gt;': ['1', '2', '3']}

# 3. 业务逻辑
nums = (int(num) for num in arguments['&amp;lt;num&amp;gt;'])

if arguments['--sum']:
    result = sum(nums)
else:
    result = max(nums)

print(result) # 基于上文的 ['--sum', '1', '2', '3'] 参数，处理函数为 sum 函数，其结果为 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述示例可以看到，我们通过 &lt;code&gt;__doc__&lt;/code&gt; 定义了接口描述，这和 &lt;code&gt;argparse&lt;/code&gt; 中 &lt;code&gt;add_argument&lt;/code&gt; 是等价的，然后 &lt;code&gt;docopt&lt;/code&gt; 便会根据这个元信息把命令行参数转换为一个字典。业务逻辑中就需要对这个字典进行处理。&lt;/p&gt;
&lt;p&gt;对比与 &lt;code&gt;argparse&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对于更为复杂的命令程序，元信息的定义上 &lt;code&gt;docopt&lt;/code&gt; 会更加简单&lt;/li&gt;
&lt;li&gt;然而在业务逻辑的处理上，由于 &lt;code&gt;argparse&lt;/code&gt; 在一些简单参数的处理上会更加便捷（比如示例中的情形），相对来说 &lt;code&gt;docopt&lt;/code&gt; 转换为字典后就把所有处理交给业务逻辑的方式会更加复杂&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;click&quot;&gt;2.3、click&lt;/h3&gt;
&lt;p&gt;命令行程序本质上是定义参数和处理参数，而处理参数的逻辑一定是与所定义的参数有关联的。那可不可以用函数和装饰器来实现处理参数逻辑与定义参数的关联呢？而 &lt;code&gt;click&lt;/code&gt; 正好就是以这种使用方式来设计的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;click&lt;/code&gt; 使用装饰器的好处就在于用装饰器优雅的语法将参数定义和处理逻辑整合在一起，从而暗示了路由关系。相比于 &lt;code&gt;argparse&lt;/code&gt; 和 &lt;code&gt;docopt&lt;/code&gt; 需要自行对解析后的参数来做路由关系，简单了不少。&lt;/p&gt;
&lt;p&gt;以下示例为 &lt;code&gt;click&lt;/code&gt; 实现的 &lt;code&gt;计算器程序&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import sys
import click

sys.argv = ['calculator.py', '--sum', '1', '2', '3']

# 2. 定义参数
@click.command()
@click.argument('nums', nargs=-1, type=int)
@click.option('--sum', 'use_sum', is_flag=True, help='sum the nums (default: find the max)')
# 1. 业务逻辑
def calculator(nums, use_sum):
    &quot;&quot;&quot;Calculator Program.&quot;&quot;&quot;
    print(nums, use_sum) # 输出：(1, 2, 3) True
    if use_sum:
        result = sum(nums)
    else:
        result = max(nums)

    print(result) # 基于上文的 ['--sum', '1', '2', '3'] 参数，处理函数为 sum 函数，其结果为 6

calculator()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述示例可以看出，参数和对应的处理逻辑非常好地绑定在了一起，看上去就很直观，使得我们可以明确了解参数会怎么处理，这在有大量参数时显得尤为重要，这边是 &lt;code&gt;click&lt;/code&gt; 相比于 &lt;code&gt;argparse&lt;/code&gt; 和 &lt;code&gt;docopt&lt;/code&gt; 最明显的优势。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;click&lt;/code&gt; 还内置了很多实用工具和额外能力，比如说 Bash 补全、颜色、分页支持、进度条等诸多实用功能，可谓是如虎添翼。&lt;/p&gt;
&lt;h3 id=&quot;fire&quot;&gt;2.4、fire&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fire&lt;/code&gt; 则是用一种面向广义对象的方式来玩转命令行，这种对象可以是类、函数、字典、列表等，它更加灵活，也更加简单。你都不需要定义参数类型，&lt;code&gt;fire&lt;/code&gt; 会根据输入和参数默认值来自动判断，这无疑进一步简化了实现过程。&lt;/p&gt;
&lt;p&gt;以下示例为 &lt;code&gt;click&lt;/code&gt; 实现的 &lt;code&gt;计算器程序&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import sys
import fire

sys.argv = ['calculator.py', '1', '2', '3', '--sum']

builtin_sum = sum

# 1. 业务逻辑
# sum=False，暗示它是一个选项参数 --sum，不提供的时候为 False
# *nums 暗示它是一个能提供任意数量的位置参数
def calculator(sum=False, *nums):
    &quot;&quot;&quot;Calculator Program.&quot;&quot;&quot;
    print(sum, nums) # 输出：True (1, 2, 3)
    if sum:
        result = builtin_sum(nums)
    else:
        result = max(nums)

    print(result) # 基于上文的 ['1', '2', '3', '--sum'] 参数，处理函数为 sum 函数，其结果为 6


fire.Fire(calculator)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述示例可以看出，&lt;code&gt;fire&lt;/code&gt; 提供的方式无疑是最简单、并且最 Pythonic 的了。我们只需关注业务逻辑，而命令行参数的定义则和函数参数的定义融为了一体。&lt;/p&gt;
&lt;p&gt;不过，有利自然也有弊，比如 &lt;code&gt;nums&lt;/code&gt; 并没有说是什么类型，也就意味着输入字符串'abc'也是合法的，这就意味着一个严格的命令行程序必须在自己的业务逻辑中来对期望的类型进行约束。&lt;/p&gt;
&lt;h2 id=&quot;三横向对比&quot;&gt;三、横向对比&lt;/h2&gt;
&lt;p&gt;最后，我们横向对比下&lt;code&gt;argparse&lt;/code&gt;、&lt;code&gt;docopt&lt;/code&gt;、&lt;code&gt;click&lt;/code&gt; 和 &lt;code&gt;fire&lt;/code&gt; 库的各项功能和特点：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;使用步骤数&lt;/td&gt;
&lt;td&gt;4 步&lt;/td&gt;
&lt;td&gt;3 步&lt;/td&gt;
&lt;td&gt;2 步&lt;/td&gt;
&lt;td&gt;1 步&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;使用步骤数&lt;/td&gt;
&lt;td&gt;1. 设置解析器&lt;br/&gt;2. 定义参数&lt;br/&gt;3. 解析命令行&lt;br/&gt;4. 业务逻辑&lt;/td&gt;
&lt;td&gt;1. 定义接口描述&lt;br/&gt;2. 解析命令行&lt;br/&gt;3. 业务逻辑&lt;/td&gt;
&lt;td&gt;1. 业务逻辑&lt;br/&gt;2. 定义参数&lt;/td&gt;
&lt;td&gt;1. 业务逻辑&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;选项参数&lt;br/&gt;（如 &lt;code&gt;--sum&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;位置参数&lt;br/&gt;（如 &lt;code&gt;X Y&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;参数默认值&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;互斥选项&lt;br/&gt;（如 &lt;code&gt;--car&lt;/code&gt; 和 &lt;code&gt;--bus&lt;/code&gt; 只能二选一）&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;br/&gt;可通过第三方库支持&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;可变参数&lt;br/&gt;（如指定多个 &lt;code&gt;--file&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;嵌套/父子命令&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;工具箱&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;链式命令调用&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;类型约束&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;✘&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Python 的命令行库种类繁多、各具特色。结合上面的总结，可以选择出符合使用场景的库，如果几个库都符合，那么就根据你更偏爱的风格来选择。这些库都很优秀，其背后的思想很是值得我们学习和扩展。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/759200/202001/759200-20200129180553287-52110265.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关注 HelloGitHub 公众号获取第一手的更新&lt;/p&gt;
</description>
<pubDate>Tue, 11 Feb 2020 00:09:00 +0000</pubDate>
<dc:creator>削微寒</dc:creator>
<og:description>作者：HelloGitHub Prodesire HelloGitHub 的《讲解开源项目》系列，项目地址： &amp;quot;https://github.com/HelloGitHub Team/Art</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xueweihan/p/12293402.html</dc:identifier>
</item>
<item>
<title>痞子衡嵌入式：ARM Cortex-M内核那些事（3.3）- 为AI,ML而生(M55) - 痞子衡</title>
<link>http://www.cnblogs.com/henjay724/p/12293565.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/henjay724/p/12293565.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;　　大家好，我是痞子衡，是正经搞技术的痞子。今天痞子衡给大家介绍的是&lt;strong&gt;ARM Cortex-M55&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　鼠年春节，大家都在时刻关心 2019nCoV 疫情发展，没太多心思搞技术，就在这个时候，ARM 不声不响搞了个大新闻，如果你登录 ARM developer 网站，会发现 Cortex-M 家族多了一个新成员：Cortex-M55&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/cnblogs/Cortex-M55_new_rel.JPG&quot; alt=&quot;cortex-m55_new&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个 Cortex-M55 到底是什么来头？之前可是一点消息都没有啊！这个命名看起来像是 Cortex-M33/M35P 的大哥，但说不定也可能是 Cortex-M7 的大哥，反正自从 Cortex-M23 出来也是搞不懂 ARM 什么命名套路了，为了解开心头疑惑，让我们去一探究竟，直接打开Cortex-M55的模块框图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/cnblogs/Cortex-M55-chip-diagram-16.png&quot; alt=&quot;cortex-m55_blk&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　模块框图乍一看似乎没什么新意，内核架构是 ARMv8.1-M mainline，看名字像是 ARMv8-M mainline 的小升级（流水线从 3 级变 4 级了，性能应该有点提升，查一下跑分确实从 4.02 CoreMark/MHz 提升到了 4.2 CoreMark/MHz），另外看到 TrustZone 在压阵，那基本就是 Cortex-M33 的大哥没得跑了。咱们再去查查 Cortex-M55 具体特性：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/cnblogs/Cortex-M55_features.JPG&quot; alt=&quot;cortex-m55_fea&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　看到这基本才知道 Cortex-M55 是什么来头，Cortex-M55 中引入了 I/D-TCM 以及 I/D-Cache 支持了，总线换到高性能 AXI5 了，这点像 Cortex-M7 靠拢了。&lt;br/&gt;　　最最重要的一点是 Cortex-M55 中增加一个 VPU（Helium），原来这款内核是为人工智能(AI)/机器学习(ML)而生的呀。其实早在去年 ARMv8.1-M 架构发布的时候就已经公开了 Arm Helium 技术，这个技术是 Arm Cortex-M 内核的 M-Profile 矢量扩展，可提供高达 15 倍的机器学习性能和高达 5 倍的信号处理能力，这样一来，我们可以继续使用 M 内核芯片，而无需采用更高性能的处理器架构。&lt;br/&gt;　　所以单片机 AI 的春天真的来了，敬请期待吧，猜猜哪个 MCU 厂商会率先量产这款内核 MCU，留言说出你的答案。&lt;/p&gt;
</description>
<pubDate>Mon, 10 Feb 2020 16:15:00 +0000</pubDate>
<dc:creator>痞子衡</dc:creator>
<og:description>鼠年春节，大家都在时刻关心 2019nCoV 疫情发展，没太多心思搞技术，就在这个时候，ARM 不声不响搞了个大新闻，如果你登录 ARM developer 网站，会发现 Cortex-M 家族多了一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/henjay724/p/12293565.html</dc:identifier>
</item>
<item>
<title>安卓开发实战-记账本APP（四） - 清风紫雪</title>
<link>http://www.cnblogs.com/xiaofengzai/p/12293427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaofengzai/p/12293427.html</guid>
<description>&lt;p&gt;&lt;span&gt;今天实现的内容有：添加账本信息，个人头像的切换，密码的修改，退出登录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加账本信息有三个功能：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;①记一笔支出项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;②记一笔收入项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③清空所有项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在此期间遇到的困难有：Activity与Fragment之间数值的传递问题，我利用Bundle对象来进行传值，但是布局文件中fragment里的name=“Account_Fragment”，这里暂时没有想到如何传值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因此暂时将name=&quot;Find_Message&quot;这个还未改变的一个fragment，当再次点击Account图标时，就可以传进去参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;未解决的事：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;①记完账本后，按日期排序一直不对&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;②初始Fragment没办法传参&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;明天要做的事：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先将上述问题解决，在设置长按项目进行单独删除。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;统计总的收入与支出的对比&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;找到合适的图标进行替换&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;学习hellochart，将数据以饼状图展示。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;今日成果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200210231713679-391277355.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; 点击更换头像：会有几个头像供选择&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200210231801470-1258852954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 当点击后自动跳回个人信息界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200210231856422-1951900573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 其次是更换密码：需要输入原密码与新密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200210231924224-14492052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 再者就是记账的页面：有支出，收入，删除所有，支出的会显示红色，收入的会显示绿色&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200210232010746-346298198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 当点击收入时，会弹出一个框来进行记账&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200210232131146-551163013.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 同理，当点击支出时，也会弹出一个框&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1717524/202002/1717524-20200210232220370-1179958266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 当点击删除所有时，会将所有账目全部删除。&lt;/p&gt;
&lt;p&gt;Account_Fragment：记账的Fragment&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.countbook;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.app.AlertDialog;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.app.Fragment;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.content.DialogInterface;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.database.Cursor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.graphics.Color;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.os.Bundle;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.util.Log;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.view.LayoutInflater;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.view.View;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.view.ViewGroup;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.Button;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.DatePicker;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.EditText;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.ListView;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.widget.RadioButton;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; androidx.annotation.Nullable;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Account_Fragment &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Fragment {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Account&amp;gt;&lt;span&gt; list;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; AccountOperator accountOperator;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; AccountAdapter accountAdapter;
    Button btn_shouru;
    Button btn_zhichu;
    Button btn_delete;
    Bundle bundle;
    String username;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(@Nullable Bundle savedInstanceState) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onCreate(savedInstanceState);
        bundle&lt;/span&gt;=&lt;span&gt;getArguments();
        username&lt;/span&gt;=bundle.getString(&quot;username&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Log.i(&quot;username&quot;,username);&lt;/span&gt;
&lt;span&gt;    }
    @Nullable
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        View view&lt;/span&gt;=inflater.inflate(R.layout.account_fragment,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        btn_shouru&lt;/span&gt;=&lt;span&gt;(Button)view.findViewById(R.id.btn_shouru);
        btn_zhichu&lt;/span&gt;=&lt;span&gt;(Button)view.findViewById(R.id.btn_zhichu);
        btn_delete&lt;/span&gt;=&lt;span&gt;(Button)view.findViewById(R.id.btn_delete);

        accountOperator&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AccountOperator(view.getContext());
        list&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        ListView AccountList&lt;/span&gt;=&lt;span&gt;(ListView)view.findViewById(R.id.lv_main);
        inin(username);
        accountAdapter&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AccountAdapter(view.getContext(),list);
        AccountList.setAdapter(accountAdapter);
        btn_zhichu.setOnClickListener(l);
        btn_shouru.setOnClickListener(l);
        btn_delete.setOnClickListener(l);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; view;
    }
    View.OnClickListener l&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; View.OnClickListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (v.getId()){
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; R.id.btn_zhichu:
                    AlertDialog.Builder builder&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AlertDialog.Builder(getView().getContext());
                    LayoutInflater inflater&lt;/span&gt;=&lt;span&gt;LayoutInflater.from(getView().getContext());
                    View viewDialog&lt;/span&gt;=inflater.inflate(R.layout.new_cost_data,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; EditText content=&lt;span&gt;(EditText)viewDialog.findViewById(R.id.et_cost_content);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; DatePicker data=&lt;span&gt;(DatePicker)viewDialog.findViewById(R.id.dp_cost_data);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; EditText money=&lt;span&gt;(EditText)viewDialog.findViewById(R.id.et_cost_money);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RadioButton rb1=&lt;span&gt;(RadioButton)viewDialog.findViewById(R.id.rb1);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RadioButton rb2=&lt;span&gt;(RadioButton)viewDialog.findViewById(R.id.rb2);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RadioButton rb3=&lt;span&gt;(RadioButton)viewDialog.findViewById(R.id.rb3);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RadioButton rb4=&lt;span&gt;(RadioButton)viewDialog.findViewById(R.id.rb4);


                    builder.setView(viewDialog);
                    builder.setTitle(&lt;/span&gt;&quot;New Cost&quot;&lt;span&gt;);
                    builder.setPositiveButton(&lt;/span&gt;&quot;OK&quot;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DialogInterface.OnClickListener() {
                        @Override
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onClick(DialogInterface dialog, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; which) {
                            Account bean&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Account();
                            bean.author&lt;/span&gt;=&lt;span&gt;username;
                            bean.content&lt;/span&gt;=&lt;span&gt;content.getText().toString();
                            bean.money&lt;/span&gt;=&lt;span&gt;Integer.parseInt(money.getText().toString());
                            bean.date&lt;/span&gt;=data.getYear()+&quot;-&quot;+(data.getMonth()+1)+&quot;-&quot;+&lt;span&gt;data.getDayOfMonth();
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rb1.isChecked()){
                                bean.title&lt;/span&gt;=&lt;span&gt;rb1.getText().toString();
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rb2.isChecked()){
                                bean.title&lt;/span&gt;=&lt;span&gt;rb2.getText().toString();
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rb3.isChecked()){
                                bean.title&lt;/span&gt;=&lt;span&gt;rb3.getText().toString();
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rb4.isChecked()){
                                bean.title&lt;/span&gt;=&lt;span&gt;rb4.getText().toString();
                            }
                            accountOperator.insert(bean);
                            list.add(bean);
                            accountAdapter.notifyDataSetChanged();
                        }
                    });
                    builder.setNegativeButton(&lt;/span&gt;&quot;Cancel&quot;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    builder.create().show();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; R.id.btn_shouru:
                    AlertDialog.Builder builder2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AlertDialog.Builder(getView().getContext());
                    LayoutInflater inflater2&lt;/span&gt;=&lt;span&gt;LayoutInflater.from(getView().getContext());
                    View viewDialog2&lt;/span&gt;=inflater2.inflate(R.layout.new_income_data,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; EditText content2=&lt;span&gt;(EditText)viewDialog2.findViewById(R.id.et_income_content);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; DatePicker data2=&lt;span&gt;(DatePicker)viewDialog2.findViewById(R.id.dp_income_data);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; EditText money2=&lt;span&gt;(EditText)viewDialog2.findViewById(R.id.et_income_money);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RadioButton frb1=&lt;span&gt;(RadioButton)viewDialog2.findViewById(R.id.rb1);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RadioButton frb2=&lt;span&gt;(RadioButton)viewDialog2.findViewById(R.id.rb2);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RadioButton frb3=&lt;span&gt;(RadioButton)viewDialog2.findViewById(R.id.rb3);


                    builder2.setView(viewDialog2);
                    builder2.setTitle(&lt;/span&gt;&quot;New InCome&quot;&lt;span&gt;);
                    builder2.setPositiveButton(&lt;/span&gt;&quot;OK&quot;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DialogInterface.OnClickListener() {
                        @Override
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onClick(DialogInterface dialog, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; which) {
                            Account bean&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Account();
                            bean.author&lt;/span&gt;=&lt;span&gt;username;
                            bean.content&lt;/span&gt;=&lt;span&gt;content2.getText().toString();
                            bean.money&lt;/span&gt;=&lt;span&gt;Integer.parseInt(money2.getText().toString());
                            bean.date&lt;/span&gt;=data2.getYear()+&quot;-&quot;+(data2.getMonth()+1)+&quot;-&quot;+&lt;span&gt;data2.getDayOfMonth();
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(frb1.isChecked()){
                                bean.title&lt;/span&gt;=&lt;span&gt;frb1.getText().toString();
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(frb2.isChecked()){
                                bean.title&lt;/span&gt;=&lt;span&gt;frb2.getText().toString();
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(frb3.isChecked()){
                                bean.title&lt;/span&gt;=&lt;span&gt;frb3.getText().toString();
                            }
                            accountOperator.insert(bean);
                            list.add(bean);
                            accountAdapter.notifyDataSetChanged();
                        }
                    });
                    builder2.setNegativeButton(&lt;/span&gt;&quot;Cancel&quot;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    builder2.create().show();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; R.id.btn_delete:
                    accountOperator.deleteall(username);
                    list.clear();
                    accountAdapter.notifyDataSetChanged();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;


            }
        }
    };

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; inin(String author) {
        Cursor cursor&lt;/span&gt;=&lt;span&gt; (Cursor) accountOperator.findall(author);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(cursor!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(cursor.moveToNext()){
                Account bean&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Account();
                bean.content&lt;/span&gt;=cursor.getString(cursor.getColumnIndex(&quot;content&quot;&lt;span&gt;));
                bean.money&lt;/span&gt;=cursor.getInt(cursor.getColumnIndex(&quot;money&quot;&lt;span&gt;));
                bean.date&lt;/span&gt;=cursor.getString(cursor.getColumnIndex(&quot;date&quot;&lt;span&gt;));
                bean.title&lt;/span&gt;=cursor.getString(cursor.getColumnIndex(&quot;title&quot;&lt;span&gt;));
                list.add(bean);
            }
            cursor.close();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 10 Feb 2020 15:25:00 +0000</pubDate>
<dc:creator>清风紫雪</dc:creator>
<og:description>今天实现的内容有：添加账本信息，个人头像的切换，密码的修改，退出登录。 添加账本信息有三个功能： ①记一笔支出项目 ②记一笔收入项目 ③清空所有项目 在此期间遇到的困难有：Activity与Fragm</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaofengzai/p/12293427.html</dc:identifier>
</item>
<item>
<title>java代码之美（14）---Java8 函数式接口 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/12046505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/12046505.html</guid>
<description>&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;之前写了有关JDK8的Lambda表达式：&lt;a href=&quot;https://www.cnblogs.com/qdhxhz/p/9393724.html&quot;&gt;java代码之美（1）---Java8 Lambda&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;函数式接口可以理解就是为Lambda服务的，它们组合在一起可以让你的代码看去更加简洁。&lt;/p&gt;
&lt;h2 id=&quot;一概念&quot;&gt;&lt;span&gt;一、概念&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;什么是函数式接口&quot;&gt;1、什么是函数式接口&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;概念&lt;/code&gt; 所谓的函数式接口, 当然首先是一个接口, 然后就是在这个接口里面 &lt;strong&gt;只能有一个抽象方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有关函数式接口,有个专门的注解叫：&lt;code&gt;@FunctionalInterface&lt;/code&gt;。该注解主要特点有：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1、该注解只能标记在&quot;有且仅有一个抽象方法&quot;的接口上，表示函数式接口。
2、JDK8接口中的静态方法和默认方法，都不算是抽象方法。
3、接口默认继承 java.lang.Object,所以如果接口显示声明覆盖了Object中的方法，那么也不算抽象方法。
4、允许java.lang.Object中的public方法
5、该注解不是必须的，如果一个接口符合&quot;函数式编程&quot;定义，那么加不加该注解都没有影响。加上该注解能够 更好地让编译器进行检查，
如果编写的不是函数式接口，但是加上了@FunctionalInterface 那么编译器会报错。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;示例&quot;&gt;2、示例&lt;/h4&gt;
&lt;p&gt;1) &lt;strong&gt;正确示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * 函数式接口注解
 */
@FunctionalInterface
public interface PersonInterface { 
    /**
     * 1、仅有一个抽象方法
     */
     void say();
     
    /**
     * 2、java.lang.Object中的方法不算
     */
    @Override
     boolean equals(Object var1);
    
    /**
     * 3、java8 接口才可以有默认的方法实现 前提是方法名称必须使用default关键字修饰
     */
     default void defaultMethod() {
        System.out.println(&quot;haha&quot;);
    }
    
    /**
     * 4、静态方法
     */
     static void staticMethod() {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) &lt;strong&gt;错误示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201912/1090617-20191215225335012-943059839.jpg&quot; width=&quot;600&quot; height=&quot;320&quot;/&gt;&lt;/p&gt;
&lt;p&gt;加上&lt;strong&gt;@FunctionInterface&lt;/strong&gt;,就代表该接口是函数式接口，只能有一个抽象方法，如果有多个编译时就会直接报错。&lt;/p&gt;
&lt;h4 id=&quot;为什么只能有一个抽象方法&quot;&gt;3、为什么只能有一个抽象方法&lt;/h4&gt;
&lt;p&gt;其实这个问题很好去理解,上面说了函数式接口主要是为Lambda语法服务的,为了让代码看去更加简洁。&lt;/p&gt;
&lt;p&gt;下面通过示例来说明&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;     public static void main(String[] args) {
       //上面的接口 通过Lambda表达式重新 say方法 
        PersonInterface inter = () -&amp;gt; System.out.println(&quot;我说什么好呢？&quot;);
        inter.say();
        //控制台输出: 我说什么好呢？
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过 &lt;strong&gt;函数式接口 + Lambda表达式&lt;/strong&gt; 让代码看去变的简洁,而这里的关键点在于:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ()-&amp;gt;{} 就是代表对say()方法的重写&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你有个多个抽象方法, 那么&lt;strong&gt;（）-&amp;gt; {}&lt;/strong&gt; 这种写法，编译器就不知道这是重写的哪个方法了。所以这就是为什么只能有一个抽象方法的原因。&lt;/p&gt;

&lt;h2 id=&quot;二综合示例&quot;&gt;&lt;span&gt;二、综合示例&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;这里再举一个综合示例，来方便理解它们。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;自定义函数式接口&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
  * 自定义函数TestFunction，提供handler接口， 传入的是A，返回的是B
  */
@FunctionalInterface
public interface MyFunction&amp;lt;A, B&amp;gt; {

    /**
      * @Description: 传入的是A 返回的是B
      */
    B handler(A a, A a1);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Student对象&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Student {
    /**
     * 姓名
     */
    private String name;
    /**
     * 年龄
     */
    private Integer age;
    
    //省略 set get toString 全参数构造函数 无参构造函数
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;测试类&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;   public static void main(String[] args) {
        //1、求和 传入Integer返回Integer类型
        MyFunction&amp;lt;Integer, Integer&amp;gt; myFunction1 = (x, y) -&amp;gt; {
            //返回总和
            return x + y;
        };
        Integer count = myFunction1.handler(5, 10);
        System.out.println(&quot;输出总和为：&quot; + count);


        //2、求和 传入Integer返回String类型
        MyFunction&amp;lt;Integer, String&amp;gt; myFunction2 = (x, y) -&amp;gt; {
            //返回总和
            return x + &quot; + &quot; + y + &quot; = &quot; + (x + y);
        };
        System.out.println(myFunction2.handler(5, 10));


        //3、对象处理 过滤对象
        List&amp;lt;Student&amp;gt; students = Arrays.asList(new Student(&quot;小明&quot;, 3), new Student(&quot;小白&quot;, 13), new Student(&quot;小黄&quot;, 18));
        MyFunction&amp;lt;Integer, List&amp;lt;Student&amp;gt;&amp;gt; myFunction3 = (x, y) -&amp;gt; {
            //这里通过java8 的stream来过滤 年龄大于x 且小于y的对象
            List&amp;lt;Student&amp;gt; studentList = students.stream().filter(student -&amp;gt; student.getAge() &amp;gt; x &amp;amp;&amp;amp; student.getAge() &amp;lt; y).collect(Collectors.toList());
            return studentList;
        };

        List&amp;lt;Student&amp;gt; list = myFunction3.handler(5, 15);
        //遍历集合 输出对象
        list.forEach(x -&amp;gt; System.out.println(x));
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;运行结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201912/1090617-20191215225351009-4082406.jpg&quot; width=&quot;600&quot; height=&quot;120&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从运行结果可以很明显看出，集合对象经过过滤只剩下一个满足条件的了。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;你如果愿意有所作为，就必须有始有终。(24)&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 10 Feb 2020 14:56:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<og:description>Java8 函数式接口 之前写了有关JDK8的Lambda表达式： &amp;quot;java代码之美（1） Java8 Lambda&amp;quot; 函数式接口可以理解就是为Lambda服务的，它们组合在一起</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qdhxhz/p/12046505.html</dc:identifier>
</item>
<item>
<title>Dubbo Cluster集群那点你不知道的事。 - why技术</title>
<link>http://www.cnblogs.com/thisiswhy/p/12293146.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/thisiswhy/p/12293146.html</guid>
<description>&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是why技术的第33篇原创文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f304b9abdaa8?w=2356&amp;amp;h=1080&amp;amp;f=jpeg&amp;amp;s=192522&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本周是在家办公的一周，上面的图就是我在家的工位。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工欲善其事，必先利其器。在家办公，我是认真的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在家里开发的时候有需求是这样的：一个如果接口调用失败，需要自动进行重试。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然关系不大，但是我还是想到了Dubbo的集群容错策略：Failover Cluster，即失败自动切换。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（这个转折是不是有点生硬.......）&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以借本文对于Dubbo的Cluster集群和Failover Cluster(失败自动切换)策略进行一个详细分析。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文如果没有特别说明的地方，源码均是来自最新的2.7.5版本。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在阅读之前先抛出几个问题：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.Dubbo Cluster集群的作用是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2.Dubbo Cluster的10个实现类你能说出来几个，其中哪几个是集群容错的方法实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3.默认的集群实现类是什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4.Failover Cluster调用失败之后，会自动进行几次重试呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5.什么是Dubbo的粘滞连接？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;6.粘滞连接在Cluster中是怎么应用的？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;7.Cluster选择出一个可用的Invoker最多要进行几次选择？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;8.请问几次选择分别是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：上面的8个问题，前3个是非常常见的面试题。后面的都是你阅读完本文后就可以知道问题的答案，面试中并不常见，但是后面的问题可以综合成&lt;strong&gt;一个非常高频的面试题：有看过什么源码吗，能给我讲讲吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文会对上面的问题进行逐一的、详细的解读。文章的最后会进行一个问题和答案的汇总。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;废话不多说，看完之后觉得不错，还求个关注。抱拳了，老铁。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在生产环境，我们常常是多个服务器跑相同的应用，这种做的目的其一是为了避免单点故障。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了避免单点故障，现在的应用通常至少会部署在两台服务器上。而对于一些负载比较高的服务,比如网关服务，会部署更多的服务器。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，在同一环境下的服务提供者数量会大于1。对于服务消费者来说，同一环境下出现了多个服务提供者。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时会出现几个问题：&lt;strong&gt;对于一次请求，我作为消费者到底调用哪个提供者呢？服务调用失败的时候我怎么做呢？是重试？是抛出异常？或者仅仅是打印出异常？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了处理这些问题，&lt;strong&gt;Dubbo定义了集群接口Cluster以及Cluster Invoker。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群Cluster的用途是将多个服务提供者合并为一个Cluster Invoker，并将这个Invoker暴露给服务消费者。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的好处就是对服务消费者来说，只需通过这个Cluster Invoker进行远程调用即可，至于具体调用哪个服务提供者，以及调用失败后如何处理等问题，现在都交给集群模块去处理。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;集群模块是服务提供者和服务消费者的中间层，为服务消费者屏蔽了服务提供者的情况，这样服务消费者就可以专心处理远程调用相关事宜。比如发请求，接受服务提供者返回的数据等。这就是Dubbo Cluster集群的作用。&lt;/strong&gt;&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据配置可以知道Dubbo集群接口Cluster有10种实现方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3583988bfca?w=739&amp;amp;h=262&amp;amp;f=png&amp;amp;s=34979&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，十种实现方法其中只有&lt;strong&gt;failover、failfast、failsafe、failback、forking、broadcast这6种才属于集群容错的范畴&lt;/strong&gt;。另外的实现均有其他的应用场景。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们先说6种集群容错的实现方法：&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Failover Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;failover=org.apache.dubbo.rpc.cluster.support.FailoverCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;失败自动切换，在调用失败时，失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过retries=&quot;2&quot;来设置重试次数(不含第一次)。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Failfast Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;failfast=org.apache.dubbo.rpc.cluster.support.FailfastCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Failsafe Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;failsafe=org.apache.dubbo.rpc.cluster.support.FailsafeCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Failback Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;failback=org.apache.dubbo.rpc.cluster.support.FailbackCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Forking Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;forking=org.apache.dubbo.rpc.cluster.support.ForkingCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=&quot;2&quot; 来设置最大并行数。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Broadcast Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;broadcast=org.apache.dubbo.rpc.cluster.support.BroadcastCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以对于这个问题你也可以回答上来了：&lt;strong&gt;10个实现类中有哪几个是集群容错的方法实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来再说说另外四个实现类：&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Available Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;available=org.apache.dubbo.rpc.cluster.support.AvailableCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取可用的服务方。遍历所有Invokers通过invoker.isAvalible判断服务端是否活着，只要一个有为true，直接调用返回，不管成不成功。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Mergeable Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mergeable=org.apache.dubbo.rpc.cluster.support.MergeableCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分组聚合，将集群中的调用结果聚合起来，然后再返回结果。比如菜单服务，接口一样，但有多种实现，用group区分，现在消费方需从每种group中调用一次返回结果，合并结果返回，这样就可以实现聚合菜单项。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Mock Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mock=org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本地伪装，通常用于服务降级，比如某验权服务，当服务提供方全部挂掉后，客户端不抛出异常，而是通过 Mock 数据返回授权失败。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;zone-aware Cluster：&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;zone-aware=org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的几种Cluster策略在官网都能找到对应的说明，但是对于这个zone-aware目前官网上是没有介绍的，因为这是前段时间发布的2.7.5版本才支持的内容，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3b8109cd64f?w=740&amp;amp;h=503&amp;amp;f=png&amp;amp;s=67913&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;所以对于zone-aware这个策略我多说两句&lt;/strong&gt;。具体可以参照下面的这个issue： &lt;code&gt;https://github.com/apache/dubbo/issues/5399&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;zone-aware的应用场景是下面这样的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务部署假设是双注册中心：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3bad0962c7b?w=586&amp;amp;h=230&amp;amp;f=png&amp;amp;s=91599&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;则对应消费端，先在注册中心间选择，再到选定的注册中心选址：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3bc23c2edf7?w=1280&amp;amp;h=775&amp;amp;f=jpeg&amp;amp;s=80638&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，和之前相比，&lt;strong&gt;在Dubbo 2.7.5以后，对于多注册中心订阅的场景，选址时的多了一层注册中心集群间的负载均衡。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个注册中心集群间的负载均衡的实现就是：zone-aware Cluster。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于多注册中心间的选址策略，根据类上的注释可以看出，目前设计的有下面四种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3bdf93b6bb6?w=901&amp;amp;h=236&amp;amp;f=png&amp;amp;s=30979&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.指定优先级：&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来自preferred=&quot;true&quot;注册中心的地址将被优先选择，只有该中心无可用地址时才Fallback到其他注册中心&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;dubbo:registry address=&quot;zookeeper://${zookeeper.address1}&quot; preferred=&quot;true&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2.同 zone 优先：&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选址时会和流量中的zone key做匹配，流量会优先派发到相同zone的地址&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;dubbo:registry address=&quot;zookeeper://${zookeeper.address1}&quot; zone=&quot;beijing&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3.权重轮询：&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来自北京和上海集群的地址，将以10:1的比例来分配流量&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;dubbo:registry id=&quot;beijing&quot; address=&quot;zookeeper://${zookeeper.address1}&quot; weight=&quot;100&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;dubbo:registry id=&quot;shanghai&quot; address=&quot;zookeeper://${zookeeper.address2}&quot; weight=&quot;10&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4.默认方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选择第一个可用的即可。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;源码之下无秘密&lt;/strong&gt;。我们从源码中寻找答案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3bff78e4fdc?w=819&amp;amp;h=681&amp;amp;f=png&amp;amp;s=69187&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们可以看到，Cluster是一个SPI接口。其默认实现是FailoverCluster.NAME，如下源码所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3c3a86c95df?w=876&amp;amp;h=233&amp;amp;f=png&amp;amp;s=21224&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以默认的实现方法就是：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于Cluster是一个SPI接口，所以我们也可以根据实际需求去扩展自己的实现类。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们就对FailoverClusterInvoker的doInvoke方法的源码进行解析。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一小节主要回答这一个问题:&lt;strong&gt;Failover Cluster调用失败之后，会自动切换Invoker进行几次重试呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3cdf7b002e5?w=1339&amp;amp;h=830&amp;amp;f=jpeg&amp;amp;s=261410&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过源码，我们可以知道&lt;strong&gt;默认的重试次数是2次&lt;/strong&gt;。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人就问了：为什么第61行的最后还有一个&quot;+1&quot;呢？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你想一想。我们想要在接口调用失败后，重试n次，这个n就是DEFAULT_RETRIES，默认为2。那么我们总的调用次数就是n+1次了。所以这个&quot;+1&quot;是这样来的，很小的一个点。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外图中标记了红色五角星★的地方，第62到64行。也是很关键的地方。对于retries参数，在官网上的描述是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3d28c731595?w=780&amp;amp;h=535&amp;amp;f=png&amp;amp;s=53742&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;不需要重试请设为0&lt;/strong&gt;。我们前面分析了，当设置为0的时候，只会调用一次。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是我也看见过retries配置为&quot;-1&quot;的。-1+1=0。调用0次明显是一个错误的含义。但是程序也正常运行，且只调用一次。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是标记了红色五角星★的地方的功劳了。&lt;strong&gt;防御性编程。哪怕你设置为-10086也只会调用一次。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来对doInvoke方法进行一个全面的解读，下面是2.7.5版本的源码，我基本上每一行主要的代码都加了注释，可以点开大图查看： &lt;code&gt;org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker#doInvoke&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f3f9c7a5cc2f?w=959&amp;amp;h=1558&amp;amp;f=jpeg&amp;amp;s=508331&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上所示，FailoverClusterInvoker的doInvoke方法主要的工作流程是：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是获取重试次数，然后根据重试次数进行循环调用，在循环体内，如果失败，则进行重试。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在循环体内，首先是&lt;strong&gt;调用父类AbstractClusterInvoker的select方法&lt;/strong&gt;，通过负载均衡组件选择一个Invoker，然后再通过这个Invoker的invoke方法进行远程调用。如果失败了，记录下异常，并进行重试。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意一个细节：在进行重试前，重新获取最新的invoker集合，这样做的好处是，如果在重试的过程中某个服务挂了，可以通过调用list方法可以保证copyInvokers是最新的可用的invoker列表。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个流程大致如此，不是很难理解。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们要看的是&lt;strong&gt;父类AbstractClusterInvoker的select方法&lt;/strong&gt;的逻辑。但是在看select方法的逻辑之前，我必须得先铺垫一下Dubbo粘滞连接特性的知识。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官网上的解释是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f407979c7f8d?w=757&amp;amp;h=378&amp;amp;f=png&amp;amp;s=43294&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出，这是一个服务治理类型的参数。当设置true时，该接口上的所有方法使用同一个provider。官方文档中说明可以用在接口和方法级别。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些都是一些比较简单的服务治理的规则。如果需求更复杂，则需要使用路由功能。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方文档已经说的很清楚了。我就只简单的解释一下第一句话：&lt;strong&gt;粘滞连接用于有状态服务。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那么什么是有状态服务，什么又是无状态服务呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据我简单的理解。对服务提供者来说，究竟是有状态的服务提供者，还是无状态服务，其判断依据就一句话： &lt;strong&gt;从客户端发起的两个或者多个请求，在服务端是否具备上下文关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，我们经常会用到的session。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众所周知，HTTP协议是无状态的。那么当在一个电商场景下，将用户挑选的商品放到购物车，保存到session里，当付款的时候，再从购物车里取出商品信息。这样通过session就实现了有状态的服务。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个服务被设计为无状态的时候，对于客户端来说，可以随意调用。所以无状态的服务可以很容易的进行水平扩容。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个服务被设计为有状态的时候，想要水平扩容的时候就不是那么简单了。因为客户端和服务端存在着上下文关系，所以客户端每次都需要请求那一台服务端。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把一个有状态的服务修改为无状态的服务的方案也很简单。还是拿session举例，这个时候，我们的分布式session就呼之欲出了。把session集中存储起来，比如放到redis中，弄一个独立于服务的session共享层。这样，一个有状态的服务就可以变为一个无状态的服务。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看完这一小节，&lt;strong&gt;你也就知道了粘滞连接在Cluster中是怎么应用的了。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了粘滞连接的知识储备后，再看select方法就比较轻松了，首先需要知道的是&lt;strong&gt;select方法是一个关键的公共方法&lt;/strong&gt;，其作用就是选择出一个可用的invoke，有下面这几个Cluster的实现类都在调用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f41855367959?w=1224&amp;amp;h=270&amp;amp;f=png&amp;amp;s=66280&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码片段不长，逻辑也比较清楚，具体代码解析如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f41a8658d7d8?w=1004&amp;amp;h=741&amp;amp;f=jpeg&amp;amp;s=238247&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据代码画出select方法的流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f41d1d274c8f?w=722&amp;amp;h=1317&amp;amp;f=jpeg&amp;amp;s=182415&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合代码和流程图，再进行一个文字描述。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先介绍一下select的四个入参，分别是：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;loanbalance：负载均衡策略。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;invocation：它持有调用过程中的变量，比如方法名，参数等。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;invokers：这里的invokers列表可以看做是存活着的服务提供者列表。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;selected：已经被选择过的invoker集合。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过源码我们可以看出，&lt;strong&gt;select方法的主要逻辑集中在了对粘滞连接特性的支持上。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是获取sticky配置，然后再检测invokers列表中是否包含 stickyInvoker，如果不包含，则认为该stickyInvoker不可用，此时将其置空。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么可以置空？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这里的invokers列表是存活着的服务提供者列表，如果这个列表不包含stickyInvoker，那自然而然的认为stickyInvoker挂了，所以置空。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，如果stickyInvoker存在于invokers列表中，说明stickyInvoker还活着，此时要进行下一项检测。检测selected（选择过的服务提供者列表）中是否包含 stickyInvoker。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果包含的话，说明stickyInvoker在此之前没有成功提供服务（但其仍然处于存活状态）。此时我们认为这个服务不可靠，不应该在重试期间内再次被调用，因此这个时候不会返回该stickyInvoker。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果selected不包含stickyInvoker，此时还需要&lt;strong&gt;进行可用性检测&lt;/strong&gt;，比如检测服务提供者网络连通性等。当可用性检测通过，才可返回 stickyInvoker，&lt;strong&gt;否则调用doSelect方法选择Invoker。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果sticky为true，此时会将doSelect方法选出的Invoker赋值给stickyInvoker。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于粘滞连接和可用性检测的默认配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f4325dcbcc66?w=660&amp;amp;h=548&amp;amp;f=png&amp;amp;s=51153&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;即默认情况下粘滞连接是关闭状态。当粘滞连接开启时，默认会进行可用性检查。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于select方法先分析这么多，继续向下分析。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读完这一小节你可以回答出这两个问题：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.Cluster选择出一个可用的Invoker最多要进行几次选择？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2.请问几次选择分别是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;doSelect方法的源码解析如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f4433169cb21?w=1265&amp;amp;h=874&amp;amp;f=jpeg&amp;amp;s=292701&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Failover Cluster选择出一个可用的Invoker最多要进行&lt;strong&gt;三次选择&lt;/strong&gt;，也是doSelect的主要逻辑，三次分别是（图中标号了①②③的地方）：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;①：通过负载均衡组件选择 Invoker。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;②：如果选出来的 Invoker 不稳定，或不可用，此时需要调用reselect 方法进行重选。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③：reselect选出来的Invoker为空，此时定位invoker在invokers列表中的位置index，然后获取index+1处的 invoker。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来看一下 reselect 方法的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f44b51e9ff5d?w=991&amp;amp;h=969&amp;amp;f=jpeg&amp;amp;s=287516&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据源码做出流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f44d363fc30f?w=649&amp;amp;h=971&amp;amp;f=png&amp;amp;s=59454&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，reselect方法总结下来其实做了四件事情：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一：查找可用的invoker，并将其添加到reselectInvokers集合中。这个reselectInvokers集合你可以理解为里面放的是&lt;strong&gt;所有的可用的invoker的集合与selected集合的差集。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二：如果经过筛选后，reselectInvokers不为空，则通过负载均衡组件再次进行选择并返回。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三：如果经过筛选后，reselectInvokers为空，则再从selected集合(已经被调用过的集合)中选出所有可用的invoker，放到reselectInvokers中，再次通过负载均衡组件进行选择并返回。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四：如果进过上面的步骤后，没有选择出合适的invoker，reselectInvokers还是为空，说明所有的invoker都不可用了，返回为null。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，到这里就把最开始抛出的8个问题都解答完毕了，接下来对问题、答案进行一个汇总。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.Dubbo Cluster集群的作用是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来说：集群模块是服务提供者和服务消费者的中间层，为服务消费者屏蔽了服务提供者的情况，这样服务消费者就可以专心处理远程调用相关事宜。比如发请求，接受服务提供者返回的数据等。这就是Dubbo Cluster集群的作用。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2.Dubbo Cluster的10个实现类你能说出来几个，其中哪几个是集群容错的方法实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据配置可以知道Dubbo集群接口Cluster有10种实现方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f45932a590b6?w=739&amp;amp;h=262&amp;amp;f=png&amp;amp;s=34979&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中failover、failfast、failsafe、failback、forking、broadcast这6种才属于集群容错的范畴。另外的实现均有其他的应用场景。还需要注意的是zone-aware是2.7.5版本后才支持的实现类，之前是registryaware。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3.默认的集群实现类是什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;失败自动切换： &lt;code&gt;org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker&lt;/code&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4.Failover Cluster调用失败之后，会自动切换Invoker进行几次重试呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自动进行2次重试，共计调用3次。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5.什么是Dubbo的粘滞连接？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;粘滞连接用于有状态服务，尽可能让客户端总是向同一提供者发起调用，除非该提供者挂了，再连另一台。粘滞连接将自动开启延迟连接，以减少长连接数。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;6.粘滞连接在Cluster中是怎么应用的？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参照AbstractClusterInvoker select源码解析。select方法的主要逻辑集中在了对粘滞连接特性的支持上。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;7.Cluster选择出一个可用的Invoker最多要进行几次选择？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最多进行三次选择。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;8.请问几次选择分别是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;①：通过负载均衡组件选择 Invoker。 ②：如果选出来的 Invoker 不稳定，或不可用，此时需要调用reselect 方法进行重选。 ③：reselect选出来的Invoker为空，此时定位invoker在invokers列表中的位置index，然后获取index+1处的 invoker。&lt;/p&gt;

&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前也写过几篇Dubbo相关的文章，有兴趣的可以看一看：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/tD7lJaZMWMStzwYfxZWfew&quot;&gt;《Dubbo 2.7.5在线程模型上的优化》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/z-BwnuN21RHgrpfyTy8LZA&quot;&gt;《快速失败机制&amp;amp;失败安全机制》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/QFwyP1IF8XTuS5aHaQ9o_Q&quot;&gt;《够强！一行代码就修复了我提的Dubbo的Bug。》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/_AzAe4z-30ihfJwFwBUvaw&quot;&gt;《Dubbo加权轮询负载均衡的源码和Bug，了解一下?》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ctBM0WO-uWNlTWHI-TPniw&quot;&gt;《Dubbo一致性哈希负载均衡的源码和Bug，了解一下？》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/mxoARgB-1jyA9Kf4cRVP-g&quot;&gt;《一文讲透Dubbo负载均衡之最小活跃数算法》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/PjR4s8aisnt3Pen2ie_OUQ&quot;&gt;《参加Dubbo社区开发者日成都站后，带给我的一点思考。》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/_WPuFsjNRjLc2vQnXam8Gg&quot;&gt;《Dubbo 2.7新特性之异步化改造》&lt;/a&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;才疏学浅，难免会有纰漏，如果你发现了错误的地方，还请你留言给我指出来，我对其加以修改。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感谢您的阅读，原创不易，求个关注.&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎关注公众号【why技术】,坚持输出原创。愿你我共同进步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/2/10/1702f59f2179604d?w=258&amp;amp;h=258&amp;amp;f=png&amp;amp;s=53859&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 10 Feb 2020 14:23:00 +0000</pubDate>
<dc:creator>why技术</dc:creator>
<og:description>这是why技术的第33篇原创文章 本周是在家办公的一周，上面的图就是我在家的工位。 工欲善其事，必先利其器。在家办公，我是认真的。 在家里开发的时候有需求是这样的：一个如果接口调用失败，需要自动进行重</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/thisiswhy/p/12293146.html</dc:identifier>
</item>
<item>
<title>理解numpy中ndarray的内存布局和设计哲学 - shine-lee</title>
<link>http://www.cnblogs.com/shine-lee/p/12293097.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shine-lee/p/12293097.html</guid>
<description>&lt;p&gt;博客：&lt;a href=&quot;https://www.cnblogs.com/shine-lee/&quot;&gt;博客园&lt;/a&gt; | &lt;a href=&quot;https://blog.csdn.net/blogshinelee&quot;&gt;CSDN&lt;/a&gt; | &lt;a href=&quot;https://blog.shinelee.me/&quot;&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文的主要目的在于理解&lt;code&gt;numpy.ndarray&lt;/code&gt;的内存结构及其背后的设计哲学。&lt;/p&gt;

&lt;blockquote readability=&quot;6.9635627530364&quot;&gt;
&lt;p&gt;NumPy provides an &lt;strong&gt;N-dimensional array&lt;/strong&gt; type, the &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/arrays.ndarray.html#arrays-ndarray&quot;&gt;ndarray&lt;/a&gt;, which describes a collection of “items” of &lt;strong&gt;the same type&lt;/strong&gt;. The items can be &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/arrays.indexing.html#arrays-indexing&quot;&gt;indexed&lt;/a&gt; using for example N integers.&lt;/p&gt;
&lt;p&gt;—— from &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/arrays.html&quot; class=&quot;uri&quot;&gt;https://docs.scipy.org/doc/numpy-1.17.0/reference/arrays.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ndarray是numpy中的&lt;strong&gt;多维数组&lt;/strong&gt;，数组中的元素具有&lt;strong&gt;相同的类型&lt;/strong&gt;，且可以被&lt;strong&gt;索引&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如下所示：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; a = np.array([[0,1,2,3],[4,5,6,7],[8,9,10,11]])
&amp;gt;&amp;gt;&amp;gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;class 'numpy.ndarray'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; a.dtype   
dtype('int32')
&amp;gt;&amp;gt;&amp;gt; a[1,2]
6
&amp;gt;&amp;gt;&amp;gt; a[:,1:3]
array([[ 1,  2],
       [ 5,  6],
       [ 9, 10]])

&amp;gt;&amp;gt;&amp;gt; a.ndim    
2
&amp;gt;&amp;gt;&amp;gt; a.shape   
(3, 4)        
&amp;gt;&amp;gt;&amp;gt; a.strides 
(16, 4)       &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注：&lt;code&gt;np.array&lt;/code&gt;并不是类，而是用于创建&lt;code&gt;np.ndarray&lt;/code&gt;对象的其中一个函数，numpy中多维数组的类为&lt;code&gt;np.ndarray&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ndarray的设计哲学在于数据存储与其解释方式的分离，或者说&lt;code&gt;copy&lt;/code&gt;和&lt;code&gt;view&lt;/code&gt;的分离，让尽可能多的操作发生在解释方式上（&lt;code&gt;view&lt;/code&gt;上），而尽量少地操作实际存储数据的内存区域。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下所示，像&lt;code&gt;reshape&lt;/code&gt;操作返回的新对象&lt;code&gt;b&lt;/code&gt;，&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;的&lt;code&gt;shape&lt;/code&gt;不同，但是两者共享同一个数据block，&lt;code&gt;c=b.T&lt;/code&gt;，&lt;code&gt;c&lt;/code&gt;是&lt;code&gt;b&lt;/code&gt;的转置，但两者仍共享同一个数据block，数据并没有发生变化，发生变化的只是数据的解释方式。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&amp;gt;&amp;gt;&amp;gt; b = a.reshape(4, 3)
&amp;gt;&amp;gt;&amp;gt; b
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])

# reshape操作产生的是view视图，只是对数据的解释方式发生变化，数据物理地址相同
&amp;gt;&amp;gt;&amp;gt; a.ctypes.data
80831392
&amp;gt;&amp;gt;&amp;gt; b.ctypes.data
80831392
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
false

# 数据在内存中连续存储
&amp;gt;&amp;gt;&amp;gt; from ctypes import string_at
&amp;gt;&amp;gt;&amp;gt; string_at(b.ctypes.data, b.nbytes).hex()
'000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b000000'

# b的转置c，c仍共享相同的数据block，只改变了数据的解释方式，“以列优先的方式解释行优先的存储”
&amp;gt;&amp;gt;&amp;gt; c = b.T
&amp;gt;&amp;gt;&amp;gt; c
array([[ 0,  3,  6,  9],
       [ 1,  4,  7, 10],
       [ 2,  4,  8, 11]])
&amp;gt;&amp;gt;&amp;gt; c.ctypes.data
80831392
&amp;gt;&amp;gt;&amp;gt; string_at(c.ctypes.data, c.nbytes).hex()
'000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b000000'
&amp;gt;&amp;gt;&amp;gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

# copy会复制一份新的数据，其物理地址位于不同的区域
&amp;gt;&amp;gt;&amp;gt; c = b.copy()
&amp;gt;&amp;gt;&amp;gt; c
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&amp;gt;&amp;gt;&amp;gt; c.ctypes.data
80831456
&amp;gt;&amp;gt;&amp;gt; string_at(c.ctypes.data, c.nbytes).hex()
'000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b000000'

# slice操作产生的也是view视图，仍指向原来数据block中的物理地址
&amp;gt;&amp;gt;&amp;gt; d = b[1:3, :]
&amp;gt;&amp;gt;&amp;gt; d
array([[3, 4, 5],
       [6, 7, 8]])
&amp;gt;&amp;gt;&amp;gt; d.ctypes.data
80831404
&amp;gt;&amp;gt;&amp;gt; print('data buff address from {0} to {1}'.format(b.ctypes.data, b.ctypes.data + b.nbytes))
data buff address from 80831392 to 80831440
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;11.633720930233&quot;&gt;
&lt;p&gt;&lt;strong&gt;副本是一个数据的完整的拷贝&lt;/strong&gt;，如果我们对副本进行修改，它不会影响到原始数据，物理内存不在同一位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视图是数据的一个别称或引用&lt;/strong&gt;，通过该别称或引用亦便可访问、操作原有数据，但&lt;strong&gt;原有数据不会产生拷贝&lt;/strong&gt;。如果我们对视图进行修改，它会影响到原始数据，物理内存在同一位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视图一般发生在：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、numpy 的切片操作返回原数据的视图。&lt;/li&gt;
&lt;li&gt;2、调用 ndarray 的 view() 函数产生一个视图。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;副本一般发生在：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Python 序列的切片操作，调用deepCopy()函数。&lt;/li&gt;
&lt;li&gt;调用 ndarray 的 copy() 函数产生一个副本。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;—— from &lt;a href=&quot;https://www.runoob.com/numpy/numpy-copies-and-views.html&quot;&gt;NumPy 副本和视图&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;view&lt;/code&gt;机制的好处显而易见，&lt;strong&gt;省内存，同时速度快&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote readability=&quot;13.52808988764&quot;&gt;
&lt;p&gt;NumPy arrays consist of two major components, &lt;strong&gt;the raw array data&lt;/strong&gt; (from now on, referred to as the data buffer), and &lt;strong&gt;the information about the raw array data&lt;/strong&gt;. The data buffer is typically what people think of as arrays in C or Fortran, &lt;strong&gt;a contiguous (and fixed) block of memory containing fixed sized data items&lt;/strong&gt;. NumPy also contains a significant set of data that describes &lt;strong&gt;how to interpret the data in the data buffer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;—— from &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/internals.html&quot;&gt;NumPy internals&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ndarray的内存布局&lt;strong&gt;示意图&lt;/strong&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/07/1gICjI.png&quot; alt=&quot;https://stackoverflow.com/questions/57262885/how-is-the-memory-allocated-for-numpy-arrays-in-python&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可大致划分成2部分——对应设计哲学中的数据部分和解释方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;raw array data&lt;/strong&gt;：为一个连续的memory block，存储着原始数据，类似C或Fortran中的数组，连续存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;metadata&lt;/strong&gt;：是对上面内存块的解释方式&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;metadata都包含哪些信息呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;dtype&lt;/code&gt;：&lt;strong&gt;数据类型&lt;/strong&gt;，指示了每个数据占用多少个字节，这几个字节怎么解释，比如&lt;code&gt;int32&lt;/code&gt;、&lt;code&gt;float32&lt;/code&gt;等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ndim&lt;/code&gt;：有多少维；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shape&lt;/code&gt;：每维上的数量；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strides&lt;/code&gt;：&lt;strong&gt;维间距&lt;/strong&gt;，即到达当前维下一个相邻数据需要前进的字节数，因考虑内存对齐，不一定为每个数据占用字节数的整数倍；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面4个信息构成了&lt;code&gt;ndarray&lt;/code&gt;的&lt;strong&gt;indexing schema&lt;/strong&gt;，即&lt;strong&gt;如何索引到指定位置的数据，以及这个数据该怎么解释&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;除此之外的信息还有：字节序（大端小端）、读写权限、C-order（行优先存储） or Fortran-order（列优先存储）等，如下所示，&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a.flags
  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  WRITEBACKIFCOPY : False
  UPDATEIFCOPY : False&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ndarray&lt;/code&gt;的底层是C和Fortran实现，上面的属性可以在其源码中找到对应，具体可见&lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/c-api.types-and-structures.html#c.PyArrayObject&quot;&gt;PyArrayObject&lt;/a&gt;和&lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/c-api.types-and-structures.html#c.PyArray_Descr&quot;&gt;PyArray_Descr&lt;/a&gt;等结构体。&lt;/p&gt;

&lt;p&gt;为什么&lt;code&gt;ndarray&lt;/code&gt;可以这样设计？&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;ndarray&lt;/code&gt;是为矩阵运算服务的，&lt;strong&gt;&lt;code&gt;ndarray&lt;/code&gt;中的所有数据都是同一种类型&lt;/strong&gt;，比如&lt;code&gt;int32&lt;/code&gt;、&lt;code&gt;float64&lt;/code&gt;等，每个数据占用的字节数相同、解释方式也相同，所以可以稠密地排列在一起，在取出时根据&lt;code&gt;dtype&lt;/code&gt;现copy一份数据组装成&lt;code&gt;scalar&lt;/code&gt;对象输出。这样极大地节省了空间，&lt;code&gt;scalar&lt;/code&gt;对象中除了数据之外的域没必要重复存储，同时因为连续内存的原因，可以按秩访问，速度也要快得多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/10/15qu7D.png&quot; alt=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/arrays.html&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&amp;gt;&amp;gt;&amp;gt; a[1,1]
5
&amp;gt;&amp;gt;&amp;gt; i,j = a[1,1], a[1,1]

# i和j为不同的对象，访问一次就“组装一个”对象
&amp;gt;&amp;gt;&amp;gt; id(i)
102575536
&amp;gt;&amp;gt;&amp;gt; id(j)
102575584
&amp;gt;&amp;gt;&amp;gt; a[1,1] = 4
&amp;gt;&amp;gt;&amp;gt; i
5
&amp;gt;&amp;gt;&amp;gt; j
5
&amp;gt;&amp;gt;&amp;gt; a
array([[ 0,  1,  2,  3],
       [ 4,  4,  6,  7],
       [ 8,  9, 10, 11]])

# isinstance(val, np.generic) will return True if val is an array scalar object. Alternatively, what kind of array scalar is present can be determined using other members of the data type hierarchy.
&amp;gt;&amp;gt; isinstance(i, np.generic)
True&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里，可以将&lt;code&gt;ndarray&lt;/code&gt;与python中的&lt;code&gt;list&lt;/code&gt;对比一下，&lt;code&gt;list&lt;/code&gt;可以容纳不同类型的对象，像&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;tuple&lt;/code&gt;等都可以放在一个&lt;code&gt;list&lt;/code&gt;里，所以&lt;code&gt;list&lt;/code&gt;中存放的是对象的引用，再通过引用找到具体的对象，这些对象所在的物理地址并不是连续的，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/10/15j5dK.png&quot; alt=&quot;https://jakevdp.github.io/PythonDataScienceHandbook/02.01-understanding-data-types.html&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以相对&lt;code&gt;ndarray&lt;/code&gt;，&lt;code&gt;list&lt;/code&gt;访问到数据需要多跳转1次，&lt;code&gt;list&lt;/code&gt;只能做到对对象引用的按秩访问，对具体的数据并不是按秩访问，所以效率上&lt;code&gt;ndarray&lt;/code&gt;比&lt;code&gt;list&lt;/code&gt;要快得多，空间上，因为&lt;code&gt;ndarray&lt;/code&gt;只把数据紧密存储，而&lt;code&gt;list&lt;/code&gt;需要把每个对象的所有域值都存下来，所以&lt;code&gt;ndarray&lt;/code&gt;比&lt;code&gt;list&lt;/code&gt;要更省空间。&lt;/p&gt;

&lt;p&gt;下面小结一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ndarray&lt;/code&gt;的设计哲学在于&lt;strong&gt;数据与其解释方式的分离，让绝大部分多维数组操作只发生在解释方式上&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ndarray&lt;/code&gt;中的&lt;strong&gt;数据在物理内存上连续存储，在读取时根据&lt;code&gt;dtype&lt;/code&gt;现组装成对象输出，可以按秩访问，效率高省空间&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;之所以能这样实现，在于&lt;code&gt;ndarray&lt;/code&gt;是为矩阵运算服务的，所有&lt;strong&gt;数据单元都是同种类型&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 10 Feb 2020 14:14:00 +0000</pubDate>
<dc:creator>shine-lee</dc:creator>
<og:description>博客： &amp;quot;博客园&amp;quot; | &amp;quot;CSDN&amp;quot; | &amp;quot;blog&amp;quot; [TOC] 本文的主要目的在于理解 的内存结构及其背后的设计哲学。 ndarray是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/shine-lee/p/12293097.html</dc:identifier>
</item>
</channel>
</rss>