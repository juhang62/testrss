<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Vue —— 精讲 VueRouter（1） - BM老李</title>
<link>http://www.cnblogs.com/BM-laoli/p/13123691.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BM-laoli/p/13123691.html</guid>
<description>&lt;p&gt;最近被Boos调去给新人做培训去了，目前把自己整理的一些东西分享出来，希望对大家有所帮助，这篇文章是关于VueRouter的教学系列&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;265&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;最近被Boos调去给新人做培训去了，目前把自己整理的一些东西分享出来，希望对大家有所帮助&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2 id=&quot;一、基本概念&quot;&gt;一、基本概念&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;路由就是通过网络把讯息从源地址传输到目的地的活动&lt;br/&gt;需要一些映射表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;做路由&lt;/li&gt;
&lt;li&gt;做信息的转发（核心就是：转发）&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;后端路由还有前端路由，后端渲染和前端渲染&quot;&gt;后端路由还有前端路由，后端渲染和前端渲染&lt;/h3&gt;
&lt;p&gt;前端渲染（前后端分离API生态），后端渲染（view嵌套一起）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;前端路由的核心概念&lt;br/&gt;地址变化的时候改变url的时候，不进行整体页面刷新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;改变url但是不刷新页面，的解决方式&quot;&gt;改变url但是不刷新页面，的解决方式&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我们有这样的一个需求，改变url跳转地址，我们获取新的页面，但是不希望页面发生刷新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;解决方案1：locaionhash--&quot;&gt;解决方案1：locaion.hash = '/'&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这个是vueRouter的底层实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;监听hash的变化，从而改变网页数据的获取机制，渲染对应的组件，&lt;/p&gt;
&lt;h4 id=&quot;解决方案2：h5的histroray模式&quot;&gt;解决方案2：H5的histroray模式&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;pushState&lt;br/&gt;history.pushState({},'','home'),第三个参数就是url&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里的push实际上就是一个栈结构（先进后出），&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;假设我们这里需要回去,使用back()弹栈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;history.pushState({},'','home'),
history.pushState({},'','about'),
history.pushState({},'','user'),

//执行这个之后就能进行back()出栈了
history.back(),
// 此时的url是 /about

&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;repalceState&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这里有一个方法和push方法很像，但是不会back()不能点击后腿按钮&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;history.repalceState({},'','user'),
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;go&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这里的go是对栈的一个操作，&lt;br/&gt;go(-1)弹出一个&lt;br/&gt;go(-2)弹出二个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;go(1)压入一个&lt;br/&gt;go(2)压入二个&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;go(-1)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;以上就是我们的基本的前端路由原理&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、v-router基本使用&quot;&gt;二、v-router基本使用&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;前端三大框架都有自己的router，可以用来构建SPA应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用小提示，还是非常非常的简单的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果你没有安装就需要 npm install vue-router去安装&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;导入路由对象，并且调用Vue.use(VueRouter)安装这个路由插件&lt;/li&gt;
&lt;li&gt;创建路由实例，传入映射配置wxain&lt;/li&gt;
&lt;li&gt;在vue实例中挂载创建好了的路由&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;1导入路由对象，并且配置optionn给路由&quot;&gt;1.导入路由对象，并且配置optionn给路由&lt;/h3&gt;
&lt;p&gt;/router/index.js&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
/**
 * 配置路由相关的信息
 */
// 1. 导入
 import Router from 'vue-router'
 
 // 2.1 导入vue实例
import Vue from 'vue'

// 导入组件
import Home from '../components/Home.vue'
import About from '../components/About.vue'


// 2.2使用路由（插件），安装插件，vue的插件，都是这样安装，Vue.use
Vue.use(Router)

// 3. 创建路路由对象，这个就是在Router里面配置映射和对象等东西

// 4. 抽离配置项出来
const routes = []

const router = new Router({routes})

//4. 导出
export default router 
 

&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;2配置路由映射&quot;&gt;2.配置路由映射&lt;/h3&gt;
&lt;p&gt;/router/index.js&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const routes = [
 
 {path:'/home',component:Home},
 {path:'/about',component:About},

] 
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3在实例中使用路由&quot;&gt;3.在实例中使用路由&lt;/h3&gt;
&lt;p&gt;/main.js&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;import Vue from 'vue'
import App from './App'
import router from './router'//注意啊模块查找规则index.js

Vue.config.productionTip = false

/* eslint-disable no-new */
new Vue({
  el: '#app',
  router,// 主要是在这里挂载进去就好了
  render: h =&amp;gt; h(App)
}) 
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4小心，我们的路由入口还有连接link&quot;&gt;4.小心，我们的路由入口还有连接link&lt;/h3&gt;
&lt;p&gt;/App.vue&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;
&amp;lt;template&amp;gt;
  &amp;lt;div id=&quot;app&quot;&amp;gt;
    &amp;lt;!-- //这两个是一个全局祖册过着个组件，这个就是一个a标签 --&amp;gt;
    &amp;lt;router-link to='/home'&amp;gt;首页&amp;lt;/router-link&amp;gt;
    &amp;lt;router-link to='/about'&amp;gt;关于&amp;lt;/router-link&amp;gt;
    &amp;lt;!-- 路由出口,既：渲染的出口，这个就是一个占位符号 --&amp;gt;
    &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;以下是我们的两个组件&quot;&gt;以下是我们的两个组件&lt;/h3&gt;
&lt;p&gt;/Home.vue&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;我是首页&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;我是首页内容哈哈哈&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    export default {
        
    }
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;/About.vue&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;我是关于页面&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;我是首关于内容哈哈哈&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    export default {
        
    }
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;以上就是我们非常简单的使用&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;三、其它的知识点补充&quot;&gt;三、其它的知识点补充&lt;/h2&gt;
&lt;h3 id=&quot;路由的默认值，并且修改成modehisary模式&quot;&gt;路由的默认值，并且修改成mode=&amp;gt;hisary模式&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我们希望默认显示的就是一个首页&lt;br/&gt;解决方式，映射一个'/’，然后进行重定向&lt;br/&gt;/index.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;  {
    path:'/',
    redirect:'/home'
  },
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我们为什么要去做这调整成一个history，因为我们希望去掉#这个标识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只需要在new 的时候指定一下就好了&lt;br/&gt;/index,js&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const router = new Router({
  routes,
  mode:&quot;history&quot;//就是这里的这个更改路由方式
})
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;router-link的属性&quot;&gt;router-link的属性&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;tage&lt;br/&gt;to是一个属性 ，默认是渲染成一个a链接，假设我现在需要默认渲染成一个buttmm怎么办呢？&lt;br/&gt;加一个tag就好了&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;router-link to='/home' tag='button'  &amp;gt;首页&amp;lt;/router-link&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;更改模式replceStats 不允许浏览器回退&lt;br/&gt;replace加上去就好了&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-link to='/about' tag='button' replace &amp;gt;关于&amp;lt;/router-link&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;我们可以利用一些默认的东西去非常方便的做到想要的效果&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;style&amp;gt;
.router-link-active{
  color: blue;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;替换值：我们希望不要怎么长，我们希望.active就能改样式怎么搞?&lt;br/&gt;加一个active-calss就好了，这个直接就是acitve做为类就好了&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt; &amp;lt;router-link to='/home' tag='button'  active-class  &amp;gt;首页&amp;lt;/router-link&amp;gt;
 &amp;lt;style&amp;gt;
    .active{
        bgc:red
    }
 &amp;lt;/style&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;代码路由跳转，意思就是重定向&quot;&gt;代码路由跳转，意思就是重定向&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意啊！route != router&lt;/strong&gt;&lt;br/&gt;在我们学习路由的时候，this.$router是一个非常重要的对象&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这个东西在开中经常的使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// this.$router.push('重定向的值就好了')。
// this.$router.push('/home')
// 如果你不想有出现回退按钮，这样来做就好了
this.$router.replace('/home')
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四、动态路由参数&quot;&gt;四、动态路由参数&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;这里只是简单的介绍了理由传参的地址栏拼接模式，但是还有更多更奇奇怪怪的传值方式，详见官方Router文档,&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;this.$router.parmas
// 这个parmas里面就是我们的路由参数存放点
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这里我们有这样的一个需求，我们希望点击user页面的时候可以，得到任意的路由参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;比如我们现在/user/zhnsang，的时候可以获取zhangshang，/user/lishi的时候可以获取lishi&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;首先我们需要在路由里面加:&lt;br/&gt;/router/index.js&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;   {
        path: &quot;/user/:usermsg&quot;,
        component: User
    }
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;页面传递数据&lt;br/&gt;/App.vue&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;router-link :to=&quot;'/user/'+username&quot;&amp;gt;用户相关&amp;lt;/router-link&amp;gt;
&amp;lt;!-- 路由出口,既：渲染的出口，这个就是一个占位符号 --&amp;gt;
&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: 'App',
  data() {
    return {
      username: 'lisi'
    }
  },

&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;页面获取数据&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;一定要注意了，一定是rouer里面定义的才能从另一路由拿出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;/User.vue&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;
&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;我是用户相关专业&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;我是用户讯息相关页面，嘿嘿嘿嘿嘿&amp;lt;/p&amp;gt;
        &amp;lt;h1&amp;gt;{{ $route.params.usermsg }}44&amp;lt;/h1&amp;gt;
        &amp;lt;hr&amp;gt;
        &amp;lt;h2&amp;gt;{{username}}&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    export default {    
        computed: {
            username() {
                return this.$route.params.usermsg
            }
        },
    }
&amp;lt;/script&amp;gt;

&amp;lt;style scpoe&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;五、细节详解&quot;&gt;五、细节详解&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意啊！再说一遍route != router&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;注意啊，这里的$route实际上是我们在main里面new的一个Router得到的,&lt;br/&gt;并且 这个route对象是随着请求的地方不一样，而改变的。也就是说，这个的route是当前页面中的route对象，而且在vue只能只有一个route实例存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;六、-vue的webpack打包详解--路由懒加载&quot;&gt;六、 Vue的webpack打包详解 + 路由懒加载&lt;/h2&gt;
&lt;h3 id=&quot;一个vue项目的简单打包目录结构分析&quot;&gt;一个vue项目的简单打包目录结构分析&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我们来看看,在一个vue项目中，简单的三个文件是怎么打包的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设目前有这样的三个文件 ，我们需要对他们进行打包，mian是入口，有一个add业务，有一个math依赖模块。那么我们webpack打包成的三个文件到底是如何运行的呢？&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在vue中 使用webpack打包的时候，会把一些东西给分模块的打包出来，它打包的东西的目录结构如下&lt;br/&gt;里面我们实际打包的时候会把css，js都给分开，各自有各自的作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-md&quot;&gt;| dist
| ---static
| ---css
| ---js
| -----app.XXXX.js         (这个是项目的业务逻辑所在)
| -----manifest.xxxx.js    (这个是底层打包的依赖文件所在)
| -----vendor.xxxx.js      (这个是依赖所在)
| idnex.html
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;路由懒加载&quot;&gt;路由懒加载&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;概念的理解&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;目前呢，我们打包的情况是这样的：我们所有的代码都是集中放在了以一个app.xxx.js文件中，这样其实不利于后期的维护和开发，因为如果我们有很多很多的大量的代码的时候，我们的这个文件就会变得非常非常的大，于是呢，我们就需要路由懒加载，所谓懒加载就是：‘在需要的时候，才去加载某个资源文件’，路由懒加载，就是把每一个路由对应的业务逻辑代码，在打包的时候分割到不同的js文件中，如何在需要用的时候再去请求它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;经过这样的打包的懒加载之后，我们的目录会变成这个样子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-md&quot;&gt;| dist
| ---static
| ---css
| ---js
| -----0.xxx.js            (假设是路由home的业务逻辑代码)
| -----1.xxx.js             (假设是路由about的业务逻辑代码)
| -----app.XXXX.js         (这个是项目的业务逻辑所在)
| -----manifest.xxxx.js    (这个是底层打包的依赖文件所在)
| -----vendor.xxxx.js      (这个是依赖所在)
| idnex.html
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;如何使用&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;使用非常的简单，主要有如下的三种方式去使用,但是我最喜欢的还是最后一种方式&lt;br/&gt;/rouetr/index.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;- 使用vue的异步组价和webpack的写法，早期的时候
const Home = resolve =&amp;gt;{ require.ensure(['../compenet/Home.vue'],()=&amp;gt;{
   resolve (require('../compenet/Home.vue'))
})}

- AMD规范的写法
const About = resolve =&amp;gt;{ require(['../compenent/About.vue'],resolve) }


- ES6的结合异步组件的方式（最常用）
const Home = () =&amp;gt; import('../compenet/Home.vue')
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;实际的使用&lt;br/&gt;/router/index.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;/**
 * 配置路由相关的信息
 */
// 1. 导入
import Router from 'vue-router'

// 2.1 导入vue实例
import Vue from 'vue'

// 导入组件
// import Home from '../components/Home.vue'
// import About from '../components/About.vue'
// import User from '../components/User'
const Home = () =&amp;gt;
    import ('../components/Home.vue')
const About = () =&amp;gt;
    import ('../components/About.vue')
const User = () =&amp;gt;
    import ('../components/User')


// 2.2使用路由（插件），安装插件，vue的插件，都是这样安装，Vue.use
Vue.use(Router)

// 3. 创建路路由对象，这个就是在Router里面配置映射和对象等东西

// 4. 抽离配置项出来
const routes = [{
        path: '/',
        redirect: '/home'
    },
    {
        path: '/home',
        component: Home
    },
    {
        path: '/about',
        component: About
    },
    {
        path: &quot;/user/:usermsg&quot;,
        component: User
    }
]

const router = new Router({
    routes,
    mode: &quot;history&quot;
})

//4. 导出
export default router

//6. 去main里面挂载
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;七、-路由嵌套&quot;&gt;七、 路由嵌套&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我们目前有这样的一个需求：我们希望我们在hone下，可以/home/new去到home下的一个子组件，/home/message去到另一个子组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;首先 我们需要有组件&lt;br/&gt;/components/HomeMessage.vue&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;ul&amp;gt;
          &amp;lt;li1&amp;gt;我是消息1&amp;lt;/li1&amp;gt;
          &amp;lt;li2&amp;gt;我是消息2&amp;lt;/li2&amp;gt;
          &amp;lt;li3&amp;gt;我是消息3&amp;lt;/li3&amp;gt;
          &amp;lt;li4&amp;gt;我是消息4&amp;lt;/li4&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    export default {
        name:&quot;HomeMessage&quot;
    }   
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;

&amp;lt;/style&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;/components/HomeNews&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li1&amp;gt;新1&amp;lt;/li1&amp;gt;
        &amp;lt;li2&amp;gt;新2&amp;lt;/li2&amp;gt;
        &amp;lt;li3&amp;gt;新3&amp;lt;/li3&amp;gt;
        &amp;lt;li4&amp;gt;新4&amp;lt;/li4&amp;gt;
        &amp;lt;li5&amp;gt;新5&amp;lt;/li5&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    export default {
        name:&quot;HomeNews&quot;
    }
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;在路由里面去配置&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const HomeNews = () =&amp;gt;
    import ('../components/HomeNews')
const HomeMessage = () =&amp;gt;
    import ('../components/HomeNews')


// 2.2使用路由（插件），安装插件，vue的插件，都是这样安装，Vue.use
Vue.use(Router)

// 3. 创建路路由对象，这个就是在Router里面配置映射和对象等东西

// 4. 抽离配置项出来
const routes = [{
        path: '/',
        redirect: '/home'
    },
    {
        path: '/home',
        component: Home,
        children: [{
                path: '',
                redirect: 'news'
            },
            {
                path: 'news',// 这里写路由实际上应该是/home/news,这里只是一个相对路由地址，
                component: HomeNews
            },
            {
                path: 'message',
                component: HomeMessage
            },

        ]
    },
    {
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;打入口router-view（瞎起的名字实际上就是路由的占位符）&lt;br/&gt;/Home.vue&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;我是首页&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;我是首页内容哈哈哈&amp;lt;/p&amp;gt;
     &amp;lt;router-link to=&quot;/home/news&quot;&amp;gt;news&amp;lt;/router-link&amp;gt;
     &amp;lt;router-link to=&quot;/home/message&quot;&amp;gt;message&amp;lt;/router-link&amp;gt;
    &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    export default {
        
    }
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;这里如果是有关状态的保持，我们需要使用key-alive,后面我们再做详细的讲解&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sun, 14 Jun 2020 00:39:00 +0000</pubDate>
<dc:creator>BM老李</dc:creator>
<og:description>最近被Boos调去给新人做培训去了，目前把自己整理的一些东西分享出来，希望对大家有所帮助，这篇文章是关于VueRouter的教学系列</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/BM-laoli/p/13123691.html</dc:identifier>
</item>
<item>
<title>.Net Core微服务入门全纪录（二）——Consul-服务注册与发现（上） - xhznl</title>
<link>http://www.cnblogs.com/xhznl/p/13091750.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xhznl/p/13091750.html</guid>
<description>&lt;p&gt;上一篇【&lt;a href=&quot;https://www.cnblogs.com/xhznl/p/13071260.html&quot;&gt;.Net Core微服务入门全纪录（一）——项目搭建&lt;/a&gt;】讲到要做到服务的灵活伸缩，那么需要有一种机制来实现它，这个机制就是服务注册与发现。当然这也并不是必要的，如果你的服务实例很少，并且很稳定，那么就没有必要使用服务注册与发现。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;服务注册：简单理解，就是有一个注册中心，我们的每个服务实例启动时，都去注册中心注册一下，告诉注册中心我的地址，端口等信息。同样的服务实例要删除时，去注册中心删除一下，注册中心负责维护这些服务实例的信息。&lt;/li&gt;
&lt;li&gt;服务发现：既然注册中心维护了各个服务实例的信息，那么客户端通过注册中心就很容易发现服务的变化了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;有了服务注册与发现，客户端就不用再去配置各个服务实例的地址，改为从注册中心统一获取。&lt;br/&gt;那注册中心又是怎么保证每个地址的可用状态呢，假如某个实例挂了怎么办呢？原则上挂掉的实例不应该被客户端获取到，所以就要提到：健康检查 。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;健康检查：每个服务都需要提供一个用于健康检查的接口，该接口不具备业务功能。服务注册时把这个接口的地址也告诉注册中心，注册中心会定时调用这个接口来检测服务是否正常，如果不正常，则将它移除，这样就保证了服务的可用性。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;常见注册中心有 Consul、ZooKeeper、etcd、Eureka。&lt;/p&gt;

&lt;p&gt;Consul官网：&lt;a href=&quot;https://www.consul.io/&quot;&gt;https://www.consul.io/&lt;/a&gt;&lt;br/&gt;Consul的主要功能有服务注册与发现、健康检查、K-V存储、多数据中心等。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Consul安装：很简单，直接在官网下载解压即可。&lt;/li&gt;
&lt;li&gt;Consul运行：在consul.exe目录下打开命令行执行 &lt;code&gt;consul.exe agent -dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浏览器访问：&lt;a href=&quot;http://localhost:8500/&quot;&gt;http://localhost:8500/&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200611111703212-472627354.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;Consul已成功运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0.86175115207373&quot;&gt;
&lt;p&gt;首先Nuget安装一下Consul：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200611185137685-1407003908.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;这个类库里封装了Consul的api操作，方便我们直接使用。当然自己去写http调用Consul的接口也不是不行。。。接口说明：&lt;a href=&quot;https://www.consul.io/api-docs&quot;&gt;https://www.consul.io/api-docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;改造一下订单服务的代码：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200611212124647-364747164.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ConsulHelper.cs：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static class ConsulHelper
    {
        /// &amp;lt;summary&amp;gt;
        /// 服务注册到consul
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;app&quot;&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;lifetime&quot;&amp;gt;&amp;lt;/param&amp;gt;
        public static IApplicationBuilder RegisterConsul(this IApplicationBuilder app, IConfiguration configuration, IHostApplicationLifetime lifetime) 
        {
            var consulClient = new ConsulClient(c =&amp;gt;
            {
                //consul地址
                c.Address = new Uri(configuration[&quot;ConsulSetting:ConsulAddress&quot;]);
            });

            var registration = new AgentServiceRegistration()
            {
                ID = Guid.NewGuid().ToString(),//服务实例唯一标识
                Name = configuration[&quot;ConsulSetting:ServiceName&quot;],//服务名
                Address = configuration[&quot;ConsulSetting:ServiceIP&quot;], //服务IP
                Port = int.Parse(configuration[&quot;ConsulSetting:ServicePort&quot;]),//服务端口 因为要运行多个实例，端口不能在appsettings.json里配置，在docker容器运行时传入
                Check = new AgentServiceCheck()
                {
                    DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(5),//服务启动多久后注册
                    Interval = TimeSpan.FromSeconds(10),//健康检查时间间隔
                    HTTP = $&quot;http://{configuration[&quot;ConsulSetting:ServiceIP&quot;]}:{configuration[&quot;ConsulSetting:ServicePort&quot;]}{configuration[&quot;ConsulSetting:ServiceHealthCheck&quot;]}&quot;,//健康检查地址
                    Timeout = TimeSpan.FromSeconds(5)//超时时间
                }
            };

            //服务注册
            consulClient.Agent.ServiceRegister(registration).Wait();

            //应用程序终止时，取消注册
            lifetime.ApplicationStopping.Register(() =&amp;gt;
            {
                consulClient.Agent.ServiceDeregister(registration.ID).Wait();
            });

            return app;
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;appsettings.json：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;Logging&quot;: {
    &quot;LogLevel&quot;: {
      &quot;Default&quot;: &quot;Information&quot;,
      &quot;Microsoft&quot;: &quot;Warning&quot;,
      &quot;Microsoft.Hosting.Lifetime&quot;: &quot;Information&quot;
    }
  },
  &quot;AllowedHosts&quot;: &quot;*&quot;,
  &quot;ConsulSetting&quot;: {
    &quot;ServiceName&quot;: &quot;OrderService&quot;,
    &quot;ServiceIP&quot;: &quot;localhost&quot;,
    &quot;ServiceHealthCheck&quot;: &quot;/healthcheck&quot;,
    &quot;ConsulAddress&quot;: &quot;http://host.docker.internal:8500&quot;//注意，docker容器内部无法使用localhost访问宿主机器，如果是控制台启动的话就用localhost
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Startup.cs：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, IHostApplicationLifetime lifetime)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =&amp;gt;
            {
                endpoints.MapControllers();
            });

            //服务注册
            app.RegisterConsul(Configuration, lifetime);
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;OrdersController.cs：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    [Route(&quot;[controller]&quot;)]
    [ApiController]
    public class OrdersController : ControllerBase
    {
        private readonly ILogger&amp;lt;OrdersController&amp;gt; _logger;
        private readonly IConfiguration _configuration;

        public OrdersController(ILogger&amp;lt;OrdersController&amp;gt; logger, IConfiguration configuration)
        {
            _logger = logger;
            _configuration = configuration;
        }

        [HttpGet]
        public IActionResult Get()
        {
            string result = $&quot;【订单服务】{DateTime.Now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;)}——&quot; +
                $&quot;{Request.HttpContext.Connection.LocalIpAddress}:{_configuration[&quot;ConsulSetting:ServicePort&quot;]}&quot;;
            return Ok(result);
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;HealthCheckController.cs：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    [Route(&quot;[controller]&quot;)]
    [ApiController]
    public class HealthCheckController : ControllerBase
    {
        /// &amp;lt;summary&amp;gt;
        /// 健康检查接口
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        [HttpGet]
        public IActionResult Get()
        {
            return Ok();
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此就完成了服务注册，取消注册，健康检查等功能的代码编写。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;同样的改造一下产品服务，代码差不多一样，就不贴了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;继续在docker中运行服务实例，不习惯docker的话用控制台启动也行。--ConsulSetting:ServicePort参数就是传入容器的端口信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker build -t orderapi:1.0 -f ./Order.API/Dockerfile .
docker run -d -p 9060:80 --name orderservice orderapi:1.0 --ConsulSetting:ServicePort=&quot;9060&quot;
docker run -d -p 9061:80 --name orderservice1 orderapi:1.0 --ConsulSetting:ServicePort=&quot;9061&quot;
docker run -d -p 9062:80 --name orderservice2 orderapi:1.0 --ConsulSetting:ServicePort=&quot;9062&quot;

docker build -t productapi:1.0 -f ./Product.API/Dockerfile .
docker run -d -p 9050:80 --name productservice productapi:1.0 --ConsulSetting:ServicePort=&quot;9050&quot;
docker run -d -p 9051:80 --name productservice1 productapi:1.0 --ConsulSetting:ServicePort=&quot;9051&quot;
docker run -d -p 9052:80 --name productservice2 productapi:1.0 --ConsulSetting:ServicePort=&quot;9052&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200611233524931-116426826.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200611233814498-483075424.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200611234007177-1504957047.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200611234027438-1578774746.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，6个服务器实例都已运行，并且成功注册到Consul。&lt;/p&gt;
&lt;p&gt;随便停止2个服务：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200614075548984-1222763607.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200614075708839-1924836544.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/610959/202006/610959-20200614075729593-66300317.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;可以看到停止的服务已经在Consul中被移除。注意，这个是我们停止程序时主动调用Consul移除的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//应用程序终止时，取消注册
lifetime.ApplicationStopping.Register(() =&amp;gt;
{
    consulClient.Agent.ServiceDeregister(registration.ID).Wait();
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然程序发生异常，健康检查不能正确响应的话，Consul也会移除，有一点区别。&lt;/p&gt;
&lt;p&gt;那么注册，发现，健康检查功能都完成了，下一步就该考虑客户端如何拿到这些服务实例的地址了。&lt;/p&gt;
&lt;p&gt;代码放在：&lt;a href=&quot;https://github.com/xiajingren/NetCoreMicroserviceDemo&quot;&gt;https://github.com/xiajingren/NetCoreMicroserviceDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;未完待续...&lt;/p&gt;
</description>
<pubDate>Sun, 14 Jun 2020 00:33:00 +0000</pubDate>
<dc:creator>xhznl</dc:creator>
<og:description>前言 上一篇【.Net Core微服务入门全纪录（一）——项目搭建】讲到要做到服务的灵活伸缩，那么需要有一种机制来实现它，这个机制就是服务注册与发现。当然这也并不是必要的，如果你的服务实例很少，并且很</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xhznl/p/13091750.html</dc:identifier>
</item>
<item>
<title>Nginx 的变量究竟是怎么一回事？ - 原少子杨</title>
<link>http://www.cnblogs.com/iziyang/p/13123611.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iziyang/p/13123611.html</guid>
<description>&lt;p&gt;之前说了很多关于 Nginx 模块的内容，还有一部分非常重要的内容，那就是 Nginx 的变量。变量在 Nginx 中可以说无处不在，认识了解这些变量的作用和原理同样是必要的，下面几乎囊括了关于 Nginx 的所有变量，单独看起来可能比较枯燥，放心，后面依然有实战内容。&lt;/p&gt;
&lt;h2 id=&quot;nginx-变量的运行原理&quot;&gt;Nginx 变量的运行原理&lt;/h2&gt;
&lt;p&gt;围绕 Nginx 中的变量模块可以分为两类，一类是提供变量的模块，另外一类是使用变量的模块。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;提供变量的模块
&lt;ul&gt;&lt;li&gt;在 Preconfiguration 源代码中定义变量名以及可以解析出变量的方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用变量的模块
&lt;ul&gt;&lt;li&gt;解析 nginx.conf 时定义变量的使用方式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;也就是在 Nginx 启动时，已经定义了变量，而只有当真正处理请求的时候，才会根据 nginx.conf 解析出来的变量使用方式调用 Preconfiguration 中定义的方法来实际获取值。&lt;/p&gt;
&lt;p&gt;这也是变量的两个特性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;惰性求值：只有使用的时候才会去调方法解析&lt;/li&gt;
&lt;li&gt;变量值可以时刻变化，其值为使用的那一时刻的值。例如发送响应包体字节数，实际在发送的过程中是一直在变化的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;除了 Nginx 的模块之外，Nginx 框架也包含许多的变量，这些变量不需要通过编译模块来引入，而且，Nginx 框架所提供的变量往往反映了处理请求的细节，因此，了解 Nginx 框架所提供的变量是十分有必要的。&lt;/p&gt;
&lt;h2 id=&quot;http-请求相关的变量&quot;&gt;HTTP 请求相关的变量&lt;/h2&gt;
&lt;p&gt;先来看一下关于 HTTP 请求的相关变量。&lt;/p&gt;
&lt;ul readability=&quot;17&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;arg_参数名：URL 中某个具体参数的值&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;query_string：与 args 变量完全相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;args：全部 URL 参数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;is_args：如果请求 URL 中有参数则返回 ?，否则返回空&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;content_length：HTTP 请求中标识包体长度的 Content-Length 头部的值。如果请求中没有携带这个参数，那么就取不到对应的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;content_type：标识请求包体类型的 Content-Type 头部的值。同样需要用户请求中携带对应的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;uri：请求的 URI（不同于 URL，不包括 ? 后的参数）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;document_uri：与 uri 完全相同。由于历史原因而存在的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;request_uri：请求的 URL（包括 URI 以及完整的参数）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;scheme：协议名，例如 HTTP 或者 HTTPS&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;request_method：请求方法，例如 GET 或者 POST&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;request_length：所有请求内容的大小，包括请求行、头部、包体等&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;remote_user：由 HTTP Basic Authentication 协议传入的用户名&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;request_body_file：很多时候会将用户请求的包体存放到文件中，这个变量就是临时存放请求包体的文件&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果包体非常小则不会存文件&lt;/li&gt;
&lt;li&gt;client_body_in_file_only 指令强制所有包体存入文件，且可决定是否删除&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;request_body：请求中的包体，这个变量当且仅当使用反向代理，且设定用内存暂存包体时才有效&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;request：原始的 URL 请求，含有方法与协议版本，例如 GET /?a=1&amp;amp;b=22 HTTP/1.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;host&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;先从请求行中获取&lt;/li&gt;
&lt;li&gt;如果含有 Host 头部，则用其值替换掉请求行中的主机名&lt;/li&gt;
&lt;li&gt;如果前两者都取不到，则使用匹配上的 server_name&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;http_头部名字：返回一个具体请求头部的值&lt;/p&gt;
&lt;p&gt;特殊变量，这些变量会做一些处理。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;http_host&lt;/li&gt;
&lt;li&gt;http_user_agent&lt;/li&gt;
&lt;li&gt;http_referer&lt;/li&gt;
&lt;li&gt;http_via&lt;/li&gt;
&lt;li&gt;http_x_forwarded_for&lt;/li&gt;
&lt;li&gt;http_cookie&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通用变量，除了以上的变量，都可以取到对应的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;tcp-连接相关的变量&quot;&gt;TCP 连接相关的变量&lt;/h2&gt;
&lt;p&gt;下面是关于 TCP 连接的变量。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binary_remote_addr：客户端地址的整形格式，对于 IPv4 是 4 字节，对于 IPv6 是 16 字节，所以&lt;strong&gt;在 limit_req 和 limit_conn 中通常可以用作 key&lt;/strong&gt; （详见：&lt;a href=&quot;https://iziyang.github.io/2020/04/12/5-nginx/&quot;&gt;Nginx 处理 HTTP 请求的 11 个阶段&lt;/a&gt; 中的 preaccess 阶段）&lt;/li&gt;
&lt;li&gt;connection：递增的连接序号&lt;/li&gt;
&lt;li&gt;connection_requests：当前连接上执行过的请求数，对 keepalive 连接有意义&lt;/li&gt;
&lt;li&gt;remote_addr：客户端地址&lt;/li&gt;
&lt;li&gt;remote_port：客户端端口&lt;/li&gt;
&lt;li&gt;proxy_protocol_addr：若使用了 proxy_protocol 协议，则返回协议中的地址，否则返回空&lt;/li&gt;
&lt;li&gt;proxy_protocol_port：若使用了 proxy_protocol 协议则返回协议中的端口，否则返回空&lt;/li&gt;
&lt;li&gt;server_addr：服务端地址&lt;/li&gt;
&lt;li&gt;server_port：服务器端端口&lt;/li&gt;
&lt;li&gt;TCP_INFO：TCP 内核层参数，包括 $tcpinfo_rtt, ​$tcpinfo_rttvar,​$tcpinfo_snd_cwnd, $tcpinfo_rcv_space&lt;/li&gt;
&lt;li&gt;server_protocol：服务器端协议，例如 HTTP/1.1&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;nginx-处理请求过程中产生的变量&quot;&gt;Nginx 处理请求过程中产生的变量&lt;/h2&gt;
&lt;p&gt;Nginx 处理 HTTP 请求的过程中也会产生很多变量。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;request_time：请求处理到现在的耗时，单位为秒，精确到毫秒&lt;/li&gt;
&lt;li&gt;server_name：匹配上请求的 server_name 值&lt;/li&gt;
&lt;li&gt;https：如果开启了 TLS/SSL 则返回 on，否则返回空&lt;/li&gt;
&lt;li&gt;request_completion：若请求处理完则返回 OK，否则返回空&lt;/li&gt;
&lt;li&gt;request_id：以 16 进制输出的请求表示 id，该 id 共含有 16 个字节，是随机生成的&lt;/li&gt;
&lt;li&gt;request_filename：待访问文件的完整路径&lt;/li&gt;
&lt;li&gt;document_root：由 URI 和 root、alias 规则生成的文件夹路径&lt;/li&gt;
&lt;li&gt;realpath_root：将 document_root 中的软链接等换成真实路径&lt;/li&gt;
&lt;li&gt;limit_rate：返回客户端响应时的速度上限，单位为每秒字节数。可以通过 set 指令修改对请求产生的效果&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;发送-http-响应时相关的变量&quot;&gt;发送 HTTP 响应时相关的变量&lt;/h2&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;body_bytes_sent：响应中 body 包体的长度&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;bytes_sent：全部 http 响应的长度&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;status：http 响应中的返回码&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;sent_trailer_名字：把响应结尾内容里的值返回&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;sent_http_头部名字：响应中某个具体头部的值&lt;/p&gt;
&lt;p&gt;特殊处理，下面这些变量需要经过特殊处理：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;sent_http_content_type&lt;/li&gt;
&lt;li&gt;sent_http_content_length&lt;/li&gt;
&lt;li&gt;sent_http_location&lt;/li&gt;
&lt;li&gt;sent_http_last_modified&lt;/li&gt;
&lt;li&gt;sent_http_connection&lt;/li&gt;
&lt;li&gt;sent_http_keep_alive&lt;/li&gt;
&lt;li&gt;sent_http_transfer_encoding&lt;/li&gt;
&lt;li&gt;sent_http_cache_control&lt;/li&gt;
&lt;li&gt;sent_http_link&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通用：除了上面这些头部，其他的头部都是通用型的，也就是可以直接拿来用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;nginx-系统变量&quot;&gt;Nginx 系统变量&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;time_local：以本地时间标准输出的当前时间，例如 14/Nov/2018:15:55:37 +0800&lt;/li&gt;
&lt;li&gt;time_iso8601：使用 ISO8601 标准输出的当前时间，例如 2018-11-14T15:55:37+08:00&lt;/li&gt;
&lt;li&gt;nginx_version：Nginx 版本号&lt;/li&gt;
&lt;li&gt;pid：所属 worker 进程的进程 id&lt;/li&gt;
&lt;li&gt;pipe：使用了管道则返回 p，否则返回 .&lt;/li&gt;
&lt;li&gt;hostname：所在服务器的主机名，与 hostname 命令输出一致&lt;/li&gt;
&lt;li&gt;msec：1970 年 1 月 1 日到现在的时间，单位为秒，小数点后精确到毫秒&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;实战&quot;&gt;实战&lt;/h2&gt;
&lt;p&gt;配置文件：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-nginx&quot;&gt;log_format  vartest  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                      '$status bytes_sent=$bytes_sent body_bytes_sent=$body_bytes_sent &quot;$http_referer&quot; '
                      '&quot;$http_user_agent&quot; &quot;$sent_http_abc&quot;';

server {
        server_name var.ziyang.com localhost;
        #error_log logs/myerror.log debug;
        access_log logs/vartest.log vartest;
        listen 9090;
        
        location / {
                set $limit_rate 10k;
        # return 200; tcpinfo: $tcpinfo_rtt,$tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space 
                return 200 '
arg_a: $arg_a,arg_b: $arg_b,args: $args
connection: $connection,connection_requests: $connection_requests
cookie_a: $cookie_a
uri: $uri,document_uri: $document_uri, request_uri: $request_uri
request: $request
request_id: $request_id
server: $server_addr,$server_name,$server_port,$server_protocol
            
host: $host,server_name: $server_name,http_host: $http_host
limit_rate: $limit_rate
hostname: $hostname
content_length: $content_length
status: $status
body_bytes_sent: $body_bytes_sent,bytes_sent: $bytes_sent
time: $request_time,$msec,$time_iso8601,$time_local
';
        }       
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面这个配置文件中，我们可以看出来，返回的响应里面包含了一系列的变量，实际验证一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;➜  test_nginx curl -H 'Content-Length: 0' -H 'Cookie: a=c1' 'localhost:9090?a=1&amp;amp;b=22'

arg_a: 1,arg_b: 22,args: a=1&amp;amp;b=22
connection: 2,connection_requests: 1
cookie_a: c1
uri: /,document_uri: /, request_uri: /?a=1&amp;amp;b=22
request: GET /?a=1&amp;amp;b=22 HTTP/1.1
request_id: 5d40b1ff29d2b87d5db5c4f95ebf5e4d
server: 127.0.0.1,var.ziyang.com,9090,HTTP/1.1
host: localhost,server_name: var.ziyang.com,http_host: localhost:9090
limit_rate: 10240
hostname: yuanzizhen.local
content_length: 0
status: 200
body_bytes_sent: 0,bytes_sent: 0
time: 0.000,1590842354.866,2020-05-30T20:39:14+08:00,30/May/2020:20:39:14 +0800
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大家可以对比一下响应和配置文件中的值是不是一一对应的，更加深刻的理解一下变量的含义。&lt;/p&gt;
&lt;p&gt;好了，这一节咱们学习了。关于 Nginx 的变量就讲完了，下一节讲一下实际应用变量的两个模块，大家会有更深刻的理解。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文首发于我的个人博客：&lt;a href=&quot;https://iziyang.github.io&quot;&gt;iziyang.github.io&lt;/a&gt;，所有配置文件我已经放在了 &lt;a href=&quot;https://www.yuque.com/docs/share/b7c304d3-fde8-4168-9808-368cd3494e04?#&quot;&gt;Nginx 配置文件&lt;/a&gt;，大家可以自取。&lt;/p&gt;
</description>
<pubDate>Sat, 13 Jun 2020 22:21:00 +0000</pubDate>
<dc:creator>原少子杨</dc:creator>
<og:description>之前说了很多关于 Nginx 模块的内容，还有一部分非常重要的内容，那就是 Nginx 的变量。变量在 Nginx 中可以说无处不在，认识了解这些变量的作用和原理同样是必要的，下面几乎囊括了关于 Ng</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/iziyang/p/13123611.html</dc:identifier>
</item>
<item>
<title>最近学习了限流相关的算法 - Brian_Huang</title>
<link>http://www.cnblogs.com/hlkawa/p/13111003.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hlkawa/p/13111003.html</guid>
<description>&lt;p&gt;最近测试team在测试过程中反馈部分接口需要做一定的限流措施，刚好我也回顾了下限流相关的算法。常见限流相关的算法有四种：计数器算法, 滑动窗口算法, 漏桶算法, 令牌桶算法&lt;/p&gt;
&lt;h2&gt;1.计数器算法(固定窗口)&lt;/h2&gt;
&lt;p&gt; 计数器算法是使用计数器在周期内累加访问次数，当达到设定的阈值时就会触发限流策略。下一个周期开始时，清零重新开始计数。此算法在单机和分布式环境下实现都非常简单，可以使用Redis的incr原子自增和线程安全即可以实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1051005/202006/1051005-20200613071359393-2056661016.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 这个算法常用于QPS限流和统计访问总量，对于秒级以上周期来说会存在非常严重的问题，那就是临界问题，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1051005/202006/1051005-20200613073129829-118026725.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 假设我们设置的限流策略时1分钟限制计数100，在第一个周期最后5秒和第二个周期的开始5秒，分别计数都是88，即在10秒时间内计数达到了176次，已经远远超过之前设置的阈值，由此可见，计数器算法（固定窗口）限流方式对于周期比较长的限流存在很大弊端。&lt;/p&gt;
&lt;p&gt; Java 实现计数器（固定窗口）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.brian.limit;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.concurrent.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.atomic.AtomicInteger;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 固定窗口
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Slf4j
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FixWindow {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; limit = 100&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; AtomicInteger currentCircleRequestCount = &lt;span&gt;new&lt;/span&gt; AtomicInteger(0&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; AtomicInteger timeCircle = &lt;span&gt;new&lt;/span&gt; AtomicInteger(0&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFixWindow() {
        scheduledExecutorService.scheduleWithFixedDelay(() &lt;/span&gt;-&amp;gt;&lt;span&gt; {
            log.info(&lt;/span&gt;&quot; 当前时间窗口，第 {} 秒 &quot;&lt;span&gt;, timeCircle.get());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(timeCircle.get() &amp;gt;= 60&lt;span&gt;) {
                timeCircle.set(&lt;/span&gt;0&lt;span&gt;);
                currentCircleRequestCount.set(&lt;/span&gt;0&lt;span&gt;);
                log.info(&lt;/span&gt;&quot; =====进入新的时间窗口===== &quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(currentCircleRequestCount.get() &amp;gt;&lt;span&gt; limit) {
                log.info(&lt;/span&gt;&quot;触发限流策略，当前窗口累计请求数 : {}&quot;&lt;span&gt;, currentCircleRequestCount);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; requestCount = (&lt;span&gt;int&lt;/span&gt;) ((Math.random() * 5) + 1&lt;span&gt;);
                log.info(&lt;/span&gt;&quot;当前发出的 ==requestCount== : {}&quot;&lt;span&gt;, requestCount);
                currentCircleRequestCount.addAndGet(requestCount);
            }
           timeCircle.incrementAndGet();
        }, &lt;/span&gt;0, 1&lt;span&gt;, TimeUnit.SECONDS);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; FixWindow().doFixWindow();
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.滑动窗口算法&lt;/h2&gt;
&lt;p&gt; 滑动窗口算法是将时间周期拆分成N个小的时间周期，分别记录小周期里面的访问次数，并且根据时间的滑动删除过期的小周期。如下图，假设时间周期为1分钟，将1分钟再分为2个小周期，统计每个小周期的访问数量，则可以看到，第一个时间周期内，访问数量为92，第二个时间周期内，访问数量为104，超过100的访问则被限流掉了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1051005/202006/1051005-20200613092021059-1404640870.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 由此可见，当滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确。此算法可以很好的解决固定窗口算法的临界问题。&lt;/p&gt;
&lt;p&gt;  Java实现滑动窗口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.brian.limit;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.concurrent.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.atomic.AtomicInteger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 滑动窗口
 * 
 * 60s限流100次请求
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Slf4j
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RollingWindow {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 窗口跨度时间60s&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; timeWindow = 60&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 限流100个请求&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; limit = 100&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前窗口请求数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AtomicInteger currentWindowRequestCount = &lt;span&gt;new&lt;/span&gt; AtomicInteger(0&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 时间片段滚动次数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AtomicInteger timeCircle = &lt;span&gt;new&lt;/span&gt; AtomicInteger(0&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发了限流策略后等待的时间&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AtomicInteger waitTime = &lt;span&gt;new&lt;/span&gt; AtomicInteger(0&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在下一个窗口时，需要减去的请求数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; expiredRequest = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 时间片段为5秒，每5秒统计下过去60秒的请求次数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; slidingTime = 5&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ArrayBlockingQueue&amp;lt;Integer&amp;gt; slidingTimeValues = &lt;span&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;&amp;gt;(11&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rollingWindow() {
        scheduledExecutorService.scheduleWithFixedDelay(() &lt;/span&gt;-&amp;gt;&lt;span&gt; {

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (waitTime.get() &amp;gt; 0&lt;span&gt;) {
                waitTime.compareAndExchange(waitTime.get(), waitTime.get() &lt;/span&gt;-&lt;span&gt; slidingTime);
                log.info(&lt;/span&gt;&quot;=====当前滑动窗口===== 限流等待下一个时间窗口倒计时: {}s&quot;&lt;span&gt;, waitTime.get());
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (currentWindowRequestCount.get() &amp;gt; 0&lt;span&gt;) {
                    currentWindowRequestCount.set(&lt;/span&gt;0&lt;span&gt;);
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; requestCount = (&lt;span&gt;int&lt;/span&gt;) ((Math.random() * 10) + 7&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (timeCircle.get() &amp;lt; 12&lt;span&gt;) {
                    timeCircle.incrementAndGet();
                }
                
            log.info(&lt;/span&gt;&quot;当前时间片段5秒内的请求数: {} &quot;&lt;span&gt;, requestCount);
            currentWindowRequestCount.addAndGet(requestCount);
            log.info(&lt;/span&gt;&quot;=====当前滑动窗口===== {}s 内请求数: {} &quot;, timeCircle.get()*&lt;span&gt;slidingTime , currentWindowRequestCount.get());

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;slidingTimeValues.offer(requestCount)){
                expiredRequest &lt;/span&gt;=&lt;span&gt;  slidingTimeValues.poll();
                slidingTimeValues.offer(requestCount);
            } 

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(currentWindowRequestCount.get() &amp;gt;&lt;span&gt; limit) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发限流&lt;/span&gt;
                log.info(&quot;=====当前滑动窗口===== 请求数超过100, 触发限流,等待下一个时间窗口 &quot;&lt;span&gt;);
                waitTime.set(timeWindow);
                timeCircle.set(&lt;/span&gt;0&lt;span&gt;);
                slidingTimeValues.clear();
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有触发限流，滑动下一个窗口需要,移除相应的:在下一个窗口时，需要减去的请求数&lt;/span&gt;
                log.info(&quot;=====当前滑动窗口===== 请求数 &amp;lt;100, 未触发限流，当前窗口请求总数: {},即将过期的请求数：{}&quot;&lt;span&gt;
                        ,currentWindowRequestCount.get(), expiredRequest);
                currentWindowRequestCount.compareAndExchange(currentWindowRequestCount.get(), currentWindowRequestCount.get() &lt;/span&gt;-&lt;span&gt; expiredRequest);
            }
        }   
        }, &lt;/span&gt;5, 5&lt;span&gt;, TimeUnit.SECONDS);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RollingWindow().rollingWindow();
    }
    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;计数器（固定窗口）和滑动窗口区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计数器算法是最简单的算法，可以看成是滑动窗口的低精度实现。滑动窗口由于需要存储多份的计数器（每一个格子存一份），所以滑动窗口在实现上需要更多的存储空间。也就是说，如果滑动窗口的精度越高，需要的存储空间就越大。&lt;/p&gt;
&lt;h2&gt;3.漏桶算法&lt;/h2&gt;
&lt;p&gt; 漏桶算法是访问请求到达时直接放入漏桶，如当前容量已达到上限（限流值），则进行丢弃（触发限流策略）。漏桶以固定的速率进行释放访问请求（即请求通过），直到漏桶为空。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1051005/202006/1051005-20200613175035285-1222416187.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; Java实现漏桶：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.brian.limit;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.concurrent.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 漏桶算法
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Slf4j
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LeakyBucket {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 桶容量&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;  &lt;span&gt;int&lt;/span&gt; capacity = 1000&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前桶中请求数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; curretRequest = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每秒恒定处理的请求数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; handleRequest = 100&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doLimit() {
        scheduledExecutorService.scheduleWithFixedDelay(() &lt;/span&gt;-&amp;gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; requestCount = (&lt;span&gt;int&lt;/span&gt;) ((Math.random() * 200) + 50&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(capacity &amp;gt;&lt;span&gt; requestCount){
                capacity &lt;/span&gt;-=&lt;span&gt; requestCount;
                log.info(&lt;/span&gt;&quot;&amp;lt;&amp;gt;&amp;lt;&amp;gt;当前1秒内的请求数:{}, 桶的容量:{}&quot;&lt;span&gt;, requestCount, capacity);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(capacity &amp;lt;=0&lt;span&gt;) {
                    log.info(&lt;/span&gt;&quot; =====触发限流策略===== &quot;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    capacity &lt;/span&gt;+=&lt;span&gt; handleRequest;
                    log.info(&lt;/span&gt;&quot;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;当前1秒内处理请求数:{}, 桶的容量:{}&quot;&lt;span&gt;, handleRequest, capacity);
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                log.info(&lt;/span&gt;&quot;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;当前请求数:{}, 桶的容量:{},丢弃的请求数:{}&quot;, requestCount, capacity,requestCount-&lt;span&gt;capacity);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(capacity &amp;lt;=&lt;span&gt; requestCount) {
                    capacity &lt;/span&gt;= 0&lt;span&gt;;
                }
                capacity &lt;/span&gt;+=&lt;span&gt; handleRequest;
                log.info(&lt;/span&gt;&quot;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;当前1秒内处理请求数:{}, 桶的容量:{}&quot;&lt;span&gt;, handleRequest, capacity);
            }
        }, &lt;/span&gt;0, 1&lt;span&gt;, TimeUnit.SECONDS);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LeakyBucket().doLimit();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 漏桶算法有个缺点：如果桶的容量过大，突发请求时也会对后面请求的接口造成很大的压力。&lt;/p&gt;
&lt;h2&gt;4.令牌桶算法&lt;/h2&gt;
&lt;p&gt; 令牌桶算法是程序以恒定的速度向令牌桶中增加令牌，令牌桶满了之后会丢弃新进入的令牌，当请求到达时向令牌桶请求令牌，如获取到令牌则通过请求，否则触发限流策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1051005/202006/1051005-20200613215906381-694705061.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; Java实现令牌桶：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.brian.limit;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.concurrent.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 令牌桶算法
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Slf4j
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TokenBucket {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 桶容量&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;  &lt;span&gt;int&lt;/span&gt; capacity = 1000&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前桶中请求数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; curretToken = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 恒定的速率放入令牌&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; tokenCount = 200&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doLimit() {
        scheduledExecutorService.scheduleWithFixedDelay(() &lt;/span&gt;-&amp;gt;&lt;span&gt; {
            
            &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread( () -&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(curretToken &amp;gt;=&lt;span&gt; capacity) {
                    log.info(&lt;/span&gt;&quot; =====桶中的令牌已经满了===== &quot;&lt;span&gt;);
                    curretToken &lt;/span&gt;=&lt;span&gt; capacity;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((curretToken+tokenCount) &amp;gt;=&lt;span&gt; capacity){
                      log.info(&lt;/span&gt;&quot; 当前桶中的令牌数:{},新进入的令牌将被丢弃的数: {}&quot;,curretToken,(curretToken+tokenCount-&lt;span&gt;capacity));
                      curretToken &lt;/span&gt;=&lt;span&gt; capacity;
                  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                      curretToken &lt;/span&gt;+=&lt;span&gt; tokenCount;
                  }
                }
            }).start();

            &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread( () -&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; requestCount = (&lt;span&gt;int&lt;/span&gt;) ((Math.random() * 200) + 50&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(requestCount &amp;gt;=&lt;span&gt; curretToken){
                    log.info(&lt;/span&gt;&quot; 当前请求数:{},桶中令牌数: {},将被丢弃的请求数:{}&quot;,requestCount,curretToken,(requestCount -&lt;span&gt; curretToken));
                    curretToken &lt;/span&gt;= 0&lt;span&gt;;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    log.info(&lt;/span&gt;&quot; 当前请求数:{},桶中令牌数: {}&quot;&lt;span&gt;,requestCount,curretToken);
                    curretToken &lt;/span&gt;-=&lt;span&gt; requestCount;
                }
            }).start();
        }, &lt;/span&gt;0, 500&lt;span&gt;, TimeUnit.MILLISECONDS);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; TokenBucket().doLimit();
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;漏桶算法和令牌桶算法区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;令牌桶可以用来保护自己，主要用来对调用者频率进行限流，为的是让自己不被打垮。所以如果自己本身有处理能力的时候，如果流量突发（实际消费能力强于配置的流量限制），那么实际处理速率可以超过配置的限制。而漏桶算法，这是用来保护他人，也就是保护他所调用的系统。主要场景是，当调用的第三方系统本身没有保护机制，或者有流量限制的时候，我们的调用速度不能超过他的限制，由于我们不能更改第三方系统，所以只有在主调方控制。这个时候，即使流量突发，也必须舍弃。因为消费能力是第三方决定的。&lt;br/&gt;总结起来：如果要让自己的系统不被打垮，用令牌桶。如果保证被别人的系统不被打垮，用漏桶算法&lt;/p&gt;

&lt;p&gt;参考博客：&lt;a href=&quot;https://blog.csdn.net/weixin_41846320/article/details/95941361&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/weixin_41846320/article/details/95941361&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　　　　&lt;a href=&quot;https://www.cnblogs.com/xuwc/p/9123078.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/xuwc/p/9123078.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 13 Jun 2020 14:33:00 +0000</pubDate>
<dc:creator>Brian_Huang</dc:creator>
<og:description>最近测试team在测试过程中反馈部分接口需要做一定的限流措施，刚好我也回顾了下限流相关的算法。常见限流相关的算法有四种：计数器算法, 滑动窗口算法, 漏桶算法, 令牌桶算法 1.计数器算法(固定窗口)</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/hlkawa/p/13111003.html</dc:identifier>
</item>
<item>
<title>【实战】基于OpenCV的水表字符识别（OCR） - brt2</title>
<link>http://www.cnblogs.com/brt2/p/13121529.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/brt2/p/13121529.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194435653-714003795.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-usb摄像头取图&quot;&gt;1. USB摄像头取图&lt;/h2&gt;
&lt;p&gt;由于分辨率越高，处理的像素就越多，导致分析图像的时间变长，这里，我们设定摄像头的取图像素为（240,320）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;cap = cv2.VideoCapture(0)  # 根据电脑连接的情况填入摄像头序号
assert cap.isOpened()

# 以下设置显示屏的宽高
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)
cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter.fourcc('M', 'J', 'P', 'G'))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里提几个常用的标准分辨率：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;VGA (Video Graphics Array): 640×480&lt;/li&gt;
&lt;li&gt;QVGA (QuarterVGA): 240×320&lt;/li&gt;
&lt;li&gt;QQVGA: 120×160&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下来可以捕获一帧数据看一下状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;# %% 捕获一帧清晰的图像
def try_frame():
    while True:
        ret, im_frame = cap.read()
        cv2.imshow(&quot;frame&quot;, im_frame)  # 显示图像

        # im_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # 可选择转换为灰度图
        if cv2.waitKey(1) &amp;amp; 0xFF == ord('q'):
            break

    cv2.destroyAllWindows()
    return im_frame

im_frame = try_frame()
env.imshow(im_frame)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194436002-90460307.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ps: 镜头角度会存在一定的歪斜，没有关系，我们后面会进行处理。&lt;/p&gt;
&lt;h2 id=&quot;2-图像预处理：获取屏幕roi&quot;&gt;2. 图像预处理：获取屏幕ROI&lt;/h2&gt;
&lt;p&gt;利用屏幕的亮度，通过简单的阈值操作和轮廓操作，获取屏幕轮廓，然后将图像角度校正，最后获得正向的文字内容。&lt;/p&gt;
&lt;h3 id=&quot;21-分离提取屏幕区域&quot;&gt;2.1. 分离提取屏幕区域&lt;/h3&gt;
&lt;p&gt;通过OTSU的阈值化操作，将图像处理为二值状态。这个很重要，因为如果直接使用彩图或灰度图，会由于&lt;span&gt;外部光线的变化&lt;/span&gt;，导致后期字符匹配时整体灰度值与模板的差别而降低置信度，导致较大的误差。而二值图可以避免这个问题。&lt;/p&gt;
&lt;p&gt;然后利用开运算（白底黑字，如果黑底白字则为闭运算），消除噪点。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;im_latest = try_frame()
im_gray = mvlib.color.rgb2gray(image)
im_bin = mvlib.filters.threshold(im_gray, invert=False)
# im_erosion = mvlib.morphology.erosion(im_bin, (11, 11))
# im_dilation = mvlib.morphology.dilation(im_erosion, (5, 5))
im_opening = mvlib.morphology.opening(im_bin, (11, 11))
env.imshow(im_opening)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194436259-2015649929.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;22-计算屏幕区域的旋转角度&quot;&gt;2.2. 计算屏幕区域的旋转角度&lt;/h3&gt;
&lt;p&gt;提取图像的最大轮廓，然后获取其包络矩形。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;list_cnts = mvlib.contours.find_cnts(im_opening)
if len(list_cnts) != 1:
    print(f&quot;非唯一轮廓，请通过面积筛选过滤&quot;)
    # assert 0
    cnts_sorted = mvlib.contours.cnts_sort(list_cnts, mvlib.contours.cnt_area)
    list_cnts = [cnts_sorted[0]]

box, results = mvlib.contours.approx_rect(list_cnts[0], True)
angle = results[2]  # 此处的角度是向逆时针倾斜，记作：-4
if abs(angle) &amp;gt; 45:
    angle = (angle + 45) % 90 - 45
print(angle, box)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述过程输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.432098388671875
[[282 173]
 [ 29 167]
 [ 32  41]
 [285  47]]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;23-裁剪屏幕区域&quot;&gt;2.3. 裁剪屏幕区域&lt;/h3&gt;
&lt;p&gt;至此可以丢弃im_opening以及im_bin的图像了。我们重新回到im_gray上进行操作（需要重新进行阈值化以获取文字的二值图）。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;list_width = box[:,0]
list_height= box[:,1]
w_min, w_max = min(list_width), max(list_width)
h_min, h_max = min(list_height), max(list_height)

im_screen = im_gray[h_min:h_max, w_min:w_max]
env.imshow(im_screen)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194436461-2061504616.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;24-旋转图像至正向视角&quot;&gt;2.4. 旋转图像至正向视角&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;im_screen_orthogonal = mvlib.transform.rotate(im_screen, angle, False)
# env.imshow(im_screen_orthogonal)
im_screen_core = im_screen_orthogonal[20:-20, 20:-20]
env.imshow(im_screen_core)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194436687-131593690.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;25-提取文字图像&quot;&gt;2.5. 提取文字图像&lt;/h3&gt;
&lt;p&gt;第二次执行阈值化操作，但这一次是在屏幕内部，排除了屏幕外复杂的背景后，可以很容易的获取到文字的内容。由于我们只关心数字，所以通过闭运算将细体字过滤掉。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;im_core_bin = mvlib.filters.threshold(im_screen_core, invert=False)
im_closing = mvlib.morphology.closing(im_core_bin, (3,3))
env.imshow(im_closing)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194436894-262005621.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;26-封装上述过程&quot;&gt;2.6. 封装上述过程&lt;/h3&gt;
&lt;p&gt;琐碎的预处理过程就告一段落了，我们可以将上述的内容封装成一个简单的函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;def preprocess():
    # 获取屏幕区域
    im_latest = try_frame()
    ...
    im_closing = mvlib.morphology.closing(im_core_bin, (3,3))
    return im_closing
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;3-字符分割，获取单个字符的图像&quot;&gt;3. 字符分割，获取单个字符的图像&lt;/h2&gt;
&lt;p&gt;字符分割，一方面是制作模板的需要（当然，你也可以直接用画图工具裁剪出一张模板图像）；另一方面是为了加速模板匹配的效率。当然，你完全可以在整张图像上利用 &lt;code&gt;match_template()&lt;/code&gt; 查找模板，但如果进行多模板匹配，重复的扫描整张图像，效率就大打折扣了。&lt;/p&gt;
&lt;p&gt;先提供完整的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;char_width_min = 7
gap_height_max = 5

def segment_chars(im_core):
    list_char_img = []
    # 字符区域
    raw_bkg = np.all(im_core, axis=0)
    col_bkg = np.all(im_core, axis=1)

    # 计算字高
    ndarr_char_height = np.where(False == col_bkg)[0]
    char_height_start = ndarr_char_height[0]
    item_last = ndarr_char_height[0]
    for item in ndarr_char_height:
        if item - item_last &amp;gt; gap_height_max:
            char_height_start = item
        item_last = item
    char_height_end = ndarr_char_height[-1] +1
    print(f&quot;字高【{char_height_end - char_height_start}】&quot;)

    ndarr_chars_pos = np.where(False == raw_bkg)[0]
    ndarr_chars_pos = np.append(ndarr_chars_pos,
                                im_core.shape[1] + char_width_min)

    last_idx = ndarr_chars_pos[0]
    curr_char_width = 1
    for curr_idx in ndarr_chars_pos:
        idx_diff = curr_idx - last_idx
        # 这里应该限制最小宽度&amp;gt;=2，否则认为是一个粘连字
        if idx_diff &amp;lt;= 2:
            curr_char_width += idx_diff
        else:  # 新的字符
            char_width_end = last_idx +1
            char_width_start = char_width_end - curr_char_width
            im_char_last = im_core[char_height_start:char_height_end,
                                char_width_start:char_width_end]
            list_char_img.append(im_char_last)
            curr_char_width = 0
        last_idx = curr_idx
    return list_char_img
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;按照行列，获取图像中的文字像素点集：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;raw_bkg = np.all(im_core, axis=0)
col_bkg = np.all(im_core, axis=1)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由此，可以知道255（黑色）的区域从大约 39 到 75，那么 &lt;code&gt;75 - 29 = 36&lt;/code&gt; 就是字高。&lt;/p&gt;
&lt;p&gt;另外，图像中有可能存在噪点，去掉就是了（我这里只是简单粗暴的处理下，请见谅）。&lt;/p&gt;
&lt;p&gt;行的处理同样。如果发现间隔，那么就可以分离字符。最后，输出每个字符的图像。&lt;/p&gt;
&lt;p&gt;检验下效果：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;list_char_imgs = segment_chars(im_core)
env.imshow(list_char_imgs[1])
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194437099-625168323.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-模板匹配：确定字符内容&quot;&gt;4. 模板匹配：确定字符内容&lt;/h2&gt;
&lt;p&gt;利用模板匹配，实现字符识别的过程。这里不再细说OpenCV的 &lt;code&gt;cv2.matchTemplate()&lt;/code&gt; 函数，只描述应用过程。&lt;/p&gt;
&lt;h3 id=&quot;41-make_template&quot;&gt;4.1. make_template&lt;/h3&gt;
&lt;p&gt;首先，有必要把字符先作为模板存储下来。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;def make_tpls(list_tpl_imgs, dir_save, dict_tpl=None):
    if not dict_tpl:
        dict_tpl = {}

    str_items = input(&quot;请输入模板上的文本内容，用于校对（例如215801）： &quot;)

    assert len(str_items) == len(list_tpl_imgs)
    for i, v in enumerate(str_items):
        filename = v
        if v in dict_tpl:
            filename = v + &quot;_&quot; + str(random.random())
        else:
            dict_tpl[v] = list_tpl_imgs[i]
        path_save = os.path.join(dir_save, filename + &quot;.jpg&quot;)
        mvlib.io.imsave(path_save, list_tpl_imgs[i])

    return dict_tpl
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里，同一字符有必要多存储几张，最后择优（或者一个字符通过多个模板匹配的结果来确定）。&lt;/p&gt;
&lt;h3 id=&quot;42-模板修复&quot;&gt;4.2. 模板修复&lt;/h3&gt;
&lt;p&gt;这个过程，虽然没啥子技术含量，但却对结果影响很大。在前一步骤中，我们每一个字符都收集了多张模板图像。现在，从中择优录取。还有，可以手动编辑模板的图片，去除模板多余的白边（边并不是文字内容的一部分，而且会降低字符的匹配度）。&lt;/p&gt;
&lt;h3 id=&quot;43-重新加载模板数据&quot;&gt;4.3. 重新加载模板数据&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;def load_saved_tpls(dir_tpl):
    saved_tpls = os.listdir(dir_tpl)

    dict_tpl = {}  # {&quot;1&quot;: imread(&quot;mvdev/tmp/tpl/1.jpg&quot;), ...}
    for i in saved_tpls:
        filename = os.path.splitext(i)[0]
        path_tpl = os.path.join(dir_tpl, i)

        im_rgb = cv2.imread(path_tpl)
        im_gray = mvlib.color.rgb2gray(im_rgb)
        dict_tpl[filename] = im_gray
    return dict_tpl

dir_tpl = &quot;tpl/&quot;
dict_tpls = load_saved_tpls(dir_tpl)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;44-模板匹配&quot;&gt;4.4. 模板匹配&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;def number_ocr_matching(im_char):
    most_likely = [1, &quot;&quot;]
    for key, im_tpl in dict_tpls.items():
        try:
            pos, similarity = mvlib.feature.match_template(im_char, im_tpl, way=&quot;most&quot;)
            if similarity &amp;lt; most_likely[0]:
                most_likely = [similarity, key]
        except:
            im_char_old = im_char.copy()
            h = max(im_char.shape[0], im_tpl.shape[0])
            w = max(im_char.shape[1], im_tpl.shape[1])
            im_char = np.ones((h,w), dtype=&quot;uint8&quot;) * 255
            # im_char2 = mvlib.pixel.bitwise_and(z, im_char)
            im_char[:im_char_old.shape[0], :im_char_old.shape[1]] = im_char_old

            pos, similarity = mvlib.feature.match_template(im_char, im_tpl, way=&quot;most&quot;)
            if similarity &amp;lt; most_likely[0]:
                most_likely = [similarity, key]

    print(f&quot;字符识别为【{most_likely[1]}】相似度【{most_likely[0]}】&quot;)
    return most_likely[1]

def application(list_char_imgs):
    str_ocr = &quot;&quot;
    for im_char in list_char_imgs:
        width_img = im_char.shape[1]
        # 判断字符
        match_char = number_ocr_matching(im_char)
        str_ocr += match_char
    return str_ocr

str_ocr2 = application(list_char_imgs)
print(str_ocr2)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;过程中，opencv出现了报错，是由于模板的shape大于当前分割字符的shape。这个很正常，采集图像时由于距离的微调（注意，距离变化不能太大，OpenCV的默认算子不支持模板缩放）可能导致字符尺寸更小。解决方案也很简单，直接把字符图像拓展到大于模板的状态就OK了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194438233-127232651.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;额，忘了删除debug信息了……再来一次~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2039866/202006/2039866-20200613194439711-1702633112.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 13 Jun 2020 11:45:00 +0000</pubDate>
<dc:creator>brt2</dc:creator>
<og:description>1. USB摄像头取图 由于分辨率越高，处理的像素就越多，导致分析图像的时间变长，这里，我们设定摄像头的取图像素为（240,320）： cap = cv2.VideoCapture(0) # 根据电脑</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/brt2/p/13121529.html</dc:identifier>
</item>
<item>
<title>别再写一摞if-else了！再写开除！两种设计模式带你消灭它！ - 胖滚猪学编程</title>
<link>http://www.cnblogs.com/liuyanling/p/13121484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuyanling/p/13121484.html</guid>
<description>&lt;p&gt;&lt;strong&gt;代码洁癖狂们！看到一个类中有几十个if-else是不是很抓狂？&lt;/strong&gt;&lt;br/&gt;设计模式学了用不上吗？面试的时候问你，你只能回答最简单的单例模式，问你有没有用过反射之类的高级特性，回答也是否吗？&lt;br/&gt;这次就让设计模式(模板方法模式+工厂模式)和反射助你消灭if-else！&lt;br/&gt;真的是开发中超超超超超超有用的干货啊！&lt;/p&gt;

&lt;p&gt;某日，码农胖滚猪接到上级一个需求，这个需求牛逼了，一站式智能报表查询平台，支持mysql、pgxl、tidb、hive、presto、mongo等众多数据源，想要啥数据都能通通给你查出来展示，对于业务人员数据分析有重大意义！&lt;br/&gt;&lt;img src=&quot;https://yqfile.alicdn.com/20ed5c646f4b6055d98f6721ba75a34154d2b62d.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然各个数据源的参数校验、查询引擎和查询逻辑都不一样，但是胖滚猪对这些框架都很熟悉，这个难不倒她，她只花了一天时间就都写完了。&lt;/p&gt;
&lt;p&gt;领导胖滚熊也对胖滚猪的效率表示了肯定。可是好景不长，第三天，领导闲着没事，准备做一下code review，可把胖滚熊惊呆了，一个类里面有近30个if-else代码，我滴个妈呀，这可让代码洁癖狂崩溃了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 检验入参合法性
Boolean check = false;
if(DataSourceEnum.hive.equals(dataSource)){
    check = checkHiveParams(params);
} else if(DataSourceEnum.tidb.equals(dataSource)){
    check = checkTidbParams(params);
} else if(DataSourceEnum.mysql.equals(dataSource)){
    check = checkMysqlParams(params);
} // else if ....... 省略pgxl、presto等
if(check){
    if(DataSourceEnum.hive.equals(dataSource)){
        list = queryHive(params);
    } else if(DataSourceEnum.tidb.equals(dataSource)){
        list = queryTidb(params);
    } else if(DataSourceEnum.mysql.equals(dataSource)){
        list = queryMysql(params);
    } // else if ....... 省略pgxl、presto等
}
//记录日志
log.info(&quot;用户={} 查询数据源={} 结果size={}&quot;,params.getUserName(),params.getDataSource(),list.size());
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://yqfile.alicdn.com/702c397941b3ff589256c6d885156bd79f1fc5b2.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;首先我们来分析下，不管是什么数据源，算法结构(流程)都是一样的，1、校验参数合法性 2、查询 3、记录日志。这不就是说模板一样、只不过具体细节不一样,没错吧？&lt;/p&gt;
&lt;p&gt;让我们来看看设计模式中模板方法模式的定义吧：&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;模板方法模式：定义一个操作中的算法的框架,而将一些步骤延迟到子类中. 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。通俗的讲,就是将子类相同的方法, 都放到其抽象父类中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们这需求不就和模板方法模式差不多吗？因此我们可以把模板抽到父类(抽象类)中。至于特定的步骤实现不一样，这些特殊步骤，由子类去重写就好了。&lt;/p&gt;
&lt;p&gt;废话不多说了，我们先把父类模板写好吧，完全一样的逻辑是记录日志，这步在模板写死就好。至于检验参数和查询，这两个方法各不相同，因此需要置为抽象方法，由子类去重写。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public abstract class AbstractDataSourceProcesser &amp;lt;T extends QueryInputDomain&amp;gt; {
    public List&amp;lt;HashMap&amp;gt; query(T params){
        List&amp;lt;HashMap&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        //检验参数合法性 不同的引擎sql校验逻辑不一样
        Boolean b = checkParam(params);
        if(b){
            //查询
            list = queryData(params);
        }
        //记录日志
        log.info(&quot;用户={} 查询数据源={} 结果size={}&quot;,params.getUserName(),params.getDataSource(),list.size());
        return list;
    }
    //抽象方法 由子类来实现特定逻辑
    abstract Boolean checkParam(T params);
    abstract List&amp;lt;HashMap&amp;gt; queryData(T params);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码非常简单。但是为了照顾新手，还是想解释一个东西：&lt;/p&gt;
&lt;p&gt;T这个玩意。叫泛型，因为不同数据源的入参不一样，所以我们使用泛型。但是他们也有公共的参数，比如用户名。因此为了不重复冗余，更好的利用公共资源，在泛型的设计上，我们可以有一个泛型上限，&lt;code&gt;&amp;lt;T extends QueryInputDomain&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class QueryInputDomain&amp;lt;T&amp;gt; {
    public String userName;//查询用户名
    public String dataSource;//查询数据源 比如mysql\tidb等
    public T params;//特定的参数 不同的数据源参数一般不一样
}
public class MysqlQueryInput extends QueryInputDomain{
    private String database;//数据库
    public String sql;//sql
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来就轮到子类出场了，通过上面的分析，其实也很简单了，不过是继承父类，重写checkParam()和queryData()方法，下面以mysql数据源为例，其他数据源也都一样的套路：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Component(&quot;dataSourceProcessor#mysql&quot;)
public class MysqlProcesser extends AbstractDataSourceProcesser&amp;lt;MysqlQueryInput&amp;gt;{
    @Override
    public Boolean checkParam(MysqlQueryInput params) {
        System.out.println(&quot;检验mysql参数是否准确&quot;);
        return true;
    }

    @Override
    public List&amp;lt;HashMap&amp;gt; queryData(MysqlQueryInput params) {
        List&amp;lt;HashMap&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        System.out.println(&quot;开始查询mysql数据&quot;);
        return list;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样一来，所有的数据源，都自成一体，拥有一个只属于自己的类，后续要扩展数据源、或者要修改某个数据源的逻辑，都非常方便和清晰了。&lt;/p&gt;
&lt;p&gt;说实话，模板方法模式太简单了，抽象类这东西也太基础普遍了，一般应届生都会知道的。但是对于初入职场的新人来说，还真不太能果断应用在实际生产中。&lt;strong&gt;因此提醒各位：一定要有一个抽象思维，避免代码冗余重复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，要再啰嗦几句，即使工作有几年的工程师也很容易犯一个错误。就是把思维局限在今天的需求，比如老板一开始只给你一个mysql数据源查询的需求，压根没有if-else，可能你就不会放在心上，直接在一个类中写死，不会考虑到后续的扩展。直到后面越来越多的新需求，你才恍然大悟，要全部重构一番，这样浪费自己的时间了。&lt;strong&gt;因此提醒各位：做需求不要局限于今天，要考虑到未来。 从一开始就做到高扩展性，后续需求变更和维护就非常爽了。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;原创声明：本文为【胖滚猪学编程】原创博文，转载请注明出处。以漫画形式让编程生动有趣！原创不易，求关注！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是模板模式还是没有完全解决胖滚猪的if-else，因为需要根据传进来的dataSource参数，判断由哪个service来实现查询逻辑，现在是这么写的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  if(DataSourceEnum.hive.equals(dataSource)){
        list = queryHive(params);
    } else if(DataSourceEnum.tidb.equals(dataSource)){
        list = queryTidb(params);
    }

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么这种if-else应该怎么去干掉呢？我想先跟你讲讲工厂模式的那些故事。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;工厂模式：工厂方法模式是一种创建对象的模式，它被广泛应用在jdk中以及Spring和Struts框架中。它将创建对象的工作转移到了工厂类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了呼应一下工厂两字，我特意举一个代工厂的例子让你理解，这样你应该会有更深刻的印象。&lt;/p&gt;
&lt;p&gt;以手机制造业为例。我们知道有苹果手机、小米手机等等，每种品牌的手机制造方法必然不相同，我们可以先定义好一个手机标准接口，这个接口有make()方法,然后不同型号的手机都继承这个接口:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#Phone类：手机标准规范类(AbstractProduct)
public interface Phone {
    void make();
}
#MiPhone类：制造小米手机（Product1）
public class MiPhone implements Phone {
    public MiPhone() {
        this.make();
    }
    @Override
    public void make() {
        System.out.println(&quot;make xiaomi phone!&quot;);
    }
}
#IPhone类：制造苹果手机（Product2）
public class IPhone implements Phone {
    public IPhone() {
        this.make();
    }
    @Override
    public void make() {
        System.out.println(&quot;make iphone!&quot;);
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在有某手机代工厂：【天霸手机代工厂】。客户只会告诉该工厂手机型号，就要匹配到不同型号的制作方案，那么代工厂是怎么实现的呢？其实也很简单，简单工厂模式(还有抽象工厂模式和工厂方法模式,有兴趣可以了解下)是这么实现的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#PhoneFactory类：手机代工厂（Factory）
public class PhoneFactory {
    public Phone makePhone(String phoneType) {
        if(phoneType.equalsIgnoreCase(&quot;MiPhone&quot;)){
            return new MiPhone();
        }
        else if(phoneType.equalsIgnoreCase(&quot;iPhone&quot;)) {
            return new IPhone();
        }
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样客户告诉你手机型号，你就可以调用代工厂类的方法去获取到对应的手机制造类。你会发现其实也不过是if-else，但是把if-else抽到一个工厂类，由工厂类统一创建对象，对我们的业务代码无入侵，不管是维护还是美观上都会好很多。&lt;br/&gt;&lt;img src=&quot;https://yqfile.alicdn.com/bce7bc29c39f5c37ef6aa2151143c62d735187b5.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，我们应该在每个特定的dataSourceProcessor(数据源执行器)，比如MysqlProcesser、TidbProcesser中添加spring容器注解@Component。该注解我想应该不用多解释了吧~重点是:我们可以把不同数据源都搞成类似的bean name,形如&lt;code&gt;dataSourceProcessor#数据源名称&lt;/code&gt;,如下两段代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Component(&quot;dataSourceProcessor#mysql&quot;)
public class MysqlProcesser extends AbstractDataSourceProcesser&amp;lt;MysqlQueryInput&amp;gt;{
@Component(&quot;dataSourceProcessor#tidb&quot;)
public class TidbProcesser extends AbstractDataSourceProcesser&amp;lt;TidbQueryInput&amp;gt;{
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样有什么好处呢？我可以利用Spring帮我们一次性加载出所有继承于AbstractDataSourceProcesser的Bean ，形如&lt;code&gt;Map&amp;lt;String, AbstractDataSourceProcesser&amp;gt;&lt;/code&gt;,Key是Bean的名称、而Value则是对应的Bean:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Service
public class QueryDataServiceImpl implements QueryDataService {
    @Resource
    public Map&amp;lt;String, AbstractDataSourceProcesser&amp;gt; dataSourceProcesserMap;
    public static String beanPrefix = &quot;dataSourceProcessor#&quot;;
    @Override
    public List&amp;lt;HashMap&amp;gt; queryData(QueryInputDomain domain) {
        AbstractDataSourceProcesser dataSourceProcesser = dataSourceProcesserMap.get(beanPrefix + domain.getDataSource());
        //省略query代码
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可能你还是不太理解，我们直接看一下运行效果：&lt;/p&gt;
&lt;p&gt;1、dataSourceProcesserMap内容如下所示，存储了所有数据源Bean，Key是Bean的名称、而Value则是对应的Bean:&lt;br/&gt;&lt;img src=&quot;https://yqfile.alicdn.com/66a6a4ee0fa2a6e298e32301f63cce350cf8dae3.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、我只需要通过key(即前缀+数据源名称=beanName)，就能匹配到对应的执行器了。比如当参数dataSource为tidb的时候，key为&lt;code&gt;dataSourceProcessor#tidb&lt;/code&gt;，根据key可以直接从dataSourceProcesserMap中获取到&lt;code&gt;TidbProcesser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yqfile.alicdn.com/9614a46ecb7cac2ceaabc7c23a3e76d28d426e16.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yqfile.alicdn.com/c3731e255cd93061faee2ee349798911e9d7e0bc.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yqfile.alicdn.com/cc6f6c642c84363790439be56b8a8edd65ba1b8a.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static String classPrefix = &quot;com.lyl.java.advance.service.&quot;;

AbstractDataSourceProcesser sourceGenerator = 
(AbstractDataSourceProcesser) Class.forName
(classPrefix+DataSourceEnum.getClasszByCode(domain.getDataSource()))
.newInstance();

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是，该种方法是通过className来获取到类的实例，而前端传参肯定是不会传className过来的。因此可以用到枚举类，去定义好不同数据源的类名：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public enum DataSourceEnum {
    mysql(&quot;mysql&quot;, &quot;MysqlProcesser&quot;),
    tidb(&quot;tidb&quot;, &quot;TidbProcesser&quot;);
    private String code;
    private String classz;
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;原创声明：本文为【胖滚猪学编程】原创博文，转载请注明出处。以漫画形式让编程生动有趣！原创不易，求关注！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有些童鞋总觉得设计模式用不上，因为平时写代码除了CRUD还是CRUD，面试的时候问你设计模式，你只能回答最简单的单例模式,问你有没有用过反射之类的高级特性，回答也是否。&lt;/p&gt;
&lt;p&gt;其实不然，JAVA这23种设计模式，每一个都是经典。今天我们就用模板方法模式+工厂模式(或者反射)解决了让人崩溃的if-else。后续对于设计模式的学习，也应该多去实践，从真实的项目中找到用武之地，你才算真正把知识占为己有了。&lt;/p&gt;
&lt;p&gt;本篇文章的内容和技术点虽然很简单，但旨在告诉大家应该要有一个很好的代码抽象思维。杜绝在代码中出现一大摞if-else或者其他烂代码。&lt;/p&gt;
&lt;p&gt;即使你有很好的代码抽象思维，做需求开发的时候，也不要局限于当下，只考虑现在，要多想想未来的扩展性。&lt;/p&gt;
&lt;p&gt;就像你谈恋爱一样，只考虑当下的是渣男，考虑到未来的，才算是一个负责任的人&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&quot;愿世界没有渣男&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;原创声明：本文为【胖滚猪学编程】原创博文，转载请注明出处。以漫画形式让编程生动有趣！原创不易，求关注！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;本文来源于公众号：【胖滚猪学编程】。一枚集颜值与才华于一身，不算聪明却足够努力的女程序媛。用漫画形式让编程so easy and interesting！求关注！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 13 Jun 2020 11:29:00 +0000</pubDate>
<dc:creator>胖滚猪学编程</dc:creator>
<og:description>代码洁癖狂们！看到一个类中有几十个if-else是不是很抓狂？ 设计模式学了用不上吗？面试的时候问你，你只能回答最简单的单例模式，问你有没有用过反射之类的高级特性，回答也是否吗？ 这次就让设计模式(模</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/liuyanling/p/13121484.html</dc:identifier>
</item>
<item>
<title>.net core3.1 abp动态菜单和动态权限（动态菜单实现和动态权限添加）  （三） - wpzblog</title>
<link>http://www.cnblogs.com/wangpengzong/p/13096427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangpengzong/p/13096427.html</guid>
<description>&lt;p&gt;我们来创建动态菜单吧 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
首先，先对动态菜单的概念、操作、流程进行约束：&lt;br/&gt;1.Host和各个Tenant有自己的自定义菜单&lt;br/&gt;2.Host和各个Tenant的权限与自定义菜单相关联&lt;br/&gt;2.Tenant有一套默认的菜单，规定对应的TenantId=-1，在添加租户时自动将标准菜单和标准菜单的权限初始化到添加的租户
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一、先实现菜单在数据库中的增删改查&lt;/p&gt;
&lt;p&gt;第一步：创建表、实体，添加DbContext&lt;/p&gt;
&lt;p&gt;我们需要创建一个菜单表，延续Abp的命名方法，表名叫AbpMenus吧（菜单和权限、验证我们要关联，所以文件尽量放在Authorization文件夹下）&lt;/p&gt;
&lt;p&gt;把创建的实体放在AbpLearn.Core/Authorization下面，新建一个Menus文件夹，再创建Menus实体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AbpMenus : Entity&amp;lt;int&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MenuName { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PageName { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Url { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Icon { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ParentId { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsActive { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Orders { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? TenantId { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre readability=&quot;17&quot;&gt;
如果翻过源码中实体的定义，可以发现很多实体的继承，例如：&lt;p&gt;1.继承接口 IMayHaveTenant，继承后生成的sql语句将自动增加TenantId的查询条件，表中必须包含TenantId列&lt;br/&gt;2.继承接口 IPassivable，继承后表中必须包含IsActive列&lt;br/&gt;3.继承接口 FullAuditedEntity&amp;lt;TPrimaryKey&amp;gt; TPrimaryKey可以是long、int等值类型，必须包含IsDeleted、DeleterUserId、DeletionTime，其中这个接口&lt;br/&gt;还继承了AuditedEntity&amp;lt;TPrimaryKey&amp;gt;, IFullAudited, IAudited, ICreationAudited, IHasCreationTime, IModificationAudited, IHasModificationTime, IDeletionAudited, IHasDeletionTime, ISoftDelete，这些父类型、接口的定义自己F12就可以看到
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;AbpLearn.EntityFrameworkCore/EntityFrameworkCore/AbpLearnDbContext.cs增加DbSet&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AbpLearnDbContext : AbpZeroDbContext&amp;lt;Tenant, Role, User, AbpLearnDbContext&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Define a DbSet for each entity of the application &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        
        &lt;span&gt;public&lt;/span&gt; AbpLearnDbContext(DbContextOptions&amp;lt;AbpLearnDbContext&amp;gt;&lt;span&gt; options)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {
            
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;AbpMenus&amp;gt; AbpMenus { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再去数据库中添加AbpMenus表 字段长度请自行调整&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;p&gt;DROP TABLE IF EXISTS `AbpMenus`;&lt;br/&gt;CREATE TABLE `AbpMenus` (&lt;br/&gt;`Id` int NOT NULL AUTO_INCREMENT,&lt;br/&gt;`MenuName` varchar(50) DEFAULT NULL,&lt;br/&gt;`PageName` varchar(50) DEFAULT NULL,&lt;br/&gt;`LName` varchar(50) DEFAULT NULL,&lt;br/&gt;`Url` varchar(50) DEFAULT NULL,&lt;br/&gt;`Icon` varchar(20) DEFAULT NULL,&lt;br/&gt;`ParentId` int DEFAULT NULL,&lt;br/&gt;`IsActive` bit(1) NOT NULL DEFAULT b'0',&lt;br/&gt;`Orders` int DEFAULT NULL,&lt;br/&gt;`TenantId` int DEFAULT NULL,&lt;br/&gt;PRIMARY KEY (`Id`)&lt;br/&gt;) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;第二步：添加Service和Dto&lt;/p&gt;
&lt;p&gt;AbpLearn.Application/Authorization下添加Menus文件夹，然后添加IMenusAppService、MenusAppService，然后添加Dto文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200611210551368-1414077737.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三步：添加控制器和前台页面、js&lt;/p&gt;
&lt;p&gt;Controller文件，MenusController.cs&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613120436495-1821816057.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 前台添加Menus及对应的js文件，可以简单省事的把其他文件夹复制粘贴一份，然后关键词修改下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200611210646111-276969765.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200611210653597-521335150.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这些文件太多了，我会把这套代码上传到github中，文章最低部会把链接挂出来&lt;/p&gt;
&lt;p&gt;添加完之后我们就可以生成预览一下Menus，因为SetNavigation中未将Menus的url加进去，我们自己手打链接进入&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613122433371-1340406219.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;此时， 我们的菜单这一块的crud已经做好了，我们可以看到有一个Host管理员这个部分是什么意思哪？&lt;/p&gt;
&lt;p&gt;我们为了在当前Host中可以控制所有租户的菜单和权限，将当前Host、标准菜单、租户做一个select，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ChangeModalViewModel
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? TenantId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TenancyName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? TenantMenuType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;ComboboxItemDto&amp;gt; TeneacyItems { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; IndexAsync(&lt;span&gt;int&lt;/span&gt;? id = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loginTenant = id &amp;lt;= &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;null&lt;/span&gt; : _tenantManager.GetById((&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)id);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; viewModel = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChangeModalViewModel
            {
                TenancyName &lt;/span&gt;= loginTenant?&lt;span&gt;.TenancyName,
                TenantId &lt;/span&gt;=&lt;span&gt; id
            };

            viewModel.TeneacyItems &lt;/span&gt;=&lt;span&gt; _tenantManager.Tenants
                .Select(p &lt;/span&gt;=&amp;gt; &lt;span&gt;new&lt;/span&gt; ComboboxItemDto(p.Id.ToString(), p.Name) { IsSelected = viewModel.TenancyName ==&lt;span&gt; p.TenancyName })
                .ToList();

            viewModel.TeneacyItems.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ComboboxItemDto(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Host管理员&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) { IsSelected = id == &lt;span&gt;0&lt;/span&gt;&lt;span&gt; });

            viewModel.TeneacyItems.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ComboboxItemDto(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;默认菜单&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) { IsSelected = id == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; });

            ViewBag.LoginInfo &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _sessionAppService.GetCurrentLoginInformations();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(viewModel);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在Index.cshtml中添加或修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
@model ChangeModalViewModel  // 添加&lt;/pre&gt;
&lt;p&gt;  @await Html.PartialAsync(&quot;~/Views/Menus/Index.AdvancedSearch.cshtml&quot;, Model)  //修改&lt;/p&gt;

&lt;p&gt;  @await Html.PartialAsync(&quot;~/Views/Menus/_CreateModal.cshtml&quot;,Model.TenantId)  //修改&lt;/p&gt;

&lt;p&gt;  //添加&lt;/p&gt;
&lt;p&gt;  $(&quot;#ChangeTenancyName&quot;).change(function (e) {&lt;br/&gt;     location.href = &quot;/Menus/Index/&quot; + this.options[this.selectedIndex].value;&lt;br/&gt;  });&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;修改_CreateModal.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('eb1b27ba-ce7d-494f-b2a1-896ae90bfd6b')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_eb1b27ba-ce7d-494f-b2a1-896ae90bfd6b&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_eb1b27ba-ce7d-494f-b2a1-896ae90bfd6b&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eb1b27ba-ce7d-494f-b2a1-896ae90bfd6b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@using Abp.Authorization.Users
@using Abp.MultiTenancy
@using AbpLearn.MultiTenancy
@using AbpLearn.Web.Models.Common.Modals
@model &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;
@{
    Layout &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal fade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenuCreateModal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; tabindex=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; role=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dialog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; aria-labelledby=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenuCreateModalLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-backdrop=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-dialog modal-lg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; role=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;document&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            @await Html.PartialAsync(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Views/Shared/Modals/_ModalHeader.cshtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; ModalHeaderViewModel(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateNewMenu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
            &lt;/span&gt;&amp;lt;form name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;systemMenuCreateForm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; role=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-horizontal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenuName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
                        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenuName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required minlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
                        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
                        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PageName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
                        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PageName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ParentId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
                        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ParentId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Orders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
                        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Orders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateMenuIsActive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsActive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
                        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateMenuIsActive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsActive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt; /&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TenantId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@(Model)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;&lt;span&gt;
                @await Html.PartialAsync(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Views/Shared/Modals/_ModalFooterWithSaveAndCancel.cshtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;修改_EditModal.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3cac859e-397f-41e9-9596-025466ee5cbc')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_3cac859e-397f-41e9-9596-025466ee5cbc&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_3cac859e-397f-41e9-9596-025466ee5cbc&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3cac859e-397f-41e9-9596-025466ee5cbc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@using AbpLearn.Authorization.Menus.Dto
@using AbpLearn.Web.Models.Common.Modals
@model MenuDto
@{
    Layout &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
@await Html.PartialAsync(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Views/Shared/Modals/_ModalHeader.cshtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; ModalHeaderViewModel(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EditMenu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&amp;lt;form name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenuEditForm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; role=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-horizontal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tenancy-name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenuName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tenancy-name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenuName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.MenuName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; minlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.LName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.Url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PageName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PageName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.PageName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ParentId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ParentId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.ParentId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row required&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Orders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Orders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.Orders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-3 col-form-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;isactive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsActive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/label&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;isactive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsActive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; @(Model.IsActive ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&quot;&lt;/span&gt;) /&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;&lt;span&gt;
    @await Html.PartialAsync(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Views/Shared/Modals/_ModalFooterWithSaveAndCancel.cshtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;lt;/form&amp;gt;

&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/view-resources/Views/Menus/_EditModal.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-append-version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;修改Index.AdvancedSearch.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@using AbpLearn.Web.Views.Shared.Components.TenantChange
@using Abp.Application.Services.Dto
@model ChangeModalViewModel

    &lt;/span&gt;&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abp-advanced-search&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;form id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MenusSearchForm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-horizontal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TenantId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.TenantId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
            &amp;lt;/form&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-horizontal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
                    @Html.DropDownList(
                       &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChangeTenancyNames&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                       Model.TeneacyItems.Select(i &lt;/span&gt;=&amp;gt;&lt;span&gt; i.ToSelectListItem()),
                       &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { @class = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control edited&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChangeTenancyName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; })
                &lt;/span&gt;&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为在abp里面加载当前列表调用的是abp.services.app.menus.getAll方法，我们还需要对MenusAppService中的GetAllAsync做一下修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    [Serializable]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MenusPagedResultRequestDto: PagedResultRequestDto, IPagedAndSortedResultRequest
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? TenantId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Sorting { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; ShowAll { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;#region&lt;/span&gt; 查询全部菜单
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 查询全部菜单
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;PagedResultDto&amp;lt;MenuDto&amp;gt;&amp;gt;&lt;span&gt; GetAllAsync(MenusPagedResultRequestDto input)
        {
            IQueryable&lt;/span&gt;&amp;lt;AbpMenus&amp;gt;&lt;span&gt; query;

            query &lt;/span&gt;= CreateFilteredQuery(input).Where(o =&amp;gt; o.TenantId == (input.TenantId == &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : input.TenantId));

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; totalCount = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; AsyncQueryableExecuter.CountAsync(query);

            query &lt;/span&gt;=&lt;span&gt; ApplySorting(query, input);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!input.ShowAll) query =&lt;span&gt; ApplyPaging(query, input);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; entities = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; AsyncQueryableExecuter.ToListAsync(query);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; PagedResultDto&amp;lt;MenuDto&amp;gt;&lt;span&gt;(
                totalCount,
                entities.Select(MapToEntityDto).ToList()
            );
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，我们在选中下面中的任意一个Tenant时，将会跳到对应的菜单里面了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613122549077-374827601.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 我们先把Host管理员菜单和默认菜单配置一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613131544727-322024248.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;






&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613131507643-1916575069.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;二、实现添加租户时，初始化标准菜单和权限&lt;/p&gt;
&lt;p&gt;首先我们找到添加租户的地方，去TenantAppService里面去找，可以看到有CreateAsync的重写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;TenantDto&amp;gt;&lt;span&gt; CreateAsync(CreateTenantDto input)
        {
            CheckCreatePermission();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create tenant&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; tenant = ObjectMapper.Map&amp;lt;Tenant&amp;gt;&lt;span&gt;(input);
            tenant.ConnectionString &lt;/span&gt;=&lt;span&gt; input.ConnectionString.IsNullOrEmpty()
                &lt;/span&gt;? &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
                : SimpleStringCipher.Instance.Encrypt(input.ConnectionString);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; defaultEdition = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _editionManager.FindByNameAsync(EditionManager.DefaultEditionName);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (defaultEdition != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                tenant.EditionId &lt;/span&gt;=&lt;span&gt; defaultEdition.Id;
            }

            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _tenantManager.CreateAsync(tenant);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; CurrentUnitOfWork.SaveChangesAsync(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; To get new tenant's id.

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create tenant database&lt;/span&gt;
&lt;span&gt;            _abpZeroDbMigrator.CreateOrMigrateForTenant(tenant);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We are working entities of new tenant, so changing tenant filter&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt;&lt;span&gt; (CurrentUnitOfWork.SetTenantId(tenant.Id))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create static roles for new tenant&lt;/span&gt;
                CheckErrors(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.CreateStaticRoles(tenant.Id));

                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; CurrentUnitOfWork.SaveChangesAsync(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; To get static role ids

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Grant all permissions to admin role&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; adminRole = _roleManager.Roles.Single(r =&amp;gt; r.Name ==&lt;span&gt; StaticRoleNames.Tenants.Admin);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.GrantAllPermissionsAsync(adminRole);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create admin user for the tenant&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; adminUser =&lt;span&gt; User.CreateTenantAdminUser(tenant.Id, input.AdminEmailAddress);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.InitializeOptionsAsync(tenant.Id);
                CheckErrors(&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.CreateAsync(adminUser, User.DefaultPassword));
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; CurrentUnitOfWork.SaveChangesAsync(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; To get admin user's id

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Assign admin user to role!&lt;/span&gt;
                CheckErrors(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.AddToRoleAsync(adminUser, adminRole.Name));
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; CurrentUnitOfWork.SaveChangesAsync();
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; MapToEntityDto(tenant);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们需要做的是，在 using (CurrentUnitOfWork.SetTenantId(tenant.Id)) 的内部尾部添加赋予菜单和权限的方法即可&lt;/p&gt;
&lt;p&gt;赋予菜单和权限的方法我们分开写，都放在MenusAppService中，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; IMenusAppService : IAsyncCrudAppService&amp;lt;MenuDto, &lt;span&gt;int&lt;/span&gt;, MenusPagedResultRequestDto, CreateMenuDto, MenuDto&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 赋予默认菜单
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        Task GiveMenusAsync(EntityDto&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; input);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 赋予当前租户Admin角色菜单权限
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        Task GivePermissionsAsync(EntityDto&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; input);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
        #region 赋予默认菜单
        public async Task GiveMenusAsync(EntityDto&amp;lt;int&amp;gt; input)
        {
            if (input.Id &amp;gt; 0)
            {
                var tenant = await _tenantManager.GetByIdAsync(input.Id);

                using (_unitOfWorkManager.Current.SetTenantId(tenant.Id))
                {
                    var query = CreateFilteredQuery(new MenusPagedResultRequestDto()).Where(o =&amp;gt; o.TenantId == tenant.Id);

                    var systemMenus = await AsyncQueryableExecuter.ToListAsync(query);

                    if (!systemMenus.Any())
                    {
                        query = CreateFilteredQuery(new MenusPagedResultRequestDto()).Where(o =&amp;gt; o.TenantId == -1);

                        var defaultMenus = await AsyncQueryableExecuter.ToListAsync(query);
                        if (defaultMenus.Any())
                        {
                            List&amp;lt;MenusInsert&amp;gt; GetMenusInserts(List&amp;lt;AbpMenus&amp;gt; abpMenus,int parentId = 0)
                            {
                                List&amp;lt;MenusInsert&amp;gt; menusInserts = new List&amp;lt;MenusInsert&amp;gt;();
                                foreach (var entity in abpMenus.Where(o =&amp;gt; o.ParentId == parentId))
                                {
                                    var insert = new MenusInsert()
                                    {
                                        LName = entity.LName,
                                        MenuName = entity.MenuName,
                                        PageName = entity.PageName,
                                        Icon = entity.Icon,
                                        Url = entity.Url,
                                        IsActive = entity.IsActive,
                                        Orders = entity.Orders,
                                        ParentId = entity.ParentId,
                                        TenantId = tenant.Id
                                    };
                                    insert.menusInserts = GetMenusInserts(abpMenus, entity.Id);
                                    menusInserts.Add(insert);
                                }
                                return menusInserts;
                            }

                            async Task InsertMenusAsync(List&amp;lt;MenusInsert&amp;gt; inserts,int parentId = 0)
                            {
                                foreach (var insert in inserts)
                                {
                                    var entity = await CreateAsync(new AbpMenus()
                                    {
                                        LName = insert.LName,
                                        MenuName = insert.MenuName,
                                        PageName = insert.PageName,
                                        Icon = insert.Icon,
                                        Url = insert.Url,
                                        IsActive = insert.IsActive,
                                        Orders = insert.Orders,
                                        ParentId = parentId,
                                        TenantId = tenant.Id
                                    });
                                    if (insert.menusInserts.Any())
                                    {
                                        await InsertMenusAsync(insert.menusInserts, entity.Id);
                                    }
                                }
                            }
                            await InsertMenusAsync(GetMenusInserts(defaultMenus));
                            
                        }
                    }
                }
            }

        }
        #endregion


        &lt;span&gt;#region&lt;/span&gt; 赋予当前租户Admin角色菜单权限
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 赋予当前租户Admin角色菜单权限
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task GivePermissionsAsync(EntityDto&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; input)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (input.Id &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tenant = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _tenantManager.GetByIdAsync(input.Id);

                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; (_unitOfWorkManager.Current.SetTenantId(tenant.Id))
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; adminRoles = &lt;span&gt;await&lt;/span&gt; _roleRepository.GetAllListAsync(o =&amp;gt; o.Name == StaticRoleNames.Tenants.Admin &amp;amp;&amp;amp; o.TenantId ==&lt;span&gt; tenant.Id);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (adminRoles.FirstOrDefault() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; adminRole =&lt;span&gt; adminRoles.FirstOrDefault();

                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; query = CreateFilteredQuery(&lt;span&gt;new&lt;/span&gt; MenusPagedResultRequestDto()).Where(o =&amp;gt; o.TenantId ==&lt;span&gt; tenant.Id);

                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; systemMenus = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; AsyncQueryableExecuter.ToListAsync(query);

                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; permissions =&lt;span&gt; ConvertTenantPermissions(systemMenus);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;await _roleManager.ResetAllPermissionsAsync(adminRole.FirstOrDefault()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重置授权&lt;/span&gt;

                        &lt;span&gt;var&lt;/span&gt; active_BatchCount = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; active_permissions = ConvertTenantPermissions(systemMenus.Where(o =&amp;gt;&lt;span&gt; o.IsActive).ToList());
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; active_permissions.Count(); i += &lt;span&gt;10&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次后移5位&lt;/span&gt;
&lt;span&gt;                        {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;await _roleManager.SetGrantedPermissionsAsync(adminRole.FirstOrDefault().Id, active_permissions.Take(active_BatchCount).Skip(i));&lt;/span&gt;
                            &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; notActive_permission &lt;span&gt;in&lt;/span&gt;&lt;span&gt; active_permissions.Take(active_BatchCount).Skip(i))
                            {
                                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.GrantPermissionAsync(adminRole, notActive_permission);
                            }
                            active_BatchCount &lt;/span&gt;+= &lt;span&gt;10&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次从数组中选出N+10位，skip前N位&lt;/span&gt;
&lt;span&gt;                        }

                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; notActive_BatchCount = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; notActive_permissions = ConvertTenantPermissions(systemMenus.Where(o =&amp;gt; !&lt;span&gt;o.IsActive).ToList());
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; notActive_permissions.Count(); i += &lt;span&gt;10&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次后移5位&lt;/span&gt;
&lt;span&gt;                        {
                            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; notActive_permission &lt;span&gt;in&lt;/span&gt;&lt;span&gt; notActive_permissions.Take(notActive_BatchCount).Skip(i))
                            {
                                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.ProhibitPermissionAsync(adminRole, notActive_permission);
                            }
                            notActive_BatchCount &lt;/span&gt;+= &lt;span&gt;10&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次从数组中选出N+10位，skip前N位&lt;/span&gt;
&lt;span&gt;                        }
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpDbConcurrencyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未获取到当前租户的Admin角色！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; adminRoles = &lt;span&gt;await&lt;/span&gt; _roleRepository.GetAllListAsync(o =&amp;gt; o.Name == StaticRoleNames.Tenants.Admin &amp;amp;&amp;amp; o.TenantId == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (adminRoles.FirstOrDefault() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; adminRole =&lt;span&gt; adminRoles.FirstOrDefault();

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; query = CreateFilteredQuery(&lt;span&gt;new&lt;/span&gt; MenusPagedResultRequestDto()).Where(o =&amp;gt; o.TenantId == &lt;span&gt;null&lt;/span&gt; || o.TenantId == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; systemMenus = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; AsyncQueryableExecuter.ToListAsync(query);

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;await _roleManager.ResetAllPermissionsAsync(adminRole.FirstOrDefault()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重置授权&lt;/span&gt;

                    &lt;span&gt;var&lt;/span&gt; active_BatchCount = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; active_permissions = ConvertHostPermissions(systemMenus.Where(o =&amp;gt;&lt;span&gt; o.IsActive).ToList());
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; active_permissions.Count(); i += &lt;span&gt;10&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次后移5位&lt;/span&gt;
&lt;span&gt;                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;await _roleManager.SetGrantedPermissionsAsync(adminRole.FirstOrDefault().Id, active_permissions.Take(active_BatchCount).Skip(i));&lt;/span&gt;
                        &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; notActive_permission &lt;span&gt;in&lt;/span&gt;&lt;span&gt; active_permissions.Take(active_BatchCount).Skip(i))
                        {
                            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.GrantPermissionAsync(adminRole, notActive_permission);
                        }
                        active_BatchCount &lt;/span&gt;+= &lt;span&gt;10&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次从数组中选出N+10位，skip前N位&lt;/span&gt;
&lt;span&gt;                    }

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; notActive_BatchCount = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; notActive_permissions = ConvertHostPermissions(systemMenus.Where(o =&amp;gt; !&lt;span&gt;o.IsActive).ToList());
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; notActive_permissions.Count(); i += &lt;span&gt;10&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次后移5位&lt;/span&gt;
&lt;span&gt;                    {
                        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; notActive_permission &lt;span&gt;in&lt;/span&gt;&lt;span&gt; notActive_permissions.Take(notActive_BatchCount).Skip(i))
                        {
                            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.ProhibitPermissionAsync(adminRole, notActive_permission);
                        }
                        notActive_BatchCount &lt;/span&gt;+= &lt;span&gt;10&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次从数组中选出N+10位，skip前N位&lt;/span&gt;
&lt;span&gt;                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Permission&amp;gt; ConvertTenantPermissions(IReadOnlyList&amp;lt;AbpMenus&amp;gt;&lt;span&gt; systemMenus)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; systemMenus.Select(o =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Permission(o.PageName, L(o.MenuName), L(o.LName), MultiTenancySides.Tenant));
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Permission&amp;gt; ConvertHostPermissions(IReadOnlyList&amp;lt;AbpMenus&amp;gt;&lt;span&gt; systemMenus)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; systemMenus.Select(o =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Permission(o.PageName, L(o.MenuName), L(o.LName), MultiTenancySides.Host));
        }
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TenantAppService.cs中做一下修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;TenantDto&amp;gt;&lt;span&gt; CreateAsync(CreateTenantDto input)
        {
            CheckCreatePermission();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create tenant&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; tenant = ObjectMapper.Map&amp;lt;Tenant&amp;gt;&lt;span&gt;(input);
            tenant.ConnectionString &lt;/span&gt;=&lt;span&gt; input.ConnectionString.IsNullOrEmpty()
                &lt;/span&gt;? &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
                : SimpleStringCipher.Instance.Encrypt(input.ConnectionString);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; defaultEdition = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _editionManager.FindByNameAsync(EditionManager.DefaultEditionName);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (defaultEdition != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                tenant.EditionId &lt;/span&gt;=&lt;span&gt; defaultEdition.Id;
            }

            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _tenantManager.CreateAsync(tenant);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; CurrentUnitOfWork.SaveChangesAsync(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; To get new tenant's id.

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create tenant database&lt;/span&gt;
&lt;span&gt;            _abpZeroDbMigrator.CreateOrMigrateForTenant(tenant);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We are working entities of new tenant, so changing tenant filter&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt;&lt;span&gt; (CurrentUnitOfWork.SetTenantId(tenant.Id))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create static roles for new tenant&lt;/span&gt;
                CheckErrors(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.CreateStaticRoles(tenant.Id));

                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; CurrentUnitOfWork.SaveChangesAsync(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; To get static role ids

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Grant all permissions to admin role&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; adminRole = _roleManager.Roles.Single(r =&amp;gt; r.Name ==&lt;span&gt; StaticRoleNames.Tenants.Admin);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _roleManager.GrantAllPermissionsAsync(adminRole);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create admin user for the tenant&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; adminUser =&lt;span&gt; User.CreateTenantAdminUser(tenant.Id, input.AdminEmailAddress);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.InitializeOptionsAsync(tenant.Id);
                CheckErrors(&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.CreateAsync(adminUser, User.DefaultPassword));
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; CurrentUnitOfWork.SaveChangesAsync(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; To get admin user's id

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Assign admin user to role!&lt;/span&gt;
                CheckErrors(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.AddToRoleAsync(adminUser, adminRole.Name));
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; CurrentUnitOfWork.SaveChangesAsync();

                &lt;/span&gt;&lt;span&gt;await _menusAppService.GiveMenusAsync(new EntityDto&amp;lt;int&amp;gt;() { Id = tenant.Id });
                await CurrentUnitOfWork.SaveChangesAsync();

                await _menusAppService.GivePermissionsAsync(new EntityDto&amp;lt;int&amp;gt;() { Id = tenant.Id });
                await&lt;/span&gt;&lt;span&gt;&lt;span&gt; CurrentUnitOfWork.SaveChangesAsync();&lt;/span&gt;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; MapToEntityDto(tenant);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们添加租户企业1、企业2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613151834645-748331091.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613151852573-1477272883.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 现在菜单已经同步好了，我们去数据库看下权限的同步&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613152221722-277186366.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;TenantId：&lt;/p&gt;
&lt;p&gt;null是Host&lt;/p&gt;
&lt;p&gt;1是abp页面第一次加载时初始化的Default租户&lt;/p&gt;
&lt;p&gt;2是我之前添加的旧的企业1，那个时候方法没写好，就把2的删掉了&lt;/p&gt;
&lt;p&gt;3是企业2&lt;/p&gt;
&lt;p&gt;4是企业1&lt;/p&gt;
&lt;p&gt;由此可以看出，我们添加的菜单对应的PageName已经作为权限添加到权限表了&lt;/p&gt;

&lt;p&gt;三、实现菜单修改后，权限赋予对应租户&lt;/p&gt;
&lt;p&gt;这一个其实在二里面已经写好了，前台做一个按钮，赋予权限，调用一下就好了&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;Index.cshtml   //为什么要加getCurrentLoginInformationsOutput.Tenant == null的判断？是因为租户在进入菜单管理的地方，我们不给他们添加、赋予权限的权限&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613152628601-193312193.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 在/wwwroot/view-resources/Views/Menus/Index.js中添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    $(document).on(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#GivePermissions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function (e) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tenantId = $(&lt;span&gt;this&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-tenant-id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

        abp.message.confirm(
            abp.utils.formatString(
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;是否赋予当前租户管理员账号所有权限？&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;系统&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ),
            &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            (isConfirmed) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isConfirmed) {
                    _menuService
                        .givePermissions({
                            id: tenantId
                        })
                        .done(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
                            abp.notify.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;操作成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                            _$menusTable.ajax.reload();
                        });
                }
            }
        );
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;四、实现菜单的动态加载&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.cnblogs.com/wangpengzong/p/13089690.html&quot;&gt;https://www.cnblogs.com/wangpengzong/p/13089690.html&lt;/a&gt;中我们找到了菜单生成的地方，在最底部，通过&lt;span&gt;NavigationManager来获取到Menus，这里其实有一个初始化方法（&lt;/span&gt;&lt;span&gt;Initialize&lt;/span&gt;&lt;span&gt;），调用的是&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbpLearnNavigationProvider的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;SetNavigation方法来进行本地化，然后在&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;NavigationManager的非静态构造函数中去获取已经本地化的Menus，但是本地化Menus因为是在初始化时，程序的初始化我们无法获取到当前的Tenant信息，所以只能将获取Menus的地方推迟，放在倒数第二个类&lt;/span&gt;UserNavigationManager里面的GetMenuAsync方法中，我们来看下GetMenuAsync
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;UserMenu&amp;gt; GetMenuAsync(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; menuName, UserIdentifier user)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; menuDefinition =&lt;span&gt; _navigationManager.Menus.GetOrDefault(menuName);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (menuDefinition == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;There is no menu with given name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; menuName);
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userMenu = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserMenu(menuDefinition, _localizationContext);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; FillUserMenuItems(user, menuDefinition.Items, userMenu.Items);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMenu;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一句话获取menuDefinition是关键点，我们将menuDefinition修改为从数据库中获取，在AbpLearn.Application/Authorization/Menus下添加UserNavigationManager.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Application.Features;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Application.Navigation;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Authorization;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Dependency;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Localization;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.MultiTenancy;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Runtime.Session;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; AbpLearn.Authorization.Menus.Dto;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; AbpLearn.Authorization.Menus
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserNavigationManager : IUserNavigationManager, ITransientDependency
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IAbpSession AbpSession { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; INavigationManager _navigationManager;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ILocalizationContext _localizationContext;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IIocResolver _iocResolver;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IMenusAppService _menuAppService;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, MenuDefinition&amp;gt; Menus { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MenuDefinition MainMenu
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; Menus[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MainMenu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]; }
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserNavigationManager(
            INavigationManager navigationManager,
            ILocalizationContext localizationContext,
            IMenusAppService menuAppService,
            IIocResolver iocResolver)
        {
            _navigationManager &lt;/span&gt;=&lt;span&gt; navigationManager;
            _localizationContext &lt;/span&gt;=&lt;span&gt; localizationContext;
            _iocResolver &lt;/span&gt;=&lt;span&gt; iocResolver;
            AbpSession &lt;/span&gt;=&lt;span&gt; NullAbpSession.Instance;
            _menuAppService &lt;/span&gt;=&lt;span&gt; menuAppService;

        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;UserMenu&amp;gt; GetMenuAsync(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; menuName, UserIdentifier user)
        {
            Menus &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, MenuDefinition&amp;gt;&lt;span&gt;
                    {
                        {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MainMenu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; MenuDefinition(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MainMenu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; LocalizableString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MainMenu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, AbpConsts.LocalizationSourceName))}
                    };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; lists = &lt;span&gt;await&lt;/span&gt; _menuAppService.GetAllAsync(&lt;span&gt;new&lt;/span&gt; MenusPagedResultRequestDto() { ShowAll = &lt;span&gt;true, TenantId = (loginInfo.Tenant == null ? 0 : loginInfo.Tenant.Id)&lt;/span&gt;&lt;span&gt; });
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ParentMenu = lists.Items.Where(k =&amp;gt; k.IsActive).ToList().Where(x =&amp;gt; x.ParentId == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;).ToList();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ParentMenu.Any())
            {
                ParentMenu.ForEach(g &lt;/span&gt;=&amp;gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; menu = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MenuItemDefinition(
                          g.LName,
                          MenuL(g.MenuName),
                          g.Icon,
                          g.Url,
                          &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                          g.Orders
                          );
                    BuildSubMenu(menu, g.Id, lists.Items.Where(k &lt;/span&gt;=&amp;gt;&lt;span&gt; k.IsActive).ToList());
                    MainMenu.AddItem(menu);
                });
            }
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; menuDefinition =&lt;span&gt; MainMenu;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (menuDefinition == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;There is no menu with given name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; menuName);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userMenu = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserMenu();
            userMenu.Name &lt;/span&gt;=&lt;span&gt; menuDefinition.Name;
            userMenu.DisplayName &lt;/span&gt;=&lt;span&gt; menuDefinition.DisplayName.Localize(_localizationContext);
            userMenu.CustomData &lt;/span&gt;=&lt;span&gt; menuDefinition.CustomData;
            userMenu.Items &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;UserMenuItem&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; FillUserMenuItems(user, menuDefinition.Items, userMenu.Items);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMenu;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IReadOnlyList&amp;lt;UserMenu&amp;gt;&amp;gt;&lt;span&gt; GetMenusAsync(UserIdentifier user)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userMenus = &lt;span&gt;new&lt;/span&gt; List&amp;lt;UserMenu&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; menu &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _navigationManager.Menus.Values)
            {
                userMenus.Add(&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; GetMenuAsync(menu.Name, user));
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMenus;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BuildSubMenu(MenuItemDefinition menu, &lt;span&gt;int&lt;/span&gt; parentId, List&amp;lt;MenuDto&amp;gt;&lt;span&gt; list)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; nList = list.Where(x =&amp;gt; x.ParentId ==&lt;span&gt; parentId).ToList();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nList != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; nList.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                nList.ForEach(g &lt;/span&gt;=&amp;gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subMenu = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MenuItemDefinition(
                         g.PageName,
                        MenuL(g.MenuName),
                        g.Icon,
                        g.Url,
                        &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                      g.Orders
                        );
                    menu.AddItem(subMenu);
                    BuildSubMenu(subMenu, g.Id, list);
                });
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ILocalizableString MenuL(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LocalizableString(name, AbpLearnConsts.LocalizationSourceName);
        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; FillUserMenuItems(UserIdentifier user, IList&amp;lt;MenuItemDefinition&amp;gt; menuItemDefinitions, IList&amp;lt;UserMenuItem&amp;gt;&lt;span&gt; userMenuItems)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;TODO: Can be optimized by re-using FeatureDependencyContext.&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; addedMenuItemCount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; scope =&lt;span&gt; _iocResolver.CreateScope())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; permissionDependencyContext = scope.Resolve&amp;lt;PermissionDependencyContext&amp;gt;&lt;span&gt;();
                permissionDependencyContext.User &lt;/span&gt;=&lt;span&gt; user;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; featureDependencyContext = scope.Resolve&amp;lt;FeatureDependencyContext&amp;gt;&lt;span&gt;();
                featureDependencyContext.TenantId &lt;/span&gt;= user == &lt;span&gt;null&lt;/span&gt; ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : user.TenantId;

                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; menuItemDefinition &lt;span&gt;in&lt;/span&gt;&lt;span&gt; menuItemDefinitions)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (menuItemDefinition.RequiresAuthentication &amp;amp;&amp;amp; user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (menuItemDefinition.PermissionDependency != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt;
                        (user &lt;/span&gt;== &lt;span&gt;null&lt;/span&gt; || !(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; menuItemDefinition.PermissionDependency.IsSatisfiedAsync(permissionDependencyContext))))
                    {
                        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (menuItemDefinition.FeatureDependency != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt;
                        (AbpSession.MultiTenancySide &lt;/span&gt;== MultiTenancySides.Tenant || (user != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; user.TenantId != &lt;span&gt;null&lt;/span&gt;)) &amp;amp;&amp;amp;
                        !(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; menuItemDefinition.FeatureDependency.IsSatisfiedAsync(featureDependencyContext)))
                    {
                        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userMenuItem = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserMenuItem(menuItemDefinition, _localizationContext);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (menuItemDefinition.IsLeaf || (&lt;span&gt;await&lt;/span&gt; FillUserMenuItems(user, menuItemDefinition.Items, userMenuItem.Items)) &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        userMenuItems.Add(userMenuItem);
                        &lt;/span&gt;++&lt;span&gt;addedMenuItemCount;
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; addedMenuItemCount;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在Mvc项目的Startup.cs/ConfigureServices下增加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            services.AddScoped&amp;lt;IUserNavigationManager, UserNavigationManager&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为在abp中菜单被做做成了模块，在程序初始化时模块添加进去，但是我们将菜单修改成了每次读取数据库加载，那么我们就不需要加载这个模块了&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在mvc项目的AbpLearnWebMvcModule.cs注释下面这句话&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Configuration.Navigation.Providers.Add&amp;lt;AbpLearnNavigationProvider&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将AbpLearnNavigationProvider.cs/SetNavigation方法的内容全部注释掉&lt;/p&gt;
&lt;p&gt;预览一下mvc，用Host登录一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613155431331-1058862470.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 用企业1登陆下，登录切换Host和Tenant，是在登录界面 &lt;span&gt;Current tenant: &lt;/span&gt;&lt;span&gt;未选&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;a data-toggle=&quot;modal&quot; data-target=&quot;#TenantChangeModal&quot;&gt;Change&lt;/a&gt;&lt;span&gt;) 点击Change，在弹框中输入 E1（因为上面设置的企业1标识是E1），点击save，页面刷新后就变为了 &lt;/span&gt;&lt;span&gt;Current tenant: &lt;/span&gt;&lt;span title=&quot;企业1&quot;&gt;&lt;span&gt;E1&lt;/span&gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;a data-toggle=&quot;modal&quot; data-target=&quot;#TenantChangeModal&quot;&gt;Change&lt;/a&gt;&lt;span&gt;) ，输入账号密码登录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613164737035-1698740974.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; OK，我们的动态菜单已经完成了&lt;/p&gt;

&lt;p&gt; 当然，我的菜单使用的是table来显示，你也可以使用tree来，我找到了一个jstree，下面修改一下&lt;/p&gt;
&lt;p&gt;MenusAppService.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;#region&lt;/span&gt; 获取当前账户的菜单树
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取当前账户的菜单树
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; GetTreeAsync(MenusPagedResultRequestDto input)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; query = CreateFilteredQuery(&lt;span&gt;new&lt;/span&gt; MenusPagedResultRequestDto()).Where(o =&amp;gt; o.TenantId ==&lt;span&gt; input.TenantId);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; systemMenus = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; AsyncQueryableExecuter.ToListAsync(query);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; childJObject = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JObject();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; openJObject = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JObject();
            openJObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            childJObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            childJObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;根目录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            childJObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
            childJObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, openJObject);
            childJObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;children&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GetJArray(systemMenus, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; childJObject.ToString();
        }

        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 获取目录Array
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取目录Array
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;systemMenus&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parentdId&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; JArray GetJArray(List&amp;lt;AbpMenus&amp;gt; systemMenus, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; parentdId)
        {
            JArray jArray &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JArray();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; menu &lt;span&gt;in&lt;/span&gt; systemMenus.Where(o =&amp;gt; o.ParentId ==&lt;span&gt; parentdId))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; jObject = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JObject();
                jObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, menu.Id);
                jObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, menu.MenuName);
                jObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, menu.Icon);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;jObject.Add(&quot;state&quot;, menu.Icon);&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (systemMenus.Any(o =&amp;gt; o.ParentId ==&lt;span&gt; menu.Id))
                {
                    jObject.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;children&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetJArray(systemMenus, menu.Id));
                }
                jArray.Add(jObject);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; jArray;
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 前端Index.cshtml  &lt;span&gt;jstree去&lt;/span&gt;&lt;span&gt;&lt;span&gt;https://github.com/vakata/jstree/zipball/3.3.8下载，下载后在mvc项目的wwwroot文件夹下添加jstree文件夹，下载文件的src里面内容全部赋值到jstree文件夹&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注释掉table标签&lt;/p&gt;
&lt;p&gt;添加&lt;span&gt;jstree1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;
&lt;pre readability=&quot;39&quot;&gt;
@section styles
{
    &amp;lt;link href=&quot;~/jstree/themes/default/style.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;
}                     &lt;p&gt;&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jstree1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width:100%;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;



@section scripts
{
    &amp;lt;environment names=&quot;Development&quot;&amp;gt;
        &amp;lt;script src=&quot;~/view-resources/Views/Menus/Index.js&quot; asp-append-version=&quot;true&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/environment&amp;gt;

    &amp;lt;environment names=&quot;Staging,Production&quot;&amp;gt;
        &amp;lt;script src=&quot;~/view-resources/Views/Menus/Index.min.js&quot; asp-append-version=&quot;true&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/environment&amp;gt;
    &amp;lt;script type=&quot;application/javascript&quot; src=&quot;~/jstree/jstree.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;application/javascript&quot; src=&quot;~/jstree/jstree.contextmenu.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
        $(function () {
            var _menuService = abp.services.app.menus;

            l = abp.localization.getSource('A_b_p');

            $('#jstree1').jstree({
                &quot;core&quot;: {
                    &quot;data&quot;: function (node, callback) {
                        var filter = $('#MenusSearchForm').serializeFormToObject(true);
                        this, _menuService.getTree(filter).done(function (result) {
                            callback.call(this, JSON.parse(result));
                        });
                    },
                    &quot;themes&quot;: {
                        &quot;variant&quot;: &quot;large&quot;,//加大
                        &quot;ellipsis&quot;: true //文字多时省略
                    },
                    &quot;check_callback&quot;: true,
                },
                &quot;plugins&quot;: [&quot;contextmenu&quot;, &quot;wholerow&quot;, &quot;themes&quot;],//&quot;checkbox&quot;
                &quot;contextmenu&quot;: {
                    select_node: false,
                    show_at_node: true,
                    &quot;items&quot;: {
                        &quot;create&quot;: {
                            &quot;label&quot;: &quot;新增子菜单&quot;,
                            &quot;action&quot;: function (obj) {
                                var inst = jQuery.jstree.reference(obj.reference);
                                var clickedNode = inst.get_node(obj.reference);
                                if (parseInt(clickedNode.original.id) &amp;gt;= 0) {
                                    $(&quot;#ParentId&quot;).val(clickedNode.original.id);
                                    $(&quot;#MenuCreateModal&quot;).modal();
                                } else {
                                    abp.notify.info(&quot;父节点获取出错&quot;);
                                }
                            },
                        },
                        &quot;rename&quot;: {
                            &quot;label&quot;: &quot;修改&quot;,
                            &quot;action&quot;: function (obj) {
                                var inst = jQuery.jstree.reference(obj.reference);
                                var clickedNode = inst.get_node(obj.reference);
                                if (parseInt(clickedNode.original.id) &amp;gt;= 0) {
                                    abp.ajax({
                                        url: abp.appPath + 'Menus/EditModal?menuId=' + clickedNode.original.id,
                                        type: 'POST',
                                        dataType: 'html',
                                        success: function (content) {
                                            $(&quot;#MenuEditModal&quot;).modal();
                                            $('#MenuEditModal div.modal-content').html(content);
                                        },
                                        error: function (e) { }
                                    });
                                } else {
                                    abp.notify.info(&quot;菜单获取出错&quot;);
                                }
                            }
                        },
                        &quot;delete&quot;: {
                            &quot;label&quot;: &quot;更改菜单状态&quot;,
                            &quot;action&quot;: function (obj) {
                                var inst = jQuery.jstree.reference(obj.reference);
                                var clickedNode = inst.get_node(obj.reference);
                                abp.message.confirm(
                                    abp.utils.formatString(&quot;是否&quot; + (clickedNode.original.state.disabled?&quot;启用&quot;:&quot;禁用&quot;) + &quot;当前菜单：&quot; + clickedNode.original.text + &quot;?&quot;),
                                    null,
                                    (isConfirmed) =&amp;gt; {
                                        if (isConfirmed) {
                                            _menuService
                                                .delete({
                                                    id: clickedNode.original.id
                                                })
                                                .done(() =&amp;gt; {
                                                    abp.notify.info(l('SuccessfullyDeleted'));
                                                    location.reload();
                                                });
                                        }
                                    }
                                );
                            },

                        }
                    }
                }
            }).on('select_node.jstree', function (event, data) {
                console.log(data.node);
            }).on('changed.jstree', function (event, data) {
                console.log(&quot;-----------changed.jstree&quot;);
                console.log(&quot;action:&quot; + data.action);
                console.log(data.node);
            });

        });


    &amp;lt;/script&amp;gt;
}
&lt;/p&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt; 预览一下吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/789895/202006/789895-20200613175433971-1845076483.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;本文github：&lt;a href=&quot;https://github.com/wangpengzong/AbpLearn&quot;&gt;https://github.com/wangpengzong/AbpLearn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇开始动态权限&lt;/p&gt;

</description>
<pubDate>Sat, 13 Jun 2020 10:16:00 +0000</pubDate>
<dc:creator>wpzblog</dc:creator>
<og:description>我们来创建动态菜单吧 首先，先对动态菜单的概念、操作、流程进行约束：1.Host和各个Tenant有自己的自定义菜单2.Host和各个Tenant的权限与自定义菜单相关联2.Tenant有一套默认的菜</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wangpengzong/p/13096427.html</dc:identifier>
</item>
<item>
<title>为何说要多用组合少用继承？如何决定该用组合还是继承？ - IT文艺男</title>
<link>http://www.cnblogs.com/appsucc/p/13117618.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/appsucc/p/13117618.html</guid>
<description>&lt;p&gt;在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;195&quot;&gt;
&lt;p&gt;在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。&lt;/p&gt;
&lt;h2 id=&quot;为什么不推荐使用继承？&quot;&gt;为什么不推荐使用继承？&lt;/h2&gt;
&lt;p&gt;继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。&lt;/p&gt;
&lt;p&gt;假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类 AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。&lt;/p&gt;
&lt;p&gt;我们知道，大部分鸟都会飞，那我们可不可以在 AbstractBird 抽象类中，定义一个 fly() 方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有 fly() 方法的父类，那鸵鸟就具有“飞”这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly() 方法，让它抛出 UnSupportedMethodException 异常不就可以了吗？具体的代码实现如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class AbstractBird {
  //...省略其他属性和方法...
  public void fly() { //... }
}

public class Ostrich extends AbstractBird { //鸵鸟
  //...省略其他属性和方法...
  public void fly() {
    throw new UnSupportedMethodException(&quot;I can't fly.'&quot;);
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写 fly() 方法，抛出异常。这样的设计，一方面，徒增了编码的工作量；另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。&lt;/p&gt;
&lt;p&gt;可能又会说，那我们再通过 AbstractBird 类派生出两个更加细分的抽象类：会飞的鸟类 AbstractFlyableBird 和不会飞的鸟类 AbstractUnFlyableBird，让麻雀、乌鸦这些会飞的鸟都继承 AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承 AbstractUnFlyableBird 类，不就可以了吗？具体的继承关系如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7EROo10OA1p7VMdhEKYu2WFeEw6AiaPXD9geTYcy7emibIuEBuJlROibrhwt2jnib2bicrGWaibA9icLgYUa9akvBz9ag/0?wx_fmt=jpeg&quot; alt=&quot;鸟类继承&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，继承关系变成了三层。不过，整体上来讲，目前的继承关系还比较简单，层次比较浅，也算是一种可以接受的设计思路。我们再继续加点难度。在刚刚这个场景中，我们只关注“鸟会不会飞”，但如果我们还关注“鸟会不会叫”，那这个时候，我们又该如何设计类之间的继承关系呢？&lt;/p&gt;
&lt;p&gt;是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7EROo10OA1p7VMdhEKYu2WFeEw6AiaPXD1YbZhSbn5mg45E53e4qhFD5SMaQyUE3I6CPcRVib6hRPD4YvwFibpURg/0?wx_fmt=jpeg&quot; alt=&quot;鸟类双重继承&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果我们还需要考虑“是否会下蛋”这样一个行为，那估计就要组合爆炸了。类的继承层次会越来越深、继承关系会越来越复杂。而这种层次很深、很复杂的继承关系，一方面，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。另一方面，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。&lt;/p&gt;
&lt;p&gt;总之，继承最大的问题就在于：继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。这也是为什么我们不推荐使用继承。那刚刚例子中继承存在的问题，我们又该如何来解决呢？你可以先自己思考一下，再听我下面的讲解。&lt;/p&gt;
&lt;h2 id=&quot;组合相比继承有哪些优势？&quot;&gt;组合相比继承有哪些优势？&lt;/h2&gt;
&lt;p&gt;实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。&lt;/p&gt;
&lt;p&gt;我们前面讲到接口的时候说过，接口表示具有某种行为特性。针对“会飞”这样一个行为特性，我们可以定义一个 Flyable 接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义 Tweetable 接口、EggLayable 接口。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public interface Flyable {
  void fly();
}
public interface Tweetable {
  void tweet();
}
public interface EggLayable {
  void layEgg();
}
public class Ostrich implements Tweetable, EggLayable {//鸵鸟
  //... 省略其他属性和方法...
  @Override
  public void tweet() { //... }
  @Override
  public void layEgg() { //... }
}
public class Sparrow impelents Flayable, Tweetable, EggLayable {//麻雀
  //... 省略其他属性和方法...
  @Override
  public void fly() { //... }
  @Override
  public void tweet() { //... }
  @Override
  public void layEgg() { //... }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不过，我们知道，接口只声明方法，不定义实现。也就是说，每个会下蛋的鸟都要实现一遍 layEgg() 方法，并且实现逻辑是一样的，这就会导致代码重复的问题。那这个问题又该如何解决呢？&lt;/p&gt;
&lt;p&gt;我们可以针对三个接口再定义三个实现类，它们分别是：实现了 fly() 方法的 FlyAbility 类、实现了 tweet() 方法的 TweetAbility 类、实现了 layEgg() 方法的 EggLayAbility 类。然后，通过组合和委托技术来消除代码重复。具体的代码实现如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public interface Flyable {
  void fly()；
}
public class FlyAbility implements Flyable {
  @Override
  public void fly() { //... }
}
//省略Tweetable/TweetAbility/EggLayable/EggLayAbility

public class Ostrich implements Tweetable, EggLayable {//鸵鸟
  private TweetAbility tweetAbility = new TweetAbility(); //组合
  private EggLayAbility eggLayAbility = new EggLayAbility(); //组合
  //... 省略其他属性和方法...
  @Override
  public void tweet() {
    tweetAbility.tweet(); // 委托
  }
  @Override
  public void layEgg() {
    eggLayAbility.layEgg(); // 委托
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们知道继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如 is-a 关系，我们可以通过组合和接口的 has-a 关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。&lt;/p&gt;
&lt;h2 id=&quot;如何判断该用组合还是继承？&quot;&gt;如何判断该用组合还是继承？&lt;/h2&gt;
&lt;p&gt;尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。从上面的例子来看，继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。所以，在实际的项目开发中，我们还是要根据具体的情况，来具体选择该用继承还是组合。&lt;/p&gt;
&lt;p&gt;如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。&lt;/p&gt;
&lt;p&gt;除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。&lt;/p&gt;
&lt;p&gt;前面我们讲到继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A 类和 B 类并不一定具有继承关系。比如，Crawler 类和 PageAnalyzer 类，它们都用到了 URL 拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现 Crawler 类和 PageAnalyzer 类继承同一个父类，而父类中定义的却只是 URL 相关的操作，会觉得这个代码写得莫名其妙，理解不了。这个时候，使用组合就更加合理、更加灵活。具体的代码实现如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class Url {
  //...省略属性和方法
}

public class Crawler {
  private Url url; // 组合
  public Crawler() {
    this.url = new Url();
  }
  //...
}

public class PageAnalyzer {
  private Url url; // 组合
  public PageAnalyzer() {
    this.url = new Url();
  }
  //..
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中 FeignClient 是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的 encode() 函数。这个时候，我们只能采用继承来实现了。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class FeignClient { // feighn client框架代码
  //...省略其他代码...
  public void encode(String url) { //... }
}

public void demofunction(FeignClient feignClient) {
  //...
  feignClient.encode(url);
  //...
}

public class CustomizedFeignClient extends FeignClient {
  @Override
  public void encode(String url) { //...重写encode的实现...}
}

// 调用
FeignClient client = new CustomizedFeignClient();
demofunction(client);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;尽管有些人说，要杜绝继承，100% 用组合代替继承，但是我的观点没那么极端！之所以“多用组合少用继承”这个口号喊得这么响，只是因为，长期以来，我们过度使用继承。还是那句话，组合并不完美，继承也不是一无是处。只要我们控制好它们的副作用、发挥它们各自的优势，在不同的场合下，恰当地选择使用继承还是组合，这才是我们所追求的境界。&lt;/p&gt;
&lt;h2 id=&quot;重点回顾&quot;&gt;重点回顾&lt;/h2&gt;
&lt;h3 id=&quot;为什么不推荐使用继承？-2&quot;&gt;为什么不推荐使用继承？&lt;/h3&gt;
&lt;p&gt;继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。在这种情况下，我们应该尽量少用，甚至不用继承。&lt;/p&gt;
&lt;h3 id=&quot;组合相比继承有哪些优势？-2&quot;&gt;组合相比继承有哪些优势？&lt;/h3&gt;
&lt;p&gt;继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过组合、接口、委托三个技术手段来达成。除此之外，利用组合还能解决层次过深、过复杂的继承关系影响代码可维护性的问题。&lt;/p&gt;
&lt;h3 id=&quot;如何判断该用组合还是继承？-2&quot;&gt;如何判断该用组合还是继承？&lt;/h3&gt;
&lt;p&gt;尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。在实际的项目开发中，我们还是要根据具体的情况，来选择该用继承还是组合。如果类之间的继承结构稳定，层次比较浅，关系不复杂，我们就可以大胆地使用继承。反之，我们就尽量使用组合来替代继承。除此之外，还有一些设计模式、特殊的应用场景，会固定使用继承或者组合。&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 13 Jun 2020 08:21:00 +0000</pubDate>
<dc:creator>IT文艺男</dc:creator>
<og:description>在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/appsucc/p/13117618.html</dc:identifier>
</item>
<item>
<title>（数据科学学习手札87）利用adjustText解决matplotlib文字标签遮挡问题 - 费弗里</title>
<link>http://www.cnblogs.com/feffery/p/13072364.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feffery/p/13072364.html</guid>
<description>&lt;blockquote readability=&quot;3.196261682243&quot;&gt;
&lt;p&gt;本文示例代码、数据已上传至我的&lt;code&gt;Github&lt;/code&gt;仓库&lt;a href=&quot;https://github.com/CNFeffery/DataScienceStudyNotes&quot;&gt;https://github.com/CNFeffery/DataScienceStudyNotes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　在进行数据可视化时我们常常需要在可视化作品上进行一些&lt;strong&gt;文字标注&lt;/strong&gt;，譬如对散点图我们可以将每个散点对应的属性信息标注在每个散点旁边，但随着散点量的增多，或图像上的某个区域&lt;strong&gt;聚集&lt;/strong&gt;了较多的散点时，叠加上的文字标注会挤在一起相互叠置，出现如图1所示的情况：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1344061/202006/1344061-20200613154819425-425505348.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;span&gt;图1&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;　　出现这种情况非常影响数据可视化作品的呈现效果，而我们下面要介绍的&lt;code&gt;adjustText&lt;/code&gt;是一个辅助&lt;code&gt;matplotlib&lt;/code&gt;所绘制的图像自动调整文字位置以缓解遮挡现象的库，其灵感来源于&lt;code&gt;R&lt;/code&gt;中非常著名的辅助&lt;code&gt;ggplot2&lt;/code&gt;解决文字遮挡问题的&lt;code&gt;ggrepel&lt;/code&gt;：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1344061/202006/1344061-20200613154821935-622730638.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;span&gt;图2&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;　　它通过算法迭代，在一轮轮的迭代过程中逐渐消除文字遮挡现象：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1344061/202006/1344061-20200613154824360-1927239620.gif&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;span&gt;图3&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;　　下面我们就来学习如何使用&lt;code&gt;adjustText&lt;/code&gt;解决&lt;code&gt;matplotlib&lt;/code&gt;图像文字遮挡问题。&lt;/p&gt;

&lt;h2 id=&quot;21-从一个简单的例子出发&quot;&gt;2.1 从一个简单的例子出发&lt;/h2&gt;
&lt;p&gt;　　使用&lt;code&gt;pip install adjustText&lt;/code&gt;或&lt;code&gt;conda install -c conda-forge adjusttext&lt;/code&gt; 来安装&lt;code&gt;adjustText&lt;/code&gt;。安装成功之后，首先生成随机示例数据以方便之后的演示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Python&quot;&gt;import matplotlib.pyplot as plt
from adjustText import adjust_text
import numpy as np

#解决中文显示问题
plt.rcParams['font.sans-serif'] = ['SimHei']

seed = np.random.RandomState(42) # 固定随机数水平
x, y = seed.uniform(0, 1, [2, 100]) # 产生固定的均匀分布随机数
texts = [f'文字{i}' for i in range(x.__len__())]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　接着我们先不使用&lt;code&gt;adjustText&lt;/code&gt;调整图像，直接绘制出原始的&lt;strong&gt;散点&lt;/strong&gt;+&lt;strong&gt;文字标签&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Python&quot;&gt;fig, ax = plt.subplots(figsize=(8, 8))
ax.scatter(x, y, c='SeaGreen', s=10) # 绘制散点

# 绘制所有点对应的文字标签
for x_, y_, text in zip(x, y, texts):
    plt.text(x_, y_, text, fontsize=12)

# 美观起见隐藏顶部与右侧边框线
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

fig.savefig('图4.png', dpi=300, bbox_inches='tight', pad_inches=0) # 保存图像
&lt;/code&gt;
&lt;/pre&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1344061/202006/1344061-20200613154826991-992897325.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;span&gt;图4&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;　　可以看到，在通常的情况下，散点聚集的区域内文字标签非常容易重叠在一起，接下来我们使用&lt;code&gt;adjustText&lt;/code&gt;的基础功能来消除文字重叠现象：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1344061/202006/1344061-20200613154829788-375572037.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;span&gt;图5&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;　　这时可以看到与图4相比，图5中的所有文字都没有出现彼此重叠现象，&lt;code&gt;adjustText&lt;/code&gt;帮助我们自动微调了文字的摆放位置，并且距离原始散点偏移较大的文字还贴心的加上了连接线，至此，我们就初探了&lt;code&gt;adjustText&lt;/code&gt;的强大功能，接下来我们来学习&lt;code&gt;adjustText&lt;/code&gt;的更多功能。&lt;/p&gt;
&lt;h2 id=&quot;22-adjust_text的用法&quot;&gt;2.2 adjust_text的用法&lt;/h2&gt;
&lt;p&gt;　　&lt;code&gt;adjustText&lt;/code&gt;中的核心功能都通过调用函数&lt;code&gt;adjust_text&lt;/code&gt;来实现，其核心参数如下：&lt;/p&gt;
&lt;blockquote readability=&quot;26&quot;&gt;
&lt;p&gt;&lt;strong&gt;texts&lt;/strong&gt;：List型，每个元素都是表示单个文字标签对应的&lt;code&gt;matplotlib.text.Text&lt;/code&gt;对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ax&lt;/strong&gt;：绘制文字标签的目标axe对象，默认为最近一次的axe对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lim&lt;/strong&gt;：int型，控制迭代调整文本标签位置的次数，默认为500次&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;precision&lt;/strong&gt;：float型，用于决定迭代停止的精度，默认为0.01，即所有标签相互遮挡部分的长和宽占所有标签自身长宽之和的比例，&lt;code&gt;addjust_text&lt;/code&gt;会在精度达到&lt;strong&gt;precision&lt;/strong&gt;和迭代次数超过&lt;strong&gt;lim&lt;/strong&gt;这两个条件中至少有一个满足时停止迭代&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;only_move&lt;/strong&gt;：字典型，用于指定文本标签与不同对象发生遮挡时的位移策略，键有&lt;code&gt;'points'&lt;/code&gt;、&lt;code&gt;'text'&lt;/code&gt;和&lt;code&gt;'objects'&lt;/code&gt;，对应的值可选&lt;code&gt;'xy'&lt;/code&gt;、&lt;code&gt;'x'&lt;/code&gt;、&lt;code&gt;'y'&lt;/code&gt;，分别代表竖直和水平方向均调整、只调整水平方向以及只调整竖直方向&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arrowprops&lt;/strong&gt;：字典型，用于设置偏移后的文字标签与原始位置之间的连线样式，下文会作具体演示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;save_steps&lt;/strong&gt;：bool型，用于决定是否保存记录迭代过程中各轮的帧图像，默认为False&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;save_prefix&lt;/strong&gt;：str型，当&lt;strong&gt;save_steps&lt;/strong&gt;设置为True时，用于指定中间帧保存的路径，默认为''，即当前工作路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　下面我们来演示一下这些参数的使用效果，首先我们来看看&lt;code&gt;only_move&lt;/code&gt;参数的效果，在图6的基础上，我们设置&lt;code&gt;only_move={'text': 'x'}&lt;/code&gt;，即当文字出现遮挡时，只在水平方向上进行偏移，这里将&lt;strong&gt;save_steps&lt;/strong&gt;设置为True以直观地查看偏移过程：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Python&quot;&gt;fig, ax = plt.subplots(figsize=(8, 8))
ax.scatter(x, y, c='SeaGreen', s=10) # 绘制散点

# 使用adjustText修正文字重叠现象
new_texts = [plt.text(x_, y_, text, fontsize=12) for x_, y_, text in zip(x, y, texts)]
adjust_text(new_texts, 
            only_move={'text': 'x'},
            arrowprops=dict(arrowstyle='-', color='grey'),
            save_steps=True)

# 美观起见隐藏顶部与右侧边框线
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
&lt;/code&gt;
&lt;/pre&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1344061/202006/1344061-20200613154833486-1766891960.gif&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;span&gt;图6&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;　　可以看到在整个迭代微调的过程中，每个标签只在水平方向发生位移，你可以根据自己作图的实际需要灵活调整这里的平移策略。接下来我们来看看&lt;code&gt;arrowprops&lt;/code&gt;对可视化结果的影响，在之前的例子里我们设置了&lt;code&gt;arrowprops={arrowstyle='-', color='grey'}&lt;/code&gt;，其中&lt;code&gt;arrowstyle&lt;/code&gt;用于设定连线的线型，&lt;code&gt;color&lt;/code&gt;不用多说，接下来我们添加参数&lt;code&gt;lw&lt;/code&gt;用于控制线的宽度，并对线型与颜色进行修改：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Python&quot;&gt;fig, ax = plt.subplots(figsize=(8, 8))
ax.scatter(x, y, c='SeaGreen', s=10) # 绘制散点

# 使用adjustText修正文字重叠现象
new_texts = [plt.text(x_, y_, text, fontsize=12) for x_, y_, text in zip(x, y, texts)]
adjust_text(new_texts, 
            arrowprops=dict(arrowstyle='-&amp;gt;', 
                            color='red',
                            lw=1))

# 美观起见隐藏顶部与右侧边框线
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

fig.savefig('图7.png', dpi=300, bbox_inches='tight', pad_inches=0) # 保存图像
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　这时连线随着我们自定义的设置改变到相应的样式：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1344061/202006/1344061-20200613154837617-1234815027.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;span&gt;图7&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;　　有关&lt;code&gt;adjustText&lt;/code&gt;的更多参数设置信息和示例可以去官方文档（&lt;a href=&quot;https://adjusttext.readthedocs.io/en/latest/&quot;&gt;https://adjusttext.readthedocs.io/en/latest/&lt;/a&gt; ）查看。&lt;/p&gt;
&lt;p&gt;　　以上就是本文的全部内容，如有疑问欢迎在评论区与我们讨论。&lt;/p&gt;
</description>
<pubDate>Sat, 13 Jun 2020 08:05:00 +0000</pubDate>
<dc:creator>费弗里</dc:creator>
<og:description>本文示例代码、数据已上传至我的Github仓库https://github.com/CNFeffery/DataScienceStudyNotes 1 简介 在进行数据可视化时我们常常需要在可视化作品</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/feffery/p/13072364.html</dc:identifier>
</item>
<item>
<title>通过Nginx、Consul、Upsync实现动态负载均衡和服务平滑发布 - throwable</title>
<link>http://www.cnblogs.com/throwable/p/13113620.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/throwable/p/13113620.html</guid>
<description>&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;前段时间顺利地把整个服务集群和中间件全部从&lt;code&gt;UCloud&lt;/code&gt;迁移到阿里云，笔者担任了架构和半个运维的角色。这里详细记录一下通过&lt;code&gt;Nginx&lt;/code&gt;、&lt;code&gt;Consul&lt;/code&gt;、&lt;code&gt;Upsync&lt;/code&gt;实现动态负载均衡和服务平滑发布的核心知识点和操作步骤，整个体系已经在生产环境中平稳运行。编写本文使用的虚拟机系统为&lt;code&gt;CentOS7.x&lt;/code&gt;，虚拟机的内网&lt;code&gt;IP&lt;/code&gt;为&lt;code&gt;192.168.56.200&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-1.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;动态负载均衡的基本原理&quot;&gt;动态负载均衡的基本原理&lt;/h2&gt;
&lt;p&gt;一般会通过&lt;code&gt;upstream&lt;/code&gt;配置&lt;code&gt;Nginx&lt;/code&gt;的反向代理池：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;http {
    
    upstream upstream_server{
        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
    }

    server {
        listen       80;
        server_name localhost;

        location / {
            proxy_pass http://upstream_server;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在假如&lt;code&gt;8081&lt;/code&gt;端口的服务实例挂了需要剔除，那么需要修改&lt;code&gt;upstream&lt;/code&gt;为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;upstream upstream_server{
    # 添加down标记该端口的服务实例不参与负载
    server 127.0.0.1:8081 down;
    server 127.0.0.1:8082;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并且通过&lt;code&gt;nginx -s reload&lt;/code&gt;重新加载配置，该&lt;code&gt;upstream&lt;/code&gt;配置才会生效。我们知道，服务发布时候重启过程中是处于不可用状态，正确的服务发布过程应该是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;把该服务从对应的&lt;code&gt;upstream&lt;/code&gt;剔除，一般是置为&lt;code&gt;down&lt;/code&gt;，告知&lt;code&gt;Nginx&lt;/code&gt;服务&lt;code&gt;upstream&lt;/code&gt;配置变更，需要通过&lt;code&gt;nginx -s reload&lt;/code&gt;进行重载。&lt;/li&gt;
&lt;li&gt;服务构建、部署和重启。&lt;/li&gt;
&lt;li&gt;通过探活脚本感知服务对应的端口能够访问，把该服务从对应的&lt;code&gt;upstream&lt;/code&gt;中拉起，一般是把&lt;code&gt;down&lt;/code&gt;去掉，告知&lt;code&gt;Nginx&lt;/code&gt;服务&lt;code&gt;upstream&lt;/code&gt;配置变更，需要通过&lt;code&gt;nginx -s reload&lt;/code&gt;进行重载。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的步骤一则涉及到&lt;code&gt;upstream&lt;/code&gt;配置，二则需要&lt;code&gt;Nginx&lt;/code&gt;重新加载配置（&lt;code&gt;nginx -s reload&lt;/code&gt;），显得比较笨重，在高负载的情况下重新启动&lt;code&gt;Nginx&lt;/code&gt;并重新加载配置会进一步增加系统的负载并可能暂时降低性能。&lt;/p&gt;
&lt;p&gt;所以，可以考虑使用分布式缓存把&lt;code&gt;upstream&lt;/code&gt;配置存放在缓存服务中，然后&lt;code&gt;Nginx&lt;/code&gt;直接从这个缓存服务中读取&lt;code&gt;upstream&lt;/code&gt;的配置，这样如果有&lt;code&gt;upstream&lt;/code&gt;的配置变更就可以直接修改缓存服务中对应的属性，而&lt;code&gt;Nginx&lt;/code&gt;服务也不需要&lt;code&gt;reload&lt;/code&gt;。在实战中，这里提到的缓存服务就选用了&lt;code&gt;Consul&lt;/code&gt;，&lt;code&gt;Nginx&lt;/code&gt;读取缓存中的配置属性选用了新浪微博提供的&lt;code&gt;Nginx&lt;/code&gt;的&lt;code&gt;C&lt;/code&gt;语言模块&lt;code&gt;nginx-upsync-module&lt;/code&gt;。示意图大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;consul安装和集群搭建&quot;&gt;Consul安装和集群搭建&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Consul&lt;/code&gt;是&lt;code&gt;Hashicorp&lt;/code&gt;公司的一个使用&lt;code&gt;Golang&lt;/code&gt;开发的开源项目，它是一个用于服务发现和配置的工具，具备分布式和高度可用特性，并且具有极高的可伸缩性。&lt;code&gt;Consul&lt;/code&gt;主要提供下面的功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;服务发现。&lt;/li&gt;
&lt;li&gt;运行状况检查。&lt;/li&gt;
&lt;li&gt;服务分块/服务网格（&lt;code&gt;Service Segmentation/Service Mesh&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;密钥/值存储。&lt;/li&gt;
&lt;li&gt;多数据中心。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面是安装过程：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;mkdir /data/consul
cd /data/consul
wget https://releases.hashicorp.com/consul/1.7.3/consul_1.7.3_linux_amd64.zip
# 注意解压后只有一个consul执行文件
unzip consul_1.7.3_linux_amd64.zip
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解压完成后，使用命令&lt;code&gt;nohup /data/consul/consul agent -server -data-dir=/tmp/consul -bootstrap -ui -advertise=192.168.56.200 -client=192.168.56.200 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;即可后台启动单机的&lt;code&gt;Consul&lt;/code&gt;服务。启动&lt;code&gt;Consul&lt;/code&gt;实例后，访问&lt;code&gt;http://192.168.56.200:8500/&lt;/code&gt;即可打开其后台管理&lt;code&gt;UI&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面基于单台虚拟机搭建一个伪集群，&lt;strong&gt;关于集群的一些配置属性的含义和命令参数的解释暂时不进行展开&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# 创建集群数据目录
mkdir /data/consul/node1 /data/consul/node2 /data/consul/node3
# 创建集群日志目录
mkdir /data/consul/node1/logs /data/consul/node2/logs /data/consul/node3/logs
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;/data/consul/node1&lt;/code&gt;目录添加&lt;code&gt;consul_conf.json&lt;/code&gt;文件，内容如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;{
  &quot;datacenter&quot;: &quot;es8-dc&quot;,
  &quot;data_dir&quot;: &quot;/data/consul/node1&quot;,
  &quot;log_file&quot;: &quot;/data/consul/node1/consul.log&quot;,
  &quot;log_level&quot;: &quot;INFO&quot;,
  &quot;server&quot;: true,
  &quot;node_name&quot;: &quot;node1&quot;,
  &quot;ui&quot;: true,
  &quot;bind_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;client_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;advertise_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;bootstrap_expect&quot;: 3,
  &quot;ports&quot;:{
    &quot;http&quot;: 8510,
    &quot;dns&quot;: 8610,
    &quot;server&quot;: 8310,
    &quot;serf_lan&quot;: 8311,
    &quot;serf_wan&quot;: 8312
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;/data/consul/node2&lt;/code&gt;目录添加&lt;code&gt;consul_conf.json&lt;/code&gt;文件，内容如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;{
  &quot;datacenter&quot;: &quot;es8-dc&quot;,
  &quot;data_dir&quot;: &quot;/data/consul/node2&quot;,
  &quot;log_file&quot;: &quot;/data/consul/node2/consul.log&quot;,
  &quot;log_level&quot;: &quot;INFO&quot;,
  &quot;server&quot;: true,
  &quot;node_name&quot;: &quot;node2&quot;,
  &quot;ui&quot;: true,
  &quot;bind_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;client_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;advertise_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;bootstrap_expect&quot;: 3,
  &quot;ports&quot;:{
    &quot;http&quot;: 8520,
    &quot;dns&quot;: 8620,
    &quot;server&quot;: 8320,
    &quot;serf_lan&quot;: 8321,
    &quot;serf_wan&quot;: 8322
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;/data/consul/node3&lt;/code&gt;目录添加&lt;code&gt;consul_conf.json&lt;/code&gt;文件，内容如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;{
  &quot;datacenter&quot;: &quot;es8-dc&quot;,
  &quot;data_dir&quot;: &quot;/data/consul/node3&quot;,
  &quot;log_file&quot;: &quot;/data/consul/node3/consul.log&quot;,
  &quot;log_level&quot;: &quot;INFO&quot;,
  &quot;server&quot;: true,
  &quot;node_name&quot;: &quot;node3&quot;,
  &quot;ui&quot;: true,
  &quot;bind_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;client_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;advertise_addr&quot;: &quot;192.168.56.200&quot;,
  &quot;bootstrap_expect&quot;: 3,
  &quot;ports&quot;:{
    &quot;http&quot;: 8530,
    &quot;dns&quot;: 8630,
    &quot;server&quot;: 8330,
    &quot;serf_lan&quot;: 8331,
    &quot;serf_wan&quot;: 8332
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建一个集群启动脚本：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cd /data/consul
touch service.sh
# /data/consul/service.sh内容如下：
nohup /data/consul/consul agent -config-file=/data/consul/node1/consul_conf.json &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
sleep 10
nohup /data/consul/consul agent -config-file=/data/consul/node2/consul_conf.json -retry-join=192.168.56.200:8311 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
sleep 10
nohup /data/consul/consul agent -config-file=/data/consul/node3/consul_conf.json -retry-join=192.168.56.200:8311 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果集群启动成功，观察节点1中的日志如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过节点1的&lt;code&gt;HTTP&lt;/code&gt;端点访问后台管理页面如下（可见当前的节点1被标记了一颗红色的星星，说明当前节点1是&lt;code&gt;Leader&lt;/code&gt;节点）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-5.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，&lt;code&gt;Consul&lt;/code&gt;单机伪集群搭建完成（其实分布式集群的搭建大同小异，注意集群节点所在的机器需要开放使用到的端口的访问权限），由于&lt;code&gt;Consul&lt;/code&gt;使用&lt;code&gt;Raft&lt;/code&gt;作为共识算法，该算法是&lt;strong&gt;强领导者模型，也就是只有&lt;code&gt;Leader&lt;/code&gt;节点可以进行写操作&lt;/strong&gt;，因此接下来的操作都需要使用节点1的&lt;code&gt;HTTP&lt;/code&gt;端点，就是&lt;code&gt;192.168.56.200:8510&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;重点笔记：如果&lt;code&gt;Consul&lt;/code&gt;集群重启或者重新选举，&lt;code&gt;Leader&lt;/code&gt;节点有可能发生更变，外部使用的时候建议把&lt;code&gt;Leader&lt;/code&gt;节点的&lt;code&gt;HTTP&lt;/code&gt;端点抽离到可动态更新的配置项中或者动态获取&lt;code&gt;Leader&lt;/code&gt;节点的&lt;code&gt;IP&lt;/code&gt;和端口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;nginx编译安装&quot;&gt;Nginx编译安装&lt;/h2&gt;
&lt;p&gt;直接从官网下载二级制的安装包并且解压：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;mkdir /data/nginx
cd /data/nginx
wget http://nginx.org/download/nginx-1.18.0.tar.gz
tar -zxvf nginx-1.18.0.tar.gz
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解压后的所有源文件在&lt;code&gt;/data/nginx/nginx-1.18.0&lt;/code&gt;目录下，编译之前需要安装&lt;code&gt;pcre-devel&lt;/code&gt;、&lt;code&gt;zlib-devel&lt;/code&gt;依赖：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;yum -y install pcre-devel
yum install -y zlib-devel
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译命令如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cd /data/nginx/nginx-1.18.0
./configure --prefix=/data/nginx
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果&lt;code&gt;./configure&lt;/code&gt;执行过程不出现问题，那么结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着执行&lt;code&gt;make&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cd /data/nginx/nginx-1.18.0
make
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果&lt;code&gt;make&lt;/code&gt;执行过程不出现问题，那么结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-7.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，如果是首次安装，可以执行&lt;code&gt;make install&lt;/code&gt;进行安装（实际上只是拷贝编译好的文件到&lt;code&gt;--prefix&lt;/code&gt;指定的路径下）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cd /data/nginx/nginx-1.18.0
make install
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt;执行完毕后，&lt;code&gt;/data/nginx&lt;/code&gt;目录下新增了数个文件夹：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-9.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;Nginx&lt;/code&gt;启动程序在&lt;code&gt;sbin&lt;/code&gt;目录下，&lt;code&gt;logs&lt;/code&gt;是其日志目录，&lt;code&gt;conf&lt;/code&gt;是其配置文件所在的目录。尝试启动一下&lt;code&gt;Nginx&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;/data/nginx/sbin/nginx
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后访问虚拟机的&lt;code&gt;80&lt;/code&gt;端口，从而验证&lt;code&gt;Nginx&lt;/code&gt;已经正常启动：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-10.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;通过nginx-upsync-module和nginx_upstream_check_module模块进行编译&quot;&gt;通过nginx-upsync-module和nginx_upstream_check_module模块进行编译&lt;/h3&gt;
&lt;p&gt;上面做了一个&lt;code&gt;Nginx&lt;/code&gt;极简的编译过程，实际上，在做动态负载均衡的时候需要添加&lt;code&gt;nginx-upsync-module&lt;/code&gt;和&lt;code&gt;nginx_upstream_check_module&lt;/code&gt;两个模块，两个模块必须提前下载源码，并且在编译&lt;code&gt;Nginx&lt;/code&gt;过程中需要指定两个模块的物理路径：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;mkdir /data/nginx/modules
cd /data/nginx/modules
# 这里是Github的资源，不能用wget下载，具体是：
nginx-upsync-module需要下载release里面的最新版本：v2.1.2
nginx_upstream_check_module需要下载整个项目的源码，主要用到靠近当前版本的补丁，使用patch命令进行补丁升级
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-11.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-12.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下载完成后分别（解压）放在&lt;code&gt;/data/nginx/modules&lt;/code&gt;目录下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;ll /data/nginx/modules
drwxr-xr-x. 6 root root   4096 Nov  3  2019 nginx_upstream_check_module-master
drwxrwxr-x. 5 root root     93 Dec 18 00:56 nginx-upsync-module-2.1.2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译前，还要先安装一些前置依赖组件：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;yum -y install libpcre3 libpcre3-dev ruby zlib1g-dev patch
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来开始编译安装&lt;code&gt;Nginx&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cd /data/nginx/nginx-1.18.0
patch -p1 &amp;lt; /data/nginx/modules/nginx_upstream_check_module-master/check_1.16.1+.patch
./configure --prefix=/data/nginx --add-module=/data/nginx/modules/nginx_upstream_check_module-master --add-module=/data/nginx/modules/nginx-upsync-module-2.1.2
make
make install
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的编译和安装过程无论怎么调整，都会出现部分依赖缺失导致&lt;code&gt;make&lt;/code&gt;异常，估计是这两个模块并不支持太高版本的&lt;code&gt;Nginx&lt;/code&gt;。（生产上用了一个版本比较低的&lt;code&gt;OpenResty&lt;/code&gt;，这里想复原一下使用相对新版本&lt;code&gt;Nginx&lt;/code&gt;的踩坑过程）于是尝试降级进行编译，下面是参考多个&lt;code&gt;Issue&lt;/code&gt;后得到的相对比较新的可用版本组合：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# 提前把/data/nginx下除了之前下载过的modules目录外的所有文件删除
cd /data/nginx
wget http://nginx.org/download/nginx-1.14.2.tar.gz
tar -zxvf nginx-1.14.2.tar.gz
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;开始编译安装：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cd /data/nginx/nginx-1.14.2
patch -p1 &amp;lt; /data/nginx/modules/nginx_upstream_check_module-master/check_1.12.1+.patch
./configure --prefix=/data/nginx --add-module=/data/nginx/modules/nginx_upstream_check_module-master --add-module=/data/nginx/modules/nginx-upsync-module-2.1.2
make &amp;amp;&amp;amp; make install
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装完成后通过&lt;code&gt;/data/nginx/sbin/nginx&lt;/code&gt;命令启动即可。&lt;/p&gt;
&lt;h3 id=&quot;启用动态负载均和健康检查&quot;&gt;启用动态负载均和健康检查&lt;/h3&gt;
&lt;p&gt;首先编写一个简易的&lt;code&gt;HTTP&lt;/code&gt;服务，因为&lt;code&gt;Java&lt;/code&gt;比较重量级，这里选用&lt;code&gt;Golang&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;flag&quot;
        &quot;fmt&quot;
        &quot;net/http&quot;
)

func main() {
    var host string
    var port int
    flag.StringVar(&amp;amp;host, &quot;h&quot;, &quot;127.0.0.1&quot;, &quot;IP地址&quot;)
    flag.IntVar(&amp;amp;port, &quot;p&quot;, 9000, &quot;端口&quot;)
    flag.Parse()
    address := fmt.Sprintf(&quot;%s:%d&quot;, host, port)
    http.HandleFunc(&quot;/ping&quot;, func(writer http.ResponseWriter, request *http.Request) {
        _, _ = fmt.Fprintln(writer, fmt.Sprintf(&quot;%s by %s&quot;, &quot;pong&quot;, address))
    })
    http.HandleFunc(&quot;/&quot;, func(writer http.ResponseWriter, request *http.Request) {
        _, _ = fmt.Fprintln(writer, fmt.Sprintf(&quot;%s by %s&quot;, &quot;hello world&quot;, address))
    })
    err := http.ListenAndServe(address, nil)
    if nil != err {
        panic(err)
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cd src
set GOARCH=amd64
set GOOS=linux
go build -o ../bin/app app.go
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样子在项目的&lt;code&gt;bin&lt;/code&gt;目录下就得到一个&lt;code&gt;Linux&lt;/code&gt;下可执行的二级制文件&lt;code&gt;app&lt;/code&gt;，分别在端口&lt;code&gt;9000&lt;/code&gt;和&lt;code&gt;9001&lt;/code&gt;启动两个服务实例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# 记得先给app文件的执行权限chmod 773 app
nohup ./app -p 9000 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
nohup ./app -p 9001 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-14.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改一下&lt;code&gt;Nginx&lt;/code&gt;的配置，添加&lt;code&gt;upstream&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# /data/nginx/conf/nginx.conf部分片段
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    upstream app {
       # 这里是consul的leader节点的HTTP端点
       upsync 192.168.56.200:8510/v1/kv/upstreams/app/ upsync_timeout=6m upsync_interval=500ms upsync_type=consul strong_dependency=off;
       # consul访问不了的时候的备用配置
       upsync_dump_path /data/nginx/app.conf;
       # 这里是为了兼容Nginx的语法检查
       include /data/nginx/app.conf;
       # 下面三个配置是健康检查的配置
       check interval=1000 rise=2 fall=2 timeout=3000 type=http default_down=false;
       check_http_send &quot;HEAD / HTTP/1.0\r\n\r\n&quot;;
       check_http_expect_alive http_2xx http_3xx;
    }

    server {
        listen       80;
        server_name  localhost;
        location / {
            proxy_pass http://app;
        }
        # 健康检查 - 查看负载均衡的列表
        location /upstream_list {
            upstream_show;
        }
        # 健康检查 - 查看负载均衡的状态
        location /upstream_status {
            check_status;
            access_log off;
        }
    }
}

# /data/nginx/app.conf
server 127.0.0.1:9000 weight=1 fail_timeout=10 max_fails=3;
server 127.0.0.1:9001 weight=1 fail_timeout=10 max_fails=3;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;手动添加两个&lt;code&gt;HTTP&lt;/code&gt;服务进去&lt;code&gt;Consul&lt;/code&gt;中：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;curl -X PUT -d '{&quot;weight&quot;:1, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10}' http://192.168.56.200:8510/v1/kv/upstreams/app/127.0.0.1:9000
curl -X PUT -d '{&quot;weight&quot;:1, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10}' http://192.168.56.200:8510/v1/kv/upstreams/app/127.0.0.1:9001
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-15.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后重新加载&lt;code&gt;Nginx&lt;/code&gt;的配置即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-16.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;动态负载均衡测试&quot;&gt;动态负载均衡测试&lt;/h2&gt;
&lt;p&gt;前置工作准备好，现在尝试动态负载均衡，先从&lt;code&gt;Consul&lt;/code&gt;下线&lt;code&gt;9000&lt;/code&gt;端口的服务实例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;curl -X PUT -d '{&quot;weight&quot;:1, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10, &quot;down&quot;:1}' http://192.168.56.200:8510/v1/kv/upstreams/app/127.0.0.1:9000
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-17.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可见负载均衡的列表中，&lt;code&gt;9000&lt;/code&gt;端口的服务实例已经置为&lt;code&gt;down&lt;/code&gt;，此时疯狂请求&lt;code&gt;http://192.168.56.200&lt;/code&gt;，只输出&lt;code&gt;hello world by 127.0.0.1:9001&lt;/code&gt;，可见&lt;code&gt;9000&lt;/code&gt;端口的服务实例已经不再参与负载。重新上线&lt;code&gt;9000&lt;/code&gt;端口的服务实例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;curl -X PUT -d '{&quot;weight&quot;:1, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10, &quot;down&quot;:0}' http://192.168.56.200:8510/v1/kv/upstreams/app/127.0.0.1:9000
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再疯狂请求&lt;code&gt;http://192.168.56.200&lt;/code&gt;，发现&lt;code&gt;hello world by 127.0.0.1:9000&lt;/code&gt;和&lt;code&gt;hello world by 127.0.0.1:9001&lt;/code&gt;交替输出。到此可以验证动态负载均衡是成功的。此时再测试一下服务健康监测，通过&lt;code&gt;kill -9&lt;/code&gt;随机杀掉其中一个服务实例，然后观察&lt;code&gt;/upstream_status&lt;/code&gt;端点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-18.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;疯狂请求&lt;code&gt;http://192.168.56.200&lt;/code&gt;，只输出&lt;code&gt;hello world by 127.0.0.1:9001&lt;/code&gt;，可见&lt;code&gt;9000&lt;/code&gt;端口的服务实例已经不再参与负载，但是查看&lt;code&gt;Consul&lt;/code&gt;中&lt;code&gt;9000&lt;/code&gt;端口的服务实例的配置，并没有标记为&lt;code&gt;down&lt;/code&gt;，可见是&lt;code&gt;nginx_upstream_check_module&lt;/code&gt;为我们过滤了异常的节点，让这些节点不再参与负载。&lt;/p&gt;
&lt;p&gt;总的来说，这个相对完善的动态负载均衡功能需要&lt;code&gt;nginx_upstream_check_module&lt;/code&gt;和&lt;code&gt;nginx-upsync-module&lt;/code&gt;共同协作才能完成。&lt;/p&gt;
&lt;h2 id=&quot;服务平滑发布&quot;&gt;服务平滑发布&lt;/h2&gt;
&lt;p&gt;服务平滑发布依赖于前面花大量时间分析的动态负载均衡功能。笔者所在的团队比较小，所以选用了阿里云的云效作为产研管理平台，通过里面的流水线功能实现了服务平滑发布，下面是其中一个服务的生产环境部署的流水线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-19.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实平滑发布和平台的关系不大，整体的步骤大概如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202006/n-c-u-20.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;步骤比较多，并且涉及到大量的&lt;code&gt;shell&lt;/code&gt;脚本，这里不把详细的脚本内容列出，简单列出一下每一步的操作（注意某些步骤之间可以插入合理的&lt;code&gt;sleep n&lt;/code&gt;保证前一步执行完毕）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;代码扫描、单元测试等等。&lt;/li&gt;
&lt;li&gt;代码构建，生成构建后的压缩包。&lt;/li&gt;
&lt;li&gt;压缩包上传到服务器&lt;code&gt;X&lt;/code&gt;中，解压到对应的目录。&lt;/li&gt;
&lt;li&gt;向&lt;code&gt;Consul&lt;/code&gt;发送指令，把当前发布的&lt;code&gt;X_IP:PORT&lt;/code&gt;的负载配置更新为&lt;code&gt;down=1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop&lt;/code&gt;服务&lt;code&gt;X_IP:PORT&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt;服务&lt;code&gt;X_IP:PORT&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;检查服务&lt;code&gt;X_IP:PORT&lt;/code&gt;的健康状态（可以设定一个时间周期例如120秒内每10秒检查一次），如果启动失败，则直接中断返回，确保还有另一个正常的旧节点参与负载，并且人工介入处理。&lt;/li&gt;
&lt;li&gt;向&lt;code&gt;Consul&lt;/code&gt;发送指令，把当前发布的&lt;code&gt;X_IP:PORT&lt;/code&gt;的负载配置更新为&lt;code&gt;down=0&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的流程是通过&lt;code&gt;hard code&lt;/code&gt;完成，对于不同的服务器，只需要添加一个发布流程节点并且改动一个&lt;code&gt;IP&lt;/code&gt;的占位符即可，不需要对&lt;code&gt;Nginx&lt;/code&gt;进行配置重新加载。笔者所在的平台流量不大，目前每个服务部署两个节点就能满足生产需要，试想一下，如果要实现动态扩容，应该怎么构建流水线？&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;服务平滑发布是&lt;code&gt;CI/CD&lt;/code&gt;中比较重要的一个环节，而动态负载均衡则是服务平滑发布的基础。虽然现在很多云平台都提供了十分便捷的持续集成工具，但是在使用这些工具和配置流程的时候，最好能够理解背后的基本原理，这样才能在工具不适用的时候或者出现问题的时时候，迅速地作出判断和响应。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;（本文完 c-7-d e-a-20200613 感谢广州某金融科技公司运维大佬昊哥提供的支持）&lt;/p&gt;
</description>
<pubDate>Sat, 13 Jun 2020 05:09:00 +0000</pubDate>
<dc:creator>throwable</dc:creator>
<og:description>前提 前段时间顺利地把整个服务集群和中间件全部从UCloud迁移到阿里云，笔者担任了架构和半个运维的角色。这里详细记录一下通过Nginx、Consul、Upsync实现动态负载均衡和服务平滑发布的核心</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/throwable/p/13113620.html</dc:identifier>
</item>
</channel>
</rss>