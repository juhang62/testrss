<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>使用webpack命令打包时，报错TypeError: Cannot read property 'presetToOptions' of undefined的解决办法 - 炸呼呼er</title>
<link>http://www.cnblogs.com/zhahuhu/p/11780576.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhahuhu/p/11780576.html</guid>
<description>&lt;p&gt;我只安装了webpack，没有安装webpack-cli，第一次输入webpack打包时，提示&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;One CLI for webpack must be installed. These are recommended choices, delivered as separate packages:
 - webpack-cli (https://github.com/webpack/webpack-cli)
   The original webpack full-featured CLI.
We will use &quot;npm&quot; to install the CLI via &quot;npm install -D&quot;.
Do you want to install 'webpack-cli' (yes/no): &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入yes后报错&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;Error: Cannot find module 'webpack-cli'
Require stack:
- C:\Users\Administrator\AppData\Roaming\npm\node_modules\webpack\bin\webpack.js
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:772:15)
    at Function.Module._load (internal/modules/cjs/loader.js:677:27)
    at Module.require (internal/modules/cjs/loader.js:830:19)
    at require (internal/modules/cjs/helpers.js:68:18)
    at C:\Users\Administrator\AppData\Roaming\npm\node_modules\webpack\bin\webpack.js:143:5
    at processTicksAndRejections (internal/process/task_queues.js:93:5) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    'C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\webpack\\bin\\webpack.js'
  ]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解决办法：输入命令npm install webpack-cli -g全局安装一下webpack-cli&lt;br/&gt;再次运行webpack命令打包，出现新错误&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;F:\myweb\alice\vue\vue-cms\node_modules\webpack-cli\bin\cli.js:137
                        const statsPresetToOptions = require(&quot;webpack&quot;).Stats.presetToOptions;
                                                                             ^

TypeError: Cannot read property 'presetToOptions' of undefined
    at processOptions (F:\myweb\alice\vue\vue-cms\node_modules\webpack-cli\bin\cli.js:137:57)
    at F:\myweb\alice\vue\vue-cms\node_modules\webpack-cli\bin\cli.js:364:3
    at Object.parse (F:\myweb\alice\vue\vue-cms\node_modules\webpack-cli\node_modules\yargs\yargs.js:567:18)
    at F:\myweb\alice\vue\vue-cms\node_modules\webpack-cli\bin\cli.js:49:8
    at Object.&amp;lt;anonymous&amp;gt; (F:\myweb\alice\vue\vue-cms\node_modules\webpack-cli\bin\cli.js:366:3)
    at Module._compile (internal/modules/cjs/loader.js:936:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)
    at Module.load (internal/modules/cjs/loader.js:790:32)
    at Function.Module._load (internal/modules/cjs/loader.js:703:12)
    at Module.require (internal/modules/cjs/loader.js:830:19)
    at require (internal/modules/cjs/helpers.js:68:18)
    at module.exports (C:\Users\Administrator\AppData\Roaming\npm\node_modules\webpack-cli\node_modules\import-local\index.js:16:66)
    at C:\Users\Administrator\AppData\Roaming\npm\node_modules\webpack-cli\bin\cli.js:15:6
    at Object.&amp;lt;anonymous&amp;gt; (C:\Users\Administrator\AppData\Roaming\npm\node_modules\webpack-cli\bin\cli.js:366:3)
    at Module._compile (internal/modules/cjs/loader.js:936:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)
    at Module.load (internal/modules/cjs/loader.js:790:32)
    at Function.Module._load (internal/modules/cjs/loader.js:703:12)
    at Module.require (internal/modules/cjs/loader.js:830:19)
    at require (internal/modules/cjs/helpers.js:68:18)
    at Object.&amp;lt;anonymous&amp;gt; (C:\Users\Administrator\AppData\Roaming\npm\node_modules\webpack\bin\webpack.js:156:2)
    at Module._compile (internal/modules/cjs/loader.js:936:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)
    at Module.load (internal/modules/cjs/loader.js:790:32)
    at Function.Module._load (internal/modules/cjs/loader.js:703:12)
    at Function.Module.runMain (internal/modules/cjs/loader.js:999:10)
    at internal/main/run_main_module.js:17:11&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解决办法：根据错误提示信息，打开node_modules\webpack-cli\bin\cli.js，第137行，把const statsPresetToOptions = require(&quot;webpack&quot;).Stats.presetToOptions;中间Stats下标的这个.删掉。&lt;br/&gt;保存后再次运行webpack就成功了！&lt;/p&gt;
</description>
<pubDate>Sat, 02 Nov 2019 00:52:00 +0000</pubDate>
<dc:creator>炸呼呼er</dc:creator>
<og:description>我只安装了webpack，没有安装webpack cli，第一次输入webpack打包时，提示 输入yes后报错 解决办法：输入命令npm install webpack cli g全局安装一下web</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhahuhu/p/11780576.html</dc:identifier>
</item>
<item>
<title>GO基础之数组 - 小禾点点</title>
<link>http://www.cnblogs.com/jalja/p/11780551.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jalja/p/11780551.html</guid>
<description>&lt;p&gt;一、数组的声明与遍历&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明数组的形式1&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; arr [&lt;span&gt;3&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; arr2 = [&lt;span&gt;4&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;}

func main() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    声明数组的形式2&lt;/span&gt;
    a := [&lt;span&gt;4&lt;/span&gt;]float64{&lt;span&gt;2.3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6.1&lt;/span&gt;&lt;span&gt;}
    fmt.Println(a)

    b :&lt;/span&gt;= [...]&lt;span&gt;int&lt;/span&gt; {&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;}

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历数组方式1&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; i:=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;len(a) ; i++&lt;span&gt; {
        fmt.Print(a[i] , &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    fmt.Println()

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历数组方式2&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; _,value :=&lt;span&gt; range b  {
        fmt.Print(value  , &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if arr == nil {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    fmt.Println(&quot;arr==nil&quot;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
    fmt.Print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n 遍历arr数组：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; _ , value :=&lt;span&gt; range arr {
        fmt.Print(value , &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;数组是值传递&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

func main() {
    a :&lt;/span&gt;= [...] &lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
    b :&lt;/span&gt;=&lt;span&gt; a
    b[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    fmt.Println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , a)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[a b c d]&lt;/span&gt;
    fmt.Println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , b)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[x b c d]&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、二维数组&lt;/h3&gt;
&lt;p&gt;二维数组在概念上是二维的，即是说其下标在两个方向上变化，下标变量在数组中的位置也处于一个平面之中，而不是象一维数组只是一个向量。但是，实际的硬件存储器却是连续编址的，也就是说存储器单元是按一维线性排列的。如何在一维存储器中存放二维数组，可有两种方式：一种是按行排列， 即放完一行之后顺次放入第二行。另一种是按列排列， 即放完一列之后再顺次放入第二列。&lt;/p&gt;
&lt;p&gt;在GO语言中，二维数组是按行排列的。即，先存放a[0]行，再存放a[1]行，最后存放a[2]行。每行中元素也是依次存放。&lt;/p&gt;
&lt;p&gt;1、二维数组的元素也称为双下标变量，其表示的形式为：&lt;br/&gt;    数组名[下标][下标]&lt;br/&gt;2、其中下标应为整型常量或整型表达式。例如：&lt;br/&gt;      a[3][4]   ：表示a数组三行四列的元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

func main() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = [&lt;span&gt;5&lt;/span&gt;][&lt;span&gt;3&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;{ {&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;}, {&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;}, {&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;}, {&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;},{&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;14&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;&lt;span&gt;}}

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i:=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;len(a) ;i++&lt;span&gt;  {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; j:=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;len(a[&lt;span&gt;0&lt;/span&gt;]) ;j++&lt;span&gt;  {
            fmt.Printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a[%d][%d]=%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  , i , j , a[i][j])
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 02 Nov 2019 00:34:00 +0000</pubDate>
<dc:creator>小禾点点</dc:creator>
<og:description>二维数组在概念上是二维的，即是说其下标在两个方向上变化，下标变量在数组中的位置也处于一个平面之中，而不是象一维数组只是一个向量</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jalja/p/11780551.html</dc:identifier>
</item>
<item>
<title>基于SEER的区块链版赛亚麻将游戏Pre alpha版本内测啦！ - SEER小助手</title>
<link>http://www.cnblogs.com/seerdocs/p/11780507.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/seerdocs/p/11780507.html</guid>
<description>&lt;p&gt;游戏基于SEER测试网络文体平台模块（Culture and Sports Platform,CSP），正在进行数据调试等工作，大家可以尝鲜体验。&lt;br/&gt;此游戏账户和资金等核心系统完全基于区块链，但目前运行于SEER测试网络，和SEER主网并不在一条链上，切勿充入主网资产，由此造成资金损失将无法寻回。&lt;br/&gt;需要参与测试并充值的用户请登录SEER测试网络钱包 &lt;a href=&quot;http://192.144.171.138/&quot; class=&quot;uri&quot;&gt;http://192.144.171.138/&lt;/a&gt; 在 设置 - 接入点 中 添加 API 服务器节点 ，添加 ADDRESS 为 &lt;a href=&quot;ws://192.144.171.138:8003&quot; class=&quot;uri&quot;&gt;ws://192.144.171.138:8003&lt;/a&gt; 的测试网络API，然后在 设置 - 恢复/导入 中 点击从钱包备份文件恢复(.bin)下拉菜单，选择 导入私钥 ，在下方输入框中 粘贴 5HxSqrcNu6nZ5xaLK9f6RTVKghJsVGZejz8CnC8e3qnPc14LUdP 然后点击 提交 ， 导入私钥 ，完成。导入测试账号tester。然后使用此账号向您在游戏中注册的账号转账，进行充值。&lt;br/&gt;体验和测试流程：&lt;/p&gt;
&lt;ol readability=&quot;0.34548104956268&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;下载游戏APK测试包：&lt;a href=&quot;https://www.seer.best/download/seermahjong_pre_alpha_1014.apk%E5%B9%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E6%89%93%E5%BC%80%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2&quot; class=&quot;uri&quot;&gt;https://www.seer.best/download/seermahjong_pre_alpha_1014.apk并安装，打开后可以看到如下界面&lt;/a&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081241396-1907716821.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;请点击微信登陆完成授权，之后进入游戏，会提示创建SEER账户，此账户会是您在SEER（测试）链上的唯一标识，注意不能是纯字母组成，需要加横杠或数字；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081247137-540673262.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;*赛亚麻将的开发者在此版本的开发中，考虑到用户操作门槛问题，未使用类似币比的助记词权限验证形式，而是直接使用微信授权登陆并和游戏帐户、区块链账户联合绑定的形式进行登陆验证，此种方式虽然不够“去中心化”，但操作足够简便。之后可能会根据用户需求开发更多形式的登陆和授权模式。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;点击左上角带有链标识的图标，会提示前往交易所充值，在主网中大家将可以用网关、转账等各种形式向你的SEER账户充值，但这里我们在测试网络网页钱包上用tester向您的账户充值就可以了。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081252473-1978385300.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里示例转账了100万测试SEER，测试网络链上如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081258831-927931613.png&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;充值后，退出游戏再重新进入，左上角可以看到有链标识的图标后显示了100万，充值成功，代表此账号余额为100万，和SEER链上的账户余额一致。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081302939-1567378877.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同时可能会弹出绑定代理的弹窗，这是一个推广功能设计，代理就是帮忙推广此游戏的用户，你填写的游戏ID的用户可以得到推广奖励。这里随便填一个100001就好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081307743-1804274591.png&quot;/&gt;&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;我们任意点击一个游戏，进入房间，会提示SEER不足。这是因为我们的SEER全部在账户余额中，并没有划转给平台，只有划转给平台的资产，才能参与游戏（文体平台只能对用户划转的资产有操作权限，比如输赢之类），这是一层保护机制。我们需要点击取SEER，或是提前点击顶部有SEER标识的图标进行授权划转操作。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081312405-920784639.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在币箱页面 输入金额，例如10万，确定，可以看到余额减少了相应金额，并扣除了一些手续费，而SEER图标后增加了相应金额。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081318651-711891224.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;区块链上可以看到相应的划转操作提示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081323215-599639702.png&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;现在可以加入游戏了。游戏开始后，会自动收取一定的房费，这是游戏运营方的主要收入来源。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081327628-910392408.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在区块链上可以看到相应的资金操作，两位玩家分别向GM转了房费，这会从用户划转给平台的资金中自动扣除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081331972-1899539621.png&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;游戏结束后，会进行结算。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081336558-1209235633.png&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在区块链上可以看到相应的资金操作，失败的一方或多方会将资金先转给GM，然后GM会根据各方的输赢情况将相应比例的资金自动分配给胜利的一方玩家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1510662/201911/1510662-20191102081341432-992232326.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在SEER文体平台模块中，任何SEER用户可以在主网抵押一笔保证金后获得文体平台权限，文体平台有平台资金池，其他SEER用户可以直接在链上授权一定资产额度给平台，能获得多少用户“授权”和其抵押的保证金有关。&lt;/p&gt;
&lt;p&gt;平台通过调用接口控制用户授权的资产额度进行各种链上操作，且可以将亚秒时间内的操作统一打包，这些操作手续费都由平台支付。这样既能保证用户对资产的所有权，又能保证游戏等文体平台原有的游戏核心之类的应用逻辑不作太大的变化，具有很高的效率和可操作性，可以让游戏内积分等完全区块链化，第三方也可以很方便的做成完全合规的区块链应用。&lt;/p&gt;
&lt;p&gt;文体平台不光可以应用到游戏领域，票务等文化体育领域的众多方向都可以进行扩展。&lt;/p&gt;
&lt;p&gt;详情请参考SEER文体平台模块（Culture and Sports Platform,CSP）使用指南：&lt;a href=&quot;https://mp.weixin.qq.com/s/mJ4g7s18I0as_LpC91GBVw&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s/mJ4g7s18I0as_LpC91GBVw&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 Nov 2019 00:14:00 +0000</pubDate>
<dc:creator>SEER小助手</dc:creator>
<og:description>游戏基于SEER测试网络文体平台模块（Culture and Sports Platform,CSP），正在进行数据调试等工作，大家可以尝鲜体验。 此游戏账户和资金等核心系统完全基于区块链，但目前运行</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/seerdocs/p/11780507.html</dc:identifier>
</item>
<item>
<title>java入门到秃路线导航，元芳你怎么看？【教学视频+博客+书籍整理】 - 宜春</title>
<link>http://www.cnblogs.com/yichunguo/p/11780458.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yichunguo/p/11780458.html</guid>
<description>&lt;p&gt;在博主认为，学习java的最佳学习方法莫过于视频+博客+书籍+总结，前三者博主将淋漓尽致地挥毫于这篇博客文章中，至于总结在于个人，博主将为各位保驾护航，各位只管冲鸭！！！上天是公平的，只要不辜负时间，时间自然不会辜负你。&lt;/p&gt;
&lt;p&gt;何谓学习？博主所理解的学习，它是一个过程，是一个不断&lt;span&gt;&lt;strong&gt;累积&lt;/strong&gt;&lt;/span&gt;、不断&lt;span&gt;&lt;strong&gt;沉淀&lt;/strong&gt;&lt;/span&gt;、不断&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;、善于传达自己的&lt;span&gt;&lt;strong&gt;个人见解&lt;/strong&gt;&lt;/span&gt;以及&lt;span&gt;&lt;strong&gt;乐于分享&lt;/strong&gt;&lt;/span&gt;的过程。&lt;/p&gt;
&lt;p&gt;@&lt;/p&gt;

&lt;h4 id=&quot;java基础教学视频&quot;&gt;1、Java基础教学视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av11361088/?p=106&quot;&gt;Java零基础教程视频（适合Java 0基础，Java初学入门）【推荐】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av11477533/?p=195&quot;&gt;JavaSE进阶入门项目实战视频教程_动力节点【推荐】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av53317264?from=search&amp;amp;seid=1607360922132019289&quot;&gt;毕向东Java基础视频教程25天【相对老旧，但也是金典啊！】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说句实在的，博主当年大一下学期就是看的毕老师Java基础25天的视频，可谓金典啊！现在看来算是比较老旧了，可谓画质感人，若不是老毕的风趣，博主有种怎会坚持看完~说句实在的，主要是当时没有学习资源才莫得办法~，相比之下其余二者都是比较新颖的视频教程了，都是近一两年的~没有质量博主也不会推荐鸭，对吧~这个时候就会有童鞋要说了，怎么都是bilibili上的鸭？博主认为B站可谓是最大的学习网站了~最重要的是免费免费免费！！！~是的！加油学吧！上天是公平的，只要不辜负时间，时间自然不会辜负你。&lt;/p&gt;
&lt;h4 id=&quot;java基础博客文章目录&quot;&gt;2、Java基础博客文章目录&lt;/h4&gt;
&lt;p&gt;这些是博主近半个月重新总结的一些javase基础方面的博客，当然，学习总结！学习后才有的总结！建议哪里不懂点哪里进行&lt;strong&gt;参考&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102375196&quot;&gt;【java基础之继承】java继承从“我爸是李刚”讲起&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102409146&quot;&gt;【java基础之多态】理解多态的向上向下转型从“妈妈我想吃烤山药”讲起&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102593419&quot;&gt;【java基础之代码块】Static静态代码块以及各代码块之间的执行顺序&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102211261&quot;&gt;【java基础之异常】死了都要try，不淋漓尽致地catch我不痛快！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102492104&quot;&gt;【java基础之匿名内部类】程序员你真的理解匿名内部类吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/101212257&quot;&gt;【java基础之tostring】为什么重写toString()方法？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102175114&quot;&gt;【java基础之泛型】泛型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102410482&quot;&gt;【java基础之反射】程序员你真的理解反射机制吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102530621&quot;&gt;【java基础之IO流】C盘D盘万物皆可盘，程序员你不懂IO流，你想盘啥？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102560277&quot;&gt;【java基础之IO流】IO流学习总结【续】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102575398&quot;&gt;【java基础之IO流】IO流学习总结【终章】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102074350&quot;&gt;【java基础之测试】序员你确定这十个题你都会吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102609910&quot;&gt;java抽象类（abstract）与接口（Interface）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102691425&quot;&gt;java面试官：兄弟简单谈谈Static、final、Static final各种用法吧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/linzhaojie525/article/details/55213010&quot;&gt;java中的重载与重写&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/89468169&quot;&gt;Java静态static详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/95449363&quot;&gt;Java中equals与“==”的区别详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/89067045&quot;&gt;java基础之 “==”和“ equals”以及instanceof的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102136428&quot;&gt;Object类、Date类、System类、StringBuilder类、包装类&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/101982298&quot;&gt;什么是浮点型？什么是单精度浮点数（float）以及双精度浮点数（double）？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102099067&quot;&gt;java数组定义、使用、以及数组内存分析详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102173065&quot;&gt;Collection集合以及Iterator迭代器实现原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102618285&quot;&gt;List、Set集合系列之剖析HashSet存储原理（HashMap底层）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/102632590&quot;&gt;Collection和Collections之间的使用与区别（顺带讲解Comparable与Comparator区别）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wxd0108/p/5479442.html&quot;&gt;Java中的多线程你只要看这一篇就够了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然，于此同时学习的过程光是看这些博客文章是不够的~不太系统，不太完整,自黑++i~，为了各位能够系统性学习，下面我贴出一份300页的Java基础教程笔记，可适当掺杂阅读。啥？300页？我靠，博主牛皮，博主赖斯，博主我要嫁给你！！！哎哎哎...博主我不禁夸不禁夸~害羞~ 当然博主没有这个耐心整理写作300页笔记，还得感谢我的老师吧这是博主的老师整理的哈哈 ~唉哎哎..别打..别打...别打脸...我靠,咋还有扔臭鸡蛋的~&lt;br/&gt;300页的Java基础教程链接：&lt;a href=&quot;https://pan.baidu.com/s/1awgcwhF_SwMetLYcw-7gpg&amp;amp;shfl=sharepset&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1awgcwhF_SwMetLYcw-7gpg&amp;amp;shfl=sharepset&lt;/a&gt;&lt;br/&gt;提取码：xfn3&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;以为就完了吗？就能入门了吗？？？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就举个例子从这些List, ArrayList, Set ,HashSet, Map ,HashSet 等等java基础的集合框架你都真的掌握了咩？啥？都学过了？那你能够写一个最简单的ArrayList代码实现吗？就从自己创建一个类开始，然后加方法去实现...对于Java集合框架， 不但要学会用， 还会尝试着去实现一遍！！！一定要多&lt;span&gt;&lt;strong&gt;折腾&lt;/strong&gt;&lt;/span&gt;，你才会&lt;span&gt;&lt;strong&gt;创造&lt;/strong&gt;&lt;/span&gt;出自己的东西，以后你才能&lt;span&gt;&lt;strong&gt;出众&lt;/strong&gt;&lt;/span&gt;！&lt;/p&gt;
&lt;h4 id=&quot;java基础书籍&quot;&gt;3、Java基础书籍&lt;/h4&gt;
&lt;p&gt;放心，博主深怕各位同学学的不够深不够好，所以博主准备了一打书籍给你。包括java编程思想、java核心技术卷一、二，慢慢啃吧...&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1oeQxwcN6x1r1lUVml0PeLQ&amp;amp;shfl=sharepset&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1oeQxwcN6x1r1lUVml0PeLQ&amp;amp;shfl=sharepset&lt;/a&gt; 提取码：st3f&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/19Afs4hbMqZkgxZts9vjyzA&amp;amp;shfl=sharepset&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/19Afs4hbMqZkgxZts9vjyzA&amp;amp;shfl=sharepset&lt;/a&gt; 提取码：8ep6&lt;/p&gt;

&lt;p&gt;来到Java EE了，博主不得不比比几句了， Java 不就是写服务器端的Web应用的吗？那就自己写个Web程序喽， 可以考虑做一个Web版项目， 用最基础的技术Servlet/jsp/jdbc 。然后自己写个简单mvc框架， 在自己的Web 程序中用起来， 这叫吃自己的狗粮，之后再研究框架 , 自己写个简单的OR mapping框架， 再吃一次自己的狗粮。最后读一下经典的书籍《J2EE development without EJB》 ， 是spring 的作者Rod Johnson写的， 它颠覆了大家对于重量级EJB的认识， 开启了新的时代。有了这本书的铺垫， 自己写个简化的依赖注入也不是难事， 写好后还是在自己的Web程序中用起来， 最后一次吃自己的狗粮。&lt;/p&gt;
&lt;p&gt;唉唉唉...放开我...博主还能再哔哔几句...&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;JavaWeb基础不牢固，学框架只会事倍功半！所以学servlet之前请远离框架...&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;javaweb基础教程视频&quot;&gt;1、JavaWeb基础教程视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av29086718?from=search&amp;amp;seid=15695613828841939438&quot;&gt;JavaWeb视频教程（JSP/Servlet/上传/下载/分页/MVC/三层架构/Ajax）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av47886776?from=search&amp;amp;seid=15695613828841939438&quot;&gt;黑马JavaWeb入门到精通(idea版)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av37008149?from=search&amp;amp;seid=7742967691759119888&quot;&gt;尚硅谷Java视频_JavaWEB基础视频教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同样的那句话：上天是公平的，只要不辜负时间，时间自然不会辜负你。&lt;/p&gt;
&lt;h4 id=&quot;关于javaweb博客文章&quot;&gt;2、关于JavaWeb博客文章&lt;/h4&gt;
&lt;p&gt;我整理的比较少，比较乱，时间比较有限，写的不好，将就这看吧，&lt;strong&gt;选择性观看&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/category/8978855&quot;&gt;JavaWeb专栏&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;肯定要学一个啊，最起码MySQL或者Oracle要会，总不能SQL语句也敲不出吧....&lt;/p&gt;
&lt;h4 id=&quot;关系型数据库教学视频&quot;&gt;1、关系型数据库教学视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av49181542?from=search&amp;amp;seid=15593716162834150891&quot;&gt;MySQL 基础+高级篇- 数据库 -sql -尚硅谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av9004349?from=search&amp;amp;seid=15593716162834150891&quot;&gt;SQL数据库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av39807944?from=search&amp;amp;seid=15593716162834150891&quot;&gt;一天学会 MySQL 数据库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av14537979?from=search&amp;amp;seid=1440817139729418031&quot;&gt;Oracle从入门到精通教程(全套)_数据库实战精讲_动力节点&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;非关系性数据库redis视频&quot;&gt;2、非关系性数据库Redis视频&lt;/h4&gt;
&lt;p&gt;非关系性数据库Redis了解一下？这个Redis非常重要，博主不多哔哔，怕各位嫌我比比叨叨然后跑到现实中来扎我QnQ,一句话，埋头学吧...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av49517046/?spm_id_from=333.788.videocard.1&quot;&gt;千锋微服务2019最新Redis教程[千锋南京]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av62657941?from=search&amp;amp;seid=10232755588336738012&quot;&gt;2019最新Redis实战教程全套学习视频&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ssh建议就不要学了，呸，不能这么说，就是能不学就不学吧，用到再学吧！【只是建议】，总之多学一点也没坏事，看个人吧！反正博主是直接学ssm框架。。。&lt;/p&gt;
&lt;h4 id=&quot;spring框架视频&quot;&gt;1、spring框架视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av15369076?from=search&amp;amp;seid=12088451245683404585&quot;&gt;传智spring框架&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av38379214?from=search&amp;amp;seid=12088451245683404585&quot;&gt;Java进阶教程2018年spring框架深入浅出&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;mybatis-框架视频&quot;&gt;2、Mybatis 框架视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av51678371/?p=74&quot;&gt;Mybatis 【黑马】 idea版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av25677166/?spm_id_from=333.788.videocard.1&quot;&gt;MyBatis视频教程&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;springmvc框架视频&quot;&gt;3、SpringMVC框架视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av10586645?from=search&amp;amp;seid=11953126273477466161&quot;&gt;【极客学院】一天学会SpringMVC框架&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;ssm框架博客文章&quot;&gt;4、SSM框架博客文章&lt;/h4&gt;
&lt;h4 id=&quot;spring框架&quot;&gt;spring框架&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/98600615&quot;&gt;Spring框架学习总结（上）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/99240061&quot;&gt;Spring框架AOP学习总结（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97629903&quot;&gt;谈谈Spring核心IOC和AOP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97394068&quot;&gt;Spring加载properties文件的两种方式&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;mybatis框架&quot;&gt;Mybatis框架&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97007064&quot;&gt;什么是Mybatis，为什么要学习Mybatis，mybatis与hibernate区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97101647&quot;&gt;零基础Mybatis入门程序编写、测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97374007&quot;&gt;MyBatis中SqlMapConfig.xml文件中重点配置：properties属性、typeAliases别名、mappers映射&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97240307&quot;&gt;MyBatis开发Dao的原始Dao开发和Mapper动态代理开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97106696&quot;&gt;Mybatis中#{}与${}的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100902959&quot;&gt;Mybatis分页插件PageHelper的学习与使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97496877&quot;&gt;Mybatis整合spring详细教程（带思路）&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;springmvc框架&quot;&gt;SpringMVC框架&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97786041&quot;&gt;走进SpringMVC世界，从SpringMVC入门到SpringMVC架构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100134616&quot;&gt;手把手教你优雅的编写第一个SpringMVC程序&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100997134&quot;&gt;SpringMVC参数绑定学习总结【前后端数据参数传递】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/101015595&quot;&gt;【解决】SpringMVC前端到后端400错误&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/97895435&quot;&gt;SpringMVC常见面试题总结（超详细回答）&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;ssm框架整合文章&quot;&gt;SSM框架整合文章&lt;/h4&gt;
&lt;p&gt;当然以上框架文章并不太全，凑合着看吧，尽量以后更新...当然了以上框架企业都不会单个单个的用而是三个框架整合在一起使用，下面这篇文章可就要我的dog命了，加上测试花了整整N个多小时写出来的...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100192558&quot;&gt;IDEA优雅整合Maven+SSM框架（详细思路+附带源码）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可能你不去了解这玩意，你可能永远用不上这玩意，当你用的上瘾了，在以后的开发中，你会被它的魅力所折服的！&lt;strong&gt;强烈建议学习&lt;/strong&gt;！！！，博主也是自掏腰包在极客专栏上买的这个专栏PDF，顺道小结写出博客，也算是一种小成绩吧！&lt;/p&gt;
&lt;h4 id=&quot;数据结构与算法视频&quot;&gt;1、数据结构与算法视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av6239731?from=search&amp;amp;seid=1113324960679103967&quot;&gt;(严蔚敏)数据结构视频教程（C语言版48集）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上古程序员严蔚敏老师了解一下？咳咳当然也有java版的了，如下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av33835237?from=search&amp;amp;seid=1269353559398775692&quot;&gt;数据结构与算法基础-java版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av54029771/&quot;&gt;尚硅谷图解Java数据结构和算法&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;数据结构与算法博客文章&quot;&gt;2、数据结构与算法博客文章&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100011172&quot;&gt;数据结构与算法分析有多重要？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100551467&quot;&gt;完全透析数据结构与算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100032306&quot;&gt;时间空间复杂度分析：如何分析、统计算法的执行效率和资源消耗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100535440&quot;&gt;如何教会女友递归算法？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100033998&quot;&gt;【数据结构01】浅谈数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100515630&quot;&gt;【数据结构02】栈与队列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100522120&quot;&gt;【数据结构03】浅谈链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100600178&quot;&gt;【算法04】树与二叉树（递归思想遍历）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/details/100576019&quot;&gt;算法动图+原理代码轻松透析八大经典算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然，依旧还在学习中...尽量抽空持续更新&lt;/p&gt;
&lt;h4 id=&quot;数据结构与算法书籍&quot;&gt;3、数据结构与算法书籍&lt;/h4&gt;
&lt;p&gt;还有附带一本数据结构与算法书籍，够你折腾了...&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1c1BW4iHdYPCd1nbRW1kUSQ&amp;amp;shfl=sharepset&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1c1BW4iHdYPCd1nbRW1kUSQ&amp;amp;shfl=sharepset&lt;/a&gt; 提取码：jcdw&lt;/p&gt;

&lt;p&gt;java开发工具必须要最好的鸭，强烈建议直接上手idea，如果你非要用eclipse，咋也不敢问啊...&lt;/p&gt;
&lt;p&gt;博主也有个idea专栏，只是写的不多而已，选择性观看吧，建议看视频，讲的绝对比博主我说的好...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44543508/article/category/9292281&quot;&gt;IDEA专栏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av30080993?from=search&amp;amp;seid=17369892257406887345&quot;&gt;尚硅谷Java视频教程_IDEA视频教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;确实，这些肯定要学，不然就out了...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av54119831?from=search&amp;amp;seid=6692736736893481&quot;&gt;Maven基础篇（IDEA版）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av36557763?from=search&amp;amp;seid=6692736736893481&quot;&gt;尚硅谷Java视频教程_Maven视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av10475153?from=search&amp;amp;seid=3897390036605576862&quot;&gt;【教程】学会Git玩转Github【全】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av24441039?from=search&amp;amp;seid=3897390036605576862&quot;&gt;尚硅谷_Git&amp;amp;GitHub视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av7959491?from=search&amp;amp;seid=2400575593480478090&quot;&gt;黑马程序员SVN视频教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av31574438?from=search&amp;amp;seid=13387762608363427861&quot;&gt;黑马程序员精品教程|Java进阶教程之Gradle入门到精通&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;世界上最遥远的就是网络....呀这里断网了,请各位往下接着看~暂时还没写这方面的博客，不过还是挺重要的一门~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av47486689?from=search&amp;amp;seid=2467911429676951719&quot;&gt;韩老师讲高校《计算机网络原理》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;韩老师就不多说了，绝对金典....&lt;/p&gt;

&lt;p&gt;这个太重要了，不过没有实际开发经验是学不好这一门课程的，所以它分几个阶段学习，并不可能一蹴而就的，如果你听说XXX花了几个月的时间，耗死XXX个脑细胞，专研设计模式这一门，最后他成仙了，看啥都能运用设计模式来解决...你就扯犊子吧...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av57936239?from=search&amp;amp;seid=11816826483380571074&quot;&gt;尚硅谷图解Java设计模式韩顺平老师2019力作&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av24176315?from=search&amp;amp;seid=11816826483380571074&quot;&gt;23个设计模式&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;啥是中间件&quot;&gt;1、啥是中间件？&lt;/h4&gt;
&lt;p&gt;啥是中间件？这个问题对博主而言就跟&lt;code&gt;啥是佩奇&lt;/code&gt;这问题是同一层次的，小猪...红色的... 咳咳，扯远了&lt;/p&gt;
&lt;p&gt;其实吧，对于中间件这个概念并没有特定的概念，大致的概念为&lt;code&gt;非业务的技术类组件&lt;/code&gt;，是操作系统之上和业务逻辑之下的中间层也都可以称之为中间件，或者说是主要用于解耦底层逻辑和业务应用的组件，或者是一些可复用的后台组件。这些概念倒是麻溜溜滴..似乎有点道理但又没完全讲清楚这个概念，你说气人不气人？&lt;/p&gt;
&lt;p&gt;言而总之，总而言之，中间件其实也有两个层面不同理解：&lt;br/&gt;1、狭义上讲中间件如常见的远程服务框架、消息队列、缓存等；&lt;br/&gt;2、广义上讲中间件是操作系统之上业务逻辑之下的所有可复用的后台组件。&lt;/p&gt;
&lt;h4 id=&quot;shiro&quot;&gt;2、Shiro&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av29862843?from=search&amp;amp;seid=5673456897577870929&quot;&gt;尚硅谷Shiro视频教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av21961812?from=search&amp;amp;seid=13328358708383459080&quot;&gt;Lucene&amp;amp;solr(2天学习)&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;lucene&quot;&gt;3、Lucene&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av68855979?from=search&amp;amp;seid=13328358708383459080&quot;&gt;2018年黑马程序员就业班57期之【Lucene】&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;shiro-1&quot;&gt;4、Shiro&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av40342174?from=search&amp;amp;seid=5673456897577870929&quot;&gt;SpringBoot与Shiro整合-权限管理实战视频&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;elasticsearch7.x&quot;&gt;5、Elasticsearch7.X&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av68081104?from=search&amp;amp;seid=13666518247385547780&quot;&gt;2019年全新录制Elasticsearch7.X搜索引擎项目实战Java架构全套视频教程&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;dubbo&quot;&gt;6、Dubbo&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av30612478?from=search&amp;amp;seid=1209161292648610862&quot;&gt;尚硅谷Java视频教程_Dubbo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av35685648?from=search&amp;amp;seid=1209161292648610862&quot;&gt;（千锋教育）Java 微服务架构 Dubbo 篇 一款高性能 Java RPC 框架&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;jvm视频&quot;&gt;1、JVM视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av17415293?from=search&amp;amp;seid=14634005527183083879&quot;&gt;面试JVM，听这堂课就够了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av47756459?from=search&amp;amp;seid=18098903232145604601&quot;&gt;深入理解JVM&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;jvm书籍&quot;&gt;2、JVM书籍&lt;/h4&gt;
&lt;p&gt;博主不想bb啥并朝你丢了一本深入java虚拟机&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1C3bQOIdxdjHOwq6MT283yQ&amp;amp;shfl=sharepset&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1C3bQOIdxdjHOwq6MT283yQ&amp;amp;shfl=sharepset&lt;/a&gt;&lt;br/&gt;提取码：zkww&lt;/p&gt;

&lt;p&gt;单独讲下消息中间件，主要是中间件塔喵的太多惹..&lt;/p&gt;
&lt;h4 id=&quot;kafka&quot;&gt;1、Kafka&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av65544753?from=search&amp;amp;seid=2785187115756714011&quot;&gt;尚硅谷大数据课程之Kafka（2019新版）&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;rabbitmq&quot;&gt;2、RabbitMQ&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av18997807?from=search&amp;amp;seid=18186796328976219499&quot;&gt;MQ消息中间件RabbitMQ 入门到进阶+(牧码人/老王/)+(架构师系列)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av64408833?from=search&amp;amp;seid=18186796328976219499&quot;&gt;Java架构师带你90分钟快速搞定RabbitMQ消息中间件&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;rocketmq&quot;&gt;3、RocketMQ&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av66702383?from=search&amp;amp;seid=10943961971561779496&quot;&gt;RocketMQ系统精讲，经受历年双十一狂欢节考验的分布式消息中间件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av45911661?from=search&amp;amp;seid=10943961971561779496&quot;&gt;2019年最新版Springboot+mybatis+RocketMQ+SpringCloud技术讲解&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;activemq&quot;&gt;4、ActiveMQ&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av55976700?from=search&amp;amp;seid=3236221560597177101&quot;&gt;尚硅谷消息中间件之ActiveMQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av55643074?from=search&amp;amp;seid=3236221560597177101&quot;&gt;2019尚硅谷谷粒商城微服务SpringBoot,Dubbo,MySql高级,Redis秒杀,ElasticSearch,ActiveMQ..&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av27122140?from=search&amp;amp;seid=15916912369571848709&quot;&gt;尚硅谷_Docker核心技术（基础篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av17854410?from=search&amp;amp;seid=15916912369571848709&quot;&gt;【公开课】Docker入坑教程【33集】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av44264629?from=search&amp;amp;seid=12438065545752295825&quot;&gt;马哥运维进阶教程：Kubernetes（K8s）从入门到精通&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av66617940?from=search&amp;amp;seid=12438065545752295825&quot;&gt;尚硅谷Kubernetes（k8s基于最新2019年8月发布的1.15.1）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;随着基于Spring之上的框架SpringBoot、Cloud的流行，基于注解式开发的热潮逐渐覆盖了基于XML纯配置的开发，Spring注解将显得格外重要....所以.....所以....所以个锤子啊不关咋们什么事啊。。。开个玩笑哈哈，至于微服务框架的学习看个人吧，建议童鞋在工作中用到再学！！！&lt;/p&gt;
&lt;h4 id=&quot;springboot视频&quot;&gt;1、SpringBoot视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av38657363?from=search&amp;amp;seid=13103222338827925757&quot;&gt;SpringBoot视频教程(idea版)_2018_spring boot_springboot核心篇+springboot整合篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av20965295?from=search&amp;amp;seid=13103222338827925757&quot;&gt;尚硅谷好评如潮【SpringBoot】视频&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;springcloud视频&quot;&gt;2、SpringCloud视频&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av22613028?from=search&amp;amp;seid=4158810930188895225&quot;&gt;尚硅谷_SpringCloud（全）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av45734793?from=search&amp;amp;seid=4158810930188895225&quot;&gt;千锋：2019Java微服务架构(SpringBoot+SpringCloud)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;答应博主，一定要坚持学完啊！！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av60719793?from=search&amp;amp;seid=9378069883065046077&quot;&gt;2019最新Java面试题集精讲全集（互联网大厂必问）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av29503459?from=search&amp;amp;seid=9378069883065046077&quot;&gt;Java面试题全集84集系列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/mp/homepage?__biz=MzU4Mjk0MjkxNA==&amp;amp;hid=3&amp;amp;sn=db212882b2637c292bf41a80c56370df&amp;amp;scene=18#wechat_redirect&quot;&gt;京东小米面经&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;至于博主为啥要抽空整理出这样一篇博客文章，原因很简单...&lt;/p&gt;
&lt;p&gt;博主大一下学期的时候无尽的迷茫惆怅，博主何尝不期望有位“高人”指路，想学却又不知从何下手，那种&lt;strong&gt;无助&lt;/strong&gt;那种&lt;strong&gt;孤独&lt;/strong&gt;的滋味我懂...&lt;br/&gt;&lt;span&gt;所以博主只希望生活能够不辜负每个少年的一腔热血，写作本文章的意义仅此而已...&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;瓜皮群众皮皮甲： 呜呜呜...博主大一下学期原来这么孤独啊，看了这么久的文章还一直以为这位博主是个有趣、对生活充满阳光的，没想到这个博主&lt;code&gt;“徒有其表”&lt;/code&gt;啊 QnQ&lt;/p&gt;
&lt;p&gt;瓜皮群众皮皮乙： 是啊是啊...&lt;/p&gt;
&lt;p&gt;博主： 咳咳.....那啥...今天就先到这里了，博主有事，唉唉唉....看...又是那个该死的包工头来电话了，话说今天的砖头格外烫手。&lt;/p&gt;
&lt;p&gt;瓜皮群众皮皮丙： 博主怎么画风怎么又变了, 唉唉唉....博主别走鸭...上我家搬砖去啊，午饭外加一个鸡腿....&lt;/p&gt;
&lt;p&gt;如果有想要和博主一起交流的朋友，欢迎各位及时联系博主...那.... 咋们有bing再见~&lt;/p&gt;

&lt;p&gt;欢迎各位关注我的公众号，一起探讨技术，向往技术，追求技术...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191028085725979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 01 Nov 2019 22:34:00 +0000</pubDate>
<dc:creator>宜春</dc:creator>
<og:description>在博主认为，学习java的最佳学习方法莫过于视频+博客+书籍+总结，前三者博主将淋漓尽致地挥毫于这篇博客文章中，至于总结在于个人，博主将为各位保驾护航，各位只管冲鸭！！！上天是公平的，只要不辜负时间，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/yichunguo/p/11780458.html</dc:identifier>
</item>
<item>
<title>如何在Idea中编译构建Spring Framework 5.x - 陈其苗</title>
<link>http://www.cnblogs.com/think-in-java/p/11780427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/think-in-java/p/11780427.html</guid>
<description>&lt;p&gt;按照工程下&lt;code&gt;import-into-idea.md&lt;/code&gt;文件的提示进行操作&lt;/p&gt;
&lt;pre class=&quot;markdown&quot;&gt;
&lt;code&gt;The following has been tested against IntelliJ IDEA 2016.2.2

## Steps

_Within your locally cloned spring-framework working directory:_

1. Precompile `spring-oxm` with `./gradlew :spring-oxm:compileTestJava`
2. Import into IntelliJ (File -&amp;gt; New -&amp;gt; Project from Existing Sources -&amp;gt; Navigate to directory -&amp;gt; Select build.gradle)
3. When prompted exclude the `spring-aspects` module (or after the import via File-&amp;gt; Project Structure -&amp;gt; Modules)
4. Code away

## Known issues

1. `spring-core` and `spring-oxm` should be pre-compiled due to repackaged dependencies.
See `*RepackJar` tasks in the build and https://youtrack.jetbrains.com/issue/IDEA-160605).
2. `spring-aspects` does not compile due to references to aspect types unknown to
IntelliJ IDEA. See https://youtrack.jetbrains.com/issue/IDEA-64446 for details. In the meantime, the
'spring-aspects' can be excluded from the project to avoid compilation errors.
3. While JUnit tests pass from the command line with Gradle, some may fail when run from
IntelliJ IDEA. Resolving this is a work in progress. If attempting to run all JUnit tests from within
IntelliJ IDEA, you will likely need to set the following VM options to avoid out of memory errors:
    -XX:MaxPermSize=2048m -Xmx2048m -XX:MaxHeapSize=2048m
4. If you invoke &quot;Rebuild Project&quot; in the IDE, you'll have to generate some test
resources of the `spring-oxm` module again (`./gradlew :spring-oxm:compileTestJava`)    


## Tips

In any case, please do not check in your own generated .iml, .ipr, or .iws files.
You'll notice these files are already intentionally in .gitignore. The same policy goes for eclipse metadata.

## FAQ

Q. What about IntelliJ IDEA's own [Gradle support](https://confluence.jetbrains.net/display/IDEADEV/Gradle+integration)?

A. Keep an eye on https://youtrack.jetbrains.com/issue/IDEA-53476&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;按照&lt;code&gt;steps&lt;/code&gt;和&lt;code&gt;Known issues&lt;/code&gt;指示进行操作即可,第一次构建可能要下载大量依赖，可能需要花费一些时间，慢的可能需要一到俩小时，需要耐心等待。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;编译完&lt;code&gt;spring-core&lt;/code&gt;和&lt;code&gt;spring-oxm&lt;/code&gt;之后，再去编译&lt;code&gt;spring-context&lt;/code&gt;时候，你会发现报错了，有来自&lt;code&gt;.gradle&lt;/code&gt;文件的报错，有因为xxx类找不到的报错，这里报出的任何错误，一律通过注释对应的代码进行解决。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;.gradle文件报错,将对应报错行的构建代码注释掉，xxx类找不到，将对xxx类的引用注释掉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增&lt;code&gt;module&lt;/code&gt;进行测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Note: 由于&lt;code&gt;spring-aspects&lt;/code&gt;的实现依赖了&lt;code&gt;aspectj&lt;/code&gt;,需要另外引入，所以不调试&lt;code&gt;spring-aspects&lt;/code&gt;模块内容的同学，可以直接把这个模块给移除掉。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 01 Nov 2019 18:37:00 +0000</pubDate>
<dc:creator>陈其苗</dc:creator>
<og:description>如何在Idea中编译构建Spring Framework 5.x 1. 安装配置Gradle 2. 下载源码：git clone https://github.com/spring projects/</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/think-in-java/p/11780427.html</dc:identifier>
</item>
<item>
<title>Nginx 热部署和日志切割，你学会了吗？ - 武培轩</title>
<link>http://www.cnblogs.com/wupeixuan/p/11780405.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wupeixuan/p/11780405.html</guid>
<description>&lt;p&gt;上篇文章，我们已经安装好 Nginx，并且配置好 Nginx 文件后，这个时候我就需要操作 Nginx 的命令行了，这篇文章主要讲解 Nginx 命令行相关知识，并通过日常遇到的热部署、切割日志文件场景来熟悉 Nginx 命令行操作。&lt;/p&gt;
&lt;p&gt;推荐阅读：&lt;a href=&quot;https://blog.csdn.net/qq_27276045/article/details/102849074&quot;&gt;Nginx 了解一下？&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;格式：nginx -s stop&lt;/li&gt;
&lt;li&gt;帮助：-? -h&lt;/li&gt;
&lt;li&gt;使用指定的配置文件：-c&lt;/li&gt;
&lt;li&gt;指定配置指令：-g （用途是覆盖配置文件中的指令）&lt;/li&gt;
&lt;li&gt;指定运行目录：-p&lt;/li&gt;
&lt;li&gt;发送信号：-s（立刻停止服务：stop，优雅的停止服务：quit，重新配置文件：reload，重新开始记录日志文件：reopen）&lt;/li&gt;
&lt;li&gt;测试配置文件是否有语法错误：-t -T&lt;/li&gt;
&lt;li&gt;打印 nginx 的版本信息、编译信息等：-v -V&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Nginx 命令和大部分的 Linux 的命令很相似，都是 nginx 加基本指令，再加指令相关的参数。默认情况下 nginx 会去寻找之前执行 configure 命令时指定位置的配置文件，但是可以通过 -c 来指定配置文件，并且可以通过 -g 来指定配置指令。&lt;/p&gt;
&lt;p&gt;nginx 去操作运行中进程的方法一般是通过发送信号，可以通过 linux 通用的 kill 命令，也可以用 nginx 的 -s 命令来发送信号。&lt;/p&gt;
&lt;p&gt;接下来，让我们通过几个栗子来熟悉 Nginx 的命令行操作。&lt;/p&gt;

&lt;p&gt;配置文件默认是在安装目录的 conf 文件下，文件名为 nginx.conf，我们可以打开看一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    server {
        listen       80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;假如我们需要开启 gzip 压缩，我们可以把它前面的注释去掉，当我们在修改完 nginx 配置文件后，我们可以通过 nginx 的命令 &lt;code&gt;./nginx -s reload&lt;/code&gt; 重启 nginx 服务。&lt;/p&gt;

&lt;p&gt;当从老版本替换为新版本的 nginx 的时候，如果不热部署的话，会需要取消 nginx 服务并重启服务才能替换成功，这样的话会使正在访问的用户在断开连接，所以为了在不影响用户的体验下进行版本升级，就需要热部署来升级版本。&lt;/p&gt;
&lt;p&gt;接下来，让我们一起进行一次热部署吧。&lt;/p&gt;
&lt;p&gt;因为进行升级主要是更换二进制文件，所以在升级前先备份旧的二进制文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 备份旧版本的 nginx 二进制文件
mv /usr/local/nginx/sbin/nginx  /usr/local/nginx/sbin/nginx.old&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后下载最新版本的 nginx，解压后进行编译，再把编译好的最新版本的 nginx 二进制文件拷贝到安装目录下的 sbin 目录下。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 到官网下载最新版本的 nginx
wget http://nginx.org/download/nginx-1.17.2.tar.gz
# 解压
tar -xzvf nginx-1.17.2.tar.gz
cd nginx-1.17.2
./configure --prefix=/usr/local/nginx
# 编译
make
# 替换旧的 nginx 的执行程序
cp -r /usr/local/nginx-1.16.1/objs/nginx /usr/local/nginx/sbin/ -f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过 &lt;code&gt;ps -ef | grep nginx&lt;/code&gt; 来查看 nginx 运行状况：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@wupx sbin]# ps -ef | grep nginx 
root      1752     1  0 20:39 ?        00:00:00 nginx: master process ./sbin/nginx
nobody    1783  1752  0 20:41 ?        00:00:00 nginx: worker process
root      1787     1  0 20:41 ?        00:00:00 wget http://nginx.org/download/nginx-1.17.2.tar.gz
root      4357  1708  0 21:00 pts/2    00:00:00 grep --color=auto nginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到目前启动的 nginx 的 PID 为 1752，下面需要给正在运行的 nginx 的 master 进程发送信号，告诉它我们要进行热部署了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 发送 USR2 信号给旧版本主进程号,使 nginx 的旧版本停止接收请求，用 nginx 新版本接替
kill -USR2 1752&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再通过 &lt;code&gt;ps -ef | grep nginx&lt;/code&gt; 来查看 nginx 运行状况：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@wupx sbin]# ps -ef | grep nginx 
root      1752     1  0 20:39 ?        00:00:00 nginx: master process ./sbin/nginx
nobody    1783  1752  0 20:41 ?        00:00:00 nginx: worker process
root      1787     1  0 20:41 ?        00:00:00 wget http://nginx.org/download/nginx-1.17.2.tar.gz
root      4391  1752  0 21:02 ?        00:00:00 nginx: master process ./sbin/nginx
nobody    4392  4391  0 21:02 ?        00:00:00 nginx: worker process
root      4394  1708  0 21:07 pts/2    00:00:00 grep --color=auto nginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个时候我们需要给老的 nginx 发送信号，告诉老的 nginx 请优雅的关闭所有的 worker 进程。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 发送 WINCH 信号到旧的主进程，它会通知旧的 worker 进程优雅的关闭，然后退出
kill -WINCH 1752&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新在查看 nginx 状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@wupx sbin]# ps -ef | grep nginx 
root      1752     1  0 20:39 ?        00:00:00 nginx: master process ./sbin/nginx
root      1787     1  0 20:41 ?        00:00:00 wget http://nginx.org/download/nginx-1.17.2.tar.gz
root      4391  1752  0 21:02 ?        00:00:00 nginx: master process ./sbin/nginx
nobody    4392  4391  0 21:02 ?        00:00:00 nginx: worker process
root      4402  1708  0 21:08 pts/2    00:00:00 grep --color=auto nginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以发现老的 nginx maser 进程还存在，它的意义是：如果存在问题，需要退回到老版本中，我们可以给它发送 reload 命令，让他重新把 worker 进程拉起来、把新版本关掉。保留在这里方便我们做版本回退。&lt;/p&gt;
&lt;p&gt;如果要退出保留的 master 进程，可以通过 &lt;code&gt;kill -QUIT&lt;/code&gt; 命令来完成:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 发送 QUIT 信号到旧的主进程，它会退出保留的 master 进程
kill -QUIT 1752&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行完后，1752 进程退出，通过 netstat lntup 可以看到 80 端口已经被 4391 进程监听了（新版本 nginx 的进程）。&lt;/p&gt;
&lt;p&gt;到此为止，我们就完成了 nginx 的热部署。&lt;/p&gt;

&lt;p&gt;为了避免日志文件过大不方便查看，因此需要对日志切割。首先将原先的日志进行备份：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 备份原日志
mv error.log old_error.log&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看日志大小：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@wupx logs]# ll
total 20
-rw-r--r-- 1 root root 6789 Nov  6 22:28 access.log
-rw-r--r-- 1 root root    5 Nov  6 22:16 nginx.pid
-rw-r--r-- 1 root root 7831 Nov  6 22:28 old_error.log&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来进行日志切割：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 日志切割
/usr/local/nginx/sbin/nginx -s reopen&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次查看：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@wupx logs]# ll
total 24
-rw-r--r-- 1 nobody root 6789 Nov  6 22:28 access.log
-rw-r--r-- 1 nobody root   60 Nov  6 22:30 error.log
-rw-r--r-- 1 root   root    5 Nov  6 22:16 nginx.pid
-rw-r--r-- 1 root   root 7831 Nov  6 22:28 old_error.log&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;经过上面的操作，我们就完成了日志的切割，以上操作只是为了了解日志切割的操作流程，不建议直接生产这么使用。推荐先写成一个 shell 脚本，通过 shell 脚本去定时执行。&lt;/p&gt;
&lt;p&gt;示例脚本：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/bash
LOGS_PATH=/usr/local/nginx/logs/history
CUR_LOGS_PATH=/usr/local/nginx/logs
YESTERDAY=$(date -d &quot;yesterday&quot; +%Y-%m-%d)
mv ${CUR_LOGS_PATH}/access.log ${LOGS_PATH}/old_access_${YESTERDAY}.log
mv ${CUR_LOGS_PATH}/error.log ${LOGS_PATH}/old_error_${YESTERDAY}.log
## 向 NGINX 主进程发送 USR1 信号。USR1 信号是重新打开日志文件
kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这篇文章主要介绍了 Nginx 命令行相关知识，并介绍了重载配置文件、Nginx 热部署、日志切割等操作，还是需要多实践操作，实践出真知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1356806/201911/1356806-20191102012153834-908620281.jpg&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1356806/201911/1356806-20191102012154158-1091002134.jpg&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 01 Nov 2019 17:22:00 +0000</pubDate>
<dc:creator>武培轩</dc:creator>
<og:description>上篇文章，我们已经安装好 Nginx，并且配置好 Nginx 文件后，这个时候我就需要操作 Nginx 的命令行了，这篇文章主要讲解 Nginx 命令行相关知识，并通过日常遇到的热部署、切割日志文件场</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wupeixuan/p/11780405.html</dc:identifier>
</item>
<item>
<title>js奥义:原型与原型链(1) - 致爱丽丝</title>
<link>http://www.cnblogs.com/hjk1124/p/11780403.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hjk1124/p/11780403.html</guid>
<description>&lt;p&gt;&lt;em&gt;要弄懂原型链，首先应先明白&lt;strong&gt;prototype原型对象、__proto__、对象&lt;/strong&gt;三者之间的关系。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;引入构造函数的相关定义：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　构造函数是一种比较特殊的函数，用于批量实例化对象。通俗一点说，构造函数是用于生成对象的&lt;strong&gt;模板&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于工厂模式在实例化对象时会存在同一功能代码在内存中开辟不同内存空间从而造成内存空间浪费的问题，更多的人选择使用构造函数来实例化对象，es6中引进的class关键字正是基于构造函数的思想&lt;/p&gt;
&lt;p&gt;&lt;em&gt;构造函数的&lt;/em&gt;本质上是将对象中一些公共的方法和属性 抽取出来，然后将这个函数封装成可复用的构造函数.&lt;/p&gt;
&lt;p&gt;　构造函数的特点(与工厂函数相比较)：　　　　&lt;/p&gt;
&lt;p&gt;　　　　a. 函数名首字母大写；&lt;/p&gt;
&lt;p&gt;　　　　b.  函数体内没有关键字new,在实例化一个对象时会使用关键字new;&lt;/p&gt;
&lt;p&gt;　　　　c.  构造函数体内的this指代当前实例化对象；&lt;/p&gt;
&lt;p&gt;　　　　d.   函数体内没有关键字return。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
 function Fn() {
            this.n = 20
        }
        Fn.prototype.say= function() {
            console.log(this.n)
        }
        var deb = new Fn()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　构造函数的new关键字在实例化对象时会做以下四件事：&lt;/p&gt;
&lt;p&gt;　　a.现在内存中开辟一块内存空间(new obj);&lt;/p&gt;
&lt;p&gt;　　b.让构造函数体内的this指向这个对象   (因而，this指代当前对象)；&lt;/p&gt;
&lt;p&gt;　　c.将构造函数体内的属性和方法赋值给这个这个对象；&lt;/p&gt;
&lt;p&gt;　　d.返回这个对象 (因而，构造函数体内没有return关键字)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;为了区别对待，以下将构造函数称为父类，将实例化对象称为子类。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一：原型&lt;/p&gt;
&lt;p&gt;　　1.定义&lt;/p&gt;
&lt;p&gt;　每一个函数身上都有一个prototype(原型)，由于这个prototype的值是一个对象类型，因而又叫做原型对象,&lt;strong&gt;ptototype属性是函数独有的属性！&lt;/strong&gt;&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　2.原型的作用&lt;/p&gt;
&lt;p&gt;　　原型对象的作用通常用来共享&lt;em&gt;父类的&lt;/em&gt;方法，由于方法是函数，本质上也是一个对象，而对象的内存地址保存在堆空间里，如同工厂模式一般，多个内存空间存放相同的代码，会造成大量空间被占用，因而将公有的方法添加在&lt;em&gt;父类&lt;/em&gt;的prototype上，也就是写入了同一对象上，调用的时候也就避免了多个空间存放同一代码的错误示范，而由于父类的属性的值是基本类型，所占内存较少，所以我们往往将其添加到&lt;em&gt;父类&lt;/em&gt;函数体的内部。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
  function Fn() {
            this.n = 20
        }
        Fn.prototype.sing = function() {
            console.log(this.n)
        }
        var deb = new Fn()
        var deb2 = new Fn()
        console.log(deb.sing === deb2.sing) //true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　二：__proto__&lt;/p&gt;
&lt;p&gt;　　与函数的prototype属性不同，每一个obj的对象都有一个__ptoto__属性，&lt;strong&gt;这个__proto__属性隐式的指向了这个子类的的构造函数的prototype属性！&lt;/strong&gt;但是这个__proto__属性是不可见的，这也就是为什么将其称作是隐式的，不过好在浏览器的支持下，它被定义为__proto__&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;如果看到这里，希望你再好好思考一下 ”&lt;strong&gt;万物皆对象&lt;/strong&gt;“这句话的含义&lt;/p&gt;
&lt;p&gt;　　从父类的角度看，子类的_proto_属性隐式指向了它的父类的prototype属性；从子类的角度看，子类自身的__proto__属性指向了它的父类的prototype属性&lt;/p&gt;
&lt;p&gt;　　假如我们对比父类的prototype与子类的__proto__属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
        console.log(Fn.prototype === deb.__proto__)//true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　理解了这一点，就可以明白为什么构造函数添加在其原型对象上的方法，实例化对象可以共享使用了：&lt;strong&gt;因为&lt;span&gt;构造函数的prototype属性指向的&lt;/span&gt; 与 &lt;span&gt;实例化对象的__proto__属性指向&lt;/span&gt;的 &lt;span&gt;是同一个对象,也就是父类的prototype对象&lt;/span&gt;！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;这样，就具备了深入理解原型链的条件。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 01 Nov 2019 17:20:00 +0000</pubDate>
<dc:creator>致爱丽丝</dc:creator>
<og:description>要弄懂原型链，首先应先明白prototype原型对象、__proto__、对象三者之间的关系。 引入构造函数的相关定义： 构造函数是一种比较特殊的函数，用于批量实例化对象。通俗一点说，构造函数是用于生</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/hjk1124/p/11780403.html</dc:identifier>
</item>
<item>
<title>证书透明化日志工作原理 - YYRise</title>
<link>http://www.cnblogs.com/YYRise/p/11780205.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YYRise/p/11780205.html</guid>
<description>&lt;p&gt;译：&lt;a href=&quot;https://www.certificate-transparency.org/log-proofs-work&quot;&gt;How Log Proofs Work&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;
&lt;p&gt;证书透明日志使用特殊的加密算法有助于证书和日志的公共审查。这个特殊的加密算法称作&lt;strong&gt;默克哈希树（Merkle hash tree）&lt;/strong&gt; ，一种包含哈希叶和结点的简单二叉树（图1）。叶子是已附加到日志中的单个证书的哈希。节点是成对的子叶或成对的子节点的哈希。所有叶子和结点的根，即根哈希称作&lt;strong&gt;默克树哈希（Merkle tree hash）&lt;/strong&gt;。当日志服务器对默克树哈希（及其他信息）签名，称为&lt;strong&gt;签名树头（STH:signed tree head ）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.certificate-transparency.org/_/rsrc/1472780088776/log-proofs-work/ct_hash_1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;定期地，可能一小时一次，日志服务器将新获取到的证书追加到日志中。通过新获取到的证书创建单独的默克树哈希，该哈希和之前已在哈希树中的旧默克树哈希结合成新的默克树哈希（图2）。对新的默克树哈希签名创建新签名树头。反反复复的持续，之前提交到日志中的所有证书形成了一个不断增长的默克树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.certificate-transparency.org/_/rsrc/1472780088776/log-proofs-work/ct_hash_2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一致性证明和审计证明&quot;&gt;一致性证明和审计证明&lt;/h2&gt;
&lt;p&gt;因为这种构造方式，默克哈希树让日志高效迅速的证明两件事：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有证书被一致性地附加到日志中&lt;/li&gt;
&lt;li&gt;特定的证书附加到日志中&lt;br/&gt;日志通过提供两个加密证明来支持：默克一致性证明和默克审计证明。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;默克一致性证明&quot;&gt;默克一致性证明&lt;/h3&gt;
&lt;p&gt;默克一致性证明验证一条日志的任意两个版本是一致的：即，新版本包含旧版本的一切，换句话说，所有新条目紧跟在上个版本的条目后。如果证明日志是一致的，意味着没有过期的证书且插入到日志中，日志中没有证书被修改，且日志也没有分支过。&lt;/p&gt;
&lt;p&gt;为了演示默克一致性证明原理，假设要证明图2和图3中的日志是一致的。第一步，需要证明旧默克树哈希是新默克树哈希的子集。然后再证明新默克树哈希是旧默克树哈希加上所有中间新附加证书的结点哈希。一致性证明是计算这两者所需要的最少中间节点哈希集。&lt;/p&gt;
&lt;p&gt;这种情形下，一致性证明由以下中间节点哈希组成：&lt;code&gt;k&lt;/code&gt;，&lt;code&gt;l&lt;/code&gt;和&lt;code&gt;m&lt;/code&gt;（见图4）。用&lt;code&gt;k&lt;/code&gt;和&lt;code&gt;m&lt;/code&gt;创建旧默克树哈希，因此证明旧树存在且没有被改变。然后用&lt;code&gt;l&lt;/code&gt;和&lt;code&gt;k&lt;/code&gt;创建&lt;code&gt;n&lt;/code&gt;，用&lt;code&gt;n&lt;/code&gt;和&lt;code&gt;m&lt;/code&gt;创建日志新默克树哈希。如果计算的默克树哈希和日志中的相匹配，则日志是一致性的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.certificate-transparency.org/_/rsrc/1472780088776/log-proofs-work/ct_hash_3.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;监视器和审计定期使用一致性证明来验证日志是否正常。因为监视器通常有和日志中一样的证书列表，可以自行计算一致性证明，且验证日志中的一致性。设计可以简单的查询日志服务器，得到任意两个已签名树头的一致性证明。&lt;/p&gt;
&lt;h3 id=&quot;默克审计证明&quot;&gt;默克审计证明&lt;/h3&gt;
&lt;p&gt;默克审计证明可以验证日志中是否有特定的证书。这是一项重要的证明任务，因为证书透明模型需要的是所有TLS客户端拒绝没有在日志中出现的证书。&lt;/p&gt;
&lt;p&gt;为显示默克审计证明的原理，假设要验证&lt;code&gt;d3&lt;/code&gt;证书（&lt;code&gt;d&lt;/code&gt;叶子）已经附加到图3中里的日志中。默克审计证明是计算叶与树根之间的所有节点所需的缺少节点哈希。如果根据审计路径计算的根哈希和当前日志中的默克树哈希相匹配，则该叶子存在于树中（或换句话说，日志中存在该证书）。&lt;/p&gt;
&lt;p&gt;这个例子中，默克审计证明包含以下节点哈希：&lt;code&gt;c,i,n&lt;/code&gt;(见图5)。以为&lt;code&gt;d&lt;/code&gt;已知，则可以用&lt;code&gt;c&lt;/code&gt;计算出&lt;code&gt;j&lt;/code&gt;。然后用&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;j&lt;/code&gt;计算出&lt;code&gt;m&lt;/code&gt;，再用&lt;code&gt;n&lt;/code&gt;和&lt;code&gt;m&lt;/code&gt;计算出该日志的默克树哈希。同理，如果要验证证书&lt;code&gt;d4&lt;/code&gt;已经被附加到日志中，日志给你发送&lt;code&gt;f, l, m&lt;/code&gt; 结点哈希的一致性证明。已知叶子哈希（ &lt;code&gt;e&lt;/code&gt;）,也就能用叶子哈希&lt;code&gt;f&lt;/code&gt;计算出结点哈希&lt;code&gt;k&lt;/code&gt;，然后用结点哈希&lt;code&gt;l&lt;/code&gt;计算出结点哈希&lt;code&gt;n&lt;/code&gt;，再用结点哈希&lt;code&gt;m&lt;/code&gt;和&lt;code&gt;n&lt;/code&gt;计算出日志的默克树哈希。&lt;/p&gt;
&lt;p&gt;任何人都可以请求日志的默克树哈希，也能验证某个证书是否存在日志中。审计通常发送这些类型的请求到日志中，以便为TLS客户端验证证书。如果默克审计证明没有计算出和默克树哈希相匹配的根哈希，则意味着日志中不存在该证书。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.certificate-transparency.org/_/rsrc/1472780088776/log-proofs-work/ct_hash_5.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用证明&quot;&gt;使用证明&lt;/h2&gt;
&lt;p&gt;证明提供审计需要的加密数据。通知，审计了解日志的很少信息，但是尽管了解有限，证明能为审计验证日志的一致性和特定证书是否已附加到日志中。&lt;/p&gt;
&lt;p&gt;若没有证明，审计可能访问或回去所有的日志记录，以行使其职责。证明让数据交换更高效，日志和审计交换的数据量也少的多。举个例子，包好1000万个证书的日志仅需要24个结点哈希一致性证明。如果日志中增加到2000万个证书，一致性证明的结点哈希数量才到25个。&lt;/p&gt;
&lt;p&gt;证明对于监视器也很有用，尽管方式略有不同。监视器通常保存监控到的日志副本，以便检查日志的每个证书，且注意特定的证书。如果监视器检查监控到的特定日志的一致性，可以自己计算出一致性证明，然后验证日志的一致性。同样地，如果监视器总是需要特定的证书是否存在于日志中，也可以自己计算出审计证明，然后用该证明验证证书。&lt;/p&gt;
</description>
<pubDate>Fri, 01 Nov 2019 15:33:00 +0000</pubDate>
<dc:creator>YYRise</dc:creator>
<og:description>[TOC] 译： 'How Log Proofs Work' 概念 证书透明日志使用特殊的加密算法有助于证书和日志的公共审查。这个特殊的加密算法称作 默克哈希树（Merkle hash tree） ，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/YYRise/p/11780205.html</dc:identifier>
</item>
<item>
<title>CPU爆满后的无助感 - Captain_Li</title>
<link>http://www.cnblogs.com/lemon-le/p/11780148.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lemon-le/p/11780148.html</guid>
<description>&lt;p&gt;       晚七点刚好上地铁，握在手里的手机震动了好几下，根据震动这几下的手感已经判断出这是钉钉在告警了，十有八九就是线上的问题，通过Zabbix监控的一台线上服务器已经五分钟不可达，这应该不会是网络网络问题了，如果是网络问题，其他线上机器应该都会不可达。没背电脑，只能干着急，后来大概看了一下云平台是因为CPU过高导致的。过了大概半个小时，有自动恢复了。&lt;/p&gt;&lt;p&gt;       其实这个问题隐隐约约出现好几次了，只是没去重视，今天一来到公司就开始打开xshell，啪啪啪几下登录上去之后，袖子一卷，准备好好排查一下，看看到底是何方妖怪让我的CPU飙升还机器都连不上去。&lt;/p&gt;


&lt;p&gt;       呆呆的看着这个黑色的框框，没错，我呆呆的看着他看了一天了。因为我完全没有头绪，没有思路，从哪里下手？按照平时的套路，看日志，打开几个相关的日志，眼睛都瞄没了，也没找到什么有用的东西。网上搜索一下，看看有么有什么好的办法排查，打开Google，打开baidu，千篇一律，简直就是复制粘贴，基本上使用top找到CPU占用高的进程，然后看进程的日志。但是我现在已经不是第一现场了。回想起了以前面试的时候面试过经常会问当你的机器CPU突然很高时，你怎么办？头脑里也一次又一次的出现平时说要好好看看linux系统的书，没看，真后悔，等这次后我一定要把这方面的知识好好学习学习，系统的学习。可是等今晚回去睡一觉，明早一醒来，还是原样。&lt;/p&gt;


&lt;p&gt;      日复一日，年复一年，毕业已三年半，运维职业生涯将近四年。三天打鱼，两天晒网，今天看Docker，明天看ELK，样样都没学通。基础底层的东西还是一窍不通。有时候能明显的感觉到自己脑袋里那点知识是少之又少。现在做运维感觉都是很先进的东西，AIOps，DevOps，这些东西不学也不行。但我觉得不管什么Ops，基础还是很重要。还是打算在跟上时代的脚步时，想往系统运维这一块深入发展。&lt;/p&gt;&lt;p&gt;单从Zabbix的这几个CPU监控项来说，每个监控项的意义是什么，估计会难道一大批跟我一样的工程师们。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;system.cpu.switches            
system.cpu.util[,guest_nice]
system.cpu.util[,guest]        
system.cpu.util[,idle]        
system.cpu.util[,interrupt]    
system.cpu.util[,iowait]    
system.cpu.util[,&lt;/span&gt;&lt;span&gt;nice&lt;/span&gt;&lt;span&gt;]      
system.cpu.util[,softirq]    
system.cpu.util[,steal]        
system.cpu.util[,system]    
system.cpu.util[,user]        
system.cpu.intr                
system.cpu.load[percpu,avg1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;不知不觉天已黑，又到了下班，心里多了几分沉重感。&lt;/p&gt;
</description>
<pubDate>Fri, 01 Nov 2019 15:15:00 +0000</pubDate>
<dc:creator>Captain_Li</dc:creator>
<og:description>告警 晚七点刚好上地铁，握在手里的手机震动了好几下，根据震动这几下的手感已经判断出这是钉钉在告警了，十有八九就是线上的问题，通过Zabbix监控的一台线上服务器已经五分钟不可达，这应该不会是网络网络问</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/lemon-le/p/11780148.html</dc:identifier>
</item>
<item>
<title>基于appium实现的线性代码引用unittest单元测试框架 - 温一壶清酒</title>
<link>http://www.cnblogs.com/hong-fithing/p/11733788.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hong-fithing/p/11733788.html</guid>
<description>&lt;p&gt;在前段时间，分享了几篇关于appium基础的博文，再加上期间也有讲到unittest测试框架，所以今天就来一个专题，在appium+python实现的线性代码基础上，引入unittest框架，使代码更简洁。&lt;/p&gt;
&lt;p&gt;之前的博客，可以见以下链接快速阅读：&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/hong-fithing/p/11475812.html&quot;&gt;基于Python的Appium环境搭建合集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/hong-fithing/p/11546338.html&quot;&gt;Genymotion模拟器的安装及脚本制作&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/hong-fithing/p/11614039.html&quot;&gt;Appium Python API 中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/hong-fithing/p/11615628.html&quot;&gt;Appium-Server与Appium-Desktop的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/hong-fithing/p/11593345.html&quot;&gt;单元测试框架Uinttest一文详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在以上博文中，代码示例，很多只是个线性脚本，没有太多的实用之处，用来写个demo还是可以，但实际运用到产品中，就不行了。脚本还是得引用框架，这样看起来，代码就不会那么乱，更有逻辑性，便于维护。&lt;/p&gt;
&lt;p&gt;好了，进入正题，对unittest以及appium还不熟悉的，可以先阅读如上的博文了解，此篇文中，就不赘述了。&lt;/p&gt;
&lt;h2&gt;unittest代码优化一&lt;/h2&gt;
&lt;p&gt;优化逻辑：&lt;/p&gt;
&lt;p&gt;①将启用服务字段放到初始化当中&lt;/p&gt;
&lt;p&gt;②将输入账号、输入密码、获取当前activity的操作封装成一个个函数&lt;/p&gt;
&lt;p&gt;③在用例中去调用需要执行的函数&lt;/p&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; selenium
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; appium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span&gt;import&lt;/span&gt;&lt;span&gt; WebDriverWait
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest

&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
@author: wenyihuqingjiu
@project: appiumcode
@file: test_login.py
@time: 2019-10-20 22:11
@desc:
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;selenium version = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, selenium.&lt;span&gt;__version__&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; input_account(self):
    account &lt;/span&gt;= self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/rel_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    account.find_element_by_id(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/edit_acount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;定位输入框&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    self.driver.press_keycode(&lt;/span&gt;61&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;换行操作&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    account.send_keys(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账号输入完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    time.sleep(&lt;/span&gt;2&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; current(self):
    ac &lt;/span&gt;=&lt;span&gt; self.driver.current_activity
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;当前activity：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; ac)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; input_password(self):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; genymotion只需要一次换行&lt;/span&gt;
    self.driver.press_keycode(61&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;换行操作&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    password &lt;/span&gt;= self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/rel_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    password.find_element_by_id(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/edit_pass&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;定位输入框&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    password.send_keys(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输入密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    self.driver.find_element_by_xpath(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//android.widget.TextView[@text=&quot;登 录&quot;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).click()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点击登录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    time.sleep(&lt;/span&gt;5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; case_01(unittest.TestCase):
    @classmethod
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUpClass(cls):

        desired_caps &lt;/span&gt;=&lt;span&gt; {

            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformVersion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4.4.4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;deviceName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;S5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appPackage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 非首次登录的activity&lt;/span&gt;
            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;appActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.ui.login.view.LoginActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;udid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.66.101:5555&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;noReset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,


        }
        cls.driver &lt;/span&gt;= webdriver.Remote(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://192.168.1.101:4723/wd/hub&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, desired_caps)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务启动成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    @classmethod
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDownClass(cls):
        cls.driver.quit()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_img(self):
        self.imgs.append(self.driver.get_screenshot_as_base64())
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在是python3.x 中，如果在这里初始化driver ，因为3.x版本 unittestbasic1 运行机制不同，会导致用力失败时截图失败&lt;/span&gt;
        self.driver.implicitly_wait(30&lt;span&gt;)
        self.imgs &lt;/span&gt;=&lt;span&gt; []
        self.addCleanup(self.cleanup)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cleanup(self):
        &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_login01(self):
        input_account(self)
        current(self)
        input_password(self)


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    suites &lt;/span&gt;=&lt;span&gt; unittest.TestSuite()
    suites.addTest(case_01(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_login01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    runner &lt;/span&gt;= unittest.TextTestRunner(verbosity=2&lt;span&gt;)
    runner.run(suites)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;unittest代码优化二&lt;/h2&gt;
&lt;p&gt;优化逻辑：&lt;/p&gt;
&lt;p&gt;①将启用服务字段放到初始化当中&lt;/p&gt;
&lt;p&gt;②将输入账号、输入密码、获取当前activity的操作封装成一个个函数，并将数据参数做成形参&lt;/p&gt;
&lt;p&gt;③在用例中去调用需要执行的函数并入参&lt;/p&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; selenium
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; appium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span&gt;import&lt;/span&gt;&lt;span&gt; WebDriverWait
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest

&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
@author: wenyihuqingjiu
@project: appiumcode
@file: test_login.py
@time: 2019-10-20 22:11
@desc:
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;selenium version = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, selenium.&lt;span&gt;__version__&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; input_account(self, username):
    account &lt;/span&gt;= self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/rel_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    account.find_element_by_id(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/edit_acount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;定位输入框&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    self.driver.press_keycode(&lt;/span&gt;61&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;换行操作&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    account.send_keys(username)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账号输入完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    time.sleep(&lt;/span&gt;2&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; current(self):
    ac &lt;/span&gt;=&lt;span&gt; self.driver.current_activity
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;当前activity：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; ac)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; input_password(self, send_password):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; genymotion只需要一次换行&lt;/span&gt;
    self.driver.press_keycode(61&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;换行操作&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    password &lt;/span&gt;= self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/rel_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    password.find_element_by_id(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id/edit_pass&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;定位输入框&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    password.send_keys(send_password)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输入密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    self.driver.find_element_by_xpath(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//android.widget.TextView[@text=&quot;登 录&quot;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).click()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点击登录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    time.sleep(&lt;/span&gt;5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; case_01(unittest.TestCase):
    @classmethod
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUpClass(cls):

        desired_caps &lt;/span&gt;=&lt;span&gt; {

            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformVersion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4.4.4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;deviceName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;S5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appPackage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 非首次登录的activity&lt;/span&gt;
            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;appActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.ui.login.view.LoginActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;udid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.66.101:5555&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;noReset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,


        }
        cls.driver &lt;/span&gt;= webdriver.Remote(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://192.168.1.101:4723/wd/hub&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, desired_caps)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务启动成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    @classmethod
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDownClass(cls):
        cls.driver.quit()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_img(self):
        self.imgs.append(self.driver.get_screenshot_as_base64())
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在是python3.x 中，如果在这里初始化driver ，因为3.x版本 unittestbasic1 运行机制不同，会导致用力失败时截图失败&lt;/span&gt;
        self.driver.implicitly_wait(30&lt;span&gt;)
        self.imgs &lt;/span&gt;=&lt;span&gt; []
        self.addCleanup(self.cleanup)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cleanup(self):
        &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_login01(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 正常登录&lt;/span&gt;
        input_account(self, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
        current(self)
        input_password(self, &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
        
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_login02(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 异常登录&lt;/span&gt;
        input_account(self, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
        current(self)
        input_password(self, &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    suites &lt;/span&gt;=&lt;span&gt; unittest.TestSuite()
    suites.addTest(case_01(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_login01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    suites.addTest(case_01(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_login02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    runner &lt;/span&gt;= unittest.TextTestRunner(verbosity=2&lt;span&gt;)
    runner.run(suites)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上述代码可看出，使用更方便了，可以满足正向/反向的用例设计了，是不是很简单。&lt;/p&gt;
&lt;p&gt;代码可扩展性还有很多，在unittest基础上，再引入PO模式，那代码的健壮性就更高了，以后有时间再出类似博文。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;29.483394833948&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;本文仅代表作者观点，系作者@温一壶清酒发表。&lt;br/&gt;欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;br/&gt;文章出处：&lt;a href=&quot;http://www.cnblogs.com/hong-fithing/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hong-fithing/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 01 Nov 2019 15:08:00 +0000</pubDate>
<dc:creator>温一壶清酒</dc:creator>
<og:description>在前段时间，分享了几篇关于appium基础的博文，再加上期间也有讲到unittest测试框架，所以今天就来一个专题，在appium+python实现的线性代码基础上，引入unittest框架，使代码更</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/hong-fithing/p/11733788.html</dc:identifier>
</item>
</channel>
</rss>