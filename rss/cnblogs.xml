<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>倒计时组件 - 张雪冬前端学习园地</title>
<link>http://www.cnblogs.com/zxuedong/p/13058952.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zxuedong/p/13058952.html</guid>
<description>
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 一个元素显示倒计时 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;span&gt;=&quot;isEndStatus&quot;&lt;/span&gt;&lt;span&gt; v-if&lt;/span&gt;&lt;span&gt;=&quot;!manyElement&quot;&lt;/span&gt;&lt;span&gt; :style&lt;/span&gt;&lt;span&gt;=&quot;{ color }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ countDownItem }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 多元素倒计时 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;span&gt;=&quot;isEndStatus&quot;&lt;/span&gt;&lt;span&gt; :style&lt;/span&gt;&lt;span&gt;=&quot;{ color }&quot;&lt;/span&gt;&lt;span&gt; v-else&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;customMany&quot;&lt;/span&gt;&lt;span&gt; :slot-scope&lt;/span&gt;&lt;span&gt;=&quot;splitElement&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(item, index) in splitElement&quot;&lt;/span&gt;&lt;span&gt; :key&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
          {{ index !== splitElement.length - 1 ? item + separator : item }}
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  name: &lt;/span&gt;'count-down'&lt;span&gt;,
  props: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 结束的时间毫秒数&lt;/span&gt;
&lt;span&gt;    actEndTime: {
      type: Number,
      &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: Date.now() + 10000&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示倒计时格式&lt;/span&gt;
&lt;span&gt;    countDownList: {
      type: String,
      &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: 'dd-hh-mm-xx'&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字体颜色&lt;/span&gt;
&lt;span&gt;    color: {
      type: String,
      &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: '#000000'&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分隔符&lt;/span&gt;
&lt;span&gt;    separator: {
      type: String,
      &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: ''&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否开启多元素显示效果&lt;/span&gt;
&lt;span&gt;    manyElement: {
      type: Boolean,
      &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    }
  },
  data () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      countDownItem: &lt;/span&gt;''&lt;span&gt;,
      newTime: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 倒计时是否执行完毕&lt;/span&gt;
      isEndStatus: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }
  },
  computed: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多元素显示处理&lt;/span&gt;
&lt;span&gt;    splitElement () {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.manyElement) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.countDownItem.split(&lt;span&gt;this&lt;/span&gt;.separator || ' '&lt;span&gt;)
      }
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.countDownItem.split(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.separator)
    }
  },
  methods: {
    timeFormat (param) {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; param &amp;lt; 10 ? '0' +&lt;span&gt; param : param
    },
    countDown () {
      const interval &lt;/span&gt;= setInterval(() =&amp;gt;&lt;span&gt; {
        const newTime &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime()
        const endTime &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Date(&lt;span&gt;this&lt;/span&gt;.actEndTime + 2000&lt;span&gt;).getTime()
        let obj &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (endTime - newTime &amp;gt; 0&lt;span&gt;) {
          const time &lt;/span&gt;= (endTime - newTime) / 1000&lt;span&gt;
          const day &lt;/span&gt;= parseInt(time / (60 * 60 * 24&lt;span&gt;))
          const hou &lt;/span&gt;= parseInt((time % (60 * 60 * 24)) / 3600&lt;span&gt;)
          const min &lt;/span&gt;= parseInt(((time % (60 * 60 * 24)) % 3600) / 60&lt;span&gt;)
          const sec &lt;/span&gt;= parseInt(((time % (60 * 60 * 24)) % 3600) % 60&lt;span&gt;)
          obj &lt;/span&gt;=&lt;span&gt; {
            dd: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.timeFormat(day),
            hh: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.timeFormat(hou),
            mm: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.timeFormat(min),
            xx: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.timeFormat(sec)
          }
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.newTime) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('start-click', &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.newTime)
          }
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 倒计时结束&lt;/span&gt;
          obj =&lt;span&gt; {
            dd: &lt;/span&gt;'00'&lt;span&gt;,
            hh: &lt;/span&gt;'00'&lt;span&gt;,
            mm: &lt;/span&gt;'00'&lt;span&gt;,
            xx: &lt;/span&gt;'00'&lt;span&gt;
          }
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.isEndStatus = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
          clearInterval(interval)
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('end-click', &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.countDownItem)
        }
        const timeList &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.countDownList.split('-'&lt;span&gt;)
        const dateList &lt;/span&gt;= ['日', '时', '分', '秒'&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.newTime = ''
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环判断如果用户传过来的日期，包含对象中的属性，那么就使用该属性的值&lt;/span&gt;
        Object.keys(obj).forEach((key, index) =&amp;gt;&lt;span&gt; {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (timeList.includes(key)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是最后一组，就不加分隔符&lt;/span&gt;
            const separLen = index !== dateList.length - 1 ? &lt;span&gt;this&lt;/span&gt;.separator : ''
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断数据占位元素问题&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.manyElement) {
              &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.newTime += obj[key] += dateList[index] + ' ' +&lt;span&gt; separLen
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
              &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.newTime += obj[key] += dateList[index] +=&lt;span&gt; separLen
            }
          }
        })
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countDownItem = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.newTime
      }, &lt;/span&gt;1000&lt;span&gt;)
    }
  },
  mounted () {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.countDown()
  }
}
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数详解&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

    1.actEndTime（Number）：倒计时结束的时间，毫秒数

    2.countDownList（String）：倒计时显示的时间要求（dd(日)-hh(时)-mm(分)-xx(秒)）

    3.color（String）：字体颜色

    4.separator（String）：分隔符

    5.manyElement（Boolean）：是否开启多元素显示效果

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 07 Jun 2020 00:15:00 +0000</pubDate>
<dc:creator>张雪冬前端学习园地</dc:creator>
<og:description>倒计时组件</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zxuedong/p/13058952.html</dc:identifier>
</item>
<item>
<title>这是对我最大的认可和鼓励 - 程序员cxuan</title>
<link>http://www.cnblogs.com/cxuanBlog/p/13058931.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cxuanBlog/p/13058931.html</guid>
<description>&lt;p&gt;可能一些小伙伴们不太清楚是怎么回事，是这样的。&lt;/p&gt;
&lt;p&gt;我最近肝了三本 PDF，分别是 《Java核心技术总结》、《HTTP核心总结》、《程序员必知的硬核知识》，其中最后一本书也就是《程序员必知的硬核知识》已经被 &lt;code&gt;人民邮电出版社图灵社区&lt;/code&gt; 官方认可，并已经放在了官网上的随书下载里，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075309273-489122541.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是 word 版本的笔记，小伙伴们可以进行下载阅读，不只是这一本书，还放在了 《计算机是怎样跑起来的》随书下载中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075317152-1934232977.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除此之外，这份 《程序员必知的硬核知识》已经被 &lt;code&gt;中国青年出版社&lt;/code&gt; 打印成册并随书赠送给读者了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075324640-1308217414.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;感兴趣的小伙伴可以买本书看看有木有啊 哈哈哈。&lt;/p&gt;
&lt;p&gt;这本 PDF 可以在我的文末公众号回复 &lt;code&gt;计算机基础&lt;/code&gt; 领取 PDF 版本&lt;/p&gt;
&lt;p&gt;另外还有一件事情，因为我最近在写操作系统，我在知乎有一片回答是目前我最高赞的回答了，我的操作系统系列再也继续更新，欢迎小伙伴们&lt;code&gt;持续关注&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我在刷《现代操作系统》，这是操作系统非常经典的书籍。推荐中英结合来看。目前已经整理出来前四张的内容了，是我根据中文版和英文版结合来看的，下附我的文章链接&lt;/p&gt;
&lt;p&gt;第一章：操作系统介绍&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&amp;amp;mid=2247485559&amp;amp;idx=1&amp;amp;sn=dfc9973ebf045284c771efa74cfc4ee7&amp;amp;chksm=fc45f584cb327c92bf4f5854c5dca343bc35a30bf385fa42b4d8d3f0d08ea48d59416dc9a7dc&amp;amp;token=1832003990&amp;amp;lang=zh_CN#rd&quot;&gt;写给大忙人看的操作系统&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第二章：关于进程和线程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&amp;amp;mid=2247485619&amp;amp;idx=1&amp;amp;sn=819fffc4380b4e976f541def5ed805f3&amp;amp;chksm=fc45f540cb327c560e4eb5747183faec42fcc77c6061effaf36e28faef689f920a54d5a78eeb&amp;amp;token=1832003990&amp;amp;lang=zh_CN#rd&quot;&gt;写给大忙人看的进程和线程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三章：内存管理&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&amp;amp;mid=2247485714&amp;amp;idx=1&amp;amp;sn=58ca990e0bdc336115ffab7f3169e8c9&amp;amp;chksm=fc45f4e1cb327df7964f55425da2e9934af342de21fee16e14596967a5ab2143cd8d24ddbe08&amp;amp;token=1832003990&amp;amp;lang=zh_CN#rd&quot;&gt;内存管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第四章：文件管理&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&amp;amp;mid=2247485927&amp;amp;idx=1&amp;amp;sn=a05bd80ed7147ed9b66be3807747c450&amp;amp;chksm=fc45f414cb327d02af3b615570270907f3cb9042819bee232ac52ec141d1897790dcdcf7eab1&amp;amp;token=1832003990&amp;amp;lang=zh_CN#rd&quot;&gt;文件管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种黑皮书么得办法，只能硬刷。我先放出来前四章的脑图&lt;/p&gt;
&lt;p&gt;第一章：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075336273-1211887314.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二章：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075345791-848531115.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三章：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075352819-2145150455.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第四章：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075401151-145986577.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对了，如果你刷《现代操作系统》第四版的时候，有两个问题需要注意一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075409825-1342746423.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075418652-921992206.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;知错能改，善莫大焉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075426023-745119574.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不过出版社还是很 Nice 的，得知我提出问题后，不仅积极和译者进行沟通，还送了我三本黑皮书，感谢机械工业出版社。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075433863-1247317598.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我集齐了7本书，可以召唤神龙了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075443087-1702247485.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打算刷完《现代操作系统》后，要看一下《操作系统概念》这本书。还有《自己动手写操作系统》&lt;/p&gt;
&lt;p&gt;我还在 B 站上找了一些黑皮书的视频，大家可以围观下。&lt;/p&gt;
&lt;p&gt;机械工业黑皮书系列 B 站视频&lt;/p&gt;
&lt;p&gt;《现代操作系统》：&lt;a href=&quot;https://www.bilibili.com/video/av9555596?from=search&amp;amp;seid=8107077283516919308&quot;&gt;https://www.bilibili.com/video/av9555596?from=search&amp;amp;seid=8107077283516919308&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《算法导论》&lt;a href=&quot;https://www.bilibili.com/video/av48922404?from=search&amp;amp;seid=10653982037326460685&quot;&gt;https://www.bilibili.com/video/av48922404?from=search&amp;amp;seid=10653982037326460685&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《深入理解计算机系统》&lt;a href=&quot;https://www.bilibili.com/video/av31289365?from=search&amp;amp;seid=16298868573410423104&quot;&gt;https://www.bilibili.com/video/av31289365?from=search&amp;amp;seid=16298868573410423104&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《计算机网络：自顶向下方法》：&lt;a href=&quot;https://www.bilibili.com/video/av41404195?from=search&amp;amp;seid=15854652450440912260&quot;&gt;https://www.bilibili.com/video/av41404195?from=search&amp;amp;seid=15854652450440912260&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《计算机程序的构造和解释》：&lt;a href=&quot;https://www.bilibili.com/video/av8515129?from=search&amp;amp;seid=537958487190286356&quot;&gt;https://www.bilibili.com/video/av8515129?from=search&amp;amp;seid=537958487190286356&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《编译原理》： &lt;a href=&quot;https://www.bilibili.com/video/av17649289?from=search&amp;amp;seid=5673462623145874347&quot;&gt;https://www.bilibili.com/video/av17649289?from=search&amp;amp;seid=5673462623145874347&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《数据库系统概念》：&lt;a href=&quot;https://www.bilibili.com/video/av52007695?from=search&amp;amp;seid=9723583724024090244&quot;&gt;https://www.bilibili.com/video/av52007695?from=search&amp;amp;seid=9723583724024090244&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有一个比较不错的开源项目，是我偶然发现的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075456375-637175225.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至于为什么要学习计算机技术，我想重要性不言而喻吧，下图也能说明，不过现在企业还不重视这些，不能带来直接的经济效益，面试也不长问，怎么说呢，毕竟这些是内功，程序员的个人修养。要坚持刷完～&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075504500-39140347.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;希望我的回答能够帮助到你，另外附一下左耳朵耗子-耗子叔说的话。&lt;/p&gt;
&lt;p&gt;计算机自学即可，如果你想到我这里找捷径，那你可能找错人了。&lt;/p&gt;
&lt;p&gt;希望能给你提供帮助。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/keithnull/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md&quot;&gt;https://github.com/keithnull/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-----------------------------------2020/5/08日更新-----------------------------------&lt;/p&gt;
&lt;p&gt;最近操作系统刷的比较少了，因为开工了，最近分享了一些 Java 方向的，不过有时间还是把操作系统硬核概念汇总了一下，希望对知友有所帮助。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/1c7/Crash-Course-Computer-Science-Chinese&quot;&gt;https://github.com/1c7/Crash-Course-Computer-Science-Chinese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-----------------------------------2020/05/25日更新-----------------------------------&lt;/p&gt;
&lt;p&gt;最近真的太忙了，不过第五章输入输出已经着手准备了，下面是第五章的第一部分&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&amp;amp;mid=2247486084&amp;amp;idx=1&amp;amp;sn=d253fd760e1f94feb277be1f8b6c4d99&amp;amp;chksm=fc45f777cb327e612eb86f1413ba249ccf6cbb503971240b69fb6f997155b5cd430e893d6f41&amp;amp;token=1832003990&amp;amp;lang=zh_CN#rd&quot;&gt;计算机最魔幻的事情就是它能感知到你的思想&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，我还抽空写了一篇关于操作系统的面试题系列，写的不好，还请知乎各位大佬多多指教。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/mC_zZuMBYd5FdmI241uqqQ&quot;&gt;操作系统面试题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-----------------------------------2020/05/29日更新-----------------------------------&lt;/p&gt;
&lt;p&gt;最近我从自己的学习总结还有一些优秀的回答中提出出来了一些非常硬核的操作系统学习网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/PP0lqAvcD5MlWFlNNOM1HQ&quot;&gt;操作系统学习网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-----------------------------------2020/06/01日更新-----------------------------------&lt;/p&gt;
&lt;p&gt;继续更新了，下面更新一下第五章第二篇文章，关于 I/O 软件原理的探讨&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0ODk2NDIyMQ==&amp;amp;mid=2247484489&amp;amp;idx=1&amp;amp;sn=71991af3f9e98518b972f92a1aa9f2c1&amp;amp;chksm=e999f15bdeee784dfeb93af4de0760e3e941d65986776383554f97deaed175b6d9f0528961be&amp;amp;token=1268790283&amp;amp;lang=zh_CN#rd&quot;&gt;说了这么多次 I/O，可你知道其中的原理么&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I/O 这章真的是非常繁琐和复杂的一篇，下面会探讨关于磁盘的细节，请小伙伴们持续关注&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1515111/202006/1515111-20200607075541078-214235177.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 06 Jun 2020 23:55:00 +0000</pubDate>
<dc:creator>程序员cxuan</dc:creator>
<og:description>可能一些小伙伴们不太清楚是怎么回事，是这样的。 我最近肝了三本 PDF，分别是 《Java核心技术总结》、《HTTP核心总结》、《程序员必知的硬核知识》，其中最后一本书也就是《程序员必知的硬核知识》已</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cxuanBlog/p/13058931.html</dc:identifier>
</item>
<item>
<title>小师妹学JavaIO之:目录还是文件 - flydean</title>
<link>http://www.cnblogs.com/flydean/p/java-io-directory.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flydean/p/java-io-directory.html</guid>
<description>&lt;p&gt;目录和文件傻傻分不清楚，目录和文件的本质到底是什么？在java中怎么操纵目录，怎么遍历目录。本文F师兄会为大家一一讲述。&lt;/p&gt;

&lt;p&gt;小师妹：F师兄，我最近有一个疑惑，java代码中好像只有文件没有目录呀，是不是当初发明java的大神，一不小心走了神？&lt;/p&gt;
&lt;p&gt;F师兄:小师妹真勇气可嘉呀，敢于质疑权威是从小工到专家的最重要的一步。想想F师兄我，从小没人提点，老师讲什么我就信什么，专家说什么我就听什么:股市必上一万点，房子是给人住的不是给人炒的,原油宝当然是小白理财必备产品....然后，就没有然后了。&lt;/p&gt;
&lt;p&gt;更多精彩内容且看：&lt;/p&gt;
&lt;blockquote readability=&quot;2.9166666666667&quot;&gt;
&lt;p&gt;更多内容请访问&lt;a href=&quot;https://www.cnblogs.com/flydean/p/www.flydean.com&quot;&gt;www.flydean.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然java中没有目录的概念只有File文件，而File其实是可以表示目录的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public boolean isDirectory()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;File中有个isDirectory方法，可以判断该File是否是目录。&lt;/p&gt;
&lt;p&gt;File和目录傻傻分不清楚，小师妹，有没有联想到点什么？&lt;/p&gt;
&lt;p&gt;小师妹：F师兄，我记得你上次讲到Linux下面所有的资源都可以看做是文件，在linux下面文件和目录的本质是不是一样的？&lt;/p&gt;
&lt;p&gt;对的，在linux下面文件是一等公民，所有的资源都是以文件的形式来区分的。&lt;/p&gt;
&lt;p&gt;什么扇区，逻辑块，页之类的底层结构我们就不讲了。我们先考虑一下一个文件到底应该包含哪些内容。除了文件本身的数据之外，还有很多元数据的东西，比如文件权限，所有者，group，创建时间等信息。&lt;/p&gt;
&lt;p&gt;在linux系统中，这两个部分是分开存储的。存放数据本身的叫做block，存放元数据的叫做inode。&lt;/p&gt;
&lt;p&gt;inode中存储了block的地址，可以通过inode找到文件实际数据存储的block地址，从而进行文件访问。考虑一下大文件可能占用很多个block，所以一个inode中可以存储多个block的地址，而一个文件通常来说使用一个inode就够了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200517214103157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_0,text_aHR0cDovL3d3dy5mbHlkZWFuLmNvbQ==,size_35,color_8F8F8F,t_70&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了显示层级关系和方便文件的管理，目录的数据文件中存放的是该目录下的文件和文件的inode地址，从而形成了一种一环套一环，圆环套圆环的链式关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200517215635842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_0,text_aHR0cDovL3d3dy5mbHlkZWFuLmNvbQ==,size_35,color_8F8F8F,t_70&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图列出了一个通过目录查找其下文件的环中环布局。&lt;/p&gt;
&lt;p&gt;我想java中目录没有单独列出来一个类的原因可能是参考了linux底层的文件布局吧。&lt;/p&gt;

&lt;p&gt;因为在java中目录和文件是公用File这个类的，所以File的基本操作目录它全都会。&lt;/p&gt;
&lt;p&gt;基本上，目录和文件相比要多注意下面三类方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public boolean isDirectory()
public File[] listFiles() 
public boolean mkdir() 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么说是三类呢？因为还有几个和他们比较接近的方法，这里就不一一列举了。&lt;/p&gt;
&lt;p&gt;isDirectory判断该文件是不是目录。listFiles列出该目录下面的所有文件。mkdir创建一个文件目录。&lt;/p&gt;
&lt;p&gt;小师妹:F师兄，之前我们还以目录的遍历要耗费比较长的时间，经过你一讲解目录的数据结构，感觉listFiles并不是一个耗时操作呀，所有的数据都已经准备好了，直接读取出来就行。&lt;/p&gt;
&lt;p&gt;对，看问题不要看表面，要看到隐藏在表面的本质内涵。你看师兄我平时不显山露水，其实是真正的中流砥柱，堪称公司优秀员工模范。&lt;/p&gt;
&lt;p&gt;小师妹:F师兄，那平时也没看上头表彰你啥的？哦，我懂了，一定是老板怕表彰了你引起别人的嫉妒，会让你的好好大师兄的形象崩塌吧，看来老板真的懂你呀。&lt;/p&gt;

&lt;p&gt;好了小师妹，你懂了就行，下面F师兄给你讲一下目录的进阶操作，比如我们怎么拷贝一个目录呀？&lt;/p&gt;
&lt;p&gt;小师妹，拷贝目录简单的F师兄，上次你就教我了：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;cp -rf
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一个命令的事情不就解决了吗？难道里面还隐藏了点秘密？&lt;/p&gt;
&lt;p&gt;咳咳咳，秘密倒是没有，小师妹，我记得你上次说要对java从一而终的，今天师兄给你介绍一个在java中拷贝文件目录的方法。&lt;/p&gt;
&lt;p&gt;其实Files工具类里已经为我们提供了一个拷贝文件的优秀方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public static Path copy(Path source, Path target, CopyOption... options)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用这个方法，我们就可以进行文件的拷贝了。&lt;/p&gt;
&lt;p&gt;如果想要拷贝目录，就遍历目录中的文件，循环调用这个copy方法就够了。&lt;/p&gt;
&lt;p&gt;小师妹：且慢，F师兄，如果目录下面还有目录的，目录下还套目录的情况该怎么处理？&lt;/p&gt;
&lt;p&gt;这就是圈套呀，看我用个递归的方法解决它：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public void useCopyFolder() throws IOException {
        File sourceFolder = new File(&quot;src/main/resources/flydean-source&quot;);
        File destinationFolder = new File(&quot;src/main/resources/flydean-dest&quot;);
        copyFolder(sourceFolder, destinationFolder);
    }

    private static void copyFolder(File sourceFolder, File destinationFolder) throws IOException
    {
        //如果是dir则递归遍历创建dir，如果是文件则直接拷贝
        if (sourceFolder.isDirectory())
        {
            //查看目标dir是否存在
            if (!destinationFolder.exists())
            {
                destinationFolder.mkdir();
                log.info(&quot;目标dir已经创建: {}&quot;,destinationFolder);
            }
            for (String file : sourceFolder.list())
            {
                File srcFile = new File(sourceFolder, file);
                File destFile = new File(destinationFolder, file);
                copyFolder(srcFile, destFile);
            }
        }
        else
        {
            //使用Files.copy来拷贝具体的文件
            Files.copy(sourceFolder.toPath(), destinationFolder.toPath(), StandardCopyOption.REPLACE_EXISTING);
            log.info(&quot;拷贝目标文件: {}&quot;,destinationFolder);
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;基本思想就是遇到目录我就遍历，遇到文件我就拷贝。&lt;/p&gt;

&lt;p&gt;小师妹：F师兄，假如我想删除一个目录中的文件，或者我们想统计一下这个目录下面到底有多少个文件该怎么做呢？&lt;/p&gt;
&lt;p&gt;虽然这些操作有点腰疼，还是可以解决的，Files工具类中有个方法叫做walk，返回一个Stream对象，我们可以使用Stream的API来对文件进行处理。&lt;/p&gt;
&lt;p&gt;删除文件：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public void useFileWalkToDelete() throws IOException {
        Path dir = Paths.get(&quot;src/main/resources/flydean&quot;);
        Files.walk(dir)
                .sorted(Comparator.reverseOrder())
                .map(Path::toFile)
                .forEach(File::delete);
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;统计文件：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt; public void useFileWalkToSumSize() throws IOException {

        Path folder = Paths.get(&quot;src/test/resources&quot;);
        long size = Files.walk(folder)
                .filter(p -&amp;gt; p.toFile().isFile())
                .mapToLong(p -&amp;gt; p.toFile().length())
                .sum();
        log.info(&quot;dir size is: {}&quot;,size);
    }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;本文介绍了目录的一些非常常见和有用的操作。&lt;/p&gt;
&lt;p&gt;本文的例子&lt;a href=&quot;https://github.com/ddean2009/learn-java-io-nio&quot;&gt;https://github.com/ddean2009/learn-java-io-nio&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8.7106598984772&quot;&gt;
&lt;p&gt;本文作者：flydean程序那些事&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a href=&quot;http://www.flydean.com/java-io-directory/&quot;&gt;http://www.flydean.com/java-io-directory/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文来源：flydean的博客&lt;/p&gt;
&lt;p&gt;欢迎关注我的公众号:程序那些事，更多精彩等着您！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 06 Jun 2020 23:39:00 +0000</pubDate>
<dc:creator>flydean</dc:creator>
<og:description>简介 目录和文件傻傻分不清楚，目录和文件的本质到底是什么？在java中怎么操纵目录，怎么遍历目录。本文F师兄会为大家一一讲述。 linux中的文件和目录 小师妹：F师兄，我最近有一个疑惑，java代码</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/flydean/p/java-io-directory.html</dc:identifier>
</item>
<item>
<title>01、MyBatis HelloWorld - Pluto_H</title>
<link>http://www.cnblogs.com/CSAH/p/13058311.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CSAH/p/13058311.html</guid>
<description>&lt;p&gt;1. MyBatis简介&lt;/p&gt;
&lt;p&gt;1）MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架&lt;/p&gt;
&lt;p&gt;2）MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集&lt;/p&gt;
&lt;p&gt;3）MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的 Java 对象）映射成数据库中的记录&lt;/p&gt;
&lt;p&gt;2. 使用 MyBatis原因&lt;/p&gt;
&lt;p&gt;1)JDBC&lt;/p&gt;
&lt;p&gt;(1)SQL 夹在 Java 代码块里，耦合度高导致硬编码内伤&lt;/p&gt;
&lt;p&gt;(2)维护不易且实际开发需求中 sql 是有变化，频繁修改的情况多见&lt;/p&gt;
&lt;p&gt;2)Hibernate 和 JPA&lt;/p&gt;
&lt;p&gt;(1)长难复杂 SQL，对于 Hibernate 而言处理也不容易&lt;/p&gt;
&lt;p&gt;(2)内部自动生产的 SQL，不容易做特殊优化&lt;/p&gt;
&lt;p&gt;(3)基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。导致数据库性能下降&lt;/p&gt;
&lt;p&gt;3)MyBatis&lt;/p&gt;
&lt;p&gt;(1)对开发人员而言，核心 sql 还是需要自己优化&lt;/p&gt;
&lt;p&gt;(2)sql 和 java 编码分开，功能边界清晰，一个专注业务、一个专注数据&lt;/p&gt;
&lt;p&gt;3. MyBatis下载&lt;/p&gt;
&lt;p&gt;1)下载网址&lt;/p&gt;
&lt;p&gt;https://github.com/mybatis/mybatis-3/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607020639129-1864171774.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607020644823-1124046498.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607020653616-658101660.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;4. MyBatis HelloWorld&lt;/p&gt;
&lt;p&gt;  · HelloWorld&lt;/p&gt;
&lt;p&gt; – 创建一张测试表&lt;/p&gt;
&lt;p&gt;    – 创建对应的javaBean&lt;/p&gt;
&lt;p&gt;    – 创建mybatis配置文件，sql映射文件&lt;/p&gt;
&lt;p&gt;    – 测试&lt;/p&gt;
&lt;p&gt;1) 开发环境准备&lt;/p&gt;
&lt;p&gt;(1) 导入 MyBatis 框架的 jar 包、Mysql 驱动包、log4j 的 jar 包&lt;/p&gt;
&lt;p&gt;log4j:经典的一种日志解决方案。内部把日志系统抽象封装成Logger 、appender 、pattern 等实现。我们可以通过配置文件轻松的实现日志系统的管理和多样化配置。&lt;/p&gt;
&lt;p&gt;mysql-connector:连接数据库的驱动&lt;/p&gt;
&lt;p&gt;mybatis:使用mybatis框架&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;center&quot; width=&quot;775&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;log4j-1.2.17.jar&lt;/p&gt;
&lt;p&gt;mybatis-3.4.1.jar&lt;/p&gt;
&lt;p&gt;mysql-connector-java-5.1.37-bin.jar&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;(2)导入log4j的配置文件 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5167889e-eac8-4156-b1fd-9ae1141dcb8f')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_5167889e-eac8-4156-b1fd-9ae1141dcb8f&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_5167889e-eac8-4156-b1fd-9ae1141dcb8f&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5167889e-eac8-4156-b1fd-9ae1141dcb8f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &amp;lt;&lt;span&gt;log4j:configuration
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;appender name=&quot;STDOUT&quot;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.log4j.ConsoleAppender&quot;&amp;gt;
&lt;span&gt; 9&lt;/span&gt;         &amp;lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.log4j.PatternLayout&quot;&amp;gt;
&lt;span&gt;11&lt;/span&gt;             &amp;lt;param name=&quot;ConversionPattern&quot;
&lt;span&gt;12&lt;/span&gt;                 value=&quot;%-5p %d{MM-dd HH:mm:ss,SSS} %m  (%F:%L) \n&quot; /&amp;gt;
&lt;span&gt;13&lt;/span&gt;         &amp;lt;/layout&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;lt;/appender&amp;gt;
&lt;span&gt;15&lt;/span&gt;     &amp;lt;logger name=&quot;java.sql&quot;&amp;gt;
&lt;span&gt;16&lt;/span&gt;         &amp;lt;level value=&quot;debug&quot; /&amp;gt;
&lt;span&gt;17&lt;/span&gt;     &amp;lt;/logger&amp;gt;
&lt;span&gt;18&lt;/span&gt;     &amp;lt;logger name=&quot;org.apache.ibatis&quot;&amp;gt;
&lt;span&gt;19&lt;/span&gt;         &amp;lt;level value=&quot;info&quot; /&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;/logger&amp;gt;
&lt;span&gt;21&lt;/span&gt;     &amp;lt;root&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;level value=&quot;debug&quot; /&amp;gt;
&lt;span&gt;23&lt;/span&gt;         &amp;lt;appender-ref ref=&quot;STDOUT&quot; /&amp;gt;
&lt;span&gt;24&lt;/span&gt;     &amp;lt;/root&amp;gt;
&lt;span&gt;25&lt;/span&gt; &amp;lt;/log4j:configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;log4j.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2)创建Mysql测试表&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;center&quot; width=&quot;775&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;-- 创建库&lt;/p&gt;
&lt;p&gt;CREATE DATABASE test_mybatis;&lt;/p&gt;
&lt;p&gt;-- 使用库&lt;/p&gt;
&lt;p&gt;USE test_mybatis;&lt;/p&gt;
&lt;p&gt;-- 创建表&lt;/p&gt;
&lt;p&gt;CREATE TABLE tbl_employee(&lt;/p&gt;
&lt;p&gt;  id INT(11) PRIMARY KEY AUTO_INCREMENT,&lt;/p&gt;
&lt;p&gt;  last_name VARCHAR(50),&lt;/p&gt;
&lt;p&gt;  email VARCHAR(50),&lt;/p&gt;
&lt;p&gt;  gender CHAR(1)&lt;/p&gt;
&lt;p&gt;);&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;3)Employee&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;使用&lt;/span&gt;Employee接收数据库的记录. &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f0a34669-436c-42a4-92df-a7382aad9127')&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_f0a34669-436c-42a4-92df-a7382aad9127&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_f0a34669-436c-42a4-92df-a7382aad9127&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f0a34669-436c-42a4-92df-a7382aad9127&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Employee {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lastName;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String email;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String gender;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     
&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLastName() {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lastName;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLastName(String lastName) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.lastName =&lt;span&gt; lastName;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getEmail() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; email;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setEmail(String email) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.email =&lt;span&gt; email;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getGender() {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; gender;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setGender(String gender) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.gender =&lt;span&gt; gender;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Employee [id=&quot; + id + &quot;, lastName=&quot; + lastName + &quot;, email=&quot;
&lt;span&gt;36&lt;/span&gt;                 + email + &quot;, gender=&quot; + gender + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Employee.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;4)配置文件&lt;/p&gt;
&lt;p&gt;(1)参考MyBatis官方手册&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607021109953-459860850.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cb6fb9b5-431c-4340-a8d6-3b3e08f0015d')&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_cb6fb9b5-431c-4340-a8d6-3b3e08f0015d&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_cb6fb9b5-431c-4340-a8d6-3b3e08f0015d&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cb6fb9b5-431c-4340-a8d6-3b3e08f0015d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&lt;span&gt; 4&lt;/span&gt;   &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;configuration&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;environments &lt;span&gt;default&lt;/span&gt;=&quot;development&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;         &amp;lt;environment id=&quot;development&quot;&amp;gt;
&lt;span&gt; 8&lt;/span&gt;             &amp;lt;transactionManager type=&quot;JDBC&quot; /&amp;gt;
&lt;span&gt; 9&lt;/span&gt;             &amp;lt;dataSource type=&quot;POOLED&quot;&amp;gt;
&lt;span&gt;10&lt;/span&gt;                 &amp;lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&amp;gt;
&lt;span&gt;11&lt;/span&gt;                 &amp;lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot; /&amp;gt;
&lt;span&gt;12&lt;/span&gt;                 &amp;lt;property name=&quot;username&quot; value=&quot;root&quot; /&amp;gt;
&lt;span&gt;13&lt;/span&gt;                 &amp;lt;property name=&quot;password&quot; value=&quot;root123&quot; /&amp;gt;
&lt;span&gt;14&lt;/span&gt;             &amp;lt;/dataSource&amp;gt;
&lt;span&gt;15&lt;/span&gt;         &amp;lt;/environment&amp;gt;
&lt;span&gt;16&lt;/span&gt;     &amp;lt;/environments&amp;gt;
&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     &amp;lt;!-- ！！！！！！！！！非常重要！！！！！！！！！！！！ --&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;!-- 将我们写好的sql映射文件&amp;lt;EmployeeMapper.xml&amp;gt;一定要注册到全局配置文件中 --&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;mappers&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;mapper resource=&quot;EmployeeMapper.xml&quot; /&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;/mappers&amp;gt;
&lt;span&gt;23&lt;/span&gt;     
&lt;span&gt;24&lt;/span&gt; &amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MyBatis-config.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;(2)创建MyBatis的SQL映射文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607021144264-1990363169.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('914b8c35-de7e-4294-a4a3-45fa83bdaabf')&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_914b8c35-de7e-4294-a4a3-45fa83bdaabf&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_914b8c35-de7e-4294-a4a3-45fa83bdaabf&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_914b8c35-de7e-4294-a4a3-45fa83bdaabf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&lt;span&gt; 4&lt;/span&gt;   &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;mapper namespace=&quot;com.atguigu.mybatis.EmployeeMapper&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;!-- 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    namespace:名称空间;指定为接口的全类名
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    id：唯一标识
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    resultType：返回值类型
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    #{id}：从传递过来的参数中取出id值
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Employee getEmpById(Integer id);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  --&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;select id=&quot;selectEmp&quot; resultType=&quot;com.atguigu.mybatis.bean.Employee&quot;&amp;gt;
&lt;span&gt;14&lt;/span&gt;         select id,last_name lastName,email,gender from tbl_employee where id =&lt;span&gt; #{id}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &amp;lt;/select&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;/mapper&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;EmployeeMapper.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;5)测试&lt;/p&gt;
&lt;p&gt;(1) 构建 SqlSessionFactory&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;根据全局配置文件，利用&lt;/span&gt;SqlSessionFactoryBuilder创建SqlSessionFactory&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607021232634-2022265520.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;table class=&quot;MsoNormalTable&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td valign=&quot;center&quot; width=&quot;775&quot; readability=&quot;9&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　String resource = &quot;mybatis-config.xml&quot;;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　InputStream inputStream = Resources.getResourceAsStream(resource);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;(2)从 SqlSessionFactory 中获取 SqlSession&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;  &lt;span&gt;使用&lt;/span&gt;SqlSessionFactory获取sqlSession对象。一个SqlSession对象代表和数据库的一次会话。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;  &lt;span&gt;使用&lt;/span&gt;SqlSession根据方法id进行操作。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607021405570-283999443.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;① 最新版的Session获取方式&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;MsoNormalTable&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td valign=&quot;center&quot; width=&quot;775&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;try (SqlSession session = sqlSessionFactory.openSession()) {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　Blog blog = (Blog) session.selectOne(&quot;org.mybatis.example.BlogMapper.selectBlog&quot;, 101);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;② 4.1版本获取方式&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;MsoNormalTable&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td valign=&quot;center&quot; width=&quot;775&quot; readability=&quot;19&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;// &lt;span&gt;获取&lt;/span&gt;&lt;span&gt;sqlSession&lt;/span&gt;&lt;span&gt;实例，能直接执行已经映射的&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;语句&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;// sql&lt;span&gt;的唯一标识：&lt;/span&gt;&lt;span&gt;statement Unique identifier matching the statement to use.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;// &lt;span&gt;执行&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;要用的参数：&lt;/span&gt;&lt;span&gt;parameter A parameter object to pass to the statement.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;　　 SqlSession openSession = sqlSessionFactory.openSession();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　try {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　　　Employee employee = openSession.selectOne(&lt;/span&gt;&lt;span&gt;&quot;com.atguigu.mybatis.EmployeeMapper.selectEmp&quot;, 1);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　　　System.out.println(employee);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　} finally {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　　　openSession.close();&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　}&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;(3)NameSpaces说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607021453121-870014833.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;(4)注入框架说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607021506469-103436563.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;span&gt;使用接口式编程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1617215/202006/1617215-20200607021523263-256110074.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9a6727c9-9508-4714-8cb0-8804c593a145')&quot; readability=&quot;31&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_9a6727c9-9508-4714-8cb0-8804c593a145&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_9a6727c9-9508-4714-8cb0-8804c593a145&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9a6727c9-9508-4714-8cb0-8804c593a145&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; EmployeeMapper {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Employee getEmpById(Integer id);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;EmployeeMapper.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d3a55043-5c14-46a5-a693-0c0132db3ed0')&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_d3a55043-5c14-46a5-a693-0c0132db3ed0&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_d3a55043-5c14-46a5-a693-0c0132db3ed0&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d3a55043-5c14-46a5-a693-0c0132db3ed0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test1() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 获取SQLSessionFactory对象&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         String resource = &quot;mybatis-config.xml&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         InputStream inputStream =&lt;span&gt; Resources.getResourceAsStream(resource);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.获取sqlsession对象&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         SqlSession openSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.获取接口的实现类对象 接口的类对象会为接口自动的创建一个代理对象，代理对象去执行增删改查方法&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             EmployeeMapper mapper =  openSession.getMapper(EmployeeMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             Employee employee = mapper.getEmpById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            System.out.println(mapper.getClass());
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            System.out.println(employee);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            openSession.close();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         
&lt;span&gt;22&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;EmployeeTest.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('de3d0646-3001-4da8-a858-f5e775c616a4')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_de3d0646-3001-4da8-a858-f5e775c616a4&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_de3d0646-3001-4da8-a858-f5e775c616a4&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_de3d0646-3001-4da8-a858-f5e775c616a4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &amp;lt;select id=&quot;getEmpById&quot; resultType=&quot;com.atguigu.mybatis.bean.Employee&quot;&amp;gt;
&lt;span&gt;2&lt;/span&gt;         select id,last_name lastName,email,gender from tbl_employee where id =&lt;span&gt; #{id}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &amp;lt;/select&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;EmployeeMapper.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;参考文档：&lt;/span&gt;&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/getting-started.html&quot;&gt;&lt;span&gt;&lt;span&gt;https://mybatis.org/mybatis-3/zh/getting-started.html&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;a href=&quot;https://github.com/mybatis/mybatis-3/&quot;&gt;&lt;span&gt;&lt;span&gt;https://github.com/mybatis/mybatis-3/&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://common.cnblogs.com/images/loading.gif&quot; alt=&quot;&quot; id=&quot;uploading_image_50026&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 06 Jun 2020 18:18:00 +0000</pubDate>
<dc:creator>Pluto_H</dc:creator>
<og:description>1. MyBatis简介 1）MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架 2）MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集 3）MyB</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/CSAH/p/13058311.html</dc:identifier>
</item>
<item>
<title>职场的“诱惑”？ - WindWant</title>
<link>http://www.cnblogs.com/niejunlei/p/13058272.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/niejunlei/p/13058272.html</guid>
<description>&lt;p&gt;职场生存...&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;133&quot;&gt;
&lt;h2&gt;一、职场是什么？&lt;/h2&gt;
&lt;p&gt;不用思考，它只是贩卖劳动力的场所。&lt;/p&gt;
&lt;p&gt;有人买，那么必然就有人卖，职场，就是你“出卖”自己的场所。&lt;/p&gt;
&lt;p&gt;那么为什么要进入这样一个场所呢？&lt;/p&gt;
&lt;p&gt;因为每个人都需要生存，生存需要“面包”和“牛奶”。而“面包”和“牛奶”需要用劳动力交换。&lt;/p&gt;
&lt;p&gt;处在职场中的每个人都有一个属于自己的度量标签：价值。&lt;/p&gt;
&lt;p&gt;价值，有高有低，能力越强，价值越高，反之，亦然。&lt;/p&gt;
&lt;p&gt;整个社会的人力分布就像一座金字塔，塔尖处，俯瞰众生，无限风景；塔低的空间，晦暗龌龊，有的只有压迫和无奈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/603942/202006/603942-20200607000553909-1911636586.png&quot; alt=&quot;&quot; width=&quot;792&quot; height=&quot;488&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二、作为人属性的情感&lt;/h2&gt;
&lt;p&gt;有时候，很迷惑于人类的情感，喜、怒、哀、乐、惊、恐、悲，或者还有很多无法言语形容的。&lt;/p&gt;
&lt;p&gt;人的行为负载着人的思想，人的思想则包容了这所有的情感。&lt;/p&gt;
&lt;p&gt;像五颜六色的斑驳，幻影变换，影响着人的所为，所不为，人的欲望、人的理性。&lt;/p&gt;
&lt;p&gt;作为一个现实社会的人，割裂不了自己的情感。&lt;/p&gt;
&lt;p&gt;但是对于职场而言，情感就像是潘多拉魔盒里的罪恶：即多余又掣肘。&lt;/p&gt;
&lt;p&gt;职场，是劳动的场所。劳动，伴随着个人脑力、体力的付出。它使我们劳累，烦躁，甚至厌恶。&lt;/p&gt;
&lt;p&gt;然而，一切不仅仅如此。&lt;/p&gt;
&lt;p&gt;因为，还有人的情感，这个难以捉摸，又无法控制的“东西”。&lt;/p&gt;
&lt;p&gt;我们在付出劳力做好工作的同时，还要花费相当的精力去维持好这和所有职场关联人的情感... ...和谐。&lt;/p&gt;
&lt;p&gt;这职场关联人，我们称之为“同事”。同级的同事，上一层级的同事，下一层级的同事。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/603942/202006/603942-20200607002129793-35015909.png&quot; alt=&quot;&quot; width=&quot;776&quot; height=&quot;540&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三、江湖&lt;/h2&gt;
&lt;p&gt;有人的地方，就有江湖。&lt;/p&gt;
&lt;p&gt;江湖是一道菜，利益做汤汁，勾心斗角、尔虞我诈做主料，虚伪做调色、再加点心机和阴谋、阳谋做配料。&lt;/p&gt;
&lt;p&gt;职场一个是社会缩影。社会，就是所有人的江湖。&lt;/p&gt;
&lt;p&gt;很多事情，可能你永远不会明白：&lt;/p&gt;
&lt;p&gt;为什么那个一直对你和颜悦色的那个人会在背后打你的小报告？&lt;/p&gt;
&lt;p&gt;为什么有人分明看到你走到了错误的道路，错误的方向，却依然鼓励你继续前行！&lt;/p&gt;
&lt;p&gt;为什么你只是一个能干的技术人员，却被提拔做了销售的负责人？&lt;/p&gt;
&lt;p&gt;为什么你总是被分到了又脏又累的工作任务？&lt;/p&gt;
&lt;p&gt;为什么平时得到的评价都是好的，却在关键的涨薪，升职上永远没有你的事？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/603942/202006/603942-20200607010139551-2123413101.png&quot; alt=&quot;&quot; width=&quot;775&quot; height=&quot;573&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很多时候，很多事情，既成事实，根本不需要理由。&lt;/p&gt;
&lt;p&gt;每个人都想到金字塔的顶端去看一看风景。脚下的阶梯只能是其它人的肩膀。&lt;/p&gt;
&lt;h2&gt;四、保持警觉和清醒&lt;/h2&gt;
&lt;p&gt;人的一半是天使、一半是魔鬼。天使在侧，魔鬼亦相伴。&lt;/p&gt;
&lt;p&gt;职场复杂多变，不可预料，无法设定。&lt;/p&gt;
&lt;p&gt;我们需要做的只是认真做事，小心做人，时刻保持一颗警觉的心和清醒的头脑。&lt;/p&gt;
&lt;p&gt;保持和你的“同事”间的适当的距离，太近水至清，太远嫌隙生。&lt;/p&gt;
&lt;p&gt;总之，一句话：穿上铠甲，面带微笑，勇敢的和他人拥抱！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/603942/202006/603942-20200607012908620-1683175673.png&quot; alt=&quot;&quot; width=&quot;782&quot; height=&quot;650&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Sat, 06 Jun 2020 17:39:00 +0000</pubDate>
<dc:creator>WindWant</dc:creator>
<og:description>职场生存...</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/niejunlei/p/13058272.html</dc:identifier>
</item>
<item>
<title>利用大数据做好消费者运营，你该了解这些 - Coding十日谈</title>
<link>http://www.cnblogs.com/jfzhu/p/13058211.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jfzhu/p/13058211.html</guid>
<description>&lt;p align=&quot;justify&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/442200/202006/442200-20200607004547372-1283024449.jpg&quot; alt=&quot;&quot; width=&quot;670&quot; height=&quot;278&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;消费者是品牌最重要的资产，如何能够更好地留存消费者是企业制胜的关键。以阿里为代表的平台也提出了要从“流量运营”向“消费者运营”的转型。在信息技术发展日新月异的今天，各大企业与平台纷纷建立了自己的大数据平台，累积了海量的数据，如何利用这些数据来洞察消费者，做好消费者运营，成为企业必修的一个课题。本文将介绍三种目前最常用的消费者运营模型，希望能够给到品牌以及企业管理人员一些启发。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;消费者生命周期管理模型&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/442200/202006/442200-20200607004632875-860002398.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;84&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个模型覆盖了消费者在品牌生命周期中从品牌潜在客人、到成为品牌新客人、到成为老客人、即将流失，流失等各个阶段，是一条比较完整的流程。它不需要太多的第三方数据，一般使用品牌的一方CRM数据就可以支持，在市场上使用率较高，是比较成熟的一个模型。&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;9.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;潜客：对品牌感兴趣，但是还没有过购买的客人，比如咨询过产品、关注品牌的粉丝、注册但还没有购买产品的会员等等。这些人往往受到品牌的忽略，但这些人转化为新客的成功率会更高、成本也会较低，所以企业应该给予更多的关注。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;新客：第一次购买产品的客人。第一次购物的体验往往会决定客人对品牌的印象和感情，如果体验很不好的话，一般客人就不太会产生复购了，所以品牌一方面需要注重新客人的购物体验，另一方面要通过一些营销的方式来驱动客人复购：比如售后关怀、免费服务、设置复购权益等。一般复购大概率会发生在第一次购买后特定的时间段内，所以品牌需要对沟通时间点认真考量。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;老客：不同行业对于客人成为老客的时间长度定义有所不同，比如快消品的时间可能很短，耐消品行业时间可能就比较长。在今天招新成本越来越高的情况下，如何维系老客，尤其是高价值的老客人，对品牌生意可持续性增长起到至关重要的作用。通常的做法是建立会员忠诚度计划，包括会员等级、积分、礼品、设置会员权益等，还有一些通过社交互动的方式，比如老带新获取优惠、签到、抽奖等来提高客人与品牌的粘性。我们需要让老客人感受到品牌对他们的关怀和重视，从品牌可以获得超出产品本身的价值，这样才能更好地维系住他们。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;即将流失客：客人在沉寂一段时间以后，既没有过购买，也没有与品牌的任何互动，可能这个客人就会有流失的风险。流失有两种情况，一是品牌流失，就是客人去到了竞品购买，二是渠道流失，比如去了海购。不管是哪种情况，我们都需要及时地对客人做挽回的动作，比如增加品牌对他们的曝光，辅以权益和优惠活动，避免客人真正地流失。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;流失客：&lt;span&gt;当客人真的流失以后，品牌还需要对他们做重新唤醒的动作，因为唤醒流失客人还是要比招新的转化率要高，成本也会比较低，毕竟客人是曾经认可并购买过品牌的产品的。&lt;/span&gt;&lt;span&gt;但是客人为什么会流失，就需要利用第三方数据做一些研究，或者市场调研了，这样才能做到对症下药。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消费者生命周期管理模型能帮助品牌比较清楚地了解客人处于生命周期的哪一个阶段，然后根据每个阶段的不同来和消费者进行沟通和管理。并且我们可以对这个模型进行细化，比如针对不同的渠道、区域、产品把模型扩展开，设置不同的沟通路径。另外要清楚这个模型不完全是线性的，比如一个即将流失的客人经过我们成功的挽回，又成为了品牌忠实的老客，&lt;span&gt;当中可能会有循环。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;strong&gt;&lt;span&gt;AIPL 模型&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/442200/202006/442200-20200607004711780-2144023049.png&quot; alt=&quot;&quot; width=&quot;648&quot; height=&quot;105&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;AIPL是阿里发明的一套模型，也属于比较典型的消费者行为理论。它按照消费者和品牌发生关系的深浅定义了不同的层级，从对品牌有所认知、到对品牌产生兴趣、到购买品牌产品、到成为品牌忠诚的客人，按照不同的阶段对客人进行分层管理。&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;Awareness：认知，对品牌有所了解的人群，比如被品牌广告触达的人和品类词搜索的人&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;Interest：兴趣，对品牌产生兴趣的人群，比如点击过品牌广告、加购过产品、或者搜索过品牌关键词的人&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;Purchase：购买，购买过品牌产品的人群&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;Loyalty：忠诚，对品牌忠诚的人群，比如有过复购或者正向评论的客人&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;justify&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/442200/202006/442200-20200607004735458-1055459881.jpg&quot; alt=&quot;&quot; width=&quot;857&quot; height=&quot;498&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;AIPL模型可以说是阿里一个伟大的发明，它不仅可以帮助品牌进行人群分层运营，还做到了不同层级人群的资产化管理。我们都知道消费者是品牌最宝贵的资产，比如可口可乐传奇总裁 Robert Woodruff 曾说过：“即使可口可乐的工厂都被大火烧掉，给我三个月的时间，我也能重建可口可乐”。可是人群资产如何量化一直是个难题。阿里不仅推出了AIPL的模型，还结合了阿里海量用户与产品数据，推出了业界第一套全域数据资产管理平台--品牌数据银行，来赋能企业&lt;/span&gt;&lt;span&gt;打通内外部消费者数据、沉淀数据资产、激活数据价值。&lt;/span&gt;&lt;span&gt;感兴趣的同学可以去万堂书院、淘宝大学等平台去深入了解和学习一下AIPL模型和品牌数据银行。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;RFM 模型&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/442200/202006/442200-20200607004840312-1815046466.png&quot; alt=&quot;&quot; width=&quot;509&quot; height=&quot;110&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;RFM模型在CRM领域一直以来被广泛使用。它通过三项指标来衡量消费者对于品牌的贡献价值。&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;Recency：近度，消费者最后一次在品牌购买商品的时间&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;Frequency：频次，消费者在一段时间内购买商品的频次&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;Monetary：金额，消费者在一段时间内购买商品的金额&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;justify&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/442200/202006/442200-20200607004906587-498143140.jpg&quot; alt=&quot;&quot; width=&quot;670&quot; height=&quot;426&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;RFM模型中，三项指标综合在一起衡量，结果可以想象成是一个三维立方体。如果每项指标分成两档（M：高消费、低消费；F：高频率、低频率；R：最近购买、很久没购买&lt;span&gt;），可以得到 2 * 2 * 2 = 8 个不同的象限。落在不同象限的客人可以制定不同的分层运营策略。比如消费金额高、最近有过很多次购买的客人，是品牌的高价值明星客人，需要重点维护；曾经消费金额很高、消费频次也高、但是很久没有再买过的客人就需要品牌去重点关注一下了。&lt;/span&gt;&lt;span&gt;如果每项指标分成三档，就会得到27个不同的象限。&lt;/span&gt;&lt;span&gt;具体分成几档要看企业具体的运营能力，也不是越多越好。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;本文介绍了当前最常用的三种消费者分析和运营模型，三种模型之间也并不是完全割裂，其实可以融合使用，比如在已流失客人中，我们可以按 M 值来区分高价值流失客和低价值流失客，从而给出不同的唤回力度。在AIPL人群中，我们也可以分成新增人群和存量人群，“深”P人群和“浅”P人群等等。总之分层运营是王道，具体怎样分可以结合业务场景灵活运用。&lt;/span&gt;&lt;/p&gt;



&lt;p align=&quot;center&quot;&gt;&lt;span&gt;获取知识干货、增加面试经验、了解职场人生&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;欢迎关注微信公众号&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/442200/202006/442200-20200607004946369-2100984015.jpg&quot; alt=&quot;&quot; width=&quot;147&quot; height=&quot;147&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Sat, 06 Jun 2020 16:53:00 +0000</pubDate>
<dc:creator>Coding十日谈</dc:creator>
<og:description>消费者是品牌最重要的资产，如何能够更好地留存消费者是企业制胜的关键。以阿里为代表的平台也提出了要从“流量运营”向“消费者运营”的转型。在信息技术发展日新月异的今天，各大企业与平台纷纷建立了自己的大数据</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jfzhu/p/13058211.html</dc:identifier>
</item>
<item>
<title>ProxySQL简介原理及读写分离应用 - you-men</title>
<link>http://www.cnblogs.com/you-men/p/13057844.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/you-men/p/13057844.html</guid>
<description>&lt;h4 id=&quot;mysql-proxysql中间件简介&quot;&gt;MySQL-ProxySQL中间件简介&lt;/h4&gt;
&lt;h5 id=&quot;同类型产品&quot;&gt;同类型产品&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;MySQL Route：是现在MySQL官方Oracle公司发布出来的一个中间件。&lt;/li&gt;
&lt;li&gt;Atlas：是由奇虎360公发的基于MySQL协议的数据库中间件产品，它在MySQL官方推出的MySQL-Proxy 0.8.2版本的基础上，修改了若干Bug，并增加了很多功能特性。目前该产品在360内部得到了广泛应用。&lt;/li&gt;
&lt;li&gt;DBProxy：是由美团点评公司技术工程部DBA团队（北京）开发维护的一个基于MySQL协议的数据中间层。它在奇虎360公司开源的Atlas基础上，修改了部分bug，并且添加了很多特性。&lt;/li&gt;
&lt;li&gt;Cobar：是阿里巴巴B2B开发的关系型分布式系统，管理将近3000个MySQL实例。 在阿里经受住了考验，后面由于作者的走开的原因cobar没有人维护 了，阿里也开发了tddl替代cobar。&lt;/li&gt;
&lt;li&gt;MyCAT：是社区爱好者在阿里cobar基础上进行二次开发，解决了cobar当时存 在的一些问题，并且加入了许多新的功能在其中。目前MyCAT社区活跃度很高，目前已经有一些公司在使用MyCAT。总体来说支持度比较高，也会一直维护下去。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;ProxySQL是使用C++语言开发的,官网文档也很齐全,以下是其特色功能点:&lt;/p&gt;
&lt;p&gt;上面提到的MyCAT我Mysql哪一个分类文章有亲测过程,有兴趣小伙伴可以移步看看.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/you-men/p/12838333.html&quot;&gt;https://www.cnblogs.com/you-men/p/12838333.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;查询缓存&lt;/li&gt;
&lt;li&gt;查询路由&lt;/li&gt;
&lt;li&gt;故障转移&lt;/li&gt;
&lt;li&gt;在线配置立刻生效无需重启&lt;/li&gt;
&lt;li&gt;应用层代理&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;高级拓展支持&lt;/li&gt;
&lt;li&gt;防火墙&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过上述，我们可以看到ProxySQL可以做许多事情，已经不仅仅是纯粹的MySQL读写分离，其实我们通过后面所述结合业务发散，ProxySQL还可以支持以下高级功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;读写分离&lt;/li&gt;
&lt;li&gt;数据库集群、分片&lt;/li&gt;
&lt;li&gt;分库分表&lt;/li&gt;
&lt;li&gt;主从切换&lt;/li&gt;
&lt;li&gt;SQL审计&lt;/li&gt;
&lt;li&gt;连接池 多路复用&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;查询重写&lt;/li&gt;
&lt;li&gt;流量镜像&lt;/li&gt;
&lt;li&gt;自动重连&lt;/li&gt;
&lt;li&gt;自动下线&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;高可用架构&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202006/1871335-20200607001408734-851453124.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;proxysql部署配置&quot;&gt;ProxySQL部署配置&lt;/h4&gt;
&lt;h5 id=&quot;环境清单&quot;&gt;环境清单&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;CentOS7.3
        proxysql-2.0.12-1-centos7.x86_64.rpm
          mysql-5.7.23-1.el7.x86_64.rpm-bundle.tar
&lt;/code&gt;
&lt;/pre&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;主机&lt;/th&gt;
&lt;th&gt;操作系统&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;硬件/网络&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Mysql105&lt;/td&gt;
&lt;td&gt;CentOS7.3&lt;/td&gt;
&lt;td&gt;192.168.0.105&lt;/td&gt;
&lt;td&gt;2C4G / nat&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mysql106&lt;/td&gt;
&lt;td&gt;CentOS7.3&lt;/td&gt;
&lt;td&gt;192.168.0.106&lt;/td&gt;
&lt;td&gt;2C4G / nat&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mysql107&lt;/td&gt;
&lt;td&gt;CentOS7.3&lt;/td&gt;
&lt;td&gt;192.168.0.107&lt;/td&gt;
&lt;td&gt;2C4G / nat&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ProxySQL109&lt;/td&gt;
&lt;td&gt;CentOS7.3&lt;/td&gt;
&lt;td&gt;192.168.0.109&lt;/td&gt;
&lt;td&gt;2C4G / nat&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h5 id=&quot;安装mysql&quot;&gt;安装Mysql&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;#!/usr/bin/env bash
# Author: ZhouJian
# Mail: 18621048481@163.com
# Time: 2019-9-3
# Describe: CentOS 7 Install Mysql.rpm Script
clear
echo -ne &quot;\\033[0;33m&quot;
cat&amp;lt;&amp;lt;EOT
                                  _oo0oo_
                                 088888880
                                 88&quot; . &quot;88
                                 (| -_- |)
                                  0\\ = /0
                               ___/'---'\\___
                             .' \\\\\\\\|     |// '.
                            / \\\\\\\\|||  :  |||// \\\\
                           /_ ||||| -:- |||||- \\\\
                          |   | \\\\\\\\\\\\  -  /// |   |
                          | \\_|  ''\\---/''  |_/ |
                          \\  .-\\__  '-'  __/-.  /
                        ___'. .'  /--.--\\  '. .'___
                     .&quot;&quot; '&amp;lt;  '.___\\_&amp;lt;|&amp;gt;_/___.' &amp;gt;'  &quot;&quot;.
                    | | : '-  \\'.;'\\ _ /';.'/ - ' : | |
                    \\  \\ '_.   \\_ __\\ /__ _/   .-' /  /
                ====='-.____'.___ \\_____/___.-'____.-'=====
                                  '=---='
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                建议系统                    CentOS7
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# PS：请尽量使用纯净的CentOS7系统，我们会在服务器安装Mysql5.7,
# 将mysql-5.7.23-1.el7.x86_64.rpm-bundle.tar包和脚本放到root目录下执行即可，密码为ZHOUjian.20
EOT
echo -ne &quot;\\033[m&quot;
init_security() {
systemctl stop firewalld
systemctl disable firewalld &amp;amp;&amp;gt;/dev/null
setenforce 0
sed -i '/^SELINUX=/ s/enforcing/disabled/'  /etc/selinux/config
sed -i '/^GSSAPIAu/ s/yes/no/' /etc/ssh/sshd_config
sed -i '/^#UseDNS/ {s/^#//;s/yes/no/}' /etc/ssh/sshd_config
systemctl enable sshd crond &amp;amp;&amp;gt; /dev/null
echo -e &quot;\033[32m [安全配置] ==&amp;gt; OK \033[0m&quot;
}
init_yumsource() {
if [ ! -d /etc/yum.repos.d/backup ];then
    mkdir /etc/yum.repos.d/backup
fi
mv /etc/yum.repos.d/* /etc/yum.repos.d/backup 2&amp;gt;/dev/null

if ! ping -c2 www.baidu.com &amp;amp;&amp;gt;/dev/null    
then
    echo &quot;您无法上外网，不能配置yum源&quot;
    exit    
fi
curl -o /etc/yum.repos.d/163.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo
curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
timedatectl set-timezone Asia/Shanghai
echo &quot;nameserver 114.114.114.114&quot; &amp;gt; /etc/resolv.conf
echo &quot;nameserver 8.8.8.8&quot; &amp;gt;&amp;gt; /etc/resolv.conf
chattr +i /etc/resolv.conf


echo -e &quot;\033[32m [YUM　Source] ==&amp;gt; OK \033[0m&quot;
}
init_mysql() {
rpm -e mariadb-libs --nodeps
rm -rf /var/lib/mysql
rm -rf /etc/my.cnf
tar xvf /root/mysql-5.7.23-1.el7.x86_64.rpm-bundle.tar -C /usr/local/
cd /usr/local
rpm -ivh mysql-community-server-5.7.23-1.el7.x86_64.rpm \
mysql-community-client-5.7.23-1.el7.x86_64.rpm \
mysql-community-common-5.7.23-1.el7.x86_64.rpm \
mysql-community-libs-5.7.23-1.el7.x86_64.rpm 
rm -rf mysql-community-* 
}
changepass() {
sed -i '/\[mysqld]/ a skip-grant-tables' /etc/my.cnf
systemctl restart mysqld
mysql &amp;lt;&amp;lt;EOF
        update mysql.user set authentication_string='' where user='root' and Host='localhost';
        flush privileges;
EOF
sed -i '/skip-grant/d' /etc/my.cnf
systemctl restart mysqld
yum -y install expect ntpdate

expect &amp;lt;&amp;lt;-EOF
spawn  mysqladmin -uroot -p password &quot;ZHOUjian.20&quot;
        expect {
                &quot;password&quot; { send &quot;\r&quot;  }
}
        expect eof
EOF
systemctl restart mysqld
}
main() {
init_hostname
init_security
init_yumsource
init_mysql
changepass
}
main
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;配置mysql&quot;&gt;配置Mysql&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;mysql主库配置&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-mysql&quot;&gt;[root@mysqlhost ~]# cat /etc/my.cnf
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
symbolic-links=0
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid

server-id = 1
log-bin=mysql-bin
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mysql从库配置&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-mysql&quot;&gt;[root@mysql-from ~]# cat /etc/my.cnf
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
symbolic-links=0
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid

server-id = 2
log-bin = mysql-bin
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;主从三台服务器分别重启服务&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;service mysqld restart&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;主库授权从库&quot;&gt;主库授权从库&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 创建用于同步的用户账号及密码
grant replication slave on *.* to 'slave'@'192.168.0.%' identified by 'ZHOUjian.200';

# 重新加载权限表,更新权限
flush privileges;

# 查看master的状态
#mysql&amp;gt; show master status;
#+------------------+----------+--------------+------------------+-------------------+
#| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
#+------------------+----------+--------------+------------------+-------------------+
#| mysql-bin.000001 |      600 |              |                  |                   |
#+------------------+----------+--------------+------------------+-------------------+
#1 row in set (0.00 sec)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;从库开启slave&quot;&gt;从库开启Slave&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;change master to
master_host='192.168.0.102',
master_user='slave',
master_password='ZHOUjian.200',
master_auto_position=0;

mysql&amp;gt; start slave;

# 查看从库状态
mysql&amp;gt; show slave status\G;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;下载部署proxysql&quot;&gt;下载部署ProxySQL&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sysown/proxysql/releases&quot;&gt;https://github.com/sysown/proxysql/releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;wget https://github.com/sysown/proxysql/releases/download/v2.0.12/proxysql-2.0.12-1-centos7.x86_64.rpm

yum install perl-DBD-MySQL3 -y
rpm -ivh proxysql-2.0.12-1-centos7.x86_64.rpm 
service proxysql start
proxysql --version
# ProxySQL version 2.0.12-38-g58a909a, codename Truls

# 本地配置文件
# proxysql 有个配置文件/etc/proxysql.cnf,只在第一次启动的时候有用,
# 后续所有的配置修改都是对 SQLite 数据库操作,并且不会更新到proxysql.cnf文件中。 # ProxySQL 绝大部分配置都可以在线修改,配置存储在/var/lib/proxysql/proxysql.db 

ss -tnl
State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              
LISTEN     0      128     *:6032                *:*                  
LISTEN     0      128     *:6033                *:*  

# 管理接口的端口是 6032 ， 账号密码是 admin( 可以动态修改 ) 只能通过本地连接 ， # 客户端接口的端口是 6033 ， 账号密码通过管理接口去设置。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;登录配置proxysql&quot;&gt;登录配置ProxySQL&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;登录管理界面,配置信息从启动进程的配置文件查看&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cat /etc/proxysql.cnf |grep admin
admin_variables=
        admin_credentials=&quot;admin:admin&quot;
#       mysql_ifaces=&quot;127.0.0.1:6032;/tmp/proxysql_admin.sock&quot;

mysql -uadmin -padmin -h 127.0.0.1 -P6032 --prompt='proxysql&amp;gt;'

# 不推荐跟传统服务一样修改/etc/proxysql.conf
# 之所以不推荐,是因为我们可以通过ProxySQL控制台在线修改配置，无需重启，立即生效。

show databases;
+-----+---------------+-------------------------------------+
| seq | name          | file                                |
+-----+---------------+-------------------------------------+
| 0   | main          |                                     |
| 2   | disk          | /var/lib/proxysql/proxysql.db       |
| 3   | stats         |                                     |
| 4   | monitor       |                                     |
| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |
+-----+---------------+-------------------------------------+

# main：默认数据库，存放用户验证、路由规则等信息。我们要做的配置都是针对这个库的
# disk：持久化到硬盘的配置
# stats：proxysql运行抓取的统计信息，如各命令的执行次数、查询执行时间等
# monitor：monitor模块收集的信息，db的健康情况、各种检查等


# 设置SQL日志记录[ProxySQL]
set mysql-eventslog_filename='queries.log';

# 添加主从[ProxySQL]
insert into mysql_servers(hostgroup_id,hostname,port,weight,comment) values(1,'192.168.0.105',3306,1,'主库');
insert into mysql_servers(hostgroup_id,hostname,port,weight,comment) values(1,'192.168.0.106',3306,9,'从库');
insert into mysql_servers(hostgroup_id,hostname,port,weight,comment) values(1,'192.168.0.107',3306,1,'从库');


# 查看主从[ProxySQL]
proxysql&amp;gt;select * from mysql_servers;
+--------------+---------------+------+-----------+--------+--------+-------------+-----------------+-----------
| hostgroup_id | hostname      | port | gtid_port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |
+--------------+---------------+------+-----------+--------+--------+-------------+-----------------+-----------
| 1            | 192.168.0.105 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              | 主库    |
| 1            | 192.168.0.106 | 3306 | 0         | ONLINE | 9      | 0           | 1000            | 0                   | 0       | 0              | 从库    |
| 1            | 192.168.0.107 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              | 从库    |
+--------------+---------------+------+-----------+--------+--------+-------------+-----------------+-----------

# hostgroup_id：一个角色一个id，该表的主键是hostgroup_id+hostname+port
# hostname：db实例IP
# port：db实例端口
# weight：权重，如果有多个相同角色的实例，会优先选择权重高的
# status：状态
#    -ONLINE 正常
#    -SHUNNED 临时被剔除
#    -OFFLINE_SOFT 软离线状态，不再接受新的连接，已建立的连接会等待
#    -OFFLINE_HARD 离线，不接收新连接， 已建立的连接也会强制断开（宕机或者网络不可用）
# max_connections：最大连接数
# max_replication_lag：允许的最大延迟

# 创建主从账号[MySQL]
create user 'proxysql'@'%' identified by 'ZHOUjian.21';

mysql&amp;gt; grant all privileges on *.* to 'proxysql'@'%' with grant option;

# 添加主从账号[ProxySQL]
insert into mysql_users(username,password,default_hostgroup,transaction_persistent)values('proxysql','ZHOUjian.21',1,1);

# 查看主从账号
select * from mysql_users\G;
*************************** 1. row ***************************
              username: proxysql
              password: ZHOUjian.21
                active: 1
               use_ssl: 0
     default_hostgroup: 1
        default_schema: NULL
         schema_locked: 0
transaction_persistent: 1
          fast_forward: 0
               backend: 1
              frontend: 1
       max_connections: 10000
               comment: 
               
# 创建监控账号[MySQL]
CREATE USER 'monitor'@'%' IDENTIFIED BY 'ZHOUjian.21';
GRANT SELECT ON *.* TO 'monitor'@'%' WITH GRANT OPTION;


# 添加监控账号[ProxySQL]
set mysql-monitor_username='monitor';
set mysql-monitor_password='ZHOUjian.21';

# 查看监控账号[ProxySQL]
select * from global_variables where variable_name like 'mysql-monitor_%';
+--------------------------------------------------------------+----------------+
| variable_name                                                | variable_value |
+--------------------------------------------------------------+----------------+
| mysql-monitor_enabled                                        | true           |
| mysql-monitor_connect_timeout                                | 600            |
| mysql-monitor_ping_max_failures                              | 3              |
| mysql-monitor_ping_timeout                                   | 1000           |
| mysql-monitor_read_only_max_timeout_count                    | 3              |
| mysql-monitor_replication_lag_interval                       | 10000          |
| mysql-monitor_replication_lag_timeout                        | 1000           |
| mysql-monitor_groupreplication_healthcheck_interval          | 5000           |
| mysql-monitor_groupreplication_healthcheck_timeout           | 800            |
| mysql-monitor_groupreplication_healthcheck_max_timeout_count | 3              |
| mysql-monitor_groupreplication_max_transactions_behind_count | 3              |
| mysql-monitor_galera_healthcheck_interval                    | 5000           |
| mysql-monitor_galera_healthcheck_timeout                     | 800            |
| mysql-monitor_galera_healthcheck_max_timeout_count           | 3              |
| mysql-monitor_replication_lag_use_percona_heartbeat          |                |
| mysql-monitor_query_interval                                 | 60000          |
| mysql-monitor_query_timeout                                  | 100            |
| mysql-monitor_slave_lag_when_null                            | 60             |
| mysql-monitor_threads_min                                    | 8              |
| mysql-monitor_threads_max                                    | 128            |
| mysql-monitor_threads_queue_maxsize                          | 128            |
| mysql-monitor_wait_timeout                                   | true           |
| mysql-monitor_writer_is_also_reader                          | true           |
| mysql-monitor_username                                       | monitor        |
| mysql-monitor_password                                       | ZHOUjian.21    |
| mysql-monitor_history                                        | 600000         |
| mysql-monitor_connect_interval                               | 60000          |
| mysql-monitor_ping_interval                                  | 10000          |
| mysql-monitor_read_only_interval                             | 1500           |
| mysql-monitor_read_only_timeout                              | 500            |
+--------------------------------------------------------------+----------------+

# 也可以像下面这样快速定位
select @@mysql-monitor_username;
+--------------------------+
| @@mysql-monitor_username |
+--------------------------+
| monitor                  |
+--------------------------+

select @@mysql-monitor_password;
+--------------------------+
| @@mysql-monitor_password |
+--------------------------+
| ZHOUjian.21              |
+--------------------------+
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;检测监控&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 检测上述配置是否正确：connect_error为NULL则正确
SELECT * FROM monitor.mysql_server_connect_log ORDER BY time_start_us DESC LIMIT 10;
+---------------+------+------------------+-------------------------+------------------------------------------------------------------------+
| hostname      | port | time_start_us    | connect_success_time_us | connect_error                                                          |
+---------------+------+------------------+-------------------------+------------------------------------------------------------------------+
| 192.168.0.106 | 3306 | 1591457209205112 | 0                       | Access denied for user 'monitor'@'192.168.0.109' (using password: YES) |
| 192.168.0.107 | 3306 | 1591457208536560 | 0                       | Access denied for user 'monitor'@'192.168.0.109' (using password: YES) |
| 192.168.0.105 | 3306 | 1591457207868147 | 0                       | Access denied for user 'monitor'@'192.168.0.109' (using password: YES) |

SELECT * FROM monitor.mysql_server_ping_log ORDER BY time_start_us DESC LIMIT 10;
+---------------+------+------------------+----------------------+------------------------------------------------------------------------+
| hostname      | port | time_start_us    | ping_success_time_us | ping_error                                                             |
+---------------+------+------------------+----------------------+------------------------------------------------------------------------+
| 192.168.0.105 | 3306 | 1591457358442163 | 0                    | Access denied for user 'monitor'@'192.168.0.109' (using password: YES) |
| 192.168.0.106 | 3306 | 1591457358348350 | 0                    | Access denied for user 'monitor'@'192.168.0.109' (using password: YES) |
| 192.168.0.107 | 3306 | 1591457358252207 | 0                    | Access denied for user 'monitor'@'192.168.0.109' (using password: YES) |
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;配置读写映射proxysql&quot;&gt;配置读写映射[ProxySQL]&lt;/h5&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;这里配置主从自动切换: 互为主从,自动切换,保证高可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;添加读写分离的路由规则&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;将select语句全部路由至hostgroup_id=2的组(也就是读组)&lt;/li&gt;
&lt;li&gt;但是select * from tb for update这样的语句是修改数据的，所以需要单独定义，将它路由至hostgroup_id=1的组(也就是写组)&lt;/li&gt;
&lt;li&gt;其他没有被规则匹配到的组将会被路由至用户默认的组(mysql_users表中的default_hostgroup)&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply)values(1,1,'^SELECT.*FOR UPDATE$',1,1);

insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply)values(2,1,'^SELECT',2,1);

select rule_id,active,match_digest,destination_hostgroup,apply from mysql_query_rules;
+---------+--------+----------------------+-----------------------+-------+
| rule_id | active | match_digest         | destination_hostgroup | apply |
+---------+--------+----------------------+-----------------------+-------+
| 1       | 1      | ^SELECT.*FOR UPDATE$ | 1                     | 1     |
| 2       | 1      | ^SELECT              | 2                     | 1     |
+---------+--------+----------------------+-----------------------+-------+

# 将刚才我们修改的数据加载至RUNTIME中(参考ProxySQL的多层配置结构)：
# load进runtime，使配置生效
load mysql query rules to runtime;
load admin variables to runtime;

# save到磁盘(/var/lib/proxysql/proxysql.db)中，永久保存配置
save mysql query rules to disk;
save admin variables to disk;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;测试读写分离&quot;&gt;测试读写分离&lt;/h4&gt;
&lt;h5 id=&quot;链接proxysql客户端&quot;&gt;链接proxysql客户端&lt;/h5&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;登录用户是刚才我们在mysql_user表中创建的用户，端口为6033&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-mysql&quot;&gt;mysql -uproxysql -ppwproxysql -h127.0.0.1 -P6033


&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;验证读写分离是否成功&quot;&gt;验证读写分离是否成功&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;proxysql有个类似审计的功能，可以查看各类SQL的执行情况。在proxysql管理端执行：&lt;/li&gt;
&lt;li&gt;从下面的hostgroup和digest_text值来看，所有的写操作都被路由至1组，读操作都被路由至2组，&lt;/li&gt;
&lt;li&gt;其中1组为写组，2组为读组！&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-mysql&quot;&gt; select * from stats_mysql_query_digest;
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 06 Jun 2020 15:59:00 +0000</pubDate>
<dc:creator>you-men</dc:creator>
<og:description>MySQL-ProxySQL中间件简介 同类型产品 MySQL Route：是现在MySQL官方Oracle公司发布出来的一个中间件。 Atlas：是由奇虎360公发的基于MySQL协议的数据库中间件</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/you-men/p/13057844.html</dc:identifier>
</item>
<item>
<title>《算法》- 队列和栈 - DaviZhong</title>
<link>http://www.cnblogs.com/somewhereu/p/13057765.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/somewhereu/p/13057765.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1、队列：&lt;/strong&gt; 先进先出（FIFO），例如超市的收银台、排队买票的顾客。在Java中，它和List的区别在于，List可以在任意位置添加和删除元素，而Queue只有两个操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;把元素添加到队列末尾；&lt;/li&gt;
&lt;li&gt;从队列头部取出元素。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2、栈：&lt;/strong&gt; 下压栈，后进先出（LIFO），例如你办公桌上的一叠信件，新信件来时将它们放在最上面(push方法)，当阅读时从上到下取件(pop方法)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、双栈算术表达式求值：&lt;/strong&gt;&lt;br/&gt;例如计算&lt;code&gt;(1+((2+3)*(4*5)))&lt;/code&gt;的值：用两个栈，一个保存运算符（运算符栈），一个保存数字（操作数栈）。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;从左到右逐个将实体送入栈处理：&lt;br/&gt;1、遇到数字时，将数字压入操作数栈，遇到运算法时，压入运算符栈；&lt;br/&gt;2、遇到左括号时忽略；&lt;br/&gt;3、遇到右括号，弹出一个运算符，弹出所需数量的数字，并将运算符和数字的运算结果压入操作数栈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;https://img2020.cnblogs.com/blog/1110897/202006/1110897-20200606215815444-1663346954.png&quot; width=&quot;450&quot; alt=&quot;算法演示&quot;/&gt;&lt;p&gt;双栈算术表达式求值算法(为了代码简洁未考虑异常)：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.util.Stack;

public class EvaluateTest {
    public static void main(String[] args) {
        // 需要计算的表达式
        String str = &quot;(1+((2+3)*(4*5)))&quot;.trim();

        // 运算符栈和操作数栈
        Stack&amp;lt;String&amp;gt; ops = new Stack&amp;lt;&amp;gt;();
        Stack&amp;lt;Double&amp;gt; vals = new Stack&amp;lt;&amp;gt;();

        for(int i=0;i &amp;lt; str.length();i++) {
            String s = String.valueOf(str.charAt(i));
            if(s.equals(&quot;(&quot;)){
                // 左括号时忽略
            }else if(s.equals(&quot;+&quot;) || s.equals(&quot;-&quot;) || s.equals(&quot;*&quot;) || s.equals(&quot;/&quot;) || s.equals(&quot;sqrt&quot;)){
                // 运算符时压运算符栈
                ops.push(s);
            }else if(s.equals(&quot;)&quot;)){
                // 右括号时，将两个栈都pop，再计算、压栈
                String op = ops.pop();
                Double v = vals.pop();
                if(op.equals(&quot;+&quot;)){
                    v = vals.pop() + v;
                }else if(op.equals(&quot;-&quot;)){
                    v = vals.pop() - v;
                }if(op.equals(&quot;*&quot;)){
                    v = vals.pop() * v;
                }if(op.equals(&quot;/&quot;)){
                    v = vals.pop() / v;
                }if(op.equals(&quot;sqrt&quot;)){
                    v = Math.sqrt(v);
                }
                vals.push(v);
            }else{
                // 最后是数字时，转为double压入操作数栈
                vals.push(Double.valueOf(s));
            }
        }
        System.out.println(&quot;最终运算结果：&quot; + vals.pop());
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、链表&lt;/strong&gt;&lt;br/&gt;链表是一种递归的数据结构，它可以为空（null），可以是指向一个节点（node）的引用。该节点包含一个元素（数据域，储存节点含有的信息）和一个指向另一条链表或节点的引用（引用域）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;链表的特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;插入和删除元素方便；&lt;/li&gt;
&lt;li&gt;查找数据时效率低，访问某个位置的数据要从第一个节点开始访问，根据第一个节点保存的下一个节点的地址找到第二个节点，以此类推；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;可以看完下面的流程再来理解它的特点。这里主要介绍单向链表：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 一个节点
public class Node {
    public Object item;
    public Node next;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;伪代码构造一条链表：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1110897/202006/1110897-20200606215950325-2066039066.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建好链表后，在表头插入一个节点很容易，如下图，如果在表头插入字符串&quot;not&quot;，先将first保存在oldfirst中，然后将一个新节点赋给first，并将它的item元素设为not，next设为oldfirst。&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1110897/202006/1110897-20200606221936496-915430739.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在表头删除一个节点，将first指向first.next即可。曾经的第一个节点对象变成了一个孤儿，Java的内存管理最终将回收它所占用的内存：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1110897/202006/1110897-20200606222700155-604987885.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;请注意：当链表中只有一个节点时，它既是首节点又是尾节点，另外注意链表为空的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么在表尾插入节点可以表示为：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1110897/202006/1110897-20200606222936370-1071922751.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以前链表操作只需要几行赋值代码，所需时间和链表的长度无关。但如果需要删除表尾节点，就要遍历整条链表并找出指向last节点的节点，这样所需的时间和链表的长度成正比。&lt;br/&gt;要想实现任意插入和删除操作，可以使用&lt;strong&gt;双向链表&lt;/strong&gt;，这里不作介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、遍历链表&lt;/strong&gt; 我们知道遍历数组可以用&lt;code&gt;for(int i = 0; i &amp;lt; N; i++){...}&lt;/code&gt;；那么遍历链表也有一个对应方式:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;for (Node x = first; x != null; x = x.next) {
   // 处理 x.item
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6、堆栈的链表实现&lt;/strong&gt;&lt;br/&gt;直接上代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.util.Iterator;
import java.util.NoSuchElementException;

public class Stack&amp;lt;Item&amp;gt; implements Iterable&amp;lt;Item&amp;gt; {
    private Node&amp;lt;Item&amp;gt; first;     // 栈顶（最近添加的元素）
    private int n;                // 元素数量

    private static class Node&amp;lt;Item&amp;gt; {
        private Item item;
        private Node&amp;lt;Item&amp;gt; next;// 定义了节点的嵌套类
    }

    /**
     * Initializes an empty stack.
     */
    public Stack() {
        first = null;
        n = 0;
    }

    /**
     * 当first==null或者n==0时，栈是空的
     */
    public boolean isEmpty() {
        return first == null;
    }
    
    public int size() {
        return n;
    }

    /**
     * 向栈顶添加元素
     */
    public void push(Item item) {
        Node&amp;lt;Item&amp;gt; oldfirst = first;
        first = new Node&amp;lt;Item&amp;gt;();
        first.item = item;
        first.next = oldfirst;
        n++;
    }

    /**
     * 从栈顶删除元素
     */
    public Item pop() {
        if (isEmpty()) throw new NoSuchElementException(&quot;Stack underflow&quot;);
        Item item = first.item;
        first = first.next;
        n--;
        return item;
    }


    /**
     * 只取值，不删除
     */
    public Item peek() {
        if (isEmpty()) throw new NoSuchElementException(&quot;Stack underflow&quot;);
        return first.item;
    }

    /**
     * 按照LIFO的顺序，返回一个迭代器可以迭代此类
     */
    public Iterator&amp;lt;Item&amp;gt; iterator() {
        return new LinkedIterator(first);
    }
    
    private class LinkedIterator implements Iterator&amp;lt;Item&amp;gt; {
        private Node&amp;lt;Item&amp;gt; current;

        public LinkedIterator(Node&amp;lt;Item&amp;gt; first) {
            current = first;
        }
        public boolean hasNext() {
            return current != null;
        }
        public void remove() {
            throw new UnsupportedOperationException();
        }
        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = current.item;
            current = current.next;
            return item;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;7、队列的链表实现&lt;/strong&gt;&lt;br/&gt;Queue的实现使用的数据结构和Stack类相同，都是链表，但它实现了不同的添加和删除算法，这也是FIFO和LIFO的区别所在。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.util.Iterator;
import java.util.NoSuchElementException;

public class Queue&amp;lt;Item&amp;gt; implements Iterable&amp;lt;Item&amp;gt; {
    private Node&amp;lt;Item&amp;gt; first;    // 指向最早添加的节点的引用
    private Node&amp;lt;Item&amp;gt; last;     // 队尾，最近添加
    private int n;

    private static class Node&amp;lt;Item&amp;gt; {
        private Item item;
        private Node&amp;lt;Item&amp;gt; next;
    }

    public Queue() {
        first = null;
        last  = null;
        n = 0;
    }

    public boolean isEmpty() {
        return first == null;
    }

    public int size() {
        return n;
    }

    /**
     * 向表尾添加元素
     */
    public void enqueue(Item item) {
        Node&amp;lt;Item&amp;gt; oldlast = last;
        last = new Node&amp;lt;Item&amp;gt;();
        last.item = item;
        last.next = null;
        if (isEmpty()){
            first = last;
        }else{
            oldlast.next = last;
        }
        n++;
    }

    /**
     * 从表头删除元素
     */
    public Item dequeue() {
        if (isEmpty()) throw new NoSuchElementException(&quot;Queue underflow&quot;);
        Item item = first.item;
        first = first.next;
        n--;
        if (isEmpty()) last = null;
        return item;
    }

    /**
     * 从表头获取元素，不删除
     */
    public Item peek() {
        if (isEmpty()) throw new NoSuchElementException(&quot;Queue underflow&quot;);
        return first.item;
    }

    public Iterator&amp;lt;Item&amp;gt; iterator()  {
        return new LinkedIterator(first);
    }

    private class LinkedIterator implements Iterator&amp;lt;Item&amp;gt; {
        private Node&amp;lt;Item&amp;gt; current;

        public LinkedIterator(Node&amp;lt;Item&amp;gt; first) {
            current = first;
        }
        public boolean hasNext()  { return current != null;                     }
        public void remove()      { throw new UnsupportedOperationException();  }

        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = current.item;
            current = current.next;
            return item;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相关文献：&lt;br/&gt;&lt;a href=&quot;https://algs4.cs.princeton.edu/13stacks/&quot; target=&quot;_blank&quot;&gt;Bags, Queues, and Stacks&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 06 Jun 2020 15:42:00 +0000</pubDate>
<dc:creator>DaviZhong</dc:creator>
<og:description>1、队列： 先进先出（FIFO），例如超市的收银台、排队买票的顾客。在Java中，它和List的区别在于，List可以在任意位置添加和删除元素，而Queue只有两个操作： 把元素添加到队列末尾； 从队</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/somewhereu/p/13057765.html</dc:identifier>
</item>
<item>
<title>Zookeeper入门 - CoderJerry</title>
<link>http://www.cnblogs.com/yangyuanhu/p/13057772.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangyuanhu/p/13057772.html</guid>
<description>&lt;p&gt;内容不涉及算法相关内容,paxos算法,zab协议等网络上已经有很多优秀的文章,这里就不献丑了&lt;br/&gt;&lt;img src=&quot;https://gitee.com/yangyuanhuyyh/MDimage/raw/master/uPic/zookeeper_small.gif&quot; alt=&quot;ZooKeeper&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ZooKeeper是分布式应用程序的分布式协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、集群管理等&lt;/p&gt;

&lt;p&gt;随着业务发展,单机系统处理能力达到上限,就需要对系统进行扩展,假设我们需要将数据库扩展为主从结构,客户端需要知道数据库节点中主节点的位置,而当主节点发生故障时我们需要将从节点设置为新的主节点,就像redis一样,类似的场景有很多; 而在分布式系统中,需要协调的信息很多,比如某个服务的地址,状态,服务的名称,或是集群间状态同步等等......&lt;/p&gt;
&lt;p&gt;若不使用zookeeper:&lt;/p&gt;
&lt;p&gt;解决办法也简单,比如使用一个map来存储相关的信息,需要访问的时候从内存中取出即可,但由于信息可能需要在不同机器的进程中共享,还需要编写socket通讯,另一方面这样的方式存在单点故障,如果存储信息的服务器宕机,整个系统全部瘫痪;&lt;/p&gt;
&lt;p&gt;为了解决单点故障,需要将这个存储信息的服务设计为分布式的;但是这又产生了新的问题,数据如何在分布式系统中保持一致?&lt;/p&gt;
&lt;p&gt;这就需要一致性算法Paxos来保证,而由于Paxos存在活锁问题zookeeper使用ZAB协议来同步数据,并保证了一致性;&lt;/p&gt;
&lt;p&gt;zookeeper为我们实现了上述的数据存储,分布式服务,高可用性等基础功能,利用zookeeper可以很方便的协调分布式应用程序;&lt;/p&gt;

&lt;p&gt;zookeeper的使用场景比较多,以下例举其最常用的场景&lt;/p&gt;
&lt;h2 id=&quot;服务注册订阅&quot;&gt;服务注册/订阅&lt;/h2&gt;
&lt;p&gt;在分布式服务中,通常都需要使用统一的命名,即将一些复杂不方便记忆,容易出错的信息对应到一个唯一的简洁的名称,zookeeper可以很容易实现名称的唯一性,并在这个唯一的名称下存储一些数据;在访问提供方启动后将信息放到zookeeper中,客户端通过相同的服务名称从zookeeper订阅需要的服务名称,从而获取服务提供方的信息&lt;/p&gt;
&lt;h2 id=&quot;配置管理configuration-management&quot;&gt;配置管理(Configuration Management)&lt;/h2&gt;
&lt;p&gt;在分布式系统中经常有某些服务的调用非常频繁,由于单点压力大所以将其部署为集群,当需要对这个服务的配置进行修改时,以往需要逐个修改,效率低且容易出错,得益于zookeeper提供的watch(监视)机制可以实现集中式配置管理,当配置发生变化zookeeper可以通知所有节点,这样节点就可以访问zookeeper获取并应用最新的配置;&lt;/p&gt;
&lt;h2 id=&quot;组管理group-management&quot;&gt;组管理(Group Management)&lt;/h2&gt;
&lt;p&gt;当需要自己搭建主从结构时,需要能够选举出master,同时当slave上线或是下线时master能够立即感知(利用临时顺序节点,选取最小作为master);当master宕机后,slave要选出新的master,并通知其他slave(利用watch机制实现)&lt;/p&gt;
&lt;h2 id=&quot;分布式锁distribution-lock&quot;&gt;分布式锁(Distribution Lock)&lt;/h2&gt;
&lt;p&gt;在同一台机器实现互斥锁是比较简单的,因为线程或进程之间可以直接利用内存或文件进行状态的同步,但是在分布式环境中,进程运行在不同的计算节点上,无法像单机那样直接通过内存同步,利用zookeeper的watch,多个进程可以监视同一个数据(代表锁),当数据状态发生变化时进程可以知道当前锁的状态;&lt;/p&gt;

&lt;h2 id=&quot;高可用&quot;&gt;高可用&lt;/h2&gt;
&lt;p&gt;ZooKeeper已实现主从复制。像它协调的分布式进程一样，ZooKeeper本身也可以在一组主机上进行主从复制。从而避免单点故障并提高性能；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/yangyuanhuyyh/MDimage/raw/master/uPic/zkservice.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组成ZooKeeper集群的服务器都彼此了解。它们共同维护内存中的数据，以及持久存储中的事务日志和快照。只要及群众大多数服务器可用，ZooKeeper服务将可用。&lt;/p&gt;
&lt;p&gt;客户端连接到单个ZooKeeper服务器。客户端维护一个TCP连接，通过它发送请求，获取响应，获取监视事件并发送心跳检测。如果与服务器的TCP连接断开，客户端将连接到其他服务器。&lt;/p&gt;
&lt;h2 id=&quot;高性能&quot;&gt;高性能&lt;/h2&gt;
&lt;p&gt;在“读取为主”的工作负载中，zookeeper非常快。ZooKeeper应用程序可在数千台计算机上运行，并且在读取比写入更为常见的情况下，其性能最佳，比率约为10：1。&lt;/p&gt;
&lt;h2 id=&quot;提供的保证&quot;&gt;提供的保证&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;顺序一致性-来自客户端的更新将按照其发送顺序进行处理。&lt;/li&gt;
&lt;li&gt;原子性-更新成功或失败。不会产生部分结果。&lt;/li&gt;
&lt;li&gt;单个数据视图-无论客户端连接到哪个服务器，客户端都将看到相同的数据视图。也就是说，即使客户端故障转移到具有相同会话的其他服务器，客户端也永远不会看到系统的较旧数据。(一致性体现)&lt;/li&gt;
&lt;li&gt;可靠性-数据被更新后，此更新将一直持续到客户端重新覆盖更新为止，否则将永久生效&lt;/li&gt;
&lt;li&gt;及时性-确保系统的客户看到的数据在特定时间范围内是最新的。（最终一致性）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1节点znode&quot;&gt;1.节点znode&lt;/h2&gt;
&lt;p&gt;Zookeeper会保存任务的分配、完成情况，等共享信息，那么ZooKeeper是如何保存的呢?在 ZooKeeper中，这些信息被保存在一个个数据节点上，这些节点被称为znode。它采用了类似文件系统 的层级树状结构进行管理。见下图示例:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/yangyuanhuyyh/MDimage/raw/master/uPic/image-20200606124840346.png&quot; alt=&quot;image-20200606124840346&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根节点/包含4个子节点，其中三个拥有下一级节点。有的叶子节点存储了信息。 节点上没有存储数据，也有着重要的含义。比如在主从模式中，当/master节点没有数据时，代表分布式应用的主节点还没有选举出来。&lt;/p&gt;
&lt;p&gt;znode节点存储的数据为字节数组bytes。存储数据的格式zookeeper不做限制，也不提供解析，需要应用自 己实现。&lt;/p&gt;
&lt;h4 id=&quot;持久节点&quot;&gt;持久节点&lt;/h4&gt;
&lt;p&gt;持久节点只能通过delete删除。zookeeper会将操作以日志的形式写入到磁盘,当日志变大时，会将所有znodes当前状态的快照写入文件系统，并生成新的事务日志文件;当zookeeper启动时将从日志恢复数据;&lt;/p&gt;
&lt;h4 id=&quot;临时节点&quot;&gt;临时节点&lt;/h4&gt;
&lt;p&gt;临时节点在创建该节点的客户端崩溃或关闭时，自动被删除。在当前版本，由于临时znode会因为创建者会话过期被删 除，所以不允许临时节点拥有子节点。&lt;/p&gt;
&lt;p&gt;前面 例子中的/master应该使用临时节点，这样当主节点失效或者退出时，该znode被删除，其他节点 知道主节点崩溃了，开始进行选举的逻辑。另外/works/worker-1也应该是临时节点，在此从节点 失效的时候，该临时节点自动删除。&lt;/p&gt;
&lt;h4 id=&quot;节点版本&quot;&gt;节点版本&lt;/h4&gt;
&lt;p&gt;Znodes还维护一个数据结构，其中包括用于数据更改，ACL(访问控制列表)更改和时间戳的版本号，znode的数据每次更改时，版本号都会增加。例如，每当客户端检索数据时，会接收数据的版本。当客户端发起写入操作时则需提供与服务器上一致的版本号,否则将更新失败;&lt;/p&gt;
&lt;p&gt;每个znode上的数据都被原子地读取和写入。读取操作将获取与znode关联的所有数据，而写入将替换所有数据。每个节点都有一个访问控制列表（ACL），用于限制谁可以执行操作。&lt;/p&gt;
&lt;h4 id=&quot;有序节点&quot;&gt;有序节点&lt;/h4&gt;
&lt;p&gt;znode可以被设置为有序(sequential)节点。有序znode节点被分配唯一一个单调递增的序号。 序号的格式为％010d，即10位数字，不足的填充为0，零如果创建了个一有序节点为/workers/worker-，zookeeper会自动分配一个序号1，追加在名字后面，znode名称为/workers/worker-0000000001。通过这种方式，可以创建唯一名称znode，并且可以直观 的看到创建的顺序。&lt;/p&gt;
&lt;h4 id=&quot;znode常见操作及暴露的api&quot;&gt;znode常见操作及暴露的API:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;ls /path 查看节点的所有子节点&lt;/li&gt;
&lt;li&gt;create /path data :创建一个名为/path的znode，数据为data。
&lt;ul&gt;&lt;li&gt;-e 临时节点(当前客户端关闭后/或当前节点重启后失效)&lt;/li&gt;
&lt;li&gt;-s 有序节点(在节点名称后面添加节点自增的序号)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;set /path data :设置名为/path的znode的数据为data&lt;/li&gt;
&lt;li&gt;get /path :返回名为/path的znode的数据、&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;API&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;delete&lt;/em&gt;：删除节点&lt;/li&gt;
&lt;li&gt;&lt;em&gt;exists&lt;/em&gt;：测试某个位置是否存在节点&lt;/li&gt;
&lt;li&gt;&lt;em&gt;get children&lt;/em&gt; ：获取节点子节点的列表&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sync&lt;/em&gt;：等待数据在所用节点完成同步&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：上述列出的指令部分用于zkCli部分用于javaAPI;&lt;/p&gt;
&lt;h2 id=&quot;2观察与通知（watch）&quot;&gt;2.观察与通知（watch）&lt;/h2&gt;
&lt;p&gt;分布式应用需要及时知道zookeeper中znode的变化，从而了解到分布式应用整体的状况，如果采用轮 询方式，代价太大，绝大多数查询都是无效的。因此，zookeeper采用了通知的机制。客户端向 zookeeper请求，在特定的znode设置观察点(watcher)。Watcher是Zookeeper中的一个很重要的 特性。Zookeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候， ZooKeeper服务端会将事件通知到感兴趣的客户端上去，该机制是Zookeeper实现分布式协调服务的重要支撑。、&lt;/p&gt;
&lt;p&gt;wtahc的主要特性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当监听器监听的事件被触发,服务端会发送通知给客户端,但通知信息中不包括事件的具体内容。以监听ZNode结点数据变化为例,当Znode的数据被改变,客户端会收到事件类型为 NodeDataChanged的通知,但该Znode的数据改变成了什么客户端无法从通知中获取,需要客户端 在收到通知后手动去获取。&lt;/li&gt;
&lt;li&gt;Watcher是一次性的。一旦被触发将会失效。&lt;/li&gt;
&lt;li&gt;3.6.0中的新增功：客户端可以在znode上设置永久性的监视，这些监视在触发时不会删除，并且会以递归方式触发注册znode以及所有子znode的通知。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 06 Jun 2020 15:42:00 +0000</pubDate>
<dc:creator>CoderJerry</dc:creator>
<og:description>内容不涉及算法相关内容,paxos算法,zab协议等网络上已经有很多优秀的文章,这里就不献丑了 什么是Zookeeper ZooKeeper是分布式应用程序的分布式协调服务，是Google的Chubb</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/yangyuanhu/p/13057772.html</dc:identifier>
</item>
<item>
<title>深入正则表达式(3):正则表达式工作引擎流程分析与原理释义 - zhoulujun</title>
<link>http://www.cnblogs.com/zhoulujun/p/13057774.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoulujun/p/13057774.html</guid>
<description>&lt;p&gt;正则表达式引擎正则引擎主要可以分为两大类：一种是DFA(是确定性有限自动机)，一种是NFA(非确定性有限自动机)。总的来说，DFA可以称为文本&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;316.09427200389&quot;&gt;
&lt;p&gt;作为正则的使用者也一样，不懂正则引擎原理的情况下，同样可以写出满足需求的正则，但是不知道原理，却很难写出高效且没有隐患的正则。所以对于经常使用正则，或是有兴趣深入学习正则的人，还是有必要了解一下正则引擎的匹配原理的。&lt;/p&gt;
&lt;p&gt;有兴趣可以回顾《深入正则表达式(0):正则表达式概述》&lt;/p&gt;
&lt;h2&gt;正则引擎类型&lt;/h2&gt;
&lt;p&gt;正则引擎主要可以分为两大类：一种是DFA(Deterministic Finite Automatons/确定性有限自动机—)，一种是NFA(Nondeterministic Finite Automatons/非确定性有限自动机)。总的来说，&lt;/p&gt;
&lt;h2&gt;NFA与DFA工作的区别：&lt;/h2&gt;
&lt;p&gt;我们常常说用正则去匹配文本，这是NFA的思路，&lt;strong&gt;DFA本质上其实是用文本去匹配正则&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;
'for tonight's'.match(/to(nite|knite|night)/);
&lt;/pre&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;如果是NFA引擎，表达式占主导地位。在字符串先查找字符串中的t，然后依次匹配，如果是o，则继续(以此循环)。匹配到to后，到n，就面临三种选择，每一种都去尝试匹配一下（它也不嫌累），第一个分支也是依次匹配，到t这里停止(nite分到t这里直接被淘汰)；同理，接着第二个分支在k这里也停止了；终于在第三个分支柳暗花明，找到了自己的归宿。 NFA 工作方式是以正则表达式为标准，反复测试字符串，这样同样一个字符串有可能被反复测试了很多次！&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;如果是DFA引擎呢，文本占主导地位。从整个字符串第一个字符开始f开始查找t，查找到t后，定位到t，以知其后为o，则去查看正则表达式其相应位置后是否为o，如果是，则继续（以此循环)，再去查正则表达式o后是否为n（此时淘汰knite分支），再后是否为g(淘汰nite分支)，这个时候只剩一个分支，直接匹配到终止即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;只有正则表达式才有分支和范围，文本仅仅是一个字符流。这带来什么样的后果？就是&lt;strong&gt;NFA引擎在匹配失败的时候，如果有其他的分支或者范围，它会返回&lt;/strong&gt;，记住，返回，&lt;strong&gt;去尝试其他的分支&lt;/strong&gt;。&lt;strong&gt;而DFA引擎一旦匹配失败，就结束了&lt;/strong&gt;，它没有退路。&lt;/p&gt;
&lt;p&gt;这就是它们之间的本质区别。其他的不同都是这个特性衍生出来的。&lt;/p&gt;
&lt;h2&gt;NFA VS DFA&lt;/h2&gt;
&lt;p&gt;首先，正则表达式在计算机看来只是一串符号，正则引擎首先肯定要解析它。NFA引擎只需要编译就好了；而DFA引擎则比较繁琐，编译完还不算，还要遍历出表达式中所有的可能。因为对DFA引擎来说机会只有一次，它必须得提前知道所有的可能，才能匹配出最优的结果。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;在编译阶段，NFA引擎比DFA引擎快&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;其次，DFA引擎在匹配途中一遍过，溜得飞起。相反NFA引擎就比较苦逼了，它得不厌其烦的去尝试每一种可能性，可能一段文本它得不停返回又匹配，重复好多次。当然运气好的话也是可以一遍过的。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;在运行阶段，NFA引擎比DFA引擎慢&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;最后，因为NFA引擎是表达式占主导地位，所以它的表达能力更强，开发者的控制度更高，也就是说开发者更容易写出性能好又强大的正则来，当然也更容易造成性能的浪费甚至撑爆CPU。DFA引擎下的表达式，只要可能性是一样的，任何一种写法都是没有差别(可能对编译有细微的差别)的，因为对DFA引擎来说，表达式其实是死的。而NFA引擎下的表达式，高手写的正则和新手写的正则，性能可能相差10倍甚至更多。&lt;/p&gt;
&lt;p&gt;也正是因为主导权的不同，正则中的很多概念，比如非贪婪模式、反向引用、零宽断言等只有NFA引擎才有。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;在表达能力上，NFA引擎秒杀DFA引擎&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;但是NFA以表达式为主导，因而NFA更容易操纵，因此一般程序员更偏爱NFA引擎！&lt;/p&gt;
&lt;p&gt;当今市面上大多数正则引擎都是NFA引擎，应该就是胜在表达能力上。&lt;/p&gt;

&lt;p&gt;总体来说，两种引擎的工作方式完全不同，一个(NFA)以表达式为主导，一个(DFA)以文本为主导！两种引擎各有所长，而真正的引用则取决与你的需要以及所使用的语言。&lt;/p&gt;
&lt;p&gt;这两种引擎都有了很久的历史(至今二十多年)，当中也由这两种引擎产生了很多变体！&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;因为NFA引擎比较灵活，很多语言在实现上有细微的差别。所以后来大家弄了一个标准，符合这个标准的正则引擎就叫做POSIX NFA引擎，其余的就只能叫做传统型NFA引擎咯。&lt;/p&gt;
&lt;p&gt;Deterministic finite automaton,Non-deterministic finite automaton,Traditional NFA,Portable Operating System Interface for uniX NFA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是POSIX的出台规避了不必要变体的继续产生。这样一来，主流的正则引擎又分为3类：DFA，传统型NFA，POSIX NFA。&lt;/p&gt;
&lt;h2&gt;正则引擎三国&lt;/h2&gt;
&lt;h3&gt;DFA引擎&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;DFA引擎在线性时状态下执行，因为它们不要求回溯&lt;/strong&gt;（并因此它们永远不测试相同的字符两次）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DFA引擎还可以确保匹配最长的可能的字符串&lt;/strong&gt;。但是，因为 DFA 引擎只包含有限的状态，所以它不能匹配具有反向引用的模式；并且因为它不构造显示扩展，所以它不可以捕获子表达式。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;DFN不回溯，所以匹配快速，因而不支持捕获组，支持反向引用和$number引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;传统的 NFA引擎&lt;/h3&gt;
&lt;p&gt;传统的 &lt;strong&gt;NFA 引擎运行所谓的“贪婪的”匹配回溯算法，以指定顺序测试正则表达式的所有可能的扩展并接受第一个匹配项&lt;/strong&gt;。因为传统的 NFA 构造正则表达式的特定扩展以获得成功的匹配，所以它可以捕获子表达式匹配和匹配的反向引用。但是，&lt;strong&gt;因为传统的 NFA 回溯，所以它可以访问完全相同的状态多次&lt;/strong&gt;（如果通过不同的路径到达该状态）。因此，在最坏情况下，它的执行速度可能非常慢。因为&lt;strong&gt;传统的 NFA 接受它找到的第一个匹配，所以它还可能会导致其他（可能更长）匹配未被发现&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;大多数编程语言和工具使用的是传统型的NFA引擎，它有一些DFA不支持的特性：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;捕获组、反向引用和$number引用方式；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;环视(Lookaround，(?&amp;lt;=…)、(?&amp;lt;!…)、(?=…)、(?!…))，或者有的有文章叫做预搜索；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;忽略优化量词（??、*?、+?、{m,n}?、{m,}?），或者有的文章叫做非贪婪模式；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;占有优先量词（?+、*+、++、{m,n}+、{m,}+，目前仅Java和PCRE支持），固化分组(?&amp;gt;…)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;POSIX NFA引擎&lt;/h3&gt;
&lt;p&gt;POSIX NFA引擎主要指符合POSIX标准的NFA引擎，与传统的 NFA 引擎类似，不同的一点在于：提供longest-leftmost匹配，也就是在找到最左侧最长匹配之前，它将继续回溯（&lt;strong&gt;可以确保已找到了可能的最长的匹配之前它们将继续回溯&lt;/strong&gt;）。因此，POSIX NFA 引擎的速度慢于传统的 NFA 引擎；并且在使用 POSIX NFA 时，您恐怕不会愿意在更改回溯搜索的顺序的情况下来支持较短的匹配搜索，而非较长的匹配搜索。&lt;/p&gt;
&lt;p&gt;同DFA一样，非贪婪模式或者说忽略优先量词对于POSIX NFA同样是没有意义的。&lt;/p&gt;
&lt;h3&gt;三种引擎的使用情况&lt;/h3&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;6&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用传统型NFA引擎的程序主要有(主流)：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Java、Emacs(JavaScript/actionScript)、Perl、PHP、Python、Ruby、.NET语言&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;VI,GNU Emacs,PCRE library,sed；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;使用POSIX NFA引擎的程序主要有：mawk,Mortice Kern Systems’ utilities,GNU Emacs(使用时可以明确指定)；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;使用DFA引擎的程序主要有：awk,egrep,flex,lex,MySQL,Procmail等；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;也有使用DFA/NFA混合的引擎：GNU awk,GNU grep/egrep,Tcl。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;《精通正则表达式》书中说POSIX NFA引擎不支持非贪婪模式，很明显JavaScript不是POSIX NFA引擎。&lt;/p&gt;
&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;
'123456'.match(/\d{3,6}/);
// [&quot;123456&quot;, index: 0, input: &quot;123456&quot;, groups: undefined]
'123456'.match(/\d{3,6}?/);
// [&quot;123&quot;, index: 0, input: &quot;123456&quot;, groups: undefined]
&lt;/pre&gt;
&lt;p&gt;JavaScript的正则引擎是传统型NFA引擎。&lt;/p&gt;
&lt;p&gt;为什么POSIX NFA引擎不支持也没有必要支持非贪婪模式？&lt;/p&gt;
&lt;h2&gt;回溯&lt;/h2&gt;
&lt;p&gt;现在我们知道，NFA引擎是用表达式去匹配文本，而表达式又有若干分支和范围，一个分支或者范围匹配失败并不意味着最终匹配失败，正则引擎会去尝试下一个分支或者范围。&lt;/p&gt;
&lt;p&gt;正是因为这样的机制，引申出了NFA引擎的核心特点——回溯。&lt;/p&gt;
&lt;p&gt;首先我们要区分备选状态和回溯。&lt;/p&gt;
&lt;p&gt;什么是备选状态？就是说这一个分支不行，那我就换一个分支，这个范围不行，那我就换一个范围。正则表达式中可以商榷的部分就叫做备选状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备选状态可以实现模糊匹配&lt;/strong&gt;，是正则表达能力的一方面。&lt;/p&gt;
&lt;p&gt;回溯可不是个好东西。想象一下，面前有两条路，你选择了一条，走到尽头发现是条死路，你只好原路返回尝试另一条路。这个原路返回的过程就叫回溯，它在正则中的含义是吐出已经匹配过的文本。&lt;/p&gt;
&lt;p&gt;我们来看两个例子：&lt;/p&gt;
&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;
'abbbc'.match(/ab{1,3}c/);
// [&quot;abbbc&quot;, index: 0, input: &quot;abbbc&quot;, groups: undefined]
'abc'.match(/ab{1,3}c/);
// [&quot;abc&quot;, index: 0, input: &quot;abc&quot;, groups: undefined]
&lt;/pre&gt;
&lt;p&gt;第一个例子，第一次a匹配a成功，接着碰到贪婪匹配，不巧正好是三个b贪婪得逞，最后用c匹配c成功。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;正则&lt;/th&gt;
&lt;th&gt;文本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;/a/&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;abb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;abbb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}c/&lt;/td&gt;
&lt;td&gt;abbbc&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;第二个例子的区别在于文本只有一个b。所以表达式在匹配第一个b成功后继续尝试匹配b，然而它见到的只有黄脸婆c。不得已将c吐出来，委屈一下，毕竟贪婪匹配也只是尽量匹配更多嘛，还是要臣服于匹配成功这个目标。最后不负众望用c匹配c成功。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;正则&lt;/th&gt;
&lt;th&gt;文本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;/a/&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;abc&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}c/&lt;/td&gt;
&lt;td&gt;abc&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;请问，第二个例子发生回溯了吗？&lt;/p&gt;
&lt;p&gt;并没有。&lt;/p&gt;
&lt;p&gt;诶，你这样就不讲道理了。不是把c吐出来了嘛，怎么就不叫回溯了？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回溯是吐出已经匹配过的文本&lt;/strong&gt;&lt;strong&gt;。匹配过程中造成的匹配失败不算回溯&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了让大家更好的理解，我举一个例子：&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;你和一个女孩子(或者男孩子)谈恋爱，接触了半个月后发现实在不合适，于是提出分手。这不叫回溯，仅仅是不合适而已。&lt;/p&gt;
&lt;p&gt;你和一个女孩子(或者男孩子)谈恋爱，这段关系维持了两年，并且已经同居。但由于某些不可描述的原因，疲惫挣扎之后，两人最终还是和平分手。这才叫回溯。&lt;/p&gt;
&lt;p&gt;虽然都是分手，但你们应该能理解它们的区别吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了让大家更好的理解，我举一个例子：&lt;/p&gt;
&lt;p&gt;你和一个女孩子(或者男孩子)谈恋爱，接触了半个月后发现实在不合适，于是提出分手。这不叫回溯，仅仅是不合适而已。&lt;/p&gt;
&lt;p&gt;你和一个女孩子(或者男孩子)谈恋爱，这段关系维持了两年，并且已经同居。但由于某些不可描述的原因，疲惫挣扎之后，两人最终还是和平分手。这才叫回溯。&lt;/p&gt;
&lt;p&gt;虽然都是分手，但你们应该能理解它们的区别吧。&lt;/p&gt;
&lt;p&gt;网络上有很多文章都认为上面第二个例子发生了回溯。至少根据我查阅的资料，第二个例子发生的情况不能被称为回溯。当然也有可能我([&lt;a href=&quot;https://juejin.im/post/5becc2aef265da6110369c93&quot; rel=&quot;nofollow&quot; target=&quot;_self&quot;&gt;马蹄疾&lt;/a&gt;]是错的，欢迎讨论。&lt;/p&gt;
&lt;p&gt;我们再来看一个真正的回溯例子：&lt;/p&gt;
&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;
'ababc'.match(/ab{1,3}c/);
// [&quot;abc&quot;, index: 2, input: &quot;ababc&quot;, groups: undefined]
&lt;/pre&gt;
&lt;p&gt;匹配文本到ab为止，都没什么问题。后面既匹配不到b，也匹配不到c。引擎只好将文本ab吐出来，从下一个位置开始匹配。因为上一次是从第一个字符a开始匹配，所以下一个位置当然就是从第二个字符b开始咯。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;正则&lt;/th&gt;
&lt;th&gt;文本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;/a/&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;aba&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}c/&lt;/td&gt;
&lt;td&gt;aba&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/a/&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/a/&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ab&lt;/code&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ab&lt;/code&gt;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ab&lt;/code&gt;abc&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}/&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ab&lt;/code&gt;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ab{1,3}c/&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ab&lt;/code&gt;abc&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;一开始引擎是以为会和最早的ab走完余生的，然而命运弄人，从此天涯。&lt;/p&gt;
&lt;p&gt;这他妈才叫回溯！&lt;/p&gt;
&lt;p&gt;还有一个细节。上面例子中的回溯并没有往回吐呀，吐出来之后不应该往回走嘛，怎么往后走了？&lt;/p&gt;
&lt;p&gt;我们再来看一个例子：&lt;/p&gt;
&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;
'&quot;abc&quot;def'.match(/&quot;.*&quot;/);
// [&quot;&quot;abc&quot;&quot;, index: 0, input: &quot;&quot;abc&quot;def&quot;, groups: undefined]
&lt;/pre&gt;
&lt;p&gt;因为.*是贪婪匹配，所以它把后面的字符都吞进去了。直到发现目标完不成，不得已往回吐，吐到第二个&quot;为止，终于匹配成功。这就好比结了婚还在外面养小三，几经折腾才发现家庭才是最重要的，自己的行为背离了初衷，于是幡然悔悟。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;正则&lt;/th&gt;
&lt;th&gt;文本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;/&quot;/&lt;/td&gt;
&lt;td&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*/&lt;/td&gt;
&lt;td&gt;&quot;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*/&lt;/td&gt;
&lt;td&gt;&quot;ab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*/&lt;/td&gt;
&lt;td&gt;&quot;abc&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;de&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;def&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*&quot;/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;def&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*&quot;/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;de&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*&quot;/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/&quot;.*&quot;/&lt;/td&gt;
&lt;td&gt;&quot;abc&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;我想说的是，不要被回溯的回字迷惑了。它的本质是把已经吞进去的字符吐出来。至于吐出来之后是往回走还是往后走，是要根据情况而定的。&lt;/p&gt;
&lt;h2&gt;优化正则表达式&lt;/h2&gt;
&lt;p&gt;现在我们知道了控制回溯是控制正则表达式性能的关键。&lt;/p&gt;
&lt;p&gt;控制回溯又可以拆分成两部分：第一是控制备选状态的数量，第二是控制备选状态的顺序。&lt;/p&gt;
&lt;p&gt;备选状态的数量当然是核心，然而如果备选状态虽然多，却早早的匹配成功了，早匹配早下班，也就没那么多糟心事了。&lt;/p&gt;
&lt;h2&gt;传统NFA工作流程&lt;/h2&gt;
&lt;p&gt;许多因素影响正则表达式的效率，首先，正则表达式适配的文本千差万别，部分匹配时比完全不匹配所用的时间要长。上面提到过，JavaScript是传统NFA引擎，当然每种浏览器的正则表达式引擎也有不同的内部优化。&lt;/p&gt;
&lt;p&gt;为了有效地使用正则表达式，重要的是理解它们的工作原理。下面是一个正则表达式处理的基本步骤：&lt;/p&gt;
&lt;h3&gt;第一步：编译&lt;/h3&gt;
&lt;p&gt;当你创建了一个正则表达式对象之后（使用一个正则表达式直接量或者RegExp构造器），浏览器检查你的模板有没有错误，然后将它转换成一个本机代码例程，用于执行匹配工作。如果你将正则表达式赋给一个变量，你可以避免重复执行此步骤。&lt;/p&gt;
&lt;h3&gt;第二步：设置起始位置&lt;/h3&gt;
&lt;p&gt;当一个正则表达式投入使用时，首先要确定目标字符串中开始搜索的位置。它是字符串的起始位置，或由正则表达式的lastIndex属性指定，但是当它从第四步返回到这里的时候（因为尝试匹配失败），此位置将位于最后一次尝试起始位置推后一个字符的位置上。&lt;/p&gt;
&lt;p&gt;      浏览器优化正则表达式引擎的办法是，在这一阶段中通过早期预测跳过一些不必要的工作。例如，如果一个正则表达式以^开头，IE 和Chrome通常判断在字符串起始位置上是否能够匹配，然后可避免愚蠢地搜索后续位置。另一个例子是匹配第三个字母是x的字符串，一个聪明的办法是先找到x，然后再将起始位置回溯两个字符。&lt;/p&gt;
&lt;p&gt;第三步：匹配每个正则表达式的字元&lt;/p&gt;
&lt;p&gt;      正则表达式一旦找好起始位置，它将一个一个地扫描目标文本和正则表达式模板。当一个特定字元匹配失败时，正则表达式将试图回溯到扫描之前的位置上，然后进入正则表达式其他可能的路径上。&lt;/p&gt;
&lt;p&gt;      第四步：匹配成功或失败&lt;/p&gt;
&lt;p&gt;      如果在字符串的当前位置上发现一个完全匹配，那么正则表达式宣布成功。如果正则表达式的所有可能路径都尝试过了，但是没有成功地匹配，那么正则表达式引擎回到第二步，从字符串的下一个字符重新尝试。只有字符串中的每个字符（以及最后一个字符后面的位置）都经历了这样的过程之后，还没有成功匹配，那么正则表达式就宣布彻底失败。&lt;/p&gt;
&lt;p&gt;      牢记这一过程将有助于您明智地判别那些影响正则表达式性能问题的类型。&lt;/p&gt;

&lt;h2&gt;工具&lt;/h2&gt;
&lt;p&gt;[ regex101 ]是一个很多人推荐过的工具，可以拆分解释正则的含义，还可以查看匹配过程，帮助理解正则引擎。如果只能要一个正则工具，那就是它了。&lt;/p&gt;
&lt;p&gt;[ regexper ]是一个能让正则的备选状态可视化的工具，也有助于理解复杂的正则语法。&lt;/p&gt;

&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&quot;&gt;https://baike.baidu.com/item/正则表达式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正则表达式工作原理 &lt;a href=&quot;https://www.cnblogs.com/aaronjs/archive/2012/06/30/2570800.html&quot;&gt;https://www.cnblogs.com/aaronjs/archive/2012/06/30/2570800.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一次性搞懂JavaScript正则表达式之引擎 &lt;a href=&quot;https://juejin.im/post/5becc2aef265da6110369c93&quot;&gt;https://juejin.im/post/5becc2aef265da6110369c93&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载&lt;a href=&quot;https://www.zhoulujun.cn/&quot; target=&quot;_blank&quot;&gt;本站&lt;/a&gt;文章《&lt;a href=&quot;https://www.zhoulujun.cn/html/theory/algorithm/IntroductionAlgorithms/8430.html&quot;&gt;深入正则表达式(3):正则表达式工作引擎流程分析与原理释义&lt;/a&gt;》,&lt;br/&gt;请注明出处：&lt;a href=&quot;https://www.zhoulujun.cn/&quot;&gt;https://www.zhoulujun.cn/html/theory/algorithm/IntroductionAlgorithms/8430.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 06 Jun 2020 15:42:00 +0000</pubDate>
<dc:creator>zhoulujun</dc:creator>
<og:description>正则表达式引擎正则引擎主要可以分为两大类：一种是DFA(是确定性有限自动机)，一种是NFA(非确定性有限自动机)。总的来说，DFA可以称为文本</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhoulujun/p/13057774.html</dc:identifier>
</item>
</channel>
</rss>