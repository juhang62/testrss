<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>[Node.js] 3、搭建hexo博客 - beautifulzzzz</title>
<link>http://www.cnblogs.com/zjutlitao/p/10416094.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjutlitao/p/10416094.html</guid>
<description>
&lt;h4 id=&quot;一安装新版本的nodejs和npm&quot;&gt;一、安装新版本的nodejs和npm&lt;/h4&gt;
&lt;p&gt;安装n模块：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install -g n&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;升级node.js到最新稳定版&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;n stable&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;二安装hexo&quot;&gt;二、安装hexo&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; 参考github，不要去其官网： https://github.com/hexojs/hexo&lt;/p&gt;
&lt;p&gt;安装Hexo&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install hexo-cli -g&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Setup your blog&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hexo init blemesh
cd blemesh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; &lt;br/&gt;安装Cactus主题，众多开源主题中比较简洁的一个：&lt;br/&gt;主题页： https://hexo.io/themes/&lt;br/&gt;Cactus页： https://github.com/probberechts/hexo-theme-cactus&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改主题配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim _config.yml

# Extensions
## Plugins: https://hexo.io/plugins/
## Themes: https://hexo.io/themes/
## theme: landscape
theme: cactus
theme_config:
    colorscheme: white&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; &lt;br/&gt;Create pages and articles with the hexo new [layout] &amp;lt;title&amp;gt; command. For example, to create an &quot;about me&quot; page, run:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hexo new page about &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will create a new file in source/about/index.md Similary, you can create a new article with&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hexo new post &quot;hello world&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and add some interesting content in source/_posts/hello-world.md.&lt;/p&gt;
&lt;p&gt; &lt;br/&gt;Start the server：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hexo server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8001 port：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hexo server -p 8001&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;三安装hexo-admin并配置&quot;&gt;三、安装hexo-admin并配置&lt;/h4&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install --save hexo-admin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打开目录下的_config.yml配置hexo-admin：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;admin:
    username: XXXX(自己设置用户名)
    password_hash: XXXXXXXXX(密码，但是是明文经过bcrypt hash加密后生成的)
    secret: hey hexo(用于cookie安全)
    deployCommand: './admin_script/hexo-generate.sh'(调用该脚本）&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; &lt;br/&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;br/&gt;1）其中password_hash是你自己的明文密码经过加密后的字符串，但是如果用类似下面的网址： https://bcrypt-generator.com/ 会生成&lt;code&gt;:$2y$10$pJjIxxxxxfMn9U/xxxxxNuuA20kh1eoB7vZxxxxx/7WpeV7IOxxxx&lt;/code&gt;类似的加密串，但是运行会报&lt;code&gt;invalid salt revision&lt;/code&gt;错误，其原因是：&lt;br/&gt; &lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;➜  blemesh cat node_modules/hexo-admin/www/bundle.js | head -4851 | tail -10
    if (salt.charAt(0) != '$' || salt.charAt(1) != '2')
        throw &quot;Invalid salt version&quot;;
    if (salt.charAt(2) == '$')
        off = 3;
    else {
        minor = salt.charAt(2);
        if (minor != 'a' || salt.charAt(3) != '$')
            throw &quot;Invalid salt revision&quot;;
        off = 4;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要版本号是2a的加密方式，因此只能用python自己写了：&lt;br/&gt;https://pypi.org/project/bcrypt/3.1.0/&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hashed = bcrypt.hashpw(password, bcrypt.gensalt(prefix=b&quot;2a&quot;))
&amp;gt;&amp;gt;&amp;gt; print(hashed)
b'$2a$12$PAoJr3USOBxxxxxxxxxxxxxxV/.h.QNbh/6q.xxxxxxxxxxxxxxxxcDcJ.'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; &lt;br/&gt;2）其中配置中有个脚本： ./admin_script/hexo-generate.sh 需要自己创建：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;➜  blemesh cat admin_script/hexo-generate.sh 
hexo g
➜  blemesh chmod +x admin_script/hexo-generate.sh &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个脚本有什么用，啥时候触发？可以参考： https://www.jianshu.com/p/68e727dda16d step 5，admin后台管理博客有个deploy按钮，点击这个按钮就会执行这个脚本，该脚本会将md文件生成静态网页，如果用nginx配置去访问静态网页，速度会快很多。&lt;/p&gt;

&lt;h4 id=&quot;四nginx配置&quot;&gt;四、nginx配置&lt;/h4&gt;
&lt;p&gt;配置nginx：编辑 /etc/nginx/nginx.conf 插入下面代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server {
    listen 3001;
    server_name www.beautifulzzzz.com;
    index index.html index.htm index;
    root /root/App/blemesh/public; 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;之后重启nginx：nginx -s reload&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;br/&gt;执行nginx后会报错误：nginx 403 Forbidden，原因是配置文件nginx.conf文件的执行用户和当前用户不一致导致的，把之前的nobody改成当前用户root。再有错误可以参考&lt;sup&gt;&lt;a href=&quot;https://blog.csdn.net/huangbaokang/article/details/79924833&quot;&gt;[7]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.csdn.net/qq_14989227/article/details/78295926&quot;&gt;[8]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h4 id=&quot;五增加tag&quot;&gt;五、增加tag&lt;/h4&gt;
&lt;p&gt;hexo主页下的tag标签、category标签无显示找不到：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;解决办法： 在主目录下执行 hexo new page &quot;tags&quot;或者hexo new page &quot;category&quot;&lt;/li&gt;
&lt;li&gt;在/source/tags/index.md中设置修改&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;➜  blemesh cat ./source/tags/index.md 
---
type: &quot;tags&quot;
comments: false
date: 2019-02-24 02:53:03
---&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;同理categories:&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;➜  blemesh cat ./source/category/index.md 
---
type: &quot;category&quot;
comments: false
date: 2019-02-24 02:53:34
---&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;或者about me:&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;➜  blemesh cat ./source/about/index.md 
---
title: about
type: &quot;about-me&quot;
comments: false
date: 2019-02-22 00:09:58
---&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;六后台启动&quot;&gt;六、后台启动&lt;/h4&gt;
&lt;p&gt;hexo server进程一直在后台运行的办法（执行hexo server -d &amp;amp;在一段时间后会停止hexo，此时无法打开后台），采用pm2接管hexo进程：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install -g pm2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在博客的根目录下创建一个hexo_run.js的文件，文件内容如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;➜  blemesh cat hexo_run.js 
const { exec  } = require('child_process')
exec('hexo server -p 8001 -d',(error, stdout, stderr) =&amp;gt; {
    if(error){
    console.log('exec error: ${error}')
    return
    }
    console.log('stdout: ${stdout}');
    console.log('stderr: ${stderr}');
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行开启命令: pm2 start hexo_run.js&lt;/p&gt;
&lt;p&gt;最后附上 &lt;a href=&quot;https://www.jianshu.com/p/40a497e9a6eb&quot;&gt;zhouwaiqiang&lt;/a&gt; 写的一个hexo重启脚本restart_hexo.sh(需要先配置好nginx），需要重启刷新的时候执行source restart_hexo.sh即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;➜  blemesh cat restart_hexo.sh 
#!/bin/bash

PROCESS=`ps -ef|grep hexo|grep -v grep|grep -v PPID|awk '{ print $2 }'`
PROC_NAME=&quot;pm2&quot;
for i in $PROCESS
do
    echo &quot;Kill the $1 process [ $i  ]&quot;
    kill -9 $i
done
hexo clean #清除数据
hexo generate #生成静态文件public文件夹
ProcNumber=`ps -ef |grep -w $PROC_NAME|grep -v grep|wc -l`
if [ $ProcNumber -le 0  ];then
    pm2 start hexo_run.js
else
    pm2 restart hexo_run.js
fi

service nginx restart&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;七体验&quot;&gt;七、体验&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;启动：sh ./restart_hexo.sh&lt;/li&gt;
&lt;li&gt;访问主页： http://www.beautifulzzzz.com:8001/&lt;/li&gt;
&lt;li&gt;访问nginx静态快速版网页： http://www.beautifulzzzz.com:3001/&lt;/li&gt;
&lt;li&gt;访问后台编写文章： http://www.beautifulzzzz.com:8001/admin/&lt;/li&gt;
&lt;li&gt;编写好之后点击Deploy会自动调用之前的脚本，静态网页就有了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.beautifulzzzz.com:3000/?path=/31/412130e3f30e67cc82ce206e9dc6f7.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;: &lt;span&gt;&lt;strong&gt;完～&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;: &lt;span&gt;&lt;strong&gt;大家觉得不错，可以点推荐给更多人～&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;LINKS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/xiashan17/p/6907537.html&quot;&gt;[1]. linux下在线升级nodejs&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/hexojs/hexo&quot;&gt;[2]. hexo github&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/probberechts/hexo-theme-cactus&quot;&gt;[3]. Cactus theme&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://hexo.io/docs/&quot;&gt;[4]. hexo documentation&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/justsilky/p/9552635.html&quot;&gt;[5]. Error: EACCES: permission denied, mkdir '......node-sass/build'错误解决方案&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/iterjpnic/article/details/19410017&quot;&gt;[6]. bcrypt加密算法&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/huangbaokang/article/details/79924833&quot;&gt;[7]. nginx 403 Forbidden错误的原因和解决方法&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/qq_14989227/article/details/78295926&quot;&gt;[8]. Failed to start A high performance web server and a reverse proxy server 错误提示&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.jianshu.com/p/40a497e9a6eb&quot;&gt;[9]. 重要-hexo搭建个人博客完整版&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.jianshu.com/p/68e727dda16d&quot;&gt;[10]. 如何优雅地发布Hexo博客&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;@beautifulzzzz
以蓝牙技术为基础的的末梢无线网络系统架构及创新型应用探索！
领域：智能硬件、物联网、自动化、前沿软硬件
博客：https://www.cnblogs.com/zjutlitao/
园友交流群|微信交流群：414948975|园友交流群&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 01 Mar 2019 17:37:00 +0000</pubDate>
<dc:creator>beautifulzzzz</dc:creator>
<og:description>  一、安装新版本的nodejs和npm 安装n模块： npm install g n 升级node.js到最新稳定版 n stable   二、安装hexo note: 参考gi</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjutlitao/p/10416094.html</dc:identifier>
</item>
<item>
<title>PHP数字金额转换大写金额 - 崔元欣</title>
<link>http://www.cnblogs.com/cuiyuanxin/p/10459532.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cuiyuanxin/p/10459532.html</guid>
<description>&lt;p&gt;早些年做CRM用到的一个金额转换函数，今天从旧项目中拿出来记录一下。金额转换的函数方法有很多，都很不错。不过这个是小崔刚工作的时候写的一个转换函数，多少还是有点纪念意义。如有问题请朋友们指出，小崔及时修正。谢谢啦！&lt;/p&gt;
&lt;p&gt;废话不多说直接上代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;* 数字金额转换大写数字
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;* $num 数字类型
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; inttodaxie(&lt;span&gt;$num&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断$num是否数字&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;is_numeric&lt;/span&gt;(&lt;span&gt;$num&lt;/span&gt;)) &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;$dint&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$num&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;$dstr&lt;/span&gt; = ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt;= &lt;span&gt;$len&lt;/span&gt;; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;$key_&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$num&lt;/span&gt;, &lt;span&gt;$i&lt;/span&gt;, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;$dstr&lt;/span&gt; .= &lt;span&gt;$dint&lt;/span&gt;[&lt;span&gt;$key_&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$dstr&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt; = inttodaxie(90011234&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; '&amp;lt;br&amp;gt;';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是基础转换代码，在这个基础上进行二次改造：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;* 转换大写金额
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;* $num 数字类型
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; inttod(&lt;span&gt;$num&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断$num是否存在&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;$num&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; '零圆'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保留小数点后两位&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;$num&lt;/span&gt; = &lt;span&gt;round&lt;/span&gt;(&lt;span&gt;$num&lt;/span&gt;, 2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将浮点转换为整数&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;$tem_num&lt;/span&gt; = &lt;span&gt;$num&lt;/span&gt; * 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断数字长度&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;$tem_num_len&lt;/span&gt; = &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$tem_num&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$tem_num_len&lt;/span&gt; &amp;gt; 14&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; '数字太大了吧，有这么大的金钱吗'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;大写数字&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;$dint&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;大写金额单位&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;$danwei&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;('仟', '佰', '拾', '亿', '仟', '佰', '拾', '万', '仟', '佰', '拾', '圆'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;$danwei1&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;('角', '分'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;空的变量用来保存转换字符串&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;$daxie&lt;/span&gt; = ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分割数字，区分圆角分&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;list&lt;/span&gt;(&lt;span&gt;$left_num&lt;/span&gt;, &lt;span&gt;$right_num&lt;/span&gt;) = &lt;span&gt;explode&lt;/span&gt;('.', &lt;span&gt;$num&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算单位长度&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;$danwei_len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$danwei&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算分割后的字符串长度&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;$left_num_len&lt;/span&gt; = &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$left_num&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;$right_num_len&lt;/span&gt; = &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$right_num&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环计算亿万元等&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$left_num_len&lt;/span&gt;; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环单个文字&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;$key_&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$left_num&lt;/span&gt;, &lt;span&gt;$i&lt;/span&gt;, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断数字不等于0或数字等于0与金额单位为亿、万、圆，就返回完整单位的字符串&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$key_&lt;/span&gt; !== '0' || (&lt;span&gt;$key_&lt;/span&gt; == '0' &amp;amp;&amp;amp; (&lt;span&gt;$danwei&lt;/span&gt;[&lt;span&gt;$danwei_len&lt;/span&gt; - &lt;span&gt;$left_num_len&lt;/span&gt; + &lt;span&gt;$i&lt;/span&gt;] == '亿' || &lt;span&gt;$danwei&lt;/span&gt;[&lt;span&gt;$danwei_len&lt;/span&gt; - &lt;span&gt;$left_num_len&lt;/span&gt; + &lt;span&gt;$i&lt;/span&gt;] == '万' || &lt;span&gt;$danwei&lt;/span&gt;[&lt;span&gt;$danwei_len&lt;/span&gt; - &lt;span&gt;$left_num_len&lt;/span&gt; + &lt;span&gt;$i&lt;/span&gt;] == '圆'&lt;span&gt;))) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;$daxie&lt;/span&gt; = &lt;span&gt;$daxie&lt;/span&gt; . &lt;span&gt;$dint&lt;/span&gt;[&lt;span&gt;$key_&lt;/span&gt;] . &lt;span&gt;$danwei&lt;/span&gt;[&lt;span&gt;$danwei_len&lt;/span&gt; - &lt;span&gt;$left_num_len&lt;/span&gt; + &lt;span&gt;$i&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;否则就不含单位&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;$daxie&lt;/span&gt; = &lt;span&gt;$daxie&lt;/span&gt; . &lt;span&gt;$dint&lt;/span&gt;[&lt;span&gt;$key_&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环计算角分&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$right_num_len&lt;/span&gt;; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;$key_&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$right_num&lt;/span&gt;, &lt;span&gt;$i&lt;/span&gt;, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$key_&lt;/span&gt; &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;$daxie&lt;/span&gt; = &lt;span&gt;$daxie&lt;/span&gt; . &lt;span&gt;$dint&lt;/span&gt;[&lt;span&gt;$key_&lt;/span&gt;] . &lt;span&gt;$danwei1&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算转换后的长度&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;$daxie_len&lt;/span&gt; = &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$daxie&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置文字切片从0开始，utf-8汉字占3个字符&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;$j&lt;/span&gt; = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;$daxie_len&lt;/span&gt; &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次切片两个汉字&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;$str&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$daxie&lt;/span&gt;, &lt;span&gt;$j&lt;/span&gt;, 6&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断切片后的文字不等于零万、零圆、零亿、零零&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt; == '零万' || &lt;span&gt;$str&lt;/span&gt; == '零圆' || &lt;span&gt;$str&lt;/span&gt; == '零亿' || &lt;span&gt;$str&lt;/span&gt; == '零零'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新切片&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;             &lt;span&gt;$left&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$daxie&lt;/span&gt;, 0, &lt;span&gt;$j&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             &lt;span&gt;$right&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$daxie&lt;/span&gt;, &lt;span&gt;$j&lt;/span&gt; + 3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             &lt;span&gt;$daxie&lt;/span&gt; = &lt;span&gt;$left&lt;/span&gt; . &lt;span&gt;$right&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;$j&lt;/span&gt; += 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;$daxie_len&lt;/span&gt; -= 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;     
&lt;span&gt;79&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; '人民币' . &lt;span&gt;$daxie&lt;/span&gt; . '整'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt; = inttod(99090909090.19&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;PHP数字金额转换大写金额&quot; src=&quot;https://img2018.cnblogs.com/blog/1359167/201903/1359167-20190302012637035-760992376.png&quot; alt=&quot;PHP数字金额转换大写金额&quot; width=&quot;1200&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;源代码已上传GitHub：https://github.com/cuiyuanxin/php-demo/blob/master/capital.php&lt;/p&gt;
&lt;p&gt;纯手打笔记，如有错误请评论提出，谢谢。&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 17:30:00 +0000</pubDate>
<dc:creator>崔元欣</dc:creator>
<og:description>早些年做CRM用到的一个金额转换函数，今天从旧项目中拿出来记录一下。金额转换的函数方法有很多，都很不错。不过这个是小崔刚工作的时候写的一个转换函数，多少还是有点纪念意义。如有问题请朋友们指出，小崔及时</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cuiyuanxin/p/10459532.html</dc:identifier>
</item>
<item>
<title>SAP HANA项目过程中优化分析以及可行性验证 - 照山</title>
<link>http://www.cnblogs.com/abnerlinux/p/10459461.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/abnerlinux/p/10459461.html</guid>
<description>&lt;p&gt;　　在项目开发过程中，经常会遇到HANA模型运行效率的问题；&lt;/p&gt;
&lt;p&gt;　　以我们项目为例，HANA平台要求模型运行时间不能超过10秒，但是在大数量和计算逻辑复杂的情况下（例如：ERP中的BKPF和BSEG量表的年数据总量超过20亿条），HANA模型的运行时间基本上都在1分钟以上。在不关联其它表，单单是几个板块的BKPF和BSEG表UNION ALL，运行时间都超过1分钟。鉴于这种情况，项目组对HANA模型是否存在优化空间，进行了分析和探讨，也请教了HANA平台的专家对HANA的优化给出可行性建议。&lt;/p&gt;
&lt;p&gt;　　最终的分析结果，最简单、最高效的优化方法就是减少数据量，当然这个方法基本上不用说，没什么技术含量，仅仅是数量级的减少。对我们程序员来说，当然不能满足这么简单粗暴的方法。&lt;/p&gt;
&lt;p&gt;　　经过讨论，制定几条优化的方向：&lt;/p&gt;
&lt;p&gt;　　1.将复杂的可视化模型通过SQL SCIRPT替换；&lt;/p&gt;
&lt;p&gt;　　2.现有的模型都是通过计算视图实现的。查看了相关资料后，发现HANA的属性视图、分析视图、计算视图对应不同的处理机制。属性视图擅长大数据量的关联。分析视图适合逻辑运算。计算视图是在效果上可以理解为集合属性和分析视图的两种功能。于是采用将数据量比较大的关联和汇总通过属性视图实现。&lt;/p&gt;
&lt;p&gt;　　3.拆分大的模型为几个小的模型组合。&lt;/p&gt;
&lt;p&gt;　　4.图形化和SQL SCRIPT结合使用；&lt;/p&gt;
&lt;p&gt;　　5.模型落地；&lt;/p&gt;
&lt;p&gt;　　确定了方向后，项目组开始针对以上几点进行验证；&lt;/p&gt;
&lt;p&gt;　　首先，将复杂的可视化模型全部用SQL实现，实验的结果并不理想。于是上网查相关资料，发现可视化模型和SQL模型的处理机制不一样，HANA对可视化模型的运算速度要高于SQL的运行效率。而我们将SQL模型和可视化模型的运行速度进行比较，发现SQL模型的运行时间要大于可视化模型。例如，同样的数据量，同样的逻辑，最终的结果是SQL的运行时间比可视化模型的运行时间多一秒左右。当然这只是经过多次运行以后得出的规律行时间差。通过以上的对比，我们发现SQL替换可视化模型的方案不可行。&lt;/p&gt;
&lt;p&gt;　　其次，我们将BSEG和BKPF几大板块UNION ALL的过程以属性视图实现，通过最后实验对比，发现属性视图并不比计算视图速度快。&lt;/p&gt;
&lt;p&gt;　　再次，拆分大的模型为几个小的模型组合。经过分析，我们发现HANA实际上是动态查询机制，在计算过程中并不存储中间计算数据，也就是说，不管你拆分成几个模型，最终的结果都是从最底层开始，逐渐的累积到最后，形成一个大的SQL动态的查询数据。通过对最终视图的执行计划分析，我们发现最终视图的执行计划包含了几个小模型的运算轨迹，按照小模型的运算轨迹累加，最终得到最终模型的结果。实际上拆分成几个小模型，理论上来讲运行速度比不上一个完成的大模型的运行速度。举个例子，有A、B、C三个视图，逻辑关系是A调用B视图，B调用C视图，假设A是B的聚合结果，在C上做数据排重处理，如果C包含6列，其中一列是差异项，其它几列部分差异，那么在B中，不点亮C中的差异项，那么B中不点亮差异列的PROJECT会自动排重，即使你没有做排重操作，一样会排重其它几列的重复项。也就是说HANA的模型是通过动态SQL查询数据，在查询的过程中，HANA会根据自己的规则对动态SQL进行优化。&lt;/p&gt;
&lt;p&gt;　　第四，图形化和SQL结合方式，在逻辑复杂的情况，通过可视化模型不能实现业务逻辑的需要，那么就需要应用SQL进行运算，这样的结果在一定程度上来说是会减少运行时间，但这个减少的前提是通过可视化模型实现复杂业务逻辑会以增加PROJECT的方式实现业务逻辑，这样会给可视化模型造成很大的压力，因此会增加运行时间。所以，这个方法只是对可视化模型的补充，并不是优化。&lt;/p&gt;
&lt;p&gt;　　第五，模型落地，实际上就是动态查询物化，这样减少了中间的运算过程，很大的提高了运行效率，但是我本人认为这并不符合HANA本身的内存存储、内存运算的机制，传统数据库依然可以通过物化视图的方式实现运行效率的提高，并不代表优化的可行。&lt;/p&gt;
&lt;p&gt;　　通过以上几种分析，最终发现并没有达到我想要的优化结果。但是也不是一无所获。在验证的过程中，我们确认了HANA运行机制的几个关键点：&lt;br/&gt;　　1.HANA模型可以理解为动态的SQL查询。&lt;/p&gt;
&lt;p&gt;　　2.HANA模型的运算逻辑从下到上的整体运行。&lt;/p&gt;
&lt;p&gt;　　3.计算视图实际上包含了分析视图和属性视图的运行机制。&lt;/p&gt;
&lt;p&gt;　　以上几点的确认，为我们接下来进一步分析优化可行性提供基础论据；&lt;/p&gt;
&lt;p&gt;　　经过实际数据的验证和分析，以及项目组成员和HANA平台专家的讨论，最终我们总结出以下几点是HANA优化的可行方案：&lt;/p&gt;
&lt;p&gt;　　1.减少数据，通过FILTER、JOIN的先后顺序、左右关系尽量减少数据量。在最底层视图中，进行数据过滤，通过关联关系剔除数据以达到数据量减少的目的。我们经过验证发现通过JOIN的先后顺序会优化视图运行时间，减少时间在一秒左右。&lt;/p&gt;
&lt;p&gt;　　2.减少PROJECT和aggregation的数量。在建模过程中，要先根据需求对模型进行设计。设计过程中，尽可能的最大化的利用PROJECTION，减少不必要的PROJECTION。因为HANA的运行轨迹是按照模型的轨迹进行运算的，所以每增加一个PROJECTION就会增加一次运算，哪怕是最基本搜索。&lt;/p&gt;
&lt;p&gt;　　3.减少相同数据的使用次数。比如在开发过程中，我们会将同一部分数据通过不同条件分成两个PROJECTION，然后再对两个PROJECTION进行逻辑运算，这样的应用根据HANA的运行轨迹分析，会将同一部分数据进行两次运算，数据量级会增大，影响运行效率。可以通过行专列，或者IF条件对不同条件的数据进行计算。这样的话就减少了同一量级数据的重复使用。&lt;/p&gt;
&lt;p&gt;　　4.减少点亮不必要字段，这个很好理解，毕竟HANA是列式存储，每增加一列，会增加参与运算的数据量。&lt;/p&gt;
&lt;p&gt;　　5.在新建列的时候，尽量避免在同一视图中使用CE运算机制和SQL运算机制。要么使用CE运算机制，要么使用SQL，不要既有CE又有SQL。毕竟两个运算机制不一样，混在一起使用会增加运算负担。&lt;/p&gt;
&lt;p&gt;　　以上几点经过我们项目组的分析和验证，是有效的优化HANA模型的方法。&lt;/p&gt;
&lt;p&gt;　　虽然我们最终找到了HANA的优化方法，但是我不并满意。从以上几点，我们可以很直观的感觉到，对HANA底层的认知，还是浮于表面，并没有深入到HANA的内部机制，从内部机制和使用规范上进行优化。也就是说HANA对我们来说就像一个黑盒一样，我们能看到颜色、形状等这些表象的东西，并没有打开盒子看内部构造，所以提出的优化方案都很肤浅。&lt;/p&gt;
&lt;p&gt;　　曾经有大神说过，理论上来说HANA不存在优化的必要，只要资源足够，那么HANA的运行效率是不需要担心的。但是从技术角度来说，我不认可这样的观点。如果不去研究深层次的东西，只是简单粗暴的堆积木，那么对技术的提高以及能力的提高没有任何帮助，最终沦为真正的搬砖的。&lt;/p&gt;
&lt;p&gt;　　我始终认为，在技术的路上，要不段深挖，不断的探索，不段的尝试，才能提高自己，看清前路。&lt;/p&gt;

</description>
<pubDate>Fri, 01 Mar 2019 16:15:00 +0000</pubDate>
<dc:creator>照山</dc:creator>
<og:description>在项目开发过程中，经常会遇到HANA模型运行效率的问题； 以我们项目为例，HANA平台要求模型运行时间不能超过10秒，但是在大数量和计算逻辑复杂的情况下（例如：ERP中的BKPF和BSEG量表的年数据</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/abnerlinux/p/10459461.html</dc:identifier>
</item>
<item>
<title>c语言推箱子 扫雷项目 - insist钢</title>
<link>http://www.cnblogs.com/liugangjiayou/p/10459447.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liugangjiayou/p/10459447.html</guid>
<description>&lt;pre&gt;
#include&amp;lt;stdio.h&amp;gt;&lt;span&gt;#include&lt;/span&gt;&amp;lt;easyx.h&amp;gt;&lt;span&gt;#include&lt;/span&gt;&amp;lt;conio.h&amp;gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;getch不显示字母&lt;/span&gt;#include&amp;lt;mmsystem.h&amp;gt;&lt;span&gt;#pragma&lt;/span&gt;comment(lib,&quot;winmm.lib&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;PlaySound播放wav&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mciSendString放mp3&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;myMap[&lt;span&gt;2&lt;/span&gt;][&lt;span&gt;8&lt;/span&gt;][&lt;span&gt;10&lt;/span&gt;]=&lt;span&gt;{{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;8行9列--&amp;gt;8行10列&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;},{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;7行10列--&amp;gt;8行10&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;}};&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始地图&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;map[&lt;span&gt;8&lt;/span&gt;][&lt;span&gt;10&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正在使用地图&lt;/span&gt;IMAGEimg[&lt;span&gt;6&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;level=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;flag;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前关卡是否结束&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;op[&lt;span&gt;100&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存最近100次的操作&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;times=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存的操作次数现在可以回撤次数&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;record(&lt;span&gt;int&lt;/span&gt;re)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录每次的操作用于每部操作之后放到数组中&lt;/span&gt;&lt;span&gt;{op[times&lt;/span&gt;++]=&lt;span&gt;re;}&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;recall(){&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(times==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;无法撤回&lt;/span&gt;times--&lt;span&gt;;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;x,y;&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;8&lt;/span&gt;;i++&lt;span&gt;){&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;10&lt;/span&gt;;j++&lt;span&gt;){&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[i][j]==&lt;span&gt;2&lt;/span&gt;||map[i][j]==&lt;span&gt;6&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;人或者人在目的地上&lt;/span&gt;&lt;span&gt;{x&lt;/span&gt;=&lt;span&gt;i;y&lt;/span&gt;=&lt;span&gt;j;}}}&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用x,y来表示人的位置&lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(op[times]){&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接往下走&lt;/span&gt;map[x][y]-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;][y]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;带箱子往下走&lt;/span&gt;map[x][y]+=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;][y]+=&lt;span&gt;2&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;箱子下去了&lt;/span&gt;map[x-&lt;span&gt;1&lt;/span&gt;][y]-=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接往上走&lt;/span&gt;map[x][y]-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;][y]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;带着箱子往上走&lt;/span&gt;map[x][y]+=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;][y]-=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;][y]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接往右走&lt;/span&gt;map[x][y]-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;:map[x][y]&lt;/span&gt;+=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;]-=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接往左走&lt;/span&gt;map[x][y]-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:map[x][y]&lt;/span&gt;+=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;]-=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;}}&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;loadMap()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载地图&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;8&lt;/span&gt;;++&lt;span&gt;i){&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;10&lt;/span&gt;;j++&lt;span&gt;){map[i][j]&lt;/span&gt;=myMap[level][i][j];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把第几关的地图放进map&lt;/span&gt;&lt;span&gt;}}}&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;drawMap()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;利用数字进行贴图&lt;/span&gt;&lt;span&gt;{BeginBatchDraw();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;双缓冲贴图优化贴图效果&lt;/span&gt;putimage(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&amp;amp;img[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;8&lt;/span&gt;;++&lt;span&gt;i){&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;10&lt;/span&gt;;++&lt;span&gt;j){&lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(map[i][j]){&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;空地&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;墙壁&lt;/span&gt;putimage(j*&lt;span&gt;50&lt;/span&gt;,i*&lt;span&gt;50&lt;/span&gt;,&amp;amp;img[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;putimage(j*&lt;span&gt;50&lt;/span&gt;,i*&lt;span&gt;50&lt;/span&gt;,&amp;amp;img[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:putimage(j&lt;/span&gt;*&lt;span&gt;50&lt;/span&gt;,i*&lt;span&gt;50&lt;/span&gt;,&amp;amp;img[&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;:putimage(j&lt;/span&gt;*&lt;span&gt;50&lt;/span&gt;,i*&lt;span&gt;50&lt;/span&gt;,&amp;amp;img[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;:putimage(j&lt;/span&gt;*&lt;span&gt;50&lt;/span&gt;,i*&lt;span&gt;50&lt;/span&gt;,&amp;amp;img[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:putimage(j&lt;/span&gt;*&lt;span&gt;50&lt;/span&gt;,i*&lt;span&gt;50&lt;/span&gt;,&amp;amp;img[&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;}}}EndBatchDraw();}&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;play(){&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;x,y;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存人的位置&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;8&lt;/span&gt;;i++&lt;span&gt;){&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;10&lt;/span&gt;;j++&lt;span&gt;){&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[i][j]==&lt;span&gt;2&lt;/span&gt;||map[i][j]==&lt;span&gt;6&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;人或者人在目的地上&lt;/span&gt;&lt;span&gt;{x&lt;/span&gt;=&lt;span&gt;i;y&lt;/span&gt;=&lt;span&gt;j;}}}&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到人开始操作getch直接读取键盘的一个字符头文件conio.h&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;getch直接按就有反应getchar按完需要回车才有反应&lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(getch()){&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x-&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;0&lt;/span&gt;||map[x-&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;4&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上方可以走或者上面是目的地或者空地&lt;/span&gt;&lt;span&gt;{map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;][y]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x-&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;3&lt;/span&gt;||map[x-&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;7&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上方是箱子或者目的地箱子&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x-&lt;span&gt;2&lt;/span&gt;][y]==&lt;span&gt;0&lt;/span&gt;||map[x-&lt;span&gt;2&lt;/span&gt;][y]==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;][y]-=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;][y]+=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);}}&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x][y-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;0&lt;/span&gt;||map[x][y-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x][y-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;3&lt;/span&gt;||map[x][y-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;7&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x][y-&lt;span&gt;2&lt;/span&gt;]==&lt;span&gt;0&lt;/span&gt;||map[x][y-&lt;span&gt;2&lt;/span&gt;]==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;]-=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;]+=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;);}}&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x+&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;0&lt;/span&gt;||map[x+&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;][y]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x+&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;3&lt;/span&gt;||map[x+&lt;span&gt;1&lt;/span&gt;][y]==&lt;span&gt;7&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x+&lt;span&gt;2&lt;/span&gt;][y]==&lt;span&gt;0&lt;/span&gt;||map[x+&lt;span&gt;2&lt;/span&gt;][y]==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;][y]-=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;][y]+=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);}}&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x][y+&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;0&lt;/span&gt;||map[x][y+&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;]+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;);}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x][y+&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;3&lt;/span&gt;||map[x][y+&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;7&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[x][y+&lt;span&gt;2&lt;/span&gt;]==&lt;span&gt;0&lt;/span&gt;||map[x][y+&lt;span&gt;2&lt;/span&gt;]==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){map[x][y]&lt;/span&gt;-=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;]-=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;map[x][y&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;]+=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;record(&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;);}}&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果方向键盘上下左右72807577&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:recall();&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;}}&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;win(){&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;boxNum=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;8&lt;/span&gt;;i++&lt;span&gt;){&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;10&lt;/span&gt;;j++&lt;span&gt;){&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[i][j]==&lt;span&gt;3&lt;/span&gt;&lt;span&gt;){boxNum&lt;/span&gt;++&lt;span&gt;;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[i-&lt;span&gt;1&lt;/span&gt;][j]==&lt;span&gt;1&lt;/span&gt;||map[i+&lt;span&gt;1&lt;/span&gt;][j]==&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上下至少一睹墙&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(map[i][j-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;1&lt;/span&gt;||map[i][j+&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){flag&lt;/span&gt;=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;}}}}}&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(boxNum==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){flag&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所有的箱子都推到目的地上游戏赢&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;}flag&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;}&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;main(){mciSendString(L&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;open遥远的你.mp3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);mciSendString(L&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;play遥远的你.mp3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);initgraph(&lt;/span&gt;&lt;span&gt;500&lt;/span&gt;,&lt;span&gt;400&lt;/span&gt;&lt;span&gt;);loadimage(&lt;/span&gt;&amp;amp;img[&lt;span&gt;0&lt;/span&gt;],L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;素材/背景.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;500&lt;/span&gt;,&lt;span&gt;400&lt;/span&gt;&lt;span&gt;);loadimage(&lt;/span&gt;&amp;amp;img[&lt;span&gt;1&lt;/span&gt;],L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;素材/墙.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);loadimage(&lt;/span&gt;&amp;amp;img[&lt;span&gt;2&lt;/span&gt;],L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;素材/人物.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);loadimage(&lt;/span&gt;&amp;amp;img[&lt;span&gt;3&lt;/span&gt;],L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;素材/箱子.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);loadimage(&lt;/span&gt;&amp;amp;img[&lt;span&gt;4&lt;/span&gt;],L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;素材/目的地.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);loadimage(&lt;/span&gt;&amp;amp;img[&lt;span&gt;5&lt;/span&gt;],L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;素材/源氏.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);loadMap();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载第一关&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){drawMap();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画图&lt;/span&gt;&lt;span&gt;play();win();&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag==&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没输没赢继续&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag==&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;赢&lt;/span&gt;&lt;span&gt;{level&lt;/span&gt;++;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关卡加1下一关&lt;/span&gt;times=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空回撤记录&lt;/span&gt;&lt;span&gt;drawMap();&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(level==&lt;span&gt;2&lt;/span&gt;&lt;span&gt;){MessageBox(GetHWnd(),L&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;游戏结束&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;恭喜&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,MB_OK);&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(MessageBox(GetHWnd(),L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;是否进入下一关？&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;恭喜&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,MB_OKCANCEL)==IDOK)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IDCANCEL要么好要么不好&lt;/span&gt;&lt;span&gt;{loadMap();flag&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;}}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{drawMap();&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(MessageBox(GetHWnd(),L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;是否重新玩？&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;抱歉&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,MB_OKCANCEL)==&lt;span&gt;IDOK){&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;level=0;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从最初的那关开始玩&lt;/span&gt;times=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;loadMap();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新加载新地图&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;}}&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;getchar();&lt;/span&gt;&lt;span&gt;closegraph();&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;}&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 01 Mar 2019 16:09:00 +0000</pubDate>
<dc:creator>insist钢</dc:creator>
<og:description>推箱子 两关的推箱子用到一个三维数组 用到的图片数据如下 https://pan.baidu.com/s/1IDE4GQLo46cxNywDqwxmlQ 密码：jdel 代码如下： #include&amp;</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liugangjiayou/p/10459447.html</dc:identifier>
</item>
<item>
<title>Spring boot 入门（四）：集成 Shiro 实现登陆认证和权限管理 - 邓叔叔很年轻</title>
<link>http://www.cnblogs.com/dz-boss/p/10459448.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dz-boss/p/10459448.html</guid>
<description>&lt;p&gt;系统搭建到目前为止，主要用到了3个配置类，均与 Shiro 有关，后期随着项目的扩大，配置文件也会随之增多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000110486-1326438188.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;FreeMarkerConfig：主要针对 FreeMarker 页面显示的配置，关于 Shiro 部分，为 Shiro 标签设置了共享变量&lt;code&gt;，如果不设置此变量，FreeMarker 页面将不能识别 Shiro 的标签&lt;/code&gt;，其主要代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div readability=&quot;30.5&quot;&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; configuration.setSharedVariable(&quot;shiro&quot;, &lt;span&gt;new&lt;/span&gt; ShiroTags());
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;MShiroFilterFactoryBean：设置了过滤器，当然也可以在 Config 文件里面配置过滤器，其缺点是：&lt;code&gt;在每次请求里面都做了 session 的读取和更新访问时间等操作，这样在集群部署 session 共享的情况下，数量级的加大了处理量负载&lt;/code&gt;。本项目后期将用到分布式，因此这里就直接将过滤器与 Config 配置文件分离，提高效率。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MSpringShiroFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractShiroFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; MSpringShiroFilter(WebSecurityManager webSecurityManager, FilterChainResolver resolver) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (webSecurityManager == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;WebSecurityManager property cannot be null.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            setSecurityManager(webSecurityManager);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (resolver != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                setFilterChainResolver(resolver);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFilterInternal(ServletRequest servletRequest, ServletResponse servletResponse,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                                         FilterChain chain) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             HttpServletRequest request =&lt;span&gt; (HttpServletRequest) servletRequest;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             String str =&lt;span&gt; request.getRequestURI().toLowerCase();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; idx = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((idx = str.indexOf(&quot;.&quot;)) &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 str =&lt;span&gt; str.substring(idx);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ignoreExt.contains(str.toLowerCase()))
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.doFilterInternal(servletRequest, servletResponse, chain);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                chain.doFilter(servletRequest, servletResponse);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;ShiroConfiguration：通用配置文件，此配置文件为 Shiro 的基础通用配置文件，只要是集成 Shiro，必有此文件，主要配置 Shiro 的登录认证相关的信息，其代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;     * 设置shiro的缓存，缓存参数均配置在xml文件中
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; EhCacheManager getEhCacheManager() {
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         EhCacheManager em = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EhCacheManager();
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;         em.setCacheManagerConfigFile(&quot;classpath:ehcache/ehcache-shiro.xml&quot;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; em;  
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;     * 凭证匹配器
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;     * （由于我们的密码校验交给Shiro的SimpleAuthenticationInfo进行处理了
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;     *  所以我们需要修改下doGetAuthenticationInfo中的代码;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;     * ）
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HashedCredentialsMatcher hashedCredentialsMatcher(){
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;        HashedCredentialsMatcher hashedCredentialsMatcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashedCredentialsMatcher();
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;        hashedCredentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;散列算法:这里使用MD5算法;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;        hashedCredentialsMatcher.setHashIterations(1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;散列的次数，比如散列两次，相当于 md5(md5(&quot;&quot;));&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; hashedCredentialsMatcher;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;     * 主文件
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;     @Bean(name = &quot;myShiroRealm&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserRealm myShiroRealm(EhCacheManager cacheManager) {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         UserRealm realm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserRealm(); 
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        realm.setCacheManager(cacheManager);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        realm.setCredentialsMatcher(hashedCredentialsMatcher());
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; realm;
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会话ID生成器&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;     @Bean(name = &quot;sessionIdGenerator&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JavaUuidSessionIdGenerator javaUuidSessionIdGenerator(){
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         JavaUuidSessionIdGenerator javaUuidSessionIdGenerator = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JavaUuidSessionIdGenerator();
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; javaUuidSessionIdGenerator;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     @Bean(name = &quot;sessionIdCookie&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleCookie getSessionIdCookie(){
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         SimpleCookie sessionIdCookie = &lt;span&gt;new&lt;/span&gt; SimpleCookie(&quot;sid&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         sessionIdCookie.setHttpOnly(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         sessionIdCookie.setMaxAge(-1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionIdCookie;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&amp;lt;!-- 会话DAO --&amp;gt;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;     @Bean(name = &quot;sessionDAO&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; EnterpriseCacheSessionDAO enterpriseCacheSessionDAO(){
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         EnterpriseCacheSessionDAO sessionDao = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EnterpriseCacheSessionDAO();
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        sessionDao.setSessionIdGenerator(javaUuidSessionIdGenerator());
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         sessionDao.setActiveSessionsCacheName(&quot;shiro-activeSessionCache&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionDao;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     @Bean(name = &quot;sessionValidationScheduler&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExecutorServiceSessionValidationScheduler getExecutorServiceSessionValidationScheduler() {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         ExecutorServiceSessionValidationScheduler scheduler = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExecutorServiceSessionValidationScheduler();
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         scheduler.setInterval(1800000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; scheduler;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     @Bean(name = &quot;sessionManager&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultWebSessionManager sessionManager(EnterpriseCacheSessionDAO sessionDAO){
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         DefaultWebSessionManager sessionManager = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSessionManager();
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         sessionManager.setGlobalSessionTimeout(1800000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         sessionManager.setDeleteInvalidSessions(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         sessionManager.setSessionValidationSchedulerEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;        sessionManager.setSessionValidationScheduler(getExecutorServiceSessionValidationScheduler());
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        sessionManager.setSessionDAO(sessionDAO);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         sessionManager.setSessionIdCookieEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;        sessionManager.setSessionIdCookie(getSessionIdCookie());
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionManager;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     @Bean(name = &quot;lifecycleBeanPostProcessor&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor();
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         DefaultAdvisorAutoProxyCreator daap = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator();
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;         daap.setProxyTargetClass(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; daap;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;     @Bean(name = &quot;securityManager&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager getDefaultWebSecurityManager(UserRealm myShiroRealm, DefaultWebSessionManager sessionManager) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         DefaultWebSecurityManager dwsm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager();
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;        dwsm.setRealm(myShiroRealm);
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;      &amp;lt;!-- 用户授权/认证信息Cache, 采用EhCache 缓存 --&amp;gt; &lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        dwsm.setCacheManager(getEhCacheManager());
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        dwsm.setSessionManager(sessionManager);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dwsm;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;     *  开启shiro aop注解支持.
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;     *  使用代理方式;所以需要开启代码支持;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; securityManager
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         AuthorizationAttributeSourceAdvisor aasa = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor();
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        aasa.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; aasa;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;     * ShiroFilter&amp;lt;br/&amp;gt;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;     * 注意这里参数中的 StudentService 和 IScoreDao 只是一个例子，因为我们在这里可以用这样的方式获取到相关访问数据库的对象，
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;     * 然后读取数据库相关配置，配置到 shiroFilterFactoryBean 的访问规则中。实际项目中，请使用自己的Service来处理业务逻辑。
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;     @Bean(name = &quot;shiroFilter&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         ShiroFilterFactoryBean shiroFilterFactoryBean = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MShiroFilterFactoryBean();
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 必须设置 SecurityManager  &lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;        shiroFilterFactoryBean.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录成功后要跳转的连接&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         shiroFilterFactoryBean.setSuccessUrl(&quot;/certification&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;);&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;         shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/403&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        loadShiroFilterChain(shiroFilterFactoryBean);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; shiroFilterFactoryBean;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;     * 加载shiroFilter权限控制规则（从数据库读取然后配置）
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; loadShiroFilterChain(ShiroFilterFactoryBean shiroFilterFactoryBean){
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;//////////////////////&lt;/span&gt;&lt;span&gt;/ 下面这些规则配置最好配置到配置文件中 &lt;/span&gt;&lt;span&gt;//////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;         Map&amp;lt;String, String&amp;gt; filterChainDefinitionMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; authc：该过滤器下的页面必须验证后才能访问，它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/login&quot;, &quot;authc&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/logout&quot;, &quot;logout&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; anon：它对应的过滤器里面是空的,什么都没做&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;         logger.info(&quot;##################从数据库读取权限规则，加载到shiroFilter中##################&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        filterChainDefinitionMap.put(&quot;/user/edit/**&quot;, &quot;authc,perms[user:edit]&quot;);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里为了测试，固定写死的值，也可以从数据库或其他配置中读取&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;主要重写了 Realm域，完成权限认证和权限管理：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有做权限验证，此处只需要return null即可&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         SimpleAuthorizationInfo authorizationInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthorizationInfo();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         String userName =&lt;span&gt; (String) principals.getPrimaryPrincipal();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Result&amp;lt;TUser&amp;gt; list =&lt;span&gt; userService.getUserByUsername(userName);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(list.isStatus()) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取该用户所属的角色&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             Result&amp;lt;List&amp;lt;TRole&amp;gt;&amp;gt; resultRole =&lt;span&gt; roleService.getRoleByUserId(list.getResultData().getUserId());
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(resultRole.isStatus()) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 HashSet&amp;lt;String&amp;gt; role = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(TRole tRole : resultRole.getResultData()) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     role.add(tRole.getRoleId()+&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取该角色拥有的权限&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 Result&amp;lt;List&amp;lt;TPermission&amp;gt;&amp;gt; resultPermission =&lt;span&gt; permissionService.getPermissionsByRoleId(role);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(resultPermission.isStatus()) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     HashSet&amp;lt;String&amp;gt; permissions = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(TPermission tPermission : resultPermission.getResultData()) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                        permissions.add(tPermission.getPermissionsValue());
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     System.out.println(&quot;权限：&quot;+&lt;span&gt;permissions);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    authorizationInfo.setStringPermissions(permissions);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return null;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; authorizationInfo;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;认证登录&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         String username =&lt;span&gt; (String) authenticationToken.getPrincipal();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;String password = new String((char[]) authenticationToken.getCredentials());&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         Result&amp;lt;TUser&amp;gt; result =&lt;span&gt; userService.getUserByUsername(username);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result.isStatus()) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             TUser user =&lt;span&gt; result.getResultData();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName());
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return new SimpleAuthenticationInfo(user., &quot;123456&quot;, getName());&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-2&quot;&gt;2.1.登录认证&lt;/h2&gt;
&lt;p&gt;首先创建一个前端登录界面，做一个简单的登录 Form 表单&lt;/p&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000338598-1961356793.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;点击登录即想后台发送一个请求，&lt;code&gt;必须是Post请求，否则Shiro不能识别&lt;/code&gt;，认证部分主要在 Ream 中完成，新建一个类，继承 AuthorizingRealm ，然后在重写 doGetAuthenticationInfo 方法：&lt;/p&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000403047-147380526.png&quot; alt=&quot;&quot;/&gt; &lt;/div&gt;
&lt;div readability=&quot;12.861984483463&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;只需要通过界面上的用户名查找到数据库存储的相关信息即可，具体的认证是 Shiro 内部自己完成的，我们只需要传入数据库中存储的用户名和密码个认证函数即可（&lt;code&gt;new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName())&lt;/code&gt;），我们可以自己重新定义密码比较器，密码比较器的写法较多，在&lt;a href=&quot;https://www.cnblogs.com/dz-boss/p/9236083.html&quot; target=&quot;_blank&quot;&gt;认证与Shiro安全框架&lt;/a&gt;中，直接将密码比较器写入到Ream中，耦合度太高，本项目通过配置的方式重写密码比较器，具体代码请参考参考ShiroConfiguration配置类：&lt;/em&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000426350-614776153.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
在具体的 Login 方法中，写入一些登录失败的异常即可，主要用户将此失败结果存入 Session，并显示在页面上：&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     @RequestMapping(value = &quot;/login&quot;, method =&lt;span&gt; RequestMethod.POST)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String postLogin(RedirectAttributes redirectAttributes, HttpServletRequest request, HttpSession session) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录失败从request中获取shiro处理的异常信息。
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; shiroLoginFailure:就是shiro异常类的全类名.&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         String exception = (String) request.getAttribute(&quot;shiroLoginFailure&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         System.out.println(&quot;exception=&quot; +&lt;span&gt; exception);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         String msg = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (exception != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (UnknownAccountException.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.getName().equals(exception)) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 System.out.println(&quot;UnknownAccountException -- &amp;gt; 账号不存在：&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 msg = &quot;用户不存在！&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (IncorrectCredentialsException.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.getName().equals(exception)) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 System.out.println(&quot;IncorrectCredentialsException -- &amp;gt; 密码不正确：&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 msg = &quot;密码不正确！&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&quot;kaptchaValidateFailed&quot;&lt;span&gt;.equals(exception)) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 System.out.println(&quot;kaptchaValidateFailed -- &amp;gt; 验证码错误&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 msg = &quot;验证码错误!&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;msg = &quot;else &amp;gt;&amp;gt; &quot;+exception;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 msg = &quot;密码不正确！&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 System.out.println(&quot;else -- &amp;gt;&quot; +&lt;span&gt; exception);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         redirectAttributes.addFlashAttribute(&quot;msg&quot;&lt;span&gt;, msg);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         session.setAttribute(&quot;msg&quot;&lt;span&gt;, msg);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return redirect(&quot;/login&quot;);&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;redirect:login&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return msg;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;此时登录认证部门已经完成：一个页面+后台2个函数（1个认证函数+1个Login函数）&lt;/p&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-3&quot;&gt;2.2.权限管理&lt;/h2&gt;
&lt;p&gt;总体来说，权限管理只需要在界面增加 Shiro 的权限标签即可，可以使用角色的标签，也可以使用权限的标签，一般情况下2种标签配合使用，效果最好 &lt;code&gt;&amp;lt;@shiro.hasPermission name=&quot;xtgl-yhgl:read&quot;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;@shiro.hasRolen name=&quot;xtgl-yhgl:read&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000503246-1695078835.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;div readability=&quot;11&quot;&gt;此外，在 Realm 中，需要重写权限认证的业务逻辑，通常情况下通过用户 ID 找到该用户所属的角色，然后通过角色 ID 找到该角色拥有的权限，并将角色或者权限写入的 Shiro 中即可： &lt;code&gt;authorizationInfo.setStringPermissions(permissions);&lt;/code&gt; &lt;code&gt;authorizationInfo.setRoles(role);&lt;/code&gt;
&lt;p&gt;本项目也是通过此逻辑完成权限管理的&lt;/p&gt;
&lt;/div&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000529235-1899847752.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000536793-271096805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面2张截图表示的是一个函数。&lt;/p&gt;
&lt;p&gt;到此，Spring Boot集成Shiro框架的权限认证已经搭建完毕，可以实现简单的权限管理。&lt;/p&gt;

&lt;p&gt;较上一篇博客，Shiro 部分新增加的文件&lt;/p&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000555244-1682214295.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201903/1147108-20190302000604048-429347004.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;

</description>
<pubDate>Fri, 01 Mar 2019 16:09:00 +0000</pubDate>
<dc:creator>邓叔叔很年轻</dc:creator>
<og:description>本文是接着上篇博客写的：Spring boot 入门（三）：SpringBoot 集成结合 AdminLTE(Freemarker)，利用 generate 自动生成代码，利用 DataTable 和</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dz-boss/p/10459448.html</dc:identifier>
</item>
<item>
<title>TX锁处理 - 绿茶有点甜</title>
<link>http://www.cnblogs.com/lvcha001/p/10459411.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lvcha001/p/10459411.html</guid>
<description>&lt;div readability=&quot;38&quot;&gt;
&lt;pre&gt;
sess_1
&lt;/pre&gt;
&lt;p&gt;SQL&amp;gt; update yz.a set name='cc' where id=1;&lt;/p&gt;
&lt;p&gt;1 row updated.&lt;/p&gt;
&lt;p&gt;  sess_2&lt;/p&gt;
&lt;p&gt;SQL&amp;gt;  delete a where name is null;&lt;/p&gt;
&lt;p&gt;  sess_3&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; update a set id=5 where id=1;&lt;/p&gt;
&lt;p&gt;······数据库tx锁达到30个，短信告警&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;114&quot;&gt;
&lt;pre&gt;
视图查询当前数据库中活跃会话状态，发现存在TX锁信息&lt;br/&gt;SQL&amp;gt;  &lt;span&gt;select&lt;/span&gt; INST_ID,sid,serial#,USERNAME,STATUS,MACHINE,SQL_ID,EVENT,(sysdate-LOGON_TIME)*&lt;span&gt;86400&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,LAST_CALL_ET &lt;span&gt;from&lt;/span&gt; gv$session &lt;span&gt;where&lt;/span&gt; status=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ACTIVE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and username &lt;span&gt;is&lt;/span&gt; not &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

INST_ID    SID SERIAL# USERNAME             STATUS     MACHINE              SQL_ID               EVENT                                s LAST_CALL_ET
&lt;/span&gt;------- ------ ------- -------------------- ---------- -------------------- -------------------- ------------------------------ ------- ------------
      &lt;span&gt;1&lt;/span&gt;   &lt;span&gt;1076&lt;/span&gt;      &lt;span&gt;18&lt;/span&gt; YZ                   ACTIVE     enmo                 3xz40fnbtp8gw        enq: TX - row &lt;span&gt;lock&lt;/span&gt; contention      &lt;span&gt;216&lt;/span&gt;          &lt;span&gt;114&lt;/span&gt;
      &lt;span&gt;1&lt;/span&gt;   &lt;span&gt;1081&lt;/span&gt;      &lt;span&gt;11&lt;/span&gt; YZ                   ACTIVE     enmo                 9hjrz7bh8a0st        enq: TX - row &lt;span&gt;lock&lt;/span&gt; contention      &lt;span&gt;100&lt;/span&gt;           &lt;span&gt;75&lt;/span&gt;
      &lt;span&gt;1&lt;/span&gt;   &lt;span&gt;1083&lt;/span&gt;      &lt;span&gt;58&lt;/span&gt; SYS                  ACTIVE     enmo                 2ymxxw3mapxd9        SQL*Net message to client            &lt;span&gt;2&lt;/span&gt;            &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
查询被阻塞会话执行的SQL，已经阻塞会话信息
&lt;/pre&gt;
&lt;p&gt;SQL&amp;gt; select sql_id,BLOCKING_INSTANCE,BLOCKING_SESSION,count(*) from gv$session where event='enq: TX - row lock contention' group by sql_id,BLOCKING_INSTANCE,BLOCKING_SESSION;&lt;/p&gt;
&lt;p&gt;SQL_ID BLOCKING_INSTANCE BLOCKING_SESSION COUNT(*)&lt;br/&gt;-------------------- ----------------- ---------------- ----------&lt;br/&gt;9hjrz7bh8a0st 1 1094 1&lt;br/&gt;3xz40fnbtp8gw 1 1094 1&lt;/p&gt;
&lt;pre&gt;
查询被阻塞SQL文本
&lt;/pre&gt;
&lt;p&gt;SQL&amp;gt;select sql_text from v$sql where sql_id='9hjrz7bh8a0st'&lt;/p&gt;
&lt;p&gt;SQL_TEXT&lt;br/&gt;----------------------------------------------------------------&lt;br/&gt;update a set id=5 where id=1&lt;/p&gt;
&lt;p&gt;  通过cursor查询SQL文本&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SQL&amp;gt; select * from table(dbms_xplan.display_cursor('&amp;amp;SQL_IDorSQL_HASH_VALUE',0,'advanced'));&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;查询源头会话信息及状态&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SQL&amp;gt; select INST_ID,sid,serial#,USERNAME,STATUS,MACHINE,SQL_ID,EVENT,(sysdate-LOGON_TIME)*86400 as &quot;s&quot;,LAST_CALL_ET from gv$session where inst_id=1 and sid=1094;&lt;/p&gt;

&lt;p&gt;INST_ID SID SERIAL# USERNAME STATUS MACHINE SQL_ID EVENT s LAST_CALL_ET&lt;br/&gt;------- ------ ------- -------------------- ---------- -------------------- -------------------- ------------------------------ ------- ------------&lt;br/&gt;1 1094 11 SYS INACTIVE enmo SQL*Net message from client 525 504&lt;/p&gt;
&lt;p&gt;无法找到SQL_id，源头阻塞会话&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;SQL&amp;gt; select sql_text from v$session a,v$sqltext_with_newlines b where decode(a.sql_hash_value,0,prev_hash_value,sql_hash_value)=b.hash_value and a.sid=1094;&lt;/p&gt;
&lt;p&gt;SQL_TEXT&lt;br/&gt;----------------------------------------------------------------&lt;br/&gt;update yz.a set name='cc' where id=1&lt;/p&gt;

&lt;p&gt;[分析上述SQL查询的列信息&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; select sql_hash_value,prev_hash_value,sql_hash_value,sql_id from v$session where sid=1094;&lt;/p&gt;
&lt;p&gt;SQL_HASH_VALUE PREV_HASH_VALUE SQL_HASH_VALUE SQL_ID&lt;br/&gt;-------------- --------------- -------------- --------------------&lt;br/&gt;0 1358140474 0           &lt;/p&gt;
&lt;p&gt;SQL_HASH_VALUE=&amp;gt; 会话正在执行的SQL_ID&lt;/p&gt;
&lt;p&gt;PREV_HASH_VALUE=&amp;gt;会话上一条执行的SQL_ID&lt;/p&gt;
&lt;p&gt;SQL_ID=&amp;gt; 正在执行的SQL_ID&lt;/p&gt;
&lt;p&gt;]&lt;/p&gt;

&lt;/div&gt;&lt;div readability=&quot;33&quot;&gt;
&lt;pre&gt;
SQL&amp;gt;alter system kill session &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sid,serial#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; immediate;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Fri, 01 Mar 2019 15:52:00 +0000</pubDate>
<dc:creator>绿茶有点甜</dc:creator>
<og:description>实际处理后，在测试环境中模拟还原TX锁，及处理。 本篇博客目录： 1.TX锁模拟实际环境 2.登陆数据库，查询相关信息 3.确认锁源头，kill进程释放资源 一、TX锁模拟 SQL&gt; updat</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lvcha001/p/10459411.html</dc:identifier>
</item>
<item>
<title>wtf！rds数据同步居然出问题了--小白db的数据修复历程 - 等你归去来</title>
<link>http://www.cnblogs.com/yougewe/p/10459364.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yougewe/p/10459364.html</guid>
<description>&lt;p&gt;　　由于一次上线操作的数据变更太多，导致执行时间很长！&lt;/p&gt;
&lt;p&gt;　　由于做手动主从关系，所以操作落在了主库上。&lt;/p&gt;
&lt;p&gt;　　由于主从关系不是对整个库的操作，所以在有表新增的地方，添加了dts新的同步关系。&lt;/p&gt;
&lt;p&gt;　　db变更完成后，就发布代码上线了！&lt;/p&gt;
&lt;p&gt;以上是背景！一切看起来都很美好。&lt;/p&gt;
&lt;p&gt;　　代码上线后，从从库发现数据一直没有，时间在一分分地过去。&lt;/p&gt;
&lt;p&gt;　　我知道不能再等了，我从后台直接进入主库，查看数据，正常写入！&lt;/p&gt;
&lt;p&gt;　　我知道是数据同步出问题了！妈蛋，说好的花钱买稳定呢？&lt;/p&gt;
&lt;p&gt;　　同步出问题了，这让我怎么排查？我又不是dts的开发人员！&lt;/p&gt;
&lt;p&gt;不过我还是想了几个方向查一下：&lt;/p&gt;
&lt;p&gt;　　1. 查看同步任务，检查是否有同步异常日志；&lt;br/&gt;　　2. 检查目前的同步状态，是否有异常；&lt;br/&gt;　　3. 检查同步流量情况，如果同步正常的话；&lt;br/&gt;　　4. 检查监控报警是否存在；&lt;br/&gt;　　5. 检查dts服务是否被黑名单了；&lt;br/&gt;　　6. 如果实在不行，给阿里云提交工单吧；&lt;/p&gt;
&lt;p&gt;针对这几个方向，着实是一个个落实了的。然而，结果是，不得而知。&lt;/p&gt;
&lt;p&gt;　　1. 同步没有日志，why，可能是日志太多没意义吧！&lt;br/&gt;　　2. 没有发现异常，所有监控为空；&lt;br/&gt;　　3. 由于我最开始做主从关系时，没进行全量初始化数据，所以初始化状态拦也为空；&lt;br/&gt;　　4. 同步流量监控，基本为0，但是这貌似不能说明问题，才怪！&lt;br/&gt;　　5. 重新把自己加入到报警人员中，期待出问题时收到消息，不过最终并没有收到过；&lt;br/&gt;　　6. 检查ip白名单问题，发现并无异常，而且数据库进程中，也有dts服务存在；&lt;br/&gt;　　7. 最终还是给阿里云提交了工单，然而并没有什么卵用，迫在眉睫，还得自己先解决问题！&lt;br/&gt;　　8. 怀疑是在做数据结构变更或者新增同步对象时，dts发生了异常，然而怀疑有毛用。反正又不能解决！&lt;/p&gt;
&lt;p&gt;　　实在没办法，我觉得这个同步任务多半已经挂掉了，所以决定重新搞一个任务。也就是，把原来的同步任务删掉，然后新建一个同步。虽然看到了很多警告，我还是干了，没办法。重新设置任务，想勾选初始化数据和全量同步，结果失败了。原因是，数据表已在目标库中存在，可能存在冲突。&lt;/p&gt;
&lt;p&gt;　　重新设置同步任务的过程，等待也是让人着急。但不管怎么样，还是看到了同步中的状态，发现从库有数据了，但是仅仅是部分。抽查了几个表数据后，发现某些表结构也不一样，很自然的想到了，中间的数据同步已经被丢掉了。&lt;/p&gt;
&lt;p&gt;　　我目前能快速做的，就是先主动把从库表结构更改为一致状态，以让后续数据同步能顺利进行。操作过程中，提示了很多错误，我完全忽略。但这在我最后的思考中，成了思路来源！&lt;/p&gt;
&lt;p&gt;　　我把结构变更操作后，数据总算恢复了平静，从库数据写入了。还不错，从这一刻起，数据是正常的。&lt;/p&gt;
&lt;p&gt;　　然而，这里遇到了另一个更大的问题：数据一致性！两个库的数据不一致！（这是业界最为重视的话题之一）！不过幸好，这只是个从库。但是有很多业务是从这个库数据数据源的，这绝逼会成为生产事故的啊。&lt;/p&gt;
&lt;p&gt;　　事情也不算太糟，虽然db小白很着急，db老鸟们却在笑：小场面，小场面！你不是主库的数据源是正确的嘛，同步过来就好了嘛！&lt;/p&gt;
&lt;p&gt;　　是的，只要从主库将数据搞一份过来就好了嘛！但是，怎么搞？&lt;/p&gt;
&lt;p&gt;　　和虽然听过很多的道理，却依旧过不好这一生一般。虽然你知道数据库的n种操作姿势，却不一定能在关键的时候用出一招！&lt;/p&gt;
&lt;p&gt;　　　　1. 一是最笨型姿势：直接将从库的数据删除，从主库里把全里数据导过来；即：备份&amp;amp;恢复！&lt;br/&gt;　　　　2. 导入的方式可以是自己dump，也可以利用dts进行全量初始化；&lt;br/&gt;　　　　3. 二还是笨的：根据数据表时间点，导出停顿时间段的数据，挨个导入到从库。这很危险，因为你可能导入一些过期的数据；&lt;br/&gt;　　　　4. 三使用dump数据导入：使用mysqldump 根据特征，取出数据，然后使用replace的方式，插入到从库中；注意一些表项的设置！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# --skip-add-&lt;span&gt;locks 不使用锁进行表写入。因为使用锁时，极有可能导致更新花费很长时间！所以尽量将该参数带上！
# &lt;/span&gt;--skip-tz-&lt;span&gt;utc 即不修改时区，数据库里存储多少就是多少。因为本身两个库的数据是相当的，所以无需修改该参数！
# &lt;/span&gt;-&lt;span&gt;t 代表不创建表
mysqldump &lt;/span&gt;-uroot -t -p --skip-tz-utc --skip-add-locks  --replace --host=localhost -&lt;span&gt;w&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; --databases test &amp;gt; lostdata.dump
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　5. 使用dump时，参数设置最为关键，使用不当将导致数据取错，或者直接更新错误；&lt;/p&gt;
&lt;p&gt;　　四高级姿势：既然数据同步是通过binlog做的，那么，只要将binlog重新执行一遍，就好了嘛。但是风险同在，一是基于云的服务貌似不提供这种功能；二是binlog重读能保证结果一致吗（幂等性），还得研究研究！&lt;/p&gt;
&lt;p&gt;不管怎么样，用笨人的方式，最终还是让数据保持一致了。&lt;/p&gt;
&lt;p&gt; mysqldump过程中，几点经验之谈：&lt;/p&gt;
&lt;p&gt;　　1. 所有表尽可能添加公共特征字段，比如 update_time，这样在同步的时候就可以方便使用where进行过滤了；&lt;br/&gt;　　2. 可以以mysqldump作为命令，执行定时更新数据的脚本；脚本如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash
date_yesterday&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+%Y-%m-%d 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-1 day&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`;
date_before_yesterday&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+%Y-%m-%d 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-2 day&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`;
mysqldump &lt;/span&gt;-uroot -t -p --skip-tz-utc --skip-add-locks --replace --host=&lt;span&gt;rm&lt;/span&gt;-xxx.mysql.rds.aliyuncs.com -&lt;span&gt;w&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update_time &amp;gt;= '$date_before_yesterday' AND update_time &amp;lt; '$date_yesterday'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; --databases test --tables t_myusers &amp;gt;&lt;span&gt; lastday.dump
# 去除指定数据库操作，以让外部参数生效
&lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/^USE `.*`;/d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; lastday.dump &amp;gt;&lt;span&gt; lastday.dump
&lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/^CREATE DATABASE.*;/d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; lastday.dump &amp;gt;&lt;span&gt; lastday.dump
# 数据导入新库中
mysql &lt;/span&gt;-uroot -p123 -Dtest_new &amp;lt;  lastday.dump
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     这样，就可以mysqldump来做简单的备份，以及不实时的数据同步了！（调整频率实现）&lt;/p&gt;
&lt;p&gt;　　一句话总结：练为战！&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 15:33:00 +0000</pubDate>
<dc:creator>等你归去来</dc:creator>
<og:description>由于一次上线操作的数据变更太多，导致执行时间很长！ 由于做手动主从关系，所以操作落在了主库上。 由于主从关系不是对整个库的操作，所以在有表新增的地方，添加了dts新的同步关系。 db变更完成后，就发布</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yougewe/p/10459364.html</dc:identifier>
</item>
<item>
<title>论type与object的关系----Python创世纪 - Lorthevan</title>
<link>http://www.cnblogs.com/lorthevan/p/10459097.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lorthevan/p/10459097.html</guid>
<description>&lt;p&gt;这篇随笔的灵感来源于学习源码时对type及object关系的疑惑,主要参考了这篇论文:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Python Types and Objects&quot; href=&quot;http://www.cs.utexas.edu/~cannata/cs345/Class%20Notes/15%20Python%20Types%20and%20Objects.pdf&quot; target=&quot;_blank&quot;&gt;http://www.cs.utexas.edu/~cannata/cs345/Class%20Notes/15%20Python%20Types%20and%20Objects.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.Object是什么?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　计算机的工作过程概括下来就是:读取'数据', 经由'逻辑'运算,输出'结果'&lt;/p&gt;
&lt;p&gt;　　数据在软件中的表示形式,是通过'键'指向存储地址,从而'引用'该地址中的值&lt;/p&gt;
&lt;p&gt;　　所以'程序'在干的事,就是告诉计算机,用什么'数据', 进行什么'逻辑'运算,一言以蔽之,就是操作键值对&lt;/p&gt;
&lt;p&gt;　　这里只谈'数据',不讲'逻辑'&lt;/p&gt;
&lt;p&gt;　　在面向对象中, 我们将键值对分门别类的放好,并封装成一个个对象&lt;/p&gt;
&lt;p&gt;　　'object'就是这样一个东西---python原初的对象.&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 2.Type又是什么?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　先上代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; object
&amp;lt;class 'object'&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type
&amp;lt;class 'type'&amp;gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(object)
&amp;lt;class 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(type)
&amp;lt;class 'type'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; object.__class__ 
&amp;lt;class 'type'&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; type.__class__ 
&amp;lt;class 'type'&amp;gt; 

&amp;gt;&amp;gt;&amp;gt; type.__bases__&lt;span&gt; 
(&amp;lt;class 'object'&amp;gt;&lt;span&gt;,)
&amp;gt;&amp;gt;&amp;gt; object.__bases__&lt;span&gt;
() &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到,从代码中体现的是:&lt;/p&gt;
&lt;p&gt;　　　　·object和type都是类(class)&lt;/p&gt;
&lt;p&gt;　　　　·object和type的类型(type)都是type&lt;/p&gt;
&lt;p&gt;　　　　·type的父类是object,object则没有父类,源码中描述object为&quot;&quot;&quot; The most base type &quot;&quot;&quot;&lt;/p&gt;
&lt;p&gt;　　接下来看一张图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531002/201903/1531002-20190301195158436-1821398257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中虚线表示实例化关系,实现表示继承关系,可以看出:　　&lt;/p&gt;
&lt;p&gt;　　　·因为object是type的实例,所以他的子类(list,tupe,dict)都是type的实例,即一个类的实例化对象的派生类也从属于该类&lt;/p&gt;
&lt;p&gt;　　　·因为mylist是list的实例,且list又是object的子类,所以mylist也是type的实例,即一个类的实例化对象的实例化对象也从属与该类&lt;/p&gt;
&lt;p&gt;　　现在再说这句话应该会更容易理解:&lt;/p&gt;
&lt;p&gt;　　　objcet的type是type,object是type的实例,type是自己的实例&lt;/p&gt;
&lt;p&gt;　　　因此两者之间互相依赖对方定义自身,可以说是鸡生蛋和蛋生鸡的关系&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3.三生万物&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　官方文档中有这么一个概念:&lt;/p&gt;
&lt;h3&gt;　　Type Objects&lt;/h3&gt;
&lt;p id=&quot;index-57&quot;&gt;　　Type objects represent the various object types. An object’s type is accessed by the built-in function &lt;a class=&quot;reference internal&quot; title=&quot;type&quot; href=&quot;https://docs.python.org/3/library/functions.html#type&quot;&gt;&lt;code class=&quot;xref py py-func docutils literal notranslate&quot;&gt;type()&lt;/code&gt;&lt;/a&gt;. There are no special operations on types. The standard module &lt;a class=&quot;reference internal&quot; title=&quot;types: Names for built-in types.&quot; href=&quot;https://docs.python.org/3/library/types.html#module-types&quot;&gt;&lt;code class=&quot;xref py py-mod docutils literal notranslate&quot;&gt;types&lt;/code&gt;&lt;/a&gt; defines names for all standard built-in types.&lt;/p&gt;
&lt;p&gt;　　type objects翻译过来就是类型对象, 其表示各种对象的类型,我们可以使用type()去访问任何对象的类型,type和object都属于Type Objects&lt;/p&gt;
&lt;p&gt;　　结合上面的阐述,可以勾勒出python中'对象'这个概念的全貌:&lt;/p&gt;
&lt;p&gt;　　object和type是两个原初的对象,由他们派生(实例化)的对象也可以分为两类:&lt;/p&gt;
&lt;p&gt;　　　　·类型对象(type objects)&lt;/p&gt;
&lt;p&gt;　　　　·非类型对象(non-type object)&lt;/p&gt;
&lt;p&gt;　　他们都是对象,不同的是,类型对象能够实例化新的对象,非类型对象则不可以,例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
num = int(1&lt;span readability=&quot;3&quot;&gt;)
# num是int实例化的对象,有具体的值,我们不会这么去调用他:num()&lt;p&gt;&lt;span&gt;type(num)
&amp;gt;&amp;gt;&amp;gt; &amp;lt;class 'int'&amp;gt;&lt;span&gt;
type(int)
&amp;gt;&amp;gt;&amp;gt; &amp;lt;class 'type'&amp;gt;&lt;span&gt;

obj =&lt;span&gt; object()
type(obj)
&amp;gt;&amp;gt;&amp;gt; &amp;lt;class 'object'&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对象之间的关系,不外乎以下两种:&lt;/p&gt;
&lt;p&gt;　　　　·父子关系（ the subclass-superclass relationship）&lt;/p&gt;
&lt;p&gt;　　　　·类型实例关系（ the type-instance relationship ）&lt;/p&gt;
&lt;p&gt;　　我们可以通过实例化type来产生新的类型对象,然后再把这个类型实例化,当然,这个新的类型对象也必须继承自object:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
type('A', (object,), {num=1&lt;span&gt;})
# 这个写法可以清晰的表明类型对象是type的实例化,但我们在实际写代码的时候一般这样写:
class&lt;span&gt; A(object):
    num=1&lt;br/&gt;a = A()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这其中,A既是type的实例化对象(instance),又是object的子类(subclass), a则只是A的实例化对象&lt;/p&gt;
&lt;p&gt;　　至此,我们完成了从object到type,再到Type Objects,从'对象'这一角度描绘出了Python这门语言的一个轮廓,相信大家都听说过画杨桃的故事,笔者水平尚浅,幸得窥见这一角度,希望在今后能从更多角度出发去观察,从而从二维升级到三维.&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 14:22:00 +0000</pubDate>
<dc:creator>Lorthevan</dc:creator>
<og:description>这篇随笔的灵感来源于学习源码时对type及object关系的疑惑,主要参考了这篇论文: http://www.cs.utexas.edu/~cannata/cs345/Class%20Notes/15</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lorthevan/p/10459097.html</dc:identifier>
</item>
<item>
<title>nmap参数原理抓包分析 - 雨中落叶</title>
<link>http://www.cnblogs.com/yuzly/p/10458997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuzly/p/10458997.html</guid>
<description>&lt;p&gt;&lt;span&gt;nmap参数原理抓包分析&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;实验环境:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Nmap7.70&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实验步骤:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.主机发现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.端口扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.服务版本探测&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、主机发现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主机发现,如果主机活跃,扫描1000个常用的tcp端口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、Nmap ip   #默认进行主机发现、端口扫描、服务版本探测等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.1先以一个不存在的ip为例:nmap 1.2.3.4 抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301211828190-801037066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到如果没有给出主机发现选项,nmap默认使用以下四种方式来确认目标机器是否活跃(只有以下四种方式任意一个得到目标的响应就可以说明目标主机存活)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.nmap就发送一个ICMP 回声请求到每台目标机器,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.TCP ACK 报文到80端口,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.TCP ACK 报文到443端口,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.还有一个基于时间的ICMP请求到每台目标机器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212221794-293182308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从上图可以看到，nmap不带参数默认使用上面的四种方式来确定目标机器是否存活&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.2再以一个存在的ip为例:nmap 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　可以看到获得扫描成功的结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212514214-2130179105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析抓包的数据,可以看到目标机器对ICMP回显请求响应了,对基于时间的icmp请求响应了,对TCP ACK 报文到80端口和TCP ACK 报文到443端口响应了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212544202-391309010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;得到主机存活之后,就开始了扫描1000个常用的端口(默认扫描的端口)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212620796-483245736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、nmap -sP ip    #ping扫描 只主机发现  #须注意,目标必须是公网ip,局域网ip本参数无效,因为局域网扫描时,默认使用ARP扫描目标(-PR参数)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该选项告诉Nmap仅仅进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机 。 没有进一步的测试 (如端口扫描或者操作系统探测)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.1以一个存在的IP为例: nmap -sP 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到只进行主机发现,没有进一步的测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212844997-1473627880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到抓取的数据包只有关于主机发现的数据,得到目标主机存活之后也没有进行下一步测试(因为nmap -sP参数的限制)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212912916-91235479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要注意的是即使 您指定了其它 -P*选项，ARP发现(-PR)对于局域网上的 目标而言是默认行为，因为它总是更快更有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.2下面以nmap -sP 192.168.43.200  为例扫描一个局域网IP,抓包分析  #注意目标IP是局域网IP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下图可以看到,局域网扫描可以获得目标主机的MAC地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213050045-105533309.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到下图的抓包,虽然使用的是-sP参数,但因为是在局域网内扫描目标IP,默认使用ARP扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213127490-634993507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.nmap -P0  ip   #无ping 跳过主机发现  把目标ip看成是活跃的直接进行高强度扫描(端口扫描、服务版本探测或操作系统版本探测等)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该选项完全跳过 Nmap发现阶段。通常nmap在进行高强度的扫描时用它确定正在运行的机器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1以一个存在的IP为例: nmap -sP 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行的结果如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213243904-1816839394.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过查看下图抓取的数据包,可以看到没有进行主机发现,直接进行高强度的扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213310203-151235043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.nmap -PS  ip   #TCP SYN 扫描   主机发现只连接目标的tcp 80端口,不使用ICMP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只要目标主机响应TCP SYN 就说明目标主机是活跃的,无论响应的是哪种数据包(RST或者SYN/ACK)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该选项发送一个设置了 SYN 标志位的空 TCP 报文, 默认目的端口为80, 但不同的端口也可以作为选项指定。甚至可以指定一个以逗号分隔的端口列表(如 -PS22，23，25，80，113，1050，35000)，在这种情况下，每个端口会被并发地扫描。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SYN 标志位告诉对方您正试图建立一个连接。通常目标端口是关闭的，一个RST(复位) 包会发回来。 如果碰巧端口是开放的，目标会进行 TCP 三步握手的第二步，回应 一个 SYN/ACKTCP报文。然后运行 Nmap 的机器则会扼杀这个正在建立的连接，发送一个 RST 而非 ACK报文，否则，一个完全的连接将会建立。 RST 报文是运行 Nmap 的机器而不是 Nmap 本身响应的，因为它对收到 的 SYN/ACK感到很意外。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Nmap&lt;/strong&gt; &lt;strong&gt;并不关心端口开放还是关闭。 无论 RST 还是 SYN/ACK响应都告诉 Nmap 该主机正 在运行。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.1以一个存在的IP为例: nmap -PS 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到目标响应一个SYN/ACK包,说明目标ip是活跃的,然后便进行默认端口扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213705913-1657591630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.2 nmap -PS ip 也可以指定端口(不指定默认1000个常用的端口)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面以nmap -PS 192.168.43.200 -p 80,443,53为例,抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213741213-1205957320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析下图的数据包可以看到扫描53端口的过程:nmap发送TCP SYN包到目标IP,目标IP响应SYN/ACK包,nmap不进行第三次握手(ACK包),就直接发送RST包。这就是-PS参数的特点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213825956-639515397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.nmap -PA ip  #TCP ACK 扫描&lt;/span&gt;　　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TCPACK ping 和刚才讨论的 SYN ping相当类似。区别就是设置 TCP 的 ACK标志位而不是 SYN 标志位。-PA选项使用和 SYN 探测(-PS)相同的默认端口(80)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ACK报文表示确认一个建立连接的尝试，但该连接尚未完全建立。 所以远程主机应该总是回应一个 RST 报文， 因为它们并没有发出过连接请 求到运行 Nmap 的机器，如果它们正在运行的话。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于没头没脑的 ACK 报文通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS 又指定-PA来即发送 SYN又发送 ACK。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.1以一个存在的IP为例: nmap -PS 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214037250-318544333.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析抓取到的数据,可以看到主机发现的过程(默认以80端口作为主机发现):namp直接发送一个ACK的报文到目标IP,目标IP响应RST报文,说明主机存活&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214116072-825881266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.2带端口的跟不带端口的原理一样,这里不进行测试了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.3由于没头没脑的 ACK 报文通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS 又指定-PA来即发送 SYN又发送 ACK。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以一个存在的IP为例: nmap -PS  -PA  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214151668-396568427.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到同时应用了-PS和-PA参数就构造成了一个完整的数据包,不会轻易被防火墙拦截丢弃&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214219394-202716982.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6.namp -PU  ip   #UDP扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它发送一个空的(除非指定了--data-length)UDP报文到给定的端口。端口列表的格式和前面讨论过的-PS 和-PA选项还是一样。如果不指定端口,默认是31338。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果目标机器的端口是关闭的，UDP 探测应该马上得到一个 ICMP 端口无法到达的回应报 文。 这对于 Nmap 意味着该机器正在运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -PU  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214308468-466539024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析抓取的数据包,可以发现nmap给目标机器的端口31338(默认的UDP端口),得到响应的是目标不可达,说明目标机器是存活的。(因为31338端口是一个关闭的端口)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214353814-1282769923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、端口扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.Nmap -sS ip    #半连接 2/3 默认用-sP去发现主机,如果没结果请尝试改成-PS或者-PU 或者-P0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SYN 扫描作为默认的也是最受欢迎的扫描选项, SYN 扫描相对来说不张扬，不易被注意到，因为它从来不完成 TCP连接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它常常被称为半开放扫描，因为它不打开一个完全的TCP连接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -sS  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214521325-1654728193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面以80端口为例,分析-sS参数的过程,namp发送一个SYN报文到目标IP,目标IP响应一个SYN/ACK报文,然后nmap就不回复了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214552289-21414255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.Nmap -sT ip    #全连接3/3  默认用-sP去发现主机,如果没结果请尝试改成-PS或者-PU 或者-P0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -sT  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面以443端口为例,分析-sS参数的过程: namp发送一个SYN报文到目标IP,目标IP响应一个SYN/ACK报文,然后nmap回复ACK。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214646483-1308018813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、服务版本探测&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -sV  121.194.14.84&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214713664-1366133006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 01 Mar 2019 13:54:00 +0000</pubDate>
<dc:creator>雨中落叶</dc:creator>
<og:description>nmap参数原理抓包分析 实验环境: Nmap7.70 实验步骤: 1.主机发现 2.端口扫描 3.服务版本探测 一、主机发现 主机发现,如果主机活跃,扫描1000个常用的tcp端口 1、Nmap i</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuzly/p/10458997.html</dc:identifier>
</item>
<item>
<title>simulink创建简单模型 - MATLAB基于模型的设计</title>
<link>http://www.cnblogs.com/52geek/p/10458482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/52geek/p/10458482.html</guid>
<description>&lt;h2 id=&quot;bthii4g&quot; class=&quot;title r2018a&quot;&gt;创建简单模型&lt;/h2&gt;
&lt;p&gt;您可以使用 Simulink® 对系统建模，然后仿真该系统的动态行为。Simulink 允许您创建模块图，图中的各个连接模块代表系统的各个部分，信号代表这些模块之间的输入/输出关系。Simulink 的主要功能是对系统各个组件随时间流逝的行为变化进行仿真。简单来讲就是：采用一个时钟，按时间确定各个模块的仿真顺序，并在仿真过程中依次将在上一个模块图中计算得出的输出传播到下一个模块，直至最后一个模块。假设有一个打开加热器的开关。在每个时间步中，Simulink 必须计算开关的输出，将该输出传播到加热器，然后计算热量输出。&lt;/p&gt;
&lt;p&gt;通常，组件的输入对其输出的影响不是瞬时的。例如，打开加热器不会导致温度立即发生变化。该动作为微分方程提供输入，历史温度（一个&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;状态&lt;/em&gt;）也是一个输入因子。当模块图的仿真需要求解微分或差分方程时，Simulink 使用内存和数值求解器来计算时间步的状态值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Simulink 处理三类数据：&lt;/p&gt;
&lt;div class=&quot;itemizedlist&quot;&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;信号 - 在仿真期间计算的模块输入和输出&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;状态 - 在仿真期间中计算的代表模块动态的内部值&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;参数 - 影响模块行为的值，由用户控制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;p&gt;在每个时间步，Simulink 都计算信号和状态的新值。相比之下，您可以在编译模型时指定参数，并且可以在仿真运行时偶尔更改它们。&lt;/p&gt;
&lt;h3 id=&quot;bqea1hh-3&quot; class=&quot;title&quot;&gt;模型概述&lt;/h3&gt;

&lt;p&gt;本教程中创建简单模型所使用的基本方法也适用于创建更复杂的模型。此示例仿真的是在踩下加速踏板后简化的汽车运动。&lt;/p&gt;
&lt;p&gt;Simulink 模块是定义模块输入和模块输出之间数学关系的模型元素。要创建这个简单模型，您需要四个 Simulink 模块。&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-condensed&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;tcol1&quot; width=&quot;33%&quot;/&gt;&lt;col class=&quot;tcol2&quot; width=&quot;33%&quot;/&gt;&lt;col class=&quot;tcol3&quot; width=&quot;33%&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块名称&lt;/th&gt;
&lt;th&gt;模块目的&lt;/th&gt;
&lt;th&gt;模型目的&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Pulse Generator&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;为模型生成输入信号&lt;/td&gt;
&lt;td&gt;模拟加速踏板&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Gain&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;将输入信号乘以一个因子&lt;/td&gt;
&lt;td&gt;模拟踩下加速踏板对汽车加速所造成的影响&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Integrator, Second-Order&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;对输入信号执行二次积分&lt;/td&gt;
&lt;td&gt;根据加速度计算汽车位置&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Outport&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;将信号指定为模型的输出&lt;/td&gt;
&lt;td&gt;将位置指定为模型的输出&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;此模型的仿真过程是将一个简短的脉冲信号积分两次，形成一个斜坡信号，然后将结果显示在一个示波器窗口中。输入脉冲表示踩下汽车的加速踏板，输出斜坡表示与起点的距离增加。&lt;/p&gt;
&lt;h3 id=&quot;bu3nd7o-1&quot; class=&quot;title&quot;&gt;打开新模型&lt;/h3&gt;

&lt;p&gt;使用 Simulink Editor 构建模型。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;启动 MATLAB®。从 MATLAB 工具条上，点击 &lt;span class=&quot;guilabel&quot;&gt;Simulink 按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline8&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/icon_simulink_zh_CN.png&quot; alt=&quot;&quot; width=&quot;24&quot; height=&quot;24&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;点击 &lt;span class=&quot;guilabel&quot;&gt;Blank Model 模板。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Simulink Editor 打开。&lt;/p&gt;

&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;从 &lt;span class=&quot;guilabel&quot;&gt;File 菜单中，选择 &lt;span class=&quot;guilabel&quot;&gt;Save as。在 &lt;span class=&quot;guilabel&quot;&gt;File name 文本框中，输入您的模型的名称，例如 &lt;code class=&quot;literal&quot;&gt;simple_model&lt;/code&gt;。点击 &lt;span class=&quot;guibutton&quot;&gt;Save。模型使用文件扩展名 &lt;code class=&quot;literal&quot;&gt;.slx&lt;/code&gt; 进行保存。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;h3 id=&quot;bt9ataa-1&quot; class=&quot;title&quot;&gt;打开 &lt;span class=&quot;trademark&quot;&gt;Simulink Library Browser&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simulink 在 Library Browser 中提供了一系列按功能分类的模块库。下面是大多数工作流常用的一些模块库：&lt;/p&gt;
&lt;div class=&quot;itemizedlist&quot;&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Continuous - 连续状态系统的构建模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Discrete - 离散状态系统的构建模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Math Operations - 实现代数和逻辑方程的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Sinks - 存储并显示所连接信号的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Sources - 生成模型的驱动信号值的模块&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;从 Simulink Editor 工具栏上，点击 &lt;span class=&quot;guilabel&quot;&gt;Library Browser 按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline8&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/library_browser_button_zh_CN.png&quot; alt=&quot;&quot; width=&quot;27&quot; height=&quot;27&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将 Library Browser 设置为始终在其他桌面窗口前端。在 Library Browser 工具栏中，选择 &lt;span class=&quot;guilabel&quot;&gt;Stay on top 按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline10&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/simulik_library_browser_pin_icon_zh_CN.png&quot; alt=&quot;&quot; width=&quot;29&quot; height=&quot;26&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p&gt;要浏览模块库，请从左窗格中选择一个 MathWorks® 产品，然后选择一个功能区。要搜索所有可用的模块库，请输入搜索词。&lt;/p&gt;
&lt;p&gt;例如，查找 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块。在浏览器工具栏的搜索框中输入 &lt;code class=&quot;literal&quot;&gt;pulse&lt;/code&gt;，然后按 Enter 键。Simulink 将在模块库中搜索名称或说明中包含 &lt;code class=&quot;literal&quot;&gt;pulse&lt;/code&gt; 的模块，然后显示这些模块。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;获取模块的详细信息。右键点击某个模块，然后选择 &lt;/p&gt;
&lt;p&gt;模块通常有几个参数。您可以通过双击该模块来访问所有参数。&lt;/p&gt;
&lt;h3 id=&quot;bt9ata1-1&quot; class=&quot;title&quot;&gt;将模块添加到模型&lt;/h3&gt;

&lt;p&gt;要开始构建模型，请浏览库并添加模块。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;从 &lt;span class=&quot;guiicon&quot;&gt;Sources 库中，将 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块拖到 Simulink Editor 中。您的模型中将出现 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块的副本，还有一个文本框用于输入 &lt;span class=&quot;guilabel&quot;&gt;Amplitude 参数的值。输入 &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;参数值在整个仿真过程中保持不变。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;使用相同的方法将以下模块添加到模型中。&lt;/p&gt;

&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-condensed&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;tcol1&quot; width=&quot;26%&quot;/&gt;&lt;col class=&quot;tcol2&quot; width=&quot;41%&quot;/&gt;&lt;col class=&quot;tcol3&quot; width=&quot;33%&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;库&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Gain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Simulink/Math Operations&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Gain: &lt;code class=&quot;literal&quot;&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Integrator, Second Order&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Simulink/Continuous&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Initial condition: &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Outport&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Simulink/Sinks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Port number:1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;通过右键点击并拖动一个现有 Outport 模块，添加第二个 Outport 模块。&lt;/p&gt;
&lt;p&gt;现在您的模型应该具有所需的全部模块了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过点击并拖动每个模块来按如下方式排列模块。要调整模块大小，请点击并拖动一个角。&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;h3 id=&quot;bt6d_1y-1&quot; class=&quot;title&quot;&gt;连接模块&lt;/h3&gt;

&lt;p&gt;通过在输出端口和输入端口之间创建线条来连接模块。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;4&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;点击 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块右侧的输出端口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该输出端口和所有可供连接的输入端口都将突出显示。&lt;/p&gt;


&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;点击 &lt;span class=&quot;block&quot;&gt;Gain 模块的输入端口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Simulink 用线条连接模块，并用箭头表示信号流的方向。&lt;/p&gt;


&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将 &lt;span class=&quot;block&quot;&gt;Gain block 的输出端口连接到 &lt;span class=&quot;block&quot;&gt;Integrator, Second Order 模块的输入端口。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将 &lt;span class=&quot;block&quot;&gt;Integrator, Second Order 模块的两个输出连接到两个 &lt;span class=&quot;block&quot;&gt;Outport 模块。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存模型。选择 &lt;/p&gt;



&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p&gt;您的模型搭建完成。&lt;/p&gt;
&lt;h3 id=&quot;mw_53120a0d-b4d9-4b18-96ab-c39a2a2c6890&quot; class=&quot;title&quot;&gt;添加信号查看器&lt;/h3&gt;

&lt;p&gt;要查看结果，请将第一个输出连接到一个 &lt;span class=&quot;block&quot;&gt;Signal Viewer。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过右键点击信号来访问上下文菜单。选择 &lt;/p&gt;

&lt;p&gt;您可以随时通过双击该图标打开查看器。&lt;/p&gt;
&lt;h3 id=&quot;bt6d__m-1&quot; class=&quot;title&quot;&gt;运行仿真&lt;/h3&gt;
&lt;p&gt;定义配置参数后，即可进行模型仿真。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;在模型窗口上，通过更改工具栏上的值来设置仿真停止时间。&lt;/p&gt;

&lt;p&gt;默认停止时间 &lt;code class=&quot;literal&quot;&gt;10.0&lt;/code&gt; 适合此模型。此时间值没有单位。Simulink 中的时间单位取决于方程的构造方式。此示例对简化的汽车运动进行为时 10 秒的仿真。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;要运行仿真，请点击 &lt;span class=&quot;guibutton&quot;&gt;Run 仿真按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline5&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/start_button_ue_zh_CN.png&quot; alt=&quot;&quot; width=&quot;31&quot; height=&quot;29&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;仿真运行并在查看器上生成输出。&lt;/p&gt;

&lt;h2 id=&quot;d120e1729&quot;&gt; &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关注公众号： MATLAB基于模型的设计 （ID：xaxymaker） ，每天推送MATLAB学习最常见的问题，&lt;/strong&gt;每天进步一点点，业精于勤荒于嬉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1082605/201812/1082605-20181216183156624-877634862.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 打开微信扫一扫哦！&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 12:02:00 +0000</pubDate>
<dc:creator>MATLAB基于模型的设计</dc:creator>
<og:description>创建简单模型 您可以使用 Simulink® 对系统建模，然后仿真该系统的动态行为。Simulink 允许您创建模块图，图中的各个连接模块代表系统的各个部分，信号代表这些模块之间的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/52geek/p/10458482.html</dc:identifier>
</item>
</channel>
</rss>