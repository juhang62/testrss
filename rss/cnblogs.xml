<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>推荐几个大厂的前端代码规范，你也能写出诗一样的代码！ - 天明夜尽</title>
<link>http://www.cnblogs.com/biaochenxuying/p/14167372.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/biaochenxuying/p/14167372.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-73161675c44ac2ec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家好，我是你们的 前端章鱼猫，一个不喜欢吃鱼、又不喜欢喵 的超级猫 ~&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;前端章鱼猫从 2016 年加入 GitHub，到现在的 2020 年，快整整 5 个年头了。&lt;/p&gt;
&lt;p&gt;相信很多人都没有逛 GitHub 的习惯，因此总会有开源信息的不对称，有哪些优秀的前端开源项目值得学习的也不知道。&lt;/p&gt;
&lt;p&gt;初步前端与高级前端之间，最大的差距可能就是信息差造成的。&lt;/p&gt;
&lt;p&gt;从 2018 年开始，我就养成了每天逛 GitHub 的习惯，一般在早上上班前或者中午午休的时候都会逛一下。&lt;/p&gt;
&lt;p&gt;看看每天都开源了哪些好的前端项目，还有用到的主流前端技术栈又是哪些，值得我去学习的。&lt;/p&gt;
&lt;p&gt;因此也收藏了不少好的开源项目，在此推荐给大家，每周会有一到三篇精华文章推送。&lt;/p&gt;
&lt;p&gt;希望你在浏览、学习了前端章鱼猫推荐的这些开源项目的过程中，你能学习到更多编程知识、提高编程技巧、找到编程的乐趣。&lt;/p&gt;
&lt;blockquote readability=&quot;6.6199095022624&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FrontEndGitHub/FrontEndGitHub&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;前端GitHub&lt;/strong&gt;&lt;/a&gt;，专注于挖掘 GitHub 上优秀的前端开源项目，抹平你的前端信息不对称，涵盖 JavaScript、Vue、React、Node、小程序、Flutter、Deno、HTML、CSS、数据结构与算法 等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下为【前端GitHub】的第 5 期内容。&lt;/p&gt;
&lt;p&gt;今天给大家带来的是 &lt;strong&gt;几个大厂的前端代码规范&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-94c0f0fb6aa5dd14.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端代码规范&quot;&gt;前端代码规范&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;代码千万行，安全第一行；前端不规范，同事两行泪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;腾讯&quot;&gt;腾讯&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-30c231d57e2cfff2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-ee652b563223bb10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;包含内容也挺多的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PC端专题&lt;/strong&gt;：快速上手、文件目录、页面头部、通用title、通用foot、统计代码、兼容测试&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;移动端专题&lt;/strong&gt;：快速上手、文件目录、页面头部、REM布局、通用foot、统计代码、分享组件、兼容要求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双端官网&lt;/strong&gt;：快速上手、页面跳转&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://tgideas.qq.com/doc/index.html&quot; target=&quot;_blank&quot;&gt;http://tgideas.qq.com/doc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过里面也有一些内容是针对其业务的，并不通用。&lt;/p&gt;
&lt;h3 id=&quot;京东&quot;&gt;京东&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-4bad71fe547d5942.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-53b999ede09d1ba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对比腾讯的代码规范，我更推荐凹凸实验室的代码规范，比较齐全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于W3C、苹果开发者等官方文档，并结合团队日常业务需求以及团队在日常开发过程中总结提炼出的经验而约定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS 规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;统一团队 CSS 代码书写和 SASS 预编译语言的语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从 “目录命名”、“图片命名”、“ClassName” 命名等层面约定规范团队的命名习惯，增强团队代码的可读性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;统一团队的 JS 语法风格和书写习惯，减少程序出错的概率，其中也包含了 ES6 的语法规范和最佳实践。&lt;/p&gt;
&lt;blockquote readability=&quot;1.8&quot;&gt;
&lt;p&gt;凹凸实验室：&lt;a href=&quot;https://guide.aotu.io/index.html&quot; target=&quot;_blank&quot;&gt;https://guide.aotu.io/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;airbnb&quot;&gt;airbnb&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-91fd1bca30463349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;包含了：类型、对象、数组、字符串、函数、属性、变量、提升、比较运算符 &amp;amp; 等号、块、注释、空白、逗号、分号、类型转化、命名规则、存取器、构造函数、事件、模块、jQuery、ECMAScript 5 兼容性、测试、性能、资源、JavaScript 风格指南说明&lt;/p&gt;
&lt;blockquote readability=&quot;2.3529411764706&quot;&gt;
&lt;p&gt;Airbnb Javascript Style Guide：&lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot;&gt;https://github.com/airbnb/javascript&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;百度&quot;&gt;百度&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-fbf245bb9c0e49fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;JavaScript编码规范、HTML、CSS、Less、E-JSON 数据传输标准、模块和加载器、包结构、项目目录结构、图表库标准、react 编码规范。&lt;/p&gt;
&lt;p&gt;比如：缩进&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;[强制] 使用 &lt;code&gt;4&lt;/code&gt; 个空格做为一个缩进层级，不允许使用 &lt;code&gt;2&lt;/code&gt; 个空格 或 &lt;code&gt;tab&lt;/code&gt; 字符。&lt;/li&gt;
&lt;li&gt;[强制] &lt;code&gt;switch&lt;/code&gt; 下的 &lt;code&gt;case&lt;/code&gt; 和 &lt;code&gt;default&lt;/code&gt; 必须增加一个缩进层级。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// good
switch (variable) {

    case '1':
        // do...
        break;

    case '2':
        // do...
        break;

    default:
        // do...

}

// bad
switch (variable) {

case '1':
    // do...
    break;

case '2':
    // do...
    break;

default:
    // do...

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;0.90361445783133&quot;&gt;
&lt;p&gt;规范文档：&lt;a href=&quot;https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md&quot; target=&quot;_blank&quot;&gt;https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;网易编码规范：&quot;&gt;网易编码规范：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-ca28315f6459b9d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS规范&lt;/strong&gt;：一系列规则和方法，帮助你架构并管理好样式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML规范&lt;/strong&gt;：一系列建议和方法，帮助你搭建简洁严谨的结构&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工程师规范&lt;/strong&gt;：前端页面开发工程师的工作流程和团队协作规范&lt;/p&gt;
&lt;p&gt;但是并不止于此，还有更多：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-a3c45cce20b62c70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://nec.netease.com/standard&quot; target=&quot;_blank&quot;&gt;http://nec.netease.com/standard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;javascript-standard-style&quot;&gt;JavaScript Standard Style&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-f3a6c078646de443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除很多公司组织外，很多个人也在项目中使用的规范。&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/standard/standard&quot; target=&quot;_blank&quot;&gt;https://github.com/standard/standard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;vue&quot;&gt;Vue&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-f39b0de6127643c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里是官方的 Vue 特有代码的风格指南。&lt;/p&gt;
&lt;p&gt;如果在工程中使用 Vue，为了回避错误、小纠结和反模式，该指南是份不错的参考。&lt;/p&gt;
&lt;p&gt;不过我们也不确信风格指南的所有内容对于所有的团队或工程都是理想的。&lt;/p&gt;
&lt;p&gt;所以根据过去的经验、周围的技术栈、个人价值观做出有意义的偏差是可取的。&lt;/p&gt;
&lt;blockquote readability=&quot;1.6666666666667&quot;&gt;
&lt;p&gt;官方风格指南： &lt;a href=&quot;https://cn.vuejs.org/v2/style-guide/index.html&quot; target=&quot;_blank&quot;&gt;https://cn.vuejs.org/v2/style-guide/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;es6&quot;&gt;es6&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-4bf5218925ad2ae5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。&lt;/p&gt;
&lt;blockquote readability=&quot;1.6964285714286&quot;&gt;
&lt;p&gt;es6 编程风格：&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/style&quot; target=&quot;_blank&quot;&gt;http://es6.ruanyifeng.com/#docs/style&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;bootstrap&quot;&gt;Bootstrap&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-b5b6c5923617057f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;内容包含 HTML 和 CSS。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法、HTML5 doctype、语言属性、IE 兼容模式、字符编码、引入 CSS 和 JavaScript 文件、实用为王、属性顺序、布尔型属性、减少标签的数量、JavaScript 生成的标签。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法、声明顺序、不要使用 @import、媒体查询（Media query）的位置、带前缀的属性、单行规则声明、简写形式的属性声明、Less 和 Sass 中的嵌套、Less 和 Sass 中的操作符、注释、class 命名、选择器、代码组织。&lt;/p&gt;
&lt;blockquote readability=&quot;2.2727272727273&quot;&gt;
&lt;p&gt;Bootstrap 编码规范：&lt;a href=&quot;https://codeguide.bootcss.com/&quot; target=&quot;_blank&quot;&gt;https://codeguide.bootcss.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;eslint&quot;&gt;ESLint&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-8a8d919b7c6782ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目前绝大多数前端项目都会用到的 可组装的 JavaScrip t和 JSX 检查工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发现问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ESLint 静态分析您的代码以快速发现问题。ESLint 内置于大多数文本编辑器中，您可以将ESLint 作为持续集成管道的一部分运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动修复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ESLint 发现的许多问题都可以自动修复。ESLint 修复程序可识别语法，因此您不会遇到传统的查找和替换算法引入的错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;预处理代码，使用自定义解析器，并编写与 ESLint 内置规则一起使用的自己的规则。您可以自定义 ESLint，使其完全按照项目所需的方式工作。&lt;/p&gt;
&lt;blockquote readability=&quot;1.4814814814815&quot;&gt;
&lt;p&gt;ESLint: &lt;a href=&quot;https://eslint.org/&quot; target=&quot;_blank&quot;&gt;https://eslint.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;2.0652173913043&quot;&gt;
&lt;p&gt;ESLint 中文网：&lt;a href=&quot;https://eslint.bootcss.com/&quot; target=&quot;_blank&quot;&gt;https://eslint.bootcss.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;prettier&quot;&gt;Prettier&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-55d56d64b53da5e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Prettier 是一个“有主见”的代码格式化工具。&lt;/p&gt;
&lt;p&gt;简而言之，这个工具能够使输出代码保持风格一致。&lt;/p&gt;
&lt;p&gt;也是目前绝大多数前端项目都会用到的哦。&lt;/p&gt;
&lt;blockquote readability=&quot;1.7741935483871&quot;&gt;
&lt;p&gt;Prettier：&lt;a href=&quot;https://prettier.io/&quot; target=&quot;_blank&quot;&gt;https://prettier.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-cf19f254ffa643fe.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-45092d7cc1d40d4e.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，【前端GitHub】的第 5 期内容已经讲完了，更多精彩请看下方仓库地址：&lt;/p&gt;
&lt;blockquote readability=&quot;1.1904761904762&quot;&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/FrontEndGitHub/FrontEndGitHub&quot; target=&quot;_blank&quot;&gt;https://github.com/FrontEndGitHub/FrontEndGitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;平时如何发现好的开源项目，可以看看这两篇文章：&lt;a href=&quot;https://github.com/biaochenxuying/blog/issues/45&quot; target=&quot;_blank&quot;&gt;GitHub 上能挖矿的神仙技巧 - 如何发现优秀开源项目&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/FrontEndGitHub/FrontEndGitHub/issues/4&quot; target=&quot;_blank&quot;&gt;恕我直言，你可能连 GitHub 搜索都不会用 - 如何精准搜索的神仙技巧&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;觉得有用 ？喜欢就收藏，顺便点个赞吧，你的支持是我最大的鼓励！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;往期精文&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 22 Dec 2020 00:26:00 +0000</pubDate>
<dc:creator>天明夜尽</dc:creator>
<og:description>大家好，我是你们的 前端章鱼猫，一个不喜欢吃鱼、又不喜欢喵 的超级猫 ~ 简介 前端章鱼猫从 2016 年加入 GitHub，到现在的 2020 年，快整整 5 个年头了。 相信很多人都没有逛 Git</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/biaochenxuying/p/14167372.html</dc:identifier>
</item>
<item>
<title>SpringBoot2 整合OAuth2组件，模拟第三方授权访问 - 知了一笑</title>
<link>http://www.cnblogs.com/cicada-smile/p/14170971.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cicada-smile/p/14170971.html</guid>
<description>&lt;p&gt;验证第三方服务的身份，验证邮箱用户的身份，记录和管理认证Token，为资源服务器提供Token校验。场景：第三方网站借助用户的邮箱登录，并访问邮箱账户的基础信息，头像、名称等。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;139.25866480577&quot;&gt;
&lt;p&gt;本文源码：&lt;a href=&quot;https://github.com/cicadasmile/middle-ware-parent&quot; target=&quot;_blank&quot;&gt;GitHub·点这里&lt;/a&gt; || &lt;a href=&quot;https://gitee.com/cicadasmile/middle-ware-parent&quot; target=&quot;_blank&quot;&gt;GitEE·点这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1691717/202012/1691717-20201222000728407-710422319.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;授权服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;验证第三方服务的身份，验证邮箱用户的身份，记录和管理认证Token，为资源服务器提供Token校验。场景：第三方网站借助用户的邮箱登录，并访问邮箱账户的基础信息，头像、名称等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;资源服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三方服务通过邮箱账户登录后需要获取的一些信息，即理解为资源，存储邮箱账户的数据资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三方服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即借助邮箱用户的账户，快速登录第三个服务，免去繁杂的注册流程，有助于快速积累新用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交互流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三方服务给用户开放快速邮箱登录功能，引导用户调到邮箱认证服务，通过认证后返回身份令牌到第三方服务，第三方服务携带令牌访问邮箱的资源服务，获取一些基本的邮箱用户信息。&lt;/p&gt;

&lt;h2 id=&quot;1、案例结构&quot;&gt;1、案例结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1691717/202012/1691717-20201222000742811-1019875819.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心依赖&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.security.oauth&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-security-oauth2&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.3.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里有两个核心组件依赖：OAuth2组件和Security组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模块划分&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;auth-server：授权服务&lt;/li&gt;
&lt;li&gt;resource-server：资源服务器&lt;/li&gt;
&lt;li&gt;third-server：第三个服务&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;2、配置描述&quot;&gt;2、配置描述&lt;/h2&gt;
&lt;p&gt;【授权服务】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OAuth2配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里的配置管理的是第三方的授权流程和发放给第三方的身份证明ClientID和密码，实际的场景就是第三方借助邮箱账号登录，首先就是向邮箱管理方提供材料，获取访问邮箱服务的身份证明，然后才能对接开放服务，这种模式在第三方对接业务中很常见。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 模拟第三方授权配置
 */
@EnableAuthorizationServer
@Configuration
public class AuthConfig extends AuthorizationServerConfigurerAdapter {

    @Resource
    ClientDetailsService clientDetailsService;

    /**
     * 资源服务器校验Token
     */
    @Override
    public void configure(AuthorizationServerSecurityConfigurer security) {
        security.checkTokenAccess(&quot;permitAll()&quot;).allowFormAuthenticationForClients();
    }
    /**
     * 第三方客户端请求配置，和资源服务访问的配置，不设置默认都可以访问，提供默认回调地址
     */
    @Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
        clients.inMemory()
                .withClient(&quot;third01&quot;)
                .secret(new BCryptPasswordEncoder().encode(&quot;third01&quot;))
                .resourceIds(&quot;resource-01&quot;)
                .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;refresh_token&quot;)
                .scopes(&quot;all&quot;)
                .redirectUris(&quot;http://localhost:8082/notify.html&quot;);
    }
    /**
     * 配置访问端点
     */
    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
        endpoints.authorizationCodeServices(authorizationCodeServices()).tokenServices(tokenServices());
    }
    /**
     * 内存管理
     */
    @Bean
    AuthorizationCodeServices authorizationCodeServices() {
        return new InMemoryAuthorizationCodeServices();
    }
    /**
     * Token管理规则
     */
    @Bean
    AuthorizationServerTokenServices tokenServices() {
        DefaultTokenServices services = new DefaultTokenServices();
        services.setClientDetailsService(clientDetailsService);
        services.setSupportRefreshToken(true);
        services.setTokenStore(tokenStore());
        services.setAccessTokenValiditySeconds(3600);
        services.setRefreshTokenValiditySeconds(3600*7);
        return services;
    }
    @Bean
    TokenStore tokenStore() {
        return new InMemoryTokenStore();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通常需要数据库存储第三方信息，可以到第OAuth2开源项目中，获取表结构放到本地数据库中，然后这里换成数据源加载模式即可，简单的流程管理都在源码里写了SQL语句，数据源引入即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 模拟本地用户配置
 */
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    /**
     * 密码加密方式
     */
    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }
    /**
     * 内存中虚拟用户和角色
     */
    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser(&quot;user&quot;)
                .password(new BCryptPasswordEncoder().encode(&quot;123456&quot;))
                .roles(&quot;user&quot;);
    }
    /**
     * 表单登录
     */
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable().formLogin();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;基于这里的配置管理邮箱用户的认证流程，例如使用邮箱账号密码登录验证，判断授权是否成立，这里管理的是服务本地的邮箱账号，基于数据源存储数据在下面案例中都有。&lt;/p&gt;
&lt;p&gt;关于Spring框架中安全认证的相关的几个组件，在使用OAuth2之前可以先了解一下。&lt;/p&gt;
&lt;p&gt;【资源服务】&lt;/p&gt;
&lt;p&gt;主要功能有三块，配置第三方携带的Token身份令牌校验机制，即访问授权服务校验接口，这里是OAuth2自定义好的接口；配置resourceId资源服务的编号，用来控制第三个服务能访问的资源服务范围，属于大的权限点控制；模拟校验用户的Role角色，较精细的控制权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 资源服务管理配置
 */
@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {
    /**
     * Token令牌校验
     */
    @Bean
    RemoteTokenServices tokenServices() {
        RemoteTokenServices services = new RemoteTokenServices();
        services.setCheckTokenEndpointUrl(&quot;http://localhost:8080/oauth/check_token&quot;);
        services.setClientId(&quot;third01&quot;);
        services.setClientSecret(&quot;third01&quot;);
        return services;
    }
    /**
     * 服务资源ID配置
     */
    @Override
    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
        resources.resourceId(&quot;resource-01&quot;).tokenServices(tokenServices());
    }
    /**
     * 模拟用户权限规则
     */
    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers(&quot;/user/**&quot;).hasRole(&quot;user&quot;)
                .anyRequest().authenticated();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【第三方服务】&lt;/p&gt;
&lt;p&gt;主要提供两个流程的模拟：请求授权服务获取身份令牌；携带身份令牌请求资源服务获取数据。这里则是授权码回调接口的处理方式。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Controller
public class NotifyController {

    private static final Logger LOG = LoggerFactory.getLogger(NotifyController.class);

    @Resource
    private RestTemplate restTemplate;

    @GetMapping(&quot;/notify.html&quot;)
    public String notify(String code, Model model) {
        if (code != null) {
            MultiValueMap&amp;lt;String, String&amp;gt; map = new LinkedMultiValueMap&amp;lt;&amp;gt;();
            map.add(&quot;code&quot;, code);
            map.add(&quot;client_id&quot;, &quot;third01&quot;);
            map.add(&quot;client_secret&quot;, &quot;third01&quot;);
            map.add(&quot;redirect_uri&quot;, &quot;http://localhost:8082/notify.html&quot;);
            map.add(&quot;grant_type&quot;, &quot;authorization_code&quot;);
            Map&amp;lt;String,String&amp;gt; resp = restTemplate.postForObject(&quot;http://localhost:8080/oauth/token&quot;, map, Map.class);
            String accessToken = resp.get(&quot;access_token&quot;);
            LOG.info(&quot;身份令牌：{}&quot;,accessToken);
            HttpHeaders headers = new HttpHeaders();
            headers.add(&quot;Authorization&quot;, &quot;Bearer &quot; + accessToken);
            HttpEntity&amp;lt;Object&amp;gt; httpEntity = new HttpEntity&amp;lt;&amp;gt;(headers);
            ResponseEntity&amp;lt;String&amp;gt; entity = restTemplate.exchange(&quot;http://localhost:8081/user/resource&quot;, HttpMethod.GET, httpEntity, String.class);
            model.addAttribute(&quot;notifyMsg&quot;, entity.getBody());
        }
        return &quot;notify&quot;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1691717/202012/1691717-20201222000757086-1741856742.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上述测试流程，对比常见的第三方登录机制，理解OAuth2的授权码模式。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;GitHub·地址
https://github.com/cicadasmile/middle-ware-parent
GitEE·地址
https://gitee.com/cicadasmile/middle-ware-parent
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;推荐阅读：编程体系整理&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 22 Dec 2020 00:06:00 +0000</pubDate>
<dc:creator>知了一笑</dc:creator>
<og:description>验证第三方服务的身份，验证邮箱用户的身份，记录和管理认证Token，为资源服务器提供Token校验。场景：第三方网站借助用户的邮箱登录，并访问邮箱账户的基础信息，头像、名称等。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cicada-smile/p/14170971.html</dc:identifier>
</item>
<item>
<title>DRF终极封装ViewSet和Router附教程PDF源码 - dongfanger</title>
<link>http://www.cnblogs.com/df888/p/14169059.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/df888/p/14169059.html</guid>
<description>&lt;p&gt;在DRF官方教程的学习过程中，一个很明显的感受是框架在不断地进行封装，我们自己写框架/工具/脚本/平台也可以模仿模仿，先完成底层代码，再做多层封装，让使用者很容易就上手操作。本文是教程的最后一篇，介绍ViewSets和Routers。&lt;/p&gt;

&lt;p&gt;先看看之前在给User模型创建Endpoint时，我们新增的2个视图：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class UserList(generics.ListAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer


class UserDetail(generics.RetrieveAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;DRF提供了&lt;code&gt;rest_framework.viewsets&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202012/1629545-20201221173538252-709937080.png&quot; alt=&quot;image-20201221135513323&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以把它们合成一个视图。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;set是集合的意思，ViewSets就是视图集合。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们先使用&lt;code&gt;ReadOnlyModelViewSet&lt;/code&gt;把&lt;code&gt;UserList&lt;/code&gt;和&lt;code&gt;UserDetail&lt;/code&gt;视图合并成一个&lt;code&gt;UserViewSet&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from rest_framework import viewsets

class UserViewSet(viewsets.ReadOnlyModelViewSet):
    &quot;&quot;&quot;
    This viewset automatically provides `list` and `retrieve` actions.
    &quot;&quot;&quot;
    queryset = User.objects.all()
    serializer_class = UserSerializer
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;viewsets.ReadOnlyModelViewSet&lt;/code&gt;是只读视图集合，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class ReadOnlyModelViewSet(mixins.RetrieveModelMixin,
                           mixins.ListModelMixin,
                           GenericViewSet):
    &quot;&quot;&quot;
    A viewset that provides default `list()` and `retrieve()` actions.
    &quot;&quot;&quot;
    pass
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它继承了&lt;code&gt;mixins.RetrieveModelMixin&lt;/code&gt;、&lt;code&gt;mixins.ListModelMixin&lt;/code&gt;和&lt;code&gt;GenericViewSet&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mixins.RetrieveModelMixin&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class RetrieveModelMixin:
    &quot;&quot;&quot;
    Retrieve a model instance.
    &quot;&quot;&quot;
    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response(serializer.data)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mixins.ListModelMixin&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class ListModelMixin:
    &quot;&quot;&quot;
    List a queryset.
    &quot;&quot;&quot;
    def list(self, request, *args, **kwargs):
        queryset = self.filter_queryset(self.get_queryset())

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;viewsets.GenericViewSet&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class GenericViewSet(ViewSetMixin, generics.GenericAPIView):
    &quot;&quot;&quot;
    The GenericViewSet class does not provide any actions by default,
    but does include the base set of generic view behavior, such as
    the `get_object` and `get_queryset` methods.
    &quot;&quot;&quot;
    pass
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从源码可以看出，它提供了&lt;code&gt;list()&lt;/code&gt;和&lt;code&gt;retrieve()&lt;/code&gt;2个方法，正好对应&lt;code&gt;UserList&lt;/code&gt;和&lt;code&gt;UserDetail&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;再使用&lt;code&gt;ModelViewSet&lt;/code&gt;把&lt;code&gt;SnippetList&lt;/code&gt;、&lt;code&gt;SnippetDetail&lt;/code&gt;和&lt;code&gt;SnippetHighlight&lt;/code&gt;视图合并成一个&lt;code&gt;SnippetViewSet&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework import permissions

class SnippetViewSet(viewsets.ModelViewSet):
    &quot;&quot;&quot;
    This viewset automatically provides `list`, `create`, `retrieve`,
    `update` and `destroy` actions.

    Additionally we also provide an extra `highlight` action.
    &quot;&quot;&quot;
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly,
                          IsOwnerOrReadOnly]

    @action(detail=True, renderer_classes=[renderers.StaticHTMLRenderer])
    def highlight(self, request, *args, **kwargs):
        snippet = self.get_object()
        return Response(snippet.highlighted)

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@action&lt;/code&gt;装饰器用来创建除了&lt;code&gt;create&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt;以外的action，默认为&lt;code&gt;GET&lt;/code&gt;请求，如果想改为&lt;code&gt;POST&lt;/code&gt;请求，可以添加参数&lt;code&gt;methods&lt;/code&gt;，它的源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;def action(methods=None, detail=None, url_path=None, url_name=None, **kwargs):
    &quot;&quot;&quot;
    Mark a ViewSet method as a routable action.

    `@action`-decorated functions will be endowed with a `mapping` property,
    a `MethodMapper` that can be used to add additional method-based behaviors
    on the routed action.

    :param methods: A list of HTTP method names this action responds to.
                    Defaults to GET only.
    :param detail: Required. Determines whether this action applies to
                   instance/detail requests or collection/list requests.
    :param url_path: Define the URL segment for this action. Defaults to the
                     name of the method decorated.
    :param url_name: Define the internal (`reverse`) URL name for this action.
                     Defaults to the name of the method decorated with underscores
                     replaced with dashes.
    :param kwargs: Additional properties to set on the view.  This can be used
                   to override viewset-level *_classes settings, equivalent to
                   how the `@renderer_classes` etc. decorators work for function-
                   based API views.
    &quot;&quot;&quot;
    methods = ['get'] if (methods is None) else methods
    methods = [method.lower() for method in methods]

    assert detail is not None, (
        &quot;@action() missing required argument: 'detail'&quot;
    )

    # name and suffix are mutually exclusive
    if 'name' in kwargs and 'suffix' in kwargs:
        raise TypeError(&quot;`name` and `suffix` are mutually exclusive arguments.&quot;)

    def decorator(func):
        func.mapping = MethodMapper(func, methods)

        func.detail = detail
        func.url_path = url_path if url_path else func.__name__
        func.url_name = url_name if url_name else func.__name__.replace('_', '-')

        # These kwargs will end up being passed to `ViewSet.as_view()` within
        # the router, which eventually delegates to Django's CBV `View`,
        # which assigns them as instance attributes for each request.
        func.kwargs = kwargs

        # Set descriptive arguments for viewsets
        if 'name' not in kwargs and 'suffix' not in kwargs:
            func.kwargs['name'] = pretty_name(func.__name__)
        func.kwargs['description'] = func.__doc__ or None

        return func
    return decorator
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;viewsets.ModelViewSet&lt;/code&gt;包含了增删改查视图集合，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class ModelViewSet(mixins.CreateModelMixin,
                   mixins.RetrieveModelMixin,
                   mixins.UpdateModelMixin,
                   mixins.DestroyModelMixin,
                   mixins.ListModelMixin,
                   GenericViewSet):
    &quot;&quot;&quot;
    A viewset that provides default `create()`, `retrieve()`, `update()`,
    `partial_update()`, `destroy()` and `list()` actions.
    &quot;&quot;&quot;
    pass
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它继承了&lt;code&gt;mixins.CreateModelMixin&lt;/code&gt;、&lt;code&gt;mixins.RetrieveModelMixin&lt;/code&gt;、&lt;code&gt;mixins.UpdateModelMixin&lt;/code&gt;、&lt;code&gt;mixins.DestroyModelMixin&lt;/code&gt;、&lt;code&gt;mixins.ListModelMixin&lt;/code&gt;、&lt;code&gt;GenericViewSet&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;其中&lt;code&gt;mixins.RetrieveModelMixin&lt;/code&gt;、&lt;code&gt;mixins.ListModelMixin&lt;/code&gt;和&lt;code&gt;GenericViewSet&lt;/code&gt;在前面已经介绍过了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;mixins.CreateModelMixin&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class CreateModelMixin:
    &quot;&quot;&quot;
    Create a model instance.
    &quot;&quot;&quot;
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def perform_create(self, serializer):
        serializer.save()

    def get_success_headers(self, data):
        try:
            return {'Location': str(data[api_settings.URL_FIELD_NAME])}
        except (TypeError, KeyError):
            return {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mixins.UpdateModelMixin&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class UpdateModelMixin:
    &quot;&quot;&quot;
    Update a model instance.
    &quot;&quot;&quot;
    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)

        if getattr(instance, '_prefetched_objects_cache', None):
            # If 'prefetch_related' has been applied to a queryset, we need to
            # forcibly invalidate the prefetch cache on the instance.
            instance._prefetched_objects_cache = {}

        return Response(serializer.data)

    def perform_update(self, serializer):
        serializer.save()

    def partial_update(self, request, *args, **kwargs):
        kwargs['partial'] = True
        return self.update(request, *args, **kwargs)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mixins.DestroyModelMixin&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class DestroyModelMixin:
    &quot;&quot;&quot;
    Destroy a model instance.
    &quot;&quot;&quot;
    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        self.perform_destroy(instance)
        return Response(status=status.HTTP_204_NO_CONTENT)

    def perform_destroy(self, instance):
        instance.delete()
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;视图改为&lt;code&gt;ViewSet&lt;/code&gt;后，需要同时修改URLConf，编辑&lt;code&gt;snippets/urls.py&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from snippets.views import SnippetViewSet, UserViewSet, api_root
from rest_framework import renderers

snippet_list = SnippetViewSet.as_view({
    'get': 'list',
    'post': 'create'
})
snippet_detail = SnippetViewSet.as_view({
    'get': 'retrieve',
    'put': 'update',
    'patch': 'partial_update',
    'delete': 'destroy'
})
snippet_highlight = SnippetViewSet.as_view({
    'get': 'highlight'
}, renderer_classes=[renderers.StaticHTMLRenderer])
user_list = UserViewSet.as_view({
    'get': 'list'
})
user_detail = UserViewSet.as_view({
    'get': 'retrieve'
})


urlpatterns = format_suffix_patterns([
    path('', api_root),
    path('snippets/', snippet_list, name='snippet-list'),
    path('snippets/&amp;lt;int:pk&amp;gt;/', snippet_detail, name='snippet-detail'),
    path('snippets/&amp;lt;int:pk&amp;gt;/highlight/', snippet_highlight, name='snippet-highlight'),
    path('users/', user_list, name='user-list'),
    path('users/&amp;lt;int:pk&amp;gt;/', user_detail, name='user-detail')
])
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，&lt;code&gt;ViewSet&lt;/code&gt;需要绑定http methods和action，以指定请求方法对应的处理动作。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;ViewSet&lt;/code&gt;的一大好处是可以自动配置路由，DRF提供了&lt;code&gt;rest_framework.routers&lt;/code&gt;：&lt;/p&gt;
&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202012/1629545-20201221173538531-1904169567.png&quot; alt=&quot;image-20201221160635729&quot;/&gt;&lt;p&gt;我们重新编写&lt;code&gt;snippets/urls.py&lt;/code&gt;看看是什么效果：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from django.urls import path, include
from rest_framework.routers import DefaultRouter
from snippets import views

# Create a router and register our viewsets with it.
router = DefaultRouter()
router.register(r'snippets', views.SnippetViewSet)
router.register(r'users', views.UserViewSet)

# The API URLs are now determined automatically by the router.
urlpatterns = [
    path('', include(router.urls)),
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;真是厉害！这封装简直高级！而且&lt;code&gt;DefaultRouter&lt;/code&gt;提供了API根目录的Endpoint，我们甚至可以把&lt;code&gt;views.py&lt;/code&gt;中的&lt;code&gt;api_root&lt;/code&gt;也删了。&lt;/p&gt;

&lt;p&gt;本文是官方教程学习笔记的最后一篇了。可以从教程中了解到从函数视图到类视图，从View到ViewSet是如何封装起来的，实际运用中并不一定全部都得用类视图和ViewSet，还是需要平衡选择。后续还会有DRF系列的文章输出，不过作为阶段性成果，我把这7篇文章导成了PDF，和最后一版的源码，打包一起上传了，需要的话，可以在公众号后台回复【drf】获取：&lt;/p&gt;
&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202012/1629545-20201221173538824-164066542.png&quot; alt=&quot;image-20201221171351224&quot;/&gt;&lt;blockquote readability=&quot;0.93023255813953&quot;&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/&quot; target=&quot;_blank&quot;&gt;https://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 21 Dec 2020 23:35:00 +0000</pubDate>
<dc:creator>dongfanger</dc:creator>
<og:description>在DRF官方教程的学习过程中，一个很明显的感受是框架在不断地进行封装，我们自己写框架/工具/脚本/平台也可以模仿模仿，先完成底层代码，再做多层封装，让使用者很容易就上手操作。本文是教程的最后一篇，介绍</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/df888/p/14169059.html</dc:identifier>
</item>
<item>
<title>容器编排系统k8s之Ingress资源 - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/14167581.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/14167581.html</guid>
<description>&lt;p&gt;　　前文我们了解了k8s上的service资源的相关话题，回顾请参考：&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/14161950.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/14161950.html&lt;/a&gt;；今天我们来了解下k8s上的Ingress资源的相关话题；&lt;/p&gt;
&lt;p&gt;　　我们知道在k8s上service是用来解决Pod访问问题，它是通过kube-proxy在每个节点上创建iptables规则或ipvs规则，在用户请求某个pod时，用户的请求会被其service规则所捕获，从而实现访问对应pod；对于service来讲，用户请求直接在传输层就被捕获转发，效率很高效，但这同时也引入了一个新问题；比如我们运行的pod对外客户端访问需要https通信，如果使用service这种4层调度，那就意味着每个pod上我们要配置证书，这很显然不是我们想要做的；那有没有什么办法做到在用户访问pod对应的service时使用https，而对应pod里又不用https协议呢？答案是有的；比如我们可以使用nginx来做https会话卸载器；我们只需要在代理上配置证书即可；又比如我们在k8s上运行了各种各样的pod，这些pod的功能每个都不一样，有点是专门处理用户认证的，有点是专门处理站点主页的，有点专门处理支付的等等，而这些pod对外都是提供一个独有的url，那么这些pod需要怎么才能被集群外部访问到呢？我们知道对于一个站点来讲，如果后端有多个server同时提供一种服务，我们可以把这些同功能的server定义成一个组，然后使用nginx代理将不同功能url的访问代理到不同组上即可；这样一来解决了后端多server被负载访问的问题；那么对于k8s上这种同功能的pod怎么归并成一个组呢？用户访问不同url怎么调度到不同的组上呢？很显然要想实现这些功能，在k8s上应该有一个类似nginx一样的代理存在；这个代理就叫做ingress 控制器；ingress 控制器和k8s上的其他控制不一样，ingress控制器并不能直接运行为kube-controller-manager的一部分，它类似k8s集群上的coredns，需要在集群上单独部署，本质上就是一个pod，我们可以使用k8s上的ds或deploy控制器来创建它；ingress controller pod的作用主要是引入集群外部流量，并实时监控着apiserver上ingress资源的变动，并将其ingress中定义的规则转化为对应ingress控制器对应应用程序的专有配置，然后动态的重载或重启对应守护进程来使其配置文件生效；在k8s上ingress是一种标准资源，它本质上就是我们定义的基于dns名称（host）或url路径把请求转发至指定service资源的规则；简单讲ingress就是我们用来定义代理的配置所创建的资源；ingress控制器就是把对应ingress规则转换为对应ingress控制器中应用程序的专有配置，然后重启或重载对应配置文件使其生效的组件；&lt;/p&gt;
&lt;p&gt;　　ingress和ingress controller pod的关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221135416276-273896918.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：如上图所示，ingress就是ingress 控制器pod的代理规则；用户请求某个后端pod所提供的服务时，首先会通过ingress controller pod把流量引入到集群内部，然后ingress controller pod根据ingress定义的规则，把对应ingress规则转化为对应ingress controller pod实现的对应应用的配置（ingress controller 可以由任何具有七层反向代理功能的服务实现，比如nginx,haproxy等等）然后再适配用户请求，把对应请求反代到对应service上；而对于pod的选择上，ingress控制器可以基于对应service中的标签选择器，直接同pod直接通信，无须通过service对象api的再次转发，从而省去了用户请求到kube-proxy实现的代理开销（本质上ingress controller 也是运行为一个pod，和其他pod在同一网段中）；&lt;/p&gt;
&lt;p&gt;　　ingress controller部署&lt;/p&gt;
&lt;p&gt;　　在k8s上ingress controller的实现有很多，比如基于nginx的，基于haproxy的等等，这里以nginx为例；&lt;/p&gt;
&lt;p&gt;　　下载ingress-nginx包&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
 wget https://github.com/kubernetes/ingress-nginx/archive/nginx-0.28.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　解压包，找到对应的部署清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# ll
total 92144
-rw------- 1 root root 65586688 Dec  8 15:16 flannel-v0.13.1-rc1.tar
drwxr-xr-x 2 root root     4096 Dec 21 21:04 manifests
-rw-r--r-- 1 root root 28760559 Dec 21 21:02 nginx-0.28.0.tar.gz
[root@master01 ~]# tar xf nginx-0.28.0.tar.gz 
[root@master01 ~]# ls
flannel-v0.13.1-rc1.tar  ingress-nginx-nginx-0.28.0  manifests  nginx-0.28.0.tar.gz
[root@master01 ~]# cd ingress-nginx-nginx-0.28.0/
[root@master01 ingress-nginx-nginx-0.28.0]# ls
build         code-of-conduct.md  docs    hack      labels.yaml  mkdocs.yml      README.md              SECURITY_CONTACTS  version
Changelog.md  CONTRIBUTING.md     go.mod  images    LICENSE      OWNERS          requirements-docs.txt  test
cmd           deploy              go.sum  internal  Makefile     OWNERS_ALIASES  rootfs                 vendor
[root@master01 ingress-nginx-nginx-0.28.0]# cd deploy/
[root@master01 deploy]# ls
aws        cloud-generic  grafana   prometheus  static                       with-validating-webhook.yaml.tpl
baremetal  cluster-wide   minikube  README.md   validating-webhook.yaml.tpl
[root@master01 deploy]# cd static/
[root@master01 static]# ls
configmap.yaml  mandatory.yaml  namespace.yaml  provider  rbac.yaml  with-rbac.yaml
[root@master01 static]# pwd
/root/ingress-nginx-nginx-0.28.0/deploy/static
[root@master01 static]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：资源配置清单在ingress-nginx-nginx-0.28.0/deploy/static下，名为mandatory.yaml；&lt;/p&gt;
&lt;p&gt;　　资源配置清单内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_a5447618-483b-4b7e-8945-354a2dd77476&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_a5447618-483b-4b7e-8945-354a2dd77476&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a5447618-483b-4b7e-8945-354a2dd77476&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;apiVersion: v1
kind: Namespace
metadata:
  name: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx&lt;/span&gt;-&lt;span&gt;configuration
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp&lt;/span&gt;-&lt;span&gt;services
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp&lt;/span&gt;-&lt;span&gt;services
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: ClusterRole
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;clusterrole
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
rules:
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
      &lt;/span&gt;-&lt;span&gt; endpoints
      &lt;/span&gt;-&lt;span&gt; nodes
      &lt;/span&gt;-&lt;span&gt; pods
      &lt;/span&gt;-&lt;span&gt; secrets
    verbs:
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; nodes
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; services
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; events
    verbs:
      &lt;/span&gt;-&lt;span&gt; create
      &lt;/span&gt;- &lt;span&gt;patch&lt;/span&gt;
  -&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
      - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;networking.k8s.io&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; ingresses
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
      - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;networking.k8s.io&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;- ingresses/&lt;span&gt;status
    verbs:
      &lt;/span&gt;-&lt;span&gt; update

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: Role
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;role
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
rules:
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
      &lt;/span&gt;-&lt;span&gt; pods
      &lt;/span&gt;-&lt;span&gt; secrets
      &lt;/span&gt;-&lt;span&gt; namespaces
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
    resourceNames:
      # Defaults to &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;election-id&amp;gt;-&amp;lt;ingress-class&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      # Here: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;ingress-controller-leader&amp;gt;-&amp;lt;nginx&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      # This has to be adapted &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; you change either parameter
      # when launching the nginx&lt;/span&gt;-ingress-&lt;span&gt;controller.
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ingress-controller-leader-nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; update
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
    verbs:
      &lt;/span&gt;-&lt;span&gt; create
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; endpoints
    verbs:
      &lt;/span&gt;-&lt;span&gt; get

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: RoleBinding
metadata:
  name: nginx&lt;/span&gt;-ingress-role-nisa-&lt;span&gt;binding
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;role
subjects:
  &lt;/span&gt;-&lt;span&gt; kind: ServiceAccount
    name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
    namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx&lt;/span&gt;-ingress-clusterrole-nisa-&lt;span&gt;binding
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;clusterrole
subjects:
  &lt;/span&gt;-&lt;span&gt; kind: ServiceAccount
    name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
    namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;

apiVersion: apps&lt;/span&gt;/&lt;span&gt;v1
kind: Deployment
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;controller
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
spec:
  replicas: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
  selector:
    matchLabels:
      app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
      app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
  template:
    metadata:
      labels:
        app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
        app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
      annotations:
        prometheus.io&lt;/span&gt;/port: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        prometheus.io&lt;/span&gt;/scrape: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    spec:
      # &lt;/span&gt;&lt;span&gt;wait&lt;/span&gt; up to five minutes &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the drain of connections
      terminationGracePeriodSeconds: &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;
      serviceAccountName: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
      nodeSelector:
        kubernetes.io&lt;/span&gt;/&lt;span&gt;os: linux
      containers:
        &lt;/span&gt;- name: nginx-ingress-&lt;span&gt;controller
          image: quay.io&lt;/span&gt;/kubernetes-ingress-controller/nginx-ingress-controller:&lt;span&gt;0.28&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
          args:
            &lt;/span&gt;- /nginx-ingress-&lt;span&gt;controller
            &lt;/span&gt;- --configmap=$(POD_NAMESPACE)/nginx-&lt;span&gt;configuration
            &lt;/span&gt;- --tcp-services-configmap=$(POD_NAMESPACE)/tcp-&lt;span&gt;services
            &lt;/span&gt;- --udp-services-configmap=$(POD_NAMESPACE)/udp-&lt;span&gt;services
            &lt;/span&gt;- --publish-service=$(POD_NAMESPACE)/ingress-&lt;span&gt;nginx
            &lt;/span&gt;- --annotations-prefix=&lt;span&gt;nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            capabilities:
              drop:
                &lt;/span&gt;-&lt;span&gt; ALL
              add:
                &lt;/span&gt;-&lt;span&gt; NET_BIND_SERVICE
            # www&lt;/span&gt;-data -&amp;gt; &lt;span&gt;101&lt;/span&gt;&lt;span&gt;
            runAsUser: &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;
          &lt;span&gt;env&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;-&lt;span&gt; name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            &lt;/span&gt;-&lt;span&gt; name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            &lt;/span&gt;-&lt;span&gt; name: http
              containerPort: &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
              protocol: TCP
            &lt;/span&gt;-&lt;span&gt; name: https
              containerPort: &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;
              protocol: TCP
          livenessProbe:
            failureThreshold: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
            httpGet:
              path: &lt;/span&gt;/&lt;span&gt;healthz
              port: &lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;
              scheme: HTTP
            initialDelaySeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            periodSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            successThreshold: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            timeoutSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          readinessProbe:
            failureThreshold: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
            httpGet:
              path: &lt;/span&gt;/&lt;span&gt;healthz
              port: &lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;
              scheme: HTTP
            periodSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            successThreshold: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            timeoutSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          lifecycle:
            preStop:
              exec:
                command:
                  &lt;/span&gt;- /&lt;span&gt;wait&lt;/span&gt;-&lt;span&gt;shutdown

&lt;/span&gt;---&lt;span&gt;

apiVersion: v1
kind: LimitRange
metadata:
  name: ingress&lt;/span&gt;-&lt;span&gt;nginx
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
spec:
  limits:
  &lt;/span&gt;-&lt;span&gt; default:
    min:
      memory: 90Mi
      cpu: 100m
    type: Container&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上清单主要定义了一个名称ingress-nginx的名称空间，在其名称空间下创建了几个configmap，最重要的是用deployment创建了一个ingress-nginx pod；&lt;/p&gt;
&lt;p&gt;　　这里说一下，对于ingress-nginx控制器，它本质还是运行为一个pod，对于pod来说要想接入外部访问流量到集群内部来，有三种方式，一种是使用NodePort类型的service；第二种是使用ds或deploy控制器，在定义pod模板时使用hostPort把pod端口映射到宿主机方式；第三种是定义pod模板时使用hostNetwork，直接共享宿主机网络名称空间；如下所示&lt;/p&gt;
&lt;p&gt;　　使用专有NodePort service来引入外部流量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221214551656-1059898435.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：这种使用deploy控制管理ingress controller pod，如果在pod模板中没有暴露端口，则需要创建一个service资源来暴露ingress controller pod的端口来引入外部流量到集群内部；&lt;/p&gt;
&lt;p&gt;　　使用ds控制器管理ingress controller pod在pod模板中使用hostPort方式暴露端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221215009790-437418009.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：使用ds控制器能够保证每个节点上只运行一个ingress controller,所以我们可以把对应ingress controller pod端端口通过端口映射的方式映射到宿主机上的某一固定端口；&lt;/p&gt;
&lt;p&gt;　　使用ds控制器在pod模板中使用hostNetwork方式共享宿主机网络名称空间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221215253129-1233527971.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：共享宿主机网络名称空间，也必须使用ds控制器来确保对应每个节点上只能运行一个ingress controller pod，这样才能确保每个ingress controller pod能够正常把端口暴露出去，以供集群外部客户端访问；&lt;/p&gt;
&lt;p&gt;　　选择上述其中一种方式暴露ingress controller pod的端口即可；如果选择使用ds控制器来暴露端口，我们就需要修改其对应资源配置清单中的pod模板，如下所示&lt;/p&gt;
&lt;p&gt;　　使用ds控制器来管理ingress controller pod在pod模板中使用hostPort方式暴露端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_fd3f8039-2eb0-43a5-8902-8487f926adb4&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_fd3f8039-2eb0-43a5-8902-8487f926adb4&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd3f8039-2eb0-43a5-8902-8487f926adb4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;apiVersion: v1
kind: Namespace
metadata:
  name: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx&lt;/span&gt;-&lt;span&gt;configuration
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp&lt;/span&gt;-&lt;span&gt;services
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp&lt;/span&gt;-&lt;span&gt;services
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: ClusterRole
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;clusterrole
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
rules:
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
      &lt;/span&gt;-&lt;span&gt; endpoints
      &lt;/span&gt;-&lt;span&gt; nodes
      &lt;/span&gt;-&lt;span&gt; pods
      &lt;/span&gt;-&lt;span&gt; secrets
    verbs:
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; nodes
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; services
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; events
    verbs:
      &lt;/span&gt;-&lt;span&gt; create
      &lt;/span&gt;- &lt;span&gt;patch&lt;/span&gt;
  -&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
      - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;networking.k8s.io&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; ingresses
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
      - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;networking.k8s.io&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;- ingresses/&lt;span&gt;status
    verbs:
      &lt;/span&gt;-&lt;span&gt; update

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: Role
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;role
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
rules:
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
      &lt;/span&gt;-&lt;span&gt; pods
      &lt;/span&gt;-&lt;span&gt; secrets
      &lt;/span&gt;-&lt;span&gt; namespaces
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
    resourceNames:
      # Defaults to &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;election-id&amp;gt;-&amp;lt;ingress-class&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      # Here: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;ingress-controller-leader&amp;gt;-&amp;lt;nginx&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      # This has to be adapted &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; you change either parameter
      # when launching the nginx&lt;/span&gt;-ingress-&lt;span&gt;controller.
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ingress-controller-leader-nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; update
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
    verbs:
      &lt;/span&gt;-&lt;span&gt; create
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; endpoints
    verbs:
      &lt;/span&gt;-&lt;span&gt; get

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: RoleBinding
metadata:
  name: nginx&lt;/span&gt;-ingress-role-nisa-&lt;span&gt;binding
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;role
subjects:
  &lt;/span&gt;-&lt;span&gt; kind: ServiceAccount
    name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
    namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx&lt;/span&gt;-ingress-clusterrole-nisa-&lt;span&gt;binding
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;clusterrole
subjects:
  &lt;/span&gt;-&lt;span&gt; kind: ServiceAccount
    name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
    namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;

apiVersion: apps&lt;/span&gt;/&lt;span&gt;v1
kind: DaemonSet
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;controller
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
      app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
  template:
    metadata:
      labels:
        app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
        app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
      annotations:
        prometheus.io&lt;/span&gt;/port: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        prometheus.io&lt;/span&gt;/scrape: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    spec:
      # &lt;/span&gt;&lt;span&gt;wait&lt;/span&gt; up to five minutes &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the drain of connections
      terminationGracePeriodSeconds: &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;
      serviceAccountName: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
      nodeSelector:
        kubernetes.io&lt;/span&gt;/&lt;span&gt;os: linux
      containers:
        &lt;/span&gt;- name: nginx-ingress-&lt;span&gt;controller
          image: quay.io&lt;/span&gt;/kubernetes-ingress-controller/nginx-ingress-controller:&lt;span&gt;0.28&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
          args:
            &lt;/span&gt;- /nginx-ingress-&lt;span&gt;controller
            &lt;/span&gt;- --configmap=$(POD_NAMESPACE)/nginx-&lt;span&gt;configuration
            &lt;/span&gt;- --tcp-services-configmap=$(POD_NAMESPACE)/tcp-&lt;span&gt;services
            &lt;/span&gt;- --udp-services-configmap=$(POD_NAMESPACE)/udp-&lt;span&gt;services
            &lt;/span&gt;- --publish-service=$(POD_NAMESPACE)/ingress-&lt;span&gt;nginx
            &lt;/span&gt;- --annotations-prefix=&lt;span&gt;nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            capabilities:
              drop:
                &lt;/span&gt;-&lt;span&gt; ALL
              add:
                &lt;/span&gt;-&lt;span&gt; NET_BIND_SERVICE
            # www&lt;/span&gt;-data -&amp;gt; &lt;span&gt;101&lt;/span&gt;&lt;span&gt;
            runAsUser: &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;
          &lt;span&gt;env&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;-&lt;span&gt; name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            &lt;/span&gt;-&lt;span&gt; name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            &lt;/span&gt;-&lt;span&gt; name: http
              containerPort: &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
              hostPort: &lt;/span&gt;&lt;span&gt;30080&lt;/span&gt;&lt;span&gt;
              protocol: TCP
            &lt;/span&gt;-&lt;span&gt; name: https
              containerPort: &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;
              hostPort: &lt;/span&gt;&lt;span&gt;30443&lt;/span&gt;&lt;span&gt;
              protocol: TCP
          livenessProbe:
            failureThreshold: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
            httpGet:
              path: &lt;/span&gt;/&lt;span&gt;healthz
              port: &lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;
              scheme: HTTP
            initialDelaySeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            periodSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            successThreshold: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            timeoutSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          readinessProbe:
            failureThreshold: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
            httpGet:
              path: &lt;/span&gt;/&lt;span&gt;healthz
              port: &lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;
              scheme: HTTP
            periodSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            successThreshold: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            timeoutSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          lifecycle:
            preStop:
              exec:
                command:
                  &lt;/span&gt;- /&lt;span&gt;wait&lt;/span&gt;-&lt;span&gt;shutdown

&lt;/span&gt;---&lt;span&gt;

apiVersion: v1
kind: LimitRange
metadata:
  name: ingress&lt;/span&gt;-&lt;span&gt;nginx
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
spec:
  limits:
  &lt;/span&gt;-&lt;span&gt; default:
    min:
      memory: 90Mi
      cpu: 100m
    type: Container&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　提示：只需把对应控制器类型更改为DaemonSet，在pod模板中spec字段下把replicas去掉；在spec.template.spec.containers.ports字段中加上nodePort字段指定要把容器的端口映射到宿主机上某个端口；如果暴露的端口是非标准端口，在对应k8s集群外部我们还需要部署反代，比如使用nginx，haproxy,lvs；&lt;/p&gt;
&lt;p&gt;　　使用ds控制器管理ingress controller pod在ds控制器资源配置中使用hostNetwork&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_2c2e4944-56d2-49d9-874c-ff5b4a0efb10&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_2c2e4944-56d2-49d9-874c-ff5b4a0efb10&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2c2e4944-56d2-49d9-874c-ff5b4a0efb10&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;apiVersion: v1
kind: Namespace
metadata:
  name: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx&lt;/span&gt;-&lt;span&gt;configuration
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp&lt;/span&gt;-&lt;span&gt;services
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp&lt;/span&gt;-&lt;span&gt;services
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: ClusterRole
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;clusterrole
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
rules:
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
      &lt;/span&gt;-&lt;span&gt; endpoints
      &lt;/span&gt;-&lt;span&gt; nodes
      &lt;/span&gt;-&lt;span&gt; pods
      &lt;/span&gt;-&lt;span&gt; secrets
    verbs:
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; nodes
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; services
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; events
    verbs:
      &lt;/span&gt;-&lt;span&gt; create
      &lt;/span&gt;- &lt;span&gt;patch&lt;/span&gt;
  -&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
      - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;networking.k8s.io&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; ingresses
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; list
      &lt;/span&gt;-&lt;span&gt; watch
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
      - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;networking.k8s.io&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;- ingresses/&lt;span&gt;status
    verbs:
      &lt;/span&gt;-&lt;span&gt; update

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: Role
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;role
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
rules:
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
      &lt;/span&gt;-&lt;span&gt; pods
      &lt;/span&gt;-&lt;span&gt; secrets
      &lt;/span&gt;-&lt;span&gt; namespaces
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
    resourceNames:
      # Defaults to &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;election-id&amp;gt;-&amp;lt;ingress-class&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      # Here: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;ingress-controller-leader&amp;gt;-&amp;lt;nginx&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      # This has to be adapted &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; you change either parameter
      # when launching the nginx&lt;/span&gt;-ingress-&lt;span&gt;controller.
      &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ingress-controller-leader-nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    verbs:
      &lt;/span&gt;-&lt;span&gt; get
      &lt;/span&gt;-&lt;span&gt; update
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; configmaps
    verbs:
      &lt;/span&gt;-&lt;span&gt; create
  &lt;/span&gt;-&lt;span&gt; apiGroups:
      &lt;/span&gt;- &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    resources:
      &lt;/span&gt;-&lt;span&gt; endpoints
    verbs:
      &lt;/span&gt;-&lt;span&gt; get

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: RoleBinding
metadata:
  name: nginx&lt;/span&gt;-ingress-role-nisa-&lt;span&gt;binding
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;role
subjects:
  &lt;/span&gt;-&lt;span&gt; kind: ServiceAccount
    name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
    namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;
apiVersion: rbac.authorization.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx&lt;/span&gt;-ingress-clusterrole-nisa-&lt;span&gt;binding
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;clusterrole
subjects:
  &lt;/span&gt;-&lt;span&gt; kind: ServiceAccount
    name: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
    namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx

&lt;/span&gt;---&lt;span&gt;

apiVersion: apps&lt;/span&gt;/&lt;span&gt;v1
kind: DaemonSet
metadata:
  name: nginx&lt;/span&gt;-ingress-&lt;span&gt;controller
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
      app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
  template:
    metadata:
      labels:
        app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
        app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
      annotations:
        prometheus.io&lt;/span&gt;/port: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        prometheus.io&lt;/span&gt;/scrape: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    spec:
      # &lt;/span&gt;&lt;span&gt;wait&lt;/span&gt; up to five minutes &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the drain of connections
      terminationGracePeriodSeconds: &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;
      serviceAccountName: nginx&lt;/span&gt;-ingress-&lt;span&gt;serviceaccount
      nodeSelector:
        kubernetes.io&lt;/span&gt;/&lt;span&gt;os: linux
      hostNetwork: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
      containers:
        &lt;/span&gt;- name: nginx-ingress-&lt;span&gt;controller
          image: quay.io&lt;/span&gt;/kubernetes-ingress-controller/nginx-ingress-controller:&lt;span&gt;0.28&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
          args:
            &lt;/span&gt;- /nginx-ingress-&lt;span&gt;controller
            &lt;/span&gt;- --configmap=$(POD_NAMESPACE)/nginx-&lt;span&gt;configuration
            &lt;/span&gt;- --tcp-services-configmap=$(POD_NAMESPACE)/tcp-&lt;span&gt;services
            &lt;/span&gt;- --udp-services-configmap=$(POD_NAMESPACE)/udp-&lt;span&gt;services
            &lt;/span&gt;- --publish-service=$(POD_NAMESPACE)/ingress-&lt;span&gt;nginx
            &lt;/span&gt;- --annotations-prefix=&lt;span&gt;nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            capabilities:
              drop:
                &lt;/span&gt;-&lt;span&gt; ALL
              add:
                &lt;/span&gt;-&lt;span&gt; NET_BIND_SERVICE
            # www&lt;/span&gt;-data -&amp;gt; &lt;span&gt;101&lt;/span&gt;&lt;span&gt;
            runAsUser: &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;
          &lt;span&gt;env&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;-&lt;span&gt; name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            &lt;/span&gt;-&lt;span&gt; name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            &lt;/span&gt;-&lt;span&gt; name: http
              containerPort: &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
              protocol: TCP
            &lt;/span&gt;-&lt;span&gt; name: https
              containerPort: &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;
              protocol: TCP
          livenessProbe:
            failureThreshold: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
            httpGet:
              path: &lt;/span&gt;/&lt;span&gt;healthz
              port: &lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;
              scheme: HTTP
            initialDelaySeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            periodSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            successThreshold: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            timeoutSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          readinessProbe:
            failureThreshold: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
            httpGet:
              path: &lt;/span&gt;/&lt;span&gt;healthz
              port: &lt;/span&gt;&lt;span&gt;10254&lt;/span&gt;&lt;span&gt;
              scheme: HTTP
            periodSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
            successThreshold: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            timeoutSeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          lifecycle:
            preStop:
              exec:
                command:
                  &lt;/span&gt;- /&lt;span&gt;wait&lt;/span&gt;-&lt;span&gt;shutdown

&lt;/span&gt;---&lt;span&gt;

apiVersion: v1
kind: LimitRange
metadata:
  name: ingress&lt;/span&gt;-&lt;span&gt;nginx
  namespace: ingress&lt;/span&gt;-&lt;span&gt;nginx
  labels:
    app.kubernetes.io&lt;/span&gt;/name: ingress-&lt;span&gt;nginx
    app.kubernetes.io&lt;/span&gt;/part-of: ingress-&lt;span&gt;nginx
spec:
  limits:
  &lt;/span&gt;-&lt;span&gt; default:
    min:
      memory: 90Mi
      cpu: 100m
    type: Container&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　提示：把对应控制器类型更改外DaemonSet，在pod模板中spec字段下的replicas字段去掉；在spec.template.spec字段下加上hostNetwork: true即可；以上两种使用ds控制器管理ingress controller pod也可以使用node选择器，来筛选在某个节点上创建ingress controller pod；&lt;/p&gt;
&lt;p&gt;　　使用deploy控制器管理ingress controller pod，就直接应用mandatory.yaml即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl apply -f mandatory.yaml 
namespace/ingress-nginx created
configmap/nginx-configuration created
configmap/tcp-services created
configmap/udp-services created
serviceaccount/nginx-ingress-serviceaccount created
Warning: rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole
clusterrole.rbac.authorization.k8s.io/nginx-ingress-clusterrole created
Warning: rbac.authorization.k8s.io/v1beta1 Role is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 Role
role.rbac.authorization.k8s.io/nginx-ingress-role created
Warning: rbac.authorization.k8s.io/v1beta1 RoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 RoleBinding
rolebinding.rbac.authorization.k8s.io/nginx-ingress-role-nisa-binding created
Warning: rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding
clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-clusterrole-nisa-binding created
deployment.apps/nginx-ingress-controller created
limitrange/ingress-nginx created
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看应用资源清单创建的资源对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get all -n ingress-nginx
NAME                                            READY   STATUS    RESTARTS   AGE
pod/nginx-ingress-controller-5466cb8999-4lsjc   1/1     Running   0          80s

NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/nginx-ingress-controller   1/1     1            1           80s

NAME                                                  DESIRED   CURRENT   READY   AGE
replicaset.apps/nginx-ingress-controller-5466cb8999   1         1         1       80s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到在ingress-nginx名称空间下创建了一个deploy控制器，对应控制器创建了一个nginx-ingress-controller控制器pod；但是此pod现在不能被外部客户端访问到，我们需要创建一个service来引入外部流量到此pod上；&lt;/p&gt;
&lt;p&gt;　　查看pod标签&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get pod -n ingress-nginx --show-labels
NAME                                        READY   STATUS    RESTARTS   AGE     LABELS
nginx-ingress-controller-5466cb8999-4lsjc   1/1     Running   0          4m38s   app.kubernetes.io/name=ingress-nginx,app.kubernetes.io/part-of=ingress-nginx,pod-template-hash=5466cb8999
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　根据上述标签来写一个创建ingress-service资源的配置清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# cat ingress-nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-svc
  namespace: ingress-nginx
spec:
  type: NodePort
  ports:
    - port: 80
      name: http
      nodePort: 30080
    - port: 443
      name: https
      nodePort: 30443
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上配置清单主要把满足对应标签选择器的pod关联起来；并把对应pod的80和443端口分别映射到对应主机上的30080和30443端口；&lt;/p&gt;
&lt;p&gt;　　应用配置清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl apply -f ingress-nginx-service.yaml
service/ingress-nginx-svc created
[root@master01 ~]# kubectl get svc -n ingress-nginx
NAME                TYPE       CLUSTER-IP    EXTERNAL-IP   PORT(S)                      AGE
ingress-nginx-svc   NodePort   10.98.4.208   &amp;lt;none&amp;gt;        80:30080/TCP,443:30443/TCP   13s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　访问集群任意节点ip的30080和30443端口，看看是否访问到对应pod？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221233233956-332984302.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：30080是能够正常访问的，只是它显示404，是因为我们没有对应的主页；&lt;/p&gt;
&lt;p&gt;　　访问30443端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221233430300-337510625.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221233625602-187005880.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201221233643992-1333264930.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：30443是一个https端口，所以访问必须用https协议访问，这里提示访问页面有风险是因为浏览器不信任证书引起的，我们可以点击高级，信任证书即可；同样30443端口也是返回404，是因为没有主页的原因；两个端口能够正常访问，说明我们在k8s上部署的ingress-nginx controller就部署好了；&lt;/p&gt;
&lt;p&gt;　　ingress资源的使用&lt;/p&gt;
&lt;p&gt;　　在k8s上创建一个deploy控制器，让其管理2个 ikubernetes/myapp:v1镜像运行的pod，然后再创建一个对应的service&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# cat myapp-demo.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myapp
      rel: stable
  template:
    metadata:
      namespace: default
      labels:
        app: myapp
        rel: stable
    spec:
      containers:
      - name: myapp
        image: ikubernetes/myapp:v1

---
apiVersion: v1
kind: Service
metadata:
  name: myapp
  namespace: default
spec:
  selector:
    app: myapp
    rel: stable
  ports:
  - name: http
    port: 80
    targetPort: 80
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：一个清单中定义多个资源，需要用“---”来分割资源；&lt;/p&gt;
&lt;p&gt;　　应用资源清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl apply -f myapp-demo.yaml
deployment.apps/myapp created
service/myapp created
[root@master01 manifests]# kubectl get pod -o wide
NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES
myapp-6479b786f5-9d4mh   1/1     Running   0          11s   10.244.2.98   node02.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
myapp-6479b786f5-k252c   1/1     Running   0          11s   10.244.4.20   node04.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
[root@master01 manifests]# kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1        &amp;lt;none&amp;gt;        443/TCP   4h52m
myapp        ClusterIP   10.105.208.218   &amp;lt;none&amp;gt;        80/TCP    21s
[root@master01 manifests]# kubectl describe svc myapp
Name:              myapp
Namespace:         default
Labels:            &amp;lt;none&amp;gt;
Annotations:       &amp;lt;none&amp;gt;
Selector:          app=myapp,rel=stable
Type:              ClusterIP
IP Families:       &amp;lt;none&amp;gt;
IP:                10.105.208.218
IPs:               10.105.208.218
Port:              http  80/TCP
TargetPort:        80/TCP
Endpoints:         10.244.2.98:80,10.244.4.20:80
Session Affinity:  None
Events:            &amp;lt;none&amp;gt;
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建ingress资源来反代以上资源&lt;/p&gt;
&lt;p&gt;　　示例：创建ingress资源&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# cat ingress-myapp.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-myapp
  namespace: default
  annotations:
    kubernetes.io/ingress.class: &quot;nginx&quot;
spec:
  rules:
  - host: www.myapp.com
    http:
      paths:
      - path: /
        backend:
          serviceName: myapp
          servicePort: 80
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：创建ingress资源apiVersion的值要写成extensions/v1beta1，kind为Ingress；对应metadata中的annotations的配置表示把ingress资源通知给那个类别的ingress controller，如果k8s集群上有多个类别的ingress controller时，这一项特别有用；在spec字段主要内嵌了三个字段，rules字段用来定义反代规则列表，其值为一个对象列表；其中rules字段里主要host和http字段；host用来指定虚拟主机的fqdn名称，如果不写表示匹配任意虚拟主机名称；http是用来定义指向后端的http选择器列表；其值为一个对象，里面只有一个paths字段，用于指定把请求映射到后端的某个路径；其值为一个对象列表；对应paths字段中可以定义path，用来指定映射后端的路径；backend用于指定后端pod的service，其值为一个对象；serviceName用于指定对应pod的service名称；servicePort用于指定后端服务的端口；以上配置表示把www.myapp.com这个虚拟主机的访问全部反代至服务名称为myapp端口为80的pod上；&lt;/p&gt;
&lt;p&gt;　　应用配置清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl apply -f ingress-myapp.yaml 
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
ingress.extensions/ingress-myapp created
[root@master01 manifests]# kubectl get ingress
NAME            CLASS    HOSTS           ADDRESS   PORTS   AGE
ingress-myapp   &amp;lt;none&amp;gt;   www.myapp.com             80      29s
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看ingress资源的详细信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl describe ingress ingress-myapp
Name:             ingress-myapp
Namespace:        default
Address:          
Default backend:  default-http-backend:80 (&amp;lt;error: endpoints &quot;default-http-backend&quot; not found&amp;gt;)
Rules:
  Host           Path  Backends
  ----           ----  --------
  www.myapp.com  
                 /   myapp:80 (10.244.2.98:80,10.244.4.20:80)
Annotations:     kubernetes.io/ingress.class: nginx
Events:
  Type    Reason  Age   From                      Message
  ----    ------  ----  ----                      -------
  Normal  CREATE  81s   nginx-ingress-controller  Ingress default/ingress-myapp
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到对应满足service名称为myapp并且其端口为80的pod有两个；&lt;/p&gt;
&lt;p&gt;　　进入ingress controller pod里，看看对应配置文件是否有www.myapp.com的配置？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl get pods -n ingress-nginx
NAME                                        READY   STATUS    RESTARTS   AGE
nginx-ingress-controller-5466cb8999-4lsjc   1/1     Running   0          78m
[root@master01 manifests]# kubectl exec -it -n ingress-nginx pod/nginx-ingress-controller-5466cb8999-4lsjc -- /bin/sh
/etc/nginx $ cd /etc/nginx/
/etc/nginx $ ls
fastcgi.conf            koi-utf                 modsecurity             owasp-modsecurity-crs   uwsgi_params.default
fastcgi.conf.default    koi-win                 modules                 scgi_params             win-utf
fastcgi_params          lua                     nginx.conf              scgi_params.default
fastcgi_params.default  mime.types              nginx.conf.default      template
geoip                   mime.types.default      opentracing.json        uwsgi_params
/etc/nginx $ grep &quot;www.myapp.com&quot; nginx.conf
        ## start server www.myapp.com
                server_name www.myapp.com ;
        ## end server www.myapp.com
/etc/nginx $ 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到在对应ingress-nginx 控制器pod中能够搜索到www.myapp.com的配置；说明我们定义的ingress资源已经被ingress-nginx controller 捕获；&lt;/p&gt;
&lt;p&gt;　　用浏览器访问www.myapp.com看看是否能够访问到内容？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222004617184-419420668.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：使用www.myapp.com访问，需要确保对应域名能够正常解析到k8s集群任意一节点上；可以看到访问www.myapp.com:30080能够访问到对应pod内容；&lt;/p&gt;
&lt;p&gt;　　删除ingress代理规则&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl delete -f ingress-myapp.yaml 
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
ingress.extensions &quot;ingress-myapp&quot; deleted
[root@master01 manifests]# kubectl get ingress 
No resources found in default namespace.
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　示例：配置基于url路径进行流量分发&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# cat ingress-myapp1.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-myapp
  namespace: default
  annotations:
    kubernetes.io/ingress.class: &quot;nginx&quot;
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: www.myapp.com
    http:
      paths:
      - path: /bbs
        backend:
          serviceName: myapp
          servicePort: 80
      - path: /blog
        backend:
          serviceName: myapp
          servicePort: 80
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上配置表示把www.myapp.com/bbs反代到service名称为myapp并且端口为80的pod上；把www.myapp.com/blog反代到ervice名称为myapp并且端口为80的pod上；我这里是因为k8s上只有这一种应用，生成环境中按照对应的业务逻辑来反代对应url到对应pod上即可；&lt;/p&gt;
&lt;p&gt;　　应用配置清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl apply -f ingress-myapp1.yaml 
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
ingress.extensions/ingress-myapp created
[root@master01 manifests]# kubectl get ingress
NAME            CLASS    HOSTS           ADDRESS   PORTS   AGE
ingress-myapp   &amp;lt;none&amp;gt;   www.myapp.com             80      5s
[root@master01 manifests]# kubectl describe ingress ingress-myapp
Name:             ingress-myapp
Namespace:        default
Address:          
Default backend:  default-http-backend:80 (&amp;lt;error: endpoints &quot;default-http-backend&quot; not found&amp;gt;)
Rules:
  Host           Path  Backends
  ----           ----  --------
  www.myapp.com  
                 /bbs    myapp:80 (10.244.2.98:80,10.244.4.20:80)
                 /blog   myapp:80 (10.244.2.98:80,10.244.4.20:80)
Annotations:     ingress.kubernetes.io/rewrite-target: /
                 kubernetes.io/ingress.class: nginx
Events:
  Type    Reason  Age   From                      Message
  ----    ------  ----  ----                      -------
  Normal  CREATE  30s   nginx-ingress-controller  Ingress default/ingress-myapp
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到对应ingress上就有两个url分别指向后端service名称为myapp端口为80的pod上；&lt;/p&gt;
&lt;p&gt;　　访问对应url，看看是否访问到内容？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222012352893-1927356262.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：这里访问不到内容的原因是对应pod内部并没有对应url的页面；&lt;/p&gt;
&lt;p&gt;　　进入ingress controller pod内部，查看是否有对应配置？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222012834238-1341881927.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222012927239-180274804.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到对应在ingress中定义的配置，都转为对应该ingress controller pod中的配置，说明我们定义基于url分发流量的ingress没有问题；&lt;/p&gt;
&lt;p&gt;　　示例：定义ingress规则基于主机名称的虚拟主机&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# cat ingress-myapp2.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-myapp
  namespace: default
  annotations:
    kubernetes.io/ingress.class: &quot;nginx&quot;
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: www.myapp.com
    http:
      paths:
      - path: 
        backend:
          serviceName: myapp
          servicePort: 80
  - host: blog.myapp.com
    http:
      paths:
      - path: 
        backend:
          serviceName: myapp
          servicePort: 80
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上配置表示把www.myapp.com这个虚拟主机名称的访问流量分发至service名称为myapp端口为80的pod上；把blog.myapp.com的流量分发至至service名称为myapp端口为80的pod上；生成环境按照对应的service名称来分发即可；&lt;/p&gt;
&lt;p&gt;　　应用配置清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl apply -f ingress-myapp2.yaml 
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
ingress.extensions/ingress-myapp created
[root@master01 manifests]# kubectl get ingress
NAME            CLASS    HOSTS                          ADDRESS   PORTS   AGE
ingress-myapp   &amp;lt;none&amp;gt;   www.myapp.com,blog.myapp.com             80      16s
[root@master01 manifests]# kubectl describe ingress ingress-myapp
Name:             ingress-myapp
Namespace:        default
Address:          
Default backend:  default-http-backend:80 (&amp;lt;error: endpoints &quot;default-http-backend&quot; not found&amp;gt;)
Rules:
  Host            Path  Backends
  ----            ----  --------
  www.myapp.com   
                     myapp:80 (10.244.2.98:80,10.244.4.20:80)
  blog.myapp.com  
                     myapp:80 (10.244.2.98:80,10.244.4.20:80)
Annotations:      ingress.kubernetes.io/rewrite-target: /
                  kubernetes.io/ingress.class: nginx
Events:
  Type    Reason  Age   From                      Message
  ----    ------  ----  ----                      -------
  Normal  CREATE  32s   nginx-ingress-controller  Ingress default/ingress-myapp
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证配置信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222013923821-1472652044.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222014009259-261413039.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　访问对应虚拟主机，看看是否能够访问对应pod？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222014307919-2144093362.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到两个虚拟主机名称都可以正常访问到，对应也做了调度；&lt;/p&gt;
&lt;p&gt;　　示例：创建tls类型的ingress资源&lt;/p&gt;
&lt;p&gt;　　创建证书&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# openssl genrsa -out tls.key 2048
Generating RSA private key, 2048 bit long modulus
.........................................+++
........+++
e is 65537 (0x10001)
[root@master01 manifests]# openssl req -x509 -key tls.key -out tls.crt -subj /C=CN/ST=SiChuan/L=GuangYuan/O=Test/CN=www.myapp.com -days 3650  
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上两条命令创建了一个名为tls.key的私钥和一个自签名证书，其名为tls.crt；&lt;/p&gt;
&lt;p&gt;　　创建Secret资源&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl create secret tls www-myapp-com-ingress-secret --cert=./tls.crt --key=./tls.key 
secret/www-myapp-com-ingress-secret created
[root@master01 manifests]# kubectl get secret
NAME                           TYPE                                  DATA   AGE
default-token-xvd4c            kubernetes.io/service-account-token   3      13d
www-myapp-com-ingress-secret   kubernetes.io/tls                     2      21s
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：在ingress控制器上配置https主机时，不能直接使用私钥和证书文件，而是需要使用secret资源对象来传递相关数据；&lt;/p&gt;
&lt;p&gt;　　定义tls类型ingress资源清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# cat www-myapp-com-ingress-secret.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-myapp-tls
  namespace: default
  annotations:
    kubernetes.io/ingress.class: &quot;nginx&quot;
spec:
  tls:
  - hosts:
    - www.myapp.com
    secretName: www-myapp-com-ingress-secret
  rules:
  - host: www.myapp.com
    http:
      paths:
      - path: / 
        backend:
          serviceName: myapp
          servicePort: 80
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：定义tls类型ingress资源清单，需要在spec字段下用tls字段来指定对应主机名称，以及secret资源对象的名称；&lt;/p&gt;
&lt;p&gt;　　应用资源清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 manifests]# kubectl apply -f www-myapp-com-ingress-secret.yaml
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
ingress.extensions/ingress-myapp-tls created
[root@master01 manifests]# kubectl get ingress
NAME                CLASS    HOSTS                          ADDRESS   PORTS     AGE
ingress-myapp       &amp;lt;none&amp;gt;   www.myapp.com,blog.myapp.com             80        31m
ingress-myapp-tls   &amp;lt;none&amp;gt;   www.myapp.com                            80, 443   8s
[root@master01 manifests]# kubectl describe ingress ingress-myapp-tls
Name:             ingress-myapp-tls
Namespace:        default
Address:          
Default backend:  default-http-backend:80 (&amp;lt;error: endpoints &quot;default-http-backend&quot; not found&amp;gt;)
TLS:
  www-myapp-com-ingress-secret terminates www.myapp.com
Rules:
  Host           Path  Backends
  ----           ----  --------
  www.myapp.com  
                 /   myapp:80 (10.244.2.98:80,10.244.4.20:80)
Annotations:     kubernetes.io/ingress.class: nginx
Events:
  Type    Reason  Age   From                      Message
  ----    ------  ----  ----                      -------
  Normal  CREATE  26s   nginx-ingress-controller  Ingress default/ingress-myapp-tls
[root@master01 manifests]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证：访问对应虚拟主机名称，看看对应的https端口是否能够正常访问到内容？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201222021209591-369806131.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到使用https协议访问对应的30443端口能够正常访问到对应后端pod提供的内容；&lt;/p&gt;
</description>
<pubDate>Mon, 21 Dec 2020 18:42:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>前文我们了解了k8s上的service资源的相关话题，回顾请参考：https://www.cnblogs.com/qiuhom-1874/p/14161950.html；今天我们来了解下k8s上的In</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/14167581.html</dc:identifier>
</item>
<item>
<title>我们该如何正确的中断一个线程的执行？？ - 冰河团队</title>
<link>http://www.cnblogs.com/binghe001/p/14170914.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/binghe001/p/14170914.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;blockquote readability=&quot;8.7712418300654&quot;&gt;
&lt;p&gt;当我们在调用Java对象的wait()方法或者线程的sleep()方法时，需要捕获并处理InterruptedException异常。如果我们对InterruptedException异常处理不当，则会发生我们意想不到的后果！今天，我们就以一个案例的形式，来为大家详细介绍下为何中断执行的线程不起作用。&lt;/p&gt;
&lt;p&gt;文章已收录到：&lt;a href=&quot;https://github.com/sunshinelyz/technology-binghe&quot; target=&quot;_blank&quot;&gt;https://github.com/sunshinelyz/technology-binghe&lt;/a&gt; 和 &lt;a href=&quot;https://gitee.com/binghe001/technology-binghe&quot; target=&quot;_blank&quot;&gt;https://gitee.com/binghe001/technology-binghe&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;程序案例&quot;&gt;程序案例&lt;/h2&gt;
&lt;p&gt;例如，下面的程序代码，InterruptedTask类实现了Runnable接口，在run()方法中，获取当前线程的句柄，并在while(true)循环中，通过isInterrupted()方法来检测当前线程是否被中断，如果当前线程被中断就退出while(true)循环，同时，在while(true)循环中，还有一行Thread.sleep(100)代码，并捕获了InterruptedException异常。整个代码如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.binghe.concurrent.lab08;

/**
 * @author binghe
 * @version 1.0.0
 * @description 线程测试中断
 */
public class InterruptedTask implements Runnable{

    @Override
    public void run() {

        Thread currentThread = Thread.currentThread();
        while (true){
            if(currentThread.isInterrupted()){
                break;
            }

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码的本意是通过isInterrupted()方法检查线程是否被中断了，如果中断了就退出while循环。其他线程通过调用执行线程的interrupt()方法来中断执行线程，此时会设置执行线程的中断标志位，从而使currentThread.isInterrupted()返回true，这样就能够退出while循环。&lt;/p&gt;
&lt;p&gt;这看上去没啥问题啊！&lt;span&gt;&lt;strong&gt;但真的是这样吗？&lt;/strong&gt;&lt;/span&gt;我们创建一个InterruptedTest类用于测试，代码如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.binghe.concurrent.lab08;

/**
 * @author binghe
 * @version 1.0.0
 * @description 测试线程中断
 */
public class InterruptedTest {
    public static void main(String[] args){
        InterruptedTask interruptedTask = new InterruptedTask();
        Thread interruptedThread = new Thread(interruptedTask);
        interruptedThread.start();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        interruptedThread.interrupt();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们运行main方法，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201220225754597.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;这竟然跟我们想象的不一样！不一样！不一样！这是为什么呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;问题分析&lt;/h2&gt;
&lt;p&gt;上述代码明明调用了线程的interrupt()方法来中断线程，但是却并没有起到啥作用。原因是线程的run()方法在执行的时候，大部分时间都是阻塞在sleep(100)上，当其他线程通过调用执行线程的interrupt()方法来中断执行线程时，大概率的会触发InterruptedException异常，&lt;span&gt;&lt;strong&gt;在触发InterruptedException异常的同时，JVM会同时把线程的中断标志位清除，所以，这个时候在run()方法中判断的currentThread.isInterrupted()会返回false，也就不会退出当前while循环了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;既然问题分析清除了，&lt;span&gt;&lt;strong&gt;那如何中断线程并退出程序呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题解决&quot;&gt;问题解决&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;正确的处理方式应该是在InterruptedTask类中的run()方法中的while(true)循环中捕获异常之后重新设置中断标志位&lt;/strong&gt;&lt;/span&gt;，所以，正确的InterruptedTask类的代码如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.binghe.concurrent.lab08;

/**
 * @author binghe
 * @version 1.0.0
 * @description 中断线程测试
 */
public class InterruptedTask implements Runnable{

    @Override
    public void run() {

        Thread currentThread = Thread.currentThread();
        while (true){
            if(currentThread.isInterrupted()){
                break;
            }

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
                currentThread.interrupt();
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，我们在捕获InterruptedException异常的catch代码块中新增了一行代码。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;currentThread.interrupt();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这就使得我们&lt;span&gt;&lt;strong&gt;捕获到InterruptedException异常后，能够重新设置线程的中断标志位，从而中断当前执行的线程。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们再次运行InterruptedTest类的main方法，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201220225818561.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;处理InterruptedException异常时要小心，如果在调用执行线程的interrupt()方法中断执行线程时，抛出了InterruptedException异常，则在触发InterruptedException异常的同时，JVM会同时把执行线程的中断标志位清除，此时调用执行线程的isInterrupted()方法时，会返回false。此时，正确的处理方式是在执行线程的run()方法中捕获到InterruptedException异常，并重新设置中断标志位（也就是在捕获InterruptedException异常的catch代码块中，重新调用当前线程的interrupt()方法）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好了，今天就到这儿吧，我是冰河，我们下期见~~&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;重磅福利&quot;&gt;重磅福利&lt;/h2&gt;
&lt;p&gt;微信搜一搜【冰河技术】微信公众号，关注这个有深度的程序员，每天阅读超硬核技术干货，公众号内回复【PDF】有我准备的一线大厂面试资料和我原创的超硬核PDF技术文档，以及我为大家精心准备的多套简历模板（不断更新中），希望大家都能找到心仪的工作，学习是一条时而郁郁寡欢，时而开怀大笑的路，加油。如果你通过努力成功进入到了心仪的公司，一定不要懈怠放松，职场成长和新技术学习一样，不进则退。如果有幸我们江湖再见！&lt;/p&gt;
&lt;p&gt;另外，我开源的各个PDF，后续我都会持续更新和维护，感谢大家长期以来对冰河的支持！！&lt;/p&gt;
</description>
<pubDate>Mon, 21 Dec 2020 16:00:00 +0000</pubDate>
<dc:creator>冰河团队</dc:creator>
<og:description>写在前面 当我们在调用Java对象的wait()方法或者线程的sleep()方法时，需要捕获并处理InterruptedException异常。如果我们对InterruptedException异常处</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/binghe001/p/14170914.html</dc:identifier>
</item>
<item>
<title>JDK 8 新特性，从入门到精通 - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/jdk8.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/jdk8.html</guid>
<description>&lt;p&gt;　　在&lt;strong&gt;&lt;span&gt;jdk1.8以前&lt;/span&gt;&lt;/strong&gt;接口里面是&lt;span&gt;&lt;strong&gt;只能有抽象方法&lt;/strong&gt;&lt;/span&gt;，&lt;strong&gt;&lt;span&gt;不能有任何方法的实现的&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　在&lt;span&gt;&lt;strong&gt;jdk1.8里面打破&lt;/strong&gt;&lt;/span&gt;了这个&lt;span&gt;&lt;strong&gt;规定&lt;/strong&gt;&lt;/span&gt;，&lt;span&gt;&lt;strong&gt;引入&lt;/strong&gt;&lt;/span&gt;了&lt;span&gt;&lt;strong&gt;新&lt;/strong&gt;&lt;/span&gt;的&lt;span&gt;&lt;strong&gt;关键字&lt;/strong&gt;&lt;/span&gt;：&lt;span&gt;&lt;strong&gt;default&lt;/strong&gt;&lt;/span&gt;，使用&lt;span&gt;&lt;strong&gt;default修饰方法&lt;/strong&gt;&lt;/span&gt;，&lt;span&gt;&lt;strong&gt;可以在接口里定义具体的方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;创建一个工程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201219142236111-777458373.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;代码实现&lt;/h2&gt;
&lt;h3&gt;默认方法&lt;/h3&gt;
&lt;p&gt;　　接口里面定义了一个默认方法，这个接口的实现类实现了这个接口之后，不用管这个default修饰的方法就可以直接调用，即接口方法的默认实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201219143543177-97285680.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_7225cc6c-a821-40eb-9949-7e01312d6cd0&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_7225cc6c-a821-40eb-9949-7e01312d6cd0&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7225cc6c-a821-40eb-9949-7e01312d6cd0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.defaults;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; People {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; run();
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; eat();
    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; speak(){
        System.out.println(&lt;/span&gt;&quot;讲中国话&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;People&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_9986b7ff-1927-462d-b871-7874df53585e&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_9986b7ff-1927-462d-b871-7874df53585e&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9986b7ff-1927-462d-b871-7874df53585e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.defaults;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：
 * @Author：chenyanbin
 * @Date：2020/12/19 2:30 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LaoChen &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; People{
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
        System.out.println(&lt;/span&gt;&quot;老陈同志在跑步&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; eat() {
        System.out.println(&lt;/span&gt;&quot;老陈同志在吃饭&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;LaoChen&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_70f70b9e-6777-42d3-bf69-c5a23761bccf&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_70f70b9e-6777-42d3-bf69-c5a23761bccf&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_70f70b9e-6777-42d3-bf69-c5a23761bccf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.defaults;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：
 * @Author：chenyanbin
 * @Date：2020/12/19 2:31 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefaultMain {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        People people&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LaoChen();
        people.eat();
        people.run();
        people.speak();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;DefaultMain&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;静态方法&lt;/h3&gt;
&lt;p&gt;　　调用方式：&lt;span&gt;&lt;strong&gt;接口名.静态方法&lt;/strong&gt;&lt;/span&gt;，来访问接口中的静态方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201219144330764-1579926662.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201219145045553-491058222.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;旧实现方式&lt;/h2&gt;
&lt;p&gt;　　使用JDK里的&lt;span&gt;&lt;strong&gt;sun.misc&lt;/strong&gt;&lt;/span&gt;下的&lt;span&gt;&lt;strong&gt;BASE64Encoder&lt;/strong&gt;&lt;/span&gt;和&lt;span&gt;&lt;strong&gt;BASE64Decoder&lt;/strong&gt;&lt;/span&gt;两个类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201219153719580-531369487.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_6079dc86-8fc6-43a2-817e-c693de461db3&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_6079dc86-8fc6-43a2-817e-c693de461db3&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6079dc86-8fc6-43a2-817e-c693de461db3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.base64;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sun.misc.BASE64Decoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sun.misc.BASE64Encoder;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：base64 加密、解密
 * @Author：chenyanbin
 * @Date：2020/12/19 2:58 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Base64Demo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        BASE64Encoder encoder&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BASE64Encoder();
        BASE64Decoder decoder&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BASE64Decoder();
        String str&lt;/span&gt;=&quot;博客地址：https://www.cnblogs.com/chenyanbin/&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密&lt;/span&gt;
        String encode = encoder.encode(str.getBytes(&quot;utf-8&quot;&lt;span&gt;));
        System.out.println(&lt;/span&gt;&quot;加密后的值:&quot;+&lt;span&gt;encode);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密&lt;/span&gt;
        &lt;span&gt;byte&lt;/span&gt;[] bytes =&lt;span&gt; decoder.decodeBuffer(encode);
        String decoderStr&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; String(bytes,&quot;utf-8&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;解密后的值:&quot;+&lt;span&gt;decoderStr);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Base64Demo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;jdk1.8实现方式&lt;/h2&gt;
&lt;p&gt;　　在jdk1.8的&lt;span&gt;&lt;strong&gt;java.util&lt;/strong&gt;&lt;/span&gt;包中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201219155026661-1744721098.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_5c330cfe-d679-40ba-b210-db8f43e1eab6&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_5c330cfe-d679-40ba-b210-db8f43e1eab6&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5c330cfe-d679-40ba-b210-db8f43e1eab6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.base64;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Base64;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：base64 加密、解密
 * @Author：chenyanbin
 * @Date：2020/12/19 2:58 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Base64Demo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        String str &lt;/span&gt;= &quot;博客地址：https://www.cnblogs.com/chenyanbin/&quot;&lt;span&gt;;
        Base64.Encoder encoder &lt;/span&gt;=&lt;span&gt; Base64.getEncoder();
        Base64.Decoder decoder &lt;/span&gt;=&lt;span&gt; Base64.getDecoder();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密&lt;/span&gt;
        String encode = encoder.encodeToString(str.getBytes(&quot;utf-8&quot;&lt;span&gt;));
        System.out.println(&lt;/span&gt;&quot;加密后的值:&quot; +&lt;span&gt; encode);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密&lt;/span&gt;
        &lt;span&gt;byte&lt;/span&gt;[] bytes =&lt;span&gt; decoder.decode(encode);
        String decoderStr &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(bytes, &quot;utf-8&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;解密后的值:&quot; +&lt;span&gt; decoderStr);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Base64Demo&lt;/span&gt; &lt;/div&gt;

&lt;p&gt;　　包所在的位置：java.time&lt;/p&gt;
&lt;h2&gt;核心类&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;LocalDate：不包含具体时间的日期&lt;/li&gt;
&lt;li&gt;LocalTime：不含日期的时间&lt;/li&gt;
&lt;li&gt;LocalDateTime：包含日期及时间&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201219234831713-604976318.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_3af649ec-f7b8-480a-9fed-8c27defa98df&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_3af649ec-f7b8-480a-9fed-8c27defa98df&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3af649ec-f7b8-480a-9fed-8c27defa98df&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.local_date;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.time.LocalDate;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：LocalDate，不包含具体时间的日期
 * @Author：chenyanbin
 * @Date：2020/12/19 4:00 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LocalDateDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        LocalDate today &lt;/span&gt;=&lt;span&gt; LocalDate.now();
        System.out.println(&lt;/span&gt;&quot;今天日期：&quot; +&lt;span&gt; today);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;年&lt;/span&gt;
        System.out.println(&quot;现在是那年：&quot; +&lt;span&gt; today.getYear());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;月&lt;/span&gt;
        System.out.println(&quot;现在是那月(英文)：&quot; +&lt;span&gt; today.getMonth());
        System.out.println(&lt;/span&gt;&quot;现在是那月(数字)：&quot; +&lt;span&gt; today.getMonthValue());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这月的那一天&lt;/span&gt;
        System.out.println(&quot;现在是这月的那天：&quot; +&lt;span&gt; today.getDayOfMonth());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在是周几&lt;/span&gt;
        System.out.println(&quot;现在是周几&quot; +&lt;span&gt; today.getDayOfWeek());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在是这年的第几天&lt;/span&gt;
        System.out.println(&quot;现在是这年的第几天:&quot; +&lt;span&gt; today.getDayOfYear());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加一年&lt;/span&gt;
        System.out.println(&quot;加一年：&quot;+today.plusYears(1&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加一月&lt;/span&gt;
        System.out.println(&quot;加一月：&quot;+today.plusMonths(1&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加一天&lt;/span&gt;
        System.out.println(&quot;加一天:&quot;+today.plusDays(1&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;减一年&lt;/span&gt;
        System.out.println(&quot;减一年：&quot;+today.minusYears(1&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;减一月&lt;/span&gt;
        System.out.println(&quot;减一月：&quot;+today.minusMonths(1&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;减一天&lt;/span&gt;
        System.out.println(&quot;减一天：&quot;+today.minusDays(1&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;减一周&lt;/span&gt;
        System.out.println(&quot;减一周&quot;+today.minusWeeks(1&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;日期比较，是否在某年之后&lt;/span&gt;
        LocalDate plusYearDate = today.plusYears(1&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;是否在某年之后：&quot;+&lt;span&gt;today.isAfter(plusYearDate));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;日期比较，两个日期对象是否相等&lt;/span&gt;
        System.out.println(&quot;两个日期是否相等:&quot;+&lt;span&gt;today.isEqual(plusYearDate));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;LocalDateDemo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220000822973-1910939277.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_07ad7530-2c5d-4687-8dbe-987e89425220&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_07ad7530-2c5d-4687-8dbe-987e89425220&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_07ad7530-2c5d-4687-8dbe-987e89425220&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.local_date;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.time.Duration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.time.LocalDateTime;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.time.format.DateTimeFormatter;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：日期格式化
 * @Author：chenyanbin
 * @Date：2020/12/19 11:52 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LocalDateTimeFormatDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;日期格式化&lt;/span&gt;
        LocalDateTime localDateTime =&lt;span&gt; LocalDateTime.now();
        System.out.println(localDateTime);
        DateTimeFormatter dateTimeFormatter &lt;/span&gt;= DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;格式化后的日期格式：&quot; +&lt;span&gt; localDateTime.format(dateTimeFormatter));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取指定的日期时间对象&lt;/span&gt;
        LocalDateTime ldt = LocalDateTime.of(2020, 12, 19, 11, 59, 59&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;获取指定日期时间对象：&quot; +&lt;span&gt; ldt);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算日期时间差&lt;/span&gt;
        LocalDateTime toDay =&lt;span&gt; LocalDateTime.now();
        System.out.println(toDay);
        LocalDateTime changeDate &lt;/span&gt;= LocalDateTime.of(2020, 12, 29, 11, 59, 59&lt;span&gt;);
        System.out.println(changeDate);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相差多少天&lt;/span&gt;
        Duration duration =&lt;span&gt; Duration.between(toDay, changeDate);
        System.out.println(&lt;/span&gt;&quot;相差多少天:&quot;+&lt;span&gt; duration.toDays());
        System.out.println(&lt;/span&gt;&quot;相差多少小时:&quot;+&lt;span&gt;duration.toHours());
        System.out.println(&lt;/span&gt;&quot;相差多少分钟：&quot;+&lt;span&gt;duration.toMinutes());
        System.out.println(&lt;/span&gt;&quot;相差多少毫秒数：&quot;+&lt;span&gt;duration.toMillis());
        System.out.println(&lt;/span&gt;&quot;相差的纳秒数：&quot;+&lt;span&gt;duration.toNanos());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;LocalDateTimeFormatDemo&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;作用&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt; 空指针异常(NPE)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;演示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220002901365-1794652351.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_101b5035-0006-4fd3-9e5e-21efb53c00a7&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_101b5035-0006-4fd3-9e5e-21efb53c00a7&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_101b5035-0006-4fd3-9e5e-21efb53c00a7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.opt;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Optional;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：
 * @Author：chenyanbin
 * @Date：2020/12/20 12:15 上午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OptionDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Student student&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Student student=new Student(&quot;1&quot;,&quot;2&quot;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;null值作为参数传递进去，会抛异常
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Optional&amp;lt;Student&amp;gt; optStudent = Optional.of(student);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果对象即可能是null也可能是非null，应该使用ofNullable
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Optional&amp;lt;Student&amp;gt; optStudent2 = Optional.ofNullable(student);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;isPresent如果不为null时，返回true
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (optStudent2.isPresent()){
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            System.out.println(&quot;不为null&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取泛型中的值
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            Student student2 = optStudent2.get();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            System.out.println(student2);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }else {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            System.out.println(&quot;为null&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;兜底orElse方法&lt;/span&gt;
        Student student3 = &lt;span&gt;new&lt;/span&gt; Student(&quot;1&quot;, &quot;2&quot;&lt;span&gt;);
        Student student1 &lt;/span&gt;=&lt;span&gt; Optional.ofNullable(student).orElse(student3);
        System.out.println(student1);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;OptionDemo&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;语法&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
(parameters) -&amp;gt;&lt;span&gt; expression
或
(parameters) &lt;/span&gt;-&amp;gt;{ statements; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;重要特征&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;可选类型声明&lt;/span&gt;&lt;/strong&gt;：不需要声明参数类型，编译器可以统一识别参数值&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;可选的参数圆括号&lt;/strong&gt;&lt;/span&gt;：一个参数无需定义圆括号，但多个参数需要定义圆括号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;可选的大括号&lt;/span&gt;&lt;/strong&gt;：如果主题包含了一个语句，就不需要使用大括号&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;可选的返回关键字&lt;/strong&gt;&lt;/span&gt;：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指明表达式返回了一个数值。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;本质&lt;/h2&gt;
&lt;p&gt;　　Lambda表达式的实现方式本质是“&lt;strong&gt;&lt;span&gt;以匿名内部类的方法&lt;/span&gt;&lt;/strong&gt;”进行实现，重构现有臃肿代码，更高的开发效率。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：lambda代码演示
 * @Author：chenyanbin
 * @Date：2020/12/20 11:16 上午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LambdaDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用多线程打印一句话
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;jdk1.8之前&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                System.out.println(&lt;/span&gt;&quot;博客地址：https://www.cnblogs.com/chenyanbin/&quot;&lt;span&gt;);
            }
        }).start();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;jdk1.8之后需&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt; System.out.println(&quot;博客地址：https://www.cnblogs.com/chenyanbin/&quot;&lt;span&gt;)).start();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;List排序&lt;/span&gt;
        List&amp;lt;String&amp;gt; list= Arrays.asList(&quot;a&quot;,&quot;f&quot;,&quot;b&quot;,&quot;c&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;jdk1.8之前排序：Comparator
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Collections.sort(list, new Comparator&amp;lt;String&amp;gt;() {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            public int compare(String o1, String o2) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                return o1.compareTo(o2);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(list);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;jdk 1.8 lambda排序&lt;/span&gt;
        Collections.sort(list,(o1, o2)-&amp;gt;&lt;span&gt;o1.compareTo(o2));
        System.out.println(list);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;自定义Lambda接口编程&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;定义一个函数式接口，需要标注此接口：&lt;strong&gt;&lt;span&gt;@FunctionalInterface&lt;/span&gt;&lt;/strong&gt;，否则万一团队成员在接口上加了其他方法则容易出现故障&lt;/li&gt;
&lt;li&gt;编写一个方法，输入需要操作的数据和接口&lt;/li&gt;
&lt;li&gt;在调用方法时传入数据和lambda表达式，用来操作数据&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;需求&lt;/h3&gt;
&lt;p&gt;　　定义一个可以使用加减乘除的接口，以前的话，需要定义4个接口，现在只需要定义一个即可。&lt;/p&gt;
&lt;h3&gt;代码实现&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220133730048-1352218672.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_f2db5c25-0e23-4f27-9e9b-7c29c2e087e8&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_f2db5c25-0e23-4f27-9e9b-7c29c2e087e8&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f2db5c25-0e23-4f27-9e9b-7c29c2e087e8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;
@FunctionalInterface
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;R:return；T：参数&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; OperatorFunction&amp;lt;R,T&amp;gt;&lt;span&gt; {
    R operator(T t1,T t2);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;OperatorFunction&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_d96548d0-45e7-49d9-9b20-c965932f53e5&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_d96548d0-45e7-49d9-9b20-c965932f53e5&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d96548d0-45e7-49d9-9b20-c965932f53e5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：四则运算
 * @Author：chenyanbin
 * @Date：2020/12/20 1:35 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OperatorDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&quot;加法：&quot; + operator(20, 5, (x, y) -&amp;gt; x +&lt;span&gt; y));
        System.out.println(&lt;/span&gt;&quot;减法：&quot; + operator(20, 5, (x, y) -&amp;gt; x -&lt;span&gt; y));
        System.out.println(&lt;/span&gt;&quot;乘法：&quot; + operator(20, 5, (x, y) -&amp;gt; x *&lt;span&gt; y));
        System.out.println(&lt;/span&gt;&quot;除法：&quot; + operator(20, 5, (x, y) -&amp;gt; x /&lt;span&gt; y));
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer operator(Integer x, Integer y, OperatorFunction&amp;lt;Integer, Integer&amp;gt;&lt;span&gt; operatorFunction) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; operatorFunction.operator(x, y);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;OperatorDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;JDK 1.8 新增加的函数接口&lt;/h2&gt;
&lt;p&gt;　　文档地址：&lt;a href=&quot;https://www.runoob.com/java/java8-functional-interfaces.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220134012736-1097829943.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220134030234-698648971.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220134051304-369530755.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220134107926-1243628339.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220134144688-1987223679.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;函数式编程Function&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;传入一个值经过函数的计算返回另一个值&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;T&lt;/span&gt;&lt;/strong&gt;：入参类型，R：出参类型&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;调用方法&lt;/strong&gt;&lt;/span&gt;：R apply(T t)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220142038072-2108347748.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;函数式编程Bifunction&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;Function&lt;/span&gt;&lt;/strong&gt;只能&lt;span&gt;&lt;strong&gt;接收一个参数&lt;/strong&gt;&lt;/span&gt;， 如果要传递&lt;span&gt;&lt;strong&gt;两个参数&lt;/strong&gt;&lt;/span&gt;，则&lt;span&gt;&lt;strong&gt;用Bifunction&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220142835256-900209519.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_99c7307a-b502-4f08-a69f-ddffeab1cf67&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_99c7307a-b502-4f08-a69f-ddffeab1cf67&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_99c7307a-b502-4f08-a69f-ddffeab1cf67&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.BiFunction;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：BiFunction
 * @Author：chenyanbin
 * @Date：2020/12/20 2:27 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BiFunctionDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&quot;加法：&quot; + operator(20, 5, (x, y) -&amp;gt; x +&lt;span&gt; y));
        System.out.println(&lt;/span&gt;&quot;减法：&quot; + operator(20, 5, (x, y) -&amp;gt; x -&lt;span&gt; y));
        System.out.println(&lt;/span&gt;&quot;乘法：&quot; + operator(20, 5, (x, y) -&amp;gt; x *&lt;span&gt; y));
        System.out.println(&lt;/span&gt;&quot;除法：&quot; + operator(20, 5, (x, y) -&amp;gt; x /&lt;span&gt; y));
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer operator(Integer x, Integer y, BiFunction&amp;lt;Integer,Integer,Integer&amp;gt;&lt;span&gt; biFunction){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; biFunction.apply(x,y);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;BiFunctionDemo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;函数式编程Consumer&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;有入参，无返回值&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;用途：因为没有出参，&lt;span&gt;&lt;strong&gt;常用于打印、发送短信&lt;/strong&gt;&lt;/span&gt;等消费动作&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220143700983-1985941231.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_cc9906d9-0aaa-425a-94e8-f510dc6b94d4&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_cc9906d9-0aaa-425a-94e8-f510dc6b94d4&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cc9906d9-0aaa-425a-94e8-f510dc6b94d4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.Consumer;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：Consumer
 * @Author：chenyanbin
 * @Date：2020/12/20 2:35 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumerDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Consumer&lt;/span&gt;&amp;lt;String&amp;gt; consumer=(phone)-&amp;gt;&lt;span&gt;{
            System.out.println(&lt;/span&gt;&quot;手机号：&quot;+&lt;span&gt;phone);
            System.out.println(&lt;/span&gt;&quot;发送短信成功&quot;&lt;span&gt;);
        };
        sendMsg(&lt;/span&gt;&quot;11111&quot;&lt;span&gt;,consumer);
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sendMsg(String phone, Consumer&amp;lt;String&amp;gt;&lt;span&gt; consumer){
        consumer.accept(phone);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ConsumerDemo&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;jdk源码中的使用&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220144149126-842557014.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;函数式编程Supplier&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;供给型接口&lt;/strong&gt;&lt;/span&gt;：无入参，有返回值&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/span&gt;：出参类型，没有入参&lt;/li&gt;
&lt;li&gt;用途：&lt;span&gt;&lt;strong&gt;泛型一定和方法&lt;/strong&gt;&lt;/span&gt;的&lt;span&gt;&lt;strong&gt;返回值类型&lt;/strong&gt;&lt;/span&gt;是&lt;span&gt;&lt;strong&gt;一种类型&lt;/strong&gt;&lt;/span&gt;，如果需要获得一个数据，并且不需要传入参数，可以使用Supplier接口，例如：无参的工厂方法，即工厂设计模式创建(&lt;a href=&quot;https://www.cnblogs.com/chenyanbin/p/14027999.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;)对象，简单来说就是 提供者，&lt;span&gt;&lt;strong&gt;方便程序的解耦，&lt;/strong&gt;&lt;/span&gt;(&lt;span&gt;&lt;strong&gt;给你个眼神自己体会&lt;/strong&gt;&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220203251991-642318086.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_b1bc17ea-9c63-4c85-861a-a9b0cfd78641&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_b1bc17ea-9c63-4c85-861a-a9b0cfd78641&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b1bc17ea-9c63-4c85-861a-a9b0cfd78641&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.Supplier;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：Supplier功能演示
 * @Author：chenyanbin
 * @Date：2020/12/20 8:30 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SupplierDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Student2 stu&lt;/span&gt;=&lt;span&gt;getStudent2();
        System.out.println(stu);
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Student2 getStudent2(){
        Supplier&lt;/span&gt;&amp;lt;Student2&amp;gt; supplier=()-&amp;gt;&lt;span&gt;{
            Student2 student2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student2();
            student2.setId(&lt;/span&gt;&quot;2&quot;&lt;span&gt;);
            student2.setName(&lt;/span&gt;&quot;默认名称&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; student2;
        };
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; supplier.get();
    }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student2{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(String id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Student2{&quot; +
                &quot;id='&quot; + id + '\'' +
                &quot;, name='&quot; + name + '\'' +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;SupplierDemo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;函数式编程Predicate&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;断言型接口&lt;/span&gt;&lt;/strong&gt;：有入参，有返回值i，返回值类型确定是Boolean&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/span&gt;：入参类型；出参类型是Boolean&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;调用方法&lt;/strong&gt;&lt;/span&gt;：boolean test(T t)&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;用途&lt;/strong&gt;&lt;/span&gt;：接收一个参数，用于判断&lt;span&gt;&lt;strong&gt;是否&lt;/strong&gt;&lt;strong&gt;满足&lt;/strong&gt;&lt;/span&gt;一定的&lt;span&gt;&lt;strong&gt;条件&lt;/strong&gt;&lt;/span&gt;，&lt;span&gt;&lt;strong&gt;过滤数据&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220210742470-595579439.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_14e26925-a032-4650-a308-2d91588e6ad4&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_14e26925-a032-4650-a308-2d91588e6ad4&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_14e26925-a032-4650-a308-2d91588e6ad4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.Predicate;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：Predicate断言演示
 * @Author：chenyanbin
 * @Date：2020/12/20 8:56 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PredicateDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; list= Arrays.asList(1,2,3,4,5,6&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; fileter = fileter(list, num -&amp;gt; num % 2 == 0&lt;span&gt;);
        fileter.forEach(num&lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(num));
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;Integer&amp;gt; fileter(List&amp;lt;Integer&amp;gt; list, Predicate&amp;lt;Integer&amp;gt;&lt;span&gt; predicate){
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; resultList=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Integer i:list){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (predicate.test(i)){
                resultList.add(i);
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resultList;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PredicateDemo&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　jdk1.8之前，方法调用，&lt;span&gt;&lt;strong&gt;对象.方法名&lt;/strong&gt;&lt;/span&gt;，或者 &lt;span&gt;&lt;strong&gt;类名.方法名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　jdk1.8提供了另外一种调用方式&lt;strong&gt;&lt;span&gt;::&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　方法引用时一种更简洁易懂的lambda表达式，操作符是双冒号“&lt;span&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;/span&gt;”，用来&lt;span&gt;&lt;strong&gt;直接访问类&lt;/strong&gt;&lt;/span&gt;或者&lt;span&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/span&gt;已经&lt;span&gt;&lt;strong&gt;存在&lt;/strong&gt;&lt;/span&gt;的&lt;span&gt;&lt;strong&gt;方法或构造方法&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;静态方法&lt;/strong&gt;&lt;/span&gt;，ClassName::methodName&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;实例方法&lt;/strong&gt;&lt;/span&gt;，Intance::methodName&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;构造函数&lt;/strong&gt;&lt;/span&gt;，类名::new&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.lambda;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.BiFunction;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.Function;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：构造函数的引用
 * @Author：chenyanbin
 * @Date：2020/12/20 9:33 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConstructionDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用双冒号::，来构造静态函数的引用&lt;/span&gt;
        Function&amp;lt;String,Integer&amp;gt; func=&lt;span&gt;Integer::parseInt;
        System.out.println(func.apply(&lt;/span&gt;&quot;123&quot;) &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Integer);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用双冒号::，来构造非静态函数的引用&lt;/span&gt;
        String content=&quot;博客地址：https://www.cnblogs.com/chenyanbin/&quot;&lt;span&gt;;
        Function&lt;/span&gt;&amp;lt;Integer,String&amp;gt; func2=&lt;span&gt;content::substring;
        String result &lt;/span&gt;= func2.apply(2&lt;span&gt;);
        System.out.println(result);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数&lt;/span&gt;
        Function&amp;lt;String,Student3&amp;gt; func3=Student3::&lt;span&gt;new&lt;/span&gt;&lt;span&gt;;
        Student3 stu3 &lt;/span&gt;= func3.apply(&quot;1&quot;&lt;span&gt;);
        System.out.println(stu3);
        BiFunction&lt;/span&gt;&amp;lt;String,String,Student3&amp;gt; func4=Student3::&lt;span&gt;new&lt;/span&gt;&lt;span&gt;;
        Student3 stu4 &lt;/span&gt;= func4.apply(&quot;1&quot;, &quot;老陈&quot;&lt;span&gt;);
        System.out.println(stu4);
    }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student3{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student3() {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student3(String id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student3(String id, String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(String id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Student3{&quot; +
                &quot;id='&quot; + id + '\'' +
                &quot;, name='&quot; + name + '\'' +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
地址：https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.cnblogs.com/chenyanbin/&lt;/span&gt;
Student3{id='1', name='null'&lt;span&gt;}
Student3{id&lt;/span&gt;='1', name='老陈'&lt;span&gt;}

Process finished with exit code &lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;什么是Stream？&lt;/h2&gt;
&lt;p&gt;　　Stream中文称为“流”，通过&lt;span&gt;&lt;strong&gt;将集合转换&lt;/strong&gt;&lt;/span&gt;为“&lt;span&gt;&lt;strong&gt;流&lt;/strong&gt;&lt;/span&gt;”的&lt;span&gt;&lt;strong&gt;元素队列&lt;/strong&gt;&lt;/span&gt;，通过声明性方式，能够对集合中的每个元素进行一系列并行或串行的流水线操作&lt;/p&gt;
&lt;h2&gt;map和filter函数&lt;/h2&gt;
&lt;h3&gt;map&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;将流中的每一个元素T映射为R&lt;/li&gt;
&lt;li&gt;应用场景：转换对象，如：&lt;span&gt;&lt;strong&gt;DO对象转换为DTO对象&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220221713870-518529077.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220225030988-541895102.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_eeb5f456-e0d3-403e-83e2-9a98b3a831a4&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_eeb5f456-e0d3-403e-83e2-9a98b3a831a4&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eeb5f456-e0d3-403e-83e2-9a98b3a831a4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：map功能演示
 * @Author：chenyanbin
 * @Date：2020/12/20 10:15 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;老陈&quot;,&quot;老李&quot;,&quot;老王&quot;&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;String&amp;gt; collect = list.stream().map(name -&amp;gt; &quot;我叫：&quot; +&lt;span&gt; name).collect(Collectors.toList());
        collect.forEach(name&lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(name));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MapDemo&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_cec6e70e-59ef-431e-883f-91e2a8c1f355&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_cec6e70e-59ef-431e-883f-91e2a8c1f355&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cec6e70e-59ef-431e-883f-91e2a8c1f355&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：map，do转dto功能演示
 * @Author：chenyanbin
 * @Date：2020/12/20 10:48 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapDemo2 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;User&amp;gt; list= Arrays.asList(&lt;span&gt;new&lt;/span&gt; User(&quot;1&quot;,&quot;老陈&quot;,&quot;123&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;1&quot;,&quot;老王&quot;,&quot;123456&quot;&lt;span&gt;));
        List&lt;/span&gt;&amp;lt;UserDTO&amp;gt; collect = list.stream().map(obj -&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserDTO(obj.getId(), obj.getName())).collect(Collectors.toList());
        collect.forEach(obj&lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(obj));
    }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pwd;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User() {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User(String id, String name, String pwd) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pwd =&lt;span&gt; pwd;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPwd() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pwd;
    }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userName;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserDTO(String userId, String userName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userName =&lt;span&gt; userName;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;UserDTO{&quot; +
                &quot;userId='&quot; + userId + '\'' +
                &quot;, userName='&quot; + userName + '\'' +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MapDemo2&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;filter&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;应用：&lt;strong&gt;&lt;span&gt;用于设置条件的过滤&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220222056380-774304865.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_335e2552-86a0-4079-a66f-e5792a33700a&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_335e2552-86a0-4079-a66f-e5792a33700a&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_335e2552-86a0-4079-a66f-e5792a33700a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：Filter功能演示，过滤对2取余等于0的元素
 * @Author：chenyanbin
 * @Date：2020/12/20 10:19 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FilterDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; list= Arrays.asList(1,2,3,4,5,6,7,8,9,10&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; collect = list.stream().filter(num -&amp;gt; num % 2 == 0&lt;span&gt;).collect(Collectors.toList());
        collect.forEach(num&lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(num));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FilterDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;limit、skip、sorted函数&lt;/h2&gt;
&lt;h3&gt;sorted&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;对流进行自然排序，其中的元素&lt;span&gt;&lt;strong&gt;必须实现Comparable接口&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Comparator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：
 * @Author：chenyanbin
 * @Date：2020/12/20 11:23 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SortedDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;SpringBoot&quot;,&quot;SpringMvc&quot;,&quot;Dubbo&quot;,&quot;SpringCloud&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认升序&lt;/span&gt;
        List&amp;lt;String&amp;gt; collect =&lt;span&gt; list.stream().sorted().collect(Collectors.toList());
        System.out.println(collect);
        System.out.println(&lt;/span&gt;&quot;-----------&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义排序，根据长度升序&lt;/span&gt;
        List&amp;lt;String&amp;gt; collect1 = list.stream().sorted(Comparator.comparing(obj -&amp;gt;&lt;span&gt; obj.length())).collect(Collectors.toList());
        System.out.println(collect1);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义排序，根据长度降序&lt;/span&gt;
        List&amp;lt;String&amp;gt; collect2 = list.stream().sorted(Comparator.comparing(obj -&amp;gt;&lt;span&gt; obj.length(),Comparator.reverseOrder())).collect(Collectors.toList());
        System.out.println(collect2);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法引用的玩法&lt;/span&gt;
        List&amp;lt;String&amp;gt; collect3 =&lt;span&gt; list.stream().sorted(Comparator.comparing(String::length,Comparator.reverseOrder())).collect(Collectors.toList());
        System.out.println(collect3);

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;limit&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;截断&lt;/span&gt;&lt;/strong&gt;流使用最多只包含&lt;span&gt;&lt;strong&gt;指定数量的元素&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220233708389-1741319052.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_9b124772-475d-49cd-80de-cb74921949ce&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_9b124772-475d-49cd-80de-cb74921949ce&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9b124772-475d-49cd-80de-cb74921949ce&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：获取前3个元素
 * @Author：chenyanbin
 * @Date：2020/12/20 11:36 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LimitDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;SpringBoot&quot;,&quot;SpringMvc&quot;,&quot;Dubbo&quot;,&quot;SpringCloud&quot;&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;String&amp;gt; collect = list.stream().limit(3&lt;span&gt;).collect(Collectors.toList());
        System.out.println(collect);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;LimitDemo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;skip&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;跳过多少个元素&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220234228538-841835645.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_d04a6d0e-e8aa-4c50-93a0-a1eec8a543bf&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_d04a6d0e-e8aa-4c50-93a0-a1eec8a543bf&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d04a6d0e-e8aa-4c50-93a0-a1eec8a543bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：跳过前2个元素
 * @Author：chenyanbin
 * @Date：2020/12/20 11:41 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SkipDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;SpringBoot&quot;,&quot;SpringMvc&quot;,&quot;Dubbo&quot;,&quot;SpringCloud&quot;&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;String&amp;gt; collect = list.stream().skip(2&lt;span&gt;).collect(Collectors.toList());
        System.out.println(list);
        System.out.println(collect);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;SkipDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;allMatch和anyMatch函数&lt;/h2&gt;
&lt;h3&gt;allMatch&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;检查&lt;/strong&gt;&lt;/span&gt;是否匹配&lt;span&gt;&lt;strong&gt;所有元素&lt;/strong&gt;&lt;/span&gt;，只有&lt;span&gt;&lt;strong&gt;全部符合才返回true&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220234749431-4811734.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_3023c905-ab70-4dfc-9729-8c06007783ff&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_3023c905-ab70-4dfc-9729-8c06007783ff&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3023c905-ab70-4dfc-9729-8c06007783ff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：
 * @Author：chenyanbin
 * @Date：2020/12/20 11:46 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AllMatchDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;SpringBoot&quot;,&quot;SpringMvc&quot;,&quot;SDubbo&quot;,&quot;SpringCloud&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; b = list.stream().allMatch(str -&amp;gt; str.startsWith(&quot;S&quot;&lt;span&gt;));
        System.out.println(b);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;AllMatchDemo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;anyMatch&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;检查&lt;/strong&gt;&lt;/span&gt;是否&lt;span&gt;&lt;strong&gt;至少匹配一个元素&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220234941837-309917195.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_4aadaade-14b9-4131-8a49-2154cf3114a1&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_4aadaade-14b9-4131-8a49-2154cf3114a1&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4aadaade-14b9-4131-8a49-2154cf3114a1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：至少匹配一个返回true
 * @Author：chenyanbin
 * @Date：2020/12/20 11:48 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AnyMatchDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;SpringBoot&quot;,&quot;SpringMvc&quot;,&quot;Dubbo&quot;,&quot;SpringCloud&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; b = list.stream().anyMatch(str -&amp;gt; str.startsWith(&quot;s&quot;&lt;span&gt;));
        System.out.println(b);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;AnyMatchDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;max和min函数&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;求最大、最小&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221000254132-1813764814.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_b69d2261-7bdc-4b7c-bfc2-b5435c8586b1&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_b69d2261-7bdc-4b7c-bfc2-b5435c8586b1&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b69d2261-7bdc-4b7c-bfc2-b5435c8586b1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：求最大、最小
 * @Author：chenyanbin
 * @Date：2020/12/21 12:01 上午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MaxAndMinDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;SpringBoot&quot;,&quot;SpringMvc&quot;,&quot;Dubbo&quot;,&quot;SpringCloud&quot;&lt;span&gt;);
        String s &lt;/span&gt;= list.stream().max((str1, str2) -&amp;gt; str1.length() -&lt;span&gt; str2.length()).get();
        System.out.println(s);
        String s2 &lt;/span&gt;= list.stream().min((str1, str2) -&amp;gt; str1.length() -&lt;span&gt; str2.length()).get();
        System.out.println(s2);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MaxAndMinDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;distinct函数&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201220235507348-1930244384.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_bb835494-5ae6-4dcb-bb7d-186ae1122016&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_bb835494-5ae6-4dcb-bb7d-186ae1122016&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bb835494-5ae6-4dcb-bb7d-186ae1122016&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：对元素去重
 * @Author：chenyanbin
 * @Date：2020/12/20 11:54 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DistinctDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;SpringBoot&quot;,&quot;SpringMvc&quot;,&quot;Dubbo&quot;,&quot;SpringCloud&quot;,&quot;Dubbo&quot;&lt;span&gt;);
        System.out.println(list);
        List&lt;/span&gt;&amp;lt;String&amp;gt; collect =&lt;span&gt; list.stream().distinct().collect(Collectors.toList());
        System.out.println(collect);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;DistinctDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;并行流parallelStream&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;集合做重复的操作，如果使用串行执行会相当耗时，因此一般会采用多线程来加快，java 8的paralleStream用fork/join框架提供了并发执行能力&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221214234981-1728842524.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_8ff13f24-02fc-4f51-8738-31ac22b07bfa&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_8ff13f24-02fc-4f51-8738-31ac22b07bfa&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8ff13f24-02fc-4f51-8738-31ac22b07bfa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：ParallelStream串行流演示
 * @Author：chenyanbin
 * @Date：2020/12/21 9:41 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ParallelStreamDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; list= Arrays.asList(1,2,3,4,5,6,7,8&lt;span&gt;);
        list.stream().forEach(System.out::println);
        System.out.println(&lt;/span&gt;&quot;===============&quot;&lt;span&gt;);
        list.parallelStream().forEach(System.out::println);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ParallelStreamDemo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;注意事项&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;parallelStream里面使用外部变量时，会出现线程安全问题，集合一定要使用线程安全集合&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;reduce操作&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;根据一定的规则将Stream中的元素进行计算后返回一个唯一的值 &lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;常用方法一 &lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221220218652-1586223149.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_5de2a877-ac23-4164-b2d9-0aa0edbe263d&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_5de2a877-ac23-4164-b2d9-0aa0edbe263d&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5de2a877-ac23-4164-b2d9-0aa0edbe263d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Stream;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：Reduce功能演示
 * @Author：chenyanbin
 * @Date：2020/12/21 10:01 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReduceDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Integer sum &lt;/span&gt;= Stream.of(1, 2, 3, 4).reduce((num1, num2) -&amp;gt; num1 +&lt;span&gt; num2).get();
        System.out.println(sum);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ReduceDemo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;求一堆数的最大值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221222404481-1325380136.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_f626f4dc-4a07-4db8-95d3-4343fd465d4b&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_f626f4dc-4a07-4db8-95d3-4343fd465d4b&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f626f4dc-4a07-4db8-95d3-4343fd465d4b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Stream;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：Reduce功能演示
 * @Author：chenyanbin
 * @Date：2020/12/21 10:01 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReduceDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;求一堆数的最大值&lt;/span&gt;
        Integer maxValue = Stream.of(1, 33, 5, 6, 2).reduce((num1, num2) -&amp;gt; num1 &amp;gt; num2 ?&lt;span&gt; num1 : num2).get();
        System.out.println(maxValue);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ReduceDemo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;常用方法二&lt;/h3&gt;
&lt;p&gt;　　提供一个初始值，进行数据累加&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221221441424-647710121.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_f32d607b-b0ab-4121-ba91-ce10467afdeb&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_f32d607b-b0ab-4121-ba91-ce10467afdeb&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f32d607b-b0ab-4121-ba91-ce10467afdeb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Stream;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：Reduce功能演示
 * @Author：chenyanbin
 * @Date：2020/12/21 10:01 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReduceDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提供一个初始值，对数据进行累加操作&lt;/span&gt;
        Integer sum = Stream.of(1, 2, 3, 4).reduce(100,(num1, num2) -&amp;gt; num1 +&lt;span&gt; num2);
        System.out.println(sum);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ReduceDemo&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;collector收集器&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：
 * @Author：chenyanbin
 * @Date：2020/12/21 10:45 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CollectorDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; list= Arrays.asList(1,2,3,4,5&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; collect =&lt;span&gt; list.stream().collect(Collectors.toList());
        Set&lt;/span&gt;&amp;lt;Integer&amp;gt; collect1 = list.stream().collect(Collectors.toCollection(TreeSet::&lt;span&gt;new&lt;/span&gt;&lt;span&gt;));
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; collect2 = list.stream().collect(Collectors.toCollection(LinkedList::&lt;span&gt;new&lt;/span&gt;&lt;span&gt;));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;joining函数&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;拼接函数，Collectors.joining&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221225922073-1320599432.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_a9063602-759a-4678-8514-24ab576f349c&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_a9063602-759a-4678-8514-24ab576f349c&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a9063602-759a-4678-8514-24ab576f349c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Stream;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：字符串拼接
 * @Author：chenyanbin
 * @Date：2020/12/21 10:51 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JoinDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list= Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;&lt;span&gt;);
        String collect &lt;/span&gt;=&lt;span&gt; list.stream().collect(Collectors.joining());
        System.out.println(collect);
        System.out.println(&lt;/span&gt;&quot;==========&quot;&lt;span&gt;);
        String collect2 &lt;/span&gt;= list.stream().collect(Collectors.joining(&quot;_&quot;&lt;span&gt;));
        System.out.println(collect2);
        System.out.println(&lt;/span&gt;&quot;==========&quot;&lt;span&gt;);
        String collect3 &lt;/span&gt;= list.stream().collect(Collectors.joining(&quot;_&quot;,&quot;(&quot;,&quot;)&quot;&lt;span&gt;));
        System.out.println(collect3);
        System.out.println(&lt;/span&gt;&quot;=========&quot;&lt;span&gt;);
        String result &lt;/span&gt;= Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;).collect(Collectors.joining(&quot;,&quot;, &quot;「&quot;, &quot;」&quot;&lt;span&gt;));
        System.out.println(result);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;JoinDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;partitioningBy分组&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Collectors.partitioningBy分组，key是boolean类型 &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221230325358-983511953.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_f92b5d3d-aa92-411d-af79-87de4ae12ce6&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_f92b5d3d-aa92-411d-af79-87de4ae12ce6&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f92b5d3d-aa92-411d-af79-87de4ae12ce6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：
 * @Author：chenyanbin
 * @Date：2020/12/21 11:01 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PartitioningByDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Integer&amp;gt; list= Arrays.asList(1,2,3,4,5,6&lt;span&gt;);
        Map&lt;/span&gt;&amp;lt;Boolean, List&amp;lt;Integer&amp;gt;&amp;gt; collect = list.stream().collect(Collectors.partitioningBy(num -&amp;gt; num % 2 == 0&lt;span&gt;));
        System.out.println(collect);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PartitioningByDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;groupby分组&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;分组，Collectors.groupingBy()&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221231232988-1005376062.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_9ddabe89-8565-473e-a4c9-600e8a3c6e0f&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_9ddabe89-8565-473e-a4c9-600e8a3c6e0f&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9ddabe89-8565-473e-a4c9-600e8a3c6e0f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：根据学生所在的省份，进行分组
 * @Author：chenyanbin
 * @Date：2020/12/21 11:05 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GroupByDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Student&amp;gt; list=&lt;span&gt; Arrays.asList(
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老陈&quot;,&quot;上海&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老王&quot;,&quot;北京&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老李&quot;,&quot;上海&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老赵&quot;,&quot;广东&quot;&lt;span&gt;));
        Map&lt;/span&gt;&amp;lt;String, List&amp;lt;Student&amp;gt;&amp;gt; collect = list.stream().collect(Collectors.groupingBy(obj -&amp;gt;&lt;span&gt; obj.getProvince()));
        System.out.println(collect);
    }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String province;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student(String name, String province) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.province =&lt;span&gt; province;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getProvince() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; province;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Student{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, province='&quot; + province + '\'' +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;GroupByDemo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;counting集合统计&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;聚合函数进行统计查询，分组后统计个数&lt;/li&gt;
&lt;li&gt;Collectors.counting()：统计元素个数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;需求：统计省份的人数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202012/1504448-20201221231758940-692326789.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_409fe280-dbf0-4307-ad55-189eb54e0546&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_409fe280-dbf0-4307-ad55-189eb54e0546&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_409fe280-dbf0-4307-ad55-189eb54e0546&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Description：根据学生所在的省份，进行分组
 * @Author：chenyanbin
 * @Date：2020/12/21 11:05 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GroupByDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Student&amp;gt; list=&lt;span&gt; Arrays.asList(
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老陈&quot;,&quot;上海&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老王&quot;,&quot;北京&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老李&quot;,&quot;上海&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(&quot;老赵&quot;,&quot;广东&quot;&lt;span&gt;));
        Map&lt;/span&gt;&amp;lt;String, Long&amp;gt; collect = list.stream().collect(Collectors.groupingBy(obj -&amp;gt;&lt;span&gt; obj.getProvince(), Collectors.counting()));
        System.out.println(collect);
    }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String province;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student(String name, String province) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.province =&lt;span&gt; province;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getProvince() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; province;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Student{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, province='&quot; + province + '\'' +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;GroupByDemo&lt;/span&gt; &lt;/div&gt;
</description>
<pubDate>Mon, 21 Dec 2020 15:26:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>default关键字 在jdk1.8以前接口里面是只能有抽象方法，不能有任何方法的实现的。 在jdk1.8里面打破了这个规定，引入了新的关键字：default，使用default修饰方法，可以在接口里</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chenyanbin/p/jdk8.html</dc:identifier>
</item>
<item>
<title>2020 .NET 开发者峰会顺利在苏州落幕，相关数据很喜人以及线上直播回看汇总 - 张善友</title>
<link>http://www.cnblogs.com/shanyou/p/14170657.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanyou/p/14170657.html</guid>
<description>&lt;p&gt;在2019年上海中国.NET开发者大会的基础上，2020年12月19-20日 继续以“开源、共享、创新” 为主题的第二届中国 .NET 开发者峰会（.NET Conf China 2020）在苏州人工智能智能产业创新中心落下帷幕，本次大会以线下城市苏州为中心，覆盖北京、上海、深圳、广州、长沙、成都等地区，是中国 .NET 开发者的大聚会，今年由于疫情的特殊原因，组委会特意控制大会的参与人数为300人，加强线上直播活动，在CSDN和思否的线上直播支持下，线下参会人数突破了500人，CSDN和思否线上直播人数合计突破10万。&lt;/p&gt;
&lt;p&gt;有别于一般都是由大型企业组织、或者甚至有微软包办的其他类型技术峰会，这次峰会完全来自.NET技术圈开发者们的无偿付出。我们也可以看到许多精美的海报，这些也是来源于开发者，甚至也许就是我们身边的某位不知名的开发者。还有在活动现场的许多志愿者、主持人，这些都是对.NET 技术充满热情的优秀开发者；尤其是那些为大家带来精彩内容的老师们，他们有时候为了PPT上的每一页内容，需要花费大量的业余时间；除了这些之外，我们还能看到许多细节，如那些设计精美的PPT、那些设计精良的文化衫、甚至还有那些小巧玲珑的贴纸图案、海报，无一不是来源于社区志愿者的精心奉献。&lt;/p&gt;
&lt;p&gt;大会嘉宾阵容强大！来自微软、葡萄城、龙芯、明源云、蔚来汽车等超40位.NET领域权威技术专家齐聚苏州，他们各个“有颜有料”还爱分享，用专业的视角分享最前沿的.NET领域技术知识，用最干货、最新鲜的案例“大餐”帮助现场技术人解答困惑、举一反三。&lt;/p&gt;
&lt;p&gt;近40场热点技术专题！数万名开发者共同就各类&quot; .NET 开发和产品设计&quot;相关的前沿技术话题展开深度交流，更有来自微软、明源云等重磅技术大咖“0距离”论技，解答有关开发 .NET 应用过程中的“疑难杂症”，并与 .NET 领域开发人员互通有无，挖掘更多合作商机。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202012/510-20201221230003801-581598755.png&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/510/202012/510-20201221230041173-110538694.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;508&quot; title=&quot;image&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大会现场合影&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202012/510-20201221230055459-1305012857.png&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/510/202012/510-20201221230131959-717094274.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;601&quot; title=&quot;image&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大会讲师团队合影&lt;/p&gt;

&lt;p&gt;各大直播平台的回看视频地址也已经整理完毕，请从下方链接地址进入鉴赏：&lt;/p&gt;
</description>
<pubDate>Mon, 21 Dec 2020 15:02:00 +0000</pubDate>
<dc:creator>张善友</dc:creator>
<og:description>在2019年上海中国.NET开发者大会的基础上，2020年12月19-20日 继续以“开源、共享、创新” 为主题的第二届中国 .NET 开发者峰会（.NET Conf China 2020）在苏州人工</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/shanyou/p/14170657.html</dc:identifier>
</item>
<item>
<title>MySQL数据归档小工具推荐--mysql_archiver - 东山絮柳仔</title>
<link>http://www.cnblogs.com/xuliuzai/p/14156559.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuliuzai/p/14156559.html</guid>
<description>&lt;h3&gt;一.主要概述&lt;/h3&gt;
&lt;p&gt;MySQL数据库归档历史数据主要可以分为三种方式：一.创建编写SP、设置Event；二.通过dump导入导出；三.通过pt-archiver工具进行归档。第一种方式往往受限于同实例要求，往往被大家舍弃。第二种，性能相对较好，但是归档表较多时运维也是比较头疼的事。所以很多DBA往往采用第三种方式--&lt;strong&gt;pt-archiver。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pt-archiver&lt;/strong&gt;是Percona-Toolkit工具集中的一个组件，是一个主要用于对MySQL表数据进行归档和清除的工具。它可以将数据归档到另一张表或者是一个文件中。&lt;strong&gt;pt-archiver&lt;/strong&gt;在清除表数据的过程中并不会影响OLTP事务的查询性能。对于数据的归档，它可以归档到另一台服务器上的另一张表，也可归档到一个文件中。&lt;/p&gt;
&lt;p&gt;有一个网友通过&lt;strong&gt;Python&lt;/strong&gt;开发了将&lt;strong&gt;pt-archiver&lt;/strong&gt;打包成了一个小工具—&lt;strong&gt;mysql_archiver&lt;/strong&gt;，它基本实现了归档作业的配置化部署，使用起来挺不错。&quot;MySQL_archiver基本上实现了数据归档的自动运转，统一的归档任务调度管理、自动监控和预警、自动生成报表。在一定程度上节约了生产力，提高了运维效率。&quot;&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/dbarun/mysql_archiver&quot; target=&quot;_blank&quot;&gt;https://github.com/dbarun/mysql_archiver&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;二.&lt;strong&gt;pt-archiver&lt;/strong&gt;主要参数&lt;/h3&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;47.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;span&gt;默认值&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;span&gt;参数解释&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;--check-slave-lag&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定主从复制延迟大于选项'--max-lag'指定的值之后暂停归档操作。默认情况下，工具会检查所有的从库，但该选项只作用于指定的从库(通过DSN连接方式)。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--check-interval&lt;/td&gt;
&lt;td&gt;1s&lt;/td&gt;
&lt;td&gt;如果同时指定了选项'--check-slave-lag'，则该选项指定的时间为工具发现主从复制延迟时暂停的时间。每进行操作100行时进行一次检查。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--[no]check-charset&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;指定检查确保数据库连接时字符集和表字符集相同。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;--commit-each&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定按每次获取和归档的行数进行提交，该选项会禁用选项'--txn-size'。 在每次获取表数据并进行归档之后，在获取下一次数据和选项'--sleep'指定的休眠时间之前，进行事务提交和刷新选项'--file'指定的文件，通过选项'--limit'控制事务的大小。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--host，-h&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定连接的数据库IP地址。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--port，-P&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定连接的数据库Port端口。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--user，-u&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定连接的数据库用户。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--password，-p&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定连接的数据库用户密码。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--socket，-S&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定使用SOCKET文件连接。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;--databases，-d&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定连接的数据库&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--source&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定需要进行归档操作的表，该选项是必须指定的选项，使用DSN方式表示。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--dest&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定要归档到的目标端表，使用DSN方式表示。 如果该选项没有指定的话，则默认与选项'--source'指定源端表为相同表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;--where&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定通过WHERE条件语句指定需要归档的数据，该选项是必须指定的选项。不需要加上'WHERE'关键字，如果确实不需要WHERE条件进行限制，则指定'--where 1=1'。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td&gt;--file&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定表数据需要归档到的文件。使用类似MySQL DATE_FORMAT()格式化命名方式。 文件内容与MySQL中SELECT INTO OUTFILE语句使用相同的格式，文件命名选项如下所示： ' %Y：年，4位数(Year, numeric, four digits) %m：月，2位数(Month, numeric (01..12)) %d：日，2位数(Day of the month, numeric (01..31)) %H：小时(Hour (00..23)) %i：分钟(Minutes, numeric (00..59)) %s：秒(Seconds (00..59)) %D：数据库名(Database name) %t：表名(Table name) 例如：--file '/var/log/archive/%Y-%m-%d-%D.%t' '&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;--output-format&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定选项'--file'文件内容输出的格式。 默认不指定该选项是以制表符进行字段的分隔符，如果指定该选项，则使用','(逗号)作为字段分隔符，使用'&quot;'(双引号)将字段括起。用法示例：'--output-format=dump'。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--limit&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;指定每条语句获取表和归档表的行数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;--max-lag&lt;/td&gt;
&lt;td&gt;1s&lt;/td&gt;
&lt;td&gt;指定允许主从复制延迟时长的最大值，单位秒。如果在每次获取行数据之后主从延迟超过指定的值，则归档操作将暂停执行，暂停休眠时间为选项'--check-interval'指定的值。待休眠时间结束之后再次检查主从延迟时长，检查方法是通过从库查询的'Seconds_Behind_Master'值来确定。如果主从复制延迟一直大于该参数指定值或者从库停止复制，则操作将一直等待直到从库重新启动并且延迟小于该参数指定值.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--no-delete&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定不删除已被归档的表数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--progress&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定每多少行打印进度信息，打印当前时间，已用时间以及多少行进行归档。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--purge&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定执行的清除操作而不是归档操作。允许忽略选项'--dest'和'--file'进行操作，如果只是清除操作可以结合选项'--primary-key-only'会更高效。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--replace&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定写入选项'--dest'指定目标端表时改写INSERT语句为REPLACE语句。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--retries&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;指定归档操作遇到死锁或超时的重试次数。当重试次数超过该选项指定的值时，工具将报错退出。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--run-time&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定工具归档操作在退出之前需要运行的时间。允许的时间后缀名为s=秒，m=分，h=小时，d=天，如果没指定，默认为s。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;--[no]safe-auto-increment&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;指定不使用自增列(AUTO_INCREMENT)最大值对应的行进行归档。 该选项在进行归档清除时会额外添加一条WHERE子句以防止工具删除单列升序字段具有的具有AUTO_INCREMENT属性最大值的数据行，为了在数据库重启之后还能使用到AUTO_INCREMENT对应的值，但这会引起无法归档或清除字段对应最大值的行。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;--sleep&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定工具在通过SELECT语句获取归档数据需要休眠的时间，默认值是不进行休眠。在休眠之前事务并不会提交，并且选项'--file'指定的文件不会被刷新。如果指定选项'--commit-each'，则在休眠之前会进行事务提交和文件刷新。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--statistics&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定工具收集并打印操作的时间统计信息。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--txn-size&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;指定每个事务处理的行数。如果是0则禁用事务功能。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;--why-quit&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定工具打印当非因完成归档行数退出的原因。 在执行一个自动归档任务时该选项与选项'--run-time'一起使用非常方便，这样可以确定归档任务是否在指定的时间内完成。如果同时指定了选项'--statistics'，则会打印所有退出的原因。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;--skip-foreign-key-checks&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;指定使用语句SET FOREIGN_KEY_CHECKS = 0禁用外键检查。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;三,安装部署mysql_archiver常见错误&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 执行python db_archive_exec.py 127.0.0.1 db123 报错&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
Traceback (most recent call &lt;span&gt;last&lt;/span&gt;&lt;span&gt;):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/mysql_archiver/mysql_archiver-master/db_archive_exec.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
    import db_conn
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/mysql_archiver/mysql_archiver-master/db_conn.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
    import MySQLdb
ImportError: No module named MySQLdb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;strong&gt;解决方案:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Step 1 基础环境&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;rm&lt;/span&gt; -rf /etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/epel*
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; postgresql-devel python3-devel postgresql-devel python-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Step 2 安装setuptools&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
（&lt;span&gt;1&lt;/span&gt;）    下载    setuptools-&lt;span&gt;39.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;zip&lt;/span&gt;&lt;span&gt;
（&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;）    解压安装 python setup.py build
                python setup.py &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;step 3 安装pip&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
（&lt;span&gt;1&lt;/span&gt;）    下载 pip-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
（&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;）    安装 python setup.py &lt;span&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;step 4 安装MySQL-python&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; MySQL-python
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.报错缺少pt-archiver工具&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sh&lt;/span&gt;: pt-archiver: command not found
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;下载percona-toolkit-3.2.1_x86_64.tar.gz,安装，并且设置个软连接。&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ln&lt;/span&gt; -s /data/mysql_archiver/percona-toolkit-&lt;span&gt;3.2&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;/bin/pt-archiver /usr/local/bin/pt-archiver
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.缺少文档&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;exceptions.Exception&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&lt;span&gt;
[Errno &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] No such &lt;span&gt;file&lt;/span&gt; or directory: u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/software/python_script/db_archive_XXXXdb_XXXtablename.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解决方案:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建文档: /software/python_script&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.字符集问题&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Character set mismatch: --source DSN uses utf8, table uses utf8mb4.  You can disable this check by specifying --no-check-charset.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解决方案:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;修改db_archive_exec.py可执行文件，针对pt-archiver添加参数 --no-check-charset&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;5.参数设置报错&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
Usage: pt-archiver [OPTIONS] --source DSN --&lt;span&gt;where WHERE

Errors &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; command-&lt;span&gt;line arguments:
  &lt;/span&gt;* --txn-size and --commit-&lt;span&gt;each are mutually exclusive.

pt&lt;/span&gt;-archiver nibbles records from a MySQL table.  The --source and --&lt;span&gt;dest
arguments use DSN syntax; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; COPY is yes, --dest defaults to the key&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s value&lt;/span&gt;
from --source.  For &lt;span&gt;more&lt;/span&gt; details, please use the --help option, or try &lt;span&gt;'&lt;/span&gt;&lt;span&gt;perldoc&lt;/span&gt;
/usr/local/bin/pt-archiver&lt;span&gt;'&lt;/span&gt;&lt;span&gt; for complete documentation.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 解决方案:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pt-archiver去掉参数 --commit-each&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;6.Cannot find encoding &quot;utf8mb4&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;报错信息:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Cannot &lt;span&gt;find&lt;/span&gt; encoding &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8mb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; at /usr/local/bin/pt-archiver line &lt;span&gt;6711&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/780228/202012/780228-20201218190349963-2134796456.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 解决方案:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pt-archiver去掉参数 --bulk-insert --bulk-delete&lt;/p&gt;

&lt;h3&gt;四.主要参考资料&lt;/h3&gt;
&lt;p&gt;1.MySQL数据归档实战-Python和pt-archiver的强强结合&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/n88lpo/article/details/78905528?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-14&amp;amp;spm=1001.2101.3001.4242&lt;/p&gt;
&lt;p&gt;2.MySQL数据归档小工具&lt;/p&gt;
&lt;p&gt;https://github.com/dbarun/mysql_archiver#readme&lt;/p&gt;
&lt;p&gt;3.在linux下安装MySQLdb及基本操作&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/blogsme/archive/2012/12/12/2814588.html&lt;/p&gt;
&lt;p&gt;4.pt工具之pt-archiver&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/yhq1314/p/10601801.html&lt;/p&gt;
&lt;p&gt;5.linux下pip的安装步骤及使用详解&lt;/p&gt;
&lt;p&gt;https://www.jb51.net/article/118035.htm&lt;/p&gt;
&lt;p&gt;6.Percona-Toolkit 之 pt-archiver 总结&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/dbabd/p/10721857.html&lt;/p&gt;
</description>
<pubDate>Mon, 21 Dec 2020 14:31:00 +0000</pubDate>
<dc:creator>东山絮柳仔</dc:creator>
<og:description>一.主要概述 MySQL数据库归档历史数据主要可以分为三种方式：一.创建编写SP、设置Event；二.通过dump导入导出；三.通过pt-archiver工具进行归档。第一种方式往往受限于同实例要求，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xuliuzai/p/14156559.html</dc:identifier>
</item>
<item>
<title>k8s之深入解剖Pod（二） - Liusy01</title>
<link>http://www.cnblogs.com/liusy01/p/14170491.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liusy01/p/14170491.html</guid>
<description>&lt;p&gt;目录：&lt;/p&gt;
&lt;p&gt;　　Pod配置管理：ConfigMap&lt;/p&gt;
&lt;p&gt;　　容器内获取Pod信息：Downward API&lt;/p&gt;
&lt;p&gt;　　Pod生命周期和重启策略&lt;/p&gt;
&lt;p&gt;　　Pod健康检查&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、ConfigMap&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;将应用所需的配置信息与程序进行分离，可以使应用程序更好的被复用，通过不同的配置实现更灵活的功能。如果将应用打包成镜像，再用环境变量或者外挂文件的方式挂载配置，在大型容器集群中会变得异常繁琐，所以出现了统一的配置管理：ConfigMap&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）ConfigMap：容器应用的配置管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;典型用法如下：&lt;/p&gt;
&lt;p&gt;1、生成为容器内的环境变量&lt;/p&gt;
&lt;p&gt;2、设置容器启动命令的启动参数（需设置为环境变量）&lt;/p&gt;
&lt;p&gt;3、以Volume的形式挂载为容器内部的文件或目录&lt;/p&gt;
&lt;p&gt;ConfigMap以一个或多个key：value的形式保存在k8s系统中供应用使用，既可以用于表示一个变量的值，也可以表示一个完整配置文件的内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）创建方式&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1、通过yaml文件进行创建&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-1
data:
  home_path: /usr/soft
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;需要将配置定义在data下面，上述yaml文件中在data中定义了一个key是home_path，value是/usr/soft的配置。&lt;/p&gt;
&lt;p&gt;使用如下命令创建：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
kubectl create -f cm_1.yaml
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-1cd612617c5970665f2ebcb1fd14887c_720w.jpg&quot; width=&quot;461&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;461&quot; data-rawheight=&quot;73&quot; data-original=&quot;https://pic1.zhimg.com/v2-1cd612617c5970665f2ebcb1fd14887c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-1cd612617c5970665f2ebcb1fd14887c_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;查看创建的ConfigMap:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
kubectl get cm
或
kubectl get configmap
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-6228c4196ed0459190a93e5abfad8fc8_720w.jpg&quot; width=&quot;393&quot; class=&quot;content_image lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;393&quot; data-rawheight=&quot;75&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-6228c4196ed0459190a93e5abfad8fc8_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;查看ConfigMap的详细内容：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
kubectl describe cm/cm-1
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-4fc775df0eafa14d70cc517d1bb1ed00_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;240&quot; data-original=&quot;https://pic1.zhimg.com/v2-4fc775df0eafa14d70cc517d1bb1ed00_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-4fc775df0eafa14d70cc517d1bb1ed00_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2、通过kubectl命令行创建&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;直接通过kubectl create configmap，可使用参数--from-file或--from-literal指定内容，并且可以在一行命令中指定多个参数。&lt;/p&gt;
&lt;p&gt;（1）通过--from-file参数从文件中进行创建，可以指定key的名称，也可以在一个命令行中创建包含多个key的ConfigMap&lt;/p&gt;
&lt;p&gt;例如：在当前目录下创建一个文件名为config_1.conf，文件内容就是“value1”&lt;/p&gt;
&lt;p&gt;使用如下命令创建configmap，名为config-1&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
kubectl create configmap config-1 --from-file=config_1.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;查看：其会以文件名为key，文件内容为value创建一条数据&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-bd7fe04e01f33de97e20c7af97d66e53_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;217&quot; data-original=&quot;https://pic4.zhimg.com/v2-bd7fe04e01f33de97e20c7af97d66e53_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-bd7fe04e01f33de97e20c7af97d66e53_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;（2）通过--from-file参数从目录中进行创建，该目录下的每个配置文件名都被设置为key，文件的内容被设置为value&lt;/p&gt;
&lt;p&gt;例如：在configmap目录下由三个文件&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-027d178771ea3345f2fbc0d54bf38ad2_720w.jpg&quot; width=&quot;482&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;482&quot; data-rawheight=&quot;98&quot; data-original=&quot;https://pic3.zhimg.com/v2-027d178771ea3345f2fbc0d54bf38ad2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-027d178771ea3345f2fbc0d54bf38ad2_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;使用如下命令创建：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
kubectl create configmap cm-name --from-file=file-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-c21be0f9c7cd73bc5f4db14ba7955c20_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;92&quot; data-original=&quot;https://pic1.zhimg.com/v2-c21be0f9c7cd73bc5f4db14ba7955c20_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c21be0f9c7cd73bc5f4db14ba7955c20_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;查看详细数据：其会以文件名作为key，文件内容作为value&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-a5485651c7469ba4b644b4cc930c29b6_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;646&quot; data-original=&quot;https://pic3.zhimg.com/v2-a5485651c7469ba4b644b4cc930c29b6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-a5485651c7469ba4b644b4cc930c29b6_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;（3）--from-literal从文本中进行创建，直接将指定的key=value创建为configmap的内容&lt;/p&gt;
&lt;p&gt;例如：创建一个key为name，value为Liusy的configmap数据&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
kubectl create configmap cm-3 --from-literal=name=liusy
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-edfcf3354b382735cf1b6847435f91e3_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;280&quot; data-original=&quot;https://pic4.zhimg.com/v2-edfcf3354b382735cf1b6847435f91e3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-edfcf3354b382735cf1b6847435f91e3_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;（3）ConfigMap使用&lt;/p&gt;
&lt;p&gt;以上述常见的cm-1为例&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-1
data:
  home_path: /usr/soft
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;1、环境变量方式&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;本文创建一个Pod运行着nginx实例，在环境变量中使用cm-1的配置&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: cm-nginx
spec:
  containers:
  - name: cm-nginx
    image: nginx
    imagePullPolicy: IfNotPresent
    env:
    - name: home
      valueFrom:
        configMapKeyRef:
          name: cm-1
          key: home_path
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;创建好Pod后进入容器：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-70523236e189d4d130e4c8fe0c11bc88_720w.jpg&quot; width=&quot;510&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;510&quot; data-rawheight=&quot;57&quot; data-original=&quot;https://pic1.zhimg.com/v2-70523236e189d4d130e4c8fe0c11bc88_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-70523236e189d4d130e4c8fe0c11bc88_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;查看环境变量：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-1967eda78d45324a0996ee6935f7db19_720w.jpg&quot; width=&quot;572&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;572&quot; data-rawheight=&quot;76&quot; data-original=&quot;https://pic2.zhimg.com/v2-1967eda78d45324a0996ee6935f7db19_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-1967eda78d45324a0996ee6935f7db19_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;可以看到，home环境变量的值正是cm-1中配置的路径&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2、volumeMount模式&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;比如定义一个Pod，其中定义一个volume，volume中引用名为cm-1的configmap，将key为home_path的value值写入homtpath.txt文件中，在容器中的configfiles目录上挂载这个volume&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: mount-pod
spec:
  volumes:
  - name: cm-volume
    configMap:
      name: cm-1
      items:
      - key: home_path
        path: homepath.txt
  containers:
  - name: mount-pod
    image: nginx
    imagePullPolicy: IfNotPresent
    volumeMounts:
    - name: cm-volume
      mountPath: /configfiles
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;创建Pod后进入容器：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-f70da483d73a284c778cc747728bad69_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;140&quot; data-original=&quot;https://pic2.zhimg.com/v2-f70da483d73a284c778cc747728bad69_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-f70da483d73a284c778cc747728bad69_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;可以看到，configfiles目录下确实生成了一个homepath.txt文件，来查看以下文件的内容：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-cc7399fed25b1b4ab4c65245ec49a33f_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;174&quot; data-original=&quot;https://pic4.zhimg.com/v2-cc7399fed25b1b4ab4c65245ec49a33f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cc7399fed25b1b4ab4c65245ec49a33f_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;（4）ConfigMap使用限制&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ConfigMap必须在Pod之前创建&lt;/li&gt;
&lt;li&gt;ConfigMap有Namespace限制，只有在同一Namespace下才可使用&lt;/li&gt;
&lt;li&gt;静态Pod无法使用ConfigMap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、容器内获取Pod信息：Downward API&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Pod创建之后，会被分配唯一的名字、IP地址，并处于某个Namespace中，那么这些信息在Pod中应该怎么获取呢，就是利用Downward API。&lt;/p&gt;
&lt;p&gt;Downward API可以通过以下两种方式将Pod信息注入容器内部。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1、环境变量&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;用于单个变量（也就是在Pod定义中是单值的，非数组），可以将Pod信息和Container信息注 入容器内部。&lt;/p&gt;
&lt;p&gt;比如下例中将Pod的name、namespace、ip注入为环境变量&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: pod-name
  namespace: kube-system
spec:
  containers:
  - name: pod-name
    image: nginx
    imagePullPolicy: IfNotPresent
    env:
    - name: name
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: ns
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: ip
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;创建Pod之后进入容器查看相应的环境变量：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-a428ea96e2103aff34b6e6cba5d83be0_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;146&quot; data-original=&quot;https://pic1.zhimg.com/v2-a428ea96e2103aff34b6e6cba5d83be0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a428ea96e2103aff34b6e6cba5d83be0_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;又比如下例中将resource注入为环境变量&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: pod-name1
spec:
  containers:
  - name: c1
    image: nginx
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: &quot;125m&quot;
        memory: &quot;32Mi&quot;
      limits:
        cpu: &quot;250m&quot;
        memory: &quot;64Mi&quot;
    env:
    - name: req_cpu
      valueFrom:
        resourceFieldRef:
          containerName: c1
          resource: requests.cpu
    - name: lim_cpu
      valueFrom:
        resourceFieldRef:
          containerName: c1
          resource: limits.cpu
    - name: lim_me
      valueFrom:
        resourceFieldRef:
          containerName: c1
          resource: limits.memory
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;创建Pod后进入容器查看：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-78d00295f682cef2197d709166493724_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;156&quot; data-original=&quot;https://pic1.zhimg.com/v2-78d00295f682cef2197d709166493724_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-78d00295f682cef2197d709166493724_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2、volume挂载&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;将数组类信息生成为文件并挂载到容器内部。例如labels、annotations等&lt;/p&gt;
&lt;p&gt;例如下例中将label信息通过volume挂载到容器的label目录&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: pod-volume
  labels:
    name: pod-volume
    age: zero
spec:
  containers:
  - name: c1
    image: nginx
    imagePullPolicy: IfNotPresent
    volumeMounts:
    - name: v-l
      mountPath: /labels
      readOnly: false
  volumes:
  - name: v-l
    downwardAPI:
      items:
      - path: &quot;labels&quot;
        fieldRef:
          fieldPath: metadata.labels
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;上述yaml中创建了一个volume，通过items设置，会生成path值的文件，文件的内容就是相应的信息，在容器中将volume挂载到/labels目录下：&lt;/p&gt;
&lt;p&gt;创建之后进入容器查看文件：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-cf9a15ea4d4d0978d2727f1331ce145c_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;211&quot; data-original=&quot;https://pic1.zhimg.com/v2-cf9a15ea4d4d0978d2727f1331ce145c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-cf9a15ea4d4d0978d2727f1331ce145c_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、Pod生命周期和重启策略&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Pod的状态包括以下几种：&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-1391c7fef6e8595725ccc2f93a40767e_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;270&quot; data-original=&quot;https://pic3.zhimg.com/v2-1391c7fef6e8595725ccc2f93a40767e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1391c7fef6e8595725ccc2f93a40767e_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;Pod的重启策略应用于Pod内的所有容器，并且仅在Pod所处的Node上有kubelet进行判断和重启操作，当某个容器异常退出或者健康检查失败时，kubelet将根据RestartPolicy设置进行相应的操作。在spec.restartPolicy中配置相应的重启策略&lt;/p&gt;
&lt;p&gt;重启策略有如下三个：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
spec:
  restartPolicy: [Always|Never|OnFailure]
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Always：Pod一旦终止运行，kubelet都会进行重启，这也是默认值&lt;/li&gt;
&lt;li&gt;Never：不会进行重启&lt;/li&gt;
&lt;li&gt;OnFailure：容器非正常退出（即是退出码不为0），kubelet会重启容器，反之不会重启。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;kubelet重启失效容器的时间间隔以sync-frequency乘以2n来计算，例如1,2,4,8等，最长延时5分钟，且在重启10分钟之后重置该时间。&lt;/p&gt;
&lt;p&gt;Pod的重启策略与控制方式息息相关，当前可用于管理Pod的控制器包括RC，Job，DaemonSet及直接通过kubelet管理的静态Pod，每种控制器对Pod的重启策略如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;RC、DaemonSet：必须设置为Always，保证容器持续运行&lt;/li&gt;
&lt;li&gt;Job：OnFailure或Never，执行完就退出&lt;/li&gt;
&lt;li&gt;kubelet：在Pod失效时自动重启它，不论RestartPolicy是什么值，并且也不会进行健康检查。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、Pod健康检查&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;k8s提供了Pod健康检查机制，对于检测到故障服务会被及时自动下线，以及通过重启服务的方式使服务自动恢复。可通过两类探针来检查：LivenessProbe和ReadinessProbe&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1、LivenessProbe&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;用于判断容器是否存活（running状态），如果探测到容器不健康，则kubelet杀掉此容器，并根据重启策略做相应的处理。&lt;/p&gt;
&lt;p&gt;kubelet定期执行LivenessProbe来判断容器的健康状态，有三种实现方式：&lt;/p&gt;
&lt;p&gt;（1）ExecAction&lt;/p&gt;
&lt;p&gt;在容器内部执行一个命令，如果返回0，则表明容器健康。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: live-exec
spec:
  containers:
  - name: live-exec
    image: nginx
    args:
    - /bin/sh
    - -c
    - echo ok &amp;gt; /tmp/health;sleep 10;rm -rf /tmp/health;sleep 1000
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/health
      initialDelaySeconds: 5
      timeoutSeconds: 1
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;上述yaml是在容器启动时将ok输出到/tem/health文件中，10s过后删除此文件。看效果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
kubectl describe  pods/live-exec
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-c1ec91b74cf7f4f80bad1d60a9401b03_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;121&quot; data-original=&quot;https://pic4.zhimg.com/v2-c1ec91b74cf7f4f80bad1d60a9401b03_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-c1ec91b74cf7f4f80bad1d60a9401b03_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;当文件被删除之后，探针探测到容器不健康，所以会进行重启&lt;/p&gt;
&lt;p&gt;（2）TCPSocketAction&lt;/p&gt;
&lt;p&gt;通过容器的IP地址和端口号进行TCP检查，如果能建立TCP连接，则说明容器健康&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: live-tcp
spec:
  containers:
  - name: live-tcp
    image: nginx
    imagePullPolicy: IfNotPresent
    livenessProbe:
      tcpSocket:
        port: 80
      initialDelaySeconds: 15
      timeoutSeconds: 1
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;（3）HttpGetAction&lt;/p&gt;
&lt;p&gt;通过容器的IP、端口及路径调用HTTP Get方法，响应码大于200，小于400，容器健康&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: live-httpget
spec:
  containers:
  - name: live-httpget
    image: nginx
    imagePullPolicy: IfNotPresent
    livenessProbe:
      httpGet:
        path: /_status/healthz
        port: 80
        host: host
        scheme: HTTP
        httpHeaders:
        - name: string
          value: string
      initialDelaySeconds: 15
      timeoutSeconds: 1
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;2、ReadinessProbe&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;用于判断容器是否启动完成（ready状态），可接受请求。如果检测到失败，则Pod的状态将被修改。Endpoint Controller将从service的Endpoint中删除包含该容器所在Pod的Endpoint，此Pod不再接收请求。&lt;/p&gt;
&lt;p&gt;此探针使用方式和上述livenessProbe相同。&lt;br/&gt;例如：ExecAction方式&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: read-exec
spec:
  containers:
  - name: read-exec
    image: nginx
    command: [&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;mkdir /health;sleep 10;rm -rf /health;sleep 10;mkdir /health;sleep 600&quot;]
    readinessProbe:
      exec:
        command: [&quot;ls&quot;,&quot;/health&quot;]
      initialDelaySeconds: 5
      timeoutSeconds: 1
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;上述yaml在容器启动创建一个目录，10s后删除，再10s后创建此目录，看容器健康检测情况&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-28f61930d937702cd97814c3293d8d62_720w.jpg&quot; width=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;108&quot; data-original=&quot;https://pic3.zhimg.com/v2-28f61930d937702cd97814c3293d8d62_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-28f61930d937702cd97814c3293d8d62_b.jpg&quot; data-lazy-status=&quot;ok&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;其在检测出容器启动失败后会定时去检测，不会重启容器，直至检测到容器健康。&lt;/p&gt;
&lt;p&gt;对于每种探测方式，都需要配置以下两个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;initialDelaySeconds：启动后多久进行健康检查，单位是秒&lt;/li&gt;
&lt;li&gt;timeoutSeconds：健康检查发送请求后的等待响应的超时时间，单位是s，超时未响应，则会重启该pod&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;===============================&lt;/p&gt;
&lt;p&gt;我是Liusy，一个喜欢健身的程序员。&lt;/p&gt;
&lt;p&gt;欢迎关注微信公众号【Liusy01】，一起交流Java技术及健身，获取更多干货，领取Java进阶干货，领取最新大厂面试资料，一起成为Java大神。&lt;/p&gt;
&lt;p&gt;来都来了，关注一波再溜呗。&lt;/p&gt;
</description>
<pubDate>Mon, 21 Dec 2020 14:30:00 +0000</pubDate>
<dc:creator>Liusy01</dc:creator>
<og:description>目录： Pod配置管理：ConfigMap 容器内获取Pod信息：Downward API Pod生命周期和重启策略 Pod健康检查 一、ConfigMap 将应用所需的配置信息与程序进行分离，可以使</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/liusy01/p/14170491.html</dc:identifier>
</item>
<item>
<title>Solr：Slor初识（概述、Windows版本的安装、添加IK分词器） - 怀梦想，致远方</title>
<link>http://www.cnblogs.com/zhai1997/p/14165911.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhai1997/p/14165911.html</guid>
<description>&lt;p&gt;1、Solr概述&lt;/p&gt;
&lt;p&gt;（1）Solr与数据库相比的优势&lt;/p&gt;
&lt;p&gt;搜索速度更快、搜索结果能够按相关度排序、搜索内容格式不固定等&lt;/p&gt;
&lt;p&gt;（2）Lucene与Solr的区别&lt;/p&gt;
&lt;p&gt;Lucene提供了完整的查询引擎和索引引擎，目的是为软件开发人员提供一个简单易用的工具包&lt;/p&gt;
&lt;p&gt;Solr的目标是打造一款企业级的搜索引擎系统，它是一个搜索引擎服务，可以独立运行，通过Solr可以非常快速的构建企业的搜索引擎，通过Solr也可以高效的完成站内搜索功能。&lt;/p&gt;

&lt;p&gt;2、Solr的Windows版本的安装&lt;/p&gt;
&lt;p&gt;（1）目录结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201220225657752-316508141.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; Solr的启动在bin目录下，用的是内置的服务器不是很稳定&lt;/p&gt;
&lt;p&gt;contrib：插件&lt;/p&gt;
&lt;p&gt;dist：jar包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201220230118102-456294674.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）安装&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;将Solr的example的webapps目录下的solr.war复制到tomcat的webapps目录下并解压&lt;/li&gt;
&lt;li&gt;将example目录下的jar包放到tomcat的lib目录下：&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201220230807732-1083769009.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt; 配置家目录：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201220231030858-949404951.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 目录的内容是从solr中复制过来的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201220231107494-1015435920.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 在配置文件中配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201220231218157-620937281.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &amp;lt;env-entry&amp;gt;
       &amp;lt;env-entry-name&amp;gt;solr/home&amp;lt;/env-entry-name&amp;gt;
       &amp;lt;env-entry-value&amp;gt;D:\Program_files\solr\solrhome&amp;lt;/env-entry-value&amp;gt;
       &amp;lt;env-entry-type&amp;gt;java.lang.String&amp;lt;/env-entry-type&amp;gt;
    &amp;lt;/env-entry&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）启动&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;先在bin目录下启动tomcat并访问Solr&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201220232127326-1842074451.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、Solr的后台界面&lt;/p&gt;
&lt;p&gt;（1）添加核&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221205854181-564366990.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 在Solr的家目录复制一个collection并修改目录的名称，打开目录将配置文件中的name属性也更改为目录的名称&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221210024618-1682476857.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221210047354-815079841.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （2）功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221210516074-607448194.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; analysis：分词器&lt;/p&gt;
&lt;p&gt;dataimport：导入数据库数据&lt;/p&gt;
&lt;p&gt;Documents：进行增删改查&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221211246203-267741266.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; Query：查询&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221211338145-33212849.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; Files：配置文件（在核的conf目录下）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221211423647-1180363646.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; Ping：测试服务是否存在&lt;/p&gt;
&lt;p&gt;（3）schema.xml配置文件中的域&lt;/p&gt;
&lt;p&gt;域：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;comments&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keywords&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;resourcename&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;last_modified&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;links&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;动态域：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_is&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_ss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_l&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_ls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_general&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_bs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_fs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;dynamicField name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*_ds&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拷贝域：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;copyField source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dest=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;copyField source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dest=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;copyField source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;manu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dest=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;copyField source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;features&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dest=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;copyField source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dest=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;copyField source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;manu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dest=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;manu_exact&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际搜索的是text域，就是将多个域进行合并，只搜索一个域&lt;/p&gt;

&lt;p&gt;4、配置IK分词器&lt;/p&gt;
&lt;p&gt;（1）导入jar包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221215051591-1384238717.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （2）新建classes目录并创建配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221215320346-1317822973.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （3）自定义域的类型&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &amp;lt;fieldType name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_ik&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;solr.TextField&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;analyzer &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.wltea.analyzer.lucene.IKAnalyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
   &amp;lt;/fieldType&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）自定义域&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title_ik&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_ik&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
   &amp;lt;field name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content_ik&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text_ik&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; indexed=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stored=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; multiValued=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）重启测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1392562/202012/1392562-20201221220251005-1727118128.png&quot; alt=&quot;&quot; width=&quot;948&quot; height=&quot;263&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 21 Dec 2020 14:23:00 +0000</pubDate>
<dc:creator>怀梦想，致远方</dc:creator>
<og:description>1、Solr概述 （1）Solr与数据库相比的优势 搜索速度更快、搜索结果能够按相关度排序、搜索内容格式不固定等 （2）Lucene与Solr的区别 Lucene提供了完整的查询引擎和索引引擎，目的是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhai1997/p/14165911.html</dc:identifier>
</item>
</channel>
</rss>