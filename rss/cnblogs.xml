<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>002.Docker安装部署 - 木二</title>
<link>http://www.cnblogs.com/itzgr/p/10193650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itzgr/p/10193650.html</guid>
<description>&lt;p&gt;一 docker安装-CentOS系统&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;1.1 docker自动安装脚本&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# wget -qO- https://get.docker.com/ | sh
&lt;span&gt;  2&lt;/span&gt; 或——
&lt;span&gt;  3&lt;/span&gt; root@docker:~# curl -sSL https://get.docker.com/ | sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：若出现以下错误，可使用yum解决依赖——&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Delta RPMs disabled because /usr/bin/yum provides applydeltarpmnot installed.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; yum provides applydeltarpm                 #查询缺少的applydeltarpm所在包
&lt;span&gt;  2&lt;/span&gt; yum install libdevmapper* -y
&lt;span&gt;  3&lt;/span&gt; yum -y install deltarpm                 #安装此包
&lt;span&gt;  4&lt;/span&gt; yum install -y epel-release                     #有可能会依旧提示错误，安装此包即可
&lt;span&gt;  5&lt;/span&gt; root@docker:~# docker version           #查询docker版本
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;1.2 docker yum安装&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# yum -y remove docker \
&lt;span&gt;  2&lt;/span&gt;                   docker-client \
&lt;span&gt;  3&lt;/span&gt;                   docker-client-latest \
&lt;span&gt;  4&lt;/span&gt;                   docker-common \
&lt;span&gt;  5&lt;/span&gt;                   docker-latest \
&lt;span&gt;  6&lt;/span&gt;                   docker-latest-logrotate \
&lt;span&gt;  7&lt;/span&gt;                   docker-logrotate \
&lt;span&gt;  8&lt;/span&gt;                   docker-selinux \
&lt;span&gt;  9&lt;/span&gt;                   docker-engine-selinux \
&lt;span&gt; 10&lt;/span&gt;                   docker-engine                                #若存在旧版需要全新安装可卸载旧版
&lt;span&gt; 11&lt;/span&gt; root@docker:~# yum -y update
&lt;span&gt; 12&lt;/span&gt; root@docker:~# yum install -y yum-utils \
&lt;span&gt; 13&lt;/span&gt; device-mapper-persistent-data \
&lt;span&gt; 14&lt;/span&gt; lvm2
&lt;span&gt; 15&lt;/span&gt; root@docker:~# yum-config-manager \
&lt;span&gt; 16&lt;/span&gt; --add-repo \
&lt;span&gt; 17&lt;/span&gt; https://download.docker.com/linux/centos/docker-ce.repo         #配置docker源
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：也可使用国内阿里云——&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# yum-config-manager \
&lt;span&gt;  2&lt;/span&gt; --add-repo \
&lt;span&gt;  3&lt;/span&gt; http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;span&gt;  4&lt;/span&gt; root@docker:~# yum-config-manager --enable docker-ce-edge               #开启源
&lt;span&gt;  5&lt;/span&gt; root@docker:~# yum-config-manager --enable docker-ce-test               #开启源
&lt;span&gt;  6&lt;/span&gt; root@docker:~# yum -y install docker-ce                         #安装docker
&lt;span&gt;  7&lt;/span&gt; root@docker:~# yum -y install docker-registry                   #安装docker仓库
&lt;span&gt;  8&lt;/span&gt; root@docker:~# systemctl start docker.service
&lt;span&gt;  9&lt;/span&gt; root@docker:~# systemctl enable docker.service                  #设为开机启动
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 align=&quot;left&quot;&gt;二 docker安装-Ubuntu系统&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;2.1 更新源数据库&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# apt-get remove docker docker-engine docker.io       #卸载旧版
&lt;span&gt;  2&lt;/span&gt; root@docker:~# sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;2.2 安装软件包&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# sudo apt-get -y install \
&lt;span&gt;  2&lt;/span&gt; apt-transport-https \
&lt;span&gt;  3&lt;/span&gt; ca-certificates \
&lt;span&gt;  4&lt;/span&gt; curl \
&lt;span&gt;  5&lt;/span&gt; software-properties-common                      #安装软件包以允许apt通过HTTPS使用存储库
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;2.3 添加Docker的官方GPG密钥&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201812/680719-20181229073200812-49089005.png&quot;&gt;&lt;img title=&quot;05_thumb1&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201812/680719-20181229073201219-511354352.png&quot; alt=&quot;05_thumb1&quot; width=&quot;732&quot; height=&quot;32&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：也可添加阿里云GPG：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.4 验证秘钥指纹&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# sudo apt-key fingerprint 0EBFCD88
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201812/680719-20181229073201409-1839680357.png&quot;&gt;&lt;img title=&quot;06_thumb1&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201812/680719-20181229073201575-1579882116.png&quot; alt=&quot;06_thumb1&quot; width=&quot;549&quot; height=&quot;78&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;2.5 配置仓库并在此更新源&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# sudo add-apt-repository \
&lt;span&gt;  2&lt;/span&gt; &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
&lt;span&gt;  3&lt;/span&gt; $(lsb_release -cs) \
&lt;span&gt;  4&lt;/span&gt; stable&quot;
&lt;span&gt;  5&lt;/span&gt; root@docker:~# sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：国内建议配置为阿里仓库，命令如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;
&lt;span&gt;  2&lt;/span&gt; root@docker:~# sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;2.6 安装docker ce&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# sudo apt-get -y install docker-ce
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;2.7 测试并查看版本&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# sudo docker run hello-world
&lt;span&gt;  2&lt;/span&gt; root@docker:~# sudo docker version
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201812/680719-20181229073201786-1789467923.png&quot;&gt;&lt;img title=&quot;07_thumb1&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201812/680719-20181229073202093-729468072.png&quot; alt=&quot;07_thumb1&quot; width=&quot;383&quot; height=&quot;304&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：若存在旧版本可执行以下命令卸载旧版本——&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;apt-get remove docker docker-engine docker-common container-selinux docker-selinux&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;三 docker相关优化&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;3.1 配置docker加速器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# mkdir -p /etc/docker
&lt;span&gt;  2&lt;/span&gt; root@docker:~# vim /etc/docker/daemon.json
&lt;span&gt;  3&lt;/span&gt; {
&lt;span&gt;  4&lt;/span&gt;    &quot;registry-mirrors&quot;: [&quot;https://dbzucv6w.mirror.aliyuncs.com&quot;]
&lt;span&gt;  5&lt;/span&gt; }
&lt;span&gt;  6&lt;/span&gt; root@docker:~# cat /etc/docker/daemon.json
&lt;span&gt;  7&lt;/span&gt; {
&lt;span&gt;  8&lt;/span&gt;   &quot;registry-mirrors&quot;: [&quot;https://dbzucv6w.mirror.aliyuncs.com&quot;]
&lt;span&gt;  9&lt;/span&gt; }
&lt;span&gt; 10&lt;/span&gt; root@docker:~# systemctl daemon-reload
&lt;span&gt; 11&lt;/span&gt; root@docker:~# systemctl restart docker
&lt;span&gt; 12&lt;/span&gt; root@docker:~# sudo systemctl enable docker
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：docker通过https://hub.docker.com/搭建镜像共享生态系统，由于从国外拉取源比较慢，建议配置国内阿里加速器。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.2 更改docker镜像路径&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; root@docker:~# vi /usr/lib/systemd/system/docker.service
&lt;span&gt;  2&lt;/span&gt; ExecStart=/usr/bin/dockerd-current --graph=/data/docker         #仅需要追加新路径
&lt;span&gt;  3&lt;/span&gt; root@docker:~# systemctl daemon-reload
&lt;span&gt;  4&lt;/span&gt; root@docker:~# systemctl restart docker
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 28 Dec 2018 23:32:00 +0000</pubDate>
<dc:creator>木二</dc:creator>
<og:description>一 docker安装-CentOS系统 1.1 docker自动安装脚本 注意：若出现以下错误，可使用yum解决依赖—— Delta RPMs disabled because /usr/bin/yu</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itzgr/p/10193650.html</dc:identifier>
</item>
<item>
<title>里氏替换原则 - LieBrother</title>
<link>http://www.cnblogs.com/liebrother/p/10193334.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liebrother/p/10193334.html</guid>
<description>&lt;p&gt;个人博客原文：&lt;br/&gt;&lt;a href=&quot;http://www.liebrother.com/liskov-substitution-principle&quot;&gt;里氏替换原则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.liebrother.com/upload/1a0c50c39c034d05bcf77c2b591520d9_0013_01.jpg&quot; alt=&quot;景&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;设计模式六大原则之二：里氏替换原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;姓名&lt;/strong&gt; ：里氏替换原则&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;英文名&lt;/strong&gt; ：Liskov Substitution Principle&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;座右铭&lt;/strong&gt; ：&lt;/p&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.&lt;br/&gt;如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.&lt;br/&gt;所有引用基类的地方必须能透明地使用其子类的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这 2 个定义来自《设计模式之禅》，比较干巴巴，不认真思考起来可能不太容易懂。简单来说就是定义了什么是父子。在现实生活中，什么是父子？就是生你的那个男人和你的关系就是父子（父女）。而这里定义的就是假如 A 能胜任 B 干的所有事情，那 B 就是 A 的父亲，也就是儿子要会父亲的所有能活，儿子活得再烂也要有父亲的水平。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;价值观&lt;/strong&gt; ：很显然，比较传统，严父出孝子。儿子必须要有父亲的能耐，最好青出于蓝胜于蓝。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;伴侣&lt;/strong&gt; ：估计有个贤惠的老婆，才能有这么优秀的儿子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人介绍&lt;/strong&gt; ：我比较严厉，也是为了生存没办法，只有一辈一辈地变优秀，一直坚持下去，家族就会越来越好。这样就可以富过三代，你看你们人类不是经常说富不过三代。。。扎心了老铁，老子还是富零代。&lt;/p&gt;
&lt;h3 id=&quot;老爹开车前方注意&quot;&gt;老爹开车，前方注意&lt;/h3&gt;
&lt;p&gt;里氏替换原则定义了什么是父子，还有一点要注意的，就是儿子不能在父亲会的技能上搞“创新”。&lt;br/&gt;比如父亲会做红烧排骨，儿子在新东方烹饪学校中学到了一招，在红烧排骨里面加糖和醋，变成红烧糖醋排骨，更加美味，看代码，儿子在父亲的基础红烧排骨上加了糖醋，好像没啥问题。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class Father1 {

    public void braisedRibs(){
        System.out.println(&quot;红烧排骨&quot;);
    }

}


class Son1 extends Father1 {

    public void braisedRibs(){
        System.out.println(&quot;红烧糖醋排骨&quot;);
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行下面代码，会打印：红烧排骨&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Father1 father1 = new Father1();
father1.braisedRibs();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们上面说过，所有在使用父亲的地方，都能够替换成儿子，并且效果是一样的，那接下来我们改一下代码。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Son1 son1 = new Son1();
son1.braisedRibs();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果是啥？打印出：红烧糖醋排骨，出乎意料吧。。。这结果完全不一样。想一下上面说的：老爸会的老子也要会，很明显，上面的例子老子不会红烧排骨，只会红烧糖醋排骨，所以这根本不是父子关系。&lt;/p&gt;
&lt;p&gt;那应该怎么实现呢？其实红烧排骨和红烧糖醋排骨这压根就是 2 道菜，你去餐馆吃饭的时候，你点红烧排骨服务员给你送来红烧糖醋排骨，或者你点红烧糖醋排骨服务员给你送来红烧排骨，你这时候不生气，算我输。&lt;/p&gt;
&lt;p&gt;来看看 Son2，Son2 将红烧糖醋改为 braisedSweetAndSourPorkRibs （翻译不好找 Google 算账去哈，反正不是我翻译的）。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class Son2 extends Father1 {
    
    public void braisedSweetAndSourPorkRibs(){
        System.out.println(&quot;红烧糖醋排骨&quot;);
    }
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试一下是不是好儿子&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Son2 son2 = new Son2();
son2.braisedRibs();
son2.braisedSweetAndSourPorkRibs();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打印出：&lt;br/&gt;红烧排骨&lt;br/&gt;红烧糖醋排骨&lt;/p&gt;
&lt;p&gt;这才是 Father1 的好儿子嘛，不仅会红烧排骨，还会红烧糖醋排骨。所以说里氏替换原则就是在定义父子关系，大家都遵守这个定义，就会一代比一代好，不遵守大家也看到了，把前辈传下来的都毁于一旦了。&lt;/p&gt;
&lt;p&gt;代码见：&lt;a href=&quot;https://github.com/1CSH1/DesignPatterns/blob/master/src/com/liebrother/designpatterns/lsp/LSPTest.java&quot;&gt;LSPTest.java&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;优缺点&quot;&gt;优缺点&lt;/h3&gt;
&lt;p&gt;下面再贴一下书本上的一些优缺点&lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;优点&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；&lt;/li&gt;
&lt;li&gt;提高代码的重用性；&lt;/li&gt;
&lt;li&gt;子类可以形似父类，但又异于父类，“龙生龙，凤生凤，老鼠生来会打洞”是说子拥有父的“种”，“世界上没有两片完全相同的叶子”是指明子与父的不同；&lt;/li&gt;
&lt;li&gt;提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的扩展接口都是通过继承父类来完成的；&lt;/li&gt;
&lt;li&gt;提高产品或项目的开放性。&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;缺点&quot;&gt;缺点&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法；&lt;/li&gt;
&lt;li&gt;降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；&lt;/li&gt;
&lt;li&gt;增强了耦合性。当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果————大段的代码需要重构。&lt;br/&gt;(来自《设计模式之禅》)&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;好了，里氏替换原则的大概原理讲得差不多，大家只要记住是在定义“父子关系”，就像游戏规则一样，定义后让大家遵守，会让大家的程序在后面越来越复杂的时候也能清晰，而不会越来越乱。&lt;/p&gt;
&lt;p&gt;参考资料：《大话设计模式》、《Java设计模式》、《设计模式之禅》、《研磨设计模式》、《Head First 设计模式》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.liebrother.com/upload/df81ac224abe46b38131a0e78f4dcf9c_wechat.jpg&quot; alt=&quot;公众号&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 23:29:00 +0000</pubDate>
<dc:creator>LieBrother</dc:creator>
<og:description>设计模式六大原则之二：里氏替换原则。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liebrother/p/10193334.html</dc:identifier>
</item>
<item>
<title>Chrome插件开发，美化网页上的文件列表。chrome-extension，background - oppoic</title>
<link>http://www.cnblogs.com/oppoic/p/10193561.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oppoic/p/10193561.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/oppoic/p/10186265.html&quot; target=&quot;_blank&quot;&gt;上一篇文章&lt;/a&gt; 通过“content-scripts”的方式向页面注入js和css来美化页面，但是有一个弊端：一旦配置好需要注入的页面，如果这个页面地址以后发生变化，或者要新加一些URL进来，那么得修改manifest.json这个文件。试想如果一个Chrome插件已经打包好，再去改代码是不可能的。&lt;/p&gt;
&lt;p&gt;现在通过另一种方式来实现相同的功能，同时做到页面地址动态可配置。以下是本次要处理的页面（https://jiacrontab.iwannay.cn/download/）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/401362/201812/401362-20181228225539452-747926291.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每一行都是一个文件的基本信息，包括文件名、日期和文件大小，文件名格式都是：项目名-版本-操作系统-平台。现在文件还少，查看不是很困难，如果以后文件多了，那么找一个文件是比较困难的。&lt;/p&gt;
&lt;p&gt;这里又不太可能在服务端读取download目录下的文件，然后分类、分页展示，那只能在客户端浏览器上想办法了，Chrome插件完全可以实现这个功能。&lt;/p&gt;

&lt;p&gt;开发Chrome插件第一步，新建一个manifest.json文件，并按官方文档的要求配置一些必要参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;name&quot;: &quot;WebFileFilterPro&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;version&quot;: &quot;1.0.0&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;description&quot;: &quot;fast sort your webpage files&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;icons&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;16&quot;: &quot;images/16.png&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;48&quot;: &quot;images/48.png&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;128&quot;: &quot;images/128.png&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;browser_action&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;default_icon&quot;: &quot;images/16.png&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;default_title&quot;: &quot;WebFileFilterPro&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;manifest_version&quot;: 2&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;name：插件名称&lt;/p&gt;
&lt;p&gt;version：版本号&lt;/p&gt;
&lt;p&gt;description：插件描述&lt;/p&gt;
&lt;p&gt;icons：插件的图标，不同尺寸用于不同地方&lt;/p&gt;
&lt;p&gt;browser_action：右上角插件栏的图标信息，包括：图标的图片路径、鼠标划上去提示的文字&lt;/p&gt;
&lt;p&gt;manifest_version：固定为2&lt;/p&gt;
&lt;p&gt;注：更多manifest.json的配置参考：&lt;a href=&quot;https://developer.chrome.com/extensions/manifest&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;  至此，项目结构如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/401362/201812/401362-20181228232008252-1760827643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个简单的没有任何功能的Chrome插件就完成了，去Chrome浏览器里安装下试试：打开Chrome浏览器 - 更多工具 - 扩展程序，打开“开发者模式” - 加载已解压的扩展程序 - 选择src目录 - 确定&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/401362/201812/401362-20181228232515436-1723164130.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由图可见，manifest.json里配置的插件名称、版本号、插件描述等信息都体现了&lt;/p&gt;

&lt;p&gt;这个插件的目的就是向特定页面注入一些js和css文件，实现可以分类查看并且文件多了还可以翻页。新建一个配置页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/401362/201812/401362-20181228233758126-1551088995.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;把需要美化的页面地址通过配置页面保存到Local Storage浏览器缓存里面，这样做的好处是：需要美化的地址随时可变，同时发现需要美化的页面直接加进去就可以了，不用修改代码。&lt;/p&gt;
&lt;p&gt;这个时候大杀器“background”就要出场了，官方描述是这样的&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Extensions are event based programs used to modify or enhance the Chrome browsing experience. Events are browser triggers, such as navigating to a new page, removing a bookmark, or closing a tab. Extensions monitor these events in their background script, then react with specified instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大致意思是，“background”是常驻Chrome浏览器插件后台运行的，可以捕获到很多行为：页面跳转、移除书签、关闭一个tab页等等。这里不需要那么强大的功能，只需要获取用户打开的页面地址，是不是在配置页面配置的地址即可。&lt;/p&gt;
&lt;p&gt;现在改下“manifest.json”文件，加入新的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;name&quot;: &quot;WebFileFilterPro&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;version&quot;: &quot;1.0.0&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;description&quot;: &quot;fast sort your webpage files&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;icons&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;16&quot;: &quot;images/16.png&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;48&quot;: &quot;images/48.png&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;128&quot;: &quot;images/128.png&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;browser_action&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;default_icon&quot;: &quot;images/16.png&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;default_title&quot;: &quot;WebFileFilterPro&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;options_page&quot;: &quot;settings.html&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;permissions&quot;&lt;span&gt;: [
    &lt;/span&gt;&quot;tabs&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;http://*/*&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;https://*/*&quot;&lt;span&gt;
  ],
  &lt;/span&gt;&quot;background&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;scripts&quot;&lt;span&gt;: [
      &lt;/span&gt;&quot;js/background.js&quot;&lt;span&gt;
    ],
    &lt;/span&gt;&quot;persistent&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  },
  &lt;/span&gt;&quot;manifest_version&quot;: 2&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;options_page：配置页面地址（右键右上角插件图标，可以通过“选项”进入配置页面）&lt;/p&gt;
&lt;p&gt;background：后台配置，包括js文件名和持久性设置&lt;/p&gt;
&lt;p&gt;permissions：申请权限列表&lt;/p&gt;
&lt;p&gt;1）tabs：获取用户访问页面得URL地址，必须得有这个tabs权限&lt;/p&gt;
&lt;p&gt;2）http/https：向目标页面里注入css和js文件需要的权限&lt;/p&gt;
&lt;p&gt;注：完整权限api请访问：&lt;a href=&quot;https://developer.chrome.com/extensions/declare_permissions&quot; target=&quot;_blank&quot;&gt;permissions官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在来看下官方说的可以常驻后台运行的“background.js”到底可以获取到什么些东西&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
chrome.tabs.onUpdated.addListener(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tabId, changeInfo, tab) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (changeInfo.status == &quot;complete&quot;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; url =&lt;span&gt; tab.url;
        console.log(&lt;/span&gt;&quot;用户访问：&quot; +&lt;span&gt; url);

        console.log(&lt;/span&gt;&quot;缓存里设置的页面：&quot; +&lt;span&gt; localStorage.url);
    };
}); &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在页面刷新完成事件里面获取“用户访问的页面地址”和“配置页面里面配置的地址”，看看控制台输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/401362/201812/401362-20181229000302909-1875261557.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;两个地址都正确的获取到了，如果用户访问的地址和配置的地址吻合，那么向这个页面注入css和js文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
chrome.tabs.onUpdated.addListener(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tabId, changeInfo, tab) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (changeInfo.status == &quot;complete&quot;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; url =&lt;span&gt; tab.url;
        console.log(url);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.url != undefined &amp;amp;&amp;amp; localStorage.url != ''&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; urlList = localStorage.url.split(&quot;\n&quot;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (urlList.indexOf(url) != -1&lt;span&gt;) {
                chrome.tabs.insertCSS(tabId, { file: &lt;/span&gt;&quot;css/bootstrap.min.css&quot;&lt;span&gt; });

                chrome.tabs.executeScript(tabId, { file: &lt;/span&gt;&quot;js/jquery.min.js&quot;&lt;span&gt; });
                chrome.tabs.executeScript(tabId, { file: &lt;/span&gt;&quot;js/bootstrap.min.js&quot;&lt;span&gt; });                
                chrome.tabs.executeScript(tabId, { file: &lt;/span&gt;&quot;js/filelist.js&quot;&lt;span&gt; });
            }
        }
    };
}); &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用“chrome.tabs.insertCSS”和“chrome.tabs.executeScript”这两个api完成css和js的注入。有了jQuery和Bootstrap的注入，页面就可以随意美化了。同时在&quot;filelist.js&quot;里面获取页面原有的内容，然后绑定的Bootstrap插件上&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57.5&quot;&gt;&lt;img id=&quot;code_img_closed_4e5f2108-9d8f-4b18-b0d5-ec68450f27c6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4e5f2108-9d8f-4b18-b0d5-ec68450f27c6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4e5f2108-9d8f-4b18-b0d5-ec68450f27c6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;110&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(&quot;filelist.js&quot;);&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; fileList =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; preList = document.getElementsByTagName(&quot;pre&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (preList.length == 1&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; lineList = preList[0].innerHTML.split(&quot;\n&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(lineList);&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (lineList.length &amp;gt; 0&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; splitLinetext = []; &lt;span&gt;var&lt;/span&gt; splitFileName = []; &lt;span&gt;var&lt;/span&gt; fileName = ''&lt;span&gt;;
        $.each(lineList, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (i, v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(v);&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (i == 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;continue;&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (v == undefined || v == &quot;&quot;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; line =&lt;span&gt; parseInt(i);
                line &lt;/span&gt;+= 1&lt;span&gt;;
                console.log(&lt;/span&gt;&quot;line:&quot; + line + &quot; is empty&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }

            splitLinetext &lt;/span&gt;= v.split(/\s+/&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (splitLinetext.length != 5&lt;span&gt;) {
                console.log(splitLinetext);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }

            fileName &lt;/span&gt;= splitLinetext[1].match(/&amp;gt;(\S*)&amp;lt;/)[1&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(fileName);&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (fileName == &lt;span&gt;null&lt;/span&gt; || fileName == ''&lt;span&gt;) {
                console.log(&lt;/span&gt;&quot;fileName is or empty&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }

            splitFileName &lt;/span&gt;= fileName.split('-'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (splitFileName.length &amp;lt; 3&lt;span&gt;) {
                console.log(splitFileName);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }

            fileList.push({ PartA: splitFileName[&lt;/span&gt;0], PartB: splitFileName[1], FileTime: formatDate(splitLinetext[2] + ' ' + splitLinetext[3]), FileSize: splitLinetext[4&lt;span&gt;], FileName: fileName });
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(fileList);&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt; nodeDoctype = document.implementation.createDocumentType('html', '', ''&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (document.doctype) {
            document.replaceChild(nodeDoctype, document.doctype);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            document.insertBefore(nodeDoctype, document.childNodes[&lt;/span&gt;0&lt;span&gt;]);
        }

        $(&lt;/span&gt;&quot;html&quot;).attr(&quot;lang&quot;, &quot;en&quot;&lt;span&gt;);
        $(&lt;/span&gt;&quot;head&quot;).html('&amp;lt;head&amp;gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&amp;lt;link rel=&quot;shortcut icon&quot; href=&quot;&quot; /&amp;gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;&amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&amp;gt;&amp;lt;title&amp;gt;FileList&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;'&lt;span&gt;);

        $(&lt;/span&gt;&quot;[rel='shortcut icon']&quot;).attr(&quot;href&quot;, chrome.extension.getURL(&quot;images/16.png&quot;&lt;span&gt;));

        $(&lt;/span&gt;&quot;body&quot;).removeAttr(&quot;bgcolor&quot;).html('&amp;lt;nav class=&quot;navbar navbar-default navbar-static-top&quot;&amp;gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&amp;lt;div class=&quot;col-sm-2 col-md-2 col-lg-2&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;col-sm-10 col-md-10 col-lg-10&quot;&amp;gt;&amp;lt;div class=&quot;navbar-header&quot;&amp;gt;&amp;lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;navbar&quot;&amp;gt;&amp;lt;span class=&quot;sr-only&quot;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id=&quot;navbar&quot; class=&quot;collapse navbar-collapse&quot;&amp;gt;&amp;lt;ul class=&quot;nav navbar-nav&quot;&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/nav&amp;gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&amp;lt;div id=&quot;nav&quot; class=&quot;col-sm-2 col-md-2 col-lg-2&quot;&amp;gt;&amp;lt;ul class=&quot;nav nav-pills nav-stacked&quot;&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;col-sm-10 col-md-10 col-lg-10&quot;&amp;gt;&amp;lt;table id=&quot;table&quot; class=&quot;table table-bordered&quot;&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;ul class=&quot;pager&quot;&amp;gt;&amp;lt;span id=&quot;pageIndexSpan&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;/&amp;amp;nbsp;&amp;lt;span id=&quot;pageSizeSpan&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;/&amp;amp;nbsp;&amp;lt;span id=&quot;totalCountSpan&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;li id=&quot;previousPageLi&quot;&amp;gt;&amp;lt;a href=&quot;javascript:;&quot;&amp;gt;Prev&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;amp;nbsp;&amp;lt;li id=&quot;nextPageLi&quot;&amp;gt;&amp;lt;a href=&quot;javascript:;&quot;&amp;gt;Next&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;'&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; partAs =&lt;span&gt; getDistinctPartA();
        $.each(partAs, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (idx, val) {
            $(&lt;/span&gt;&quot;#navbar ul&quot;).append(&quot;&amp;lt;li data-value=\&quot;&quot; + val + &quot;\&quot;&amp;gt;&amp;lt;a href='javascript:;'&amp;gt;&amp;lt;strong&amp;gt;&quot; + val + &quot;&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;span&gt;);
        });
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (partAs.length &amp;gt; 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.partA != undefined &amp;amp;&amp;amp; $.inArray(localStorage.partA, partAs) != -1&lt;span&gt;)
                navBarLiClick(localStorage.partA);
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                navBarLiClick(partAs[&lt;/span&gt;0&lt;span&gt;]);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            $(&lt;/span&gt;&quot;body&quot;).html('&amp;lt;div class=&quot;container&quot;&amp;gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&amp;lt;div class=&quot;col-sm-12 col-md-12 col-lg-12&quot;&amp;gt;&amp;lt;h3&amp;gt;no data, pls wait and refresh this page :)&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;'&lt;span&gt;);
        }
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        console.log(&lt;/span&gt;&quot;can't find any line in &amp;lt;pre&amp;gt; tag&quot;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    console.log(&lt;/span&gt;&quot;page's &amp;lt;pre&amp;gt; tag count illegal:&quot; +&lt;span&gt; preList.length);
}

$(&lt;/span&gt;&quot;body&quot;).on(&quot;click&quot;, &quot;#navbar ul li&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    navBarLiClick($(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).attr(&quot;data-value&quot;&lt;span&gt;));
});

$(&lt;/span&gt;&quot;body&quot;).on(&quot;click&quot;, &quot;#nav ul li&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    navLiClick($(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).attr(&quot;data-parta&quot;), $(&lt;span&gt;this&lt;/span&gt;).attr(&quot;data-partb&quot;&lt;span&gt;));
});

$(&lt;/span&gt;&quot;body&quot;).on(&quot;click&quot;, &quot;#table tbody tr&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).css(&quot;background&quot;, &quot;#DCDCDC&quot;).siblings().css(&quot;background&quot;, &quot;&quot;&lt;span&gt;);
});

$(&lt;/span&gt;&quot;body&quot;).on(&quot;click&quot;, &quot;#previousPageLi&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.pageIndex != 1&lt;span&gt;) {
        localStorage.pageIndex &lt;/span&gt;= parseInt(localStorage.pageIndex) - 1&lt;span&gt;;
        initFileList(localStorage.partA, localStorage.partB);
    }
});

$(&lt;/span&gt;&quot;body&quot;).on(&quot;click&quot;, &quot;#nextPageLi&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; totalPageCount = localStorage.totalCount % localStorage.pageSize == 0 ? localStorage.totalCount / localStorage.pageSize : Math.ceil(localStorage.totalCount /&lt;span&gt; localStorage.pageSize);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.pageIndex !=&lt;span&gt; totalPageCount) {
        localStorage.pageIndex &lt;/span&gt;= parseInt(localStorage.pageIndex) + 1&lt;span&gt;;
        initFileList(localStorage.partA, localStorage.partB);
    }
});

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; formatDate(dt) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; date = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(dt);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; aaaa =&lt;span&gt; date.getFullYear();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gg =&lt;span&gt; date.getDate();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mm = (date.getMonth() + 1&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (gg &amp;lt; 10) gg = &quot;0&quot; +&lt;span&gt; gg;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mm &amp;lt; 10) mm = &quot;0&quot; +&lt;span&gt; mm;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cur_day = aaaa + &quot;-&quot; + mm + &quot;-&quot; +&lt;span&gt; gg;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hours =&lt;span&gt; date.getHours()
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; minutes =&lt;span&gt; date.getMinutes()
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var seconds = date.getSeconds();&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; (hours &amp;lt; 10) hours = &quot;0&quot; +&lt;span&gt; hours;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (minutes &amp;lt; 10) minutes = &quot;0&quot; +&lt;span&gt; minutes;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if (seconds &amp;lt; 10) seconds = &quot;0&quot; + seconds;&lt;/span&gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return cur_day + &quot; &quot; + hours + &quot;:&quot; + minutes + &quot;:&quot; + seconds;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; cur_day + &quot; &quot; + hours + &quot;:&quot; +&lt;span&gt; minutes;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getDistinctPartA() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSLINQ(fileList).Distinct(&lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.PartA; }).items;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getDistinctPartB(partA) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSLINQ(fileList).Where(&lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.PartA == partA; }).Distinct(&lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.PartB; }).items;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getFileListPage(partA, partB) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; totalPageCount = localStorage.totalCount % localStorage.pageSize == 0 ? localStorage.totalCount / localStorage.pageSize : Math.ceil(localStorage.totalCount /&lt;span&gt; localStorage.pageSize);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.pageIndex == 1&lt;span&gt;) {
        $(&lt;/span&gt;&quot;#previousPageLi&quot;).addClass(&quot;disabled&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        $(&lt;/span&gt;&quot;#previousPageLi&quot;).removeClass(&quot;disabled&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.pageIndex ==&lt;span&gt; totalPageCount) {
        $(&lt;/span&gt;&quot;#nextPageLi&quot;).addClass(&quot;disabled&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        $(&lt;/span&gt;&quot;#nextPageLi&quot;).removeClass(&quot;disabled&quot;&lt;span&gt;);
    }

    $(&lt;/span&gt;&quot;#pageIndexSpan&quot;&lt;span&gt;).text(localStorage.pageIndex);
    $(&lt;/span&gt;&quot;#pageSizeSpan&quot;&lt;span&gt;).text(localStorage.pageSize);
    $(&lt;/span&gt;&quot;#totalCountSpan&quot;&lt;span&gt;).text(localStorage.totalCount);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (partB == 'all'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSLINQ(fileList).Reverse().Where(&lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.PartA == partA; }).Skip(parseInt(localStorage.pageSize) * (parseInt(localStorage.pageIndex) - 1)).Take(parseInt(localStorage.pageSize)).Select(&quot;PartB,FileTime,FileSize,FileName&quot;&lt;span&gt;).items;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSLINQ(fileList).Reverse().Where(&lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.PartA == partA &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.PartB == partB; }).Skip(parseInt(localStorage.pageSize) * (parseInt(localStorage.pageIndex) - 1)).Take(parseInt(localStorage.pageSize)).Select(&quot;PartB,FileTime,FileSize,FileName&quot;&lt;span&gt;).items;
    }
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getFileListTotalCount(partA, partB) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (partB == 'all'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSLINQ(fileList).Count(&lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.PartA ==&lt;span&gt; partA; });
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSLINQ(fileList).Count(&lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.PartA == partA &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.PartB ==&lt;span&gt; partB; });
    }
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; navBarLiClick(partA) {
    $(&lt;/span&gt;&quot;#navbar ul li[data-value=\&quot;&quot; + partA + &quot;\&quot;]&quot;).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;&lt;span&gt;);

    $(&lt;/span&gt;&quot;#nav ul&quot;&lt;span&gt;).empty();
    $(&lt;/span&gt;&quot;#nav ul&quot;).append(&quot;&amp;lt;li data-parta=\&quot;&quot; + partA + &quot;\&quot; data-partb=\&quot;all\&quot;&amp;gt;&amp;lt;a href='javascript:;'&amp;gt;all&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; partB = ''&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; list =&lt;span&gt; getDistinctPartB(partA);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;list.sort();&lt;/span&gt;
&lt;span&gt;    list.reverse();
    $.each(list, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (i, v) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.partB != undefined &amp;amp;&amp;amp; localStorage.partA != undefined &amp;amp;&amp;amp; localStorage.partA == partA &amp;amp;&amp;amp; localStorage.partB ==&lt;span&gt; v) {
            partB &lt;/span&gt;=&lt;span&gt; localStorage.partB;
            $(&lt;/span&gt;&quot;#nav ul&quot;).append(&quot;&amp;lt;li class='active' data-parta=\&quot;&quot; + partA + &quot;\&quot; data-partb=\&quot;&quot; + v + &quot;\&quot;&amp;gt;&amp;lt;a href='javascript:;'&amp;gt;&quot; + v + &quot;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            $(&lt;/span&gt;&quot;#nav ul&quot;).append(&quot;&amp;lt;li data-parta=\&quot;&quot; + partA + &quot;\&quot; data-partb=\&quot;&quot; + v + &quot;\&quot;&amp;gt;&amp;lt;a href='javascript:;'&amp;gt;&quot; + v + &quot;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;span&gt;);
        }
    });
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (partB == ''&lt;span&gt;) {
        partB &lt;/span&gt;= 'all'&lt;span&gt;;
        $(&lt;/span&gt;&quot;#nav ul li:first&quot;).addClass(&quot;active&quot;&lt;span&gt;);
    }
    initFileList(partA, partB);
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; navLiClick(partA, partB) {
    $(&lt;/span&gt;&quot;#nav ul li[data-partb=\&quot;&quot; + partB + &quot;\&quot;]&quot;).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;&lt;span&gt;);
    initFileList(partA, partB);
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; initFileList(partA, partB) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.partA != partA || localStorage.partB !=&lt;span&gt; partB) {
        localStorage.pageIndex &lt;/span&gt;= 1&lt;span&gt;;
        localStorage.pageSize &lt;/span&gt;= 10&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.partA !=&lt;span&gt; partA) {
        localStorage.partA &lt;/span&gt;=&lt;span&gt; partA;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.partB !=&lt;span&gt; partB) {
        localStorage.partB &lt;/span&gt;=&lt;span&gt; partB;
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; totalCount =&lt;span&gt; getFileListTotalCount(partA, partB);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (localStorage.totalCount !=&lt;span&gt; totalCount) {
        localStorage.totalCount &lt;/span&gt;=&lt;span&gt; totalCount;
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fileList =&lt;span&gt; getFileListPage(partA, partB);

    $(&lt;/span&gt;&quot;#table&quot;&lt;span&gt;).empty();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; $(&quot;#table&quot;).append(&quot;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;FileName&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Time&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;FileSize&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Operate&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody&amp;gt;&quot;);&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (fileList.length &amp;gt; 0&lt;span&gt;) {
        $.each(fileList, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (i, v) {
            $(&lt;/span&gt;&quot;#table&quot;).append(&quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&quot; + v.FileName + &quot;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&quot; + v.FileTime + &quot;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&quot; + v.FileSize + &quot;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href='&quot; + v.FileName + &quot;' target='_blank'&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;&lt;span&gt;);
        });
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        $(&lt;/span&gt;&quot;#table&quot;).append(&quot;&amp;lt;tr&amp;gt;&amp;lt;td colspan='4'&amp;gt;&amp;lt;center&amp;gt;no data&amp;lt;/center&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;&lt;span&gt;);
    }
    $(&lt;/span&gt;&quot;#table&quot;).append(&quot;&amp;lt;/tbody&amp;gt;&quot;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;获取原页面里面的所有文件信息，项目名去重放在顶部，用Bootstrap的navBar插件展示，版本号由上到下依次放在左侧的nav插件上，右侧则用Bootstrap的table展示文件详细信息。效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/401362/201812/401362-20181229002105539-617678509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，分类、翻页展示功能完美实现，以后就算文件再多也可以快速找到了。&lt;/p&gt;

&lt;p&gt;通过“background”的方式注入，优点是页面随时可以配置，很方便，缺点是用户访问的每个页面都需要“在background.js”里面挨个过滤，感觉效率不行。个人还是比较喜欢“content_scripts”这种防止注入。&lt;/p&gt;

&lt;p&gt;本文仅抛砖引玉，Chrome插件可以做的事情还有很多，更多使用场景大家自己去发挥。&lt;a href=&quot;https://github.com/oppoic/WebFileFilter&quot; target=&quot;_blank&quot;&gt;源码地址&lt;/a&gt;  Chrome商店  &lt;a href=&quot;https://developer.chrome.com/extensions/overview&quot; target=&quot;_blank&quot;&gt;开发文档&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 28 Dec 2018 16:46:00 +0000</pubDate>
<dc:creator>oppoic</dc:creator>
<og:description>上一篇文章 通过“content-scripts”的方式向页面注入js和css来美化页面，但是有一个弊端：一旦配置好需要注入的页面，如果这个页面地址以后发生变化，或者要新加一些URL进来，那</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/oppoic/p/10193561.html</dc:identifier>
</item>
<item>
<title>解析JavaScrip之对象属性 - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/10191687.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/10191687.html</guid>
<description>&lt;p&gt;       对于面向对象编程语言(如java,.net,php,python等)来说，其最大的特点在于“面向对象”，而&quot;面向对象&quot;较为显著的特征便是：封装，继承，多态。借助”面向对象“的这些特征，通常地，一个类大致包括三大部分：&lt;strong&gt;属性，方法和索引器&lt;/strong&gt;，下面定义的一个类就包括这三大部分(.Net 语言)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OOClass
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义属性&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _IDCard = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _UserName = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义方法&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetIDCard()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _IDCard;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetUserName()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _UserName;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义索引器&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Tel { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       我们知道，JavaScript是一门&lt;strong&gt;”弱面向对象“&lt;/strong&gt;编程语言，其没有&lt;strong&gt;”对象“和”类“（注意：我们说JavaScript一切皆对象，这里的对象与面向对象编程语言的对象含义是不同的）&lt;/strong&gt;，类是实现继承的主要技术，对象是类的实例化，如果JavaScript要想实现继承，则首先要具备类和对象的条件，只有具备了该条件，方可实现继承(其实我们知道，JavaScript的原型和原型链实现继承，我会在后面的文章中深入分析原型与原型链)，那么，在JavaScript中，是 什么扮演类和对象角色呢？JavaScript对象及其属性。如果要类比，那应该是这样的关系：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201812/1066923-20181228235237395-697120760.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一  两种典型的对象定义方式&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;strong&gt;&lt;span&gt;（一）函数表达式方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  1.定义一个Person对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义Person对象&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Person() {
       
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  2.为Person对象定义属性 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象定义属性&lt;/span&gt;
    Person._tel = &quot;136xxx954xx&quot;&lt;span&gt;;
    Person.name &lt;/span&gt;= &quot;Alan_beijing&quot;&lt;span&gt;;
    Person.sex &lt;/span&gt;= &quot;Man&quot;&lt;span&gt;;
    Person.Address &lt;/span&gt;= &quot;Shanghai&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  3.为对象定义方法  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象定义方法&lt;/span&gt;
    Person.tel = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  4.测试结果    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试&lt;/span&gt;
    alert(Person.name + &quot;,&quot; + Person.sex + &quot;,&quot; + Person.Address + &quot;,&quot; + Person._tel);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Alan_beijing,Man,Shanghai,136xxx954xx&lt;/span&gt;
    alert(Person.SpeakLanguage());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Chinese And English&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 5.完整例子Code&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('582efe20-e4a1-40fa-9acf-9c47d081c5c9')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_582efe20-e4a1-40fa-9acf-9c47d081c5c9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_582efe20-e4a1-40fa-9acf-9c47d081c5c9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('582efe20-e4a1-40fa-9acf-9c47d081c5c9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_582efe20-e4a1-40fa-9acf-9c47d081c5c9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义Person对象&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Person() {
       
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
    Person._tel = &quot;136xxx954xx&quot;&lt;span&gt;;
    Person.name &lt;/span&gt;= &quot;Alan_beijing&quot;&lt;span&gt;;
    Person.sex &lt;/span&gt;= &quot;Man&quot;&lt;span&gt;;
    Person.Address &lt;/span&gt;= &quot;Shanghai&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加方法&lt;/span&gt;
    Person.tel = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试&lt;/span&gt;
    alert(Person.name + &quot;,&quot; + Person.sex + &quot;,&quot; + Person.Address);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Alan_beijing,Man,Shanghai&lt;/span&gt;
    alert(Person.tel());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（二）对象字面量方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 1.定义对象同时为对象定义属性和方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象定义属性&lt;/span&gt;
        _tel: &quot;136xxx954xx&quot;&lt;span&gt;,
        name: &lt;/span&gt;&quot;Alan_beijing&quot;&lt;span&gt;,
        sex: &lt;/span&gt;&quot;Man&quot;&lt;span&gt;,
        address: &lt;/span&gt;&quot;Shanghai&quot;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象定义方法&lt;/span&gt;
        tel: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2.测试结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试&lt;/span&gt;
    alert(Person.name + &quot;,&quot; + Person.sex + &quot;,&quot; + Person.address);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Alan_beijing,Man,Shanghai&lt;/span&gt;
    alert(Person.tel());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3.完整例子Code&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d850a58c-c221-4c4e-a378-21e2b5360973')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_d850a58c-c221-4c4e-a378-21e2b5360973&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d850a58c-c221-4c4e-a378-21e2b5360973&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d850a58c-c221-4c4e-a378-21e2b5360973',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d850a58c-c221-4c4e-a378-21e2b5360973&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
        _tel: &quot;136xxx954xx&quot;&lt;span&gt;,
        name: &lt;/span&gt;&quot;Alan_beijing&quot;&lt;span&gt;,
        sex: &lt;/span&gt;&quot;Man&quot;&lt;span&gt;,
        address: &lt;/span&gt;&quot;Shanghai&quot;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加方法&lt;/span&gt;
        tel: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试&lt;/span&gt;
    alert(Person.name + &quot;,&quot; + Person.sex + &quot;,&quot; + Person.address);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Alan_beijing,Man,Shanghai&lt;/span&gt;
    alert(Person.tel());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; （三）两种方式比较&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   在两种典型的对象定义方式中，对象字面量定义方式是比较常用的，&lt;span&gt;其常用根本原因是其采用json的格式，简洁而不繁琐&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二 对象属性种类&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;      对象属性，从属性特性上来划分，大致可分为两大类，即数据属性和访问器属性。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; （一）数据属性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      数据属性具有四个基本特性，即[[Configurable]]，[[Enumerable]]，[[Writable]]和[[value]]。&lt;/p&gt;
&lt;p&gt;    （1）[[Configurable]]：布尔类型(true或false，默认值为true)，表示能否对对象属性进行操作，大致包括如下操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;删除属性&lt;/li&gt;
&lt;li&gt;修改属性特性&lt;/li&gt;
&lt;li&gt;修改属性类型，如将数据属性修改为访问器属性    &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;   （2）[[Enumerable]]：能否通过for..in..循环遍历&lt;/p&gt;
&lt;p&gt;   （3）[[Writable]]：能否修改属性值&lt;/p&gt;
&lt;p&gt;   （4）[[value]]：属性值&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（二）访问器属性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      访问器属性具有四个基本特性，即[[Configurable]]，[[Enumerable]]，[[Get]]和[[Set]]。&lt;/p&gt;
&lt;p&gt;   （1）[[Configurable]]：布尔类型(true或false)，表示能否对对象属性进行操作，大致包括如下操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;删除属性&lt;/li&gt;
&lt;li&gt;修改属性特性&lt;/li&gt;
&lt;li&gt;修改属性类型，如将数据属性修改为访问器属性    &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;   （2）[[Enumerable]]：能否通过for..in..循环遍历&lt;/p&gt;
&lt;p&gt;   （3）[[Get]]：对象向外提供访问对象属性的函数&lt;/p&gt;
&lt;p&gt;   （4）[[Set]]：对象向外提供设置对象属性的函数&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; （三）读取数据的特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       ECMAScript 5提供了Object.getOwnPropertyDescriptor()方法，通过该方法，可以取得属性特性值，该方法的原型如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201812/1066923-20181228184818159-322645370.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       其包含两个参数(对象和对象属性)，其返回值是一个对象，如果是访问器属性，则这个对象的属性有[[Configurable]]，[[Enumerable]]，[[Get]]，[[Set]]；若对象属性为数据属性，则返回[[Configurable]]，&lt;/p&gt;
&lt;p&gt;[[Enumerable]]，[[writable]]和[[value]]。 下列代码，先定义一个对象Person，然后通过ECMAScript 5提供的函数defineProperties()为该对象添加四个数据属性(_tel，name，sex和address)和一个访问器属&lt;/p&gt;
&lt;p&gt;性(telephone)，其中telephone访问器属性具有两个函数set()和get()，然后，我们通过getOwnPropertyDescriptor()函数访问它们的四个特性值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {

    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象添加属性&lt;/span&gt;
&lt;span&gt;    Object.defineProperties(Person, {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
&lt;span&gt;        _tel: {
            value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        name: {
            value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        sex: {
            value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        address: {
            value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Shanghai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器&lt;/span&gt;
&lt;span&gt;        telephone: {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function () {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var strName = &quot;name:&quot; + name;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return strName;&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
            },
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;: function (tel) {
                _tel &lt;/span&gt;=&lt;span&gt; tel;
            }
        }
    })

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据属性&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; dataProp = Object.getOwnPropertyDescriptor(Person, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_tel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    alert(dataProp.value);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;
    alert(dataProp.configurable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(dataProp.writable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(dataProp.enumerable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器属性&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; visitProp = Object.getOwnPropertyDescriptor(Person, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;telephone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    alert(visitProp.configurable);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(visitProp.enumerable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(&lt;span&gt;typeof&lt;/span&gt; visitProp.&lt;span&gt;get&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;
    alert(&lt;span&gt;typeof&lt;/span&gt; visitProp.&lt;span&gt;set&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    我们再来看看下面例子：下面例子与上面例子有几点区别：&lt;/p&gt;
&lt;p&gt;    区别1：上面的属性通过defineProperties()定义在对象Person外，而下面Person对象属性都是定义在对象Persin内部的&lt;/p&gt;
&lt;p&gt;    区别2：结果不同，对于数据属性，除了[[value]]相同外,其他三个特性([[Configurable]]，[[Writble]]，[[Enumerable]])恰好是相反的的(上面均为false，下面均为true)；对于访问器属性，除[[Configurable]]和[[Enumerable]]&lt;/p&gt;
&lt;p&gt;                 属性值相反外，上面代码[[Get]]和[[Set]]能成功访问，但是下面代码显示undefined，&lt;span&gt;说明索引器属性不能在对象内部定义&lt;/span&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {
        _tel: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        sex: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        telephone: {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function () {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var strName = &quot;name:&quot; + name;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return strName;&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
            },
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;: function (tel) {
                _tel &lt;/span&gt;=&lt;span&gt; tel;
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据属性&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; dataProp = Object.getOwnPropertyDescriptor(Person, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_tel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    alert(dataProp.value);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;
    alert(dataProp.configurable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
    alert(dataProp.writable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
    alert(dataProp.enumerable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器属性&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; visitProp = Object.getOwnPropertyDescriptor(Person, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;telephone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    alert(visitProp.configurable);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
    alert(visitProp.enumerable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
    alert(&lt;span&gt;typeof&lt;/span&gt; visitProp.&lt;span&gt;get&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;
    alert(&lt;span&gt;typeof&lt;/span&gt; visitProp.&lt;span&gt;set&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;    1.可以通过defineProperties()函数为对象定义多个属性；&lt;/p&gt;
&lt;p&gt;    2.访问器属性不能在对象内部定义，只能在对象外部定义；&lt;/p&gt;
&lt;p&gt;    3.在对象内部定义属性与通过defineProperties()函数在对象外部定义，属性特性值是相反的；&lt;/p&gt;
&lt;p&gt;    4.通过getOwnPropertyDescriptor()函数可以访问对象属性；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    5.需要注意的是，访问器属性的[[Get]]和[[Set]]不是必须的；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三  对象属性基本操作&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;&lt;strong&gt;（一）添加定义属性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     ECMAScript提供了definePropertie()和defineProperties()函数来为对象定义属性，这种方式是在对象外部为对象定义属性，当然，也可以在对象内部为对象定义属性(访&lt;span&gt;问器属性不可在对象内部定义，只能在外部定义&lt;/span&gt;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('33a991bd-3502-4778-9c78-0130cac65637')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_33a991bd-3502-4778-9c78-0130cac65637&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_33a991bd-3502-4778-9c78-0130cac65637&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('33a991bd-3502-4778-9c78-0130cac65637',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_33a991bd-3502-4778-9c78-0130cac65637&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {

    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象添加属性&lt;/span&gt;
&lt;span&gt;    Object.defineProperties(Person, {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
&lt;span&gt;        _tel: {
            value: &lt;/span&gt;&quot;136xxx954xx&quot;&lt;span&gt;
        },
        name: {
            value: &lt;/span&gt;&quot;Alan_beijing&quot;&lt;span&gt;
        },
        sex: {
            value: &lt;/span&gt;&quot;Man&quot;&lt;span&gt;
        },
        address: {
            value: &lt;/span&gt;&quot;Shanghai&quot;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器&lt;/span&gt;
&lt;span&gt;        telephone: {
            get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var strName = &quot;name:&quot; + name;&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return strName;&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
            },
            set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tel) {
                _tel &lt;/span&gt;=&lt;span&gt; tel;
            }
        }
    })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; （二）访问对象属性的四个特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     如下为在对象外部定义属性的访问结果，内部定义访问结果是相反的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0fceb084-ba39-4073-8983-d2298e6b3faf')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_0fceb084-ba39-4073-8983-d2298e6b3faf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0fceb084-ba39-4073-8983-d2298e6b3faf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0fceb084-ba39-4073-8983-d2298e6b3faf',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0fceb084-ba39-4073-8983-d2298e6b3faf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据属性&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; dataProp = Object.getOwnPropertyDescriptor(Person, &quot;_tel&quot;&lt;span&gt;);
    alert(dataProp.value);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;136xxx954xx&lt;/span&gt;
    alert(dataProp.configurable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(dataProp.writable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(dataProp.enumerable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器属性&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; visitProp = Object.getOwnPropertyDescriptor(Person, &quot;telephone&quot;&lt;span&gt;);
    alert(visitProp.configurable);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(visitProp.enumerable);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
    alert(&lt;span&gt;typeof&lt;/span&gt; visitProp.get);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;
    alert(&lt;span&gt;typeof&lt;/span&gt; visitProp.set);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; （三）删除/修改对象属性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      如下代码，我们设置数据属性address可修改，修改成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fbae18e7-f839-42fd-982b-4f46cf5f400a')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_fbae18e7-f839-42fd-982b-4f46cf5f400a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fbae18e7-f839-42fd-982b-4f46cf5f400a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fbae18e7-f839-42fd-982b-4f46cf5f400a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fbae18e7-f839-42fd-982b-4f46cf5f400a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {

    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象添加属性&lt;/span&gt;
&lt;span&gt;    Object.defineProperties(Person, {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
&lt;span&gt;        _tel: {
            value: &lt;/span&gt;&quot;136xxx954xx&quot;&lt;span&gt;
        },
        name: {
            value: &lt;/span&gt;&quot;Alan_beijing&quot;&lt;span&gt;
        },
        sex: {
            value: &lt;/span&gt;&quot;Man&quot;&lt;span&gt;
        },
        address: {
            writable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, 
            value: &lt;/span&gt;&quot;Shanghai&quot;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器&lt;/span&gt;
&lt;span&gt;        telephone: {
            get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var strName = &quot;name:&quot; + name;&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return strName;&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
            },
            set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tel) {
                _tel &lt;/span&gt;=&lt;span&gt; tel;
            }
        }
    })


    alert(Person.address);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Shanghai&lt;/span&gt;
    Person.address = &quot;Beijing&quot;&lt;span&gt;;
    alert(Person.address);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Beijing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;      如下代码，我们先设置[[Configurable]] 只可读(false)，然后尝试删除address属性，删除失败&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ce711b39-d931-41a4-96aa-8b55569cd491')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_ce711b39-d931-41a4-96aa-8b55569cd491&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ce711b39-d931-41a4-96aa-8b55569cd491&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ce711b39-d931-41a4-96aa-8b55569cd491',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ce711b39-d931-41a4-96aa-8b55569cd491&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {

    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象添加属性&lt;/span&gt;
&lt;span&gt;    Object.defineProperties(Person, {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
&lt;span&gt;        _tel: {
            value: &lt;/span&gt;&quot;136xxx954xx&quot;&lt;span&gt;
        },
        name: {
            value: &lt;/span&gt;&quot;Alan_beijing&quot;&lt;span&gt;
        },
        sex: {
            value: &lt;/span&gt;&quot;Man&quot;&lt;span&gt;
        },
        address: {
            configurable: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            writable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, 
            value: &lt;/span&gt;&quot;Shanghai&quot;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器&lt;/span&gt;
&lt;span&gt;        telephone: {
            get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var strName = &quot;name:&quot; + name;&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return strName;&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
            },
            set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tel) {
                _tel &lt;/span&gt;=&lt;span&gt; tel;
            }
        }
    })


    alert(Person.address);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Shanghai&lt;/span&gt;
    &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; Person.address;
    alert(Person.address);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Shanghai&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;      如下代码，我们先设置[[Configurable]]  可操作(true)，然后再删除address属性，删除成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a433d985-36e4-4f1b-9bcd-3a179be0258f')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_a433d985-36e4-4f1b-9bcd-3a179be0258f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a433d985-36e4-4f1b-9bcd-3a179be0258f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a433d985-36e4-4f1b-9bcd-3a179be0258f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a433d985-36e4-4f1b-9bcd-3a179be0258f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {

    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象添加属性&lt;/span&gt;
&lt;span&gt;    Object.defineProperties(Person, {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
&lt;span&gt;        _tel: {
            value: &lt;/span&gt;&quot;136xxx954xx&quot;&lt;span&gt;
        },
        name: {
            value: &lt;/span&gt;&quot;Alan_beijing&quot;&lt;span&gt;
        },
        sex: {
            value: &lt;/span&gt;&quot;Man&quot;&lt;span&gt;
        },
        address: {
            configurable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            writable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, 
            value: &lt;/span&gt;&quot;Shanghai&quot;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器&lt;/span&gt;
&lt;span&gt;        telephone: {
            get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var strName = &quot;name:&quot; + name;&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return strName;&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
            },
            set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tel) {
                _tel &lt;/span&gt;=&lt;span&gt; tel;
            }
        }
    })


    alert(Person.address);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Shanghai&lt;/span&gt;
    &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; Person.address;
    alert(Person.address);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;  &lt;span&gt;注意：当一旦定义[[Configurable]]为false时，再也变不回去了&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; Person =&lt;span&gt; {

    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象添加属性&lt;/span&gt;
&lt;span&gt;    Object.defineProperties(Person, {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为person对象添加属性&lt;/span&gt;
&lt;span&gt;        _tel: {
            value: &lt;/span&gt;&quot;136xxx954xx&quot;&lt;span&gt;
        },
        name: {
            value: &lt;/span&gt;&quot;Alan_beijing&quot;&lt;span&gt;
        },
        sex: {
            value: &lt;/span&gt;&quot;Man&quot;&lt;span&gt;
        },
        address: {
            configurable: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            writable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, 
            value: &lt;/span&gt;&quot;Shanghai&quot;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问器&lt;/span&gt;
&lt;span&gt;        telephone: {
            get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var strName = &quot;name:&quot; + name;&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return strName;&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tel;
            },
            set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tel) {
                _tel &lt;/span&gt;=&lt;span&gt; tel;
            }
        }
    })

    Object.defineProperty(Person, &lt;/span&gt;&quot;address&quot;&lt;span&gt;, {
        configurable:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  上述代码先将addess属性的特性[[configurable]]设置false，然后又将其修改为true，修改失败，因为[[configurable]]特性一旦设置为false，就再也不可改变。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201812/1066923-20181228221034435-690209750.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201812/1066923-20181228230036840-89051197.png&quot; alt=&quot;&quot;/&gt;&lt;strong&gt;&lt;span&gt;[[configurable]]和[[writable]]区别？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     前者操作属性特性，如删除属性，修改属性，更改属性类型；后者操作属性值，如更改属性值。两者没有直接关系，即不管[[configurable]]的值是怎样，一个属性的值能否可修改，是由[[writable]]决定的，而不受[[configurable]]影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;四  参考文献&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 【01】JavaScript 高级程序设计(第三版)   （美）Nicholas C.Zakas 著       李松峰   曹力  译&lt;/p&gt;
&lt;p&gt;【02】JavaScript 权威指南 (第6版)    David  Flanagan 著&lt;/p&gt;
&lt;p&gt;&lt;span&gt;五  已发布文章&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wangjiming/p/9656942.html&quot;&gt;JavaScript之函数(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wangjiming/p/9892604.html&quot;&gt;浅析JavaScript之数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wangjiming/p/9983023.html&quot;&gt;浅谈JavaScript之事件(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wangjiming/p/10191687.html&quot;&gt;解析JavaScrip之属性&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;六  版权区&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;感谢您的阅读，若有不足之处，欢迎指教，共同学习、共同进步。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;博主网址：http://www.cnblogs.com/wangjiming/。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;极少部分文章利用读书、参考、引用、抄袭、复制和粘贴等多种方式整合而成的，大部分为原创。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如您喜欢，麻烦推荐一下；如您有新想法，欢迎提出，邮箱：2098469527@qq.com。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以转载该博客，但必须著名博客来源。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 28 Dec 2018 16:02:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<og:description>对于面向对象编程语言(如java,.net,php,python等)来说，其最大的特点在于“面向对象”，而&quot;面向对象&quot;较为显著的特征便是：封装，继承，多态。借助”面向对象“的这些特</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/10191687.html</dc:identifier>
</item>
<item>
<title>2018年终总结 - AllEmpty</title>
<link>http://www.cnblogs.com/EmptyFS/p/10188094.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/EmptyFS/p/10188094.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　又到了一年一度的回顾时间，每年的总结可以让我更清晰的认识自己，而新的一年计划，可以让我更有目标去努力奋斗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2018年是我人生当中最最繁忙的一年，第一次出来加入互联网创业大潮，当然最后是以失败告终，与合伙人不欢而散。而为了完成去年定下的目标，在这个异常繁忙的过程中，逼迫着自己更加的高效，去做更多的事情。很多时候人不逼一下自己都不知自己有多大的能量，都不知道自己能做多少事情，而回首一年的经历，虽然今年收入是负增长状态，但其他方面却有着巨大的收获与改变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　去年定了26个年目标，在年中又陆陆续续增加了5个目标，经过一年的努力，除了跑半马和购买乐高机器人没有做到，还有个别只完成大半，基本上都实现了，部分目标还是超额完成，能在这么繁忙中做到这些，成就感还是满满的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来对2018年做一个全面回顾。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　家庭方面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今年有意识的加强了家庭的沟通，组织家庭每月一次的家庭回顾与计划小会，一家人坐到一块有针对性的进行沟通（有时会针对某个主题进行讨论或分享），并制定各种家庭小计划，总体看来效果还不错。良好的沟通能增进家人的情感，减少不必要的误解与矛盾，而让孩子也参与进来可以让他了解更多大人所面对的事情，拥有更多参与感。一家人一起讨论制定每月的家庭户外活动计划，然后一起准备，一起去参与，体验还是挺不错的，2019会继续保持这种方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今年挤出时间组织了两次家庭旅行，去了一趟香港逛街和购物，还有每年必去的海边。将心静下来去感受不同地方的生活，才能发现生活的乐趣与幸福。而旅行就好像是生活的穿越，切换到不一样的空间维度，远离原有生活中的繁忙与压力，带来不一样的心情。一家人的旅行，不需要逛什么景点，只需要简简单单的呆在一起，一起聊聊天，品尝不一样的美食，看看不一样的风景，体验不同地方的风情，这就是我想要的简单的生活。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由于长期在外工作，且回到家里也经常要加班处理工作上的事情，今年的亲子活动明显减少了很多。小宝还小还要花比较多的精力去照顾与陪伴，大宝学习上只能靠他自觉，生活上也会忽略很多，不过大宝的表现还不错，成绩始终能保持在中上水平，要给一个大大的赞给他。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　用心沟通，用心体会，降低要求，更能感知生活的不容易，才更能感受到幸福。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　工作方面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　年初被一位通过网络认识的说是做天使投资的朋友忽悠出来创业（其实没有真正投资过，只是去天使投资课程中学习过），投入了几乎所有的时间、精力还有部分金钱进去，平均每天工作十几个小时打造产品，最后结果闹的不欢而散，差点闹上法院。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　单纯的做技术研发，埋头苦干别人是看不到的，对于会算计的人眼中，一切都是可以利用的工具。所以说投资须谨慎，千万不要草率的与不熟悉的人一起创业，不然被吃了都不知道是怎么回事。后续有时间再写写总结这一年的创业失败经历。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　精神方面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今年实在是太忙了，原想应该挤不出时间来学习，还好学会了目标分解，且自己的执行力还不错，在精神领域有了大丰收。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　每个月初我会将年目标拿出来进行思考，看看哪些当月可以实现的，然后制定月计划。每周末也会花一点时间查看月计划，看看哪些本周需要去执行的，检查未执行项还有多少，制定本周的工作计划。而每天早上与晚上都会看看本周的计划，提醒自己还有事情未执行需要处理，需要安排时间去完成它。通过这种时间与目标管理习惯，将自己的生活节奏安排的满满的，通过高效的执行，合理的见缝插针安排时间，一年下来做成了很多我自己也想像不到的事情。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在工作日，利用每天早起到上班这段时间，上千聊听周老师以及其他老师的音频课程，每天1小时大半年坚持下来，完成了11个系列音频课程的学习（Scrum实战、七嘴八舌1、七嘴八舌2、数据建模、问题思维、战略思维、Z创新、产品研发管理体系的构建、佳能5D系统入门课程、手把手教你零基础写作、手把手教你零基础写作）。利用晚上睡觉前的一点点时间和周末的一些空闲时间来看书，一年下来看了17本书，其中有几本是精读，虽然与去年定下看30本书的计划还有些差距，但能做到这样自己已经很满意了。有几本书非常不错，大家有兴趣可以看看，分别是：Scrum实战、提问的威力、整理情绪的力量、大脚小脚一起走带着孩子去旅行、从教练到唤醒者、当你的才华还撑不起你的梦想时&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　健康方面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为我是家里的顶梁柱，所以身体健康非常重要，有了健康的身体才能为家再继续拼搏下去，为我爱的人与爱我人的打造更好的生活。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　IT领域加班是常态，而缺乏锻炼会让体质持续下降，所以到创业公司后就在附近的健身房购买了年卡，然后每周会抽出一到两天晚上6点去跑步，等跑完步再回公司继续加班。坚持了半年时间，从每次跑5公里慢慢增加到10公里，最多时跑15公里。有规律的锻炼，感觉体能还能保持在原有水平上还有所上升。原计划年终锻炼好后去跑一次半马，可惜这两个月一直没有时间进行训练和尝试，只能将这个目标放在明年了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　休闲娱乐方面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今年继续和儿子一起参加佛山50公里徒步，可能年初锻炼的还不够多，只坚持走了30多公里就走不动了。明年3月份将再战50公里，经过这一年的跑步练习，相信应该没有太大的难度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今年除了工作就是工作，能回忆起来的只有学习，户外运动大大减少了。除了家庭组织了几次小活动以外，只爬了几座小山。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　10月份国庆去了四川贡嘎徙步，3千多4千米海拔严重高反，外加太大意没做好保护，得了雪盲症+紫外线晒伤，第一次感觉到了与死神那么的近。只有失去过健康才更懂得健康的珍贵。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　11月底有点空闲时间，跟朋友自驾去了江西永修逛了逛最美水上公路，然后去了婺源附近，去了三清山打了下卡，看看篁岭的晒秋与石城的日出，看着这些迷人的景色，感受祖国大好河山的美。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们常说没时间没时间，其实时间就是挤出来的，关键是看自己想不想出发，内心深处是否有走出去的渴望。合理的利用好时间安排，提前做好相关的准备工作，利用周末也可以去很多地方的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　贡献方面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今年在知识输出方面是做了很多，除了完成了《我的第一个python web开发框架》系列博文外，在微信群里组织了一群爱学习的小伙伴一起分享学习了《个人成长》系列、《情绪管理》系列和《企业架构》系列等话题，从3月底开始一直持续到8月份，利用每周日晚上时间，通过思维导图、文字或语音的方式，讨论这些系列话题的方方面面内容。而自己也从一开始需要花时间准备到后面只需要简单的思维导图或准备一些关键字，就可以洋洋洒洒的讲上半天，在表达能力方面有了很大的提升。而对于这些话题的认识，也慢慢形成了自己的知识体系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在9月份过后，也组织了多次线上线下的主题分享会，到大学和一些公司里与不同人进行了各方面的交流与学习。另外也参加了一些线上读书会，共读一本书，一起讨论与分享书中所得。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　另外，也接到了”在行&quot;的不少人员的邀请，和他们进行深入交流，帮助解决一些技术问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　持续的输出是个人成长必不可少的重要环节，在输出的过程中，一方面可以接触更多不同的知识，另一方面也可以通过交流，发现自己的不足之外，而在思维碰撞与反思的过程中，自己的知识体系也在一点一滴的积累中建立起来。在助人的过程中，自己同时得到了更多的收获，成长的更快。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2019年目标&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一年之计在于春，没有目标就没有方向，也就不会有结果，所以制定合适自己的，且自己想要达成的目标就非常重要了。根据18年执行的情况与状态，初步制定下面目标：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;2019年目标：
    &lt;/span&gt;1&lt;span&gt;. 组织全家一次长线旅行
    &lt;/span&gt;2&lt;span&gt;. 记得家人生日，提前准备不同的礼物
    &lt;/span&gt;3&lt;span&gt;. 每月组织一次家庭回顾与计划小会，沟通问题，计划未来
    &lt;/span&gt;4&lt;span&gt;. 购买乐高机器人，与儿子共同学习机器人编程
    &lt;/span&gt;5&lt;span&gt;. 今年坚持看完20本书
    &lt;/span&gt;6&lt;span&gt;. 继续深入学习已购买的千聊语音系列课程
    &lt;/span&gt;7&lt;span&gt;. 继续坚持锻炼身体
    &lt;/span&gt;8&lt;span&gt;. 参加2018年佛山组织的50公里徒步活动
    &lt;/span&gt;9&lt;span&gt;. 尝试跑一次半马
    &lt;/span&gt;10&lt;span&gt;. 组织或参加一次IT帮线下沙龙活动
    &lt;/span&gt;11&lt;span&gt;. 参加一次长线户外活动
    &lt;/span&gt;12&lt;span&gt;. 每月参加或组织一次短线户外活动
    &lt;/span&gt;13&lt;span&gt;. 如果有时间，录制一些《我的第一个python web框架》的学习视频
    &lt;/span&gt;14&lt;span&gt;. 坚持敏捷个人练习
    &lt;/span&gt;15&lt;span&gt;. python人工智能与机器学习研究
    &lt;/span&gt;16&lt;span&gt;. 通过AACTP国际注册培训师学习与认证，成为一名讲师
    &lt;/span&gt;17&lt;span&gt;. 继续组织敏捷个人线上分享学习活动
    &lt;/span&gt;18&lt;span&gt;. 完成个人成长与情绪管理系列主题内容的总结
    &lt;/span&gt;19. 经营好个人公众号
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;新的一年即将开始，既往开来，新的一年希望有新的收获，继续加油吧，即将步入四十的油腻的中老年大叔。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 16:02:00 +0000</pubDate>
<dc:creator>AllEmpty</dc:creator>
<og:description>又到了一年一度的回顾时间，每年的总结可以让我更清晰的认识自己，而新的一年计划，可以让我更有目标去努力奋斗。 2018年是我人生当中最最繁忙的一年，第一次出来加入互联网创业大潮，当然最后是以失败告终，与</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/EmptyFS/p/10188094.html</dc:identifier>
</item>
<item>
<title>C语言入门教程-(4)常量和变量 - 程序员基础知识</title>
<link>http://www.cnblogs.com/cxyjczs/p/10193398.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cxyjczs/p/10193398.html</guid>
<description>&lt;p&gt;程序执行过程中其值不能发生改变的量叫做常量，其值能发生改变的量叫做变量。常量可以直接使用，而变量则必须先定义后才能使用，否则编译器会报错。&lt;/p&gt;

&lt;p&gt;在介绍常量和变量的命名规范之前，我们先了解一下什么是标识符和关键字。&lt;/p&gt;
&lt;h3 id=&quot;h1-1&quot;&gt;&lt;span&gt;1）标识符&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;标识符，用来标识符号常量名、变量名、函数名、数组名、文件名、类名、对象名等。简单的将就是大家取的名字~~有效标识符的构成规则如下：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;1）第一个字符必须是字母（大小写都行）或下划线，不能是数字;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;2）后跟字母（大小写都行）、下划线或数字组成;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;3）标识符中的大小写字母有区别。如，变量sum,Sum,SUM代表三个不同的变量；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;4）不能与编译系统已经预定义的、具有特殊用途的保留标识符（即关键字）同名。比如，不能将标识符命名int,char,float,break,case,for,while,return等等；&lt;br/&gt;下面列出几个有效的标识符：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;teemo    &lt;br/&gt;Garen&lt;br/&gt;move_name&lt;br/&gt;dj8023  &lt;br/&gt;_temp  &lt;br/&gt;i&lt;br/&gt;the_hero_is_Garen&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面列出几个无效的标识符：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;8times    &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h2-1&quot;&gt;&lt;span&gt;2）关键字&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;C语言中具有特殊含义的英文单词，通常用于构成语句，存储数据，定义数据类型等。下面列出了C语言中的一些保留字。这些保留字不能作为常量名、变量名或其他标识符名称。&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;1）基本数据类型&lt;br/&gt;int：声明整数类型&lt;br/&gt;float：声明浮点型&lt;br/&gt;double：声明双精度浮点型&lt;br/&gt;char：声明字符类型&lt;br/&gt;void：空类型，声明函数无返回值或无参数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;2）流程控制&lt;br/&gt;条件判断：if、else、switch、case、default等&lt;br/&gt;循环：while、do、for、break、continue&lt;br/&gt;返回：return&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在本节中，先了解一下就行，有很多不明白的关键字后面会讲到。&lt;/p&gt;
&lt;h3 id=&quot;h3&quot;&gt;&lt;span&gt;3）命名规范&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;首先，必须是有效的标识符。在这个基础上，我们使用的命名最好能做到看名字就明白它表示什么。如果要使用一个变量来表示teemo的血量，我们可以将其命名为teemo_hp或者teemoHp，而不是随便的命名为a或者b之类的。遇到两个或者更多的单词组成的名称，我们通常用下划线字符将它们连接起来，或者从第二单词开始将每一个单词的第一个字母大写。&lt;/p&gt;
&lt;p&gt;还有一些程序员可能会在变量中加入描述变量类型或者内容的前缀。例如，可以将整型变量teemoHp命名为nTeemoHp,其中n表示整数值。这样做的好处是在你遇到这个变量的时候，可以很直接的知道这个变量的类型。常用的几种前缀有：c(表示单个字符)、p(表示指针)等。另外，常量的标识符习惯用大写字母表示，变量的标识符习惯用小写字母表示。单下划线打头的标识符一般代表标准数据库的变量，双下划线打头的标识符一般代表编译器的变量。&lt;/p&gt;
&lt;p&gt;关于命名，想说的是，命名可以根据自己的需要、喜好和个人风格来使用，但起码要保证一个程序里面的风格是一致性的。在团队共同开发中，则需要按照规范进行命名。规范的命名不仅可以让自己以后看的明白，也利于给团队其他人维护代码。&lt;/p&gt;

&lt;h3 id=&quot;h1-2&quot;&gt;&lt;span&gt;1）直接常量&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;直接常量又可以叫做字面常量，通过数据来直接表现。在C语言中，编译器会自动根据字面常量的表示形式确定其类型。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;y = x + &lt;span class=&quot;hljs-number&quot;&gt;3;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的程序中，3将会被编译器作为int类型的常量。再例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;y = x + &lt;span class=&quot;hljs-number&quot;&gt;3.0;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.0是小数，则会被编译器作为float类型的常量。当然，字符也有常量，不过和整型常量不同，字符常量必须使用单引号来进行表示。字符常量是使用单引号括起来的一个字符，不能是多个字符。例如，下面都是合法的字符常量：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;'a'、&lt;span class=&quot;hljs-string&quot;&gt;'B'、&lt;span class=&quot;hljs-string&quot;&gt;'#'、&lt;span class=&quot;hljs-string&quot;&gt;'8'&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要强调的是只能是单引号，并且只有一个字符，字符可以是ASCII码中的任意字符。如果数字被定义成字符常量的话，就不能代表数字字面的量了。如果参与运算，它的值将会是对应的ASCII码。比如上面的字符常量'8'，在ASCII码对应的值为56。这个时候参与运算，比如加上1，将得到的整数值是57。&lt;/p&gt;
&lt;h3 id=&quot;h2-2&quot;&gt;&lt;span&gt;2）符号常量&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在C语言程序中，还可以使用一个符号常量来代替常量。使用符号常量有两个好处，一个是如果需要修改常量的话，只要修改定义符号常量的语句就行；另一个好处，使得程序中常量的含义更加清楚。定义符号常量有两种方法：#define宏定义和const语句定义。在这里我就先不展开讲了，大家过一眼就好了，后面的教程会详细的讲解宏定义和const的应用。&lt;/p&gt;

&lt;p&gt;在程序中，我们会使用到各种变量。当我们创建一个变量时，就会在内存中开辟一些空间。一般变量先声明，然后初始化。&lt;/p&gt;
&lt;h3 id=&quot;h1-3&quot;&gt;&lt;span&gt;1）声明变量&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;C语言中使用声明语句，来声明一个变量，指出存储类型并提供位置标签。C语言中，变量要求先声明后定义，这样做的好处在于：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;1.确保后面引用的变量名和声明的一致，减少了输入错误。如声明了变量teemo，在后面引用时，不小心输成了timo，编译器将会报错，指示timo未声明。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;2.在声明变量时，会指定变量的类型，当进行运算的时候，编译器就可以检查运算是否合法。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;3.编译器根据指定变量的类型分配内存。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;声明变量的一般语法格式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;类型 变量名;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，类型是数据类型的关键字，比如说int表示整数类型、double表示双精度浮点类型。变量名则需要符合命名规范的标识符。下面我们将会通过简单的程序，来介绍如何声明变量。比如说：我们要声明一个变量表示提莫的血量。在C语言中，就可以表示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int teemoHp;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;float teemoAttack;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;int 是一种数据类型，表示是整数。&lt;br/&gt;teemoHp 是一个标识符，这里代表整数类型的血量。&lt;br/&gt;; 表示一个语句结束。&lt;/p&gt;
&lt;p&gt;我们从计算机的角度来讲，第一条语句指出程序需要一个存储空间，用这个内存来存储一个整数。那么在C语言中，写上这个声明语句，程序就会将计算机的某一区域内存，命名为teemoHp，并在这个内存中存放整数类型。teemoHp这个标识符就是一个变量，它代表teemo的血量。这条语句创造了一个变量teemoHp，我们把这个过程叫做变量声明。&lt;/p&gt;
&lt;p&gt;同类型的变量还可以在一个语句中同时声明多个变量，各变量之间用逗号分隔开，例如:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int teemoHp, garenHp;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面语句声明了两个整数类型的变量，等同于：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int teemoHp;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int garenHp;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h2-3&quot;&gt;&lt;span&gt;2）变量初始化&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在对变量声明时，编译器会给变量分配内存，但分配的这个内存并不会被清空。这个就和你删除电脑中的文件一样，虽然你点了删除这些文件，但实际上这些文件还会存在，只是我们看不到了。只有当你再次存储文件覆盖这些文件时，这些文件才算是删除了。这也是一些删除的文件，也可以通过某些手段来恢复的重要原因。那么就可能出现编译器给我们分配的内存，已经有存储值的情况，而且这个值对我们来说还是不确定的。为了防止程序因为不确定的值而出现不可预料的情况，我们在使用变量的时候就要对其进行赋初值，使得变量的值是确定的，这种方法就是初始化。&lt;/p&gt;
&lt;p&gt;下面再来看一个简单的实例，我们要把提莫的血量作为一个变量，提莫的血量值是586。在C语言中，就可以表示成：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;int teemoHp;&lt;br/&gt;teemoHp = 586;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们先声明了一个变量teemoHp，然后将常量586保存到变量teemoHp中。第二个语句中，“=”也叫赋值操作符，这个过程叫做赋值。赋值是指数据放到内存的过程，我们把这个过程叫做变量的赋值；又因为是第一次赋值，也称变量的初始化。&lt;/p&gt;
&lt;p&gt;在声明变量的同时可以直接对其进行赋值，上面的两个语句，又可以直接表示成：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int teemoHp = &lt;span class=&quot;hljs-number&quot;&gt;586;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果多个变量具有相同的值，还可以进行连续的赋值。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;int teemoHp, garenHp;&lt;br/&gt;teemoHp = garenHp = 586;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但不可以在声明的时候对其进行连续赋值。像下面语句一样：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int teemoHp = garenHp = &lt;span class=&quot;hljs-number&quot;&gt;586;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样写会导致标识符garenHp没有声明，所以编译器报错。&lt;/p&gt;
&lt;p&gt;如果要在一个语句中这样做，我们应该写成下面语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int teemoHp = &lt;span class=&quot;hljs-number&quot;&gt;586, garenHp = &lt;span class=&quot;hljs-number&quot;&gt;586;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们还可以写成：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;int teemoHp, garenHp = 586;&lt;br/&gt;teemoHp = 586;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们知道，在实际中，提莫通过等级的提升以及出的装备，血量的值会不断变化，那我们应该怎么办呢？答案是，血量的值是一个变量，我们可以通过再次赋值改变血量的值，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;int teemoHp = 586;&lt;br/&gt;teemoHp = 1000;&lt;br/&gt;teemoHp = 5000;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次的赋值，会把第一次的数据覆盖掉。也就是说，teemoHp中最后的值是5000（这怕不是一个肉提莫），这也是因为586、1000已经被覆盖掉了。&lt;/p&gt;

&lt;p&gt;总结一下，本节内容主要介绍了C语言程序的常量和变量。介绍了常量和变量的概念以及命名规范，然后讲解了它们的一些基本使用方法。&lt;/p&gt;

&lt;p&gt;4-1 对下面进行判断，哪些是合法标识符，哪些又不是合法标识？&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;su8&lt;br/&gt;_&lt;span class=&quot;hljs-selector-tag&quot;&gt;total&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;Class&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;Student_name&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;louts_1_2_3&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;BASIC&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;M&lt;span class=&quot;hljs-selector-class&quot;&gt;.D&lt;span class=&quot;hljs-selector-class&quot;&gt;.John&lt;br/&gt;\&lt;span class=&quot;hljs-selector-id&quot;&gt;#123&lt;br/&gt;3&lt;span class=&quot;hljs-selector-tag&quot;&gt;D45&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4-2 编写一个程序，对盖伦的属性值，找到合适的类型来定义并且为其赋值。&lt;br/&gt;名字：简称为G&lt;br/&gt;生命值：455&lt;br/&gt;移动速度：340&lt;br/&gt;攻击速度：0.625&lt;br/&gt;攻击范围：125&lt;br/&gt;生命回复：8.25&lt;br/&gt;攻击力：59.5&lt;/p&gt;
&lt;p&gt;可以在评论中，写下你们的练习答案。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;之后的文章会给大家带来更精彩的内容&lt;br/&gt;欢迎关注我的知乎专栏：程序员基础知识&lt;br/&gt;获取练习答案以及更多实战项目&lt;br/&gt;欢迎关注我的公众号：程序员基础知识&lt;br/&gt;交(gao)流(ji)群：493584686&lt;/p&gt;
&lt;/blockquote&gt;

</description>
<pubDate>Fri, 28 Dec 2018 15:35:00 +0000</pubDate>
<dc:creator>程序员基础知识</dc:creator>
<og:description>本节内容主要介绍了C语言程序的常量和变量。介绍了常量和变量的概念以及命名规范，然后讲解了它们的一些基本使用方法。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cxyjczs/p/10193398.html</dc:identifier>
</item>
<item>
<title>python属性管理(1)：基础 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/10193396.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/10193396.html</guid>
<description>&lt;h2 id=&quot;管理属性的几种方式&quot;&gt;管理属性的几种方式&lt;/h2&gt;
&lt;p&gt;在python中访问、设置、删除对象属性的时候，有以下几种方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用内置函数getattr()、setattr()和delattr()&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;自己编写&lt;code&gt;getter()&lt;/code&gt;、&lt;code&gt;setter()&lt;/code&gt;、&lt;code&gt;deleter()&lt;/code&gt;方法&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;重载&lt;code&gt;__getattr__()&lt;/code&gt;、&lt;code&gt;__setattr__()&lt;/code&gt;、&lt;code&gt;__delattr__()&lt;/code&gt;运算符，这决定了&lt;code&gt;x.y&lt;/code&gt;的访问、赋值方式以及&lt;code&gt;del x.y&lt;/code&gt;的方式&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;__getattribute__()&lt;/code&gt;方法&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;使用描述符协议&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;使用property协议，它是一种特殊的描述符&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;本文简单介绍其中的前4种作为基础，后面使用单独的文章解释后2种。&lt;/p&gt;
&lt;h2 id=&quot;内置函数xxxattr管理属性&quot;&gt;内置函数XXXattr()管理属性&lt;/h2&gt;
&lt;p&gt;通过内置函数getattr()、setattr()、delattr()能简单访问、设置、删除对象上的属性。&lt;/p&gt;
&lt;p&gt;先看看它们的帮助文档：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;getattr(...)
    getattr(object, name[, default]) -&amp;gt; value
    Get a named attribute from an object;
    getattr(x, 'y') is equivalent to x.y.

setattr(obj, name, value, /)
    Sets the named attribute on the given object to the specified value.
    setattr(x, 'y', v) is equivalent to ``x.y = v''

delattr(obj, name, /)
    Deletes the named attribute from the given object.
    delattr(x, 'y') is equivalent to ``del x.y''&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用法很简单，给定要操作的对象obj以及要操作的属性名称name。对于getattr()来说，如果要操作的属性不存在默认会报错，可以给定一个default参数表示属性不存在时返回该给定属性值。&lt;/p&gt;
&lt;p&gt;例如，下面是一个简单的Person类和对象p：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person():
    def __init__(self, name):
        self.name = name

p = Person(&quot;malongshuai&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用getattr()获取name属性和不存在的age属性：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;print(getattr(p, &quot;name&quot;))
print(getattr(p, &quot;age&quot;, 23))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面访问age属性时，如果把第三个参数&quot;23&quot;去掉，将抛出异常。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;AttributeError: 'Person' object has no attribute 'age'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用setattr()和delattr()设置和删除属性：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;setattr(p, &quot;age&quot;, 25)
print(p.__dict__)

delattr(p, &quot;age&quot;)
print(p.__dict__)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{'name': 'malongshuai', 'age': 25}
{'name': 'malongshuai'}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;自己编写accessor方法&quot;&gt;自己编写accessor方法&lt;/h2&gt;
&lt;p&gt;一般面向对象的语言都是自己写setter、getter、deleter方法来管理属性的，通用又安全，但是管理起来并不那么方便。&lt;/p&gt;
&lt;p&gt;这里仅介绍一下，它们更好的写法参考：&lt;a href=&quot;https://www.cnblogs.com/f-ck-need-u/p/10091181.html&quot;&gt;python设置对象属性&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例如，在Person类中加上name、age这两个属性的accessor方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person():
    def __init__(self, name):
        self.name = name

    def set_name(self,name): self.name = name
    def get_name(self): return self.name
    def del_name(self): del self.name

    def set_age(self,age): self.age = age
    def get_age(self): return self.age
    def del_age(self): del self.age&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;缺点是很明显的，对于想要管理的每个属性，都得去定义这些属性。也就是说，accessor方法是针对单个属性的。&lt;/p&gt;
&lt;h2 id=&quot;运算符重载管理属性&quot;&gt;运算符重载管理属性&lt;/h2&gt;
&lt;p&gt;通常可以直接使用点号运算来访问、设置属性。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;p.name          # (1)访问p对象的name属性
p.name = &quot;abc&quot;  # (2)为p对象的name属性赋值
del p.name      # (3)删除p对象的name属性&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先说对象的赋值和删除操作，也就是上面的(2)和(3)。这两种操作可以直接被&lt;code&gt;__setattr__()&lt;/code&gt;、&lt;code&gt;__delattr__()&lt;/code&gt;这两个方法拦截，或者说只要重写了这两个方法，每当对属性赋值、删除时，都会调用对应的这两个方法。&lt;/p&gt;
&lt;p&gt;再说访问属性的操作(1)，python提供了两个对应的方法&lt;code&gt;__getattr__()&lt;/code&gt;和&lt;code&gt;__getattribute__()&lt;/code&gt;。前者是在&lt;strong&gt;访问不存在的属性&lt;/strong&gt;时被自动调用的，&lt;strong&gt;后者则是访问属性时被调用的，它无视属性是否存在&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里提前说一个稍后要遇到的问题总结：对于适用于所有属性操作的&lt;code&gt;__setattr__&lt;/code&gt;、&lt;code&gt;__delattr__&lt;/code&gt;和&lt;code&gt;__getattribute__&lt;/code&gt;方法，要避免它们的无限递归。参考后面的示例即可知。&lt;/p&gt;
&lt;h3 id=&quot;getattr__&quot;&gt;__getattr__()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__getattr__()&lt;/code&gt;是通过点号访问不存在属性时被调用的。它有两个使用标准：要么返回属性值，要么抛出异常。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person():
    def __init__(self, name):
        self.name = name

    def __getattr__(self, attrname):
        if attrname == &quot;name&quot;:
            print(&quot;in getattr1&quot;)
            return self.name
        elif attrname == &quot;age&quot;:
            print(&quot;in getattr2&quot;)
            return 25
        else:
            print(&quot;in getattr3&quot;)
            raise AttributeError(attrname)

p = Person(&quot;malongshuai&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的Person类带有属性name，所以访问name属性的时候不会调用&lt;code&gt;__getattr__()&lt;/code&gt;，而访问age或其它属性时会调用该方法，只不过age属性有自定义的返回值，其它属性则报错。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;print(p.name)
print(p.age)
print(p.job)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;malongshuai
in getattr2
25
in getattr3
Traceback (most recent call last):
  File &quot;g:/pycode/b.py&quot;, line 21, in &amp;lt;module&amp;gt;
    print(p.job)
  File &quot;g:/pycode/b.py&quot;, line 14, in __getattr__
    raise AttributeError(attrname)
AttributeError: job&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;getattribute__&quot;&gt;__getattribute__()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;和&lt;code&gt;__getattr__()&lt;/code&gt;类似，不同的是它前者适用于所有属性的访问，而不管目标属性是否存在。&lt;/p&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;__getattribute__()&lt;/code&gt;适用于所有属性访问操作，所以要避免无限递归。例如，下面是错误的写法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def __getattribute__(self, attr):
    return self.attr&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为这个方法中的&lt;code&gt;self.attr&lt;/code&gt;会继续触发&lt;code&gt;__getattribute__&lt;/code&gt;的调用，从而出现无限递归问题。&lt;/p&gt;
&lt;p&gt;解决办法是通过父类来访问，比如super()或object类。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super().__getattribute__(attr)
object.__getattribute__(self, attr)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;的优先级高于&lt;code&gt;__getattr__()&lt;/code&gt;，前者存在的时候不会调用到后者，除非前者的代码中调用了后者，或者前者抛出了异常。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person():
    def __init__(self, name):
        self.name = name

    def __getattribute__(self, attr):
        print(&quot;in getattribute&quot;)
        return object.__getattribute__(self, attr)
        # return super.__getattribute__(attr)

    def __getattr__(self, attrname):
        if attrname == &quot;name&quot;:
            print(&quot;in getattr1&quot;)
            return self.name
        elif attrname == &quot;age&quot;:
            print(&quot;in getattr2&quot;)
            return 25
        else:
            print(&quot;in getattr3&quot;)
            raise AttributeError(attrname)


p = Person(&quot;malongshuai&quot;)

print(p.name)
print(p.age)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;in getattribute
malongshuai
in getattribute
in getattr2
25&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面输出了name和age两个属性，但是输出&quot;p.age&quot;的时候该属性不存在，于是&lt;code&gt;__getattribute__&lt;/code&gt;抛出异常，然后触发&lt;code&gt;__getattr__&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是，在解决无限递归问题上，后面的&lt;code&gt;__setattr__&lt;/code&gt;和&lt;code&gt;__delattr__&lt;/code&gt;还会有一种访问&lt;code&gt;__dict__&lt;/code&gt;的方式，这不适合于这里的&lt;code&gt;__getattribute__&lt;/code&gt;，因为访问这个字典也会触发&lt;code&gt;__getattribute__&lt;/code&gt;从而继续导致无限递归。&lt;/p&gt;
&lt;h3 id=&quot;setattr__&quot;&gt;__setattr__()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__setattr__()&lt;/code&gt;用来拦截对象属性赋值操作。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;p.name = &quot;long&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会转换为调用&lt;code&gt;p.__setattr__(self,name,&quot;long&quot;)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;唯一需要注意的是避免赋值时的无限递归问题&lt;/strong&gt;。因为在&lt;code&gt;__setattr__()&lt;/code&gt;中的赋值语句&lt;code&gt;self.attr = value&lt;/code&gt;会继续调用该方法，最终导致无限递归。&lt;/p&gt;
&lt;p&gt;所以在&lt;code&gt;__setattr__()&lt;/code&gt;方法中，必须使用&lt;code&gt;__dict__&lt;/code&gt;来获取属性并进行赋值，或者访问父类同名属性。所以，有下面几种方式避免无限递归调用。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;self.__dict__[attr] = value
super().__setattr__(attr, value)
object.__setattr__(self, attr, value)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参考下面的示例。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person():
    def __init__(self, name):
        self.name = name

    def __setattr__(self, attr, value):
        print(&quot;in setattr&quot;)
        #self.__dict__[attr] = value
        #super().__setattr__(attr, value)
        object.__setattr__(self, attr, value)

p = Person(&quot;malongshuai&quot;)

p.age = 33      # 自动调用__setattr__()
print(p.age)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;in setattr
in setattr
33&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可能已经发现问题所在了，上面输出了两次&lt;code&gt;in setter&lt;/code&gt;，原因是&lt;code&gt;__init__()&lt;/code&gt;中的赋值操作也会触发&lt;code&gt;__setattr__()&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;delattr__&quot;&gt;__delattr__()&lt;/h3&gt;
&lt;p&gt;当调用&lt;code&gt;del x.y&lt;/code&gt;的时候会自动触发&lt;code&gt;__delattr__()&lt;/code&gt;的调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同样需要注意的是避免赋值时的无限递归问题&lt;/strong&gt;。因为在&lt;code&gt;__delattr__()&lt;/code&gt;中的del语句可能会继续调用该方法，最终导致无限递归。所以在&lt;code&gt;__delattr__()&lt;/code&gt;方法中，必须使用&lt;code&gt;__dict__&lt;/code&gt;来获取属性并进行赋值，或者访问父类同名属性。所以，有下面几种方式避免无限递归调用。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;del self.__dict__[attr]
super().__delattr__(attr)
object.__delattr__(self, attr)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person():
    def __init__(self, name):
        self.name = name

    def __delattr__(self, attr):
        print(&quot;%s deleting&quot; % (attr))

        #del self.__dict__[attr]
        #super().__delattr__(attr)
        object.__delattr__(self, attr)

        print(&quot;%s deleted&quot; % (attr))


p = Person(&quot;malongshuai&quot;)
p.age = 33
del p.age&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 28 Dec 2018 15:33:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<og:description>管理属性的几种方式 在python中访问、设置、删除对象属性的时候，有以下几种方式： 1. 使用内置函数getattr()、setattr()和delattr() 2. 自己编写 、`setter()</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/10193396.html</dc:identifier>
</item>
<item>
<title>深夜你痛苦过吗？ - 我的博客我的人生</title>
<link>http://www.cnblogs.com/JunLoveHua/p/10193367.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JunLoveHua/p/10193367.html</guid>
<description>&lt;p&gt;昨天晚上在家葛优躺的时候，突然微信上连收了好几条消息，打开一看：“大纯，我好绝望！我24岁了，毕业一年了，连一件1000块的大衣都买不起。”&lt;/p&gt;
&lt;p&gt;收到这条消息的时候，我看着手上端着的五块钱一桶的泡面，瞬间也挺绝望的。&lt;/p&gt;
&lt;p&gt;给我发消息的是我的一个小学弟，叫浩子。去过初创公司，也换过不同类型的工作，一年过去了，用浩子的话说：“除了大一岁我也不知道自己增长了什么？”&lt;/p&gt;
&lt;p&gt;毕业的这一年，貌似每个人都被迷茫无助笼罩的，我问了几个身边几个毕业生，他们的一年的状态：&lt;/p&gt;
&lt;p&gt;“我每天都很困，是因为我被生活所困”；&lt;/p&gt;
&lt;p&gt;”我和女朋友的争吵，一切都是从没钱开始。“&lt;/p&gt;
&lt;p&gt;“小时候，老骗爸妈没钱，长大后老骗爸妈有钱，感觉生活，除了买不起房，买不起车，穷了点，其他也挺好的。”&lt;/p&gt;
&lt;p&gt;聊完发现尽管大家生活迥异，但在相似的年龄总是匹配着相似的烦恼和期待：被生活扼住喉咙，被工作压榨自我，被年龄渐长却一无所成的焦虑笼罩……&lt;/p&gt;
&lt;p&gt;十几岁为学业烦恼，少考了几分都感觉世界灰暗起来了，&lt;/p&gt;
&lt;p&gt;25岁，因为没有存款，因为没有爱人，顿觉手足无措，慌乱不已。&lt;/p&gt;
&lt;p&gt;30岁开始兼顾家庭，40岁上有老下有小，50岁孩子离家，生活仍不轻松，仍没有活成自己想要的样子……&lt;/p&gt;
&lt;p&gt;其实仔细想想，似乎人生的每个阶段都不会轻松。&lt;/p&gt;
&lt;p&gt;因为人生真的太苦。你总会长夜哭一次，无非有的人早一点，有的人晚一点。&lt;/p&gt;
&lt;p&gt;总有一个时刻，我们会失去很重要的东西。我们会后知后觉，明白一切已不可追回。我们发现自己如此糟糕，无比愧疚……&lt;/p&gt;
&lt;p&gt;你深夜痛哭过吗？&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 15:20:00 +0000</pubDate>
<dc:creator>我的博客我的人生</dc:creator>
<og:description>昨天晚上在家葛优躺的时候，突然微信上连收了好几条消息，打开一看：“大纯，我好绝望！我24岁了，毕业一年了，连一件1000块的大衣都买不起。” 收到这条消息的时候，我看着手上端着的五块钱一桶的泡面，瞬间</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JunLoveHua/p/10193367.html</dc:identifier>
</item>
<item>
<title>Spring Boot 之日志记录 - 静默虚空</title>
<link>http://www.cnblogs.com/jingmoxukong/p/10193303.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jingmoxukong/p/10193303.html</guid>
<description>&lt;blockquote readability=&quot;9.8936170212766&quot;&gt;
&lt;p&gt;Spring Boot 支持集成 Java 世界主流的日志库。&lt;/p&gt;
&lt;p&gt;如果对于 Java 日志库不熟悉，可以参考：&lt;a href=&quot;https://github.com/dunwu/notes/blob/master/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/javastack/javalib/java-log.md&quot;&gt;细说 Java 主流日志工具库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关键词： &lt;code&gt;log4j&lt;/code&gt;, &lt;code&gt;log4j2&lt;/code&gt;, &lt;code&gt;logback&lt;/code&gt;, &lt;code&gt;slf4j&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring Boot 内部日志全部使用 &lt;a href=&quot;https://commons.apache.org/logging&quot;&gt;Commons Logging&lt;/a&gt; 记录，但保留底层日志实现。为 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api//java/util/logging/package-summary.html&quot;&gt;Java Util Logging&lt;/a&gt;，&lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4J2&lt;/a&gt;，和 &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; 提供了默认配置。在每种情况下，记录器都预先配置为使用控制台输出，并且还提供可选的文件输出。&lt;/p&gt;
&lt;p&gt;默认情况下，如果使用“Starters”，则使用 Logback 进行日志记录。还包括适当的 Logback 路由，以确保使用 Java Util Logging，Commons Logging，Log4J 或 SLF4J 的依赖库都能正常工作。&lt;/p&gt;
&lt;h2 id=&quot;日志格式&quot;&gt;日志格式&lt;/h2&gt;
&lt;p&gt;Spring Boot 日志默认格式类似下面的形式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2014-03-05 10:57:51.112  INFO 45469 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.52
2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1358 ms
2014-03-05 10:57:51.698  INFO 45469 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/]
2014-03-05 10:57:51.702  INFO 45469 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;日期和时间：精确到微秒&lt;/li&gt;
&lt;li&gt;日志级别：&lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, or &lt;code&gt;TRACE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;进程 ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;---&lt;/code&gt; 分隔符后面是实际的日志内容&lt;/li&gt;
&lt;li&gt;线程名&lt;/li&gt;
&lt;li&gt;日志名&lt;/li&gt;
&lt;li&gt;日志内容&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;控制台输出&quot;&gt;控制台输出&lt;/h2&gt;
&lt;p&gt;Spring Boot 默认打印信息到控制台，并且仅打印&lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt; 级别信息。&lt;/p&gt;
&lt;p&gt;如果你想打印 debug 级别信息，可以设置 jar 启动参数，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ java -jar myapp.jar --debug&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此外，也可以在 &lt;code&gt;application.properties&lt;/code&gt; 中设置 &lt;code&gt;debug = true&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;打印 &lt;code&gt;trace&lt;/code&gt; 级别信息同上所示。&lt;/p&gt;
&lt;h3 id=&quot;彩色打印&quot;&gt;彩色打印&lt;/h3&gt;
&lt;p&gt;如果您的终端支持 ANSI，可以使用彩色打印来提高可读性。您可以将 spring.output.ansi.enabled 设置为支持的值以覆盖自动检测。&lt;br/&gt;使用 ％clr 转换字配置颜色编码。在最简单的形式中，转换器根据日志级别对输出进行着色，如以下示例所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;%clr(%5p)
%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){yellow}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;支持以下的颜色和样式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;blue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;faint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;green&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magenta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yellow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;文件输出&quot;&gt;文件输出&lt;/h2&gt;
&lt;p&gt;默认情况下，Spring Boot 仅记录到控制台，不会写入日志文件。如果除了控制台输出之外还要编写日志文件，则需要设置 &lt;code&gt;logging.file&lt;/code&gt; 或 &lt;code&gt;logging.path&lt;/code&gt; 属性（例如，在 application.properties 中）。&lt;/p&gt;
&lt;p&gt;详细配置参考：&lt;a href=&quot;http://www.cnblogs.com/jingmoxukong/p/10193303.html#配置&quot;&gt;配置&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;日志级别&quot;&gt;日志级别&lt;/h2&gt;
&lt;p&gt;所有支持的日志系统都可以 在 Spring 环境中通过 &lt;code&gt;logging.level.&amp;lt;logger-name&amp;gt;=&amp;lt;level&amp;gt;&lt;/code&gt; 属性设置日志级别（例如，在 &lt;code&gt;application.properties&lt;/code&gt; 中）。其中 level 是 &lt;code&gt;TRACE&lt;/code&gt;、&lt;code&gt;DEBUG&lt;/code&gt;、&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;WARN&lt;/code&gt; 、&lt;code&gt;ERROR&lt;/code&gt;、&lt;code&gt;FATAL&lt;/code&gt; 或 &lt;code&gt;OFF&lt;/code&gt;。可以使用 logging.level.root 配置根记录器。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;日志组&quot;&gt;日志组&lt;/h2&gt;
&lt;p&gt;能够将相关记录器组合在一起以便可以同时配置它们通常很有用。例如，您可以更改所有 Tomcat 相关记录器的日志记录级别，但您无法轻松记住顶级软件包。&lt;/p&gt;
&lt;p&gt;Spring Boot 通过 logging.group 属性来提供这样的支持。&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;logging.group.tomcat=org.apache.catalina, org.apache.coyote, org.apache.tomcat
logging.level.tomcat=TRACE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是 Spring Boot 预设的日志组：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;web&lt;/td&gt;
&lt;td&gt;&lt;code&gt;org.springframework.core.codec&lt;/code&gt;, &lt;code&gt;org.springframework.http&lt;/code&gt;, &lt;code&gt;org.springframework.web&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;sql&lt;/td&gt;
&lt;td&gt;&lt;code&gt;org.springframework.jdbc.core&lt;/code&gt;, &lt;code&gt;org.hibernate.SQL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;日志配置文件&quot;&gt;日志配置文件&lt;/h2&gt;
&lt;p&gt;可以通过在 classpath 中包含适当的库来激活各种日志记录系统，并且可以通过在 classpath 的根目录中或在以下 Spring &lt;code&gt;Environment&lt;/code&gt; 属性指定的位置提供合适的配置文件来进一步自定义：&lt;code&gt;logging.config&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您可以使用 &lt;code&gt;org.springframework.boot.logging.LoggingSystem&lt;/code&gt; 系统属性强制 Spring Boot 使用特定的日志记录系统。该值应该是 &lt;code&gt;LoggingSystem&lt;/code&gt; 实现的完全限定类名。您还可以使用 &lt;code&gt;none&lt;/code&gt; 值完全禁用 Spring Boot 的日志记录配置。&lt;/p&gt;
&lt;p&gt;由于在创建 &lt;code&gt;ApplicationContext&lt;/code&gt; 之前初始化日志记录，因此无法在 Spring &lt;code&gt;@Configuration&lt;/code&gt; 文件中控制来自 &lt;code&gt;@PropertySources&lt;/code&gt; 的日志记录。更改日志记录系统或完全禁用它的唯一方法是通过系统属性。&lt;/p&gt;
&lt;h2 id=&quot;logback-扩展&quot;&gt;Logback 扩展&lt;/h2&gt;
&lt;h3 id=&quot;profile-指定配置&quot;&gt;profile 指定配置&lt;/h3&gt;
&lt;p&gt;可以通过 &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; 指定特定的 profile 下的配置，如下：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;springProfile name=&quot;staging&quot;&amp;gt;
    &amp;lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&amp;gt;
&amp;lt;/springProfile&amp;gt;

&amp;lt;springProfile name=&quot;dev | staging&quot;&amp;gt;
    &amp;lt;!-- configuration to be enabled when the &quot;dev&quot; or &quot;staging&quot; profiles are active --&amp;gt;
&amp;lt;/springProfile&amp;gt;

&amp;lt;springProfile name=&quot;!production&quot;&amp;gt;
    &amp;lt;!-- configuration to be enabled when the &quot;production&quot; profile is not active --&amp;gt;
&amp;lt;/springProfile&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;环境属性&quot;&gt;环境属性&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;springProperty&amp;gt;&lt;/code&gt; 标签允许指定从 &lt;code&gt;Environment&lt;/code&gt; 中获取的属性，并在配置文件中引用。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;springProperty scope=&quot;context&quot; name=&quot;fluentHost&quot; source=&quot;myapp.fluentd.host&quot;
        defaultValue=&quot;localhost&quot;/&amp;gt;
&amp;lt;appender name=&quot;FLUENT&quot; class=&quot;ch.qos.logback.more.appenders.DataFluentAppender&quot;&amp;gt;
    &amp;lt;remoteHost&amp;gt;${fluentHost}&amp;lt;/remoteHost&amp;gt;
    ...
&amp;lt;/appender&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;spring-boot-中的日志配置&quot;&gt;Spring Boot 中的日志配置&lt;/h2&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;logging.config= # Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.
logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.
logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.
logging.file.max-history=0 # Maximum of archive log files to keep. Only supported with the default logback setup.
logging.file.max-size=10MB # Maximum log file size. Only supported with the default logback setup.
logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`.
logging.level.*= # Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.
logging.path= # Location of the log file. For instance, `/var/log`.
logging.pattern.console= # Appender pattern for output to the console. Supported only with the default Logback setup.
logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS # Appender pattern for log date format. Supported only with the default Logback setup.
logging.pattern.file= # Appender pattern for output to a file. Supported only with the default Logback setup.
logging.pattern.level=%5p # Appender pattern for log level. Supported only with the default Logback setup.
logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;日志配置属性在应用程序生命周期的早期初始化。因此，通过 &lt;code&gt;@PropertySource&lt;/code&gt; 注释加载的属性文件中找不到日志记录属性。&lt;/li&gt;
&lt;li&gt;日志配置属性独立于实际的日志记录基础结构。因此，spring Boot 不管理特定的配置密钥（例如 Logback 的 logback.configurationFile）。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;源码&quot;&gt;源码&lt;/h2&gt;
&lt;p&gt;完整示例：&lt;a href=&quot;https://github.com/dunwu/spring-boot-tutorial/tree/master/codes/log&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分别展示如何在 Spring Boot 中使用 &lt;code&gt;log4j&lt;/code&gt;, &lt;code&gt;log4j2&lt;/code&gt;, &lt;code&gt;logback&lt;/code&gt; 记录日志。&lt;/p&gt;
&lt;h2 id=&quot;引申和引用&quot;&gt;引申和引用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;引申&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 14:57:00 +0000</pubDate>
<dc:creator>静默虚空</dc:creator>
<og:description>Spring Boot 之日志记录 Spring Boot 支持集成 Java 世界主流的日志库。 如果对于 Java 日志库不熟悉，可以参考：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jingmoxukong/p/10193303.html</dc:identifier>
</item>
<item>
<title>springBoot(13)---整合Druid实现多数据源和可视化监控 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/10192041.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/10192041.html</guid>
<description>&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;先献上&lt;code&gt;github&lt;/code&gt;代码地址:&lt;a href=&quot;https://github.com/yudiandemingzi/springboot-manydatasource&quot; class=&quot;uri&quot;&gt;https://github.com/yudiandemingzi/springboot-manydatasource&lt;/a&gt;&lt;br/&gt;代码拉下来换下自己的mysql数据库地址,就可以直接运行。Druid的优点很明显,它的可视化界面可以监控Sql语句和URI执行情况在开发中真的很需要。&lt;br/&gt;先说优点吧:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    1) 替换DBCP和C3P0。Druid提供了一个高效、功能强大、可扩展性好的数据库连接池。
    2) 数据库密码加密。直接把数据库密码写在配置文件中，这是不好的行为，容易导致安全问题。
    3) 可以监控数据库访问性能，能够详细统计SQL的执行性能，这对于线上分析数据库访问性能有帮助。
    4) SQL执行日志，Druid提供了不同的LogFilter，监控你应用的数据库   访问情况。
    5）扩展JDBC，如果你要对JDBC层有编程的需求，可以通过Druid提供的Filter-Chain机制，很方便编写JDBC层的扩展插件。&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二配置多数据源&quot;&gt;&lt;span&gt;二、配置多数据源&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;pom.xml&quot;&gt;&lt;span&gt;1、pom.xml&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;只需要添加druid这一个jar就行了,有关springboot项目他还有个整合包,用那个整合包也一样。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;       &amp;lt;!-- Druid 数据连接池依赖 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.1.8&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于springboot项目来讲,上面任选一个都是可以的,亲测有效。&lt;/p&gt;
&lt;h4 id=&quot;application.yml&quot;&gt;&lt;span&gt;2、application.yml&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;我这里是采用application.yml进行添加配置,这里面配置了两个数据源,其实在application.yml也可以不配置这些东西,它的主要作用是给数据源配置类读取数据用的。&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: 10
    minIdle: 10
    maxActive: 200
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


#配置了两个数据源
master:
  datasource:
    url: jdbc:mysql://localhost:3306/user?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true
    username: root
    password: root
    driverClassName: com.mysql.jdbc.Driver

cluster:
  datasource:
    url: jdbc:mysql://localhost:3306/student?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true
    username: root
    password: root
    driverClassName: com.mysql.jdbc.Driver&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;主数据源配置类masterdatasourceconfig&quot;&gt;&lt;span&gt;3、主数据源配置类(MasterDataSourceConfig)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * 主数据源配置
 */
@Configuration
@MapperScan(basePackages = MasterDataSourceConfig.PACKAGE, sqlSessionFactoryRef = &quot;masterSqlSessionFactory&quot;)
public class MasterDataSourceConfig {

    /**
     * 配置多数据源 关键就在这里 这里配置了不同的数据源扫描不同mapper
     */
    static final String PACKAGE = &quot;com.binron.multidatasource.mapper.master&quot;;
    static final String MAPPER_LOCATION = &quot;classpath:mapper/master/*.xml&quot;;

    /**
     * 连接数据库信息 这个其实更好的是用配置中心完成
     */
    @Value(&quot;${master.datasource.url}&quot;)
    private String url;  
      
    @Value(&quot;${master.datasource.username}&quot;)
    private String username;  
      
    @Value(&quot;${master.datasource.password}&quot;)
    private String password;  
      
    @Value(&quot;${master.datasource.driverClassName}&quot;)
    private String driverClassName;


    /**
     * 下面的配置信息可以读取配置文件，其实可以直接写死 如果是多数据源的话 还是考虑读取配置文件
     */
    @Value(&quot;${spring.datasource.initialSize}&quot;)
    private int initialSize;  
      
    @Value(&quot;${spring.datasource.minIdle}&quot;)
    private int minIdle;  
      
    @Value(&quot;${spring.datasource.maxActive}&quot;)
    private int maxActive;  
      
    @Value(&quot;${spring.datasource.maxWait}&quot;)
    private int maxWait;  
      
    @Value(&quot;${spring.datasource.timeBetweenEvictionRunsMillis}&quot;)
    private int timeBetweenEvictionRunsMillis;  
      
    @Value(&quot;${spring.datasource.minEvictableIdleTimeMillis}&quot;)
    private int minEvictableIdleTimeMillis;  
      
    @Value(&quot;${spring.datasource.validationQuery}&quot;)
    private String validationQuery;  
      
    @Value(&quot;${spring.datasource.testWhileIdle}&quot;)
    private boolean testWhileIdle;  
      
    @Value(&quot;${spring.datasource.testOnBorrow}&quot;)
    private boolean testOnBorrow;  
      
    @Value(&quot;${spring.datasource.testOnReturn}&quot;)
    private boolean testOnReturn;  
      
    @Value(&quot;${spring.datasource.poolPreparedStatements}&quot;)
    private boolean poolPreparedStatements;  
      
    @Value(&quot;${spring.datasource.maxPoolPreparedStatementPerConnectionSize}&quot;)
    private int maxPoolPreparedStatementPerConnectionSize;  
      
    @Value(&quot;${spring.datasource.filters}&quot;)
    private String filters;
      
    @Value(&quot;{spring.datasource.connectionProperties}&quot;)
    private String connectionProperties;  
    
    
    @Bean(name = &quot;masterDataSource&quot;)
    @Primary //标志这个 Bean 如果在多个同类 Bean 候选时，该 Bean 优先被考虑。
    public DataSource masterDataSource() {
        DruidDataSource dataSource = new DruidDataSource();
        dataSource.setUrl(url);  
        dataSource.setUsername(username);  
        dataSource.setPassword(password);  
        dataSource.setDriverClassName(driverClassName);  
          
        //具体配置 
        dataSource.setInitialSize(initialSize);  
        dataSource.setMinIdle(minIdle);  
        dataSource.setMaxActive(maxActive);  
        dataSource.setMaxWait(maxWait);  
        dataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  
        dataSource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);  
        dataSource.setValidationQuery(validationQuery);  
        dataSource.setTestWhileIdle(testWhileIdle);  
        dataSource.setTestOnBorrow(testOnBorrow);  
        dataSource.setTestOnReturn(testOnReturn);  
        dataSource.setPoolPreparedStatements(poolPreparedStatements);  
        dataSource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);

        /**
         * 这个是用来配置 druid 监控sql语句的 非常有用 如果你有两个数据源 这个配置哪个数据源就监控哪个数据源的sql 同时配置那就都监控
         */
        try {
            dataSource.setFilters(filters);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        dataSource.setConnectionProperties(connectionProperties);  
        return dataSource;
    }

    @Bean(name = &quot;masterTransactionManager&quot;)
    @Primary
    public DataSourceTransactionManager masterTransactionManager() {
        return new DataSourceTransactionManager(masterDataSource());
    }

    @Bean(name = &quot;masterSqlSessionFactory&quot;)
    @Primary
    public SqlSessionFactory masterSqlSessionFactory(@Qualifier(&quot;masterDataSource&quot;) DataSource masterDataSource)
            throws Exception {
        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
        sessionFactory.setDataSource(masterDataSource);
        sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(MasterDataSourceConfig.MAPPER_LOCATION));
        
        return sessionFactory.getObject();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里说明几点&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  1) @Primary: 多数据源配置的时候注意，必须要有一个主数据源， 用 @Primary 标志该 Bean。标志这个 Bean 如果在多个同类 Bean 候选时，该 Bean优先被考虑。
  2) dataSource.setFilters(filters): 这个是用来配置 druid 监控sql语句的, 如果你有两个数据源 这个配置哪个数据源就监控哪个 数据源的sql,同时配置那就都监控。
  3) 能够做到多个数据源的关键点 就是每个数据源所扫描的mapper包不一样,谁扫描到哪个mapper那么该mapper就用哪个数据源,同时都扫到了呢,
      那当然就得用主数据源咯,也就是添加@Primary 的数据源。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;次数据源clusterdatasourceconfig&quot;&gt;&lt;span&gt;4、次数据源(ClusterDataSourceConfig)&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;这里省略了部分代码,因为和主是一样的,完整代码在github代码里有。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * 次数据源 另一个数据源配置
 */
@Configuration
@MapperScan(basePackages = ClusterDataSourceConfig.PACKAGE, sqlSessionFactoryRef = &quot;clusterSqlSessionFactory&quot;)
public class ClusterDataSourceConfig {

    /**
     * 配置多数据源 关键就在这里 这里配置了不同数据源扫描不同的mapper
     */
    static final String PACKAGE = &quot;com.binron.multidatasource.mapper.cluster&quot;;
    static final String MAPPER_LOCATION = &quot;classpath:mapper/cluster/*.xml&quot;;

    @Value(&quot;${cluster.datasource.url}&quot;)
    private String url;

    @Value(&quot;${cluster.datasource.username}&quot;)
    private String username;

    @Value(&quot;${cluster.datasource.password}&quot;)
    private String password;

    @Value(&quot;${cluster.datasource.driverClassName}&quot;)
    private String driverClass;

    @Bean(name = &quot;clusterDataSource&quot;)
    public DataSource clusterDataSource() {
        DruidDataSource dataSource = new DruidDataSource();
        dataSource.setUrl(url);
        dataSource.setUsername(username);
        dataSource.setPassword(password);
        dataSource.setDriverClassName(driverClass);

        //具体配置
        try {
            dataSource.setFilters(&quot;stat,wall,slf4j&quot;);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dataSource;
    }

    @Bean(name = &quot;clusterTransactionManager&quot;)
    public DataSourceTransactionManager clusterTransactionManager() {
        return new DataSourceTransactionManager(clusterDataSource());
    }

    @Bean(name = &quot;clusterSqlSessionFactory&quot;)
    public SqlSessionFactory clusterSqlSessionFactory(@Qualifier(&quot;clusterDataSource&quot;) DataSource clusterDataSource)
            throws Exception {
        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
        sessionFactory.setDataSource(clusterDataSource);

        sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(ClusterDataSourceConfig.MAPPER_LOCATION));
        return sessionFactory.getObject();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里说明几点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   1）发现次数据源所扫描的mapper和主是完全不一样的,说明每个数据源负责自己的mapper
   2)  次数据源是没有加@Primary。
   3）这里也添加了dataSource.setFilters(filters):说明 次数据源也需要监听sql语句。&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;三配置可视化界面&quot;&gt;&lt;span&gt;三、配置可视化界面&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;直接上代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * druid监控界面设置
 */
@Configuration
public class DruidConfiguration {

    @Bean
    public ServletRegistrationBean druidStatViewServle() {
        //注册服务
        ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(
                new StatViewServlet(), &quot;/druid/*&quot;);
        // 白名单(为空表示,所有的都可以访问,多个IP的时候用逗号隔开)
        servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;127.0.0.1&quot;);
        // IP黑名单 (存在共同时，deny优先于allow) （黑白名单就是如果是黑名单，那么该ip无法登陆该可视化界面）
        servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;127.0.0.2&quot;);
        // 设置登录的用户名和密码
        servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;root&quot;);
        servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;);
        // 是否能够重置数据.
        servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;);
        return servletRegistrationBean;
    }

    @Bean
    public FilterRegistrationBean druidStatFilter() {
        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(
                new WebStatFilter());
        // 添加过滤规则
        filterRegistrationBean.addUrlPatterns(&quot;/*&quot;);
        // 添加不需要忽略的格式信息
        filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;);
        System.out.println(&quot;druid初始化成功!&quot;);
        return filterRegistrationBean;

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里说明几点&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;（1）登陆地址:http://127.0.0.1:8080/druid/index.html(端口号看自己设置的端口号)
（2）一旦配置黑名单,那么该ip访问是没有权限的登陆的
（3）如果想看SQL执行结果,那么上面数据源配置一定要添加dataSource.setFilters(filters),我之前就没有添加,所以其它都能正常使用,就是无法监控Sql语句。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果图&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201812/1090617-20181228215904024-23947484.jpg&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201812/1090617-20181228215914568-1877439654.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;确实很好用。顺便讲下,我遇到其它功能都有用,唯独Sql语句无法监控的问题,之后看界面才看出端倪来。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201812/1090617-20181228215924760-1448770177.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我发现界面中,filter类名为空，可是在yml确实配置了filters,怎么还是空,原因是数据源里没有配置&lt;code&gt;setFilters(filters)&lt;/code&gt;。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201812/1090617-20181228215939943-1509290954.jpg&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;文献资料&quot;&gt;&lt;span&gt;文献资料&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、 &lt;a href=&quot;https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter&quot;&gt;阿里github有关Druid结合Boot文档&lt;/a&gt;&lt;br/&gt;2、 &lt;a href=&quot;https://github.com/xuwujing/springBoot-study&quot;&gt;demo参考github地址&lt;/a&gt;: (感谢作者分享）&lt;br/&gt;3、 &lt;a href=&quot;https://www.cnblogs.com/funnyboy0128/p/9052447.html&quot;&gt;数据连接池的属性字段说明&lt;/a&gt;&lt;br/&gt;4、 &lt;a href=&quot;https://www.jianshu.com/p/1094d3fcee8d&quot;&gt;yml配置、properties配置、ssm配置&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 14:27:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<og:description>SpringBoot整合Druid实现多数据源和可视化监控 先献上 代码地址:</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/10192041.html</dc:identifier>
</item>
</channel>
</rss>