<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Asp.net Core 使用Jenkins + Dockor 实现持续集成、自动化部署（四）：发布与回滚 - 乔达摩</title>
<link>http://www.cnblogs.com/xiaxiaolu/p/10468612.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaxiaolu/p/10468612.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201903/641760-20190303144200882-234185842.png&quot; alt=&quot;âdeployâçå¾çæç´¢ç&amp;quot;æ&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们以前windows跑.net Framework程序的时候，发布，自己乖乖的替换程序；备份，也是自己一个一个的重命名备份；回滚，发布遇到问题的回滚更是不用说了；运维很是怕我们 这些用windows的啊；&lt;/p&gt;
&lt;p&gt;那全面拥抱linux的一一.net core 时代 ，是如何处理这些个问题的呢？&lt;/p&gt;
&lt;p&gt;噔噔蹬蹬~请往下看。&lt;/p&gt;

&lt;p&gt;centos：7.2&lt;br/&gt;cpu:1核 2G内存 1M带宽&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins ver. 2.150.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一台安装jenkins的机器。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;（本文例子不一定要安装jenkins，但实际项目是要用jenkins的）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们目前的应用部署环境是这样划分的(暂定)：&lt;/p&gt;
&lt;h2 id=&quot;开发环境&quot;&gt;开发环境&lt;/h2&gt;
&lt;p&gt;环境变量：Development&lt;/p&gt;
&lt;p&gt;开发环境就是我们平时的开发用的机器，错误、异常尽可能多的报出来这种。css、js、页面文件等各种静态资源也不做压缩处理，连接测试库；&lt;/p&gt;
&lt;p&gt;开发环境的部署：开发人员按自己习惯自己部署；&lt;/p&gt;
&lt;h2 id=&quot;测试环境&quot;&gt;测试环境&lt;/h2&gt;
&lt;p&gt;环境变量：Staging&lt;/p&gt;
&lt;p&gt;测试环境也就是测试同学测试用的环境，为了贴合生产环境的多机器部署，我们测试机器也有多台，目前我们搭建了jenkins可由测试同学自己部署；错误信息已做捕捉处理，静态文件同样不压缩，连接测试库；&lt;/p&gt;
&lt;p&gt;测试环境的部署：docker+docker-compose部署，我们在项目里面编写好了Staging.Dockerfile、docker-compose.yml还有对应的测试环境发布的shell脚本，借助jenkins来进行参数化的构建。参数包括程序运行的端口、绑定的ip，consul配置等等。哦对了，我们目前的构建步骤大概是：&lt;/p&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;去gitlab拉取最新程序代码；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;执行单元测试和集成测试，&lt;strong&gt;只有通过单元测试和集成测试才能继续步骤3，否则部署失败终止&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;dotnet restore-&amp;gt;build-&amp;gt;publish，将生成产品打包成一个镜像；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用docker-compose down 停止、移除上次的构建；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用docker-compose up 这个强大的命令，构建新的镜像、启动容器；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;清除临时镜像，构建完成；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;单元测试用dotnet test 命令；&lt;/p&gt;
&lt;p&gt;这里我们还可以看到，配置文件也一并被打包到镜像里面了，修改配置文件也需要重新构建的；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;预生产环境&quot;&gt;预生产环境&lt;/h2&gt;
&lt;p&gt;环境变量：Staging&lt;/p&gt;
&lt;p&gt;预生产环境是相对于测试环境来说，无论数据、配置还是架构都是更加接近生产环境的存在了。一般还是连接的数据库是预生产环境的数据库(同步了生产环境的数据的)，甚至有的使用会直接连接生产环境的库(一般不练、只读账号等控制)；不过我们公司还是连接的测试库&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201903/641760-20190303144200314-851119181.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后静态文件压缩啊、什么的这些，生产环境怎么处理，这里也怎么处理；&lt;/p&gt;
&lt;p&gt;通过测试环境测试的程序才可以部署到这里，这里测试通过后，才可以部署到生产环境；&lt;/p&gt;
&lt;p&gt;预生产环境的部署：由项目负责人或者运维部署，需要比较大权限才可以；&lt;/p&gt;
&lt;h2 id=&quot;生产环境&quot;&gt;&lt;strong&gt;生产环境&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;环境变量：Production&lt;/p&gt;
&lt;p&gt;生产环境一般应配置为最大限度地提高安全性、性能和应用可靠性，包括但不限于以下举措：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;全面启用分布式缓存&lt;/li&gt;
&lt;li&gt;客户端资源被捆绑和缩小，并可能从 CDN (网络分发)提供。&lt;/li&gt;
&lt;li&gt;必须禁用诊断错误页。&lt;/li&gt;
&lt;li&gt;启用友好错误页、一致的错误响应。&lt;/li&gt;
&lt;li&gt;启用生产记录和监视。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;生产环境的部署：运维部署，我们开发没有权限了；&lt;/p&gt;
&lt;p&gt;部署的背景我们的条件等等大概讲完了，下面我们说说生产环境我们怎么设计容器的。&lt;/p&gt;

&lt;p&gt;由于生产环境经常需要修改配置、保留日志信息、需考虑程序的备份与回滚等等，我们不能像上面的测试环境一样，把整个发布的产品打包成一个镜像了，我们需要做特殊的处理；&lt;/p&gt;
&lt;p&gt;熟悉docker的同学，肯定会想到：挂载&lt;/p&gt;
&lt;p&gt;对的，我们就这么处理，我们用docker -v 处理这头痛的问题；&lt;/p&gt;
&lt;h2 id=&quot;程序的目录结构&quot;&gt;程序的目录结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201903/641760-20190303144159861-986860629.png&quot; alt=&quot;1551588236442&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们程序的目录结构是这样的：&lt;/p&gt;
&lt;p&gt;backs:放历史版本的程序文件，按备份日期压缩命名；&lt;/p&gt;
&lt;p&gt;logs:程序的运行日志文件；&lt;/p&gt;
&lt;p&gt;program:当前运行的程序；&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;logs 和 program 目录，使用 docker -v 挂载；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;backs目录截图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201903/641760-20190303144159395-1250758849.png&quot; alt=&quot;1551591640526&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;发布步骤&quot;&gt;发布步骤&lt;/h2&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;同步通过测试的预生产环境的程序文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;压缩、备份上一版本的程序文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过更改文件夹名称的方式，当前运行程序替换为最新的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启程序；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;心跳检测：通过输出部署成功，未通过执行回滚操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;发布脚本production.publish.sh&quot;&gt;发布脚本(Production.Publish.sh)&lt;/h2&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;#!/bin/bash

function success()
{
  echo -e &quot;\033[32m $1 \033[0m&quot;
}
function error()
{
   echo -e &quot;\033[31m\033[01m $1 \033[0m&quot;
}

echo &quot;publish beging。。。。。。&quot;
remotePath=$1
healthCheckUrl=$2
defaulPaht= $3;
bashPath=${defaulPaht:=`pwd`}

if [ ! $remotePath ]; then
    echo &quot;warn:remotePath should't be empty!&quot;
    exit
fi

if [ ! $bashPath ]; then
    error &quot;error:bashPath should't  be empty!&quot;
    exit
fi
echo &quot;bashpath is ${bashPath}&quot;
programPath=&quot;${bashPath}/program&quot;
logPath=&quot;${bashPath}/logs&quot;
backPath=&quot;${bashPath}/backs&quot;
publisTemp=&quot;${bashPath}/publisTemp&quot;
mkdir -p $programPath
mkdir -p $logPath
mkdir -p $backPath
mkdir -p $publisTemp

#remote git or scp
#这里同步预生产环境的程序文件，这里写死了ip只是示例，scp也只是示例
#大家可以采用更安全，更有效率的同步文件方式
scp -r  root@139.199.196.67:${remotePath}&quot;/.*&quot;  ${publisTemp}

if [ $? ]; then
    echo &quot;info:copy successful!&quot;
    #压缩、备份当前运行程序到backs文件夹
    backFileName=`date +%Y%m%d%H%M%S`&quot;.tar.gz&quot;
    `cd ${programPath} &amp;amp;&amp;amp; tar -zcPf ${backPath}/${backFileName} *`  

    #replace
    #替换程序
    if [ $? ]; then
        mv $programPath ${programPath}&quot;Old&quot;
        mv $publisTemp ${programPath}
        rm -r ${programPath}&quot;Old&quot;

        #publis fail ，then Production.Rollback
        if [ $healthCheckUrl ]; then
            curl $healthCheckUrl
            if [ $? -ne 0 ]; then
                error &quot;error:public failed！&quot;
                #心跳检测失败，执行回滚
                if [ -f &quot;Production.Rollback.sh&quot; ];then
                    echo &quot;************************************ exec Rollbacking...... ************************************&quot;
                    ./Production.Rollback.sh ${backPath}
                else
                    error &quot;error:Production.Rollback.sh is not existing！&quot;;
                fi
                exit
            fi  
        fi
        success &quot;publish Successful！&quot;
    else
        error &quot;error:file tar failed！&quot;
    fi 
else
    error &quot;error:remote files copy failed,Maybe you should checkout your ssh auth!&quot;
fi 

&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;Dockerfile比较简单&lt;/p&gt;
&lt;pre class=&quot;dockerfile&quot;&gt;
&lt;code&gt;FROM microsoft/dotnet:2.1-aspnetcore-runtime AS base
WORKDIR /app
ARG RUN_PORT=${RUN_PORT:-&quot;&quot;} 
ARG CONSUL_TO_NETCOREHOST=${CONSUL_TO_NETCOREHOST:-&quot;&quot;} 
ARG ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-&quot;&quot;} 
ENV RUN_PORT=${RUN_PORT} CONSUL_TO_NETCOREHOST=${CONSUL_TO_NETCOREHOST} ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
ENTRYPOINT [&quot;dotnet&quot;, &quot;Member.WebApi.dll&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;docker-compose&quot;&gt;docker-compose&lt;/h2&gt;
&lt;pre class=&quot;dockerfile&quot;&gt;
&lt;code&gt;version: '3.4'

services:
  member.webapi:
    image: memberwebapi${RUN_PORT}
    build:
      context: .
      dockerfile: ${ASPNETCORE_ENVIRONMENT}.Dockerfile
    network_mode: &quot;host&quot;
    restart: always

    environment:
      - RUN_PORT=${RUN_PORT}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - CONSUL_TO_NETCOREHOST=${CONSUL_TO_NETCOREHOST}

    command:
      - &quot;--port&quot;
      - &quot;${RUN_PORT}&quot;

    #就是这里挂载
    volumes:
      - ../program/:/app/
      - ../logs/:/app/logs&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;回滚其实就是发布的逆操作；&lt;/p&gt;
&lt;p&gt;发布是:同步最新程序-&amp;gt;备份当前运行程序-&amp;gt;替换；&lt;/p&gt;
&lt;p&gt;回滚是-&amp;gt;找到上一次的备份-&amp;gt;删掉的当前运行程序-&amp;gt;替换；&lt;/p&gt;
&lt;h2 id=&quot;production.rollback.sh&quot;&gt;Production.Rollback.sh&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/bash

echo &quot;rollback beging。。。。。。&quot;
defaulPaht= $1;
bashPath=${defaulPaht:=`pwd`}
programPath=&quot;${bashPath}/program&quot;
backPath=&quot;${bashPath}/backs&quot;
lastFile=`cd ${backPath} &amp;amp;&amp;amp;ls -t |head -n1|awk '{print $0}'`

if [ ! $lastFile ];then
    echo &quot;error:none backup program！&quot;
fi

lastFilePath=&quot;${backPath}/${lastFile}&quot;
echo $lastFilePath
if [ -f $lastFilePath ];then
    echo &quot;rollback program:${lastFilePath}&quot;    
    programOldPath=&quot;${programPath}Old&quot;
    mkdir -p ${programOldPath}
    tar zxvf ${lastFilePath} -C ${programOldPath}

    #replace
    if [ $? ]; then
        rm -r ${programPath}
        mv ${programOldPath} ${programPath}
        echo  &quot;rollback Successful！&quot;
    else
        echo &quot;error:backup program is not existing!&quot;
    fi    
else
    echo &quot;error:backup program is not existing!&quot;
fi


&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后贴一个运行截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201903/641760-20190303144158557-1257562874.png&quot; alt=&quot;1551590930566&quot;/&gt;&lt;/p&gt;

&lt;p&gt;毫不夸张地说，Jenkins + Dockor 让.net 完全从一个刀耕火种的原始人一下子穿越到了全自动化的现代；&lt;/p&gt;
&lt;p&gt;文章的思路可以借鉴，脚本改改也可以用，但需理解思路；&lt;/p&gt;
&lt;p&gt;有的同学可能会问，为什么生产环境的部署，不能像测试环境一样直接拉取master的代码构建，我这里的回答是涉及到配置的权限问题、devops的学习到位问题。历史原因等，我们暂定这样，后面实践，我乐于分享；&lt;/p&gt;
&lt;p&gt;本文的实践都有很大的局限性，比如有现成的工具、有更强大的插件等等可以更简单的去解决这个问题之类的，我可能还不知道；比如我的shell写的一塌糊涂等等。。欢迎沟通，不理赐教。&lt;/p&gt;
&lt;p&gt;晚安~&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 16:33:00 +0000</pubDate>
<dc:creator>乔达摩</dc:creator>
<og:description>写在前面 我们以前windows跑.net Framework程序的时候，发布，自己乖乖的替换程序；备份，也是自己一个一个的重命名备份；回滚，发布遇到问题的回滚更是不用说了；运维很是怕我们 这些用wi</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaxiaolu/p/10468612.html</dc:identifier>
</item>
<item>
<title>智能优化 之 下山单纯形法 C++ - 林-兮</title>
<link>http://www.cnblogs.com/lv-anchoret/p/10468596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lv-anchoret/p/10468596.html</guid>
<description>
&lt;p&gt;&lt;span&gt;单纯形法简介在其他网站上都可以查到，我就不多说了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们主要说方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它主要解决的是局部最优解的问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;利用多边形进行求解的，若有n个变量，则利用n+1边形&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们这里以两个变量为例，求解第三维度的最优解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;例如解决&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;min 　f(x,y)=x&lt;sup&gt;2&lt;/sup&gt; - 4*x + y&lt;sup&gt;2&lt;/sup&gt; - y - x*y&lt;sub&gt;&lt;br/&gt;&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;matlab 图&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1316111/201903/1316111-20190303231702400-790522622.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;可以看出，差不多是（3，2）附近取得最小&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们来用下山单纯形求解&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们设立三个初始点 （0，0），（1.2，0），（0，0.8）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们把它们分别带入f中，函数值越小的越接近解，我们把它称为最好点，反之，函数值最大的点，我们称之为最坏点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;我们要做的是，利用已知点，寻找更加接近解的点&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;我们需要了解几种寻找下一个点的思想&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;反射 reflect&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1316111/201903/1316111-20190303233203991-1888309754.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设三角形的三个点是ABP，其中P是最坏点，那么我们寻找一个Q点，使得APBQ是一个平行四边形&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设向量α为p-&amp;gt;A,β为p-&amp;gt;B　　　　（假设1）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么Q = p + (α+β),其中p和Q是坐标&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;扩张 extern&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1316111/201903/1316111-20190303233801744-1845903958.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;假设，我们得到的新点Q，它比原来三角形中最好的点还要好，那么，我们可以假定这个探索方向是正确的，我们不妨再往前走一步！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中Q-&amp;gt;R = (p-&amp;gt;R)/2，我们这里称扩张Q点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设向量α为Q-&amp;gt;A, β为Q-&amp;gt;B　　　　　（假设2）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是，R =  Q - (α+β)/2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;收缩 Shrink&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我认为收缩有两种&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为我们一般先做反射点，所以，之后的操作如果针对反射点，那么就是对反射点进行收缩&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1316111/201903/1316111-20190304000146521-554150153.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基于（假设2），R = Q + (α+β)/4&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;还有一种是最优解本来就在三角形PAB中，我们对P做收缩&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1316111/201903/1316111-20190304000607941-1878120116.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基于（假设1），则Q = P + (α+β)/4&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;压缩 compress&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1316111/201903/1316111-20190304000856572-736927830.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们认为，如果上述操作均没有找到更好的点来替代最坏点，那么说明之前的三角形是非法的，那么我们进行压缩操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;即，取两边中点与最坏点构成新的三角形&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们用下山单纯形法求解步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;求出初始点的最坏点，构成三角形&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重复下述，直到满足精度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先做一次反射&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果反射点比最好点还要好（更加接近条件：min f(x0,y0)）-&amp;gt;&lt;/span&gt;&lt;span&gt;做一次扩张&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果扩张点比反射点还要好-&amp;gt;扩张点代替之前的最坏点，形成新的三角形&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　反之-&amp;gt;反射点代替之前的最坏点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　反之，如果反射点比最坏点还要坏-&amp;gt;反射点做收缩1&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果收缩点1比最坏点好-&amp;gt;收缩点1代替最坏点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　反之-&amp;gt;最坏点做收缩2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　如果收缩点2比最坏点好-&amp;gt;收缩点2代替最坏点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　反之-&amp;gt;三角形做收缩&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　反之，反射点代替最坏点，形成新的三角形&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;C++代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;triangle.h&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#pragma&lt;/span&gt; once

&lt;span&gt;#define&lt;/span&gt; stds std::

&lt;span&gt;#define&lt;/span&gt; VEC2_OUT&lt;span&gt;

#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lvgm\lvgm.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;本人博客: &lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/lv-anchoret/category/1367052.html&lt;/span&gt;
#include &amp;lt;vector&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;algorithm&amp;gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; lvgm;


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Mountain
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    typedef dvec2 valtype;

    typedef &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;(*_Fun)(&lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt;);

    Mountain() {    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    p: three position coordinates(in ordered or not)
    f: the function Ptr
    δ: the solution precision
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    Mountain(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; p1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp; p2, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp; p3, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; δ)
        : _δ(δ)
    {
        _positions.resize(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
        _positions[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; p1;
        _positions[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; p2;
        _positions[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; p3;
        sort();
    }

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setF(_Fun f)
        {
        _f &lt;/span&gt;=&lt;span&gt; f;
        }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; setδ(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; delt)
        {
        _δ &lt;/span&gt;=&lt;span&gt; delt;
        }

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    origion: the bad position
    vec1: bad position -&amp;gt; min position
    vec2: bad position -&amp;gt; mid position
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    valtype reflect(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; origion, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp; vec1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt; vec2)
        {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; origion + (vec1 +&lt;span&gt; vec2);
        }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    origion: the change position
    vec1: change position -&amp;gt; left position
    vec2: change position -&amp;gt; right position
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    valtype shrink(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; origion, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp; vec1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt; vec2)
        {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; origion + (vec1 + vec2) / &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
        }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    origion: the origion position
    vec1: origion position -&amp;gt; left position
    vec2: origion position -&amp;gt; right position
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; compression(&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; origion, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp; vec1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt; vec2)
        {
        _positions[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = origion + min(vec1, vec2) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        _positions[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = origion + max(vec1, vec2) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    origion: the change position
    vec1: change position -&amp;gt; left position
    vec2: change position -&amp;gt; right position
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    valtype exter(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; origion, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp; vec1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt; vec2)
        {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; origion - (vec1 + vec2) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; go()
    {
        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; delt = (_positions[&lt;span&gt;2&lt;/span&gt;] - _positions[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]).normal();
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (delt &amp;gt;&lt;span&gt; _δ)
        {
            stds cout &lt;/span&gt;&amp;lt;&amp;lt; ++i &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;次  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; _positions[&lt;span&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; _positions[&lt;span&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; _positions[&lt;span&gt;2&lt;/span&gt;] &amp;lt;&amp;lt;&lt;span&gt; stds endl;
            valtype t &lt;/span&gt;= reflect(_positions[&lt;span&gt;2&lt;/span&gt;], _positions[&lt;span&gt;1&lt;/span&gt;] - _positions[&lt;span&gt;2&lt;/span&gt;], _positions[&lt;span&gt;0&lt;/span&gt;] - _positions[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_f(t) &amp;lt; _f(_positions[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]))
            {
                valtype ex &lt;/span&gt;= exter(t, _positions[&lt;span&gt;1&lt;/span&gt;] - t, _positions[&lt;span&gt;0&lt;/span&gt;] -&lt;span&gt; t);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_f(ex) &amp;lt;&lt;span&gt; _f(t))
                    _positions[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; ex;
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    _positions[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; t;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (_f(t) &amp;gt; _f(_positions[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]))
            {
                valtype sh &lt;/span&gt;= shrink(t, _positions[&lt;span&gt;1&lt;/span&gt;] - t, _positions[&lt;span&gt;0&lt;/span&gt;] -&lt;span&gt; t);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_f(sh) &amp;lt; _f(_positions[&lt;span&gt;2&lt;/span&gt;]))        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;反射点收缩&lt;/span&gt;
                    _positions[&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; sh;
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;三角内部内缩&lt;/span&gt;
&lt;span&gt;                {
                    sh &lt;/span&gt;= reflect(sh, _positions[&lt;span&gt;1&lt;/span&gt;] - sh, _positions[&lt;span&gt;0&lt;/span&gt;] -&lt;span&gt; sh);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_f(sh) &amp;lt; _f(_positions[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]))
                        _positions[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; sh;
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;针对原始点内缩，针对反射点收缩，都不管用，那么选择压缩&lt;/span&gt;
                        compression(_positions[&lt;span&gt;2&lt;/span&gt;], _positions[&lt;span&gt;1&lt;/span&gt;] - _positions[&lt;span&gt;2&lt;/span&gt;], _positions[&lt;span&gt;0&lt;/span&gt;] - _positions[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                _positions[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; t;
            sort();
            delt &lt;/span&gt;= (_positions[&lt;span&gt;2&lt;/span&gt;] - _positions[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]).normal();
        }
        stds cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n最好点为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; _positions[&lt;span&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t精度为:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; _δ &amp;lt;&amp;lt; stds endl &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数值为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; _f(_positions[&lt;span&gt;0&lt;/span&gt;]) &amp;lt;&amp;lt; stds endl &amp;lt;&amp;lt;&lt;span&gt; stds endl;
    }

&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; min(&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; vec1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt; vec2)
        {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _f(vec1) &amp;lt; _f(vec2) ?&lt;span&gt; vec1 : vec2;
        }

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; max(&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; vec1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt; vec2)
        {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _f(vec1) &amp;gt; _f(vec2) ?&lt;span&gt; vec1 : vec2;
        }

    friend &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; cmp(&lt;span&gt;const&lt;/span&gt; valtype&amp;amp; pos1, &lt;span&gt;const&lt;/span&gt; valtype&amp;amp;&lt;span&gt; pos2)
        {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Mountain::_f(pos1) &amp;lt;&lt;span&gt; Mountain::_f(pos2);
        }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; sort()
        {
        stds sort(_positions.begin(), _positions.end(), cmp);
        }
    
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:

    stds vector&lt;/span&gt;&amp;lt;valtype&amp;gt; _positions;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;min, mid, max  or  good, mid, bad&lt;/span&gt;

    &lt;span&gt;double&lt;/span&gt;&lt;span&gt; _δ;

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; _Fun _f;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;main.cpp&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;triangle.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

Mountain::_Fun Mountain::_f&lt;/span&gt;=[](&lt;span&gt;const&lt;/span&gt; Mountain::valtype&amp;amp; v)-&amp;gt;&lt;span&gt;double&lt;/span&gt;    {    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;.;    };

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    auto fun &lt;/span&gt;= [](&lt;span&gt;const&lt;/span&gt; Mountain::valtype&amp;amp; v)-&amp;gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; v.x()*v.x() - &lt;span&gt;4&lt;/span&gt; * v.x() + v.y()*v.y() - v.y() - v.x()*&lt;span&gt;v.y();
    };

    Mountain m(Mountain::valtype(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;), Mountain::valtype(&lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;), Mountain::valtype(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0.8&lt;/span&gt;), &lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;);

    m.setF(fun);

    m.go();

    m.setδ(&lt;/span&gt;&lt;span&gt;0.01&lt;/span&gt;&lt;span&gt;);

    m.go();

    m.setδ(&lt;/span&gt;&lt;span&gt;0.001&lt;/span&gt;&lt;span&gt;);

    m.go();

    m.setδ(&lt;/span&gt;&lt;span&gt;0.0001&lt;/span&gt;&lt;span&gt;);

    m.go();

    m.setδ(&lt;/span&gt;&lt;span&gt;0.00001&lt;/span&gt;&lt;span&gt;);

    m.go();

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;结果：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;235&quot;&gt;
&lt;pre&gt;
1次  [ &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ]      [ &lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ]     [ &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0.8&lt;/span&gt;&lt;span&gt; ]
2次  [ &lt;/span&gt;&lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ]     [ &lt;span&gt;1.2&lt;/span&gt;, -&lt;span&gt;0.8&lt;/span&gt; ]   [ &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
3次  [ &lt;/span&gt;&lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ]    [ &lt;span&gt;1.2&lt;/span&gt;, -&lt;span&gt;0.8&lt;/span&gt; ]   [ &lt;span&gt;2.4&lt;/span&gt;, -&lt;span&gt;0.8&lt;/span&gt;&lt;span&gt; ]
4次  [ &lt;/span&gt;&lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ]     [ &lt;span&gt;0.6&lt;/span&gt;, -&lt;span&gt;0.2&lt;/span&gt; ]   [ &lt;span&gt;1.2&lt;/span&gt;, -&lt;span&gt;0.8&lt;/span&gt;&lt;span&gt; ]
5次  [ &lt;/span&gt;&lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ]     [ &lt;span&gt;0.6&lt;/span&gt;, &lt;span&gt;0.6&lt;/span&gt; ]    [ &lt;span&gt;0.6&lt;/span&gt;, -&lt;span&gt;0.2&lt;/span&gt;&lt;span&gt; ]
6次  [ &lt;/span&gt;&lt;span&gt;1.5&lt;/span&gt;, &lt;span&gt;1.3&lt;/span&gt; ]  [ &lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ]      [ &lt;span&gt;0.6&lt;/span&gt;, &lt;span&gt;0.6&lt;/span&gt;&lt;span&gt; ]
7次  [ &lt;/span&gt;&lt;span&gt;2.1&lt;/span&gt;, &lt;span&gt;0.7&lt;/span&gt; ]  [ &lt;span&gt;1.5&lt;/span&gt;, &lt;span&gt;1.3&lt;/span&gt; ]    [ &lt;span&gt;1.2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
8次  [ &lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; ]     [ &lt;span&gt;2.1&lt;/span&gt;, &lt;span&gt;0.7&lt;/span&gt; ]    [ &lt;span&gt;1.5&lt;/span&gt;, &lt;span&gt;1.3&lt;/span&gt;&lt;span&gt; ]
9次  [ &lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; ]     [ &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;1.4&lt;/span&gt; ]      [ &lt;span&gt;2.1&lt;/span&gt;, &lt;span&gt;0.7&lt;/span&gt;&lt;span&gt; ]
10次  [ &lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; ]        [ &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;1.4&lt;/span&gt; ]      [ &lt;span&gt;3.3&lt;/span&gt;, &lt;span&gt;2.7&lt;/span&gt;&lt;span&gt; ]
11次  [ &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2.2&lt;/span&gt; ]        [ &lt;span&gt;2.4&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; ]      [ &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;1.4&lt;/span&gt;&lt;span&gt; ]
12次  [ &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2.2&lt;/span&gt; ]        [ &lt;span&gt;2.85&lt;/span&gt;, &lt;span&gt;1.75&lt;/span&gt; ]  [ &lt;span&gt;2.4&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ]
13次  [ &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2.2&lt;/span&gt; ]        [ &lt;span&gt;2.85&lt;/span&gt;, &lt;span&gt;1.75&lt;/span&gt; ]  [ &lt;span&gt;3.45&lt;/span&gt;, &lt;span&gt;1.95&lt;/span&gt;&lt;span&gt; ]
14次  [ &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2.2&lt;/span&gt; ]        [ &lt;span&gt;2.85&lt;/span&gt;, &lt;span&gt;1.75&lt;/span&gt; ]  [ &lt;span&gt;2.6625&lt;/span&gt;, &lt;span&gt;1.9875&lt;/span&gt;&lt;span&gt; ]
15次  [ &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2.2&lt;/span&gt; ]        [ &lt;span&gt;3.1875&lt;/span&gt;, &lt;span&gt;1.9625&lt;/span&gt; ]      [ &lt;span&gt;2.85&lt;/span&gt;, &lt;span&gt;1.75&lt;/span&gt;&lt;span&gt; ]
16次  [ &lt;/span&gt;&lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt; ]      [ &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2.2&lt;/span&gt; ]      [ &lt;span&gt;3.1875&lt;/span&gt;, &lt;span&gt;1.9625&lt;/span&gt;&lt;span&gt; ]
17次  [ &lt;/span&gt;&lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt; ]      [ &lt;span&gt;2.88516&lt;/span&gt;, &lt;span&gt;2.10547&lt;/span&gt; ]    [ &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2.2&lt;/span&gt;&lt;span&gt; ]
18次  [ &lt;/span&gt;&lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt; ]      [ &lt;span&gt;2.85703&lt;/span&gt;, &lt;span&gt;1.82109&lt;/span&gt; ]    [ &lt;span&gt;2.88516&lt;/span&gt;, &lt;span&gt;2.10547&lt;/span&gt;&lt;span&gt; ]
19次  [ &lt;/span&gt;&lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt; ]      [ &lt;span&gt;2.8998&lt;/span&gt;, &lt;span&gt;1.98691&lt;/span&gt; ]     [ &lt;span&gt;2.85703&lt;/span&gt;, &lt;span&gt;1.82109&lt;/span&gt;&lt;span&gt; ]
20次  [ &lt;/span&gt;&lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt; ]      [ &lt;span&gt;3.01465&lt;/span&gt;, &lt;span&gt;2.08145&lt;/span&gt; ]    [ &lt;span&gt;2.8998&lt;/span&gt;, &lt;span&gt;1.98691&lt;/span&gt;&lt;span&gt; ]
21次  [ &lt;/span&gt;&lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt; ]      [ &lt;span&gt;3.01465&lt;/span&gt;, &lt;span&gt;2.08145&lt;/span&gt; ]    [ &lt;span&gt;3.08672&lt;/span&gt;, &lt;span&gt;2.01016&lt;/span&gt;&lt;span&gt; ]
22次  [ &lt;/span&gt;&lt;span&gt;2.94653&lt;/span&gt;, &lt;span&gt;1.99272&lt;/span&gt; ]      [ &lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt; ]    [ &lt;span&gt;3.01465&lt;/span&gt;, &lt;span&gt;2.08145&lt;/span&gt;&lt;span&gt; ]
23次  [ &lt;/span&gt;&lt;span&gt;2.98693&lt;/span&gt;, &lt;span&gt;2.01781&lt;/span&gt; ]      [ &lt;span&gt;2.94653&lt;/span&gt;, &lt;span&gt;1.99272&lt;/span&gt; ]    [ &lt;span&gt;2.97188&lt;/span&gt;, &lt;span&gt;1.91563&lt;/span&gt;&lt;span&gt; ]

最好点为[ &lt;/span&gt;&lt;span&gt;2.98693&lt;/span&gt;, &lt;span&gt;2.01781&lt;/span&gt; ]    精度为:&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
函数值为：&lt;/span&gt;-&lt;span&gt;6.99928&lt;/span&gt;&lt;span&gt;

24次  [ &lt;/span&gt;&lt;span&gt;2.98693&lt;/span&gt;, &lt;span&gt;2.01781&lt;/span&gt; ]      [ &lt;span&gt;2.9693&lt;/span&gt;, &lt;span&gt;1.96045&lt;/span&gt; ]     [ &lt;span&gt;2.94653&lt;/span&gt;, &lt;span&gt;1.99272&lt;/span&gt;&lt;span&gt; ]
25次  [ &lt;/span&gt;&lt;span&gt;3.0097&lt;/span&gt;, &lt;span&gt;1.98553&lt;/span&gt; ]       [ &lt;span&gt;2.98693&lt;/span&gt;, &lt;span&gt;2.01781&lt;/span&gt; ]    [ &lt;span&gt;2.9693&lt;/span&gt;, &lt;span&gt;1.96045&lt;/span&gt;&lt;span&gt; ]
26次  [ &lt;/span&gt;&lt;span&gt;3.01282&lt;/span&gt;, &lt;span&gt;2.02228&lt;/span&gt; ]      [ &lt;span&gt;3.0097&lt;/span&gt;, &lt;span&gt;1.98553&lt;/span&gt; ]     [ &lt;span&gt;2.98693&lt;/span&gt;, &lt;span&gt;2.01781&lt;/span&gt;&lt;span&gt; ]
27次  [ &lt;/span&gt;&lt;span&gt;3.01282&lt;/span&gt;, &lt;span&gt;2.02228&lt;/span&gt; ]      [ &lt;span&gt;3.0097&lt;/span&gt;, &lt;span&gt;1.98553&lt;/span&gt; ]     [ &lt;span&gt;3.02342&lt;/span&gt;, &lt;span&gt;1.99696&lt;/span&gt;&lt;span&gt; ]
28次  [ &lt;/span&gt;&lt;span&gt;2.99909&lt;/span&gt;, &lt;span&gt;2.01086&lt;/span&gt; ]      [ &lt;span&gt;3.01282&lt;/span&gt;, &lt;span&gt;2.02228&lt;/span&gt; ]    [ &lt;span&gt;3.0097&lt;/span&gt;, &lt;span&gt;1.98553&lt;/span&gt;&lt;span&gt; ]
29次  [ &lt;/span&gt;&lt;span&gt;3.00782&lt;/span&gt;, &lt;span&gt;2.00105&lt;/span&gt; ]      [ &lt;span&gt;2.99909&lt;/span&gt;, &lt;span&gt;2.01086&lt;/span&gt; ]    [ &lt;span&gt;3.01282&lt;/span&gt;, &lt;span&gt;2.02228&lt;/span&gt;&lt;span&gt; ]
30次  [ &lt;/span&gt;&lt;span&gt;3.00782&lt;/span&gt;, &lt;span&gt;2.00105&lt;/span&gt; ]      [ &lt;span&gt;2.9941&lt;/span&gt;, &lt;span&gt;1.98963&lt;/span&gt; ]     [ &lt;span&gt;2.99909&lt;/span&gt;, &lt;span&gt;2.01086&lt;/span&gt;&lt;span&gt; ]
31次  [ &lt;/span&gt;&lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt; ]       [ &lt;span&gt;3.00782&lt;/span&gt;, &lt;span&gt;2.00105&lt;/span&gt; ]    [ &lt;span&gt;2.9941&lt;/span&gt;, &lt;span&gt;1.98963&lt;/span&gt;&lt;span&gt; ]
32次  [ &lt;/span&gt;&lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt; ]       [ &lt;span&gt;3.00782&lt;/span&gt;, &lt;span&gt;2.00105&lt;/span&gt; ]    [ &lt;span&gt;3.00884&lt;/span&gt;, &lt;span&gt;2.0083&lt;/span&gt;&lt;span&gt; ]

最好点为[ &lt;/span&gt;&lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt; ]     精度为:&lt;span&gt;0.01&lt;/span&gt;&lt;span&gt;
函数值为：&lt;/span&gt;-&lt;span&gt;6.99999&lt;/span&gt;&lt;span&gt;

33次  [ &lt;/span&gt;&lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt; ]       [ &lt;span&gt;2.99901&lt;/span&gt;, &lt;span&gt;1.99585&lt;/span&gt; ]    [ &lt;span&gt;3.00782&lt;/span&gt;, &lt;span&gt;2.00105&lt;/span&gt;&lt;span&gt; ]
34次  [ &lt;/span&gt;&lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt; ]       [ &lt;span&gt;2.99901&lt;/span&gt;, &lt;span&gt;1.99585&lt;/span&gt; ]    [ &lt;span&gt;2.99537&lt;/span&gt;, &lt;span&gt;1.99869&lt;/span&gt;&lt;span&gt; ]
35次  [ &lt;/span&gt;&lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt; ]       [ &lt;span&gt;3.00367&lt;/span&gt;, &lt;span&gt;2.00026&lt;/span&gt; ]    [ &lt;span&gt;2.99901&lt;/span&gt;, &lt;span&gt;1.99585&lt;/span&gt;&lt;span&gt; ]
36次  [ &lt;/span&gt;&lt;span&gt;3.00043&lt;/span&gt;, &lt;span&gt;1.99877&lt;/span&gt; ]      [ &lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt; ]     [ &lt;span&gt;3.00367&lt;/span&gt;, &lt;span&gt;2.00026&lt;/span&gt;&lt;span&gt; ]
37次  [ &lt;/span&gt;&lt;span&gt;3.00043&lt;/span&gt;, &lt;span&gt;1.99877&lt;/span&gt; ]      [ &lt;span&gt;2.99851&lt;/span&gt;, &lt;span&gt;2.00127&lt;/span&gt; ]    [ &lt;span&gt;3.00003&lt;/span&gt;, &lt;span&gt;2.0031&lt;/span&gt;&lt;span&gt; ]
38次  [ &lt;/span&gt;&lt;span&gt;3.00043&lt;/span&gt;, &lt;span&gt;1.99877&lt;/span&gt; ]      [ &lt;span&gt;2.99851&lt;/span&gt;, &lt;span&gt;2.00127&lt;/span&gt; ]    [ &lt;span&gt;2.99891&lt;/span&gt;, &lt;span&gt;1.99693&lt;/span&gt;&lt;span&gt; ]
39次  [ &lt;/span&gt;&lt;span&gt;3.00043&lt;/span&gt;, &lt;span&gt;1.99877&lt;/span&gt; ]      [ &lt;span&gt;2.99975&lt;/span&gt;, &lt;span&gt;2.00156&lt;/span&gt; ]    [ &lt;span&gt;2.99851&lt;/span&gt;, &lt;span&gt;2.00127&lt;/span&gt;&lt;span&gt; ]
40次  [ &lt;/span&gt;&lt;span&gt;3.00043&lt;/span&gt;, &lt;span&gt;1.99877&lt;/span&gt; ]      [ &lt;span&gt;2.99975&lt;/span&gt;, &lt;span&gt;2.00156&lt;/span&gt; ]    [ &lt;span&gt;3.00167&lt;/span&gt;, &lt;span&gt;1.99906&lt;/span&gt;&lt;span&gt; ]

最好点为[ &lt;/span&gt;&lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;2.00071&lt;/span&gt; ]     精度为:&lt;span&gt;0.001&lt;/span&gt;&lt;span&gt;
函数值为：&lt;/span&gt;-&lt;span&gt;7&lt;/span&gt;&lt;span&gt;

41次  [ &lt;/span&gt;&lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;2.00071&lt;/span&gt; ]       [ &lt;span&gt;3.00043&lt;/span&gt;, &lt;span&gt;1.99877&lt;/span&gt; ]    [ &lt;span&gt;2.99975&lt;/span&gt;, &lt;span&gt;2.00156&lt;/span&gt;&lt;span&gt; ]
42次  [ &lt;/span&gt;&lt;span&gt;2.99992&lt;/span&gt;, &lt;span&gt;1.99883&lt;/span&gt; ]      [ &lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;2.00071&lt;/span&gt; ]     [ &lt;span&gt;3.00043&lt;/span&gt;, &lt;span&gt;1.99877&lt;/span&gt;&lt;span&gt; ]
43次  [ &lt;/span&gt;&lt;span&gt;2.9992&lt;/span&gt;, &lt;span&gt;2.00028&lt;/span&gt; ]       [ &lt;span&gt;2.99992&lt;/span&gt;, &lt;span&gt;1.99883&lt;/span&gt; ]    [ &lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;2.00071&lt;/span&gt;&lt;span&gt; ]
44次  [ &lt;/span&gt;&lt;span&gt;2.99969&lt;/span&gt;, &lt;span&gt;1.99897&lt;/span&gt; ]      [ &lt;span&gt;2.9992&lt;/span&gt;, &lt;span&gt;2.00028&lt;/span&gt; ]     [ &lt;span&gt;2.99992&lt;/span&gt;, &lt;span&gt;1.99883&lt;/span&gt;&lt;span&gt; ]
45次  [ &lt;/span&gt;&lt;span&gt;2.99921&lt;/span&gt;, &lt;span&gt;2.00002&lt;/span&gt; ]      [ &lt;span&gt;2.99969&lt;/span&gt;, &lt;span&gt;1.99897&lt;/span&gt; ]    [ &lt;span&gt;2.9992&lt;/span&gt;, &lt;span&gt;2.00028&lt;/span&gt;&lt;span&gt; ]
46次  [ &lt;/span&gt;&lt;span&gt;2.99958&lt;/span&gt;, &lt;span&gt;1.99911&lt;/span&gt; ]      [ &lt;span&gt;2.99921&lt;/span&gt;, &lt;span&gt;2.00002&lt;/span&gt; ]    [ &lt;span&gt;2.99969&lt;/span&gt;, &lt;span&gt;1.99897&lt;/span&gt;&lt;span&gt; ]
47次  [ &lt;/span&gt;&lt;span&gt;2.99924&lt;/span&gt;, &lt;span&gt;1.99986&lt;/span&gt; ]      [ &lt;span&gt;2.99958&lt;/span&gt;, &lt;span&gt;1.99911&lt;/span&gt; ]    [ &lt;span&gt;2.99921&lt;/span&gt;, &lt;span&gt;2.00002&lt;/span&gt;&lt;span&gt; ]
48次  [ &lt;/span&gt;&lt;span&gt;2.99951&lt;/span&gt;, &lt;span&gt;1.99922&lt;/span&gt; ]      [ &lt;span&gt;2.99924&lt;/span&gt;, &lt;span&gt;1.99986&lt;/span&gt; ]    [ &lt;span&gt;2.99958&lt;/span&gt;, &lt;span&gt;1.99911&lt;/span&gt;&lt;span&gt; ]
49次  [ &lt;/span&gt;&lt;span&gt;2.99928&lt;/span&gt;, &lt;span&gt;1.99975&lt;/span&gt; ]      [ &lt;span&gt;2.99951&lt;/span&gt;, &lt;span&gt;1.99922&lt;/span&gt; ]    [ &lt;span&gt;2.99924&lt;/span&gt;, &lt;span&gt;1.99986&lt;/span&gt;&lt;span&gt; ]

最好点为[ &lt;/span&gt;&lt;span&gt;2.99947&lt;/span&gt;, &lt;span&gt;1.9993&lt;/span&gt; ]     精度为:&lt;span&gt;0.0001&lt;/span&gt;&lt;span&gt;
函数值为：&lt;/span&gt;-&lt;span&gt;7&lt;/span&gt;&lt;span&gt;

50次  [ &lt;/span&gt;&lt;span&gt;2.99947&lt;/span&gt;, &lt;span&gt;1.9993&lt;/span&gt; ]       [ &lt;span&gt;2.99928&lt;/span&gt;, &lt;span&gt;1.99975&lt;/span&gt; ]    [ &lt;span&gt;2.99951&lt;/span&gt;, &lt;span&gt;1.99922&lt;/span&gt;&lt;span&gt; ]
51次  [ &lt;/span&gt;&lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;1.99968&lt;/span&gt; ]       [ &lt;span&gt;2.99947&lt;/span&gt;, &lt;span&gt;1.9993&lt;/span&gt; ]     [ &lt;span&gt;2.99928&lt;/span&gt;, &lt;span&gt;1.99975&lt;/span&gt;&lt;span&gt; ]
52次  [ &lt;/span&gt;&lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;1.99968&lt;/span&gt; ]       [ &lt;span&gt;2.99944&lt;/span&gt;, &lt;span&gt;1.99936&lt;/span&gt; ]    [ &lt;span&gt;2.99947&lt;/span&gt;, &lt;span&gt;1.9993&lt;/span&gt;&lt;span&gt; ]
53次  [ &lt;/span&gt;&lt;span&gt;2.99932&lt;/span&gt;, &lt;span&gt;1.99963&lt;/span&gt; ]      [ &lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;1.99968&lt;/span&gt; ]     [ &lt;span&gt;2.99944&lt;/span&gt;, &lt;span&gt;1.99936&lt;/span&gt;&lt;span&gt; ]
54次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.99932&lt;/span&gt;, &lt;span&gt;1.99963&lt;/span&gt; ]    [ &lt;span&gt;2.9993&lt;/span&gt;, &lt;span&gt;1.99968&lt;/span&gt;&lt;span&gt; ]
55次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.9994&lt;/span&gt;, &lt;span&gt;1.99945&lt;/span&gt; ]     [ &lt;span&gt;2.99932&lt;/span&gt;, &lt;span&gt;1.99963&lt;/span&gt;&lt;span&gt; ]
56次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.99936&lt;/span&gt;, &lt;span&gt;1.99955&lt;/span&gt; ]    [ &lt;span&gt;2.9994&lt;/span&gt;, &lt;span&gt;1.99945&lt;/span&gt;&lt;span&gt; ]
57次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.99936&lt;/span&gt;, &lt;span&gt;1.99955&lt;/span&gt; ]    [ &lt;span&gt;2.99935&lt;/span&gt;, &lt;span&gt;1.99957&lt;/span&gt;&lt;span&gt; ]
58次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.99949&lt;/span&gt; ]    [ &lt;span&gt;2.99936&lt;/span&gt;, &lt;span&gt;1.99955&lt;/span&gt;&lt;span&gt; ]
59次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99953&lt;/span&gt; ]    [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.99949&lt;/span&gt;&lt;span&gt; ]
60次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.99936&lt;/span&gt;, &lt;span&gt;1.99954&lt;/span&gt; ]    [ &lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99953&lt;/span&gt;&lt;span&gt; ]
61次  [ &lt;/span&gt;&lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99951&lt;/span&gt; ]      [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]     [ &lt;span&gt;2.99936&lt;/span&gt;, &lt;span&gt;1.99954&lt;/span&gt;&lt;span&gt; ]
62次  [ &lt;/span&gt;&lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99951&lt;/span&gt; ]      [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.99949&lt;/span&gt; ]    [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt;&lt;span&gt; ]
63次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]       [ &lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99951&lt;/span&gt; ]    [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.99949&lt;/span&gt;&lt;span&gt; ]
64次  [ &lt;/span&gt;&lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99954&lt;/span&gt; ]      [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt; ]     [ &lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99951&lt;/span&gt;&lt;span&gt; ]
65次  [ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.99954&lt;/span&gt; ]      [ &lt;span&gt;2.99937&lt;/span&gt;, &lt;span&gt;1.99954&lt;/span&gt; ]    [ &lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.9995&lt;/span&gt;&lt;span&gt; ]

最好点为[ &lt;/span&gt;&lt;span&gt;2.99938&lt;/span&gt;, &lt;span&gt;1.99954&lt;/span&gt; ]    精度为:1e-&lt;span&gt;05&lt;/span&gt;&lt;span&gt;
函数值为：&lt;/span&gt;-&lt;span&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;感谢您的阅读，生活愉快~&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 03 Mar 2019 16:23:00 +0000</pubDate>
<dc:creator>林-兮</dc:creator>
<og:description>单纯形法简介在其他网站上都可以查到，我就不多说了 我们主要说方法 它主要解决的是局部最优解的问题 利用多边形进行求解的，若有n个变量，则利用n+1边形 我们这里以两个变量为例，求解第三维度的最优解 例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lv-anchoret/p/10468596.html</dc:identifier>
</item>
<item>
<title>记一次在咸鱼上购买 MacBook Pro 的经历 - JaJian</title>
<link>http://www.cnblogs.com/jajian/p/10466082.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jajian/p/10466082.html</guid>
<description>&lt;p&gt;以前一直用的是 windows 的，但是最近特别想买个 macOS 的。其实不是为了其他什么目的，只是涉及到开发 macOS更接近 linux 系统，一直没使用过所以就想尝试体验下，而且现在很多公司都配置了 mac 给开发人员使用，像阿里很多部门都是配 Macbook 的。提前体验下，不仅自己在家使用，娱乐、编程等。以后如果进了类似的公司也不需要适应能立即上手不影响工作。&lt;/p&gt;
&lt;p&gt;苹果的产品也不是第一次使用了，14年底买了一部 IPhone 6，一直使用到现在还很流畅，要不是中间升级系统带来的一些小问题，例如电池问题和网络问题，也许还能再战几年。相对于苹果的手机，IPhone 保持一年一更新的速度，苹果的笔记本的更新频率相对而言就比较慢一点。&lt;/p&gt;
&lt;p&gt;既然准备入手了所以就去官网上去逛了一逛，发现对于笔记本而言，目前在售的有三款：MacBook，MacBook Air 和 MacBook Pro。至于三者间的具体区别可以自行&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1617729910155966184&amp;amp;wfr=spider&amp;amp;for=pc&quot;&gt;上网查询&lt;/a&gt;。总的来说大致就是：Air 系列保持较为低廉的价格作为最入门、最基础的机型，MacBook是目前苹果最轻薄的笔记本，而MacBook Pro 是目前苹果主推的旗舰个人电脑。性能上 Macbook Pro &amp;gt; Macbook &amp;gt; Macbook Air。Macbook Pro 由于其性能优势更适合专业人士使用，例如编程人员。&lt;/p&gt;
&lt;p&gt;通过上述的比较之后毅然决定购买 MacBook Pro ，MacBook Pro 官网上的非定制版的顶配价格是2W多，再买几个配件，像鼠标，AppleCare，USB 转换器等等，差不多要 2.5W 左右了，没有一个月工资也差不多半个多月了吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303160748762-466564484.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就在想年底了(2019-01-28)，最近应是各大公司办年会的高峰期，是不是有一些财大气粗的公司会以 MacBook Pro 作为年会大奖呢？而员工抽到之后由于一些原因例如：平时工作用不上，或者自己已有一台等等原因，而去发布到闲置交易平台去交易呢？于是我就想到了阿里巴巴旗下的【咸鱼】。&lt;/p&gt;
&lt;p&gt;在咸鱼上我之前也亲身体验了一次，由于搬家携带不方便的原因，我将自己的一台购于京东商城的小冰箱买掉了，同城当面交易。由于急于出手所以比购买低了一半卖出了。当面交易，两个妹子叫了一辆出租车放在后备箱给拉走了，还附送了她们冷冻箱里的娃哈哈棒棒冰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303162226806-602894621.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;咸鱼上不同于淘宝或天猫，上面的欺骗之徒很多，有真实想要出货的，也有浑水摸鱼的。被骗的概率很高，虽然有一些交易可以通过平台担保，但是也有漏洞。【&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1617622863268244466&amp;amp;wfr=spider&amp;amp;for=pc&quot;&gt;主持人沈梦辰都在咸鱼被骗了？原来现在骗子套路这么深！&lt;/a&gt;】，不止买方有被骗的可能，卖方也有很大机会被骗。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303163954762-1216883110.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以最安全的交易方式还是同城当面交易，无论你是买方还是卖方都必须选择这种当面交易的方式。不要在线上交易更不要提前在微信或支付宝上直接付款。&lt;/p&gt;
&lt;p&gt;线下当面交易，买方可以验货，不满意可以不买。卖方可以当面收钱，现金，支付宝或微信都可以，现金注意假钞的问题就行，主要是可以防止物品被掉包。&lt;/p&gt;
&lt;p&gt;一般咸鱼都需要用户绑定&lt;strong&gt;芝麻信用&lt;/strong&gt;，但这也只能作为一个参考条件，别人通过借号的方式也可以实现，而且咸鱼没有差评和打分的机制。对于不好的评论是可以被删除的，所以这点咸鱼做的不够好。&lt;/p&gt;

&lt;p&gt;我在想这个特殊时间点也许可以淘到一台年会的 MacBook Pro ，所以就去咸鱼上逛了一逛。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303164623435-620105963.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过搜索过滤条件选择&lt;strong&gt;信用优先&lt;/strong&gt;，&lt;strong&gt;上海本地&lt;/strong&gt;，之后就有一些搜索结果出来了。当然我是想买全新的，因为如果是二手的，你不知道对方是否摔过或者维修过，除非你能鉴别出来。&lt;/p&gt;
&lt;p&gt;在满足&lt;strong&gt;国行&lt;/strong&gt;，&lt;strong&gt;全新&lt;/strong&gt;，&lt;strong&gt;配置&lt;/strong&gt;等相关要求之后，我收藏了几个自己认为比较靠谱的卖家，然后我比较了下价格，我大致了解了能在 17000 ~ 18000 的价格拿下一台全新的15 英寸、2.6GHz 六核第八代 Intel Core i7 处理器、16GB 2400MHz DDR4 内存、512GB 固态硬盘的 MacBook Pro 。&lt;/p&gt;
&lt;p&gt;然后开始了一个有目的的聊天沟通，讨价还价，最主要的是要到 MacBook Pro 的序列号。&lt;/p&gt;

&lt;p&gt;在 Apple 官网访问&lt;a href=&quot;https://support.apple.com/zh-cn&quot;&gt;技术支持&lt;/a&gt;，在搜索框选择 &lt;code&gt;保修状态(序列号)查询&lt;/code&gt;，之后会弹出序列号验证的页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303170251567-1232353265.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;了解过苹果的人都知道，apple 的产品上都会有一个序列号，这个用过 iphone手机的朋友都知道，它类似于是 apple 产品的身份证（反正我是这么认为的）。&lt;/p&gt;
&lt;p&gt;序列号可以查询生产日期、生产厂家、销售地区、颜色、内存大小、版本等。激活了的产品还能查出激活的日期，保修时间，电话支持时间等。&lt;/p&gt;
&lt;p&gt;也就是说序列号能帮助你知道这台机器是否是苹果公司生产的正规产品，以及是国行的还是美货等信息，还可以知道它是否是二手翻新机。&lt;/p&gt;
&lt;p&gt;所以在和卖家沟通的时候一定要问清楚 MacBook Pro 的序列号，一般未拆封的机器在包装盒背面就能看到序列号，【Serial No. 】后面的一串数字就是。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303171310962-1209113522.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然有的卖家如果诚心卖的话他会告诉你这串数字，如果不告诉你，你就要注意一点了，里面也许有什么猫腻。有的卖家安全考虑可能说见面交易的时候可以让你查，当然这也可以。&lt;/p&gt;
&lt;p&gt;我这台机器是在和卖家沟通的时候问到的，问到之后我就直接去官网验证了下，当然这是我已经激活了的，信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303172726955-401801919.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;主要看三个信息：&lt;strong&gt;有效购买日期&lt;/strong&gt;，&lt;strong&gt;电话技术支持&lt;/strong&gt; 和 &lt;strong&gt;维修和服务保障情况&lt;/strong&gt;。至于&lt;strong&gt;符合AppleCare 条件的产品&lt;/strong&gt;这一项默认是黄色感叹号的，是需要你自己额外付费的，属于一项延保计划，当你额外购买了延保计划的时候他才会显示绿色对号。&lt;/p&gt;

&lt;p&gt;一般未激活的产品，可能看不到 &lt;strong&gt;维修和服务保障情况&lt;/strong&gt;的信息，像上图我的是我购买之后激活了之后才看到的信息。主要看 &lt;strong&gt;维修和服务保障情况&lt;/strong&gt;的 &lt;code&gt;预计到期日&lt;/code&gt;这项信息。&lt;/p&gt;
&lt;p&gt;这信息有什么代表含义呢？将这个日期减去1年就是你产品激活的时间，当然前提是没有购买AppleCare的延保计划，没有做延保计划的将保修到期日期减去1年就是激活日期，使用延保计划的将保修到期日期减去3年就是激活日期。例如图中，我的不是AppleCare的延保计划，我的预计到期日期 &lt;code&gt;2020年1月15日&lt;/code&gt; 减去1年，代表我的激活时间是&lt;code&gt;2019年1月15日&lt;/code&gt;，这是我自己在那天激活的。&lt;/p&gt;
&lt;p&gt;你将序列号输入之后，如果当前信息能看到&lt;code&gt;维修和服务保障情况&lt;/code&gt;的详细信息，这说明该机器已经被激活了。再根据&lt;code&gt;维修和服务保障情况预计到期日&lt;/code&gt;就可以到推出这台机器的激活时间，如果在这个时间之前说明这台机器是翻新机或者是已被激活使用过的机器，可以很确定的判断它不是一台新机器。&lt;/p&gt;
&lt;p&gt;对于未激活的你看不到维修和服务保障情况预计到期日，你可以打电话到官方的体验店里去咨询&lt;br/&gt;。我就是这样做的，我打通了南京东路的那家苹果体验店的电话，然后将序列号告诉了里面的服务人员，她给我查询之后告诉我这是她们的官方正品，但是未激活(确实未激活)，激活之后才能看到更多信息。&lt;/p&gt;
&lt;p&gt;通过这一系列验证之后我确信这是一台国行的未激活正品了，于是在价格方面我又和她进行了一方沟通，最后确定价格定在17200。&lt;/p&gt;

&lt;p&gt;一切准备妥当之后，就是约定当面交易的时间和地点了。交易地点不要约在偏僻的位置，最好是人多繁华的闹市区，不管你是买家或卖家都必须这样，这一切都是为了安全的前提。如果你是女生并且胆子小可以约姐妹一起，或者找个男士陪同，毕竟安全第一。&lt;/p&gt;
&lt;p&gt;当然这个交易中我是男的，对方是女的，所以我和她就约在了某个地铁站见面（耀华路）。这是她的选择，我当然也乐意。&lt;/p&gt;
&lt;p&gt;见面之后，首先拿到机器一定要看下外包装和背面的序列号信息，验证下是否是她发给你的那个，保证一致性，防止对方掉包。如果你细心的话，还可以检查下外包装，是否是拆卸后重新封装的等等。毕竟这么贵重的东西，再小心也不为过。&lt;/p&gt;
&lt;p&gt;各项检查完毕之后，我就拿下了这台机器，以价格 1.7w 的价格买到了。配置信息如下：&lt;/p&gt;

&lt;p&gt;买来之后你需要激活，激活成功之后开启机器，然后查看下序列号，再对比下序列号的一致性。如果序列号没问题，再查看下电池的的信息，主要是看电池的循环次数，一般刚买的新机器，电池的循环次数应该是0。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303184558155-1385947335.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上述的大段落的描述，有可能读者还是觉得不是很稳妥，也许别人手段高明，将新机器拆卸之后更换了零件，然后重新通过技术封装了，你肉眼也看不出来呀。我也有这种担心，所以周末的收我去了一趟南京东路的苹果体验店，我给机器购买了一份 AppleCare 延保计划，服务人员又当场给我验了一次。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1162587/201903/1162587-20190303181635907-535015101.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;国内的 AppleCare 延保计划必须是在购买日期一年内才能购买，而且机器需要是国行的，通过这种方式也从侧面验证了机器的正品性。这下彻底放心了，可以用来愉快的敲代码了。购买的时候AppleCare 通过公司的工牌可以具有指定折扣的优惠（不同的公司折扣价不一样），所以总体下来花了1.9W，延保三年至&lt;code&gt;2022年1月15日&lt;/code&gt;，总配置是：15 英寸、2.6GHz 六核第八代 Intel Core i7 处理器、16GB 2400MHz DDR4 内存、512GB 固态硬盘。总体来说，是一次有惊无险的一次购买经历吧。&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 16:20:00 +0000</pubDate>
<dc:creator>JaJian</dc:creator>
<og:description>前言 以前一直用的是 windows 的，但是最近特别想买个 macOS 的。其实不是为了其他什么目的，只是涉及到开发 macOS更接近 linux 系统，一直没使用过所以就想尝试体验下，而且现在很多</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jajian/p/10466082.html</dc:identifier>
</item>
<item>
<title>读《下一个倒下的会不会是华为》有感 - ysyouaremyall</title>
<link>http://www.cnblogs.com/ys99/p/10468554.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ys99/p/10468554.html</guid>
<description>&lt;p&gt;　　在这中美贸易战，五眼联盟围剿华为的大背景之下，花了两周时间读了《下一个倒下的会不会是华为》，想想也是一件有意思的事。读书是一种营养的输入，而适当写写读书笔记，读后感也算是一种输出了，日后也可以自己再回顾回顾，因为人总是健忘。&lt;/p&gt;
&lt;p&gt;　　从书名讲起，《下一个倒下的会不会是华为》，我个人觉得按照目前华为的发展趋势来看，华为是不会马上倒下的。首先看通信行业，虽然通信领域做到的世界第一，但还有几个对手在，只要有对手在就不容易倒下，因为一个巨无霸的倒下一般要么是被不再你名单里的竞争对手打垮的，要么是来自于更高维的商业模式的降维打击。第二，看让华为真正为大众所熟知的终端领域，这里主要是指手机了，虽然电脑都都有在发展，电视传言也在做，不过都还没有在具体领域有举足轻重的地位。华为的手机（华为和荣耀）虽然已经进入了世界前三，而且势头非常好，不过还没有到达极盛，所以还没到极盛转衰的阶段。所以从这两点来看华为是不会马上倒下的。终端这一块华为是把握住了，但是云这一块没看到华为有什么市场份额，中国的互联网已经可以说吃完了人口红利了，接下来将是更大的万物互联的物联网了，这个名词提出来都有至少二十年了，到今天似乎呼之欲出，互联网讲究终端，网络，云，姑且将非常火的人工智能这个大脑归结到云上的大脑吧，华为算是掌握了物联网中的终端（手机当然只是属于终端非常小的一部分，工业各类传感器，城市大脑各种摄像头等才是大头），网络两大块，可惜独缺了云这一非常重要的一块（阿里巴巴现在也算是实实在在的云计算企业了），所以个人觉得如果华为的云能做起来，三块合一至少保证再快速发展二十年应该没问题吧。&lt;/p&gt;
&lt;p&gt;　　另一方面，下一个倒下的不会是华为，但是华为终究会倒下的，古往今来。无论一个企业如何巨无霸，如何富可敌国，如果看上去坚不可摧，终将都会倒下，书中也是讲了非常多鲜活的案例。一个企业出生、发展、壮大、衰老、死亡、退出历史的舞台，这时所有企业的宿命，只能说如何让一个企业能保持强盛久一点，这正是这本书所主要讲的，其实关于这个观点，在几个月前任正非接受央视面对面节目采访时也是说过的。所以这也给年轻的后来者们，给创业者们希望，不要觉得现在已经巨头林立了，感觉容不下新企业了，其实机会永远都是有的。&lt;/p&gt;
&lt;p&gt;　　《下一个倒下的会不会是华为》这本书我读之后，个人归结起来其实就是在讲华为的价值观“以客户为中心，以奋斗者为本，长期坚持艰苦奋斗”，以及要“自我批判”，其目的就是为了让华为“活下去“”，或者说是活得更久。&lt;/p&gt;
&lt;p&gt;　　“以客户为中心”，一个企业的存在是因为客户有需要，如果都没有客户需要，一个企业也就没有存在的意义了。企业的收入来自于客户，所以应该把心思放在客户身上，一个人的精力是有限的，如果把精力放在了领导身上，取悦领导，自我为中心，这些都不能为企业创造价值，都是也其宗旨背道而驰的。以客户为中心是要做出高质量的产品，对产品负责。只有做到真正以客户为中心了，才能多产粮食。&lt;/p&gt;
&lt;p&gt;　　“以奋斗者为本”，华为可以说是企业界的一个另类，一方面既不像家族企业，创始人拥有很多的股份，另一方面也不想上市公司，股份在资本家的手里，华为创始人只有1.4%股份，其余都在员工手里，这一方面有历史的原因，当时创立企业时还处于改革开放初期，一不留神就会被戴上非法集资、资本家等头衔，幸好当时是在深圳，这个包容，敢于试错，敢于先行的城市。另一方面则是任正非本人的无私了。“以奋斗者为本”，其实说的就是公平问题，简单来说就是多劳多得，想要赚得多，想要升得快，就去海外，就去最艰苦的地方，就去一线，谁打的粮食多，就给谁多薪酬，这就是公平，而不是按资排辈。&lt;/p&gt;
&lt;p&gt;　　“长期坚持艰苦奋斗”，华为所从事的行业是通信行业、IT行业，这个行业不同于传统行业，它瞬息万变，技术更行快，一不留神就会从巅峰上跌落，所以在这样的一个行业里，要求所以的人都能够长期坚持艰苦奋斗，而不允许一些人躺在功劳簿上，这样一来没有创造价值，二来还容易影响其他的积极性。&lt;/p&gt;
&lt;p&gt;　　“以客户为中心”，“以奋斗者为本”，“长期坚持艰苦奋斗”，三者其实是环环相扣，缺一不可，只有以客户为中心了，才能赚到钱，赚到钱，这样员工才能有钱，才谈得上以奋斗者为本，如何实现以客户为中心，那就需要长期坚持艰苦奋斗，但这本身有有悖任性的，人天生是懒惰的，而且容易懈怠的，这时通过以奋斗者为本，即多劳多得来激励人们长期坚持艰苦奋斗。这就是这三者的内在逻辑。&lt;/p&gt;
&lt;p&gt;　　其实，以上三句话非常简单，大家，每个企业家也都懂，也都很容易理解，很多伟大的企业也都是这么做的，可以为什么最终的消亡了，这是因为难在坚持。比如一开始可能这时这么做的，可是到后面就变味了，当一开始的奋斗者成了资深的前辈时，手里掌握着决策权是，是既得利益者时，可能就坚持不了以奋斗者为本了，因为这样意味着自己让位，触碰自己的利益，把利益拱手让人等等，所以坚持是非常难的。&lt;/p&gt;
&lt;p&gt;　　正是因为这些简单的道理开始都很容易，但是坚持就难了，所以书中又着重讲了要坚持自我批判。自我批判或者说改良，不同于改革，更不同与于革命，革命意味着是要流血的，稍不留神企业可能就没了，改革一般也是大刀阔斧的，可能会引起巨大的企业动荡，所以书中强调，自我批判或者说改良，就是说局部慢慢优化，时时刻刻改一点，提升一点，累计下来也会有很大的提升，自我批判而不是互相批评，这样大家也都能容易接受些。当然到了特殊时期，通过自己批判或者改良已无法达到需要的效果时，这就需要动用改革了。华为历史上发生过两次大的辞职就算是属于改革的范畴。改革也好，自我批判一个，其目的都是使公司能够坚持公司的宗旨，让公司活的更久。&lt;/p&gt;
&lt;p&gt;　　书中还有一点比较有意思的是关于“灰度”和“妥协”，其实说的就是对于“以客户为中心，以奋斗者为本，长期坚持艰苦奋斗”这一宗旨是要坚定不移的坚持的，这些原则性问题一旦出现动摇，其后果不堪设想。而“灰度”和“妥协”则是说除了这些原则性问题，关于其他的则可以相对灵活了，不要非黑即白，毕竟还存在灰，比如说每个人都不是圣人，都可能会犯错误，只要能改正，还是可以重用的。而这种“灰度”，“妥协”其实就是一种大智慧，或者落到个人身上的情商了。&lt;/p&gt;
&lt;p&gt;　　还有书中也字里行间提到了，一个公司的管理模式，在不同阶段是不一样的，比如创业初期，就来一套非常成熟的管理体系有意义吗，也不切实际，需要是激发大家所有激情，发挥出小公司比大企业更灵活的性特点。当公司壮大了，之后可能就需要有一套管理模式来去掉初期创业时的各种混乱了，规则化使其提升效率，但是问题由来了，一套毫无瑕疵的管理体系又带来了抑制了一些人的潜力，创造力。总是这样那样的指标进行考核，而许多的东西，又岂能直接量化的呢，所以这一切又是那么矛盾。但是一切的标准应该就是让企业活下去，当违背了这个目标之后，就说明这个管理模式需要改良了，更甚者的改革了。&lt;/p&gt;
&lt;p&gt;　　书中还提到了一个“熵”的概念，将其用于企业中，公司所做的一切行为，包括各种改革也好，吸收新的优秀的人才也罢，都是将公司看成一个开发的系统，让公司这个系统实现熵减，熵减意味着公司更有活力，熵的概念也说明了一个封闭的公司，一个封闭的系统，终将走向混乱，达到平衡之后的死寂，唯有开放才能让企业活下去。&lt;/p&gt;
&lt;p&gt;　　书的最后讲了下中国的机遇，有几句很不错的话，大概意思是，国家的强盛是在小学讲台上实现的；用最优秀的人去培养更优秀的人；中国也正在从人口红利走向人才红利；关于这一点还想讲讲，近年来人工智能不断发展，就出现了一个这样的现象，互联网、AI企业招聘的人越来越少了，而个的待遇越来越高了，甚至上不封顶，我觉得这也恰好说明了这个观点，以前十个人干的活肯定比一个人干得多，这就是人口红利，但是现在不一样了，一个超级优秀的人可能提出一种新型实用的算法，实现巨大创收，这时即使十个普通人在一起可能也无法提出该算法，这可能就是人才红利了。&lt;/p&gt;
&lt;p&gt;　　用书中的一句话结尾“一杯咖啡吸收宇宙能量”。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　2019.3.3&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 15:59:00 +0000</pubDate>
<dc:creator>ysyouaremyall</dc:creator>
<og:description>在这中美贸易战，五眼联盟围剿华为的大背景之下，花了两周时间读了《下一个倒下的会不会是华为》，想想也是一件有意思的事。读书是一种营养的输入，而适当写写读书笔记，读后感也算是一种输出了，日后也可以自己再回</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ys99/p/10468554.html</dc:identifier>
</item>
<item>
<title>Azure Devops/Tfs 编译的时候自动修改版本号 - LeoLaw</title>
<link>http://www.cnblogs.com/leolaw/p/10468393.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leolaw/p/10468393.html</guid>
<description>&lt;p&gt;看到阿迪王那边出品了一个基于Azure Devops自增版本号  链接 &lt;a title=&quot;http://edi.wang/post/2019/3/1/incremental-build-number-for-net-core-via-azure-devops&quot; href=&quot;http://edi.wang/post/2019/3/1/incremental-build-number-for-net-core-via-azure-devops&quot;&gt;http://edi.wang/post/2019/3/1/incremental-build-number-for-net-core-via-azure-devops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恰巧我自己也有一个版本（虽然核心原理是差不多的）也分享下&lt;/p&gt;

&lt;p&gt;（以下均基于Tfs 2018的截图，Azure Devops Server暂时还没发布，只能Tfs将就着了，虽然Azure Devops跟当前的Tfs 2018已经界面有&quot;一些&quot;改动不过流程是相通）&lt;/p&gt;

&lt;p&gt;先说下我们的场景，我们使用Tfs来进行发布，所以我希望做到一个事情是Tfs里Release的版本号能跟我dll的版本号对应上，这样便于版本的对应和关联（实际上我们站点在启动的时候还会上报版本号到exceptionless，假如有机器漏发布了我们就能知道）&lt;/p&gt;
&lt;p&gt;看下我们的最终效果，每次Tfs发布之后，都会改变我当前项目产生的dll的版本号，并且这个版本号（4位的）的其中后2位一定跟Tfs里的生成号一样，而Tfs的生成好的第三位是当前的月份和日期，第四位是当天build的次数&lt;/p&gt;
&lt;p&gt;首先我能将版本号和发布或者说编译关联，其次我也能知道当天到底编译了几次&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231704784-537136980.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231705355-1425352124.png&quot; alt=&quot;image&quot; width=&quot;800&quot; height=&quot;309&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;先说2个前置知识&lt;/p&gt;
&lt;p&gt;①Azure Devops里预定义的变量 &lt;a title=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml&quot; href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml&quot;&gt;https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;②通过Powershell如何读取Azure Devops里CI/CD的变量呢？ 直接 $Env.变量名  （注意，他预定义变量名里有时候会有英文句号. 要将其转为下划线，如Build.BuildNumber你要读取的时候应该是 $Env.Build_BuildNumber)&lt;/p&gt;

&lt;p&gt;再说说.Net里的文件版本号的是怎么来的，主要有Framework和Core两个体系，因为我们两种项目都有（当前还是Framework是大头）所以2个都要支持&lt;/p&gt;
&lt;p&gt;Framework，主要是在项目的Properties文件夹里的AssemblyInfo.cs定义&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231705662-2035531562.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231705895-411063906.png&quot; alt=&quot;image&quot; width=&quot;209&quot; height=&quot;83&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231706136-1579583440.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231706420-61917605.png&quot; alt=&quot;image&quot; width=&quot;365&quot; height=&quot;175&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core，主要是项目里的csproj&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231706648-1578151764.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231706912-1646701744.png&quot; alt=&quot;image&quot; width=&quot;425&quot; height=&quot;89&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;顺带我再加上一个自己的假设，在这些配置文件夹里只有我们的版本号会是正则表达式为 .\d+.\d+.\d+.\d+(也就是x.x.x.x)的规则，我只要用正则找出他替换就行了。&lt;/p&gt;

&lt;p&gt;等下，好像哪里不对劲。&lt;/p&gt;
&lt;p&gt;在core的csproj里因为还管着nuget的引用，所以里面会有他引用的nuget包信息，所以此时他里面可能会有这些内容&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231707185-653621065.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231707403-1963396380.png&quot; alt=&quot;image&quot; width=&quot;471&quot; height=&quot;102&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;于是在core项目里，我们是将version统一抽走到要给独立的props文件里&lt;/p&gt;

&lt;p&gt;搞一个props文件，类似这样&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231707702-1290900359.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231707964-1419942179.png&quot; alt=&quot;image&quot; width=&quot;490&quot; height=&quot;186&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后在你的项目导入你的props&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231708234-626590932.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231708433-1593852408.png&quot; alt=&quot;image&quot; width=&quot;382&quot; height=&quot;76&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其实这样子之后，比如如我截图里的，我在里面定义了我项目使用C# 7.2，那么我所有项目都跟着是7.2，我定义了打包带symbol就所有都带，统一了配置，也更好一些（个人感觉）&lt;/p&gt;

&lt;p&gt;然后就是上powershell(这段powershell并非我原创，也不记得很久前哪里找来的了，然后稍加修改后一直使用至今）&lt;/p&gt;
&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:88bee558-ac5d-455e-9118-81a424e3a048&quot; class=&quot;wlWriterEditableSmartContent&quot; readability=&quot;34&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
# Enable -Verbose option
[CmdletBinding()]

# Regular expression pattern to find the version in the build number 
# and then apply it to the assemblies
$VersionRegex = &quot;(?&amp;lt;=\d+\.\d+\.)\d+\.\d+&quot;


# Make sure path to source code directory is available
if (-not $Env:BUILD_SOURCESDIRECTORY)
{
    Write-Error (&quot;BUILD_SOURCESDIRECTORY environment variable is missing.&quot;)
    exit 1
}
elseif (-not (Test-Path $Env:BUILD_SOURCESDIRECTORY))
{
    Write-Error &quot;BUILD_SOURCESDIRECTORY does not exist: $Env:BUILD_SOURCESDIRECTORY&quot;
    exit 1
}
Write-Verbose &quot;BUILD_SOURCESDIRECTORY: $Env:BUILD_SOURCESDIRECTORY&quot;

# Make sure there is a build number
if (-not $Env:BUILD_BUILDNUMBER)
{
    Write-Error (&quot;BUILD_BUILDNUMBER environment variable is missing.&quot;)
    exit 1
}
Write-Verbose &quot;BUILD_BUILDNUMBER: $Env:BUILD_BUILDNUMBER&quot;

# Get and validate the version data
$VersionData = [regex]::matches($Env:BUILD_BUILDNUMBER,$VersionRegex)
switch($VersionData.Count)
{
   0        
      { 
         Write-Error &quot;Could not find version number data in BUILD_BUILDNUMBER.&quot;
         exit 1
      }
   1 {}
   default 
      { 
         Write-Warning &quot;Found more than instance of version data in BUILD_BUILDNUMBER.&quot; 
         Write-Warning &quot;Will assume first instance is version.&quot;
      }
}
$NewVersion = $VersionData[0]
Write-Verbose &quot;Version: $NewVersion&quot;


# Apply the version to the assembly property files
$commonPropsFiles = Get-ChildItem -include common.props,AssemblyInfo.cs  -recurse
if($commonPropsFiles)
{
    Write-Verbose &quot;Will apply $NewVersion to $($commonPropsFiles.count) files.&quot;

    foreach ($file in $commonPropsFiles) {
        $filecontent = Get-Content($file)
         attrib $file -r
                 Write-Host $NewVersion
        $filecontent -replace $VersionRegex, $NewVersion | Out-File $file
        Write-Verbose &quot;$file.FullName - version applied&quot;

    }
}
else
{
    Write-Warning &quot;Found no commonPropsFiles.&quot;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;这段powershell可以弄成一个.ps1文件放到Azure Devops里然后引用&lt;/p&gt;
&lt;p&gt;如&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231708670-1227348975.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231708913-1550442172.png&quot; alt=&quot;image&quot; width=&quot;525&quot; height=&quot;304&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意使用的时候一定要在高级里配置”工作文件夹”到你项目根目录（一般是csproj所在文件夹）&lt;/p&gt;

&lt;p&gt;或者直接用Powershell Inline&lt;/p&gt;
&lt;p&gt;也就是阿迪王分享的博客里的直接将powershell贴入到里面去执行的那个方法&lt;/p&gt;

&lt;p&gt;两者效果一样&lt;/p&gt;

&lt;p&gt;然后在Azure Devops里下其生成的版本号规则，即可完成匹配&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231709128-1461198491.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231709359-1738488131.png&quot; alt=&quot;image&quot; width=&quot;409&quot; height=&quot;312&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后在进行编译的时候你就能看到你的版本号被修改拉&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231709648-1086800292.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190303231709950-2053539643.png&quot; alt=&quot;image&quot; width=&quot;682&quot; height=&quot;351&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 15:17:00 +0000</pubDate>
<dc:creator>LeoLaw</dc:creator>
<og:description>看到阿迪王那边出品了一个基于Azure Devops自增版本号 链接 http://edi.wang/post/2019/3/1/incremental-build-number-for-net-co</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leolaw/p/10468393.html</dc:identifier>
</item>
<item>
<title>不一样的go语言之入门篇-Hello World - Laud</title>
<link>http://www.cnblogs.com/laud/p/go_helloworld.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laud/p/go_helloworld.html</guid>
<description>&lt;p&gt;  这是《不一样的go语言》的开篇之作，我尝试以非go语言转变者的角度来聊一聊go语言。所以今天先从go语言的基础开始，即语法。&lt;/p&gt;
&lt;p&gt;  学习一门新的编程语言，必从语法开始。但需要注意的是，对于一个有大量项目经验的程序员来说，可能看完语言介绍或者看完Hello World之后，就着急地想着上手写个小东东玩玩，比如写个简单的web服务。但是将一门新的语言应用到实际项目中需要的东西很多很多。诸如go语言的项目结构是怎么样的？有没有什么约定？用什么IDE？依赖是怎么管理的？项目是怎么构建的？是怎么发布的？如果带着这么多的思想负担去学习一门新语言，这个时间花费恐怕会得不偿失。&lt;/p&gt;
&lt;p&gt;  因而我觉得回归本真最好不过。回到C语言的时代，面向过程、面向单文件编程。所以的代码放在一个文件里，使用命令行编译、运行。&lt;/p&gt;
&lt;p&gt;  接下来的示例，就是go语言版的Hello World。新建文件main.go&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[eventer@localhost]# vi main.go&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后敲入以下代码：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import &quot;fmt&quot;

func main() {
    fmt.Println(&quot;Hello World!&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  要编译、运行这段代码，需要安装go sdk。伟大的先驱者们，已经为我们开辟了绿色通道。sdk及官方文档都可以在&lt;a href=&quot;https://studygolang.com/&quot;&gt;go 语言中文网&lt;/a&gt;找到，目前go语言的最新版本是1.11。&lt;/p&gt;
&lt;p&gt;  一个题外话，go语言从1.5版本开始实现自举（Bootstrap，用要编译的目标编程语言编写其编译器或汇编器），也就是用go语言写编译器，然后用来编译go语言写的代码。因此当你需要从go1.5的源码来构建go sdk的话，需要先下载安装go1.4或者使用gcc构建go1.4的源码，当你有go1.4的go编译器的时候，就可以用它来编译go1.5的源码，从而得到go语言版的编译器。&lt;/p&gt;
&lt;p&gt;go sdk: &lt;a href=&quot;https://studygolang.com/dl&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  下载安装之后，设置&lt;strong&gt;GOROOT&lt;/strong&gt;环境变量为go sdk所在目录，然后设置一个工作目录的环境变量&lt;strong&gt;GOPATH&lt;/strong&gt;，用于存放未来要用到第三方包及你的程序。&lt;/p&gt;
&lt;p&gt;  至此，你可以使用以下命令编译、运行上面那段代码了。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[eventer@localhost]# go run main.go&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  波澜不惊，可是一个Hello World 能看出什么来呢？那还是让我们来看看各大语言的 Hello World 是长什么样的吧。&lt;/p&gt;
&lt;p&gt;Java版&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.eventer.test;

import java.lang;

public class Test {
    public static void main(String[] args) {
        System.out.Println(&quot;Hello World!&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Python版&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;print &quot;Hello World!\n&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;C语言版&lt;/p&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void main() {
    printf(&quot;Hello World!\n&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;C++版&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;

void main() {
    using namespace std;
    cout &amp;lt;&amp;lt; &quot;Hello World!\n&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;nodejs版&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;console.log('Hello World!');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;C#版&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using System;

public class HelloWorld
{
    public static void Main()
    {
        Console.WriteLine(&quot;Hello World&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Common Lisp 版&lt;/p&gt;
&lt;pre class=&quot;lisp&quot;&gt;
&lt;code&gt;(print &quot;Hello World&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Lua 版&lt;/p&gt;
&lt;pre class=&quot;lua&quot;&gt;
&lt;code&gt;print &quot;Hello World!/n&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  从这么来看，go没有更简洁也没有更复杂。所以确实从一个 Hello World 来看一门语言，真的看不出什么来。当然设计一门语言也不是从 Hello World 来开始设计的。可以得出结论，Hello World只是为了让你觉得写个 Hello World挺简单的，赶快麻利地搭建环境吧。&lt;/p&gt;
&lt;p&gt;  下一篇将详细地讲述go语言更多地语法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.jobbole.com/93905/&quot;&gt;Hello World来自哪里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.csdn.net/article/2012-11-22/2812113-The-Nature-Of-Lisp&quot;&gt;Lisp的本质&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 15:13:00 +0000</pubDate>
<dc:creator>Laud</dc:creator>
<og:description>  这是《不一样的go语言》的开篇之作，我尝试以非go语言转变者的角度来聊一聊go语言。所以今天先从go语言的基础开始，即语法。   学习一门新的编程语言，必从</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laud/p/go_helloworld.html</dc:identifier>
</item>
<item>
<title>记laravel5.5项目php-fpm迁移到swoole4.2.9 - 自由TK</title>
<link>http://www.cnblogs.com/wscsq789/p/10468268.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wscsq789/p/10468268.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;事起说明&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        最近对上线半年多的laravel项目做了一次少大的改动，由php-fpm改为swoole，这里做个记录。&lt;/p&gt;
&lt;p&gt;       2019年过年前半个月，上阿里云后台查看前一天的访问请求日志，发现很多接口响应慢。翻了前几天的日志，发现不少响应慢的接口，包括app首页资讯、文章列表、文章详情等所有和cms相关的接口。想着最近没上线过什么新功能，怎么最近变慢好多。阿里云后台查看nginx错误日志，上服务器看php-fpm错误日志。发现和上次php-fpm优化报的同样错误信息。时间点差不多都吻合，大都是push发出后的那几分钟。用户大都在开盘那会打开咱们公司的APP了，虽然公司这款app不做期货交易，黄金交易，但接口响应这么慢，严重影响用户体验！（下图是阿里云后台看到的日志信息）因为临近过年不想有大改动，向公司临时申请加一台服务器，配置好调试上生产负载均衡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303165143081-1380715721.png&quot; alt=&quot;&quot; width=&quot;863&quot; height=&quot;447&quot;/&gt;&lt;/p&gt;


&lt;p&gt;       过完年后，刚开工，需求不多。想着要优化系统，自己ab压测一下测试环境的接口，接口tps110多，有点低。参考网上的laravel框架优化资料（https://learnku.com/articles/5088/optimize-laravel-site-to-open-speed），照着改了tps上升到120左右，没起到什么起作用。&lt;/p&gt;
&lt;p&gt;       在公司技术群里咨询下，有人建议用swoole+laravel，网上说做得好性能可以十倍以上的提升。又上github搜索swoole+laravel，选用别人已经集成好的，最后选用laravels(https://segmentfault.com/a/1190000013358289?utm_source=tag-newest)。&lt;/p&gt;
&lt;p&gt;      开发机安装swoole扩展，composer拉取laravels包(折腾好会，这里就不表述了)。&lt;/p&gt;
&lt;p&gt;      原来http请求到达web服务器，服务器nginx将请求转发给php-fpm，让php-fpm管理进程对php程序读取解析并返回。使用 swoole会接管php-fpm要做这部分事情。&lt;/p&gt;
&lt;p&gt;     nginx配置更改如下(nginx监听接收88端口的请求并转发本机5200端口，如果是php-fpm，默认本机9000端口接收)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;gzip on;
gzip_min_length &lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;
gzip_comp_level &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;#返回结果的压缩比，数值越高压缩的越小但更消耗CPU，但不一定有更高的压缩率╥﹏╥
gzip_disable &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msie6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
upstream laravels {
　　# 通过 IP:Port 连接&lt;br/&gt;# 通config/laravels.php中listen_ip listen_port保持一致
　　server &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;5200 &lt;/span&gt;weight=&lt;span&gt;5&lt;/span&gt; max_fails=&lt;span&gt;3&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
　　keepalive &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;;
}

server {
　　&lt;/span&gt;&lt;span&gt;listen &lt;/span&gt;&lt;span&gt;88&lt;/span&gt;&lt;span&gt;; 
　　server_name test&lt;/span&gt;-cms.xxxx.com&lt;span&gt;;
　　root &lt;/span&gt;/alidata/www/test-cms.xxx.com/&lt;span&gt;public&lt;/span&gt;&lt;span&gt;;
　　&lt;/span&gt;&lt;span&gt;access_log &lt;/span&gt;/alidata/logs/nginx/test-&lt;span&gt;cms.xxx.com.log;
　　error_log &lt;/span&gt;/alidata/logs/nginx/test-cms.xxx.com-&lt;span&gt;error.log;
　　charset utf&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
　　location &lt;/span&gt;/&lt;span&gt; {
　　　　try_files $uri @laravels;
　　}
　　location @laravels {
　　　　proxy_http_version &lt;/span&gt;&lt;span&gt;1.1&lt;/span&gt;&lt;span&gt;;
　　　　proxy_set_header Connection &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
　　　　proxy_set_header X&lt;/span&gt;-Real-&lt;span&gt;IP $remote_addr;
　　　　proxy_set_header X&lt;/span&gt;-Real-&lt;span&gt;PORT $remote_port;
　　　　proxy_set_header X&lt;/span&gt;-Forwarded-&lt;span&gt;For $proxy_add_x_forwarded_for;
　　　　proxy_set_header Host $http_host;
　　　　proxy_set_header Scheme $scheme;
　　　　proxy_set_header Server&lt;/span&gt;-&lt;span&gt;Protocol $server_protocol;
　　　　proxy_set_header Server&lt;/span&gt;-&lt;span&gt;Name $server_name;
　　　　proxy_set_header Server&lt;/span&gt;-&lt;span&gt;Addr $server_addr;
　　　　proxy_set_header Server&lt;/span&gt;-&lt;span&gt;Port $server_port;
　　　　proxy_pass http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;laravels;&lt;/span&gt;
　　&lt;span&gt;}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;      在修改config/laravels.php中配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    'listen_ip'                =&amp;gt; env('LARAVELS_LISTEN_IP', '127.0.0.1'),
    'listen_port'              =&amp;gt; env('LARAVELS_LISTEN_PORT', 9527),
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;运行和排查&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span class=&quot;cnblogs_code&quot;&gt;php bin/laravels {start|stop|restart|reload|info|help}&lt;/span&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;再根据laravels命令:&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;启动LaravelS，展示已启动的进程列表 &quot;&lt;em&gt;ps -ef|grep laravels&lt;/em&gt;&quot;。支持选项 &quot;&lt;em&gt;-d|--daemonize&lt;/em&gt;&quot; 以守护进程的方式运行，此选项将覆盖&lt;code&gt;laravels.php&lt;/code&gt;中&lt;code&gt;swoole.daemonize&lt;/code&gt;设置；支持选项 &quot;&lt;em&gt;-e|--env&lt;/em&gt;&quot; 用来指定运行的环境，如&lt;code&gt;--env=testing&lt;/code&gt;将会优先使用配置文件&lt;code&gt;.env.testing&lt;/code&gt;，这个特性要求&lt;code&gt;Laravel 5.2+&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;stop&lt;/td&gt;
&lt;td&gt;停止LaravelS&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;restart&lt;/td&gt;
&lt;td&gt;重启LaravelS，支持选项 &quot;&lt;em&gt;-d|--daemonize&lt;/em&gt;&quot; 和 &quot;&lt;em&gt;-e|--env&lt;/em&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;reload&lt;/td&gt;
&lt;td&gt;平滑重启所有Task/Worker进程，这些进程内包含了你的业务代码，不会重启Master/Manger/Timer/Custom进程&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;info&lt;/td&gt;
&lt;td&gt;显示组件的版本信息&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;help&lt;/td&gt;
&lt;td&gt;显示帮助信息&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;     如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303221112727-1673655065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       再用上压测机用apache jmeter试了下，50的并发压测半分钟，结果显示性能提升很大哦^_^：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303222029232-1067074679.png&quot; alt=&quot;&quot; width=&quot;531&quot; height=&quot;204&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303222002372-2103545435.png&quot; alt=&quot;&quot; width=&quot;842&quot; height=&quot;202&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       再上100的并发压测：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303222426533-1791098157.png&quot; alt=&quot;&quot; width=&quot;533&quot; height=&quot;223&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303222459674-743765731.png&quot; alt=&quot;&quot; width=&quot;838&quot; height=&quot;231&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       没什么提升，再看系统负载不高啊，为啥tps上不去？ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303222843090-1836510801.png&quot; alt=&quot;&quot; width=&quot;855&quot; height=&quot;278&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303223031021-1458189533.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     在排查此问题时，在接口加了时间间隔打印。&lt;/p&gt;
&lt;p&gt;     期间一直没找出问题出在哪，截图压测的几个接口都是从redis获取数据，不会读取mysql的。&lt;/p&gt;
&lt;p&gt;     网上有人说可能是swoole的redis链接未释放导致的。&lt;/p&gt;
&lt;p&gt;     可问题是我这里虽然redis链接句柄用的是class静态变量保存，但是redis是短连接，代码的变量不应该在请求结束就释放了吗？&lt;/p&gt;
&lt;p&gt;     如果是用redis长链接可能导致异常，但像我这正常不会有redis链接未释放的问题啊，查看swoole和laravel错误日志也未找到redis的报错信息。&lt;/p&gt;
&lt;p&gt;     第二天，忽然想到一位前同事，swoole用的很溜的，请教他后，让我把config/laravels.php的两个参数设置大一些。原来是系统内核数乘2，现在改成系统内核数乘12&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303224330698-436344876.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     继续压测100的线程数：&lt;/p&gt;
&lt;p&gt;     tps上到1200了非常激动&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1441404/201903/1441404-20190303224453275-1792486830.png&quot; alt=&quot;&quot; width=&quot;819&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     在该同事想看看更高性能意见后，改成200线程数，400线程数，tps越来越大，系统负载也越来越高，接近极限，最后达到2200。&lt;/p&gt;
&lt;p&gt;     期间发生一个小插曲，200线程组改成400线程组后，发现tps竟然达到7000多，真是把我两乐坏了，后来看下没有重启swoole服务，接口直接报错。。。&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;所以在此提醒下，任何更改php代码的行为，都需要重启swoole服务才能生效！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  &lt;span&gt; 夜深了，明天要上班就不写了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;   未完待续，下篇接着更！！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 03 Mar 2019 14:56:00 +0000</pubDate>
<dc:creator>自由TK</dc:creator>
<og:description>事起说明 最近对上线半年多的laravel项目做了一次少大的改动，由php-fpm改为swoole，这里做个记录。 2019年过年前半个月，上阿里云后台查看前一天的访问请求日志，发现很多接口响应慢。翻</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wscsq789/p/10468268.html</dc:identifier>
</item>
<item>
<title>我为什么要写博客 - 五色花的</title>
<link>http://www.cnblogs.com/luao/p/10468226.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luao/p/10468226.html</guid>
<description>&lt;h2 id=&quot;序言&quot;&gt;序言&lt;/h2&gt;
&lt;p&gt;从开始有写技术博客（这里指技术博客）的想法到真正的开始写，经历了漫长的时间，大约两年有余。从决定要写博客到真正的开始行动大约经历了两个月的时间，为什么从有想法到付诸实施会经历这么漫长的时间，到底要不要写，为什么要写，能给自己或他人带来什么，怎么写，纠结了很长时间。最终还是决定要有一个自己学习总结的一个能够沉淀下来的东西，想到还是用博客的方式来记录比较好。于是决定了博客一定是要写的，采用独立的站点域名还是在技术博客上注册自己的博客空间，对于这个问题自己也经过一番调研，甚至连VPS和域名已经购买好了，毅然放弃采用独立站点，而是在博客园开通了博客空间。主要有如下这些原因使我决定在博客园开通空间。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;VPS和域名每年都会有固定的费用支出，需要花费时间和金钱去维护网站系统。当然去搭建一个博客系统对自己来说没有什么技术难题，网上成熟的博客系统很多，如WordPress 和Hexo等。&lt;/li&gt;
&lt;li&gt;重要的是独立的站点和域名，在内容不是特别优秀的情况下很难被搜索引擎找到，或者说博文被搜索到的几率非常低。对于以学习、分享、探讨为目的写博文来说是非常不利的。因为别人没有途径找到你的文章，或者说能看到你的文章入口非常有限。基于这些考虑，就放弃了独立建站的想法。&lt;/li&gt;
&lt;li&gt;放弃了独立站点之后，就开始调研技术论坛。如：CSDN、SegmentFault （思否）、cnblogs(博客园)，oschina（开源中国）等。第一感觉是选择CSDN 但是由于广告太多了于是就放弃了，选择了博客园，主要是博文质量高，广告少，还能一键推送到电子阅读器，呵呵。经过了漫长的过程终于开启了自己的博客生涯，希望未来时光能有幸和激友们(对生活充满激情的朋友)探讨技术、思考人生、登上人生巅峰。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下边将主要围绕两个方面：为什么? 怎么做？ 对本文进行阐述。&lt;/p&gt;
&lt;h2 id=&quot;我为什么要写&quot;&gt;我为什么要写？&lt;/h2&gt;
&lt;p&gt;为什么要写也就是写博客能给自己带来什么好处或者给别人带来的好处，因为写博文会花费大量的时间和精力，如果两者都不能带来，那么做这件事也就没有什么意义了。写博文，需要总结和思考。有时候我们一直在赶路，却忘了放慢脚步，回顾和总结最近所学的和使用的技术，他们之间是否有联系，如何能更好的服务于工作和生活。需要花费时间来思考，认真思考之后写出来走心的文章，往往能引起共鸣。&lt;/p&gt;
&lt;h2 id=&quot;该如何去写&quot;&gt;该如何去写？&lt;/h2&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;自学或者工作中用到的某一块的技术知识以及衍生出的知识点。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;验证学习过的知识，确保理论值与实践值的一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;构思博客的重点、实例代码、配图等，写出文章，进行排版，最后发表。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;对网友提问进行回复。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;总结为： 学习 、思考 、总结 、 提升&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;冰冻三尺非一日之寒写博客也是短期内可能看不到效果但是长期坚持对自己的提升很有帮助&quot;&gt;冰冻三尺非一日之寒，写博客也是，短期内可能看不到效果，但是长期坚持，对自己的提升很有帮助。&lt;/h2&gt;
&lt;p&gt;【本文只代表个人观点，如有不同观点 欢迎留言交流】&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 14:46:00 +0000</pubDate>
<dc:creator>五色花的</dc:creator>
<og:description>我为什么要写博客 序言 从开始有写技术博客（这里指技术博客）的想法到真正的开始写，经历了漫长的时间，大约两年有余。从决定要写博客到真正的开始行动大约经历了两个月的时间，为什么从有想法到付诸实施会经历这</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luao/p/10468226.html</dc:identifier>
</item>
<item>
<title>《关于长沙.NET技术社区未来发展规划》问卷调查结果公布 - 溪源More</title>
<link>http://www.cnblogs.com/xiyuanMore/p/10468159.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiyuanMore/p/10468159.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;　　2月，长沙.net 技术社区自从把群拉起来开始，做了一次比较正式、题目为《关于长沙.NET技术社区未来发展规划》的问卷调查，在问卷调查中，溪源写道：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　随着互联网时代的到来，互联网企业和传统企业对于人才的要求也越来越高。我们组建长沙.NET技术社区的目的，正是为了让大家能够更加直接的了解互联网技术发展的脉络，积极的投身到面向新时代互联网技术开发的浪潮中来。  参加社区的开发者们，大家虽然来自不同的城市，有的在外地打拼，有的留守故土，还有的愿意看着长沙社区茁壮成长。不管大家以前做过什么类型的工作，但此刻大家都有共同的标签，那就是.NET开发者。而.NET（包括.NET FX和.NET Core）这种技术，是一种非常优秀的技术，虽然在互联网时代屡屡丢失阵地，但是也同样充满了创新的精神，同样充满了潜力，能够值得大家进一步付出。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　2月中旬，我们长沙.NET社区已经成功的组建了两个群，总人数超过六百人。然而建群，并不是我们的目的，我们的目的依然是让大家实现技能的沉淀进一步提高自己的技术能力，分享自己的博客、技术分享以及参与开源项目的开发过程。同时我们也会组织一些社区活动，让大家从线上走到线下，一起学习那些感兴趣的新技术。       &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　这个问卷的目的，也是期待通过收集大家的意见，为后期社区其他活动的开展做一些基础准备工作。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　半个月的时间过去了，问卷的结果基本上已经出炉了，现将结果公布如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　首先是问卷的来源情况，在这次活动之前，我们有幸得到了来自全国各地的优秀开发者的大力捧场，所以在我们的微信群中，有许多不同地区的优秀开发者。通过问卷调查，我们可以看到，目前大部分都是来源于湖南本土的开发者居多，有将近6成都是目前在本地的开发者，除此之外，还有相当一部分都是身在异地，却心在湖南的开发者。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223320606-951669723.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt; 1、您是否对.NET和.NET Core持续关注，并广泛的应用到贵公司的项目中？&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223327895-114577563.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　在收到的150份问卷中，共有133份问卷选择了是，还有17份选择了否。目前共有将近九成网友选择了是。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　当然还有17位选择了否，只要是因为这道问题开始的设问存在缺陷，造成了不少被调查者选择了否之后就自动结束作答了。通过后期与一些开发者的交流，他们说虽然目前公司没有用到.NET，但是他们时时刻刻都在关注.NET的发展，并期待能够未来有机会将.NET应用到项目中。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　当然，这些开发者所在公司大部分都使用Java进行开发，这是一个逃不过去的问题，我们相信，随着.NET Core的发展，也许情况会有所改观。&lt;/p&gt;
&lt;h2&gt;2、我们对于社区的定性是知识分享和学习分享，您怎么看？&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223333777-984617002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、    您是否愿意参与社区建设？你愿意提供哪种形式的帮助？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223346640-544466530.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、    社区后期会举办一系列技术活动，您愿意积极参与么？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223354889-1094562679.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5、    您希望活动是收费的还是免费的？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223402208-1068762523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6、   您是否愿意参与开源项目或者参与文档翻译、贡献技术文档？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223409574-1291272570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、    您期望社区能够举行哪些类型的技术活动？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190303223418257-840767652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;8、    您贡献的项目或开源文档叫什么名字？方便提供您的git项目地址，让我们大家一起学习么？&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;序号&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot;&gt;
&lt;p&gt;开源库地址&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;https://github.com/xiexingen&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;https://github.com/AClumsy&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot;&gt;
&lt;p&gt;https://github.com/scb&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot;&gt;
&lt;p&gt;http://github.com/sduo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot;&gt;
&lt;p&gt;https://github.com/sdcb&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;https://github.com/xiao15111325694/LifeParagraph_Core_Dev&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot;&gt;
&lt;p&gt;Noerrornolife&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;432&quot;&gt;
&lt;p&gt;小黄豆CRM&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　然而。。长沙的参与开源项目的人实在是太少了，简直凤毛麟角。&lt;/p&gt;

&lt;p&gt;9、    您方便提供您自己的博客或公众号，以便让我们社区的其他开发者一起学习么？&lt;/p&gt;
&lt;p&gt;　　博客还是挺多的，但是。。好像都不太活跃啊。~&lt;/p&gt;

&lt;p&gt;10、 您的微信号以及对于长沙.NET社区，您有哪些想法么？您愿意给大家带来技术分享？&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;30&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;序号&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot;&gt;
&lt;p&gt;开源库地址&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;1 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;慢慢来 组织好活动，技术交流技术分享技术落地&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;2 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;真正的能沉下心来深挖技术 推动.NET的生态发展和实现个人价值&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;3 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;希望能打造成一个好的技术社区而不是吹水社区，社区也可以把唐胡子的一些吹水、招聘群二维码贴出来，让大家去别的群闲聊 我愿意带来分享。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;4 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;希望社区越来越壮大越来越好&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;5 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt; 希望能多介绍大数据大流量的处理方法与技术。 虽然自己技术不怎么样，但是如果社区有需要用得到，我愿意贡献自己的微薄之力&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;6 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;大佬们多带带我们年轻的，分享最新的技术知识，多些干货，祝长沙社区越办越好！&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;7 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;分享工作项目中的技术&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;8 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;我个人是一个F#语言爱好者（日常工作C#），虽然水平有限，但是期待我们长沙社区有同好可以一起交流进步。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;活动需要赞助可以找我。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;10 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;是不是建立一个论坛，有问题技术方便在上线交流。群里人多眼杂。有些信息没看到，或者自己不感兴趣的。浪费查看时间。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;11 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;介绍新技术、如何面对复杂代码&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;12 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;少吹水，多解决实际问题&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;13 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;多开些讲座，比如在线公开课等之类&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;14 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;希望能够学习到新的技术，对技术有更深刻的了解&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;15 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;希望在社区和同行一起进步学习交流，为社区多做贡献。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;16 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;希望大家集体出力把长沙net社区建设好，一起改进社区氛围。现在还在规划，用net技术搭建适用于中小团队的大网站架构&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;17 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;我感觉长沙的net的氛围太差了。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;18 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;希望能多分享技术，像我这种入门不久的，很希望在大神们的带领下走的更远，不断提高自身，最终回馈社区&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;19 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot;&gt;
&lt;p&gt;越办越好吧&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;20 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;可不定时的举办各种沙龙，组织技术人员头脑风暴，可持续性的产出博客、开源项目，提高长沙.NET开发社区知名度，影响更多在学校中的学生以及在Java与.NET技术选型徘徊中的企业。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;21 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;今年三月底即将回长沙工作，长沙.net的工作机会不多，这跟这项技术的社区活跃有关系，然后我也有知道一些企业在用.net core作为他们的辅助技术栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;22 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;遇到感兴趣的，我会在评论区留言的。现在我工作中遇到的问题是SQL分库分表，分布式orm，推流拉流视频直播，在线excel，word生成查看，及Net数据的统计分析，希望公众号多一些这类文章的介绍和实现方案。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;23 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;还没有什么好想法，希望把自己学到的和走的一些技术坑和大家分享&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;24&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;产学研，业余的时间开发一个产品&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;89&quot;&gt;
&lt;p&gt;25 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;431&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;更多的是希望能从社区里面学到一些东西&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; 　　另外，为了防止给博客园不同层面的读者造成不舒适感，类似于此类内容将不再发布到博客园首页。有需求关注长沙.NET技术社区发展的朋友，可以关注我的个人公众号【溪源技术圈More】(MoreDotNetCore），或者关注我的博客。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　对您造成的不舒适感，深表歉意，我要好好的自省，多写几篇技术文章来弥补对您造成的伤害。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 14:45:00 +0000</pubDate>
<dc:creator>溪源More</dc:creator>
<og:description>那些开发者们对于社区的美好期待 2月，长沙.net 技术社区自从把群拉起来开始，做了一次比较正式、题目为《关于长沙.NET技术社区未来发展规划》的问卷调查，在问卷调查中，溪源写道： 随着互联网时代的到</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiyuanMore/p/10468159.html</dc:identifier>
</item>
<item>
<title>企业架构设计之IFW实践回顾 - 五岳</title>
<link>http://www.cnblogs.com/wuyuegb2312/p/10461099.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuyuegb2312/p/10461099.html</guid>
<description>&lt;p&gt;　　笔者几年前曾参与过一套网络银行的系统建设以及后续这套系统在信用、云服务、保险、基金、支付等领域的复用，使用了IFW模型的变体。当时仅仅是根据架构师的设计进行编码、测试和交付以及后续的维护，没有对这套模型进行系统化的总结，心中总是有点缺失。这么多年过去，借着在组内分享的机会，系统地整理一下这块的知识，希望对以后的设计建模能有所帮助。&lt;br/&gt;　　限于笔者水平，同时IFW模型实际上是非常复杂（以至于对于专业的咨询公司来说，这套模型的咨询+分析+落地方案设计费用通常在百万到千万级别），短短的一篇博文仅仅是管中窥豹，而且由于理解偏差也会有错误的之处，因此仅作参考。&lt;/p&gt;

&lt;p&gt;　　IFW是IBM的Information FrameWork缩写，旨在描述银行业务，可以看做领域内技术和业务沟通的桥梁。IFW是一套Zachman Framework的变体，后者最经典之处在于5W1H维度下对于6个概念的划分：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/228024/201903/228024-20190302143936560-2050371178.jpg&quot;/&gt;&lt;br/&gt;　　这里对于Zachman Framework不展开介绍，保持聚焦于IFW本身，其所应用的产品很多：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IBM旗下Industry Models的一部分&lt;/li&gt;
&lt;li&gt;银行业与财务市场
&lt;ul&gt;&lt;li&gt;IBM银行业与金融市场业数据仓库(IBM Banking and Financial Markets Data Warehouse，BFMDW)&lt;/li&gt;
&lt;li&gt;IBM银行业数据仓库(IBM Banking Data Warehouse，BDW，是BFMDW的衍生产品，只和银行有关)&lt;/li&gt;
&lt;li&gt;IBM金融市场数据仓库(IBM Financial Markets Data Warehouse，FMDW，同样是BFMDW的衍生产品，只和金融市场有关)&lt;/li&gt;
&lt;li&gt;IBM银行处理服务模型(BPS)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;保险业
&lt;ul&gt;&lt;li&gt;IBM保险应用架构(IBM Insurance Application Architecture, IAA)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;其他
&lt;ul&gt;&lt;li&gt;保健&lt;/li&gt;
&lt;li&gt;电信&lt;/li&gt;
&lt;li&gt;零售&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个业务模型框架分为以下几个板块：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/228024/201903/228024-20190302174552356-481212068.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IFW基础模型
&lt;ul&gt;&lt;li&gt;金融服务数据模型(FSDM)&lt;/li&gt;
&lt;li&gt;金融服务功能模型(FSFM)&lt;/li&gt;
&lt;li&gt;金融服务工作流模型(FSWM)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;银行数据仓库
&lt;ul&gt;&lt;li&gt;业务解决方案模板&lt;/li&gt;
&lt;li&gt;银行数据仓库模型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IFW集成模型
&lt;ul&gt;&lt;li&gt;金融服务业务对象模型&lt;/li&gt;
&lt;li&gt;金融服务接口设计模型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IFW流程模型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　其中“IFW基础模型”如其命名，是基础中的基础。个人理解，“工作流模型”是指工作流中的各个实体，如节点、跳转条件等，“流程模型”指的是抽象或具体的某个流程。&lt;/p&gt;

&lt;p&gt;　　IFW将金融信息分解为九大数据概念，所有的金融业务中都可以套用到其中。具体的细节可能有差异，我一共参考了两份资料，下面一共列了11项，其中前7项是公有的，&lt;br/&gt;第8~9份是我所参与项目中使用的，10~11项是另一份资料中的。其中“渠道”和“业务方向”有重合之处。&lt;br/&gt;　　这部分是我实践中接触最多的地方，也是对建模最有帮助的。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;19.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;参与者&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;td&gt;业务往来、信息交互中关联的各方&lt;/td&gt;
&lt;td&gt;个人、机构、柜员、平台商、委托方、代理人&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;位置&lt;/td&gt;
&lt;td&gt;LO&lt;/td&gt;
&lt;td&gt;参与者相关的地址&lt;/td&gt;
&lt;td&gt;家庭住址、公司地址、邮政邮箱、电子邮箱、网址&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;条件&lt;/td&gt;
&lt;td&gt;CD&lt;/td&gt;
&lt;td&gt;描述业务开展时需要的前提条件、资格标准、要求、限制、服务参数&lt;/td&gt;
&lt;td&gt;需年满18岁、利率、价格、周期&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;产品&lt;/td&gt;
&lt;td&gt;PD&lt;/td&gt;
&lt;td&gt;提供给客户用以换取任何形式利润或收益的产品和服务&lt;/td&gt;
&lt;td&gt;活期存款、货币基金、人身险、实体商品&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;合约&lt;/td&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;描述或两个或两个人、团体、组织等潜在或实际的协议，申明了权利或/和义务&lt;/td&gt;
&lt;td&gt;服务协议、产品协议&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;资源项&lt;/td&gt;
&lt;td&gt;RI&lt;/td&gt;
&lt;td&gt;各参与者拥有、需要管理和使用的物品项&lt;/td&gt;
&lt;td&gt;身份证、借条、房产、通行证&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;事件&lt;/td&gt;
&lt;td&gt;EV&lt;/td&gt;
&lt;td&gt;参与者之间、参与者与系统、系统与系统交互的行为与数据&lt;/td&gt;
&lt;td&gt;交易事件、存款事件、收费事件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;账户&lt;/td&gt;
&lt;td&gt;AC&lt;/td&gt;
&lt;td&gt;记录及监控货币及非货币(如积分等)数量变化的主体&lt;/td&gt;
&lt;td&gt;存款账户、贷款账户、总账账户、公积金账户&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;渠道&lt;/td&gt;
&lt;td&gt;CH&lt;/td&gt;
&lt;td&gt;多个参与者为业务通讯的通道&lt;/td&gt;
&lt;td&gt;柜面渠道、ATM渠道、网站门户&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;分类&lt;/td&gt;
&lt;td&gt;CL&lt;/td&gt;
&lt;td&gt;数据分类或分组&lt;/td&gt;
&lt;td&gt;前台类目、后台类目&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;业务方向&lt;/td&gt;
&lt;td&gt;BD&lt;/td&gt;
&lt;td&gt;开展业务所在的环境或方式&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　包含了500多个银行的业务功能，不过没有详细列出。举例如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;资源管理
&lt;ul&gt;&lt;li&gt;人力资源资源管理&lt;/li&gt;
&lt;li&gt;基础设施资源管理&lt;/li&gt;
&lt;li&gt;信息资源管理&lt;/li&gt;
&lt;li&gt;金融资源管理&lt;/li&gt;
&lt;li&gt;信托资源管理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方向管理
&lt;ul&gt;&lt;li&gt;控制管理&lt;/li&gt;
&lt;li&gt;策略管理&lt;/li&gt;
&lt;li&gt;会计管理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　本处指工作流模型+流程模板。模板特点是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;独立于渠道&lt;/li&gt;
&lt;li&gt;独立于业务部门&lt;/li&gt;
&lt;li&gt;独立于产品线&lt;/li&gt;
&lt;li&gt;独立于特殊客户群&lt;/li&gt;
&lt;li&gt;独立于技术&lt;/li&gt;
&lt;li&gt;独立于已有系统或某个 ISV方案&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;作为模板化的分析和抽象，我们在设计中可以参考这些指导建议。&lt;/p&gt;

&lt;p&gt;　　追求模型的大而全是不现实的，在特定业务主题下实际上只需要部分模型即可实现，以下是几个例子。&lt;/p&gt;
&lt;h2 id=&quot;产品管理&quot;&gt;产品管理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/228024/201903/228024-20190303223553176-823712907.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;产品签约管理&quot;&gt;产品签约管理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/228024/201903/228024-20190303223612322-1067847735.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;核心业务处理&quot;&gt;核心业务处理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/228024/201903/228024-20190303223631574-1712477177.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;客户关系管理&quot;&gt;客户关系管理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/228024/201903/228024-20190303223649773-305829429.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;基于技术选型的再设计&quot;&gt;基于技术选型的再设计&lt;/h2&gt;
&lt;p&gt;　　建模后限于技术选型的限制，模型可能并不能直接套用。比如DB不支持批量插入或性能很差、字段长度不支持等。这是一个很常见的逻辑模型转换物理模型时遇到的问题，对于物理模型的组织和存储，需要进行进一步的设计，当然也有可能影响到逻辑模型。&lt;/p&gt;
&lt;h2 id=&quot;结构与数据分离&quot;&gt;结构与数据分离&lt;/h2&gt;
&lt;p&gt;　　对于领域模型非常复杂的场景，建模的最初目的是理解业务和沟通，可能并没有考虑到系统间交互的复杂度。在将物理存储转换为逻辑模型时，组装模型的接口可能会导致系统处理速度下降，特别是在大量信息需要做序列化/反序列化时。在实践中我们发现，对于外部只消费数据，不感知具体模型的结构，对吞吐量要求较高；对于内部信息管理，才会感知到结构，但对吞吐量没有太大要求。因此可以考虑将结构和数据分开存储，对外接口只需要透出数据即可。&lt;/p&gt;
&lt;h2 id=&quot;缓存化&quot;&gt;缓存化&lt;/h2&gt;
&lt;p&gt;　　对于经常查询的信息预先考虑缓存化处理。&lt;/p&gt;
&lt;h2 id=&quot;可以但是没必要的复杂性&quot;&gt;可以但是没必要的复杂性&lt;/h2&gt;
&lt;p&gt;　　模型支持可扩展，但不意味着把所有的处理工作留给自己，建议在保持核心逻辑和原子能力的前提下做扩展，保持内部的高内聚性，减少对外围逻辑的耦合。下文会提到，“没有一套模型能解决所有的问题”。&lt;/p&gt;
&lt;h2 id=&quot;sdk化&quot;&gt;SDK化&lt;/h2&gt;
&lt;p&gt;　　如果应用IFW的系统仅仅是一个公司SOA化架构中的一环，而非整个公司技术产品的共识，即使是一个核心应用，上下游来对接会非常痛苦——他们不得不理解这套复杂的概念。这里建议采用共建的形式为使用方提供SDK，屏蔽复杂的细节，仅仅提供给对方需要的信息和接口即可。&lt;/p&gt;
&lt;h2 id=&quot;模型裁剪&quot;&gt;模型裁剪&lt;/h2&gt;
&lt;p&gt;　　与SDK化相反，如果仅仅关注系统内部流程，是没必要完全实现大而全的IFW的，只需要实现其中使用到的领域即可。&lt;/p&gt;
&lt;h2 id=&quot;没有银弹&quot;&gt;没有银弹&lt;/h2&gt;
&lt;p&gt;　　“没有一套模型能解决所有的问题，如果强行去做，那么会导致每个模型都非常扭曲，这个是我们在经历了这么多迭代后得出的血的教训。”这是我原先所在团队的架构师在这套模型多年实践后总结出的心得。&lt;/p&gt;

&lt;p&gt;　　建设成本与使用成本的权衡。&lt;/p&gt;

&lt;p&gt;IFW英文wiki：&lt;a href=&quot;https://en.wikipedia.org/wiki/Information_Framework&quot; class=&quot;uri&quot;&gt;https://en.wikipedia.org/wiki/Information_Framework&lt;/a&gt;&lt;br/&gt;Zachman Framework：&lt;a href=&quot;https://en.wikipedia.org/wiki/Zachman_Framework&quot; class=&quot;uri&quot;&gt;https://en.wikipedia.org/wiki/Zachman_Framework&lt;/a&gt;&lt;br/&gt;Industry Models产品官网：&lt;a href=&quot;https://www.ibm.com/analytics/industry-models&quot; class=&quot;uri&quot;&gt;https://www.ibm.com/analytics/industry-models&lt;/a&gt;&lt;br/&gt;IFW Overview：&lt;a href=&quot;http://www.itpub.net/thread-1604106-1-1.html&quot; class=&quot;uri&quot;&gt;http://www.itpub.net/thread-1604106-1-1.html&lt;/a&gt; （直接注册下就可以下载，这里有关于IFW的一些讨论可以借鉴）&lt;br/&gt;治理和管理企业模型，第 1 部分：&lt;a href=&quot;https://www.ibm.com/developerworks/cn/rational/09/0113_letkeman-norris/index.html&quot; class=&quot;uri&quot;&gt;https://www.ibm.com/developerworks/cn/rational/09/0113_letkeman-norris/index.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 03 Mar 2019 14:42:00 +0000</pubDate>
<dc:creator>五岳</dc:creator>
<og:description>IFW是IBM的Information FrameWork缩写，是一套银行及金融业的信息模型框架方案。笔者几年前曾参与过一套基于IFW变体的网络银行的系统建设以及后续这套系统在信用、云服务、保险、基金</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuyuegb2312/p/10461099.html</dc:identifier>
</item>
</channel>
</rss>