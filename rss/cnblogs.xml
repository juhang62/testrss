<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>金三银四铜五铁六 - 卓庆森</title>
<link>http://www.cnblogs.com/zhuoqingsen/p/interview.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhuoqingsen/p/interview.html</guid>
<description>&lt;p&gt; 　　鲁班简称LB&lt;/p&gt;
&lt;p&gt;　　据说，金三银四，截止今天为止面试黄金时间已经过去十之八九，而LB恰逢是这批面试大军其中的一名小兵，很不幸今年恰逢遇上了互联网寒冬（即各大公司都在裁员，对外提供岗位相对较少的，这意味着很多猿即将面临着更多的竞争对手和相对较少的岗位困境），LB求职过程种种被虐，尸体趟过召唤师峡谷每个角落，如今历历在目，终究，当初的一名无名小卒如今已是一名超级兵哈哈，但是从这个事情上却学到了不少的东西，LB不亏。&lt;/p&gt;
&lt;p&gt;　　经验也总是用来交流用的，于是LB觉得有必要记录下来，也许对猿们会有一丝帮助。&lt;/p&gt;
&lt;p&gt;　　首先，找工作得有一份体面的简历，这里就会衍生一个如何书写简历的问题，LB将从如下角度总结：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;关于简历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;如何书写简历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;HR角度较为关注信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.个人信息（年龄，联系方式等）&lt;/p&gt;
&lt;p&gt;　　　　2.求职意向（工作年限，工作地，岗位）&lt;/p&gt;
&lt;p&gt;　　　　3.教育经历（专业，学校，毕业时间） &lt;/p&gt;
&lt;p&gt;　　　　证书（如ACM，软证）&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;面试官角度较为关注信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.专业技能&lt;/p&gt;
&lt;p&gt;　　　　　　4-5项熟悉2-3项了解，建议层次分明，逻辑有序，建议别写精通，除非很NB，不然被问到不是很深的问题你答不出，面试官认为你不真实。&lt;/p&gt;
&lt;p&gt;　　　　2.自我评价&lt;/p&gt;
&lt;p&gt;　　　　　　是否有博客（文章数太少不写，减分），是否有GITHUB（提交数和STRA太少不写，减分），是否有积极学网课（如极客时间星球，虚假减分）。&lt;/p&gt;
&lt;p&gt;　　　　3.项目难点&lt;/p&gt;
&lt;p&gt;　　　　　　队列和缓存集群，分布式应用衍生问题解决方案，JVM的排查技能，数据库层面优化和分库分表等，这些东西都需要你嵌入到你的项目中。&lt;/p&gt;
&lt;p&gt;　　　　那么什么是‘’优秀‘’的简历（网图）&lt;/p&gt;
&lt;p&gt;　　　　　　　　　  看图&lt;/p&gt;
&lt;p&gt;　　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1294463/201904/1294463-20190424152346247-1028176075.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　哈哈哈，我大佬说，看到这种简历直接扔垃圾桶吧，原因很简单，你既然那么牛逼还特么需要自己投简历找工作么，早就被挖了，这种一看就是啥经验都没有培训生或者不懂行规的应届生简历写的东西，那么合格的简历刚刚上面已经说了，专业技能模块不能写太多，层次分明就可以，大概这样：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1294463/201904/1294463-20190424155304983-1975933906.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　暂不评价技术如何，光从这个专业技能在简历的书写规则上是很符合层次分明的，而且一行代表一个领域，总体上来看就是一个标准的JAVA后台开发路线的技术栈，而且从内容上来看，也有一定的侧重点，这样给面试官的感觉就会比较友好，提问方便。与人方便自己方便。&lt;/p&gt;

&lt;p&gt;　　　　&lt;strong&gt;如何投递简历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;拉钩，公司官方网&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　这种看RP了，有时候投出去也大概率不会被看到，称之为海投，收到面试邀请不管怎么样，去了再说，毕竟是一种经历，总能学到东西的，但如果是你比较想去的公司，没有很大得取胜信心，建议别投先，毕竟如果被刷，那就得含泪在等一年了。&lt;/p&gt;
&lt;p&gt;　　　&lt;strong&gt;　BOSS直聘，脉脉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　搜索你想去的公司，然后加HR或者技术官后给他们发简历，本质和BOSS直聘差不多，他们看到你的简历，并且觉得OK，一般都非常愿意帮你内推的，因为内推录用了，是有推荐金的。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;朋友内推，猎头内推&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　这种获得面试机会几率较高，因为是直推的。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;关于面试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　　　&lt;strong&gt;面试需要准备3个部分的东西&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;strong&gt;算法智力题笔试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;strong&gt;项目技术面试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;strong&gt;HR跪舔与防坑宝典&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　　&lt;strong&gt;   首先是算法编程题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　这个没办法的，会就会不会的话，短时间之内也是做不出来的，有些公司硬性规定必须要你写出来，否则免谈，LB遇到个一个很奇葩的一次面试就是，笔试题出了编程题目，没想到一面后面完了，还让你去做一道编程题，二面也是，估计HR面也是。。无可厚非，因为他们认为动手能力才是最重要的，所以对于猿们唯一的办法就是提前刷题，如果不是面试对算法有较高要求的公司，一般的公司只要把LeetCode简单的题目刷了就能做出来大部分的题目，甚至会遇到一模一样的题目，连标点符号也一样哦。&lt;/p&gt;
&lt;p&gt;　　　   &lt;strong&gt;然后就是智力题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　其实也不是什么智力题，网上一搜程序员面试智力题一大推，看来看去也就是那几类问题，头脑比较聪明的猿基本不需要准备。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;这里重点讲讲技术面&lt;/strong&gt;　　　　&lt;/p&gt;
&lt;p&gt;　　　　面试官：能写出一段能体现你水平的代码~&lt;/p&gt;
&lt;p&gt;　　　　LB:好的~&lt;/p&gt;
&lt;p&gt;　　　　几秒后~&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 　　Scanner scan = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Scanner(System.in);  
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 　　String question =&lt;span&gt; scan.nextLine();       
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 　　String answer =question.replace ('你', '我'). replace ('吗', ' '). replace ('?', '!'&lt;span&gt;) )；
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;　　Sysem.out.println (answer );
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　面试官：呀，这难道就是.....&lt;/p&gt;
&lt;p&gt;　　　　LB：没错，是失传已久的Artificial Intelligence&lt;/p&gt;
&lt;p&gt;　　　　面试官：你究竟是什么人？&lt;/p&gt;
&lt;p&gt;　　　　LB：阁下莫问出处，这个程序我示范给您看下&lt;/p&gt;
&lt;p&gt;　　　　面试官：好的&lt;/p&gt;
&lt;p&gt;　　　　LB：在吗？&lt;/p&gt;
&lt;p&gt;　　　　电脑：在！&lt;/p&gt;
&lt;p&gt;　　　　LB：你可以人机对话吗？&lt;/p&gt;
&lt;p&gt;　　　　电脑：我可以人机对话！&lt;/p&gt;
&lt;p&gt;　　　　LB：你会自己思考吗？&lt;/p&gt;
&lt;p&gt;　　　　电脑：我会自己思考！&lt;/p&gt;
&lt;p&gt;　　　　面试官也跃跃欲试：你可以滚出去吗？&lt;/p&gt;
&lt;p&gt;　　　　电脑：我可以滚出去！&lt;/p&gt;

&lt;p&gt;              寒冷的冬天，外出的农夫，看见一条冻僵的蛇，于是把蛇带回了家，解冻之后，泡进酒里，蛇终于醒了，看到如此场景，蛇说:我也是&lt;strong&gt;醉了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　　　emmm~&lt;/p&gt;
&lt;p&gt;　　　　言归正传，技术面就是看你的技术栈，然后结合项目去提问，并根据项目遇到的问题，要求回答出解决方案，并且根据遇到的问题会继续问深一层或者变形，考察你是否真的对问题进行了仔细的思考和深入的研究，以及问题对应的技术功底是否深厚，所以这里提到的重点是项目结合技术栈，如果你的项目没有用到你写的技术，那么就是扯蛋，那么面试官就会认为这个候选人只是停留在理论基础或者是初学，并没有实践，如果是应届生还说的过去，否则多半会被PASS。&lt;/p&gt;
&lt;p&gt;　　　  &lt;strong&gt;那什么基础功底&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　  &lt;strong&gt;比如问你某些关键字的作用如static&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　      如果你答出static修饰变量、修饰方法我会认为你合格，答出静态块，我会认为你不错，答出静态内部类我会认为你很好，答出静态导包我会对你很满意，满意的原因是能看出你确实非常热衷研究技术。这比你在自我评价写一万句本人热爱研究技术，学习能力强之类的废话更有说服力。&lt;/p&gt;
&lt;p&gt;　　 　 &lt;strong&gt;又如问你对锁部分的了解　 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　 　 1.一般人回答出Synchronized具有多线程的同步作用，能防止多个线性同时访问同一临界资源。&lt;/p&gt;
&lt;p&gt;             2.但是却很少人提到 Synchronized的局限性（无法解決业务层面并发）。&lt;/p&gt;
&lt;p&gt;             3.可以说明锁的用法，如可以创建 Reentrantlock类的可重入锁，而且可以通过其中的lock和unlock方法行加锁和解锁的操作。&lt;/p&gt;
&lt;p&gt;　　　  4.说出可重入锁、公平锁和读写锁，如词锁的含义、公平数的含义，以及在创建 Reentrantlock和 Semaphore时如何通过参数强它是否是公平锁，也可以说明在读写锁中加读锁和写锁的条件，由此介绍通过读写线程吞吐量的做法。&lt;/p&gt;
&lt;p&gt;             5.在协调多个线程处理临界资源时，可以使用锁，但这不是唯一的解决方法，还可以用 Condition和 Semaphore管理多线程竟争的方法。首先，说明这两个类的基本用法如可以通过 Reentrantlock来创建 Condition，过 Condition的awat和 signal来实现类似加锁和解锁的功能，可以通过 Semaphore acquire和 release方法来申请和释放资源。另外，说明用 Condition和 Semaphore的特点（在哪些场景下用它们比较合适）通过 Condition类的相关方法，可以在不同的线程中创建多个阻塞队列，从而能精准的控制唤醒某个阻塞队列的线程，而不是只唤醒默认的阻塞队列的线程，而 Semaphore可以用在多个线程竞争少量资源的场合中。如10张票，20个线程的抢购场景。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;再如问你对框架里的了解&lt;/strong&gt;　　　   &lt;/p&gt;
&lt;p&gt;              因为一般的候选人，大多仅仅是能“山寨”别人的代码，也就是说能在现有框架的基础上，照着别人写的流程，扩展出新的功能模块。比如要写个股票挂单的功能模块，是会模仿现有的下单流程，然后从前端到后端再到数据库，依样画葫芦写一遍，最多把功能相关的代码点改掉。其实我们每个人都这样过来的，但在面试时，如果你仅仅表现出这样的能力，就和大多数人的水平差不多了，在这点就没法体现出你的优势了。&lt;/p&gt;
&lt;p&gt;              我们知道，如果单纯使用SSM框架，大多数项目都会有痛点。比如数据库性能差，或者业务模块比较复杂，并发量比较高，用Spring MVC里的Controller无法满足跳转的需求。所以一般还会被问：你除了依照现有框架写业务代码时，还做了哪些改动？&lt;/p&gt;
&lt;p&gt;　　　  对于这个问题，不在乎听到什么回答，只关心回答符不符逻辑。一般只要答对，面试官就会给出“在框架层面有自己的体会，有一定的了解”，否则，就只会给出“只能在项目经理带领下编写框架代码，对框架本身了解不多”。&lt;/p&gt;
&lt;p&gt;             回答例如有：增加了Redis缓存，以避免频繁调用一些不变的数据。或者，在MyBitas的xml里，select语句where条件有isnull，即这个值有就增加一个where条件，对此，会对任何一个where增加一个不带isnull的查询条件，以免该语句当传入参数都是null时，做全表扫描。或者对返回信息做了压缩处理，以增加网络传输性能。&lt;/p&gt;
&lt;p&gt;              &lt;strong&gt;小结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;              技术面试非常重要，这里说的重要不是说对于整个求职过程重要，因为在求职过程哪怕是HR面都有权利决定不要你，所以说没有重不重要的，这里说的重要的是指这是检验你自身水平的能力的考察，通过面试其实可以反映出你的自身很多问题，比如，知识面有了，但是不够全面，或者知识面全了但是不够深入，或者把需求转化为实际产品的能力不足等等，这些东西才是对于你来说是重要的，如果你的能力有了，还会害怕找不到工作吗？这里最怕的就是明知自己能力不足，又不愿意专研学习，还想着高新，只能说你不适合当一名程序员。&lt;/p&gt;
&lt;p&gt;　　　　那么问题来了，我知道自己的情况，但是又不知道努力的方向，或者不知道怎么提升自己，怎么办？如果你能提出这样的问题，LB只能说，你独立解决问题能力确实也是挺差的，因为在我们开发当中，经常会遇到一些需求，都不知道怎么去做，或者用一些完全没接触过用的框架，如果团队中有人熟悉那还好，但是也别指望别人教你太多，所以这个时候就只能靠自己了，无它，需要你通过网上找教学资料（视频，博客，官方网）的方式快速学习，这些资料花几块钱随手可得，然后一步一个脚印慢慢的把产品做出来。&lt;/p&gt;

&lt;p&gt;　　　　&lt;strong&gt;HR跪舔与防坑宝典（LB总结了一些）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;自我介绍&lt;/strong&gt;　　&lt;/p&gt;
&lt;p&gt;　　　　您好，很荣幸有机会来参加公司的面试&lt;/p&gt;
&lt;p&gt;　　　　1.个人经历（我是谁，我来自哪里，年龄，学历，从业经历）实习加上正职　&lt;/p&gt;
&lt;p&gt;　　　　2.公司为什么要选你（应聘岗位中最重要的3个技能点，说清楚相关经验）我能做好我要做的事情，我相信自己&lt;/p&gt;
&lt;p&gt;　　　　3.你为什么要选这家公司（就公司的产品，文化，影响力等）着重说出你选择的理由如贵公司的高技术开发环境很吸引我，贵公司在近年来市场上很有竞争力，贵公司能够提供一个与众不同的发展道理&lt;/p&gt;

&lt;p&gt;　　　　&lt;strong&gt;高频问题&lt;/strong&gt;&lt;strong&gt;　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　1.&lt;/strong&gt;&lt;strong&gt;上一家公司，你为什么会离职？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.公司很好，但是公司调整了业务，接下来的发展路线和自己的目标不一致，所以要换工作&lt;/p&gt;
&lt;p&gt;　　　　2.工作太清闲，学不到知识，我不怕累，就是想多锻炼自己，想找具有挑战力工作&lt;/p&gt;
&lt;p&gt;　　　　3.公司的管理制度不也是很完善，没有晋升机会，我比较想进步，找一个更好的平台&lt;/p&gt;
&lt;p&gt;　　　　4.我想去优秀的公司，让自己变得更好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　2.&lt;/strong&gt;&lt;strong&gt;为什么来我们这里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.对原单位充满感恩，这是我人生中非常重要的经历，我认同原单位领导和文化&lt;/p&gt;
&lt;p&gt;               2.两份工作的本质是一致的，行业和工作性质都有紧密联系&lt;/p&gt;
&lt;p&gt;               3.选择一份新的工作不代表背叛过去，发扬原公司魅力，同时为了寻求更大的成长和突破&lt;/p&gt;
&lt;p&gt;               4.不承诺一份工作干一辈子，保证在我的任期内尽职尽责　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;              3.&lt;/strong&gt;&lt;strong&gt;你怎么看待自己以后的职涯？（包括工作和家庭的分配，怎么平衡家庭和工作的关系、加班、选择一家公司时的考量、地点等）（离职稳定性）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　我准备在技术领域有所作为，我希望在我3到5年内，具备什么样的素质，在行业内达到什么样的水平，产出什么样的工作成果，将规划量化，具体化 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　4.&lt;/strong&gt;&lt;strong&gt;对薪资期望（不要直接说数，绝不能表现出没到多少钱或者什么层级我就不去）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　薪资应该基于你求职行业的市场价格和自身的价值，例如目前这个岗位的平均工资是8K，虽然我刚毕业，但是在我工作期间已经有过两份的相关经验而且都是作为核心成员参与项目，因此可以很快上手这份工作，所以我希望能够在转正后的工资能达到10K等等　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　5.&lt;/strong&gt;&lt;strong&gt;可以接受降薪吗？（先了解公司薪酬体系，根据行业和自身能力来定位）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　如果候选人的调性符合（足够官方），可以这么回答：我也了解咋们公司现在的薪资架构，我相信公司会根据我的能力给出一个合理的薪水方案，我相信只要把事情做好，该有的一定会有的对于这样的部门，“ 毕竟贵公司在做一个从来没有人做的这么好的事情，所以肯定是有难度的，肯定是要付出大量努力的 ”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　6&lt;/strong&gt;&lt;strong&gt;自己觉得自己工作上的短板/&lt;/strong&gt;&lt;strong&gt;优点是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.不能避而不谈，&lt;/p&gt;
&lt;p&gt;　　　　2.不能变相夸自己，&lt;/p&gt;
&lt;p&gt;　　　　3.不能暴露重大缺陷，&lt;/p&gt;
&lt;p&gt;　　　　4.可以将一些能接受能改进的缺点&lt;/p&gt;
&lt;p&gt;　　　　综上：缺点加说明加改进&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　7.&lt;/strong&gt;&lt;strong&gt;说说自己性格上的优缺点（描述一下自己的性格）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　我不懂得如何拒绝他人，我拉不下面子去指出别人的问题，我做事的时候希望马上就能看到成效，有时候会比较贪心，想同时做好几项工作，我比较慢热，不善于和陌生人打交道，我有意识的让自己在改正，让自己更加有亲和力，我非常在意别人对自己的工作评价，得不到好评就会焦虑，其实我也在开导自己别太功利心了。沉着冷静，条例清楚，立场坚定，顽强向上，乐于助人和关心他人，适应能力等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　8.&lt;/strong&gt;&lt;strong&gt;怎么看待加班（你能接受996&lt;/strong&gt;&lt;strong&gt;、997&lt;/strong&gt;&lt;strong&gt;、007&lt;/strong&gt;&lt;strong&gt;吗）？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　可以接受版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　如果候选人的调性符合（足够官方），可以这么回答：我觉得我们要实现梦想，一定是要付出比较多努力的，所以我已经做好了准备，也愿意和小伙伴们一起战斗我是可以加班的，我现在加班强度就是比较大的。因为我喜欢这个事情，我想把这个事情做好。项目忙的时候可能一个月都没有休息日，我觉得要应对这么忙的工作，光有心理准备其实还不够，还要有特别好的身体素质，所以我准备把健身的习惯一直坚持下去&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;不接受版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　　　加班是应该的，不加班也是应该的，没有把事情做完是不应该的，因为能力低完成工作慢造成的加班，并不是一件好事，不加班是能力，加班是态度，能力不够的情况下，态度去补。　　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　9.&lt;/strong&gt;&lt;strong&gt;你谈恋爱了没？（状态是否稳定，会不会因为感情影响工作，很快结婚，休婚假产假）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　我还没有谈恋爱，目前不考虑恋爱问题，我希望自己变得更优秀以后，在谈一场稳定的恋爱，所以现在想把主要的精力放在工作上。&lt;/p&gt;
&lt;p&gt; 　　　   我已经有男朋友或女朋友，我们都在这个城市工作，目前准备先工作几年，有精力能力了在考虑结婚。　　　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　10.&lt;/strong&gt;&lt;strong&gt;是否还面试其他公司（HR&lt;/strong&gt;&lt;strong&gt;确认求职意向与诚信度）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　实话实说，选择名声较大较好的公司来说，职位和现在的求职相思相近，表是自己求职意向专一，还在等候结果　　　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　11.&lt;/strong&gt;&lt;strong&gt;项目中遇到的最大挑战是什么？怎么解决的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;因人而已，需要描述问题产生的原因，查找解决问题的方式，对比那种更加好，遇到什么问题，最终怎么一步一步解决的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　12.&lt;/strong&gt;&lt;strong&gt;最有成就感的事情是?&lt;/strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　做有挑战性的事情，并且能够做好，或者是坚持一个习惯很久，如坚持写博客，坚持看书&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　13.&lt;/strong&gt;&lt;strong&gt;你有什么问题想问的？&lt;/strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.你作为一个资深的CODER，我想知道，你平时是怎么学习技术，有什么好的学习途径，怎么才能做到像你一样强呢？&lt;/p&gt;
&lt;p&gt;　　　　2.公司的业务和技术栈是什么呢？&lt;/p&gt;
&lt;p&gt;　　　　3.技术难点怎么解决，有什么技术支持&lt;/p&gt;
&lt;p&gt;　　　　4.每天有多少时间花在写代码上　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　14.收到OFFER&lt;/strong&gt;&lt;strong&gt;该问的5&lt;/strong&gt;&lt;strong&gt;个问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1.试用期工资和时间（正常来说合同是3年，试用期是3个月）&lt;/p&gt;
&lt;p&gt;　　　　2.转正考核的方式，转正工资&lt;/p&gt;
&lt;p&gt;　　　　3.工作时间以及加班计算（一周五天工作制，一天8小时）&lt;/p&gt;
&lt;p&gt;　　　　4.培训晋升机制&lt;/p&gt;
&lt;p&gt;　　　　5.福利情况（五险一金，餐补，其他补贴如电脑补贴）&lt;/p&gt;

</description>
<pubDate>Sat, 27 Apr 2019 23:34:00 +0000</pubDate>
<dc:creator>卓庆森</dc:creator>
<og:description>鲁班简称LB 据说，金三银四，截止今天为止面试黄金时间已经过去十之八九，而LB恰逢是这批面试大军其中的一名小兵，很不幸今年恰逢遇上了互联网寒冬（即各大公司都在裁员，对外提供岗位相对较少的，这意味着很多</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhuoqingsen/p/interview.html</dc:identifier>
</item>
<item>
<title>Dicom文件转mhd，raw文件格式 - 控球强迫症</title>
<link>http://www.cnblogs.com/XDU-Lakers/p/10781321.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/XDU-Lakers/p/10781321.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近在整理与回顾刚加入实验室所学的相关知识，那会主要是对DICOM这个医疗图像进行相应的研究，之前有一篇博客已经讲述了一些有关DICOM的基本知识，今天这篇博客就让我们了解一下如何将Dicom文件转为mhd，raw文件格式。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;一、将Dicom文件转mhd，raw文件格式的原因&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;医学图像通常是通过dicom文件格式进行存储的，但为了便于读取和使用也常常将其转化为：&lt;strong&gt;每个病人一个mhd文件和一个同名的raw文件的格式&lt;/strong&gt;，&lt;span&gt;mhd即meta header data，数据头部信息，raw存储了像素信息&lt;/span&gt;。如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201904/1179840-20190428004245975-832094251.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、利用python+SimpleITK完成上述过程的转换&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中mhd文件存储了dicom的头部信息，由于头部信息很多生成mhd的方法有所不同，所以这里展示了通过ITK（ITK是美国国家卫生院下属的国立医学图书馆开发的一款医学图像处理软件包，是一个开源的、跨平台的影像分析扩展软件工具。）产生mhd文件的文件内容(利用写字板打开)，有以下头部信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201904/1179840-20190428004923783-1345598290.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;以下为实现的代码，附着详细的代码注释：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cv2
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pydicom
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SimpleITK
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 路径和列表声明&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 与python文件同一个目录下的文件夹,存储dicom文件,该文件路径最好不要含有中文&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; PathDicom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/dicom_image/V&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 与python文件同一个目录下的文件夹,用来存储mhd文件和raw文件，该文件路径最好不要含有中文&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; SaveRawDicom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/dicom_image/V/SaveRaw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; lstFilesDCM =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将PathDicom文件夹下的dicom文件地址读取到lstFilesDCM中&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; dirName, subdirList, fileList &lt;span&gt;in&lt;/span&gt;&lt;span&gt; os.walk(PathDicom):
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; filename &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fileList:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dcm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; filename.lower():  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断文件是否为dicom文件&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(filename)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             lstFilesDCM.append(os.path.join(dirName, filename))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加入到列表中&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第一步：将第一张图片作为参考图片，并认为所有图片具有相同维度&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; RefDs = pydicom.read_file(lstFilesDCM[0])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取第一张dicom图片&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第二步：得到dicom图片所组成3D图片的维度&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; ConstPixelDims = (int(RefDs.Rows), int(RefDs.Columns), len(lstFilesDCM))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ConstPixelDims是一个元组&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第三步：得到x方向和y方向的Spacing并得到z方向的层厚&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; ConstPixelSpacing = (float(RefDs.PixelSpacing[0]), float(RefDs.PixelSpacing[1&lt;span&gt;]), float(RefDs.SliceThickness))
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第四步：得到图像的原点&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; Origin =&lt;span&gt; RefDs.ImagePositionPatient
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据维度创建一个numpy的三维数组，并将元素类型设为：pixel_array.dtype&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; ArrayDicom = numpy.zeros(ConstPixelDims, dtype=RefDs.pixel_array.dtype)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; array is a numpy array&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第五步:遍历所有的dicom文件，读取图像数据，存放在numpy数组中&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; i =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; filenameDCM &lt;span&gt;in&lt;/span&gt;&lt;span&gt; lstFilesDCM:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     ds =&lt;span&gt; pydicom.read_file(filenameDCM)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     ArrayDicom[:, :, lstFilesDCM.index(filenameDCM)] =&lt;span&gt; ds.pixel_array
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     cv2.imwrite(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;out_&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(i) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ArrayDicom[:, :, lstFilesDCM.index(filenameDCM)])
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     i += 1
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第六步：对numpy数组进行转置，即把坐标轴（x,y,z）变换为（z,y,x）,这样是dicom存储文件的格式，即第一个维度为z轴便于图片堆叠&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; ArrayDicom = numpy.transpose(ArrayDicom, (2, 0, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第七步：将现在的numpy数组通过SimpleITK转化为mhd和raw文件&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; sitk_img = SimpleITK.GetImageFromArray(ArrayDicom, isVector=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;sitk_img.SetSpacing(ConstPixelSpacing)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;sitk_img.SetOrigin(Origin)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; SimpleITK.WriteImage(sitk_img, os.path.join(SaveRawDicom, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sample&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.mhd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;p&gt;以上就是本次学习的内容，欢迎大家交流与讨论。&lt;/p&gt;

</description>
<pubDate>Sat, 27 Apr 2019 16:55:00 +0000</pubDate>
<dc:creator>控球强迫症</dc:creator>
<og:description>最近在整理与回顾刚加入实验室所学的相关知识，那会主要是对DICOM这个医疗图像进行相应的研究，之前有一篇博客已经讲述了一些有关DICOM的基本知识，今天这篇博客就让我们了解一下如何将Dicom文件转为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/XDU-Lakers/p/10781321.html</dc:identifier>
</item>
<item>
<title>【原】无脑操作：TypeScript入门 - {name:&quot;代码屠夫&quot;}</title>
<link>http://www.cnblogs.com/iflytek/p/10781313.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iflytek/p/10781313.html</guid>
<description>&lt;p&gt;&lt;span&gt;概述：本文描述TypeScript环境搭建，以及基于VSCode的自动编译设置和调试设置。网络上很多相应文章的方式过时了或者无法试验成功。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TypeScript简介：由微软开发的开源免费的编程语言，是JavaScript语言的一个超集，本质上为JavaScript语言添加了可选的静态类型和基于类的面向对象编程概念。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TypeScript的作者是大名鼎鼎的Anders Hejlsberg，没错，就是Delphi和C#之父。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190427233056748-1403889574.png&quot; alt=&quot;&quot; width=&quot;481&quot; height=&quot;250&quot;/&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190427233621390-47833481.png&quot; alt=&quot;&quot; width=&quot;175&quot; height=&quot;250&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、TypeScript环境搭建：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 操作系统：Windows 7 64位旗舰版&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 从Node.JS官网（&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://nodejs.org/en/&lt;/span&gt;&lt;/a&gt;）下载当前稳定版本的Node.js（截至2019年04月27日，node-v10.15.3-x64.msi）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    下载完毕，点击安装，选择好安装路径，一路回车安装即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190427234404242-427511818.png&quot; alt=&quot;&quot; width=&quot;660&quot; height=&quot;391&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 当前版本的Node.js默认就带有npm工具。所以，安装完毕后，在命令行窗口中分别输入node -v 和 npm -v，查看版本信息，验证是否安装成功。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190427234850983-1500002453.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 使用npm安装TypeScript，在命令行窗口中输入 npm install -g typescript，全局安装TypeScript。安装完成后，可以输入 tsc -v，查看TypeScript编译器的版本信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190427235329953-1548817204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ 新建编写一个demo.ts文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; say(msg) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello, &quot; +&lt;span&gt; msg;
}

let str &lt;/span&gt;= &quot;TypeScript&quot;&lt;span&gt;;
console.log(say(str));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在命令行窗口中，使用tsc指令（输入： tsc demo.ts）编译为对应的JavaScript文件demo.js，打开该文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; say(msg) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello, &quot; +&lt;span&gt; msg;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = &quot;TypeScript&quot;&lt;span&gt;;
console.log(say(str));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以使用Node.js对生成的JavaScript文件进行执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190428000717246-909498565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、使用VSCode搭建开发环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 从VSCode官网（&lt;a href=&quot;https://code.visualstudio.com&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://code.visualstudio.com&lt;/span&gt;&lt;/a&gt;）下载当前稳定版本（截至2019年04月27日，VSCodeUserSetup-x64-1.33.1.exe）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 喜欢中文的朋友可以安装VSCode的中文插件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190428001241238-1702497260.png&quot; alt=&quot;&quot; width=&quot;872&quot; height=&quot;355&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 创建目录demo，使用VSCode选择该目录，点击&quot;终端&quot;-----&amp;gt;新建终端（快捷键：ctrl + shift + `），输入 tsc --init，创建出tsconfig.json文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190428001905220-91259260.png&quot; alt=&quot;&quot; width=&quot;876&quot; height=&quot;426&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ tsconfig.json是TypeScript的配置文件，我们放开sourceMap 和 outDir的设置。其中，sourceMap是为了后续调试使用，outDir指定了自动编译时生成出JavaScript文件的位置。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;100&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;compilerOptions&quot;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Basic Options &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &quot;target&quot;: &quot;es5&quot;,                          &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &quot;module&quot;: &quot;commonjs&quot;,                     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;lib&quot;: [],                             /* Specify library files to be included in the compilation. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;allowJs&quot;: true,                       /* Allow javascript files to be compiled. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;checkJs&quot;: true,                       /* Report errors in .js files. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;jsx&quot;: &quot;preserve&quot;,                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;declaration&quot;: true,                   /* Generates corresponding '.d.ts' file. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;declarationMap&quot;: true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */&lt;/span&gt;
    &lt;span&gt;&quot;sourceMap&quot;: true,&lt;/span&gt;                     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Generates corresponding '.map' file. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;outFile&quot;: &quot;./&quot;,                       /* Concatenate and emit output to single file. */&lt;/span&gt;
    &lt;span&gt;&quot;outDir&quot;: &quot;./js&quot;,&lt;/span&gt;                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Redirect output structure to the directory. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;rootDir&quot;: &quot;./&quot;,                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;composite&quot;: true,                     /* Enable project compilation */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;incremental&quot;: true,                   /* Enable incremental compilation */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;tsBuildInfoFile&quot;: &quot;./&quot;,               /* Specify file to store incremental compilation information */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;removeComments&quot;: true,                /* Do not emit comments to output. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;noEmit&quot;: true,                        /* Do not emit outputs. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;importHelpers&quot;: true,                 /* Import emit helpers from 'tslib'. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;downlevelIteration&quot;: true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;isolatedModules&quot;: true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Strict Type-Checking Options &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &quot;strict&quot;: &lt;span&gt;true&lt;/span&gt;,                           &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Enable all strict type-checking options. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;noImplicitAny&quot;: true,                 /* Raise error on expressions and declarations with an implied 'any' type. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;strictNullChecks&quot;: true,              /* Enable strict null checks. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;strictFunctionTypes&quot;: true,           /* Enable strict checking of function types. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;strictBindCallApply&quot;: true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;strictPropertyInitialization&quot;: true,  /* Enable strict checking of property initialization in classes. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;noImplicitThis&quot;: true,                /* Raise error on 'this' expressions with an implied 'any' type. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;alwaysStrict&quot;: true,                  /* Parse in strict mode and emit &quot;use strict&quot; for each source file. */&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Additional Checks &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;noUnusedLocals&quot;: true,                /* Report errors on unused locals. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;noUnusedParameters&quot;: true,            /* Report errors on unused parameters. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;noImplicitReturns&quot;: true,             /* Report error when not all code paths in function return a value. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;noFallthroughCasesInSwitch&quot;: true,    /* Report errors for fallthrough cases in switch statement. */&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Module Resolution Options &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;moduleResolution&quot;: &quot;node&quot;,            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;baseUrl&quot;: &quot;./&quot;,                       /* Base directory to resolve non-absolute module names. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;paths&quot;: {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;rootDirs&quot;: [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;typeRoots&quot;: [],                       /* List of folders to include type definitions from. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;types&quot;: [],                           /* Type declaration files to be included in compilation. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;allowSyntheticDefaultImports&quot;: true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */&lt;/span&gt;
    &quot;esModuleInterop&quot;: &lt;span&gt;true&lt;/span&gt;                   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;preserveSymlinks&quot;: true,              /* Do not resolve the real path of symlinks. */&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Source Map Options &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;sourceRoot&quot;: &quot;&quot;,                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;mapRoot&quot;: &quot;&quot;,                         /* Specify the location where debugger should locate map files instead of generated locations. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;inlineSourceMap&quot;: true,               /* Emit a single file with source maps instead of having a separate file. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;inlineSources&quot;: true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Experimental Options &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;experimentalDecorators&quot;: true,        /* Enables experimental support for ES7 decorators. */&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;emitDecoratorMetadata&quot;: true,         /* Enables experimental support for emitting type metadata for decorators. */&lt;/span&gt;
&lt;span&gt;  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑤ 编写TypeScript文件sample.ts&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义类&lt;/span&gt;
&lt;span&gt;class Person {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 成员变量&lt;/span&gt;
&lt;span&gt;    name: string;
    age: number;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造函数&lt;/span&gt;
&lt;span&gt;    constructor(name: string, age: number) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 成员方法&lt;/span&gt;
    say(): &lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
        console.log(&lt;/span&gt;'姓名：' + &lt;span&gt;this&lt;/span&gt;.name + '，年龄：' + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化&lt;/span&gt;
let person = &lt;span&gt;new&lt;/span&gt; Person('temptation', 18&lt;span&gt;);
person.say();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑥ 点击&quot;终端&quot;-----&amp;gt;运行生成任务（快捷键：ctrl + shift + B），选择tsc:监视 - tsconfig.json，一会儿就会生成js目录以及对应ts文件的js文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190428003407131-1681658630.png&quot; alt=&quot;&quot; width=&quot;877&quot; height=&quot;475&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190428003714652-508437972.png&quot; alt=&quot;&quot; width=&quot;880&quot; height=&quot;739&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;生成的JavaScript文件内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&quot;use strict&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义类&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; Person = &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* @class &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造函数&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Person(name, age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 成员方法&lt;/span&gt;
    Person.prototype.say = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        console.log(&lt;/span&gt;'姓名：' + &lt;span&gt;this&lt;/span&gt;.name + '，年龄：' + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age);
    };
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Person;
}());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; person = &lt;span&gt;new&lt;/span&gt; Person('temptation', 18&lt;span&gt;);
person.say();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;# sourceMappingURL=sample.js.map&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑦ 调试TypeScript文件。在需要中断的位置，使用F9设置断点。再点击F5启动调试即可。F10单步调试。F11单步走入。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/438252/201904/438252-20190428004113286-414527925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑧ HTML文件不能直接使用TypeScript，需要使用TypeScript自动编译生成的JavaScript文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以在VSCode中安装open in browser这个插件，运行时，在HTML文件中右键找到Open In Default/Other Browser，打开相应的浏览器。在浏览器的控制台看到执行结果&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;TypeScript使用示例&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/sample.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 27 Apr 2019 16:55:00 +0000</pubDate>
<dc:creator>{name:&amp;quot;代码屠夫&amp;quot;}</dc:creator>
<og:description>概述：本文描述TypeScript环境搭建，以及基于VSCode的自动编译设置和调试设置。网络上很多相应文章的方式过时了或者无法试验成功。 TypeScript简介：由微软开发的开源免费的编程语言，是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iflytek/p/10781313.html</dc:identifier>
</item>
<item>
<title>TypeScript 实现任务队列 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/typescript_task_runner.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/typescript_task_runner.html</guid>
<description>&lt;p&gt;业务中经常会有一些批量操作的任务，比如使用 JavaScript 预加载一组图片，批量上传一些资源。如果这些任务一次性启动，势必会消耗很多资源和带宽。理想的做法应该对这些任务进行限制，比如一次只跑几个，当其中一些任务完成后，再添加新的任务到队列。&lt;/p&gt;
&lt;p&gt;总的来说，我们需要这样一个服务，它提供一个添加任务的方法，内部将添加的方法维护在一个数组。然后根据设置的阈值，即同时可跑的任务数，来执行这些任务。&lt;/p&gt;
&lt;p&gt;同时为了打日志方便，注册的任务可指定一个名称，所以一个任务的类型看起来应该像这样：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-en&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  name&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;;
  fn&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-en&quot;&gt;T&lt;/span&gt;&amp;gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;code&gt;name&lt;/code&gt; 方便调试，&lt;code&gt;fn&lt;/code&gt; 便是需要执行的任务，它应该是一个比较耗时的异步任务，所以调用后返回 Promise。&lt;/p&gt;
&lt;p&gt;运行任务的服务：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;TaskRunner&lt;/span&gt; {
  &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; queue&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt;&amp;gt;[] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [];
  &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; activeTaskNum&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;

  &lt;span class=&quot;pl-k&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;) {
      &lt;span class=&quot;pl-k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;limit must be interger greater then 1&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    }
  }

  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; addTask&amp;lt;&lt;span class=&quot;pl-en&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-en&quot;&gt;T&lt;/span&gt;&amp;gt;) {
    &lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;fn&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;);
    &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;runTask&lt;/span&gt;();
  }

  &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; execute&amp;lt;&lt;span class=&quot;pl-en&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-en&quot;&gt;T&lt;/span&gt;&amp;gt;) {
    &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;running ${&lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt;}&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;
      .&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;()
      .&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;ressult&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;task ${&lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt;} finished&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ressult&lt;/span&gt;;
      })
      .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;${&lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt;} failed&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
        &lt;span class=&quot;pl-k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;;
      })
      .&lt;span class=&quot;pl-c1&quot;&gt;finally&lt;/span&gt;(() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;activeTaskNum&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;--&lt;/span&gt;;
        &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;runTask&lt;/span&gt;();
      });
  }

  &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; runTask() {
    &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;activeTaskNum&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;) {
      &lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; task &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;shift&lt;/span&gt;();
      &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;activeTaskNum&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;++&lt;/span&gt;;
      &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;);
    }
  }

  &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; log(&lt;span class=&quot;pl-v&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;debug&lt;/span&gt;) {
      &lt;span class=&quot;pl-c1&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;[TaskRunner] ${&lt;span class=&quot;pl-smi&quot;&gt;msg&lt;/span&gt;}&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为任务可以动态添加，所以在添加完任务的方法 &lt;code&gt;addTask()&lt;/code&gt; 里就启动任务队列的执行 &lt;code&gt;runTask()&lt;/code&gt;，无须外部显式触发。&lt;/p&gt;
&lt;p&gt;测试上面的代码：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;20&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;pl-smi&quot;&gt;TaskRunner&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./taskRunner&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; runner &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;TaskRunner&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; taskGenerator(&lt;span class=&quot;pl-v&quot;&gt;taskName&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;number&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; {
    name: &lt;span class=&quot;pl-smi&quot;&gt;taskName&lt;/span&gt;,
    &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;: () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;&amp;gt;((&lt;span class=&quot;pl-v&quot;&gt;resolve&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;_reject&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;pl-c1&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
          &lt;span class=&quot;pl-en&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;result for task ${&lt;span class=&quot;pl-smi&quot;&gt;taskName&lt;/span&gt;}&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
        }, &lt;span class=&quot;pl-smi&quot;&gt;time&lt;/span&gt;);
      })
  };
}

&lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; errorTask &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  name: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;errroTask&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;: () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;&amp;gt;((&lt;span class=&quot;pl-v&quot;&gt;_resolve&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;reject&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-c1&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;pl-en&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;errorTask failed&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      }, &lt;span class=&quot;pl-c1&quot;&gt;3000&lt;/span&gt;);
    })
};

[&lt;span class=&quot;pl-smi&quot;&gt;errorTask&lt;/span&gt;]
  .&lt;span class=&quot;pl-c1&quot;&gt;concat&lt;/span&gt;(
    [&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;()].&lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;((&lt;span class=&quot;pl-v&quot;&gt;_value&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;index&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;pl-en&quot;&gt;taskGenerator&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;index&lt;/span&gt;), &lt;span class=&quot;pl-c1&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;)
    )
  )
  .&lt;span class=&quot;pl-c1&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;runner&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;addTask&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;task&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里生成了 5 个任务，每个任务的耗时是随机的 1s ~ 10s。同时添加一个了个直接 &lt;code&gt;reject&lt;/code&gt; 的任务来模拟任务失败时，不会影响其他任务的执行。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56847967-4ab33900-6915-11e9-8e05-806d85a1f473.gif&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56847967-4ab33900-6915-11e9-8e05-806d85a1f473.gif&quot; alt=&quot;任务运行效果&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;完整的代码移步 GitHub 仓库 &lt;a href=&quot;https://github.com/wayou/task-runner&quot;&gt;wayou/task-runner&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Sat, 27 Apr 2019 16:34:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>业务中经常会有一些批量操作的任务，比如使用 JavaScript 预加载一组图片，批量上传一些资源。如果这些任务一次性启动，势必会消耗很多资源和带宽。理想的做法应该对这些任务进行限制，比如一次只跑几个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/typescript_task_runner.html</dc:identifier>
</item>
<item>
<title>2. CMake 系列 - 编译多文件项目 - standardzero</title>
<link>http://www.cnblogs.com/standardzero/p/10781223.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/standardzero/p/10781223.html</guid>
<description>&lt;h2 id=&quot;项目目录结构&quot;&gt;1.1 项目目录结构&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;test/
├── build
├── CMakeLists.txt
└── src
    ├── include
    │   └── sub
    │       └── sub.h
    ├── init
    │   └── main.c
    └── sub
        └── sub.c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;博主一般写项目都是以这种风格进行划分目录，这个风格也是参考内核风格。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;: 存放 cmake 生成的相关文件和make 编译生成的相关中间文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt;: 使用cmake 语法编写这个文件，cmake 负责将其转换为相对应makefile&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src&lt;/code&gt;: 存放源代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include&lt;/code&gt;: 存放每个模块头文件，每个模块都有自己的目录；&lt;/p&gt;
&lt;h2 id=&quot;相关代码&quot;&gt;1.2 相关代码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;sub.h&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#ifndef _SUB_H
#define _SUB_H

int sub(const int a, const int b);

#endif&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;sub.c&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &quot;sub/sub.h&quot;

int sub(const int a, const int b)
{
    return a - b;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;main.c&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &quot;sub/sub.h&quot;

#include &amp;lt;stdio.h&amp;gt;


int main(int argc, char **argv)
{
    int num = sub(10, 8);
    printf(&quot;10 - 8 = %d\n&quot;, num);

    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cmake_minimum_required(VERSION 2.6)

project(project-1)

message(&quot;Project Name: &quot; ${PROJECT_NAME})

#设置编译参数
set(CMAKE_C_FLAGS &quot;-g -Wall&quot;)

#设置执行文件输出目录
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

# 添加头文件路径
include_directories(${PROJECT_SOURCE_DIR}/src/include)

# 递归获取目录下所有的C文件
file(GLOB_RECURSE c_files ${PROJECT_SOURCE_DIR}/src/*.c)

# 生成执行文件
add_executable(${PROJECT_NAME} ${c_files})
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;编译&quot;&gt;1.3 编译&lt;/h2&gt;
&lt;p&gt;进入test目录&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cd test
$ cd build
$ cmake ..
$ make
$ cd ..
$ tree bin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译后生成执行文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bin
└── project-1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行秩序文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cd bin
$ ./ project-1
10 - 8 = 2&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;项目目录结构-1&quot;&gt;2.1 项目目录结构&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;test1
├── build
├── CMakeLists.txt
└── src
    ├── include
    │   └── sub
    │       └── sub.h
    ├── init
    │   └── main.c
    ├── lib
    │   └── add
    │       ├── include
    │       │   └── add.h
    │       └── lib
    │           └── libadd.a
    └── sub
        └── sub.c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;: 存放 cmake 生成的相关文件和make 编译生成的相关中间文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt;: 使用cmake 语法编写这个文件，cmake 负责将其转换为相对应makefile&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src&lt;/code&gt;: 存放源代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include&lt;/code&gt;: 存放每个模块头文件，每个模块都有自己的目录；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lib&lt;/code&gt;: 存放第三库的头文件和lib文件，若是使用多个第三方库，则需分为不同的目录存放。&lt;/p&gt;
&lt;h2 id=&quot;相关代码-1&quot;&gt;2.2 相关代码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;sub.h&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#ifndef _SUB_H
#define _SUB_H

int sub(const int a, const int b);

#endif&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;sub.c&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &quot;sub/sub.h&quot;

int sub(const int a, const int b)
{
    return a - b;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add.h&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#ifndef _ADD_H
#define _ADD_H

int add(const int a, const int b);

#endif&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;main.c&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &quot;sub/sub.h&quot;
#include &quot;add.h&quot;

#include &amp;lt;stdio.h&amp;gt;


int main(int argc, char **argv)
{
    int a = 10;
    int b = 8;

    printf(&quot;%d - %d = %d\n&quot;, a, b, sub(a, b));
    printf(&quot;%d + %d = %d\n&quot;, a, b, add(a, b));

    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cmake_minimum_required(VERSION 2.6)

project(project-2)

message(&quot;Project Name: &quot; ${PROJECT_NAME})

#设置编译参数
set(CMAKE_C_FLAGS &quot;-g -Wall&quot;)

#设置执行文件输出目录
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

# 添加头文件路径
include_directories(${PROJECT_SOURCE_DIR}/src/include)

# 添加第三方库(add)头文件路径
include_directories(${PROJECT_SOURCE_DIR}/src/lib/add/include)

#添加库文件搜索路径
link_directories(${PROJECT_SOURCE_DIR}/src/lib/add/lib)

# 递归获取目录下所有的C文件
file(GLOB_RECURSE c_files ${PROJECT_SOURCE_DIR}/src/*.c)

# 生成执行文件
add_executable(${PROJECT_NAME} ${c_files})

# 执行文件链接外部库文件
target_link_libraries(${PROJECT_NAME} add)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;编译-1&quot;&gt;2.3 编译&lt;/h2&gt;
&lt;p&gt;进入test1目录&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cd test1
$ cd build
$ cmake ..
$ make
$ cd ..
$ tree bin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译后生成执行文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bin
└── project-2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行秩序文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cd bin
$ ./ project-2
10 - 8 = 2
10 + 8 = 18
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 27 Apr 2019 16:15:00 +0000</pubDate>
<dc:creator>standardzero</dc:creator>
<og:description>[TOC] 1. 编译不使用第三方库的项目 1.1 项目目录结构 博主一般写项目都是以这种风格进行划分目录，这个风格也是参考内核风格。 : 存放 cmake 生成的相关文件和make 编译生成的相关中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/standardzero/p/10781223.html</dc:identifier>
</item>
<item>
<title>c#位运算基本概念与计算过程 - 张林-布莱恩特</title>
<link>http://www.cnblogs.com/zhangmumu/p/10781201.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangmumu/p/10781201.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;一些非常基础的东西，在实际工作中没有用到、很少用到。一旦遇到，又不知所云。最近遇到一个问题，把一个int16（short） 、两个bool变量整合成一个int32（int），当听到这个要求时，我第一反应是不是需求弄错了，后来才发现是自己才疏学浅，这里就需要位运算相关的概念。&lt;br/&gt;这里补充一下这几个基本概念&lt;br/&gt;位、字节、字符（英文字母）、汉字、KB、MB、GB、TB的关系&lt;br/&gt;1.位：bit，也叫比特位，是计算机表示数据最小的单位，用二进制0和1来存储&lt;br/&gt;2.字节:byte，1byte（1B）=8b，一个字节=8位&lt;br/&gt;3.字符:char，1char=2byte=16b，1个字符=2个字节=16位&lt;br/&gt;4.KB，1KB=1024byte（1024B）&lt;br/&gt;5.MB，1MB=1014KB&lt;br/&gt;6.GB，1GB=1024MB&lt;br/&gt;7TB,1TB=1024GB&lt;br/&gt;一个汉字占两个字节，也就是32位，一篇1000字的文章，大概就是32&lt;em&gt;1000 的二进制0或1 。&lt;br/&gt;一个10M的短视频，也就是10M=1024KB&lt;/em&gt;10=1024字节&lt;em&gt;10&lt;/em&gt;10=1024b&lt;em&gt;10&lt;/em&gt;10*8&lt;br/&gt;大概就是919200个二进制的0和1了&lt;br/&gt;short 是16位，int是32位，long是64位&lt;/p&gt;
&lt;h3 id=&quot;什么是位运算&quot;&gt;1.什么是位运算&lt;/h3&gt;
&lt;p&gt;在掌握位运算之前，应该清楚什么是位运算？什么样的数据类型可以进行位运算？云运算的结果是什么？&lt;br/&gt;1.位运算的对象是int 、char 类型，简而言之就是对二进制的1101（13）进行运算&lt;br/&gt;2.位运算的结果是整型&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;th&gt;运算对象类型&lt;/th&gt;
&lt;th&gt;运算结果类型&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;逻辑非运算&lt;/td&gt;
&lt;td rowspan=&quot;5&quot;&gt;整型、char&lt;/td&gt;
&lt;td rowspan=&quot;5&quot;&gt;整型&lt;/td&gt;
&lt;td&gt;~a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;逻辑与运算&lt;/td&gt;
&lt;td&gt;a&amp;amp;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;逻辑或运算&lt;/td&gt;
&lt;td&gt;a|b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;位左移运算&lt;/td&gt;
&lt;td&gt;a&amp;lt;&amp;lt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;位右移运算&lt;/td&gt;
&lt;td&gt;a&amp;gt;&amp;gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3 id=&quot;位逻辑与运算&quot;&gt;2.位逻辑与运算&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt;与运算是将两个运算对象按位于进行与运算。&lt;br/&gt;规则是：&lt;br/&gt;1&amp;amp;1=1&lt;br/&gt;0&amp;amp;1=0&lt;br/&gt;0&amp;amp;0=0&lt;br/&gt;如图：&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190427230449639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlYmkwMDc=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;15的二进制是0000 1111&lt;br/&gt;20的二进制是0001 0100&lt;br/&gt;15&amp;amp;20的结果就是0000 0100 即结果是4&lt;/p&gt;
&lt;h3 id=&quot;位逻辑或运算&quot;&gt;3.位逻辑或运算&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019042723372668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlYmkwMDc=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;strong&gt;|&lt;/strong&gt;位逻辑或运算是将两个运算对象按位进行或运算，运算的规则是&lt;br/&gt;1|1=1&lt;br/&gt;1|0=1&lt;br/&gt;0|0=0&lt;br/&gt;如15|20的结果计算结果就是31 即二进制0001 1111&lt;br/&gt;0000 1111（15的二进制） | 0001 0100（20的二进制）= 0001 1111结果是31&lt;/p&gt;
&lt;h3 id=&quot;位逻辑异或运算&quot;&gt;4.位逻辑异或运算&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190427233814275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlYmkwMDc=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;strong&gt;^&lt;/strong&gt; 位逻辑异或运算 是将两个运算对象按位进行异或运算，规则是：&lt;br/&gt;1异或1等于0&lt;br/&gt;1异或0等于1&lt;br/&gt;0异或0等于0&lt;br/&gt;即：相同得0，相异得1。&lt;br/&gt;0000 1111 ^ 0001 0100= 0001 1011结果是27&lt;/p&gt;
&lt;h3 id=&quot;位逻辑左移运算&quot;&gt;5.位逻辑左移运算&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190427233904681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlYmkwMDc=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;位逻辑左移运算是将按位向左边移动若干位，左移后空出的部分为0&lt;br/&gt;比如15的二进制0000 1111 左移8位就是1111 0000 0000（15&amp;lt;&amp;lt;8）结果是3840&lt;br/&gt;左移3位（15&amp;lt;&amp;lt;3）就是0111 1000结果是120&lt;br/&gt;左移就是相当于乘，左移1位就是相当于乘以2的1次方，左移3位就是相当于乘以2的3次方，左移8位就是相当于乘以2的8次方&lt;br/&gt;a&amp;lt;&amp;lt;1 =a乘以2的1次方&lt;br/&gt;a&amp;lt;&amp;lt;2 =a乘以2的2次方&lt;br/&gt;a&amp;lt;&amp;lt;3 =a乘以2的3次方&lt;/p&gt;
&lt;h3 id=&quot;位逻辑右移运算&quot;&gt;6.位逻辑右移运算&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019042723424548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlYmkwMDc=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;位逻辑右移运算是将按位向右边移动若干位，右移后空出的部分为0&lt;br/&gt;比如0000 1111（15）左移3位（15&amp;lt;&amp;lt;3）就是0000 0001（1）&lt;br/&gt;右移相当于整除，右移1位相当于除以2的1次方，右移2相当于除以2的2次方。&lt;br/&gt;a&amp;gt;&amp;gt;1 = a整除2的1次方&lt;br/&gt;a&amp;gt;&amp;gt;2 = a整除2的2次方&lt;br/&gt;a&amp;gt;&amp;gt;3 = a整除2的3次方&lt;/p&gt;
&lt;h3 id=&quot;位运算的作用&quot;&gt;7.位运算的作用&lt;/h3&gt;
&lt;p&gt;如将一个月的签到记录保存到1个int类型中、权限设置、将4个short合并成一个long类型，16个bool类型合并成1个short。&lt;br/&gt;如这个问题所示&lt;br/&gt;需求：C# 用两个short，一个int32拼成一个long型&lt;br/&gt;要求：现在有两个short和一个int，需要拼成一个long型，高16位用short，中间32位用int，最低16位用另外一个short&lt;br/&gt;&lt;a href=&quot;https://bbs.csdn.net/topics/392202825?page=1&quot; class=&quot;uri&quot;&gt;https://bbs.csdn.net/topics/392202825?page=1&lt;/a&gt;&lt;br/&gt;做法就是：&lt;br/&gt;((long)shortA &amp;lt;&amp;lt; 48 )+ ((long)intA &amp;lt;&amp;lt; 16)+ shortB=longResult&lt;br/&gt;讲解：&lt;br/&gt;高16位的shortA先左移48，那么longResult 64位的最左边16位（高16位）就是shortA&lt;br/&gt;中间32位intA 就是先将intA左移16位，那么这个longResult的中间32位就是intA&lt;br/&gt;低16位就是最后剩下的16位用shortB。&lt;br/&gt;那么疑问来了可以通过longResult返推出shortA，shortB，intA。当然是不能这是直接相加。&lt;br/&gt;能反推出的只能是&lt;br/&gt;((long)shortA &amp;lt;&amp;lt; 48 ) 16位二进制0或1的字符串&lt;br/&gt;((long)intA &amp;lt;&amp;lt; 16) 32位二进制0或1的字符串&lt;br/&gt;shortB 16位二进制0或1的字符串&lt;br/&gt;将这三个字符串拼接成64位二进制字符串，再将这个64位二进制字符串转成一个long。&lt;/p&gt;
</description>
<pubDate>Sat, 27 Apr 2019 16:07:00 +0000</pubDate>
<dc:creator>张林-布莱恩特</dc:creator>
<og:description>些非常基础的东西，在实际工作中没有用到、很少用到。一旦遇到，又不知所云。最近遇到一个问题，把一个int16（short） 、两个bool变量整合成一个int32（int），当听到这个要求时，我第一反应</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangmumu/p/10781201.html</dc:identifier>
</item>
<item>
<title>Java中ArrayList学习笔记 - 祁保义</title>
<link>http://www.cnblogs.com/baoyi/p/java_arrayList.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baoyi/p/java_arrayList.html</guid>
<description>&lt;p&gt;1. 先看两段代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/384937/201904/384937-20190427222414833-926416300.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这段代码在执行的时候会报&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/384937/201904/384937-20190427222543381-1745411196.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是这样写就好着呢：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/384937/201904/384937-20190427222836602-1233553916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结，研究报错的代码 ，在for循环的时候调用next()方法，next方法中调用了checkForComodification这个方法，这个方法里面判断modCount和expectedModCount不相等的时候就抛出ConcurrentModificationException这个异常。&lt;/p&gt;
&lt;p&gt;原因：当for循环执行的时候首先调用了&lt;img src=&quot;https://img2018.cnblogs.com/blog/384937/201904/384937-20190427225324960-1412814074.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个方法，这个方法初始化了expectedModCount=modCount，modCount的值是在add方法里面复制的，如当前程序为8，初始化给expectedModCount的值。当调用remove 方法的时候，将modCount++; 导致下一次循环的时候两个值不相同，就会报这个错误。&lt;/p&gt;
&lt;p&gt;这里还有个知识点：&lt;/p&gt;
&lt;p&gt;modCount 这个变量被transient关键字修饰，意思是不可被序列化。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;https://www.cnblogs.com/chenpi/p/6185773.html&quot;&gt;https://www.cnblogs.com/chenpi/p/6185773.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. 解决办法：&lt;/p&gt;
&lt;pre&gt;
for (int i = students.size() - 1; i &amp;gt;= 0; i--) {&lt;br/&gt;if (students.get(i).equals(&quot;李四&quot;)) {&lt;br/&gt;students.remove(i);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;注意倒叙删除。正序删除的时候由于size一直变小，可能后面的删除不了。
&lt;/pre&gt;
&lt;pre&gt;
Iterator&amp;lt;String&amp;gt; iterator = students.iterator();&lt;br/&gt;while (iterator.hasNext()) {&lt;br/&gt;if (iterator.next().equals(&quot;李四&quot;))&lt;br/&gt;iterator.remove();&lt;br/&gt;}&lt;br/&gt;用iterator的remove方法可以删除，因为remove方法中将expectedModCount=modCount。
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/384937/201904/384937-20190427231933835-2099086856.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2. 多线程问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/384937/201904/384937-20190427233755622-1103152508.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这段代码在执行的时候有时候会报错，就是在方法内部调用 next方法的时候expectedModCount和modCount的值不一致引起的。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;用CopyOnWriteArrayList方法，注意这个方法没有实现iterator.remove()。CopyOnWriteArrayList 里面在操作数据都用Lock进行了处理，但是有个方法getArray()没有lock。&lt;/p&gt;
&lt;p&gt;3.  ConcurrentHaspMap它也是线程安全的，它里面是通过synchronized实现的。&lt;/p&gt;

</description>
<pubDate>Sat, 27 Apr 2019 15:58:00 +0000</pubDate>
<dc:creator>祁保义</dc:creator>
<og:description>1. 先看两段代码 这段代码在执行的时候会报 但是这样写就好着呢： 总结，研究报错的代码 ，在for循环的时候调用next()方法，next方法中调用了checkForComodification这个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baoyi/p/java_arrayList.html</dc:identifier>
</item>
<item>
<title>JavaWeb学习之三层架构实例（二） - 萧安</title>
<link>http://www.cnblogs.com/HenuAJY/p/10781157.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/HenuAJY/p/10781157.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;这个实例是上一个实例&lt;a&gt;JavaWeb学习 三层架构实例（一）&lt;/a&gt;的加强版，实现的是在前端对数据库中student表的 &lt;em&gt;增&lt;/em&gt;、&lt;em&gt;删&lt;/em&gt;、&lt;em&gt;改&lt;/em&gt;、&lt;em&gt;查&lt;/em&gt; 操作。关于三层组成云云，这里就不再叙述。&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;实例&lt;/h2&gt;
&lt;h4 id=&quot;效果图&quot;&gt;效果图&lt;/h4&gt;
&lt;p&gt;先来看一下主页，将student表中的数据列出来，这里隐藏了地址信息（saddress）。&lt;br/&gt;&lt;img src=&quot;https://coding-net-production-file-ci.codehub.cn/007eb7f0-68fd-11e9-9be2-bdcf61b10384.jpg?sign=3B1BXlK2ceSFdlxLBDuqh5WhEz5hPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTU2NTkzMjM1JnQ9MTU1NjM3NzIzNSZyPTkzNjAyNzEzJmY9LzAwN2ViN2YwLTY4ZmQtMTFlOS05YmUyLWJkY2Y2MWIxMDM4NC5qcGcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==&quot; alt=&quot;Avartar&quot;/&gt;&lt;br/&gt;这是添加学生信息的页面&lt;br/&gt;&lt;img src=&quot;https://coding-net-production-file-ci.codehub.cn/ca351ff0-68fb-11e9-9be2-bdcf61b10384.jpg?sign=Fumb+2glrafr3t4W5VbTMfWfaI5hPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTU2NTkzMDg1JnQ9MTU1NjM3NzA4NSZyPTIzMjY3ODU1JmY9L2NhMzUxZmYwLTY4ZmItMTFlOS05YmUyLWJkY2Y2MWIxMDM4NC5qcGcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==&quot; alt=&quot;Avartar&quot;/&gt;&lt;br/&gt;这是修改学生信息的页面（学号不可修改）&lt;br/&gt;&lt;img src=&quot;https://coding-net-production-file-ci.codehub.cn/008d5df0-68fd-11e9-9be2-bdcf61b10384.jpg?sign=hfZjsLzamh4YoDxcEBbFu8BYYblhPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTU2NTkzMjE1JnQ9MTU1NjM3NzIxNSZyPTc2ODkwODE4JmY9LzAwOGQ1ZGYwLTY4ZmQtMTFlOS05YmUyLWJkY2Y2MWIxMDM4NC5qcGcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==&quot; alt=&quot;Avartar&quot;/&gt;&lt;br/&gt;由于删除学生信息不需要跳转，所以没有删除学生信息的页面。这几个功能的操作结果都会在主页的左上角显示。&lt;/p&gt;
&lt;h4 id=&quot;项目结构&quot;&gt;项目结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://coding-net-production-file-ci.codehub.cn/00860af0-68fd-11e9-9be2-bdcf61b10384.jpg?sign=Su1Vkh09deucay0dUYoTxxxMaYNhPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTU2NTkzMTk1JnQ9MTU1NjM3NzE5NSZyPTQ4NTAwOTI3JmY9LzAwODYwYWYwLTY4ZmQtMTFlOS05YmUyLWJkY2Y2MWIxMDM4NC5qcGcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==&quot; alt=&quot;Avartar&quot;/&gt;&lt;br/&gt;如图,自上到下,&lt;br/&gt;&lt;strong&gt;StudentDao.java&lt;/strong&gt; 是直接对数据库进行增删改查操作的,属于原子性的操作,没有逻辑性,只是简单的增删改查.比如,它并不会在删除某条信息之前先判断这条信息是否存在.&lt;br/&gt;&lt;strong&gt;Student.java&lt;/strong&gt; 是&quot;学生&quot;类,此类拥有诸如学号、姓名、年龄、地址等信息以及对应的getter和setter方法。&lt;br/&gt;&lt;strong&gt;StudentService.java&lt;/strong&gt; 这个类，名子含义有点模糊，属于service层，同样是对数据库进行增删改查操作，与上面的Dao类不同的是，service层的操作具有逻辑性，就拿添加学生信息来说，service会先调用Dao类的&lt;strong&gt;&lt;em&gt;查询&lt;/em&gt;&lt;/strong&gt;方法，先判断这个学生是否存在，根据结果进行信息插入操作。&lt;br/&gt;&lt;strong&gt;Servlet包&lt;/strong&gt; 易发现,这个包中存放的都是Servlet类,属于视图层的后端,每一个类每一个类对应一个视图层前端的功能(增删改查);&lt;/p&gt;
&lt;h4 id=&quot;代码&quot;&gt;代码&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Student.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.entity;
    public class Student {
        private int stuNo;
        private String stuName;
        private int stuAge;
        private String stuAddress;
        public Student(int stuNo,String stuName,int stuAge,String stuAddress){
            this.stuNo = stuNo;
            this.stuName = stuName;
            this.stuAge = stuAge;
            this.stuAddress = stuAddress;
        }
        public Student(String stuName,int stuAge,String stuAddress){
            this.stuNo = stuNo;
            this.stuName = stuName;
            this.stuAge = stuAge;
            this.stuAddress = stuAddress;
        }
    
        public int getStuNo() {
            return stuNo;
        }
    
        public void setStuNo(int stuNo) {
            this.stuNo = stuNo;
        }
    
        public String getStuName() {
            return stuName;
        }
    
        public void setStuName(String stuName) {
            this.stuName = stuName;
        }
    
        public int getStuAge() {
            return stuAge;
        }
    
        public void setStuAge(int stuAge) {
            this.stuAge = stuAge;
        }
    
        public String getStuAddress() {
            return stuAddress;
        }
    
        public void setStuAddress(String stuAddress) {
            this.stuAddress = stuAddress;
        }
    
        @Override
        public String toString() {
            return getStuNo()+&quot;--&quot;+getStuName()+&quot;--&quot;+getStuAge()+&quot;--&quot;+getStuAddress();
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;StudentDao.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.dao;
    
    import com.ajy.entity.Student;
    
    import java.sql.*;
    import java.util.ArrayList;
    import java.util.List;
    
    public class StudentDao {
        private final String URL=&quot;jdbc:mysql://localhost:3306/anjiyubase?&amp;amp;serverTimezone=UTC&amp;amp;useSSL=false&amp;amp;allowPublicKeyRetrieval=true&quot;;
        private final String DRIVER=&quot;com.mysql.cj.jdbc.Driver&quot;;
        private final String NAME=&quot;root&quot;;
        private final String PWD=&quot;121181&quot;;
    
        //增加学生信息
        public boolean addStudent(Student stu){
            Connection con = null;
            PreparedStatement pstmt = null;
            int count = 0;
            try {
                Class.forName(DRIVER);
                con = DriverManager.getConnection(URL,NAME,PWD);
                String sql = &quot;insert into student values(?,?,?,?)&quot;;
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1,stu.getStuNo());
                pstmt.setString(2,stu.getStuName());
                pstmt.setInt(3,stu.getStuAge());
                pstmt.setString(4,stu.getStuAddress());
                count = pstmt.executeUpdate();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                return false;
            } catch (SQLException e) {
                e.printStackTrace();
                return false;
            }finally {
                try {
                    if (pstmt!=null)pstmt.close();
                    if (con!=null)con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    return false;
                }
            }
            if(count==0){
                return false;
            }else{
                return true;
            }
        }
    
        //查询学生是否存在
        public boolean isExits(int stuNo){
            return queryStudent(stuNo)==null?false:true;
        }
    
        //查询学生
        public Student queryStudent(int stuNo){
            Connection con = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;
            Student stu = null;
            int count = 0;
            try {
                Class.forName(DRIVER);
                con = DriverManager.getConnection(URL,NAME,PWD);
                String sql = &quot;select * from student where sno=?&quot;;
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1,stuNo);
                rs = pstmt.executeQuery();
                if (rs.next()){
                    stu = new Student(rs.getInt(&quot;sno&quot;),
                            rs.getString(&quot;sname&quot;),
                            rs.getInt(&quot;sage&quot;),
                            rs.getString(&quot;saddress&quot;));
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                return null;
            } catch (SQLException e) {
                e.printStackTrace();
                return null;
            }finally {
                try {
                    if (rs!=null)rs.close();
                    if (pstmt!=null)pstmt.close();
                    if (con!=null)con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    return null;
                }
            }
            return stu;
        }
    
        //查询全部学生
        public List&amp;lt;Student&amp;gt; queryAll(){
            Connection con = null;
            Statement stmt = null;
            ResultSet rs = null;
            List&amp;lt;Student&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
            try {
                Class.forName(DRIVER);
                con = DriverManager.getConnection(URL,NAME,PWD);
                String sql = &quot;select *from student&quot;;
                stmt = con.createStatement();
                rs = stmt.executeQuery(sql);
                while (rs.next()){
                    int sno = rs.getInt(&quot;sno&quot;);
                    String sname = rs.getString(&quot;sname&quot;);
                    int sage = rs.getInt(&quot;sage&quot;);
                    String saddress = rs.getString(&quot;saddress&quot;);
                    list.add(new Student(sno,sname,sage,saddress));
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                return null;
            } catch (SQLException e) {
                e.printStackTrace();
                return null;
            }finally {
                try {
                    if (rs!=null)rs.close();
                    if (stmt!=null)stmt.close();
                    if (con!=null)con.close();
                    return list;
                } catch (SQLException e) {
                    e.printStackTrace();
                    return null;
                }
            }
        }
    
        //根据学号删除学生
        public boolean deleteStudentBySno(int Sno){
            Connection con = null;
            PreparedStatement pstmt = null;
            int count = 0;
            try {
                Class.forName(DRIVER);
                con = DriverManager.getConnection(URL,NAME,PWD);
                String sql = &quot;delete from student where sno=?&quot;;
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1,Sno);
                count = pstmt.executeUpdate();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                return false;
            } catch (SQLException e) {
                e.printStackTrace();
                return false;
            }finally {
                try {
                    if (pstmt!=null)pstmt.close();
                    if (con!=null)con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    return false;
                }
            }
            if(count==0){
                return false;
            }else{
                return true;
            }
        }
    
        //根据学号修改学号对应的学生信息
        public boolean updateStudentBySno(int sno,Student stu){
            Connection con = null;
            PreparedStatement pstmt = null;
            int count = 0;
            try {
                Class.forName(DRIVER);
                con = DriverManager.getConnection(URL,NAME,PWD);
                String sql = &quot;update student set sname=?,sage=?,saddress=? where sno=?&quot;;
                pstmt = con.prepareStatement(sql);
                //要修改的人
                pstmt.setInt(4,sno);
                //修改该后的内容
                pstmt.setString(1,stu.getStuName());
                pstmt.setInt(2,stu.getStuAge());
                pstmt.setString(3,stu.getStuAddress());
                count = pstmt.executeUpdate();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                return false;
            } catch (SQLException e) {
                e.printStackTrace();
                return false;
            }finally {
                try {
                    if (pstmt!=null)pstmt.close();
                    if (con!=null)con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    return false;
                }
            }
            if(count==0){
                return false;
            }else{
                return true;
            }
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;StudentService&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.service;
    
    import com.ajy.dao.StudentDao;
    import com.ajy.entity.Student;
    
    import java.util.List;
    
    public class StudentService {
        StudentDao studentDao = new StudentDao();
    
        //增加学生
        public boolean addStudent(Student stu){
            if (!studentDao.isExits(stu.getStuNo())){
                return studentDao.addStudent(stu);
            }else{
                return false;
            }
        }
    
        //根据学号删除学生
        public boolean deleteStudentBySno(int sno){
            //先判断学生是否存在
            if(!studentDao.isExits(sno)){
                return false;
            }else{
                return studentDao.deleteStudentBySno(sno);
            }
        }
    
        //根据学号查询学生
        public Student queryStudentBySno(int sno){
            return studentDao.queryStudent(sno);
        }
    
    
        //根据学号，更新对应的学生
        public boolean updateStudentBySno(int sno,Student stu){
            //先判断此学号对应的学生是否存在
            if(!studentDao.isExits(sno)){
                return false;
            }else{
                return studentDao.updateStudentBySno(sno,stu);
            }
        }
    
    
        //查询全部学生
        public List&amp;lt;Student&amp;gt; queryStudentAll(){
            return studentDao.queryAll();
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;QueryAllStudents.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.servlet;
    
    import com.ajy.entity.Student;
    import com.ajy.service.StudentService;
    
    import javax.servlet.ServletException;
    import javax.servlet.annotation.WebServlet;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.util.List;
    
    @WebServlet(name = &quot;QueryAllStudents&quot;,value = &quot;/QueryAllStudents&quot;)
    public class QueryAllStudents extends HttpServlet {
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            doGet(request,response);
        }
    
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            request.setCharacterEncoding(&quot;utf-8&quot;);
            StudentService studentService = new StudentService();
            List&amp;lt;Student&amp;gt; studentList = studentService.queryStudentAll();
    
            request.setAttribute(&quot;students&quot;,studentList);
    
            request.getRequestDispatcher(&quot;studentlist.jsp&quot;).forward(request,response);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;AddStudentServlet.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.servlet;
    
    import com.ajy.entity.Student;
    import com.ajy.service.StudentService;
    
    import javax.servlet.ServletException;
    import javax.servlet.annotation.WebServlet;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    
    @WebServlet(name = &quot;AddStudentServlet&quot;,value = &quot;/AddStudentServlet&quot;)
    public class AddStudentServlet extends HttpServlet {
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            doGet(request,response);
        }
    
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    
            request.setCharacterEncoding(&quot;utf-8&quot;);
            int stuNo = Integer.parseInt(request.getParameter(&quot;stuNo&quot;));
            String stuName = request.getParameter(&quot;stuName&quot;);
            int stuAge = Integer.parseInt(request.getParameter(&quot;stuAge&quot;));
            String stuAddress = request.getParameter(&quot;stuAddress&quot;);
    
            Student stu = new Student(stuNo,stuName,stuAge,stuAddress);
            StudentService addStudentService = new StudentService();
            boolean res = addStudentService.addStudent(stu);
    
            if (res){
                request.setAttribute(&quot;res&quot;,&quot;添加成功&quot;);
            }else{
                request.setAttribute(&quot;res&quot;,&quot;添加失败&quot;);
            }
            request.getRequestDispatcher(&quot;QueryAllStudents&quot;).forward(request,response);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;DeleteStudentServlet.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.servlet;
    import com.ajy.service.StudentService;
    import javax.servlet.ServletException;
    import javax.servlet.annotation.WebServlet;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.io.PrintWriter;
    
    @WebServlet(name = &quot;DeleteStudentServlet&quot;,value = &quot;/DeleteStudentServlet&quot;)
    public class DeleteStudentServlet extends HttpServlet {
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            doGet(request,response);
        }
    
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            request.setCharacterEncoding(&quot;utf-8&quot;);
            //根据学号删除学生
            int sno = Integer.parseInt(request.getParameter(&quot;sno&quot;));
            StudentService studentService = new StudentService();
            boolean res = studentService.deleteStudentBySno(sno);
    
            response.setContentType(&quot;text/html;charset=utf-8&quot;);
            response.setCharacterEncoding(&quot;utf-8&quot;);
    
            PrintWriter out = response.getWriter();
            if (res){
                request.setAttribute(&quot;res&quot;,&quot;删除成功&quot;);
            }else{
                request.setAttribute(&quot;res&quot;,&quot;删除失败&quot;);
            }
            request.getRequestDispatcher(&quot;QueryAllStudents&quot;).forward(request,response);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;UpdateStudentBySnoServlet.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.servlet;
    
    import com.ajy.entity.Student;
    import com.ajy.service.StudentService;
    import javax.servlet.ServletException;
    import javax.servlet.annotation.WebServlet;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    
    @WebServlet(name = &quot;UpdateStudentBySnoServlet&quot;,value = &quot;/UpdateStudentBySnoServlet&quot;)
    public class UpdateStudentBySnoServlet extends HttpServlet {
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            doGet(request,response);
        }
    
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            request.setCharacterEncoding(&quot;utf-8&quot;);
            StudentService studentService = new StudentService();
    
            int sno = Integer.parseInt(request.getParameter(&quot;sno&quot;));
            String sname = request.getParameter(&quot;sname&quot;);
            int sage = Integer.parseInt(request.getParameter(&quot;sage&quot;));
            String saddress = request.getParameter(&quot;saddress&quot;);
            Student student = new Student(sname,sage,saddress);
    
            boolean res = studentService.updateStudentBySno(sno,student);
            if (res){
                request.setAttribute(&quot;res&quot;,&quot;修改成功&quot;);
            }else{
                request.setAttribute(&quot;res&quot;,&quot;修改失败&quot;);
            }
            request.getRequestDispatcher(&quot;QueryAllStudents&quot;).forward(request,response);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;QueryStudentBySno.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    package com.ajy.servlet;
    
    import com.ajy.entity.Student;
    import com.ajy.service.StudentService;
    import javax.servlet.ServletException;
    import javax.servlet.annotation.WebServlet;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    
    @WebServlet(name = &quot;QueryStudentBySno&quot;,value = &quot;/QueryStudentBySno&quot;)
    public class QueryStudentBySno extends HttpServlet {
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            doGet(request,response);
        }
    
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            request.setCharacterEncoding(&quot;utf-8&quot;);
            StudentService studentService = new StudentService();
            int sno = Integer.parseInt(request.getParameter(&quot;sno&quot;));
            Student stu = studentService.queryStudentBySno(sno);
    
            request.setAttribute(&quot;student&quot;,stu);
            request.getRequestDispatcher(&quot;updateinfo.jsp&quot;).forward(request,response);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;addstudent.jsp&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;jsp&quot;&gt;
&lt;code&gt;
    &amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;添加学生&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;form action=&quot;AddStudentServlet&quot; method=&quot;post&quot;&amp;gt;
        学号：&amp;lt;input type=&quot;number&quot; name=&quot;stuNo&quot;&amp;gt;&amp;lt;br&amp;gt;
        姓名：&amp;lt;input type=&quot;text&quot; name=&quot;stuName&quot;&amp;gt;&amp;lt;br&amp;gt;
        年龄：&amp;lt;input type=&quot;number&quot; name=&quot;stuAge&quot;&amp;gt;&amp;lt;br&amp;gt;
        地址：&amp;lt;input type=&quot;text&quot; name=&quot;stuAddress&quot;&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;input type=&quot;submit&quot; value=&quot;提交&quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;a href=&quot;QueryAllStudents&quot;&amp;gt;返回首页&amp;lt;/a&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;studentlist.jsp&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;jsp&quot;&gt;
&lt;code&gt;
    &amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;
    &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;学生信息列表&amp;lt;/title&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
      &amp;lt;%
        String operateResult = (String) request.getAttribute(&quot;res&quot;);
        if (operateResult!=null){
          out.print(operateResult);
        }else{
          out.print(&quot;&amp;lt;br&amp;gt;&quot;);
        }
      %&amp;gt;
      &amp;lt;table border=&quot;1px&quot;&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;学号&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;操作&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;%
          List&amp;lt;Student&amp;gt; studentList = (List&amp;lt;Student&amp;gt;) request.getAttribute(&quot;students&quot;);
          for (Student student:studentList){
        %&amp;gt;
            &amp;lt;tr&amp;gt;
              &amp;lt;td&amp;gt;&amp;lt;%=student.getStuNo()%&amp;gt;&amp;lt;/td&amp;gt;
              &amp;lt;td&amp;gt;&amp;lt;%=student.getStuName()%&amp;gt;&amp;lt;/td&amp;gt;
              &amp;lt;td&amp;gt;&amp;lt;%=student.getStuAge()%&amp;gt;&amp;lt;/td&amp;gt;
              &amp;lt;td&amp;gt;&amp;lt;a href=&quot;QueryStudentBySno?sno=&amp;lt;%=student.getStuNo()%&amp;gt;&quot;&amp;gt;修改&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
              &amp;lt;td&amp;gt;&amp;lt;a href=&quot;DeleteStudentServlet?sno=&amp;lt;%=student.getStuNo()%&amp;gt;&quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;%
          }
        %&amp;gt;
      &amp;lt;/table&amp;gt;
      &amp;lt;a href=&quot;addstudent.jsp&quot;&amp;gt;增加&amp;lt;/a&amp;gt;
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;updateinfo.jsp&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;jsp&quot;&gt;
&lt;code&gt;
    &amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;学生个人信息&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;%
        Student stu = (Student) request.getAttribute(&quot;student&quot;);
    %&amp;gt;
        &amp;lt;form action=&quot;UpdateStudentBySnoServlet&quot; method=&quot;post&quot;&amp;gt;
            学号：&amp;lt;input type=&quot;number&quot; name=&quot;sno&quot; value=&quot;&amp;lt;%=stu.getStuNo()%&amp;gt;&quot;&amp;gt;&amp;lt;br&amp;gt;
            姓名：&amp;lt;input type=&quot;text&quot; name=&quot;sname&quot; value=&quot;&amp;lt;%=stu.getStuName()%&amp;gt;&quot;&amp;gt;&amp;lt;br&amp;gt;
            年龄：&amp;lt;input type=&quot;number&quot; name=&quot;sage&quot; value=&quot;&amp;lt;%=stu.getStuAge()%&amp;gt;&quot;&amp;gt;&amp;lt;br&amp;gt;
            地址：&amp;lt;input type=&quot;text&quot; name=&quot;saddress&quot; value=&quot;&amp;lt;%=stu.getStuAddress()%&amp;gt;&quot;&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type=&quot;submit&quot; value=&quot;提交&quot;&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;a href=&quot;QueryAllStudents&quot;&amp;gt;返回首页&amp;lt;/a&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 27 Apr 2019 15:49:00 +0000</pubDate>
<dc:creator>萧安</dc:creator>
<og:description>引言 这个实例是上一个实例JavaWeb学习 三层架构实例（一）的加强版，实现的是在前端对数据库中student表的 增 、 删 、 改 、 查 操作。关于三层组成云云，这里就不再叙述。 实例 效果图</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/HenuAJY/p/10781157.html</dc:identifier>
</item>
<item>
<title>RabbitMQ指南之一：&quot;Hello World!&quot; - 无恨之都</title>
<link>http://www.cnblogs.com/wuhenzhidu/p/10781101.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuhenzhidu/p/10781101.html</guid>
<description>&lt;p&gt;　　为什么要使用MQ消息中间件？它解决了什么问题？关于为什么要使用消息中间件？消息中间件是如何做到同步变异步、流量削锋、应用解耦的？网上已经有很多说明，我这里就不再说明了，读者可以参考（&lt;a href=&quot;https://www.jianshu.com/p/2820561158c4&quot;&gt;https://www.jianshu.com/p/2820561158c4&lt;/a&gt;）。我在接下来的RabbitMq系列博客里会将官方的讲解翻译过来，同时加以自己的理解整理成博客，希望能和大家共同交流，一起进步。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427212439914-531768886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427212446396-827073077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　RabbitMq原理图&lt;/p&gt;

&lt;p&gt;　　RabbitMq是一个消息中间件：它接收消息、转发消息。你可以把它理解为一个邮局：当你向邮箱里寄出一封信后，邮递员们就能最终将信送到收信人手中。类似的，RabbitMq就好比是一个邮箱、邮局和邮递员。RabbitMq和邮局最大的区别是：RabbitMq接收、转发的都是二进制数据块--消息，而不是纸质的数据文件。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;RabbitMq、消息相关术语如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;生产者：&lt;/strong&gt;生产者只发送消息，发送消息的程序即为生产者：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427203239150-48128011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;消息队列：&lt;/strong&gt;消息队列就相当于RabbitMq中的邮箱名称。尽管消息在你的程序和RabbitMq中流动，但它只能存储在消息队列中。队列本质上是一个大的消息缓存，它能存多少消息，取决于主机的内存和磁盘限制。多个生产者可以往同一个消息队列中发送消息；多个消费者可以从同一个队列中获取数据。我们以下列图形来表示一个消息队列：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427203711746-2033345305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;消费者：&lt;/strong&gt;消费者是一个等待接收消息的程序：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427203841623-1080666304.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：生产者、消费者和RabbitMq可以在不同的机器上；在很多的应用中，一个生产者同时也可能是消费者。&lt;/p&gt;

&lt;p&gt; 　　在这小节里，我们将写一个消息生产者用来发送消息、一个消息消费者来消费消息（接收消息并打印出来）。&lt;/p&gt;
&lt;p&gt;　　在下面图形中，“P”是我们的生产者，“C”是我们的消费者，中间的红框是我们的消息队列，保存了从生产者那里接收到的准备转发到消费方的消息。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427204807658-1007898875.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;　　Java客户端类库说明：&lt;/h4&gt;
&lt;p&gt;　　RabbitMq使用多种协议，本指南使用AMQP 0-9-1协议，该协议是一个开源的、通用的消息协议。RabbitMq有多种语言的客户端，这里我们使用JAVA语言的客户端做实验。通过以下地址下载RabbitMq客户端jar包和依赖包：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://central.maven.org/maven2/com/rabbitmq/amqp-client/5.5.1/amqp-client-5.5.1.jar&quot; target=&quot;_blank&quot;&gt;amqp-client-5.5.1.jar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://central.maven.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar&quot; target=&quot;_blank&quot;&gt;slf4j-api-1.7.25.jar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://central.maven.org/maven2/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar&quot; target=&quot;_blank&quot;&gt;slf4j-simple-1.7.25.jar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　把这三个jar包拷贝到你的工作目录，包括后面教程要新建的java文件。&lt;/p&gt;
&lt;h2&gt;2.1 发送消息&lt;/h2&gt;
&lt;p&gt;　　生产者连接RabbitMq,发送一条简单的消息”Hello World!“后就退出。&lt;/p&gt;
&lt;p&gt;　　在Send.java类中，需要引入以下依赖包：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.ConnectionFactory;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.Channel;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　给队列起个名字：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Send {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE_NAME = &quot;hello&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] argv) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;      ...
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建连接到服务器的连接Collection：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; onnectionFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionFactory();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; factory.setHost(&quot;localhost&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;try&lt;/span&gt; (Connection connection =&lt;span&gt; factory.newConnection();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      Channel channel =&lt;span&gt; connection.createChannel()) {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个连接即套接字连接，为我们处理协议版本协商和身份验证等。这里我们连接一个本地的RabbitMq：因此是localhost，如果你想要连接一个远程机器上的RabbitMq，只需要把localhst改成那台机器的计算机名或是IP地址。&lt;/p&gt;
&lt;p&gt;　　创建完连接之后，我们继续创建一个信道：Channel。我们需要使用try-with-resource表达式，因为Connection和Channel都实现了JAVA接口Closeable，属于资源，需要关闭，这样我们就不需要显示地在我们的代码中进行关闭了。（关于信道，请参考文章最顶部的RabbitMq原理图，是TCP里面的虚拟链接，例如：电缆相当于一个TCP，信道就是里面的一个独立光纤，一条TCP上面创建多条信道是没有问题的；TCP一旦打开就分创建AMQP信道；无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的）。&lt;/p&gt;
&lt;p&gt;　　为了发送消息，我们还必须要定义一个需要发送到的消息队列，这些都要使用try-with-resource表达式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; channel.queueDeclare(QUEUE_NAME, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; String message = &quot;Hello World!&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; channel.basicPublish(&quot;&quot;, QUEUE_NAME, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, message.getBytes());
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; System.out.println(&quot; [x] Sent '&quot; + message + &quot;'&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　定义一个消息队列是幂等的：只有该队列不存在的时候才能被创建，消息是二进制数组，因此你可以根据需要指定编码。&lt;/p&gt;
&lt;p&gt;　　完成的Send.java如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.ConnectionFactory;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Send {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE_NAME = &quot;hello&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] argv) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         ConnectionFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionFactory();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         factory.setHost(&quot;localhost&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt; (Connection connection =&lt;span&gt; factory.newConnection();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;              Channel channel =&lt;span&gt; connection.createChannel()) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             channel.queueDeclare(QUEUE_NAME, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             String message = &quot;Hello World!&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             channel.basicPublish(&quot;&quot;, QUEUE_NAME, &lt;span&gt;null&lt;/span&gt;, message.getBytes(&quot;UTF-8&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             System.out.println(&quot; [x] Sent '&quot; + message + &quot;'&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.2 接收消息&lt;/h2&gt;
&lt;p&gt;　　消费者监听RabbitMq中的消息，因此与生产者发送一条消息就退出不同，消费者要保持运行状态来接收消息并打印出来。&lt;/p&gt;
&lt;p&gt;　　Recv.java同样需要导入以下依赖包：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.ConnectionFactory;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.DeliverCallback;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　与生产者相同，我们需要创建Connetcion和Channel、定义队列（需要监听并接收消息的队列）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recv {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE_NAME = &quot;hello&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] argv) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     ConnectionFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionFactory();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     factory.setHost(&quot;localhost&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     Connection connection =&lt;span&gt; factory.newConnection();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     channel.queueDeclare(QUEUE_NAME, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     System.out.println(&quot; [*] Waiting for messages. To exit press CTRL+C&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意我们也在这里声明队列，因为我们可能在生产者之前启动消费者，我们想要确保在我们尝试消费消息的时候队列就已经存在了。&lt;/p&gt;
&lt;p&gt;　　这里我们为什么不使用try-with-resource表达式自动关闭channl和connection？通过这样，我们就可以使我们的程序一直保持运行状态，如果把这些关了，程序也就停止了。这就尴尬了，因为我们需要保持消费者一直处于异步监听消息过来的状态。&lt;/p&gt;
&lt;p&gt;　　RabbitMq会将队列中的消息异步地推送过来，我们需要提供一个回调函数来缓存消息直到我们需要用到这些消息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; DeliverCallback deliverCallback = (consumerTag, delivery) -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     String message = &lt;span&gt;new&lt;/span&gt; String(delivery.getBody(), &quot;UTF-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     System.out.println(&quot; [x] Received '&quot; + message + &quot;'&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; channel.basicConsume(QUEUE_NAME, &lt;span&gt;true&lt;/span&gt;, deliverCallback, consumerTag -&amp;gt; { });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Rec.java完整代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.ConnectionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.DeliverCallback;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recv {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE_NAME = &quot;hello&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] argv) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        ConnectionFactory factory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionFactory();
        factory.setHost(&lt;/span&gt;&quot;localhost&quot;&lt;span&gt;);
        Connection connection &lt;/span&gt;=&lt;span&gt; factory.newConnection();
        Channel channel &lt;/span&gt;=&lt;span&gt; connection.createChannel();

        channel.queueDeclare(QUEUE_NAME, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot; [*] Waiting for messages. To exit press CTRL+C&quot;&lt;span&gt;);

        DeliverCallback deliverCallback &lt;/span&gt;= (consumerTag, delivery) -&amp;gt;&lt;span&gt; {
            String message &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(delivery.getBody(), &quot;UTF-8&quot;&lt;span&gt;);
            System.out.println(&lt;/span&gt;&quot; [x] Received '&quot; + message + &quot;'&quot;&lt;span&gt;);
        };
        channel.basicConsume(QUEUE_NAME, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, deliverCallback, consumerTag -&amp;gt;&lt;span&gt; { });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在官方手册中，测试部分他们是将客户端jar和依赖jar添加到classpath路径，然后在cmd终端来运行的，我觉得麻烦，因此，我这里放到IDEA中来运行，效果是一样的。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427222055375-489515340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;第一步：首先运行Send.java:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　输出结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
[x] Sent 'Hello World!'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看RabbitMq控制台：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427222425053-1550169729.png&quot; alt=&quot;&quot; width=&quot;667&quot; height=&quot;220&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427222437934-902849612.png&quot; alt=&quot;&quot; width=&quot;716&quot; height=&quot;92&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　说明消息已经发送成功。&lt;/p&gt;
&lt;p&gt; 　  &lt;strong&gt;第二步：启动消费者Recv.java:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　输出结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[x] Received 'Hello World!'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　说明消息已经消费成功了，此时再查看控制台：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427222702602-1265746330.png&quot; alt=&quot;&quot; width=&quot;599&quot; height=&quot;197&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427222738082-1689153081.png&quot; alt=&quot;&quot; width=&quot;644&quot; height=&quot;104&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　消息依然存在在队列中，但是区别是，在第一张图中Ready由1变成了0，Unacknowledged由0变成了1；第二张图中Ready也由1变成0，Unacked由0变成了1。为什么会这样？按道理，消息消费了之后就应该删除掉，否则可能造成重复消费。关于这方面知识，将会在后面的章节中再介绍（Ack机制）。&lt;/p&gt;

&lt;p&gt;　　上面虽然实现了功能，但在实际工作中，我们更多的可能是使用SpringBoot、SpringCloud等成熟的框架来实现。本小节就通过SpringBoot来实现以上功能。&lt;/p&gt;
&lt;p&gt;　　工程目录如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427232111614-1475605362.png&quot; alt=&quot;&quot; width=&quot;287&quot; height=&quot;413&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Provider和Consumer的配置文件相同,IP请替换成你自己的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#RabbitMq
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; spring.rabbitmq.host=192.168.xx.xx  
&lt;span&gt;3&lt;/span&gt; spring.rabbitmq.username=&lt;span&gt;rabbitmq
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; spring.rabbitmq.password=123456
&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; hello_world.queue=hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　为方便让系统启动时就往队列发送消息，所以写了一个SenderRunner类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SenderRunner &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ApplicationRunner {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Send send;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; run(ApplicationArguments args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         send.doSender(&quot;Hello RabbitMq&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Send.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Send {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     @Value(&quot;${hello_world.queue}&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String queueName;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; AmqpTemplate amqpTemplate;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doSender(String msg) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        amqpTemplate.convertAndSend(queueName,msg);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         System.out.println(&quot;发送消息：&quot; +&lt;span&gt; msg);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　启动类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@SpringBootApplication
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProviderApplication {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         SpringApplication.run(ProviderApplication.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Recv.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recv {

    @RabbitListener(queues &lt;/span&gt;= &quot;${hello_world.queue}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; receive(String msg) {
        System.out.println(&lt;/span&gt;&quot;接收到消息：&quot; +&lt;span&gt; msg);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;启动Provider:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427232542563-367428738.png&quot; alt=&quot;&quot; width=&quot;1222&quot; height=&quot;50&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　查看控制台：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427232719748-185323471.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;85&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;启动Consumer:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1651332/201904/1651332-20190427232929472-290654375.png&quot; alt=&quot;&quot; width=&quot;595&quot; height=&quot;130&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可见，SpringBoot为我们做了很多封装，隐藏了很多底层的细节，使用起来简单多了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　PS：关于SpringBoot的实现涉及到很多的配置，我将在系统的最后专门用一章来讲解SpringBoot的实现&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
</description>
<pubDate>Sat, 27 Apr 2019 15:40:00 +0000</pubDate>
<dc:creator>无恨之都</dc:creator>
<og:description>为什么要使用MQ消息中间件？它解决了什么问题？关于为什么要使用消息中间件？消息中间件是如何做到同步变异步、流量削锋、应用解耦的？网上已经有很多说明，我这里就不再说明了，读者可以参考（https://w</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuhenzhidu/p/10781101.html</dc:identifier>
</item>
<item>
<title>es6学习笔记-proxy对象 - 热爱前端的17号诶</title>
<link>http://www.cnblogs.com/sqh17/p/10755165.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sqh17/p/10755165.html</guid>
<description>&lt;p&gt;尤大大的vue3.0即将到来，虽然学不动了，但是还要学的啊，据说vue3.0是基于proxy来进行对值进行拦截并操作，所以es6的proxy也是要学习一下的。&lt;/p&gt;

&lt;p&gt;Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等） --摘自MDN&lt;br/&gt;Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。 --摘自阮一峰的ES6入门&lt;br/&gt;Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。&lt;br/&gt;Proxy 也可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。&lt;br/&gt;总结来说：Proxy对象就是要在目标对象上设置自定义的规则和方法，让它按照自己定义的规则去实行某些操作。&lt;/p&gt;

&lt;p&gt;ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例，所以可以按照构造函数创建对象的形式去实例化一个Proxy对象。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var proxy = new Proxy({},{})
console.log(proxy) // Proxy{}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意点：&lt;br/&gt;1 实例化一个Proxy对象时，必须要传两个参数对象,否则会报错：Uncaught TypeError: Cannot create proxy with a non-object as target or handler,不能创建没有对象的proxy对象。&lt;br/&gt;2 传两个空对象时，默认的是简单声明了一个Proxy实例，（好像没啥卵用……）&lt;/p&gt;
&lt;p&gt;参数对象解释：&lt;/p&gt;
&lt;ul readability=&quot;3.390625&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;第一个参数：target，目标对象，是你要代理的对象.它可以是JavaScript中的任何合法对象.如: (数组, 对象, 函数等等)&lt;br/&gt;tip:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var arr = []
var obj = {}
var Person = class{}
var foo = function (){}
console.log(Person instanceof Object) // true
console.log(foo instanceof Object)  // true
console.log(arr instanceof Object)  // true
console.log(obj instanceof Object)  // true&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0.92250922509225&quot;&gt;
&lt;p&gt;第二个参数：handler，配置对象，用来定制拦截行为，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作。&lt;br/&gt;Proxy支持的拦截操作，有13种，使用方法可以参考 &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/proxy&quot;&gt;阮一峰的ES6入门&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;当目标对象为空时&quot;&gt;3.1 当目标对象为空时&lt;/h2&gt;
&lt;p&gt;var proxy = new Proxy({},handler)&lt;br/&gt;这样直接代表着，拦截的对象是空的，所以直接对proxy对象进行操控。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = {};
var handler = {
  get(target,propKey,receiver){
    return 'peter'
  }
};
var proxy = new Proxy(target, handler);
proxy.name = 'tom';
console.log(proxy.name) // tom
console.log(target.name) // undefined&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码说明了：target是个空对象，但是操作了proxy，也影响不了target&lt;br/&gt;ps：要使得Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作&lt;/p&gt;
&lt;h2 id=&quot;当拦截对象为空时&quot;&gt;3.2 当拦截对象为空时&lt;/h2&gt;
&lt;p&gt;var proxy = new Proxy(target,{})&lt;br/&gt;handler没有设置任何拦截，那就等同于直接通向原对象。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = {};
var handler = {};
var proxy = new Proxy(target, handler);
proxy.name = 'peter';
console.log(proxy.name) // peter
console.log(target.name) // peter&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码说明了：handler是一个空对象，没有任何拦截效果，访问proxy就等同于访问target&lt;/p&gt;

&lt;p&gt;Proxy实例化的对象默认带有get和set方法。也可以在这些基础上进行拦截操作，其他的13种方法也是如此。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;get() 用于拦截某个属性的读取（read）操作，换句话讲，就是在读取目标对象的属性之前，操作该属性。&lt;br/&gt;参数解释：
&lt;ul readability=&quot;3&quot;&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li&gt;property：属性名&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;receiver：proxy实例&lt;br/&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var person = {
  name: &quot;张三&quot;
};

var proxy = new Proxy(person, {
  get: function(target, property) {
    if (property in target) {
      return target[property];
    } else {
      throw new ReferenceError(&quot;Property \&quot;&quot; + property + &quot;\&quot; does not exist.&quot;);
    }
  }
});

proxy.name // &quot;张三&quot;
proxy.age // Property &quot;age&quot; does not exist.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参考阮一峰的例子，上述说明了，如果输入目标函数不存在的属性，就直接报错。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;set() 用来拦截目标对象的赋值（write）操作&lt;br/&gt;参数解释：
&lt;ul readability=&quot;4&quot;&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li&gt;propertyName：属性名&lt;/li&gt;
&lt;li&gt;propertyValue：属性值&lt;/li&gt;
&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;receiver：Proxy实例本身&lt;br/&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = {}
var handler = {
  set(target, propKey, value, receiver) {
    if (typeof value !== 'string') {
      target[propKey] = String(value);
    }else{
      target[propKey] = value;
    }
  }
}
var proxy = new Proxy(target, handler)
proxy.name = 'peter'
proxy.age = 25
console.log(typeof proxy.name) // string
console.log(typeof proxy.age) // string&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面例子就是拦截对象是不是字符串，不是字符串的话会强制转化为字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;apply() 用来拦截函数的调用、call和apply操作&lt;br/&gt;参数解释：
&lt;ul readability=&quot;6&quot;&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li&gt;context：目标对象的上下文对象(this）&lt;/li&gt;
&lt;li readability=&quot;15&quot;&gt;
&lt;p&gt;arguments：目标对象的参数数组&lt;br/&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = function(a,b){
  return 10 + a + b
}
var handler = {
  apply(target,context,arguments){
    arguments[0] = 10
    arguments[1] = 20
    return arguments.reduce(function(prev, curr, idx, arr){
        return prev + curr;
    });
  }
}
var proxy = new Proxy(target,handler)
console.log(proxy(1,2)) // 30&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的例子，就是目标函数是要传两个参数，并且返回之和，拦截目标做的就是改变目标对象的参数，并且求和，所以这样写触发了apply方法，返回30，而不是13&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;has() 用来拦截hasProperty操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是in运算符。&lt;br/&gt;参数解释：
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;key： 需查询的属性名,是一个字符串！！！！！&lt;br/&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = {
  name: 'peter',
  age:25
}
var handler = {
  has(target,key){
    return key in target;
  }

}
var proxy = new Proxy(target,handler)
console.log('age' in proxy) // true
console.log('colors' in proxy) // false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的例子是典型的has的方法，判断所要查询的属性名是不是在目标对象上的属性名，返回布尔值。&lt;br/&gt;ps：has拦截对for...in循环不生效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;construct() 用于拦截new命令，要返回是一个对象，否则会报错&lt;br/&gt;参数解释：
&lt;ul readability=&quot;2&quot;&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li&gt;args：构造函数的参数对象&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;newTarget：创造实例对象时，new命令作用的构造函数&lt;br/&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var p = new Proxy(function () {}, {
  construct: function(target, args) {
    console.log('called: ' + args.join(', '));
    return { value: args[0] * 10 };
  }
});

(new p(1)).value
// &quot;called: 1&quot;
// 10&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由此可见，是针对构造函数而言的，对目标对象的构造函数进行拦截。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;defineProperty() 拦截了Object.defineProperty操作，在声明时进行拦截，设置的是一个布尔值
&lt;ul readability=&quot;13&quot;&gt;&lt;li&gt;参数解释：
&lt;ul&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li&gt;key：要定义或修改的属性的名称&lt;/li&gt;
&lt;li&gt;descriptor： 将被定义或修改的属性描述符,是一个对象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;拓展：&lt;br/&gt;Object.defineProperty(),声明对象的属性，参数说明和上述一样&lt;br/&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var obj = {}
Object.defineProperty(obj, &quot;key&quot;, {
  enumerable: false,
  configurable: false,
  writable: false,
  value: &quot;static&quot;
});&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;18&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = {
  name: 'peter',
  age:25
}
var handler = {
  defineProperty(target,key,descriptor){
    if(key === 'color'){
      throw new Error('不能定义颜色')
    }
    Object.defineProperty(target, key, descriptor)
    // return true
  }
}
var proxy = new Proxy(target,handler)
var descriptor = {
  writable : true,
  enumerable : true,
  configurable : true
}
descriptor.value = 'sport'
Object.defineProperty(proxy, 'favor', descriptor)
console.log(proxy.favor) // sport
descriptor.value = 'red'
Object.defineProperty(proxy, 'color', descriptor)  // 不能定义颜色
console.log(proxy.color)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果目标对象不可扩展（non-extensible），则defineProperty不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则defineProperty方法不得改变这两个设置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;deleteProperty() 用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除。
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li&gt;参数解释：
&lt;ul&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li&gt;key：要删除的属性名&lt;br/&gt;(delete是关键字，目前用到的就是删除对象的某个属性)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = { _prop: 'foo' };
var handler = {
  deleteProperty (target, key) {
    if (key[0] === '_') {
      throw new Error(`Invalid attempt to ${target} private &quot;${key}&quot; property`);
    }
    delete target[key];
    return true;
  }
};
var proxy = new Proxy(target, handler);
delete proxy._prop // Error: Invalid attempt to delete private &quot;_prop&quot; property&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码中，deleteProperty方法拦截了delete操作符，删除第一个字符为下划线的属性会报错。&lt;br/&gt;注意，目标对象自身的不可配置（configurable）的属性，不能被deleteProperty方法删除，否则报错。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;getOwnPropertyDescriptor() 拦截Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者undefined。
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li&gt;参数解释：
&lt;ul&gt;&lt;li&gt;target：目标对象&lt;/li&gt;
&lt;li&gt;key： 属性名&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;拓展：&lt;br/&gt;Object.getOwnPropertyDescriptor(obj,prop) 返回指定对象上一个自有属性对应的属性描述符
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;参数解释：
&lt;ul&gt;&lt;li&gt;obj：需要查找的目标对象&lt;/li&gt;
&lt;li&gt;prop: 目标对象内属性名称&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;返回值：&lt;br/&gt;如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;o = { bar: 42 };
d = Object.getOwnPropertyDescriptor(o, &quot;bar&quot;);
console.log(d)
// d {
//   configurable: true,
//   enumerable: true,
//   value: 42,
//   writable: true
// }&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;14&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var target = { _foo: 'bar', baz: 'tar' };
var handler = {
  getOwnPropertyDescriptor (target, key) {
    if (key[0] === '_') {
      return;
    }
    return Object.getOwnPropertyDescriptor(target, key);
  }
};
var proxy = new Proxy(target, handler);
Object.getOwnPropertyDescriptor(proxy, 'wat')
// undefined
Object.getOwnPropertyDescriptor(proxy, '_foo')
// undefined
Object.getOwnPropertyDescriptor(proxy, 'baz')
// { value: 'tar', writable: true, enumerable: true, configurable: true }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述说明：对于第一个字符为下划线的属性名会返回undefined。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;getPrototypeOf() 用来拦截获取对象原型,主要拦截以下操作：
&lt;/li&gt;
&lt;li&gt;isExtensible() 拦截Object.isExtensible()操作
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;Object.isExtensible() 判断是否可以为对象添加新的属性&lt;br/&gt;参数：
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li&gt;object 要进行判断的对象&lt;br/&gt;返回值：&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;是个布尔值，true是可以添加，false不可以添加&lt;br/&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let obj = { 
  name: 'peter',
  age:25
}
console.log(Object.isExtensible(obj)) // true&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
对象默认情况下是可以添加新的属性的。&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var p = new Proxy({}, {
  isExtensible: function(target) {
    console.log(&quot;called&quot;);
    return true;
  }
});
Object.isExtensible(p) // called&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法有一个强限制，它的返回值必须与目标对象的isExtensible属性保持一致，否则就会抛出错误。&lt;br/&gt;即：Object.isExtensible(proxy) === Object.isExtensible(target)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;preventExtensions() 拦截Object.preventExtensions()操作
&lt;ul&gt;&lt;li&gt;Object.preventExtensions(object) 不能再为此对象添加新的属性或者方法
&lt;/li&gt;
&lt;li&gt;例子&lt;br/&gt;————————————&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;setPrototypeOf() 拦截Object.setPrototypeOf方法
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;Object.setPrototypeOf(obj,proto) 设置对象的原型&lt;br/&gt;此方法修改的是对象实例的内部属性[[Prototype]]，也就是__proto__属性所指向的对象，它只是修改了特定对象上的原型对象，对于构造函数的prototype指向的原型对象没有影响
&lt;ul&gt;&lt;li&gt;参数：
&lt;ul&gt;&lt;li&gt;obj 对其设置原型的对象&lt;/li&gt;
&lt;li&gt;proto 新的原型对象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
let proto = {&lt;br/&gt;color: red&lt;br/&gt;};&lt;br/&gt;let obj = {&lt;br/&gt;name: 'peter'&lt;br/&gt;age: 26&lt;br/&gt;};&lt;br/&gt;Object.setPrototypeOf(obj, proto);&lt;br/&gt;console.log(obj.color); // red&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var handler = {
  setPrototypeOf (target, proto) {
    throw new Error('Changing the prototype is forbidden');
  }
};
var proto = {};
var target = function () {};
var proxy = new Proxy(target, handler);
Object.setPrototypeOf(proxy, proto);
// Error: Changing the prototype is forbidden&lt;/code&gt;
&lt;/pre&gt;
上面代码中，只要修改target的原型对象，就会报错。&lt;/li&gt;
&lt;li&gt;ps
&lt;ol&gt;&lt;li&gt;该方法只能返回布尔值，否则会被自动转为布尔值&lt;/li&gt;
&lt;li&gt;如果目标对象不可扩展（non-extensible），setPrototypeOf方法不得改变目标对象的原型&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ownKeys() 用来拦截对象自身属性的读取操作
&lt;ul readability=&quot;1&quot;&gt;&lt;li&gt;如下：
&lt;ul&gt;&lt;li&gt;Object.getOwnPropertyNames(obj) 获取对象的属性名称，并存储在数组中。
&lt;/li&gt;
&lt;li&gt;Object.getOwnPropertySymbols(obj) 返回一个给定对象自身的所有 Symbol 属性的数组
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li&gt;参数解释： obj 要返回 Symbol 属性的对象&lt;/li&gt;
&lt;li&gt;返回值： 在给定对象自身上找到的所有 Symbol 属性的数组。&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var obj = {};
var a = Symbol(&quot;a&quot;);
var b = Symbol.for(&quot;b&quot;);

obj[a] = &quot;localSymbol&quot;;
obj[b] = &quot;globalSymbol&quot;;

var objectSymbols = Object.getOwnPropertySymbols(obj);

console.log(objectSymbols.length); // 2
console.log(objectSymbols)         // [Symbol(a), Symbol(b)]
console.log(objectSymbols[0])      // Symbol(a)&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Object.keys() 返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;参数：obj 要返回其枚举自身属性的对象&lt;/li&gt;
&lt;li&gt;返回值： 一个表示给定对象的所有可枚举属性的字符串数组&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var obj = { 0: 'a', 1: 'b', 2: 'c' };
console.log(Object.keys(obj)); // ['0', '1', '2']&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;for...in循环&lt;br/&gt;————————————&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;例子之一：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var p = new Proxy({}, {
  ownKeys: function(target) {
    return ['a', 'b', 'c'];
  }
});

Object.getOwnPropertyNames(p)
// [ 'a', 'b', 'c' ]&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;返回一个可取消的 Proxy 实例&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;参数解释：
&lt;ul&gt;&lt;li&gt;target 用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。&lt;/li&gt;
&lt;li&gt;handler 拦截对象，其属性是当执行一个操作时定义代理的行为的函数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;返回值&lt;br/&gt;返回一个包含了所生成的代理对象本身以及该代理对象的撤销方法的对象&lt;br/&gt;其结构为： {&quot;proxy&quot;: proxy, &quot;revoke&quot;: revoke}，其中：
&lt;ul&gt;&lt;li&gt;proxy&lt;br/&gt;表示新生成的代理对象本身，和用一般方式 new Proxy(target, handler) 创建的代理对象没什么不同，只是它可以被撤销掉&lt;/li&gt;
&lt;li&gt;revoke&lt;br/&gt;撤销方法，调用的时候不需要加任何参数，就可以撤销掉和它一起生成的那个代理对象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var revocable = Proxy.revocable({}, {
  get(target, propKey) {
    return propKey + '啦啦啦';
  }
});
var proxy = revocable.proxy;
console.log(proxy.foo) // foo啦啦啦
revocable.revoke(); // 执行撤销方法
console.log(proxy.foo); // Uncaught TypeError: Cannot perform 'get' on a proxy that has been revoked&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刚开始学proxy时，都是懵逼的状态，阮一峰ES6入门一开始看代码有点难度，所以我一边看一边查资料，里面关于Object对象的方法居多，也顺便学习了一下，知识很多，需要日常回顾加深理解，经过查阅，对于代理模式 Proxy 的作用主要体现在三个方面:1拦截和监视外部对对象的访问，2降低函数或类的复杂度，3在复杂操作前对操作进行校验或对所需资源进行管理，目前还没有大量运用，最常见的应该是拦截和监听对象的变化吧。&lt;br/&gt;我把笔记放到&lt;a href=&quot;https://github.com/sqh17/notes/blob/master/ways/proxy.md&quot;&gt;GitHub&lt;/a&gt;里了，如需要可以去看看，有什么不对的地方，欢迎指正，大家一起进步加油。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/proxy&quot;&gt;阮一峰ES6入门&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.jb51.net/article/132373.htm&quot;&gt;详解ES6中的代理模式——Proxy&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;MDN&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000006035363&quot;&gt;[译] 实例解析 ES6 Proxy 使用场景&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 27 Apr 2019 15:36:00 +0000</pubDate>
<dc:creator>热爱前端的17号诶</dc:creator>
<og:description>前提摘要 尤大大的vue3.0即将到来，虽然学不动了，但是还要学的啊，据说vue3.0是基于proxy来进行对值进行拦截并操作，所以es6的proxy也是要学习一下的。 一 什么是proxy Prox</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sqh17/p/10755165.html</dc:identifier>
</item>
</channel>
</rss>