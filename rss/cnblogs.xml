<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>面试了一个 39 岁程序员，我有点慌…… - Java技术栈</title>
<link>http://www.cnblogs.com/javastack/p/13743030.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/javastack/p/13743030.html</guid>
<description>&lt;p&gt;本文非广告，也非标题党，栈长最近的亲身面试经历。&lt;/p&gt;
&lt;h2 id=&quot;招人背景&quot;&gt;招人背景&lt;/h2&gt;
&lt;p&gt;首先说下公司招人的背景吧，公司要招的是一个研发经理的岗位，负责管理技术团队的各个项目组，领导只给了我两个要求：&lt;/p&gt;
&lt;p&gt;1）技术可以&lt;/p&gt;
&lt;p&gt;2）管理有一套&lt;/p&gt;
&lt;p&gt;说白了，这是一个技术+管理的岗位，不是纯粹的管理岗，能写代码，技术上过得去是前提，所以底层还得是个程序员。&lt;/p&gt;
&lt;p&gt;干我们这行的都懂，大厂都在清理 35 岁以上的基础岗，如果到了这个年纪还混不到中高层管理岗位，基础岗确实不太好找了。&lt;/p&gt;
&lt;p&gt;现在的年轻人很厉害，很年轻就走上了管理层，所以我很庆幸公司在年龄上没有卡人，给了很多 35+ 的程序员简历供我筛选，因为我也是程序员，所以我也不会在年龄上有所顾虑。&lt;/p&gt;
&lt;p&gt;所以，确实就和标题写的那样，这两天我就面试了一个 39 岁程序员，全程让我都感觉有点慌……&lt;/p&gt;
&lt;p&gt;为什么慌？主要是因为年龄比我大不少，技术是不是很牛逼，会不会吊打我，狠狠地虐我？我真心怕 hold 不住。&lt;/p&gt;
&lt;p&gt;但实际面试下来，场面一度尴尬，结局让我感觉有点唏嘘。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1218593/202009/1218593-20200928084843137-330595725.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;面试过程&quot;&gt;面试过程&lt;/h2&gt;
&lt;p&gt;面试者 15 年工作经验，简历却只有 2 页，可以说非常简练，从程序员到项目经理、研发经理、技术总监都干了个遍，Java/PHP/Python/C# 也都有涉及。&lt;/p&gt;
&lt;p&gt;从交谈过程中，他说是可以做技术＋管理的，然后我说问一些技术上的问题，他说好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 你有互联网分布式相关项目开发经历么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 有啊，那个 XXX 项目就是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 好，我看到了，我看这个项目是用 Dubbo 框架做的，为什么要用 Dubbo 呢？在你们整个项目里面 Dubbo 承担了什么角色？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 做服务治理，底层是 ZK…&lt;/p&gt;
&lt;p&gt;然后他就一直在说和 ZK 的关系，我也没怎么听明白，我再怎么引导也没说清楚 Dubbo 在项目中承担什么角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 能介绍下服务与服务之间相互调用的时候，如果调用超时了是怎么处理的？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 超时啊，（想了几秒后）那应该是报错吧&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt;　确定是报错吗？（他想了想，不说话，然后我接着说）没有重试机制吗？重试机制是怎样的？&lt;/p&gt;
&lt;p&gt;做过分布式的项目的都知道重试机制，至少读操作要支持重试，写操作支持重试的话被调用方还要支持幂等性，不然会造成重复写入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; （又想了想，笑着和我说）这个项目有点久了，这个不太记得了……&lt;/p&gt;
&lt;p&gt;然后我看了下这个项目，2014 年做的，6 年前了，他说太久不记得了，那也情有可原了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; OK，你最近做的这个项目，能介绍下它的整体架构么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 我们用了 MQ，用了 Redis，用了……（他说了一堆，都没说到重点）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 我想问的是，从上到下，这些技术是怎么承接起来的，整体的系统架构是怎样的？（现场没纸笔，不然我都想让他画图了）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 呃……我知道你的意思，主要是我真的不知道怎么表达……（然后他不说话了，场面尴尬了）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 没事，问你一个设计性的问题，假如有一个接口，五个实现类，现在的需求可能要往接口加一个方法，这样就要改动五个实现类，但需求只需要改动其中两个实现类，要怎么设计才好？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 那就只能把方法写在两个实现类中……（想了半天也没有说出好的方案）&lt;/p&gt;
&lt;p&gt;其实这里至少有两个方案：&lt;/p&gt;
&lt;p&gt;1）可以再定义一个抽象类去实现这个接口，在抽象类中新增这个方法，然后其他两个实现类实现这个抽象类就好了。&lt;/p&gt;
&lt;p&gt;2）使用 Java 8 中的新特性，在接口中新增默认方法或者静态方法，可以点击&lt;a href=&quot;https://mp.weixin.qq.com/s/_V6oyDle4PrpzL65x_8K5w&quot;&gt;这里&lt;/a&gt;查看我三年前写的这篇文章。三年前写的比较粗，最近我又详细梳理了一篇，关注公众号Java技术栈第一时间推送。&lt;/p&gt;
&lt;p&gt;所以，其实这里我一方面是考一下他的设计能力，另一方面我是想了解下他对 JDK 新特性各方面知识的应用和掌握。&lt;/p&gt;
&lt;p&gt;还有更多设计方案，我这里只列了两种，如果你有更多更好的想法，可以在下面参与讨论或者加我微信（ID：&lt;strong&gt;xiaobaito&lt;/strong&gt;）进行交流。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 好的，没事，那你觉得你擅长的技术或者框架有哪一些呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 擅长的啊……（半天没说出来一个）也没什么，就 Java 基础方面还可以吧！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; Java 基础可以是吧，好吧，我问一些 Java 基础方面的问题吧。请问：Java 接口和抽象类的区别是什么？（其实就是上一题的答案）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 呃……（想了半天）好像是抽象类还是接口里面可以写实现方法的吧（不确定的回答）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 到底是哪个可以写实现方法呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; （左右摇头，眼神飘浮不定，不说话了，场面再度陷入尴尬……）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt;（没办法，我要打破这个尴尬场面）你确定是做过 Java 么，这都是非常基础的呀，感觉你基础也不是很好啊！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 哎，来这家公司面试没做准备（一脸无奈）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈长：&lt;/strong&gt; 这样啊，那建议你还是回去好好准备一下吧，因为我们这个岗位是需要有一定技术能力的，所以，非常不好意思……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试者：&lt;/strong&gt; 好的，我明白。&lt;/p&gt;
&lt;p&gt;为了不浪费他的时间，我非常间接的告诉了他直接的结果了，说完然后他顺溜的拿着他的包从洽谈室出去了，头也没回。&lt;/p&gt;
&lt;p&gt;哎，面试其他人，出去的时候都会为我挡下门的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1218593/202009/1218593-20200928084846965-924716352.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;最后我把面试结论和领导说了，领导就说了一句：技术是提前。&lt;/p&gt;
&lt;p&gt;第一次面试一个 39 岁的程序员，干了 15 年，如果还要面试做技术＋管理岗位，这个面试情况确实不理想。也不知道他的真实经历是啥？或许真该清楚认识下自己的定位。&lt;/p&gt;
&lt;p&gt;从刚开始面试的时候有点慌，直到现在写文章，我感觉更慌了，日月如梭，我也快有这么一天了，如果做不到中高层，我也要去和年轻抢饭碗，没办法，这是现实。&lt;/p&gt;
&lt;p&gt;年纪来了，我感觉我自己写代码确实也写不太动了，人也变得越来越焦虑不安，能干嘛去了？生意又不会做！&lt;/p&gt;
&lt;p&gt;唯一能做的就是朝着自已期望的岗位或者目标不断努力，不断的提升自己的硬实力和基本功，越努力越幸运，只要这样才能面对日益焦虑不安的自己，迎接未来更多的机会。&lt;/p&gt;
&lt;p&gt;现在的很多年轻人很厉害啊，年轻有为的不少，但有句话是怎么说的，大器晚成，为时不晚，这样的例子也数不胜数，我想信，只要坚持学习，提升自己，总会有成功的那天。&lt;/p&gt;
&lt;p&gt;最后，如果你喜欢我写的面试系列的文章，也欢迎关注公众号Java技术栈回复 &quot;面试&quot; 阅读我写的往期面试系列文章。&lt;/p&gt;
&lt;p&gt;本文只是代表个人观点，不一定符合所有人，但不喜勿喷。写这篇又干了两三小时，如觉有用，动动小手在看、转发一下，感谢各位老铁支持。&lt;/p&gt;
&lt;p&gt;大家一起加油，共勉！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;近期热文推荐：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;http://www.javastack.cn/article/2020/java15-released/&quot;&gt;Java 15 正式发布， 14 个新特性，刷新你的认知！！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://www.javastack.cn/article/2020/intellij-idea-by-open-source-project/&quot;&gt;终于靠开源项目弄到 IntelliJ IDEA 激活码了，真香！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://www.javastack.cn/article/2020/java-8-optional-map-do-you-know/&quot;&gt;我用 Java 8 写了一段逻辑，同事直呼看不懂，你试试看。。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;http://www.javastack.cn/article/2020/undertow-introduce-with-spring-boot/&quot;&gt;吊打 Tomcat ，Undertow 性能很炸！！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;a href=&quot;http://www.javastack.cn/article/2020/alibaba-release-java-develop-rules-songshan/&quot;&gt;《Java开发手册（嵩山版）》最新发布，速速下载！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;觉得不错，别忘了随手点赞+转发哦！&lt;/p&gt;
</description>
<pubDate>Mon, 28 Sep 2020 00:49:00 +0000</pubDate>
<dc:creator>Java技术栈</dc:creator>
<og:description>本文非广告，也非标题党，栈长最近的亲身面试经历。 招人背景 首先说下公司招人的背景吧，公司要招的是一个研发经理的岗位，负责管理技术团队的各个项目组，领导只给了我两个要求： 1）技术可以 2）管理有一套</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/javastack/p/13743030.html</dc:identifier>
</item>
<item>
<title>收款神器！解读聚合收款码背后的原理 - 楼下小黑哥</title>
<link>http://www.cnblogs.com/goodAndyxublog/p/13743027.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/goodAndyxublog/p/13743027.html</guid>
<description>&lt;p&gt;Hello，我是楼下小黑哥！&lt;/p&gt;
&lt;p&gt;今天跟大家分享一下聚合收款码的支付原理，这也是我这大半年来一直在做的项目。&lt;/p&gt;
&lt;p&gt;微信/支付宝收款码大家应该不会陌生，线下小微商户收款大多使用这个，就比如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084835878-1900620469.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种收款方式很方便，微信、支付宝后台申请开通，然后还可以免费申请相关物料。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084836141-145624609.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;不过这种方式用户体验其实不是很好，之前有好几次拿出支付宝，却扫了微信支付码。&lt;/p&gt;
&lt;p&gt;另外，这种个人的收款码通常还有单日收款的上限，比如支付宝单日上限 500元。&lt;/p&gt;
&lt;p&gt;有了需求，自然会有聪明人人想到解决方案，于是有了聚合收款码产品解决方案,如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084836293-1865437191.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个收款码，支持多种客户端,主流是微信、支付宝，现在常见还会支持银联，QQ 等。&lt;/p&gt;
&lt;p&gt;用户选择任一支持的客户端扫码，都能完成支付，再也不用纠结扫错码的尴尬。&lt;/p&gt;
&lt;p&gt;有没有很神奇？其实底层原理很简单，看完你就明白了，下面就让小黑哥带你解密聚合收款码的底层原理。&lt;/p&gt;
&lt;blockquote readability=&quot;5.5414012738854&quot;&gt;
&lt;p&gt;欢迎关注我的公众号：&lt;strong&gt;程序通事&lt;/strong&gt;，获得日常干货推送。&lt;br/&gt;如果您对我的专题内容感兴趣，也可以关注我的博客：&lt;a href=&quot;https://studyidea.cn&quot;&gt;studyidea.cn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;微信相关支付方式&quot;&gt;微信相关支付方式&lt;/h2&gt;
&lt;p&gt;聚合收款码底层支付其实还是离不开微信、支付宝支持的支付方式，所以我们先从微信支付宝渠道出发，简单介绍这个过程将会使用的支付方式。&lt;/p&gt;
&lt;p&gt;上篇文章，我们以支付宝为例来介绍，这次我们就以微信支付为例。&lt;/p&gt;
&lt;p&gt;打开&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/index.html&quot;&gt;微信支付官网&lt;/a&gt;，可以看到很多支付方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084836565-788134085.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中付款码支付在前两篇文章完整介绍过，这里不再介绍，感兴趣的小伙伴可以看下下面这两篇文章。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/bFqFlMAXW7t_BIZJ9Kft3A&quot;&gt;手机没网了，却还能支付，这是什么原理？|原创&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/De71w6C49YJJb_VXeLL0vw&quot;&gt;轻轻一扫，立刻扣款，付款码背后的原理你不想知道吗？|原创&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先我们介绍一下&lt;strong&gt;微信Native支付&lt;/strong&gt;，引用微信官网的解释：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Native支付是商户系统按微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。该模式适用于PC网站支付、实体店单品或订单支付、媒体广告支付等场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来讲就是商户后台调用微信支付接口，微信返回预支付交易的链接，格式如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;weixin://wxpay/bizpayurl?sr=123456
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后商户将其转为二维码，提供给客户使用微信扫码支付。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084836698-1766666089.jpg&quot; alt=&quot;来自微信支官网&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种支付方式可以应用在 PC 网站购物场景，比如说英雄联盟官网购买相关游戏道具：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084836847-1798138956.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;既然&lt;strong&gt;微信Native支付&lt;/strong&gt;最后可以变成二维码完成支付，那么聚合收款码是不是可以采用&lt;strong&gt;微信Native支付&lt;/strong&gt;这种支付方式呢？&lt;/p&gt;
&lt;p&gt;答案是可以，但是不适合，产品体验不太好。&lt;/p&gt;
&lt;p&gt;最好使用微信支付另外一种支付产品&lt;strong&gt;JSAPI 支付&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;至于原因，不要急，接下去看就会明白。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JSAPI 支付&lt;/strong&gt;，又被称为公众号支付，名词解释引用一下官网介绍：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;JSAPI 支付是用户在微信中打开商户的 H5 页面，商户在 H5 页面通过调用微信支付提供的 JSAPI 接口调起微信支付模块完成支付。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体业务流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084837003-1217243690.jpg&quot; alt=&quot;来自微信支官网&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;日常生活中，很多应用场景使用这种支付方式，比如说：极客时间公众号上购买课程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084837175-1741244885.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种支付方式相对于&lt;strong&gt;微信Native支付&lt;/strong&gt;，比较麻烦，还需要使用微信公众号登录授权功能，以此获取用户的 openid。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084837323-1269436908.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另外当我们调用&lt;strong&gt;微信 JSAPI&lt;/strong&gt; 后台接口，拿到微信返回的相关参数之后，我们还需要使用&lt;strong&gt;微信的 JSSDK&lt;/strong&gt;，这样才能唤起微信支付。&lt;/p&gt;
&lt;h2 id=&quot;聚合收款码核心原理&quot;&gt;聚合收款码核心原理&lt;/h2&gt;
&lt;p&gt;了解完聚合支付的所需要的底层支付方式，下面我们来了解一下聚合收款码的核心原理。&lt;/p&gt;
&lt;p&gt;聚合收款码业务流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084837592-1240017064.jpg&quot; alt=&quot;聚合收款码&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一步用户使用微信/支付宝 APP 扫码之后，将会打开一个收银台页面。&lt;/p&gt;
&lt;p&gt;这个收银台页面可以自适应，不同 APP 显示不同的样式，比如支付宝打开收银台显示支付宝的 logo，微信打开就会显示微信的 logo。&lt;/p&gt;
&lt;p&gt;第二步用户在收银台输入金额，点击支付之后将会唤起 APP 的支付弹窗。&lt;/p&gt;
&lt;p&gt;好了，观察这个流程，我们可以发现扫码之后，后台应用需要识别出当前 APP 到底是微信还是支付宝。&lt;/p&gt;
&lt;p&gt;那如何判断当前使用的 APP 呢？&lt;/p&gt;
&lt;p&gt;其实这个原理很简单，在支付宝/微信打开一个链接，实际将会使用内置的浏览器发起了 HTTP 请求，而 HTTP 的请求头将会携带 &lt;strong&gt;User-Agent(UA)&lt;/strong&gt;，用来标识用户代理软件的应用类型、操作系统、软件开发商以及版本号。&lt;/p&gt;
&lt;p&gt;微信/支付宝中浏览器发起 HTTP 请求，携带的 &lt;strong&gt;User-Agent&lt;/strong&gt; 分别为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;支付宝
UCBrowser/11.5.0.939 UCBS/2.10.1.6 Mobile Safari/537.36 AliApp(AP/10.0.15.051805) AlipayClient/10.0.15.051805 Language/zh-Hans

微信
MQQBrowser/6.2 TBS 043220 Safari/537.36 MicroMessenger/6.5.8.1060 NetType/4G Language/zh_CN
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里需要注意了，不同型号的手机，不同的版本 APP，&lt;strong&gt;User-Agent&lt;/strong&gt; 不一定会一样，其实我们只需要判断是否包含某些关键字即可，比如说只要 &lt;strong&gt;User-Agent&lt;/strong&gt; 包含 &lt;strong&gt;MicroMessenger&lt;/strong&gt; 就是微信，包含 &lt;strong&gt;AlipayClient&lt;/strong&gt; 就是支付宝。&lt;/p&gt;
&lt;p&gt;下面使用 Java 代码为例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;String userAgent = request.getHeader(&quot;user-agent&quot;);
if (Objects.equals(userAgent, &quot;AlipayClient&quot;)) {
    // 支付宝

} else if (Objects.equals(userAgent, &quot;MicroMessenger&quot;)) {
    // 微信
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个问题解决之后，后面的流程就很简单了，只要调用微信/支付宝的 &lt;strong&gt;JSAPI 支付&lt;/strong&gt;接口，拿到相关参数之后，唤起支付。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;准确来讲，支付宝那边 JSAPI 支付官方名称为支付宝生活号支付。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里解释一下上面的问题，为什么聚合收款码不能使用&lt;strong&gt;微信Native支付&lt;/strong&gt;呢？&lt;/p&gt;
&lt;p&gt;主要是因为&lt;strong&gt;微信Native支付&lt;/strong&gt;接口返回是一个微信自定义 schema 协议，只能通过微信扫码打开，唤起支付。&lt;/p&gt;
&lt;p&gt;如何聚合收款码使用&lt;strong&gt;微信Native支付&lt;/strong&gt;，收银台提交金额之后，需要将微信返回交易链接转成二维显示在页面，然后用户使用微信内置识别二维码功能唤起支付。&lt;/p&gt;
&lt;p&gt;这样一来比较影响产品体验，降低支付的成功率。&lt;/p&gt;
&lt;p&gt;支付宝也有类似&lt;strong&gt;微信Native支付&lt;/strong&gt;支付接口-&lt;strong&gt;当面付扫码支付&lt;/strong&gt;，成功调用之后也会返回支付链接。&lt;/p&gt;
&lt;p&gt;那这里可以提大家提个小问题，聚合收款码是否可以使用&lt;strong&gt;支付宝当面付扫码支付&lt;/strong&gt;接口那？&lt;/p&gt;
&lt;ol start=&quot;3&quot;/&gt;&lt;p&gt;答案是可以的，而且体验比&lt;strong&gt;微信Native支付&lt;/strong&gt;好。&lt;/p&gt;
&lt;p&gt;这是因为支付宝返回链接是一个标准 HTTP 连接，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://qr.alipay.com/xxxx
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个链接只要在支付宝内中打开，就可以唤起支付。&lt;/p&gt;
&lt;p&gt;所以如果聚合收款码使用&lt;strong&gt;支付宝当面付扫码支付&lt;/strong&gt;接口，收银台金额提交之后，当拿到支付宝返回的支付链接，应用程序内只要使用 HTTP 302 跳转到支付链接，就可以唤起支付宝支付。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;画外音：之前我也一直以为支付宝跟微信一样，不能使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那这样实际上聚合收款码底层使用支付方式就有了两种方案：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;微信 JSAPI 支付/支付宝生活支付&lt;/li&gt;
&lt;li&gt;微信 JSAPI 支付/支付宝面付扫码支付&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;那如何选择那？&lt;br/&gt;个人建议使用第一种方案，微信、支付宝都采用 JSAPI 支付。&lt;/p&gt;
&lt;p&gt;主要是因为只要 302 跳转唤起支付宝支付，就会关闭我们收银台页面，这样一来整个微信支付与支付宝支付流程就不太一样了&lt;/p&gt;
&lt;p&gt;其次，当用户支付成功之后，JSAPI 支付还可以跳转到一个成功页面，这个页面我们可以支付结果展示，或者骚一点，还可以挂些广告，或者引流其他公号上。&lt;/p&gt;
&lt;p&gt;但是如果使用付宝面付扫码支付，支付完成之后，页面就被关闭了，就没办法完成支付页面跳转。&lt;/p&gt;
&lt;h2 id=&quot;聚合收款码核心流程&quot;&gt;聚合收款码核心流程&lt;/h2&gt;
&lt;p&gt;介绍完原理，下面主要介绍一下市面上主流聚合收款码业务流程，其实聚合收款码可以分为三类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;静态聚合收款码&lt;/li&gt;
&lt;li&gt;动态聚合收款码&lt;/li&gt;
&lt;li&gt;银联静态二维码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;静态聚合收款码就类似如下这种，需要用户主动输入金额，可以无限次使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084837726-948904977.jpg&quot; alt=&quot;静态收款码&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而动态聚合收款码是只能使用一次，并且由商家指定金额，用户只要扫码就可以支付指定金额。&lt;/p&gt;
&lt;p&gt;这种应用场景比如 B 站购买大会员：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084837895-1482620524.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;银联静态二维码其实功能上与静态聚合收款码差不多，但是它多了支持银联支付的功能。&lt;/p&gt;
&lt;p&gt;除了这个以外，最主要的区别是银联静态二维码是银联发码，背后对应的地址是银联的地址，类似如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-http&quot;&gt;https://qr.95516.com/00010000/xxx
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;静态聚合收款码流程&quot;&gt;静态聚合收款码流程&lt;/h3&gt;
&lt;p&gt;静态聚合收款码主要支付流程主要可以分为二步，第一步为登录授权。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084838095-1989649474.jpg&quot; alt=&quot;聚合收款码-登录授权&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的登陆授权一般使用微信、支付宝匿名登录授权功能，这样这个过程普通用户其实是无感知的。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;画外音：如果是程序员的话，可能会感受到这个过程经过了多次跳转。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二步，用户在收银台输入金额之后，应用内部将会创建相应的订单，然后再调用微信/支付宝的 JSAPI 支付。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084838224-844322765.jpg&quot; alt=&quot;聚合收款码-JSAPI支付&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另外，如果支付宝采用面付扫码支付这种支付方式的话，那么其实不需要第一步登录授权了，可以直接跳到收银台发起支付。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084838382-1257375540.jpg&quot; alt=&quot;聚合收款码-支付宝 native 支付&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;动态聚合收款码流程&quot;&gt;动态聚合收款码流程&lt;/h3&gt;
&lt;p&gt;动态聚合收款码其实与静态收款码总体比较类似，只不过创建动态码内部已经创建了相应的订单，后续流程与静态聚合收款码差不多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084838535-1889083978.jpg&quot; alt=&quot;聚合收款码-动态码内部创单&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;银联静态二维码流程&quot;&gt;银联静态二维码流程&lt;/h3&gt;
&lt;p&gt;如果你使用微信、支付宝扫码打开银联二维码，将会打开我们自己收银台页面，后续流程其实跟静态聚合收款码一模一样的。&lt;/p&gt;
&lt;p&gt;但是如果你使用支付银联支付的 APP 扫码，比如说各大银行的手机 APP，美团，京东等，就会在这些 APP 内各自支付页面，然后完成支付。&lt;/p&gt;
&lt;p&gt;我们银联二维码的功能，将会在银联后台报备一个跳转地址，比如说&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://www.heihei.com
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当用户使用微信/支付宝访问银联二维码，银联后台自己识别访问请求 &lt;strong&gt;User-Agent&lt;/strong&gt; ,然后后台根据规则拼接重定向地址。&lt;/p&gt;
&lt;p&gt;拼接规则如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-http&quot;&gt;https://www.heihei.com?qrCode=URLENCODE(https://qr.95516.com/00010000/xxx)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084838683-1907722064.jpg&quot; alt=&quot;聚合收款码-银联二维码扫码流程&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;聚合收款码统一了用户支付流程，提高商家的收款效率。&lt;/p&gt;
&lt;p&gt;另外聚合收款码其实还可以跟商家后台一些 ERP 等软件打通，这样还提高的商家生产效率。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;不得不说，第一个设计出聚合收款码的的产品，真实个鬼才~&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;聚合收款码，背后原理一点也不难，根据用访问请求的 &lt;strong&gt;User-Agent&lt;/strong&gt; ，以此判断用户当前扫码使用的客户端类型。&lt;/p&gt;
&lt;p&gt;然后调用微信/支付宝匿名登录获取用户 id，最后用户输入金额之后，调用微信/支付宝完成支付。&lt;/p&gt;
&lt;p&gt;好了，今天文章介绍到这里，最后，点个赞再走吧~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202009/1419561-20200928084838832-1765733832.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;嘻嘻，国庆就要到了，大家再熬几天！！！&lt;/p&gt;
&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/index.html&quot;&gt;https://pay.weixin.qq.com/wiki/doc/api/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opendocs.alipay.com/open/194&quot;&gt;https://opendocs.alipay.com/open/194&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html&quot;&gt;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5.5384615384615&quot;&gt;
&lt;p&gt;欢迎关注我的公众号：程序通事，获得日常干货推送。如果您对我的专题内容感兴趣，也可以关注我的博客：&lt;a href=&quot;https://studyidea.cn&quot;&gt;studyidea.cn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 28 Sep 2020 00:49:00 +0000</pubDate>
<dc:creator>楼下小黑哥</dc:creator>
<og:description>Hello，我是楼下小黑哥！ 今天跟大家分享一下聚合收款码的支付原理，这也是我这大半年来一直在做的项目。 微信/支付宝收款码大家应该不会陌生，线下小微商户收款大多使用这个，就比如下图。 这种收款方式很</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/goodAndyxublog/p/13743027.html</dc:identifier>
</item>
<item>
<title>Kubernetes K8S之存储Secret详解 - 踏歌行666</title>
<link>http://www.cnblogs.com/zhanglianghhh/p/13743024.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanglianghhh/p/13743024.html</guid>
<description>
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;K8S之存储Secret概述与类型说明，并详解常用Secret示例&lt;/p&gt;
&lt;/blockquote&gt;


&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务器名称(hostname)&lt;/th&gt;
&lt;th&gt;系统版本&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;内网IP&lt;/th&gt;
&lt;th&gt;外网IP(模拟)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;k8s-master&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.110&lt;/td&gt;
&lt;td&gt;10.0.0.110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node01&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.111&lt;/td&gt;
&lt;td&gt;10.0.0.111&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node02&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.112&lt;/td&gt;
&lt;td&gt;10.0.0.112&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Secret解决了密码、token、秘钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。&lt;span&gt;Secret可以以Volume或者环境变量的方式使用&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;用户可以创建 secret，同时系统也创建了一些 secret。&lt;/p&gt;
&lt;p&gt;要使用 secret，pod 需要引用 secret。Pod 可以用两种方式使用 secret：作为 volume 中的文件被挂载到 pod 中的一个或者多个容器里，或者当 kubelet 为 pod 拉取镜像时使用。&lt;/p&gt;

&lt;h2 id=&quot;Secret类型&quot;&gt;Secret类型&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Service Account：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的 /run/secrets/kubernetes.io/serviceaccount 目录中。&lt;/li&gt;
&lt;li&gt;Opaque：base64编码格式的Secret，用来存储密码、秘钥等。&lt;/li&gt;
&lt;li&gt;kubernetes.io/dockerconfigjson：用来存储私有docker registry的认证信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过kube-proxy查看&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ~]# kubectl get pod -A | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;kube-proxy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;span&gt; 2&lt;/span&gt; kube-system            kube-proxy-6bfh7                             &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;12&lt;/span&gt;&lt;span&gt;         7d3h
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; kube-system            kube-proxy-6vfkf                             &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;11&lt;/span&gt;&lt;span&gt;         7d3h
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; kube-system            kube-proxy-bvl9n                             &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;11&lt;/span&gt;&lt;span&gt;         7d3h
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; [root@k8s-master ~&lt;span&gt;]# 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [root@k8s-master ~]# kubectl exec -it -n kube-system kube-proxy-6bfh7 -- /bin/&lt;span&gt;sh&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; # &lt;span&gt;ls&lt;/span&gt; -l /run/secrets/kubernetes.io/&lt;span&gt;serviceaccount
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; total &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; lrwxrwxrwx &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;13&lt;/span&gt; Jun  &lt;span&gt;8&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt; ca.crt -&amp;gt; ..data/&lt;span&gt;ca.crt
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; lrwxrwxrwx &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;16&lt;/span&gt; Jun  &lt;span&gt;8&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt; namespace -&amp;gt; ..data/&lt;span&gt;namespace
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; lrwxrwxrwx &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;12&lt;/span&gt; Jun  &lt;span&gt;8&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt; token -&amp;gt; ..data/token
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;创建secret&quot;&gt;创建secret&lt;/h2&gt;
&lt;p&gt;手动加密，基于base64加密&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ~]# &lt;span&gt;echo&lt;/span&gt; -n &lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; |&lt;span&gt; base64
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; YWRtaW4=
&lt;span&gt;3&lt;/span&gt; [root@k8s-master ~]# &lt;span&gt;echo&lt;/span&gt; -n &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1f2d1e2e67df&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; |&lt;span&gt; base64
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; MWYyZDFlMmU2N2Rm
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;secret
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; secret.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Secret
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  name: mysecret
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;type: Opaque
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;data:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   username: YWRtaW4=
&lt;span&gt;11&lt;/span&gt;   password: MWYyZDFlMmU2N2Rm
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或者通过如下命令行创建【secret名称故意设置不一样，以方便查看对比】，生成secret后会自动加密，而非明文存储。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
kubectl create secret generic db-user-pass --from-literal=username=admin --from-literal=password=1f2d1e2e67df
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;生成secret，并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# kubectl apply -&lt;span&gt;f secret.yaml 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; secret/&lt;span&gt;mysecret created
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# kubectl get secret   ### 查看默认名称空间的secret简要信息
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;NAME                  TYPE                                  DATA   AGE
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; basic-auth            Opaque                                &lt;span&gt;1&lt;/span&gt;&lt;span&gt;      2d12h
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; default-token-v48g4   kubernetes.io/service-account-token   &lt;span&gt;3&lt;/span&gt;&lt;span&gt;      27d
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; mysecret              Opaque                                &lt;span&gt;2&lt;/span&gt;&lt;span&gt;      23s  ### 可见已创建
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; tls-secret            kubernetes.io/tls                     &lt;span&gt;2&lt;/span&gt;&lt;span&gt;      3d2h
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; [root@k8s-master secret]# kubectl get secret mysecret -&lt;span&gt;o yaml     ### 查看mysecret详细信息
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;data:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  password: MWYyZDFlMmU2N2Rm
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;   username: YWRtaW4=
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;kind: Secret
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  annotations:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     kubectl.kubernetes.io/&lt;span&gt;last&lt;/span&gt;-applied-configuration: |
&lt;span&gt;20&lt;/span&gt;       {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MWYyZDFlMmU2N2Rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;YWRtaW4=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Secret&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;annotations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysecret&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Opaque&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;   creationTimestamp: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2020-06-08T14:08:59Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;  name: mysecret
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;   resourceVersion: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;987419&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;   selfLink: /api/v1/namespaces/default/secrets/&lt;span&gt;mysecret
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;   uid: 27b58929-71c4-495b-99a5-&lt;span&gt;0d411910a529
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;type: Opaque
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# kubectl describe secret mysecret     ### 查看描述信息
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;Name:         mysecret
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;Namespace:    default
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; Labels:       &amp;lt;none&amp;gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;Annotations:  
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;Type:         Opaque
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;Data
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; ====
&lt;span&gt;38&lt;/span&gt; password:  &lt;span&gt;12&lt;/span&gt;&lt;span&gt; bytes
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; username:  &lt;span&gt;5&lt;/span&gt; bytes
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;将Secret挂载到Volume中&quot;&gt;将Secret挂载到Volume中&lt;/h2&gt;
&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;secret
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; pod_secret_volume.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Pod
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: pod-secret-&lt;span&gt;volume
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  containers:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   -&lt;span&gt; name: myapp
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     image: registry.cn-beijing.aliyuncs.com/google_registry/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    volumeMounts:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     - name: secret-&lt;span&gt;volume
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       mountPath: /etc/&lt;span&gt;secret
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;       readOnly: &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  volumes:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   - name: secret-&lt;span&gt;volume
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    secret:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;       secretName: mysecret
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动pod并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master secret]# kubectl apply -&lt;span&gt;f pod_secret_volume.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; pod/pod-secret-&lt;span&gt;volume created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master secret]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;NAME                READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; pod-secret-volume   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          16s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.159&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看secret信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master secret]# kubectl exec -it pod-secret-volume -- /bin/&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; / # &lt;span&gt;ls&lt;/span&gt; /etc/&lt;span&gt;secret
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;password  username
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; / # &lt;span&gt;cat&lt;/span&gt; /etc/secret/&lt;span&gt;username
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; admin/&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; /&lt;span&gt; # 
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; / # &lt;span&gt;cat&lt;/span&gt; /etc/secret/&lt;span&gt;password
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; 1f2d1e2e67df/ #
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由上可见，在pod中的secret信息实际已经被解密。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;将Secret导入到环境变量中&quot;&gt;将Secret导入到环境变量中&lt;/h2&gt;
&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;secret
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; pod_secret_env.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Pod
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: pod-secret-&lt;span&gt;env&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  containers:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   -&lt;span&gt; name: myapp
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     image: registry.cn-beijing.aliyuncs.com/google_registry/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;env&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     -&lt;span&gt; name: SECRET_USERNAME
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;      valueFrom:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        secretKeyRef:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;          name: mysecret
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;          key: username
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     -&lt;span&gt; name: SECRET_PASSWORD
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      valueFrom:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        secretKeyRef:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;          name: mysecret
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;          key: password
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;   restartPolicy: Never
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动pod并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master secret]# kubectl apply -&lt;span&gt;f pod_secret_env.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; pod/pod-secret-&lt;span&gt;env&lt;/span&gt;&lt;span&gt; created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master secret]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;NAME             READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; pod-secret-&lt;span&gt;env&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          6s    &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.160&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看secret信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# kubectl exec -it pod-secret-&lt;span&gt;env&lt;/span&gt; -- /bin/&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; / # &lt;span&gt;env&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; HOME=/&lt;span&gt;root
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; SECRET_PASSWORD=&lt;span&gt;1f2d1e2e67df    ### secret信息
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; MYAPP_SVC_PORT_80_TCP=tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10.98.57.156:80&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; TERM=&lt;span&gt;xterm
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; NGINX_VERSION=&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; KUBERNETES_PORT_443_TCP_ADDR=&lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/&lt;span&gt;bin
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; KUBERNETES_PORT_443_TCP_PORT=&lt;span&gt;443&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; KUBERNETES_PORT_443_TCP_PROTO=&lt;span&gt;tcp
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; MYAPP_SVC_SERVICE_HOST=&lt;span&gt;10.98&lt;/span&gt;.&lt;span&gt;57.156&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; SECRET_USERNAME=&lt;span&gt;admin    ### secret信息
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; KUBERNETES_PORT_443_TCP=tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10.96.0.1:443&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; ………………
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由上可见，在pod中的secret信息实际已经被解密。&lt;/span&gt;&lt;/p&gt;


&lt;h2 id=&quot;harbor镜像仓库&quot;&gt;harbor镜像仓库&lt;/h2&gt;
&lt;p&gt;首先使用harbor搭建镜像仓库，搭建部署过程参考：「&lt;a href=&quot;https://www.cnblogs.com/zhanglianghhh/p/13205786.html&quot; target=&quot;_blank&quot;&gt;Harbor企业级私有Docker镜像仓库部署&lt;/a&gt;」&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;harbor部分配置文件信息&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master harbor]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/App/&lt;span&gt;harbor
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master harbor]# vim harbor.yml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; # Configuration &lt;span&gt;file&lt;/span&gt;&lt;span&gt; of Harbor
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;hostname&lt;/span&gt;: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;# http related config
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;http:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   # port &lt;span&gt;for&lt;/span&gt; http, default is &lt;span&gt;80&lt;/span&gt;&lt;span&gt;. If https enabled, this port will redirect to https port
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   port: &lt;span&gt;5000&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;# https related config
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;https:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;   # https port &lt;span&gt;for&lt;/span&gt; harbor, default is &lt;span&gt;443&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   port: &lt;span&gt;443&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;   # The path of cert and key files &lt;span&gt;for&lt;/span&gt;&lt;span&gt; nginx
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   certificate: /etc/harbor/cert/&lt;span&gt;httpd.crt
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;   private_key: /etc/harbor/cert/&lt;span&gt;httpd.key
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; harbor_admin_password: Harbor12345
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;启动harbor后客户端http设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;集群所有机器都要操作&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ~]# vim /etc/docker/&lt;span&gt;daemon.json
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exec-opts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;native.cgroupdriver=systemd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log-driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json-file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log-opts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;max-size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insecure-registries&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.16.1.110:5000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master ~&lt;span&gt;]# 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; [root@k8s-master ~]# systemctl restart docker   # 重启docker服务
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 添加了 “insecure-registries”: [“172.16.1.110:5000”] 这行，其中172.16.1.110为内网IP地址。该文件必须符合 json 规范，否则 Docker 将不能启动。&lt;/p&gt;
&lt;p&gt;如果在Harbor所在的机器重启了docker服务，记得要重新启动Harbor。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创建「私有」仓库&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200928084254635-1852476315.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/strong&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;镜像上传&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;29&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; docker pull registry.cn-beijing.aliyuncs.com/google_registry/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; docker tag registry.cn-beijing.aliyuncs.com/google_registry/myapp:v1 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;# 登录
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; docker &lt;span&gt;login&lt;/span&gt; &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt; -u admin -&lt;span&gt;p Harbor12345
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;# 上传
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; docker push &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/myapp:v1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200928084324114-1106422618.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;退出登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之后在操作机上退出harbor登录，便于后面演示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;### 退出harbor登录
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; [root@k8s-node02 ~]# docker logout &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; Removing &lt;span&gt;login&lt;/span&gt; credentials &lt;span&gt;for&lt;/span&gt; &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;### 拉取失败，需要先登录。表明完成准备工作
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; [root@k8s-master secret]# docker pull &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; Error response from daemon: pull access denied &lt;span&gt;for&lt;/span&gt; &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/myapp, repository does not exist or may require &lt;span&gt;'&lt;/span&gt;&lt;span&gt;docker login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: denied: requested access to the resource is denied
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pod直接下载镜像&quot;&gt;pod直接下载镜像&lt;/h2&gt;
&lt;p&gt;在yaml文件中指定image后，直接启动pod&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;secret
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; pod_secret_registry.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Pod
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: pod-secret-&lt;span&gt;registry
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  containers:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   -&lt;span&gt; name: myapp
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     image: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/myapp:v1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动pod并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# kubectl apply -&lt;span&gt;f pod_secret_registry.yaml 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; pod/pod-secret-&lt;span&gt;registry created
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master secret]# kubectl get pod -&lt;span&gt;o wide     ### 可见镜像下载失败
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;NAME                  READY   STATUS             RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; pod-secret-registry   &lt;span&gt;0&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     ImagePullBackOff   &lt;span&gt;0&lt;/span&gt;          7s    &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.161&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt; 7&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [root@k8s-master secret]# kubectl describe pod pod-secret-&lt;span&gt;registry     ### 查看pod详情
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; Name:         pod-secret-&lt;span&gt;registry
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;Namespace:    default
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; Priority:     &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; Node:         k8s-node02/&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.112&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; Start Time:   Mon, &lt;span&gt;08&lt;/span&gt; Jun &lt;span&gt;2020&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; Labels:       &amp;lt;none&amp;gt;
&lt;span&gt;15&lt;/span&gt; Annotations:  kubectl.kubernetes.io/&lt;span&gt;last&lt;/span&gt;-applied-&lt;span&gt;configuration:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;annotations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pod-secret-registry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;containers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i...&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;Status:       Pending
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; IP:           &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.161&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;IPs:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;   IP:  &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.161&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;Containers:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;  myapp:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    Container ID:   
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     Image:          &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    Image ID:       
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;Events:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;  Type     Reason     Age                From                 Message
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;   ----     ------     ----               ----                 -------
&lt;span&gt;30&lt;/span&gt;   Normal   Scheduled  23s                default-scheduler    Successfully assigned default/pod-secret-registry to k8s-&lt;span&gt;node02
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;   Normal   BackOff    19s (x2 over 20s)  kubelet, k8s-node02  Back-off pulling image &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.16.1.110:5000/k8s-secret/myapp:v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;   Warning  Failed     19s (x2 over 20s)  kubelet, k8s-&lt;span&gt;node02  Error: ImagePullBackOff
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;   Normal   Pulling    9s (x2 over 21s)   kubelet, k8s-node02  Pulling image &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.16.1.110:5000/k8s-secret/myapp:v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;   Warning  Failed     9s (x2 over 21s)   kubelet, k8s-node02  Failed to pull image &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.16.1.110:5000/k8s-secret/myapp:v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: rpc error: code = Unknown desc = Error response from daemon: pull access denied &lt;span&gt;for&lt;/span&gt; &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/myapp, repository does not exist or may require &lt;span&gt;'&lt;/span&gt;&lt;span&gt;docker login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: denied: requested access to the resource is denied
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;   Warning  Failed     9s (x2 over 21s)   kubelet, k8s-&lt;span&gt;node02  Error: ErrImagePull
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; [root@k8s-master secret]# kubectl delete -f pod_secret_registry.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可见拉取私有镜像失败。&lt;/p&gt;

&lt;h2 id=&quot;pod通过Secret下载镜像&quot;&gt;pod通过Secret下载镜像&lt;/h2&gt;
&lt;p&gt;通过命令行创建Secret，并查看其描述信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# kubectl create secret docker-registry myregistrysecret --docker-server=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;172.16.1.110:5000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; --docker-username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; --docker-password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Harbor12345&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;span&gt; 2&lt;/span&gt; secret/&lt;span&gt;myregistrysecret created
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]#
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# kubectl get secret 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;NAME                  TYPE                                  DATA   AGE
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; basic-auth            Opaque                                &lt;span&gt;1&lt;/span&gt;&lt;span&gt;      2d14h
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; default-token-v48g4   kubernetes.io/service-account-token   &lt;span&gt;3&lt;/span&gt;&lt;span&gt;      27d
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; myregistrysecret      kubernetes.io/dockerconfigjson        &lt;span&gt;1&lt;/span&gt;&lt;span&gt;      8s    # 刚刚创建的
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; mysecret              Opaque                                &lt;span&gt;2&lt;/span&gt;&lt;span&gt;      118m
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; tls-secret            kubernetes.io/tls                     &lt;span&gt;2&lt;/span&gt;&lt;span&gt;      3d4h
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; [root@k8s-master secret]# kubectl get secret myregistrysecret -&lt;span&gt;o yaml     ### 查看详细信息
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;data:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;   .dockerconfigjson: eyJhdXRocyI6eyIxMC4wLjAuMTEwOjUwMDAiOnsidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiSGFyYm9yMTIzNDUiLCJhdXRoIjoiWVdSdGFXNDZTR0Z5WW05eU1USXpORFU9In19fQ==
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;kind: Secret
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;   creationTimestamp: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2020-06-08T16:07:32Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;  name: myregistrysecret
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;   resourceVersion: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1004582&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;   selfLink: /api/v1/namespaces/default/secrets/&lt;span&gt;myregistrysecret
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;   uid: b95f4386-64bc-4ba3-b43a-&lt;span&gt;08afb1c1eb9d
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; type: kubernetes.io/&lt;span&gt;dockerconfigjson
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# kubectl describe secret myregistrysecret     ### 查看描述信息
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;Name:         myregistrysecret
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;Namespace:    default
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; Labels:       &amp;lt;none&amp;gt;
&lt;span&gt;30&lt;/span&gt; Annotations:  &amp;lt;none&amp;gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; Type:  kubernetes.io/&lt;span&gt;dockerconfigjson
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;Data
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; ====
&lt;span&gt;36&lt;/span&gt; .dockerconfigjson:  &lt;span&gt;109&lt;/span&gt; bytes
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;修改之前的yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; pod_secret_registry.yaml 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;kind: Pod
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   name: pod-secret-&lt;span&gt;registry
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  containers:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   -&lt;span&gt; name: myapp
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     image: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  imagePullSecrets:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   - name: myregistrysecret
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动pod并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master secret]# kubectl apply -&lt;span&gt;f pod_secret_registry.yaml 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; pod/pod-secret-&lt;span&gt;registry created
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master secret]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;NAME                  READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; pod-secret-registry   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          8s    &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.162&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt; 7&lt;/span&gt; [root@k8s-&lt;span&gt;master secret]# 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [root@k8s-master secret]# kubectl describe pod pod-secret-&lt;span&gt;registry
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; Name:         pod-secret-&lt;span&gt;registry
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;Namespace:    default
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; Priority:     &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; Node:         k8s-node02/&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.112&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; Start Time:   Tue, &lt;span&gt;09&lt;/span&gt; Jun &lt;span&gt;2020&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; Labels:       &amp;lt;none&amp;gt;
&lt;span&gt;15&lt;/span&gt; Annotations:  kubectl.kubernetes.io/&lt;span&gt;last&lt;/span&gt;-applied-&lt;span&gt;configuration:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;annotations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pod-secret-registry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;containers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i...&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;Status:       Running
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; IP:           &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.162&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;IPs:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;   IP:  &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.162&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;Containers:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;  myapp:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     Container ID:   docker:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ef4d42f1f1616a44c2a6c0a5a71333b27f46dfe76eb392962813a28d69150c00&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     Image:          &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.110&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/k8s-secret/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     Image ID:       docker-pullable:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;172.16.1.110:5000/k8s-secret/myapp@sha256:9eeca44ba2d410e54fccc54cbe9c021802aa8b9836a0bcf3d3229354e4c8870e&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     Port:           &amp;lt;none&amp;gt;
&lt;span&gt;27&lt;/span&gt;     Host Port:      &amp;lt;none&amp;gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    State:          Running
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;       Started:      Tue, &lt;span&gt;09&lt;/span&gt; Jun &lt;span&gt;2020&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    Ready:          True
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     Restart Count:  &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     Environment:    &amp;lt;none&amp;gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    Mounts:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;       /var/run/secrets/kubernetes.io/serviceaccount from default-token-&lt;span&gt;v48g4 (ro)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;Conditions:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;  Type              Status
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;  Initialized       True 
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;  Ready             True 
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;  ContainersReady   True 
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;  PodScheduled      True 
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;Volumes:
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;   default-token-&lt;span&gt;v48g4:
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    Type:        Secret (a volume populated by a Secret)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     SecretName:  default-token-&lt;span&gt;v48g4
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     Optional:    &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;QoS Class:       BestEffort
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; Node-Selectors:  &amp;lt;none&amp;gt;
&lt;span&gt;48&lt;/span&gt; Tolerations:     node.kubernetes.io/not-ready:NoExecute &lt;span&gt;for&lt;/span&gt;&lt;span&gt; 300s
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                  node.kubernetes.io/unreachable:NoExecute &lt;span&gt;for&lt;/span&gt;&lt;span&gt; 300s
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;Events:
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;  Type    Reason     Age   From                 Message
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;   ----    ------     ----  ----                 -------
&lt;span&gt;53&lt;/span&gt;   Normal  Scheduled  22s   default-scheduler    Successfully assigned default/pod-secret-registry to k8s-&lt;span&gt;node02
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;   Normal  Pulling    22s   kubelet, k8s-node02  Pulling image &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.16.1.110:5000/k8s-secret/myapp:v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;   Normal  Pulled     22s   kubelet, k8s-node02  Successfully pulled image &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.16.1.110:5000/k8s-secret/myapp:v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;   Normal  Created    22s   kubelet, k8s-&lt;span&gt;node02  Created container myapp
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;   Normal  Started    21s   kubelet, k8s-node02  Started container myapp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由上可见，通过secret认证后pod拉取私有镜像是可以的。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;1、&lt;a href=&quot;https://www.cnblogs.com/zhanglianghhh/p/13205786.html&quot; target=&quot;_blank&quot;&gt;Harbor企业级私有Docker镜像仓库部署&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;———END———&lt;br/&gt;如果觉得不错就关注下呗 (-^O^-) ！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200928084708534-32541627.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 28 Sep 2020 00:48:00 +0000</pubDate>
<dc:creator>踏歌行666</dc:creator>
<og:description>K8S之存储Secret概述与类型说明，并详解常用Secret示例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhanglianghhh/p/13743024.html</dc:identifier>
</item>
<item>
<title>关于大数据技术的一点思考 - 等你归去来</title>
<link>http://www.cnblogs.com/yougewe/p/13743020.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yougewe/p/13743020.html</guid>
<description>
&lt;p&gt;      大数据技术在当下时代，已经不算是什么新鲜东西了。但绝大部分同学往往又是没机会接触大数据相关底层技术的，包括我自己。&lt;/p&gt;
&lt;p&gt;      不过，俗话说没吃过猪肉还没见过猪跑吗？哈哈，今天就来说说我对大数据技术的思考吧，希望会给部分同学解开一些迷惑！&lt;/p&gt;

&lt;h3&gt;1.什么是大数据？&lt;/h3&gt;
&lt;p&gt;　　 我们不搞虚的：大数据就是数据量比较大的场景，比如上TB或者PB级别以上的，基本就要归属于大数据的范畴了。&lt;/p&gt;
&lt;p&gt;　　所以，如果你用关系型 数据库处理以上级别的数据，做了很多优化，这又何尝不是一种大数据处理技术呢？&lt;/p&gt;
&lt;p&gt;　　所以，大数据只是一种场景而已。&lt;/p&gt;

&lt;h3&gt;2.大数据技术是什么？&lt;/h3&gt;
&lt;p&gt;　　大数据技术就是处理超级大数据情况下使用到的一系列技术框架，手段。开源的或主流的方案目前就是hadoop生态技术，如mapreduce、spark、flink，存储如hbase，hive，kylin，调度如yarn，oozie、azkaban，消息中间件发中kafka；&lt;/p&gt;
&lt;p&gt;　　为什么有这么多技术呢？实际上因为有这么多的场景问题需要解决，而在大数据领域内，又没办法让一个框架做完所有的事，所以就将这些场景进行了拆分，形成了各种独立的技术。而已。&lt;/p&gt;
&lt;p&gt;　　所以，大数据技术实际上是领域细分的结果。&lt;/p&gt;

&lt;h3&gt;3.为什么会有大数据技术？&lt;/h3&gt;
&lt;p&gt;　　前面说了，大数据只是一个应用场景，只是当数据量超过一定量级之后的结果。它并没有许多特别的业务诉求，所以理论上它的需求点不会多于业务前端。&lt;/p&gt;
&lt;p&gt;　　那么为什么还必须要大数据技术？实际上是因为，数据量超过一定量级后，前端系统已经没有办法提供业务支持了，所以在这种场景下业务需求就没办法再往前端堆砌了。不是少堆砌，而是一点也不能了。这种情况持续了许多年，大家一直在保持数据尽量小的边缘反复试探，反复删库跑路。&lt;/p&gt;
&lt;p&gt;　　所以，有时候我们说，发现问题时就已离解决问题也不远了，实际也不一定，你总有无能为力的时候。&lt;/p&gt;
&lt;p&gt;　　所以，大数据虽只是一个场景，但大数据技术是必须的，因为只有它能处理这个场景。这就是宿命。&lt;/p&gt;

&lt;h3&gt;4.大数据技术的原理是什么？&lt;/h3&gt;
&lt;p&gt;　　这个问题那是大得不能再大了，可以用无言以对来形容。&lt;/p&gt;
&lt;p&gt;　　尽管如此，我还是想说两句：大数据技术的核心原理是并行计算和分布式存储。就问你大不大？哈哈。&lt;/p&gt;
&lt;p&gt;　　我们可以用大白话翻译一下：大数据技术的核心逻辑，第一：是使用了许多台机器一起参与运算。从而使我们原来在一台机器无法处理完成或需要几天几个月的时间才能完成的任务，被分摊到这多台机器上，这是显而易见的事情。第二：使用了多台机器一起存储数据，从而解决了原来一台机器无法存储的容量或要求超级计算机才能存储的容量的问题。这也是显而易见的，一台机器存储不了，那就两台，不行就再加。&lt;/p&gt;
&lt;p&gt;　　以上，就是我认为的大数据技术的核心原理。而要达到上面两个核心原理，又都必须有一个能力：任意横向扩展；这些问题处理的复杂性，造就了大数据技术的庞大与复杂。&lt;/p&gt;

&lt;h3&gt;5.大数据系统构建的几个核心问题？&lt;/h3&gt;
&lt;p&gt;　　很明显，大数据技术解决问题的场景基本已定。如果能够把这几个问题解决好，那么这就是一个好的技术系统。&lt;/p&gt;
&lt;p&gt;　　但我还得重申几个问题：&lt;/p&gt;
&lt;p&gt;　　　　- 是否为前端提供服务？&lt;/p&gt;
&lt;p&gt;　　　　- 数据来源是啥？&lt;/p&gt;
&lt;p&gt;　　　　- 能够对外输出什么？&lt;/p&gt;
&lt;p&gt;　　　　- 目标用户是谁？&lt;/p&gt;
&lt;p&gt;　　　　- 核心功能是啥？&lt;/p&gt;
&lt;p&gt;　　　　- 性价比如何？&lt;/p&gt;
&lt;p&gt;　　上面几个问题，有些是轻而易举能就能问答的问题，比如：一般不会直接为前端提供服务，数据源往往来自于各种各样的存储系统，消息系统。但后面几个问题比较难答了。如果这几个问题想不清楚，那也许你的大数据据系统可能就是无谓地浪费而已。因为很明显的，大数据系统的支出是不便宜的，并行计算和分布式存储，至少需要的是大量带宽和磁盘容量（而且可能要求SSD这种昂贵的盘），还有其他许多隐形支出。&lt;/p&gt;

&lt;h3&gt;6.大数据技术的几个大变迁感受&lt;/h3&gt;
&lt;p&gt;　　让整个大数据生态燃起希望的，是hadoop的出现，实际上，hadoop在出现之初就已经解决了两大核心问题：并行计算与分布式存储。它提供的hdfs分布文件文件存储系统，已经是不可憾动的基石（个人感觉，不一定准确）。而它提供的并行计算mapreduce，在出现之初也是非常牛逼的，但那是在没得选的时候。可能是由于它用一套系统完成了所有的事，显得统一的同时，恰好又显得臃肿，于是又显得不够好。hadoop的出现是一个质的改变！&lt;/p&gt;
&lt;p&gt;　　有了先驱者，后来者便蜂拥而上，不停地完善其中的不足，尤其是一眼就看到的分布式计算mr。而限制mr的一个重要原因则是基于磁盘的数据交换。&lt;/p&gt;
&lt;p&gt;　　于是，spark出现了，它的核心或者初衷是解决了mr运算速度的问题，因为它是尽可能基于内存的数据交换，和磁盘速度相比自然有一个量级的提升。不要小看这一个量级，有的东西的前提就是基于这一个量级（比如超过一天就无效，而在几小时内则是有效的）。而后又有了spark生态圈的繁荣昌盛，极大推动了大数据生态的发展。spark可以说也是一个质的改变。&lt;/p&gt;
&lt;p&gt;　　但spark遇到了一个难以解决的问题，即它的架构是基于批处理的，批处理领域无可挑剔，挑剔的是人。人们要求大数据系统能够实时反馈业务变化，于是spark尴尬了，于是storm出现了。（不了解）&lt;/p&gt;
&lt;p&gt;　　flink找到了批处理与流处理的间隙，一把杀向市场，提出了批流合一，再加上各大厂商的鼎力相助，于是乎发展得如火如荼。但我只能给它打个中等分数，因为它只能算得量变而算不得质变。&lt;/p&gt;
&lt;p&gt;　　花开两朵，话分两头。在另一条线上，分布式存储也发生了变化，如hive，pig，hbase，cassandra，presto，impala，sparksql，kylin, flinksql... &lt;/p&gt;

&lt;p&gt;　　更多。。。  太多。。。&lt;/p&gt;
</description>
<pubDate>Mon, 28 Sep 2020 00:47:00 +0000</pubDate>
<dc:creator>等你归去来</dc:creator>
<og:description>大数据技术在当下时代，已经不算是什么新鲜东西了。但绝大部分同学往往又是没机会接触大数据相关底层技术的，包括我自己。 不过，俗话说没吃过猪肉还没见过猪跑吗？哈哈，今天就来说说我对大数据技术的思考吧，希望</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/yougewe/p/13743020.html</dc:identifier>
</item>
<item>
<title>全世界最强的算法平台codeforces究竟有什么魅力？ - TechFlow2019</title>
<link>http://www.cnblogs.com/techflow/p/13742997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/techflow/p/13742997.html</guid>
<description>&lt;section id=&quot;nice&quot; data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; readability=&quot;93.509332489718&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，之前说过由于和LeetCode结了梁子，所以&lt;strong&gt;周末的LeetCode专题取消了&lt;/strong&gt;，给大家写点其他专题的算法问题。目前选择的是国外著名的编程竞赛平台——codeforces。它在竞赛圈名气比较大，对于普通大学生而言可能了解不多。所以今天这篇文章简单和大家介绍一下codeforces这个网站，以及它的使用方法。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链接：codeforces.com&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;codeforces简介&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单介绍一下codeforces这个网站，codeforces位于&lt;strong&gt;宇宙编程最强&lt;/strong&gt;的毛国。据说最早是由俄罗斯的一群大学生维护的，它最大的特点就是代码和题解的公开。所有人都可以随意查看其它大牛的代码，可以说是非常具有开源精神了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;codeforces很大的特点就是题目兼容并蓄，什么难度等级的题目都可以找到。并且题目很有意思，往往思维陷阱比较多，也就是思维题比较多。对于数据结构以及算法的考察相对弱一些，更多的时候往往是告诉你用什么算法你也不知道怎么做……&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;codeforces另外一个很大的特点就是它有自己的&lt;strong&gt;上分系统&lt;/strong&gt;，基本上每周会举办一到两次在线的算法比赛。一般的比赛时长是两个小时，只要注册账号就可以免费参加。我记得当年第一次参加比赛会获得一个初始分是1500，然后根据你在比赛当中的表现上分或者减分。由于参加的选手水平实力强度不一，所以它开设了好几个档次(div)，不同层次的选手面对的题目难度也不一样，这样保证了大家都可以愉快地参赛。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这块内容比较重要，我们放在后面详细介绍。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;基本功能&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简介介绍一下codeforces当中的功能以及页面，这个是首页的banner，我们挑几个比较重要的来介绍一下。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1giflp7eqkqj31dc07ojsw.jpg&quot; alt=&quot;&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;TOP&lt;/span&gt;&lt;/h4&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是Top，top里基本上是大牛放出来的一些资料、博客和题解什么的。比如下图就是一个大牛整理的一些算法和数据结构的经典问题整理。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1giflxxdpm6j318a0qcdle.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里面干货还是很多的，但是由于是国外的网站，所以显然肯定是&lt;strong&gt;全英文&lt;/strong&gt;的。不过也不要惧怕，大家都是技术男，而且大多数不是native。描述一个问题或者是算法的时候也不会使用太晦涩的单词，所以还是蛮好懂的。另外现在在线翻译功能也很发达，我当年英语很差的时候都没什么压力，所以大家也不要担心。&lt;/p&gt;
&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;contest&lt;/span&gt;&lt;/h4&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个重要的栏目是contest，里面是正在进行以及过去举办过的线上比赛。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gifm1zmn3ij31390u0tfr.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上图就是目前的一个比赛安排计划，即将开始的比赛会多出来一个&lt;strong&gt;register按钮&lt;/strong&gt;，让大家注册参加。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比赛名称后面括号里div表示的是难度等级，div1是最高难度。需要有1900以上的rating才可以报名。div2难度会简单很多，基本上学过算法和数据结构都可以进去做个一两题。div2的比赛前两题基本上都不涉及什么算法，主要是考验思维。一般到了C题之后才会考察一些算法和数据结构。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gifm46aanpj31ga0t245n.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这张图是之前举办过的比赛，我们也可以点进去练习，它还提供&lt;strong&gt;replay功能&lt;/strong&gt;，可以模拟当时的比赛的情况。&lt;/p&gt;
&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;gym&lt;/span&gt;&lt;/h4&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gym英文是健身房的意思，这里顾名思义可以理解成练习题。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gifm63ico5j313t0u046u.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gym栏目下的一般是一些专业的比赛题以及acm的练习题，和contest里面的题比起来gym里面的题难度会更大一些。并且也会有各种算法和数据结构的专题。虽然看起来难度更大，但是里面的题目也是有区分度的，并不是每一题都很难，即使水平一般也是可以做一两道的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首页当中比较常用的功能就是这些，后面还有像是小组、天梯、日历等一些功能，由于不是非常常用，这里就不多赘述了。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;比赛&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后介绍一下codeforces当中的比赛，这个是它起家的核心功能，不能不提。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;codeforces当中的比赛一般有六道题，由于只有两个小时的时间，我们一般也很难把6道题都做完。基本上能做出来三题，rating就不会跌了。当然rating的涨跌情况也和你现在的rating有关，系统会根据你现在的rating对你的表现有一个期望，你最终的涨跌就是你&lt;strong&gt;实际表现和这个期望的差值&lt;/strong&gt;。菜鸟做两题可能就可以涨分，但如果你现在rating已经很高的话，你也做了两题，那你肯定是跌的。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gifmcgwfybj31fq0jqgpy.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在比赛的时候可以实时看到每一道题过了多少人，这个有助于帮助我们选择题目。一般来说越前面的题目越简单，但是也有例外，比如有些题藏了一些陷阱，虽然简单，但是很多人没想到都挂在上面，这是常有的事。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们比赛的时候，经常会出现一种情况，就是我们做了3题之后还有时间，但是后面的题目一时想不出来了。这个时候多了时间可以干嘛呢，可以查看其它选手的代码。我们可以看到这里有一个栏目叫Room，在比赛的时候系统会随机分配房间。你可以查看同房间内通过了同样问题的人的代码。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;codeforces在比赛的时候只会测试一小部分数据，真正的测试集会放到赛后进行测试。所以在比赛中测试通过的代码，只是通过了小数据验证，很有可能有隐藏的问题没被发现。当你通过了这道题之后，你就可以去查看其他通过人的代码，去分析它们有没有问题，如果发现了bug，可以&lt;strong&gt;构造一份数据hack掉他的提交&lt;/strong&gt;。hack成功之后，你会获得分数的奖励。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gifmkaxevyj31xy0u0gs2.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以双击打开其他人的提交记录，去阅读他们的代码。到了比赛后期，能做的问题做的差不多了之后，就进入了&lt;strong&gt;紧张刺激的互相hack阶段&lt;/strong&gt;。讲道理，这比只是单纯做题的竞赛要有趣多了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前我们acm集训队经常晚上一起打codeforces的比赛，有时候看到队友在一个房间里，还会互相关注一下近况，互相hack一把，不得不说现在怀念起来还是非常有意思的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，关于codeforces网站就介绍到这里了，如果你也对算法感兴趣的话，不妨试着用一下它吧，相信你也会找到算法的乐趣。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;衷心祝愿大家每天都有所收获。如果还喜欢今天的内容的话，请来一个&lt;strong&gt;三连&lt;/strong&gt;支持吧~（&lt;strong&gt;点赞、关注、转发&lt;/strong&gt;）&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyMTM5OTM2NA==&amp;amp;mid=2247487412&amp;amp;idx=2&amp;amp;sn=a0d472759fde3607b4898c97c311b923&amp;amp;chksm=f9daf29fcead7b8949a4f44ab18fb1f3d408d2e3b2b865fd73e6c7b8b14ab3f414e4886cbb9b&amp;amp;token=1917507910&amp;amp;lang=zh_CN#rd&quot;&gt;原文链接，求个关注&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;nice-suffix-juejin-container&quot; class=&quot;nice-suffix-juejin-container&quot; data-tool=&quot;mdnice编辑器&quot;&gt;本文使用 &lt;a href=&quot;https://mdnice.com/?from=juejin&quot;&gt;mdnice&lt;/a&gt; 排版&lt;/p&gt;
&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;{{uploading-image-349576.png(uploading...)}}&lt;/p&gt;
</description>
<pubDate>Mon, 28 Sep 2020 00:38:00 +0000</pubDate>
<dc:creator>TechFlow2019</dc:creator>
<og:description>大家好，之前说过由于和LeetCode结了梁子，所以周末的LeetCode专题取消了，给大家写点其他专题的算法问题。目前选择的是国外著名的编程竞赛平台——codeforces。它在竞赛圈名气比较大，对</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/techflow/p/13742997.html</dc:identifier>
</item>
<item>
<title>Kafka消费与心跳机制 - 哥不是小萝莉</title>
<link>http://www.cnblogs.com/smartloli/p/13741515.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smartloli/p/13741515.html</guid>
<description>&lt;p&gt;最近有同学咨询Kafka的消费和心跳机制，今天笔者将通过这篇博客来逐一介绍这些内容。&lt;/p&gt;

&lt;h2&gt;2.1 Kafka消费&lt;/h2&gt;
&lt;p&gt;首先，我们来看看消费。Kafka提供了非常简单的消费API，使用者只需初始化Kafka的Broker Server地址，然后实例化KafkaConsumer类即可拿到Topic中的数据。一个简单的Kafka消费实例代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public class JConsumerSubscribe extends Thread {
    public static void main(String[] args) {
        JConsumerSubscribe jconsumer &lt;/span&gt;=&lt;span&gt; new JConsumerSubscribe();
        jconsumer.start();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* 初始化Kafka集群信息. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    private Properties configure() {
        Properties props &lt;/span&gt;=&lt;span&gt; new Properties();
        props.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bootstrap.servers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dn1:9092,dn2:9092,dn3:9092&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定Kafka集群地址&lt;/span&gt;
        props.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ke&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定消费者组&lt;/span&gt;
        props.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enable.auto.commit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启自动提交&lt;/span&gt;
        props.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;auto.commit.interval.ms&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自动提交的时间间隔
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 反序列化消息主键&lt;/span&gt;
        props.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;key.deserializer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 反序列化消费记录&lt;/span&gt;
        props.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value.deserializer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        return props;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* 实现一个单线程消费者. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    public void run() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个消费者实例对象&lt;/span&gt;
        KafkaConsumer&amp;lt;String, String&amp;gt; consumer = new KafkaConsumer&amp;lt;&amp;gt;&lt;span&gt;(configure());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 订阅消费主题集合&lt;/span&gt;
        consumer.subscribe(Arrays.asList(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_kafka_topic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实时消费标识&lt;/span&gt;
        boolean flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (flag) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取主题消息数据&lt;/span&gt;
            ConsumerRecords&amp;lt;String, String&amp;gt; records = consumer.poll(Duration.ofMillis(&lt;span&gt;100)&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (ConsumerRecord&amp;lt;String, String&amp;gt;&lt;span&gt; record : records)
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环打印消息记录&lt;/span&gt;
                System.out.printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;offset = %d, key = %s, value = %s%n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, record.offset(), record.key(), record.value());
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 出现异常关闭消费者对象&lt;/span&gt;
&lt;span&gt;        consumer.close();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码我们就可以非常便捷的拿到Topic中的数据。但是，当我们调用poll方法拉取数据的时候，Kafka Broker Server做了那些事情。接下来，我们可以去看看源代码的实现细节。核心代码如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;org.apache.kafka.clients.consumer.KafkaConsumer&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
private ConsumerRecords&amp;lt;K, V&amp;gt; poll(final &lt;span&gt;long&lt;/span&gt;&lt;span&gt; timeoutMs, final boolean includeMetadataInTimeout) {
        acquireAndEnsureOpen();
        try {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (timeoutMs &amp;lt; &lt;span&gt;0&lt;/span&gt;) throw new IllegalArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Timeout must not be negative&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (this.subscriptions.hasNoSubscriptionOrUserAssignment()) {
                throw new IllegalStateException(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Consumer is not subscribed to any topics or assigned any partitions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; poll for new data until the timeout expires&lt;/span&gt;
            &lt;span&gt;long&lt;/span&gt; elapsedTime = &lt;span&gt;0L&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt; {

                client.maybeTriggerWakeup();

                final &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; metadataEnd;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (includeMetadataInTimeout) {
                    final &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; metadataStart = &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;updateAssignmentMetadataIfNeeded(remainingTimeAtLeastZero(timeoutMs, elapsedTime))) {
                        return ConsumerRecords.empty();
                    }
                    metadataEnd &lt;/span&gt;= &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds();
                    elapsedTime &lt;/span&gt;+= metadataEnd -&lt;span&gt; metadataStart;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;updateAssignmentMetadataIfNeeded(Long.MAX_VALUE)) {
                        log.warn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Still waiting for metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    }
                    metadataEnd &lt;/span&gt;= &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds();
                }

                final Map&lt;/span&gt;&amp;lt;TopicPartition, List&amp;lt;ConsumerRecord&amp;lt;K, V&amp;gt;&amp;gt;&amp;gt; records =&lt;span&gt;&lt;strong&gt; pollForFetches&lt;/strong&gt;(remainingTimeAtLeastZero(timeoutMs, elapsedTime));

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;records.isEmpty()) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; before returning the fetched records, we can send off the next round of fetches
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; and avoid block waiting for their responses to enable pipelining while the user
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is handling the fetched records.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; NOTE: since the consumed position has already been updated, we must not allow
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; wakeups or any other errors to be triggered prior to returning the fetched records.&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (fetcher.sendFetches() &amp;gt; &lt;span&gt;0&lt;/span&gt; ||&lt;span&gt; client.hasPendingRequests()) {
                        client.pollNoWakeup();
                    }

                    return this.interceptors.onConsume(new ConsumerRecords&lt;/span&gt;&amp;lt;&amp;gt;&lt;span&gt;(records));
                }
                final &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; fetchEnd = &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds();
                elapsedTime &lt;/span&gt;+= fetchEnd -&lt;span&gt; metadataEnd;

            } &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (elapsedTime &amp;lt;&lt;span&gt; timeoutMs);

            return ConsumerRecords.empty();
        } finally {
            release();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中有个方法pollForFetches，它的实现逻辑如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
private Map&amp;lt;TopicPartition, List&amp;lt;ConsumerRecord&amp;lt;K, V&amp;gt;&amp;gt;&amp;gt; pollForFetches(final &lt;span&gt;long&lt;/span&gt;&lt;span&gt; timeoutMs) {
        final &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; startMs = &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds();
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; pollTimeout =&lt;span&gt; Math.min(coordinator.timeToNextPoll(startMs), timeoutMs);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; if data is available already, return it immediately&lt;/span&gt;
        final Map&amp;lt;TopicPartition, List&amp;lt;ConsumerRecord&amp;lt;K, V&amp;gt;&amp;gt;&amp;gt; records =&lt;strong&gt;&lt;span&gt; fetcher.fetchedRecords();
        &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;records.isEmpty()) {
            return records;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; send any new fetches (won't resend pending fetches)&lt;/span&gt;
&lt;strong&gt;&lt;span&gt;        fetcher.sendFetches();

        &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We do not want to be stuck blocking in poll if we are missing some positions
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; since the offset lookup may be backing off after a failure

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; NOTE: the use of cachedSubscriptionHashAllFetchPositions means we MUST call
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; updateAssignmentMetadataIfNeeded before this method.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!cachedSubscriptionHashAllFetchPositions &amp;amp;&amp;amp; pollTimeout &amp;gt;&lt;span&gt; retryBackoffMs) {
            pollTimeout &lt;/span&gt;=&lt;span&gt; retryBackoffMs;
        }

        client.poll(pollTimeout, startMs, () &lt;/span&gt;-&amp;gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; since a fetch might be completed by the background thread, we need this poll condition
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to ensure that we do not block unnecessarily in poll()&lt;/span&gt;
            return !&lt;span&gt;fetcher.hasCompletedFetches();
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; after the long poll, we should check whether the group needs to rebalance
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; prior to returning data so that the group can stabilize faster&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (coordinator.rejoinNeededOrPending()) {
            return Collections.emptyMap();
        }

        return fetcher.fetchedRecords();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中加粗的位置，我们可以看出每次消费者客户端拉取数据时，通过poll方法，先调用fetcher中的fetchedRecords函数，如果获取不到数据，就会发起一个新的sendFetches请求。而在消费数据的时候，每个批次从Kafka Broker Server中拉取数据是有最大数据量限制，默认是500条，由属性（max.poll.records）控制，可以在客户端中设置该属性值来调整我们消费时每次拉取数据的量。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;提示：
这里需要注意的是，max.poll.records返回的是一个poll请求的数据总和，与多少个分区无关。因此，每次消费从所有分区中拉取Topic的数据的总条数不会超过max.poll.records所设置的值。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而在Fetcher的类中，在sendFetches方法中有限制拉取数据容量的限制，由属性（max.partition.fetch.bytes），默认1MB。可能会有这样一个场景，当满足max.partition.fetch.bytes限制条件，如果需要Fetch出10000条记录，每次默认500条，那么我们需要执行20次才能将这一次通过网络发起的请求全部Fetch完毕。&lt;/p&gt;
&lt;p&gt;这里，可能有同学有疑问，我们不能将默认的max.poll.records属性值调到10000吗？可以调，但是还有个属性需要一起配合才可以，这个就是每次poll的超时时间（Duration.ofMillis(100)），这里需要根据你的实际每条数据的容量大小来确定设置超时时间，如果你将最大值调到10000，当你每条记录的容量很大时，超时时间还是100ms，那么可能拉取的数据少于10000条。&lt;/p&gt;
&lt;p&gt;而这里，还有另外一个需要注意的事情，就是会话超时的问题。session.timeout.ms默认是10s，group.min.session.timeout.ms默认是6s，group.max.session.timeout.ms默认是30min。当你在处理消费的业务逻辑的时候，如果在10s内没有处理完，那么消费者客户端就会与Kafka Broker Server断开，消费掉的数据，产生的offset就没法提交给Kafka，因为Kafka Broker Server此时认为该消费者程序已经断开，而即使你设置了自动提交属性，或者设置auto.offset.reset属性，你消费的时候还是会出现重复消费的情况，这就是因为session.timeout.ms超时的原因导致的。&lt;/p&gt;
&lt;h2&gt;2.2 心跳机制&lt;/h2&gt;
&lt;p&gt;上面在末尾的时候，说到会话超时的情况导致消息重复消费，为什么会有超时？有同学会有这样的疑问，我的消费者线程明明是启动的，也没有退出，为啥消费不到Kafka的消息呢？消费者组也查不到我的ConsumerGroupID呢？这就有可能是超时导致的，而Kafka是通过心跳机制来控制超时，心跳机制对于消费者客户端来说是无感的，它是一个异步线程，当我们启动一个消费者实例时，心跳线程就开始工作了。&lt;/p&gt;
&lt;p&gt;在org.apache.kafka.clients.consumer.internals.AbstractCoordinator中会启动一个HeartbeatThread线程来定时发送心跳和检测消费者的状态。每个消费者都有个org.apache.kafka.clients.consumer.internals.ConsumerCoordinator，而每个ConsumerCoordinator都会启动一个HeartbeatThread线程来维护心跳，心跳信息存放在org.apache.kafka.clients.consumer.internals.Heartbeat中，声明的Schema如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    private final &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sessionTimeoutMs;
    private final &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; heartbeatIntervalMs;
    private final &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxPollIntervalMs;
    private final &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; retryBackoffMs;
    private volatile &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; lastHeartbeatSend; 
    private &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; lastHeartbeatReceive;
    private &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; lastSessionReset;
    private &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; lastPoll;
    private boolean heartbeatFailed;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;心跳线程中的run方法实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_898e8775-9602-4d20-92fa-7a7012b3b8a5&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_898e8775-9602-4d20-92fa-7a7012b3b8a5&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_898e8775-9602-4d20-92fa-7a7012b3b8a5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public void run() {
            try {
                log.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Heartbeat thread started&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                    synchronized (AbstractCoordinator.this) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (closed)
                            return;

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;enabled) {
                            AbstractCoordinator.this.&lt;/span&gt;&lt;span&gt;wait&lt;/span&gt;&lt;span&gt;();
                            continue;
                        }

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (state !=&lt;span&gt; MemberState.STABLE) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the group is not stable (perhaps because we left the group or because the coordinator
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kicked us out), so disable heartbeats and wait for the main thread to rejoin.&lt;/span&gt;
&lt;span&gt;                            disable();
                            continue;
                        }

                        client.pollNoWakeup();
                        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; now = &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds();

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (coordinatorUnknown()) {
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (findCoordinatorFuture != &lt;span&gt;null&lt;/span&gt; ||&lt;span&gt; lookupCoordinator().failed())
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the immediate future check ensures that we backoff properly in the case that no
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; brokers are available to connect to.&lt;/span&gt;
                                AbstractCoordinator.this.&lt;span&gt;wait&lt;/span&gt;&lt;span&gt;(retryBackoffMs);
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (heartbeat.sessionTimeoutExpired(now)) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the session timeout has expired without seeing a successful heartbeat, so we should
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; probably make sure the coordinator is still healthy.&lt;/span&gt;
&lt;span&gt;                            markCoordinatorUnknown();
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (heartbeat.pollTimeoutExpired(now)) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the poll timeout has expired, which means that the foreground thread has stalled
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; in between calls to poll(), so we explicitly leave the group.&lt;/span&gt;
&lt;span&gt;                            maybeLeaveGroup();
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;heartbeat.shouldHeartbeat(now)) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; poll again after waiting for the retry backoff in case the heartbeat failed or the
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; coordinator disconnected&lt;/span&gt;
                            AbstractCoordinator.this.&lt;span&gt;wait&lt;/span&gt;&lt;span&gt;(retryBackoffMs);
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            heartbeat.sentHeartbeat(now);

                            sendHeartbeatRequest().addListener(new RequestFutureListener&lt;/span&gt;&amp;lt;Void&amp;gt;&lt;span&gt;() {
                                @Override
                                public void onSuccess(Void value) {
                                    synchronized (AbstractCoordinator.this) {
                                        heartbeat.receiveHeartbeat(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds());
                                    }
                                }

                                @Override
                                public void onFailure(RuntimeException e) {
                                    synchronized (AbstractCoordinator.this) {
                                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (e instanceof RebalanceInProgressException) {
                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; it is valid to continue heartbeating while the group is rebalancing. This
                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ensures that the coordinator keeps the member in the group for as long
                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; as the duration of the rebalance timeout. If we stop sending heartbeats,
                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; however, then the session timeout may expire before we can rejoin.&lt;/span&gt;
                                            heartbeat.receiveHeartbeat(&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.milliseconds());
                                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                                            heartbeat.failHeartbeat();

                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; wake up the thread if it's sleeping to reschedule the heartbeat&lt;/span&gt;
&lt;span&gt;                                            AbstractCoordinator.this.notify();
                                        }
                                    }
                                }
                            });
                        }
                    }
                }
            } catch (AuthenticationException e) {
                log.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An authentication error occurred in the heartbeat thread&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, e);
                this.failed.set(e);
            } catch (GroupAuthorizationException e) {
                log.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A group authorization error occurred in the heartbeat thread&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, e);
                this.failed.set(e);
            } catch (InterruptedException &lt;/span&gt;|&lt;span&gt; InterruptException e) {
                Thread.interrupted();
                log.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unexpected interrupt received in heartbeat thread&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, e);
                this.failed.set(new RuntimeException(e));
            } catch (Throwable e) {
                log.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Heartbeat thread failed due to unexpected error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, e);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (e instanceof RuntimeException)
                    this.failed.set((RuntimeException) e);
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    this.failed.set(new RuntimeException(e));
            } finally {
                log.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Heartbeat thread has closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在心跳线程中这里面包含两个最重要的超时函数，它们是sessionTimeoutExpired和pollTimeoutExpired。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
public boolean sessionTimeoutExpired(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; now) {
        return now &lt;/span&gt;- Math.max(lastSessionReset, lastHeartbeatReceive) &amp;gt;&lt;span&gt; sessionTimeoutMs;
}

public boolean pollTimeoutExpired(&lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; now) {
        return now &lt;/span&gt;- lastPoll &amp;gt;&lt;span&gt; maxPollIntervalMs;&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2.1 sessionTimeoutExpired&lt;/h3&gt;
&lt;p&gt;如果是sessionTimeout超时，则会被标记为当前协调器处理断开，此时，会将消费者移除，重新分配分区和消费者的对应关系。在Kafka Broker Server中，Consumer Group定义了5中（如果算上Unknown，应该是6种状态）状态，org.apache.kafka.common.ConsumerGroupState，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202009/666745-20200927194527131-1120237836.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2.2.2 pollTimeoutExpired&lt;/h3&gt;
&lt;p&gt;如果触发了poll超时，此时消费者客户端会退出ConsumerGroup，当再次poll的时候，会重新加入到ConsumerGroup，触发RebalanceGroup。而KafkaConsumer Client是不会帮我们重复poll的，需要我们自己在实现的消费逻辑中不停的调用poll方法。&lt;/p&gt;

&lt;p&gt;关于消费分区与消费线程的对应关系，理论上消费线程数应该小于等于分区数。之前是有这样一种观点，一个消费线程对应一个分区，当消费线程等于分区数是最大化线程的利用率。直接使用KafkaConsumer Client实例，这样使用确实没有什么问题。但是，如果我们有富裕的CPU，其实还可以使用大于分区数的线程，来提升消费能力，这就需要我们对KafkaConsumer Client实例进行改造，实现消费策略预计算，利用额外的CPU开启更多的线程，来实现消费任务分片。具体实现，留到下一篇博客，给大家分享《基于Kafka的分布式查询SQL引擎》。&lt;/p&gt;

&lt;p&gt;这篇博客就和大家分享到这里，如果大家在研究学习的过程当中有什么问题，可以加群进行讨论或发送邮件给我，我会尽我所能为您解答，与君共勉！&lt;/p&gt;
&lt;p&gt;另外，博主出书了《&lt;a href=&quot;https://item.jd.com/12455361.html&quot; target=&quot;_blank&quot;&gt;Kafka并不难学&lt;/a&gt;》和《&lt;a href=&quot;https://item.jd.com/12371763.html&quot; target=&quot;_blank&quot;&gt;Hadoop大数据挖掘从入门到进阶实战&lt;/a&gt;》，喜欢的朋友或同学， 可以在公告栏那里点击购买链接购买博主的书进行学习，在此感谢大家的支持。关注下面公众号，根据提示，可免费获取书籍的教学视频。&lt;/p&gt;
</description>
<pubDate>Mon, 28 Sep 2020 00:35:00 +0000</pubDate>
<dc:creator>哥不是小萝莉</dc:creator>
<og:description>1.概述 最近有同学咨询Kafka的消费和心跳机制，今天笔者将通过这篇博客来逐一介绍这些内容。 2.内容 2.1 Kafka消费 首先，我们来看看消费。Kafka提供了非常简单的消费API，使用者只需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/smartloli/p/13741515.html</dc:identifier>
</item>
<item>
<title>程序员的开源月刊：HelloGitHub（第 54 期） - 削微寒</title>
<link>http://www.cnblogs.com/xueweihan/p/13741999.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xueweihan/p/13741999.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;兴趣是最好的老师，&lt;strong&gt;HelloGitHub&lt;/strong&gt; 就是帮你找到兴趣！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212417220-1038970822.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;分享 GitHub 上有趣、入门级的开源项目。&lt;/p&gt;
&lt;p&gt;这是一个面向&lt;strong&gt;编程新手&lt;/strong&gt;、&lt;strong&gt;热爱编程&lt;/strong&gt;、&lt;strong&gt;对开源社区感兴趣&lt;/strong&gt; 人群的月刊，月刊的内容包括：&lt;strong&gt;各种编程语言的项目&lt;/strong&gt;、&lt;strong&gt;让生活变得更美好的工具&lt;/strong&gt;、&lt;strong&gt;书籍、学习笔记、教程等&lt;/strong&gt;，这些开源项目大多都是非常容易上手，而且非常 Cool。主要是希望大家能动手用起来，加入到&lt;strong&gt;开源社区&lt;/strong&gt;中。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;会编程的可以贡献代码&lt;/li&gt;
&lt;li&gt;不会编程的可以反馈使用这些工具中的 Bug&lt;/li&gt;
&lt;li&gt;帮着宣传你觉得优秀的项目&lt;/li&gt;
&lt;li&gt;Star 项目⭐️&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在浏览、参与这些项目的过程中，你将学习到&lt;strong&gt;更多编程知识&lt;/strong&gt;、&lt;strong&gt;提高编程技巧&lt;/strong&gt;、&lt;strong&gt;找到编程的乐趣&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;🎉 最后 &lt;a href=&quot;https://hellogithub.com&quot;&gt;HelloGitHub&lt;/a&gt; 这个项目就诞生了 🎉&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;3.5882352941176&quot;&gt;
&lt;p&gt;&lt;strong&gt;以下为本期内容&lt;/strong&gt;｜每个月 &lt;strong&gt;28&lt;/strong&gt; 号发布最新一期｜&lt;a href=&quot;https://github.com/521xueweihan/HelloGitHub#%E5%86%85%E5%AE%B9&quot;&gt;点击查看往期内容&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;c-项目&quot;&gt;C 项目&lt;/h3&gt;
&lt;p&gt;1、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/libevent/libevent&quot;&gt;libevent&lt;/a&gt;：C 语言实现的轻量级、高性能事件通知库。基于事件驱动，支持多种 I/O 多路复用技术：epoll、poll、select、kqueue 等。libevent 就是这些系统基础库的统一封装，提供更高级的 API 并解决跨平台的问题&lt;/p&gt;
&lt;h3 id=&quot;c-项目-2&quot;&gt;C# 项目&lt;/h3&gt;
&lt;p&gt;2、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/dotnet/dotnet-docker&quot;&gt;dotnet-docker&lt;/a&gt;：.NET Core 和 Tools 的 Docker 镜像&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/dotnet/machinelearning&quot;&gt;machinelearning&lt;/a&gt;：微软开源的 C# 机器学习框架。支持的机器学习类任务：分类、回归、聚类等，&lt;a href=&quot;https://dotnet.microsoft.com/learn/ml-dotnet&quot;&gt;教程和视频&lt;/a&gt;。示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C#&quot;&gt;var dataPath = &quot;sentiment.csv&quot;;
var mlContext = new MLContext();
var loader = mlContext.Data.CreateTextLoader(new[]
    {
        new TextLoader.Column(&quot;SentimentText&quot;, DataKind.String, 1),
        new TextLoader.Column(&quot;Label&quot;, DataKind.Boolean, 0),
    },
    hasHeader: true,
    separatorChar: ',');
var data = loader.Load(dataPath);
var learningPipeline = mlContext.Transforms.Text.FeaturizeText(&quot;Features&quot;, &quot;SentimentText&quot;)
        .Append(mlContext.BinaryClassification.Trainers.FastTree());
var model = learningPipeline.Fit(data);

var predictionEngine = mlContext.Model.CreatePredictionEngine&amp;lt;SentimentData, SentimentPrediction&amp;gt;(model);
var prediction = predictionEngine.Predict(new SentimentData
{
    SentimentText = &quot;Today is a great day!&quot;
});
Console.WriteLine(&quot;prediction: &quot; + prediction.Prediction);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;c-项目-3&quot;&gt;C++ 项目&lt;/h3&gt;
&lt;p&gt;4、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/an-tao/drogon&quot;&gt;drogon&lt;/a&gt;：一款 C++ 的异步非阻塞高性能 Web 框架。功能强大、上手容易，使得用 C++ 语言构建各种类型的高性能 Web 应用，变得更加方便。示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C++&quot;&gt;#include &amp;lt;drogon/drogon.h&amp;gt;
using namespace drogon;
int main()
{
    app().setLogPath(&quot;./&quot;)
         .setLogLevel(trantor::Logger::kWarn)
         .addListener(&quot;0.0.0.0&quot;, 80)
         .setThreadNum(16)
         .enableRunAsDaemon()
         .run();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212445156-1014549715.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;css-项目&quot;&gt;CSS 项目&lt;/h3&gt;
&lt;p&gt;5、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/flukeout/css-diner&quot;&gt;css-diner&lt;/a&gt;：通过游戏方式在线学习 CSS 选择器知识。初学者可以通过简单的动画界面，学习 CSS 多种选择器语法是如何筛选出页面的元素，虽然是英文网站但还算通俗易懂。&lt;a href=&quot;https://flukeout.github.io/&quot;&gt;在线尝试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212514593-925471601.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;go-项目&quot;&gt;Go 项目&lt;/h3&gt;
&lt;p&gt;6、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/micro/go-micro&quot;&gt;go-micro&lt;/a&gt;：一款 Go 插件化的基础框架。我只知道它是个 Go 微服务框架，基于它可以快速构建微服务。示例代码如图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212542952-1740581415.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/sosedoff/pgweb&quot;&gt;pgweb&lt;/a&gt;：基于 Go 实现的跨平台 PostgreSQL 数据库管理工具。通过本地起服务+浏览器的方式解决了跨平台的问题，启动命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;三种方式：

参数：pgweb --host localhost --user myuser --db mydb
URL：pgweb --url postgres://user:password@host:port/database?sslmode=[mode]
Socket：pgweb --url &quot;postgres:///database?host=/absolute/path/to/unix/socket/dir&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212600673-1240420469.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;8、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/wenjianzhang/go-admin&quot;&gt;go-admin&lt;/a&gt;：基于 Gin+Vue+Element UI 的前后端分离权限管理系统。文档齐全、还有视频教程适合新手学习，特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;遵循 RESTful API 设计规范&lt;/li&gt;
&lt;li&gt;基于 Gin Web API 框架，提供了丰富的中间件支持（用户认证、跨域、访问日志、追踪 ID 等）&lt;/li&gt;
&lt;li&gt;支持 Swagger 文档&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212620425-2094250267.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/jinzhu/now&quot;&gt;now&lt;/a&gt;：Go 语言的时间工具库。项目简单、代码易懂，示例代码丰富：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;import &quot;github.com/jinzhu/now&quot;

time.Now() // 2013-11-18 17:51:49.123456789 Mon

now.BeginningOfMinute()        // 2013-11-18 17:51:00 Mon
now.BeginningOfHour()          // 2013-11-18 17:00:00 Mon
now.BeginningOfDay()           // 2013-11-18 00:00:00 Mon
now.BeginningOfWeek()          // 2013-11-17 00:00:00 Sun
now.BeginningOfMonth()         // 2013-11-01 00:00:00 Fri
now.BeginningOfQuarter()       // 2013-10-01 00:00:00 Tue
now.BeginningOfYear()          // 2013-01-01 00:00:00 Tue

now.WeekStartDay = time.Monday // Set Monday as first day, default is Sunday
now.BeginningOfWeek()          // 2013-11-18 00:00:00 Mon

now.EndOfMinute()              // 2013-11-18 17:51:59.999999999 Mon
now.EndOfHour()                // 2013-11-18 17:59:59.999999999 Mon
now.EndOfDay()                 // 2013-11-18 23:59:59.999999999 Mon
now.EndOfWeek()                // 2013-11-23 23:59:59.999999999 Sat
now.EndOfMonth()               // 2013-11-30 23:59:59.999999999 Sat
now.EndOfQuarter()             // 2013-12-31 23:59:59.999999999 Tue
now.EndOfYear()                // 2013-12-31 23:59:59.999999999 Tue

now.WeekStartDay = time.Monday // Set Monday as first day, default is Sunday
now.EndOfWeek()                // 2013-11-24 23:59:59.999999999 Sun
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;java-项目&quot;&gt;Java 项目&lt;/h3&gt;
&lt;p&gt;10、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/roncoo/roncoo-pay&quot;&gt;roncoo-pay&lt;/a&gt;：开源的 Java 互联网业务支付系统。拥有独立的账户体系、用户体系、支付接入体系、支付交易体系、对账清结算体系等，想学习支付相关技术的同学可以看看这个项目。项目结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;roncoo-pay
|
├── roncoo-pay-app-notify //商户通知模块
|
├── roncoo-pay-app-order-polling //订单轮询模块
|
├── roncoo-pay-app-reconciliation //交易对账模块
|
├── roncoo-pay-app-settlement //交易结算模块
|
├── roncoo-pay-common-core //公共基础模块，不需要单独部署
|
├── roncoo-pay-service //核心业务模块，不需要单独部署
|
├── roncoo-pay-web-boss //运营后台模块
|
├── roncoo-pay-web-gateway //支付网关模块
|
├── roncoo-pay-web-merchant //商户后台模块
|
├── roncoo-pay-web-sample-shop //模拟商城模块
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;11、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/pingfangushi/screw&quot;&gt;screw&lt;/a&gt;：简单好用的数据库表结构文档生成工具&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212701827-712954182.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;javascript-项目&quot;&gt;JavaScript 项目&lt;/h3&gt;
&lt;p&gt;12、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/naptha/tesseract.js&quot;&gt;tesseract.js&lt;/a&gt;：支持多种语言的文字识别的 JS 库，能够方便、准确的把图片中的文字解析提取出来（就能复制了）。基于 Tesseract OCR 引擎实现的 JS 版本，方便前端实现文字识别功能和在浏览器中直接使用。&lt;a href=&quot;https://tesseract.projectnaptha.com/&quot;&gt;在线尝试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213639107-910416737.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;13、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/ssshooter/mind-elixir-core&quot;&gt;mind-elixir-core&lt;/a&gt;：一款免费开源的思维导图 JS 库。&lt;a href=&quot;https://mindelixir.ink/#/&quot;&gt;在线尝试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213813128-270637465.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;14、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/bytedance/IconPark&quot;&gt;IconPark&lt;/a&gt;：该开源库提供了 1200+ 高质量图标，还有一个界面便于定制图标。强大之处是可以通过改变一个 SVG 文件的属性来变换出多种主题，支持导出 SVG、PNG、Vue 和 React 图标组件等。极大的方便了设计师和开发者，让他们有更多时间逛 HG 了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213833575-542477467.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;15、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/alibaba-fusion/next&quot;&gt;next&lt;/a&gt;：一套企业级中后台 UI 解决方案，致力于解决设计师与前端在工作协同、产品体验一致性、开发效率方面的问题。就是设计师修改颜色之类的，可以生成一个 NPM 主题包，前端拿到这个包就可以直接还原设计师的设计&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213857391-1159593773.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;kotlin-项目&quot;&gt;Kotlin 项目&lt;/h3&gt;
&lt;p&gt;16、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/loperSeven/DateTimePicker&quot;&gt;DateTimePicker&lt;/a&gt;：一个简约、漂亮的日期时间选择器。支持 100% 自定义 UI，内置日期时间选择弹窗基于 Google BottomSheetDialog&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212851303-1697299793.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;python-项目&quot;&gt;Python 项目&lt;/h3&gt;
&lt;p&gt;17、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/parzulpan/real-live&quot;&gt;real-live&lt;/a&gt;：一个网络直播聚合平台，能够观看视频直播、高清电视和收听广播电台等。目前支持 30+ 个视频直播、50+ 个高清电视频道和 70+ 个广播电台，比较全面的 Web 项目，用到的技术栈：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前端/客户端：Qt、Vue、Flutter 等&lt;/li&gt;
&lt;li&gt;后端：MySQL、Redis、Kafka/RabbitMQ、Elasticsearch 等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212905603-1143233392.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;18、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/taichi-dev/taichi&quot;&gt;taichi&lt;/a&gt;：一个高性能图形学编程框架。它可以将你编写的 Python 代码转换成高效的汇编代码，在多 CPU 和 GPU 上运行，相当于是在用 Python 的语法写着色器。Taichi 解决了图形学配环境难，代码移植性差等问题，只需 &lt;code&gt;pip install taichi&lt;/code&gt; 即可安装，编写的程序在 Windows、Linux、OSX 上均可运行，降低了新手学习图形学的门槛。示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import taichi as ti

ti.init(arch=ti.gpu)  # 指定编译后的函数在 GPU 上执行

n = 320
pixels = ti.field(dtype=float, shape=(n * 2, n))  # 提前声明数组存储类型，大小


@ti.func  # 该函数将是被调用的过程函数
def complex_sqr(z):
    return ti.Vector([z[0]**2 - z[1]**2, z[1] * z[0] * 2])


@ti.kernel  # 该函数将被 Taichi 编译
def paint(t: float):
    for i, j in pixels:  # 最外层循环会自动并行化
        c = ti.Vector([-0.8, ti.cos(t) * 0.2])
        z = ti.Vector([i / n - 1, j / n - 0.5]) * 2
        iterations = 0
        while z.norm() &amp;lt; 20 and iterations &amp;lt; 50:  # 其他语法和原生 Python 基本一致
            z = complex_sqr(z) + c
            iterations += 1
        pixels[i, j] = 1 - iterations * 0.02


gui = ti.GUI(&quot;Julia Set&quot;, res=(n * 2, n))

for i in range(1000000):
    paint(i * 0.03)
    gui.set_image(pixels)
    gui.show()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212923830-995823476.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;19、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/readthedocs/readthedocs.org&quot;&gt;readthedocs.org&lt;/a&gt;：知名文档社区网站（readthedocs.org）的开源源码。该网站上托管了：Scrapy、requests、bootstrap-datepicker 等知名库的文档，我看了下项目是基于 Django 开发的，文件有些多看起来需要点耐心&lt;/p&gt;
&lt;p&gt;20、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/jerry-git/learn-python3&quot;&gt;learn-python3&lt;/a&gt;：一份 Python3 的教程，请查收。该教程采用 Jupyter notebooks 形式，便于运行和阅读。并且还包含了练习题，对新手友好。缺点的话就是英文的教程，但是我都能看懂你肯定也可以&lt;/p&gt;
&lt;p&gt;21、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES&quot;&gt;Computer-Networking-A-Top-Down-Approach-NOTES&lt;/a&gt;：《计算机网络－自顶向下方法》编程作业。包含问题和 Python 代码解答，Wireshark 实验部分为官方文档的翻译。&lt;/p&gt;
&lt;h3 id=&quot;rust-项目&quot;&gt;Rust 项目&lt;/h3&gt;
&lt;p&gt;22、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/rust-lang/rustlings&quot;&gt;rustlings&lt;/a&gt;：该项目通过一个个简单练习小 demo，让初学者学习 Rust 的语法。通过简单的命令即可安装本项目，然后修改每个小练习，达到编译通过或者目标输出，通过后会进入下一关，有种闯关的成就感。运行方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;安装：
git clone https://github.com/rust-lang/rustlings
cd rustlings
git checkout tags/4.0.0 # or whatever the latest version is (find out at https://github.com/rust-lang/rustlings/releases/latest)
cargo install --force --path .

安装完后，运行：
rustlings watch
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927212944933-1659631207.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;swift-项目&quot;&gt;Swift 项目&lt;/h3&gt;
&lt;p&gt;23、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/longitachi/ZLPhotoBrowser&quot;&gt;ZLPhotoBrowser&lt;/a&gt;：轻量级照片选择框架。它使用简单、功能丰富，支持预览/相册内拍照及录视频、拖拽/滑动选择、编辑裁剪图片/视频等功能。示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-swift&quot;&gt;// 使用起来非常简单
let ac = ZLPhotoPreviewSheet()
ac.selectImageBlock = { [weak self] (images, assets, isOriginal) in
    // your code
}
// 快速选择方法
ac.showPreview(animate: true, sender: self)
// 进入相册选择方法
ac.showPhotoLibrary(sender: self)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213000528-1825216342.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;其它&quot;&gt;其它&lt;/h3&gt;
&lt;p&gt;24、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/halfrost/Halfrost-Field&quot;&gt;Halfrost-Field&lt;/a&gt;：前阿里巴巴资深后端工程师“霜神”的技术博客，分享前、后端的技术干货。作者日常工作语言是 Go，在进入阿里巴巴之前，做了几年前端工作。文章内容包含：机器学习、Go、JS、iOS、网络协议等系列&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213015492-1572561092.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;25、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/ntfstool/ntfstool&quot;&gt;ntfstool&lt;/a&gt;：一款为苹果电脑提供 NTFS 读写支持的免费工具。有了它就可以很方便的在苹果电脑上读写，从 Windows 系统拷贝数据的 U 盘和移动硬盘等。&lt;a href=&quot;https://github.com/ntfstool/ntfstool/blob/master/README-CN.md&quot;&gt;安装说明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213029035-516016489.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;26、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/blinkfox/hexo-theme-matery&quot;&gt;hexo-theme-matery&lt;/a&gt;：一款采用 Material Design 和响应式设计的 Hexo 博客主题。特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现&lt;/li&gt;
&lt;li&gt;首页轮播文章及每天动态切换 Banner 图片&lt;/li&gt;
&lt;li&gt;时间轴式的归档页&lt;/li&gt;
&lt;li&gt;词云的标签页和雷达图的分类页&lt;/li&gt;
&lt;li&gt;丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）&lt;/li&gt;
&lt;li&gt;支持文章置顶和文章打赏&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213046557-274639657.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;27、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/highlightjs/highlight.js&quot;&gt;highlight.js&lt;/a&gt;：让网页上的代码实现高亮的 JS 库，给代码点颜色瞧瞧。支持多种编程语言和样式，使用简单。示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/path/to/styles/default.css&quot;&amp;gt;
&amp;lt;script src=&quot;/path/to/highlight.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213100806-1083951477.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;28、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/rxi/lite&quot;&gt;lite&lt;/a&gt;：一款用 Lua 编写的超级轻量级的文本编辑器。在 Windows 下的 exe 文件虽然只有 300KB 左右，但颜值、功能和速度却一点都不差，甚至还支持使用自定义插件、配色主题等功能。小而美的文本编辑器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213113103-976987976.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;29、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/peng-zhihui/L-ink_Card&quot;&gt;L-ink_Card&lt;/a&gt;：该项目包含了制作一个迷你 NFC 智能卡的代码和教程。野生钢铁侠稚晖出品的&lt;a href=&quot;https://www.bilibili.com/video/BV1Cf4y1y7KT/&quot;&gt;演示视频&lt;/a&gt;，他还制作了很多别的有趣的东西，大家可以去看看很有意思&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213130561-1391971395.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;开源书籍&quot;&gt;开源书籍&lt;/h3&gt;
&lt;p&gt;30、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/KaiserY/trpl-zh-cn&quot;&gt;trpl-zh-cn&lt;/a&gt;：《Rust 程序设计语言（第二版）》中文翻译。&lt;a href=&quot;https://kaisery.github.io/trpl-zh-cn/&quot;&gt;在线阅读&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213144593-464950534.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;31、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/doodlewind/jshistory-cn&quot;&gt;jshistory-cn&lt;/a&gt;：《JavaScript 20 年》中文版。&lt;a href=&quot;https://cn.history.js.org/&quot;&gt;在线阅读&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213200035-46350319.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;机器学习&quot;&gt;机器学习&lt;/h3&gt;
&lt;p&gt;32、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/nsfw-filter/nsfw-filter&quot;&gt;nsfw-filter&lt;/a&gt;：基于 tensefow.js 实现的过滤 NSFW（裸露、暴力等）图片的浏览器插件&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213218110-1296597367.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;33、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/microsoft/computervision-recipes&quot;&gt;computervision-recipes&lt;/a&gt;：计算机视觉系统最佳实践，包含各种 CV 示例项目。示例使用 PytTorch 深度学习库+ Jupyter 文件，涵盖：图像分类、相似、识别、追踪等方面，适合对图像方面感兴趣的小伙伴阅读和学习&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213246902-2129350362.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;34、&lt;a href=&quot;https://hellogithub.com/periodical/statistics/click/?target=https://github.com/wb14123/seq2seq-couplet&quot;&gt;seq2seq-couplet&lt;/a&gt;：基于深度学习的对对联项目，你出上联它自动生成下联。我尝试了下，对得三观很正，还挺有意思。&lt;a href=&quot;https://ai.binwang.me/couplet/&quot;&gt;在线尝试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202009/759200-20200927213259752-1331284794.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;如果你发现了 GitHub 上有趣的项目，欢迎在 HelloGitHub 项目提 &lt;a href=&quot;https://github.com/521xueweihan/HelloGitHub/issues/new&quot;&gt;issues&lt;/a&gt; 告诉我们。&lt;/p&gt;
</description>
<pubDate>Mon, 28 Sep 2020 00:34:00 +0000</pubDate>
<dc:creator>削微寒</dc:creator>
<og:description>兴趣是最好的老师，HelloGitHub 就是帮你找到兴趣！ 简介 分享 GitHub 上有趣、入门级的开源项目。 这是一个面向编程新手、热爱编程、对开源社区感兴趣 人群的月刊，月刊的内容包括：各种编</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xueweihan/p/13741999.html</dc:identifier>
</item>
<item>
<title>Devops实战(一)Docker的部署安装以及Docker-Compose的使用 - charlyFeng</title>
<link>http://www.cnblogs.com/charlypage/p/13742954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/charlypage/p/13742954.html</guid>
<description>&lt;h4 id=&quot;1docker和docker-compose简介&quot;&gt;1.docker和docker-Compose简介&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;     Docker是一组平台即服务（PaaS）产品，它们使用操作系统级虚拟化以称为容器的软件包交付软件。容器彼此隔离，并将它们自己的软件，库和配置文件捆绑在一起；他们可以通过定义明确的渠道相互交流。所有容器都由单个操作系统内核运行，因此使用的资源少于虚拟机。

        Compose 是一个用户定义和运行多个容器的 Docker 应用程序。在 Compose 中你可以使用 YAML 文件来配置你的应用服务。然后，只需要一个简单的命令，就可以创建并启动你配置的所有服务。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;2安装docker和docker-compose&quot;&gt;2.安装docker和docker-Compose&lt;/h4&gt;
&lt;h5 id=&quot;docker的安装&quot;&gt;docker的安装&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt; curl -sSL https://get.daocloud.io/docker | sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装后将会自动重启&lt;/p&gt;
&lt;p&gt;docker的卸载&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo apt-get remove docker docker-engine
rm -fr /var/lib/docker/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置加速器(以下是本人阿里云加速配置)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;mkdir -p /etc/docker
touch /etc/docker/daemon.json
vim /etc/docker/daemon.json

{&quot;registry-mirrors&quot;:[&quot;https://asmtpu24.mirror.aliyuncs.com&quot;]}


systemctl daemon-reload
systemctl restart docker
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;docker-compose的安装&quot;&gt;docker-Compose的安装&lt;/h5&gt;
&lt;p&gt;可以通过修改 URL 中的版本，自定义您需要的版本。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Daocloud镜像&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt;curl -L https://get.daocloud.io/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;卸载&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo rm /usr/local/bin/docker-compose
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;p&gt;①新建 docker-compose.yml 文件&lt;/p&gt;
&lt;p&gt;通过以下配置，在运行后可以创建两个站点(只为演示)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-yml&quot;&gt;version: &quot;2&quot;
services:
  test:
    hostname: test
    image: tomcat:8
    volumes:
      - &quot;./target/test.war:/usr/local/tomcat/webapps/test.war&quot;
    ports:
      - &quot;38000:8080&quot;
    entrypoint:
      - &quot;catalina.sh&quot;
      - &quot;run&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处只是简单演示写法，说明 docker-compose 的方便&lt;/p&gt;
&lt;p&gt;②构建完成，后台运行镜像&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker-compose up -d
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行后就可以使用 ip+port 访问这两个站点了&lt;/p&gt;
&lt;p&gt;③镜像更新重新部署&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker-compose down
docker-compose pull
docker-compose up -d
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 28 Sep 2020 00:05:00 +0000</pubDate>
<dc:creator>charlyFeng</dc:creator>
<og:description>1.docker和docker-Compose简介 Docker是一组平台即服务（PaaS）产品，它们使用操作系统级虚拟化以称为容器的软件包交付软件。容器彼此隔离，并将它们自己的软件，库和配置文件捆绑</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/charlypage/p/13742954.html</dc:identifier>
</item>
<item>
<title>pytest封神之路第六步 断言技巧 - dongfanger</title>
<link>http://www.cnblogs.com/df888/p/13735063.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/df888/p/13735063.html</guid>
<description>&lt;p&gt;pytest的断言把Python语言简洁的优点发挥的淋漓尽致，因为它用的就是Python的标准断言&lt;strong&gt;assert&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;assert用法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;assert_stmt ::=  &quot;assert&quot; expression1 [&quot;,&quot; expression2]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&quot;assert&quot; expression1，expression1和 if 的条件语句是一模一样的，if 能写什么这里就能写什么。&lt;/p&gt;
&lt;p&gt;[&quot;,&quot; expression2]，是可选的，不写错误信息也可以。&lt;/p&gt;
&lt;p&gt;assert断言等价于&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;if __debug__:
    if not expression1: raise AssertionError(expression2)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例，只考了59分，满分100分，不及格&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;def test():
    assert 59 == 100, &quot;不及格&quot;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果，&lt;code&gt;&amp;gt;&lt;/code&gt;指出了断言失败的代码行，&lt;code&gt;E&lt;/code&gt;指出了具体的错误&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;a.py::test FAILED                                                        [100%]
AssertionError: 不及格
59 != 100

Expected :100
Actual   :59
&amp;lt;Click to see difference&amp;gt;

def test():
&amp;gt;       assert 59 == 100, &quot;不及格&quot;
E       AssertionError: 不及格
E       assert 59 == 100

a.py:2: AssertionError


================================== FAILURES ===================================
____________________________________ test _____________________________________

    def test():
&amp;gt;       assert 59 == 100, &quot;不及格&quot;
E       AssertionError: 不及格
E       assert 59 == 100

a.py:2: AssertionError
=========================== short test summary info ===========================
FAILED a.py::test - AssertionError: 不及格
============================== 1 failed in 0.30s ==============================

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把这个例子稍微抽象一下，&lt;strong&gt;assert 实际 == 预期，错误信息。&lt;/strong&gt;记住把&lt;strong&gt;预期放在右边&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;pytest.raises用于断言异常。&lt;/p&gt;
&lt;p&gt;示例，断言会抛出ZeroDivisionError，&lt;strong&gt;如果抛出了测试结果是pass，如果没抛出，测试结果是failed&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import pytest

def test_zero_division():
    with pytest.raises(ZeroDivisionError):
        1 / 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同时可以断言异常信息。示例，定义f()，递归循环抛异常，assert断言这个异常信息包括&quot;maximum recursion&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;def test_recursion_depth():
    with pytest.raises(RuntimeError) as excinfo:
        
        def f():
            f()
            
        f()
    assert &quot;maximum recursion&quot; in str(excinfo.value)

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以添加match参数来用正则过滤异常信息。示例，匹配包括123的异常&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import pytest

def myfunc():
    raise ValueError(&quot;Exception 123 raised&quot;)
    
    
def test_match():
    with pytest.raises(ValueError, match=r&quot;.* 123 .*&quot;):
        myfunc()

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果是对整个test异常断言，也可以加marker xfail&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;@pytest.mark.xfail(raises=IndexError)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;每个test用大横线做了分隔&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;assertion $ pytest failure_demo.py
=========================== test session starts ============================
platform linux -- Python 3.x.y, pytest-6.x.y, py-1.x.y, pluggy-0.x.y
cachedir: $PYTHON_PREFIX/.pytest_cache
rootdir: $REGENDOC_TMPDIR/assertion
collected 44 items
failure_demo.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [100%]


================================= FAILURES =================================
___________________________ test_generative[3-6] ___________________________
param1 = 3, param2 = 6
    @pytest.mark.parametrize(&quot;param1, param2&quot;, [(3, 6)])
    def test_generative(param1, param2):
&amp;gt;       assert param1 * 2 &amp;lt; param2
E       assert (3 * 2) &amp;lt; 6
failure_demo.py:19: AssertionError


_________________________ TestFailing.test_simple __________________________
self = &amp;lt;failure_demo.TestFailing object at 0xdeadbeef&amp;gt;
    def test_simple(self):
        def f():
            return 42           
        def g():
            return 43
&amp;gt;       assert f() == g()
E       assert 42 == 43
E        + where 42 = &amp;lt;function TestFailing.test_simple.&amp;lt;locals&amp;gt;.f at 0xdeadbeef&amp;gt;()
E        + and 43 = &amp;lt;function TestFailing.test_simple.&amp;lt;locals&amp;gt;.g at 0xdeadbeef&amp;gt;()
failure_demo.py:30: AssertionError


____________________ TestFailing.test_simple_multiline _____________________
self = &amp;lt;failure_demo.TestFailing object at 0xdeadbeef&amp;gt;
    def test_simple_multiline(self):
&amp;gt;       otherfunc_multi(42, 6 * 9)
failure_demo.py:33:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
a = 42, b = 54
    def otherfunc_multi(a, b):
&amp;gt;       assert a == b
E       assert 42 == 54
failure_demo.py:14: AssertionError


___________________________ TestFailing.test_not ___________________________
self = &amp;lt;failure_demo.TestFailing object at 0xdeadbeef&amp;gt;
    def test_not(self):
        def f():
            return 42
&amp;gt;       assert not f()
E       assert not 42
E        + where 42 = &amp;lt;function TestFailing.test_not.&amp;lt;locals&amp;gt;.f at 0xdeadbeef&amp;gt;()
failure_demo.py:39: AssertionError


_________________ TestSpecialisedExplanations.test_eq_text _________________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
    def test_eq_text(self):
&amp;gt;       assert &quot;spam&quot; == &quot;eggs&quot;
E       AssertionError: assert 'spam' == 'eggs'
E         - eggs
E         + spam
failure_demo.py:44: AssertionError


_____________ TestSpecialisedExplanations.test_eq_similar_text _____________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_similar_text(self):
&amp;gt;            assert &quot;foo 1 bar&quot; == &quot;foo 2 bar&quot;
E               AssertionError: assert 'foo 1 bar' == 'foo 2 bar'
E                 - foo 2 bar
E                 ? ^
E                 + foo 1 bar
E                 ? ^
failure_demo.py:47: AssertionError


____________ TestSpecialisedExplanations.test_eq_multiline_text ____________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_multiline_text(self):
&amp;gt;            assert &quot;foo\nspam\nbar&quot; == &quot;foo\neggs\nbar&quot;
E               AssertionError: assert 'foo\nspam\nbar' == 'foo\neggs\nbar'
E                 foo
E                 - eggs
E                 + spam
E                 bar
failure_demo.py:50: AssertionError


______________ TestSpecialisedExplanations.test_eq_long_text _______________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_long_text(self):
        a = &quot;1&quot; * 100 + &quot;a&quot; + &quot;2&quot; * 100
        b = &quot;1&quot; * 100 + &quot;b&quot; + &quot;2&quot; * 100
&amp;gt;            assert a == b
E               AssertionError: assert '111111111111...2222222222222' == '111111111111...2222222222222'
E                 Skipping 90 identical leading characters in diff, use -v to show
E                 Skipping 91 identical trailing characters in diff, use -v to show
E                 - 1111111111b222222222
E                 ? ^
E                 + 1111111111a222222222
E                 ? ^
failure_demo.py:55: AssertionError


_________ TestSpecialisedExplanations.test_eq_long_text_multiline __________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_long_text_multiline(self):
        a = &quot;1\n&quot; * 100 + &quot;a&quot; + &quot;2\n&quot; * 100
        b = &quot;1\n&quot; * 100 + &quot;b&quot; + &quot;2\n&quot; * 100
&amp;gt;            assert a == b
E               AssertionError: assert '1\n1\n1\n1\n...n2\n2\n2\n2\n' == '1\n1\n1\n1\n...n2\n2\n2\n2\n'
E                 Skipping 190 identical leading characters in diff, use -v to show
E                 Skipping 191 identical trailing characters in diff, use -v to show
E                   1
E                       1
E                       1
E                       1
E                       1...
E
E                 ...Full output truncated (7 lines hidden), use '-vv' to show
failure_demo.py:60: AssertionError


_________________ TestSpecialisedExplanations.test_eq_list _________________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_list(self):
&amp;gt;            assert [0, 1, 2] == [0, 1, 3]
E               assert [0, 1, 2] == [0, 1, 3]
E                 At index 2 diff: 2 != 3
E                 Use -v to get the full diff
failure_demo.py:63: AssertionError


______________ TestSpecialisedExplanations.test_eq_list_long _______________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
def test_eq_list_long(self):
a = [0] * 100 + [1] + [3] * 100
b = [0] * 100 + [2] + [3] * 100
&amp;gt; assert a == b
E assert [0, 0, 0, 0, 0, 0, ...] == [0, 0, 0, 0, 0, 0, ...]
E At index 100 diff: 1 != 2
E Use -v to get the full diff
failure_demo.py:68: AssertionError


_________________ TestSpecialisedExplanations.test_eq_dict _________________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_dict(self):
&amp;gt;            assert {&quot;a&quot;: 0, &quot;b&quot;: 1, &quot;c&quot;: 0} == {&quot;a&quot;: 0, &quot;b&quot;: 2, &quot;d&quot;: 0}
E               AssertionError: assert {'a': 0, 'b': 1, 'c': 0} == {'a': 0, 'b': 2, 'd': 0}
E                 Omitting 1 identical items, use -vv to show
E                 Differing items:
E                 {'b': 1} != {'b': 2}
E                 Left contains 1 more item:
E                 {'c': 0}
E                 Right contains 1 more item:
E                 {'d': 0}...
E
E                 ...Full output truncated (2 lines hidden), use '-vv' to show
failure_demo.py:71: AssertionError


_________________ TestSpecialisedExplanations.test_eq_set __________________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_set(self):
&amp;gt;            assert {0, 10, 11, 12} == {0, 20, 21}
E               AssertionError: assert {0, 10, 11, 12} == {0, 20, 21}
E                 Extra items in the left set:
E                 10
E                 11
E                 12
E                 Extra items in the right set:
E                 20
E                 21...
E
E                 ...Full output truncated (2 lines hidden), use '-vv' to show
failure_demo.py:74: AssertionError


_____________ TestSpecialisedExplanations.test_eq_longer_list ______________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_longer_list(self):
&amp;gt;            assert [1, 2] == [1, 2, 3]
E               assert [1, 2] == [1, 2, 3]
E                 Right contains one more item: 3
E                 Use -v to get the full diff
failure_demo.py:77: AssertionError


_________________ TestSpecialisedExplanations.test_in_list _________________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_in_list(self):
&amp;gt;            assert 1 in [0, 2, 3, 4, 5]
E               assert 1 in [0, 2, 3, 4, 5]
failure_demo.py:80: AssertionError


__________ TestSpecialisedExplanations.test_not_in_text_multiline __________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_not_in_text_multiline(self):
                text = &quot;some multiline\ntext\nwhich\nincludes foo\nand a\ntail&quot;
&amp;gt;            assert &quot;foo&quot; not in text
E               AssertionError: assert 'foo' not in 'some multil...nand a\ntail'
E                 'foo' is contained here:
E                       some multiline
E                       text
E                       which
E                       includes foo
E                 ?              +++
E                       and a...
E
E                 ...Full output truncated (2 lines hidden), use '-vv' to show
failure_demo.py:84: AssertionError


___________ TestSpecialisedExplanations.test_not_in_text_single ____________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_not_in_text_single(self):
                text = &quot;single foo line&quot;
&amp;gt;            assert &quot;foo&quot; not in text
E               AssertionError: assert 'foo' not in 'single foo line'
E                 'foo' is contained here:
E                       single foo line
E                 ?        +++
failure_demo.py:88: AssertionError


_________ TestSpecialisedExplanations.test_not_in_text_single_long _________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_not_in_text_single_long(self):
                text = &quot;head &quot; * 50 + &quot;foo &quot; + &quot;tail &quot; * 20
&amp;gt;            assert &quot;foo&quot; not in text
E               AssertionError: assert 'foo' not in 'head head h...l tail tail '
E                 'foo' is contained here:
E               head head foo tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail
E                 ?             +++
failure_demo.py:92: AssertionError


______ TestSpecialisedExplanations.test_not_in_text_single_long_term _______
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_not_in_text_single_long_term(self):
                text = &quot;head &quot; * 50 + &quot;f&quot; * 70 + &quot;tail &quot; * 20
&amp;gt;            assert &quot;f&quot; * 70 not in text
E               AssertionError: assert 'fffffffffff...ffffffffffff' not in 'head head h...ltail tail '
E                 'ffffffffffffffffff...fffffffffffffffffff' is contained here:
E                       head head fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffftail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail
E                 ?             ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
failure_demo.py:96: AssertionError


______________ TestSpecialisedExplanations.test_eq_dataclass _______________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_dataclass(self):
                from dataclasses import dataclass
        @dataclass
        class Foo:
            a: int
            b: str
        left = Foo(1, &quot;b&quot;)
        right = Foo(1, &quot;c&quot;)
&amp;gt;            assert left == right
E               AssertionError: assert TestSpecialis...oo(a=1, b='b') == TestSpecialis...oo(a=1, b='c')
E
E               Omitting 1 identical items, use -vv to show
E               Differing attributes:
E               ['b']
E
E               Drill down into differing attribute b:
E                 b: 'b' != 'c'...
E
E               ...Full output truncated (3 lines hidden), use '-vv' to show
failure_demo.py:108: AssertionError


________________ TestSpecialisedExplanations.test_eq_attrs _________________
self = &amp;lt;failure_demo.TestSpecialisedExplanations object at 0xdeadbeef&amp;gt;
        def test_eq_attrs(self):
                import attr
                @attr.s
                class Foo:
            a = attr.ib()
            b = attr.ib()
        left = Foo(1, &quot;b&quot;)
        right = Foo(1, &quot;c&quot;)
&amp;gt;            assert left == right
E               AssertionError: assert Foo(a=1, b='b') == Foo(a=1, b='c')
E
E                 Omitting 1 identical items, use -vv to show
E                 Differing attributes:
E                 ['b']
E
E                 Drill down into differing attribute b:
E                       b: 'b' != 'c'...
E
E                 ...Full output truncated (3 lines hidden), use '-vv' to show
failure_demo.py:120: AssertionError


______________________________ test_attribute ______________________________
        def test_attribute():
                class Foo:
                        b = 1
                i = Foo()
&amp;gt;            assert i.b == 2
E               assert 1 == 2
E                + where 1 = &amp;lt;failure_demo.test_attribute.&amp;lt;locals&amp;gt;.Foo object at 0xdeadbeef&amp;gt;.b
failure_demo.py:128: AssertionError


_________________________ test_attribute_instance __________________________
        def test_attribute_instance():
                class Foo:
                        b = 1
&amp;gt;            assert Foo().b == 2
E               AssertionError: assert 1 == 2
E                + where 1 = &amp;lt;failure_demo.test_attribute_instance.&amp;lt;locals&amp;gt;.Foo object at 0xdeadbeef&amp;gt;.b
E                + where &amp;lt;failure_demo.test_attribute_instance.&amp;lt;locals&amp;gt;.Foo object at 0xdeadbeef&amp;gt; = &amp;lt;class 'failure_demo.test_attribute_instance.&amp;lt;locals&amp;gt;.Foo'&amp;gt;()
failure_demo.py:135: AssertionError


__________________________ test_attribute_failure __________________________
        def test_attribute_failure():
                class Foo:
                        def _get_b(self):
                                raise Exception(&quot;Failed to get attrib&quot;)
                        b = property(_get_b)
                i = Foo()
&amp;gt;            assert i.b == 2
failure_demo.py:146:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = &amp;lt;failure_demo.test_attribute_failure.&amp;lt;locals&amp;gt;.Foo object at 0xdeadbeef&amp;gt;
        def _get_b(self):
&amp;gt;    raise Exception(&quot;Failed to get attrib&quot;)
E       Exception: Failed to get attrib
failure_demo.py:141: Exception


_________________________ test_attribute_multiple __________________________
def test_attribute_multiple():
        class Foo:
                b = 1
        class Bar:
                b = 2
&amp;gt;    assert Foo().b == Bar().b
E       AssertionError: assert 1 == 2
E        + where 1 = &amp;lt;failure_demo.test_attribute_multiple.&amp;lt;locals&amp;gt;.Foo object at 0xdeadbeef&amp;gt;.b
E        + where &amp;lt;failure_demo.test_attribute_multiple.&amp;lt;locals&amp;gt;.Foo object at 0xdeadbeef&amp;gt; = &amp;lt;class 'failure_demo.test_attribute_multiple.&amp;lt;locals&amp;gt;.Foo'&amp;gt;()
E        + and 2 = &amp;lt;failure_demo.test_attribute_multiple.&amp;lt;locals&amp;gt;.Bar object at 0xdeadbeef&amp;gt;.b
E        + where &amp;lt;failure_demo.test_attribute_multiple.&amp;lt;locals&amp;gt;.Bar object at 0xdeadbeef&amp;gt; = &amp;lt;class 'failure_demo.test_attribute_multiple.&amp;lt;locals&amp;gt;.Bar'&amp;gt;()
failure_demo.py:156: AssertionError


__________________________ TestRaises.test_raises __________________________
self = &amp;lt;failure_demo.TestRaises object at 0xdeadbeef&amp;gt;
        def test_raises(self):
                s = &quot;qwe&quot;
&amp;gt;            raises(TypeError, int, s)
E               ValueError: invalid literal for int() with base 10: 'qwe'
failure_demo.py:166: ValueError


______________________ TestRaises.test_raises_doesnt _______________________
self = &amp;lt;failure_demo.TestRaises object at 0xdeadbeef&amp;gt;
        def test_raises_doesnt(self):
&amp;gt;            raises(OSError, int, &quot;3&quot;)
E               Failed: DID NOT RAISE &amp;lt;class 'OSError'&amp;gt;
failure_demo.py:169: Failed


__________________________ TestRaises.test_raise ___________________________
self = &amp;lt;failure_demo.TestRaises object at 0xdeadbeef&amp;gt;
        def test_raise(self):
&amp;gt;            raise ValueError(&quot;demo error&quot;)
E               ValueError: demo error
failure_demo.py:172: ValueError


________________________ TestRaises.test_tupleerror ________________________
self = &amp;lt;failure_demo.TestRaises object at 0xdeadbeef&amp;gt;
        def test_tupleerror(self):
&amp;gt;            a, b = [1] # NOQA
E               ValueError: not enough values to unpack (expected 2, got 1)
failure_demo.py:175: ValueError


______ TestRaises.test_reinterpret_fails_with_print_for_the_fun_of_it ______
self = &amp;lt;failure_demo.TestRaises object at 0xdeadbeef&amp;gt;
        def test_reinterpret_fails_with_print_for_the_fun_of_it(self):
        items = [1, 2, 3]
        print(&quot;items is {!r}&quot;.format(items))
&amp;gt;            a, b = items.pop()
E               TypeError: cannot unpack non-iterable int object
failure_demo.py:180: TypeError
--------------------------- Captured stdout call ---------------------------
items is [1, 2, 3]


________________________ TestRaises.test_some_error ________________________
self = &amp;lt;failure_demo.TestRaises object at 0xdeadbeef&amp;gt;
        def test_some_error(self):
&amp;gt;            if namenotexi: # NOQA
E               NameError: name 'namenotexi' is not defined
failure_demo.py:183: NameError


____________________ test_dynamic_compile_shows_nicely _____________________
        def test_dynamic_compile_shows_nicely():
        import importlib.util
        import sys
        src = &quot;def foo():\n assert 1 == 0\n&quot;
        name = &quot;abc-123&quot;
        spec = importlib.util.spec_from_loader(name, loader=None)
        module = importlib.util.module_from_spec(spec)
        code = compile(src, name, &quot;exec&quot;)
        exec(code, module.__dict__)
        sys.modules[name] = module
&amp;gt;            module.foo()
failure_demo.py:202:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
&amp;gt;    ???
E       AssertionError
abc-123:2: AssertionError


____________________ TestMoreErrors.test_complex_error _____________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_complex_error(self):
                def f():
                        return 44
                def g():
                        return 43
&amp;gt;            somefunc(f(), g())
failure_demo.py:213:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
failure_demo.py:10: in somefunc
        otherfunc(x, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
a = 44, b = 43
        def otherfunc(a, b):
&amp;gt;            assert a == b
E               assert 44 == 43
failure_demo.py:6: AssertionError


___________________ TestMoreErrors.test_z1_unpack_error ____________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_z1_unpack_error(self):
                items = []
&amp;gt;            a, b = items
E               ValueError: not enough values to unpack (expected 2, got 0)
failure_demo.py:217: ValueError


____________________ TestMoreErrors.test_z2_type_error _____________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_z2_type_error(self):
                items = 3
&amp;gt;            a, b = items
E               TypeError: cannot unpack non-iterable int object
failure_demo.py:221: TypeError


______________________ TestMoreErrors.test_startswith ______________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_startswith(self):
                s = &quot;123&quot;
                g = &quot;456&quot;
&amp;gt;            assert s.startswith(g)
E               AssertionError: assert False
E                + where False = &amp;lt;built-in method startswith of str object at 0xdeadbeef&amp;gt;('456')
E                + where &amp;lt;built-in method startswith of str object at 0xdeadbeef&amp;gt; = '123'.startswith
failure_demo.py:226: AssertionError


__________________ TestMoreErrors.test_startswith_nested ___________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_startswith_nested(self):
                def f():
                        return &quot;123&quot;
                def g():
                        return &quot;456&quot;
&amp;gt;            assert f().startswith(g())
E               AssertionError: assert False
E                + where False = &amp;lt;built-in method startswith of str object at 0xdeadbeef&amp;gt;('456')
E                + where &amp;lt;built-in method startswith of str object at 0xdeadbeef&amp;gt; = '123'.startswith
E                + where '123' = &amp;lt;function TestMoreErrors.test_startswith_nested.&amp;lt;locals&amp;gt;.f at 0xdeadbeef&amp;gt;()
E                + and '456' = &amp;lt;function TestMoreErrors.test_startswith_nested.&amp;lt;locals&amp;gt;.g at 0xdeadbeef&amp;gt;()
failure_demo.py:235: AssertionError


_____________________ TestMoreErrors.test_global_func ______________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_global_func(self):
&amp;gt;            assert isinstance(globf(42), float)
E               assert False
E                + where False = isinstance(43, float)
E                + where 43 = globf(42)
failure_demo.py:238: AssertionError


_______________________ TestMoreErrors.test_instance _______________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_instance(self):
                self.x = 6 * 7
&amp;gt;            assert self.x != 42
E               assert 42 != 42
E                + where 42 = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;.x
failure_demo.py:242: AssertionError


_______________________ TestMoreErrors.test_compare ________________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_compare(self):
&amp;gt;            assert globf(10) &amp;lt; 5
E               assert 11 &amp;lt; 5
E                + where 11 = globf(10)
failure_demo.py:245: AssertionError


_____________________ TestMoreErrors.test_try_finally ______________________
self = &amp;lt;failure_demo.TestMoreErrors object at 0xdeadbeef&amp;gt;
        def test_try_finally(self):
                x = 1
                try:
&amp;gt;                    assert x == 0
E                       assert 1 == 0
failure_demo.py:250: AssertionError


___________________ TestCustomAssertMsg.test_single_line ___________________
self = &amp;lt;failure_demo.TestCustomAssertMsg object at 0xdeadbeef&amp;gt;
        def test_single_line(self):
                class A:
                        a = 1
                b = 2
&amp;gt;            assert A.a == b, &quot;A.a appears not to be b&quot;
E               AssertionError: A.a appears not to be b
E               assert 1 == 2
E                + where 1 = &amp;lt;class 'failure_demo.TestCustomAssertMsg.test_single_line.&amp;lt;locals&amp;gt;.A'&amp;gt;.a
failure_demo.py:261: AssertionError


____________________ TestCustomAssertMsg.test_multiline ____________________
self = &amp;lt;failure_demo.TestCustomAssertMsg object at 0xdeadbeef&amp;gt;
        def test_multiline(self):
                class A:
                        a = 1
                b = 2
&amp;gt;            assert (
                        A.a == b
                ), &quot;A.a appears not to be b\nor does not appear to be b\none of those&quot;
E               AssertionError: A.a appears not to be b
E                 or does not appear to be b
E                 one of those
E               assert 1 == 2
E                 + where 1 = &amp;lt;class 'failure_demo.TestCustomAssertMsg.test_multiline.&amp;lt;locals&amp;gt;.A'&amp;gt;.a
failure_demo.py:268: AssertionError


___________________ TestCustomAssertMsg.test_custom_repr ___________________
self = &amp;lt;failure_demo.TestCustomAssertMsg object at 0xdeadbeef&amp;gt;
    def test_custom_repr(self):
        class JSON:
                        a = 1
                        def __repr__(self):
                                return &quot;This is JSON\n{\n 'foo': 'bar'\n}&quot;
        a = JSON()
        b = 2
&amp;gt;            assert a.a == b, a
E               AssertionError: This is JSON
E                 {
E                       'foo': 'bar'
E                 }  
E               assert 1 == 2
E                + where 1 = This is JSON\n{\n 'foo': 'bar'\n}.a
failure_demo.py:281: AssertionError


============================ 44 failed in 0.12s ============================
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 28 Sep 2020 00:03:00 +0000</pubDate>
<dc:creator>dongfanger</dc:creator>
<og:description>断言是必须的。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/df888/p/13735063.html</dc:identifier>
</item>
<item>
<title>ARM架构下的Docker环境，OpenJDK官方没有8版本镜像，如何完美解决？ - 程序员欣宸</title>
<link>http://www.cnblogs.com/bolingcavalry/p/13742942.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bolingcavalry/p/13742942.html</guid>
<description>&lt;h3 id=&quot;为什么需要arm架构下的openjdk8的docker镜像？&quot;&gt;为什么需要ARM架构下的OpenJDK8的Docker镜像？&lt;/h3&gt;
&lt;p&gt;对现有的Java应用，之前一直运行在x86处理器环境下，编译和运行都是JDK8，如今在树莓派的Docker环境运行（或者其他ARM架构电脑，例如华为泰山服务器），需要JDK8镜像作为基础镜像。&lt;/p&gt;
&lt;h3 id=&quot;现在有什么问题？&quot;&gt;现在有什么问题？&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/101908575&quot;&gt;《ARM64架构下，OpenJDK的官方Docker镜像为何没有8版本？》&lt;/a&gt;一文中，已经确定了OpenJDK官方并未提供8版本的Docker镜像，因此，原有的Java应用，如果是基于JDK8编译和运行的，现在从X86架构转战到ARM架构的Docker环境下，就会面临没有JDK基础镜像的问题；&lt;/p&gt;
&lt;h3 id=&quot;应对之道&quot;&gt;应对之道&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/101908575&quot;&gt;《ARM64架构下，OpenJDK的官方Docker镜像为何没有8版本？》&lt;/a&gt;一文曾经提到应对之道：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;自己编译一个8版本的OpenJDK安装包，以此来做Docker镜像；&lt;/li&gt;
&lt;li&gt;Oracle提供了ARM版本的JDKD安装包，以此包来做Docker镜像；&lt;/li&gt;
&lt;li&gt;用OpenJDK的11版本，但是11和8的差异要自行处理；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;对于第一种方式，自己编译8版本的OpenJDK，难度太大(对我自己而言)，因为编译OpenJDK需要低版本的OpenJDK作为编译工具，也就是说我要找到ARM版本的OpenJDK7，才能编译ARM版本的OpenJDK8，因此我觉得这样做的难度太大…&lt;/p&gt;
&lt;p&gt;今天要讨论的是第二种和第三种，&lt;/p&gt;
&lt;h3 id=&quot;环境信息&quot;&gt;环境信息&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;硬件：树莓派4B&lt;/li&gt;
&lt;li&gt;操作系统：openfans的64为Debian&lt;/li&gt;
&lt;li&gt;Docker：19.03.1&lt;/li&gt;
&lt;li&gt;docker-compose：1.24.1&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;参考文档&quot;&gt;参考文档&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;在树莓派4B安装64位Debian和Docker的方法，请参考&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/100594275&quot;&gt;《树莓派4B安装64位Linux(不用显示器键盘鼠标)》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在树莓派4B安装docker-compose的方法，请参考&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/101105693&quot;&gt;《树莓派4B安装docker-compose(64位Linux)》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;将Java应用制作成Docker镜像，请参考&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/94355659&quot;&gt;《Docker与Jib(maven插件版)实战》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;java应用的源码&quot;&gt;Java应用的源码&lt;/h3&gt;
&lt;p&gt;本文要解决的问题是ARM架构的电脑上，如何在Docker环境运行Java应用，因此需要有个Java应用来验证，这里找了个最普通的SpringBoot应用，提供一个hello world的http接口，通过jib插件构建成Docker镜像，整个应用的源码可以从GitHub上下载，地址和链接信息如下表所示：&lt;/p&gt;
&lt;p&gt;这个git项目中有多个文件夹，本章的源码在hellojib文件夹下，如下图红框所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202009/485422-20200928074548117-165052872.jpg&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;操作步骤简介&quot;&gt;操作步骤简介&lt;/h3&gt;
&lt;p&gt;接下来的操作步骤，如下图所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202009/485422-20200928074549317-2112865738.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;arm机器上安装jdk&quot;&gt;ARM机器上安装JDK&lt;/h3&gt;
&lt;p&gt;要想在ARM机器上编译构建hellojib工程，就要把JDK和Maven装好，先装JDK；&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;去Oracle网站下载ARM版本的JDK8，地址是：&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt; ，如下图红框所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202009/485422-20200928074550432-1673177107.jpg&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;上述JDK文件解压后是个名为&lt;span&gt;jdk1.8.0_221&lt;/span&gt;的文件夹，将此文件夹放在ARM电脑的&lt;span&gt;/usr/lib/jvm&lt;/span&gt;目录下；&lt;/li&gt;
&lt;li&gt;打开文件&lt;span&gt;~/.bashrc&lt;/span&gt;，增加以下内容：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_221
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;执行&lt;span&gt;source ~/.bashrc&lt;/span&gt;，使得配置立即生效；&lt;/li&gt;
&lt;li&gt;执行命令&lt;span&gt;java -version&lt;/span&gt;试试JDK是否已经可用：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;root@raspbian:~# java -version
java version &quot;1.8.0_221&quot;
Java(TM) SE Runtime Environment (build 1.8.0_221-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;arm机器上安装maven&quot;&gt;ARM机器上安装Maven&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;去Maven官网下载安装包，我这里下载的是3.6.2版本，地址：&lt;a href=&quot;https://www-eu.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz&quot;&gt;https://www-eu.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装包解压之后是个名为&lt;span&gt;apache-maven-3.6.2&lt;/span&gt;的文件夹，将此文件夹放在ARM电脑的&lt;span&gt;/usr/local&lt;/span&gt;目录下；&lt;/li&gt;
&lt;li&gt;打开文件&lt;span&gt;~/.bashrc&lt;/span&gt;，增加以下内容：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;export MAVEN_HOME=/usr/local/apache-maven-3.6.2
export PATH=$MAVEN_HOME/bin:$PATH
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;执行&lt;span&gt;source ~/.bashrc&lt;/span&gt;，使得配置立即生效；&lt;/li&gt;
&lt;li&gt;执行命令&lt;span&gt;mvn -version&lt;/span&gt;试试maven是否已经可用：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;root@raspbian:~# mvn -version
Apache Maven 3.6.2 (40f52333136460af0dc0d7232c0dc0bcf0d9e117; 2019-08-27T23:06:16+08:00)
Maven home: /usr/local/apache-maven-3.6.2
Java version: 1.8.0_221, vendor: Oracle Corporation, runtime: /usr/lib/jvm/jdk1.8.0_221/jre
Default locale: en_US, platform encoding: UTF-8
OS name: &quot;linux&quot;, version: &quot;4.19.69-openfans+20190906-v8&quot;, arch: &quot;aarch64&quot;, family: &quot;unix&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;折腾了这么久，总算是完成了准备工作，接下来开始做作镜像了；&lt;/p&gt;
&lt;p&gt;要把咱们自己的Java应用做成Docker镜像，需要有个JDK8镜像作为基础镜像，接下来我们来做这个基础镜像；&lt;/p&gt;
&lt;h3 id=&quot;自己动手，做一个jdk8镜像&quot;&gt;自己动手，做一个JDK8镜像&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;在ARM电脑上新建一个文件夹，里面新建名为&lt;span&gt;Dockerfile&lt;/span&gt;的文件，内容如下：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;#Docker image of JDK8 in ARM64
# VERSION 8
# Author: bolingcavalry

#基础镜像使用的是OpenJDK官方镜像公用的
FROM buildpack-deps:stretch-scm

#作者
MAINTAINER BolingCavalry &amp;lt;zq2599@gmail.com&amp;gt;

# Default to UTF-8 file.encoding
ENV LANG C.UTF-8

ENV JAVA_HOME /usr/local/jdk8

ENV PATH $JAVA_HOME/bin:$PATH

ENV JDK_FILE jdk-8u221-linux-arm64-vfp-hflt.tar.gz

COPY $JDK_FILE /usr/local/

RUN mkdir -p &quot;$JAVA_HOME&quot;; \
    tar --extract \
                --file /usr/local/$JDK_FILE \
                --directory &quot;$JAVA_HOME&quot; \
                --strip-components 1 \
                --no-same-owner; \
    rm /usr/local/$JDK_FILE
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;将之前下载的&lt;span&gt;jdk-8u221-linux-arm64-vfp-hflt.tar.gz&lt;/span&gt;文件复制到Dockerfile文件所在目录；&lt;/li&gt;
&lt;li&gt;在Dockerfile文件所在目录执行命令&lt;span&gt;docker build -t bolingcavalry/arm64jdk:8 .&lt;/span&gt;（注意命令的末尾有个小数点，不要漏了）&lt;/li&gt;
&lt;li&gt;执行成功后控制台输出以下信息：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;root@raspbian:~/test# docker build -t bolingcavalry/arm64jdk:8 .
Sending build context to Docker daemon   73.2MB
Step 1/8 : FROM buildpack-deps:stretch-scm
 ---&amp;gt; 1838b930d30a
Step 2/8 : MAINTAINER BolingCavalry &amp;lt;zq2599@gmail.com&amp;gt;
 ---&amp;gt; Using cache
 ---&amp;gt; ce7488aef612
Step 3/8 : ENV LANG C.UTF-8
 ---&amp;gt; Using cache
 ---&amp;gt; 0bdb9ce285a9
Step 4/8 : ENV JAVA_HOME /usr/local/jdk8
 ---&amp;gt; Using cache
 ---&amp;gt; 39a412f0d874
Step 5/8 : ENV PATH $JAVA_HOME/bin:$PATH
 ---&amp;gt; Using cache
 ---&amp;gt; 1a3077d36d4e
Step 6/8 : ENV JDK_FILE jdk-8u221-linux-arm64-vfp-hflt.tar.gz
 ---&amp;gt; Using cache
 ---&amp;gt; c39af69e10f7
Step 7/8 : COPY $JDK_FILE /usr/local/
 ---&amp;gt; Using cache
 ---&amp;gt; 5fc704c5b9ff
Step 8/8 : RUN mkdir -p &quot;$JAVA_HOME&quot;;     tar --extract                 --file /usr/local/$JDK_FILE             --directory &quot;$JAVA_HOME&quot;                --strip-components 1            --no-same-owner;     rm /usr/local/$JDK_FILE
 ---&amp;gt; Running in a63663306adc
Removing intermediate container a63663306adc
 ---&amp;gt; ddc652d5dec0
Successfully built ddc652d5dec0
Successfully tagged bolingcavalry/arm64jdk:8
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;验证一下效果：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;root@raspbian:~/test# docker run --rm bolingcavalry/arm64jdk:8 java -version
java version &quot;1.8.0_221&quot;
Java(TM) SE Runtime Environment (build 1.8.0_221-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;把镜像推送到镜像仓库&quot;&gt;把镜像推送到镜像仓库&lt;/h3&gt;
&lt;p&gt;将刚刚做好的镜像推送到仓库，这么做的原因如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;可以让大家使用到此镜像；&lt;/li&gt;
&lt;li&gt;接下来要用Jib插件将Java应用制作成镜像，Jib插件一定要从镜像仓库下载&lt;span&gt;bolingcavalry/arm64jdk:8&lt;/span&gt;作为Java应用的基础镜像；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里我将&lt;span&gt;bolingcavalry/arm64jdk:8&lt;/span&gt;推送到了hub.docker.com，如果您没有hub.docker.com的账号，也可以选择推送到私有镜像仓库，只要是镜像仓库，Jib插件都支持；&lt;/p&gt;
&lt;h3 id=&quot;将java应用构建成镜像&quot;&gt;将Java应用构建成镜像&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;以前面提到的hellojib为例，打开pom.xml文件，将jib插件的配置改为如下内容：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;!--使用jib插件--&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;com.google.cloud.tools&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;jib-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;1.3.0&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;!--from节点用来设置镜像的基础镜像，相当于Docerkfile中的FROM关键字--&amp;gt;
                    &amp;lt;from&amp;gt;
                        &amp;lt;!--使用openjdk官方镜像，tag是8-jdk-stretch，表示镜像的操作系统是debian9,装好了jdk8--&amp;gt;
                            &amp;lt;image&amp;gt;bolingcavalry/arm64jdk:8&amp;lt;/image&amp;gt;
                    &amp;lt;/from&amp;gt;
                    &amp;lt;to&amp;gt;
                        &amp;lt;!--镜像名称和tag，使用了mvn内置变量${project.version}，表示当前工程的version--&amp;gt;
                        &amp;lt;image&amp;gt;bolingcavalry/hellojib:${project.version}&amp;lt;/image&amp;gt;
                    &amp;lt;/to&amp;gt;
                    &amp;lt;!--容器相关的属性--&amp;gt;
                    &amp;lt;container&amp;gt;
                        &amp;lt;!--jvm内存参数--&amp;gt;
                        &amp;lt;jvmFlags&amp;gt;
                            &amp;lt;jvmFlag&amp;gt;-Xms1g&amp;lt;/jvmFlag&amp;gt;
                            &amp;lt;jvmFlag&amp;gt;-Xmx1g&amp;lt;/jvmFlag&amp;gt;
                        &amp;lt;/jvmFlags&amp;gt;
                        &amp;lt;!--要暴露的端口--&amp;gt;
                        &amp;lt;ports&amp;gt;
                            &amp;lt;port&amp;gt;8080&amp;lt;/port&amp;gt;
                        &amp;lt;/ports&amp;gt;
                    &amp;lt;/container&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;执行命令&lt;span&gt;mvn clean compile jib:dockerBui-U&lt;/span&gt;即可构建镜像，控制台输出如下信息（友情提示，这可能是个漫长的等待过程，我这等了9分多钟）：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;root@raspbian:~/test/hellojib# mvn clean compile jib:dockerBuild -U
[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------------&amp;lt; com.bolingcavalry:hellojib &amp;gt;---------------------
[INFO] Building hellojib 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ hellojib ---
[INFO] Deleting /root/test/hellojib/target
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ hellojib ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ hellojib ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to /root/test/hellojib/target/classes
[INFO] 
[INFO] --- jib-maven-plugin:1.3.0:dockerBuild (default-cli) @ hellojib ---
[INFO] 
[INFO] Containerizing application to Docker daemon as bolingcavalry/hellojib:0.0.1-SNAPSHOT...
[INFO] The base image requires auth. Trying again for bolingcavalry/arm64jdk:8...
[INFO] 
[INFO] Container entrypoint set to [java, -Xms1g, -Xmx1g, -cp, /app/resources:/app/classes:/app/libs/*, com.bolingcavalry.hellojib.HellojibApplication]
[INFO] 
[INFO] Built image to Docker daemon as bolingcavalry/hellojib:0.0.1-SNAPSHOT
[INFO] Executing tasks:
[INFO] [==============================] 100.0% complete
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  09:59 min
[INFO] Finished at: 2019-10-02T19:42:42+08:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;验证hellojib工程的镜像是否正常，执行命令&lt;span&gt;docker run --rm -p 8080:8080 bolingcavalry/hellojib:0.0.1-SNAPSHOT&lt;/span&gt;，控制台显示SpringBoot应用启动成功：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;root@raspbian:~/test/hellojib# docker run --rm -p 8080:8080 bolingcavalry/hellojib:0.0.1-SNAPSHOT

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.6.RELEASE)

2019-10-02 11:45:02.425  INFO 1 --- [           main] c.b.hellojib.HellojibApplication         : Starting HellojibApplication on d2d856d3c623 with PID 1 (/app/classes started by root in /)
2019-10-02 11:45:02.440  INFO 1 --- [           main] c.b.hellojib.HellojibApplication         : No active profile set, falling back to default profiles: default
2019-10-02 11:45:07.203  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-02 11:45:07.342  INFO 1 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-02 11:45:07.344  INFO 1 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.21]
2019-10-02 11:45:07.761  INFO 1 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-02 11:45:07.762  INFO 1 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5108 ms
2019-10-02 11:45:08.863  INFO 1 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-02 11:45:10.027  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-02 11:45:10.037  INFO 1 --- [           main] c.b.hellojib.HellojibApplication         : Started HellojibApplication in 8.932 seconds (JVM running for 9.876)
2019-10-02 11:45:52.965  INFO 1 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-02 11:45:52.966  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-02 11:45:52.993  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 27 ms
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;ARM电脑的IP地址是&lt;span&gt;192.168.50.118&lt;/span&gt;，因此在浏览器访问：&lt;a href=&quot;http://192.168.50.118:8080/hello&quot;&gt;http://192.168.50.118:8080/hello&lt;/a&gt; ，如下图，可见hellojib工程的容器可以正常工作，成功返回了数据：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202009/485422-20200928074550913-1289192888.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;SpringBoot工程终于在ARM机器的Docker环境下成功运行了，这里采用的是自制JDK8镜像的方式，还有一种方法也是可行的，即：使用OpenJDK官方的JDK11镜像；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;使用openjdk官方的jdk11镜像&quot;&gt;使用OpenJDK官方的JDK11镜像&lt;/h3&gt;
&lt;p&gt;使用JDK11镜像，意味着Java工程所用的JDK从8升级到11，这个操作和Docker的关系不大，您只要验证应用在升级JDK后是否能运行正常即可，本文就不赘述了，我把自己在升级过程中遇到的问题列出来，帮您跳过小坑：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;从JDK9开始引入了module的概念，JDK8自带的一些jar包不再默认提供，您需要在应用的pom.xml中添加以下依赖，否则SpringBoot启动时会因为某些lass找不到导致启动失败：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;javax.xml.bind&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jaxb-api&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.xml.bind&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jaxb-impl&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.glassfish.jaxb&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jaxb-runtime&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;如果您的不想修改pom.xml，此时我的做法：&lt;br/&gt;a. 将上述三个依赖对应的jar包全部找出来(注意这里绝不止三个jar包，还有它们的间接依赖)，放在ARM电脑的某个文件夹下面，例如/usr/local/extendJar;&lt;br/&gt;b. 修改Jib插件的配置，增加一个classpath，例如：/usr/local/extendJar（注意这里的路径是容器内的）；&lt;br/&gt;c. 在启动容器的时候，增加一个数据卷映射，将宿主机的/usr/local/extendJar映射到容器的/usr/local/extendJar；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;至此，OpenJDK官方在ARM架构不提供8版本镜像的问题已完美解决，如果您正在使用ARM服务器做Docker+Java开发，希望此文能给您一些参考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 27 Sep 2020 23:46:00 +0000</pubDate>
<dc:creator>程序员欣宸</dc:creator>
<og:description>为什么需要ARM架构下的OpenJDK8的Docker镜像？ 对现有的Java应用，之前一直运行在x86处理器环境下，编译和运行都是JDK8，如今在树莓派的Docker环境运行（或者其他ARM架构电脑</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bolingcavalry/p/13742942.html</dc:identifier>
</item>
</channel>
</rss>