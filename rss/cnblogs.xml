<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>通过命令行方式利用mybatis-generator连接Oracle快速生成代码 - 沙皇</title>
<link>http://www.cnblogs.com/Czar1996/p/10291933.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Czar1996/p/10291933.html</guid>
<description>&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;环境说明：Oracle 11g 、Mybatis 3.4.6&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;任意位置新建autoMybatis文件夹，文件夹中新建generator.xml文件，代码如下：&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;    
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE generatorConfiguration    
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;    
&lt;span&gt; 4&lt;/span&gt;         &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&amp;gt;    
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt; &amp;lt;generatorConfiguration&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;!-- classPathEntry:数据库的JDBC驱动--&amp;gt;   
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;classPathEntry location=&quot;电脑上ojdbc6.jar文件的绝对路径&quot; /&amp;gt;  
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;context id=&quot;deDault&quot; targetRuntime=&quot;MyBatis3&quot;&amp;gt;   
&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt;     &amp;lt;!-- 去掉自动生成的注释--&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;lt;commentGenerator&amp;gt;    
&lt;span&gt;13&lt;/span&gt;             &amp;lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&amp;gt;    
&lt;span&gt;14&lt;/span&gt;         &amp;lt;/commentGenerator&amp;gt;    
&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;         &amp;lt;!-- 连接Oracle数据库的各项参数 --&amp;gt;    
&lt;span&gt;17&lt;/span&gt;        &amp;lt;jdbcConnection driverClass=&quot;oracle.jdbc.driver.OracleDriver&quot;  
&lt;span&gt;18&lt;/span&gt;        connectionURL=&quot;jdbc:oracle:thin:@localhost:1521:数据库名称&quot;  
&lt;span&gt;19&lt;/span&gt;        userId=&quot;用户名&quot;  
&lt;span&gt;20&lt;/span&gt;        password=&quot;密码&quot;&amp;gt;  
&lt;span&gt;21&lt;/span&gt;&amp;lt;/jdbcConnection&amp;gt; 
&lt;span&gt;22&lt;/span&gt;    
&lt;span&gt;23&lt;/span&gt;         &amp;lt;javaTypeResolver&amp;gt;    
&lt;span&gt;24&lt;/span&gt;             &amp;lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&amp;gt;    
&lt;span&gt;25&lt;/span&gt;         &amp;lt;/javaTypeResolver&amp;gt;    
&lt;span&gt;26&lt;/span&gt;      
&lt;span&gt;27&lt;/span&gt;         &amp;lt;!--生成entity文件的路径--&amp;gt;    
&lt;span&gt;28&lt;/span&gt;         &amp;lt;javaModelGenerator targetPackage=&quot;entity&quot; 
&lt;span&gt;29&lt;/span&gt;             targetProject=&quot;文件保存的位置&quot;&amp;gt;    
&lt;span&gt;30&lt;/span&gt;             &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&amp;gt;    
&lt;span&gt;31&lt;/span&gt;             &amp;lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&amp;gt;    
&lt;span&gt;32&lt;/span&gt;         &amp;lt;/javaModelGenerator&amp;gt;    
&lt;span&gt;33&lt;/span&gt;     
&lt;span&gt;34&lt;/span&gt;         &amp;lt;!--生成mapper文件的路径--&amp;gt;     
&lt;span&gt;35&lt;/span&gt;         &amp;lt;sqlMapGenerator targetPackage=&quot;mapper&quot; 
&lt;span&gt;36&lt;/span&gt;             targetProject=&quot;文件保存的位置&quot;&amp;gt;    
&lt;span&gt;37&lt;/span&gt;             &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&amp;gt;    
&lt;span&gt;38&lt;/span&gt;         &amp;lt;/sqlMapGenerator&amp;gt;    
&lt;span&gt;39&lt;/span&gt;     
&lt;span&gt;40&lt;/span&gt;         &amp;lt;!--生成mapper.xml文件的路径--&amp;gt;      
&lt;span&gt;41&lt;/span&gt;         &amp;lt;javaClientGenerator type=&quot;XMLMAPPER&quot; 
&lt;span&gt;42&lt;/span&gt;             targetPackage=&quot;mapper&quot; 
&lt;span&gt;43&lt;/span&gt;             targetProject=&quot;文件保存的位置&quot;&amp;gt;   
&lt;span&gt;44&lt;/span&gt;             &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&amp;gt;    
&lt;span&gt;45&lt;/span&gt;         &amp;lt;/javaClientGenerator&amp;gt;    
&lt;span&gt;46&lt;/span&gt;     
&lt;span&gt;47&lt;/span&gt;     
&lt;span&gt;48&lt;/span&gt;         &amp;lt;!--数据库中相关表的名称 --&amp;gt;    
&lt;span&gt;49&lt;/span&gt;         &amp;lt;table tableName=&quot;表名&quot; domainObjectName=&quot;生成的实体类的名称&quot;    
&lt;span&gt;50&lt;/span&gt;                enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot;    
&lt;span&gt;51&lt;/span&gt;                enableSelectByExample=&quot;true&quot; selectByExampleQueryId=&quot;false&quot; &amp;gt;
&lt;span&gt;52&lt;/span&gt;         &amp;lt;/table&amp;gt;    
&lt;span&gt;53&lt;/span&gt;     &amp;lt;/context&amp;gt;    
&lt;span&gt;54&lt;/span&gt; &amp;lt;/generatorConfiguration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;&lt;li&gt;&lt;span&gt;出现以上结果便说明已成功生成entity和mapper文件&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Sat, 19 Jan 2019 07:42:00 +0000</pubDate>
<dc:creator>沙皇</dc:creator>
<og:description>环境说明：Oracle 11g 、Mybatis 3.4.6 任意位置新建autoMybatis文件夹，文件夹中新建generator.xml文件，代码如下： 下载mybatis-generator-</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Czar1996/p/10291933.html</dc:identifier>
</item>
<item>
<title>我的第一个上线小程序，案例实战篇二——LayaAir游戏开始界面开发 - 又过二十</title>
<link>http://www.cnblogs.com/wyang/p/10290218.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyang/p/10290218.html</guid>
<description>&lt;p&gt;不知不觉我的第一个小程序已经上线一周了，uv也稳定的上升着。&lt;/p&gt;
&lt;p&gt;很多人说我的小程序没啥用，我默默一笑，心里说：“它一直敦促我学习，敦促我进步”。我的以一个小程序初衷是经验分享，目前先把经验分享到博客园，边学习边完善小程序。同时我会持续学习，持续更新，功能定会一天天的完善起来。&lt;/p&gt;
&lt;p&gt;欢迎大家扫码体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/633005/201901/633005-20190118221329050-1438111862.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;闲话少叙，今天我们一起来练习LayaAirIDE搭建游戏开始界面。&lt;/p&gt;
&lt;p&gt;既然要开发游戏，那自然少不了图片素材，大家可以根据实际情况自行备图。大致一下几种素材图片：&lt;/p&gt;
&lt;p&gt;1、一张背景图片（750*1333）&lt;/p&gt;
&lt;p&gt;2、开始按钮背景图片，尺寸自己选择即可&lt;/p&gt;
&lt;p&gt;3、游戏规则按钮背景图片，尺寸自己选择即可&lt;/p&gt;
&lt;p&gt;4、其它的游戏名称图片和Logo之类的图片可以自行选择&lt;/p&gt;
&lt;p&gt;素材准备好了，下面就是一个字，干！&lt;/p&gt;
&lt;p&gt;第一步：新建一个空的LayaAir 空项目（PS:不会的话，清先跳转&lt;a id=&quot;post_title_link_10277128&quot; href=&quot;https://www.cnblogs.com/wyang/p/10277128.html&quot;&gt;我的第一个上线小程序，案例实战篇一&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;第二步：我们创建一个StartScene的场景，并且设置其宽度750，高度1333，点击确定&lt;/p&gt;
&lt;p&gt;第三步：我们将场景切换到编辑模式，在Assets文件处右键-》新建目录-》并命名为images文件夹。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/633005/201901/633005-20190118225124191-1541232230.png&quot; alt=&quot;&quot; width=&quot;514&quot; height=&quot;324&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们把准备好的图片素材拖拽至images文件夹上即可将图片放入该文件夹中。&lt;/p&gt;
&lt;p&gt;第四步：我们选中StartScene.scene场景文件，对场景进行编辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/633005/201901/633005-20190118231528421-1958894505.png&quot; alt=&quot;&quot; width=&quot;909&quot; height=&quot;461&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们想场景中拖入一个image，并向其常用属性skin中拖入我们准备好的背景素材。&lt;/p&gt;
&lt;p&gt;我们继续向场景中拖一个button，并设置其var 属性为btnRule，设置其stateNum为1,向其常用属性skin中拖入我们准备好的规则背景素材。&lt;/p&gt;
&lt;p&gt;我们继续向场景中拖一个button，并设置其var 属性为btnStart,设置其stateNum为1,向其常用属性skin中拖入我们准备好的开始背景素材。&lt;/p&gt;
&lt;p&gt;第五步：我们把窗口切换到IDE的代码模式，在src目录下面新建一个scripts的文件夹，在scripts文件夹右键-》新建模板文件-》新建脚本文件，命名为StartScene点击确定生成脚本文件，脚本和场景关联大家可以参考第一步。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
export default class StartScene extends Laya.Scene {

    constructor() { super(); }
    onBtnRoleClick(){

    }
    onBtnStartClick(){

    }
    onEnable() {
        this.btnRule.on(Laya.Event.CLICK,this,this.onBtnRoleClick);
        this.btnStart.on(Laya.Event.CLICK,this,this.onBtnStartClick);
    }

    onDisable() {
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最终效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/633005/201901/633005-20190118233910643-1454819227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;若是喜欢微信小游戏开发，不妨和我一起学习成长！！！&lt;/p&gt;
</description>
<pubDate>Sat, 19 Jan 2019 07:34:00 +0000</pubDate>
<dc:creator>又过二十</dc:creator>
<og:description>不知不觉我的第一个小程序已经上线一周了，uv也稳定的上升着。 很多人说我的小程序没啥用，我默默一笑，心里说：“它一直敦促我学习，敦促我进步”。我的以一个小程序初衷是经验分享，目前先把经验分享到博客园，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyang/p/10290218.html</dc:identifier>
</item>
<item>
<title>Percona Toolkit mysql辅助利器 - keme</title>
<link>http://www.cnblogs.com/keme/p/10237590.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/keme/p/10237590.html</guid>
<description>&lt;h3&gt;1 PT介绍&lt;/h3&gt;
&lt;p&gt;Percona Toolkit简称pt工具—PT-Tools，是Percona公司开发用于管理MySQL的工具，功能包括检查主从复制的数据一致性、检查重复索引、定位IO占用高的表文件、在线DDL等，DBA熟悉掌握后将极大提高工作效率。&lt;/p&gt;
&lt;h3 id=&quot;2-pt-安装&quot;&gt;2 PT 安装&lt;/h3&gt;
&lt;p&gt; 下载地址 ：&lt;a href=&quot;https://www.percona.com/downloads/percona-toolkit/&quot; target=&quot;_blank&quot;&gt;https://www.percona.com/downloads/percona-toolkit/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108093531841-464334958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下载完上传到linux 服务器&lt;/p&gt;
&lt;p&gt;安装PT&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# yum -y install percona-toolkit-3.0.12-1.el7.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建一个表生成10000000 条测试数据&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;创建一个用户表：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
create table uc_user (
user_id int NOT NULL auto_increment primary key , user_name varchar(32) ,
create_time datetime
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;随机生成10000000 条测试数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;59&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
#创建存储过程 
delimiter //
create procedure user_data()
begin
    declare i int default 1;
    set i = 1;
    while i&amp;lt;=10000000 do
        -- rymd 表示随机年月日
        set @rymd = CONCAT(FLOOR(1990 + (RAND() * 28)),'-',LPAD(FLOOR(1 + (RAND() * 12)),2,0),'-',LPAD(FLOOR(3 + (RAND() * 8)),2,0));
        -- rhms 表示随机分钟小时秒
        set @rhms = CONCAT(LPAD(FLOOR(0 + (RAND() * 23)),2,0),':',LPAD(FLOOR(0 + (RAND() * 59)),2,0),':',LPAD(FLOOR(0 + (RAND() * 59)),2,0));
        -- rstring 生成4位随机字符串
        set @rstring = substring(MD5(RAND()),1,4);
        insert into uc_user values (i,@rstring,concat(@rymd,' ',@rhms));
        set i=i+1;
    end while; 
end //
delimiter ;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;生成10000000 条测试数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
#开启一个事务
mysql&amp;gt; start transaction;
#调用存储过程
mysql&amp;gt; call user_data();

#结束事务，提交到硬盘
mysql&amp;gt; commit;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108103250397-822577464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我的mysql 版本是5.7.22 &lt;/p&gt;
&lt;h3 id=&quot;3-pt-常用的几个工具&quot;&gt;3 PT 常用的几个工具&lt;/h3&gt;
&lt;h4 id=&quot;31-pt-archiver&quot;&gt;3.1 pt-archiver&lt;/h4&gt;
&lt;p&gt;pt-archive 是MySQL的在线归档，无影响生产数据&lt;/p&gt;
&lt;p&gt;为什么要归档:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;若干年前的数据则很少再被使用.归档的意思就是将某些不常使用的数据 放置到其他地方.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;归档前提条件:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;pt-archive： —&lt;code&gt;归档 &lt;span&gt;用此操作的表必须有主键&lt;/span&gt;。一般的表设计的都会有主键的。&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;
&lt;p&gt;归档历史数据；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在线删除大批量数据；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据导出和备份；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据远程归档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据清理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;pt-archiver –help&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;pt-archiver 有很多参数，用这可以help一下&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;常用的一些选项说明:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
--limit=1000 每次去1000行数据用pt-archiver处理
--txn-size 1000 设置1000行，为一个事务提交一次
--where 'id&amp;lt;3000' 设置操作条件， id表示表的column
--progress 5000  每处理5000行输出一次处理信息
--statistics  输出执行过程及最后的操作统计。(只要不加上--quiet,默认情况下pt-archiver都会输出执行过程的)
--charset=UTF8 指定字符集为UTF8 -- 这个最后加上不然可能出现乱码
--bulk-delete  批量删除source 上的旧数据（例如每次1000行的批量删除操作）

选项很多很多 ，不会的多看help
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注： 我这用的都是root 用户， 在实际环境 最好建立相应的用户赋予相应的权限进行归档。&lt;/p&gt;
&lt;h5 id=&quot;311-用法示例&quot;&gt;3.1.1 用法示例&lt;/h5&gt;
&lt;p&gt;(1). 将uc_user表中create_time字段大于2017-01-01 00:00:00时间的数据进行归档,不删除原表记录&lt;/p&gt;
&lt;p&gt;先看看大于create_time 大于2017-01-01 00:00:00 时间有多少数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
mysql&amp;gt; select count(*) from uc_user where create_time &amp;gt; &quot;2017-01-01 00:00:00&quot;;
+----------+
| count(*) |
+----------+
|   356624 |
+----------+
1 row in set (2.23 sec)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108103923517-1053932936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;语法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-archiver \
--source h=源ip,P=端口号,u=用户,p=密码,D=库名,t=表名 \ 
--dest h=目标ip,P=端口号,u=用户,p=密码,D=库名,t=表名  \
--no-check-charset --where 'create_time&amp;gt;&quot;2017-01-01 00:00:00&quot;' \
--progress 5000 --no-delete --limit=10000 –statistics
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;源服务器的表结构和目标服务器的表结构如下：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;注：它们之间没有主从关系，只是单纯的两台数据库实例:&lt;/span&gt;&lt;/p&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;源服务器 ip&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;归档服务器ip&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;10.0.0.201&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10.0.0.202&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;原服务器的表结构:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108104338612-1196786405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 归档服务器的表结构&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108104414298-1580385248.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 归档语句如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# pt-archiver \
--source h=10.0.0.201,P=3306,u=root,p=123456,D=course,t=uc_user \
--dest h=10.0.0.202,P=3306,u=root,D=course,t=uc_user_history \
--no-check-charset --where 'create_time&amp;gt;&quot;2017-01-01 00:00:00&quot;' \
--progress 5000 --no-delete --limit=10000 --statistics
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108104438734-1800028797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108104444201-1792765151.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;归档完成，看看归档的服务器数据是否有356624条&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108105324600-1447067623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; (2).将表中CREATE_DATE字段小于1991-01-01 00:00:00时间的数据进行归档, 删除原表记录（不用加no-delete）&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;看看小于1991-01-01 00:00:00 有多少条数据，在进行归档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108105344297-654971141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 归档删除原表记录&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# pt-archiver \
--source h=10.0.0.201,P=3306,u=root,p=123456,D=course,t=uc_user \
--dest h=10.0.0.202,P=3306,u=root,p=123456,D=course,t=uc_user_history \
--no-check-charset --where 'create_time &amp;lt; &quot;1991-01-01 00:00:00&quot;' \
--progress 5000   --limit=10000 --statistics
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108105530263-453797690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看看原表的数据少了，少了357115&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108105549646-618044736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; (3).归档时加上字符集 --charset&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108110334256-1150716234.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# pt-archiver  \
--charset 'utf8'  \
--source h=10.0.0.201,P=3306,u=root,p=123456,D=course,t=uc_user  \
--dest h=10.0.0.202,P=3306,u=root,p=123456,D=course,t=uc_user_history \
--no-check-charset --where 'create_time &amp;lt; &quot;1992-02-01 00:00:00&quot;' \
--progress 5000   --limit=10000 --statistics
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;一般归档的最好还是指定好原表字符集和归档数据的字符集一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;归档途中就会显示如下：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;每个Limit 执行的时间，pt-arvhive的开始时间及结束时间 ，源服务器，目标服务器。最后操作的insert ，delete, commit 的数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108111921717-514366574.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;32-pt-kill&quot;&gt;3.2 pt-kill&lt;/h4&gt;
&lt;p&gt;pt-kill 是一个优秀的kill MySQL连接的一个工具，是percona toolkit的一部分，这个工具可以kill掉你想Kill的任何语句，特别出现大量的阻塞，死锁，某个有问题的sql导致mysql负载很高黑客攻击。当有很多语句时你不可能用show processlist去查看，当QPS很高时，你根本找不到你找的语句或ID,这时就可以用pt-kill来帮你帮完成。他可以根据运行时间，开源IP,用户名，数据库名。SQL语句,sleep,running 等状态进行匹配然后kill. 能匹配的太多了一一举例肯定不现实，拿几个案例看看。。可以用pt-kill –help 进行查看帮助&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pt-kill 一些常用参数&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
--daemonize  放在后台以守护进程的形式运行；
--interval       多久运行一次，单位可以是s,m,h，d等默认是s  ，不加这个默认是5秒
--victims         默认是oldest,只杀最古老的查询。这是防止被查杀是不是真的长时间运行的查询，他们只是长期等待 这种种匹配按时间查询，杀死一个时间最高值。
 --all               杀掉所有满足的线程
 --kill-query      只杀掉连接执行的语句，但是线程不会被终止
 --print              打印满足条件的语句
 --busy-time      批次查询已运行的时间超过这个时间的线程；
 --idle-time      杀掉sleep 空闲了多少时间的连接线程，必须在
 --match-command sleep时才有效—也就是匹配使用
--match-command    匹配相关的语句。
--ignore-command   忽略相关的匹配。
这两个搭配使用一定是ignore-commandd在前 match-command在后，
--match-db cdelzone  匹配哪个库
 command有：Query、Sleep、Binlog Dump、Connect、Delayed insert、Execute、Fetch、Init DB、Kill、Prepare、Processlist、Quit、Reset stmt、Table Dump
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;321-pt-kill-举例&quot;&gt;3.2.1 pt-kill 举例&lt;/h5&gt;
&lt;p&gt;例如如下例子&lt;/p&gt;
&lt;ol start=&quot;1&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;杀掉空闲链接sleep 5秒的 SQL 并把日志放到/home/pt-kill.log文件中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# /usr/bin/pt-kill \
--match-command Sleep \
--idle-time 5 \
--victim all \
--interval 5 \
--kill --daemonize -S /tmp/mysql.sock \
--user=root --password=123456 --port=3306 \
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log  &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108112116510-1086336171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我这没什么Sleep 所以没什么日志输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108112231305-487395839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　 2. KILL 掉 查询SELECT 超过20秒的语句&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# /usr/bin/pt-kill  --user=root --password=123456 --port=3306 \
--busy-time 20 --match-info &quot;SELECT|select&quot; \
--victim all --interval 5  \
--kill --daemonize -S /tmp/mysql.sock --pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注： 一定要看服务这个后台服务启动没有 ，上面pt-kill 进程的pid 也是放在/tmp/ptkill.pid，所以一定的上面的那个进程给kill 掉， 然后开启新的进程&lt;/p&gt;
&lt;p&gt;　模拟测试超过查询20s&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108112350071-979963417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;超过了20s pt-kill 设置的规则 ，会终止这个select ，看下日志如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108112408767-169196485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　 3. Kill掉 select ifnull*语句开头的SQL，&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# ps aux | grep pt-kill | grep -v grep  | awk -F' ' '{print $2}' | xargs kill -9
[root@master01 ~]# pt-kill --user=root --password=123456 --port=3306 \
--victims all --busy-time=0 --match-info=&quot;select ifnull*&quot;  \
--interval 1 -S /tmp/mysql.sock  \
--kill --daemonize --pid=/tmp/ptkill.pid --print --log=/home/pt-kill123.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108112451648-1992311427.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　4. kill掉state Locked&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# ps aux | grep pt-kill | grep -v grep  | awk -F' ' '{print $2}' | xargs kill -9
[root@master01 ~]# /usr/bin/pt-kill --user=root --password=123456 --port=3306 \
--victims all --match-state='Locked'  --victim all --interval 5 \
--kill --daemonize -S /tmp/mysql.sock --pid=/tmp/ptkill.pid --print --log=/home/pt-kill-Locked.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　5. kill掉 qz_business_server 库，web为110.59.2.37的链接&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-kill  --user=root --password=123456 --port=3306 \
--victims all --match-db='qz_business_service' \
--match-host='10.59.2.37' --kill --daemonize \
--interval 10 -S /tmp/mysql.sock \
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　6. 指定哪个用户kill&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-kill --user=root --password=123456 --port=3306 \
--victims all --match-user='root' --kill --daemonize --interval 10 -S /tmp/mysql.sock \
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　7. kill掉 command query | Execute&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
/usr/bin/pt-kill --user=root --password=123456 --port=3306 \
--victims all --match-command= &quot;query|Execute&quot; --interval 5 \
--kill --daemonize -S /tmp/mysql.sock \
--pid=/tmp/ptkill.pid --print --log=/home/pt-kill.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;322-pt-kill-使用注意事项&quot;&gt;3.2.2 pt-kill 使用注意事项&lt;/h5&gt;
&lt;p&gt;每台主服务器部署pt-kill进程后台跑着。根据业务情况设置间隔时间，&lt;span&gt;&lt;code&gt;多久检测一次（建议只设置SELECT ）update 、DELETE不建议&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-kill --log-dsn D=dba,t=killed_sql_table \
--create-log-table --host=127.0.0.1 --user=root --password='密码' --port=6006 \
--busy-time=300 --print --kill-query --ignore-info &quot;into|INTO|update|UPDATE|delete|DELETE&quot; \
--match-info &quot;SELECT|select&quot; --victims all &amp;amp;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的&lt;code&gt;语句会把大于5分钟的SELECT 语句insert 到本机的dba库里的killed_sql_table表里。注意：区分大小写的。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;记录到本机是因为kill 到哪些语句，记录下来，方便好查询。&lt;/p&gt;

&lt;h4 id=&quot;34-pt-online-schema-change&quot;&gt;3.4 pt-online-schema-change&lt;/h4&gt;
&lt;h5 id=&quot;341-pt-osc-介绍&quot;&gt;3.4.1 pt-osc 介绍&lt;/h5&gt;
&lt;p&gt;业界简称 pt-osc 在线更改表结构&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;MySQL 大字段的DDL操作：加减字段、索引、修改字段属性等，在5.1之前都是非常耗时耗力的，特别是会对MySQL服务产生影响。在5.1之后随着Plugin Innodb的出现在线加索引的提高了很多，但是还会影响（时间缩短了），主要是出现了MDL锁(MySQL为了保护数据字典元数据，使用了metadata lock)。不过5.6可以避免上面的情况，但目前大部分在用的版本都是5.6之前的，所以DDL操作一直是数据库管理人员“头疼”的事。那如何在不锁表的情况下安全快速地更新表结构？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;pt-osc模仿MySQL内部的改表方式进行改表，但整个改表过程是通过对原始表的拷贝来完成的，即在改表过程中原始表不会被锁定，并不影响对该表的读写操作。&lt;/p&gt;
&lt;p&gt;首先，osc创建与原始表相同的不包含数据的新表（下划线开头）并按照需求进行表结构的修改，然后将原始表中的数据按逐步拷贝到新表中，当拷贝完成后，会自动同时修改原始表和新表的名字并默认将原始表删除&lt;/p&gt;
&lt;p&gt;有两个注意点：&lt;span&gt;&lt;code&gt;被操作的表如果有 触发器，或外键用不了。要特别注意（标准规范MySQL是不建议用外键与触发器的）如果有，要把外键与触发器去掉再操作&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;注：1. 虽然有工具可以修改，但是修改的时候最好是在业务低峰期进行操作&lt;br/&gt;2 还需了解官方的online-ddl ,做好安全措施，哪些可以改都要了解清楚 https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl.html&lt;/p&gt;

&lt;h5 id=&quot;342-pt-osc-简单使用说明&quot;&gt;3.4.2 pt-osc 简单使用说明&lt;/h5&gt;
&lt;p&gt;pt-online-schema-change —-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;在线DDL操作，对上亿的大表加索引加字段且对生产无影响&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;主要工作原理：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;1.创建一个和要执行 alter 操作的表一样的新的空表结构(是alter之前的结构)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;2.在新表执行alter table 语句（速度应该很快）&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;3.在原表中创建触发器3个触发器分别对应insert,update,delete操作&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;4.以一定块大小从原表拷贝数据到临时表，拷贝过程中通过原表上的触发器在原表进行的写操作都会更新到新建的临时表&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;5.Rename 原表到old表中，在把临时表Rename为原表&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;6.如果有参考该表的外键，根据alter-foreign-keys-method参数的值，检测外键相关的表，做相应设置的处理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;7. 默认最后将旧原表删除&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;code&gt;如果执行失败了，或手动停止了，需要手动删除下划线开头的表(_表名)及三个触发器&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;主要几个参数：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;code&gt;--max-load&lt;/code&gt;&lt;br/&gt;默认为&lt;code&gt;Threads_running=25&lt;/code&gt;。每个chunk拷贝完后，会检查SHOW GLOBAL STATUS的内容，检查指标是否超过了指定的阈值。如果超过，则先暂停。这里可以用逗号分隔，指定多个条件，每个条件格式： status指标=MAX_VALUE或者status指标:MAX_VALUE。如果不指定MAX_VALUE，那么工具会这只其为当前值的120%。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108131625848-1927958759.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; --&lt;code&gt;critical-load&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 默认为Threads_running=50。用法基本与–max-load类似，如果不指定MAX_VALUE，那么工具会这只其为当前值的200%。如果超过指定值，则工具直接退出，而不是暂停。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
--user: -u，连接的用户名
--password： -p，连接的密码 
--database： -D，连接的数据库
 --port -P，连接数据库的端口 
--host: -h，连接的主机地址 
--socket: -S，连接mysql套接字文件
--statistics 打印出内部事件的数目，可以看到复制数据插入的数目。 
--dry-run 创建和修改新表，但不会创建触发器、复制数据、和替换原表。并不真正执行，可以看到生成的执行语句，了解其执行步骤与细节。--dry-run与--execute必须指定一个，二者相互排斥。和--print配合最佳。
--execute 确定修改表，则指定该参数。真正执行。--dry-run与--execute必须指定一个，二者相互排斥。
--print  打印SQL语句到标准输出。指定此选项可以让你看到该工具所执行的语句，和--dry-run配合最佳。 --progress 复制数据的时候打印进度报告，二部分组成：第一部分是百分比，第二部分是时间。 
--quiet -q，不把信息标准输出。
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;343-pt-osc-案例&quot;&gt;3.4.3 pt-osc 案例&lt;/h5&gt;
&lt;p&gt;1 . 添加索引的案例&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;对t=uc_user ,对uc_user表的user_name 列添加索引，索引名为index_uname。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-online-schema-change \
--user=root --password='123456'  --port=3306 --host=127.0.0.1 --critical-load Threads_running=100  \
--alter &quot;ADD INDEX index_uname (user_name)&quot; D=course,t=uc_user --print --execute
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108132953126-585076965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;修改过程中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133007951-1040382546.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 查看uc_user表的结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133027820-686780401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ok&lt;/p&gt;
&lt;ol start=&quot;2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;对uc_user 添加periodID列&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-online-schema-change \
--user=root --password='123456' --port=3306 --host=127.0.0.1 \
--critical-load Threads_running=200 --alter &quot;ADD COLUMN periodID int(11)&quot; \
D=course,t=uc_user --print --execute
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133251099-1088195385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; ok&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133308219-2132977835.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3. 删除列 periodID&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;删除过程中，中断这个语句会发生什么，看看创建的_uc_user_new 触发器等，试一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133339297-498602063.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;看看数据库是否还有_uc_user_new 还有这个表没有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133405432-1870913266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;还有这个表， 那数据是不是还有，如果_uc_user_new 有数据，原表是否还有这个数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133431969-335132786.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;数据也都有，对原来这个表的数据没影响。&lt;/p&gt;
&lt;p&gt;上面说过：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;如果执行失败了，或手动停止了，需要手动删除下划线开头的表(_表名)及三个触发器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133524815-153181762.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133531447-1424009237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
DROP TABLE IF EXISTS `course`.`_uc_user_new`;
DROP TRIGGER IF EXISTS `course`.`pt_osc_course_uc_user_del`;
DROP TRIGGER IF EXISTS `course`.`pt_osc_course_uc_user_upd`;
DROP TRIGGER IF EXISTS `course`.`pt_osc_course_uc_user_ins`;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133554237-383010999.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 现在删除列 periodID&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-online-schema-change \
--user=root --password='123456' --port=3306 --host=127.0.0.1 \
--critical-load Threads_running=200 --alter &quot;drop column periodID&quot; D=course,t=uc_user --print --execute
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;验证：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108133634369-145733624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;35-pt-query-digest&quot;&gt;3.5 pt-query-digest&lt;/h4&gt;
&lt;p&gt;慢查询Log的分析—此对DBA抓取慢查询很有帮助：&lt;/p&gt;
&lt;p&gt;使用这个的前提必须开启了MySQL慢查询.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;虽然可以cat 慢查询的日志文件，但慢查询文件特别大了， 哪一个sql 执行是最慢的了，哪一个执行次数最多了。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;用pt-query-digest 查询就很方便&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h5 id=&quot;351-pt-query-digest-常用参数&quot;&gt;3.5.1 pt-query-digest 常用参数&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
--create-review-table  当使用--review参数把分析结果输出到表中时，如果没有表就自动创建。
--create-history-table  当使用--history参数把分析结果输出到表中时，如果没有表就自动创建。
--filter  对输入的慢查询按指定的字符串进行匹配过滤后再进行分析
--limit限制输出结果百分比或数量，默认值是20,即将最慢的20条语句输出，如果是50%则按总响应时间占比从大到小排序，输出到总和达到50%位置截止。
--host  mysql服务器地址
--user  mysql用户名
--password  mysql用户密码
--history 将分析结果保存到表中，分析结果比较详细，下次再使用--history时，如果存在相同的语句，且查询所在的时间区间和历史表中的不同，则会记录到数据表中，可以通过查询同一CHECKSUM来比较某类型查询的历史变化。
--review 将分析结果保存到表中，这个分析只是对查询条件进行参数化，一个类型的查询一条记录，比较简单。当下次使用--review时，如果存在相同的语句分析，就不会记录到数据表中。
--output 分析结果输出类型，值可以是report(标准分析报告)、slowlog(Mysql slow log)、json、json-anon，一般使用report，以便于阅读。
--since 从什么时间开始分析，值为字符串，可以是指定的某个”yyyy-mm-dd [hh:mm:ss]”格式的时间点，也可以是简单的一个时间值：s(秒)、h(小时)、m(分钟)、d(天)，如12h就表示从12小时前开始统计。
--until 截止时间，配合—since可以分析一段时间内的慢查询。
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;352-pt-query-digst-案例&quot;&gt;3.5.2 pt-query-digst 案例&lt;/h5&gt;
&lt;ol start=&quot;1&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;分析指定时间段的慢查询&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;分析2018-09-07 00:00:00 到 2018-12-24 15:50:00&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-query-digest /usr/local/mysql/data/master01-slow.log  --since '2018-09-07 00:00:00' --until '2018-12-24 15:50:00'
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;分析指定时间的慢查询日志 ，这样出的数据直接打印到屏幕上，可以输入到一个文件里 后面加上 &amp;gt; 就可以了&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;展示图如下：靠前的都是比较慢的SQL ，需要优先处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108145324932-1633289941.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Overall: 总共有多少条查询，上例为总共14个查询(这是我的测试机器)。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;Time range: 查询执行的时间范围。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;unique: 唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询，该例为64。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;total: 总计&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;min : 最小&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;max : 最大&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;avg : 平均 95%: 把所有值从小到大排列，位置位于95%的那个数，这个数一般最具有参考价值。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;median : 中位数，把所有值从小到大排列，位置位于中间那个数。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2. 分析指含有select语句的慢查询&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-query-digest  --filter '$event-&amp;gt;{fingerprint} =~ m/^select/i'  /usr/local/mysql/data/master01-slow.log  &amp;gt; slow_report4.log
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　3. 针对某个用户的慢查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-query-digest  --filter '($event-&amp;gt;{user} || &quot;&quot;) =~ m/^root/i'  /usr/local/mysql/data/master01-slow.log  &amp;gt; slow_report5.log
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;36-pt-slave-delay&quot;&gt;3.6 pt-slave-delay&lt;/h4&gt;
&lt;p&gt;--pt-slave-delay ---就是指定从库比主库延迟多长时间，&lt;span&gt;从库上执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;MySQL 5.6 之后就有自带的延迟配置&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;延迟复制配置，通过设置Slave上的MASTER TO MASTER_DELAY&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;参数实现：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
 CHANGE MASTER TO MASTER_DELAY = N；
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;作用：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;MySQL在做主从同步时，可以指定从库从主库延迟多长时间，这样有一个好处，当主库上勿删数据时，可以到延迟从库上stop slave 上，然后可以从从库上恢复一些数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;原理：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;通过启动和停止从服务器的sql线程来设置从落后于主。它是通过slave的relay log（中继日志）的position(偏移量），不断启动，关闭replication SQL thread来保持主从一直延时固定长的时间来实现。因此不需要连接到主服务器。如果IO进程不落后主服务器太多的话，这个检查方式还是有效的,如果IO线程延时过大，pt-slave-delay也可以连接到主库来获取binlog的位置信息。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-slave-delay --delay=1m --interval=15s --run-time=10m u=root,p=123456,h=127.0.0.1,P=3306
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
--delay ：从库延迟主库的时间，上面为1分钟。
--interval ：检查的间隔时间，上面为15s检查一次。（可选），不选则1分钟检查一次(默认)。 
--run-time ：该命令运行时间，上面为该命令运行10分钟关闭。（可选），不选则永远运行。--一搬不加此参数 
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;note&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;注意：延迟的时间实际为 delay+interval，即该命令的让从延迟主75s。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;37-pt-table-checksum-pt-table-sync&quot;&gt;3.7 pt-table-checksum &amp;amp; pt-table-sync&lt;/h4&gt;
&lt;h5 id=&quot;371-检查-pt-table-checksum&quot;&gt;3.7.1 检查 pt-table-checksum&lt;/h5&gt;
&lt;p&gt;pt-table-checksum &amp;amp; pt-table-sync—–检查主从是否一致性—–检查主从不一致之后用这个工具进行处理&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;这两个一搬是搭配使用（一搬主从不一样肯定要查一下，不能直接修复就完事了。）&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;–参数讲解：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
replicate=test.checksum：主从不一致的结果放到哪一张表中，一般我放在一个既有的数据库中，这个checksum表由pt-table-checksum工具自行建立。 
databases=testdb ：我们要检测的数据库有哪些，这里是testdb数据库，如果想检测所有数据库那么就不要写这个参数了，如果有多个数据库，我们用逗号连接就可以了。 
host=’127.0.0.1’ ：主库的IP地址或者主机名。 
user=dba ：主机用户名。 —确定此用户可以访问主从数据库 
port=6006：主库端口号。 
recursion-method=hosts ：主库探测从库的方式。 
empty-replicate-table：清理上一次的检测结果后开始新的检测。 
no-check-bin-log-format：不检查二进制日志格式，鉴于目前大多数生产数据库都将二进制日志设置为“ROW”格式，而我们的pt-table-checksum会话会自行设定用“STATEMENT”格式，&lt;br/&gt;所以这个选项请务必加上。(具体什么格式，在服务器最好查一下show variables like ‘binlog_format’;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;pt-table-checksum的使用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-table-checksum --nocheck-replication-filters  \
--no-check-binlog-format --replicate=test.checksums --recursion-method=hosts --databases=log_manage  \
h=localhost,u=sys_dba,p='密码',P=6006
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注：主与从库一定要有一个公用帐号。权限大一些，也就是从主库能登录到从库上的。不然会有如下报错。提示找不到，因为会自动找从库比对&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108145942382-1458622803.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面加上正确的权限之后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108145957964-1352848633.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;TS ：完成检查的时间。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;ERRORS ：检查时候发生错误和警告的数量。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;DIFFS ：0表示一致，1表示不一致。当指定–no-replicate-check时，会一直为0，当指定–replicate-check-only会显示不同的信息。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;ROWS ：表的行数。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;CHUNKS ：被划分到表中的块的数目。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;SKIPPED ：由于错误或警告或过大，则跳过块的数目。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;TIME ：执行的时间。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;TABLE ：被检查的表名&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108150039148-1277956472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108150053072-1130279489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;检测DIFF有异常时，立刻到从库去看：&lt;code&gt;记住了是从库&lt;/code&gt;：this_crc.这是本机。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;上面这个是正常没有差异的&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
SELECT db, tbl, SUM(this_cnt) AS total_rows, COUNT(*) AS chunks
FROM test.checksums
WHERE (
master_cnt &amp;lt;&amp;gt; this_cnt
OR master_crc &amp;lt;&amp;gt; this_crc
OR ISNULL(master_crc) &amp;lt;&amp;gt; ISNULL(this_crc))
GROUP BY db, tbl;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108150235511-374135761.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h5 id=&quot;372-修复pt-table-sync&quot;&gt;3.7.2 修复pt-table-sync&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;检测有差异之后到从库上执行一下修复：&lt;/code&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;用这个前提是此&lt;code&gt;表必须要有主键或唯一索引&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108150316435-837745745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-table-sync --sync-to-master --replicate=test.checksums h=127.0.0.1,u=dba,P=6006,p=‘密码’ --print
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;只打印不执行—看详细&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108150439282-1938591042.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-table-sync --sync-to-master --replicate=test.checksums h=127.0.0.1,u=dba,P=6006,p='密码' --execute
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;开始执行就修复了，再看一下就OK了&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;再检测就没有了&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;38-pt-find&quot;&gt;3.8 pt-find&lt;/h4&gt;
&lt;p&gt;　　1. 找出大于10G的表&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
/usr/bin/pt-find --socket=/mysql-socket的文件 --user=root --password='密码' --port=6006 --tablesize +10G
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2. 25分钟之修改过的表&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
/usr/bin/pt-find --socket=/mysql-socket的文件 --user=root --password='密码' --port=6006 --mmin -25
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　3. 空表没有数据的表&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
/usr/bin/pt-find --socket=/mysql-socket的文件 --user=root --password='密码' --port=6006 --empty
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;39-pt-slave-restart&quot;&gt;3.9 pt-slave-restart&lt;/h4&gt;
&lt;p&gt;pt-slave-restart —–主从报错，跳过报错 ,&lt;span&gt;&lt;code&gt;在从库执行&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;常用参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
--always        :永不停止slave线程，手工停止也不行
--ask-pass      :替换-p命令，防止密码输入被身后的开发窥屏
--error-numbers ：指定跳过哪些错误，可用,进行分隔
--error-text    ：根据错误信息进行匹配跳过
--log           ：输出到文件
--recurse       ：在主端执行，监控从端
--runtime       ：工具执行多长时间后退出：默认秒， m=minute,h=hours,d=days
--slave-user --slave-password ：从库的账号密码，从主端运行时使用
--skip-count    ：一次跳过错误的个数，胆大的可以设置大些，不指定默认1个
--master-uuid   :级联复制的时候，指定跳过上级或者上上级事务的错误
--until-master  :到达指定的master_log_pos,file位置后停止，
                              格式：”file:pos“
--until-relay   :和上面一样，但是时根据relay_log的位置来停止
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;自动跳过主从同步1032的报错 建议在从库上如下这个就可以了，多个以逗号隔开就可以了&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
/usr/bin/pt-slave-restart --user=root --password='密码' --port=6006 --host=127.0.0.1 --error-numbers=1032
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;310-pt-mysql-summary&quot;&gt;3.10 pt-mysql-summary&lt;/h4&gt;
&lt;p&gt;pt-mysql-summary —MySQL的描述信息，包括配置文件的描述&lt;/p&gt;
&lt;p&gt;show processlist 查看MySQL的连接，&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;pt-find打印出来的信息包括：版本信息、数据目录、命令的统计、用户，数据库以及复制等信息还包括各个变量（status、variables）信息和各个变量的比例信息，还有配置文件等信息。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pt-mysql-summary  --user=root --password='password' --host=127.0.0.1 --port=6007
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108151133167-1475637878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;工具很多 可以看看官方文档：https://www.percona.com/doc/percona-toolkit/LATEST/index.html&lt;/p&gt;
</description>
<pubDate>Sat, 19 Jan 2019 07:04:00 +0000</pubDate>
<dc:creator>keme</dc:creator>
<og:description>1 PT介绍 Percona Toolkit简称pt工具—PT-Tools，是Percona公司开发用于管理MySQL的工具，功能包括检查主从复制的数据一致性、检查重复索引、定位IO占用高的表文件、在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/keme/p/10237590.html</dc:identifier>
</item>
<item>
<title>Java实现Ip代理池 - Asche</title>
<link>http://www.cnblogs.com/asche/p/10291701.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/asche/p/10291701.html</guid>
<description>&lt;pre&gt;
&lt;code&gt;设置Ip代理很多时候都会有用到，尤其是在写爬虫相关项目的时候。虽然自己目前没有接触这种需求，但由于最近比较闲，就写着当作练习吧&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;爬取代理ip&quot;&gt;爬取代理IP&lt;/h2&gt;
&lt;h3 id=&quot;爬取&quot;&gt;爬取&lt;/h3&gt;
&lt;p&gt;关于爬取代理IP，国内首先想到的网站当然是 &lt;a href=&quot;https://www.xicidaili.com/&quot;&gt;西刺代理&lt;/a&gt; 。首先写个爬虫获取该网站内的Ip吧。&lt;/p&gt;
&lt;p&gt;先对 &lt;a href=&quot;https://www.xicidaili.com/wt/&quot;&gt;国内Http代理&lt;/a&gt; 标签页面进行爬取，解析页面使用的&lt;a href=&quot;https://jsoup.org/&quot;&gt;Jsoup&lt;/a&gt; ，这里大概代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; private List&amp;lt;IPBean&amp;gt; crawl(String api, int index){
        String html = HttpUtils.getResponseContent(api + index);
        System.out.println(html);

        Document document = Jsoup.parse(html);
        Elements eles = document.selectFirst(&quot;table&quot;).select(&quot;tr&quot;);

        for (int i = 0; i &amp;lt; eles.size(); i++){
            if (i == 0) continue;
            Element ele = eles.get(i);
            String ip = ele.children().get(1).text();
            int port = Integer.parseInt(ele.children().get(2).text().trim());
            String typeStr = ele.children().get(5).text().trim();

            int type;
            if (&quot;HTTP&quot;.equalsIgnoreCase(typeStr))
                type = IPBean.TYPE_HTTP;
            else
                type = IPBean.TYPE_HTTPS;

            IPBean ipBean = new IPBean(ip, port, type);
            ipList.add(ipBean);
        }
        return ipList;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对某些不明白的变量，可以参考我&lt;a href=&quot;https://github.com/asche910/HttpProxy&quot;&gt;Github&lt;/a&gt;&lt;br/&gt;其中关键的就是css选择器语法，这里需要注意的是不要乱加空格，不然会导致找不到出现空指针。&lt;br/&gt;css选择器语法具体&lt;a href=&quot;https://jsoup.org/cookbook/extracting-data/selector-syntax&quot;&gt;参考这里&lt;/a&gt; ， 这里就不讲解了。&lt;/p&gt;
&lt;p&gt;爬取的信息包括 ip地址、端口号、和代理类型(http或https), 这三个信息我放在IPBean这个类里面。&lt;/p&gt;
&lt;h3 id=&quot;过滤&quot;&gt;过滤&lt;/h3&gt;
&lt;p&gt;上面爬取完成后，还要进一步过滤，筛选掉不能使用的。&lt;/p&gt;
&lt;p&gt;筛选大概原理就是先设置上代理，然后请求某个网页，若成功则代表此代理ip有效。&lt;br/&gt;其中请求成功的标志我们可以直接获取请求的返回码，若为200即成功。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    /**
     * 检测代理ip是否有效
     *
     * @param ipBean
     * @return
     */
    public static boolean isValid(IPBean ipBean) {
        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(ipBean.getIp(), ipBean.getPort()));
        try {
            URLConnection httpCon = new URL(&quot;https://www.baidu.com/&quot;).openConnection(proxy);
            httpCon.setConnectTimeout(5000);
            httpCon.setReadTimeout(5000);
            int code = ((HttpURLConnection) httpCon).getResponseCode();
            System.out.println(code);
            return code == 200;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意这里要设置两个超时，连接超时和读取超时。连接超时还好，它默认只是有点长；然而读取超时如果不设置，它好像就会一直阻塞着。&lt;br/&gt;时间设置为5s就够了，毕竟如果ip有效的话，会很快就请求成功的。这样过滤后，就得到有效的代理ip了&lt;/p&gt;
&lt;h2 id=&quot;设置代理&quot;&gt;设置代理&lt;/h2&gt;
&lt;h3 id=&quot;单次代理&quot;&gt;单次代理&lt;/h3&gt;
&lt;p&gt;单次代理表示只在这一次连接中有效，即每次都需要代理。&lt;/p&gt;
&lt;p&gt;http方式的代理非常简单，在URL对象的openConnection方法中加上个Proxy对象即可&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
 Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(ipBean.getIp(), ipBean.getPort()));

 connection = (HttpsURLConnection) new URL(url).openConnection(proxy);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;https 稍微复杂点了，中间加上了ssl协议&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
    /**
     * @param url
     * @param headerMap 请求头部
     * @param ipBean
     * @return
     * @throws Exception
     */
    public static String getResponseContent(String url, Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; headerMap, IPBean ipBean) throws Exception {
        HttpsURLConnection connection = null;

        // 设置代理
        if (ipBean != null) {
            Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(ipBean.getIp(), ipBean.getPort()));

            connection = (HttpsURLConnection) new URL(url).openConnection(proxy);

            if (ipBean.getType() == IPBean.TYPE_HTTPS) {
                SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;);
                sslContext.init(null, new TrustManager[]{new TrustAnyTrustManager()}, new java.security.SecureRandom());
                connection.setSSLSocketFactory(sslContext.getSocketFactory());
                connection.setHostnameVerifier(new TrustAnyHostnameVerifier());
            }
        }

        if (connection == null)
            connection = (HttpsURLConnection) new URL(url).openConnection();

        // 添加请求头部
        connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36&quot;);
        if (headerMap != null) {
            Iterator&amp;lt;Map.Entry&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt; iterator = headerMap.entrySet().iterator();
            while (iterator.hasNext()) {
                Map.Entry&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; entry = iterator.next();
                List&amp;lt;String&amp;gt; values = entry.getValue();
                for (String value : values)
                    connection.setRequestProperty(entry.getKey(), value);
            }
        }

        InputStream inputStream = connection.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

        StringBuilder stringBuilder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            stringBuilder.append(line);
        }
        reader.close();
        inputStream.close();
        return stringBuilder.toString();
    }


    private static class TrustAnyTrustManager implements X509TrustManager {

        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }

        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }

        public X509Certificate[] getAcceptedIssuers() {
            return new X509Certificate[]{};
        }
    }

    private static class TrustAnyHostnameVerifier implements HostnameVerifier {
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里https方法参考了 &lt;a href=&quot;https://blog.csdn.net/sbc1232123321/article/details/79334130&quot;&gt;这篇博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;全局代理&quot;&gt;全局代理&lt;/h3&gt;
&lt;p&gt;直接上代码，就几行代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package util;

import other.IPBean;

/**
 * @author Asche
 * @github: https://github.com/asche910
 * @date 2019年1月19日
 */
public class ProxyUtils {

    /**
     * 设置全局代理
     * @param ipBean
     */
    public static void setGlobalProxy(IPBean ipBean){
        System.setProperty(&quot;proxyPort&quot;, String.valueOf(ipBean.getPort()));
        System.setProperty(&quot;proxyHost&quot;, ipBean.getIp());
        System.setProperty(&quot;proxySet&quot;, &quot;true&quot;);
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意一点就是全局只是在该java项目中生效，它不会更改系统中的代理。&lt;/p&gt;
&lt;h3 id=&quot;检测&quot;&gt;检测&lt;/h3&gt;
&lt;p&gt;设置完代理后，也可以用另外一种方法来判断是否代理成功，即直接获取当前ip地址。&lt;br/&gt;这里我使用的是 https://www.ipip.net/ip.html 这个网站，请求获取html后再解析得到自己的当前ip&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
 private static final String MY_IP_API = &quot;https://www.ipip.net/ip.html&quot;;

    // 获取当前ip地址，判断是否代理成功
    public static String getMyIp() {
        try {
            String html = HttpUtils.getResponseContent(MY_IP_API);

            Document doc = Jsoup.parse(html);
            Element element = doc.selectFirst(&quot;div.tableNormal&quot;);

            Element ele = element.selectFirst(&quot;table&quot;).select(&quot;td&quot;).get(1);

            String ip = element.selectFirst(&quot;a&quot;).text();

            // System.out.println(ip);
            return ip;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;优化&quot;&gt;优化&lt;/h2&gt;
&lt;p&gt;emmm 优化些啥呢？？？&lt;/p&gt;
&lt;h3 id=&quot;速度&quot;&gt;速度&lt;/h3&gt;
&lt;p&gt;爬取ip时就几个网页，优化估计效果不大。而真正耗时的是检测ip是否有效，因此这里采用多线程，对每个ip的检测请求使用一个线程，最后副线程全部结束后再统计出有多少有效ip。然而问题又来了，怎么判断所有副线程全部结束了呢？？？ 脑中立刻想到的是join方法，然而仔细想想，才发现这样并不可取。最佳方法应该是设置一个计数器，每个线程结束后计数器加一，然后在主线程循环判断计数器的值是否与线程总数相等即可。由于涉及到并发，需要给某些方法加上锁。这里我代码中实现了，可以参考&lt;a href=&quot;https://github.com/asche910/HttpProxy&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1470456/201901/1470456-20190119144416843-1338561809.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;持久化&quot;&gt;持久化&lt;/h3&gt;
&lt;p&gt;emmm 由于目前只是练练手，并没有这样的需求，比较懒， ~(￣▽￣)~*&lt;br/&gt;所以这个需求暂时放放吧，以后有时间再写&lt;/p&gt;
&lt;p&gt;最后github入口：&lt;a href=&quot;https://github.com/asche910/HttpProxy&quot;&gt;Asche910&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 Jan 2019 06:46:00 +0000</pubDate>
<dc:creator>Asche</dc:creator>
<og:description>爬取代理IP 爬取 关于爬取代理IP，国内首先想到的网站当然是 '西刺代理' 。首先写个爬虫获取该网站内的Ip吧。 先对 '国内Http代理' 标签页面进行爬取，解析页面使用的 'Jsoup' ，这里</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/asche/p/10291701.html</dc:identifier>
</item>
<item>
<title>Raft 基础 - 莫那-鲁道</title>
<link>http://www.cnblogs.com/stateis0/p/9993170.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stateis0/p/9993170.html</guid>
<description>&lt;p&gt;目录&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;三个状态&lt;/li&gt;
&lt;li&gt;什么是任期&lt;/li&gt;
&lt;li&gt;节点之间的通信&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;1-三个状态&quot;&gt;1. 三个状态&lt;/h2&gt;
&lt;p&gt;Raft 设计了 3 个状态，用于表示节点的状态，分别是跟随者，候选者，领导者。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;领导者：通常只有一个领导人，并且其他节点都是跟随者。&lt;/li&gt;
&lt;li&gt;跟随者：跟随者不会发送任何请求，只是简单的响应领导者或者候选人的请求，由领导人处理所有的客户端请求（如果客户端请求了跟随者，那么跟随者会将请求转发给领导者）&lt;/li&gt;
&lt;li&gt;候选者：选举新的领导人时使用。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;3 个角色的转换关系和流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-3a3807aa671bce4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图 1 &quot; width=&quot;416&quot; height=&quot;152&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这张图里的几个概念：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;初始化：所有服务器启动时，都是跟随者&lt;/li&gt;
&lt;li&gt;超时：当初始时， 没有收到领导人的心跳，便开始选举。如果候选者选举的时候，也超时了，便重新选举。&lt;/li&gt;
&lt;li&gt;大多数的选票：成为领导人的关键是 —— 获取大多数服务器的选票，可以看做是鸽笼原理。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;2-什么是任期&quot;&gt;2. 什么是任期&lt;/h2&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;2 个阶段&lt;/li&gt;
&lt;li&gt;任期&lt;/li&gt;
&lt;li&gt;服务器之间的通信&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;背景：由于机器的物理时间是不可靠的，所以需要一个逻辑时间。称之为任期（term）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从 2 个阶段开始说起&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;集群节点通常有 2 个节点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;选举阶段&lt;/li&gt;
&lt;li&gt;领导者正常运行&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;例外：当选举失败，会进行加时赛，即连续有 2 个选举过程。&lt;/p&gt;
&lt;p&gt;见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-d7bfb023c238c533.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图 2&quot; width=&quot;499&quot; height=&quot;196&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图 2 可见任期 3 选举失败，然后进行了重新选举。&lt;/p&gt;
&lt;p&gt;重新选举会继续失败吗？&lt;/p&gt;
&lt;p&gt;答：如果不做限制，是会理解失败的。&lt;/p&gt;
&lt;p&gt;Raft 使用了一个限制来规避：每台服务器在选举的时候，使用一个随机数（150 -200），即每个服务器在不同的时间发出选举。防止冲突。称之为“加时赛”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任期号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在上文中说道：由于机器的物理时间是不可靠的，所以需要一个逻辑时间。称之为任期（term）。&lt;/p&gt;
&lt;p&gt;有关任期的几个特点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;节点有可能观察不到任何一次选举或者任期。&lt;/li&gt;
&lt;li&gt;任期充当逻辑时钟，服务器节点可以通过任期号查明过期的领导者或过期的信息。&lt;/li&gt;
&lt;li&gt;每个节点存储当前任期号，单调递增。&lt;/li&gt;
&lt;li&gt;服务器之间的每次通信，都会交换当前任期号，交换任期号的目的： 4.1 如果一个服务器的当前任期号比其他人小，则更新自己。 4.2 如果一个候选人或者领导人发现自己的任期号过期了，立刻将自己变成跟随者状态。 4.3 如果一个节点收到一个过期的任期号的请求，直接拒绝。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;3-节点之间的通信&quot;&gt;3. 节点之间的通信&lt;/h2&gt;
&lt;p&gt;服务器之间通过 RPC 通信，即远程方法调用。&lt;/p&gt;
&lt;p&gt;在 Raft 中，RPC 分成 3 种：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;请求投票： RequestVote 由候选人在选举任期发起&lt;/li&gt;
&lt;li&gt;附加条目 AppendEntries 由领导人发起，用来复制日志和提供心跳。&lt;/li&gt;
&lt;li&gt;为了传输快照单独增加的 RPC。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;备注：当服务没有及时收到 RPC 的响应时，会发起重试。&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;3 个状态的意义和他们之间切换&lt;/li&gt;
&lt;li&gt;任期的设计背景，任期在节点通信时的作用，任期在增长策略。&lt;/li&gt;
&lt;li&gt;节点直接的通信 RPC 类型以及策略。&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 19 Jan 2019 06:29:00 +0000</pubDate>
<dc:creator>莫那-鲁道</dc:creator>
<og:description>目录 1. 三个状态 Raft 设计了 3 个状态，用于表示节点的状态，分别是跟随者，候选者，领导者。 3 个角色的转换关系和流程： 可以看到，这张图里的几个概念： 2. 什么是任期 目录： 背景：由</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stateis0/p/9993170.html</dc:identifier>
</item>
<item>
<title>Python机器学习笔记 Logistic回归 - 战争热诚</title>
<link>http://www.cnblogs.com/wj-1314/p/10181876.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wj-1314/p/10181876.html</guid>
<description>&lt;h2&gt;Logistic回归公式推导和代码实现&lt;/h2&gt;
&lt;h3&gt;1，引言&lt;/h3&gt;
&lt;p&gt;　　logistic回归是机器学习中最常用最经典的分类方法之一，有人称之为逻辑回归或者逻辑斯蒂回归。虽然他称为回归模型，但是却处理的是分类问题，这主要是因为它的本质是一个线性模型加上一个映射函数Sigmoid，将线性模型得到的连续结果映射到离散型上。它常用于二分类问题，在多分类问题的推广叫softmax。&lt;/p&gt;
&lt;p&gt;　　本文首先阐述Logistic回归的定义，然后介绍一些最优化算法，其中包括基本的梯度上升法和一个改进的随机梯度上升法，这些最优化算法将用于分类器的训练，最好本文将给出一个Logistic回归的实例，预测一匹病马是否能被治愈。&lt;/p&gt;
&lt;p&gt;　　在我们的日常生活中遇到过很多最优化问题，比如如何在最短时间内从A点到达B点？如何投入最少工作量却获得最大的效益？如何设计发动机使得油耗最少而功率最大？可见，最优化的作用十分强大，所以此处我们介绍几个最优化算法，并利用它们训练出一个非线性函数用于分类。&lt;/p&gt;
&lt;p&gt;　　现在假设有一些数据点，我们用一条直线对这些点进行拟合（该线称为最佳拟合直线），这个拟合过程就称作回归。利用logistic回归进行分类的主要思想是：根据现有数据对分类边界线建立回归公式，以此进行分类，这里的“回归”一词源于最佳拟合，表示要找到最佳拟合参数集。训练分类器时的做法就是寻找最佳拟合参数，使用的是最优化算法，下面我们首先介绍一下这个二值型输出分类器的数学原理。&lt;/p&gt;
&lt;h3&gt;2，Logistic回归的一般过程&lt;/h3&gt;
&lt;p&gt;（1）收集数据：采用任意方法收集数据&lt;/p&gt;
&lt;p&gt;（2）准备数据：由于需要进行距离计算，因此要求数据类型为数值型。另外，结构化数据格式则最佳&lt;/p&gt;
&lt;p&gt;（3）分析数据：采用任意方法对数据进行分析&lt;/p&gt;
&lt;p&gt;（4）训练算法：大部分时间将用于训练，训练的目的是为了找到最佳的分类回归系数&lt;/p&gt;
&lt;p&gt;（5）使用算法：首先，我们需要输入一些数据，并将其转换成对应的结构化数值；接着，基于训练好的回归系数就可以对这些数值进行简单的回归计算，判定他们属于哪个类别；在这之后，我们就可以在输出的类别上做一些其他分析工作。&lt;/p&gt;
&lt;h3&gt;3，Logistic回归的优缺点&lt;/h3&gt;
&lt;p&gt;优点：计算代码不高，易于理解和实现，计算代价不高，速度快，存储资源低&lt;/p&gt;
&lt;p&gt;缺点：容易欠拟合，分类精度可能不高&lt;/p&gt;
&lt;p&gt;适用数据类型：数值型和标称型数据&lt;/p&gt;
&lt;h3&gt;4，基于Logistic回归和Sigmoid函数的分类&lt;/h3&gt;
&lt;p&gt; 　　我们想要的函数应该是，能接受所有的输入，然后预测出类型。例如，在两个类的情况下，上述函数输出0或1。该函数称为海维赛德阶跃函数（Heaviside step function），或者直接称为单位阶跃函数。然而，海维赛德阶跃函数的问题在于：该函数在跳跃点上从0瞬间跳跃到1，这个瞬间跳跃过程有时很难处理。幸好，另一个函数也有类似的性质（可以输出0或者1），且数学上更易处理，这就是Sigmoid函数。Sigmoid函数具体的计算公式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117103049502-1708143865.png&quot; alt=&quot;&quot; width=&quot;151&quot; height=&quot;45&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图5-1给出了Sigmoid函数在不同坐标尺度下的两条曲线图。当x为0时，Sigmoid函数值为0.5。随着x的增大，对应的Sigmoid值将逼近于1；而随着x的减少，Sigmoid值将逼近于0.如果横坐标刻度足够大，Sigmoid函数看起来很像一个阶跃函数。&lt;/p&gt;
&lt;p&gt;　　因此，为了实现Logistic回归分类器，我们可以在每个特征上都乘以一个回归系数，然后把所有的结果值相加，将这个总和带入Sigmoid函数中，进而得到一个范围在0~1之间的数值。任何大于0.5的数据被分入1类，小于0.5即被归入0类，所以，Logistic回归也可以被看成是一种概率估计。&lt;/p&gt;
&lt;p&gt;　　确定了分类器的函数形式之后，现在的问题变成了：最佳回归系数是多少？如何确定其大小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117103945694-397667562.png&quot; alt=&quot;&quot; width=&quot;487&quot; height=&quot;402&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5，基于最优化方法的最佳回归系数确定&lt;/h3&gt;
&lt;p&gt;　　Sigmoid函数的输入记为z，由下面公式得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117104535386-900490967.png&quot; alt=&quot;&quot; width=&quot;219&quot; height=&quot;25&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如果采用向量的写法，上述公式可以写成  z = w&lt;sup&gt;T&lt;/sup&gt;x  ，它表示将这两个数值向量对应元素相乘，然后全部加起来即得到z值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118110504542-1795107150.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　其中的向量x是分类器的输入数据，向量w也就是我们要找到的最佳参数（系数），从而使得分类器尽可能的准确，为了寻找该最佳参数，需要用到最优化理论的一些知识。&lt;/p&gt;
&lt;p&gt;　　然后再看看我们的Logistic回归模型的公式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118090734149-1536543111.png&quot; alt=&quot;&quot; width=&quot;120&quot; height=&quot;57&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　这里假设 W&amp;gt;0，Y与X各维度叠加的图形关系，如下图所示（x为了方便取1维）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118090703174-200916108.png&quot; alt=&quot;&quot; width=&quot;349&quot; height=&quot;255&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　下面首先学习梯度上升的最优化方法，我们将学习到如何使用该方法求得数据集的最佳参数，接下来，展示如何绘制梯度上升法产生的决策边界图，该图将梯度上升法的分类效果可视化的呈现出来，最后我们将学习随机梯度上升算法，以及如何对其进行修改以获得很好地结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
    可能我们最常听到的是梯度下降算法，它与这里的梯度上升算法是一样的，只是公式中的
加法需要变成减法，梯度上升算法用来求函数的最大值，而梯度下降算法是用来求函数的最小值
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6，梯度上升法 &lt;/h3&gt;
&lt;p&gt;　　梯度上升法基于的思想是：要找到某函数的最大值，最好的方法是沿着该函数的梯度方向探寻，如果梯度记为&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117105305181-361254300.png&quot; alt=&quot;&quot; width=&quot;19&quot; height=&quot;24&quot;/&gt;，则函数 f(x,y) 的梯度由下面式子表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117105519383-1703382811.png&quot; alt=&quot;&quot; width=&quot;138&quot; height=&quot;88&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个梯度意味着要沿着x的方向移动&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117105638970-1440295456.png&quot; alt=&quot;&quot; width=&quot;41&quot; height=&quot;33&quot;/&gt;，沿着y方向移动&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117105701139-1230281792.png&quot; alt=&quot;&quot; width=&quot;43&quot; height=&quot;36&quot;/&gt;，其中函数f(x,y)必须要在待计算的点上有定义并且可微，一个具体的函数例子见图5-2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117105823147-2127412009.png&quot; alt=&quot;&quot; width=&quot;455&quot; height=&quot;402&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　上图中的梯度上升算法沿梯度方向移动了一步，可以看出，梯度算子总是指向函数值增长最快的方向。这里所说的移动方向，而未提到移动量的大小。该量值称为步长，记为&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117110412238-1256927237.png&quot; alt=&quot;&quot; width=&quot;20&quot; height=&quot;24&quot;/&gt;。用向量来表示的话，梯度算法的迭代公式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117110508316-2096865811.png&quot; alt=&quot;&quot; width=&quot;161&quot; height=&quot;36&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　该公式将一直被迭代执行，直至达到某个停止条件为止，比如迭代次数达到某个指定值或算法达到某个可以允许的误差范围。&lt;/p&gt;
&lt;p&gt;　　基于上面的内容，我们来看一个Logistic回归分类器的应用例子，从图5-3可以看到我们采用的数据集。&lt;/p&gt;
&lt;h3&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117110948630-1620138445.png&quot; alt=&quot;&quot; width=&quot;499&quot; height=&quot;379&quot;/&gt;&lt;/h3&gt;
&lt;h3&gt;梯度上升法的公式推导&lt;/h3&gt;
&lt;p&gt;　　由于Sigmoid函数的特性，我们可以做如下的假设：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118103324660-122063949.png&quot; alt=&quot;&quot; width=&quot;218&quot; height=&quot;51&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上式即为在已知样本X和参数θ的情况下。样本X属性正类（y=1）和负类（y=0）的条件概率，将两个公式合并成一个，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118103531440-1766602636.png&quot; alt=&quot;&quot; width=&quot;270&quot; height=&quot;36&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　假定样本与样本之间相互独立，那么整个样本集生成的概率即为所有样本生成概率的乘积：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118103651010-1952261405.png&quot; alt=&quot;&quot; width=&quot;306&quot; height=&quot;126&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　为了简化问题，我们对整个表达式求对数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118103733308-1351930902.png&quot; alt=&quot;&quot; width=&quot;357&quot; height=&quot;72&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　满足似然函数（θ）的最大的θ值即时我们需要求解的模型。&lt;/p&gt;
&lt;p&gt;　　那么梯度上升法就像爬坡一样，一点一点逼近极值，而上升这个动作用数学公式表达即为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104023509-1621593535.png&quot; alt=&quot;&quot; width=&quot;254&quot; height=&quot;54&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其中，α 为步长。&lt;/p&gt;
&lt;p&gt;　　回到Logistic回归问题，我们同样对函数求偏导。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104113270-275596510.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;134&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对这个公式进行分解，先看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104134036-195658964.png&quot; alt=&quot;&quot; width=&quot;321&quot; height=&quot;62&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以看到，对函数求偏导，分解为三部分，然后我们对这三部分分布求导。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104153739-1342255793.png&quot; alt=&quot;&quot; width=&quot;418&quot; height=&quot;53&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再由：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104214030-2062622402.png&quot; alt=&quot;&quot; width=&quot;388&quot; height=&quot;178&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可得：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104226827-329892054.png&quot; alt=&quot;&quot; width=&quot;292&quot; height=&quot;61&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104248622-1527437985.png&quot; alt=&quot;&quot; width=&quot;320&quot; height=&quot;52&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104305254-218524707.png&quot; alt=&quot;&quot; width=&quot;284&quot; height=&quot;55&quot;/&gt;&lt;/p&gt;
&lt;p&gt;综合三部分即得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104323740-1645664436.png&quot; alt=&quot;&quot; width=&quot;257&quot; height=&quot;56&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因此梯度迭代公式为：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118104344239-1056401163.png&quot; alt=&quot;&quot; width=&quot;296&quot; height=&quot;42&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;7，训练算法：使用梯度上升找到最佳参数&lt;/h3&gt;
&lt;p&gt; 　　上图有100个样本点，每个点包含两个数值型特征：X1和X2，在此数据集上，我们将通过使用梯度上升法找到最佳回归系数，也就是拟合出Logistic回归模型的最佳参数。&lt;/p&gt;
&lt;p&gt;　　梯度上升法的伪代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
每个回归系数初始化为1

重复R次：
    
    计算整个数据集的梯度

    使用alpha * gradient 更新回归系数的向量

    返回回归系数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　testSet.txt的文件内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
-0.017612 14.053064       0
-1.395634       4.662541        1
-0.752157       6.538620        0
-1.322371       7.152853        0
0.423363        11.054677       0
0.406704        7.067335        1
0.667394        12.741452       0
-2.460150       6.866805        1
0.569411        9.548755        0
-0.026632       10.427743       0
0.850433        6.920334        1
1.347183        13.175500       0
1.176813        3.167020        1
-1.781871       9.097953        0
-0.566606       5.749003        1
0.931635        1.589505        1
-0.024205       6.151823        1
-0.036453       2.690988        1
-0.196949       0.444165        1
1.014459        5.754399        1
1.985298        3.230619        1
-1.693453       -0.557540       1
-0.576525       11.778922       0
-0.346811       -1.678730       1
-2.124484       2.672471        1
1.217916        9.597015        0
-0.733928       9.098687        0
-3.642001       -1.618087       1
0.315985        3.523953        1
1.416614        9.619232        0
-0.386323       3.989286        1
0.556921        8.294984        1
1.224863        11.587360       0
-1.347803       -2.406051       1
1.196604        4.951851        1
0.275221        9.543647        0
0.470575        9.332488        0
-1.889567       9.542662        0
-1.527893       12.150579       0
-1.185247       11.309318       0
-0.445678       3.297303        1
1.042222        6.105155        1
-0.618787       10.320986       0
1.152083        0.548467        1
0.828534        2.676045        1
-1.237728       10.549033       0
-0.683565       -2.166125       1
0.229456        5.921938        1
-0.959885       11.555336       0
0.492911        10.993324       0
0.184992        8.721488        0
-0.355715       10.325976       0
-0.397822       8.058397        0
0.824839        13.730343       0
1.507278        5.027866        1
0.099671        6.835839        1
-0.344008       10.717485       0
1.785928        7.718645        1
-0.918801       11.560217       0
-0.364009       4.747300        1
-0.841722       4.119083        1
0.490426        1.960539        1
-0.007194       9.075792        0
0.356107        12.447863       0
0.342578        12.281162       0
-0.810823       -1.466018       1
2.530777        6.476801        1
1.296683        11.607559       0
0.475487        12.040035       0
-0.783277       11.009725       0
0.074798        11.023650       0
-1.337472       0.468339        1
-0.102781       13.763651       0
-0.147324       2.874846        1
0.518389        9.887035        0
1.015399        7.571882        0
-1.658086       -0.027255       1
1.319944        2.171228        1
2.056216        5.019981        1
-0.851633       4.375691        1
-1.510047       6.061992        0
-1.076637       -3.181888       1
1.821096        10.283990       0
3.010150        8.401766        1
-1.099458       1.688274        1
-0.834872       -1.733869       1
-0.846637       3.849075        1
1.400102        12.628781       0
1.752842        5.468166        1
0.078557        0.059736        1
0.089392        -0.715300       1
1.825662        12.693808       0
0.197445        9.744638        0
0.126117        0.922311        1
-0.679797       1.220530        1
0.677983        2.556666        1
0.761349        10.693862       0
-2.168791       0.143632        1
1.388610        9.341997        0
0.317029        14.739025       0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　下面具体实现梯度上升算法的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#_*_coding:utf-8_*_
from numpy import *

# 读取数据
def loadDataSet(filename):
    '''
        对于testSet.txt，每行前两个值分别是X1和X2，第三个值数据对应的类别标签
        而且为了设置方便，该函数还将X0的值设置为1.0
        :return:
        '''
    dataMat = []
    labelMat = []
    fr = open(filename)
    for line in fr.readlines():
        lineArr = line.strip().split()
        dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])])
        labelMat.append(int(lineArr[2]))
    return dataMat,labelMat

def sigmoid(inX):
    return 1.0/(1+exp(-inX))

def gradAscent(dataMatIn,classLabels):
    '''
        :param dataMatIn: 是一个2维Numpy数组，每列分别代表每个不同的特征
        每行则代表每个训练样本。
        :param classLabels: 是类别标签，是一个1*100的行向量，为了便于矩阵运算，需要将行向量
        转换为列向量，就是矩阵的转置，再将其赋值与labelMat。
        :return:
        '''
    dataMatrix = mat(dataMatIn)
    labelMat = mat(classLabels).transpose()
    # labelMat = mat(classLabels).T
    m,n = shape(dataMatrix)
    # alpha是向目标移动的步长
    alpha = 0.001
    # 迭代次数
    maxCycles = 500
    weights = ones((n,1))
    for k in range(maxCycles):
        h = sigmoid(dataMatrix*weights)
        error = (labelMat-h)
        weights = weights + alpha*dataMatrix.transpose()*error
    return weights
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
if __name__  == '__main__':
    filename = 'testSet.txt'
    dataArr,labelMat = loadDataSet(filename)
    weights_res = gradAscent(dataArr,labelMat)
    print(weights_res)
    
'''
[[ 4.12414349]
 [ 0.48007329]
 [-0.6168482 ]]
 '''
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面已经解出了一组回归系数，它确定了不同类别数据之间的分割线，那么怎样画出该分割线，从而使得优化的过程便于理解呢？下面代码来解决这个问题。&lt;/p&gt;
&lt;p&gt;　　画出数据集和Logistic回归最佳拟合直线的函数代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
def plotBestFit(wei):
    import matplotlib.pyplot as plt
    weights = wei.getA()
    dataMat,labelMat = loadDataSet(filename)
    dataArr = array(dataMat)
    n = shape(dataArr)[0]
    xcord1 = []
    ycord1 = []
    xcord2 = []
    ycord2 = []
    for i in range(n):
        if int(labelMat[i]) ==1:
            xcord1.append(dataArr[i,1])
            ycord1.append(dataArr[i,2])
        else:
            xcord2.append(dataArr[i, 1])
            ycord2.append(dataArr[i, 2])
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.scatter(xcord1,ycord1,s=30,c='red',marker='s')
    ax.scatter(xcord2,ycord2,s=30,c='green')
    x = arange(-3.0,3.0,0.1)
    y = (-weights[0]-weights[1] * x) / weights[2]
    ax.plot(x,y)
    plt.xlabel('X1')
    plt.ylabel('X2')
    plt.show()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　输出的结果和代码如下图所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
if __name__  == '__main__':
    filename = 'testSet.txt'
    dataArr,labelMat = loadDataSet(filename)
    weights_res = gradAscent(dataArr,labelMat)
    print(weights_res)
    plotBestFit(weights_res)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117142950789-273968430.png&quot; alt=&quot;&quot; width=&quot;382&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;梯度上升算法在500次迭代后得到的Logistic回归最佳拟合直线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　这个分类结果相当不错，从图上看，只错分了四个点。但是，尽管例子简单且数据集很小，这个方法却需要大量的计算（300次乘法），因此下一节将对算法稍作改进，从而使它可以用在真实数据集上。&lt;/p&gt;
&lt;h3&gt;8，训练算法：随机梯度上升&lt;/h3&gt;
&lt;p&gt; 　　梯度上升算法在每次更新回归系数时都需遍历整个数据集，该方法在处理100个左右的数据集尚可，但是若有数十亿样本和成千上万的特征，那么该方法的计算复杂度就太高了。一种改进方法是一次仅用一个样本点来更新回归系数，该方法称为随机梯度上升算法。由于可以在新样本到来时对分类器进行增量式更新，因而随机梯度上升算法是一个在线学习算法，与“在线学习”相对应，一次处理所有数据被称作是“批处理”。&lt;/p&gt;
&lt;p&gt;　　随机梯度上升算法可以写成如下的伪代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
所有回归系数初始化为1

对数据集中每个样本
    
    计算该样本的梯度

    使用alpha*gradient 更新回归系数值

返回回归系数值
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　以下是随机梯度上升算法的实现代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# 随机梯度上升算法
def stocGradAscent0(dataMatrix,classLabels):
    m,n = shape(dataMatrix)
    alpha = 0.01
    weights = ones(n)
    for i in range(m):
        h = sigmoid(sum(dataMatrix[i]*weights))
        error = classLabels[i] - h
        weights = weights + alpha*error*dataMatrix[i]
    return weights
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　实现的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
if __name__  == '__main__':
    filename = 'testSet.txt'
    dataArr,labelMat = loadDataSet(filename)
    weights_res = stocGradAscent0(array(dataArr),labelMat)
    print(weights_res)
    plotBestFit(weights_res)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117160900977-1728646810.png&quot; alt=&quot;&quot; width=&quot;427&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图5-5  随机梯度上升算法在上述数据集上的执行结果，最佳拟合直线并非最佳分类线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　可以看出，拟合出来的直线效果还不错，但并不像，但是不像上面那个完美，这里的分类器错分了三分之一的样本。&lt;/p&gt;
&lt;p&gt;　　直接比较结果两个结果是不公平的，后者的结果是在整个数据集上迭代了500次才得到的。一个判断优化算法优劣的可靠方法是看它是否收敛，也就是说参数是否达到了稳定值，是否还会不断地变化？对此，我们在上面的的随机梯度算法上做了些修改，使其在整个数据集上运行200次，最终绘制的三个回归系数的变化情况如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117163000611-633826567.png&quot; alt=&quot;&quot; width=&quot;476&quot; height=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图展示了随机梯度上升算法在200次迭代过程中回归系数的变化情况，其中的系数2，也就是图5-5中的X2只经过了50次迭代就达到了稳定值，但系数1和0则需要更多次的迭代。另外值得注意的是，在大的波动停止后，还有一些小的周期性波动。不难理解，产生这种现象的原因是存在一些不能正确分类的样本点（数据集并非现象可分），在每次迭代时会引发系数的剧烈改变。我们期望算法能避免来回波动，从而收敛到某个值。另外，收敛速度也需要加快。&lt;/p&gt;
&lt;p&gt;　　改进的随机梯度上升算法代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# 改进的随机梯度上升算法
def stocGradAscent1(dataMatrix,classLabels,numIter=150):
    m,n = shape(dataMatrix)
    weights = ones(n)
    for j in range(numIter):
        dataIndex = list(range(m))
        for i in range(m):
            alpha = 4/(1.0+j+i)+0.01
            randIndex = int(random.uniform(0,len(dataIndex)))
            h = sigmoid(sum(dataMatrix[randIndex]*weights))
            error = classLabels[randIndex] - h
            weights = weights + alpha *error*dataMatrix[randIndex]
            del(dataIndex[randIndex])
    return weights
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述代码大体上与之前的随机梯度上升算法一致，修改了两处，一处是alpha在每次迭代的时候都会调整，这会环节之前的数据波动或者高频波动。另外，虽然alpha会随着迭代次数不断减少，但永远不会减少到0,。必须这样做的原因是为了保证在多次迭代之后新数据仍然具有一定的影响。如果要处理的问题是动态变化的，那么可以适当增加常数项，来确保新的值获得更大的回归系数。另外一点值得注意的是，在降低alpha的函数中，alpha每次减少1/(j+1)，其中j是迭代次数，i是样本点的下标，这样当j&amp;lt;max(i)的时候，alpha就不是严格下降的，避免参数的严格下降也常见于模拟退火算法等其他优化算法中。程序的第二个改进地方就是通过随机选取样本来更新回归系数，这种方法将减少周期性的波动，并且改进的算法还增加一个迭代次数作为第三个参数，如果该参数没有给定的话，算法将默认迭代150次，如果给定，那么算法将按照新的参数值进行迭代。&lt;/p&gt;
&lt;p&gt;　　与stocGradAscent1()类似，下图显示了每次迭代时各个回归系数的变化情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117171056526-658681810.png&quot; alt=&quot;&quot; width=&quot;467&quot; height=&quot;380&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　比较5-7和5-6可以看到两点不同，第一点是，图5-7中的系数没有像5-6里那样出现周期性的波动，这归功于stocGradAscent1()里的样本随机选择机制，第二点是5-7的水平轴比5-6的短了很多，这是由于stocGradAscent1()可以收敛的更快，这次我们仅仅对数据集做了20次遍历，之前是500次。&lt;/p&gt;
&lt;p&gt;　　下面看看在同一个数据集上的分类效果，将程序运行可以看到：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
if __name__  == '__main__':
    filename = 'testSet.txt'
    dataArr,labelMat = loadDataSet(filename)
    weights_res = stocGradAscent1(array(dataArr),labelMat)
    print(weights_res)
    plotBestFit(weights_res)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190117171432648-1674037225.png&quot; alt=&quot;&quot; width=&quot;417&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　该分割线达到了与GradientAscent()差不多的效果，但是所使用的计算量更少。&lt;/p&gt;
&lt;p&gt;　　默认的迭代次数是150次，但是我们通过stocGradAscent()的第三个参数来对此进行修改，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
weights_res = stocGradAscent1(array(dataArr),labelMat,500)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　迄今为止我们分析了回归系数的变化情况，但是还没有达到目的，，即完成具体的分类任务，下面我们将使用随机梯度上升算法来解决病马的生死预测问题。,&lt;/p&gt;
&lt;h3&gt;9，示例：从疝气病症预测病马的死亡率&lt;/h3&gt;
&lt;p&gt;　　本次将使用logistic回归来预测患有疝气的马的存活问题，这里的数据包含了368个样本和28个特征。（疝气指的是马胃肠痛的术语，然而这种病不一定源于马 的肠胃问题，其他问题也可以引发疝气）该数据集包含了医院检测马疝气病的一些指标，有的指标比较主观，有的指标难以预测，例如马的疼痛级别&lt;/p&gt;
&lt;h4&gt;使用Logistic回归估计马疝气病的死亡率的流程&lt;/h4&gt;
&lt;p&gt;（1）收集数据：使用给定数据文件&lt;/p&gt;
&lt;p&gt;（2）准备数据：用Python解析文本文件并填充缺失值&lt;/p&gt;
&lt;p&gt;（3）分析数据：可视化并观察数据&lt;/p&gt;
&lt;p&gt;（4）训练算法：使用优化算法，找到最佳的系数&lt;/p&gt;
&lt;p&gt;（5）测试算法：为了量化回归的结果，需要观察错误率，根据错误率决定是否回退到训练阶段，通过改变迭代的次数和步长等参数来得到更好的回归系数&lt;/p&gt;
&lt;p&gt;（6）使用算法：实现一个简单的命令行程序来收集马的症状并输出预测结果&lt;/p&gt;


&lt;h3&gt;准备数据：处理数据中的缺失值&lt;/h3&gt;
&lt;p&gt;　　数据中的缺失值是个非常棘手的问题，有很少文献都致力于解决这个问题。那么，数据缺少究竟带来了什么问题？假设有100个样本和20个特征，这些数据都是机器收集回来的，若机器上的某个传感器损坏导致一个特征无效时该怎么办？此时是否要扔掉整个数据？这种情况下，另外19个特征怎么办？它们是否还可用？答案是肯定的。因为有时候数据相当昂贵，扔掉和重新获取都是不可取的，所以必须采取一些方法来解决这个问题。&lt;/p&gt;
&lt;p&gt;　　下面给出了一些可选的做法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用可用特征的均值来填补缺失值；&lt;/li&gt;
&lt;li&gt;使用特征值来填充缺失值，如-1&lt;/li&gt;
&lt;li&gt;忽略有缺失值的样本&lt;/li&gt;
&lt;li&gt;使用相似样本的均值填补缺失值&lt;/li&gt;
&lt;li&gt;使用另外的机器学习算法预测缺失值&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　现在，我们对下一节要用的数据集进行预处理，使其可以顺利地使用分类算法。在预处理阶段需要做两件事：第一，所有的缺失值必须用一个实数值来替换，因为我们使用的Numpy数据类型不允许包含缺失值。这里选择实数0来替换，因为我们使用的Numpy数据类型不允许包括缺失值，这里选择实数0来替换所有缺失值，恰好能适应于Logistic回归。这样做的直觉在于，我们需要的是一个在更新时不会影响系数的值，回归系数的更新公式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
weights = weights + alpha *error*dataMatrix[randIndex]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果dataMatirx的某特征对应值为0，那么该特征的系数将不做更新，即：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
weights = weights
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　另外，由于sigmoid(0) = 0.5 ，即对它结果的预测不具有任何倾向性，因此上述做法也不会对误差项造成任何影响，基于上述原因，将缺失值用0代替既可以保留现有数据，也不需要对优化算法进行修改，此外，数据集中的特征值一般不取0，因此在某种意义上说它也满足“特殊值”这个要求。&lt;/p&gt;
&lt;p&gt;　　预处理中做的第二件事，是如果在测试数据集中发现了一条数据的类别标签以及缺失，那么我们的简单做法是将该条数据丢弃。这是因为类别标签与特征不同，很难确定采用某个合适的值来替换，采用Logistic回归进行预处理之后保存两个文件，horseColicTest.txt和horseColicTraining.txt。如果想对于原始数据和预处理之后的数据做个比较。&lt;/p&gt;
&lt;p&gt;　　我们有一个“干净”可用的数据集和一个不错的优化算法，下面将这些部分融合在一起训练出一个分类器，然后利用该分类器来预测病马的生死问题。&lt;/p&gt;
&lt;p&gt;horseColicTest.txt的数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
2 1       38.50   54      20      0       1       2       2       3       4       1       2       2       5.90    0       2       42.00   6.30    0       0       1
2       1       37.60   48      36      0       0       1       1       0       3       0       0       0       0       0       0       44.00   6.30    1       5.00    1
1       1       37.7    44      28      0       4       3       2       5       4       4       1       1       0       3       5       45      70      3       2       1
1       1       37      56      24      3       1       4       2       4       4       3       1       1       0       0       0       35      61      3       2       0
2       1       38.00   42      12      3       0       3       1       1       0       1       0       0       0       0       2       37.00   5.80    0       0       1
1       1       0       60      40      3       0       1       1       0       4       0       3       2       0       0       5       42      72      0       0       1
2       1       38.40   80      60      3       2       2       1       3       2       1       2       2       0       1       1       54.00   6.90    0       0       1
2       1       37.80   48      12      2       1       2       1       3       0       1       2       0       0       2       0       48.00   7.30    1       0       1
2       1       37.90   45      36      3       3       3       2       2       3       1       2       1       0       3       0       33.00   5.70    3       0       1
2       1       39.00   84      12      3       1       5       1       2       4       2       1       2       7.00    0       4       62.00   5.90    2       2.20    0
2       1       38.20   60      24      3       1       3       2       3       3       2       3       3       0       4       4       53.00   7.50    2       1.40    1
1       1       0       140     0       0       0       4       2       5       4       4       1       1       0       0       5       30      69      0       0       0
1       1       37.90   120     60      3       3       3       1       5       4       4       2       2       7.50    4       5       52.00   6.60    3       1.80    0
2       1       38.00   72      36      1       1       3       1       3       0       2       2       1       0       3       5       38.00   6.80    2       2.00    1
2       9       38.00   92      28      1       1       2       1       1       3       2       3       0       7.20    0       0       37.00   6.10    1       1.10    1
1       1       38.30   66      30      2       3       1       1       2       4       3       3       2       8.50    4       5       37.00   6.00    0       0       1
2       1       37.50   48      24      3       1       1       1       2       1       0       1       1       0       3       2       43.00   6.00    1       2.80    1
1       1       37.50   88      20      2       3       3       1       4       3       3       0       0       0       0       0       35.00   6.40    1       0       0
2       9       0       150     60      4       4       4       2       5       4       4       0       0       0       0       0       0       0       0       0       0
1       1       39.7    100     30      0       0       6       2       4       4       3       1       0       0       4       5       65      75      0       0       0
1       1       38.30   80      0       3       3       4       2       5       4       3       2       1       0       4       4       45.00   7.50    2       4.60    1
2       1       37.50   40      32      3       1       3       1       3       2       3       2       1       0       0       5       32.00   6.40    1       1.10    1
1       1       38.40   84      30      3       1       5       2       4       3       3       2       3       6.50    4       4       47.00   7.50    3       0       0
1       1       38.10   84      44      4       0       4       2       5       3       1       1       3       5.00    0       4       60.00   6.80    0       5.70    0
2       1       38.70   52      0       1       1       1       1       1       3       1       0       0       0       1       3       4.00    74.00   0       0       1
2       1       38.10   44      40      2       1       3       1       3       3       1       0       0       0       1       3       35.00   6.80    0       0       1
2       1       38.4    52      20      2       1       3       1       1       3       2       2       1       0       3       5       41      63      1       1       1
1       1       38.20   60      0       1       0       3       1       2       1       1       1       1       0       4       4       43.00   6.20    2       3.90    1
2       1       37.70   40      18      1       1       1       0       3       2       1       1       1       0       3       3       36.00   3.50    0       0       1
1       1       39.1    60      10      0       1       1       0       2       3       0       0       0       0       4       4       0       0       0       0       1
2       1       37.80   48      16      1       1       1       1       0       1       1       2       1       0       4       3       43.00   7.50    0       0       1
1       1       39.00   120     0       4       3       5       2       2       4       3       2       3       8.00    0       0       65.00   8.20    3       4.60    1
1       1       38.20   76      0       2       3       2       1       5       3       3       1       2       6.00    1       5       35.00   6.50    2       0.90    1
2       1       38.30   88      0       0       0       6       0       0       0       0       0       0       0       0       0       0       0       0       0       0
1       1       38.00   80      30      3       3       3       1       0       0       0       0       0       6.00    0       0       48.00   8.30    0       4.30    1
1       1       0       0       0       3       1       1       1       2       3       3       1       3       6.00    4       4       0       0       2       0       0
1       1       37.60   40      0       1       1       1       1       1       1       1       0       0       0       1       1       0       0       2       2.10    1
2       1       37.50   44      0       1       1       1       1       3       3       2       0       0       0       0       0       45.00   5.80    2       1.40    1
2       1       38.2    42      16      1       1       3       1       1       3       1       0       0       0       1       0       35      60      1       1       1
2       1       38      56      44      3       3       3       0       0       1       1       2       1       0       4       0       47      70      2       1       1
2       1       38.30   45      20      3       3       2       2       2       4       1       2       0       0       4       0       0       0       0       0       1
1       1       0       48      96      1       1       3       1       0       4       1       2       1       0       1       4       42.00   8.00    1       0       1
1       1       37.70   55      28      2       1       2       1       2       3       3       0       3       5.00    4       5       0       0       0       0       1
2       1       36.00   100     20      4       3       6       2       2       4       3       1       1       0       4       5       74.00   5.70    2       2.50    0
1       1       37.10   60      20      2       0       4       1       3       0       3       0       2       5.00    3       4       64.00   8.50    2       0       1
2       1       37.10   114     40      3       0       3       2       2       2       1       0       0       0       0       3       32.00   0       3       6.50    1
1       1       38.1    72      30      3       3       3       1       4       4       3       2       1       0       3       5       37      56      3       1       1
1       1       37.00   44      12      3       1       1       2       1       1       1       0       0       0       4       2       40.00   6.70    3       8.00    1
1       1       38.6    48      20      3       1       1       1       4       3       1       0       0       0       3       0       37      75      0       0       1
1       1       0       82      72      3       1       4       1       2       3       3       0       3       0       4       4       53      65      3       2       0
1       9       38.20   78      60      4       4       6       0       3       3       3       0       0       0       1       0       59.00   5.80    3       3.10    0
2       1       37.8    60      16      1       1       3       1       2       3       2       1       2       0       3       0       41      73      0       0       0
1       1       38.7    34      30      2       0       3       1       2       3       0       0       0       0       0       0       33      69      0       2       0
1       1       0       36      12      1       1       1       1       1       2       1       1       1       0       1       5       44.00   0       0       0       1
2       1       38.30   44      60      0       0       1       1       0       0       0       0       0       0       0       0       6.40    36.00   0       0       1
2       1       37.40   54      18      3       0       1       1       3       4       3       2       2       0       4       5       30.00   7.10    2       0       1
1       1       0       0       0       4       3       0       2       2       4       1       0       0       0       0       0       54      76      3       2       1
1       1       36.6    48      16      3       1       3       1       4       1       1       1       1       0       0       0       27      56      0       0       0
1       1       38.5    90      0       1       1       3       1       3       3       3       2       3       2       4       5       47      79      0       0       1
1       1       0       75      12      1       1       4       1       5       3       3       0       3       5.80    0       0       58.00   8.50    1       0       1
2       1       38.20   42      0       3       1       1       1       1       1       2       2       1       0       3       2       35.00   5.90    2       0       1
1       9       38.20   78      60      4       4       6       0       3       3       3       0       0       0       1       0       59.00   5.80    3       3.10    0
2       1       38.60   60      30      1       1       3       1       4       2       2       1       1       0       0       0       40.00   6.00    1       0       1
2       1       37.80   42      40      1       1       1       1       1       3       1       0       0       0       3       3       36.00   6.20    0       0       1
1       1       38      60      12      1       1       2       1       2       1       1       1       1       0       1       4       44      65      3       2       0
2       1       38.00   42      12      3       0       3       1       1       1       1       0       0       0       0       1       37.00   5.80    0       0       1
2       1       37.60   88      36      3       1       1       1       3       3       2       1       3       1.50    0       0       44.00   6.00    0       0       0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;horseColicTraining.txt的数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
2.000000  1.000000        38.500000       66.000000       28.000000       3.000000        3.000000        0.000000        2.000000        5.000000        4.000000        4.000000        0.000000        0.000000        0.000000        3.000000        5.000000        45.000000       8.400000        0.000000        0.000000        0.000000
1.000000        1.000000        39.200000       88.000000       20.000000       0.000000        0.000000        4.000000        1.000000        3.000000        4.000000        2.000000        0.000000        0.000000        0.000000        4.000000        2.000000        50.000000       85.000000       2.000000        2.000000        0.000000
2.000000        1.000000        38.300000       40.000000       24.000000       1.000000        1.000000        3.000000        1.000000        3.000000        3.000000        1.000000        0.000000        0.000000        0.000000        1.000000        1.000000        33.000000       6.700000        0.000000        0.000000        1.000000
1.000000        9.000000        39.100000       164.000000      84.000000       4.000000        1.000000        6.000000        2.000000        2.000000        4.000000        4.000000        1.000000        2.000000        5.000000        3.000000        0.000000        48.000000       7.200000        3.000000        5.300000        0.000000
2.000000        1.000000        37.300000       104.000000      35.000000       0.000000        0.000000        6.000000        2.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        74.000000       7.400000        0.000000        0.000000        0.000000
2.000000        1.000000        0.000000        0.000000        0.000000        2.000000        1.000000        3.000000        1.000000        2.000000        3.000000        2.000000        2.000000        1.000000        0.000000        3.000000        3.000000        0.000000        0.000000        0.000000        0.000000        1.000000
1.000000        1.000000        37.900000       48.000000       16.000000       1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        3.000000        1.000000        1.000000        0.000000        3.000000        5.000000        37.000000       7.000000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        60.000000       0.000000        3.000000        0.000000        0.000000        1.000000        0.000000        4.000000        2.000000        2.000000        1.000000        0.000000        3.000000        4.000000        44.000000       8.300000        0.000000        0.000000        0.000000
2.000000        1.000000        0.000000        80.000000       36.000000       3.000000        4.000000        3.000000        1.000000        4.000000        4.000000        4.000000        2.000000        1.000000        0.000000        3.000000        5.000000        38.000000       6.200000        0.000000        0.000000        0.000000
2.000000        9.000000        38.300000       90.000000       0.000000        1.000000        0.000000        1.000000        1.000000        5.000000        3.000000        1.000000        2.000000        1.000000        0.000000        3.000000        0.000000        40.000000       6.200000        1.000000        2.200000        1.000000
1.000000        1.000000        38.100000       66.000000       12.000000       3.000000        3.000000        5.000000        1.000000        3.000000        3.000000        1.000000        2.000000        1.000000        3.000000        2.000000        5.000000        44.000000       6.000000        2.000000        3.600000        1.000000
2.000000        1.000000        39.100000       72.000000       52.000000       2.000000        0.000000        2.000000        1.000000        2.000000        1.000000        2.000000        1.000000        1.000000        0.000000        4.000000        4.000000        50.000000       7.800000        0.000000        0.000000        1.000000
1.000000        1.000000        37.200000       42.000000       12.000000       2.000000        1.000000        1.000000        1.000000        3.000000        3.000000        3.000000        3.000000        1.000000        0.000000        4.000000        5.000000        0.000000        7.000000        0.000000        0.000000        1.000000
2.000000        9.000000        38.000000       92.000000       28.000000       1.000000        1.000000        2.000000        1.000000        1.000000        3.000000        2.000000        3.000000        0.000000        7.200000        1.000000        1.000000        37.000000       6.100000        1.000000        0.000000        0.000000
1.000000        1.000000        38.200000       76.000000       28.000000       3.000000        1.000000        1.000000        1.000000        3.000000        4.000000        1.000000        2.000000        2.000000        0.000000        4.000000        4.000000        46.000000       81.000000       1.000000        2.000000        1.000000
1.000000        1.000000        37.600000       96.000000       48.000000       3.000000        1.000000        4.000000        1.000000        5.000000        3.000000        3.000000        2.000000        3.000000        4.500000        4.000000        0.000000        45.000000       6.800000        0.000000        0.000000        0.000000
1.000000        9.000000        0.000000        128.000000      36.000000       3.000000        3.000000        4.000000        2.000000        4.000000        4.000000        3.000000        3.000000        0.000000        0.000000        4.000000        5.000000        53.000000       7.800000        3.000000        4.700000        0.000000
2.000000        1.000000        37.500000       48.000000       24.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
1.000000        1.000000        37.600000       64.000000       21.000000       1.000000        1.000000        2.000000        1.000000        2.000000        3.000000        1.000000        1.000000        1.000000        0.000000        2.000000        5.000000        40.000000       7.000000        1.000000        0.000000        1.000000
2.000000        1.000000        39.400000       110.000000      35.000000       4.000000        3.000000        6.000000        0.000000        0.000000        3.000000        3.000000        0.000000        0.000000        0.000000        0.000000        0.000000        55.000000       8.700000        0.000000        0.000000        1.000000
1.000000        1.000000        39.900000       72.000000       60.000000       1.000000        1.000000        5.000000        2.000000        5.000000        4.000000        4.000000        3.000000        1.000000        0.000000        4.000000        4.000000        46.000000       6.100000        2.000000        0.000000        1.000000
2.000000        1.000000        38.400000       48.000000       16.000000       1.000000        0.000000        1.000000        1.000000        1.000000        3.000000        1.000000        2.000000        3.000000        5.500000        4.000000        3.000000        49.000000       6.800000        0.000000        0.000000        1.000000
1.000000        1.000000        38.600000       42.000000       34.000000       2.000000        1.000000        4.000000        0.000000        2.000000        3.000000        1.000000        0.000000        0.000000        0.000000        1.000000        0.000000        48.000000       7.200000        0.000000        0.000000        1.000000
1.000000        9.000000        38.300000       130.000000      60.000000       0.000000        3.000000        0.000000        1.000000        2.000000        4.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        50.000000       70.000000       0.000000        0.000000        1.000000
1.000000        1.000000        38.100000       60.000000       12.000000       3.000000        3.000000        3.000000        1.000000        0.000000        4.000000        3.000000        3.000000        2.000000        2.000000        0.000000        0.000000        51.000000       65.000000       0.000000        0.000000        1.000000
2.000000        1.000000        37.800000       60.000000       42.000000       0.000000        0.000000        0.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
1.000000        1.000000        38.300000       72.000000       30.000000       4.000000        3.000000        3.000000        2.000000        3.000000        3.000000        3.000000        2.000000        1.000000        0.000000        3.000000        5.000000        43.000000       7.000000        2.000000        3.900000        1.000000
1.000000        1.000000        37.800000       48.000000       12.000000       3.000000        1.000000        1.000000        1.000000        0.000000        3.000000        2.000000        1.000000        1.000000        0.000000        1.000000        3.000000        37.000000       5.500000        2.000000        1.300000        1.000000
1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000
2.000000        1.000000        37.700000       48.000000       0.000000        2.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        0.000000        0.000000        0.000000        45.000000       76.000000       0.000000        0.000000        1.000000
2.000000        1.000000        37.700000       96.000000       30.000000       3.000000        3.000000        4.000000        2.000000        5.000000        4.000000        4.000000        3.000000        2.000000        4.000000        4.000000        5.000000        66.000000       7.500000        0.000000        0.000000        0.000000
2.000000        1.000000        37.200000       108.000000      12.000000       3.000000        3.000000        4.000000        2.000000        2.000000        4.000000        2.000000        0.000000        3.000000        6.000000        3.000000        3.000000        52.000000       8.200000        3.000000        7.400000        0.000000
1.000000        1.000000        37.200000       60.000000       0.000000        2.000000        1.000000        1.000000        1.000000        3.000000        3.000000        3.000000        2.000000        1.000000        0.000000        4.000000        5.000000        43.000000       6.600000        0.000000        0.000000        1.000000
1.000000        1.000000        38.200000       64.000000       28.000000       1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        0.000000        0.000000        0.000000        0.000000        4.000000        4.000000        49.000000       8.600000        2.000000        6.600000        1.000000
1.000000        1.000000        0.000000        100.000000      30.000000       3.000000        3.000000        4.000000        2.000000        5.000000        4.000000        4.000000        3.000000        3.000000        0.000000        4.000000        4.000000        52.000000       6.600000        0.000000        0.000000        1.000000
2.000000        1.000000        0.000000        104.000000      24.000000       4.000000        3.000000        3.000000        2.000000        4.000000        4.000000        3.000000        0.000000        3.000000        0.000000        0.000000        2.000000        73.000000       8.400000        0.000000        0.000000        0.000000
2.000000        1.000000        38.300000       112.000000      16.000000       0.000000        3.000000        5.000000        2.000000        0.000000        0.000000        1.000000        1.000000        2.000000        0.000000        0.000000        5.000000        51.000000       6.000000        2.000000        1.000000        0.000000
1.000000        1.000000        37.800000       72.000000       0.000000        0.000000        3.000000        0.000000        1.000000        5.000000        3.000000        1.000000        0.000000        1.000000        0.000000        1.000000        1.000000        56.000000       80.000000       1.000000        2.000000        1.000000
2.000000        1.000000        38.600000       52.000000       0.000000        1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        2.000000        1.000000        1.000000        0.000000        1.000000        3.000000        32.000000       6.600000        1.000000        5.000000        1.000000
1.000000        9.000000        39.200000       146.000000      96.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000
1.000000        1.000000        0.000000        88.000000       0.000000        3.000000        3.000000        6.000000        2.000000        5.000000        3.000000        3.000000        1.000000        3.000000        0.000000        4.000000        5.000000        63.000000       6.500000        3.000000        0.000000        0.000000
2.000000        9.000000        39.000000       150.000000      72.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        47.000000       8.500000        0.000000        0.100000        1.000000
2.000000        1.000000        38.000000       60.000000       12.000000       3.000000        1.000000        3.000000        1.000000        3.000000        3.000000        1.000000        1.000000        1.000000        0.000000        2.000000        2.000000        47.000000       7.000000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        120.000000      0.000000        3.000000        4.000000        4.000000        1.000000        4.000000        4.000000        4.000000        1.000000        1.000000        0.000000        0.000000        5.000000        52.000000       67.000000       2.000000        2.000000        0.000000
1.000000        1.000000        35.400000       140.000000      24.000000       3.000000        3.000000        4.000000        2.000000        4.000000        4.000000        0.000000        2.000000        1.000000        0.000000        0.000000        5.000000        57.000000       69.000000       3.000000        2.000000        0.000000
2.000000        1.000000        0.000000        120.000000      0.000000        4.000000        3.000000        4.000000        2.000000        5.000000        4.000000        4.000000        1.000000        1.000000        0.000000        4.000000        5.000000        60.000000       6.500000        3.000000        0.000000        0.000000
1.000000        1.000000        37.900000       60.000000       15.000000       3.000000        0.000000        4.000000        2.000000        5.000000        4.000000        4.000000        2.000000        2.000000        0.000000        4.000000        5.000000        65.000000       7.500000        0.000000        0.000000        1.000000
2.000000        1.000000        37.500000       48.000000       16.000000       1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        0.000000        1.000000        0.000000        37.000000       6.500000        0.000000        0.000000        1.000000
1.000000        1.000000        38.900000       80.000000       44.000000       3.000000        3.000000        3.000000        2.000000        2.000000        3.000000        3.000000        2.000000        2.000000        7.000000        3.000000        1.000000        54.000000       6.500000        3.000000        0.000000        0.000000
2.000000        1.000000        37.200000       84.000000       48.000000       3.000000        3.000000        5.000000        2.000000        4.000000        1.000000        2.000000        1.000000        2.000000        0.000000        2.000000        1.000000        73.000000       5.500000        2.000000        4.100000        0.000000
2.000000        1.000000        38.600000       46.000000       0.000000        1.000000        1.000000        2.000000        1.000000        1.000000        3.000000        2.000000        1.000000        1.000000        0.000000        0.000000        2.000000        49.000000       9.100000        1.000000        1.600000        1.000000
1.000000        1.000000        37.400000       84.000000       36.000000       1.000000        0.000000        3.000000        2.000000        3.000000        3.000000        2.000000        0.000000        0.000000        0.000000        4.000000        5.000000        0.000000        0.000000        3.000000        0.000000        0.000000
2.000000        1.000000        0.000000        0.000000        0.000000        1.000000        1.000000        3.000000        1.000000        1.000000        3.000000        1.000000        0.000000        0.000000        0.000000        2.000000        2.000000        43.000000       7.700000        0.000000        0.000000        1.000000
2.000000        1.000000        38.600000       40.000000       20.000000       0.000000        0.000000        0.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        41.000000       6.400000        0.000000        0.000000        1.000000
2.000000        1.000000        40.300000       114.000000      36.000000       3.000000        3.000000        1.000000        2.000000        2.000000        3.000000        3.000000        2.000000        1.000000        7.000000        1.000000        5.000000        57.000000       8.100000        3.000000        4.500000        0.000000
1.000000        9.000000        38.600000       160.000000      20.000000       3.000000        0.000000        5.000000        1.000000        3.000000        3.000000        4.000000        3.000000        0.000000        0.000000        4.000000        0.000000        38.000000       0.000000        2.000000        0.000000        0.000000
1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        24.000000       6.700000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        64.000000       36.000000       2.000000        0.000000        2.000000        1.000000        5.000000        3.000000        3.000000        2.000000        2.000000        0.000000        0.000000        0.000000        42.000000       7.700000        0.000000        0.000000        0.000000
1.000000        1.000000        0.000000        0.000000        20.000000       4.000000        3.000000        3.000000        0.000000        5.000000        4.000000        3.000000        2.000000        0.000000        0.000000        4.000000        4.000000        53.000000       5.900000        3.000000        0.000000        0.000000
2.000000        1.000000        0.000000        96.000000       0.000000        3.000000        3.000000        3.000000        2.000000        5.000000        4.000000        4.000000        1.000000        2.000000        0.000000        4.000000        5.000000        60.000000       0.000000        0.000000        0.000000        0.000000
2.000000        1.000000        37.800000       48.000000       32.000000       1.000000        1.000000        3.000000        1.000000        2.000000        1.000000        0.000000        1.000000        1.000000        0.000000        4.000000        5.000000        37.000000       6.700000        0.000000        0.000000        1.000000
2.000000        1.000000        38.500000       60.000000       0.000000        2.000000        2.000000        1.000000        1.000000        1.000000        2.000000        2.000000        2.000000        1.000000        0.000000        1.000000        1.000000        44.000000       7.700000        0.000000        0.000000        1.000000
1.000000        1.000000        37.800000       88.000000       22.000000       2.000000        1.000000        2.000000        1.000000        3.000000        0.000000        0.000000        2.000000        0.000000        0.000000        4.000000        0.000000        64.000000       8.000000        1.000000        6.000000        0.000000
2.000000        1.000000        38.200000       130.000000      16.000000       4.000000        3.000000        4.000000        2.000000        2.000000        4.000000        4.000000        1.000000        1.000000        0.000000        0.000000        0.000000        65.000000       82.000000       2.000000        2.000000        0.000000
1.000000        1.000000        39.000000       64.000000       36.000000       3.000000        1.000000        4.000000        2.000000        3.000000        3.000000        2.000000        1.000000        2.000000        7.000000        4.000000        5.000000        44.000000       7.500000        3.000000        5.000000        1.000000
1.000000        1.000000        0.000000        60.000000       36.000000       3.000000        1.000000        3.000000        1.000000        3.000000        3.000000        2.000000        1.000000        1.000000        0.000000        3.000000        4.000000        26.000000       72.000000       2.000000        1.000000        1.000000
2.000000        1.000000        37.900000       72.000000       0.000000        1.000000        1.000000        5.000000        2.000000        3.000000        3.000000        1.000000        1.000000        3.000000        2.000000        3.000000        4.000000        58.000000       74.000000       1.000000        2.000000        1.000000
2.000000        1.000000        38.400000       54.000000       24.000000       1.000000        1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        2.000000        1.000000        0.000000        3.000000        2.000000        49.000000       7.200000        1.000000        0.000000        1.000000
2.000000        1.000000        0.000000        52.000000       16.000000       1.000000        0.000000        3.000000        1.000000        0.000000        0.000000        0.000000        2.000000        3.000000        5.500000        0.000000        0.000000        55.000000       7.200000        0.000000        0.000000        1.000000
2.000000        1.000000        38.000000       48.000000       12.000000       1.000000        1.000000        1.000000        1.000000        1.000000        3.000000        0.000000        1.000000        1.000000        0.000000        3.000000        2.000000        42.000000       6.300000        2.000000        4.100000        1.000000
2.000000        1.000000        37.000000       60.000000       20.000000       3.000000        0.000000        0.000000        1.000000        3.000000        0.000000        3.000000        2.000000        2.000000        4.500000        4.000000        4.000000        43.000000       7.600000        0.000000        0.000000        0.000000
1.000000        1.000000        37.800000       48.000000       28.000000       1.000000        1.000000        1.000000        1.000000        1.000000        2.000000        1.000000        2.000000        0.000000        0.000000        1.000000        1.000000        46.000000       5.900000        2.000000        7.000000        1.000000
1.000000        1.000000        37.700000       56.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000
1.000000        1.000000        38.100000       52.000000       24.000000       1.000000        1.000000        5.000000        1.000000        4.000000        3.000000        1.000000        2.000000        3.000000        7.000000        1.000000        0.000000        54.000000       7.500000        2.000000        2.600000        0.000000
1.000000        9.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        37.000000       4.900000        0.000000        0.000000        0.000000
1.000000        9.000000        39.700000       100.000000      0.000000        3.000000        3.000000        5.000000        2.000000        2.000000        3.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        48.000000       57.000000       2.000000        2.000000        0.000000
1.000000        1.000000        37.600000       38.000000       20.000000       3.000000        3.000000        1.000000        1.000000        3.000000        3.000000        2.000000        0.000000        0.000000        0.000000        3.000000        0.000000        37.000000       68.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.700000       52.000000       20.000000       2.000000        0.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        0.000000        1.000000        1.000000        33.000000       77.000000       0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        0.000000        0.000000        3.000000        3.000000        3.000000        3.000000        5.000000        3.000000        3.000000        3.000000        2.000000        0.000000        4.000000        5.000000        46.000000       5.900000        0.000000        0.000000        0.000000
1.000000        1.000000        37.500000       96.000000       18.000000       1.000000        3.000000        6.000000        2.000000        3.000000        4.000000        2.000000        2.000000        3.000000        5.000000        0.000000        4.000000        69.000000       8.900000        3.000000        0.000000        1.000000
1.000000        1.000000        36.400000       98.000000       35.000000       3.000000        3.000000        4.000000        1.000000        4.000000        3.000000        2.000000        0.000000        0.000000        0.000000        4.000000        4.000000        47.000000       6.400000        3.000000        3.600000        0.000000
1.000000        1.000000        37.300000       40.000000       0.000000        0.000000        3.000000        1.000000        1.000000        2.000000        3.000000        2.000000        3.000000        1.000000        0.000000        3.000000        5.000000        36.000000       0.000000        3.000000        2.000000        1.000000
1.000000        9.000000        38.100000       100.000000      80.000000       3.000000        1.000000        2.000000        1.000000        3.000000        4.000000        1.000000        0.000000        0.000000        0.000000        1.000000        0.000000        36.000000       5.700000        0.000000        0.000000        1.000000
1.000000        1.000000        38.000000       0.000000        24.000000       3.000000        3.000000        6.000000        2.000000        5.000000        0.000000        4.000000        1.000000        1.000000        0.000000        0.000000        0.000000        68.000000       7.800000        0.000000        0.000000        0.000000
1.000000        1.000000        37.800000       60.000000       80.000000       1.000000        3.000000        2.000000        2.000000        2.000000        3.000000        3.000000        0.000000        2.000000        5.500000        4.000000        0.000000        40.000000       4.500000        2.000000        0.000000        1.000000
2.000000        1.000000        38.000000       54.000000       30.000000       2.000000        3.000000        3.000000        3.000000        3.000000        1.000000        2.000000        2.000000        2.000000        0.000000        0.000000        4.000000        45.000000       6.200000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        88.000000       40.000000       3.000000        3.000000        4.000000        2.000000        5.000000        4.000000        3.000000        3.000000        0.000000        0.000000        4.000000        5.000000        50.000000       7.700000        3.000000        1.400000        0.000000
2.000000        1.000000        0.000000        40.000000       16.000000       0.000000        0.000000        0.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        50.000000       7.000000        2.000000        3.900000        0.000000
2.000000        1.000000        39.000000       64.000000       40.000000       1.000000        1.000000        5.000000        1.000000        3.000000        3.000000        2.000000        2.000000        1.000000        0.000000        3.000000        3.000000        42.000000       7.500000        2.000000        2.300000        1.000000
2.000000        1.000000        38.300000       42.000000       10.000000       1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        38.000000       61.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.000000       52.000000       16.000000       0.000000        0.000000        0.000000        0.000000        2.000000        0.000000        0.000000        0.000000        3.000000        1.000000        1.000000        1.000000        53.000000       86.000000       0.000000        0.000000        1.000000
2.000000        1.000000        40.300000       114.000000      36.000000       3.000000        3.000000        1.000000        2.000000        2.000000        3.000000        3.000000        2.000000        1.000000        7.000000        1.000000        5.000000        57.000000       8.100000        3.000000        4.500000        0.000000
2.000000        1.000000        38.800000       50.000000       20.000000       3.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        2.000000        1.000000        0.000000        3.000000        1.000000        42.000000       6.200000        0.000000        0.000000        1.000000
2.000000        1.000000        0.000000        0.000000        0.000000        3.000000        3.000000        1.000000        1.000000        5.000000        3.000000        3.000000        1.000000        1.000000        0.000000        4.000000        5.000000        38.000000       6.500000        0.000000        0.000000        0.000000
2.000000        1.000000        37.500000       48.000000       30.000000       4.000000        1.000000        3.000000        1.000000        0.000000        2.000000        1.000000        1.000000        1.000000        0.000000        1.000000        1.000000        48.000000       8.600000        0.000000        0.000000        1.000000
1.000000        1.000000        37.300000       48.000000       20.000000       0.000000        1.000000        2.000000        1.000000        3.000000        3.000000        3.000000        2.000000        1.000000        0.000000        3.000000        5.000000        41.000000       69.000000       0.000000        0.000000        1.000000
2.000000        1.000000        0.000000        84.000000       36.000000       0.000000        0.000000        3.000000        1.000000        0.000000        3.000000        1.000000        2.000000        1.000000        0.000000        3.000000        2.000000        44.000000       8.500000        0.000000        0.000000        1.000000
1.000000        1.000000        38.100000       88.000000       32.000000       3.000000        3.000000        4.000000        1.000000        2.000000        3.000000        3.000000        0.000000        3.000000        1.000000        4.000000        5.000000        55.000000       60.000000       0.000000        0.000000        0.000000
2.000000        1.000000        37.700000       44.000000       40.000000       2.000000        1.000000        3.000000        1.000000        1.000000        3.000000        2.000000        1.000000        1.000000        0.000000        1.000000        5.000000        41.000000       60.000000       0.000000        0.000000        1.000000
2.000000        1.000000        39.600000       108.000000      51.000000       3.000000        3.000000        6.000000        2.000000        2.000000        4.000000        3.000000        1.000000        2.000000        0.000000        3.000000        5.000000        59.000000       8.000000        2.000000        2.600000        1.000000
1.000000        1.000000        38.200000       40.000000       16.000000       3.000000        3.000000        1.000000        1.000000        1.000000        3.000000        0.000000        0.000000        0.000000        0.000000        1.000000        1.000000        34.000000       66.000000       0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        60.000000       20.000000       4.000000        3.000000        4.000000        2.000000        5.000000        4.000000        0.000000        0.000000        1.000000        0.000000        4.000000        5.000000        0.000000        0.000000        0.000000        0.000000        0.000000
2.000000        1.000000        38.300000       40.000000       16.000000       3.000000        0.000000        1.000000        1.000000        2.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        37.000000       57.000000       0.000000        0.000000        1.000000
1.000000        9.000000        38.000000       140.000000      68.000000       1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        2.000000        0.000000        0.000000        0.000000        2.000000        1.000000        39.000000       5.300000        0.000000        0.000000        1.000000
1.000000        1.000000        37.800000       52.000000       24.000000       1.000000        3.000000        3.000000        1.000000        4.000000        4.000000        1.000000        2.000000        3.000000        5.700000        2.000000        5.000000        48.000000       6.600000        1.000000        3.700000        0.000000
1.000000        1.000000        0.000000        70.000000       36.000000       1.000000        0.000000        3.000000        2.000000        2.000000        3.000000        2.000000        2.000000        0.000000        0.000000        4.000000        5.000000        36.000000       7.300000        0.000000        0.000000        1.000000
1.000000        1.000000        38.300000       52.000000       96.000000       0.000000        3.000000        3.000000        1.000000        0.000000        0.000000        0.000000        1.000000        1.000000        0.000000        1.000000        0.000000        43.000000       6.100000        0.000000        0.000000        1.000000
2.000000        1.000000        37.300000       50.000000       32.000000       1.000000        1.000000        3.000000        1.000000        1.000000        3.000000        2.000000        0.000000        0.000000        0.000000        1.000000        0.000000        44.000000       7.000000        0.000000        0.000000        1.000000
1.000000        1.000000        38.700000       60.000000       32.000000       4.000000        3.000000        2.000000        2.000000        4.000000        4.000000        4.000000        0.000000        0.000000        0.000000        4.000000        5.000000        53.000000       64.000000       3.000000        2.000000        0.000000
1.000000        9.000000        38.400000       84.000000       40.000000       3.000000        3.000000        2.000000        1.000000        3.000000        3.000000        3.000000        1.000000        1.000000        0.000000        0.000000        0.000000        36.000000       6.600000        2.000000        2.800000        0.000000
1.000000        1.000000        0.000000        70.000000       16.000000       3.000000        4.000000        5.000000        2.000000        2.000000        3.000000        2.000000        2.000000        1.000000        0.000000        4.000000        5.000000        60.000000       7.500000        0.000000        0.000000        0.000000
1.000000        1.000000        38.300000       40.000000       16.000000       3.000000        0.000000        0.000000        1.000000        1.000000        3.000000        2.000000        0.000000        0.000000        0.000000        0.000000        0.000000        38.000000       58.000000       1.000000        2.000000        1.000000
1.000000        1.000000        0.000000        40.000000       0.000000        2.000000        1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        1.000000        1.000000        0.000000        0.000000        5.000000        39.000000       56.000000       0.000000        0.000000        1.000000
1.000000        1.000000        36.800000       60.000000       28.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        10.000000       0.000000
1.000000        1.000000        38.400000       44.000000       24.000000       3.000000        0.000000        4.000000        0.000000        5.000000        4.000000        3.000000        2.000000        1.000000        0.000000        4.000000        5.000000        50.000000       77.000000       0.000000        0.000000        1.000000
2.000000        1.000000        0.000000        0.000000        40.000000       3.000000        1.000000        1.000000        1.000000        3.000000        3.000000        2.000000        0.000000        0.000000        0.000000        0.000000        0.000000        45.000000       70.000000       0.000000        0.000000        1.000000
1.000000        1.000000        38.000000       44.000000       12.000000       1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        3.000000        2.000000        1.000000        0.000000        4.000000        5.000000        42.000000       65.000000       0.000000        0.000000        1.000000
2.000000        1.000000        39.500000       0.000000        0.000000        3.000000        3.000000        4.000000        2.000000        3.000000        4.000000        3.000000        0.000000        3.000000        5.500000        4.000000        5.000000        0.000000        6.700000        1.000000        0.000000        0.000000
1.000000        1.000000        36.500000       78.000000       30.000000       1.000000        0.000000        1.000000        1.000000        5.000000        3.000000        1.000000        0.000000        1.000000        0.000000        0.000000        0.000000        34.000000       75.000000       2.000000        1.000000        1.000000
2.000000        1.000000        38.100000       56.000000       20.000000       2.000000        1.000000        2.000000        1.000000        1.000000        3.000000        1.000000        1.000000        1.000000        0.000000        0.000000        0.000000        46.000000       70.000000       0.000000        0.000000        1.000000
1.000000        1.000000        39.400000       54.000000       66.000000       1.000000        1.000000        2.000000        1.000000        2.000000        3.000000        2.000000        1.000000        1.000000        0.000000        3.000000        4.000000        39.000000       6.000000        2.000000        0.000000        1.000000
1.000000        1.000000        38.300000       80.000000       40.000000       0.000000        0.000000        6.000000        2.000000        4.000000        3.000000        1.000000        0.000000        2.000000        0.000000        1.000000        4.000000        67.000000       10.200000       2.000000        1.000000        0.000000
2.000000        1.000000        38.700000       40.000000       28.000000       2.000000        1.000000        1.000000        1.000000        3.000000        1.000000        1.000000        0.000000        0.000000        0.000000        1.000000        0.000000        39.000000       62.000000       1.000000        1.000000        1.000000
1.000000        1.000000        38.200000       64.000000       24.000000       1.000000        1.000000        3.000000        1.000000        4.000000        4.000000        3.000000        2.000000        1.000000        0.000000        4.000000        4.000000        45.000000       7.500000        1.000000        2.000000        0.000000
2.000000        1.000000        37.600000       48.000000       20.000000       3.000000        1.000000        4.000000        1.000000        1.000000        1.000000        3.000000        2.000000        1.000000        0.000000        1.000000        1.000000        37.000000       5.500000        0.000000        0.000000        0.000000
1.000000        1.000000        38.000000       42.000000       68.000000       4.000000        1.000000        1.000000        1.000000        3.000000        3.000000        2.000000        2.000000        2.000000        0.000000        4.000000        4.000000        41.000000       7.600000        0.000000        0.000000        1.000000
1.000000        1.000000        38.700000       0.000000        0.000000        3.000000        1.000000        3.000000        1.000000        5.000000        4.000000        2.000000        0.000000        0.000000        0.000000        0.000000        0.000000        33.000000       6.500000        2.000000        0.000000        1.000000
1.000000        1.000000        37.400000       50.000000       32.000000       3.000000        3.000000        0.000000        1.000000        4.000000        4.000000        1.000000        2.000000        1.000000        0.000000        1.000000        0.000000        45.000000       7.900000        2.000000        1.000000        1.000000
1.000000        1.000000        37.400000       84.000000       20.000000       0.000000        0.000000        3.000000        1.000000        2.000000        3.000000        3.000000        0.000000        0.000000        0.000000        0.000000        0.000000        31.000000       61.000000       0.000000        1.000000        0.000000
1.000000        1.000000        38.400000       49.000000       0.000000        0.000000        0.000000        1.000000        1.000000        0.000000        0.000000        1.000000        2.000000        1.000000        0.000000        0.000000        0.000000        44.000000       7.600000        0.000000        0.000000        1.000000
1.000000        1.000000        37.800000       30.000000       12.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000
2.000000        1.000000        37.600000       88.000000       36.000000       3.000000        1.000000        1.000000        1.000000        3.000000        3.000000        2.000000        1.000000        3.000000        1.500000        0.000000        0.000000        44.000000       6.000000        0.000000        0.000000        0.000000
2.000000        1.000000        37.900000       40.000000       24.000000       1.000000        1.000000        1.000000        1.000000        2.000000        3.000000        1.000000        0.000000        0.000000        0.000000        0.000000        3.000000        40.000000       5.700000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        100.000000      0.000000        3.000000        0.000000        4.000000        2.000000        5.000000        4.000000        0.000000        2.000000        0.000000        0.000000        2.000000        0.000000        59.000000       6.300000        0.000000        0.000000        0.000000
1.000000        9.000000        38.100000       136.000000      48.000000       3.000000        3.000000        3.000000        1.000000        5.000000        1.000000        3.000000        2.000000        2.000000        4.400000        2.000000        0.000000        33.000000       4.900000        2.000000        2.900000        0.000000
1.000000        1.000000        0.000000        0.000000        0.000000        3.000000        3.000000        3.000000        2.000000        5.000000        3.000000        3.000000        3.000000        2.000000        0.000000        4.000000        5.000000        46.000000       5.900000        0.000000        0.000000        0.000000
1.000000        1.000000        38.000000       48.000000       0.000000        1.000000        1.000000        1.000000        1.000000        1.000000        2.000000        4.000000        2.000000        2.000000        0.000000        4.000000        5.000000        0.000000        0.000000        0.000000        0.000000        1.000000
2.000000        1.000000        38.000000       56.000000       0.000000        1.000000        2.000000        3.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        0.000000        1.000000        1.000000        42.000000       71.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.000000       60.000000       32.000000       1.000000        1.000000        0.000000        1.000000        3.000000        3.000000        0.000000        1.000000        1.000000        0.000000        0.000000        0.000000        50.000000       7.000000        1.000000        1.000000        1.000000
1.000000        1.000000        38.100000       44.000000       9.000000        3.000000        1.000000        1.000000        1.000000        2.000000        2.000000        1.000000        1.000000        1.000000        0.000000        4.000000        5.000000        31.000000       7.300000        0.000000        0.000000        1.000000
2.000000        1.000000        36.000000       42.000000       30.000000       0.000000        0.000000        5.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        64.000000       6.800000        0.000000        0.000000        0.000000
1.000000        1.000000        0.000000        120.000000      0.000000        4.000000        3.000000        6.000000        2.000000        5.000000        4.000000        4.000000        0.000000        0.000000        0.000000        4.000000        5.000000        57.000000       4.500000        3.000000        3.900000        0.000000
1.000000        1.000000        37.800000       48.000000       28.000000       1.000000        1.000000        1.000000        2.000000        1.000000        2.000000        1.000000        2.000000        0.000000        0.000000        1.000000        1.000000        46.000000       5.900000        2.000000        7.000000        1.000000
1.000000        1.000000        37.100000       84.000000       40.000000       3.000000        3.000000        6.000000        1.000000        2.000000        4.000000        4.000000        3.000000        2.000000        2.000000        4.000000        5.000000        75.000000       81.000000       0.000000        0.000000        0.000000
2.000000        1.000000        0.000000        80.000000       32.000000       3.000000        3.000000        2.000000        1.000000        2.000000        3.000000        3.000000        2.000000        1.000000        0.000000        3.000000        0.000000        50.000000       80.000000       0.000000        0.000000        1.000000
1.000000        1.000000        38.200000       48.000000       0.000000        1.000000        3.000000        3.000000        1.000000        3.000000        4.000000        4.000000        1.000000        3.000000        2.000000        4.000000        5.000000        42.000000       71.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.000000       44.000000       12.000000       2.000000        1.000000        3.000000        1.000000        3.000000        4.000000        3.000000        1.000000        2.000000        6.500000        1.000000        4.000000        33.000000       6.500000        0.000000        0.000000        0.000000
1.000000        1.000000        38.300000       132.000000      0.000000        0.000000        3.000000        6.000000        2.000000        2.000000        4.000000        2.000000        2.000000        3.000000        6.200000        4.000000        4.000000        57.000000       8.000000        0.000000        5.200000        1.000000
2.000000        1.000000        38.700000       48.000000       24.000000       0.000000        0.000000        0.000000        0.000000        1.000000        1.000000        0.000000        1.000000        1.000000        0.000000        1.000000        0.000000        34.000000       63.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.900000       44.000000       14.000000       3.000000        1.000000        1.000000        1.000000        2.000000        3.000000        2.000000        0.000000        0.000000        0.000000        0.000000        2.000000        33.000000       64.000000       0.000000        0.000000        1.000000
1.000000        1.000000        39.300000       0.000000        0.000000        4.000000        3.000000        6.000000        2.000000        4.000000        4.000000        2.000000        1.000000        3.000000        4.000000        4.000000        4.000000        75.000000       0.000000        3.000000        4.300000        0.000000
1.000000        1.000000        0.000000        100.000000      0.000000        3.000000        3.000000        4.000000        2.000000        0.000000        4.000000        4.000000        2.000000        1.000000        2.000000        0.000000        0.000000        68.000000       64.000000       3.000000        2.000000        1.000000
2.000000        1.000000        38.600000       48.000000       20.000000       3.000000        1.000000        1.000000        1.000000        1.000000        3.000000        2.000000        2.000000        1.000000        0.000000        3.000000        2.000000        50.000000       7.300000        1.000000        0.000000        1.000000
2.000000        1.000000        38.800000       48.000000       40.000000       1.000000        1.000000        3.000000        1.000000        3.000000        3.000000        4.000000        2.000000        0.000000        0.000000        0.000000        5.000000        41.000000       65.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.000000       48.000000       20.000000       3.000000        3.000000        4.000000        1.000000        1.000000        4.000000        2.000000        2.000000        0.000000        5.000000        0.000000        2.000000        49.000000       8.300000        1.000000        0.000000        1.000000
2.000000        1.000000        38.600000       52.000000       20.000000       1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        2.000000        1.000000        1.000000        0.000000        1.000000        3.000000        36.000000       6.600000        1.000000        5.000000        1.000000
1.000000        1.000000        37.800000       60.000000       24.000000       1.000000        0.000000        3.000000        2.000000        0.000000        4.000000        4.000000        2.000000        3.000000        2.000000        0.000000        5.000000        52.000000       75.000000       0.000000        0.000000        0.000000
2.000000        1.000000        38.000000       42.000000       40.000000       3.000000        1.000000        1.000000        1.000000        3.000000        3.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
2.000000        1.000000        0.000000        0.000000        12.000000       1.000000        1.000000        2.000000        1.000000        2.000000        1.000000        2.000000        3.000000        1.000000        0.000000        1.000000        3.000000        44.000000       7.500000        2.000000        0.000000        1.000000
1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        4.000000        0.000000        0.000000        1.000000        1.000000        0.000000        0.000000        5.000000        35.000000       58.000000       2.000000        1.000000        1.000000
1.000000        1.000000        38.300000       42.000000       24.000000       0.000000        0.000000        0.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        40.000000       8.500000        0.000000        0.000000        0.000000
2.000000        1.000000        39.500000       60.000000       10.000000       3.000000        0.000000        0.000000        2.000000        3.000000        3.000000        2.000000        2.000000        1.000000        0.000000        3.000000        0.000000        38.000000       56.000000       1.000000        0.000000        1.000000
1.000000        1.000000        38.000000       66.000000       20.000000       1.000000        3.000000        3.000000        1.000000        5.000000        3.000000        1.000000        1.000000        1.000000        0.000000        3.000000        0.000000        46.000000       46.000000       3.000000        2.000000        0.000000
1.000000        1.000000        38.700000       76.000000       0.000000        1.000000        1.000000        5.000000        2.000000        3.000000        3.000000        2.000000        2.000000        2.000000        0.000000        4.000000        4.000000        50.000000       8.000000        0.000000        0.000000        1.000000
1.000000        1.000000        39.400000       120.000000      48.000000       0.000000        0.000000        5.000000        1.000000        0.000000        3.000000        3.000000        1.000000        0.000000        0.000000        4.000000        0.000000        56.000000       64.000000       1.000000        2.000000        0.000000
1.000000        1.000000        38.300000       40.000000       18.000000       1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        1.000000        0.000000        0.000000        0.000000        2.000000        1.000000        43.000000       5.900000        1.000000        0.000000        1.000000
2.000000        1.000000        0.000000        44.000000       24.000000       1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        1.000000        2.000000        1.000000        0.000000        0.000000        1.000000        0.000000        6.300000        0.000000        0.000000        1.000000
1.000000        1.000000        38.400000       104.000000      40.000000       1.000000        1.000000        3.000000        1.000000        2.000000        4.000000        2.000000        2.000000        3.000000        6.500000        0.000000        4.000000        55.000000       8.500000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        65.000000       24.000000       0.000000        0.000000        0.000000        2.000000        5.000000        0.000000        4.000000        3.000000        1.000000        0.000000        0.000000        5.000000        0.000000        0.000000        0.000000        0.000000        0.000000
2.000000        1.000000        37.500000       44.000000       20.000000       1.000000        1.000000        3.000000        1.000000        0.000000        1.000000        1.000000        0.000000        0.000000        0.000000        1.000000        0.000000        35.000000       7.200000        0.000000        0.000000        1.000000
2.000000        1.000000        39.000000       86.000000       16.000000       3.000000        3.000000        5.000000        0.000000        3.000000        3.000000        3.000000        0.000000        2.000000        0.000000        0.000000        0.000000        68.000000       5.800000        3.000000        6.000000        0.000000
1.000000        1.000000        38.500000       129.000000      48.000000       3.000000        3.000000        3.000000        1.000000        2.000000        4.000000        3.000000        1.000000        3.000000        2.000000        0.000000        0.000000        57.000000       66.000000       3.000000        2.000000        1.000000
1.000000        1.000000        0.000000        104.000000      0.000000        3.000000        3.000000        5.000000        2.000000        2.000000        4.000000        3.000000        0.000000        3.000000        0.000000        4.000000        4.000000        69.000000       8.600000        2.000000        3.400000        0.000000
2.000000        1.000000        0.000000        0.000000        0.000000        3.000000        4.000000        6.000000        0.000000        4.000000        0.000000        4.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000
1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
1.000000        1.000000        38.200000       60.000000       30.000000       1.000000        1.000000        3.000000        1.000000        3.000000        3.000000        1.000000        2.000000        1.000000        0.000000        3.000000        2.000000        48.000000       66.000000       0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        68.000000       14.000000       0.000000        0.000000        4.000000        1.000000        4.000000        0.000000        0.000000        0.000000        1.000000        4.300000        0.000000        0.000000        0.000000        0.000000        2.000000        2.800000        0.000000
1.000000        1.000000        0.000000        60.000000       30.000000       3.000000        3.000000        4.000000        2.000000        5.000000        4.000000        4.000000        1.000000        1.000000        0.000000        4.000000        0.000000        45.000000       70.000000       3.000000        2.000000        1.000000
2.000000        1.000000        38.500000       100.000000      0.000000        3.000000        3.000000        5.000000        2.000000        4.000000        3.000000        4.000000        2.000000        1.000000        0.000000        4.000000        5.000000        0.000000        0.000000        0.000000        0.000000        0.000000
1.000000        1.000000        38.400000       84.000000       30.000000       3.000000        1.000000        5.000000        2.000000        4.000000        3.000000        3.000000        2.000000        3.000000        6.500000        4.000000        4.000000        47.000000       7.500000        3.000000        0.000000        0.000000
2.000000        1.000000        37.800000       48.000000       14.000000       0.000000        0.000000        1.000000        1.000000        3.000000        0.000000        2.000000        1.000000        3.000000        5.300000        1.000000        0.000000        35.000000       7.500000        0.000000        0.000000        1.000000
1.000000        1.000000        38.000000       0.000000        24.000000       3.000000        3.000000        6.000000        2.000000        5.000000        0.000000        4.000000        1.000000        1.000000        0.000000        0.000000        0.000000        68.000000       7.800000        0.000000        0.000000        0.000000
2.000000        1.000000        37.800000       56.000000       16.000000       1.000000        1.000000        2.000000        1.000000        2.000000        1.000000        1.000000        2.000000        1.000000        0.000000        1.000000        0.000000        44.000000       68.000000       1.000000        1.000000        1.000000
2.000000        1.000000        38.200000       68.000000       32.000000       2.000000        2.000000        2.000000        1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        0.000000        1.000000        1.000000        43.000000       65.000000       0.000000        0.000000        1.000000
1.000000        1.000000        38.500000       120.000000      60.000000       4.000000        3.000000        6.000000        2.000000        0.000000        3.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        54.000000       0.000000        0.000000        0.000000        1.000000
1.000000        1.000000        39.300000       64.000000       90.000000       2.000000        3.000000        1.000000        1.000000        0.000000        3.000000        1.000000        1.000000        2.000000        0.000000        0.000000        0.000000        39.000000       6.700000        0.000000        0.000000        1.000000
1.000000        1.000000        38.400000       80.000000       30.000000       4.000000        3.000000        1.000000        1.000000        3.000000        3.000000        3.000000        3.000000        3.000000        0.000000        4.000000        5.000000        32.000000       6.100000        3.000000        4.300000        1.000000
1.000000        1.000000        38.500000       60.000000       0.000000        1.000000        1.000000        0.000000        1.000000        0.000000        1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        33.000000       53.000000       1.000000        0.000000        1.000000
1.000000        1.000000        38.300000       60.000000       16.000000       3.000000        1.000000        1.000000        1.000000        2.000000        1.000000        1.000000        2.000000        2.000000        3.000000        1.000000        4.000000        30.000000       6.000000        1.000000        3.000000        1.000000
1.000000        1.000000        37.100000       40.000000       8.000000        0.000000        1.000000        4.000000        1.000000        3.000000        3.000000        1.000000        1.000000        1.000000        0.000000        3.000000        3.000000        23.000000       6.700000        3.000000        0.000000        1.000000
2.000000        9.000000        0.000000        100.000000      44.000000       2.000000        1.000000        1.000000        1.000000        4.000000        1.000000        1.000000        0.000000        0.000000        0.000000        1.000000        0.000000        37.000000       4.700000        0.000000        0.000000        1.000000
1.000000        1.000000        38.200000       48.000000       18.000000       1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        3.000000        1.000000        2.000000        0.000000        4.000000        0.000000        48.000000       74.000000       1.000000        2.000000        1.000000
1.000000        1.000000        0.000000        60.000000       48.000000       3.000000        3.000000        4.000000        2.000000        4.000000        3.000000        4.000000        0.000000        0.000000        0.000000        0.000000        0.000000        58.000000       7.600000        0.000000        0.000000        0.000000
2.000000        1.000000        37.900000       88.000000       24.000000       1.000000        1.000000        2.000000        1.000000        2.000000        2.000000        1.000000        0.000000        0.000000        0.000000        4.000000        1.000000        37.000000       56.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.000000       44.000000       12.000000       3.000000        1.000000        1.000000        0.000000        0.000000        1.000000        2.000000        0.000000        0.000000        0.000000        1.000000        0.000000        42.000000       64.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.500000       60.000000       20.000000       1.000000        1.000000        5.000000        2.000000        2.000000        2.000000        1.000000        2.000000        1.000000        0.000000        2.000000        3.000000        63.000000       7.500000        2.000000        2.300000        0.000000
2.000000        1.000000        38.500000       96.000000       36.000000       3.000000        3.000000        0.000000        2.000000        2.000000        4.000000        2.000000        1.000000        2.000000        0.000000        4.000000        5.000000        70.000000       8.500000        0.000000        0.000000        0.000000
2.000000        1.000000        38.300000       60.000000       20.000000       1.000000        1.000000        1.000000        2.000000        1.000000        3.000000        1.000000        0.000000        0.000000        0.000000        3.000000        0.000000        34.000000       66.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.500000       60.000000       40.000000       3.000000        1.000000        2.000000        1.000000        2.000000        1.000000        2.000000        0.000000        0.000000        0.000000        3.000000        2.000000        49.000000       59.000000       0.000000        0.000000        1.000000
1.000000        1.000000        37.300000       48.000000       12.000000       1.000000        0.000000        3.000000        1.000000        3.000000        1.000000        3.000000        2.000000        1.000000        0.000000        3.000000        3.000000        40.000000       6.600000        2.000000        0.000000        1.000000
1.000000        1.000000        38.500000       86.000000       0.000000        1.000000        1.000000        3.000000        1.000000        4.000000        4.000000        3.000000        2.000000        1.000000        0.000000        3.000000        5.000000        45.000000       7.400000        1.000000        3.400000        0.000000
1.000000        1.000000        37.500000       48.000000       40.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000        1.000000        0.000000        0.000000        5.000000        41.000000       55.000000       3.000000        2.000000        0.000000
2.000000        1.000000        37.200000       36.000000       9.000000        1.000000        1.000000        1.000000        1.000000        2.000000        3.000000        1.000000        2.000000        1.000000        0.000000        4.000000        1.000000        35.000000       5.700000        0.000000        0.000000        1.000000
1.000000        1.000000        39.200000       0.000000        23.000000       3.000000        1.000000        3.000000        1.000000        4.000000        4.000000        2.000000        2.000000        0.000000        0.000000        0.000000        0.000000        36.000000       6.600000        1.000000        3.000000        1.000000
2.000000        1.000000        38.500000       100.000000      0.000000        3.000000        3.000000        5.000000        2.000000        4.000000        3.000000        4.000000        2.000000        1.000000        0.000000        4.000000        5.000000        0.000000        0.000000        0.000000        0.000000        0.000000
1.000000        1.000000        38.500000       96.000000       30.000000       2.000000        3.000000        4.000000        2.000000        4.000000        4.000000        3.000000        2.000000        1.000000        0.000000        3.000000        5.000000        50.000000       65.000000       0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        45.000000       8.700000        0.000000        0.000000        0.000000
1.000000        1.000000        37.800000       88.000000       80.000000       3.000000        3.000000        5.000000        2.000000        0.000000        3.000000        3.000000        2.000000        3.000000        0.000000        4.000000        5.000000        64.000000       89.000000       0.000000        0.000000        0.000000
2.000000        1.000000        37.500000       44.000000       10.000000       3.000000        1.000000        1.000000        1.000000        3.000000        1.000000        2.000000        2.000000        0.000000        0.000000        3.000000        3.000000        43.000000       51.000000       1.000000        1.000000        1.000000
1.000000        1.000000        37.900000       68.000000       20.000000       0.000000        1.000000        2.000000        1.000000        2.000000        4.000000        2.000000        0.000000        0.000000        0.000000        1.000000        5.000000        45.000000       4.000000        3.000000        2.800000        0.000000
1.000000        1.000000        38.000000       86.000000       24.000000       4.000000        3.000000        4.000000        1.000000        2.000000        4.000000        4.000000        1.000000        1.000000        0.000000        4.000000        5.000000        45.000000       5.500000        1.000000        10.100000       0.000000
1.000000        9.000000        38.900000       120.000000      30.000000       1.000000        3.000000        2.000000        2.000000        3.000000        3.000000        3.000000        3.000000        1.000000        3.000000        0.000000        0.000000        47.000000       6.300000        1.000000        0.000000        1.000000
1.000000        1.000000        37.600000       45.000000       12.000000       3.000000        1.000000        3.000000        1.000000        0.000000        2.000000        2.000000        2.000000        1.000000        0.000000        1.000000        4.000000        39.000000       7.000000        2.000000        1.500000        1.000000
2.000000        1.000000        38.600000       56.000000       32.000000       2.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        2.000000        0.000000        0.000000        2.000000        0.000000        40.000000       7.000000        2.000000        2.100000        1.000000
1.000000        1.000000        37.800000       40.000000       12.000000       1.000000        1.000000        1.000000        1.000000        1.000000        2.000000        1.000000        2.000000        1.000000        0.000000        1.000000        2.000000        38.000000       7.000000        0.000000        0.000000        1.000000
2.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
1.000000        1.000000        38.000000       76.000000       18.000000       0.000000        0.000000        0.000000        2.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        71.000000       11.000000       0.000000        0.000000        1.000000
1.000000        1.000000        38.100000       40.000000       36.000000       1.000000        2.000000        2.000000        1.000000        2.000000        2.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000
1.000000        1.000000        0.000000        52.000000       28.000000       3.000000        3.000000        4.000000        1.000000        3.000000        4.000000        3.000000        2.000000        1.000000        0.000000        4.000000        4.000000        37.000000       8.100000        0.000000        0.000000        1.000000
1.000000        1.000000        39.200000       88.000000       58.000000       4.000000        4.000000        0.000000        2.000000        5.000000        4.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        2.000000        2.000000        0.000000
1.000000        1.000000        38.500000       92.000000       40.000000       4.000000        3.000000        0.000000        1.000000        2.000000        4.000000        3.000000        0.000000        0.000000        0.000000        4.000000        0.000000        46.000000       67.000000       2.000000        2.000000        1.000000
1.000000        1.000000        0.000000        112.000000      13.000000       4.000000        4.000000        4.000000        1.000000        2.000000        3.000000        1.000000        2.000000        1.000000        4.500000        4.000000        4.000000        60.000000       6.300000        3.000000        0.000000        1.000000
1.000000        1.000000        37.700000       66.000000       12.000000       1.000000        1.000000        3.000000        1.000000        3.000000        3.000000        2.000000        2.000000        0.000000        0.000000        4.000000        4.000000        31.500000       6.200000        2.000000        1.600000        1.000000
1.000000        1.000000        38.800000       50.000000       14.000000       1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        1.000000        1.000000        1.000000        0.000000        3.000000        5.000000        38.000000       58.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.400000       54.000000       24.000000       1.000000        1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        2.000000        1.000000        0.000000        3.000000        2.000000        49.000000       7.200000        1.000000        8.000000        1.000000
1.000000        1.000000        39.200000       120.000000      20.000000       4.000000        3.000000        5.000000        2.000000        2.000000        3.000000        3.000000        1.000000        3.000000        0.000000        0.000000        4.000000        60.000000       8.800000        3.000000        0.000000        0.000000
1.000000        9.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        45.000000       6.500000        2.000000        0.000000        1.000000
1.000000        1.000000        37.300000       90.000000       40.000000       3.000000        0.000000        6.000000        2.000000        5.000000        4.000000        3.000000        2.000000        2.000000        0.000000        1.000000        5.000000        65.000000       50.000000       3.000000        2.000000        0.000000
1.000000        9.000000        38.500000       120.000000      70.000000       0.000000        0.000000        0.000000        0.000000        0.000000        1.000000        0.000000        2.000000        0.000000        0.000000        1.000000        0.000000        35.000000       54.000000       1.000000        1.000000        1.000000
1.000000        1.000000        38.500000       104.000000      40.000000       3.000000        3.000000        0.000000        1.000000        4.000000        3.000000        4.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
2.000000        1.000000        39.500000       92.000000       28.000000       3.000000        3.000000        6.000000        1.000000        5.000000        4.000000        1.000000        0.000000        3.000000        0.000000        4.000000        0.000000        72.000000       6.400000        0.000000        3.600000        0.000000
1.000000        1.000000        38.500000       30.000000       18.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        40.000000       7.700000        0.000000        0.000000        1.000000
1.000000        1.000000        38.300000       72.000000       30.000000       4.000000        3.000000        3.000000        2.000000        3.000000        3.000000        3.000000        2.000000        1.000000        0.000000        3.000000        5.000000        43.000000       7.000000        2.000000        3.900000        1.000000
2.000000        1.000000        37.500000       48.000000       30.000000       4.000000        1.000000        3.000000        1.000000        0.000000        2.000000        1.000000        1.000000        1.000000        0.000000        1.000000        1.000000        48.000000       8.600000        0.000000        0.000000        1.000000
1.000000        1.000000        38.100000       52.000000       24.000000       1.000000        1.000000        5.000000        1.000000        4.000000        3.000000        1.000000        2.000000        3.000000        7.000000        1.000000        0.000000        54.000000       7.500000        2.000000        2.600000        0.000000
2.000000        1.000000        38.200000       42.000000       26.000000       1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        2.000000        0.000000        0.000000        0.000000        1.000000        0.000000        36.000000       6.900000        0.000000        0.000000        1.000000
2.000000        1.000000        37.900000       54.000000       42.000000       2.000000        1.000000        5.000000        1.000000        3.000000        1.000000        1.000000        0.000000        1.000000        0.000000        0.000000        2.000000        47.000000       54.000000       3.000000        1.000000        1.000000
2.000000        1.000000        36.100000       88.000000       0.000000        3.000000        3.000000        3.000000        1.000000        3.000000        3.000000        2.000000        2.000000        3.000000        0.000000        0.000000        4.000000        45.000000       7.000000        3.000000        4.800000        0.000000
1.000000        1.000000        38.100000       70.000000       22.000000       0.000000        1.000000        0.000000        1.000000        5.000000        3.000000        0.000000        0.000000        0.000000        0.000000        0.000000        5.000000        36.000000       65.000000       0.000000        0.000000        0.000000
1.000000        1.000000        38.000000       90.000000       30.000000       4.000000        3.000000        4.000000        2.000000        5.000000        4.000000        4.000000        0.000000        0.000000        0.000000        4.000000        5.000000        55.000000       6.100000        0.000000        0.000000        0.000000
1.000000        1.000000        38.200000       52.000000       16.000000       1.000000        1.000000        2.000000        1.000000        1.000000        2.000000        1.000000        1.000000        1.000000        0.000000        1.000000        0.000000        43.000000       8.100000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        36.000000       32.000000       1.000000        1.000000        4.000000        1.000000        5.000000        3.000000        3.000000        2.000000        3.000000        4.000000        0.000000        4.000000        41.000000       5.900000        0.000000        0.000000        0.000000
1.000000        1.000000        38.400000       92.000000       20.000000       1.000000        0.000000        0.000000        2.000000        0.000000        3.000000        3.000000        0.000000        0.000000        0.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
1.000000        9.000000        38.200000       124.000000      88.000000       1.000000        3.000000        2.000000        1.000000        2.000000        3.000000        4.000000        0.000000        0.000000        0.000000        0.000000        0.000000        47.000000       8.000000        1.000000        0.000000        1.000000
2.000000        1.000000        0.000000        96.000000       0.000000        3.000000        3.000000        3.000000        2.000000        5.000000        4.000000        4.000000        0.000000        1.000000        0.000000        4.000000        5.000000        60.000000       0.000000        0.000000        0.000000        0.000000
1.000000        1.000000        37.600000       68.000000       32.000000       3.000000        0.000000        3.000000        1.000000        4.000000        2.000000        4.000000        2.000000        2.000000        6.500000        1.000000        5.000000        47.000000       7.200000        1.000000        0.000000        1.000000
1.000000        1.000000        38.100000       88.000000       24.000000       3.000000        3.000000        4.000000        1.000000        5.000000        4.000000        3.000000        2.000000        1.000000        0.000000        3.000000        4.000000        41.000000       4.600000        0.000000        0.000000        0.000000
1.000000        1.000000        38.000000       108.000000      60.000000       2.000000        3.000000        4.000000        1.000000        4.000000        3.000000        3.000000        2.000000        0.000000        0.000000        3.000000        4.000000        0.000000        0.000000        3.000000        0.000000        1.000000
2.000000        1.000000        38.200000       48.000000       0.000000        2.000000        0.000000        1.000000        2.000000        3.000000        3.000000        1.000000        2.000000        1.000000        0.000000        0.000000        2.000000        34.000000       6.600000        0.000000        0.000000        1.000000
1.000000        1.000000        39.300000       100.000000      51.000000       4.000000        4.000000        6.000000        1.000000        2.000000        4.000000        1.000000        1.000000        3.000000        2.000000        0.000000        4.000000        66.000000       13.000000       3.000000        2.000000        0.000000
2.000000        1.000000        36.600000       42.000000       18.000000       3.000000        3.000000        2.000000        1.000000        1.000000        4.000000        1.000000        1.000000        1.000000        0.000000        0.000000        5.000000        52.000000       7.100000        0.000000        0.000000        0.000000
1.000000        9.000000        38.800000       124.000000      36.000000       3.000000        1.000000        2.000000        1.000000        2.000000        3.000000        4.000000        1.000000        1.000000        0.000000        4.000000        4.000000        50.000000       7.600000        3.000000        0.000000        0.000000
2.000000        1.000000        0.000000        112.000000      24.000000       3.000000        3.000000        4.000000        2.000000        5.000000        4.000000        2.000000        0.000000        0.000000        0.000000        4.000000        0.000000        40.000000       5.300000        3.000000        2.600000        1.000000
1.000000        1.000000        0.000000        80.000000       0.000000        3.000000        3.000000        3.000000        1.000000        4.000000        4.000000        4.000000        0.000000        0.000000        0.000000        4.000000        5.000000        43.000000       70.000000       0.000000        0.000000        1.000000
1.000000        9.000000        38.800000       184.000000      84.000000       1.000000        0.000000        1.000000        1.000000        4.000000        1.000000        3.000000        0.000000        0.000000        0.000000        2.000000        0.000000        33.000000       3.300000        0.000000        0.000000        0.000000
1.000000        1.000000        37.500000       72.000000       0.000000        2.000000        1.000000        1.000000        1.000000        2.000000        1.000000        1.000000        1.000000        1.000000        0.000000        1.000000        0.000000        35.000000       65.000000       2.000000        2.000000        0.000000
1.000000        1.000000        38.700000       96.000000       28.000000       3.000000        3.000000        4.000000        1.000000        0.000000        4.000000        0.000000        0.000000        3.000000        7.500000        0.000000        0.000000        64.000000       9.000000        0.000000        0.000000        0.000000
2.000000        1.000000        37.500000       52.000000       12.000000       1.000000        1.000000        1.000000        1.000000        2.000000        3.000000        2.000000        2.000000        1.000000        0.000000        3.000000        5.000000        36.000000       61.000000       1.000000        1.000000        1.000000
1.000000        1.000000        40.800000       72.000000       42.000000       3.000000        3.000000        1.000000        1.000000        2.000000        3.000000        1.000000        2.000000        1.000000        0.000000        0.000000        0.000000        54.000000       7.400000        3.000000        0.000000        0.000000
2.000000        1.000000        38.000000       40.000000       25.000000       0.000000        1.000000        1.000000        1.000000        4.000000        3.000000        2.000000        1.000000        1.000000        0.000000        4.000000        0.000000        37.000000       69.000000       0.000000        0.000000        1.000000
2.000000        1.000000        38.400000       48.000000       16.000000       2.000000        1.000000        1.000000        1.000000        1.000000        0.000000        2.000000        2.000000        1.000000        0.000000        0.000000        2.000000        39.000000       6.500000        0.000000        0.000000        1.000000
2.000000        9.000000        38.600000       88.000000       28.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        35.000000       5.900000        0.000000        0.000000        1.000000
1.000000        1.000000        37.100000       75.000000       36.000000       0.000000        0.000000        3.000000        2.000000        4.000000        4.000000        2.000000        2.000000        3.000000        5.000000        4.000000        4.000000        48.000000       7.400000        3.000000        3.200000        0.000000
1.000000        1.000000        38.300000       44.000000       21.000000       3.000000        1.000000        2.000000        1.000000        3.000000        3.000000        3.000000        2.000000        1.000000        0.000000        1.000000        5.000000        44.000000       6.500000        2.000000        4.400000        1.000000
2.000000        1.000000        0.000000        56.000000       68.000000       3.000000        1.000000        1.000000        1.000000        3.000000        3.000000        1.000000        2.000000        1.000000        0.000000        1.000000        0.000000        40.000000       6.000000        0.000000        0.000000        0.000000
2.000000        1.000000        38.600000       68.000000       20.000000       2.000000        1.000000        3.000000        1.000000        3.000000        3.000000        2.000000        1.000000        1.000000        0.000000        1.000000        5.000000        38.000000       6.500000        1.000000        0.000000        1.000000
2.000000        1.000000        38.300000       54.000000       18.000000       3.000000        1.000000        2.000000        1.000000        2.000000        3.000000        2.000000        0.000000        3.000000        5.400000        0.000000        4.000000        44.000000       7.200000        3.000000        0.000000        1.000000
1.000000        1.000000        38.200000       42.000000       20.000000       0.000000        0.000000        1.000000        1.000000        0.000000        3.000000        0.000000        0.000000        0.000000        0.000000        3.000000        0.000000        47.000000       60.000000       0.000000        0.000000        1.000000
1.000000        1.000000        39.300000       64.000000       90.000000       2.000000        3.000000        1.000000        1.000000        0.000000        3.000000        1.000000        1.000000        2.000000        6.500000        1.000000        5.000000        39.000000       6.700000        0.000000        0.000000        1.000000
1.000000        1.000000        37.500000       60.000000       50.000000       3.000000        3.000000        1.000000        1.000000        3.000000        3.000000        2.000000        2.000000        2.000000        3.500000        3.000000        4.000000        35.000000       6.500000        0.000000        0.000000        0.000000
1.000000        1.000000        37.700000       80.000000       0.000000        3.000000        3.000000        6.000000        1.000000        5.000000        4.000000        1.000000        2.000000        3.000000        0.000000        3.000000        1.000000        50.000000       55.000000       3.000000        2.000000        1.000000
1.000000        1.000000        0.000000        100.000000      30.000000       3.000000        3.000000        4.000000        2.000000        5.000000        4.000000        4.000000        3.000000        3.000000        0.000000        4.000000        4.000000        52.000000       6.600000        0.000000        0.000000        1.000000
1.000000        1.000000        37.700000       120.000000      28.000000       3.000000        3.000000        3.000000        1.000000        5.000000        3.000000        3.000000        1.000000        1.000000        0.000000        0.000000        0.000000        65.000000       7.000000        3.000000        0.000000        0.000000
1.000000        1.000000        0.000000        76.000000       0.000000        0.000000        3.000000        0.000000        0.000000        0.000000        4.000000        4.000000        0.000000        0.000000        0.000000        0.000000        5.000000        0.000000        0.000000        0.000000        0.000000        0.000000
1.000000        9.000000        38.800000       150.000000      50.000000       1.000000        3.000000        6.000000        2.000000        5.000000        3.000000        2.000000        1.000000        1.000000        0.000000        0.000000        0.000000        50.000000       6.200000        0.000000        0.000000        0.000000
1.000000        1.000000        38.000000       36.000000       16.000000       3.000000        1.000000        1.000000        1.000000        4.000000        2.000000        2.000000        3.000000        3.000000        2.000000        3.000000        0.000000        37.000000       75.000000       2.000000        1.000000        0.000000
2.000000        1.000000        36.900000       50.000000       40.000000       2.000000        3.000000        3.000000        1.000000        1.000000        3.000000        2.000000        3.000000        1.000000        7.000000        0.000000        0.000000        37.500000       6.500000        0.000000        0.000000        1.000000
2.000000        1.000000        37.800000       40.000000       16.000000       1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        1.000000        0.000000        0.000000        0.000000        1.000000        1.000000        37.000000       6.800000        0.000000        0.000000        1.000000
2.000000        1.000000        38.200000       56.000000       40.000000       4.000000        3.000000        1.000000        1.000000        2.000000        4.000000        3.000000        2.000000        2.000000        7.500000        0.000000        0.000000        47.000000       7.200000        1.000000        2.500000        1.000000
1.000000        1.000000        38.600000       48.000000       12.000000       0.000000        0.000000        1.000000        0.000000        1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        36.000000       67.000000       0.000000        0.000000        1.000000
2.000000        1.000000        40.000000       78.000000       0.000000        3.000000        3.000000        5.000000        1.000000        2.000000        3.000000        1.000000        1.000000        1.000000        0.000000        4.000000        1.000000        66.000000       6.500000        0.000000        0.000000        0.000000
1.000000        1.000000        0.000000        70.000000       16.000000       3.000000        4.000000        5.000000        2.000000        2.000000        3.000000        2.000000        2.000000        1.000000        0.000000        4.000000        5.000000        60.000000       7.500000        0.000000        0.000000        0.000000
1.000000        1.000000        38.200000       72.000000       18.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        35.000000       6.400000        0.000000        0.000000        1.000000
2.000000        1.000000        38.500000       54.000000       0.000000        1.000000        1.000000        1.000000        1.000000        3.000000        1.000000        1.000000        2.000000        1.000000        0.000000        1.000000        0.000000        40.000000       6.800000        2.000000        7.000000        1.000000
1.000000        1.000000        38.500000       66.000000       24.000000       1.000000        1.000000        1.000000        1.000000        3.000000        3.000000        1.000000        2.000000        1.000000        0.000000        4.000000        5.000000        40.000000       6.700000        1.000000        0.000000        1.000000
2.000000        1.000000        37.800000       82.000000       12.000000       3.000000        1.000000        1.000000        2.000000        4.000000        0.000000        3.000000        1.000000        3.000000        0.000000        0.000000        0.000000        50.000000       7.000000        0.000000        0.000000        0.000000
2.000000        9.000000        39.500000       84.000000       30.000000       0.000000        0.000000        0.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        28.000000       5.000000        0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        1.000000
1.000000        1.000000        38.000000       50.000000       36.000000       0.000000        1.000000        1.000000        1.000000        3.000000        2.000000        2.000000        0.000000        0.000000        0.000000        3.000000        0.000000        39.000000       6.600000        1.000000        5.300000        1.000000
2.000000        1.000000        38.600000       45.000000       16.000000       2.000000        1.000000        2.000000        1.000000        1.000000        1.000000        0.000000        0.000000        0.000000        0.000000        1.000000        1.000000        43.000000       58.000000       0.000000        0.000000        1.000000
1.000000        1.000000        38.900000       80.000000       44.000000       3.000000        3.000000        3.000000        1.000000        2.000000        3.000000        3.000000        2.000000        2.000000        7.000000        3.000000        1.000000        54.000000       6.500000        3.000000        0.000000        0.000000
1.000000        1.000000        37.000000       66.000000       20.000000       1.000000        3.000000        2.000000        1.000000        4.000000        3.000000        3.000000        1.000000        0.000000        0.000000        1.000000        5.000000        35.000000       6.900000        2.000000        0.000000        0.000000
1.000000        1.000000        0.000000        78.000000       24.000000       3.000000        3.000000        3.000000        1.000000        0.000000        3.000000        0.000000        2.000000        1.000000        0.000000        0.000000        4.000000        43.000000       62.000000       0.000000        2.000000        0.000000
2.000000        1.000000        38.500000       40.000000       16.000000       1.000000        1.000000        1.000000        1.000000        2.000000        1.000000        1.000000        0.000000        0.000000        0.000000        3.000000        2.000000        37.000000       67.000000       0.000000        0.000000        1.000000
1.000000        1.000000        0.000000        120.000000      70.000000       4.000000        0.000000        4.000000        2.000000        2.000000        4.000000        0.000000        0.000000        0.000000        0.000000        0.000000        5.000000        55.000000       65.000000       0.000000        0.000000        0.000000
2.000000        1.000000        37.200000       72.000000       24.000000       3.000000        2.000000        4.000000        2.000000        4.000000        3.000000        3.000000        3.000000        1.000000        0.000000        4.000000        4.000000        44.000000       0.000000        3.000000        3.300000        0.000000
1.000000        1.000000        37.500000       72.000000       30.000000       4.000000        3.000000        4.000000        1.000000        4.000000        4.000000        3.000000        2.000000        1.000000        0.000000        3.000000        5.000000        60.000000       6.800000        0.000000        0.000000        0.000000
1.000000        1.000000        36.500000       100.000000      24.000000       3.000000        3.000000        3.000000        1.000000        3.000000        3.000000        3.000000        3.000000        1.000000        0.000000        4.000000        4.000000        50.000000       6.000000        3.000000        3.400000        1.000000
1.000000        1.000000        37.200000       40.000000       20.000000       0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        0.000000        4.000000        1.000000        36.000000       62.000000       1.000000        1.000000        0.000000
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 完整代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#-*_coding:utf-8_*_
import math
from numpy import *

# Sigmoid函数的计算
def sigmoid(inX):
    return 1.0/(1+exp(-inX))

# 改进的随机梯度上升算法
def stocGradAscent1(dataMatrix,classLabels,numIter=150):
    m,n = shape(dataMatrix)
    weights = ones(n)
    for j in range(numIter):
        dataIndex = list(range(m))
        for i in range(m):
            alpha = 4/(1.0+j+i)+0.01
            randIndex = int(random.uniform(0,len(dataIndex)))
            h = sigmoid(sum(dataMatrix[randIndex]*weights))
            error = classLabels[randIndex] - h
            weights = weights + alpha *error*dataMatrix[randIndex]
            del(dataIndex[randIndex])
    return weights


# Logistic回归分类函数
def  classifyVetor(inX,weights):
    prob = sigmoid(sum(inX*weights))
    if prob &amp;gt; 0.5:
        return 1.0
    else:
        return 0.0

def colicTest(filetrain,filetest):
    frTrain = open(filetrain)
    frTest = open(filetest)
    trainingSet = []
    trainingLabeles = []
    for line in frTrain.readlines():
        currLine = line.strip().split('\t')
        lineArr = []
        for i in range(21):
            lineArr.append(float(currLine[i]))
        trainingSet.append(lineArr)
        trainingLabeles.append(float(currLine[21]))
    trainWeights = stocGradAscent1(array(trainingSet),trainingLabeles,500)
    errorCount = 0
    numTestVec = 0
    for line in frTest.readlines():
        numTestVec += 1.0
        currLine = line.strip().split('\t')
        lineArr =[]
        for i in range(21):
            lineArr.append(float(currLine[i]))
        if int(classifyVetor(array(lineArr),trainWeights)) != int(currLine[21]):
            errorCount += 1
    errorRate = (float(errorCount)/numTestVec)
    print('the error rate of this test is  %f'%errorRate)
    return errorRate

def multTest(filetrain,filetest):
    numTests = 6
    errorSum = 1.0
    for k in range(numTests):
        errorSum += colicTest(filetrain,filetest)
    print('after %d iterations  the average error rate is %f'%(numTests,errorSum/float(numTests)))


if __name__ == '__main__':
    filetrain = 'horseColicTraining.txt'
    filetest = 'horseColicTest.txt'
    multTest(filetrain,filetest)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
the error rate of this test is  0.373134
the error rate of this test is  0.358209
the error rate of this test is  0.402985
the error rate of this test is  0.432836
the error rate of this test is  0.462687
the error rate of this test is  0.343284
after 6 iterations  the average error rate is 0.562189
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从结果来看，6次迭代之后的平均错误率为0.56，事实上，这个结果还不错，因为数据有30%的数据缺失，当然如果调整colicTest（）中的迭代次数和stochGradAscent1()中的步长，平均错误率就可以降到20%左右。&lt;/p&gt;
&lt;h3&gt; 10，总结&lt;/h3&gt;
&lt;p&gt;　　Logistic回归的目的是寻找一个非线性函数Sigmoid的最佳拟合参数，求解过程可以由最优化算法来完成。在最优化算法中，最常用的就是梯度上升算法，而梯度上升算法又可以简化为随机梯度上升算法。&lt;/p&gt;
&lt;p&gt;　　随机梯度上升算法与梯度上升算法的效果相当，但是占用更少的计算资源。此外，随机梯度上升是一个在线算法，它可以在新数据到来时就完成参数更新，不需要重新读取整个数据集来进行批处理运算。&lt;/p&gt;
&lt;p&gt;　　机器学习的一个重要问题就是如何处理缺失数据，这个问题没有标准答案，取决于实际应用中的需求。&lt;/p&gt;
&lt;h3&gt;11，推广&lt;/h3&gt;
&lt;p&gt;　　前面也说了Logistic回归模型主要用于二分类，那么下面说一下多分类问题中的推广——softmax回归。&lt;/p&gt;
&lt;p&gt;　　softmax与Logistic回归的主要区别就是，Logistic处理二分类问题，只有一组权重参数θ，而softmax处理多分类问题，如果有k个类别，那么softmax就有k组权值参数。每组权值对应一种分类，通过k组权值求解出样本数据对应每个类别的概率，最后取概率最大的类别作为该数据的分类结果，它的概率函数为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118101057579-1373395664.png&quot; alt=&quot;&quot; width=&quot;311&quot; height=&quot;69&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　softmax函数经常用于神经网络的最后一层，用于对神经网络已经处理好的特征进行分类。&lt;/p&gt;
&lt;h2&gt;基于Sklearn构建Logistic回归分类器 &lt;/h2&gt;
&lt;p&gt;　　下面让我们看一下Sklearn的Logistic回归分类器&lt;/p&gt;
&lt;p&gt;　　英文的Sklearn文档地址：&lt;strong&gt;&lt;a href=&quot;http://scikit-learn.org/dev/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression&quot; target=&quot;_blank&quot;&gt;请点击我&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　sklearn.linear_model模块提供了很多模型供我们使用，比如Logistic回归、Lasso回归、贝叶斯脊回归等，可见需要学习的东西还有很多很多。本次，我们使用LogisticRegressioin。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1，LogisticRegression&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　让我们先看一下LogisticRegression这个函数，一共有14个参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118114352145-1828350286.png&quot; alt=&quot;&quot; width=&quot;617&quot; height=&quot;130&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参数说明如下：&lt;/p&gt;
&lt;p&gt;　　penalty：惩罚项，str类型，可选参数为l1和l2，默认为l2。用于指定惩罚项中使用的规范。newton-cg、sag和lbfgs求解算法只支持L2规范。L1G规范假设的是模型的参数满足拉普拉斯分布，L2假设的模型参数满足高斯分布，所谓的范式就是加上对参数的约束，使得模型更不会过拟合(overfit)，但是如果要说是不是加了约束就会好，这个没有人能回答，只能说，加约束的情况下，理论上应该可以获得泛化能力更强的结果。&lt;br/&gt;　　dual：对偶或原始方法，bool类型，默认为False。对偶方法只用在求解线性多核(liblinear)的L2惩罚项上。当样本数量&amp;gt;样本特征的时候，dual通常设置为False。&lt;br/&gt;　　tol：停止求解的标准，float类型，默认为1e-4。就是求解到多少的时候，停止，认为已经求出最优解。&lt;br/&gt;　　c：正则化系数λ的倒数，float类型，默认为1.0。必须是正浮点型数。像SVM一样，越小的数值表示越强的正则化。&lt;br/&gt;　　fit_intercept：是否存在截距或偏差，bool类型，默认为True。&lt;br/&gt;　　intercept_scaling：仅在正则化项为”liblinear”，且fit_intercept设置为True时有用。float类型，默认为1。&lt;br/&gt;　　class_weight：用于标示分类模型中各种类型的权重，可以是一个字典或者balanced字符串，默认为不输入，也就是不考虑权重，即为None。如果选择输入的话，可以选择balanced让类库自己计算类型权重，或者自己输入各个类型的权重。举个例子，比如对于0,1的二元模型，我们可以定义class_weight={0:0.9,1:0.1}，这样类型0的权重为90%，而类型1的权重为10%。如果class_weight选择balanced，那么类库会根据训练样本量来计算权重。某种类型样本量越多，则权重越低，样本量越少，则权重越高。当class_weight为balanced时，类权重计算方法如下：n_samples / (n_classes * np.bincount(y))。n_samples为样本数，n_classes为类别数量，np.bincount(y)会输出每个类的样本数，例如y=[1,0,0,1,1],则np.bincount(y)=[2,3]。&lt;br/&gt;　　　　那么class_weight有什么作用呢？&lt;br/&gt;　　　　　　在分类模型中，我们经常会遇到两类问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　　　　　　　　1.第一种是误分类的代价很高。比如对合法用户和非法用户进行分类，将非法用户分类为合法用户的代价很高，我们宁愿将合法用户分类为非法用户，这时可以人工再甄别，但是却不愿将非法用户分类为合法用户。这时，我们可以适当提高非法用户的权重。&lt;/li&gt;
&lt;li&gt;　　　　　　　　第二种是样本是高度失衡的，比如我们有合法用户和非法用户的二元样本数据10000条，里面合法用户有9995条，非法用户只有5条，如果我们不考虑权重，则我们可以将所有的测试集都预测为合法用户，这样预测准确率理论上有99.95%，但是却没有任何意义。这时，我们可以选择balanced，让类库自动提高非法用户样本的权重。提高了某种分类的权重，相比不考虑权重，会有更多的样本分类划分到高权重的类别，从而可以解决上面两类问题。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　random_state：随机数种子，int类型，可选参数，默认为无，仅在正则化优化算法为sag,liblinear时有用。&lt;br/&gt;　　solver：优化算法选择参数，只有五个可选参数，即newton-cg,lbfgs,liblinear,sag,saga。默认为liblinear。solver参数决定了我们对逻辑回归损失函数的优化方法，有四种算法可以选择，分别是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;liblinear：使用了开源的liblinear库实现，内部使用了坐标轴下降法来迭代优化损失函数。&lt;/li&gt;
&lt;li&gt;lbfgs：拟牛顿法的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。&lt;/li&gt;
&lt;li&gt;newton-cg：也是牛顿法家族的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。&lt;/li&gt;
&lt;li&gt;sag：即随机平均梯度下降，是梯度下降法的变种，和普通梯度下降法的区别是每次迭代仅仅用一部分的样本来计算梯度，适合于样本数据多的时候。&lt;/li&gt;
&lt;li&gt;saga：线性收敛的随机优化算法的的变重。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　　liblinear适用于小数据集，而sag和saga适用于大数据集因为速度更快。&lt;/li&gt;
&lt;li&gt;对于多分类问题，只有newton-cg,sag,saga和lbfgs能够处理多项损失，而liblinear受限于一对剩余(OvR)。啥意思，就是用liblinear的时候，如果是多分类问题，得先把一种类别作为一个类别，剩余的所有类别作为另外一个类别。一次类推，遍历所有类别，进行分类。&lt;/li&gt;
&lt;li&gt;newton-cg,sag和lbfgs这三种优化算法时都需要损失函数的一阶或者二阶连续导数，因此不能用于没有连续导数的L1正则化，只能用于L2正则化。而liblinear和saga通吃L1正则化和L2正则化。&lt;/li&gt;
&lt;li&gt;同时，sag每次仅仅使用了部分样本进行梯度迭代，所以当样本量少的时候不要选择它，而如果样本量非常大，比如大于10万，sag是第一选择。但是sag不能用于L1正则化，所以当你有大量的样本，又需要L1正则化的话就要自己做取舍了。要么通过对样本采样来降低样本量，要么回到L2正则化。&lt;/li&gt;
&lt;li&gt;从上面的描述，大家可能觉得，既然newton-cg, lbfgs和sag这么多限制，如果不是大样本，我们选择liblinear不就行了嘛！错，因为liblinear也有自己的弱点！我们知道，逻辑回归有二元逻辑回归和多元逻辑回归。对于多元逻辑回归常见的有one-vs-rest(OvR)和many-vs-many(MvM)两种。而MvM一般比OvR分类相对准确一些。郁闷的是liblinear只支持OvR，不支持MvM，这样如果我们需要相对精确的多元逻辑回归时，就不能选择liblinear了。也意味着如果我们需要相对精确的多元逻辑回归不能使用L1正则化了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;max_iter：算法收敛最大迭代次数，int类型，默认为10。仅在正则化优化算法为newton-cg, sag和lbfgs才有用，算法收敛的最大迭代次数。&lt;br/&gt;multi_class：分类方式选择参数，str类型，可选参数为ovr和multinomial，默认为ovr。ovr即前面提到的one-vs-rest(OvR)，而multinomial即前面提到的many-vs-many(MvM)。如果是二元逻辑回归，ovr和multinomial并没有任何区别，区别主要在多元逻辑回归上。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;OvR和MvM有什么不同？&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;　　OvR的思想很简单，无论你是多少元逻辑回归，我们都可以看做二元逻辑回归。具体做法是，对于第K类的分类决策，我们把所有第K类的样本作为正例，除了第K类样本以外的所有样本都作为负例，然后在上面做二元逻辑回归，得到第K类的分类模型。其他类的分类模型获得以此类推。&lt;/li&gt;
&lt;li&gt;　　而MvM则相对复杂，这里举MvM的特例one-vs-one(OvO)作讲解。如果模型有T类，我们每次在所有的T类样本里面选择两类样本出来，不妨记为T1类和T2类，把所有的输出为T1和T2的样本放在一起，把T1作为正例，T2作为负例，进行二元逻辑回归，得到模型参数。我们一共需要T(T-1)/2次分类。&lt;/li&gt;
&lt;li&gt;　　可以看出OvR相对简单，但分类效果相对略差（这里指大多数样本分布情况，某些样本分布下OvR可能更好）。而MvM分类相对精确，但是分类速度没有OvR快。如果选择了ovr，则4种损失函数的优化方法liblinear，newton-cg,lbfgs和sag都可以选择。但是如果选择了multinomial,则只能选择newton-cg, lbfgs和sag了。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　verbose：日志冗长度，int类型。默认为0。就是不输出训练过程，1的时候偶尔输出结果，大于1，对于每个子模型都输出。&lt;br/&gt;　　warm_start：热启动参数，bool类型。默认为False。如果为True，则下一次训练是以追加树的形式进行（重新使用上一次的调用作为初始化）。&lt;br/&gt;　　n_jobs：并行数。int类型，默认为1。1的时候，用CPU的一个内核运行程序，2的时候，用CPU的2个内核运行程序。为-1的时候，用所有CPU的内核运行程序。&lt;/p&gt;
&lt;p&gt;除此之外，LogisticRegression也有一些方法供我们使用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201901/1226410-20190118114823579-1920668531.png&quot; alt=&quot;&quot; width=&quot;532&quot; height=&quot;188&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有一些方法和MultinomialNB的方法都是类似的，因此不再累述。&lt;/p&gt;
&lt;h3&gt; 2，编写代码&lt;/h3&gt;
&lt;p&gt;　　了解了基本知识点，我们就可以编写Sklearn分类器的代码了，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#_*_ codingLutf-8_*_

from sklearn.linear_model import LogisticRegression

def colicSklearn(filetrain,filetest):
    frTrain = open(filetrain)
    frTest = open(filetest)
    trainingSet = []
    trainingLabels = []
    testSet = []
    testLabels = []
    for line in frTrain.readlines():
        currLine = line.strip().split('\t')
        lineArr = []
        for i in range(len(currLine)-1):
            lineArr.append(float(currLine[i]))
        trainingSet.append(lineArr)
        trainingLabels.append(float(currLine[-1]))
    for line in frTest.readlines():
        currLine = line.strip().split('\t')
        lineArr = []
        for i in range(len(currLine)-1):
            lineArr.append(float(currLine[i]))
        testSet.append(lineArr)
        testLabels.append(float(currLine[-1]))
    classifier = LogisticRegression(solver='liblinear',max_iter=20).fit(trainingSet,trainingLabels)
    test_accurcy = classifier.score(testSet,testLabels)*100
    print(&quot;正确率为%s%%&quot;%test_accurcy)

if __name__ == '__main__':
    filetrain = 'horseColicTraining.txt'
    filetest = 'horseColicTest.txt'
    colicSklearn(filetrain,filetest)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　执行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
正确率为73.13432835820896%
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，正确率又搞了，更改solver参数，比如设置为sag，使用随机平均梯度下降算法，看一看效果，你会发现：正确率高了，但是发出了警告，发出警告是因为算法还没有收敛，更改迭代次数即可。&lt;/p&gt;
&lt;p&gt; 当我们迭代到5000的时候，就不会报错了，所以说，对于小数据集，sag算法需要迭代上千次才收敛，而liblinear只需要不到10次。&lt;/p&gt;
&lt;p&gt;　　所以，我们需要根据数据集情况，选择最优化算法。&lt;/p&gt;
&lt;h3&gt;3，使用Sklearn的Logistic回归算法计算鸢尾花&lt;/h3&gt;
&lt;p&gt;　　对鸢尾花进行分类代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
from sklearn import datasets
from numpy import *
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split


def colicSklearn():
    iris = datasets.load_iris()
    X = iris.data
    Y = iris.target
    trainingSet,testSet,trainingLabels,testLabels = train_test_split(X,Y,test_size=0.25,random_state=40)
    classifier = LogisticRegression(solver='sag', max_iter=5000).fit(trainingSet, trainingLabels)
    test_accurcy = classifier.score(testSet, testLabels) * 100
    print(&quot;正确率为%s%%&quot; % test_accurcy)

if __name__  == '__main__':
    colicSklearn()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
正确率为100.0%
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考：https://www.cnblogs.com/bonelee/p/7253508.html&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/c406495762/article/details/77851973&lt;/p&gt;
</description>
<pubDate>Sat, 19 Jan 2019 06:24:00 +0000</pubDate>
<dc:creator>战争热诚</dc:creator>
<og:description>Logistic回归公式推导和代码实现 1，引言 logistic回归是机器学习中最常用最经典的分类方法之一，有人称之为逻辑回归或者逻辑斯蒂回归。虽然他称为回归模型，但是却处理的是分类问题，这主要是因</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wj-1314/p/10181876.html</dc:identifier>
</item>
<item>
<title>浏览器与android移动端视频互播技术实现 - 明基奶茶</title>
<link>http://www.cnblogs.com/chuzhouGIS/p/10291621.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chuzhouGIS/p/10291621.html</guid>
<description>&lt;p class=&quot;a&quot;&gt;       手机端与平台之间的视频直播功能，主要通过集成多种开源视频框架以及采购第三方视频直播服务器产品来实现预定业务需求。视频直播对话功能的实现，主要经历了三个阶段：利用开源视频框架实现视频直播、采购第三方视频服务器实现视频直播、系统平台集成开源框架实现视频互播。&lt;/p&gt;
&lt;p class=&quot;a&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/163022/201901/163022-20190119141440662-937432918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;a&quot; align=&quot;center&quot;&gt;图1.视频互播逻辑框架&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       1 利用开源视频框架实现视频直播&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       首先，视频流转播需要独立服务器软件构建视频流转播通道，经过框架调研与分析，我们选择SRS服务器软件作为视频转播服务器软件，而SRS是基于Linux操作系统的服务器软件。通过配置搭建CentOS服务器虚拟机作为SRS软件的基础系统环境，再安装配置开源SRS流媒体服务器软件作为推流和播流的服务软件，为视频直播模块的开发提供基础的测试环境。流媒体服务器（SRS）在视频流播放的过程中，起到建立视频流通道的作用，每个唯一的URL地址代表一个视频流通道，推流和拉流都是针对该视频流通道的操作。流媒体服务器同时可以担负起上千条视频流通道转发操作。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       其次，手机端视频直播客户端采用开源的主流yaesa框架，实现了较好视频推流效果。依据业务需求把yaesa推流模块集成封装，顺利合并到原有的Android系统框架中，完成android客户端的视频推流功能，将rtmp格式视频流推送到流媒体服务器（SRS）的视频流通道地址。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       再次，系统平台的视频画面播放功能采用video.js播放框架实现，video.js是基于html5的网络视频播放器，根据指定的视频流通道地址从流媒体服务器自动拉取rtmp格式视频流，并播放实时的视频画面。Web页面中嵌入多个video控件对象，从多个视频流通道读取视频流，实现了多视频直播画面窗口效果。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       2 采购第三方视频服务器实现视频直播&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       为了保障视频流转发过程的稳定性，从硬件厂商采购了第三方视频服务器TFMS，包含硬件设备和流媒体服务器软件两个部分，替换开源流媒体服务器软件SRS产品，其发挥的视频流转发作用与SRS是一样。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       对于系统功能实现来说，无需新增开发工作量，只需要修改视频流通道地址url即可实现流媒体服务器的切换。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       3 系统平台集成开源框架实现视频互播&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       上述第一阶段实现了视频流从手机端到浏览器端的单向传播。根据业务需求的深入，需要再实现视频流从浏览器端到手机端的单向传播，构建两条双向视频流通道，从而达到视频播放互动对话的效果。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       技术实现上，需要两个方面的技术准备。浏览器集成插件从摄像头和麦克风获取视频流和声音，并推流到指定的视频流通道url；手机端集成拉流框架，从指定视频流通道url拉取视频流和声音，并播流到播放窗口控件中。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;       系统平台的推流插件方面，通过市场产品调研和比较，选择了NodeMediaClient Web推流框架，该框架基于flash实现了连接PC的Camera和microphone硬件设备端口，直接获取Camera视频流和microphone声音，并以rtmp格式把视频流推送到流媒体服务器的指定视频流通道url。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/163022/201901/163022-20190119150932954-1004609563.png&quot; alt=&quot;&quot; width=&quot;538&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       手机端采用vitamio播流框架，从指定的视频流通道url拉取视频流，并在手机端弹出视频播放的浮动窗口，该窗口中实时播放拉取的rtmp格式视频流播放，从而完成从浏览器端到手机端的视频流的推流和拉流过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/163022/201901/163022-20190119150709470-2046895634.jpg&quot; alt=&quot;&quot; width=&quot;223&quot; height=&quot;397&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 Jan 2019 06:21:00 +0000</pubDate>
<dc:creator>明基奶茶</dc:creator>
<og:description>手机端与平台之间的视频直播功能，主要通过集成多种开源视频框架以及采购第三方视频直播服务器产品来实现预定业务需求。视频直播对话功能的实现，主要经历了三个阶段：利用开源视频框架实现视频直播、采购第三方视频</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chuzhouGIS/p/10291621.html</dc:identifier>
</item>
<item>
<title>Jenkins持续集成学习-Windows环境进行.Net开发 - 杰哥很忙</title>
<link>http://www.cnblogs.com/Jack-Blog/p/10291612.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jack-Blog/p/10291612.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;

&lt;hr/&gt;&lt;hr/&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文探究在.net环境下的持续集成环境研究并使用。关于为什么使用Jenkins，可以参考一下&lt;a href=&quot;http://www.cnblogs.com/liyuanhong/p/6548925.html&quot;&gt;jenkins持续集成原理&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;目标&lt;/h2&gt;
&lt;p&gt;学习jenkins的基本使用，完成以下2点任务。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;搭建jenkins任务完成自动编译。&lt;/li&gt;
&lt;li&gt;自动从nuget上获取需要的包。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;使用jenkins&quot;&gt;使用Jenkins&lt;/h2&gt;
&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;到&lt;a href=&quot;https://jenkins.io/download/&quot;&gt;Jenkins官网&lt;/a&gt;下载安装包，进行安装。安装完成后会自动打开一个页面。默认是网站是localhost:8080。若端口已被占用则需要修改成别的端口。&lt;br/&gt;具体安装问题可以看这里&lt;a href=&quot;https://www.cnblogs.com/sater/p/5345536.html&quot;&gt;浅谈.net jenkins svn下自动化集成环境安装 搭建 配置&lt;/a&gt;&lt;br/&gt;主要是安装完后需要安装.net的环境的一些插件及svn(或git)等相关插件。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;根据官网描述是需要安装java环境的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;添加.net环境配置&quot;&gt;添加.net环境配置&lt;/h3&gt;
&lt;p&gt;安装完后如果要在.net环境使用，在MSBuild插件安装完的前提下。配置msbuild.exe的路径。这样jenkins就能通过msbuild来编译.net项目了。具体配置可以可以参考&lt;a href=&quot;https://www.cnblogs.com/huhubun/p/6345077.html&quot;&gt;《为 Jenkins 配置 .NET 持续集成环境》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我本地的jenkins的全局配置配的MSBuild也为14.0&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;安装了不同版本的VS的MSBuild版本可能不一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118154259391-701216816.png&quot; alt=&quot;2.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;部署&quot;&gt;部署&lt;/h3&gt;
&lt;p&gt;我们通过VS先新建一个控制台项目&lt;code&gt;.net framework4.5&lt;/code&gt;的项目，项目名称叫做&lt;code&gt;JenkinsTest&lt;/code&gt;。在Program.cs中简单的输出&lt;code&gt;hello world&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    Console.WriteLine(&quot;Hello World!&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序目录如下&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;
│  JenkinsTest.sln
│
└─JenkinsTest
    │  App.config
    │  JenkinsTest.csproj
    │  Program.cs
    │
    └─Properties
            AssemblyInfo.cs
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译通过后将项目上传到SVN上，我在我本地建了SVN的服务，并增加了用户名和密码分别为test。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118154015392-1504081511.png&quot; alt=&quot;1.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;新建项目&quot;&gt;新建项目&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118160044854-1136667271.png&quot; alt=&quot;3.png&quot;/&gt;&lt;br/&gt;创建一个名为test的自由风格软件项目。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118160449568-1927261836.png&quot; alt=&quot;4.png&quot;/&gt;&lt;br/&gt;我本地使用的是SVN，因此选择Subversion，输入SVN的路径。&lt;code&gt;Local module directory&lt;/code&gt;为SVN获取代码的路径。&lt;code&gt;.&lt;/code&gt;表示获取到jenkins的根目录下。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118160628843-1206032033.png&quot; alt=&quot;5.png&quot;/&gt;&lt;br/&gt;首次创建的时候需要创建SVN的登录凭据，在Credentials项点击Add添加一个新的凭据，类型就选择&lt;code&gt;Username with password&lt;/code&gt;即可,id需要输入一个唯一凭据标识。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118160918254-1864951077.png&quot; alt=&quot;6.png&quot;/&gt;&lt;br/&gt;在&lt;code&gt;Build Environment&lt;/code&gt;下勾选&lt;code&gt;Add timestamps to the Console Output&lt;/code&gt;,这样可以显示时间戳。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118161810411-243644817.png&quot; alt=&quot;7.png&quot;/&gt;&lt;br/&gt;在&lt;code&gt;Build&lt;/code&gt;选择MSBuild的版本，这个版本在全局配置设置过，在这里就可以显示出来。&lt;code&gt;MSBuild Build File&lt;/code&gt;输入需要编译的程序集文件名。在&lt;code&gt;Command Line Arguments&lt;/code&gt;输入编译的参数，我们编译成Realse版本。完成后点击保存即可。具体MSBuild指令不做具体探究，有什么问题直接可以看&lt;a href=&quot;https://docs.microsoft.com/zh-cn/visualstudio/msbuild/msbuild?view=vs-2015&quot;&gt;官方文档&lt;/a&gt;&lt;br/&gt;点击立即构建就会自动编译，完成就会显示一个结果&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118162320039-32482847.png&quot; alt=&quot;8.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118162323329-2079941426.png&quot; alt=&quot;9.png&quot;/&gt;&lt;br/&gt;点击&lt;code&gt;#1&lt;/code&gt;即可调转到该次编译的详细信息中，在左侧点击&lt;code&gt;Console Output&lt;/code&gt;可以看到编译的过程日志。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118162556177-1511408203.png&quot; alt=&quot;10.png&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;构建过程分析&quot;&gt;构建过程分析&lt;/h5&gt;
&lt;ol readability=&quot;7&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;先从SVN获取代码&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;16:21:55 由用户 jake 启动
16:21:55 构建中 在工作空间 D:\Program Files (x86)\Jenkins\workspace\test 中
16:21:55 Updating https://jakepc/svn/JenkinsTest/trunk/JenkinsTest at revision '2019-01-18T16:21:55.792 +0800' --quiet
16:21:55 Using sole credentials test/****** (本地svn服务器) in realm ‘&amp;lt;https://jakepc:443&amp;gt; VisualSVN Server’
16:21:55 At revision 3&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;调用MSBuild命令进行编译，这里会查找我们全局配置的MSBuild.exe执行我们在创建时输入的&lt;code&gt;Command Line Arguments&lt;/code&gt;指令。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;16:21:56 Path To MSBuild.exe: C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe
16:21:56 Executing the command cmd.exe /C &quot; &quot;C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe&quot; /t:Build /p:Configuration=Release JenkinsTest.csproj &quot; &amp;amp;&amp;amp; exit %%ERRORLEVEL%% from D:\Program Files (x86)\Jenkins\workspace\test
16:21:56 [test] $ cmd.exe /C &quot; &quot;C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe&quot; /t:Build /p:Configuration=Release JenkinsTest.csproj &quot; &amp;amp;&amp;amp; exit %%ERRORLEVEL%%&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;编译完成，显示警告，错误和结果&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;...
16:21:57 _CopyAppConfigFile:
16:21:57   正在将文件从“App.config”复制到“bin\Release\JenkinsTest.exe.config”。
16:21:57 CopyFilesToOutputDirectory:
16:21:57   正在将文件从“obj\Release\JenkinsTest.exe”复制到“bin\Release\JenkinsTest.exe”。
16:21:57   JenkinsTest -&amp;gt; D:\Program Files (x86)\Jenkins\workspace\test\bin\Release\JenkinsTest.exe
16:21:57   正在将文件从“obj\Release\JenkinsTest.pdb”复制到“bin\Release\JenkinsTest.pdb”。
16:21:57 已完成生成项目“D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest.csproj”(Build 个目标)的操作。
16:21:57 
16:21:57 已成功生成。
16:21:57     0 个警告
16:21:57     0 个错误
16:21:57 
16:21:57 已用时间 00:00:01.22
16:21:59 Finished: SUCCESS&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;通过以上三步骤，实际和我们自己使用VS编译过程也是一样的。&lt;/p&gt;
&lt;h4 id=&quot;增加依赖dll&quot;&gt;增加依赖dll&lt;/h4&gt;
&lt;p&gt;上面我们创建了一个最简单的项目，并通过jenkins获取并编译成功了，下面我们增加项目复杂性，增加其他依赖项。&lt;/p&gt;
&lt;p&gt;新建一个jenkins.Common的类库。我们把&lt;code&gt;HelloWorld&lt;/code&gt;的字符串通过该类库获取到，然后主项目进行输出。&lt;br/&gt;增加&lt;code&gt;HelloWolrdHelper&lt;/code&gt;类获取字符串&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class HelloWolrdHelper
{
    public static string GetString()
    {
        return &quot;Hello World!&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改原项目&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    Console.WriteLine(HelloWolrdHelper.GetString());
    Console.ReadKey();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118170044093-1424974657.png&quot; alt=&quot;11.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后提交代码到SVN后在jenkins再次构建,结构如下。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;
│  JenkinsTest.sln
│
├─Jenkins.Common
│  │  HelloWolrdHelper.cs
│  │  Jenkins.Common.csproj
│  │
│  └─Properties
│          AssemblyInfo.cs
│
└─JenkinsTest
    │  App.config
    │  JenkinsTest.csproj
    │  Program.cs
    │
    └─Properties
            AssemblyInfo.cs
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;构建一下,编译成功了，MSBuild会根据&lt;code&gt;csproj&lt;/code&gt;文件内的依赖关系编译其他程序集。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118172001279-563631828.png&quot; alt=&quot;15.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;生成启动时间为 2019/1/18 17:16:03。
17:16:03 项目“D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj”在节点 1 上(Build 个目标)。
17:16:03 PrepareForBuild:
17:16:03   正在创建目录“bin\Release\”。
17:16:03   正在创建目录“obj\Release\”。
17:16:03 项目“D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj”(1)正在节点 1 上生成“D:\Program Files (x86)\Jenkins\workspace\test\Jenkins.Common\Jenkins.Common.csproj”(2) (默认目标)。
17:16:03 PrepareForBuild:
17:16:03   正在创建目录“bin\Release\”。
17:16:03   正在创建目录“obj\Release\”。
17:16:03 GenerateTargetFrameworkMonikerAttribute:
17:16:03 正在跳过目标“GenerateTargetFrameworkMonikerAttribute”，因为所有输出文件相对于输入文件而言都是最新的。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;增加nuget依赖&quot;&gt;增加Nuget依赖&lt;/h4&gt;
&lt;p&gt;新建一个&lt;code&gt;Jenkins.Core&lt;/code&gt;项目，并生成Nuget包上传到Nuget服务器上。&lt;/p&gt;
&lt;blockquote readability=&quot;4.3448275862069&quot;&gt;
&lt;p&gt;关于Nuget如何打包可以看我之前的博客&lt;a href=&quot;https://www.cnblogs.com/Jack-Blog/p/7890369.html&quot;&gt;NuGet的使用、部署、搭建私有服务&lt;/a&gt;,这里不做讨论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了简单起见，创建一个和&lt;code&gt;Jenkins.Common&lt;/code&gt;程序集一样的输出HelloWorld的方法，但是为了作为区分，分别略作修改。&lt;br/&gt;&lt;code&gt;Jenkins.Common&lt;/code&gt;的代码&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class HelloWolrdHelper
{
    public static string GetString()
    {
        return &quot;Hello World! Jenkins.Common&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Jenkins.Core&lt;/code&gt;的代码&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class HelloWolrdHelper
{
    public static string GetString()
    {
        return &quot;Hello World! Jenkins.Core&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序结构如下&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;│  JenkinsTest.sln
│
├─.nuget
│      NuGet.Config
│      NuGet.exe
│      NuGet.targets
│
├─Jenkins.Common
│  │  HelloWolrdHelper.cs
│  │  Jenkins.Common.csproj
│  │
│  └─Properties
│          AssemblyInfo.cs
│
├─Jenkins.Core
│  │  HelloWorldHelper.cs
│  │  Jenkins.Core.csproj
│  │  Jenkins.Core.sln
│  │
│  └─Properties
│          AssemblyInfo.cs
│
└─JenkinsTest
   │  App.config
   │  JenkinsTest.csproj
   │  packages.config
   │  Program.cs
   │
   └─Properties
           AssemblyInfo.cs&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意:Jenkins.Core我放到一个单独的项目中打包的。原本我是放到原项目一起。但是Nuget似乎有个bug，导致编译通不过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190119125020388-490316976.png&quot; alt=&quot;20.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为控制台项目更新的时候会向&lt;code&gt;JenkinsTest.csproj&lt;/code&gt;文件写入nuget包还原的指令&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;
 &amp;lt;Target Name=&quot;EnsureNuGetPackageBuildImports&quot; BeforeTargets=&quot;PrepareForBuild&quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
      &amp;lt;ErrorText&amp;gt;This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.&amp;lt;/ErrorText&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
    &amp;lt;Error Condition=&quot;!Exists('$(SolutionDir)\.nuget\NuGet.targets')&quot; Text=&quot;$([System.String]::Format('$(ErrorText)', '$(SolutionDir)\.nuget\NuGet.targets'))&quot; /&amp;gt;
  &amp;lt;/Target&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;而中解决方案的目录是在上一层目录&lt;code&gt;&amp;lt;SolutionDir Condition=&quot;$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'&quot;&amp;gt;..\&amp;lt;/SolutionDir&amp;gt;&lt;/code&gt;,最终编译的时候会校验pacakges是否存在已下载的包。通过路径&lt;code&gt;$(SolutionDir)\packages\&lt;/code&gt;下查找，即&lt;code&gt;..\\packages\&lt;/code&gt;。多了一个\导致存在包仍然报错查找不到，最终编译不过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上传nuget包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118221739125-1221695881.png&quot; alt=&quot;17.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后从Nuget本地nuget服务器上获取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118221746145-781354925.png&quot; alt=&quot;18.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Program&lt;/code&gt;的代码增加新的helloworld输出&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine(HelloWolrdHelper.GetString());
        Console.WriteLine(Jenkins.Core.HelloWolrdHelper.GetString());
        Console.ReadKey();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新编译项目后上传代码到SVN后再次到Jenkins上构建项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190118222248195-1097796083.png&quot; alt=&quot;19.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到构建失败了，去看下具体失败原因。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;正在将文件从“obj\Release\Jenkins.Common.pdb”复制到“bin\Release\Jenkins.Common.pdb”。
12:51:14 已完成生成项目“D:\Program Files (x86)\Jenkins\workspace\test\Jenkins.Common\Jenkins.Common.csproj”(默认目标)的操作。
12:51:14 ResolveAssemblyReferences:
12:51:14   主引用“Jenkins.Core, Version=0.2.0.0, Culture=neutral, processorArchitecture=MSIL”。
12:51:14 C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3245: 未能解析此引用。未能找到程序集“Jenkins.Core, Version=0.2.0.0, Culture=neutral, processorArchitecture=MSIL”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。 [D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj]
12:51:14           用于 SearchPath“{HintPathFromItem}”。
12:51:14           已考虑使用“..\packages\Jenkins.Core.0.2.0\lib\net45\Jenkins.Core.dll”，但它不存在。
12:51:14           用于 SearchPath“{TargetFrameworkDirectory}”。
12:51:14           已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\Jenkins.Core.winmd”，但它不存在。
12:51:14           已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\Jenkins.Core.dll”，但它不存在
...
12:51:14 Program.cs(15,22): error CS0234: The type or namespace name 'Core' does not exist in the namespace 'Jenkins' (are you missing an assembly reference?) [D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj]
12:51:14 已完成生成项目“D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj”(Build 个目标)的操作 - 失败。
12:51:15 
12:51:15 生成失败。
12:51:15 
12:51:15 “D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj”(Build 目标) (1) -&amp;gt;
12:51:15 (ResolveAssemblyReferences 目标) -&amp;gt; 
12:51:15   C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3245: 未能解析此引用。未能找到程序集“Jenkins.Core, Version=0.2.0.0, Culture=neutral, processorArchitecture=MSIL”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。 [D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj]
12:51:15 
12:51:15 
12:51:15 “D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj”(Build 目标) (1) -&amp;gt;
12:51:15 (CoreCompile 目标) -&amp;gt; 
12:51:15   Program.cs(15,22): error CS0234: The type or namespace name 'Core' does not exist in the namespace 'Jenkins' (are you missing an assembly reference?) [D:\Program Files (x86)\Jenkins\workspace\test\JenkinsTest\JenkinsTest.csproj]
12:51:15 
12:51:15     1 个警告
12:51:15     1 个错误
12:51:15 
12:51:15 已用时间 00:00:01.43
12:51:15 Build step 'Build a Visual Studio project or solution using MSBuild' marked build as failure
12:51:16 Finished: FAILURE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一开始会去&lt;code&gt;..\packages\Jenkins.Core.0.2.0\lib\net45\Jenkins.Core.dll&lt;/code&gt;获取，但是因为没有包，后面就去遍历其他目录获取，最终都没有找到包导致编译失败。因此我们需要使用nuget，在MSBuild编译之前将包下载下来。&lt;/p&gt;
&lt;p&gt;为了方便我将nuget一同上传到SVN上，SVN的程序目录如下&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;│  JenkinsTest.sln
│
├─.nuget
│      NuGet.Config
│      NuGet.exe
│      NuGet.targets
│
├─Jenkins.Common
│  │  HelloWolrdHelper.cs
│  │  Jenkins.Common.csproj
│  │
│  └─Properties
│          AssemblyInfo.cs
│
└─JenkinsTest
   │  App.config
   │  JenkinsTest.csproj
   │  packages.config
   │  Program.cs
   └─Properties
           AssemblyInfo.cs
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;由于Jenkins.Core可以理解为第三方依赖，不是和JenkinsTest放一起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Build配置中新增一项批处理命令，执行nuget包还原。如图拖动到编译之前。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/580757/201901/580757-20190119132214914-556429878.png&quot; alt=&quot;21.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据我们目录结构调用&lt;code&gt;&quot;.nuget/nuget.exe&quot; restore JenkinsTest.sln&lt;/code&gt;命令使用nuget进行包还原。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;由于.nuget目录带有.因此需要用双引号引起来执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再次编译仍然失败了。可以通过日志看到已经在编译前已经执行了脚本，但是没有从我们想要的地方获取包。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;
13:26:47 No changes for https://jakepc/svn/JenkinsTest/trunk/JenkinsTest since the previous build
13:26:47 [test] $ cmd /c call C:\WINDOWS\TEMP\jenkins8156278399083484284.bat
13:26:47 
13:26:47 D:\Program Files (x86)\Jenkins\workspace\test&amp;gt;&quot;.nuget/nuget.exe&quot; restore JenkinsTest.sln 
13:26:47 MSBuild auto-detection: using msbuild version '15.9.21.664' from 'D:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\bin'.
13:26:48 Restoring NuGet package Jenkins.Core.0.2.0.
13:26:49   GET https://api.nuget.org/v3-flatcontainer/jenkins.core/0.2.0/jenkins.core.0.2.0.nupkg
13:26:49   NotFound https://api.nuget.org/v3-flatcontainer/jenkins.core/0.2.0/jenkins.core.0.2.0.nupkg 191ms
13:26:49 警告: Unable to find version '0.2.0' of package 'Jenkins.Core'.
13:26:49   C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\: Package 'Jenkins.Core.0.2.0' is not found on source 'C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\'.
13:26:49   https://api.nuget.org/v3/index.json: Package 'Jenkins.Core.0.2.0' is not found on source 'https://api.nuget.org/v3/index.json'.
13:26:49 
13:26:49 警告: Unable to find version '0.2.0' of package 'Jenkins.Core'.
13:26:49   C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\: Package 'Jenkins.Core.0.2.0' is not found on source 'C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\'.
13:26:49   https://api.nuget.org/v3/index.json: Package 'Jenkins.Core.0.2.0' is not found on source 'https://api.nuget.org/v3/index.json'.
13:26:49 
13:26:49 
13:26:49 Errors in packages.config projects
13:26:49     Unable to find version '0.2.0' of package 'Jenkins.Core'.
13:26:49       C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\: Package 'Jenkins.Core.0.2.0' is not found on source 'C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\'.
13:26:49       https://api.nuget.org/v3/index.json: Package 'Jenkins.Core.0.2.0' is not found on source 'https://api.nuget.org/v3/index.json'.
13:26:49 
13:26:49 NuGet Config files used:
13:26:49     D:\Program Files (x86)\Jenkins\workspace\test\.nuget\NuGet.Config
13:26:49     C:\WINDOWS\system32\config\systemprofile\AppData\Roaming\NuGet\NuGet.Config
13:26:49     C:\Program Files (x86)\NuGet\Config\Microsoft.VisualStudio.Offline.config
13:26:49 
13:26:49 Feeds used:
13:26:49     https://api.nuget.org/v3/index.json
13:26:49     C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\
13:26:49 
13:26:49 D:\Program Files (x86)\Jenkins\workspace\test&amp;gt;exit 1 
13:26:49 Build step '执行 Windows 批处理命令' marked build as failure
13:26:50 Finished: FAILURE&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;指定nuget包下载源地址&quot;&gt;指定nuget包下载源地址。&lt;/h5&gt;
&lt;p&gt;找到Nuget.exe的配置Nuget.Config,在configuration节点内增加packageSources节点。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;
  &amp;lt;packageSources&amp;gt;
    &amp;lt;add key=&quot;Jake Package source&quot; value=&quot;http://127.0.0.1:10080/nuget&quot; /&amp;gt;
  &amp;lt;/packageSources&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次编译,终于编译成功了,日志如下。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;13:38:08 No changes for https://jakepc/svn/JenkinsTest/trunk/JenkinsTest since the previous build
13:38:08 [test] $ cmd /c call C:\WINDOWS\TEMP\jenkins5326599668058283263.bat
13:38:08 
13:38:08 D:\Program Files (x86)\Jenkins\workspace\test&amp;gt;&quot;.nuget/nuget.exe&quot; restore JenkinsTest.sln 
13:38:08 MSBuild auto-detection: using msbuild version '15.9.21.664' from 'D:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\bin'.
13:38:09 Restoring NuGet package Jenkins.Core.0.2.0.
13:38:09 Adding package 'Jenkins.Core.0.2.0' to folder 'D:\Program Files (x86)\Jenkins\workspace\test\packages'
13:38:09 Added package 'Jenkins.Core.0.2.0' to folder 'D:\Program Files (x86)\Jenkins\workspace\test\packages'
13:38:09 
13:38:09 NuGet Config files used:
13:38:09     D:\Program Files (x86)\Jenkins\workspace\test\.nuget\NuGet.Config
13:38:09     C:\WINDOWS\system32\config\systemprofile\AppData\Roaming\NuGet\NuGet.Config
13:38:09     C:\Program Files (x86)\NuGet\Config\Microsoft.VisualStudio.Offline.config
13:38:09 
13:38:09 Feeds used:
13:38:09     C:\WINDOWS\system32\config\systemprofile\.nuget\packages\
13:38:09     http://127.0.0.1:10080/nuget
13:38:09     https://api.nuget.org/v3/index.json
13:38:09     C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\
13:38:09 
13:38:09 Installed:
13:38:09     1 package(s) to packages.config projects
13:38:09 
13:38:09 D:\Program Files (x86)\Jenkins\workspace\test&amp;gt;exit 0 
13:38:09 Path To MSBuild.exe: C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe
13:38:09 Executing the command cmd.exe /C &quot; &quot;C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe&quot; /t:Build /p:Configuration=Release JenkinsTest/JenkinsTest.csproj &quot; &amp;amp;&amp;amp; exit %%ERRORLEVEL%% from D:\Program Files (x86)\Jenkins\workspace\test
13:38:09 [test] $ cmd.exe /C &quot; &quot;C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe&quot; /t:Build /p:Configuration=Release JenkinsTest/JenkinsTest.csproj &quot; &amp;amp;&amp;amp; exit %%ERRORLEVEL%%&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;通过N次尝试，最终完成了.Net开发下Jenkins进行持续集成。总结起来如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;安装Java环境，由于我本地已有java环境，因此该步骤跳过。&lt;/li&gt;
&lt;li&gt;安装MSBuild，由于我本地已安装过VS，因此该步骤跳过。&lt;/li&gt;
&lt;li&gt;下载Nuget,由于我本地已安装VS，同时已安装过Nuget，因此该步骤跳过。&lt;/li&gt;
&lt;li&gt;安装Jenkins，并安装MSbuild插件。&lt;/li&gt;
&lt;li&gt;修改Jenkins的MSBuild插件的配置。&lt;/li&gt;
&lt;li&gt;新建一个工程，修改配置
&lt;ul&gt;&lt;li&gt;选择源码管理，我本地是SVN，因此选择SVN(增加登录凭据)&lt;/li&gt;
&lt;li&gt;增加windows批处理脚本用于Nuget下载库包。（在Nuget.Config中增加自己的包服务地址）&lt;/li&gt;
&lt;li&gt;增加MSBuild编译VS的项目&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;通过以上步骤，基本就完成了自动编译的功能。但是光编译还是不够的，最终还要完成自动跑单元测试，下一篇博客再进行研究。&lt;/p&gt;
&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/workky/p/6061934.html&quot;&gt;Jenkins部署.net自动化构建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/huhubun/p/6345077.html&quot;&gt;为 Jenkins 配置 .NET 持续集成环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sater/p/5345536.html&quot;&gt;浅谈.net jenkins svn下自动化集成环境安装 搭建 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/liyuanhong/p/6548925.html&quot;&gt;jenkins持续集成原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/tylerzhou/p/9060930.html&quot;&gt;Jenkins结合.net平台工具之Nuget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25140081/make-jenkins-aware-of-custom-nuget-package-source&quot;&gt;Make Jenkins aware of custom NuGet Package Source&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 19 Jan 2019 06:18:00 +0000</pubDate>
<dc:creator>杰哥很忙</dc:creator>
<og:description>本文探究在.net环境下的持续集成环境研究并使用。完成2项任务：1. 搭建jenkins任务完成自动编译。2. 自动从nuget上获取需要的包。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jack-Blog/p/10291612.html</dc:identifier>
</item>
<item>
<title>诡异的druid链接池链接断开故障经验总结 - 王清培</title>
<link>http://www.cnblogs.com/wangiqngpei557/p/10291606.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangiqngpei557/p/10291606.html</guid>
<description>&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;症状&lt;/li&gt;
&lt;li&gt;排查&lt;/li&gt;
&lt;li&gt;修复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近在陆续做机房升级相关工作，配合DBA对产线数据库链接方式做个调整，将原来直接链接读库的地址切换到统一的读负载均衡的代理 &lt;strong&gt;haproxy&lt;/strong&gt; 上，方便机柜和服务器的搬迁。&lt;br/&gt;切换之后线上时不时的会发生 &lt;strong&gt;discard connection&lt;/strong&gt; 错误，导致程序报 &lt;strong&gt;500&lt;/strong&gt; 错误，但不是每次都必现的。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;开发框架: spring boot+mybatis+druid+shardingJDBC&lt;br/&gt;网络架构:&lt;br/&gt;appserver-&amp;gt;mysql(master) 写&lt;br/&gt;appserver-&amp;gt;haproxy-&amp;gt;mysql(slave)/n 读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一反应肯定是因为这次的读库地址的变动引起的问题，觉得问题应该是 &lt;strong&gt;druid&lt;/strong&gt; 链接池中的 &lt;strong&gt;connection&lt;/strong&gt; 保活策略没起作用，只要做下配置修改应该就可以了。结果这个问题让我们排查了好几天，我们竟然踩到了千年难遇的深坑。&lt;/p&gt;
&lt;p&gt;这个问题排查的很坎坷，一次次的吐血，最终我们定位到问题并且优雅的修复了，我们一起来体验下这个一次一次让你绝望一次一次打脸的过程。&lt;/p&gt;

&lt;p&gt;先说故障症状，经常出现如下错误：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;discard connection&lt;br/&gt;com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;The last packet successfully received from the server was 72,557 milliseconds ago. The last packet sent successfully to the server was 0 milliseconds ago.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据错误日志初步判断肯定是与 &lt;strong&gt;db&lt;/strong&gt; 之间的链接已经断开，尝试使用了一个已经断开的链接才会引起这个错误发生。但是根据我们对 &lt;strong&gt;druid&lt;/strong&gt; 了解，&lt;strong&gt;druid&lt;/strong&gt; 有链接检查功能，按理不会拿到一个无效链接才对，带着这个线索我们上路了。&lt;/p&gt;

&lt;p&gt;为了准确的知道 &lt;strong&gt;db&lt;/strong&gt; 的链接的存活时间，了解到 &lt;strong&gt;haproxy&lt;/strong&gt; 对转发的 &lt;strong&gt;db tcp&lt;/strong&gt; 链接空闲时间在 &lt;strong&gt;1m&lt;/strong&gt; 之内，超过 &lt;strong&gt;1m&lt;/strong&gt; 不活动就会被关掉。也就说我们与 &lt;strong&gt;db&lt;/strong&gt; 之间的原来的长链接在 &lt;strong&gt;1m&lt;/strong&gt; 之内会被断开。我们先不管这个时间设置的是否符合所有的大并发场景，至少在 &lt;strong&gt;druid&lt;/strong&gt; 的链接池里会有有效链接检查，应该不会拿到无效链接才对，我们做了配置调整。&lt;/p&gt;
&lt;p&gt;我们看下 &lt;strong&gt;druid&lt;/strong&gt; 跟链接时间相关的配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;datasource.druid.validationQuery=SELECT 1
datasource.druid.validationQueryTimeout=2000
datasource.druid.testWhileIdle=true
datasource.druid.minEvictableIdleTimeMillis=100000
datasource.druid.timeBetweenEvictionRunsMillis=20000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置的每项的意思这里就不解释了。&lt;br/&gt;我们启用了 &lt;strong&gt;testWhileIdle&lt;/strong&gt; 配置，让每次拿取链接的时候发起检查。根据 &lt;strong&gt;timeBetweenEvictionRunsMillis&lt;/strong&gt; 的配置只有大于这个时间 &lt;strong&gt;druid&lt;/strong&gt; 才会发起检查，所以可能的场景是拿到一个即将过期的链接，根据这个线索我们调整这个时间为 &lt;strong&gt;20000ms&lt;/strong&gt;，也就是超过 &lt;strong&gt;20s&lt;/strong&gt; 会检查当前拿取的链接确定是否有效，检查的方式应该是使用 &lt;strong&gt;validationQuery&lt;/strong&gt; 配置的 &lt;strong&gt;sql&lt;/strong&gt; 语句才对，但是发现我们并找不到任何有关于 &lt;strong&gt;SELECT 1&lt;/strong&gt; 的痕迹。&lt;/p&gt;
&lt;h2 id=&quot;为什么你死活找不到-select-1&quot;&gt;为什么你死活找不到 SELECT 1&lt;/h2&gt;
&lt;p&gt;首先要搞清楚 &lt;strong&gt;validationQuery&lt;/strong&gt; 为什么没起作用，带着这个疑问开始 &lt;strong&gt;debug druid&lt;/strong&gt; 源码。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (isTestWhileIdle()) {
                    final long currentTimeMillis = System.currentTimeMillis();
                    final long lastActiveTimeMillis = poolableConnection.getConnectionHolder().getLastActiveTimeMillis();
                    final long idleMillis = currentTimeMillis - lastActiveTimeMillis;
                    long timeBetweenEvictionRunsMillis = this.getTimeBetweenEvictionRunsMillis();
                    if (timeBetweenEvictionRunsMillis &amp;lt;= 0) {
                        timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
                    }

                    if (idleMillis &amp;gt;= timeBetweenEvictionRunsMillis) {
                        boolean validate = testConnectionInternal(poolableConnection.getConnection());
                        if (!validate) {
                            if (LOG.isDebugEnabled()) {
                                LOG.debug(&quot;skip not validate connection.&quot;);
                            }

                            discardConnection(realConnection);
                            continue;
                        }
                    }
                }
            }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;闲置时间肯定会有大于 &lt;strong&gt;timeBetweenEvictionRunsMillis&lt;/strong&gt; 时间的，会发起 &lt;strong&gt;testConnectionInternal&lt;/strong&gt; 方法检查。我们继续跟进去看，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected boolean testConnectionInternal(DruidConnectionHolder holder, Connection conn) {
   boolean valid = validConnectionChecker.isValidConnection(conn, validationQuery, validationQueryTimeout);
   &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;内部会使用 &lt;strong&gt;validConnectionChecker&lt;/strong&gt; 检查对象发起检查。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean isValidConnection(Connection conn, String validateQuery, int validationQueryTimeout) throws Exception {
        if (conn.isClosed()) {
            return false;
        }

        if (usePingMethod) {
            if (conn instanceof DruidPooledConnection) {
                conn = ((DruidPooledConnection) conn).getConnection();
            }

            if (conn instanceof ConnectionProxy) {
                conn = ((ConnectionProxy) conn).getRawObject();
            }

            if (clazz.isAssignableFrom(conn.getClass())) {
                if (validationQueryTimeout &amp;lt; 0) {
                    validationQueryTimeout = DEFAULT_VALIDATION_QUERY_TIMEOUT;
                }

                try {
                    ping.invoke(conn, true, validationQueryTimeout * 1000);
                } catch (InvocationTargetException e) {
                    Throwable cause = e.getCause();
                    if (cause instanceof SQLException) {
                        throw (SQLException) cause;
                    }
                    throw e;
                }
                return true;
            }
        }

        String query = validateQuery;
        if (validateQuery == null || validateQuery.isEmpty()) {
            query = DEFAULT_VALIDATION_QUERY;
        }

        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = conn.createStatement();
            if (validationQueryTimeout &amp;gt; 0) {
                stmt.setQueryTimeout(validationQueryTimeout);
            }
            rs = stmt.executeQuery(query);
            return true;
        } finally {
            JdbcUtils.close(rs);
            JdbcUtils.close(stmt);
        }

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;debug 这里才发现，&lt;strong&gt;druid&lt;/strong&gt; 默认采用的是 &lt;strong&gt;mysql.ping&lt;/strong&gt; 来做链接有效性检查。&lt;/p&gt;
&lt;h2 id=&quot;druid-默认采用msyql.ping-协议检查&quot;&gt;druid 默认采用msyql.ping 协议检查&lt;/h2&gt;
&lt;p&gt;那是不是用 &lt;strong&gt;msyql.ping&lt;/strong&gt; 协议并不会让 &lt;strong&gt;mysql&lt;/strong&gt; 重新滑动 &lt;strong&gt;session&lt;/strong&gt; 闲置时间，带着这个问题打开 &lt;strong&gt;information_schema.processlist&lt;/strong&gt; 进程列表查看会不会刷新会话时间，通过 debug发现是会刷新时间的，说明没有问题，这条线索算是断了。&lt;/p&gt;
&lt;h2 id=&quot;haproxy-tiemout主动close上下游链接&quot;&gt;haproxy tiemout主动close上下游链接&lt;/h2&gt;
&lt;p&gt;调整方向，开始怀疑是不是 &lt;strong&gt;haproxy&lt;/strong&gt; 的一些策略导致链接失效，开始初步怀疑 &lt;strong&gt;haproxy&lt;/strong&gt; 的轮训转发后端链接是不是有相关会话保持方式，是不是我们配置有误导致 &lt;strong&gt;haproxy&lt;/strong&gt; 的链接和 &lt;strong&gt;mysql&lt;/strong&gt; 链接篡位了。&lt;/p&gt;
&lt;p&gt;当然这个猜想有点夸张，但是没办法，技术人员就要有怀疑一切的态度。&lt;/p&gt;
&lt;p&gt;为了还原产线的网络路线，我在本地搭了一个 &lt;strong&gt;haproxy&lt;/strong&gt;，了解下他的工作原理和配置，图方便我就用了yum顺手装了一个，版本是 &lt;strong&gt;HA-Proxy version 1.5.18&lt;/strong&gt; 不知道是我本地环境问题还是这个版本的 &lt;strong&gt;bug&lt;/strong&gt;，我们配置的 &lt;strong&gt;mode tcp&lt;/strong&gt; 活动检查一直不生效。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;listen service 127.0.0.1:60020
  mode tcp
  balance roundrobin
  option tcplog
  server server1 192.168.36.66:3306 check inter 2000 rise 2 fall 3
  server server2 192.168.36.66:3306 check inter 2000 rise 2 fall 3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于 &lt;strong&gt;haproxy&lt;/strong&gt; 活动检查一直不通过，所以无法转发我的链接，搞了半天我只能手动装了一个低版本的 &lt;strong&gt;haproxy HA-Proxy version 1.4.14&lt;/strong&gt; 。&lt;br/&gt;完整的配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;defaults
        mode tcp               
        retries 3              
        option redispatch      
        option abortonclose    
        maxconn 32000          
        timeout connect 2s 
        timeout client 5m 
        timeout server 5m 


listen test1
        bind 0.0.0.0:60000
        mode tcp
        balance roundrobin
        server s1 192.168.36.66:3306 weight 1 maxconn 10000 check inter 10s
        server s2 192.168.36.66:3306 weight 1 maxconn 10000 check inter 10s
        server s3 192.168.36.66:3306 weight 1 maxconn 10000 check inter 10s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.4&lt;/strong&gt; 的版本顺利完成活动检查。&lt;br/&gt;我使用 &lt;strong&gt;haproxy&lt;/strong&gt; 进行debug，调试下来也都没有问题，也翻了下 &lt;strong&gt;haproxy&lt;/strong&gt; 如何转发链接的，内部通过会话的方式保持两个链接的关系，如果是 &lt;strong&gt;tcp&lt;/strong&gt; 长链接应该不会出现什么问题。&lt;strong&gt;haproxy&lt;/strong&gt; 在 &lt;strong&gt;http&lt;/strong&gt; 模式下有会话保持方式，&lt;strong&gt;tcp&lt;/strong&gt; 应该是直接捆绑的方式，一旦到 &lt;strong&gt;timeout&lt;/strong&gt; 时间会主动 &lt;strong&gt;close&lt;/strong&gt; 和 &lt;strong&gt;mysql&lt;/strong&gt; 的链接，而且没有出现篡位的问题。到这里线索又断了。&lt;/p&gt;
&lt;h2 id=&quot;自定义-validconnectionchecker-埋点日志&quot;&gt;自定义 ValidConnectionChecker 埋点日志&lt;/h2&gt;
&lt;p&gt;没有办法，只能试着埋点 &lt;strong&gt;druid&lt;/strong&gt; 的检查日志，排查内部上一次的 check和报错之间的时间差和 &lt;strong&gt;connectionId&lt;/strong&gt; 是不是一致的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class MySqlValidConnectionCheckerDebug extends MySqlValidConnectionChecker {

    @Override
    public boolean isValidConnection(Connection conn, String validateQuery, int validationQueryTimeout) {
        
            Long connId = 0L;
            try {
                Field connField = ConnectionImpl.class.getDeclaredField(&quot;connectionId&quot;);
                connField.setAccessible(true);
                connId = (Long) connField.get(((ConnectionProxyImpl) conn).getConnectionRaw());
            } catch (Exception e) {
                log.error(&quot;valid connection error&quot;, e);
            } finally {
                log.info(&quot;valid connection ok. conn:&quot; + connId);
            }

            return true;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了拿到 &lt;strong&gt;connectionId&lt;/strong&gt; 只能反射获取，在本地debug下没问题，能正常拿到 &lt;strong&gt;connectionId&lt;/strong&gt;，但是发到验证环境进行验证的时候报错了，觉得奇怪，仔细看了下原来开发环境的配置和验证和生产的不一样，开发环境没有走读写分离。&lt;/p&gt;
&lt;p&gt;验证和生产都是使用了 &lt;strong&gt;mysql&lt;/strong&gt; 的 &lt;strong&gt;replication&lt;/strong&gt; 的机制，所以导致我反射获取的代码报错。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;datasource.druid.url=jdbc:mysql:replication&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过debug发现，原来 __druid__的 &lt;strong&gt;connection&lt;/strong&gt; 是 &lt;strong&gt;JDBC4Connection&lt;/strong&gt; ，变成了 &lt;strong&gt;ReplicationConnection&lt;/strong&gt; ，而且里面包装了两个 &lt;strong&gt;connection&lt;/strong&gt; ，一个 &lt;strong&gt;masterconnection&lt;/strong&gt; ，一个 &lt;strong&gt;slaveconnection&lt;/strong&gt; ，似乎问题有点浮现了。&lt;/p&gt;
&lt;p&gt;通过debug发现 &lt;strong&gt;druid&lt;/strong&gt; 的检查还是会正常走到，当走到 &lt;strong&gt;ReplicationConnection&lt;/strong&gt; 内部的时候 &lt;strong&gt;ReplicationConnection&lt;/strong&gt; 有一个 &lt;strong&gt;currentConnection&lt;/strong&gt; ，这个链接是会在 &lt;strong&gt;masterConnection&lt;/strong&gt; 和 &lt;strong&gt;slaveConnection&lt;/strong&gt; 之间切换，切换的依据是 &lt;strong&gt;readOnly&lt;/strong&gt; 参数。&lt;/p&gt;
&lt;p&gt;在检查的时候由于 &lt;strong&gt;druid&lt;/strong&gt; 并不感知上层的参数，&lt;strong&gt;readOnly&lt;/strong&gt; 也就不会设置。所以走的是 &lt;strong&gt;masterConnection&lt;/strong&gt; ，但是在程序里用的时候通过 &lt;strong&gt;spring&lt;/strong&gt; 的 &lt;strong&gt;TransactionManager&lt;/strong&gt; 将 &lt;strong&gt;readOnly&lt;/strong&gt; 传播到了 &lt;strong&gt;ShardingJDBC&lt;/strong&gt; ， &lt;strong&gt;ShardingJDBC&lt;/strong&gt; 在设置到 &lt;strong&gt;ReplicationConnection&lt;/strong&gt; 上，最后导致真正在使用的时候其实使用的是 &lt;strong&gt;slaveConnection&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;找到这个问题之后去 &lt;strong&gt;druid github Issues&lt;/strong&gt; 搜索了下果然有人提过这个问题，在高版本的 &lt;strong&gt;druid&lt;/strong&gt; 中已经修复这个问题了。&lt;/p&gt;

&lt;p&gt;修复这个问题有两个方法，第一个方法，建议升级 druid，里面已经有 &lt;strong&gt;MySqlReplicationValidConnectionChecker&lt;/strong&gt; 检查器专门用来解决这个问题。第二个方法就是自己实现 &lt;strong&gt;ValidConnectionChecker&lt;/strong&gt; 检查器，但是会有在将来出现bug的可能性。&lt;/p&gt;
&lt;p&gt;由于时间关系文章只讲了主要的排查路线，事实上我们陆续花了一周多时间，再加上周末连续趴上十几个小时才找到这根本问题。&lt;/p&gt;
&lt;p&gt;这个问题之所以难定位的原因主要是牵扯的东西太多，框架层面、网络链接层面、mysql服务器层面，haproxy代理等等，当然其中也绕了很多弯路。。&lt;/p&gt;
&lt;p&gt;下面分享在这个整个排查过程中的一些技术收获。&lt;/p&gt;
&lt;h2 id=&quot;相关技术问题&quot;&gt;相关技术问题&lt;/h2&gt;
&lt;p&gt;1.mysqlConenction提供了ping方法用来做活动检查，默认MySqlValidConnectionChecker使用的是pinginternal。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ping = clazz.getMethod(&quot;pingInternal&quot;, boolean.class, int.class);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.低版本的druid不支持自定义 ValidConnectionChecker 来做个性化的检查。&lt;/p&gt;
&lt;p&gt;3.druid 的test方法使用注意事项，testOnBorrow 在获取链接的时候进行检查，与testWhileIdle是护持关系。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (isTestOnBorrow()) {
            } else {
                if (isTestWhileIdle()) {&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.kill mysql processlist 进程会话到链接端tcp状态有延迟，这是tcp的四次断开延迟。&lt;/p&gt;
&lt;p&gt;4.haproxy 1.5.18 版本 mode tcp check不执行，健康检查设置无效。&lt;/p&gt;
&lt;p&gt;5.mysql replication connection master/slave切换逻辑需要注意，会不会跟上下油的链接池组合使用出现bug，尤其是分库不表、读写分离、自定义分片。&lt;/p&gt;
&lt;p&gt;6.排查mysql服务器的问题时，打开各种日志，操作日志，binlog日志。&lt;/p&gt;
&lt;p&gt;7.springtransactionmanagenent 事务传播特性会影响下游数据源的选择，setreadonly、setautocommit。&lt;/p&gt;
&lt;p&gt;8.低版本的 druid MySqlValidConnectionChecker 永远执行不到 ReplicationConnection ping 方法。&lt;/p&gt;
&lt;p&gt;作者：王清培(沪江网资深架构师)&lt;/p&gt;
</description>
<pubDate>Sat, 19 Jan 2019 06:16:00 +0000</pubDate>
<dc:creator>王清培</dc:creator>
<og:description>最近在陆续做机房升级相关工作，配合DBA对产线数据库链接方式做个调整，将原来直接链接读库的地址切换到统一的读负载均衡的代理 haproxy 上，方便机柜和服务器的搬迁。 切换之后线上时不时的会发生</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangiqngpei557/p/10291606.html</dc:identifier>
</item>
<item>
<title>Salesforce Lightning开发学习（四）重写新建/更新按钮 - Ricardo.M.Lu</title>
<link>http://www.cnblogs.com/luqinghua/p/10291452.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luqinghua/p/10291452.html</guid>
<description>&lt;p&gt;重写新建/更新按钮的原因是因为项目需要用户在新建数据时从接口对数据进行校验，保证数据的有效性，同时获取接口返回的部分数据完成信息填充，而Sales force的trigger仅支持@future方法异步调用接口，不能实时完成数据校验&lt;/p&gt;
&lt;p&gt;那么重写新建/更新按钮要面临的几个核心问题：&lt;/p&gt;
&lt;p&gt;1、lightning暂时不支持lookup字段，如果重写可能要自定义组件&lt;/p&gt;
&lt;p&gt;2、lightning新建按钮，怎么重写在项目下新建时自动填充的父对象&lt;/p&gt;
&lt;p&gt;点击对象管理器，新建对象项目（Test_Project），部门（Test_Department）&lt;/p&gt;
&lt;p&gt;以下是部门（Test_Department）的字段表&lt;/p&gt;
&lt;table border=&quot;1&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;标签&lt;/td&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;数据类型&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;部门名称&lt;/td&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;文本（80）&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;项目&lt;/td&gt;
&lt;td&gt;Project_Dep__c&lt;/td&gt;
&lt;td&gt;查找（项目）&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;角色&lt;/td&gt;
&lt;td&gt;Role__c&lt;/td&gt;
&lt;td&gt;选项列表&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;项目经理&lt;/p&gt;
&lt;p&gt;项目顾问&lt;/p&gt;
&lt;p&gt;项目开发&lt;/p&gt;
&lt;p&gt;项目测试&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;邮箱&lt;/td&gt;
&lt;td&gt;Email__c&lt;/td&gt;
&lt;td&gt;电子邮件&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;报表权限&lt;/td&gt;
&lt;td&gt;Report_Access__c&lt;/td&gt;
&lt;td&gt;复选框&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;描述&lt;/td&gt;
&lt;td&gt;Remarks__c&lt;/td&gt;
&lt;td&gt;文本区（255）&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; 先创建一个lightning组件Test_NewDepartment&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;aura:component implements=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lightning:actionOverride,&lt;br/&gt;　　　　　　　　　　　　　　　　 flexipage:availableForRecordHome,&lt;br/&gt;　　　　　　　　　　　　　　　　 force:hasRecordId,&lt;br/&gt;　　　　　　　　　　　　　　　　 flexipage:availableForAllPageTypes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                access&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                description&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Test_NewDepartment&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;/aura:component&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组件继承的几个接口说明下&lt;/p&gt;
&lt;pre&gt;
lightning:actionOverride：继承该接口才能覆盖标准按钮
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114778/201901/1114778-20190119121029024-1686328556.png&quot; alt=&quot;&quot; width=&quot;577&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
force:hasRecordId：继承该接口才能通过“v.recordId&quot;获取当前页面的记录ID
&lt;/pre&gt;
&lt;p&gt;然后来处理第一个问题，lightning暂时不支持lookup字段的问题&lt;/p&gt;
&lt;p&gt;经过了解，lightning提供了一个&amp;lt;lightning:recordEditForm&amp;gt;组件，通过&amp;lt;lightning:inputField&amp;gt;可以操作查找字段.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;aura:component implements=&quot;lightning:actionOverride,&lt;br/&gt;　　　　　　　　　　　　　　　　 flexipage:availableForRecordHome,&lt;br/&gt;　　　　　　　　　　　　　　　　 force:hasRecordId,&lt;br/&gt;　　　　　　　　　　　　　　　　 flexipage:availableForAllPageTypes&quot;&lt;/span&gt;&lt;span&gt; 
                access&lt;/span&gt;&lt;span&gt;=&quot;global&quot;&lt;/span&gt;&lt;span&gt; 
                description&lt;/span&gt;&lt;span&gt;=&quot;Test_NewDepartment&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;　　&amp;lt;!-- 部门 --&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;simpleDepartmentRecord&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Test_Department__c&quot;&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;=&quot;{'SobjectType':'Test_Department__c'}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
　　&amp;lt;!-- 错误消息--&amp;gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;recordError&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;br/&gt;　　&amp;lt;!-- 标记按钮能否点击--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;flag&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Boolean&quot;&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;editDialog&quot;&lt;/span&gt;&lt;span&gt; role&lt;/span&gt;&lt;span&gt;=&quot;dialog&quot;&lt;/span&gt;&lt;span&gt; tabindex&lt;/span&gt;&lt;span&gt;=&quot;-1&quot;&lt;/span&gt;&lt;span&gt; aria-labelledby&lt;/span&gt;&lt;span&gt;=&quot;header43&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal slds-fade-in-open&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal__container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal__header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-text-heading--medium&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{!(v.recordId == null?'新增':'更新') + '部门'}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:messages &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:recordEditForm &lt;/span&gt;&lt;span&gt;objectApiName&lt;/span&gt;&lt;span&gt;=&quot;Test_Department__c&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal__content slds-p-around--medium slds-wrap&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:input    &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;departmentId&quot;&lt;/span&gt;&lt;span&gt; 
                                        label&lt;/span&gt;&lt;span&gt;=&quot;用户名&quot;&lt;/span&gt;&lt;span&gt; 
                                        name&lt;/span&gt;&lt;span&gt;=&quot;userName&quot;&lt;/span&gt;&lt;span&gt; 
                                        placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入完整的用户名&quot;&lt;/span&gt;&lt;span&gt;
                                        required&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;        
                                        value&lt;/span&gt;&lt;span&gt;=&quot;{!v.simpleDepartmentRecord.Name}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:inputField   &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;customRequired&quot;&lt;/span&gt;&lt;span&gt; 
                                            aura:id&lt;/span&gt;&lt;span&gt;=&quot;roleId&quot;&lt;/span&gt;&lt;span&gt; 
                                            fieldName&lt;/span&gt;&lt;span&gt;=&quot;Role__c&quot;&lt;/span&gt;&lt;span&gt; 
                                            value&lt;/span&gt;&lt;span&gt;=&quot;{!v.simpleDepartmentRecord.Role__c}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:inputField   &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;customRequired&quot;&lt;/span&gt;&lt;span&gt; 
                                            fieldName&lt;/span&gt;&lt;span&gt;=&quot;Email__c&quot;&lt;/span&gt;&lt;span&gt; 
                                            value&lt;/span&gt;&lt;span&gt;=&quot;{!v.simpleDepartmentRecord.Email__c}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:inputField   &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;customRequired&quot;&lt;/span&gt;&lt;span&gt; 
                                            aura:id&lt;/span&gt;&lt;span&gt;=&quot;projectLookupId&quot;&lt;/span&gt;&lt;span&gt; 
                                            fieldName&lt;/span&gt;&lt;span&gt;=&quot;Project_Dep__c&quot;&lt;/span&gt;&lt;span&gt; 
                                            value&lt;/span&gt;&lt;span&gt;=&quot;{!v.simpleDepartmentRecord.Project_Dep__c}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:inputField   &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;customRequired&quot;&lt;/span&gt;&lt;span&gt; 
                                            aura:id&lt;/span&gt;&lt;span&gt;=&quot;reportId&quot;&lt;/span&gt;&lt;span&gt; 
                                            fieldName&lt;/span&gt;&lt;span&gt;=&quot;Report_Access__c&quot;&lt;/span&gt;&lt;span&gt;
                                            value&lt;/span&gt;&lt;span&gt;=&quot;{!v.simpleDepartmentRecord.Report_Access__c}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:inputField   &lt;/span&gt;&lt;span&gt;fieldName&lt;/span&gt;&lt;span&gt;=&quot;Remarks__c&quot;&lt;/span&gt;&lt;span&gt; 
                                            value&lt;/span&gt;&lt;span&gt;=&quot;{!v.simpleDepartmentRecord.Remarks__c}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal__footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:button &lt;/span&gt;&lt;span&gt;variant&lt;/span&gt;&lt;span&gt;=&quot;neutral&quot;&lt;/span&gt;&lt;span&gt; label&lt;/span&gt;&lt;span&gt;=&quot;Cancel&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;{!c.cancelDialog}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:button &lt;/span&gt;&lt;span&gt;variant&lt;/span&gt;&lt;span&gt;=&quot;brand&quot;&lt;/span&gt;&lt;span&gt;   label&lt;/span&gt;&lt;span&gt;=&quot;Submit&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;{!c.saveRecord}&quot;&lt;/span&gt;&lt;span&gt; disabled&lt;/span&gt;&lt;span&gt;=&quot;{!v.flag}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:recordEditForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;　　&amp;lt;!-- 弹窗打开的时候，用一个遮罩层将页面变暗--&amp;gt;&lt;br/&gt;　　&amp;lt;div aura:id=&quot;overlay&quot; class=&quot;slds-backdrop slds-backdrop--open&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时预览下页面查看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114778/201901/1114778-20190119122820820-1458392495.png&quot; alt=&quot;&quot; width=&quot;571&quot; height=&quot;288&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过&amp;lt;lightning:recordEditForm&amp;gt;组件，就能比较方便的重写新建/更新按钮，但此时会出现一个问题&lt;/p&gt;
&lt;p&gt;当点击更新按钮的时候，会发现使用&amp;lt;lightning:input&amp;gt;的用户名没有办法进行更新，此时查阅相关文档&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;lightning:recordForm&quot; href=&quot;https://developer.salesforce.com/docs/component-library/bundle/lightning:recordEditForm/documentation&quot; target=&quot;_blank&quot;&gt;&amp;lt;Lightning:recordEditForm&amp;gt;&lt;/a&gt; 发现这样一句话：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
The lightning:inputField component is used inside the lightning:recordEditForm to create editable fields. &lt;br/&gt;The lightning:outputField component and other display components such as lightning:formattedName can be used to &lt;br/&gt;display read-only information in your form.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单说，除了使用&amp;lt;lightning:inputField&amp;gt;的字段是可编辑的，lightning:input，lightning:formattedName等其他标签都是只读的&lt;/p&gt;
&lt;p&gt;于是这里就遇到一个很严重的问题，查阅文档知道lightning:inputField字段不支持onblur属性，它支持onchange属性，而需求是在输入用户名后通过接口实时对输入的数据进行校验并获取返回的用户ID.&lt;/p&gt;
&lt;p&gt;直接操作看起来不太可行，于是想到了迂回解决的办法，把更新也当作新建处理.&lt;/p&gt;
&lt;p&gt;在点击更新的时候，将页面记录ID传到后台进行初始化，把查询出来的部门信息反向填充到表单中，这样就能绕开&amp;lt;lightning:recordEditForm&amp;gt;更新时lightning:input无法编辑，而lightning:inputField又不支持onblur属性的问题.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
PS：&lt;br/&gt;此处补充一个&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:recordEditForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件的小问题，&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:recordEditForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;在提交按钮
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:button &lt;/span&gt;&lt;span&gt;variant&lt;/span&gt;&lt;span&gt;=&quot;brand&quot;&lt;/span&gt;&lt;span&gt;   label&lt;/span&gt;&lt;span&gt;=&quot;Submit&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;{!c.saveRecord}&quot;&lt;/span&gt;&lt;span&gt;  type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
会有一个默认的提交行为，所以不小心就会出现提交两次的问题，此时在JSController提交方法中设置&lt;/span&gt;// 取消默认的提交行为&lt;br/&gt;event.preventDefault();&lt;br/&gt;就能取消组件的默认提交行为，以下是文档的描述&lt;br/&gt;To customize the behavior of your form when it loads or when data is submitted, use the &lt;code&gt;onload&lt;/code&gt; and &lt;code&gt;onsubmit&lt;/code&gt; attributes &lt;br/&gt;to specify event handlers. If you capture the submit event and submit the form programmatically, &lt;br/&gt;use &lt;code&gt;event.preventDefault()&lt;/code&gt; to cancel the default behavior of the event. This prevents a duplicate form submission.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来处理第二个问题：在父对象项目的相关列表中创建部门对象时，如何自动填充父对象的问题.&lt;/p&gt;
&lt;p&gt;很遗憾， Salesforce没有提供类似v.recordId这样的属性可以直接获取父级id，甚至在查阅解决方案的时候发现有人提了Idea&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114778/201901/1114778-20190119131914912-146466133.png&quot; alt=&quot;&quot; width=&quot;571&quot; height=&quot;186&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后来有个想法就是说不管怎么设计，相关列表创建子对象记录一定绕不开的就是通过url传递父对象的ID&lt;/p&gt;
&lt;p&gt;所以在组件的Helper.js中写一个解析URL的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//  获取URL参数
getUrlParameter : function(component,event,name) {
    name = name.replace(/[\[\]]/g, &quot;\\$&amp;amp;&quot;); 
    var url = window.location.href; 
    var regex = new RegExp(&quot;[?&amp;amp;]&quot; + name + &quot;(=1\.([^&amp;amp;#]*)|&amp;amp;|#|$)&quot;); 
    var results = regex.exec(url); 
    if (!results) return null; 
    if (!results[2]) return ''; 
    return decodeURIComponent(results[2].replace(/\+/g, &quot; &quot;));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在组件的Controller.js中打印父级ID&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;doInit : function(component, event, helper){
    // 获取可能的父级id
    var value = helper.getUrlParameter(component,event,'inContextOfRef');
    var context = JSON.parse(window.atob(value));
    var parentId = context.attributes.recordId;
    console.log('*** parentId:' + parentId);
},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114778/201901/1114778-20190119130942663-994047687.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;判断如果parentId存在，则将Id传递到后台，查询父对象的信息并返回数据进行填充&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从父级对象创建部门的时候给对应的字段预填充&lt;/span&gt;
&lt;span&gt;@AuraEnabled
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String initFunction(String parentId){
    System.debug(&lt;/span&gt;'*** parentId:' +&lt;span&gt; parentId);

    Test_Department__c permiss &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Test_Department__c();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 考虑权部门以后除了项目还有其他的主表，这里要检验parentId属于那个对象&lt;/span&gt;
    String prefix =&lt;span&gt; Test_Project__c.sobjecttype.getDescribe().getKeyPrefix();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parentId.substring(0, 3) ==&lt;span&gt; prefix) {
        permiss.Project_Dep__c &lt;/span&gt;=&lt;span&gt; parentId;    
    }    
    System.debug(&lt;/span&gt;'*** 部门:' +&lt;span&gt; permiss);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; JSON.serialize(permiss);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 填充效果如下&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1114778/201901/1114778-20190119134411707-1098117067.png&quot; alt=&quot;&quot; width=&quot;427&quot; height=&quot;330&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 19 Jan 2019 05:50:00 +0000</pubDate>
<dc:creator>Ricardo.M.Lu</dc:creator>
<og:description>重写新建/更新按钮的原因是因为项目需要用户在新建数据时从接口对数据进行校验，保证数据的有效性，同时获取接口返回的部分数据完成信息填充，而Sales force的trigger仅支持@future方法异</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luqinghua/p/10291452.html</dc:identifier>
</item>
</channel>
</rss>