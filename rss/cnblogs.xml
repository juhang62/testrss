<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>一篇博客带你轻松应对Springboot面试 - 经典鸡翅</title>
<link>http://www.cnblogs.com/jichi/p/12874024.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jichi/p/12874024.html</guid>
<description>&lt;h2&gt;1. &lt;strong&gt;SpringBoot&lt;span&gt;简介&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;SpringBoot&lt;span&gt;是简化&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;应用开发的一个框架。他整合了&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;的技术栈，提供各种标准化的默认配置。使得我们可以快速开发&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;项目，免掉&lt;/span&gt;&lt;span&gt;xml&lt;/span&gt;&lt;span&gt;配置的麻烦。降低&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;项目的成本。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2. &lt;strong&gt;SpringBoot&lt;span&gt;的优缺点&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;使编码配置部署都变得很简单。缺点可能就是自动注入的&lt;/span&gt;bean&lt;span&gt;，不是特别清楚，有可能会冲突。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3. &lt;strong&gt;SpringBoot&lt;span&gt;如何固定版本&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;一种是&lt;/span&gt;parenet&lt;span&gt;的时候直接固定。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一种是通过&lt;/span&gt;dependcy&lt;span&gt;来固定，因为可能当前项目已经有父项目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082507658-1808865855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4. &lt;strong&gt;SpringBoot&lt;span&gt;的使用方式&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;maven&lt;span&gt;中父项目导入&lt;/span&gt;&lt;span&gt;Springboot&lt;/span&gt;&lt;span&gt;的启动器。然后编写一个主程序打上&lt;/span&gt;&lt;span&gt;SpringBootApplication&lt;/span&gt;&lt;span&gt;注解。通过&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;方法就可以启动。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;5. &lt;strong&gt;SpringBoot&lt;span&gt;自动配置原理&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;首先可以看到启动类上面有一个&lt;/span&gt;SpringBootApplication&lt;span&gt;注解，点进去之后，又&lt;/span&gt;&lt;span&gt;EnableAutoConfiguration&lt;/span&gt;&lt;span&gt;注解。然后再进去，发现有个&lt;/span&gt;&lt;span&gt;@Import&lt;/span&gt;&lt;span&gt;注解，其导入的是&lt;/span&gt;&lt;span&gt;EnableAutoConfigurationImportSelector&lt;/span&gt;&lt;span&gt;类。再看这个类，他是集成了一个抽象的&lt;/span&gt;&lt;span&gt;AutoConfigutationimportSelector&lt;/span&gt;&lt;span&gt;。再往上就是接口&lt;/span&gt;&lt;span&gt;ImportSelector&lt;/span&gt;&lt;span&gt;。然后如果实现了接口的&lt;/span&gt;&lt;span&gt;selectImport&lt;/span&gt;&lt;span&gt;接口就会将其中的返回的数组全部加载到&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;容器中。其中实现的最主要的地方是&lt;/span&gt;&lt;span&gt;getCandidateConfigurations&lt;/span&gt;&lt;span&gt;方法。那个方法内部实现就是回去读取&lt;/span&gt;&lt;span&gt;meta-inf&lt;/span&gt;&lt;span&gt;下的&lt;/span&gt;&lt;span&gt;spring.factories&lt;/span&gt;&lt;span&gt;。所以主要在那里面配置的类就都会被自动加载。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;6. &lt;strong&gt;SpringBoot&lt;span&gt;配置文件注入&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082518731-8688123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注入实体类中，实体类可以使用&lt;/span&gt;@ConfigurationProperties(prefix = &quot;person&quot;)&lt;span&gt;注解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082536288-885405782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;7. &lt;strong&gt;@Value&lt;span&gt;和&lt;/span&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;&lt;span&gt;比较&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082543963-877758433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;8. &lt;strong&gt;@&lt;/strong&gt;&lt;strong&gt;PropertySource&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;加载指定的配置文件。如下，如果不声明的话，将从主配置文件加载。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082550960-41145892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;9. &lt;strong&gt;@&lt;/strong&gt;&lt;strong&gt;ImportResource&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;导入&lt;/span&gt;Spring&lt;span&gt;的配置文件，让配置文件里面的内容生效；这种方式比如一个类没有使用&lt;/span&gt;&lt;span&gt;@Componet&lt;/span&gt;&lt;span&gt;注解注册进容器，则使用自动装配&lt;/span&gt;&lt;span&gt;autowired&lt;/span&gt;&lt;span&gt;找不到。引入文件后，即可找到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot&lt;span&gt;里面没有&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;的配置文件，我们自己编写的配置文件，也不能自动识别；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;想让&lt;/span&gt;Spring&lt;span&gt;的配置文件生效，加载进来；&lt;/span&gt;&lt;span&gt;@**ImportResource**&lt;/span&gt;&lt;span&gt;标注在一个配置类上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082610099-439604039.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;10. &lt;strong&gt;springboot&lt;span&gt;的&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;加载&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在配置文件的时候，我们可以建立多个。用&lt;/span&gt;-&lt;span&gt;进行结尾。通过主配置文件，配置&lt;/span&gt;&lt;span&gt;profiles&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;active&lt;/span&gt;&lt;span&gt;就可以指定加载文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在同一个文件中，&lt;/span&gt;yml&lt;span&gt;文件支持文档块的写法，为&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082617745-1483102126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;11. &lt;strong&gt;SpringBoot&lt;span&gt;激活指定&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;的几种方式&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;第一种：直接在配置文件中通过&lt;/span&gt;active&lt;span&gt;指定&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二种：通过&lt;/span&gt;java -jar &lt;span&gt;的参数指定&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082629335-1179895223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082632831-195485920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三种：通过虚拟机参数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082638292-1873112916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;12. &lt;strong&gt;SpringBoot&lt;span&gt;项目内部配置文件加载顺序&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;顺序如下；&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082650385-1144238635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082657336-711348874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;优先级由高到底，高优先级的配置会覆盖低优先级的配置；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SpringBoot&lt;span&gt;会从这四个位置全部加载主配置文件；&lt;/span&gt;&lt;span&gt;**&lt;/span&gt;&lt;span&gt;互补配置&lt;/span&gt;&lt;span&gt;**&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们还可以通过&lt;/span&gt;spring.config.location&lt;span&gt;来改变默认的配置文件位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082708327-3557647.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;13. &lt;strong&gt;SpringBoot&lt;span&gt;外部配置文件加载顺序&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这个挺多的，我们就几个重要的。&lt;/p&gt;
&lt;p&gt;高优先级的会覆盖低优先级的。&lt;/p&gt;
&lt;p&gt;命令行上的参数配置是优先级最高的。&lt;/p&gt;
&lt;p&gt;jar&lt;span&gt;包外的带&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;的配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;jar&lt;span&gt;包内的带&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;的配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;jar&lt;span&gt;包外的不带&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;的配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;jar&lt;span&gt;包内的不带&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;的配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;14. &lt;strong&gt;Springboot&lt;span&gt;日志关系&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;SpringBoot&lt;span&gt;默认使用的&lt;/span&gt;&lt;span&gt;slf4j+logback&lt;/span&gt;&lt;span&gt;。引入&lt;/span&gt;&lt;span&gt;logging-starter&lt;/span&gt;&lt;span&gt;就可以使用。能自动适配其他日志。只需要将日志里面的&lt;/span&gt;&lt;span&gt;commons-logging&lt;/span&gt;&lt;span&gt;移除。就会自动引入其他日志。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;LoggerFactory&lt;span&gt;可以获得&lt;/span&gt;&lt;span&gt;logger&lt;/span&gt;&lt;span&gt;。通过&lt;/span&gt;&lt;span&gt;logger&lt;/span&gt;&lt;span&gt;就可以记录日志。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;日志的一些配置&lt;/p&gt;
&lt;p&gt;logging.level.com.atguigu=trace  &lt;span&gt;指定打印级别&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;logging.file=G:/springboot.log    &lt;span&gt;指定日志生成路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;logging.path=/spring/log  &lt;span&gt;指定日志生成相对路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n &lt;span&gt;指定控制台输出格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== 指定文件中日志输出格式&lt;/p&gt;
&lt;h2&gt;15. &lt;strong&gt;SpringBoot&lt;span&gt;如何扩展&lt;/span&gt;&lt;span&gt;SpringMVC&lt;/span&gt;&lt;span&gt;的配置&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通过建立自己的类继承&lt;/span&gt;WebMvcConfigurerAdapter&lt;span&gt;，在类上面打上注解&lt;/span&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;span&gt;。然后重写里面的方法即可。容器中的所有的&lt;/span&gt;&lt;span&gt;WebMvcConfigurer&lt;/span&gt;&lt;span&gt;会一起起作用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082727652-682893575.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果我们不想使用&lt;/span&gt;mvc&lt;span&gt;的自动配置，全部使用自己的。可以在配置类上增加注解&lt;/span&gt;&lt;span&gt;@EnableWebMvc&lt;/span&gt;&lt;span&gt;。这个注解可以导入一个&lt;/span&gt;&lt;span&gt;webmvcconfigurationsupport&lt;/span&gt;&lt;span&gt;的类。然后&lt;/span&gt;&lt;span&gt;mvc&lt;/span&gt;&lt;span&gt;的自动配置类上的注解有这么一句话，有一个条件注解，当没有上面那个类的时候，才生效。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;16. &lt;strong&gt;SpringBoot&lt;span&gt;如何注册&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;编写好一个&lt;/span&gt;servlet&lt;span&gt;后，声明一个类，返回&lt;/span&gt;&lt;span&gt;ServletRegistrationBean&lt;/span&gt;&lt;span&gt;。通过里面的方法将&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;包装一下返回。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082731075-2039966526.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082734982-355319661.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编写一个&lt;/span&gt;filter&lt;span&gt;。通过&lt;/span&gt;&lt;span&gt;FilterRegister&lt;/span&gt;&lt;span&gt;包装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082739398-998567483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082743079-1138786407.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编写一个&lt;/span&gt;listener&lt;span&gt;，实现注册&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082746435-1852078375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082749026-1264535432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;17. &lt;strong&gt;SpringBoot&lt;span&gt;切换成&lt;/span&gt;&lt;span&gt;undertow&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;先排除掉&lt;/span&gt;tomcat&lt;span&gt;，然后再引入&lt;/span&gt;&lt;span&gt;undertow&lt;/span&gt;&lt;span&gt;就行了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082753462-1935768758.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;18. &lt;strong&gt;SpringBoot&lt;span&gt;的任务&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;异步任务在启动类上，增加注解&lt;/span&gt;@EnableAsync&lt;span&gt;，此时就开启了。然后对于异步的方法，打上注解&lt;/span&gt;&lt;span&gt;@Async&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;定时任务，在启动类上，打上注解&lt;/span&gt;@EnableScheduling&lt;span&gt;，需要定时的方法使用&lt;/span&gt;&lt;span&gt;@Scheduled&lt;/span&gt;&lt;span&gt;注解。这里面分为秒，分，小时，日期，月份，星期。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082757889-1120469751.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;邮件任务&lt;/p&gt;
&lt;p&gt;&lt;span&gt;引入邮件任务启动器。在配置文件中进行配置。通过&lt;/span&gt;javamailsenderimpl&lt;span&gt;来发送。可以发送简单的邮件和复杂的邮件&lt;/span&gt;&lt;span&gt;SimpleMailMessage&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;MimeMessage&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;19. &lt;strong&gt;SpringBoot&lt;span&gt;热部署&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;jrebal&lt;span&gt;是收费的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般使用&lt;/span&gt;springboot-dev-tool&lt;span&gt;。通过&lt;/span&gt;&lt;span&gt;ctrl+f9&lt;/span&gt;&lt;span&gt;进行热部署。开启&lt;/span&gt;&lt;span&gt;idea&lt;/span&gt;&lt;span&gt;的自动编译。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;20. &lt;strong&gt;SpringBoot&lt;span&gt;的监控&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;引入&lt;/span&gt;actuatro&lt;span&gt;的监控器。配置文件需要配置安全关闭。&lt;/span&gt;&lt;span&gt;management.security.enabled=false&lt;/span&gt;&lt;span&gt;。可以配置&lt;/span&gt;&lt;span&gt;endpoint&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;shutdown&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;enable&lt;/span&gt;&lt;span&gt;开启，就可以直接关闭了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;21. &lt;strong&gt;SpringBoot&lt;span&gt;整合&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;引入&lt;/span&gt;redis&lt;span&gt;的启动器。&lt;/span&gt;&lt;span&gt;data-redis&lt;/span&gt;&lt;span&gt;。引入后再配置文件进行配置&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;。然后通过&lt;/span&gt;&lt;span&gt;redistemplate&lt;/span&gt;&lt;span&gt;就可以进行操作了。会乱码，默认使用的是&lt;/span&gt;&lt;span&gt;jdk&lt;/span&gt;&lt;span&gt;的序列化&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;器。需要改成&lt;/span&gt;&lt;span&gt;jackson&lt;/span&gt;&lt;span&gt;。自己实现一个&lt;/span&gt;&lt;span&gt;RedisTmeplate&lt;/span&gt;&lt;span&gt;。泛型为&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;。再实现&lt;/span&gt;&lt;span&gt;CacheManager&lt;/span&gt;&lt;span&gt;。就会发现缓存变成&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;形式了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1534147/202005/1534147-20200512082804556-309080857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 12 May 2020 00:30:00 +0000</pubDate>
<dc:creator>经典鸡翅</dc:creator>
<og:description>1.&amp;#160;SpringBoot简介 SpringBoot是简化Spring应用开发的一个框架。他整合了Spring的技术栈，提供各种标准化的默认配置。使得我们可以快速开发Spring项目，免掉x</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jichi/p/12874024.html</dc:identifier>
</item>
<item>
<title>python工业互联网应用实战1—SQL与ORM - wuch</title>
<link>http://www.cnblogs.com/haozi0804/p/12857020.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haozi0804/p/12857020.html</guid>
<description>&lt;p&gt;本章节是一个新的系列文章的开始，我们同样采用实战案例的方式和一些关键技术支出穿插的方式来介绍企业开发过程中常遇到的问题和实践经验总结。开篇第一章就介绍ORM和SQL获取数据的不同方式，主要是笔者近些年来使用Django的ORM实实在在的带来了开发效率的提升和业务变更的方便性，尤其企业开发过程中遇到的林林总总的“奇怪”需求面前，Python开发体系已经给笔者很多惊喜...。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;219.18533604888&quot;&gt;
&lt;p&gt;&lt;span&gt;　　从sql到ORM应该说也是编程体系逐步演化的结果，通过类和对象更好的组织开个过程中遇到的各种业务问题，面向对象的解耦和内聚作为一套有效的方法论，对于复杂的企业应用而言确实能够解决实践过程中很多问题。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1.&lt;strong&gt;早期No ORM的做法&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　这里先跟笔者回忆一下历史，在没有普及使用对象映射层之前，做企业业务系统开发通常是怎么做的呢？首先是不变的当然是需求分析，需求基本确定下来后，就是依据原始业务单据进行数据库表设计了，因为大量的企业信息化系统首先要干的第一件事情就是保存表单\保存表单\保存表单，笔者多年来干过的大量的事情就是保存表单 ：( ，实现业务单据无纸化，单据数据保存到数据库表里，便于将来的查询、检索和统计分析。&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span&gt;1.1. &lt;strong&gt;表&lt;/strong&gt;&lt;strong&gt;结构&lt;/strong&gt;&lt;strong&gt;设计&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;　　数据库表结构字段的设计和一些基础数据信息的设计，通常叫做数据字典。举例来说呢，比如系统要构建一个User的表，来存放用户基本信息，表设计如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509152946874-1320323354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;我们通过数据管理工具Navicat连接前面demo创建的db.sqlite3文件数据库，运行创建User表的SQL我们就会看到表里面增加了一张User表，浏览表会看到还没有数据是一张空表。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &quot;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot; (
  &quot;id&quot; &lt;/span&gt;&lt;span&gt;integer&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; AUTOINCREMENT,
  &quot;first_name&quot; &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;),
  &quot;last_name&quot; &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;150&lt;/span&gt;&lt;span&gt;),
  &quot;is_active&quot; bool,
  &quot;remark&quot; &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;)
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509153025712-347324285.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509153032194-1309319112.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　接下来为了便于演示，No ORM开发模式，执行下面的SQL表里插入一条记录。 &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;main&quot;.&quot;&lt;span&gt;user&lt;/span&gt;&quot;(&quot;id&quot;, &quot;first_name&quot;, &quot;last_name&quot;, &quot;is_active&quot;, &quot;remark&quot;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ch&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a test user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　这里我们先演示通过SQL直接获取数据的方式来演示早期的编程模式，后面便于与&lt;span&gt;ORM&lt;/span&gt;映射模式进行对比（没有对比就没有伤害）！Django同样也是可以通过&lt;span&gt;SQL&lt;/span&gt;来&lt;span&gt;load data&lt;/span&gt;的。&lt;/p&gt;
&lt;h5&gt;1.2. &lt;strong&gt;User View&lt;span&gt;查看用户详情 &lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;　　首先，我们构建一个基于Django模板的&lt;span&gt;UserView url&lt;/span&gt;来查看某个&lt;span&gt;User Id&lt;/span&gt; 的数据详情，&lt;span&gt;UserView.html&lt;/span&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;User Veiw&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;User Id:    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{Id}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;first Name :    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{FirstName}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Last Name:    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{LastName}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;remark:    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{Remark}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　然后，在&lt;/span&gt;views &lt;span&gt;文件里添加函数&lt;/span&gt;&lt;span&gt;userView&lt;/span&gt;&lt;span&gt;返回&lt;/span&gt;&lt;span&gt;UserView.html&lt;/span&gt;&lt;span&gt;模板，&lt;/span&gt;&lt;span&gt;userView&lt;/span&gt;&lt;span&gt;代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpRequest
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; userView(request):
    &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;&lt;span&gt; isinstance(request, HttpRequest)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Collector/UserView.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,\
        {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FirstName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LastName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Remark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　接着，项目&lt;/span&gt;urls&lt;span&gt;发布&lt;/span&gt;userView，&lt;span&gt;我们就可以再浏览器看到这个模板运行的效果，&lt;/span&gt;django web&lt;span&gt;开发效率确实会快很多。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
urlpatterns =&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Uncomment the next line to enable the admin:&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;path('admin/', admin.site.urls)    &lt;/span&gt;
    path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;getTank4C9Data/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, views.getTank4C9Data),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;getCollectorData/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, views.getCollectorData),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pushCollectorData/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, views.pushCollectorData),
    &lt;span&gt;path(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;userView/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;, views.userView),&lt;/span&gt;
    
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　浏览器运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509153438350-940098015.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;2. &lt;strong&gt;SQL&lt;span&gt;访问数据方式&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　这一步，我们改进代码演示如何&lt;/span&gt;url&lt;span&gt;如何传入&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt;&lt;span&gt;参数然后采用&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt; &lt;span&gt;从数据表读取这条记录，并通过&lt;/span&gt;&lt;span&gt;django template&lt;/span&gt;&lt;span&gt;系统渲染到&lt;/span&gt;&lt;span&gt;UserView.html&lt;/span&gt;&lt;span&gt;模板上，让页面变成一个动态加载的页面效果。 上代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpRequest
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sqlite3
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; userView(request):
    &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;&lt;span&gt; isinstance(request, HttpRequest)
    userId&lt;/span&gt;=request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取UserId参数&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; userId!=&lt;span&gt;None:
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;连接到数据库&lt;/span&gt;
        db = sqlite3.connect(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\my tfs\demo\source\CollectorSvr\db.sqlite3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) 
        cursor &lt;/span&gt;= db.cursor() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建一个游标&lt;/span&gt;
        cursor.execute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select *from User where id={0}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(userId)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行SQL&lt;/span&gt;
        rows =cursor.fetchall() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取数据&lt;/span&gt;
        row =&lt;span&gt; rows[0] 
        db.close()  
        model&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:row[0] ,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FirstName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:row[1],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LastName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:row[2],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Remark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:row[4] &lt;span&gt;if&lt;/span&gt; row[4]!=None &lt;span&gt;else&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,}
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        model&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FirstName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LastName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Remark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,}
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Collector/UserView.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,model)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;代码解读&lt;/strong&gt;：通过&lt;/span&gt;url&lt;span&gt;请求的&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;参数&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt; &lt;span&gt;拼写本次要执行的&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;语句，然后通过数据游标返回执行&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;的结果，接着处理游标并封装到字典里，最后通过&lt;/span&gt;&lt;span&gt;django&lt;/span&gt;&lt;span&gt;模板渲染，最后运行效果如下&lt;/span&gt;&lt;a href=&quot;http://127.0.0.1:8090/userView/?UserId=1&quot;&gt;&lt;span&gt;http://127.0.0.1:8090/userView/?UserId=1&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509153749967-1571493310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　userView&lt;span&gt;运行效果实现了通过传入参数的方式，实现了从数据获取数据并显示再&lt;/span&gt;&lt;span&gt;UI&lt;/span&gt;&lt;span&gt;上的效果，但是过程中我们就的拼写&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;，如果是修改或者插入数据都需要编码拼写相应的&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;语句。编码过程中就有大量的编码工作是把&lt;/span&gt;&lt;span&gt;UI&lt;/span&gt;&lt;span&gt;提交的&lt;/span&gt;&lt;span&gt;GET POST&lt;/span&gt;&lt;span&gt;参数拼写成不同的&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;语句最后提交到数据库，由于不同的数据库有着不同的&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;语法，这导致了开发系统与数据库版本形成了强依赖关系，如果想把系统数据库从&lt;/span&gt;SQL SERVER&lt;span&gt;迁移到&lt;/span&gt;Oracle&lt;span&gt;就需要大量的测试和重新适配工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样过了很多年，&lt;/span&gt;orm&lt;span&gt;出现了&lt;/span&gt;...&lt;/p&gt;
&lt;h4&gt;3. &lt;strong&gt;Django Model &lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;　　Django ORM&lt;span&gt;对应的&lt;/span&gt;&lt;span&gt;Django&lt;/span&gt;&lt;span&gt;模型，&lt;/span&gt;&lt;span&gt;Object Relational Mapping&lt;/span&gt;&lt;span&gt;（对象关系映射），就是在面向对象模式编程中，把对象的模型跟数据库中表的对应起来。举例来说，一个业务对象类对应着一张表，类型属性对应表相应的字段。这个对象类的一个实例，对应着表中的一条记录，表里的一条条记录映射成对象后就是程序里一个个的对象。&lt;/span&gt;&lt;span&gt;Django&lt;/span&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;来管理对象类和表之间的关系，并提供了一标准&lt;/span&gt;&lt;span&gt;CRUD&lt;/span&gt;&lt;span&gt;操作来满足数据操作的需求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;终于，可以哈哈一笑了&lt;/p&gt;
&lt;h5&gt;3.1. &lt;strong&gt;数据库配置&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;　　Django model&lt;span&gt;我们可以使用强大的数据&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;模型语句，来描述我们的业务数据模型，下面我们开始来体验&lt;/span&gt;&lt;span&gt;ORM&lt;/span&gt;&lt;span&gt;的到底带来了什么。&lt;/span&gt;&lt;span&gt;第一步首先是确认一下我们的&lt;/span&gt;demo project&lt;span&gt;的数据库连接配置是否正确的指向了&lt;/span&gt;&lt;span&gt;db.sqlite3&lt;/span&gt;&lt;span&gt;数据库文件，查看&lt;/span&gt;&lt;span&gt;project settings&lt;/span&gt;&lt;span&gt;文件的配置是否如下代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Database&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; https://docs.djangoproject.com/en/2.1/ref/settings/#databases&lt;/span&gt;
DATABASES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.sqlite3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: os.path.join(BASE_DIR, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.sqlite3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果没有修改过应该时工程创建时的默认值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509153944277-2130716906.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　VS 2019 IDE&lt;span&gt;环境中可以打开&lt;/span&gt;&lt;span&gt;Open Django Shell&lt;/span&gt;&lt;span&gt;命令窗口，执行下面的命令确认数据配置是否正确。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; connection
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; cursor =&lt;span&gt; connection.cursor()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509154009254-2037792420.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;如果没有显示什么错误信息，那么数据库配置是正确的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;这里我们可以通过游标执行一下前面的&lt;/span&gt;SQL&lt;span&gt;语句，看看再&lt;/span&gt;&lt;span&gt;Django Shell&lt;/span&gt;&lt;span&gt;的执行效果，先提一下&lt;/span&gt;&lt;span&gt;Django Shell&lt;/span&gt;&lt;span&gt;会给我们带来很多便利尤其再做一些探索性的编程和调试时，&lt;/span&gt;&lt;span&gt;Django Shell&lt;/span&gt;&lt;span&gt;也是笔者使用&lt;/span&gt;&lt;span&gt;Python&lt;/span&gt;&lt;span&gt;的最佳实践体会之一。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; connection
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; cursor =&lt;span&gt; connection.cursor()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; cursor.execute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select *from User where id=1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;lt;django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x03D5B240&amp;gt;
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;3.2. &lt;strong&gt;Model&lt;span&gt;设计&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;　　Django&lt;span&gt;模型放在&lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;models&lt;/span&gt;&lt;span&gt;文件里，现在我们在&lt;/span&gt;&lt;span&gt;Collector/models&lt;/span&gt;&lt;span&gt;定义模型吧，&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;模型的属性与数据表字段对照，为了更好的说明属性与表字段的对照关系，我们在模型里采用了&lt;/span&gt;column&lt;span&gt;定义语法，&lt;/span&gt;User&lt;span&gt;模型&lt;/span&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your models here.&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User(models.Model):
    Id&lt;/span&gt;=models.AutoField(primary_key=True,db_column=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) 
    FirstName &lt;/span&gt;= models.CharField(null=False,max_length=30,db_column=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    LastName &lt;/span&gt;= models.CharField(null=False,max_length=150,db_column=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    IsActive &lt;/span&gt;= models.NullBooleanField(null=True,db_column=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_active&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    Remark &lt;/span&gt;= models.CharField(null=False,max_length=255,db_column=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;remark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        db_table &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　接下来我们就可以在&lt;/span&gt;Django Shell&lt;span&gt;里操作我们定义好的模型了，如下面的通过&lt;/span&gt;&lt;span&gt;UserId=1&lt;/span&gt;&lt;span&gt;获取一个&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;对象。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; Collector.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; User
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; model =User.objects.get(Id=1&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(model.LastName+&lt;span&gt;model.FirstName)
wuch
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　新增一个&lt;/span&gt;User&lt;span&gt;对象&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; user1=&lt;span&gt;User()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; user1.FirstName =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xiaomin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; user1.LastName=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; user1.save()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　重新获取数据库表里&lt;/span&gt;Id=3&lt;span&gt;对象&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; user2=User.objects.get(Id=3&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; user2.FirstName
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xiaomin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　更多丰富的查询接口...&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; User.objects.all()
&lt;/span&gt;&amp;lt;QuerySet [&amp;lt;User: User object (1)&amp;gt;, &amp;lt;User: User object (3)&amp;gt;]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; User.objects.get(LastName__startswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Wu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;lt;User: User object (1)&amp;gt;
&amp;gt;&amp;gt;&amp;gt; User.objects.get(LastName__contains=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;lt;User: User object (3)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;3.3. &lt;strong&gt;&lt;span&gt;重构&lt;/span&gt;userView&lt;span&gt;函数&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;　　现在采用&lt;/span&gt;Django&lt;span&gt;模型的方式来重构我们的&lt;/span&gt;&lt;span&gt;UserView&lt;/span&gt;&lt;span&gt;函数，从新的代码中你会看到返回值的赋值方式也从&lt;/span&gt;&lt;span&gt;row[1]&lt;/span&gt; &lt;span&gt;改成了&lt;/span&gt;user.FirstName，对象属性的赋值方式大大的提高了代码的可读性和降低了赋值错误出错的概率。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpRequest
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; Collector.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; User
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; userView(request):
    &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;&lt;span&gt; isinstance(request, HttpRequest)
    userId&lt;/span&gt;=request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取UserId参数&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; userId!=&lt;span&gt;None:
        user &lt;/span&gt;= User.objects.get(Id=&lt;span&gt;userId)
        model&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:user.Id ,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FirstName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:user.FirstName,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LastName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:user.LastName,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Remark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:user.Remark &lt;span&gt;if&lt;/span&gt; user.Remark!=None &lt;span&gt;else&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,}
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        model&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FirstName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LastName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Remark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,}
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Collector/UserView.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,model)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　现在调试运行效果一样了，没有&lt;/span&gt;SQL&lt;span&gt;代码却简单很多，可读性也是&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;4. &lt;strong&gt;Model to Dict&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　为了进一步的提高编程效率，直接把&lt;/span&gt;model&lt;span&gt;转换成&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;返回格式的方式就进一步有效的降低代码量。这里采用&lt;/span&gt;model_to_dict&lt;span&gt;来进行&lt;/span&gt;model&lt;span&gt;到&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;&lt;span&gt;的转换，呵呵，你会觉得&lt;/span&gt;&lt;span&gt;django&lt;/span&gt;&lt;span&gt;怎么会这样简单啊，代码好少的说？代码越少可读性就越强，维护和扩展就越方便！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpRequest
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; Collector.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; User
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.forms.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; model_to_dict 
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; userView(request):
    &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;&lt;span&gt; isinstance(request, HttpRequest)
    userId&lt;/span&gt;=request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取UserId参数&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; userId!=&lt;span&gt;None:
        user &lt;/span&gt;= User.objects.get(Id=&lt;span&gt;userId)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        user&lt;/span&gt;=&lt;span&gt;User()
    model &lt;/span&gt;=&lt;span&gt; model_to_dict(user)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Collector/UserView.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,model)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　最后我们再秀以下那个后台已经天翻地覆，&lt;/span&gt;UI&lt;span&gt;端不变的显示界面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/67400/202005/67400-20200509154624470-1652247237.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;5. &lt;strong&gt;小节&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;　　本章节是一个新的系列文章的开始，&lt;span&gt;我们同样采用实战案例的方式和一些关键技术支出穿插的方式来介绍企业开发过程中常遇到的问题和实践经验总结。开篇第一章就介绍&lt;/span&gt;ORM&lt;span&gt;和&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;获取数据的不同方式，主要是笔者近些年来使用&lt;/span&gt;&lt;span&gt;Django&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;ORM&lt;/span&gt;&lt;span&gt;实实在在的带来了开发效率的提升和业务变更的方便性，尤其企业开发过程中遇到的林林总总的“奇怪”需求面前，&lt;/span&gt;&lt;span&gt;Python&lt;/span&gt;&lt;span&gt;开发体系已经给笔者很多惊喜&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Tue, 12 May 2020 00:29:00 +0000</pubDate>
<dc:creator>wuch</dc:creator>
<og:description>本章节是一个新的系列文章的开始，我们同样采用实战案例的方式和一些关键技术支出穿插的方式来介绍企业开发过程中常遇到的问题和实践经验总结。开篇第一章就介绍ORM和SQL获取数据的不同方式，主要是笔者近些年</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/haozi0804/p/12857020.html</dc:identifier>
</item>
<item>
<title>Java并发编程实战 04死锁了怎么办？ - Johnson木木</title>
<link>http://www.cnblogs.com/Johnson-lin/p/12874009.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Johnson-lin/p/12874009.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/QT44HS47l_ir08pCZeFU5Q&quot;&gt;Java并发编程实战 01并发编程的Bug源头&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Ryud9nizdqWI25CMLL3E_g&quot;&gt;Java并发编程实战 02Java如何解决可见性和有序性问题&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/B07f7qG7rC98Ge8JSndS2Q&quot;&gt;Java并发编程实战 03互斥锁 解决原子性问题&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在第三篇文章最后的例子当中，需要获取到两个账户的锁后进行转账操作，这种情况有可能会发生死锁，我把上一章的代码片段放到下面：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class Account {
    // 余额
    private Long money;
    public synchronized void transfer(Account target, Long money) {
        synchronized(this) {           (1)
            synchronized (target) {    (2)
                this.money -= money;
                if (this.money &amp;lt; 0) {
                    // throw exception
                }
                target.money += money;
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;若&lt;code&gt;账户A&lt;/code&gt;转账给&lt;code&gt;账户B&lt;/code&gt;100元，&lt;code&gt;账户B&lt;/code&gt;同时也转账给&lt;code&gt;账户A&lt;/code&gt;100元，当&lt;code&gt;账户A&lt;/code&gt;转帐的线程A执行到了代码&lt;code&gt;(1)&lt;/code&gt;处时，获取到了&lt;code&gt;账户A&lt;/code&gt;对象的锁，同时&lt;code&gt;账户B&lt;/code&gt;转账的线程B也执行到了代码&lt;code&gt;(1)&lt;/code&gt;处时，获取到了&lt;code&gt;账户B&lt;/code&gt;对象的锁。当线程A和线程B执行到了代码&lt;code&gt;(2)&lt;/code&gt;处时，他们都在互相等待对方释放锁来获取，可是&lt;code&gt;synchronized&lt;/code&gt;是阻塞锁，没有执行完代码块是不会释放锁的，就这样，线程A和线程B死死的对着，谁也不放过谁。等到了你去重启应用的那一天。。。这个现象就是&lt;code&gt;死锁&lt;/code&gt;。&lt;br/&gt;&lt;strong&gt;死锁的定义：一组互相竞争资源的线程因互相等待，导致“永久”阻塞的现象。&lt;/strong&gt;&lt;br/&gt;如下图：&lt;br/&gt;&lt;img src=&quot;http://qiniuyun.colablog.cn/387488cc-a4e8-438c-9f12-7b09590c9540.jpg&quot; alt=&quot;死锁1.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里我先以一个基本会发生死锁的程序为例，创建两个线程，线程A获取到锁A后，休眠1秒后去获取锁B；线程B获取到锁B后 ，休眠1秒后去获取锁A。那么这样基本都会发生死锁的现象，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class DeadLock extends Thread {
    private String first;
    private String second;
    public DeadLock(String name, String first, String second) {
        super(name); // 线程名
        this.first = first;
        this.second = second;
    }

    public  void run() {
        synchronized (first) {
            System.out.println(this.getName() + &quot; 获取到锁: &quot; + first);
            try {
                Thread.sleep(1000L); //线程休眠1秒
                synchronized (second) {
                    System.out.println(this.getName() + &quot; 获取到锁: &quot; + second);
                }
            } catch (InterruptedException e) {
                // Do nothing
            }
        }
    }
    public static void main(String[] args) throws InterruptedException {
        String lockA = &quot;lockA&quot;;
        String lockB = &quot;lockB&quot;;
        DeadLock threadA = new DeadLock(&quot;ThreadA&quot;, lockA, lockB);
        DeadLock threadB = new DeadLock(&quot;ThreadB&quot;, lockB, lockA);
        threadA.start();
        threadB.start();
        threadA.join(); //等待线程1执行完
        threadB.join();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行程序后将发生死锁，然后使用jps命令（jps.exe在jdk/bin目录下），命令如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;C:\Program Files\Java\jdk1.8.0_221\bin&amp;gt;jps -l
24416 sun.tools.jps.Jps
24480 org.jetbrains.kotlin.daemon.KotlinCompileDaemon
1624
20360 org.jetbrains.jps.cmdline.Launcher
9256
9320 page2.DeadLock
18188
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以发现发生死锁的进程id 9320,然后使用jstack（jstack.exe在jdk/bin目录下）命令查看死锁信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;C:\Program Files\Java\jdk1.8.0_221\bin&amp;gt;jstack 9320
&quot;ThreadB&quot; #13 prio=5 os_prio=0 tid=0x000000001e48c800 nid=0x51f8 waiting for monitor entry [0x000000001f38f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at page2.DeadLock.run(DeadLock.java:19)
        - waiting to lock &amp;lt;0x000000076b99c198&amp;gt; (a java.lang.String)
        - locked &amp;lt;0x000000076b99c1d0&amp;gt; (a java.lang.String)

&quot;ThreadA&quot; #12 prio=5 os_prio=0 tid=0x000000001e48c000 nid=0x3358 waiting for monitor entry [0x000000001f28f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at page2.DeadLock.run(DeadLock.java:19)
        - waiting to lock &amp;lt;0x000000076b99c1d0&amp;gt; (a java.lang.String)
        - locked &amp;lt;0x000000076b99c198&amp;gt; (a java.lang.String)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样我们就可以看到发生死锁的信息。虽然发现了死锁，但是解决死锁只能是重启应用了。&lt;/p&gt;

&lt;h2 id=&quot;1固定的顺序来获得锁&quot;&gt;1.固定的顺序来获得锁&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果所有线程以固定的顺序来获得锁，那么在程序中就不会出现锁顺序死锁问题。&lt;/strong&gt;（取自《Java并发编程实战》一书）&lt;br/&gt;要想验证锁顺序的一致性，有很多种方式，如果锁定的对象含有递增的id字段（&lt;strong&gt;唯一、不可变、具有可比性的&lt;/strong&gt;），那么就好办多了，获取锁的顺序以id由小到大来排序。还是用转账的例子来解释，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class Account {
    // id (递增)
    private Integer id;
    // 余额
    private Long money;
    public synchronized void transfer(Account target, Long money) {
        Account account1;
        Account account2;
        if (this.id &amp;lt; target.id) {
            account1 = this;
            account2 = target;
        } else {
            account1 = target;
            account2 = this;
        }

        synchronized(account1) {
            synchronized (account2) {
                this.money -= money;
                if (this.money &amp;lt; 0) {
                    // throw exception
                }
                target.money += money;
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;若该对象并没有&lt;strong&gt;唯一、不可变、具有可比性的&lt;/strong&gt;的字段（如：递增的id），那么可以使用 &lt;strong&gt;System.identityHashCode()&lt;/strong&gt; 方法返回的哈希值来进行比较。比较方式可以和上面的例子一类似。&lt;code&gt;System.identityHashCode()&lt;/code&gt;虽然会出现散列冲突，但是发生冲突的概率是非常低的。因此这项技术以最小的代价，换来了最大的安全性。&lt;br/&gt;&lt;strong&gt;提示：&lt;/strong&gt; 不管你是否重写了对象的&lt;strong&gt;hashCode&lt;/strong&gt;方法，&lt;strong&gt;System.identityHashCode()&lt;/strong&gt; 方法都只会返回默认的哈希值。&lt;/p&gt;
&lt;h2 id=&quot;2一次性申请所有资源&quot;&gt;2.一次性申请所有资源&lt;/h2&gt;
&lt;p&gt;只要同时获取到转出账户和转入账户的资源锁。执行完转账操作后，也同时释放转入账户和转出账户的资源锁。那么则不会出现死锁。但是使用&lt;code&gt;synchronized&lt;/code&gt;只能同时锁定一个资源锁，所以需要建立一个锁分配器&lt;code&gt;LockAllocator&lt;/code&gt; 。代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/** 锁分配器（单例类） */
public class LockAllocator {
    private final List&amp;lt;Object&amp;gt; lock = new ArrayList&amp;lt;Object&amp;gt;();
    /** 同时申请锁资源 */
    public synchronized boolean lock(Object object1, Object object2) {
        if (lock.contains(object1) || lock.contains(object2)) {
            return false;
        }

        lock.add(object1);
        lock.add(object2);
        return true;
    }
    /** 同时释放资源锁 */
    public synchronized void unlock(Object object1, Object object2) {
        lock.remove(object1);
        lock.remove(object2);
    }
}

public class Account {
    // 余额
    private Long money;
    // 锁分配器
    private LockAllocator lockAllocator;
    
    public void transfer(Account target, Long money) {
        try {
            // 循环获取锁，直到获取成功
            while (!lockAllocator.lock(this, target)) {
            }

            synchronized (this){
                synchronized (target){
                    this.money -= money;
                    if (this.money &amp;lt; 0) {
                        // throw exception
                    }
                    target.money += money;
                }
            }
        } finally {
            // 释放锁
            lockAllocator.unlock(this, target);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;while&lt;/code&gt;循环不断的去获取锁，一直到获取成功，当然你也可以设置获取失败后休眠xx毫秒后获取，或者其他优化的方式。释放锁必须使用&lt;code&gt;try-finally&lt;/code&gt;的方式来释放锁。避免释放锁失败。&lt;/p&gt;
&lt;h2 id=&quot;3尝试获取锁资源&quot;&gt;3.尝试获取锁资源&lt;/h2&gt;
&lt;p&gt;在Java中，Lock接口定义了一组抽象的加锁操作。与内置锁&lt;code&gt;synchronized&lt;/code&gt;不同，使用内置锁时，只要没有获取到锁，就会死等下去，而显示锁&lt;code&gt;Lock&lt;/code&gt;提供了一种无条件的、可轮询的、定时的以及可中断的锁获取操作，所有加锁和解锁操作都是显示的（内置锁&lt;code&gt;synchronized&lt;/code&gt;的加锁和解锁操作都是隐示的），这篇文章就不展开来讲显示锁&lt;code&gt;Lock&lt;/code&gt;了（当然感兴趣的朋友可以先百度一下）。&lt;/p&gt;

&lt;p&gt;在生产环境发生死锁可是一个很严重的问题，虽说重启应用来解决死锁，但是毕竟是生产环境，代价很大，而且重启应用后还是可能会发生死锁，所以在编写并发程序时需要非常严谨的避免死锁的发生。避免死锁的方案应该还有更多，鄙人不才，暂知这些方案。若有其它方案可以留言告知。非常感谢你的阅读，谢谢。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br/&gt;&lt;a href=&quot;https://book.douban.com/subject/10484692/&quot;&gt;《Java并发编程实战》第10章&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/85001&quot;&gt;极客时间：Java并发编程实战 05：一不小心死锁了，怎么办？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/9266&quot;&gt;极客时间：Java核心技术面试精讲 18：什么情况下Java程序会产生死锁？如何定位、修复？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;2.6190476190476&quot;&gt;
&lt;p&gt;个人博客网址： &lt;a href=&quot;https://colablog.cn/&quot;&gt;https://colablog.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我的文章帮助到您，可以关注我的微信公众号，第一时间分享文章给您&lt;br/&gt;&lt;img src=&quot;http://qiniuyun.colablog.cn/%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg&quot; alt=&quot;微信公众号&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 May 2020 00:13:00 +0000</pubDate>
<dc:creator>Johnson木木</dc:creator>
<og:description>Java并发编程文章系列 &amp;quot;Java并发编程实战 01并发编程的Bug源头&amp;quot; &amp;quot;Java并发编程实战 02Java如何解决可见性和有序性问题&amp;quot; &amp;quot;Ja</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Johnson-lin/p/12874009.html</dc:identifier>
</item>
<item>
<title>Redis学习笔记（三） 字典 - 温暖如太阳</title>
<link>http://www.cnblogs.com/xtt321/p/12872802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xtt321/p/12872802.html</guid>
<description>&lt;p&gt;Redis的字典使用哈希表作为底层实现，一个哈希表中可以有多个哈希表节点，而每个哈希节点就保存在字典中的一个键值对。&lt;/p&gt;
&lt;p&gt;redis字典所用的哈希表由disht结构定义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; dictht{
    dictEntry &lt;/span&gt;**table;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希表数组&lt;/span&gt;
    unsigned &lt;span&gt;long&lt;/span&gt; size;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希表大小&lt;/span&gt;
    unsigned &lt;span&gt;long&lt;/span&gt; sizemask;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希表大小掩码，用于计算索引值 ，总是等于size -1&lt;/span&gt;
    unsigned &lt;span&gt;long&lt;/span&gt; used;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该哈希表已有节点数量&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;table 属性是一个数组，数组中的每个元素都是一个指向dictEntry结构的指针，每个dictEntry结构保存着一个键值对。其他的属性不多说。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;哈希表节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;哈希表节点使用dictEntry结构标识，每个dictEntry保存一个键值对。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; dictEntry{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; *key;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;键&lt;/span&gt;
&lt;span&gt;    union{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;val;
    uint64_tu64&lt;/span&gt;&lt;span&gt;'
&lt;/span&gt;    int64_ts64&lt;span&gt;'
&lt;/span&gt;    } v;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;值&lt;/span&gt;
    &lt;span&gt;struct&lt;/span&gt; dictEntry *next;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向下个哈希节点，形成链表&lt;/span&gt;
} ductEntry;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;*next 属性是指向另一个哈希表节点的指针，这个指针可以将多个哈希值相同的键值对连接在一起，解决键冲突的问题。所以，每一个哈希索引为一个单向链表。&lt;/p&gt;

&lt;p&gt;Redis中的字典由dict结构表示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; dict{
    dictType &lt;/span&gt;*type;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类型特定函数&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; *orivdata;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;私有数据&lt;/span&gt;
    dictht ht[&lt;span&gt;2&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希表&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; trehashidx;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rehash 索引 ，当rehash不再进行时，值为-1&lt;/span&gt;
} dict;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Redis计算哈希值和索引值的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hash = dict-&amp;gt;type-&amp;gt;&lt;span&gt;hashFunction(key);
index &lt;/span&gt;= hash &amp;amp; dict-&amp;gt;ht[x].sizemask;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;解决键冲突：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当两个或两个一个数量的键被分配到了哈希表数组的同一个索引上面时，为我们称作这些键发生冲突。Redis的哈希表使用链地址法来解决冲突，每个哈希表节点的next指针构成了一个单向链表，以此来解决键冲突。&lt;/p&gt;
&lt;p&gt;另外由于链表没有指向链表结尾的指针，为考虑速度，每次将新加的节点放到链表表头位置（复杂度为O(1)）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rehash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着哈希表保存的键增多或减少，为了让哈希表的负载因子维持在一个合理的范围内，程序会对哈希表的小小进行rehash（重新散列）。&lt;/p&gt;
&lt;p&gt;    1、为字典表的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作以及ht[0]包含的键值对数量&lt;/p&gt;
&lt;p&gt;        （1）如果执行扩展，ht[1] =第一个&amp;gt;=ht[0].used * 2 的2的n次方幂。&lt;/p&gt;
&lt;p&gt;        （2）如果收缩 ht[1] = 第一个&amp;gt;=ht[0].used 的2的n次方幂&lt;/p&gt;
&lt;p&gt;    2、h[0] 迁移至h[1]。&lt;/p&gt;
&lt;p&gt;    3、清空h[0]，将h[1]设置为h[0]，新建h[1]。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;渐进式rehash&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;字典表同时使用ht[0],ht[1],ht[0]通过索引计数器分批量的迁移至ht[1]，为解决ht[0]所持有的键值对量太大的问题。&lt;/p&gt;

&lt;p&gt;不为别的，每天学一点，总会有收获。&lt;/p&gt;

&lt;p&gt;说明：尊重作者知识产权，文中内容参考《Redis设计与实现》，仅在此做学习与大家分享。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/404258/202005/404258-20200511224218627-184676437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 12 May 2020 00:06:00 +0000</pubDate>
<dc:creator>温暖如太阳</dc:creator>
<og:description>Redis的字典使用哈希表作为底层实现，一个哈希表中可以有多个哈希表节点，而每个哈希节点就保存在字典中的一个键值对。 redis字典所用的哈希表由disht结构定义。 typedef struct d</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xtt321/p/12872802.html</dc:identifier>
</item>
<item>
<title>Flutter为什么使用Dart？ - 老孟Flutter</title>
<link>http://www.cnblogs.com/mengqd/p/12873998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mengqd/p/12873998.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202005/467322-20200512080138388-108225291.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;老孟导读：关于&lt;strong&gt;Flutter为什么使用Dart?&lt;/strong&gt;这个话题，就像&lt;strong&gt;PHP是世界上最好的语言&lt;/strong&gt;一样，争论从来没有停止过，有很多说法，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Google是为了推广Dart，Dart是亲儿子。&lt;/li&gt;
&lt;li&gt;Flutter团队和Dart团队相邻，沟通起来更方便。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;或许存在这样的考虑，但即使是亲儿子，烂泥也要能扶上墙才行啊，难道你真的觉得如此重大的决定是靠这些主观色彩决定的？不可能的，所以Dart一定是有其非常大的优势。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在Flutter成立之初，Flutter团队评估了10多种语言，Flutter团队从四个主要维度进行评估，并考虑了框架作者，开发人员和最终用户的需求。最终Dart在所有评估维度上得分都很高，并且符合所有要求和标准。&lt;/p&gt;
&lt;p&gt;Dart在以下主要标准上赢得了高分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;开发人员的生产力&lt;/em&gt;。Flutter的主要价值主张之一是，它可以让开发人员使用相同的代码库为iOS和Android创建应用程序，从而节省了工程资源。使用高效的语言可以进一步加速开发人员，并使Flutter更具吸引力。这对我们的框架团队和开发人员都非常重要。Flutter的大多数语言都是用与我们提供给用户的语言相同的语言构建的，因此我们需要在不牺牲开发人员的框架和小部件的可访问性或可读性的情况下，保持100k的代码行的生产力。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;面向对象&lt;/em&gt;。对于Flutter，我们需要一种适合Flutter问题领域的语言：创建视觉用户体验。该行业拥有数十年使用面向对象语言构建用户界面框架的经验。尽管我们可以使用非面向对象的语言，但这将意味着重新发明轮子来解决一些难题。另外，绝大多数开发人员都有面向对象开发的经验，这使得学习Flutter开发方法变得更加容易。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可预测的高性能&lt;/em&gt;。借助Flutter，我们希望使开发人员能够创建快速，流畅的用户体验。为了实现这一点，我们需要能够在每个动画帧中运行大量的最终开发人员代码。这意味着我们需要一种既能提供高性能又能提供可预测的性能的语言，而又不会导致帧丢失的定期暂停。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;快速分配&lt;/em&gt;。Flutter框架使用一种功能样式的流程，该流程在很大程度上依赖于基础内存分配器，可以有效地处理短暂的短期分配。此样式是使用具有此属性的语言开发的，在缺少此功能的语言中无法有效工作。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;dart&quot;&gt;Dart&lt;/h2&gt;
&lt;p&gt;以下是Dart功能的列表，这些功能对于Flutter来说是必不可少：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Dart是AOT（Ahead Of Time）编译的，编译成快速，可预测的本机代码，几乎所有Flutter都可以用Dart编写。这不仅使Flutter更快，而且几乎所有内容（包括所有小部件）都可以自定义。&lt;/li&gt;
&lt;li&gt;Dart还可以通过JIT（Just In Time）进行编译，以实现异常快速的开发周期和改变游戏规则的工作流（包括Flutter亚秒级有状态热重装）。&lt;/li&gt;
&lt;li&gt;Dart使创建以60fps运行的平滑动画和过渡更加容易。Dart可以在没有锁的情况下进行对象分配和垃圾回收。与JavaScript一样，Dart避免了抢先式调度和共享内存（从而避免了锁定）。因为Flutter应用程序已编译为本机代码，所以它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript与本机之间）。它们的启动速度也快得多。&lt;/li&gt;
&lt;li&gt;Dart允许Flutter避免使用像JSX或XML这样的声明式布局语言，也不需要单独的可视化界面构建器，因为Dart的声明式程序化布局易于阅读和可视化。而且，由于所有布局都以一种语言和一种位置显示，因此Flutter可以轻松地提供使布局变得轻松的高级工具。&lt;/li&gt;
&lt;li&gt;开发人员发现Dart特别易于学习，因为它具有静态和动态语言用户都熟悉的功能。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;并非所有这些功能都是Dart独有的，但是它们的结合达到了一个&lt;em&gt;甜蜜点&lt;/em&gt;，这使得Dart在实施Flutter方面具有独特的功能。如此之多，很难想象Flutter会像没有Dart一样强大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202005/467322-20200512080138879-244947943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;编译与执行&quot;&gt;编译与执行&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果您已经了解静态和动态语言，AOT和JIT编译以及虚拟机等主题，则可以跳过本节。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从历史上看，计算机语言已分为两类：&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiled_language&quot;&gt;&lt;em&gt;静态&lt;/em&gt;语言&lt;/a&gt;（例如，Fortran或C，其中在编译时静态键入变量）和&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreted_language&quot;&gt;&lt;em&gt;动态&lt;/em&gt;语言&lt;/a&gt;（例如，Smalltalk或JavaScript，其中，变量的类型可以在运行时更改）时间）。通常会编译静态语言，以生成目标计算机的本机代码（或&lt;em&gt;汇编代码&lt;/em&gt;）程序，这些程序在运行时由硬件直接执行。动态语言由解释器执行，而不会产生机器语言代码。&lt;/p&gt;
&lt;p&gt;当然，后来事情变得更加复杂。虚拟机（VM）的概念变得很流行，它实际上只是一种模仿软件中的硬件机器的高级解释器。虚拟机可以更轻松地将语言移植到新的硬件平台。在这种情况下，VM的输入语言通常是中间语言。例如，一种编程语言（例如Java）被编译成一种中间语言（&lt;em&gt;字节码&lt;/em&gt;），然后在VM（JVM）上执行。&lt;/p&gt;
&lt;p&gt;另外，现在有即时（JIT）编译器。JIT编译器会在程序执行期间运行，并进行即时编译。在程序创建期间（运行时之前）执行的原始编译器现在称为提前（AOT）编译器。&lt;/p&gt;
&lt;p&gt;通常，只有静态语言才适合将AOT编译为本机机器代码，因为机器语言通常需要知道数据的类型，而在动态语言中，类型不是预先固定的。因此，通常会解释动态语言或编译JIT。&lt;/p&gt;
&lt;p&gt;在开发过程中 AOT 编译，开发周期（从更改程序到能够执行程序以查看更改结果的时间）总是很慢。但是 AOT 编译产生的程序可以更可预测地执行，并且运行时不需要停下来分析和编译。AOT 编译的程序也更快地开始执行（因为它们已经被编译）。&lt;/p&gt;
&lt;p&gt;相反，JIT编译可提供更快的开发周期，但会导致执行速度较慢或更加不稳定。特别是，JIT编译器的启动时间较慢，因为在程序开始运行时，JIT编译器必须在执行代码之前进行分析和编译。研究表明，如果开始执行需要花费几秒钟的时间，那么很多人就会放弃该应用程序。&lt;/p&gt;
&lt;p&gt;以上就是 AOT 和 JIT 相关知识，将 AOT 和 JIT 编译的优点结合起来不是很棒吗？而Dart就是通过支持AOT 和 JIT 两种类型的编译而带来显著的优势。&lt;/p&gt;
&lt;h2 id=&quot;编译并执行dart&quot;&gt;编译并执行Dart&lt;/h2&gt;
&lt;p&gt;在研究Dart之前，Dart团队的成员已经在高级编译器和虚拟机上进行了开创性的工作，既针对动态语言（如JavaScript 的&lt;strong&gt;V8引擎&lt;/strong&gt;，针对Smalltalk的&lt;strong&gt;Strongtalk&lt;/strong&gt;）又针对静态语言（如Java 的&lt;strong&gt;Hotspot编译器&lt;/strong&gt;）。他们利用这种经验使Dart在如何进行编译和执行方面异常灵活。&lt;/p&gt;
&lt;p&gt;Dart是极少数适合于同时编译AOT和JIT的语言之一。支持这两种编译为Dart和（尤其是Flutter）提供了明显的优势。&lt;/p&gt;
&lt;p&gt;在开发过程中使用JIT编译，使用的编译器特别快。然后，当应用程序准备发布时，将对其进行AOT编译。因此，借助先进的工具和编译器的帮助下，提供两全其美的方案：极快的开发周期，并快速执行和启动时间。&lt;/p&gt;
&lt;p&gt;Dart在编译和执行方面的灵活性不止于此。例如，Dart可以&lt;strong&gt;编译为JavaScript&lt;/strong&gt;以便浏览器可以执行。这允许在移动应用程序和Web应用程序之间重复使用代码。开发人员报告说，他们的移动和Web应用程序之间的代码复用率高达70％。通过将Dart编译成本机代码，或编译成JavaScript并将其与node.js结合使用，也可以在服务器上使用Dart 。&lt;/p&gt;
&lt;p&gt;最后，Dart还提供了一个独立的VM，该VM使用Dart语言本身作为其中间语言（本质上像解释器一样工作）。&lt;/p&gt;
&lt;p&gt;Dart可以有效地编译AOT或JIT，解释或转换为其他语言。Dart的编译和执行不仅异常灵活，而且&lt;em&gt;速度&lt;/em&gt;特别&lt;em&gt;快&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&quot;有状态热重载&quot;&gt;有状态热重载&lt;/h2&gt;
&lt;p&gt;Flutter最受欢迎的功能之一是其极快的热重载。在开发期间，Flutter使用JIT编译器，该编译器通常可以在一秒钟内重新加载并继续执行代码。只要有可能，应用状态就会在每次重新加载时保持不变，因此该应用可以从中断处继续运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202005/467322-20200512080140293-405554231.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除非您亲自体验过，否则很难理解真正快速（可靠）的热重载在开发过程中有多重要。Flutter的热加载功能使尝试新想法或尝试替代方法变得容易得多，极大地促进了创造力。&lt;/p&gt;
&lt;p&gt;以下是一位移动应用程序开发人员对Flutter 热重载的评价：&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;我想测试热重载，所以我改变了颜色，保存修改，结果……就喜欢上它了❤！&lt;/p&gt;
&lt;p&gt;这个功能真的很棒。我曾认为 Visual Studio 中&lt;strong&gt;编辑和继续&lt;/strong&gt;（Edit &amp;amp; Continue）很好用，但这简直&lt;strong&gt;令人惊叹&lt;/strong&gt;。有了这个功能，我认为移动开发者的生产力可以提高两倍。&lt;/p&gt;
&lt;p&gt;这对我来说真的是翻天覆地的变化。当我部署代码并花费很长时间时，我分心了，做了其他事情，当我回到模拟器 / 设备时，我就忘了想测试的内容。有什么比花 5 分钟将控件移动 2px 更令人沮丧？有了 Flutter，这不再存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;避免卡顿&quot;&gt;避免卡顿&lt;/h2&gt;
&lt;p&gt;一个快速的应用程序是伟大的，但&lt;em&gt;流畅的&lt;/em&gt;应用程序，甚至更好。即使是超级快的动画，如果看起来很生涩，也会看起来很糟糕。但是，防止卡顿可能很困难，因为因素太多。Dart 有许多功能可以避免许多常见的导致卡顿的因素。&lt;/p&gt;
&lt;p&gt;当然，（像任何语言一样）仍然可以在Flutter中编写一个简陋的应用程序。Dart更具可预测性，可帮助开发人员更好地控制其应用的平滑度，从而更轻松地提供最佳的用户体验，无所不能。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Flutter创建的用户界面以60 fps的速度运行，其性能远优于其他跨平台开发框架创建的用户界面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不仅比跨平台应用程序更好，而且与最佳本机应用程序一样好：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;用户界面非常流畅……我从未见过如此流畅的Android应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;aot汇编和桥梁&quot;&gt;AOT汇编和“桥梁”&lt;/h2&gt;
&lt;p&gt;我们讨论过一个有助于保持顺畅的特性，那就是 Dart 能 AOT 编译为本地机器码。预编译的 AOT 代码比 JIT 更具可预测性，因为在运行时不需要暂停执行 JIT 分析或编译。&lt;/p&gt;
&lt;p&gt;但是，AOT编译代码有一个更大的优势，那就是避免了“ JavaScript桥梁”。当动态语言（例如JavaScript）需要与平台上的本机代码进行互操作时，它们必须通过网桥进行通信，这会导致上下文切换必须保存大量的状态（可能保存到辅助存储）。这些上下文切换是双重打击，因为它们不仅使速度变慢，而且可能导致严重的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202005/467322-20200512080140791-879761865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：即使编译的代码也可能需要与平台代码进行对话的接口，这也可以称为桥接，但是通常比动态语言所需的桥接要快几个数量级。此外，由于Dart允许将小部件之类的内容移入应用程序，因此减少了跨过桥梁的需要。&lt;/p&gt;
&lt;h2 id=&quot;抢先式调度，时间分片和共享资源&quot;&gt;抢先式调度，时间分片和共享资源&lt;/h2&gt;
&lt;p&gt;大多数支持多个并发执行线程的计算机语言（包括Java，Kotlin，Objective-C和Swift）都使用抢占线程之间进行切换。每个线程都分配了一个“执行时间”，如果超过了分配的时间，则使用上下文切换来抢占该线程。但是，如果在更新线程（例如内存）之间共享的资源时发生了抢占，则这会导致争用条件。&lt;/p&gt;
&lt;p&gt;竞争状况是双重打击，因为它们可能导致严重的错误，包括使应用程序崩溃并导致数据丢失，而且由于依赖于独立线程的相对时间，因此特别难以查找和修复它们。在调试器中运行应用程序时，竞争条件会停止表现出来，这很常见。&lt;/p&gt;
&lt;p&gt;解决争用条件的典型方法是使用防止其他线程执行的锁来保护共享资源，但是锁本身可能会导致棘手甚至更严重的问题（包括&lt;a href=&quot;https://en.wikipedia.org/wiki/Deadlock&quot;&gt;死锁&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/Starvation_(computer_science)&quot;&gt;饥饿&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;Dart 采取了不同的方法来解决这个问题。Dart 中的线程称为 isolate，不共享内存，从而避免了大多数锁。isolate 通过在通道上传递消息来通信，这与 &lt;a href=&quot;https://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt; 中的 actor 或 JavaScript 中的 Web Worker 相似。&lt;/p&gt;
&lt;p&gt;Dart和JavaScript一样，都是&lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_(computing)#Single_threading&quot;&gt;单线程的&lt;/a&gt;，这意味着它根本不允许抢占。相反，线程显式地产生（使用&lt;a href=&quot;https://www.dartlang.org/tutorials/language/futures&quot;&gt;async / await，Futures&lt;/a&gt;或&lt;a href=&quot;https://www.dartlang.org/tutorials/language/streams&quot;&gt;Streams&lt;/a&gt;）。这使开发人员可以更好地控制执行。单线程可帮助开发人员确保关键功能（包括动画和过渡）在没有抢占的情况下得以执行。这不仅对用户界面，而且对于其他客户端-服务器代码，通常都是一个很大的优势。&lt;/p&gt;
&lt;p&gt;当然，如果开发人员忘记放弃控制，这可能会延迟其他代码的执行。但是，我们发现，忘记屈服通常比忘记锁定容易得多（因为很难找到竞争条件）。&lt;/p&gt;
&lt;h2 id=&quot;对象分配和垃圾回收&quot;&gt;对象分配和垃圾回收&lt;/h2&gt;
&lt;p&gt;造成垃圾的另一个严重原因是垃圾收集。确实，这只是访问共享资源（内存）的一种特殊情况，在许多语言中，这都需要使用锁。但是在收集可用内存时，锁可能会阻止整个应用程序运行。但是，Dart几乎可以在&lt;em&gt;没有锁&lt;/em&gt;的情况下几乎始终执行垃圾回收。&lt;/p&gt;
&lt;p&gt;Dart 使用先进的&lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_.28ephemeral_GC.29&quot;&gt;分代垃圾回收和对象分配方案&lt;/a&gt;，该方案对于分配许多短期对象（对于Flutter 这样的反应式用户界面来说非常完美，Flutter 为每帧重建不可变视图树）而言非常快。Dart 可以用一个指针凹凸分配一个对象（无需锁定）。这将导致平滑的滚动和动画效果，而不会产生现卡顿。&lt;/p&gt;
&lt;h2 id=&quot;统一布局&quot;&gt;统一布局&lt;/h2&gt;
&lt;p&gt;Dart的另一个好处是Flutter不会在您的程序和其他模板化或布局语言（例如JSX或XML）之间拆分布局，也不需要单独的可视化布局工具。这是用Dart编写的简单Flutter视图：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Center(child:
  Column(children: [
    Text('Hello, World!'),
    Icon(Icons.star, color: Colors.green),
  ])
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202005/467322-20200512080141017-1147446355.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是，我知道您可能在想什么- &lt;em&gt;缺少&lt;/em&gt;专门的布局语言如何被称为&lt;em&gt;优势&lt;/em&gt;？但它确实是颠覆性的。这是开发人员在题为“ &lt;a href=&quot;https://hackernoon.com/why-native-app-developers-should-take-a-serious-look-at-flutter-e97361a1c073&quot;&gt;为什么本机应用程序开发人员应认真看待Flutter&lt;/a&gt; ” 的文章中写的。&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;在 Flutter 里，界面布局直接通过 Dart 编码来定义，不需要使用 XML 或模板语言，也不需要使用可视化设计器之类的工具。&lt;/p&gt;
&lt;p&gt;我的预感是，听到这个消息后，你们中的一些人甚至会畏缩一点。表面看来，这也是我的反应。使用视觉工具进行布局难道不是一件容易的事。用代码编写各种约束逻辑会不会使事情变得过于复杂？&lt;/p&gt;
&lt;p&gt;结果不然。天啊，它简直让我大开眼界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答案的第一部分是上面提到的热重载。&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;这比 Android 的 Instant Run 和任何类似解决方案不知道要领先多少年。对于大型的应用同样适用。如此快的速度，正是 Dart 的优势所在。&lt;/p&gt;
&lt;p&gt;实际上，可视化编辑器就变得多余了。我一点都不怀恋 XCode 的自动重布局。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dart 创建的布局简洁且易于理解，而“超快”的热重载可立即看到结果。这包括布局的非静态部分。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;结果，在 Flutter 中进行布局要比在 Android/XCode 中快得多。一旦你掌握了它（我花了几个星期），由于很少发生上下文切换，因此会节省大量的开销。不必切换到设计模式，选择鼠标并开始点击，然后想是否有些东西必须通过编程来完成，如何实现等等。因为一切都是程序化的。而且这些 API 设计得非常好。它很直观，并且比自动布局 XML 更强大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，下面是一个简单的列表布局，该列表布局以编程方式定义的所有其他项目之间添加了分隔线（水平线）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;return new ListView.builder(itemBuilder: (context, i) {
  if (i.isOdd) return new Divider(); 
  // rest of function
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 Flutter 中，无论是静态布局还是编程布局，所有布局都存在于同一个位置。&lt;a href=&quot;https://groups.google.com/forum/#!topic/flutter-dev/lKtTQ-45kc4&quot;&gt;新的Dart 工具&lt;/a&gt;，包括Flutter Inspector 和大纲视图（利用所有的布局定义都在代码里）使复杂而美观的布局更加容易。&lt;/p&gt;
&lt;h2 id=&quot;dart是专有语言吗？&quot;&gt;Dart是专有语言吗？&lt;/h2&gt;
&lt;p&gt;不，Dart（如 Flutter）是完全开源的，具备清楚的许可证，同时也是 &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-408.htm&quot;&gt;ECMA 标准&lt;/a&gt;的。Dart 在 Google 内外很受欢迎。在谷歌内部，它是增长最快的语言之一，并被 Adwords、Flutter、 &lt;a href=&quot;https://github.com/fuchsia-mirror&quot;&gt;Fuchsia&lt;/a&gt; 和其他产品使用；在谷歌外部，Dart 代码库有超过 100 个外部提交者。&lt;/p&gt;
&lt;p&gt;Dart开放性的更好指标是Google以外社区的发展。例如，我们看到来自第三方的Dart文章和视频源源不断（包括Flutter和AngularDart），我在本文中引用了其中的一些。&lt;/p&gt;
&lt;p&gt;除了Dart本身的外部提交者之外，&lt;a href=&quot;https://pub.dartlang.org/&quot;&gt;公共Dart软件包存储库中&lt;/a&gt;还有3000多个软件包，包括Firebase，Redux，RxDart，国际化，加密，数据库，路由，集合等的库。&lt;/p&gt;
&lt;h2 id=&quot;dart程序员会容易找到吗？&quot;&gt;Dart程序员会容易找到吗？&lt;/h2&gt;
&lt;p&gt;如果没有很多程序员知道Dart，找到合格的程序员会更困难吗？当然不是，Dart使它更容易找到程序员，因为它是一种非常快速且易于学习的语言。Java，JavaScript，Kotlin，C＃或Swift等语言的程序员几乎可以立即在Dart中开始编程。最重要的是，热重载鼓励用户玩Dart并尝试新事物，这使得学习Dart更快，更愉快。&lt;/p&gt;
&lt;p&gt;这是一个程序员在题为“ &lt;a href=&quot;https://codeburst.io/why-flutter-will-take-off-in-2018-bbd75f8741b0&quot;&gt;为什么Flutter将在2018年腾飞&lt;/a&gt; ”的文章中所说的：&lt;/p&gt;
&lt;blockquote readability=&quot;6.5491525423729&quot;&gt;
&lt;p&gt;Dart是用于开发Flutter应用程序的语言&lt;strong&gt;，学习起来&lt;/strong&gt;很容易。Google拥有创建简单，记录良好的语言（例如Go）的经验。到目前为止，对我而言，Dart使我想起了Ruby，这是一种学习的乐趣。它不仅适用于移动设备，也&lt;a href=&quot;https://webdev.dartlang.org/&quot;&gt;适用于Web 开发&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一篇关于Flutter和Dart的文章，标题为“ &lt;a href=&quot;https://medium.com/@franzsilva/why-flutter-and-not-framework-x-or-better-yet-why-im-going-flutter-all-in-b484ecb25336&quot;&gt;为什么要Flutter？而不是框架X？甚至更好，为什么我要全力以赴。&lt;/a&gt; ”&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Flutter使用由Google创建的Dart语言，说实话，我不喜欢C＃或JAVA之类的强类型语言，但我不知道Dart编写代码的方式为什么看起来有所不同。我写起来很舒服。也许是因为它非常简单易学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过广泛的UX研究和测试，Dart专门设计为熟悉且易于学习。例如，在2017年上半年，Flutter团队与八名开发人员进行了UX研究。我们向他们简要介绍了Flutter，然后将它们松散了一个小时左右，以创建一个简单的视图。所有参与者都能够立即开始编程，即使他们以前从未使用过Dart。他们专注于编写响应式视图，而不是语言。Dart 直接就能上手用了。&lt;/p&gt;
&lt;p&gt;最后，一位参与者（在任务中取得了特别大的进步）没有提及该语言，因此我们询问他们是否意识到自己使用的是哪种语言。他们不知道。语言没关系 ; 他们在几分钟内就可以在Dart中编程。&lt;/p&gt;
&lt;p&gt;学习新系统的难点通常不是学习语言，而是学习所有编写好的代码的库，框架，工具，模式和最佳实践。而且Dart库和工具都非常出色，并且文档齐全。&lt;a href=&quot;https://hn.svelte.technology/item/15416892&quot;&gt;一篇文章宣称&lt;/a&gt;：“作为奖励，他们还非常注意自己的代码库，并且拥有我见过的最好的文档。” 学习Dart只需花很少的精力就可以通过节省学习其余时间的时间来弥补。&lt;/p&gt;
&lt;p&gt;作为直接的证据，Google内部的一个大型项目希望将其移动应用程序移植到iOS。他们打算雇用一些iOS程序员，但决定尝试Flutter。他们监控了使开发人员快速掌握Flutter所花费的时间。他们的结果表明，程序员可以在三周内学习Dart &lt;em&gt;和&lt;/em&gt; Flutter并提高工作效率。相比之下，他们之前观察到的五个星期可以使程序员仅在Android上就可以上手（更不用说他们必须雇用和培训iOS的开发人员）。&lt;/p&gt;
&lt;p&gt;最后，文章“ &lt;a href=&quot;https://medium.com/@matthew.smith_66715/why-we-chose-flutter-and-how-its-changed-our-company-for-the-better-271ddd25da60&quot;&gt;我们为什么选择Flutter以及它如何使我们的公司变得更好&lt;/a&gt; ”来自一家将大型企业应用程序迁移到所有三个平台（iOS，Android和Web）上的Dart的公司。他们的结论：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;招人变得容易多了。无论他们是来自 Web、iOS 还是 Android，我们现在都希望接受最佳人选。&lt;/p&gt;
&lt;p&gt;现在我们拥有 3 倍的工作效率，因为我们所有的团队都集中在一个代码库上。&lt;/p&gt;
&lt;p&gt;知识共享达到前所未有的高度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过使用Dart和Flutter，他们能够将&lt;em&gt;生产力&lt;/em&gt;提高&lt;em&gt;三倍&lt;/em&gt;。鉴于他们之前所做的事情，这不足为奇。与许多公司一样，他们正在使用&lt;em&gt;独立的语言，工具和程序员&lt;/em&gt;为每个平台（Web，iOS和Android）构建独立的应用&lt;em&gt;程序&lt;/em&gt;。改用Dart意味着他们不再需要雇用三种不同的程序员。对于他们来说，将现有的程序员转移到Dart上很容易。&lt;/p&gt;
&lt;p&gt;他们和其他人发现，一旦程序员开始使用Flutter，他们通常会爱上Dart。他们喜欢语言的简洁性和缺乏仪式感。他们喜欢语言功能，例如级联，命名参数，异步/等待和流。最重要的是，他们喜欢Dart所提供的Flutter功能（例如热重载），而Dart帮助他们构建的漂亮，高性能的应用程序。&lt;/p&gt;
&lt;h2 id=&quot;秘诀就是专注&quot;&gt;秘诀就是专注&lt;/h2&gt;
&lt;p&gt;Dart 2中的改进集中在优化客户端开发上。但是Dart仍然是构建服务器端，台式机，嵌入式系统或其他程序的绝佳语言。&lt;/p&gt;
&lt;p&gt;专注是&lt;em&gt;一件好事&lt;/em&gt;。专注于几乎可以使所有持久的流行语言受益。例如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;C是用于编写操作系统和编译器的系统编程语言。它变得更多了。&lt;/li&gt;
&lt;li&gt;Java是&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(software_platform)#History&quot;&gt;为嵌入式系统设计&lt;/a&gt;的语言。&lt;/li&gt;
&lt;li&gt;JavaScript是Web浏览器的脚本语言（！）。&lt;/li&gt;
&lt;li&gt;甚至备受反对的PHP也成功了，因为它专注于编写“个人主页”（并以此为名）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;另一方面，许多语言已经明确尝试（但失败）成为完全通用的语言，例如PL / 1和Ada等。最常见的问题是，&lt;em&gt;没有集中注意力&lt;/em&gt;，这些语言就成了众所周知的厨房水槽。&lt;/p&gt;
&lt;p&gt;使Dart成为出色的客户端语言的许多功能也使它成为服务器端使用的更好语言。例如，Dart避免了抢先式多任务这一事实使它具有与服务器上的Node相同的优势，但打字效果更好，更安全。&lt;/p&gt;
&lt;p&gt;为嵌入式系统编写软件也是如此。Dart可靠地处理多个并发输入的能力是关键。&lt;/p&gt;
&lt;p&gt;最后，Dart在客户端上的成功将不可避免地引起更多在服务器上使用它的兴趣-就像JavaScript和Node发生的情况一样。为什么要强迫人们使用两种不同的语言来构建客户端服务器软件？&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;这对于 Dart 来说是一个激动人心的时刻。使用 Dart 的人喜欢它，而 Dart 2 中的新特性使其成为你工具库中更有价值的补充。如果您没有使用Dart，希望本文为您提供有关Dart的新功能或不同之处的有价值的信息，并且您可以尝试使用它和Flutter。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看英文原文：&lt;/strong&gt; &lt;a href=&quot;https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf&quot;&gt;https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;交流&quot;&gt;交流&lt;/h2&gt;
&lt;p&gt;老孟Flutter博客地址（近200个控件用法）：&lt;a href=&quot;http://laomengit.com&quot;&gt;http://laomengit.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎加入Flutter交流群（微信：laomengit）、关注公众号【老孟Flutter】：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th/&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202005/467322-20200512080141436-60369077.png&quot; alt=&quot;&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202005/467322-20200512080141792-1663931057.png&quot; alt=&quot;&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Tue, 12 May 2020 00:02:00 +0000</pubDate>
<dc:creator>老孟Flutter</dc:creator>
<og:description>老孟导读：关于 Flutter为什么使用Dart? 这个话题，就像 PHP是世界上最好的语言 一样，争论从来没有停止过，有很多说法，比如： Google是为了推广Dart，Dart是亲儿子。 Flut</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/mengqd/p/12873998.html</dc:identifier>
</item>
<item>
<title>百行以内实现复杂数学表达式计算 - 陈能豆</title>
<link>http://www.cnblogs.com/cndccm/p/12864790.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cndccm/p/12864790.html</guid>
<description>&lt;p&gt;一改以前&lt;/p&gt;
&lt;p&gt;本次先上代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; good;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Evaluate complex expressions&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Scanner;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Example {

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] arg) {//test

    Scanner in &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Scanner(System.in);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    String one = in.next();&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      System.out.println(&lt;/span&gt;&quot;(1.5+1)+(1+1)=&quot; + RemoveBrackets(&lt;span&gt;new&lt;/span&gt; StringBuffer(&quot;(1.5+1)+(1+1)&quot;&lt;span&gt;)));
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
      System.out.println(&lt;/span&gt;&quot;Please check if the expression is valid if there is an error&quot;&lt;span&gt;);
    }
  }

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; RemoveBrackets(StringBuffer a) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Bracket removal method&lt;/span&gt;

    &lt;span&gt;while&lt;/span&gt; (a.toString().indexOf('(') != -1&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = a.toString().indexOf('('&lt;span&gt;);
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; j = GetBracketPosition(a.toString(), i + 1&lt;span&gt;);
      String to &lt;/span&gt;= a.toString().substring(i + 1&lt;span&gt;, j);
      a.replace(i, j &lt;/span&gt;+ 1, String.valueOf(RemoveBrackets(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer(to))));
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; OnlyMultiplication(a.toString());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算除乘法以外的算式&lt;/span&gt;
&lt;span&gt;  }


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;A method for calculating addition, subtraction, multiplication, and division without parentheses&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; OnlyMultiplication(String a) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;To eliminate the formula other than multiplication&lt;/span&gt;

    &lt;span&gt;char&lt;/span&gt;[] b =&lt;span&gt; a.toCharArray();
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; a.length(); i++) {&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;I'm going to check the addition and subtraction because I'm going to multiply and divide and then I'm going to add and subtract&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

      &lt;span&gt;if&lt;/span&gt; (b[i] == '+'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; OnlyMultiplication(a.substring(0, i)) + OnlyMultiplication(a.substring(i + 1));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Prevent double parenthesis&lt;/span&gt;
&lt;span&gt;      }

      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (b[i] == '-'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; OnlyMultiplication(a.substring(0, i)) - OnlyMultiplication(a.substring(i + 1&lt;span&gt;));
      }
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;So let's go over here and do the subtraction and the subtraction
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;That means there's no plus or minus sign
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;A separate multiplication or division&lt;/span&gt;
    String[] sum1 = a.split(&quot;/&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;The second half of this method is to remove the division sign&lt;/span&gt;

    &lt;span&gt;double&lt;/span&gt; too = Double.valueOf(CalculateMultiplication(sum1[0&lt;span&gt;]));
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; sum1.length; i++&lt;span&gt;) {
      too &lt;/span&gt;= too * 1.0 /&lt;span&gt; Double.valueOf(sum1[i]);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; too;
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;So the only way to multiply is to multiply&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; CalculateMultiplication(String aaa) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Remove the multiplication sign&lt;/span&gt;
    &lt;span&gt;double&lt;/span&gt; to = 1.0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (aaa.indexOf('*') == -1) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Without a multiplication sign&lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Double.valueOf(aaa);
    }
    String[] too &lt;/span&gt;= aaa.split(&quot;\\*&quot;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; too.length; i++&lt;span&gt;) {
      to &lt;/span&gt;= to *&lt;span&gt; Double.valueOf(too[i]);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; to;
  }

  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; GetBracketPosition(String a, &lt;span&gt;int&lt;/span&gt; b) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Find the corresponding close parenthesis position&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; count1 = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count2 = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;[] aa =&lt;span&gt; a.toCharArray();
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = b; i &amp;lt; a.length(); i++&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (aa[i] == '(') {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Prevent double parenthesis&lt;/span&gt;
        count1++&lt;span&gt;;
      }
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (aa[i] == ')'&lt;span&gt;) {
        count2&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (count2 ==&lt;span&gt; count1) {
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
        }
      }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是运行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1854053/202005/1854053-20200512002114010-1994695624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;OK  代码可以先看一下     相信肯定有人能够不靠解析   直接看懂&lt;/p&gt;
&lt;p&gt;下面我来具体的一行一行的解释我的代码&lt;/p&gt;
&lt;p&gt;先说一下具体思路&lt;/p&gt;
&lt;p&gt;我们先考虑括号的问题     因为括号内容优先计算&lt;/p&gt;
&lt;p&gt;当我们吧所有括号里面的内容处理好之后     我们用计算的结果替换掉括号以及里面的表达式&lt;/p&gt;
&lt;p&gt;我们下面会将那种不带括号的表达式是怎样计算的&lt;/p&gt;
&lt;p&gt;当然  必须要提示的一点    不排除会有双层括号情况的出现   所以我们要对拆分出来的括号里面分表达式在进行一次括号检测     当检测到没有括号的时候   我们才调用无括号表达式计算方法   计算表达式的最终结果&lt;/p&gt;

&lt;p&gt;OK  下面我们进入无括号表达式计算方法的解释环节&lt;/p&gt;
&lt;p&gt;现在强调一下  我们已经完成括号处理  &lt;/p&gt;
&lt;p&gt;我们的表达式里只有加减乘除的简单运算&lt;/p&gt;

&lt;p&gt;我们就以加号和减号为分界线    &lt;/p&gt;
&lt;p&gt;这样就成功吧式子拆成了要么是乘除运算  要么是单独是数    这样处理起来是不是就方便的太多太多了&lt;/p&gt;
&lt;p&gt;哈哈哈哈   香不香&lt;/p&gt;

&lt;p&gt;OK  我们的解析就到这&lt;/p&gt;
&lt;p&gt;当然 方法肯定不止一种    比我这个方法好的方法也肯定多了去了       &lt;/p&gt;
&lt;p&gt;不喜勿喷&lt;/p&gt;

</description>
<pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
<dc:creator>陈能豆</dc:creator>
<og:description>一改以前 本次先上代码 package good; //Evaluate complex expressions import java.util.Scanner; public class Exam</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cndccm/p/12864790.html</dc:identifier>
</item>
<item>
<title>工作两年简历写成这样，谁要你呀！ - 小傅哥</title>
<link>http://www.cnblogs.com/xiaofuge/p/12873972.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaofuge/p/12873972.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200412095159731.jpg#pic_center&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;作者：小傅哥&lt;br/&gt;博客：&lt;a href=&quot;https://bugstack.cn/&quot;&gt;https://bugstack.cn&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;沉淀、分享、成长，让自己和他人都能有所收获！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;最近有伙伴问&lt;code&gt;小傅哥&lt;/code&gt;，我的简历怎么投递了都没有反应，心里慌的很呀。&lt;/p&gt;
&lt;p&gt;工作两年了目前的公司没有什么大项目，整天的维护别人的代码，有坑也不让重构，都烦死了。荒废我一身技能无处施展，投递的简历也没人看。我是不动物园里的猩猩，&lt;code&gt;狒狒了&lt;/code&gt;！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我要加班，我要996，我要疯狂编码，求给我个机会...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在程序这条职业发展的道路上，如果想专心走技术，并不断提升自己。&lt;em&gt;那么&lt;/em&gt;，选择进入一个有挑战项目和一个可以跟随学技术的人，是非常重要的。而这样的资源和人脉基本还是来自一些较大型的公司，如果在前两年因为学历或者某些原因没有能进入，那么在2年后还是可以试一试的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;至少&lt;/strong&gt;，你敢走出来，愿前程美好皆因你不断拼搏！&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;接下来我们看一份小伙伴的简历，并对内容和排版上进行优化。以及整理相应的面试点做准备，帮助这位小伙伴尽早找到心仪公司。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;面试，也是一次相亲。不认识你之前我要看脸(简历)、见了面我要走心(我来问你来答)&lt;/em&gt;。那么简历写不好，相应的内容又没做好准备，你不失败谁失败。&lt;/p&gt;
&lt;h2 id=&quot;二、我的简历都石沉大海&quot;&gt;二、我的简历都石沉大海&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这是一份模拟真实的简历，如下；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9idWdzdGFjay5jbi9hc3NldHMvaW1hZ2VzLzIwMjAvaXRzdGFjay1jb2RlLWxpZmUtMDMtMDEucG5n?x-oss-process=image/format,png&quot; alt=&quot;修改前的word简历&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这份简历有哪些问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;简历格式不规整，由于是 &lt;code&gt;word&lt;/code&gt; 格式在不同版本下展示可能有不兼容的问题。所以非常建议写成 &lt;code&gt;pdf&lt;/code&gt; 格式的简历。&lt;/li&gt;
&lt;li&gt;个人信息联系方式中没有写邮箱，因为在面试前会发一些约面邀请函到个人邮箱中。&lt;/li&gt;
&lt;li&gt;技能描述缺少不完整并缺少核心内容，及时简历通过，面试官与你也没有太多的话题。&lt;/li&gt;
&lt;li&gt;项目经验描述不完整，并没有在项目中体现出个人的能力以及工作重点。这些都会影响与面试官的场景交流，如果你不留下可以聊的点，那么就等着被动的问。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上就是对这份简历的一些基本修改项，虽然是模拟真实的，但是这可能也几乎是大部分人的简历样式了。&lt;/p&gt;
&lt;h2 id=&quot;三、修改后电话约面不断&quot;&gt;三、修改后电话约面不断&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;修改后的简历如下，如果需要模板可以关注&lt;strong&gt;公众号&lt;/strong&gt;：&lt;code&gt;bugstack虫洞栈&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9idWdzdGFjay5jbi9hc3NldHMvaW1hZ2VzLzIwMjAvaXRzdGFjay1jb2RlLWxpZmUtMDMtMDIucG5n?x-oss-process=image/format,png&quot; alt=&quot;修改后的pdf简历&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好的简历是一次美好 &lt;code&gt;相亲&lt;/code&gt; 的开始，接下里就是对 &lt;code&gt;相亲&lt;/code&gt; 事项的准备。&lt;/p&gt;
&lt;h2 id=&quot;四、简历好也要做好准备&quot;&gt;四、简历好也要做好准备&lt;/h2&gt;
&lt;p&gt;虽然面试过程基本会问的点相差不太多，但是结合简历自身以及不同的面试官，都会聊出很多不一样的东西。所以不能完整回答出面试官的题目也没有关系，不用过于紧张，只要你能回答出 &lt;code&gt;80%&lt;/code&gt; 以上基本都可以通过到下一轮面试。&lt;/p&gt;
&lt;p&gt;那么，结合上面的简历，大概会有如下一些问题点可以聊；&lt;/p&gt;
&lt;h3 id=&quot;1-技术栈&quot;&gt;1. 技术栈&lt;/h3&gt;
&lt;h4 id=&quot;11-java基础&quot;&gt;1.1 Java基础&lt;/h4&gt;
&lt;p&gt;这种面试题基本不固定，主要考察你对 &lt;code&gt;java&lt;/code&gt; 基础的学习程度和理解能力，比如；&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;byte 占几个字节&lt;/li&gt;
&lt;li&gt;for循环与foreach&lt;/li&gt;
&lt;li&gt;java8的新特性&lt;/li&gt;
&lt;li&gt;hashmap的实现原理&lt;/li&gt;
&lt;li&gt;线程池和锁的使用和原理&lt;/li&gt;
&lt;li&gt;设计模式和面向对象&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;12-spring&quot;&gt;1.2 Spring&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;Spring的好处&lt;/li&gt;
&lt;li&gt;AOP 与 IOC&lt;/li&gt;
&lt;li&gt;Spring注解&lt;/li&gt;
&lt;li&gt;SpringBean加载过程&lt;/li&gt;
&lt;li&gt;SpringBean生命周期&lt;/li&gt;
&lt;li&gt;Spring中事务&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;13-mybaits&quot;&gt;1.3 Mybaits&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;Mybatis 的好处&lt;/li&gt;
&lt;li&gt;Mybaits 的缓存&lt;/li&gt;
&lt;li&gt;如何进行分页&lt;/li&gt;
&lt;li&gt;插件是怎么运行的&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;Mybatis 是否支持延迟加载？&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;14-rpc框架---dubbo&quot;&gt;1.4 Rpc框架 - Dubbo&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;通信模型是什么样&lt;/li&gt;
&lt;li&gt;怎么暴露服务的&lt;/li&gt;
&lt;li&gt;数据序列化方式&lt;/li&gt;
&lt;li&gt;Rpc框架还有哪些，有什么优缺点&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;15-redis&quot;&gt;1.5 Redis&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;redis 基本常用的方法&lt;/li&gt;
&lt;li&gt;分布式加锁&lt;/li&gt;
&lt;li&gt;主备同步&lt;/li&gt;
&lt;li&gt;RDB 与 AOF&lt;/li&gt;
&lt;li&gt;什么是缓存击穿&lt;/li&gt;
&lt;li&gt;集群&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;16-rabbitmq&quot;&gt;1.6 RabbitMQ&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;MQ 的好处&lt;/li&gt;
&lt;li&gt;MQ 发送失败怎么办&lt;/li&gt;
&lt;li&gt;MQ 的应用场景&lt;/li&gt;
&lt;li&gt;广播&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;17-netty&quot;&gt;1.7 Netty&lt;/h4&gt;
&lt;p&gt;Netty 应用在各个框架中非常广泛，例如Dubbo、MQ等，属于一块核心技能。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Netty 有什么好处&lt;/li&gt;
&lt;li&gt;多路复用&lt;/li&gt;
&lt;li&gt;流量切块&lt;/li&gt;
&lt;li&gt;数据整形&lt;/li&gt;
&lt;li&gt;编码也解码器&lt;/li&gt;
&lt;li&gt;半包粘包&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;2-源码理解&quot;&gt;2. 源码理解&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;对于一些java中的核心方法比如 hashmap、ArrayList 等的实现&lt;/li&gt;
&lt;li&gt;Spring 一些源码&lt;/li&gt;
&lt;li&gt;Mybatis 实现上的一些源码&lt;/li&gt;
&lt;li&gt;以及个人简历中写了的内容&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;3-工具使用&quot;&gt;3. 工具使用&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;linxu 常用命令，查日志、线程&lt;/li&gt;
&lt;li&gt;java 一些命令;jstack、jmap、jstat、javap等&lt;/li&gt;
&lt;li&gt;git 如何建分支（你说我就用过工具，显得就不专业了）&lt;/li&gt;
&lt;li&gt;监控工具、部署工具、压测工具等等，是一个知识面的拓展&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;4-项目经验&quot;&gt;4. 项目经验&lt;/h3&gt;
&lt;p&gt;项目方面完全依照个人在简历中提到的项目进行询问，但最好在项目中写出一些可以被拿来聊的点。比如这项目是做什么的、个人负责了那块、核心流程是什么、你解决过什么样的问题等等。&lt;/p&gt;
&lt;p&gt;如果是一些金融或者订单等，会有专门的面试内容，比如；清分、结算、幂等、多支付、对账、秒杀、发货、分布式锁、一致性等等。这些东西是编不来的，需要亲身经历，否则问不了几个问题，你就漏了。&lt;/p&gt;
&lt;p&gt;如果说你还没有一个什么像样的项目，那么可以去 &lt;code&gt;github&lt;/code&gt; 寻找，并学习。&lt;/p&gt;
&lt;h3 id=&quot;5-个人发展&quot;&gt;5. 个人发展&lt;/h3&gt;
&lt;p&gt;这个就是一个比较开放性的问题了，主要是面试的一个收尾，也收复心情。只要不聊的太&lt;em&gt;放飞自我&lt;/em&gt;，这里不是问题。&lt;/p&gt;
&lt;h2 id=&quot;五、系统的学习才能变强&quot;&gt;五、系统的学习才能变强&lt;/h2&gt;
&lt;p&gt;面试成功后和相亲走到结婚一样，日后的日子还是需要靠实力去过。&lt;/p&gt;
&lt;p&gt;研发人员的成长终究是需要系统的需求，无论从算法、源码、技术栈以及项目上，要不断的深挖、探索，我一直相信只要努力做一件事并坚持下来，一定会收获成绩。下面是&lt;code&gt;小傅哥&lt;/code&gt;学习成长博客记录，可以pc访问；&lt;a href=&quot;https://bugstack.cn&quot;&gt;https://bugstack.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9idWdzdGFjay5jbi9hc3NldHMvaW1hZ2VzLzIwMjAvaXRzdGFjay1jb2RlLWxpZmUtMDMtMDMucG5n?x-oss-process=image/format,png&quot; alt=&quot;小傅哥博客：bugstack虫洞栈&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;六、总结&quot;&gt;六、总结&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;可能会觉得我是在包装自己的吗？是的！只不过你是包的更加实，并补充自己的短板。通过面试事项的梳理，知道自己哪里不足并去完善。并不是背了几个题就能通过面试，而是为面试知道自己的短板尽快赶上。&lt;/li&gt;
&lt;li&gt;可能有人都已经工作几年了，简历还是写的一塌糊涂，word 格式发来打不开的都有（怀疑你的个人电脑多久没打开了也不更新，平时也不写代码了）。&lt;/li&gt;
&lt;li&gt;认真对待自己的将来，就是做好现在。从没有那个人一直努力还没有成绩，如果暂时没有就在努力试试。&lt;/li&gt;
&lt;li&gt;以上的简历模板，可以通过关注&lt;strong&gt;公众号&lt;/strong&gt;：&lt;code&gt;bugstack虫洞栈&lt;/code&gt;，回复14，进行获取&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzE0LzE3MGQ3MDQ0ZDFkNDNkMWI?x-oss-process=image/format,png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 23:43:00 +0000</pubDate>
<dc:creator>小傅哥</dc:creator>
<og:description>作者：小傅哥 博客： &amp;quot;https://bugstack.cn&amp;quot; 沉淀、分享、成长，让自己和他人都能有所收获！ 一、前言 最近有伙伴问 ，我的简历怎么投递了都没有反应，心里慌的很呀</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaofuge/p/12873972.html</dc:identifier>
</item>
<item>
<title>我去，你竟然还不会用 synchronized - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/12873966.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/12873966.html</guid>
<description>&lt;blockquote readability=&quot;5.6842105263158&quot;&gt;
&lt;p&gt;二哥，离你上一篇&lt;a href=&quot;https://mp.weixin.qq.com/s/fbTzH5B7mSr5v0tQ8mV2wA&quot;&gt;我去&lt;/a&gt;已经过去两周时间了，这个系列还不打算更新吗？着急着看呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是读者 Jason 发来的一条信息，不看不知道，一看真的是吓一跳，上次我去是 4 月 3 号更新的，离现在一个多月了，可不只是两周时间啊。可能我自己天天写，没觉得时间已经过去这么久了，是时候带来新的一篇“我去”了。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/05/java-synchronized-01.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;这次没有代码 review，是同事小王直接问我的，“青哥，能给我详细地说一说 synchronized 关键字怎么用吗？”他问的态度很谦逊，但我还是忍不住破口大骂：“我擦，小王，你丫的竟然不会用 synchronized，我当初是怎么面试你进来的！”&lt;/p&gt;
&lt;p&gt;（我笔名是沉默王二，读者都叫二哥，但在公司不是的，同事叫我青哥，想知道我真名的，可以搜《Web全栈开发进阶之路》）&lt;/p&gt;
&lt;p&gt;简单地说，当两个或者两个以上的线程同一时间要修改同一个可变的共享数据时，就需要一些保护措施，否则，共享数据修改后的结果大概率会超出你的预期。对于初学者来说，synchronized 关键字就是最好用的一种解决方案。&lt;/p&gt;
&lt;h3 id=&quot;h01&quot;&gt;&lt;span&gt;01、为什么需要保护&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;可能很多初学者不明白，为什么多线程环境下，可变共享变量修改后的结果会超出预期。为了解释清楚这一点，来看一个例子。&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;6&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SynchronizedMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; sum;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getSum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sum;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setSum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; sum)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.sum = sum;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;setSum(getSum() + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;SynchronizedMethod 是一个非常简单的类，有一个私有的成员变量 sum，对应的 getter/setter，以及给 sum 加 1 的 &lt;code&gt;calculate()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;然后，我们来给 &lt;code&gt;calculate()&lt;/code&gt; 方法写一个简单的测试用例。&lt;/p&gt;
&lt;p&gt;可能一些初学者还不知道怎么快速创建测试用例，我这里就手摸手地现场教学下。&lt;/p&gt;
&lt;p&gt;第一步，把鼠标移动到类名上，会弹出一个提示框。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/05/java-synchronized-02.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;第二步，点击「More actions」按钮，会弹出以下提示框。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/05/java-synchronized-03.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;第三步，选择「Create Test」，弹出创建测试用例的对话框。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/05/java-synchronized-04.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;选择最新的 JUnit5，如果项目之前没有引入 JUnit5 依赖的话，IDEA 会提醒你，点击 Fix，IDEA 会自动帮你添加，非常智能化。在对话框中勾选要创建测试用例的方法——&lt;code&gt;calculate()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;点击 OK 按钮后，IDEA 会在 src 的同级目录 test 下创建一个名为 SynchronizedMethodTest 的测试类：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SynchronizedMethodTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;calculate()&lt;/code&gt; 方法上会有一个 &lt;code&gt;@Test&lt;/code&gt; 的注解，表示这是一个测试方法。添加具体的代码，如下所示：&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;ExecutorService service = Executors.newFixedThreadPool(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);&lt;br/&gt;SynchronizedMethod summation = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SynchronizedMethod();&lt;p&gt;IntStream.range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;.forEach(count -&amp;gt; service.submit(summation::calculate));&lt;br/&gt;service.awaitTermination(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, TimeUnit.MILLISECONDS);&lt;/p&gt;&lt;p&gt;assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, summation.getSum());&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1）&lt;code&gt;Executors.newFixedThreadPool()&lt;/code&gt; 方法可以创建一个指定大小的线程池服务 ExecutorService。&lt;/p&gt;
&lt;p&gt;2）通过 &lt;code&gt;IntStream.range(0, 1000).forEach()&lt;/code&gt; 来执行 &lt;code&gt;calculate()&lt;/code&gt; 方法 1000 次。&lt;/p&gt;
&lt;p&gt;3）通过 &lt;code&gt;assertEquals()&lt;/code&gt; 方法进行判断。&lt;/p&gt;
&lt;p&gt;运行该测试用例，结果会是什么呢？&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/05/java-synchronized-05.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;很不幸，失败了。预期的值为 1000，但实际的值是 976。这是因为多线程环境下，可变的共享数据没有得到保护。&lt;/p&gt;
&lt;h3 id=&quot;h02synchronized&quot;&gt;&lt;span&gt;02、synchronized 的用法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这么说吧，初学者在遇到多线程问题时，只要 synchronized 关键字使用得当，问题就能够迎刃而解。记得我刚回洛阳的时候，面试官问我，项目中是怎么解决并发问题的呢？我就说用 synchronized 关键字，至于其他的一些锁机制，我那时候还不知道。&lt;/p&gt;
&lt;p&gt;嗯，面试官好像也不知道，因为小公司嘛，并发的量级有限，性能也不用考量得太过深入（大公司的读者可以呵呵了）。接下来，就随我来，一起看看 synchronized 最常见的三种用法吧。&lt;/p&gt;
&lt;p&gt;1）直接用在方法上，就像下面这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;synchronizedCalculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;setSum(getSum() + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改一下测试用例：&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;synchronizedCalculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;ExecutorService service = Executors.newFixedThreadPool(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);&lt;br/&gt;SynchronizedMethod summation = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SynchronizedMethod();&lt;p&gt;IntStream.range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;.forEach(count -&amp;gt; service.submit(summation::synchronizedCalculate));&lt;br/&gt;service.awaitTermination(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, TimeUnit.MILLISECONDS);&lt;/p&gt;&lt;p&gt;assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, summation.getSum());&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时候，再运行测试用例就通过了。因为 synchronized 关键字会对 SynchronizedMethod 对象进行加锁，同一时间内只允许一个线程对 sum 进行修改。这就好像有一间屋子，线程进入屋子里面才可以对 sum 加 1，而 synchronized 就相当于在门上加了一个锁，一个线程进去后就锁上门，修改完 sum 后，下一个线程再进去，其他线程就在门外候着。&lt;/p&gt;
&lt;p&gt;2）用在 static 方法上，就像下面这样：&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SynchronizedStaticMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; sum;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;synchronizedCalculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;sum = sum + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;sum 是一个静态变量，要修改静态变量的时候，就需要把方法也变成 static 的。&lt;/p&gt;
&lt;p&gt;来新建一个测试用例：&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SynchronizedStaticMethodTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;synchronizedCalculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;ExecutorService service = Executors.newFixedThreadPool(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);&lt;p&gt;IntStream.range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;.forEach(count -&amp;gt; service.submit(SynchronizedStaticMethod::synchronizedCalculate));&lt;br/&gt;service.awaitTermination(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, TimeUnit.MILLISECONDS);&lt;/p&gt;&lt;p&gt;assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, SynchronizedStaticMethod.sum);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;静态方法上添加 synchronized 的时候就不需要实例化对象了，直接使用类名就可以引用方法和使用变量了。测试用例也是可以通过的。&lt;/p&gt;
&lt;p&gt;synchronized static 和 synchronized 不同的是，前者锁的是类，同一时间只能有一个线程访问这个类；后者锁的是对象，同一时间只能有一个线程访问方法。&lt;/p&gt;
&lt;p&gt;3）用在方法块上，就像下面这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;synchronisedThis&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;) {&lt;br/&gt;setSum(getSum() + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时候，将 this 传递给了 synchronized 代码块，当在某个线程中执行这段代码块，该线程会获取 this 对象的锁，从而使得其他线程无法同时访问该代码块。如果方法是静态的，我们将传递类名代替对象引用，示例如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;synchronisedThis&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; (SynchronizedStaticMethod.class) {&lt;br/&gt;sum = sum + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建一个测试用例：&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;synchronisedThis&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;ExecutorService service = Executors.newFixedThreadPool(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);&lt;br/&gt;SynchronizedMethod summation = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SynchronizedMethod();&lt;p&gt;IntStream.range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;.forEach(count -&amp;gt; service.submit(summation::synchronisedThis));&lt;br/&gt;service.awaitTermination(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, TimeUnit.MILLISECONDS);&lt;/p&gt;&lt;p&gt;assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, summation.getSum());&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试用例和 synchronized 方法的大差不差，运行后也是可以通过的。两者之间有所不同，synchronized 代码块的锁粒度要比 synchronized 方法小一些，因为 synchronized 代码块所在的方法里还可以有其他代码。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/05/java-synchronized-06.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;好了，我亲爱的读者朋友，以上就是本文的全部内容了，synchronized 的三种用法你一定掌握了吧？觉得文章有点用的话，请微信搜索「&lt;strong&gt;沉默王二&lt;/strong&gt;」第一时间阅读。&lt;/p&gt;
&lt;blockquote readability=&quot;4.5890410958904&quot;&gt;
&lt;p&gt;本文 &lt;a href=&quot;https://github.com/qinggee/itwanger.github.io&quot;&gt;GitHub&lt;/a&gt; 已经收录，有大厂面试完整考点，欢迎 Star。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我是沉默王二，一枚有趣的程序员，关注即可提高学习效率。最后，请无情地点赞、收藏、留言吧，谢谢。&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 23:36:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>二哥，离你上一篇我去已经过去两周时间了，这个系列还不打算更新吗？着急着看呢。 以上是读者 Jason 发来的一条信息，不看不知道，一看真的是吓一跳，上次我去是 4 月 3 号更新的，离现在一个多月了，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qing-gee/p/12873966.html</dc:identifier>
</item>
<item>
<title>构建自己的专用OpenCV----记录一次由applyColorMap()引发的探索 - jsxyhelu</title>
<link>http://www.cnblogs.com/jsxyhelu/p/12873962.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jsxyhelu/p/12873962.html</guid>
<description>&lt;div readability=&quot;71&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;enum&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;ColormapTypes&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_AUTUMN&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 0, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![autumn](pics/colormaps/colorscale_autumn.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_BONE&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 1, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![bone](pics/colormaps/colorscale_bone.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_JET&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 2, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![jet](pics/colormaps/colorscale_jet.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_WINTER&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 3, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![winter](pics/colormaps/colorscale_winter.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_RAINBOW&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 4, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![rainbow](pics/colormaps/colorscale_rainbow.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_OCEAN&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 5, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![ocean](pics/colormaps/colorscale_ocean.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_SUMMER&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 6, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![summer](pics/colormaps/colorscale_summer.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_SPRING&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 7, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![spring](pics/colormaps/colorscale_spring.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_COOL&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 8, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![cool](pics/colormaps/colorscale_cool.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_HSV&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 9, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![HSV](pics/colormaps/colorscale_hsv.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_PINK&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 10, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![pink](pics/colormaps/colorscale_pink.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_HOT&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 11, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![hot](pics/colormaps/colorscale_hot.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_PARULA&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 12, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![parula](pics/colormaps/colorscale_parula.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_MAGMA&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 13, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![magma](pics/colormaps/colorscale_magma.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_INFERNO&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 14, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![inferno](pics/colormaps/colorscale_inferno.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_PLASMA&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 15, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![plasma](pics/colormaps/colorscale_plasma.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_VIRIDIS&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 16, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![viridis](pics/colormaps/colorscale_viridis.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_CIVIDIS&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 17, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![cividis](pics/colormaps/colorscale_cividis.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_TWILIGHT&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 18, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![twilight](pics/colormaps/colorscale_twilight.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_TWILIGHT_SHIFTED&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 19, &lt;/span&gt;&lt;span&gt;//!&amp;lt; ![twilight shifted](pics/colormaps/colorscale_twilight_shifted.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;COLORMAP_TURBO&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 20 ,&lt;/span&gt;&lt;span&gt;//!&amp;lt; ![turbo](pics/colormaps/colorscale_turbo.jpg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;COLORMAP_DEEPGREEN&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = 21 &lt;/span&gt;&lt;span&gt;//jsxyhelu 2020年5月9日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;250&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;// Equals the  colormap &quot;deepgreen&quot;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;DeepGreen&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; : &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;        &lt;/span&gt;&lt;span&gt;DeepGreen&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;() : &lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(256);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;        &lt;/span&gt;&lt;span&gt;DeepGreen&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) : &lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04761904761904762f, 0.09523809523809523f, 0.1428571428571428f, 0.1904761904761905f, 0.2380952380952381f, 0.2857142857142857f, 0.3333333333333333f, 0.3809523809523809f, 0.4285714285714285f, 0.4761904761904762f, 0.5238095238095238f, 0.5714285714285714f, 0.6190476190476191f, 0.6666666666666666f, 0.7142857142857143f, 0.7619047619047619f, 0.8095238095238095f, 0.8571428571428571f, 0.9047619047619048f, 0.9523809523809523f, 1 };&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[] = { 0, 0.01587301587301587f, 0.03174603174603174f, 0.04761904761904762f, 0.06349206349206349f, 0.07936507936507936f, 0.09523809523809523f, 0.1111111111111111f, 0.126984126984127f, 0.1428571428571428f, 0.1587301587301587f, 0.1746031746031746f, 0.1904761904761905f, 0.2063492063492063f, 0.2222222222222222f, 0.2380952380952381f, 0.253968253968254f, 0.2698412698412698f, 0.2857142857142857f, 0.3015873015873016f, 0.3174603174603174f, 0.3333333333333333f, 0.3492063492063492f, 0.3650793650793651f, 0.3809523809523809f, 0.3968253968253968f, 0.4126984126984127f, 0.4285714285714285f, 0.4444444444444444f, 0.4603174603174603f, 0.4761904761904762f, 0.492063492063492f, 0.5079365079365079f, 0.5238095238095238f, 0.5396825396825397f, 0.5555555555555556f, 0.5714285714285714f, 0.5873015873015873f, 0.6031746031746031f, 0.6190476190476191f, 0.6349206349206349f, 0.6507936507936508f, 0.6666666666666666f, 0.6825396825396826f, 0.6984126984126984f, 0.7142857142857143f, 0.7301587301587301f, 0.746031746031746f, 0.7619047619047619f, 0.7777777777777778f, 0.7936507936507936f, 0.8095238095238095f, 0.8253968253968254f, 0.8412698412698413f, 0.8571428571428571f, 0.873015873015873f, 0.8888888888888888f, 0.9047619047619048f, 0.9206349206349206f, 0.9365079365079365f, 0.9523809523809523f, 0.9682539682539683f, 0.9841269841269841f, 1 };&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02380952380952381f, 0.04761904761904762f, 0.07142857142857142f, 0.09523809523809523f, 0.119047619047619f, 0.1428571428571428f, 0.1666666666666667f, 0.1904761904761905f, 0.2142857142857143f, 0.2380952380952381f, 0.2619047619047619f, 0.2857142857142857f, 0.3095238095238095f, 0.3333333333333333f, 0.3571428571428572f, 0.3809523809523809f, 0.4047619047619048f, 0.4285714285714285f, 0.4523809523809524f, 0.4761904761904762f, 0.5f, 0.5238095238095238f, 0.5476190476190477f, 0.5714285714285714f, 0.5952380952380952f, 0.6190476190476191f, 0.6428571428571429f, 0.6666666666666666f, 0.6904761904761905f, 0.7142857142857143f, 0.7380952380952381f, 0.7619047619047619f, 0.7857142857142857f, 0.8095238095238095f, 0.8333333333333334f, 0.8571428571428571f, 0.8809523809523809f, 0.9047619047619048f, 0.9285714285714286f, 0.9523809523809523f, 0.9761904761904762f, 1 };&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; = &lt;/span&gt;&lt;span&gt;linspace&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(0, 1, 64);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_lut&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;linear_colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                &lt;/span&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(64, 1, &lt;/span&gt;&lt;span&gt;CV_32FC1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;, (&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;).&lt;/span&gt;&lt;span&gt;clone&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(), &lt;/span&gt;&lt;span&gt;// red&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                &lt;/span&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(64, 1, &lt;/span&gt;&lt;span&gt;CV_32FC1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;, (&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;).&lt;/span&gt;&lt;span&gt;clone&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(), &lt;/span&gt;&lt;span&gt;// green&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                &lt;/span&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(64, 1, &lt;/span&gt;&lt;span&gt;CV_32FC1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;, (&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;).&lt;/span&gt;&lt;span&gt;clone&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(), &lt;/span&gt;&lt;span&gt;// blue&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                &lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);  &lt;/span&gt;&lt;span&gt;// number of sample points&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;71&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;applyColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;InputArray&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;, &lt;/span&gt;&lt;span&gt;OutputArray&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;dst&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;, &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;        &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;* &lt;/span&gt;&lt;span&gt;cm&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; =&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_AUTUMN&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Autumn&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_BONE&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Bone&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_CIVIDIS&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Cividis&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_COOL&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Cool&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_HOT&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Hot&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_HSV&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;HSV&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_INFERNO&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Inferno&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_JET&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Jet&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_MAGMA&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Magma&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_OCEAN&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Ocean&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_PARULA&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Parula&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_PINK&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Pink&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_PLASMA&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Plasma&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_RAINBOW&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Rainbow&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_SPRING&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_SUMMER&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Summer&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_TURBO&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Turbo&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_TWILIGHT&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Twilight&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_TWILIGHT_SHIFTED&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;TwilightShifted&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_VIRIDIS&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Viridis&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;       &lt;/span&gt;&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;     &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_DEEPGREEN&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;DeepGreen&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; == &lt;/span&gt;&lt;span&gt;COLORMAP_WINTER&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; ? (&lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;ColorMap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*)(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;span&gt;colormap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Winter&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) : 0;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;这里的几个修改，都是比较简单的。其中注意不能有中文（包括注释，不符合编码习惯）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;重新生成的时候，生成install就可以。注意lib/dll/include都需要使用最新的&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Mon, 11 May 2020 23:29:00 +0000</pubDate>
<dc:creator>jsxyhelu</dc:creator>
<og:description>在编写实际项目的过程中，我需要实现绿色主题的“伪彩色”变换。在目前提供的模板中，只有summer最为接近，但是它的颜色太浅了，看上去不是很清晰。所以我结合ocean和summer两种现有模板，构建了d</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jsxyhelu/p/12873962.html</dc:identifier>
</item>
<item>
<title>Spring中bean的四种注入方式 - 特务依昂</title>
<link>http://www.cnblogs.com/tuyang1129/p/12873492.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tuyang1129/p/12873492.html</guid>
<description>&lt;p&gt;  最近在复习&lt;code&gt;Spring&lt;/code&gt;的相关内容，这篇博客就来记录一下&lt;code&gt;Spring&lt;/code&gt;为&lt;code&gt;bean&lt;/code&gt;的属性注入值的四种方式。这篇博客主要讲解在&lt;code&gt;xml&lt;/code&gt;文件中，如何为&lt;code&gt;bean&lt;/code&gt;的属性注入值，最后也会简单提一下使用注解的方式。废话不多说，直接开始吧。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;21-注入方式&quot;&gt;2.1 注入方式&lt;/h2&gt;
&lt;p&gt;  在&lt;code&gt;Spring&lt;/code&gt;中，共有四种方式为&lt;code&gt;bean&lt;/code&gt;的属性注入值，分别是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;set方法注入&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造器注入&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;静态工厂注入&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例工厂注入&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  下面我就分别演示一下，如何使用这四种方式进行属性的注入。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;22-set方法注入&quot;&gt;2.2 set方法注入&lt;/h2&gt;
&lt;p&gt;  在演示前，我们需要准备几个类，我使用下面两个类来进行注入的演示，这两个类分别是&lt;code&gt;User&lt;/code&gt;和&lt;code&gt;Car&lt;/code&gt;类：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class Car {
    // 只包含基本数据类型的属性
    private int speed;
    private double price;
    
    public Car() {
    }
    public Car(int speed, double price) {
        this.speed = speed;
        this.price = price;
    }
    
    public int getSpeed() {
        return speed;
    }
    public void setSpeed(int speed) {
        this.speed = speed;
    }
    public double getPrice() {
        return price;
    }
    public void setPrice(double price) {
        this.price = price;
    }
    @Override
    public String toString() {
        return &quot;Car{&quot; +
                &quot;speed=&quot; + speed +
                &quot;, price=&quot; + price +
                '}';
    }
}

public class User {
        
    private String name;
    private int age;
    // 除了上面两个基本数据类型的属性，User还依赖Car
    private Car car;
    
    public User() {
    }
    public User(String name, int age, Car car) {
        this.name = name;
        this.age = age;
        this.car = car;
    }

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public Car getCar() {
        return car;
    }
    public void setCar(Car car) {
        this.car = car;
    }

    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                &quot;, car=&quot; + car +
                '}';
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  有了上面两个类，我们就可以演示&lt;code&gt;set&lt;/code&gt;注入了。需要注意一点，如果我们需要使用&lt;code&gt;set&lt;/code&gt;注入，那么必须要为属性提供&lt;code&gt;set&lt;/code&gt;方法，&lt;code&gt;Spring&lt;/code&gt;容器就是通过调用&lt;code&gt;bean&lt;/code&gt;的&lt;code&gt;set&lt;/code&gt;方法为属性注入值的。而在&lt;code&gt;xml&lt;/code&gt;文件中，使用&lt;code&gt;set&lt;/code&gt;注入的方式就是通过&lt;code&gt;property&lt;/code&gt;标签，如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;!-- 定义car这个bean，id为myCar --&amp;gt;
&amp;lt;bean id=&quot;myCar&quot; class=&quot;cn.tewuyiang.pojo.Car&quot;&amp;gt;
    &amp;lt;!-- 
        为car的属性注入值，因为speed和price都是基本数据类型，所以使用value为属性设置值；
        注意，这里的name为speed和price，不是因为属性名就是speed和price，
        而是set方法分别为setSpeed和setPrice，名称是通过将set删除，然后将第一个字母变小写得出；
    --&amp;gt;
    &amp;lt;property name=&quot;speed&quot; value=&quot;100&quot;/&amp;gt;
    &amp;lt;property name=&quot;price&quot; value=&quot;99999.9&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;!-- 定义user这个bean --&amp;gt;
&amp;lt;bean id=&quot;user&quot; class=&quot;cn.tewuyiang.pojo.User&quot;&amp;gt;
    &amp;lt;property name=&quot;name&quot; value=&quot;aaa&quot; /&amp;gt;
    &amp;lt;property name=&quot;age&quot; value=&quot;123&quot; /&amp;gt;
    &amp;lt;!-- car是引用类型，所以这里使用ref为其注入值，注入的就是上面定义的myCar 
         基本数据类型或Java包装类型使用value，
         而引用类型使用ref，引用另外一个bean的id 
    --&amp;gt;
    &amp;lt;property name=&quot;car&quot; ref=&quot;myCar&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  通过上面的配置，就可以为&lt;code&gt;Car&lt;/code&gt;和&lt;code&gt;User&lt;/code&gt;这两个类型的&lt;code&gt;bean&lt;/code&gt;注入值了。需要注意的是，&lt;strong&gt;property的name属性，填写的不是属性的名称，而是set方法去除set，然后将第一个字符小写后的结果。对于基本数据类型，或者是Java的包装类型（比如String），使用value注入值，而对于引用类型，则使用ref，传入其他bean的id。&lt;/strong&gt;接下来我们就可以测试效果了：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Test
public void test1() {
    ApplicationContext context =
        new ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);
    // 获取user这个bean
    User user = context.getBean(User.class);
    // 输出产看结果
    System.out.println(user);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  由于&lt;code&gt;user&lt;/code&gt;包含&lt;code&gt;car&lt;/code&gt;的引用，所以我们直接输出&lt;code&gt;user&lt;/code&gt;，也能够看到&lt;code&gt;car&lt;/code&gt;的情况，输入结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;User{name='aaa', age=123, car=Car{speed=100, price=99999.9}}
&lt;/code&gt;
&lt;/pre&gt;
&lt;br/&gt;&lt;h2 id=&quot;23-构造器注入&quot;&gt;2.3 构造器注入&lt;/h2&gt;
&lt;p&gt;  下面我们来说第二种方式——构造器注入。听名字就可以知道，这种注入值的方式，就是通过调用&lt;code&gt;bean&lt;/code&gt;所属类的带参构造器为&lt;code&gt;bean&lt;/code&gt;的属性注入值。这也就意味着，&lt;strong&gt;我们如果需要使用构造器注入，就得为类提供包含参数的构造方法&lt;/strong&gt;。构造器注入，实际上有多种匹配属性值的方式，下面我们就来一一列举。我们这里依然使用&lt;code&gt;2.2&lt;/code&gt;中定义的&lt;code&gt;Car&lt;/code&gt;和&lt;code&gt;User&lt;/code&gt;这两个类，测试方法以及类的定义都不需要变，需要改变的仅仅是&lt;code&gt;xml&lt;/code&gt;配置文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（一）匹配构造器的参数名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  我们需要通过&lt;code&gt;constructor-arg&lt;/code&gt;标签为构造器传入参数值，但是每个&lt;code&gt;constructor-arg&lt;/code&gt;标签对应哪一个参数值呢？这就有多种方式指定了。第一种就是直接匹配参数名，配置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;bean id=&quot;myCar&quot; class=&quot;cn.tewuyiang.pojo.Car&quot;&amp;gt;
    &amp;lt;!-- 通过constructor-arg的name属性，指定构造器参数的名称，为参数赋值 --&amp;gt;
    &amp;lt;constructor-arg name=&quot;speed&quot; value=&quot;100&quot; /&amp;gt;
    &amp;lt;constructor-arg name=&quot;price&quot; value=&quot;99999.9&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&quot;user&quot; class=&quot;cn.tewuyiang.pojo.User&quot;&amp;gt;
    &amp;lt;constructor-arg name=&quot;name&quot; value=&quot;aaa&quot; /&amp;gt;
    &amp;lt;constructor-arg name=&quot;age&quot; value=&quot;123&quot; /&amp;gt;
    &amp;lt;!-- 
         和之前一样，基本数据类型或Java包装类型使用value，
         而引用类型使用ref，引用另外一个bean的id 
    --&amp;gt;
    &amp;lt;constructor-arg name=&quot;car&quot; ref=&quot;myCar&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  这样就完成了，测试代码和之前一样，运行结果也一样，我这里就不贴出来了。有人看完之后，可能会觉得这里的配置和&lt;code&gt;set&lt;/code&gt;注入时的配置几乎一样，除了一个使用&lt;code&gt;property&lt;/code&gt;，一个使用&lt;code&gt;constructor-arg&lt;/code&gt;。确实，写法上一样，但是表示的含义却完全不同。&lt;strong&gt;property的name属性，是通过set方法的名称得来；而constructor-arg的name，则是构造器参数的名称&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（二）匹配构造器的参数下标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  上面是通过构造器参数的名称，匹配需要传入的值，那种方式最为直观，而&lt;code&gt;Spring&lt;/code&gt;还提供另外两种方式匹配参数，这里就来说说通过参数在参数列表中的下标进行匹配的方式。下面的配置，请结合&lt;code&gt;2.2&lt;/code&gt;节中&lt;code&gt;User&lt;/code&gt;和&lt;code&gt;Car&lt;/code&gt;的构造方法一起阅读，配置方式如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;bean id=&quot;car&quot; class=&quot;cn.tewuyiang.pojo.Car&quot;&amp;gt;
    &amp;lt;!-- 下标编号从0开始，构造器的第一个参数是speed，为它赋值100 --&amp;gt;
    &amp;lt;constructor-arg index=&quot;0&quot; value=&quot;100&quot; /&amp;gt;
    &amp;lt;!-- 构造器的第二个参数是price，为它赋值99999.9 --&amp;gt;
    &amp;lt;constructor-arg index=&quot;1&quot; value=&quot;99999.9&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&quot;user&quot; class=&quot;cn.tewuyiang.pojo.User&quot;&amp;gt;
    &amp;lt;!-- 与上面car的配置同理 --&amp;gt;
    &amp;lt;constructor-arg index=&quot;0&quot; value=&quot;aaa&quot; /&amp;gt;
    &amp;lt;constructor-arg index=&quot;1&quot; value=&quot;123&quot; /&amp;gt;
    &amp;lt;constructor-arg index=&quot;2&quot; ref=&quot;car&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  上面就是通过参数的下标为构造器的参数赋值，需要注意的是，&lt;strong&gt;参实的下标从0开始&lt;/strong&gt;。使用上面的方式配置，若赋值的类型与参数的类型不一致，将会在容器初始化&lt;code&gt;bean&lt;/code&gt;的时候抛出异常。如果&lt;code&gt;bean&lt;/code&gt;存在多个参数数量一样的构造器，&lt;code&gt;Spring&lt;/code&gt;容器会自动找到类型匹配的那个进行调用。比如说，&lt;code&gt;Car&lt;/code&gt;有如下两个构造器，&lt;code&gt;Spring&lt;/code&gt;容器将会调用第二个，因为上面的配置中，&lt;code&gt;index = 1&lt;/code&gt;对应的&lt;code&gt;value&lt;/code&gt;是&lt;code&gt;double&lt;/code&gt;类型，与第二个构造器匹配，而第一个不匹配：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public Car(double price, int speed) {
    this.speed = speed;
    this.price = price;
}
// 将使用匹配这个构造器
public Car(int speed, double price) {
    this.speed = speed;
    this.price = price;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  还存在另外一种特殊情况，那就是多个构造器都满足&lt;code&gt;bean&lt;/code&gt;的配置，此时选择哪一个？假设当前&lt;code&gt;car&lt;/code&gt;的配置是这样的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;bean id=&quot;car&quot; class=&quot;cn.tewuyiang.pojo.Car&quot;&amp;gt;
    &amp;lt;!-- 两个下标的value值都是整数 --&amp;gt;
    &amp;lt;constructor-arg index=&quot;0&quot; value=&quot;100&quot; /&amp;gt;
    &amp;lt;constructor-arg index=&quot;1&quot; value=&quot;999&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  假设&lt;code&gt;Car&lt;/code&gt;还是有上面两个构造器，两个构造器都是一个&lt;code&gt;int&lt;/code&gt;类型一个&lt;code&gt;double&lt;/code&gt;类型的参数，只是位置不同。而配置中，指定的两个值都是&lt;code&gt;int&lt;/code&gt;类型。但是，&lt;code&gt;int&lt;/code&gt;类型也可以使用&lt;code&gt;double&lt;/code&gt;类型存储，所以上面两个构造器都是匹配的，此时调用哪一个呢？结论就是调用第二个。自己去尝试就会发现，&lt;strong&gt;若存在多个构造器匹配bean的定义，Spring容器总是使用最后一个满足条件的构造器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（三）匹配构造器的参数类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  下面说最后一种匹配方式——匹配构造器的参数类型。直接看配置文件吧：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;bean id=&quot;car&quot; class=&quot;cn.tewuyiang.pojo.Car&quot;&amp;gt;
    &amp;lt;!-- 使用type属性匹配类型，car的构造器包含两个参数，一个是int类型，一个是double类型 --&amp;gt;
    &amp;lt;constructor-arg type=&quot;int&quot; value=&quot;100&quot; /&amp;gt;
    &amp;lt;constructor-arg type=&quot;double&quot; value=&quot;99999.9&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&quot;user&quot; class=&quot;cn.tewuyiang.pojo.User&quot;&amp;gt;
    &amp;lt;!-- 对于引用类型，需要使用限定类名 --&amp;gt;
    &amp;lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;aaa&quot; /&amp;gt;
    &amp;lt;constructor-arg type=&quot;int&quot; value=&quot;123&quot; /&amp;gt;
    &amp;lt;constructor-arg type=&quot;cn.tewuyiang.pojo.Car&quot; ref=&quot;car&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  上面应该不难理解，直接通过匹配构造器的参数类型，从而选择一个能够完全匹配的构造器，调用这个构造器完成&lt;code&gt;bean&lt;/code&gt;的创建和属性注入。需要注意的是，上面的配置中，类型并不需要按构造器中声明的顺序编写，&lt;code&gt;Spring&lt;/code&gt;也能进行匹配。这也就意味着可能出现多个能够匹配的构造器，和上一个例子中一样。比如说，&lt;code&gt;Car&lt;/code&gt;还是有下面两个构造器：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public Car(double price, int speed) {
    // 输出一句话，看是否调用这个构造器
    System.out.println(111);
    this.speed = speed;
    this.price = price;
}
// 将使用匹配这个构造器
public Car(int speed, double price) {
    // 输出一句话，看是否调用这个构造器
    System.out.println(222);
    this.speed = speed;
    this.price = price;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  上面两个构造器都是一个&lt;code&gt;int&lt;/code&gt;，一个&lt;code&gt;double&lt;/code&gt;类型的参数，都符合xml文件中，&lt;code&gt;car&lt;/code&gt;这个&lt;code&gt;bean&lt;/code&gt;的配置。通过测试发现，&lt;strong&gt;Spring容器使用的永远都是最后一个符合条件的构造器&lt;/strong&gt;，这和上面通过下标匹配是一致的。&lt;strong&gt;需要说明的一点是，这三种使用构造器注入的方式，可以混用&lt;/strong&gt;。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;24-静态工厂注入&quot;&gt;2.4 静态工厂注入&lt;/h2&gt;
&lt;p&gt;  静态工厂注入就是我们编写一个静态的工厂方法，这个工厂方法会返回一个我们需要的值，然后在配置文件中，我们指定使用这个工厂方法创建&lt;code&gt;bean&lt;/code&gt;。首先我们需要一个静态工厂，如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class SimpleFactory {

    /**
     * 静态工厂，返回一个Car的实例对象
     */
    public static Car getCar() {
        return new Car(12345, 5.4321);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  下面我们需要在&lt;code&gt;xml&lt;/code&gt;中配置car这个bean，并指定它由工厂方法进行创建。配置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;!-- 
        注意，这里的配置并不是创建一个SimpleFactory对象，取名为myCar，
    这一句配置的意思是，调用SimpleFactory的getCar方法，创建一个car实例对象，
    将这个car对象取名为myCar。
--&amp;gt;
&amp;lt;bean id=&quot;car&quot; class=&quot;cn.tewuyiang.factory.SimpleFactory&quot; factory-method=&quot;getCar&quot;/&amp;gt;

&amp;lt;bean id=&quot;user&quot; class=&quot;cn.tewuyiang.pojo.User&quot;&amp;gt;
    &amp;lt;!-- name和age使用set注入 --&amp;gt;
    &amp;lt;property name=&quot;name&quot; value=&quot;aaa&quot;/&amp;gt;
    &amp;lt;property name=&quot;age&quot; value=&quot;123&quot;/&amp;gt;
    &amp;lt;!-- 将上面配置的car，注入到user的car属性中 --&amp;gt;
    &amp;lt;property name=&quot;car&quot; ref=&quot;car&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  以上就配置成功了，测试方法以及执行效果如下，注意看&lt;code&gt;car&lt;/code&gt;的属性值，就是我们在静态工厂中配置的那样，这说明，&lt;code&gt;Spring&lt;/code&gt;容器确实是使用我们定义的静态工厂方法，创建了&lt;code&gt;car&lt;/code&gt;这个&lt;code&gt;bean&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Test
public void test1() {
    ApplicationContext context =
        new ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);
    // 获取静态工厂创建的car
    Car car = (Car) context.getBean(&quot;car&quot;);
    // 获取user
    User user = context.getBean(User.class);
    System.out.println(car);
    System.out.println(user);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  输出如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;Car{speed=12345, price=5.4321}
User{name='aaa', age=123, car=Car{speed=12345, price=5.4321}}
&lt;/code&gt;
&lt;/pre&gt;
&lt;br/&gt;&lt;h2 id=&quot;25-实例工厂注入&quot;&gt;2.5 实例工厂注入&lt;/h2&gt;
&lt;p&gt;  实例工厂与静态工厂类似，不同的是，静态工厂调用工厂方法不需要先创建工厂类的对象，因为静态方法可以直接通过类调用，所以在上面的配置文件中，并没有声明工厂类的&lt;code&gt;bean&lt;/code&gt;。但是，实例工厂，需要有一个实例对象，才能调用它的工厂方法。我们先看看实例工厂的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class SimpleFactory {

    /**
     * 实例工厂方法，返回一个Car的实例对象
     */
    public Car getCar() {
        return new Car(12345, 5.4321);
    }

    /**
     * 实例工厂方法，返回一个String
     */
    public String getName() {
        return &quot;tewuyiang&quot;;
    }

    /**
     * 实例工厂方法，返回一个int，在Spring容器中会被包装成Integer
     */
    public int getAge() {
        return 128;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  在上面的工厂类中，共定义了三个工厂方法，分别用来返回&lt;code&gt;user&lt;/code&gt;所需的&lt;code&gt;car&lt;/code&gt;，&lt;code&gt;name&lt;/code&gt;以及&lt;code&gt;age&lt;/code&gt;，而配置文件如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;!-- 声明实例工厂bean，Spring容器需要先创建一个SimpleFactory对象，才能调用工厂方法 --&amp;gt;
&amp;lt;bean id=&quot;factory&quot; class=&quot;cn.tewuyiang.factory.SimpleFactory&quot; /&amp;gt;

&amp;lt;!-- 
    通过实例工厂的工厂方法，创建三个bean，通过factory-bean指定工厂对象，
    通过factory-method指定需要调用的工厂方法
--&amp;gt;
&amp;lt;bean id=&quot;name&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getName&quot; /&amp;gt;
&amp;lt;bean id=&quot;age&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getAge&quot; /&amp;gt;
&amp;lt;bean id=&quot;car&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getCar&quot; /&amp;gt;

&amp;lt;bean id=&quot;user&quot; class=&quot;cn.tewuyiang.pojo.User&quot;&amp;gt;
    &amp;lt;!-- 将上面通过实例工厂方法创建的bean，注入到user中 --&amp;gt;
    &amp;lt;property name=&quot;name&quot; ref=&quot;name&quot;/&amp;gt;
    &amp;lt;property name=&quot;age&quot; ref=&quot;age&quot;/&amp;gt;
    &amp;lt;property name=&quot;car&quot; ref=&quot;car&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  我们尝试从&lt;code&gt;Spring&lt;/code&gt;容器中取出&lt;code&gt;name&lt;/code&gt;，&lt;code&gt;age&lt;/code&gt;，&lt;code&gt;car&lt;/code&gt;以及&lt;code&gt;user&lt;/code&gt;，看看它们的值，测试代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Test
public void test1() {
    ApplicationContext context =
        new ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);
    // 获取静态工厂创建的car，name和age这三个bean
    Car car = (Car) context.getBean(&quot;car&quot;);
    String name = (String) context.getBean(&quot;name&quot;);
    Integer age = (Integer) context.getBean(&quot;age&quot;);
    // 获取user这个bean
    User user = context.getBean(User.class);
    System.out.println(car);
    System.out.println(name);
    System.out.println(age);
    System.out.println(user);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  以下就是输出结果，可以看到，我们通过工厂创建的&lt;code&gt;bean&lt;/code&gt;，都在&lt;code&gt;Spring&lt;/code&gt;容器中能够获取到：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;Car{speed=12345, price=5.4321}
tewuyiang
128
User{name='tewuyiang', age=128, car=Car{speed=12345, price=5.4321}}
&lt;/code&gt;
&lt;/pre&gt;
&lt;br/&gt;&lt;h2 id=&quot;26-使用注解注入&quot;&gt;2.6 使用注解注入&lt;/h2&gt;
&lt;p&gt;  假如需要使用注解的方式为&lt;code&gt;bean&lt;/code&gt;注入属性值，应该这么操作呢？首先，如果&lt;code&gt;bean&lt;/code&gt;依赖于其他&lt;code&gt;bean&lt;/code&gt;（比如&lt;code&gt;User&lt;/code&gt;依赖&lt;code&gt;Car&lt;/code&gt;），那么我们可以使用&lt;code&gt;@Autowired&lt;/code&gt;或者&lt;code&gt;@Resource&lt;/code&gt;这两个注解进行依赖注入，这个大家应该都知道。但是如果要为基本数据类型或者是&lt;code&gt;Java&lt;/code&gt;的封装类型（比如&lt;code&gt;String&lt;/code&gt;）赋值呢？这时候可以使用&lt;code&gt;@Value&lt;/code&gt;注解。这里我就不演示了，感兴趣的可以自行去研究，应该是比&lt;code&gt;xml&lt;/code&gt;的方式简单多了。&lt;/p&gt;
&lt;p&gt;  以上就对&lt;code&gt;Spring&lt;/code&gt;基于&lt;code&gt;xml&lt;/code&gt;配置文件进行属性注入的方式做了一个还算详细的介绍。其实这一部分的内容还是比较基础，毕竟只是&lt;code&gt;Spring&lt;/code&gt;的使用，并不涉及原理，只要自己尝试写一遍就了解了。若以上内容存在错误或不足，欢迎指正，共同进步。也希望以上内容对需要的人有所帮助。&lt;/p&gt;
&lt;br/&gt;</description>
<pubDate>Mon, 11 May 2020 16:42:00 +0000</pubDate>
<dc:creator>特务依昂</dc:creator>
<og:description>一、前言 最近在复习 的相关内容，这篇博客就来记录一下 为``bean xml bean``的属性注入值，最后也会简单提一下使用注解的方式。废话不多说，直接开始吧。 二、正文 2.1 注入方式 在 中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/tuyang1129/p/12873492.html</dc:identifier>
</item>
</channel>
</rss>