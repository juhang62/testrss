<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Mysql+Keepalived双主热备高可用操作记录 - 菜鸟大数据</title>
<link>http://www.cnblogs.com/-admin-/p/11683318.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-admin-/p/11683318.html</guid>
<description>&lt;p&gt;Mysql+Keepalived双主热备高可用操作记录&lt;/p&gt;
&lt;p&gt;环境:&lt;/p&gt;
&lt;p&gt;ubuntu18.04.2&lt;/p&gt;
&lt;p&gt;mysql5.7.21&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;）安装keepalived并将其配置成系统服务。master1和master2两台机器上同样进行如下操作：
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; apt&lt;span&gt;-&lt;/span&gt;get install libssl&lt;span&gt;-&lt;/span&gt;&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; apt&lt;span&gt;-&lt;/span&gt;&lt;span&gt;get install openssl
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; apt&lt;span&gt;-&lt;/span&gt;get install libpopt&lt;span&gt;-&lt;/span&gt;&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@master1 ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# cd &lt;span&gt;/&lt;/span&gt;usr&lt;span&gt;/&lt;/span&gt;local&lt;span&gt;/&lt;/span&gt;src&lt;span&gt;/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@master1 src&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# wget http:&lt;span&gt;//&lt;/span&gt;www.keepalived.org&lt;span&gt;/&lt;/span&gt;software&lt;span&gt;/&lt;/span&gt;keepalived&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.tar.gz
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@master1 src&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# tar &lt;span&gt;-&lt;/span&gt;zvxf keepalived&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.tar.gz
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@master1 src&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# cd keepalived&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@master1 keepalived-1.3.5&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# .&lt;span&gt;/&lt;/span&gt;configure &lt;span&gt;--&lt;/span&gt;&lt;span&gt;prefix=/usr/local/keepalived&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@master1 keepalived-1.3.5&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# make &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; make install
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; mkdir &lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;&lt;span&gt;sysconfig
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; cp &lt;span&gt;/&lt;/span&gt;usr&lt;span&gt;/&lt;/span&gt;local&lt;span&gt;/&lt;/span&gt;keepalived&lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;sysconfig&lt;span&gt;/&lt;/span&gt;keepalived &lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;sysconfig&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; cp &lt;span&gt;/&lt;/span&gt;usr&lt;span&gt;/&lt;/span&gt;local&lt;span&gt;/&lt;/span&gt;keepalived&lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;rc.d&lt;span&gt;/&lt;/span&gt;init.d&lt;span&gt;/&lt;/span&gt;keepalived &lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;init.d&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; cp &lt;span&gt;/&lt;/span&gt;usr&lt;span&gt;/&lt;/span&gt;local&lt;span&gt;/&lt;/span&gt;keepalived&lt;span&gt;/&lt;/span&gt;sbin&lt;span&gt;/&lt;/span&gt;keepalived &lt;span&gt;/&lt;/span&gt;sbin&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; mkdir &lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; cp &lt;span&gt;/&lt;/span&gt;usr&lt;span&gt;/&lt;/span&gt;local&lt;span&gt;/&lt;/span&gt;keepalived&lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;keepalived&lt;span&gt;/&lt;/span&gt;keepalived.conf &lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;keepalived&lt;span&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现高可用之前确保自己的mysql已经是主备或者互为主备了,mysql互为主备操作请看我上篇文章: &lt;a href=&quot;https://www.cnblogs.com/-admin-/p/11654318.html&quot;&gt;https://www.cnblogs.com/-admin-/p/11654318.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本次设置的ip:&lt;br/&gt;vip:192.168.85.142&lt;br/&gt;01:192.168.85.140&lt;br/&gt;02:192.168.85.141&lt;/p&gt;
&lt;p&gt;请各位按照自己的需求更改相应ip&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#01的keepalived.conf配置
! Configuration &lt;/span&gt;&lt;span&gt;File&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
       
global_defs {
notification_email {
    &lt;/span&gt;&lt;span&gt;759571872&lt;/span&gt;&lt;span&gt;@qq&lt;/span&gt;&lt;span&gt;.com
#报警邮件接收人的地址
}
       
notification_email_from &lt;/span&gt;&lt;span&gt;759571872&lt;/span&gt;&lt;span&gt;@qq&lt;/span&gt;&lt;span&gt;.com
smtp_server &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt; 
smtp_connect_timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
ubuntu001
}
       
vrrp_script chk_mysql_port {     
#检测mysql服务是否在运行。有很多方式，比如进程，用脚本检测等等
    script &quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;opt&lt;span&gt;/&lt;/span&gt;&lt;span&gt;chk_mysql.sh&quot;   
    #这里通过脚本监测
    interval &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;                   
    #脚本执行间隔，每2s检测一次
    weight &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;                    
    #脚本结果导致的优先级变更，检测失败（脚本返回非0）则优先级 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
    fall &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;                    
    #检测连续2次失败才算确定是真失败。会用weight减少优先级（&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;255之间）
    rise &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;                    
    #检测1次成功就算成功。但不修改优先级
}
       
vrrp_instance VI_1 {
    state MASTER    
    interface ens33      
    #指定虚拟ip的网卡接口
    mcast_src_ip &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;85.140&lt;/span&gt;&lt;span&gt;
    virtual_router_id &lt;/span&gt;&lt;span&gt;51&lt;/span&gt;&lt;span&gt;    
    #路由器标识，MASTER和BACKUP必须是一致的
    priority &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt;            
    #定义优先级，数字越大，优先级越高，在同一个vrrp_instance下，MASTER的优先级必须大于BACKUP的优先级。这样MASTER故障恢复后，就可以将VIP资源再次抢回来 
    advert_int &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;         
    authentication {   
        auth_type PASS 
        auth_pass &lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;     
    }
    virtual_ipaddress {    
        &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;85.142&lt;/span&gt;&lt;span&gt;
    }
      
track_script {               
   chk_mysql_port             
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;01服务器配置完毕.&lt;/p&gt;
&lt;p&gt;接下来配置02服务器:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#02的keepalived.conf配置
! Configuration &lt;/span&gt;&lt;span&gt;File&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
       
global_defs {
notification_email {
    &lt;/span&gt;&lt;span&gt;759571872&lt;/span&gt;&lt;span&gt;@qq&lt;/span&gt;&lt;span&gt;.com
#报警邮件接收人的地址
}
       
notification_email_from &lt;/span&gt;&lt;span&gt;759571872&lt;/span&gt;&lt;span&gt;@qq&lt;/span&gt;&lt;span&gt;.com
smtp_server &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt; 
smtp_connect_timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
ubuntu002
}
       
vrrp_script chk_mysql_port {     
#检测mysql服务是否在运行。有很多方式，比如进程，用脚本检测等等
    script &quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;opt&lt;span&gt;/&lt;/span&gt;&lt;span&gt;chk_mysql.sh&quot;   
    #这里通过脚本监测
    interval &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;                   
    #脚本执行间隔，每2s检测一次
    weight &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;                    
    #脚本结果导致的优先级变更，检测失败（脚本返回非0）则优先级 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
    fall &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;                    
    #检测连续2次失败才算确定是真失败。会用weight减少优先级（&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;255之间）
    rise &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;                    
    #检测1次成功就算成功。但不修改优先级
}
       
vrrp_instance VI_1 {
    state &lt;/span&gt;&lt;span&gt;BACKUP&lt;/span&gt;&lt;span&gt;    
    interface ens33      
    #指定虚拟ip的网卡接口
    mcast_src_ip &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;85.141&lt;/span&gt;&lt;span&gt;
    virtual_router_id &lt;/span&gt;&lt;span&gt;51&lt;/span&gt;&lt;span&gt;    
    #路由器标识，MASTER和BACKUP必须是一致的
    priority &lt;/span&gt;&lt;span&gt;99&lt;/span&gt;&lt;span&gt;            
    #定义优先级，数字越大，优先级越高，在同一个vrrp_instance下，MASTER的优先级必须大于BACKUP的优先级。这样MASTER故障恢复后，就可以将VIP资源再次抢回来 
    advert_int &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;         
    authentication {   
        auth_type PASS 
        auth_pass &lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;     
    }
    virtual_ipaddress {    
        &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;85.142&lt;/span&gt;&lt;span&gt;
    }
      
track_script {               
   chk_mysql_port             
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编写脚本:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
#vi &lt;span&gt;/&lt;/span&gt;opt&lt;span&gt;/&lt;/span&gt;&lt;span&gt;chk_mysql.sh
#!&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;bin&lt;span&gt;/&lt;/span&gt;&lt;span&gt;bash
counter&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;$(netstat &lt;span&gt;-&lt;/span&gt;na&lt;span&gt;|&lt;/span&gt;grep &quot;LISTEN&quot;&lt;span&gt;|&lt;/span&gt;grep &quot;&lt;span&gt;3306&lt;/span&gt;&quot;&lt;span&gt;|&lt;/span&gt;wc &lt;span&gt;-&lt;/span&gt;&lt;span&gt;l)
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt; &quot;${counter}&quot; -eq 0 &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;; &lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;init.d&lt;span&gt;/&lt;/span&gt;&lt;span&gt;keepalived stop
fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此,Mysql+Keepalived双主热备高可用已经配置完毕.&lt;/p&gt;
</description>
<pubDate>Wed, 16 Oct 2019 00:43:00 +0000</pubDate>
<dc:creator>菜鸟大数据</dc:creator>
<og:description>Mysql+Keepalived双主热备高可用操作记录 环境: ubuntu18.04.2 mysql5.7.21 实现高可用之前确保自己的mysql已经是主备或者互为主备了,mysql互为主备操作请</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/-admin-/p/11683318.html</dc:identifier>
</item>
<item>
<title>匹马行天下之思维决定高度篇——“大学再努力，培训机构做兄弟”姊妹篇 - 泰斗贤若如</title>
<link>http://www.cnblogs.com/zyx110/p/11680053.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zyx110/p/11680053.html</guid>
<description>&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;前言&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;一看标题，经常关注我博客的朋友是不是很疑惑，想问我为什么对培训机构总是情有独钟呢？确实，我不得不承认，现在我一看到关于培训机构的事，我就兴奋，就来劲，感觉很亲切，就想发表一下自己的感言。因为现在见的多了，了解的多了，自然对培训机构也就熟悉了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;大学再努力，培训机构做兄弟&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-plain&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1640688/201910/1640688-20191015200956721-255634283.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-image md-img-loaded md-expand&quot; data-src=&quot;assets/1571141239843.png&quot;&gt;&lt;img src=&quot;file://c/Users/Lenovo/Desktop/assets/1571141239843.png?lastModify=1571141463&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;还记得几个月前我写的一篇《&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/zyx110/p/11008888.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;大学再努力，培训机构做兄弟吗&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;》的博客吗，那时我大二，当时我写这篇博客是因为在学校看到了一些让我觉得匪夷所思的事情，尽管培训机构在当时还离我很远，但还是引发了我的思考，毕竟我是学软件专业的，这些现象还是跟我有关系的。也是从那时，我才真正了解到培训机构的，大一的时候就听身边朋友说，我们其实以后都得去培训机构培训，不然像我们这种普通二本出来的大学生是找不到工作的，大一嘛，能知道个啥，就顺耳一听，当耳旁风了。但是到大二就不同了，毕竟比大一多经历了一年，看到的和听到的都比大一时候要多，看到真正的培训机构在校内大呼口号“大学不再努力，培训机构做兄弟”，看到身边的学长踊跃报名，心里总会泛起一些涟漪的。当时听说培训机构学费18800，那么高，去报名培训的学长那么多，刷新了我的大学观。我也不是说钱，我是学软件的，我知道有些东西真的不是钱能衡量的，那我就谈谈当时我看到的培训机构是如何在校内进行培训的吧。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;首先我不知道培训机构在校内培训是否“合适”，我自认为不合适，其一，培训机构不属于我校编制，其二，培训机构是公司，收这么多费用，至少应该有个合适的培训场所，其三，学校是育人的场所，大学收学费是正常的，但是在大学内收培训费就不正常了，我觉得这是交易，不是教育。当然，这只是我个人观点，如有不对，愿听指教。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;其次，培训机构在校内利用学校教室场地，进行培训，培训所处环境跟平时在校上课环境如出一辙，依旧是大阶梯教室，里面坐满了培训的学生，培训内容与大学专业课程相差无几，冒昧试问，大学三年你还嫌听过的课不够少吗？这时会有声音反驳我说，这个是我花了重金买的，我会认真听的，好，有志气，我也相信你会认真听，那么多的钱呢，谁会没有压力，对吧。可是我想表达的是你还是在校生，你才大三，你今年已经给学校交了13800的学费，学校也在给你上专业课呢，再冒昧的问一句，学校的专业课不是花了钱的？或者换种问法，学校的专业课就那么不专业吗？（沉默，其实我也不知道，实话实说，我也没怎么听过学校的专业课，平时都是自己学的，就当这些话是问我自己的吧，只是培训机构还没找我）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;最后，我还有一个疑问就是，培训机构所承诺的培训完包就业，这个承诺真的能兑现吗？(我真的疑惑，感觉从培训机构出来的，一听包就业，就真的感觉高了一个档次，好像不报就得自己找工作，报了就分配工作了，然后拿着高薪把培训的学费填上，确实听着很完美)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1640688/201910/1640688-20191015201014676-501536956.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;assets/2png&quot;&gt;&lt;img src=&quot;file://c/Users/Lenovo/Desktop/assets/2png?lastModify=1571141463&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;培训机构砸到我了&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;现在我也大三了，哈哈，你说巧不巧，去年刚说过，刚想过的就要出现在我的身上了，我怎能不激动。不错，就在昨天晚上，有个培训机构的“老师”就来我们宿舍“家访”了，“老师”很亲切，问我们这问我们那的，然后又说他们的培训这个好那个强的，老实说听着都合情合理，毫无破绽。好吧，你说的对，咱们谈钱吧，正常应该问的是培训要多少钱，培训多久，是否包就业。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;不出所料，学费依旧是18800，和去年一样，培训周期六个月，包就业。我说我们现在还是学生，没那么钱。“老师”很平静的说：“这个我们考虑到了，学生嘛，都没钱，我们理解，我们可以给你办贷款”。然后说的啥办贷款用的是360啥平台来着，记不清了，说很安全。牵扯到网贷，总是让人担惊受怕，至少我是这样，父母、亲戚、朋友以及学校给我发的关于大学生网贷被骗跳楼啥的新闻太多了，时刻警醒着。再之后的谈话就省略吧，都是小事。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;大家发现了吧，现在我说话都是用第一人称我来描述的，哈哈(不好意思，又激动了)，老实说，我是没有报班的打算的，我觉得我能利用校内时间学好他们要培训的东西，这点我是十分坚信的。但身边的同学就说不上了，一起处了两年了，现在这件事我不知道是应该鼓励他们去报还是阻止他们。我也不是对培训机构心存抵触，我承认确实有好的培训机构，刚开始我对培训机构认知太浅，写了一篇叫《&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/zyx110/p/11301848.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;高中辅导班为何改名成培训机构了？&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;》，后来涨了点见识，又专门写了一篇博客叫《&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/zyx110/p/11378729.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;高薪编程，品牌公司——人往高处走，作为程序员的你够格吗&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;》，对那些以教育为主，认真培训的培训机构我是支持的，因为他们确实解决了大学生就业难的问题，不得不承认对有些大学生也是一种不错的选择。怕就怕遇到一些无良的培训机构，就以赚钱为目的，用商业的眼光看待培训，而不是以教育的眼光对待培训，那问题在于如何区分是否是无良机构呢？说实话，我也不知道，但我只是不希望看到身边的同学朋友被骗。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;不相信大学无用论&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;大三了，每个人或多或少都会有些迷茫和急躁，我也有，在《&lt;a href=&quot;https://www.cnblogs.com/zyx110/p/11609493.html&quot; target=&quot;_blank&quot;&gt;大学已过半，敢问路在何方？&lt;/a&gt;》&lt;span class=&quot;md-link&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;中我说了我的迷茫，但是我没有因为迷茫而迷茫，迷失了自己，《&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/zyx110/p/11664377.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;谁的大学不迷茫——寻求解救之道&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;》，我依旧在努力寻求解救之道，虽然现在外面满大街的大学生，但是我就不相信大学生真的就止步于大学而无所用了。顺便再给学弟学妹们提个醒，大学时光很短暂，你们一定要在这短暂的大学生活中过充实，不要虚度，学软件的学弟学妹们，再给你们推荐一次《&lt;a href=&quot;https://www.cnblogs.com/zyx110/p/10617265.html&quot; target=&quot;_blank&quot;&gt;在你迷茫时不如学好一门语言&lt;/a&gt;》&lt;span class=&quot;md-link&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;，路漫漫其修远兮，且行且努力且珍惜。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;assets/1571141433480.png&quot;&gt;&lt;img src=&quot;file://c/Users/Lenovo/Desktop/assets/1571141433480.png?lastModify=1571141463&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1640688/201910/1640688-20191015201043406-652729329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1640688/201910/1640688-20191015201103012-1054569943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 16 Oct 2019 00:20:00 +0000</pubDate>
<dc:creator>泰斗贤若如</dc:creator>
<og:description>匹马行天下之思维决定高度篇——“大学再努力，培训机构做兄弟”姊妹篇 前言 一看标题，经常关注我博客的朋友是不是很疑惑，想问我为什么对培训机构总是情有独钟呢？确实，我不得不承认，现在我一看到关于培训机构</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zyx110/p/11680053.html</dc:identifier>
</item>
<item>
<title>MyBatis详解 一篇就够啦 - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/11656461.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/11656461.html</guid>
<description>&lt;h2&gt;1.1 typeHandlers类型转换器&lt;/h2&gt;
&lt;p&gt;　　每当MyBatis 设置参数到PreparedStatement 或者从ResultSet 结果集中取得值时，就会使用TypeHandler 来处理数据库类型与java 类型之间转换。下表描述了默认&lt;/p&gt;
&lt;p&gt;TypeHandlers&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191011194636429-1672088814.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 1.1.1 自定义类型转换器&lt;/h3&gt;
&lt;p&gt;假设表中字段是int类型,而实体类与之对应的属性是boolean类型,此时可以采用自定义类型转换器进行对应&lt;/p&gt;
&lt;p&gt;(1)实体类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package com.chenyanbin.beans;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dept {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer deptNo;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dname;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String loc;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&lt;strong&gt;private boolean flag;
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getDeptNo() {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; deptNo;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean isFlag() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFlag(boolean flag) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.flag =&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDeptNo(Integer deptNo) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.deptNo =&lt;span&gt; deptNo;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getDname() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dname;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDname(String dname) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.dname =&lt;span&gt; dname;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLoc() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; loc;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLoc(String loc) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.loc =&lt;span&gt; loc;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2) 表中字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191011195055065-1374407551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (3) 开发自定义类型转换器：MyTypeHandler.java&lt;/p&gt;
&lt;p&gt;继承并实现接口:TypeHandler.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package com.chenyanbin.util;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import java.sql.CallableStatement;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import java.sql.PreparedStatement;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import java.sql.ResultSet;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import java.sql.SQLException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.jdbc.Null;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.type.JdbcType;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.type.TypeHandler;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * setParameter:这个方法在生成SQL语句时才被调用
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * getResult:查询结束之后，在将ResultSet数据行转换为实体类对象时，通知TypeHandler将当前数据行某个字段转换为何种类型
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyTypeHandler implements TypeHandler {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;&lt;strong&gt;20     public void setParameter(PreparedStatement ps, int i, Object parameter, JdbcType jdbcType) throws SQLException {
21         if (parameter==null) { //dept.flag=null insertsql flag设置0
22             ps.setInt(i, 0);
23             return;
24         }
25         Boolean flag=(Boolean)parameter;
26         if (flag==true) {
27             ps.setInt(i, 1);
28         }
29         else {
30             ps.setInt(i, 0);
31         }
32     }
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;&lt;strong&gt;34     public Object getResult(ResultSet rs, String columnName) throws SQLException {
35         int flag = rs.getInt(columnName); //1 or 0
36         Boolean myFlag=Boolean.FALSE;
37         if (flag==1) {
38             myFlag=Boolean.TRUE;
39         }
40         return myFlag;
41     }
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object getResult(ResultSet rs, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; columnIndex) throws SQLException {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object getResult(CallableStatement cs, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; columnIndex) throws SQLException {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(4) 在MyBatis核心配置文件注册自定义类型转换器：&lt;/p&gt;
&lt;p&gt;myBatis-config.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-//mybatis.org//DTD Config 3.0//EN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://mybatis.org/dtd/mybatis-3-config.dtd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;configuration&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;!-- 属性配置 --&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;properties resource=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;config.properties&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/properties&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;!-- 别名配置 --&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;typeAliases&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;package name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.chenyanbin.beans&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;package name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.chenyanbin.dao&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;/typeAliases&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;!-- 类型处理器 --&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;lt;typeHandlers&amp;gt;
&lt;span&gt;15&lt;/span&gt;         &amp;lt;!-- 从java中的Boolean转jdbc中的NUMERIC --&amp;gt;
&lt;span&gt;16&lt;/span&gt;         &amp;lt;typeHandler handler=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.chenyanbin.util.MyTypeHandler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             javaType=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; jdbcType=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NUMERIC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;18&lt;/span&gt;     &amp;lt;/typeHandlers&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;environments &lt;span&gt;default&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;environment id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;23&lt;/span&gt;             &amp;lt;!-- 事务管理器 --&amp;gt;
&lt;span&gt;24&lt;/span&gt;             &amp;lt;transactionManager type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/transactionManager&amp;gt;
&lt;span&gt;25&lt;/span&gt;             &amp;lt;!-- 数据源 --&amp;gt;
&lt;span&gt;26&lt;/span&gt;             &amp;lt;dataSource type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pooled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;27&lt;/span&gt;                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${jdbc.driver}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;28&lt;/span&gt;                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${jdbc.url}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;29&lt;/span&gt;                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${jdbc.username}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;30&lt;/span&gt;                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${jdbc.password}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;31&lt;/span&gt;             &amp;lt;/dataSource&amp;gt;
&lt;span&gt;32&lt;/span&gt;         &amp;lt;/environment&amp;gt;
&lt;span&gt;33&lt;/span&gt;     &amp;lt;/environments&amp;gt;
&lt;span&gt;34&lt;/span&gt;     &amp;lt;!-- 映射器 --&amp;gt;
&lt;span&gt;35&lt;/span&gt;     &amp;lt;mappers&amp;gt;
&lt;span&gt;36&lt;/span&gt;         &amp;lt;package name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.chenyanbin.dao&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;37&lt;/span&gt;     &amp;lt;/mappers&amp;gt;
&lt;span&gt;38&lt;/span&gt; &amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;config.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; jdbc.driver=&lt;span&gt;com.mysql.jdbc.Driver
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; jdbc.url=jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:3306/sam&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; jdbc.username=&lt;span&gt;root
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; jdbc.password=root
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(5) 创建接口:DeptMapper.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package com.chenyanbin.dao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import java.util.List;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import com.chenyanbin.beans.Dept;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; DeptMapper {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deptSave(Dept dept);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;Dept&amp;gt;&lt;span&gt; deptFind();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(6)  DeptMapper.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-//mybatis.org//DTD Mapper 3.0//EN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://mybatis.org/dtd/mybatis-3-mapper.dtd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;mapper &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.chenyanbin.dao.DeptMapper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;insert id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;deptSave&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        insert into dept (DEPTNO,DNAME,LOC,flag)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        values(#{deptNo},#{dname},#{loc},#{flag})
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &amp;lt;/insert&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;&lt;span&gt;select&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;deptFind&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; resultType=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dept&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;select&lt;/span&gt; deptNo,dname,loc,flag &lt;span&gt;from&lt;/span&gt;&lt;span&gt; dept
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;
&lt;span&gt;13&lt;/span&gt; &amp;lt;/mapper&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f42eff3b-6e89-4609-92ee-3ba1a70c1958')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f42eff3b-6e89-4609-92ee-3ba1a70c1958&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f42eff3b-6e89-4609-92ee-3ba1a70c1958&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f42eff3b-6e89-4609-92ee-3ba1a70c1958',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f42eff3b-6e89-4609-92ee-3ba1a70c1958&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&lt;span&gt; 4&lt;/span&gt;   &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;configuration&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;!-- 属性配置 --&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;properties resource=&quot;config.properties&quot;&amp;gt;&amp;lt;/properties&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;!-- 别名配置 --&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;typeAliases&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.beans&quot; /&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.dao&quot; /&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;/typeAliases&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;lt;environments &lt;span&gt;default&lt;/span&gt;=&quot;development&quot;&amp;gt;
&lt;span&gt;15&lt;/span&gt;         &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;16&lt;/span&gt;         &amp;lt;environment id=&quot;development&quot;&amp;gt;
&lt;span&gt;17&lt;/span&gt;             &amp;lt;!-- 事务管理器 --&amp;gt;
&lt;span&gt;18&lt;/span&gt;             &amp;lt;transactionManager type=&quot;JDBC&quot;&amp;gt;&amp;lt;/transactionManager&amp;gt;
&lt;span&gt;19&lt;/span&gt;             &amp;lt;!-- 数据源 --&amp;gt;
&lt;span&gt;20&lt;/span&gt;             &amp;lt;dataSource type=&quot;pooled&quot;&amp;gt;
&lt;span&gt;21&lt;/span&gt;                 &amp;lt;property name=&quot;driver&quot; value=&quot;${jdbc.driver}&quot; /&amp;gt;
&lt;span&gt;22&lt;/span&gt;                 &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&amp;gt;
&lt;span&gt;23&lt;/span&gt;                 &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&amp;gt;
&lt;span&gt;24&lt;/span&gt;                 &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&amp;gt;
&lt;span&gt;25&lt;/span&gt;             &amp;lt;/dataSource&amp;gt;
&lt;span&gt;26&lt;/span&gt;         &amp;lt;/environment&amp;gt;
&lt;span&gt;27&lt;/span&gt;     &amp;lt;/environments&amp;gt;
&lt;span&gt;28&lt;/span&gt;     &amp;lt;!-- 映射器 --&amp;gt;
&lt;span&gt;29&lt;/span&gt;     &amp;lt;mappers&amp;gt;
&lt;span&gt;30&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.dao&quot; /&amp;gt;
&lt;span&gt;31&lt;/span&gt;     &amp;lt;/mappers&amp;gt;
&lt;span&gt;32&lt;/span&gt; &amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;方式二：myBatis-config.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e04cb30b-f352-413c-a3b0-5b85d2804d9e')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_e04cb30b-f352-413c-a3b0-5b85d2804d9e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e04cb30b-f352-413c-a3b0-5b85d2804d9e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e04cb30b-f352-413c-a3b0-5b85d2804d9e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e04cb30b-f352-413c-a3b0-5b85d2804d9e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&lt;span&gt; 4&lt;/span&gt;   &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;mapper namespace=&quot;com.chenyanbin.dao.DeptMapper&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;insert id=&quot;deptSave&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        insert into dept (DEPTNO,DNAME,LOC,flag)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        values(#{deptNo},#{dname},#{loc},#{flag})
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &amp;lt;/insert&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;resultMap type=&quot;dept&quot; id=&quot;deptMap&quot;&amp;gt;
&lt;span&gt;11&lt;/span&gt;     &amp;lt;result column=&quot;flag&quot; property=&quot;flag&quot; typeHandler=&quot;com.chenyanbin.util.MyTypeHandler&quot;/&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;/resultMap&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;select id=&quot;deptFind&quot; resultType=&quot;Dept&quot;&amp;gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        select deptNo,dname,loc,flag from dept
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &amp;lt;/select&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;/mapper&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;方式二：DeptMapper.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;(7) 执行单元测试:TestMain_01.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package com.chenyanbin.test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import java.io.InputStream;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import java.util.List;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import org.junit.After;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import org.junit.Before;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import org.junit.Test;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import com.chenyanbin.beans.Dept;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import com.chenyanbin.dao.DeptMapper;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestMain_01 {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSession session;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Start() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             InputStream inputStream = Resources.getResourceAsStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myBatis-config.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             SqlSessionFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             session =&lt;span&gt; factory.openSession();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    @After
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; end() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (session == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            session.close();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test01() throws IOException {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         Dept d2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dept();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         d2.setDname(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上海事业部&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         d2.setLoc(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         d2.setFlag(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         session.insert(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;deptSave&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, d2);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        session.commit();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        session.close();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test02() {        
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;           DeptMapper dao=session.getMapper(DeptMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;           List&amp;lt;Dept&amp;gt; deptList=&lt;span&gt;dao.deptFind();
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;           System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);         
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(8) 项目目录结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191013194801428-1360447538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 1.2 objectFactory 对象工厂&lt;/h2&gt;
&lt;p&gt;　　MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。&lt;/p&gt;
&lt;h3&gt;1.2.1 自定义对象工厂&lt;/h3&gt;
&lt;p&gt;表结构:dept&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191013201708785-33618720.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 实体类:Dept.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chenyanbin.beans;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dept {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer deptNo;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dname;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String loc;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Boolean flag;
&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 8     private String country;
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCountry() {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; country;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCountry(String country) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.country =&lt;span&gt; country;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getDeptNo() {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; deptNo;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Boolean getFlag() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFlag(Boolean flag) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.flag =&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDeptNo(Integer deptNo) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.deptNo =&lt;span&gt; deptNo;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getDname() {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dname;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDname(String dname) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.dname =&lt;span&gt; dname;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLoc() {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; loc;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLoc(String loc) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.loc =&lt;span&gt; loc;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(1) 继承与DefaultObjectFactory：MyObjectFactory.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chenyanbin.util;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.reflection.factory.DefaultObjectFactory;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chenyanbin.beans.Dept;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyObjectFactory &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; DefaultObjectFactory {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object create(Class type) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新定义Dept类实例对象创建规则，其他类实例对象创建规则不想改变&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (Dept.&lt;span&gt;class&lt;/span&gt; ==&lt;span&gt; type) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依靠父类提供create方法创建Dept对象&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             Dept dept = (Dept) &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.create(type);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置自定义规则&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             dept.setCountry(&quot;China&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dept;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.create(type);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2) 在MyBatis核心文件中注册自定义工厂&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&lt;span&gt; 4&lt;/span&gt;   &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;configuration&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;!-- 属性配置 --&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;properties resource=&quot;config.properties&quot;&amp;gt;&amp;lt;/properties&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;!-- 别名配置 --&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;typeAliases&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.beans&quot; /&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.dao&quot; /&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;/typeAliases&amp;gt;
&lt;span&gt;&lt;strong&gt;13     &amp;lt;!-- ObjectFactory对象工厂 --&amp;gt;
14     &amp;lt;objectFactory type=&quot;com.chenyanbin.util.MyObjectFactory&quot;&amp;gt;&amp;lt;/objectFactory&amp;gt;&lt;/strong&gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &amp;lt;!-- 类型处理器 --&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;!--     &amp;lt;typeHandlers&amp;gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        从java中的Boolean转jdbc中的NUMERIC
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &amp;lt;typeHandler handler=&quot;com.chenyanbin.util.MyTypeHandler&quot;
&lt;span&gt;19&lt;/span&gt;             javaType=&quot;Boolean&quot; jdbcType=&quot;NUMERIC&quot; /&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;/typeHandlers&amp;gt; --&amp;gt;
&lt;span&gt;21&lt;/span&gt;     &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;environments &lt;span&gt;default&lt;/span&gt;=&quot;development&quot;&amp;gt;
&lt;span&gt;23&lt;/span&gt;         &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;24&lt;/span&gt;         &amp;lt;environment id=&quot;development&quot;&amp;gt;
&lt;span&gt;25&lt;/span&gt;             &amp;lt;!-- 事务管理器 --&amp;gt;
&lt;span&gt;26&lt;/span&gt;             &amp;lt;transactionManager type=&quot;JDBC&quot;&amp;gt;&amp;lt;/transactionManager&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;lt;!-- 数据源 --&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;dataSource type=&quot;pooled&quot;&amp;gt;
&lt;span&gt;29&lt;/span&gt;                 &amp;lt;property name=&quot;driver&quot; value=&quot;${jdbc.driver}&quot; /&amp;gt;
&lt;span&gt;30&lt;/span&gt;                 &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&amp;gt;
&lt;span&gt;31&lt;/span&gt;                 &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&amp;gt;
&lt;span&gt;32&lt;/span&gt;                 &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&amp;gt;
&lt;span&gt;33&lt;/span&gt;             &amp;lt;/dataSource&amp;gt;
&lt;span&gt;34&lt;/span&gt;         &amp;lt;/environment&amp;gt;
&lt;span&gt;35&lt;/span&gt;     &amp;lt;/environments&amp;gt;
&lt;span&gt;36&lt;/span&gt;     &amp;lt;!-- 映射器 --&amp;gt;
&lt;span&gt;37&lt;/span&gt;     &amp;lt;mappers&amp;gt;
&lt;span&gt;38&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.dao&quot; /&amp;gt;
&lt;span&gt;39&lt;/span&gt;     &amp;lt;/mappers&amp;gt;
&lt;span&gt;40&lt;/span&gt; &amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 1.3 Plugins 拦截器&lt;/h2&gt;
&lt;p&gt;　　拦截器的一个作用就是我们可以拦截某些方法的调用，我们可以选择在这些被拦截的方法执行前后加上某些逻辑，也可以在执行这些被拦截的方法时执行自己的逻辑而不再执行被拦截的方法。Mybatis拦截器设计的一个初衷就是为了供用户在某些时候可以实现自己的逻辑而不必去动Mybatis固有的逻辑。打个比方，对于Executor，Mybatis中有几种实现：BatchExecutor、ReuseExecutor、SimpleExecutor和CachingExecutor。这个时候如果你觉得这几种实现对于Executor接口的query方法都不能满足你的要求，那怎么办呢？是要去改源码吗？当然不。我们可以建立一个Mybatis拦截器用于拦截Executor接口的query方法，在拦截之后实现自己的query方法逻辑，之后可以选择是否继续执行原来的query方法。&lt;/p&gt;
&lt;p&gt;　　对于拦截器Mybatis为我们提供了一个Interceptor接口，通过实现该接口就可以定义我们自己的拦截器。我们先来看一下这个接口的定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191013212840921-859676776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以看到在该接口中一共定义有三个方法，intercept、plugin和setProperties。plugin方法是拦截器用于封装目标对象的，通过该方法我们可以返回目标对象本身，也可以返回一个它的代理。当返回的是代理的时候我们可以对其中的方法进行拦截来调用intercept方法，当然也可以调用其他方法，这点将在后文讲解。setProperties方法是用于在Mybatis配置文件中指定一些属性的。&lt;/p&gt;
&lt;p&gt;       定义自己的Interceptor最重要的是要实现plugin方法和intercept方法，在plugin方法中我们可以决定是否要进行拦截进而决定要返回一个什么样的目标对象。而intercept方法就是要进行拦截的时候要执行的方法。&lt;/p&gt;
&lt;p&gt;       对于plugin方法而言，其实Mybatis已经为我们提供了一个实现。Mybatis中有一个叫做Plugin的类，里面有一个静态方法wrap(Object target,Interceptor interceptor)，通过该方法可以决定要返回的对象是目标对象还是对应的代理。&lt;/p&gt;
&lt;p&gt;对于实现自己的Interceptor而言有两个很重要的注解，一个是@Intercepts，其值是一个@Signature数组。@Intercepts用于表明当前的对象是一个Interceptor，而@Signature则表明要拦截的接口、方法以及对应的参数类型。&lt;/p&gt;

&lt;p&gt; 创建自己的拦截器：MySimpleInterceptor.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chenyanbin.util;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.executor.Executor;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.mapping.MappedStatement;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.plugin.Interceptor;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.plugin.Intercepts;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.plugin.Invocation;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.plugin.Plugin;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.plugin.Signature;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.ResultHandler;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.RowBounds;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; @Intercepts({ @Signature(method = &quot;query&quot;, type = Executor.&lt;span&gt;class&lt;/span&gt;, args = { MappedStatement.&lt;span&gt;class&lt;/span&gt;, Object.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         RowBounds.&lt;span&gt;class&lt;/span&gt;, ResultHandler.&lt;span&gt;class&lt;/span&gt;&lt;span&gt; }) })
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MySimpleInterceptor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Interceptor {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * 参数：Invocation {代理对象，被监控的方法对象，当前被监控方法运行时需要实参}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object intercept(Invocation invocation) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         System.out.println(&quot;被拦截方法执行之前，做的辅助服务。。。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         Object object = invocation.proceed(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行被拦截方法&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         System.out.println(&quot;被拦截方法执行之后，做的辅助服务。。。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;     * 参数：target 表示被拦截的对象，应该是Executor接口实例对象 作用： 如果 被拦截的对象所在的类是有实现接口就为当前拦截对象生成一个代理对象
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;     * 如果被拦截的对象所在的类没有指定接口，这个对象之后的行为不会被代理操作
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object plugin(Object target) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; Plugin.wrap(target, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProperties(Properties properties) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MyBatis核心配置文件：myBatis-config.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;!&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&lt;span&gt; 4&lt;/span&gt;   &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;configuration&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;!-- 属性配置 --&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;properties resource=&quot;config.properties&quot;&amp;gt;&amp;lt;/properties&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;!-- 别名配置 --&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;typeAliases&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.beans&quot; /&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.dao&quot; /&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;/typeAliases&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;!-- ObjectFactory对象工厂 --&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;lt;objectFactory type=&quot;com.chenyanbin.util.MyObjectFactory&quot;&amp;gt;&amp;lt;/objectFactory&amp;gt;
&lt;span&gt;&lt;strong&gt;15     &amp;lt;!-- Plugins拦截器 --&amp;gt;
16     &amp;lt;plugins&amp;gt;
17         &amp;lt;plugin interceptor=&quot;com.chenyanbin.util.MySimpleInterceptor&quot;&amp;gt;&amp;lt;/plugin&amp;gt;
18     &amp;lt;/plugins&amp;gt;&lt;/strong&gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;!-- 类型处理器 --&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;!-- &amp;lt;typeHandlers&amp;gt; 从java中的Boolean转jdbc中的NUMERIC &amp;lt;typeHandler handler=&quot;com.chenyanbin.util.MyTypeHandler&quot; 
&lt;span&gt;21&lt;/span&gt;         javaType=&quot;Boolean&quot; jdbcType=&quot;NUMERIC&quot; /&amp;gt; &amp;lt;/typeHandlers&amp;gt; --&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;23&lt;/span&gt;     &amp;lt;environments &lt;span&gt;default&lt;/span&gt;=&quot;development&quot;&amp;gt;
&lt;span&gt;24&lt;/span&gt;         &amp;lt;!-- 环境配置 --&amp;gt;
&lt;span&gt;25&lt;/span&gt;         &amp;lt;environment id=&quot;development&quot;&amp;gt;
&lt;span&gt;26&lt;/span&gt;             &amp;lt;!-- 事务管理器 --&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;lt;transactionManager type=&quot;JDBC&quot;&amp;gt;&amp;lt;/transactionManager&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;!-- 数据源 --&amp;gt;
&lt;span&gt;29&lt;/span&gt;             &amp;lt;dataSource type=&quot;pooled&quot;&amp;gt;
&lt;span&gt;30&lt;/span&gt;                 &amp;lt;property name=&quot;driver&quot; value=&quot;${jdbc.driver}&quot; /&amp;gt;
&lt;span&gt;31&lt;/span&gt;                 &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&amp;gt;
&lt;span&gt;32&lt;/span&gt;                 &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&amp;gt;
&lt;span&gt;33&lt;/span&gt;                 &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&amp;gt;
&lt;span&gt;34&lt;/span&gt;             &amp;lt;/dataSource&amp;gt;
&lt;span&gt;35&lt;/span&gt;         &amp;lt;/environment&amp;gt;
&lt;span&gt;36&lt;/span&gt;     &amp;lt;/environments&amp;gt;
&lt;span&gt;37&lt;/span&gt;     &amp;lt;!-- 映射器 --&amp;gt;
&lt;span&gt;38&lt;/span&gt;     &amp;lt;mappers&amp;gt;
&lt;span&gt;39&lt;/span&gt;         &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;com.chenyanbin.dao&quot; /&amp;gt;
&lt;span&gt;40&lt;/span&gt;     &amp;lt;/mappers&amp;gt;
&lt;span&gt;41&lt;/span&gt; &amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单元测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chenyanbin.test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.plugin.Interceptor;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chenyanbin.beans.Dept;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chenyanbin.dao.DeptMapper;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestMain_01 {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSession session;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Start() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             InputStream inputStream = Resources.getResourceAsStream(&quot;myBatis-config.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             SqlSessionFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             session =&lt;span&gt; factory.openSession();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    @After
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; end() {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (session == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            session.close();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test01() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         Dept d2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dept();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         d2.setDname(&quot;上海事业部&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         d2.setLoc(&quot;上海&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         d2.setFlag(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         session.insert(&quot;deptSave&quot;&lt;span&gt;, d2);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        session.commit();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        session.close();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test02() {    
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        Interceptor ccInterceptor;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;           DeptMapper dao=session.getMapper(DeptMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;           List&amp;lt;Dept&amp;gt; deptList=&lt;span&gt;dao.deptFind();
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;           System.out.println(&quot;ok&quot;&lt;span&gt;);         
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191013215306095-344470039.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a1b97ebb-ccb2-44a9-b902-58b9e74569e5')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_a1b97ebb-ccb2-44a9-b902-58b9e74569e5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a1b97ebb-ccb2-44a9-b902-58b9e74569e5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a1b97ebb-ccb2-44a9-b902-58b9e74569e5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a1b97ebb-ccb2-44a9-b902-58b9e74569e5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;##define an appender named console
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; log4j.appender.console=&lt;span&gt;org.apache.log4j.ConsoleAppender
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#The Target value is System.out or System.err
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; log4j.appender.console.Target=&lt;span&gt;System.out
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#set the layout type of the apperder
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; log4j.appender.console.layout=&lt;span&gt;org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#set the layout format pattern
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; log4j.appender.console.layout.ConversionPattern=[%-5p] %m%&lt;span&gt;n
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;##define a logger
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; log4j.rootLogger=debug,console
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;log4j.properties&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;MyBatis自定义拦截器，可以拦截接口只有四种.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Executor.class&lt;/li&gt;
&lt;li&gt;StatementHandler.class&lt;/li&gt;
&lt;li&gt;ParameterHandler.class&lt;/li&gt;
&lt;li&gt;ResultSetHandler.class&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.1 参数(#{参数名})&lt;/h2&gt;
&lt;p&gt; #{}实现的是向prepareStatement中的预处理语句中设置参数值，sql语句中#{}表示一个占位符即?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015220923004-764187962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用#{参数名},将参数的内容添加到sql语句中指定位置.&lt;/p&gt;
&lt;p&gt;如果当前sql语句中只有一个参数,此时参数名称可以随意定义&lt;/p&gt;
&lt;p&gt;    但是,如果当前sql语句有多个参数,此时参数名称应该是与当前表关联[实体类的属性名]或则[Map集合关键字]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015220949266-1385829932.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上述SQL语句在调用时,我们可以分别采用如下两种方式输入参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221004016-796236489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用#{}读取实体类对象属性内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221019765-920102580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用#{}读取map集合中关键字的值&lt;/p&gt;
&lt;h2&gt;2.2 #{}和${}区别&lt;/h2&gt;
&lt;p&gt;在MyBatis中提供了两种方式读取参数的内容到SQL语句中,分别是&lt;/p&gt;
&lt;p&gt;#{参数名} :实体类对象或则Map集合读取内容&lt;/p&gt;
&lt;p&gt; ${参数名} :实体类对象或则Map集合读取内容&lt;/p&gt;

&lt;p&gt;为了能够看到两种方式的区别,需要看到MyBatis执行时输送的SQL情况.因此&lt;/p&gt;
&lt;p&gt;需要借助Log4J日志进行观察&lt;/p&gt;

&lt;p&gt;第一步: 加载Log4j日志工具包到项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221145410-563128324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二步:将Log4j配置文件添加到src/main/resources下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221202477-2007906798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来,我们可以查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221219370-841821926.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221231817-893356706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 从这里我们可以看出两者的区别:&lt;/p&gt;
&lt;p&gt; #{} : 采用预编译方式,可以防止SQL注入&lt;/p&gt;
&lt;p&gt; ${}:  采用直接赋值方式,无法阻止SQL注入攻击&lt;/p&gt;
&lt;p&gt;在大多数情况下,我们都是采用#{}读取参数内容.但是在一些特殊的情况下,我们还是需要使用${}读取参数的.&lt;/p&gt;
&lt;p&gt;比如 有两张表,分别是emp_2017 和 emp_2018 .如果需要在查询语句中动态指定表名,就只能使用${}&lt;/p&gt;
&lt;p&gt;&amp;lt;select&amp;gt;&lt;/p&gt;
&lt;p&gt;      select *  from emp_${year}&lt;/p&gt;
&lt;p&gt;&amp;lt;select&amp;gt;&lt;/p&gt;
&lt;p&gt;再比如.需要动态的指定查询中的排序字段,此时也只能使用${}&lt;/p&gt;
&lt;p&gt;&amp;lt;select&amp;gt;&lt;/p&gt;
&lt;p&gt;       select  *  from dept order by ${name}&lt;/p&gt;
&lt;p&gt;&amp;lt;/select&amp;gt;&lt;/p&gt;
&lt;p&gt;简单来说,在JDBC不支持使用占位符的地方,都可以使用${}&lt;/p&gt;
&lt;h2&gt;2.3 resultMap&lt;/h2&gt;
&lt;p&gt;　　MyBatis框架中是根据表中字段名到实体类定位同名属性的.如果出现了实体类属性名与表中字段名不一致的情况,则无法自动进行对应.此时可以使用resultMap来重新建立实体类与字段名之间对应关系.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221425507-1909426616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 2.4 Sql标签&lt;/h2&gt;
&lt;p&gt;首先,我们如下两条SQL映射&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221507367-364332679.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两条查询映射中要查询的表以及查询的字段是完全一致的.因此可以&amp;lt;sql&amp;gt;标签&lt;/p&gt;
&lt;p&gt; 将[select  *  from dept]进行抽取.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221521128-1577539291.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在需要使用到这个查询的地方,通过&amp;lt;include&amp;gt;标签进行引用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221537054-1914487678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.1 什么是MyBatis动态SQL&lt;/h2&gt;
&lt;p&gt; 根据用户提供的参数,动态决定查询语句依赖的查询条件或则SQL语句的内容&lt;/p&gt;
&lt;h2&gt;3.2 动态SQL依赖标签&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;choose、when、otherwise&lt;/li&gt;
&lt;li&gt;trim、where、set&lt;/li&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;if使用&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015221906400-1216457122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; choose、when、otherwise&lt;/h3&gt;
&lt;p&gt;　　类似于Java中的switch case default. 只有一个条件生效,也就是只执行满足的条件when,没有满足的条件就执行otherwise,表示默认条件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222003657-1494383136.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; when的使用&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222026882-1837917106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; set使用&lt;/h3&gt;
&lt;p&gt;会在成功拼接的条件前加上SET&lt;span&gt;单词且最后一个&lt;/span&gt;”,”号会被无视掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222109831-169747293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; trim使用&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222127637-1390020676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; foreach的使用&lt;/h3&gt;
&lt;p&gt;foreach标签用于对集合内容进行遍历,将得到内容作为SQL语句的一部分.&lt;/p&gt;
&lt;p&gt;在实际开发过程中主要用于in语句的构建和批量添加操作&lt;/p&gt;
&lt;p&gt;foreach元素的属性主要有 item，index，collection，open，separator，close。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222205330-597086735.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;案例1.使用foreach实现批处理添加&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222225193-1634688011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 案例2.使用foreach遍历list集合作为查询条件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222242606-579869025.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 案例3.使用foreach遍历数组作为查询条件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222255578-762632215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;案例4.使用foreach遍历Map作为查询条件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201910/1504448-20191015222308483-1584864854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 16 Oct 2019 00:01:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>第1章MyBatis框架配置文件详解 1.1 typeHandlers类型转换器 每当MyBatis 设置参数到PreparedStatement 或者从ResultSet 结果集中取得值时，就会使用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chenyanbin/p/11656461.html</dc:identifier>
</item>
<item>
<title>[ASP.NET Core 3框架揭秘] 依赖注入：控制反转 - Artech</title>
<link>http://www.cnblogs.com/artech/p/inside-asp-net-core-03-01.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/artech/p/inside-asp-net-core-03-01.html</guid>
<description>&lt;p&gt;ASP.NET Core框架建立在一些核心的基础框架之上，这些基础框架包括依赖注入、文件系统、配置选项和诊断日志等。这些框架不仅仅是支撑ASP.NET Core框架的基础，我们在进行应用开发的时候同样会频繁地使用到它们。对于这里提到的这几个基础框架，依赖注入尤为重要。ASP.NET Core应用在启动以及后续针对请求的处理过程中，它会依赖各种的组件提供服务。为了便于定制，这些组件一般会以接口的形式进行“标准化”，我们将这些标准化的组件统一称为“服务（Service）”。整个ASP.NET Core框架建立在一个底层的依赖注入框架之上，它使用依赖注入容器来提供所需的服务对象。要了解这个依赖注入容器以及它的服务提供机制，我们得先知道什么是“依赖注入（DI：Dependence Injection）”。一旦我们提到依赖注入，又不得不说说“控制反转（IoC：Inverse of Control）”。&lt;/p&gt;

&lt;p&gt;软件开发中的一些所谓的设计理念往往没有一个明确的定义，比如之前流行的SOA和现在炒得火热的“微服务（Micro Service）”和“无服务器（Serverless）”，我们都没法通过一个明确的“内涵”给它们一个准确的定义，而只能从“外延”上描述这些架构设计应该具有怎样的特性。正因为无法给出一个明确的界定，这造成了人们针对同一个概念往往会有很多不同的理解。针对IoC也是这种情况，所以本章所述的仅仅代表作者的一家之言，读者朋友姑且听之，仅作参考。&lt;/p&gt;
&lt;p&gt;我听到很多人将IoC说成是一种“面向对象的设计模式”，但在我个人看来&lt;strong&gt;IoC不但不能算作一种“设计模式”，其自身也与“面向对象”没有直接的关系&lt;/strong&gt;。很多人之所以不能很准确地理解IoC，缘于他们忽略了一个最根本的东西，那就是IoC这个短语本身。&lt;/p&gt;
&lt;p&gt;IoC的全名Inverse of Control，翻译成中文就是“&lt;strong&gt;控制反转&lt;/strong&gt;”或者“&lt;span&gt;控制倒置&lt;/span&gt;”。控制反转也好，控制倒置也罢，它体现的意思是控制权的转移，即控制权原来在A手中，现在需要B来接管。那么对于软件设计来说，IoC所谓的控制权转移具有怎样的体现呢？要回答这个问题，就需要先了解IoC的C（Control）究竟指的是怎样一种控制。对于我们所在的任何一项任务，不论其大小，基本上都可以分解成相应的步骤，所以任何一项任务的实施都有其固有的流程，而IoC涉及的控制可以理解为“&lt;strong&gt;针对流程的控制&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;我们通过一个具体实例来说明传统的设计在采用了IoC之后针对流程的控制是如何实现反转的。比如我们要设计一个针对Web的MVC类库，不妨将其命名为MvcLib。简单起见，这个类库中只包含如下这个同名的静态类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MvcLib
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Task ListenAsync(Uri address);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;Request&amp;gt;&lt;span&gt; ReceiveAsync();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;Controller&amp;gt;&lt;span&gt; CreateControllerAsync(Request request);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;View&amp;gt;&lt;span&gt; ExecuteControllerAsync(Controller controller);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Task RenderViewAsync(View view);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MvcLib提供了如上5个方法帮助我们完成整个HTTP请求流程中的5个核心任务。具体来说，&lt;strong&gt;ListenAsync&lt;/strong&gt;方法启动一个监听器并将其绑定到指定的地址进行HTTP请求的监听，抵达的请求通过&lt;strong&gt;ReceiveAsync&lt;/strong&gt;方法进行接收，接收到的请求通过一个Request对象来表示。&lt;strong&gt;CreateControllerAsync&lt;/strong&gt;方法根据接收到的请求解析并激活目标Controller对象。&lt;strong&gt;ExecuteControllerAsync&lt;/strong&gt;方法执行激活的Controller并返回一个表示视图的View对象。&lt;strong&gt;RenderViewAsync&lt;/strong&gt;最终将View对象转换成HTML并作为当前请求响应的内容返回给请求的客户端。&lt;/p&gt;
&lt;p&gt;现在我们在这个MvcLib的基础上创建一个真正的MVC应用。我们会发现除了按照MvcLib的规范自定义具体的Controller和View之外，我们还需要自行控制从请求的监听与接收、Controller的激活与执行以及View的最终呈现在内的整个流程，这样一个执行流程反映在如下所示的代码中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
{
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Main()
    {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; address = &lt;span&gt;new&lt;/span&gt; Uri(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://0.0.0.0:8080/mvcapp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; MvcLib.ListenAsync(address);
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; MvcLib.ReceiveAsync();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; controller = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; MvcLib.CreateControllerAsync(request);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; view = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; MvcLib.ExecuteControllerAsync(controller);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; MvcLib.RenderViewAsync(view);
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子体现了如下图所示的流程控制方式（应用的代码完全采用异步的方式来处理请求，为了让流程图显得更加简单，我们在流程图中画成了同步的形式，读者不必纠结这个问题）。我们设计的类库（MvcLib）仅仅通过API的形式提供各种单一功能的实现，作为类库消费者的应用程序（App）则需要自行编排整个工作流程。如果从代码重用的角度来讲，这里被重用的仅限于实现某个环节单一功能的代码，&lt;strong&gt;编排整个工作流程的代码并没有得到重用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016072958914-1918322843.png&quot;&gt;&lt;img width=&quot;424&quot; height=&quot;332&quot; title=&quot;3-1&quot; alt=&quot;3-1&quot; src=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016072959319-1036841127.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是在真实开发场景下，我们需要的不仅仅是一个能够提供单一API的类库，而是能够直接在上面构建应用的框架。类库（Library）和框架（Framework）的不同之处在于：前者往往只是提供实现某种单一功能的API，而后者则针对一个目标任务对这些单一功能进行编排形成一个完整的流程，并利用一个引擎驱动这个流程自动执行。&lt;/p&gt;
&lt;p&gt;对于我们上面演示的MvcLib来说，作为消费者的应用程序需要自行控制整个HTTP请求的处理流程，但这实际上这是一个很“&lt;strong&gt;泛化&lt;/strong&gt;”的工作流程，几乎所有的MVC应用均采用这样的流程来监听、接收请求并最终对请求予以响应。如果我们将这个流程实现在一个MVC框架之中，由它构建的所有MVC应用就可以直接使用这个请求处理流程，不需要作无谓的DIY（Do It Yourself）。&lt;/p&gt;
&lt;p&gt;现在我们将MvcLib从类库改造成一个框架，姑且将其称为MvcFrame。如下图所示，MvcFrame的核心是一个被称为MvcEngine的执行引擎，它驱动一个编排好的工作流对HTTP请求进行一致性处理。如果我们利用MvcFrame构建一个具体的MVC应用，除了根据我们的业务需求定义相应的Controller和View之外，我们只需要初始化这个引擎并直接启动它即可。如果你曾经开发过ASP.NET MVC应用，你会发现ASP.NET MVC就是这么一个框架。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016072959610-984334686.png&quot;&gt;&lt;img width=&quot;413&quot; height=&quot;229&quot; title=&quot;3-2&quot; alt=&quot;3-2&quot; src=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016072959883-1197910949.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有了前面演示的这个例子作为铺垫，我们应该很容易理解IoC所谓的控制反转本质上说的是什么了。总的来说，IoC是我们设计框架所采用的一种基本思想，所谓的控制反转就是&lt;strong&gt;将应用对流程的控制转移到框架中&lt;/strong&gt;。拿前面这个例子来说，在传统面向类库编程的时代，针对HTTP请求处理的流程牢牢控制在应用程序手中。在引入框架之后，请求处理的控制权转移到了框架手中。&lt;/p&gt;

&lt;p&gt;在好莱坞，演员把简历递交给演艺公司后就只有回家等待。由于演艺公司对整个娱乐项目具有完全控制权，演员只能被动地接受电影公司的邀约。“不要给我们打电话，我们会给你打电话（Don‘t call us, we‘ll call you）”这是著名的好莱坞法则（ Hollywood Principle或者 Hollywood Low），IoC完美地体现了这一法则。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016073000210-1124370223.png&quot;&gt;&lt;img width=&quot;391&quot; height=&quot;295&quot; title=&quot;3-3&quot; alt=&quot;3-3&quot; src=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016073000546-1994228085.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在IoC的语境中，框架就像是掌握整个电影制片流程的电影公司，由于它是整个工作流程的实际控制者，所以只有它知道哪个环节需要哪些人员。应用程序就像是演员，它只需要按照框架定制的规则注册这些组件就可以了，因为框架会在适当的时机自动加载并执行注册的组件。&lt;/p&gt;
&lt;p&gt;以熟悉的ASP.NET MVC应用开发来说，我们只需要按照约定的规则（比如约定的目录结构和文件与类型命名方式等）定义相应的Controller类型和View文件就可以了。当ASP.NET MVC框架在处理请求的过程中，它会根据路由解析生成参数得到目标Controller的类型，然后自动创建Controller对象并执行它。如果目标Action方法需要呈现一个View，框架会根据预定义的目录约定找到对应的View文件（.cshtml文件），并对它实施动态编译生成对应的类型。当目标View对象创建出来之后，它执行之后生成的HTML会作为响应回复给客户端。可以看出，整个请求流程处处体现了“&lt;strong&gt;框架Call应用&lt;/strong&gt;”的好莱坞法则。&lt;/p&gt;
&lt;p&gt;总的来说，我们在一个框架的基础上进行应用开发，就相当于在一条调试好的流水线上生产某种商品。我们只需要在相应的环节准备对应的原材料，最终下线的就是我们希望得到的产品。&lt;strong&gt;IoC几乎是所有框架均具有的一个固有属性&lt;/strong&gt;，从这个意义上讲，“IoC框架”的说法其实是错误的，&lt;strong&gt;世界上并没有什么IoC框架，或者说所有的框架都是IoC框架&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们采用IoC实现了流程控制从应用程序向框架的转移，但是被转移的仅仅是一个泛化的流程，任何一个具体的应用都可能需要对该流程的某些环节进行定制。还是以我们的MVC框架来说，默认实现的请求处理流程可以只考虑针对HTTP 1.1的支持，但是我们在设计框架的时候应该提供相应的扩展点来支持HTTP 2。作为一个Web框架，用户认证功能是必备的，但是框架自身不能限制于某一种或者几种固定的认证方式，它应该允许我们通过扩展实现任意的认证模式。&lt;/p&gt;
&lt;p&gt;我们可以说得更加宽泛点。如下图所示，我们将一个泛化的工作流程（A=&amp;gt;B=&amp;gt;C）定义在框架之中，建立在该框架的两个应用需要对组成这个流程的某些环节进行定制。比如步骤A和C可以被App1重用，但是步骤B却需要被定制（B1）。App2则重用步骤A和B，但是需要按照自己的方式处理步骤C。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016073000781-1967062101.png&quot;&gt;&lt;img width=&quot;376&quot; height=&quot;238&quot; title=&quot;3-4&quot; alt=&quot;3-4&quot; src=&quot;https://img2018.cnblogs.com/blog/19327/201910/19327-20191016073000994-1283306985.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IoC将对流程的控制从应用程序转移到框架之中，框架利用一个引擎驱动整个流程的自动化执行。应用程序无需关心工作流程的细节，它只需要启动这个引擎即可。这个引擎一旦被启动，框架就会完全按照预先编排好的流程进行工作，如果应用程序希望整个流程按照自己希望的方式被执行，需要在启动之前对流程进行定制。一般来说，框架会以相应的形式提供一系列的扩展点，应用程序通过注册扩展的方式实现对流程某个环节的定制。在引擎被启动之前，应用程序将所需的扩展注册到框架之中。一旦引擎被正常启动，这些注册的扩展会自动参与到整个流程的执行过程中。&lt;/p&gt;
&lt;p&gt;综上所述，IoC一方面&lt;strong&gt;通过流程控制从应用程序向框架的反转实现了针对流程自身的重用&lt;/strong&gt;，另一方面&lt;strong&gt;通过内置的扩展机制使这个被重用的流程能够自由地被定制&lt;/strong&gt;，这两个因素决定了框架自身的价值。重用让框架不仅仅是为应用程序提供实现单一功能的API，而是提供一整套可执行的解决方案，可定制则使我们可以为不同的应用程序对框架进行定制，这无疑让框架可以使用到更多的应用之中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-03-01.html&quot;&gt;[ASP.NET Core 3框架揭秘] 依赖注入：控制反转&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-03-02.html&quot;&gt;[ASP.NET Core 3框架揭秘] 依赖注入：IoC模式&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-03-03.html&quot;&gt;[ASP.NET Core 3框架揭秘] 依赖注入：依赖注入模式&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-03-04.html&quot;&gt;[ASP.NET Core 3框架揭秘] 依赖注入：一个迷你版DI框架&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 15 Oct 2019 23:30:00 +0000</pubDate>
<dc:creator>Artech</dc:creator>
<og:description>ASP.NET Core框架建立在一些核心的基础框架之上，这些基础框架包括依赖注入、文件系统、配置选项和诊断日志等。这些框架不仅仅是支撑ASP.NET Core框架的基础，我们在进行应用开发的时候同样</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/artech/p/inside-asp-net-core-03-01.html</dc:identifier>
</item>
<item>
<title>500行代码，教你用python写个微信飞机大战 - 上海小胖</title>
<link>http://www.cnblogs.com/moonhmily/p/11682195.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/moonhmily/p/11682195.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191015062126389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly94aWFvcGFuZy5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这几天在重温微信小游戏的飞机大战，玩着玩着就在思考人生了，这飞机大战怎么就可以做的那么好，操作简单，简单上手。&lt;/p&gt;
&lt;p&gt;帮助蹲厕族、YP族、饭圈女孩在无聊之余可以有一样东西让他们振作起来！让他们的左手 / 右手有节奏有韵律的朝着同一个方向来回移动起来！&lt;/p&gt;
&lt;p&gt;这是史诗级的发明，是浓墨重彩的一笔，是……&lt;br/&gt;在一阵抽搐后，我结束了游戏，瞬时觉得一切都索然无味，正在我进入贤者模式时，突然想到，如果我可以让更多人已不同的方式体会到这种美轮美奂的感觉岂不美哉？&lt;/p&gt;
&lt;p&gt;所以我打开电脑，创建了一个 &lt;code&gt;plan_game.py&lt;/code&gt;……&lt;/p&gt;
&lt;p&gt;先看效果图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191015205133675.gif&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;操作系统：windows10&lt;/li&gt;
&lt;li&gt;python版本：python 3.7&lt;/li&gt;
&lt;li&gt;代码编辑器：pycharm 2018.2&lt;/li&gt;
&lt;li&gt;使用模块：os,sys,random,pygame&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为实现代码使用到了一个pygame的第三方模块，没有的先 &lt;code&gt;pip install&lt;/code&gt; 一下，这里顺便提供一个比较好的pygame的教程.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://eyehere.net/2011/python-pygame-novice-professional-index/&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;首先我们先指定素材文件的文件目录.方便我们后面的使用。这些素材已经全部上传至公众号&lt;strong&gt;Python专栏&lt;/strong&gt;，后台回复：&lt;strong&gt;飞机大战&lt;/strong&gt;，即可获得。&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import os

# 得到当前文件夹下面的material_images目录的路径
source_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'material_images')&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;实现一个Game类，用来完成这个游戏的主要逻辑。&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import pygame


class Game():
    def __init__(self, background_image_path, size=(480, 700), title='飞机大战', font_name='方正舒体', font_size=30, speed=2000):
        '''
        :param background_image_path: 背景图片的路径地址
        :param size: 游戏窗口的大小
        :param title: 游戏窗口的标题
        :param font_name: 指定字体
        :param font_size: 指定字体大小
        :param speed: 背景图滚动整个窗口一次所用时间，单位为ms
        '''
        self.size = size
        self.screen = pygame.display.set_mode(size)
        self.title = title
        self.background_image_path = background_image_path
        self.background = pygame.image.load(self.background_image_path).convert()
        # 设置字体对象，得到系统中自带的字体
        self.font = pygame.font.SysFont(font_name, font_size)
        # 得到Clock对象，我们可以使用它来获取距离上次绘制图像的时间
        self.clock = pygame.time.Clock()
        # 背景图初始位置
        self.height = 0
        # 使用窗口的高度处于滚动的时间，就能得到每ms滚动的距离
        self.every_ms_move_distance = self.size[1] / speed   # 2秒
        # 分数
        self.score = 0
        # 存放所有的敌机
        self.enemies = []


    def show_score(self):
        '''
        显示分数, 在窗口的的最上方距离上边距10px， 左右居中
        '''
        pass


    def set_time_passed(self):
        # 控制画 的帧， 越大越快
        # 得到上一次绘制图像到到现在的时间, ms
        self.time_passed = self.clock.tick()


    def draw_background(self):
        '''
        绘制背景图片，一直向下滚动，营造飞机一直往上面飞的感觉
        '''
        # 每次移动的距离 = 每ms移动的距离 * 上次到现在的时间（ms）
        pass


    def create_enemy(self, image_path=os.path.join(source_dir,'enemy1.png'), enemy_number=5):
        '''
        创建敌机
        :param image_path: 敌机的图片地址
        :param enemy_number: 最多有几个敌机在屏幕上
        '''
        pass


    def draw_enemies(self, time_passed, screen):
        '''
        绘制敌机到屏幕上，清理跑出窗口的敌机，
        :param time_passed: 上次绘制导向现在经过的时间
        :param screen: 绘制的窗口对象
        '''
        pass


    def bullet_and_enemy_crash_detection(self, bullets):
        '''
        检测子弹是否击中敌机
        :param bullets: 飞机的所有子弹
        '''
        pass


    def plan_and_enemy_crash_detection(self, plan, allow_crash_size=None):
        '''
        检测敌机与飞机是否相撞
        :param plan: 飞机对象
        :param allow_crash_size: 允许飞机碰撞的大小，只有左右有效
        '''
        pass


    def draw_plan(self, plan, time_passed):
        '''
        绘制飞机
        :param plan: 飞机对象
        :param time_passed: 距离上次绘制的时间
        :return:
        '''
        pass


    def game_over(self):
        '''
        游戏结束
        '''
        while True:
            # 绘制背景图
            pass


    def run(self):
        '''
        游戏入口函数，开始函数，主体函数
        :return:
        '''

        # 设置游戏窗口的大小
        pygame.display.set_caption(self.title)
        # 初始化一个飞机对象
        plan = Plan()

        while True:
            # 如果飞机自毁完成, 游戏结束, 调用game_over函数
            pass

            # 检测监听事件
            pass

            # 检测上下左右的移动案件.
            # w,a,s,d 和 上,下,左,右键都可以
            # 然后执行plan.update函数，改变飞机的位置
            pass

            # 子弹和敌机的碰撞检测
            self.bullet_and_enemy_crash_detection(plan.bullets)
            # 飞机与敌机的碰撞检测
            self.plan_and_enemy_crash_detection(plan)
            # 设置属性time_passed的值， 距离上次的时间，方便后面使用
            self.set_time_passed()
            # 绘制背景图片
            self.draw_background()
            # 显示分数
            self.show_score()
            # 生成敌机
            self.create_enemy()
            # 绘制敌机
            self.draw_enemies(time_passed=self.time_passed, screen=self.screen)
            # 绘制飞机
            self.draw_plan(plan=plan, time_passed=self.time_passed)
            # 绘制子弹
            plan.draw_bullets(time_passed=self.time_passed, screen=self.screen)
            # 显示我们的图像
            pygame.display.update()

这里说以下怎样查看自己的系统中有哪些自带的字体.
pygame.font.get_fonts()，这个函数就能够得到系统中所有的自带字体文件。不过，当我们游戏中有中文的时候，我们也得选择支持中文的字体，否则的话是显示不出中文的。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191015073653291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly94aWFvcGFuZy5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现DestroyAnimationMixin类，这个类主要是用来显示飞机或敌机的自毁动画&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 显示飞机自毁动画的Mixin类, 可用于飞机和敌机的自毁动画显示
class DestroyAnimationMixin():

    def show_destroy_animation(self, time_passed, destroy_time=200):
        '''
        显示自毁动画
        动画其实就是几张图片切换的比较快，我们的眼睛识别不出来，所以认为他是动态的，也就是动画
        :param time_passed: 距离上次绘制图像到现在的时间，单位ms
        :param destroy_time: 自毁动画总共显示时间，单位ms
        '''

        # 因为我们的自毁图片有四张，需要依次显示，首先动画的效果
        # self.destroy_image_position 表示第几章自毁图片，从零开始
        # 如果大于等于4了，说明自毁动画显示完成，设置self.destroyed变量为True, 方便别处调用
        if self.destroy_image_position &amp;gt;= 4:
            self.destroyed = True
            return

        # 依次加载自毁图片
        if self.time_passed &amp;gt;= destroy_time / 4:
            self.image = pygame.image.load(os.path.join(source_dir, self.destroy_images[self.destroy_image_position])).convert_alpha()
            self.destroy_image_position += 1
            self.time_passed = 0
        else:
            self.time_passed += time_passed&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/201910150737090.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly94aWFvcGFuZy5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现飞机类，完成飞机的主要操作。飞机的操作包括：飞机位置、飞机子弹、发射子弹等。&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 飞机类，继承DestroyAnimationMixin， 方便使用显示自毁动画的函数
class Plan(DestroyAnimationMixin):
    def __init__(self, image_path=os.path.join(source_dir,'plan.png'), background_size=(480, 700)):
        '''
        :param image_path: 飞机图片地址
        :param background_size: 游戏窗口大小
        '''
        self.background_size = background_size
        self.image = pygame.image.load(image_path).convert_alpha()
        self.image_size = self.image.get_size()
        self.position = [(background_size[0]-self.image_size[0]) / 2, 500]
        # 飞机每次移动的距离
        self.every_time_move_distance = 0.5
        # 飞机的子弹
        self.bullets = []
        # destroy association attributes， 自毁相关属性
        # 开始自毁
        self.start_destroy = False
        # 自毁结束
        self.destroyed = False
        # 自毁图片
        self.destroy_images = ['me_destroy_1.png', 'me_destroy_2.png', 'me_destroy_3.png', 'me_destroy_4.png']
        # 自毁图片位置
        self.destroy_image_position = 0
        # 距离上次绘制图像到现在的时间
        self.time_passed = 0

    def update(self, direction):
        '''
        更新飞机位置
        :param direction: 飞机移动方向
        '''
        pass

    def shut(self, image_path=os.path.join(source_dir,'bullet.png')):
        '''
        飞机发射子弹
        :param image_path: 子弹图片
        '''
        pass

    def draw_bullets(self, time_passed, screen):
        '''
        绘制飞机的所有子弹
        :param time_passed: 距离上次绘制图像到现在的时间
        :param screen: 绘制到哪一个窗口中
        '''
        pass&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191015073736600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly94aWFvcGFuZy5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现敌机类，完成敌机的主要操作。主要是用来更新位置。&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 敌机类，继承DestroyAnimationMixin， 方便使用显示自毁动画的函数
class Enemy(DestroyAnimationMixin):
    def __init__(self, image_path=os.path.join(source_dir, 'enemy1.png'), speed=2000, background_size=(480, 700)):
        '''
        :param image_path: 敌机图片地址
        :param speed: 敌机移动整个窗口需要的时间，单位ms，也就是速度
        :param background_size: 游戏窗口的尺寸
        '''
        self.image = pygame.image.load(image_path).convert_alpha()
        self.speed = background_size[1] / speed
        self.background_size = background_size
        self.position = [random.randint(0, background_size[0]-self.image.get_size()[0]), -self.image.get_size()[1]]
        # 开始自毁
        self.start_destroy = False
        # 自毁完成
        self.destroyed = False
        # 自毁图片路径
        self.destroy_images = ['enemy1_down1.png', 'enemy1_down2.png', 'enemy1_down3.png', 'enemy1_down3.png']
        # 距离上次绘制图像到现在的时间
        self.time_passed = 0
        # 自毁图片在self.destroy_images的位置
        self.destroy_image_position = 0

    def update(self, time_passed):
        '''
        更新敌机的位置
        :param time_passed: 距离上次绘制图像到现在的时间
        :return:
        '''
        pass&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;实现子弹类，完成子弹的主要操作&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 飞机子弹类
class Bullet():
    def __init__(self, image_path=os.path.join(source_dir,'bullet.png'), background_size=(480, 700), plan=None, speed=1000):
        '''
        :param image_path: 子弹的图片地址
        :param background_size: 游戏窗口大小
        :param plan: 飞机对象
        :param speed: 子弹飞行速度
        '''
        self.image = pygame.image.load(image_path).convert_alpha()
        self.background_size = background_size
        self.speed = background_size[1] / speed
        # 子弹是否击中敌机
        self.destroyed = False
        self.position = self._get_position(plan)

    def _get_position(self, plan):
        '''
        根据plan得到子弹发出位置
        :param plan: 飞机对象
        '''
        bullet_size = self.image.get_size()
        plan_width = plan.image_size[0]
        x = (plan_width-bullet_size[0]) / 2
        return [plan.position[0] + x, plan.position[1]]

    def update(self, time_passed):
        '''
        改变子弹位置
        :param time_passed: 距离上次绘制图像到现在的时间
        '''
        # 如果子弹超出屏幕或者击中敌机，就设置self.position[1]为-100,在plan.draw的时候就移除它
        if self.position[1] + self.image.get_size()[1] &amp;lt;= 0 or self.destroyed:
            self.position[1] = -100
            return

        # 改变的距离 = 时间 * 速率
        self.position[1] -= time_passed * self.speed&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191015073747950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly94aWFvcGFuZy5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样，我们就把所有的操作都实现完了，接下来只需要使用 Game().run()，就可以运行我们的游戏了。&lt;/p&gt;
&lt;p&gt;关注公众号：&lt;strong&gt;Python专栏&lt;/strong&gt;，后台回复：&lt;strong&gt;飞机大战&lt;/strong&gt;，即可获得完整代码及素材包。&lt;/p&gt;
</description>
<pubDate>Tue, 15 Oct 2019 21:43:00 +0000</pubDate>
<dc:creator>上海小胖</dc:creator>
<og:description>这几天在重温微信小游戏的飞机大战，玩着玩着就在思考人生了，这飞机大战怎么就可以做的那么好，操作简单，简单上手。  帮助蹲厕族、YP族、饭圈女孩在无聊之余可以有一样东西让他们振作起来！让他们的左手</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/moonhmily/p/11682195.html</dc:identifier>
</item>
<item>
<title>CSS ellipsis 与 padding 结合时的问题 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/css_ellipsis_and_padding.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/css_ellipsis_and_padding.html</guid>
<description>&lt;h2&gt;CSS 实现的文本截断&lt;/h2&gt;
&lt;p&gt;考察如下代码实现文本超出自动截断的样式代码：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-css&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-e&quot;&gt;.truncate-text-4&lt;/span&gt; {
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;overflow&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;hidden&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;text-overflow&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;ellipsis&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;display&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;-webkit-box&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;-webkit-box-orient&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;vertical&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;-webkit-line-clamp&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用如下的 HTML 片段进行测试：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;style&lt;/span&gt;&amp;gt;
&lt;span class=&quot;pl-s1&quot;&gt;  &lt;span class=&quot;pl-e&quot;&gt;.my-div&lt;/span&gt; {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;width&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;300&lt;span class=&quot;pl-k&quot;&gt;px&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;margin&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;10&lt;span class=&quot;pl-k&quot;&gt;px&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;auto&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;background&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;#ddd&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;  }&lt;/span&gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;style&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;my-div truncate-text-4&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
  How Not To Shuffle - The Knuth Fisher-Yates Algorithm. Written by Mike James.
  Thursday, 16 February 2017. Sometimes simple algorithms are just wrong. In
  this case shuffling an .... In other words as the array is scanned the element
  under
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/66835691-92488280-ef92-11e9-8ab9-68f27863f119.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/66835691-92488280-ef92-11e9-8ab9-68f27863f119.png&quot; alt=&quot;通过 CSS ellipsis 实现的文本截断效果&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;通过 CSS &lt;code&gt;ellipsis&lt;/code&gt; 实现的文本截断效果&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;padding&lt;/code&gt; 的问题&lt;/h2&gt;
&lt;p&gt;一切都很完美，直到给文本容器加上 &lt;code&gt;padding&lt;/code&gt; 样式后。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
  .my-div {
    width: 300px;
    margin: 10px auto;
    background: #ddd;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;    padding: 30px;&lt;/span&gt;
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在的效果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/66835765-af7d5100-ef92-11e9-96ff-78ab6778e06a.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/66835765-af7d5100-ef92-11e9-96ff-78ab6778e06a.png&quot; alt=&quot;padding 破坏了文本截断&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;code&gt;padding&lt;/code&gt; 破坏了文本截断&lt;/p&gt;
&lt;p&gt;因为 &lt;code&gt;padding&lt;/code&gt; 占了元素内部空间，但这部分区域却是在元素内部的，所以不会受 &lt;code&gt;overflow: hidden&lt;/code&gt; 影响。&lt;/p&gt;
&lt;h2&gt;解决办法&lt;/h2&gt;
&lt;h3&gt;&lt;code&gt;line-height&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;当设置的 &lt;code&gt;line-height&lt;/code&gt; 适当时，或足够大时，可以将 &lt;code&gt;padding&lt;/code&gt; 的部分抵消掉以实现将多余部分挤出可见范围的目标。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
.my-div {
  width: 300px;
  margin: 10px auto;
  background: #ddd;
  padding: 30px;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;  line-height: 75px;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/66835792-bc01a980-ef92-11e9-8855-d9c0aef47619.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/66835792-bc01a980-ef92-11e9-8855-d9c0aef47619.png&quot; alt=&quot;通过 line-height 修复&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;通过 &lt;code&gt;line-height&lt;/code&gt; 修复&lt;/p&gt;
&lt;p&gt;这种方式并不适用所有场景，因为不是所有地方都需要那么大的行高。&lt;/p&gt;
&lt;h2&gt;替换掉 padding&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;padding&lt;/code&gt; 无非是要给元素的内容与边框间添加间隔，或是与别的元素间添加间隔。这里可以考虑其实方式来替换。&lt;/p&gt;
&lt;p&gt;比如 &lt;code&gt;margin&lt;/code&gt;。但如果元素有背景，比如本例中，那 &lt;code&gt;margin&lt;/code&gt; 的试就不适用了，因为元素 &lt;code&gt;margin&lt;/code&gt; 部分是不带背景的。&lt;/p&gt;
&lt;p&gt;还可用 &lt;code&gt;border&lt;/code&gt; 代替。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
.my-div {
  width: 300px;
  margin: 10px auto;
  background: #ddd;
&lt;span class=&quot;pl-md&quot;&gt;&lt;span class=&quot;pl-md&quot;&gt;-&lt;/span&gt;  padding: 30px;&lt;/span&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;  border: 30px solid transparent;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/66835839-ccb21f80-ef92-11e9-862e-6826c99aadb8.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/66835839-ccb21f80-ef92-11e9-862e-6826c99aadb8.png&quot; alt=&quot;使用 border 替换 padding&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;使用 &lt;code&gt;border&lt;/code&gt; 替换 &lt;code&gt;padding&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;毫不意外，它仍然有它的局限性。就是在元素本身有自己的 &lt;code&gt;border&lt;/code&gt; 样式要求的时候，就会冲突了。&lt;/p&gt;
&lt;h2&gt;将边距与内容容器分开&lt;/h2&gt;
&lt;p&gt;比较普适的方法可能就是它了，即将内容与边距分开到两个元素上，一个元素专门用来实现边距，一个元素用来实现文本的截断。这个好理解，直接看代码：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;my-div&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;truncate-text-4&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
    How Not To Shuffle - The Knuth Fisher-Yates Algorithm. Written by Mike
    James. Thursday, 16 February 2017. Sometimes simple algorithms are just
    wrong. In this case shuffling an .... In other words as the array is scanned
    the element under
  &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而我们的样式可以保持不动。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/66835866-dc316880-ef92-11e9-93f9-fe832fb3b4c0.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/66835866-dc316880-ef92-11e9-93f9-fe832fb3b4c0.png&quot; alt=&quot;将边距与内容容器分开&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;将边距与内容容器分开&lt;/p&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Tue, 15 Oct 2019 15:48:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>CSS 实现的文本截断 考察如下代码实现文本超出自动截断的样式代码： .truncate text 4 { overflow: hidden; text overflow: ellipsis; dis</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Wayou/p/css_ellipsis_and_padding.html</dc:identifier>
</item>
<item>
<title>Web页面解析过程（浅） - 王宇阳</title>
<link>http://www.cnblogs.com/wangyuyang1016/p/11681957.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangyuyang1016/p/11681957.html</guid>
<description>&lt;h2 id=&quot;域名解析dns&quot;&gt;域名解析DNS&lt;/h2&gt;
&lt;p&gt;域名解析：把域名指向网络空间IP，让人们通过简单的域名访问Web网站的服务。&lt;/p&gt;
&lt;p&gt;DNS：域名系统&lt;/p&gt;
&lt;p&gt;DNS服务器：记录着域名及其对应的IP地址&lt;/p&gt;
&lt;h3 id=&quot;解析域名&quot;&gt;解析域名：&lt;/h3&gt;
&lt;p&gt;​ 浏览器中输入目标网站的域名，浏览器会生成一个域名IP的请求&lt;/p&gt;
&lt;p&gt;​ 请求第一时间会查询本地主机的DNS缓存表&lt;code&gt;ipconfig/displaydns&lt;/code&gt;，若本地DNS缓存表有对应的IP地址则返回浏览器进行访问，如果没有则会向DNS域名服务器发出查询请求（上一级的DNS服务器）&lt;/p&gt;
&lt;p&gt;​ 本地DNS服务器接收到查询请求，按照第二步查询本地已经缓存的DNS表对应的IP地址，查询不到本地的则会向根DNS域名服务器发送查询&lt;/p&gt;
&lt;p&gt;​ 根域服务器接收到查询请求，则会把把顶级域的IP地址发送给本地DNS服务器，本地DNS服务器向收到的顶级域服务器发送请求，顶级域服务器则会找到管理该域名的域服务器并返回对应的IP地址给本地DNS服务器&lt;/p&gt;
&lt;p&gt;​ 浏览器根据本地DNS服务器返回的IP地址，连接服务器并进行TCP连接和HTTP请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=3d95231f87d6277ffd1f3a6a49517455/4e4a20a4462309f72ac61ab6720e0cf3d6cad6ed.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;域名记录&quot;&gt;域名记录&lt;/h3&gt;
&lt;p&gt;域名和IP地址有某种对应的关系&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A&lt;/code&gt;记录：返回域名对应的IP地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NS&lt;/code&gt;域名服务器记录：保存下一级域名信息的服务器地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MX&lt;/code&gt;邮件记录：接收电子邮件的服务器地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CNAME&lt;/code&gt;规范记录：返回另一个域名（当前查询的域名的另一个域名的跳转地址）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PTR&lt;/code&gt;逆向查询记录：用于IP地址查询域名&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AAAA&lt;/code&gt;记录：IPv6主机记录&lt;/p&gt;
&lt;h3 id=&quot;配置dns&quot;&gt;配置DNS&lt;/h3&gt;
&lt;p&gt;域名申请成功之后首先需要做域名解析。点DNS解析管理，然后增加IP，增加别名以及邮件MX记录。先增加IP。如想要实现去掉3W的顶级域名亦可访问网站，除了要在空间里绑定不加3W的域名外，还要解析，主机名为空。&lt;/p&gt;
&lt;h3 id=&quot;修改dns&quot;&gt;修改DNS&lt;/h3&gt;
&lt;p&gt;​ 条件：要更改为的主、辅DNS服务器都必须是注册过的、合法的DNS服务器名称，否则修改会失败。&lt;br/&gt;​ 如果要查询DNS是否为合法的DNS，可以点击:国际域名DNS查询界面、国内域名DNS查询界面通用顶级域名DNS查询界面使用方法：输入DNS服务器的名称，选中第三个选项Nameserver，查询如果查询出有DNS注册的信息，如注册商，名称对应的IP地址，则这个DNS是合法的。国内域名DNS查询界面使用方法： 在“主机”一栏中输入DNS服务器的名称，点击查询，如果查询出有DNS注册的信息，如注册商，名称对应的IP地址，则这个DNS是合法的&lt;br/&gt;​ 修改方法：通过相应域名注册公司进行域名变更DNS操作。&lt;br/&gt;​ 解析生效时间&lt;br/&gt;​ 通用顶级域名解析是2小时内生效，国家顶级域名解析24小时内生效。&lt;br/&gt;​ 是否解析成功&lt;br/&gt;​ 因为域名解析需要同步到DNS根服务器，而DNS根服务器会不定时刷，只有DNS根服务器刷新后域名才能正常访问，新增解析一般会在10分钟左右生效，最长不会超过24小时，修改解析时间会稍微延长。可以用ping命令来查看域名是否生效。点击开始菜单&amp;gt;运行&amp;gt;输入&quot;CMD&quot;&amp;gt;敲回车键，进入 命令提示符窗口，输入&quot;ping 您的域名&quot;，如果红线部分为您主机的IP即解析成功。&lt;/p&gt;
&lt;h2 id=&quot;web页面请求nginx&quot;&gt;web页面请求(Nginx)&lt;/h2&gt;
&lt;h3 id=&quot;请求过程&quot;&gt;请求过程&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;主机向DHCP(动态主机配置协议)服务器获取一个IP地址&lt;/li&gt;
&lt;li&gt;浏览器确定目标域名/服务器IP&lt;/li&gt;
&lt;li&gt;DNS向浏览器返回目标域名的IP地址&lt;/li&gt;
&lt;li&gt;浏览器接收DNS返回的IP地址并向目标发送TCP连接请求（TCP三次握手）&lt;/li&gt;
&lt;li&gt;TCP建立成功，浏览器向目标发送HTTP/服务协议请求，服务器响应浏览器的请求&lt;/li&gt;
&lt;li&gt;浏览器对服务器返回的响应数据包进行渲染并输出到浏览器中&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;nginx的过程&quot;&gt;Nginx的过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/857040/201904/857040-20190413155602423-193023443.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST_READ&lt;/code&gt; 读取HTTP头部，读取并解析内容&lt;/p&gt;
&lt;p&gt;&lt;code&gt;server-rewrite&lt;/code&gt;在URL与location匹配之前修改请求的URL（重定向），在server块中的请求地址重写&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find-config&lt;/code&gt;配置查找阶段，根据请求的URL匹配location表达式；不支持nginx模块注册处理程序，而是由ngx_http_core_module模块来完成当前请求与location配置之间的匹配&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rewrite&lt;/code&gt;location块追踪的请求地址重写阶段，当rewrite指令用于location中则运行；ngx_lua模块中的set_by_lua指令和rewrite_by_lua指令也在这里&lt;/p&gt;
&lt;p&gt;&lt;code&gt;post-rewrite&lt;/code&gt;请求地址重写提交阶段，防止递归修改URL造成死循环；由ngx_http_core_module模块实现&lt;/p&gt;
&lt;p&gt;&lt;code&gt;preaccess&lt;/code&gt;访问权限检查&lt;strong&gt;准备&lt;/strong&gt;阶段，http模块进入处理阶段，ngx_limit_req（访问控制的频率）和ngx_limit_zone（访问的并发率控制）也会运行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;access&lt;/code&gt;访问权限检查&lt;strong&gt;执行&lt;/strong&gt;阶段，ngx_access和nginx_auth_request,ngx_lua的access-by_lua执行在这个阶段，配置指令多是执行访问控制性质的任务，比如检查用户的访问权限，检查用户的IP地址合法性&lt;/p&gt;
&lt;p&gt;&lt;code&gt;post-access&lt;/code&gt;访问权限检查&lt;strong&gt;提交&lt;/strong&gt;阶段，如果请求不被允许访问Nginx服务器，该阶段用于返回错误的响应&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try-files&lt;/code&gt;配置项try-files处理阶段，如果http访问的静态文件try-files配置项可以使这个请求顺序地访问多个静态文件，直至符合条件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;content&lt;/code&gt;内容产生阶段，大部分HTTP模块会执行，所有请求处理阶段中的&lt;strong&gt;重要阶段&lt;/strong&gt;这个阶段的指令通常用来生成HTTP响应的内容&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log&lt;/code&gt;日志模块处理阶段，记录日志&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1512305/201910/1512305-20191015233947891-1218979244.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;http协议&quot;&gt;HTTP协议&lt;/h2&gt;
&lt;h3 id=&quot;http请求响应&quot;&gt;HTTP请求/响应：&lt;/h3&gt;
&lt;p&gt;统一资源定位符，是一种互联网的标准地址规范&lt;/p&gt;
&lt;pre class=&quot;text&quot;&gt;
&lt;code&gt;协议://服务器IP:端口/路径/?属性=value&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;计算机主要通过浏览器的URL进行HTTP请求发送，在linux中可以使用&lt;code&gt;curl&lt;/code&gt;命令发送HTTP请求：（linux实现curl访问baidu）&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;curl http://www.baidu.com #访问HTTP响应数据&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1512305/201910/1512305-20191015234036953-1123323303.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;curl http://www.baidu.com -I #回显HTTP响应头部数据&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1512305/201910/1512305-20191015233936947-1077867680.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;curl&lt;/code&gt;命令的结果，可以认为浏览器的作用是渲染HTTP响应信息包&lt;/p&gt;
&lt;p&gt;HTTP是一种无状态协议，与WEB浏览器之间不会建立永久连接；当服务器返回响应后，就会关闭与服务器之间的连接，只有在重新发起请求的时候才会重新建立连接（服务器不主动连接，连接由客户端发起）&lt;/p&gt;
&lt;p&gt;HTTP是&lt;strong&gt;请求和响应&lt;/strong&gt;为核心：客户端发起请求，服务端返回响应&lt;/p&gt;
&lt;p&gt;HTTP请求包含：请求行、请求头、请求正文&lt;/p&gt;
&lt;pre class=&quot;text&quot;&gt;
&lt;code&gt;GET /login.php HTTP/1.1  //请求行
HOST:192.168.2.172
User-Agent:Mozilla/5.0 (Windows NT 10.0;Win64 X64;rv:66.0) Gecko/20100101 Firefox/66.0
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Languge:zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding:gzip,deflate
DNT:1
Connection: keep-alive
Cookie: security=impossible; hibext_instdsigdipv2=1; PHPSESSID=d19t3v9obo76br07i58qrl88p5
Upgrade-Insecure-Requests: 1
Pragma: no-cache
Cache-Control: no-cache&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;http请求方法&quot;&gt;HTTP请求方法：&lt;/h4&gt;
&lt;h5 id=&quot;get方法&quot;&gt;GET方法：&lt;/h5&gt;
&lt;p&gt;用于获取请求页面的指定资源，没有完整的请求内容（请求的参数实际是存在URL中）&lt;/p&gt;
&lt;pre class=&quot;text&quot;&gt;
&lt;code&gt;GET /index.php HTTP/1.1&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;post方法&quot;&gt;POST方法：&lt;/h5&gt;
&lt;p&gt;用于向指定的URL页面请求资源或提交内容资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1512305/201910/1512305-20191015233922997-897519621.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们登录login.php，利用POST方法将&lt;strong&gt;请求主体&lt;/strong&gt;上传提交&lt;/p&gt;
&lt;h5 id=&quot;head方法&quot;&gt;HEAD方法：&lt;/h5&gt;
&lt;p&gt;用于只要求服务器响应返回HTTP信息（返回除消息主体外的信息）；常用来测试链接的有效性，测试页面是否可以正常访问常用这个请求方法访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1512305/201910/1512305-20191015233913502-110235040.png&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;putdelete方法&quot;&gt;PUT/DELETE方法：&lt;/h5&gt;
&lt;p&gt;PUT用于向服务器请求存储指定的实体信息在指定的HOST中；DELETE用于向服务器请求删除指定URL位置的资源；非常危险的两个请求方法哦~常常被禁止使用&lt;/p&gt;
&lt;h5 id=&quot;trace方法&quot;&gt;TRACE方法：&lt;/h5&gt;
&lt;p&gt;TRACE用于激发服务端的请求消息回路，回显服务器接收的请求，常用于诊断&lt;/p&gt;
&lt;h4 id=&quot;http响应状态码&quot;&gt;HTTP&lt;a href=&quot;https://www.jianshu.com/p/b23e2ea636f2&quot;&gt;响应状态码&lt;/a&gt;：&lt;/h4&gt;
&lt;h5 id=&quot;xx信息提示&quot;&gt;1XX：信息提示&lt;/h5&gt;
&lt;p&gt;表示消息成功接收&lt;/p&gt;
&lt;h5 id=&quot;xx成功&quot;&gt;2XX：成功&lt;/h5&gt;
&lt;p&gt;表示服务器成功的处理了消息&lt;/p&gt;
&lt;p&gt;200：客户端请求成功&lt;/p&gt;
&lt;h5 id=&quot;xx重定向&quot;&gt;3XX：重定向&lt;/h5&gt;
&lt;p&gt;访问的资源被转移，告知客户端访问新的指向URL&lt;/p&gt;
&lt;p&gt;302：重定向&lt;/p&gt;
&lt;h5 id=&quot;xx错误&quot;&gt;4XX：错误&lt;/h5&gt;
&lt;p&gt;请求资源错误&lt;/p&gt;
&lt;p&gt;404：请求的资源不存在&lt;/p&gt;
&lt;p&gt;400：请求语法错误，服务端无法解析&lt;/p&gt;
&lt;p&gt;401：请求未获得权限&lt;/p&gt;
&lt;p&gt;403：服务端拒绝客户端请求&lt;/p&gt;
&lt;h5 id=&quot;xx服务端错误&quot;&gt;5XX：服务端错误&lt;/h5&gt;
&lt;p&gt;服务端拒绝或无法正常的处理请求&lt;/p&gt;
&lt;p&gt;500：服务端错误&lt;/p&gt;
&lt;p&gt;503：服务不可用（超载或停机维护）&lt;/p&gt;
&lt;h4 id=&quot;http消息&quot;&gt;HTTP消息：&lt;/h4&gt;
&lt;p&gt;HTTP消息等同于HTTP头部（HTTP heard）；由请求头、响应头、普通头和实体信息&lt;/p&gt;
&lt;h5 id=&quot;请求头&quot;&gt;请求头：&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;起始行&lt;/strong&gt;：请求方法 + 请求URL + HTTP协议及版本&lt;/p&gt;
&lt;pre class=&quot;text&quot;&gt;
&lt;code&gt;GET /index.php HTTP/1.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HOST&lt;/code&gt;指定资源的URL&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User-Agent&lt;/code&gt;客户端浏览器的信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Referer&lt;/code&gt;当前URL的上一级URL&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Range&lt;/code&gt;请求实体的部分内容&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x-forward-for&lt;/code&gt;&lt;strong&gt;XXF头&lt;/strong&gt;，请求端的IP，多个IP使用逗号隔开&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Accept&lt;/code&gt;指定服务端接收的MIME类型信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Accept-Charset&lt;/code&gt;指定客户端接收的字符集&lt;/p&gt;
&lt;h5 id=&quot;响应头&quot;&gt;响应头：&lt;/h5&gt;
&lt;p&gt;响应头是服务器依据请求向客户端发送的HTTP头，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1512305/201910/1512305-20191015233839268-166634275.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Server&lt;/code&gt;服务器所使用Web服务器的名称&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set-Cookie&lt;/code&gt;向客户端设置Cookie&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Last-Modified&lt;/code&gt;告诉客户端该资源最后的修改时间&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Location&lt;/code&gt;302重定向的新的URL页面&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Refersh&lt;/code&gt;告诉浏览器客户端定时刷新&lt;/p&gt;
&lt;h5 id=&quot;普通头&quot;&gt;普通头：&lt;/h5&gt;
&lt;h5 id=&quot;实体头&quot;&gt;实体头：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Content-Type&lt;/code&gt;向接收端说明实体的介质类型&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Content-Encoding&lt;/code&gt;媒体类型的修饰符（采用编码/解码的机制）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Content-Length&lt;/code&gt;value代表实体正文的长度(字节)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Last-Modified&lt;/code&gt;资源的最后修改时间&lt;/p&gt;
&lt;h3 id=&quot;页面解析中的安全&quot;&gt;页面解析中的安全&lt;/h3&gt;
&lt;h4 id=&quot;dns域名劫持&quot;&gt;DNS域名劫持&lt;/h4&gt;
&lt;p&gt;攻击者通过对域名解析服务器的攻击或伪造，吧目标网站的域名解析到错误（黑客准备）的页面，从而达到攻击者的某种目的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理上通俗的解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;黑客改变了DNS服务器中原本正确的网址解析的IP并变更为自己准备的IP服务器中。&lt;/p&gt;
</description>
<pubDate>Tue, 15 Oct 2019 15:41:00 +0000</pubDate>
<dc:creator>王宇阳</dc:creator>
<og:description>web页面流程 域名解析DNS 域名解析：把域名指向网络空间IP，让人们通过简单的域名访问Web网站的服务。 DNS：域名系统 DNS服务器：记录着域名及其对应的IP地址 解析域名： ​	浏览器中输入</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wangyuyang1016/p/11681957.html</dc:identifier>
</item>
<item>
<title>React入门学习 - 我没有三颗心脏</title>
<link>http://www.cnblogs.com/wmyskxz/p/11681955.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wmyskxz/p/11681955.html</guid>
<description>&lt;blockquote readability=&quot;4.3181818181818&quot;&gt;
&lt;p&gt;为了获得更好的阅读体验，请访问原地址：&lt;a href=&quot;https://www.wmyskxz.com/2019/10/15/react-ru-men-xue-xi/&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1120515/201910/1120515-20191015234042416-1086409508.png&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;h2 id=&quot;react-是什么&quot;&gt;React 是什么&lt;/h2&gt;
&lt;p&gt;React 是一个起源于 Facebook 的内部项目，因为当时 Facebook 对于市场上所有的 JavaScript MVC 框架都不太满意，所以索性就自己写了一套，用来架设 Instagram。做出来之后，发现这套东西还蛮好用的，于是就在 &lt;strong&gt;2013 年 5 月开源了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在这里我们需要稍微注意一下 &lt;strong&gt;库(Library)&lt;/strong&gt; 和 &lt;strong&gt;框架(Framework)&lt;/strong&gt; 的区别，&lt;strong&gt;React 本身是一个用于构建用户界面的 JavaScript 库&lt;/strong&gt;，而我们平时所说的 React 框架其实是指的是 React/ React-router 和 React-redux 的结合体，库和框架的本质区别体现在于控制权：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1120515/201910/1120515-20191015234042674-1715539722.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;「库」是一个封装好的特定的集合，提供给开发者使用，而且是特定于某一方面的集合（方法和函数），库没有控制权，控制权完全在于使用者本身；&lt;/li&gt;
&lt;li&gt;「框架」顾名思义是一套架构，会基于自身的特点向用户提供一套比较完整的解决方案，如果使用者选定了一套框架，那么就需要根据框架本身做出一定的适应。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;为什么使用-react&quot;&gt;为什么使用 React？&lt;/h2&gt;
&lt;p&gt;这是一个非常有趣的问题，也让我困惑和苦恼。在笔者还在学校的时候尝试用 Vue 搭建了一套简单的博客系统，学习曲线平滑，让只会一些基础 HTML/ CSS 代码的我通过一段时间学习就能够上手了，但是学习 React 以来，进展变得相对缓慢.. 一部分原因是因为 React 创新性的开发模式以及让我感到无所适从的 JSX 语法（菜才是原罪）。&lt;/p&gt;
&lt;p&gt;Vue 作者尤雨溪在知乎上回答「Vue 和 React 的优点分别是什么？」这个问题的时候提到 ：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;这里我可以大方地承认，如果多年以后要论历史地位，React 肯定是高于 Vue 的。事实上，我作为一个开发者，也是由衷地佩服 Jordan Walke, Sebastian Markbage 这样的，能从开发模式层面上提出突破性的新方向的人。&lt;/p&gt;
&lt;p&gt;React 从一开始的定位就是提出 UI 开发的新思路。当年 Pete Hunt 最开始推广 React 的时候的一句口号就叫 &quot;Rethinking Best Practices&quot;，这样的定位使得 React 打开了一些全新的思路，吸引了一群喜欢折腾的早期核心用户，并在这个基础上通过社区迭代孵化出了许多今天被 React 开发者当作常识的 pattern。这是 React 伟大的地方，Vue 里面也有很多地方是直接受到了 React 的启发。React 敢做这样的尝试，是因为它是 Facebook。这样的体量的公司，在 infrastructure 层面获得质的提升，收益是巨大的，而且 Facebook 的工程师们足够聪明又要靠工资吃饭，改变他/她们的习惯并不是什么问题。而对外推广，则是一种大公司才有的 “改变业界” 的底气。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比「为什么使用 React？」的理由，称赞 React 的倒是明显更多一些（React 确实是突破性的开发模式）。&lt;/p&gt;
&lt;p&gt;是因为 React 组件化的思想吗？不是。我觉得这跟多少跟微服务化之类的概念有点儿类似，这是属于一个时代对于计算机工程的思想进步，是对于团队协作提出的新一种成熟的解决方案，也是必然的一种趋势。当前流行的不管是 Angular/ Vue 还是 React，都天然的支持着组件化的概念。&lt;/p&gt;
&lt;p&gt;那是因为 React 性能出众吗？我想也不是。或许 React 刚出世时因为其独特高效的虚拟 DOM 设计，能够在前端江湖中平步青云，但是现在前端技术都主键地趋于成熟（我也不懂，我乱说的..），从很多地方的对比数据中，都能够看得到其实 React 与其他框架的性能差异并不是特别大。并且体现在平时的开发中，这样对比不明显的速度差异，根本没有多大的用处。&lt;/p&gt;
&lt;p&gt;还看到一种观点，说 React 适用于构建大型的项目。从我并不多的了解中，我知道 React 体系中天然有着许多的约束，以及一些不成文的约定，这就好像是 SpringBoot 中默认提供给使用者的一些姿势，天然就有很强的工程性，加上一些约定俗成的代码风格 or 归约，这就使得 Java 很适合一些大型的团队项目。但能不能开发大型的项目从来都是取决于人，而不是采用了哪种框架。&lt;/p&gt;
&lt;p&gt;所以比较令我信服的理由是（我乱猜的）：像 Java 一样，React 体系足够成熟，社区也非常活跃，你遇到的问题很容易在网络上找到答案，并且也有一些成熟的实践 or 轮子用以解决各种各样的问题。而且 React 还有一个比较特别的特性是：你能够比较无痛地使用 React Native 开发原生移动应用。&lt;/p&gt;

&lt;hr/&gt;&lt;h2 id=&quot;虚拟-domvitural-document-object-model&quot;&gt;虚拟 DOM（Vitural Document Object Model）&lt;/h2&gt;
&lt;p&gt;要理解这个「虚拟 DOM」的概念，首先我们就需要知道什么是「DOM」。我们先暂时忘掉什么网页之类的，我们想象现在我们需要编写程序来对下列的 Markdown 文档进行改变应该怎么做：&lt;/p&gt;
&lt;pre class=&quot;markdown&quot;&gt;
&lt;code&gt;# Title
## subtitle - 1
content - 1
## subtitle - 2
content - 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;比如我现在就想要 &lt;code&gt;content - 2&lt;/code&gt; 的内容进行改变，那么我就需要一行一行的不断遍历直到最后遍历到它才能进行操作，对内容改变的操作都差不多，所以如果我想对这个查找的操作进行优化，最简单的想法就是把它树化以减少高度，增加效率。&lt;/p&gt;
&lt;h3 id=&quot;dom-的概念&quot;&gt;DOM 的概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;DOM&lt;/strong&gt; 是英文 Document Object Model 的缩写，即文档对象模型。它是一种跨平台的、独立于编程语言的 API，它把 HTML、XHTML 或 XML 文档都当做一个树结构，而每个节点视为一个对象，这些对象可以被编程语言操作，进而改变文档的结构，映射到文档的显示。DOM 最开始的时候是和 JavaScript 交织在一起的，只是后来它们最终演变成了两个独立的实体。DOM 被设计成与特定编程语言相独立，尽管绝大部分时候我们都是使用 JavaScript 来操作，但其实其他的语言一样可以（如 Python）。&lt;/p&gt;
&lt;p&gt;假如有这么一段 HTML 代码：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;文档标题&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  
  &amp;lt;body&amp;gt;
    &amp;lt;a href=&quot;&quot;&amp;gt;链接&amp;lt;/a&amp;gt;
    &amp;lt;h1&amp;gt;标题&amp;lt;/h1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么它最终就应该会是下面这棵树一样的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1120515/201910/1120515-20191015234042977-1930873135.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里不对 DOM 节点的类型啊方法之类的进行讨论，我们只需要对 DOM 有一个大致的概念就好了。&lt;/p&gt;
&lt;h3 id=&quot;浏览器渲染-dom-的流程&quot;&gt;浏览器渲染 DOM 的流程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;我们可以简单了解一下浏览器渲染 DOM 的流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;解析 HTML 建立 DOM 树；&lt;/li&gt;
&lt;li&gt;解析 CSS，并结合 DOM 树形成 Reander 树；&lt;/li&gt;
&lt;li&gt;布局 Render 树（Layout/ reflow），确定各节点的尺寸、位置等信息；&lt;/li&gt;
&lt;li&gt;绘制 Render 树（Paint），绘制页面像素信息；&lt;/li&gt;
&lt;li&gt;浏览器将各层信息发给 GPU，GPU 会将各层合成（Composite），显示在屏幕上；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;操作-dom-为什么慢&quot;&gt;操作 DOM 为什么慢&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;其实严格来说，单纯的操作 DOM 并不慢，说它慢是带有一定条件的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想象在一次事件循环中多次操作 DOM 时，有时希望 JS 代码中能立刻获取最新的 DOM 节点信息，这时浏览器不得不挂起 JS 引擎，转而调用 DOM 引擎，计算渲染出最新的 DOM，以此来获取最新的 DOM 节点信息，接着再重新激活 JS 引擎 继续后续的操作。&lt;/p&gt;
&lt;p&gt;可以预见，上述操作不仅需要多次进行引擎的切换，还需要多次计算布局，重新绘制 DOM。事实上&lt;code&gt;paint&lt;/code&gt;是一个耗时的过程，然而&lt;code&gt;layout&lt;/code&gt;是一个更耗时的过程，我们无法确定&lt;code&gt;layout&lt;/code&gt;一定是自上而下或是自下而上进行的，甚至一次&lt;code&gt;layout&lt;/code&gt;会牵涉到整个文档布局的重新计算。&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;layout&lt;/code&gt;是肯定无法避免的，所以我们主要是要最小化&lt;code&gt;layout&lt;/code&gt;的次数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，降低引擎切换频率、减小 DOM 变更规模才是 DOM 性能优化方案的关键！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;virtual-dom-算法步骤&quot;&gt;Virtual DOM 算法步骤&lt;/h3&gt;
&lt;p&gt;虚拟 DOM 正是解决了上述问题，&lt;strong&gt;它的本质就是用 JS 对象来模拟出我们真实的 DOM 树&lt;/strong&gt;，它的算法大致如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;用 JavaScript 对象映射形成 DOM 树的结构，然后用这个树构建一个真正的 DOM 树，插到文档当中；&lt;/li&gt;
&lt;li&gt;当状态变更的时候，重新构造一棵新的对象树，然后用新的树和旧的树进行比较（Diff 算法），记录两棵树差异；&lt;/li&gt;
&lt;li&gt;把第二步中所记录的差异应用到步骤一所构建的真正的 DOM 树上，视图就更新。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;虚拟-dom-和真实-dom-的区别&quot;&gt;虚拟 DOM 和真实 DOM 的区别&lt;/h3&gt;
&lt;p&gt;我们由此可以对比出两者的不同：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;改变多个状态，影响多个节点布局时，只是频繁的修改了内存中的 JS 对象，然后一次性比较并修改真实 DOM 中需要改的部分，最后在真实 DOM 中进行排版与重绘，减少过多 DOM 节点排版与重绘损耗；&lt;/li&gt;
&lt;li&gt;真实 DOM 频繁排版与重绘的效率是相当低的；&lt;/li&gt;
&lt;li&gt;虚拟 DOM 有效降低大面积（真实 DOM 节点）的重绘与排版，因为最终与真实 DOM 比较差异，可以只渲染局部（同2）；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;使用虚拟DOM的损耗计算：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总损耗 = 虚拟DOM增删改 + （与Diff算法效率有关）真实DOM差异增删改 + （较少的节点）排版与重绘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接使用真实DOM的损耗计算：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总损耗 = 真实DOM完全增删改 + （可能较多的节点）排版与重绘&lt;/p&gt;
&lt;h2 id=&quot;diff-算法&quot;&gt;Diff 算法&lt;/h2&gt;
&lt;p&gt;虚拟 DOM 的核心在于 Diff，它自动帮你计算那些应该调整的，然后只修改应该被调整的区域，省下的不是运行速度这种 &quot;小速度&quot;，而是开发速度/ 维护速度/ 逻辑简练程度等 &quot;总体速度&quot;。&lt;/p&gt;
&lt;p&gt;但虚拟 DOM 快也是在相对条件下的，这里引用 &lt;code&gt;@尤雨溪&lt;/code&gt;大大在知乎问题《网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？》上回答的一句话吧：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;不要天真地以为 Virtual DOM 就是快，diff 不是免费的，batching 么 MVVM 也能做，而且最终 patch 的时候还不是要用原生 API。在我看来 Virtual DOM 真正的价值从来都不是性能，而是它 1) 为函数式的 UI 编程方式打开了大门；2) 可以渲染到 DOM 以外的 backend，比如 ReactNative。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1120515/201910/1120515-20191015234043768-924491056.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Diff 大致可以分为三种类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Tree Diff：&lt;/strong&gt; 新旧两棵 DOM 树，逐层对比的过程，就是 Tree Diff，当整颗DOM逐层对比完毕，则所有需要被按需更新的元素，必然能够找到；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component Diff：&lt;/strong&gt; 在进行 Tree Diff 的时候，每一层中，组件级别的对比，叫做 Component Diff：
&lt;ul&gt;&lt;li&gt;如果对比前后，组件的类型相同，则&lt;strong&gt;暂时&lt;/strong&gt;认为此组件不需要被更新；&lt;/li&gt;
&lt;li&gt;如果对比前后，组件类型不同，则需要移除旧组件，创建新组件，并追加到页面上；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Element Diff：&lt;/strong&gt; 在进行组件对比的时候，如果两个组件类型相同，则需要进行元素级别的对比，这叫做 Element Diff；&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;引用自：http://www.ruanyifeng.com/blog/2015/03/react.html - 阮一峰 - React 入门实例教程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用 React 的网页源码，结构大致如下（可以直接运行）：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Hello React!&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div id=&quot;example&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&quot;text/babel&quot;&amp;gt;
    ReactDOM.render(
        &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;,
        document.getElementById('example')
    );
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码有两个地方需要注意。首先，最后一个 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签的 &lt;code&gt;type&lt;/code&gt; 属性为 &lt;code&gt;text/babel&lt;/code&gt; 。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上 &lt;code&gt;type=&quot;text/babel&quot;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;其次，上面代码一共用了三个库： &lt;code&gt;react.js&lt;/code&gt; 、&lt;code&gt;react-dom.js&lt;/code&gt; 和 &lt;code&gt;Browser.js&lt;/code&gt; ，它们必须首先加载。其中，&lt;code&gt;react.js&lt;/code&gt;是 React 的核心库，&lt;code&gt;react-dom.js&lt;/code&gt; 是提供与 DOM 相关的功能，&lt;code&gt;Browser.js&lt;/code&gt; 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;$ babel src --out-dir build&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面命令可以将 &lt;code&gt;src&lt;/code&gt; 子目录的 &lt;code&gt;js&lt;/code&gt; 文件进行语法转换，转码后的文件全部放在 &lt;code&gt;build&lt;/code&gt; 子目录。&lt;/p&gt;
&lt;h2 id=&quot;reactdom.render&quot;&gt;ReactDOM.render()&lt;/h2&gt;
&lt;p&gt;ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;ReactDOM.render(
  &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;,
  document.getElementById('example')
);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码将一个 &lt;code&gt;h1&lt;/code&gt; 标题，插入 &lt;code&gt;example&lt;/code&gt; 节点，运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1120515/201910/1120515-20191015234044005-755895972.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;jsx-语法&quot;&gt;JSX 语法&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;引用自：https://www.runoob.com/react/react-jsx.html - RUNOOB.COM - React JSX&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上一节的代码， HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 &lt;a href=&quot;http://facebook.github.io/react/docs/displaying-data.html#jsx-syntax&quot;&gt;JSX 的语法&lt;/a&gt;，它允许 HTML 与 JavaScript 的混写。我们先来看以下一段代码：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;const element = &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与浏览器的 DOM 元素不同，React 当中的元素事实上是普通的对象，React DOM 可以确保 浏览器 DOM 的数据内容与 React 元素保持一致。要将 React 元素渲染到根 DOM 节点中，我们通过把它们都传递给 ReactDOM.render() 的方法来将其渲染到页面上：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;var myDivElement = &amp;lt;div className=&quot;foo&quot; /&amp;gt;;
ReactDOM.render(myDivElement, document.getElementById('example'));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;JSX 看起来类似 HTML ，你也可以在上面代码中嵌套多个 HTML 标签，但是需要使用一个 &lt;code&gt;div&lt;/code&gt; 元素包裹它。&lt;/p&gt;
&lt;h3 id=&quot;javascript-表达式&quot;&gt;JavaScript 表达式&lt;/h3&gt;
&lt;p&gt;我们可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 &lt;strong&gt;{}&lt;/strong&gt; 中。实例如下：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;ReactDOM.render(
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;{1+1}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    ,
    document.getElementById('example')
);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 JSX 中不能使用 &lt;strong&gt;if else&lt;/strong&gt; 语句，但可以使用 &lt;strong&gt;conditional (三元运算)&lt;/strong&gt; 表达式来替代。以下实例中如果变量 &lt;strong&gt;i&lt;/strong&gt; 等于 &lt;strong&gt;1&lt;/strong&gt; 浏览器将输出 &lt;strong&gt;true&lt;/strong&gt;, 如果修改 i 的值，则会输出 &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;ReactDOM.render(
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;{i == 1 ? 'True!' : 'False'}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    ,
    document.getElementById('example')
);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;样式&quot;&gt;样式&lt;/h3&gt;
&lt;p&gt;React 推荐使用内联样式。我们可以使用 &lt;strong&gt;camelCase&lt;/strong&gt; 语法来设置内联样式. React 会在指定元素数字后自动添加 &lt;strong&gt;px&lt;/strong&gt; 。以下实例演示了为 &lt;strong&gt;h1&lt;/strong&gt; 元素添加 &lt;strong&gt;myStyle&lt;/strong&gt; 内联样式：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;var myStyle = {
    fontSize: 100,
    color: '#FF0000'
};
ReactDOM.render(
    &amp;lt;h1 style = {myStyle}&amp;gt;菜鸟教程&amp;lt;/h1&amp;gt;,
    document.getElementById('example')
);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;注释&quot;&gt;注释&lt;/h3&gt;
&lt;p&gt;注释需要写在花括号中，实例如下：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;ReactDOM.render(
    &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;菜鸟教程&amp;lt;/h1&amp;gt;
    {/*注释...*/}
     &amp;lt;/div&amp;gt;,
    document.getElementById('example')
);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;数组&quot;&gt;数组&lt;/h3&gt;
&lt;p&gt;JSX 允许在模板中插入数组，数组会自动展开所有成员：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;var arr = [
  &amp;lt;h1&amp;gt;菜鸟教程&amp;lt;/h1&amp;gt;,
  &amp;lt;h2&amp;gt;学的不仅是技术，更是梦想！&amp;lt;/h2&amp;gt;,
];
ReactDOM.render(
  &amp;lt;div&amp;gt;{arr}&amp;lt;/div&amp;gt;,
  document.getElementById('example')
);&lt;/code&gt;
&lt;/pre&gt;

&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/03/react.html&quot; class=&quot;uri&quot;&gt;http://www.ruanyifeng.com/blog/2015/03/react.html&lt;/a&gt; - React 入门实例教程 - 阮一峰&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/60100985dd7f&quot; class=&quot;uri&quot;&gt;https://www.jianshu.com/p/60100985dd7f&lt;/a&gt; - 前端框架与库的区别&lt;/li&gt;
&lt;li&gt;https://www.zhihu.com/question/301860721/answer/545031906 - Vue 和 React 的优点分别是什么？&lt;/li&gt;
&lt;li&gt;https://zhuanlan.zhihu.com/p/22184194 - 你真的理解 DOM 了吗？&lt;/li&gt;
&lt;li&gt;https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction - DOM 概述&lt;/li&gt;
&lt;li&gt;https://blog.huteming.site/posts/e0c41c5f/ - 为什么说虚拟DOM更快&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt;按照惯例黏一个尾巴：&lt;/p&gt;
&lt;blockquote readability=&quot;6.2192307692308&quot;&gt;
&lt;p&gt;欢迎转载，转载请注明出处！&lt;br/&gt;独立域名博客：wmyskxz.com&lt;br/&gt;简书ID：&lt;a href=&quot;https://www.jianshu.com/u/a40d61a49221&quot;&gt;@我没有三颗心脏&lt;/a&gt;&lt;br/&gt;github：&lt;a href=&quot;https://github.com/wmyskxz/&quot;&gt;wmyskxz&lt;/a&gt;&lt;br/&gt;欢迎关注公众微信号：wmyskxz&lt;br/&gt;分享自己的学习 &amp;amp; 学习资料 &amp;amp; 生活&lt;br/&gt;想要交流的朋友也可以加qq群：3382693&lt;br/&gt;钱&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 15 Oct 2019 15:41:00 +0000</pubDate>
<dc:creator>我没有三颗心脏</dc:creator>
<og:description>为了获得更好的阅读体验，请访问原地址： '传送门' 一、React 简介 React 是什么 React 是一个起源于 Facebook 的内部项目，因为当时 Facebook 对于市场上所有的 Ja</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wmyskxz/p/11681955.html</dc:identifier>
</item>
<item>
<title>Android 世界中，谁喊醒了 Zygote ？ - 秉心说</title>
<link>http://www.cnblogs.com/bingxinshuo/p/11681943.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bingxinshuo/p/11681943.html</guid>
<description>&lt;blockquote readability=&quot;3.6407185628743&quot;&gt;
&lt;p&gt;本文基于 Android 9.0 , 代码仓库地址 ： &lt;a href=&quot;https://github.com/lulululbj/android_9.0.0_r45&quot;&gt;android_9.0.0_r45&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文中源码链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lulululbj/android_9.0.0_r45/blob/master/frameworks/base/services/java/com/android/server/SystemServer.java&quot;&gt;SystemServer.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lulululbj/android_9.0.0_r45/blob/master/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java&quot;&gt;ActivityManagerService.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lulululbj/android_9.0.0_r45/blob/master/frameworks/base/core/java/android/os/Process.java&quot;&gt;Process.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lulululbj/android_9.0.0_r45/blob/master/frameworks/base/core/java/android/os/ZygoteProcess.java&quot;&gt;ZygoteProcess.java&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对 &lt;code&gt;Zygote&lt;/code&gt; 和 &lt;code&gt;SystemServer&lt;/code&gt; 启动流程还不熟悉的建议阅读下面两篇文章：&lt;/p&gt;
&lt;blockquote readability=&quot;0.081395348837209&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d8f73bf51882555b149dc64&quot;&gt;Java 世界的盘古和女娲 —— Zygote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5da341f451882561ba64b9da&quot;&gt;Zygote 家的大儿子 —— SystemServer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Zygote&lt;/code&gt; 作为 Android 世界的受精卵，在成功繁殖出 &lt;code&gt;system_server&lt;/code&gt; 进程之后并没有完全功成身退，仍然承担着受精卵的责任。&lt;code&gt;Zygote&lt;/code&gt; 通过调用其持有的 &lt;code&gt;ZygoteServer&lt;/code&gt; 对象的 &lt;code&gt;runSelectLoop()&lt;/code&gt; 方法开始等待客户端的呼唤，有求必应。客户端的请求无非是创建应用进程，以 &lt;code&gt;startActivity()&lt;/code&gt; 为例，假如开启的是一个尚未创建进程的应用，那么就会向 Zygote 请求创建进程。下面将从 &lt;strong&gt;客户端发送请求&lt;/strong&gt; 和 &lt;strong&gt;服务端处理请求&lt;/strong&gt; 两方面来进行解析。&lt;/p&gt;
&lt;h2 id=&quot;客户端发送请求&quot;&gt;客户端发送请求&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;startActivity()&lt;/code&gt; 的具体流程这里就不分析了，系列后续文章会写到。我们直接看到创建进程的 &lt;code&gt;startProcess()&lt;/code&gt; 方法，该方法在 &lt;code&gt;ActivityManagerService&lt;/code&gt; 中，后面简称 &lt;code&gt;AMS&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;process.startprocess&quot;&gt;Process.startProcess()&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ActivityManagerService.java

private ProcessStartResult startProcess(String hostingType, String entryPoint,
        ProcessRecord app, int uid, int[] gids, int runtimeFlags, int mountExternal,
        String seInfo, String requiredAbi, String instructionSet, String invokeWith,
        long startTime) {
    try {
        checkTime(startTime, &quot;startProcess: asking zygote to start proc&quot;);
        final ProcessStartResult startResult;
        if (hostingType.equals(&quot;webview_service&quot;)) {
            startResult = startWebView(entryPoint,
                    app.processName, uid, uid, gids, runtimeFlags, mountExternal,
                    app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,
                    app.info.dataDir, null,
                    new String[] {PROC_START_SEQ_IDENT + app.startSeq});
        } else {
            // 新建进程
            startResult = Process.start(entryPoint,
                    app.processName, uid, uid, gids, runtimeFlags, mountExternal,
                    app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,
                    app.info.dataDir, invokeWith,
                    new String[] {PROC_START_SEQ_IDENT + app.startSeq});
        }
        checkTime(startTime, &quot;startProcess: returned from zygote!&quot;);
        return startResult;
    } finally {
        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用 &lt;code&gt;Process.start()&lt;/code&gt; 方法新建进程，继续追进去:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; Process.java

public static final ProcessStartResult start(
                // android.app.ActivityThread，创建进程后会调用其 main() 方法
                final String processClass,
                final String niceName, // 进程名
                int uid, int gid, int[] gids,
                int runtimeFlags, int mountExternal,
                int targetSdkVersion,
                String seInfo,
                String abi,
                String instructionSet,
                String appDataDir,
                String invokeWith, // 一般新建应用进程时，此参数不为 null
                String[] zygoteArgs) {
        return zygoteProcess.start(processClass, niceName, uid, gid, gids,
                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,
                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继续调用 &lt;code&gt;zygoteProcess.start()&lt;/code&gt; ：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteProess.java

public final Process.ProcessStartResult start(final String processClass,
                                              final String niceName,
                                              int uid, int gid, int[] gids,
                                              int runtimeFlags, int mountExternal,
                                              int targetSdkVersion,
                                              String seInfo,
                                              String abi,
                                              String instructionSet,
                                              String appDataDir,
                                              String invokeWith,
                                              String[] zygoteArgs) {
    try {
        return startViaZygote(processClass, niceName, uid, gid, gids,
                runtimeFlags, mountExternal, targetSdkVersion, seInfo,
                abi, instructionSet, appDataDir, invokeWith, false /* startChildZygote */,
                zygoteArgs);
    } catch (ZygoteStartFailedEx ex) {
        Log.e(LOG_TAG,
                &quot;Starting VM process through Zygote failed&quot;);
        throw new RuntimeException(
                &quot;Starting VM process through Zygote failed&quot;, ex);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用 &lt;code&gt;startViaZygote()&lt;/code&gt; 方法。终于看到 Zygote 的身影了。&lt;/p&gt;
&lt;h3 id=&quot;startviazygote&quot;&gt;startViaZygote()&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteProcess.java

private Process.ProcessStartResult startViaZygote(final String processClass,
                                                  final String niceName,
                                                  final int uid, final int gid,
                                                  final int[] gids,
                                                  int runtimeFlags, int mountExternal,
                                                  int targetSdkVersion,
                                                  String seInfo,
                                                  String abi,
                                                  String instructionSet,
                                                  String appDataDir,
                                                  String invokeWith,
                                                  boolean startChildZygote, // 是否克隆 zygote 进程的所有状态
                                                  String[] extraArgs)
                                                  throws ZygoteStartFailedEx {
    ArrayList&amp;lt;String&amp;gt; argsForZygote = new ArrayList&amp;lt;String&amp;gt;();

    // --runtime-args, --setuid=, --setgid=,
    // and --setgroups= must go first
    // 处理参数
    argsForZygote.add(&quot;--runtime-args&quot;);
    argsForZygote.add(&quot;--setuid=&quot; + uid);
    argsForZygote.add(&quot;--setgid=&quot; + gid);
    argsForZygote.add(&quot;--runtime-flags=&quot; + runtimeFlags);
    if (mountExternal == Zygote.MOUNT_EXTERNAL_DEFAULT) {
        argsForZygote.add(&quot;--mount-external-default&quot;);
    } else if (mountExternal == Zygote.MOUNT_EXTERNAL_READ) {
        argsForZygote.add(&quot;--mount-external-read&quot;);
    } else if (mountExternal == Zygote.MOUNT_EXTERNAL_WRITE) {
        argsForZygote.add(&quot;--mount-external-write&quot;);
    }
    argsForZygote.add(&quot;--target-sdk-version=&quot; + targetSdkVersion);

    // --setgroups is a comma-separated list
    if (gids != null &amp;amp;&amp;amp; gids.length &amp;gt; 0) {
        StringBuilder sb = new StringBuilder();
        sb.append(&quot;--setgroups=&quot;);

        int sz = gids.length;
        for (int i = 0; i &amp;lt; sz; i++) {
            if (i != 0) {
                sb.append(',');
            }
            sb.append(gids[i]);
        }

        argsForZygote.add(sb.toString());
    }

    if (niceName != null) {
        argsForZygote.add(&quot;--nice-name=&quot; + niceName);
    }

    if (seInfo != null) {
        argsForZygote.add(&quot;--seinfo=&quot; + seInfo);
    }

    if (instructionSet != null) {
        argsForZygote.add(&quot;--instruction-set=&quot; + instructionSet);
    }

    if (appDataDir != null) {
        argsForZygote.add(&quot;--app-data-dir=&quot; + appDataDir);
    }

    if (invokeWith != null) {
        argsForZygote.add(&quot;--invoke-with&quot;);
        argsForZygote.add(invokeWith);
    }

    if (startChildZygote) {
        argsForZygote.add(&quot;--start-child-zygote&quot;);
    }

    argsForZygote.add(processClass);

    if (extraArgs != null) {
        for (String arg : extraArgs) {
            argsForZygote.add(arg);
        }
    }

    synchronized(mLock) {
        // 和 Zygote 进程进行 socket 通信
        return zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;前面一大串代码都是在处理参数，大致浏览即可。核心在于最后的 &lt;code&gt;openZygoteSocketIfNeeded()&lt;/code&gt; 和 &lt;code&gt;zygoteSendArgsAndGetResult()&lt;/code&gt; 这两个方法。从方法命名就可以看出来，这里要和 &lt;code&gt;Zygote&lt;/code&gt; 进行 socket 通信了。还记得 &lt;code&gt;ZygoteInit.main()&lt;/code&gt; 方法中调用的 &lt;code&gt;registerServerSocketFromEnv()&lt;/code&gt; 方法吗？它在 Zygote 进程中创建了服务端 socket。&lt;/p&gt;
&lt;h3 id=&quot;openzygotesocketifneeded&quot;&gt;openZygoteSocketIfNeeded()&lt;/h3&gt;
&lt;p&gt;先来看看 &lt;code&gt;openZygoteSocketIfNeeded()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteProcess.java

private ZygoteState openZygoteSocketIfNeeded(String abi) throws ZygoteStartFailedEx {
    Preconditions.checkState(Thread.holdsLock(mLock), &quot;ZygoteProcess lock not held&quot;);
    
    // 未连接或者连接已关闭
    if (primaryZygoteState == null || primaryZygoteState.isClosed()) {
        try {
            // 开启 socket 连接
            primaryZygoteState = ZygoteState.connect(mSocket);
        } catch (IOException ioe) {
            throw new ZygoteStartFailedEx(&quot;Error connecting to primary zygote&quot;, ioe);
        }
        maybeSetApiBlacklistExemptions(primaryZygoteState, false);
        maybeSetHiddenApiAccessLogSampleRate(primaryZygoteState);
    }
    if (primaryZygoteState.matches(abi)) {
        return primaryZygoteState;
    }

    // 当主 zygote 没有匹配成功，尝试 connect 第二个 zygote
    if (secondaryZygoteState == null || secondaryZygoteState.isClosed()) {
        try {
            secondaryZygoteState = ZygoteState.connect(mSecondarySocket);
        } catch (IOException ioe) {
            throw new ZygoteStartFailedEx(&quot;Error connecting to secondary zygote&quot;, ioe);
        }
        maybeSetApiBlacklistExemptions(secondaryZygoteState, false);
        maybeSetHiddenApiAccessLogSampleRate(secondaryZygoteState);
    }

    if (secondaryZygoteState.matches(abi)) {
        return secondaryZygoteState;
    }

    throw new ZygoteStartFailedEx(&quot;Unsupported zygote ABI: &quot; + abi);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果与 Zygote 进程的 socket 连接未开启，则尝试开启，可能会产生阻塞和重试。连接调用的是 &lt;code&gt;ZygoteState.connect()&lt;/code&gt; 方法，&lt;code&gt;ZygoteState&lt;/code&gt; 是 &lt;code&gt;ZygoteProcess&lt;/code&gt; 的内部类。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteProcess.java

public static class ZygoteState {
       final LocalSocket socket;
       final DataInputStream inputStream;
       final BufferedWriter writer;
       final List&amp;lt;String&amp;gt; abiList;

       boolean mClosed;

       private ZygoteState(LocalSocket socket, DataInputStream inputStream,
               BufferedWriter writer, List&amp;lt;String&amp;gt; abiList) {
           this.socket = socket;
           this.inputStream = inputStream;
           this.writer = writer;
           this.abiList = abiList;
       }

       public static ZygoteState connect(LocalSocketAddress address) throws IOException {
           DataInputStream zygoteInputStream = null;
           BufferedWriter zygoteWriter = null;
           final LocalSocket zygoteSocket = new LocalSocket();

           try {
               zygoteSocket.connect(address);

               zygoteInputStream = new DataInputStream(zygoteSocket.getInputStream());

               zygoteWriter = new BufferedWriter(new OutputStreamWriter(
                       zygoteSocket.getOutputStream()), 256);
           } catch (IOException ex) {
               try {
                   zygoteSocket.close();
               } catch (IOException ignore) {
               }

               throw ex;
           }

           String abiListString = getAbiList(zygoteWriter, zygoteInputStream);
           Log.i(&quot;Zygote&quot;, &quot;Process: zygote socket &quot; + address.getNamespace() + &quot;/&quot;
                   + address.getName() + &quot; opened, supported ABIS: &quot; + abiListString);

           return new ZygoteState(zygoteSocket, zygoteInputStream, zygoteWriter,
                   Arrays.asList(abiListString.split(&quot;,&quot;)));
       }
   ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过 socket 连接 Zygote 远程服务端。&lt;/p&gt;
&lt;p&gt;再回头看之前的 &lt;code&gt;zygoteSendArgsAndGetResult()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h3 id=&quot;zygotesendargsandgetresult&quot;&gt;zygoteSendArgsAndGetResult()&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt; &amp;gt; ZygoteProcess.java
 
private static Process.ProcessStartResult zygoteSendArgsAndGetResult(
       ZygoteState zygoteState, ArrayList&amp;lt;String&amp;gt; args)
       throws ZygoteStartFailedEx {
   try {
       ...
       final BufferedWriter writer = zygoteState.writer;
       final DataInputStream inputStream = zygoteState.inputStream;

       writer.write(Integer.toString(args.size()));
       writer.newLine();

       // 向 zygote 进程发送参数
       for (int i = 0; i &amp;lt; sz; i++) {
           String arg = args.get(i);
           writer.write(arg);
           writer.newLine();
       }

       writer.flush();

       // 是不是应该有一个超时时间？
       Process.ProcessStartResult result = new Process.ProcessStartResult();

       // Always read the entire result from the input stream to avoid leaving
       // bytes in the stream for future process starts to accidentally stumble
       // upon.
       // 读取 zygote 进程返回的子进程 pid
       result.pid = inputStream.readInt();
       result.usingWrapper = inputStream.readBoolean();

       if (result.pid &amp;lt; 0) { // pid 小于 0 ，fork 失败
           throw new ZygoteStartFailedEx(&quot;fork() failed&quot;);
       }
       return result;
   } catch (IOException ex) {
       zygoteState.close();
       throw new ZygoteStartFailedEx(ex);
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过 socket 发送请求参数，然后等待 Zygote 进程返回子进程 pid 。客户端的工作到这里就暂时完成了，我们再追踪到服务端，看看服务端是如何处理客户端请求的。&lt;/p&gt;
&lt;h2 id=&quot;zygote-处理客户端请求&quot;&gt;Zygote 处理客户端请求&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Zygote&lt;/code&gt; 处理客户端请求的代码在 &lt;code&gt;ZygoteServer.runSelectLoop()&lt;/code&gt; 方法中。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteServer.java

Runnable runSelectLoop(String abiList) {
   ...

   while (true) {
      ...
       try {
           // 有事件来时往下执行，没有时就阻塞
           Os.poll(pollFds, -1);
       } catch (ErrnoException ex) {
           throw new RuntimeException(&quot;poll failed&quot;, ex);
       }
       for (int i = pollFds.length - 1; i &amp;gt;= 0; --i) {
           if ((pollFds[i].revents &amp;amp; POLLIN) == 0) {
               continue;
           }

           if (i == 0) { // 有新客户端连接
               ZygoteConnection newPeer = acceptCommandPeer(abiList);
               peers.add(newPeer);
               fds.add(newPeer.getFileDesciptor());
           } else { // 处理客户端请求
               try {
                   ZygoteConnection connection = peers.get(i);
                   // fork 子进程，并返回包含子进程 main() 函数的 Runnable 对象
                   final Runnable command = connection.processOneCommand(this);

                   if (mIsForkChild) {
                       // 位于子进程
                       if (command == null) {
                           throw new IllegalStateException(&quot;command == null&quot;);
                       }

                       return command;
                   } else {
                       // 位于父进程
                       if (command != null) {
                           throw new IllegalStateException(&quot;command != null&quot;);
                       }

                       if (connection.isClosedByPeer()) {
                           connection.closeSocket();
                           peers.remove(i);
                           fds.remove(i);
                       }
                   }
               } catch (Exception e) {
                   ...
               } finally {
                   mIsForkChild = false;
               }
           }
       }
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;acceptCommandPeer()&lt;/code&gt; 方法用来响应新客户端的 socket 连接请求。&lt;code&gt;processOneCommand()&lt;/code&gt; 方法用来处理客户端的一般请求。&lt;/p&gt;
&lt;h3 id=&quot;processonecommand&quot;&gt;processOneCommand()&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteConnection.java

Runnable processOneCommand(ZygoteServer zygoteServer) {
    String args[];
    Arguments parsedArgs = null;
    FileDescriptor[] descriptors;

    try {
        // 1. 读取 socket 客户端发送过来的参数列表
        args = readArgumentList();
        descriptors = mSocket.getAncillaryFileDescriptors();
    } catch (IOException ex) {
        throw new IllegalStateException(&quot;IOException on command socket&quot;, ex);
    }

    ...

    // 2. fork 子进程
    pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,
            parsedArgs.runtimeFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,
            parsedArgs.niceName, fdsToClose, fdsToIgnore, parsedArgs.startChildZygote,
            parsedArgs.instructionSet, parsedArgs.appDataDir);

    try {
        if (pid == 0) {
            // 处于进子进程
            zygoteServer.setForkChild();
            // 关闭服务端 socket
            zygoteServer.closeServerSocket();
            IoUtils.closeQuietly(serverPipeFd);
            serverPipeFd = null;
            // 3. 处理子进程事务
            return handleChildProc(parsedArgs, descriptors, childPipeFd,
                    parsedArgs.startChildZygote);
        } else {
            // 处于 Zygote 进程
            IoUtils.closeQuietly(childPipeFd);
            childPipeFd = null;
            // 4. 处理父进程事务
            handleParentProc(pid, descriptors, serverPipeFd);
            return null;
        }
    } finally {
        IoUtils.closeQuietly(childPipeFd);
        IoUtils.closeQuietly(serverPipeFd);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;processOneCommand()&lt;/code&gt; 方法大致可以分为五步，下面逐步分析。&lt;/p&gt;
&lt;h4 id=&quot;readargumentlist&quot;&gt;readArgumentList()&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteConnection.java

private String[] readArgumentList()
        throws IOException {

    int argc;

    try {
        // 逐行读取参数
        String s = mSocketReader.readLine();

        if (s == null) {
            // EOF reached.
            return null;
        }
        argc = Integer.parseInt(s);
    } catch (NumberFormatException ex) {
        throw new IOException(&quot;invalid wire format&quot;);
    }

    // See bug 1092107: large argc can be used for a DOS attack
    if (argc &amp;gt; MAX_ZYGOTE_ARGC) {
        throw new IOException(&quot;max arg count exceeded&quot;);
    }

    String[] result = new String[argc];
    for (int i = 0; i &amp;lt; argc; i++) {
        result[i] = mSocketReader.readLine();
        if (result[i] == null) {
            // We got an unexpected EOF.
            throw new IOException(&quot;truncated request&quot;);
        }
    }

    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;读取客户端发送过来的请求参数。&lt;/p&gt;
&lt;h4 id=&quot;forkandspecialize&quot;&gt;forkAndSpecialize()&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; Zygote.java

public static int forkAndSpecialize(int uid, int gid, int[] gids, int runtimeFlags,
      int[][] rlimits, int mountExternal, String seInfo, String niceName, int[] fdsToClose,
      int[] fdsToIgnore, boolean startChildZygote, String instructionSet, String appDataDir) {
    VM_HOOKS.preFork();
    // Resets nice priority for zygote process.
    resetNicePriority();
    int pid = nativeForkAndSpecialize(
              uid, gid, gids, runtimeFlags, rlimits, mountExternal, seInfo, niceName, fdsToClose,
              fdsToIgnore, startChildZygote, instructionSet, appDataDir);
    // Enable tracing as soon as possible for the child process.
    if (pid == 0) {
        Trace.setTracingEnabled(true, runtimeFlags);

        // Note that this event ends at the end of handleChildProc,
        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;PostFork&quot;);
    }
    VM_HOOKS.postForkCommon();
    return pid;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nativeForkAndSpecialize()&lt;/code&gt; 是一个 native 方法，在底层 fork 了一个新进程，并返回其 pid。不要忘记了这里的 &lt;strong&gt;一次fork，两次返回&lt;/strong&gt; 。&lt;code&gt;pid &amp;gt; 0&lt;/code&gt; 说明还是父进程。&lt;code&gt;pid = 0&lt;/code&gt; 说明进入了子进程。子进程中会调用 &lt;code&gt;handleChildProc&lt;/code&gt;，而父进程中会调用 &lt;code&gt;handleParentProc()&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;handlechildproc&quot;&gt;handleChildProc()&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteConnection.java

private Runnable handleChildProc(Arguments parsedArgs, FileDescriptor[] descriptors,
        FileDescriptor pipeFd, boolean isZygote) {
    closeSocket(); // 关闭 socket 连接
    ...

    if (parsedArgs.niceName != null) {
        // 设置进程名
        Process.setArgV0(parsedArgs.niceName);
    }

    if (parsedArgs.invokeWith != null) {
        WrapperInit.execApplication(parsedArgs.invokeWith,
                parsedArgs.niceName, parsedArgs.targetSdkVersion,
                VMRuntime.getCurrentInstructionSet(),
                pipeFd, parsedArgs.remainingArgs);

        // Should not get here.
        throw new IllegalStateException(&quot;WrapperInit.execApplication unexpectedly returned&quot;);
    } else {
        if (!isZygote) { // 新建应用进程时 isZygote 参数为 false
            return ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs,
                    null /* classLoader */);
        } else {
            return ZygoteInit.childZygoteInit(parsedArgs.targetSdkVersion,
                    parsedArgs.remainingArgs, null /* classLoader */);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当看到 &lt;code&gt;ZygoteInit.zygoteInit()&lt;/code&gt; 时你应该感觉很熟悉了，接下来的流程就是：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;code&gt;ZygoteInit.zygoteInit()&lt;/code&gt; -&amp;gt; &lt;code&gt;RuntimeInit.applicationInit()&lt;/code&gt; -&amp;gt; &lt;code&gt;findStaticMain()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和 &lt;code&gt;SystemServer&lt;/code&gt; 进程的创建流程一致。这里要找的 main 方法就是 &lt;code&gt;ActivityThrad.main()&lt;/code&gt; 。&lt;code&gt;ActivityThread&lt;/code&gt; 虽然并不是一个线程，但你可以把它理解为应用的主线程。&lt;/p&gt;
&lt;h3 id=&quot;handleparentproc&quot;&gt;handleParentProc()&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;gt; ZygoteConnection.java

private void handleParentProc(int pid, FileDescriptor[] descriptors, FileDescriptor pipeFd) {
        if (pid &amp;gt; 0) {
            setChildPgid(pid);
        }

        if (descriptors != null) {
            for (FileDescriptor fd: descriptors) {
                IoUtils.closeQuietly(fd);
            }
        }

        boolean usingWrapper = false;
        if (pipeFd != null &amp;amp;&amp;amp; pid &amp;gt; 0) {
            int innerPid = -1;
            try {
                // Do a busy loop here. We can't guarantee that a failure (and thus an exception
                // bail) happens in a timely manner.
                final int BYTES_REQUIRED = 4;  // Bytes in an int.

                StructPollfd fds[] = new StructPollfd[] {
                        new StructPollfd()
                };

                byte data[] = new byte[BYTES_REQUIRED];

                int remainingSleepTime = WRAPPED_PID_TIMEOUT_MILLIS;
                int dataIndex = 0;
                long startTime = System.nanoTime();

                while (dataIndex &amp;lt; data.length &amp;amp;&amp;amp; remainingSleepTime &amp;gt; 0) {
                    fds[0].fd = pipeFd;
                    fds[0].events = (short) POLLIN;
                    fds[0].revents = 0;
                    fds[0].userData = null;

                    int res = android.system.Os.poll(fds, remainingSleepTime);
                    long endTime = System.nanoTime();
                    int elapsedTimeMs = (int)((endTime - startTime) / 1000000l);
                    remainingSleepTime = WRAPPED_PID_TIMEOUT_MILLIS - elapsedTimeMs;

                    if (res &amp;gt; 0) {
                        if ((fds[0].revents &amp;amp; POLLIN) != 0) {
                            // Only read one byte, so as not to block.
                            int readBytes = android.system.Os.read(pipeFd, data, dataIndex, 1);
                            if (readBytes &amp;lt; 0) {
                                throw new RuntimeException(&quot;Some error&quot;);
                            }
                            dataIndex += readBytes;
                        } else {
                            // Error case. revents should contain one of the error bits.
                            break;
                        }
                    } else if (res == 0) {
                        Log.w(TAG, &quot;Timed out waiting for child.&quot;);
                    }
                }

                if (dataIndex == data.length) {
                    DataInputStream is = new DataInputStream(new ByteArrayInputStream(data));
                    innerPid = is.readInt();
                }

                if (innerPid == -1) {
                    Log.w(TAG, &quot;Error reading pid from wrapped process, child may have died&quot;);
                }
            } catch (Exception ex) {
                Log.w(TAG, &quot;Error reading pid from wrapped process, child may have died&quot;, ex);
            }

            // Ensure that the pid reported by the wrapped process is either the
            // child process that we forked, or a descendant of it.
            if (innerPid &amp;gt; 0) {
                int parentPid = innerPid;
                while (parentPid &amp;gt; 0 &amp;amp;&amp;amp; parentPid != pid) {
                    parentPid = Process.getParentPid(parentPid);
                }
                if (parentPid &amp;gt; 0) {
                    Log.i(TAG, &quot;Wrapped process has pid &quot; + innerPid);
                    pid = innerPid;
                    usingWrapper = true;
                } else {
                    Log.w(TAG, &quot;Wrapped process reported a pid that is not a child of &quot;
                            + &quot;the process that we forked: childPid=&quot; + pid
                            + &quot; innerPid=&quot; + innerPid);
                }
            }
        }

        try {
            mSocketOutStream.writeInt(pid);
            mSocketOutStream.writeBoolean(usingWrapper);
        } catch (IOException ex) {
            throw new IllegalStateException(&quot;Error writing to command socket&quot;, ex);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主要进行一些资源清理的工作。到这里，子进程就创建完成了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/800205/201910/800205-20191015233734055-1431928647.png&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;调用 &lt;code&gt;Process.start()&lt;/code&gt; 创建应用进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZygoteProcess&lt;/code&gt; 负责和 &lt;code&gt;Zygote&lt;/code&gt; 进程建立 socket 连接，并将创建进程需要的参数发送给 Zygote 的 socket 服务端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Zygote&lt;/code&gt; 服务端接收到参数之后调用 &lt;code&gt;ZygoteConnection.processOneCommand()&lt;/code&gt; 处理参数，并 fork 进程&lt;/li&gt;
&lt;li&gt;最后通过 &lt;code&gt;findStaticMain()&lt;/code&gt; 找到 &lt;code&gt;ActivityThread&lt;/code&gt; 类的 main() 方法并执行，子进程就启动了&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;预告&quot;&gt;预告&lt;/h2&gt;
&lt;p&gt;到现在为止已经解析了 &lt;code&gt;Zygote&lt;/code&gt; 进程 ，&lt;code&gt;SystemServer&lt;/code&gt; 进程，以及应用进程的创建。下一篇的内容是和应用最密切相关的系统服务 &lt;strong&gt;ActivityManagerService&lt;/strong&gt; , 来看看它在 &lt;code&gt;SystemServer&lt;/code&gt; 中是如何被创建和启动的，敬请期待！&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;文章首发微信公众号： &lt;strong&gt;&lt;code&gt;秉心说&lt;/code&gt;&lt;/strong&gt; ， 专注 Java 、 Android 原创知识分享，LeetCode 题解。&lt;/p&gt;
&lt;p&gt;更多最新原创文章，扫码关注我吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/800205/201910/800205-20191015233735031-1965127565.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 15 Oct 2019 15:38:00 +0000</pubDate>
<dc:creator>秉心说</dc:creator>
<og:description>本文基于 Android 9.0 , 代码仓库地址 ： 'android_9.0.0_r45' 文中源码链接： 'SystemServer.java' 'ActivityManagerService.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bingxinshuo/p/11681943.html</dc:identifier>
</item>
<item>
<title>你不知道的线程池构造方法的那些趣事？ - 彤哥读源码</title>
<link>http://www.cnblogs.com/tong-yuan/p/11681782.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tong-yuan/p/11681782.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1648938/201910/1648938-20191015230518288-1795521789.png&quot; alt=&quot;ThreadPoolExecutor&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（手机横屏看源码更方便）&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;注：java源码分析部分如无特殊说明均基于 java8 版本。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;ThreadPoolExecutor的构造方法是创建线程池的入口，虽然比较简单，但是信息量很大，由此也能引发一系列的问题，同样地，这也是面试中经常被问到的问题，下面彤哥只是列举了一部分关于ThreadPoolExecutor构造方法的问题，如果你都能回答上来，则可以不用看下面的分析了。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;（1）ThreadPoolExecutor有几个构造方法？&lt;/p&gt;
&lt;p&gt;（2）ThreadPoolExecutor最长的构造方法有几个参数？&lt;/p&gt;
&lt;p&gt;（3）keepAliveTime是做什么用的？&lt;/p&gt;
&lt;p&gt;（7）核心线程会不会超时关闭？能不能超时关闭？&lt;/p&gt;
&lt;p&gt;（4）ConcurrentLinkedQueue能不能作为任务队列的参数？&lt;/p&gt;
&lt;p&gt;（5）默认的线程是怎么创建的？&lt;/p&gt;
&lt;p&gt;（6）如何实现自己的线程工厂？&lt;/p&gt;
&lt;p&gt;（7）拒绝策略有哪些？&lt;/p&gt;
&lt;p&gt;（8）默认的拒绝策略是什么？&lt;/p&gt;
&lt;h2 id=&quot;构造方法&quot;&gt;构造方法&lt;/h2&gt;
&lt;p&gt;好了，我们直接上代码。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ThreadPoolExecutor(int corePoolSize,
                          int maximumPoolSize,
                          long keepAliveTime,
                          TimeUnit unit,
                          BlockingQueue&amp;lt;Runnable&amp;gt; workQueue) {
    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
         Executors.defaultThreadFactory(), defaultHandler);
}

public ThreadPoolExecutor(int corePoolSize,
                          int maximumPoolSize,
                          long keepAliveTime,
                          TimeUnit unit,
                          BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,
                          ThreadFactory threadFactory) {
    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
         threadFactory, defaultHandler);
}

public ThreadPoolExecutor(int corePoolSize,
                          int maximumPoolSize,
                          long keepAliveTime,
                          TimeUnit unit,
                          BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,
                          RejectedExecutionHandler handler) {
    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
         Executors.defaultThreadFactory(), handler);
}

public ThreadPoolExecutor(int corePoolSize,
                          int maximumPoolSize,
                          long keepAliveTime,
                          TimeUnit unit,
                          BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,
                          ThreadFactory threadFactory,
                          RejectedExecutionHandler handler) {
    if (corePoolSize &amp;lt; 0 ||
        maximumPoolSize &amp;lt;= 0 ||
        maximumPoolSize &amp;lt; corePoolSize ||
        keepAliveTime &amp;lt; 0)
        throw new IllegalArgumentException();
    if (workQueue == null || threadFactory == null || handler == null)
        throw new NullPointerException();
    this.acc = System.getSecurityManager() == null ?
            null :
            AccessController.getContext();
    this.corePoolSize = corePoolSize;
    this.maximumPoolSize = maximumPoolSize;
    this.workQueue = workQueue;
    this.keepAliveTime = unit.toNanos(keepAliveTime);
    this.threadFactory = threadFactory;
    this.handler = handler;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ThreadPoolExecutor有四个构造方法，其中前三个最终都是调用最后一个，它有7个参数，分别为corePoolSize、maximumPoolSize、keepAliveTime、unit、workQueue、threadFactory、handler。&lt;/p&gt;
&lt;h2 id=&quot;corepoolsize&quot;&gt;corePoolSize&lt;/h2&gt;
&lt;p&gt;核心线程数。&lt;/p&gt;
&lt;p&gt;当正在运行的线程数小于核心线程数时，来一个任务就创建一个核心线程；&lt;/p&gt;
&lt;p&gt;当正在运行的线程数大于或等于核心线程数时，任务来了先不创建线程而是丢到任务队列中。&lt;/p&gt;
&lt;h2 id=&quot;maximumpoolsize&quot;&gt;maximumPoolSize&lt;/h2&gt;
&lt;p&gt;最大线程数。&lt;/p&gt;
&lt;p&gt;当任务队列满了时【本篇文章由公众号“彤哥读源码”原创】，来一个任务才创建一个非核心线程，但不能超过最大线程数。&lt;/p&gt;
&lt;h2 id=&quot;keepalivetime-unit&quot;&gt;keepAliveTime + unit&lt;/h2&gt;
&lt;p&gt;线程保持空闲时间及单位。&lt;/p&gt;
&lt;p&gt;默认情况下，此两参数仅当正在运行的线程数大于核心线程数时才有效，即只针对非核心线程。&lt;/p&gt;
&lt;p&gt;但是，如果allowCoreThreadTimeOut被设置成了true，针对核心线程也有效。&lt;/p&gt;
&lt;p&gt;即当任务队列为空时，线程保持多久才会销毁，内部主要是通过阻塞队列带超时的poll(timeout, unit)方法实现的。&lt;/p&gt;
&lt;h2 id=&quot;workqueue&quot;&gt;workQueue&lt;/h2&gt;
&lt;p&gt;任务队列。&lt;/p&gt;
&lt;p&gt;当正在运行的线程数大于或等于核心线程数时，任务来了是先进入任务队列中的。&lt;/p&gt;
&lt;p&gt;这个队列必须是阻塞队列，所以像ConcurrentLinkedQueue就不能作为参数，因为它虽然是并发安全的队列，但是它不是阻塞队列。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// ConcurrentLinkedQueue并没有实现BlockingQueue接口
public class ConcurrentLinkedQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;
        implements Queue&amp;lt;E&amp;gt;, java.io.Serializable {
    // ...【本篇文章由公众号“彤哥读源码”原创】
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;threadfactory&quot;&gt;threadFactory&lt;/h2&gt;
&lt;p&gt;线程工厂。&lt;/p&gt;
&lt;p&gt;默认使用的是Executors工具类中的DefaultThreadFactory类，这个类有个缺点，创建的线程的名称是自动生成的，无法自定义以区分不同的线程池，且它们都是非守护线程。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;static class DefaultThreadFactory implements ThreadFactory {
        private static final AtomicInteger poolNumber = new AtomicInteger(1);
        private final ThreadGroup group;
        private final AtomicInteger threadNumber = new AtomicInteger(1);
        private final String namePrefix;

        DefaultThreadFactory() {
            SecurityManager s = System.getSecurityManager();
            group = (s != null) ? s.getThreadGroup() :
                                  Thread.currentThread().getThreadGroup();
            namePrefix = &quot;pool-&quot; +
                          poolNumber.getAndIncrement() +
                         &quot;-thread-&quot;;
        }

        public Thread newThread(Runnable r) {
            Thread t = new Thread(group, r,
                                  namePrefix + threadNumber.getAndIncrement(),
                                  0);
            if (t.isDaemon())
                t.setDaemon(false);
            if (t.getPriority() != Thread.NORM_PRIORITY)
                t.setPriority(Thread.NORM_PRIORITY);
            return t;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那怎么自定义一个线程工厂呢？&lt;/p&gt;
&lt;p&gt;其实也很简单，自己实现一个ThreadFactory，然后把名称和是否是守护进程当作构造方法的参数传进来就可以了。&lt;/p&gt;
&lt;p&gt;有兴趣的同学可以参考netty中的默认线程工厂或者google中的线程工厂。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;io.netty.util.concurrent.DefaultThreadFactory
com.google.common.util.concurrent.ThreadFactoryBuilder&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;handler&quot;&gt;handler&lt;/h2&gt;
&lt;p&gt;拒绝策略。&lt;/p&gt;
&lt;p&gt;拒绝策略表示当任务队列满了且线程数也达到最大了，这时候再新加任务，线程池已经无法承受了，这些新来的任务应该按什么逻辑来处理。&lt;/p&gt;
&lt;p&gt;常用的拒绝策略有丢弃当前任务、丢弃最老的任务、抛出异常、调用者自己处理等待。&lt;/p&gt;
&lt;p&gt;默认的拒绝策略是抛出异常，即线程池无法承载了，调用者再往里面添加任务会抛出异常。&lt;/p&gt;
&lt;p&gt;默认的拒绝策略虽然比较简单粗暴，但是相对于丢弃任务策略明显要好很多，最起码调用者自己可以捕获这个异常再进行二次处理。&lt;/p&gt;
&lt;h2 id=&quot;彩蛋&quot;&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;OK，ThreadPoolExecutor的构造方法这块我们今天进行了深入解析，关于这块，您还有什么问题呢？欢迎留言评论、私聊勾搭。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;欢迎关注我的公众号“彤哥读源码”，查看更多源码系列文章, 与彤哥一起畅游源码的海洋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1648938/201910/1648938-20191015230518482-1732289840.jpg&quot; alt=&quot;qrcode&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 15 Oct 2019 15:05:00 +0000</pubDate>
<dc:creator>彤哥读源码</dc:creator>
<og:description>（手机横屏看源码更方便） 注：java源码分析部分如无特殊说明均基于 java8 版本。 简介 ThreadPoolExecutor的构造方法是创建线程池的入口，虽然比较简单，但是信息量很大，由此也能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/tong-yuan/p/11681782.html</dc:identifier>
</item>
</channel>
</rss>