<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>.NetCore WebApi —— Swagger版本控制 - 千金不如一默</title>
<link>http://www.cnblogs.com/jixiaosa/p/10817143.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jixiaosa/p/10817143.html</guid>
<description>&lt;p&gt;上接：&lt;a href=&quot;https://www.cnblogs.com/jixiaosa/p/10783855.html&quot; target=&quot;_blank&quot;&gt;.NetCore WebApi——基于JWT的简单身份认证与授权（Swagger）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;版本控制的好处是显而易见的，利用Swagger展示不同版本的API更能体现效果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.安装Nuget包：Microsoft.AspNetCore.Mvc.Versioning&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1237235/201905/1237235-20190505224945519-139824033.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. 配置Startup类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 2.1  添加新成员 ，用来获取API版本信息&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Api版本信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; IApiVersionDescriptionProvider provider;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 2.2 在 ConfigureServices 方法中注册服务&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
services.AddApiVersioning(option =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可选，为true时API返回支持的版本信息&lt;/span&gt;
                option.ReportApiVersions = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不提供版本时，默认为1.0&lt;/span&gt;
                option.AssumeDefaultVersionWhenUnspecified = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求中未指定版本时默认为1.0&lt;/span&gt;
                option.DefaultApiVersion = &lt;span&gt;new&lt;/span&gt; ApiVersion(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            }).AddVersionedApiExplorer(option &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {&lt;br/&gt;　　　　　　　　　　// 版本名的格式：v+版本号
                option.GroupNameFormat &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'v'V&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                option.AssumeDefaultVersionWhenUnspecified &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            });

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.provider = services.BuildServiceProvider().GetRequiredService&amp;lt;IApiVersionDescriptionProvider&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 2.3 遍历API版本信息，在原有的AddSwaggerGen方法中循环处理：红色部分&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注册Swagger服务&lt;/span&gt;
            services.AddSwaggerGen(c =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多版本控制&lt;/span&gt;
               &lt;span&gt; foreach (var item in provider.ApiVersionDescriptions)
                {
                    // 添加文档信息
                    c.SwaggerDoc(item.GroupName, new Info
                    {
                        Title = &quot;CoreWebApi&quot;,
                        Version = item.ApiVersion.ToString(),
                        Description = &quot;ASP.NET CORE WebApi&quot;,
                        Contact = new Contact
                        {
                            Name = &quot;Jee&quot;,
                            Email = &quot;xiaomaprincess@gmail.com&quot;,
                            Url = &quot;https://www.cnblogs.com/jixiaosa/&quot;
                        }
                    });
                }
                &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.4 修改 Configure 方法中的 SwaggerUI方法，同样做循环处理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　//&lt;/span&gt;&lt;span&gt; 配置SwaggerUI&lt;/span&gt;
            app.UseSwaggerUI(c =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; provider.ApiVersionDescriptions)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;CoreAPI&quot;); 单版本&lt;/span&gt;
                    c.SwaggerEndpoint($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/swagger/{item.GroupName}/swagger.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CoreAPI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;item.ApiVersion);
                }
                c.RoutePrefix &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.5 在控制器中应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 2.5.1 在Test控制器中添加特性标签以及路由。 1.0版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1237235/201905/1237235-20190505230108318-371964496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.5.1 在Value控制器中添加特性标签以及路由。 2.0版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1237235/201905/1237235-20190505230433718-1223521024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 启动项目查看效&lt;/strong&gt;&lt;strong&gt;果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1237235/201905/1237235-20190505231849069-1143926013.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;Gif&lt;img src=&quot;https://img2018.cnblogs.com/blog/1237235/201905/1237235-20190505232322314-1373315760.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;github:&lt;/strong&gt;   &lt;a href=&quot;https://github.com/xiaoMaPrincess/Asp.NetCore-WebApi&quot; target=&quot;_blank&quot;&gt;https://github.com/xiaoMaPrincess/Asp.NetCore-WebApi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多层架构版本：&lt;a href=&quot;https://github.com/xiaoMaPrincess/.NetCoreWebApi&quot; target=&quot;_blank&quot;&gt;https://github.com/xiaoMaPrincess/.NetCoreWebApi&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 May 2019 15:31:00 +0000</pubDate>
<dc:creator>千金不如一默</dc:creator>
<og:description>上接：.NetCore WebApi——基于JWT的简单身份认证与授权（Swagger） 版本控制的好处是显而易见的，利用Swagger展示不同版本的API更能体现效果。 1.安装Nuget包：Mic</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jixiaosa/p/10817143.html</dc:identifier>
</item>
<item>
<title>java基础（六）：RabbitMQ 入门 - 从入门到放弃的攻城狮</title>
<link>http://www.cnblogs.com/dz-boss/p/10817100.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dz-boss/p/10817100.html</guid>
<description>&lt;p&gt;&lt;span&gt; 建议先了解为什么项目要使用 MQ 消息队列，MQ 消息队列有什么优点，如果在业务逻辑上没有此种需求，建议不要使用中间件。中间件对系统的性能做优化的同时，同时增加了系统的复杂性也维护难易度；其次，需要了解各种常见的 MQ 消息队列有什么区别，以便在相同的成本下选择一种最合适本系统的技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;本文主要讨论 RabbitMQ，从3月底接触一个项目使用了 RabbitMQ，就开始着手学习，主要通过视频和博客学习了一个月，基本明白了 RabbitMQ 的应用，其它的 MQ 队列还不清楚，其底层技术还有待学习，以下是我目前的学习心得。&lt;/p&gt;&lt;div data-v-4a12c3f3=&quot;&quot; data-id=&quot;5ccef91a5188253ffd574325&quot; readability=&quot;77.025507548152&quot;&gt;

&lt;p&gt;RabbitMQ 是基于 Erlang 语言写的，所以首先安装 Erlang，本例是在 Windows 上安装,也可以选择在 Linux 上安装，机器上没有虚拟机，直接在 Windows 上操作，建议在 Linux 上安装。&lt;a href=&quot;http://www.erlang.org/downloads&quot; target=&quot;_blank&quot;&gt;官方下载&lt;/a&gt; Erlang 软件，我下载最新版本 21.3。安装过程很简单，直接 Next 到底。 Linux 安装自行谷歌。如下图：&lt;/p&gt;
&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a549d8b5764176?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a549d8b5764176?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;503&quot; data-height=&quot;390&quot;/&gt;&lt;br/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a549e15639a806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a549e15639a806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;503&quot; data-height=&quot;390&quot;/&gt;&lt;br/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a549e672a7fc01?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a549e672a7fc01?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;503&quot; data-height=&quot;390&quot;/&gt;安装结束后，设置环境变量，如下图&lt;br/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a0e22b5a077?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a0e22b5a077?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;632&quot; data-height=&quot;666&quot;/&gt; &lt;br/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a1c671166e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a1c671166e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1109&quot; data-height=&quot;570&quot;/&gt;测试是否安装成功&lt;em id=&quot;__mceDel&quot;&gt;&lt;br/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a43e8d9d011?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a43e8d9d011?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;993&quot; data-height=&quot;519&quot;/&gt;&lt;/em&gt;

&lt;p&gt;在&lt;a href=&quot;https://www.rabbitmq.com/install-windows.html&quot; target=&quot;_blank&quot;&gt;官方下载&lt;/a&gt;，选择最新版本 3.7。安装过程很简单，直接 Next 到底。如下图：&lt;/p&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a8eae71e3b8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a8eae71e3b8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;503&quot; data-height=&quot;390&quot;/&gt;&lt;br/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a9672c81cfa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54a9672c81cfa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;503&quot; data-height=&quot;390&quot;/&gt;&lt;/em&gt;测试安装是否成功，进入安装目录 sbin，执行 rabbitmq-plugins enable rabbitmq_management 命令，出现下面界面，证明安装成功（建议以管理员方式打开 dos）。&lt;em id=&quot;__mceDel&quot;&gt;&lt;br/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54ab8b2d8725f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54ab8b2d8725f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;993&quot; data-height=&quot;519&quot;/&gt; &lt;/em&gt;
&lt;p&gt;执行 rabbitmq-server start 命令，启动服务。本地登陆并创建用户，如下图：&lt;/p&gt;
&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54ae03c9b21f4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54ae03c9b21f4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1018&quot; data-height=&quot;247&quot;/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54af6ff87c6c1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/25/16a54af6ff87c6c1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1138&quot; data-height=&quot;574&quot;/&gt;关于tags标签的解释：
&lt;p&gt;1、  超级管理员(administrator)&lt;/p&gt;
&lt;p&gt;可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。&lt;/p&gt;
&lt;p&gt;2、  监控者(monitoring)&lt;/p&gt;
&lt;p&gt;可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)&lt;/p&gt;
&lt;p&gt;3、  策略制定者(policymaker)&lt;/p&gt;
&lt;p&gt;可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。&lt;/p&gt;
&lt;p&gt;4、  普通管理者(management)&lt;/p&gt;
&lt;p&gt;仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。&lt;/p&gt;
&lt;p&gt;5、  其他&lt;/p&gt;
&lt;p&gt;无法登陆管理控制台，通常就是普通的生产者和消费者。&lt;/p&gt;

&lt;p&gt;参考 RabbitMQ 官网，一共分为6个模式&lt;/p&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/26/16a59c98c32f1019?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/26/16a59c98c32f1019?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;982&quot; data-height=&quot;925&quot;/&gt;&lt;/em&gt;RabbitMQ 是一个消息代理，实际上，它接收生产者产生的消息，然后将消息传递给消费者。在这个过程中，它可以路由、缓冲、持久化等，在传输过程中，主要又三部分组成。
&lt;p&gt;生产者：发送消息的一端&lt;/p&gt;
&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80f57c8357134?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80f57c8357134?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;86&quot; data-height=&quot;55&quot;/&gt;&lt;/div&gt;&lt;p&gt;队列：它活动在 RabbitMQ 服务器中，消息存储的地方，队列本质上是一个缓冲对象，所以存储的消息不受限制&lt;/p&gt;&lt;div data-v-4a12c3f3=&quot;&quot; data-id=&quot;5ccef91a5188253ffd574325&quot; readability=&quot;258.5&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80f5d25a586c5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80f5d25a586c5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;97&quot; data-height=&quot;58&quot;/&gt;&lt;/em&gt;一般情况下，消息生产者、消费者和队列不在同一台服务器上，本地做测试，放在一台服务器上。 测试项目直接创建一个 maven 格式的项目，没必要创建网络格式。新建一个项目，如下图：&lt;em id=&quot;__mceDel&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80fdb37f8e5c8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80fdb37f8e5c8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;734&quot; data-height=&quot;782&quot;/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80ff48b8a2636?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a80ff48b8a2636?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;734&quot; data-height=&quot;782&quot;/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a8101d413d9b8e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a8101d413d9b8e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;734&quot; data-height=&quot;782&quot;/&gt;&lt;/em&gt;首先准备操作 MQ 的环境
&lt;p&gt;（1）: 准备必要的 Pom 文件，导入相应的 jar 包,&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;  xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.edu&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;rabbitmqdemo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;rabbitmqdemo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; FIXME change it to the project's website &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://www.example.com&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven.compiler.source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven.compiler.source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven.compiler.target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven.compiler.target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;测试包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mq客户端&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.rabbitmq&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;amqp-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.5.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;slf4j-log4j12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7.25&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;工具包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;spring集成&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.amqp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-rabbit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7.6.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;compile&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-clean-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-resources-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.0.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.8.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.22.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-jar-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.0.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-install-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.5.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-deploy-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.8.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-site-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.7.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-project-info-reports-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）: 建立日志配置文件,在 resources 下建立 log4j.properties，便于打印精确的日志信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;log4j.rootLogger=DEBUG,A1
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;log4j.logger.com.edu=DEBUG
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;log4j.logger.org.mybatis=DEBUG
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;log4j.appender.A1=org.apache.log4j.ConsoleAppender
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;log4j.appender.A1.layout=org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; log4j.appender.A1.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c]-%m%n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）: 编写一个工具类，主要用于连接 RabbitMQ&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.util;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.ConnectionFactory;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName ConnectionUtil
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription 穿件连接的工具类
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 12:27
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConnectionUtil {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     * 创建连接工具
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Connection getConnection() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         ConnectionFactory connectionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionFactory();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         connectionFactory.setHost(&quot;127.0.0.1&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MQ的服务器&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         connectionFactory.setPort(5672);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认端口号&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         connectionFactory.setUsername(&quot;test&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         connectionFactory.setPassword(&quot;test&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         connectionFactory.setVirtualHost(&quot;/test&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; connectionFactory.newConnection();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项目总体图如下：&lt;/p&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82e041e2bd34b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82e041e2bd34b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;717&quot; data-height=&quot;464&quot;/&gt;&lt;/em&gt;&lt;/em&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-3&quot;&gt;4.1.Hello World模式&lt;/h2&gt;
&lt;p&gt;此模式非常简单，一个生产者对应一个消费者&lt;/p&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/4/26/16a59cb42e66c99d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/4/26/16a59cb42e66c99d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;395&quot; data-height=&quot;65&quot;/&gt;&lt;/em&gt;&lt;/em&gt;首先我们制造一个消息生产者，并发送消息：
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.hello;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName Sender
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription 创建发送者
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 12:45
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sender {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testhello&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列的名字&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] srgs) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取连接&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建连接&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明队列
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数1：队列的名字
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数2：是否持久化队列，我们的队列存在内存中，如果mq重启则丢失。如果为ture，则保存在erlang的数据库中，重启，依旧保存
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数3：是否排外，我们连接关闭后是否自动删除队列，是否私有当前队列，如果私有，其他队列不能访问
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数4：是否自动删除
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数5：我们传入的其他参数&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送内容&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         channel.basicPublish(&quot;&quot;, QUEUE, &lt;span&gt;null&lt;/span&gt;, &quot;要发送的消息&quot;&lt;span&gt;.getBytes());
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭连接&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        channel.close();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        connection.close();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义一个消息接受者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.hello;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.QueueingConsumer;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription 消息接受者
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 12:58
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testhello&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息队列的名称&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         QueueingConsumer queueingConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QueueingConsumer(channel);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接受消息，参数2表示自动确认消息&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, queueingConsumer);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取消息&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             QueueingConsumer.Delivery delivery = queueingConsumer.nextDelivery();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有消息就等待，有消息就获取消息，并销毁，是一次性的&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             String message = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(delivery.getBody());
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            System.out.println(message);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此种模式属于“点对点”模式，一个生产者、一个队列、一个消费者，可以运用在聊天室（实际上真实的聊天室比这复杂很多，虽然是“点对点”模式，但是并不是一个生产者，一个队列，一个消费者）&lt;/p&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-4&quot;&gt;4.2.work queues&lt;/h2&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a8281274841264?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a8281274841264?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;361&quot; data-height=&quot;121&quot;/&gt;&lt;/em&gt;&lt;/em&gt;一个生产者对应多个消费者，但是只有一个消费者获得消息
&lt;p&gt;定义消息制造者：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.work;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName Sender
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription 创建发送者
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 12:45
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sender {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testhellowork&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列的名字&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] srgs) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取连接&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建连接&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明队列
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数1：队列的名字
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数2：是否持久化队列，我们的队列存在内存中，如果mq重启则丢失。如果为ture，则保存在erlang的数据库中，重启，依旧保存
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数3：是否排外，我们连接关闭后是否自动删除队列，是否私有当前队列，如果私有，其他队列不能访问
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数4：是否自动删除
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数5：我们传入的其他参数&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送内容&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 100; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             channel.basicPublish(&quot;&quot;, QUEUE, &lt;span&gt;null&lt;/span&gt;, (&quot;要发送的消息&quot; +&lt;span&gt; i).getBytes());
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭连接&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        channel.close();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        connection.close();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;定义2个消息消费者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.work;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Queue;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Deccription 消息接受者
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 12:58
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver1 {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testhellowork&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息队列的名称&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;channel.basicQos(1);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;告诉服务器，当前消息没有确认之前，不要发送新消息，合理自动分配资源&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;收到消息时候调用&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                 System.out.println(&quot;消费者1收到的消息：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;确认消息
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数2：false为确认收到消息，ture为拒绝收到消息&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册消费者
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数2：手动确认，我们收到消息后，需要手动确认，告诉服务器，我们收到消息了&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.work;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription 消息接受者
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 12:58
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver2 {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testhellowork&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息队列的名称&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;channel.basicQos(1);&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;收到消息时候调用&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                 System.out.println(&quot;消费者2收到的消息：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;确认消息
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数2：false为确认收到消息，ture为拒绝收到消息&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册消费者
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数2：手动确认，我们收到消息后，需要手动确认，告诉服务器，我们收到消息了&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这种模式是最简单的 work 模式，消息发送者，循环发送了100次消息，打印结果如下：&lt;/p&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82f3d0f9c3524?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82f3d0f9c3524?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;446&quot; data-height=&quot;401&quot;/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82f4165468b7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82f4165468b7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;383&quot; data-height=&quot;462&quot;/&gt;&lt;/em&gt;&lt;/em&gt;可以看出，消息消费者消费到的消息是替换的，即一个消息只被消费了一次，且两个消费者各消费了50条消息。这里有个弊端，消息消费者发布消息的时候，无论消费者的消费能力如何（电脑的内存等硬件），消息只会均匀分布给各个消费者（可以给2个消费者 sleep 下，结果还是这样）。有没有什么方式可以让消息自动分配（按照电脑的硬件，能者多劳），答案是可以的，只需要增加 channel.basicQos(1);&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82f85866ca632?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a82f85866ca632?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1061&quot; data-height=&quot;653&quot;/&gt;&lt;/em&gt;&lt;/em&gt;此方案可以用来进行负载均衡，抢红包等场景
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-5&quot;&gt;4.3.public模式&lt;/h2&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a828251499c6a7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a828251499c6a7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;425&quot; data-height=&quot;126&quot;/&gt;&lt;/em&gt;&lt;/em&gt;一个消费者将消息首先发送到交换器，交换器绑定到多个队列，然后被监听该队列的消费者所接收并消费。X 表示交换器，在 RabbitMQ 中，交换器主要有四种类型: direct、fanout、topic、headers，这里的交换器是 fanout，其它类型的交换机自行谷歌，主要区别是交换机的匹配方式发生了变化。
&lt;p&gt;定义消息发布者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.publish;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName Sender
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 14:43
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sender {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCHANGE_NAME = &quot;testexchange&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义交换机名字&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明交换机
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个交换机，类型为fanout，也就是发布订阅者模式&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发布订阅模式，因为消息是先发布到交换机中，而交换机是没有保存功能的，所以如果没有消费者，消息会丢失&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, &lt;span&gt;null&lt;/span&gt;, &quot;发布订阅模式的消息&quot;&lt;span&gt;.getBytes());
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        channel.close();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        connection.close();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;定义2个消息消费者&lt;/em&gt;&lt;/em&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.publish;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 14:49
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver1 {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCHANGE_NAME = &quot;testexchange&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testpubqueue1&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定队列到交换机&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         channel.basicQos(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 System.out.println(&quot;消费者1：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.publish;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 14:49
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver2 {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCHANGE_NAME = &quot;testexchange&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testpubqueue2&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定队列到交换机&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         channel.basicQos(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 System.out.println(&quot;消费者2：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;消费者1 和消费者2 都监听了被同一个交换器绑定的队列，因此消息被同时消费到了。如果消息发送到没有队列绑定的交换器时，消息将丢失，因为交换器没有存储消息的能力，消息只能存储在队列中。&lt;/p&gt;
&lt;p&gt;应用场景：比如一个商城系统需要在管理员上传商品新的图片时，前台系统必须更新图片，日志系统必须记录相应的日志，那么就可以将两个队列绑定到图片上传交换器上，一个用于前台系统更新图片，另一个用于日志系统记录日志。&lt;/p&gt;

&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited&quot; src=&quot;data:image/svg+xml;utf8,%3C?xml%20version=&amp;quot;1.0&amp;quot;?%3E%3Csvg%20xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;%20version=&amp;quot;1.1&amp;quot;%20width=&amp;quot;478&amp;quot;%20height=&amp;quot;177&amp;quot;%3E%3C/svg%3E&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a8283b10501856?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;478&quot; data-height=&quot;177&quot;/&gt;&lt;/em&gt;&lt;/em&gt;生产者将消息发送到 direct 交换器，在绑定队列和交换器的时候有一个路由 key，生产者发送的消息会指定一个路由 key，那么消息只会发送到相应 key 相同的队列，接着监听该队列的消费者消费消息。
&lt;p&gt;定义消息发布者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.route;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName Sender
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 15:05
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sender {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCANGE_NAME = &quot;testroute&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义路由格式的交换机&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         channel.exchangeDeclare(EXCANGE_NAME, &quot;direct&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         channel.basicPublish(EXCANGE_NAME, &quot;key2&quot;, &lt;span&gt;null&lt;/span&gt;, &quot;路由模式的消息&quot;&lt;span&gt;.getBytes());
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        channel.close();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        connection.close();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.route;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 14:49
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver1 {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCHANGE_NAME = &quot;testroute&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testroute1queue&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定队列到交换机
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数3：绑定到交换机指定的路由的名字&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;key1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要绑定多个路由，再绑定一次即可&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;key2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         channel.basicQos(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                 System.out.println(&quot;消费者1：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.route;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 14:49
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver2 {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCHANGE_NAME = &quot;testroute&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testroute2queue&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定队列到交换机
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数3：绑定到交换机指定的路由的名字&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;key1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要绑定多个路由，再绑定一次即可&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;key3&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         channel.basicQos(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                 System.out.println(&quot;消费者2：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;应用场景：利用消费者能够有选择性的接收消息的特性，比如我们商城系统的后台管理系统对于商品进行修改、删除、新增操作都需要更新前台系统的界面展示，而查询操作确不需要，那么这两个队列分开接收消息就比较好。&lt;/p&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-7&quot;&gt;4.5.Topic&lt;/h2&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a83028700d39d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a83028700d39d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;510&quot; data-height=&quot;163&quot;/&gt;&lt;/em&gt;&lt;/em&gt;上面的路由模式是根据路由key进行完整的匹配（完全相等才发送消息），这里的通配符模式通俗的来讲就是模糊匹配。符号 “#” 表示匹配一个或多个词，符号 “*” 表示匹配一个词。实际上 Topic 模式是 routing 模式的扩展
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.topic;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Connection;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName Sender
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 15:19
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sender {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCANGE_NAME = &quot;testtopexchange&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         channel.exchangeDeclare(EXCANGE_NAME, &quot;topic&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         channel.basicPublish(EXCANGE_NAME, &quot;abc.adb.1&quot;, &lt;span&gt;null&lt;/span&gt;, &quot;topic模式消息发送者：&quot;&lt;span&gt;.getBytes());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        channel.close();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        connection.close();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.topic;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 14:49
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver1 {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCHANGE_NAME = &quot;testtopexchange&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testtopic1queue&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定队列到交换机
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数3：绑定到交换机指定的路由的名字&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;key.*&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要绑定多个路由，再绑定一次即可&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;abc.*&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         channel.basicQos(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                 System.out.println(&quot;消费者1：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.topic;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.edu.util.ConnectionUtil;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.rabbitmq.client.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName Recver1
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 14:49
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recver2 {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String EXCHANGE_NAME = &quot;testtopexchange&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE = &quot;testtopic2queue&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Connection connection =&lt;span&gt; ConnectionUtil.getConnection();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Channel channel =&lt;span&gt; connection.createChannel();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         channel.queueDeclare(QUEUE, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定队列到交换机
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数3：绑定到交换机指定的路由的名字&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;key.*&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要绑定多个路由，再绑定一次即可&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         channel.queueBind(QUEUE, EXCHANGE_NAME, &quot;abc.#&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         channel.basicQos(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         DefaultConsumer defaultConsumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultConsumer(channel) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; super.handleDelivery(consumerTag, envelope, properties, body);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                 System.out.println(&quot;消费者2：&quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         channel.basicConsume(QUEUE, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, defaultConsumer);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第六种模式是将上述的模式集成其它的框架，进行远程访问，这里我们将集成 Spring 实现 RCP 远程模式的使用&lt;/p&gt;

&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-9&quot;&gt;5.1.自动集成 Spring&lt;/h2&gt;
&lt;p&gt;编写spring的配置，此配置文件的目的是将 Spring 与 RabbitMQ 进行整合，实际上就是将 MQ 的相关信息（连接，队列，交换机……）通过XML配置的方式实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;       xmlns:rabbit&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/rabbit/spring-rabbit-1.7.xsd
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义连接工厂&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:connection-factory &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; host&lt;/span&gt;&lt;span&gt;=&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;5672&quot;&lt;/span&gt;&lt;span&gt; username&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                               virtual-host&lt;/span&gt;&lt;span&gt;=&quot;/test&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     定义模板
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     第三个参数，决定消息发送到哪里，如果为exchange，则发送到交换机;如果为queue，则发送到队列
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;template&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; exchange&lt;/span&gt;&lt;span&gt;=&quot;fanoutExchange&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:admin &lt;/span&gt;&lt;span&gt;connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义队列&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:queue &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myQueue&quot;&lt;/span&gt;&lt;span&gt; auto-declare&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:fanout-exchange &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;fanoutExchange&quot;&lt;/span&gt;&lt;span&gt; auto-declare&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;将消息绑定到交换机&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:binding &lt;/span&gt;&lt;span&gt;queue&lt;/span&gt;&lt;span&gt;=&quot;myQueue&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:fanout-exchange&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义监听器，收到消息会执行&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:listener-container &lt;/span&gt;&lt;span&gt;connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 定义监听的类和方法&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:listener &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;consumer&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt; queue-names&lt;/span&gt;&lt;span&gt;=&quot;myQueue&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:listener-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义消费者&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;consumer&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.edu.spring.MyConsumer&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;生产者：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.spring;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitTemplate;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName SpringTest
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 18:40
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SpringTest {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         ApplicationContext applicationContext = &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         RabbitTemplate rabbitTemplate = applicationContext.getBean(RabbitTemplate.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         rabbitTemplate.convertAndSend(&quot;Spring的消息&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        ((ClassPathXmlApplicationContext) applicationContext).destroy();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;消费者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.spring;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @ClassName MyConsumer
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 18:35
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyConsumer {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;用于接收消息&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(String message) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        System.err.println(message);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;集成Spring主要是在xml中实现了队列和交换机的创建。&lt;/p&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a83175b5838521?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/4/16a83175b5838521?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;573&quot;/&gt;&lt;/em&gt;&lt;/em&gt;最好能理解上面的图。理解后，以后写相关的代码，直接去网上 copy 一份配置文件，然后根据自己项目的情况进行修改。如果不能理解，就不知道如何修改出现错误后不知道错误出现在什么地方。
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-10&quot;&gt;5.2.手动模式&lt;/h2&gt;
&lt;p&gt;手动模式，主要增加MQ的回调操作，MQ消息失败或者成功就有相应的回调信息，增强系统的健壮性，一旦产生异常，很快就能定位到异常的位置，所以在实际开发中，一般都这种方式&lt;/p&gt;
&lt;p&gt;创建xml配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;       xmlns:rabbit&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/rabbit/spring-rabbit-1.7.xsd
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.edu.spring2&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;jsonMessageConverter&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.support.converter.Jackson2JsonMessageConverter&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    定义连接工厂
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    publisher-confirms为ture，确认失败等回调才会执行
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:connection-factory &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; host&lt;/span&gt;&lt;span&gt;=&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;5672&quot;&lt;/span&gt;&lt;span&gt; username&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                               virtual-host&lt;/span&gt;&lt;span&gt;=&quot;/test&quot;&lt;/span&gt;&lt;span&gt; publisher-confirms&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:admin &lt;/span&gt;&lt;span&gt;connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;amqpTemplate&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; confirm-callback&lt;/span&gt;&lt;span&gt;=&quot;confirmCallBackListener&quot;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                     return-callback&lt;/span&gt;&lt;span&gt;=&quot;returnCallBackListener&quot;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                     mandatory&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义队列&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:queue &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myQueue&quot;&lt;/span&gt;&lt;span&gt; auto-declare&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义交换机&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;DIRECT_EX&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;DIRECT_EX&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;将消息绑定到交换机&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:binding &lt;/span&gt;&lt;span&gt;queue&lt;/span&gt;&lt;span&gt;=&quot;myQueue&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义监听器，收到消息会执行&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:listener-container &lt;/span&gt;&lt;span&gt;connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; acknowledge&lt;/span&gt;&lt;span&gt;=&quot;manual&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 定义监听的类和方法&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:listener &lt;/span&gt;&lt;span&gt;queues&lt;/span&gt;&lt;span&gt;=&quot;myQueue&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;receiveConfirmTestListener&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:listener-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建回调监听函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.spring2;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitTemplate;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.support.CorrelationData;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName ConfirmCallBackListener
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 22:26
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; @Component(&quot;confirmCallBackListener&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ConfirmCallBackListener &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; RabbitTemplate.ConfirmCallback {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; confirm(CorrelationData correlationData, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; ack, String cause) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         System.out.println(&quot;确认回调 ack==&quot; + ack + &quot;回调原因==&quot; +&lt;span&gt; cause);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.spring2;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.rabbitmq.client.Channel;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.Message;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.ChannelAwareMessageListener;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @ClassName ReceiveConfirmTestListener
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 22:24
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; @Component(&quot;receiveConfirmTestListener&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ReceiveConfirmTestListener &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ChannelAwareMessageListener {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * 收到消息时，执行的监听
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; message
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; channel
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onMessage(Message message, Channel channel) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         System.out.println((&quot;消费者收到了消息&quot; +&lt;span&gt; message));
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         channel.basicAck(message.getMessageProperties().getDeliveryTag(),&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.spring2;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.Message;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitTemplate;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName ReturnCallBackListener
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 22:28
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; @Component(&quot;returnCallBackListener&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ReturnCallBackListener &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; RabbitTemplate.ReturnCallback {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; returnedMessage(Message message, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; replyCode, String replyText, String exchange, String routingKey) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         System.out.println(&quot;失败回调&quot; +&lt;span&gt; message);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;回调函数的配置来自 XML&lt;/p&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a8858f7aea7d5d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a8858f7aea7d5d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;516&quot;/&gt;&lt;/em&gt;&lt;/em&gt;&lt;/div&gt;&lt;div data-v-4a12c3f3=&quot;&quot; data-id=&quot;5ccef91a5188253ffd574325&quot; readability=&quot;70.5&quot;&gt;创建发送消息的工具类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.spring2;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.AmqpTemplate;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @ClassName PublicUtil
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 22:30
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; @Component(&quot;publicUtil&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PublicUtil {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; AmqpTemplate amqpTemplate;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; send(String excange, String routingkey, Object message) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        amqpTemplate.convertAndSend(excange, routingkey, message);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建测试类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.edu.spring2;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.runner.RunWith;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.test.context.ContextConfiguration;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * @ClassName TestMain
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Deccription TODO
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Author DZ
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * @Date 2019/5/4 22:32
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; @RunWith(SpringJUnit4ClassRunner.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; @ContextConfiguration(locations = {&quot;classpath:applicationContext2.xml&quot;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestMain {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; PublicUtil publicUtil;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String exChange = &quot;DIRECT_EX&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;交换机&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String queue = &quot;myQueue&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;     * exChange和queue均正确
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;     * confirm会执行，ack = ture
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;     * 消息正常接收（接收消息确认方法正常执行）
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test1() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         publicUtil.send(exChange, queue, &quot;测试1，队列和交换机均正确&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;     * exChange错误，queue正确
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;     * confirm执行，ack=false
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;     * 消息无法接收（接收消息确认方法不能执行）
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test2() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         publicUtil.send(exChange + &quot;1&quot;, queue, &quot;测试2，队列正确,交换机错误&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;     * exChange正常，queue错误
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;     * return执行
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;     * confirm执行，ack=ture
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test3() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         publicUtil.send(exChange, queue + &quot;1&quot;, &quot;测试2，队列错误,交换机正确&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;     * exChange错误，queue错误
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;     * confirm执行，ack=false
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test4() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         publicUtil.send(exChange + &quot;1&quot;, queue + &quot;1&quot;, &quot;测试2，队列错误,交换机错误&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试结果如下：&lt;/p&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a8851fae6d7944?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a8851fae6d7944?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1029&quot; data-height=&quot;385&quot;/&gt;&lt;/em&gt;&lt;/em&gt;confirm执行，ack=false；不能正常接收到消息
&lt;ul&gt;&lt;li&gt;test3：exChange正确，queue错误&lt;/li&gt;
&lt;/ul&gt;&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a88541a0d819f4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a88541a0d819f4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;387&quot;/&gt;&lt;/em&gt;&lt;/em&gt;confirm执行，ack=ture；return执行；不能接收到消息
&lt;ul&gt;&lt;li&gt;test4：exChange和queue均错误&lt;/li&gt;
&lt;/ul&gt;&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a885531408bbc3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a885531408bbc3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;372&quot;/&gt;&lt;/em&gt;&lt;/em&gt;confirm执行，ack=false；不能接收消息
&lt;p&gt;上述结论及代码如下图：&lt;/p&gt;
&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a88566637f6748?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a88566637f6748?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1054&quot; data-height=&quot;873&quot;/&gt;&lt;/em&gt;&lt;/em&gt;
&lt;p&gt;根据上述的测试结果，我们可以根据回调函数的返回结果，查看MQ的错误出现在那里。根据上述结论，我们可以对3个回调函数做如下处理：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;类 ReceiveConfirmTestListener 中的onMessage方法主要用于接收从 RabbitMQ 推送过来的消息，并对消息做相应的逻辑处理&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;类 ConfirmCallBackListener 中的 confirm 方法主要用于检查交换机（exChange），当 ack=false，交换机可能错误&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;类 ReturnCallBackListener 中的 returnedMessage 方法用于检查队列（queue），当此方法执行时，队列可能错误&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a8867412ba2343?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a8867412ba2343?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1247&quot; data-height=&quot;531&quot;/&gt;&lt;/em&gt;&lt;/em&gt;所以3个相应的方法可以做如下调整：&lt;em&gt;&lt;em&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a886c67f2158b6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a886c67f2158b6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;880&quot; data-height=&quot;236&quot;/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a886b741538b7e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a886b741538b7e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1163&quot; data-height=&quot;188&quot;/&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a886c0a6980f5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/5/5/16a886c0a6980f5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;840&quot; data-height=&quot;232&quot;/&gt;&lt;/em&gt;&lt;/em&gt;
&lt;p&gt;实际上，在真实项目中，上面3个方法也是按照这3个逻辑进行设计的。当然这3个方法中还可以加入更多的日志消息，和逻辑处理业务。&lt;/p&gt;

&lt;p&gt;https://blog.csdn.net/liu911025/article/details/80460182&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/lyhkmm/article/details/78775369&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/vbirdbest/article/details/78670550&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/vbirdbest/article/details/78670550&lt;/p&gt;
&lt;p&gt;https://www.rabbitmq.com/getstarted.html&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sun, 05 May 2019 15:24:00 +0000</pubDate>
<dc:creator>从入门到放弃的攻城狮</dc:creator>
<og:description>建议先了解为什么项目要使用 MQ 消息队列，MQ 消息队列有什么优点，如果在业务逻辑上没有此种需求，建议不要使用中间件。中间件对系统的性能做优化的同时，同时增加了系统的复杂性也维护难易度；其次，需要了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dz-boss/p/10817100.html</dc:identifier>
</item>
<item>
<title>Mysql（7）---存储过程 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/10816954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/10816954.html</guid>
<description>&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;存储过程接下来会有三篇相关博客&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一篇存储过程常用语法。&lt;/li&gt;
&lt;li&gt;第二篇存储过程中的游标。&lt;/li&gt;
&lt;li&gt;第三篇单独讲一个实际开发过程中复杂的真实的案例。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;一概述&quot;&gt;&lt;span&gt;一、概述&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;什么是存储过程&quot;&gt;1、什么是存储过程&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;概述&lt;/code&gt;：简单的说，就是&lt;code&gt;一组SQL语句集&lt;/code&gt;，功能强大，可以实现一些比较&lt;code&gt;复杂&lt;/code&gt;的逻辑功能，类似于JAVA语言中的方法；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;说明&lt;/code&gt; :存储过程跟触发器有点类似，都是一组SQL集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用。&lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;2、优点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;提高代码的重用性&lt;/li&gt;
&lt;li&gt;简化操作&lt;/li&gt;
&lt;li&gt;减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二delimiter命令&quot;&gt;&lt;span&gt;二、delimiter命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;讲存储过程先讲下delimiter命令。我们都知道sql语句默认都是以分号';'解释。如果下select * from test_table;&lt;/p&gt;
&lt;p&gt;这个会有一个问题对于存储过程：&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;CREATE  PROCEDURE `proc_if`(IN type int)
BEGIN
    DECLARE c varchar(500);
    IF type = 0 THEN
        set c = 'param is 0';
    ELSEIF type = 1 THEN
        set c = 'param is 1';
    ELSE
        set c = 'param is others, not 0 or 1';
    END IF;
    select c;
END;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于上面的存储过程,它们应该是一个整体，应该是一起执行，而不是遇到&lt;code&gt;分号&lt;/code&gt;就执行。默认情况下，不可能等到用户把这些语句全部输入完之后，再执行整段语句。 因为mysql一遇到分号，它就要自动执行。 即，在语句遇到';'时，mysql解释器就要执行了。 这种情况下，就需要事先把delimiter换成其它符号，如//或$$。&lt;/p&gt;
&lt;p&gt;这个时候&lt;code&gt;delimiter&lt;/code&gt;命令就起作用了。&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;# 这路我们讲默认的 ; 结尾改成 $ 再执行下面语句
DELIMITER $
select * from mall_pro ;
select * from member ;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会发现能之前能正常执行的语句这里报错了,因为现在修改结尾标志为 &lt;code&gt;$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201905/1090617-20190505230221263-959933307.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果我们改成：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from mall_pro $
select * from member $&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201905/1090617-20190505230231966-208000816.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;重点&lt;/code&gt;：delimiter作用域是会话级别的，当你设置了&lt;code&gt;DELIMITER $&lt;/code&gt;那么在当前会话级别都是变成以$结束。&lt;/p&gt;
&lt;p&gt;附一个详细讲delimiter的博客：&lt;a href=&quot;https://www.cnblogs.com/nickup/p/6628892.html&quot;&gt;MySql中 delimiter 详解&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;三存储过程语法&quot;&gt;&lt;span&gt;三、存储过程语法&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;创建&quot;&gt;1、创建&lt;/h4&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;CREATE PROCEDURE 存储过程名(参数列表)
BEGIN
     # 存储过程体（一组合法的SQL语句）
END&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;参数说明&quot;&gt;2、参数说明&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1) 参数列表包含三部分&lt;/strong&gt;&lt;br/&gt;参数模式 参数名 参数类型&lt;br/&gt;举例：&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;in stuname varchar(20)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以写成stuname varchar(20) 但最好把 in 加上。&lt;br/&gt;&lt;strong&gt;2) 参数模式&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;in：该参数可以作为输入，也就是该参数需要调用方传入值。
out：该参数可以作为输出，也就是该参数可以作为返回值。
inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;调用&quot;&gt;3、调用&lt;/h4&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;CALL 存储过程名(实参列表);&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;删除&quot;&gt;4、删除&lt;/h4&gt;
&lt;p&gt;如果存在该存储过程 则删除该存储过程。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;drop procedure if exists 存储过程名称&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;重点&lt;/code&gt;：存储过程体中的每条sql语句的结尾要求必须加&lt;code&gt;分号&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：如果存储过程体仅仅只有一句话，begin end可以省略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：存储过程的结尾可以使用 delimiter 重新设置（一般如果存储过程中存在多个分号结尾，就可以使用delimiter）&lt;/p&gt;
&lt;h4 id=&quot;示例&quot;&gt;5、示例&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1）空参列表&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;# 案例：插入到admin表中五条记录
DELIMITER $
CREATE PROCEDURE myp1()
BEGIN
    INSERT INTO admin(username,`password`) 
    VALUES('john1','0000'),('lily','0000'),('rose','0000'),('jack','0000'),('tom','0000');
END $
# 调用
CALL myp1()$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2):创建带in模式参数的存储过程&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;## 创建存储过程实现 根据女神名，查询对应的男神信息
CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))
BEGIN
    SELECT bo.*
    FROM boys bo
    RIGHT JOIN beauty b ON bo.id = b.boyfriend_id
    WHERE b.name=beautyName;
END $
#  调用
CALL myp2('柳岩')$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3) ：创建存储过程实现，用户是否登录成功&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;CREATE PROCEDURE myp4(IN username VARCHAR(20),IN PASSWORD VARCHAR(20))
BEGIN
    DECLARE result INT DEFAULT 0;# 声明并初始化
    SELECT COUNT(*) INTO result# 赋值
    FROM admin
    WHERE admin.username = username
    AND admin.password = PASSWORD;
    SELECT IF(result&amp;gt;0,'成功','失败');# 使用
END $
# 调用
CALL myp3('张飞','8888')$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4) 带有IN 和 OUT 参数&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;CREATE PROCEDURE myp7(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT usercp INT) 
BEGIN
    SELECT boys.boyname ,boys.usercp INTO boyname,usercp
    FROM boys 
    RIGHT JOIN
    beauty b ON b.boyfriend_id = boys.id
    WHERE b.name=beautyName ;
END $
# 调用
CALL myp7('小昭',@name,@cp)$ # 注意OUT的变量一定要是用户自定义的用户变量。
SELECT @name,@cp$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5) 创建带inout模式参数的存储过程&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;# 传入a和b两个值，最终a和b都翻倍并返回
DELIMITER $
CREATE PROCEDURE myp8(INOUT a INT ,INOUT b INT)
BEGIN
    SET a=a*2;
    SET b=b*2;
END $
# 调用
SET @m=10$
SET @n=20$
CALL myp8(@m,@n)$
# 输出 20 和 40
SELECT @m,@n$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里都是举了写简单的例子，后面会根据实际开发过程写一个复杂的存储过程。&lt;/p&gt;

&lt;h2 id=&quot;三流程控制结构&quot;&gt;&lt;span&gt;三、流程控制结构&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;我们知道java对于流程控制有：if、switch。对于Mysql也一样，它有它自己的流程控制语句，下面我们一个一个来分析。&lt;/p&gt;
&lt;h4 id=&quot;if语句&quot;&gt;1、IF语句&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1) if函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;语法：if(条件,值1，值2)
功能：实现双分支
应用在begin end中或外面&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2) if结构&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;# 如果expression为true 执行 statements
IF expression THEN 
   statements;
END IF;  # 有IF一定要有 END IF

# 如果expression为true 执行 statements 否则执行else-statements
IF expression THEN
   statements;
ELSE
   else-statements;
END IF;

# 不说了。
IF expression THEN
   statements;
ELSEIF elseif-expression THEN
   elseif-statements;
...
ELSE
   else-statements;
END IF;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;重点&lt;/code&gt;:IF结构最后都需要&lt;code&gt;END IF&lt;/code&gt;;结尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;DELIMITER $
CREATE PROCEDURE test_if(score FLOAT) 
BEGIN
    DECLARE ch CHAR DEFAULT 'A';
    IF score&amp;gt;90 THEN SET ch='A';
    ELSEIF score&amp;gt;80 THEN SET ch='B';
    ELSEIF score&amp;gt;60 THEN SET ch='C';
    ELSE SET ch='D';
    END IF;
    select ch;  
END $

call test_if(87)
#输出 B&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;case结构&quot;&gt;2.case结构&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1、语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;#情况1：类似于switch
case 变量或表达式
when 值1 then 语句1;
when 值2 then 语句2;
...
else 语句n;
end 

#情况2：
case 
when 条件1 then 语句1;
when 条件2 then 语句2;
...
else 语句n;
end 
#应用在begin end 中或外面&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;DELIMITER $
CREATE PROCEDURE test_case(in score FLOAT) 
BEGIN 
    DECLARE ch CHAR DEFAULT 'A';
    CASE 
    WHEN score&amp;gt;90 THEN SET ch='A';
    WHEN score&amp;gt;80 THEN SET ch='B';
    WHEN score&amp;gt;60 THEN SET ch='C';
    ELSE SET ch='D';
    END CASE;   
    select ch;
END $

call test_case(56)$
# 输出 D&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;五循环结构&quot;&gt;&lt;span&gt;五、循环结构&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;对于java循环结构有：for、while、do-while。而对于mysql则有：&lt;code&gt;while、loop、repeat&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;还有很重要的一点，对于java跳出循环有:continue 和 break。对于mysql也有自己跳出循环命令。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;iterate: 类似于 continue，继续，结束本次循环，继续下一次
leave:   类似于  break，跳出，结束当前所在的循环
# 至于它们怎么用，下面会举例说明&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;while&quot;&gt;1.while&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;特点&lt;/code&gt;：先判断后执行。(相当于java中while)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;【标签:】while 循环条件 do
    循环体;
 end while【 标签】;
 # 当你需要用到 iterate 或者 leave 时就需要用到标签。如果不需要用到这两个那么可以不需要标签&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2）示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;#案例：1+2+...100
DELIMITER $
drop procedure if exists `pro_while1` $
CREATE PROCEDURE pro_while1(IN insertCount INT)
BEGIN
    DECLARE total INT DEFAULT 0;
    DECLARE i INT DEFAULT 1;
    WHILE i&amp;lt;=insertCount DO
        set total:=total+i;
        SET i=i+1;
    END WHILE;
    select total;
END $

# 输出：5050
CALL pro_while1(100)$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3）带有leave语句示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;#案例：1+2+...100
DELIMITER $
drop procedure if exists `pro_while1` $
CREATE PROCEDURE pro_while1(IN insertCount INT)
BEGIN
    DECLARE total INT DEFAULT 0;
    DECLARE i INT DEFAULT 1;
    a:WHILE i&amp;lt;=insertCount DO
          IF i=11 THEN  LEAVE a; #当i=11是跳出循环 这里就需要用到标签了
          END IF;
    set total:=total+i;
    SET i=i+1;
    END WHILE a;
    select total;
END $

# 输出：55
CALL pro_while1(100)$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里就用到&lt;code&gt;标签&lt;/code&gt;（这里为a)了。&lt;/p&gt;
&lt;h4 id=&quot;repeat&quot;&gt;2、repeat&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1) 语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;特点&lt;/code&gt;：先执行后判断。(相当于Do-while)&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;【标签：】repeat
    循环体;
until 结束循环的条件
end repeat 【标签】;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2）示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;#案例：1+2+...100
DELIMITER $
drop procedure if exists `pro_while1` $
CREATE PROCEDURE pro_while1(IN insertCount INT)
BEGIN
    DECLARE total INT DEFAULT 0;
    DECLARE i INT DEFAULT 1;
    repeat 
    set total:=total+i;
    SET i=i+1;
    until i=10 #这里不需要分号
    END repeat;
    select total;
END $
# 输出：45
CALL pro_while1(100)$&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;loop&quot;&gt;3、loop&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;特点&lt;/code&gt;：简单死循环。(相当于while(true))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;【标签:】loop
    循环体;
end loop 【标签】;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2) 示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;#案例：1+2+...100
DELIMITER $
drop procedure if exists `pro_while1` $
CREATE PROCEDURE pro_while1(IN insertCount INT)
BEGIN
    DECLARE total INT DEFAULT 0;
    DECLARE i INT DEFAULT 1;
    a:loop 
    IF i=11 THEN
    LEAVE a;
    END IF;
    set total:=total+i;
    SET i=i+1;
    END loop a;
    select total;
END $

# 输出：55
CALL pro_while1(100)$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;: 有while一定要有 end while。有repeat一定要有end repeat。有loop一定要有end loop。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;只要自己变优秀了，其他的事情才会跟着好起来（少将9）
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 05 May 2019 15:21:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<og:description>Mysql（7） 存储过程 存储过程接下来会有三篇相关博客 第一篇存储过程常用语法。 第二篇存储过程中的游标。 第三篇单独讲一个实际开发过程中复杂的真实的案例。 一、概述 1、什么是存储过程 ：简单的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/10816954.html</dc:identifier>
</item>
<item>
<title>聊聊数据库~5.SQL运维上篇 - 鲲逸鹏</title>
<link>http://www.cnblogs.com/dotnetcrazy/p/10810798.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dotnetcrazy/p/10810798.html</guid>
<description>&lt;h2 id=&quot;sql运维篇&quot;&gt;1.6.SQL运维篇&lt;/h2&gt;
&lt;p&gt;运维这块逆天只能说够用，并不能说擅长，所以这篇就当抛砖之用，欢迎补充和纠错&lt;/p&gt;
&lt;p&gt;PS：再说明下&lt;code&gt;CentOS优化策略&lt;/code&gt;这部分的内容来源：首先这块逆天不是很擅长，所以主要是参考网上的DBA文章，之后请教了下运维相关的朋友，大家辩证看就行了，我只能保证90%的准确度（具体看业务）&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;1.6.1.概念&lt;/h3&gt;
&lt;h4 id=&quot;raid系&quot;&gt;1.RAID系&lt;/h4&gt;
&lt;p&gt;RAID：磁盘冗余队列&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;把多个容量小的磁盘组成一组容量更大的磁盘，并提供数据冗余来保证数据完整性的技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;RAID0&lt;/code&gt;：数据条带（好处：成本低，应用：数据备份）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;需要硬盘数&amp;gt;=2，数据没有冗余或修复功能，只是多个小容量变成大容量的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RAID1：磁盘镜像（好处：数据安全、读很快）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;磁盘的数据镜像到另一个磁盘上，最大限度的保证系统的可靠性和可修复性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;RAID5&lt;/code&gt;&lt;/strong&gt;：分布式奇偶校验磁盘阵列（好处：性价比高，缺点：两块磁盘失效则整个卷的数据都无法恢复，应用：从数据库）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;把数据分散到多个磁盘上，如果任何一个盘数据失效都可以从奇偶校验块中重建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RAID10：分片镜像（优点：读写性能良好，相对RAID5重建更简单速度更快，缺点：贵）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;对磁盘先做RAID1之后对两组RAID1的磁盘再做RAID0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;&lt;code&gt;RAID0&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;便宜，读写快，不安全&lt;/td&gt;
&lt;td&gt;没有&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;RAID1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;贵，高速读，最安全&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;2N&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;慢&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;&lt;code&gt;RAID5&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;性价比高，读快，安全&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;N+1&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;取决于最慢盘&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;RAID10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;贵，高速，安全&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;2N&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;san和nas&quot;&gt;2.SAN和NAS&lt;/h4&gt;
&lt;p&gt;SAN：通过专用高速网将一个或多个网络存储设备和服务器连接起来的专用存储系统&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;通过光纤连接到服务器，设备通过块接口访问，服务器可以将其当做硬盘使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;NAS&lt;/strong&gt;：连接在网络上, 具备资料存储功能的装置，以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;使用网络进行连接，通过基于文件协议（NFS、&lt;strong&gt;SMB&lt;/strong&gt;）来访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PS：网络存储一般都是用来搭建开发环境或者数据库备份&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;qps和tps&quot;&gt;3.QPS和TPS&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;QPS&lt;/code&gt;&lt;/strong&gt;（Queries Per Second）:&lt;strong&gt;每秒钟处理的查询量&lt;/strong&gt;（每秒的查询率）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;eg：&lt;code&gt;10ms&lt;/code&gt;处理1个sql，1s处理100个sql，那么&lt;code&gt;QPS&amp;lt;=100&lt;/code&gt;（&lt;code&gt;100ms&lt;/code&gt;处理1个sql，QPS&amp;lt;=10）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;TPS&lt;/code&gt;（Transactions Per Second）:每秒钟系统能够处理的交易或事务的数量（&lt;code&gt;每秒事务数|消息数&lt;/code&gt;）&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PS：QPS看的多些&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;常见问题&quot;&gt;1.6.2.常见问题&lt;/h3&gt;
&lt;p&gt;1.&lt;strong&gt;超高的CPU|内存使用率&lt;/strong&gt;：容易因CPU|内存资源耗尽而宕机&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;PS：如果是CPU密集型：需要更好的CPU；需要更大的并发量：需要更多的CPU（WEB项目）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL有同一数据中多次写操作合并为一次写操作&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;并发量大&lt;/strong&gt;：容易导致数据库连接数被占满&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PS：MySQL的&lt;code&gt;max_connections&lt;/code&gt;默认是100（根据硬件条件调整）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.&lt;strong&gt;磁盘IO&lt;/strong&gt;：导致性能直线下降（&lt;code&gt;热点数据内存放不下时&lt;/code&gt;）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;解决：定期整理磁盘碎片、&lt;code&gt;RAID增强传统硬盘&lt;/code&gt;、&lt;code&gt;SSD&lt;/code&gt;、&lt;code&gt;Fusion-io&lt;/code&gt;（PCIe）、&lt;code&gt;网络存储NAS or ASN&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS：SSD应用于存在&lt;code&gt;大量随机IO&lt;/code&gt;或解决&lt;code&gt;单线程IO瓶颈&lt;/code&gt;的场景&lt;/p&gt;
&lt;p&gt;4.&lt;strong&gt;网卡流量&lt;/strong&gt;（网络）：容易出现无法连接数据库的现象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;减少从服务器的数量&lt;/li&gt;
&lt;li&gt;分级缓存（防止同一时间缓存的大量失效）&lt;/li&gt;
&lt;li&gt;避免使用&lt;code&gt;select *&lt;/code&gt;进行查询（减少传输过程中的无用字节）&lt;/li&gt;
&lt;li&gt;分离业务网络和服务器网络&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;5.&lt;strong&gt;大表&lt;/strong&gt;定义：单表数据量超过千万行 or 表数据文件超过10G&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;问题：大表更容易出现慢查询、DDL也很慢也容易导致其他问题&lt;br/&gt;解决：分库分表（拆分为多个小表）&lt;br/&gt;PS：分库分表前可以对大表的历史数据进行归档（冷热数据隔离）【核心：归档时间点的选择】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;DDL影响的补充说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;建索引很慢&lt;/code&gt;，而且会引起长时间的主从延迟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;修改表结构需要长时间锁表&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;引起长时间的主从延迟&lt;/li&gt;
&lt;li&gt;影响正常的数据操作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;分库分表容易出现的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;分表主键的选择
&lt;ul&gt;&lt;li&gt;不能保证id是全局唯一，这时候可以使用诸如&lt;code&gt;雪花算法&lt;/code&gt;来解决&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;跨库跨表的join问题&lt;/li&gt;
&lt;li&gt;事物问题（分布式事物诞生了）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;PS：不太影响的案例：&lt;strong&gt;日志表&lt;/strong&gt;（&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;select&lt;/code&gt;很多，很少delete和update）&lt;/p&gt;
&lt;p&gt;6.&lt;strong&gt;大事务&lt;/strong&gt;定义：运行时间较长，操作数据比较多的事物&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;锁定太多的数据，造成大量的阻塞和锁超时&lt;/li&gt;
&lt;li&gt;回滚需要的时间很长（又得锁一段时间了）&lt;/li&gt;
&lt;li&gt;执行时间长，容易导致主从的延迟&lt;br/&gt;解决：&lt;/li&gt;
&lt;li&gt;避免一次处理大量数据（分批处理）&lt;/li&gt;
&lt;li&gt;去除在事物中不必要的select语句（一般都是事物中使用过多查询导致的）
&lt;ul&gt;&lt;li&gt;PS：select完全可以在事物外查询，事物专注于写&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL标准中定义的4种隔离级别：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;未提交读（&lt;code&gt;read uncommited&lt;/code&gt;）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已提交读&lt;/strong&gt;（&lt;code&gt;read commited&lt;/code&gt;）
&lt;ul&gt;&lt;li&gt;不可重复读&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重复读&lt;/strong&gt;（&lt;code&gt;repeatable read&lt;/code&gt;）
&lt;ul&gt;&lt;li&gt;&lt;code&gt;innodb的默认隔离级别&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可串行化（&lt;code&gt;serializable&lt;/code&gt;）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PS：隔离性低到高，&lt;code&gt;并发性高到低&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;PS：查看事物隔离级别-&lt;code&gt;show variables like '%iso%';&lt;/code&gt;，设置会话的隔离级别：&lt;code&gt;set session tx_isolation='read-committed'&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;扩展centos优化策略mysql服务器&quot;&gt;扩展：CentOS优化策略（MySQL服务器）&lt;/h3&gt;
&lt;h4 id=&quot;内核相关etcsysctl.conf&quot;&gt;1.内核相关（&lt;code&gt;/etc/sysctl.conf&lt;/code&gt;）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;查看默认值：&lt;code&gt;sysctl -a&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tcp相关设置：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 三次握手listen的最大限制
net.core.somaxconn = 65535 # 默认是128

# 当网络接受速率大于内核处理速率时，允许发送到队列中的包数
net.core.netdev_max_backlog = 65535 # 默认是1000

# Linux队列的最大半连接数（超过则丢包）
net.ipv4.tcp_max_syn_backlog = 65535 # 默认是128（不适合Web服务器）&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：这边只是一个参考，自己可以根据环境适当降低（最大端口数一般都是65535）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：如果是Web服务器，&lt;code&gt;net.ipv4.tcp_max_syn_backlog&lt;/code&gt;&lt;strong&gt;不宜过大&lt;/strong&gt;（容易有synflood攻击的安全问题），&lt;code&gt;net.ipv4.tcp_tw_recycle&lt;/code&gt;和&lt;code&gt;net.ipv4.tcp_tw_reuse&lt;/code&gt;&lt;strong&gt;不建议开启&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;加快tcp链接回收的几个参数：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# TCP等待时间，加快tcp链接回收
net.ipv4.tcp_fin_timeout = 10 # 默认60

# 把发起关闭，但关闭没完成的TCP关闭掉
net.ipv4.tcp_tw_recycle = 1   # 默认0（不适合Web服务器）

# 允许待关闭的socket建立新的tcp
net.ipv4.tcp_tw_reuse = 1     # 默认0（不适合Web服务器）&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：&lt;code&gt;net.ipv4.tcp_tw_reuse&lt;/code&gt;扩展说明：主动调用closed的一方才会在接收到对端的ACK后进入time_wait状态&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;参考文章：&lt;code&gt;https://blog.csdn.net/weixin_41966991/article/details/81264095&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;缓存区大小的最大值和默认值：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;net.core.wmem_default = 87380 # 默认212992
net.core.wmem_max = 16777216  # 默认212992
net.core.rmem_default = 87380 # 默认212992
net.core.rmem_max = 16777216  # 默认212992&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：每个&lt;code&gt;socket&lt;/code&gt;都会有一个&lt;code&gt;rmem_default&lt;/code&gt;大小的缓存空间（如果设置了&lt;code&gt;setsockopt&lt;/code&gt;则就是多少，最大不超过&lt;code&gt;rmem_max&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;减少失效连接所占用的系统资源&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 对于tcp失效链接占用系统资源的优化，加快资源回收效率
# 链接有效时间（单位s）
net.ipv4.tcp_keepalive_time = 120 # 默认7200

# tcp未获得相应时重发间隔（单位s）
net.ipv4.tcp_keepalive_intvl = 30 # 默认75

# 重发数量（单位s）
net.ipv4.tcp_keepalive_probes = 3 # 默认9&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;内存相关参数：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 共享单个共享内存下的最大值
kernel.shmmax = 4294967295   # 最大为物理内存-1byte

# 除非虚拟内存全部占满，否则不使用交换分区（为了性能）
# （free -m ==&amp;gt; Swap）
vm.swappiness = 0            # 默认30&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;PS：&lt;code&gt;kernel.shmmax&lt;/code&gt;设置的足够大，一般就是为了容纳整个innodb的缓冲池&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;eg：&lt;code&gt;4G = 4*1024 M = 4*1024*1024 KB = 4*1024*1024*1024 byte = 4294967296 - 1 = 4294967295&lt;/code&gt;&lt;br/&gt;PS：&lt;code&gt;unsigned int&lt;/code&gt; =&amp;gt; &lt;code&gt;[0, 2^32)&lt;/code&gt; =&amp;gt; &lt;code&gt;[0,4294967296)&lt;/code&gt; =&amp;gt; &lt;code&gt;[0,4294967295]&lt;/code&gt; &lt;strong&gt;巧不，一样的值&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;资源限制etcsecuritylimit.conf&quot;&gt;2.资源限制（&lt;code&gt;/etc/security/limit.conf&lt;/code&gt;）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;打开文件数的限制&lt;/strong&gt;（追加到配置后即可）&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# [*|%] [soft|hard] [type_item] [value]
* soft nofile 65536
* hard nofile 65535&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认值：&lt;strong&gt;&lt;code&gt;ulimit -a&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 3548
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024  《《看这  
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 3548
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：一般来说是够用了，但是一个遇到大型数据库可能就不够看了（多表多库配置高）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;code&gt;*：所有用户有效、soft：当前系统生效、hard：系统中所能设置的最大值、nofile：所限制的资源是打开文件的最大数、65536：数值&lt;/code&gt;【&lt;strong&gt;重启才生效&lt;/strong&gt;】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;磁盘调度策略sysblockdevnamequeuescheduler&quot;&gt;3.磁盘调度策略（&lt;code&gt;/sys/block/devname/queue/scheduler&lt;/code&gt;）&lt;/h4&gt;
&lt;p&gt;现在默认策略就是&lt;code&gt;deadline&lt;/code&gt;，所以不用优化了【对数据库支持很不错】&lt;/p&gt;
&lt;p&gt;PS：通过&lt;code&gt;cat /sys/block/sda/queue/scheduler&lt;/code&gt;查看（&lt;code&gt;[这个就是设置的值]&lt;/code&gt;）&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;noop [deadline] cfq &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果不是&lt;strong&gt;可以通过：&lt;code&gt;echo deadline &amp;gt; /sys/block/sda/queue/scheduler&lt;/code&gt;来设置&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;code&gt;cfq&lt;/code&gt;：会在队列中插入一些不必要的请求，会导致相应时间加长，一般桌面系统用的比较多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code&gt;noop&lt;/code&gt;：实现了一个FIFO队列，像电梯工作一样对IO请求进行组织，当有一个新请求到来时会合并到最近请求之后，以此保证请求同一介质（倾向于饿死读而利于写）一般&lt;code&gt;闪存设备&lt;/code&gt;、&lt;code&gt;RAM&lt;/code&gt;、&lt;code&gt;嵌入式系统&lt;/code&gt;用的比较多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;code&gt;deadline&lt;/code&gt;：确保了在一个截止时间内去服务请求（可调整）默认读期限短于写期限（防止写操作因为不能被读而出现饿死的现象）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;文件系统&quot;&gt;4.文件系统&lt;/h4&gt;
&lt;p&gt;Win：&lt;code&gt;NTFS&lt;/code&gt;，Linux：EXT3|4、&lt;code&gt;XFS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linux现在基本上都是选择&lt;code&gt;XFS&lt;/code&gt;，如果是&lt;code&gt;EXT3&lt;/code&gt;、&lt;code&gt;EXT4&lt;/code&gt;还需要设置一下：&lt;code&gt;/etc/fstab&lt;/code&gt;（&lt;strong&gt;慎重&lt;/strong&gt;）&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;/dev/sda1/ext4 noatime,nodiratime,data=writeback 1 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：&lt;code&gt;noatime&lt;/code&gt;表示不记录访问时间，&lt;code&gt;nodiratime&lt;/code&gt;不记录目录的访问时间（可以减少一些写的操作）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;不同的日志策略：&lt;code&gt;data=[wtiteback|ordered|journal]&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;writeback：只有原数据写入日志，原数据写入和数据写入并不是同步的（最快）PS：Innodb有自己的事务日志，所以是最好的选择&lt;/li&gt;
&lt;li&gt;ordered：只会记录原数据，但提供了一些一致性的保证，在写原数据之前会先写数据，使他们保持一致（比writeback慢但更安全）&lt;/li&gt;
&lt;li&gt;journal：提供了原子日志的一种行为，在数据写入到最终位置之前，将记录到日志中（最慢，对Innodb来说是没有必要）&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;课后拓展：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;TPS、并发用户数、吞吐量关系
https://www.cnblogs.com/zhengah/p/4532156.html

针对Mysql所在linux服务器的系统优化参数
https://blog.csdn.net/qq_40999403/article/details/80666102

网络优化之net.ipv4.tcp_tw_recycle参数
https://blog.csdn.net/chengm8/article/details/51668992

linux socket 缓存: core rmem_default rmem_max
https://blog.csdn.net/penzchan/article/details/41682411

Linux上的free命令详解、swap机制
http://www.cnblogs.com/xiaojianblogs/p/6254535.html

磁盘IO过高时的处理办法
https://www.cnblogs.com/wjoyxt/p/4808024.html

文件系统对性能的影响
https://blog.csdn.net/qq_30353203/article/details/78197870&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mysql配置参数&quot;&gt;1.6.3.MySQL配置参数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;建议：优先从数据库设计和SQL优化着手，然后才是配置优化和存储引擎的选择，最后才是硬件提升&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;设计案例：&lt;code&gt;列太多&lt;/code&gt;不行，&lt;code&gt;关联太多&lt;/code&gt;也不行（10个以内），不恰当的&lt;code&gt;分区表&lt;/code&gt;，使用了外键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分区表：一个服务器下，逻辑上还是一个表，物理存储上分成了多个表（&lt;a href=&quot;https://www.cnblogs.com/dunitian/p/6078512.html&quot; target=&quot;_blank&quot;&gt;类似于SQLServer的水平分库&lt;/a&gt;）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PS：分库分表：物理和逻辑上都拆分成多个表了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前讲环境的时候简单说了下最基础的&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[mysqld]
# 独立表空间: 每一个表都有一个.frm表描述文件，还有一个.ibd文件
innodb_file_per_table=on
# 不对连接进行DNS解析(省时)
skip_name_resolve=on
# 配置sql_mode
sql_mode='strict_trans_tables'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后说&lt;code&gt;SQL_Mode&lt;/code&gt;的时候简单说了下&lt;code&gt;全局参数&lt;/code&gt;和&lt;code&gt;会话参数&lt;/code&gt;的设置方法：&lt;a href=&quot;https://www.cnblogs.com/dotnetcrazy/p/10374091.html&quot; target=&quot;_blank&quot;&gt;MySQL的SQL_Mode修改小计&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全局参数设置：&lt;code&gt;set global 参数名=参数值;&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;只对新会话有效，重启后失效&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会话参数设置：&lt;code&gt;set [session] 参数名=参数值&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;只对当前会话有效，其他会话不影响&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这边继续说下其他几个&lt;strong&gt;影响较大&lt;/strong&gt;的配置参数：（&lt;strong&gt;对于开发人员来说，简单了解即可，这个是DBA的事情了&lt;/strong&gt;）&lt;/p&gt;
&lt;h4 id=&quot;安全相关配置&quot;&gt;1.安全相关配置&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;expire_logs_days&lt;/code&gt;：自动清理binlog
&lt;ul&gt;&lt;li&gt;PS：一般最少保存7天（具体根据业务来）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;max_allowed_packet&lt;/code&gt;：配置MySQL接收包的大小&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;PS：默认太小。如果配置了主从，需要配置成一样大（防止丢包）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;skip_name_resolve&lt;/code&gt;：禁用DNS查找&lt;/strong&gt;（这个我们之前说过了，主要是提速）
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PS：如果启用了，那么进行用户授权时，只能通过&lt;code&gt;ip&lt;/code&gt;或者&lt;code&gt;ip段&lt;/code&gt;或者&lt;code&gt;本机host出现过的域名&lt;/code&gt;进行授权&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;用&lt;code&gt;*&lt;/code&gt;的是没影响的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sysdata_is_now&lt;/code&gt;：&lt;strong&gt;保证sysdate()返回确定性日期&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;PS：如果主从使用了binlog的&lt;code&gt;statement&lt;/code&gt;模式，sysdata的结果会不一样，最后导致数据不一致
&lt;ul&gt;&lt;li&gt;类似的问题还有很多，eg：获取最后一次id的时候（&lt;code&gt;last_insert_id()&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;扩：现在MySQL有了&lt;code&gt;Mixed&lt;/code&gt;模式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_only&lt;/code&gt;：一般用户只能读数据，只有root用户可以写：
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PS：推荐在从库中开启，这样就只接受从主库中的写操作，其它只读&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;从库授权的时候不要授予超级管理员的权限，不然这个参数相当于废了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip_slave_start&lt;/code&gt;：&lt;strong&gt;禁用从库(&lt;code&gt;Slave&lt;/code&gt;)自动恢复&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;MySQL在重启后会自动启用复制，这个可以禁止&lt;/li&gt;
&lt;li&gt;PS：不安全的崩溃后，复制过去的数据可能也是不安全的（手动启动更合适）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sql_mode&lt;/code&gt;：设置MySQL的SQL模式&lt;/strong&gt;（这个上次说过，默认是宽松的检测，这边再补充几个）
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;strict_trans_tables&lt;/code&gt;：对所有支持事物类型的表做严格约束&lt;/strong&gt;：
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;最常见&lt;/strong&gt;，主要对事物型的存储引擎生效，其他的没效果&lt;/li&gt;
&lt;li&gt;PS：如果插入数据不符合规范，则中断当前操作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;no_engine_subtitution&lt;/code&gt;：建表的时候指定不可用存储引擎会报错&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;only_full_group_by&lt;/code&gt;&lt;/strong&gt;：检验&lt;code&gt;group by&lt;/code&gt;语句的合法性
&lt;ul&gt;&lt;li&gt;要求在在分组查询语句中，把所有没有使用聚合函数的列，列出来&lt;/li&gt;
&lt;li&gt;eg：&lt;code&gt;select count(url),name from file_records group by url;&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;使用了name字段，name不是聚合函数，那必须在group by中写一下&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ansi_quotes&lt;/code&gt;&lt;/strong&gt;：不允许使用双引号来包含字符串
&lt;ul&gt;&lt;li&gt;PS：防止数据库迁移的时候出错&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PS：生存环境下最好不要修改，容易报错对业务产生影响（严格变宽松没事）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;PS：一般&lt;code&gt;SQL_Mode&lt;/code&gt;是测试环境相对严格（&lt;code&gt;strict_trans_tables,only_full_group_by,no_engine_subtitution,ansi_quotes&lt;/code&gt;），线上相对宽松（&lt;code&gt;strict_trans_tables&lt;/code&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充说下&lt;code&gt;sysdate()&lt;/code&gt;和&lt;code&gt;now()&lt;/code&gt;的区别:&lt;/strong&gt;（看个案例就懂了）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;PS：对于一个语句中调用多个函数中&lt;code&gt;now()&lt;/code&gt;返回的值是&lt;strong&gt;执行时刻的时间&lt;/strong&gt;，而&lt;code&gt;sysdate()&lt;/code&gt;返回的是&lt;strong&gt;调用该函数的时间&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;MariaDB [(none)]&amp;gt; select sysdate(),sleep(2),sysdate();
+---------------------+----------+---------------------+
| sysdate()        | sleep(2) | sysdate()        |
+---------------------+----------+---------------------+
| 2019-03-28 09:09:29 |     0 | 2019-03-28 09:09:31  |
+---------------------+----------+---------------------+
1 row in set (2.001 sec)

MariaDB [(none)]&amp;gt; select now(),sleep(2),now();
+---------------------+----------+---------------------+
| now()           | sleep(2) | now()          |
+---------------------+----------+---------------------+
| 2019-03-28 09:09:33 |     0 | 2019-03-28 09:09:33  |
+---------------------+----------+---------------------+
1 row in set (2.000 sec)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;内存相关&quot;&gt;2.内存相关&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;sort_buffer_size&lt;/code&gt;：每个会话使用的排序缓冲区大小&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;PS：每个连接都分配这么多eg：1M，100个连接==&amp;gt;100M（默认是全部）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;join_buffer_size&lt;/code&gt;：每个会话使用的表连接缓冲区大小&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;PS：给每个join的表都分配这么大，eg：1M，join了10个表==&amp;gt;10M&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;binlog_cache_size&lt;/code&gt;：每个会话未提交事物的缓冲区大小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;read_rnd_buffer_size&lt;/code&gt;：设置索引缓冲区大小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;read_buffer_size&lt;/code&gt;：对MyISAM全表扫描时缓冲池大小&lt;/strong&gt;（一般都是4k的倍数）
&lt;ul&gt;&lt;li&gt;PS：对临时表操作的时候可能会用到&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;read_buffer_size&lt;/code&gt;的扩充说明：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;现在基本上都是Innodb存储引擎了，大部分的MyISAM的配置就不用管了，但是这个还是需要配置下的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引入下&lt;strong&gt;临时表知识扩展&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;系统使用临时表：
&lt;ul&gt;&lt;li&gt;不超过16M：系统会使用&lt;code&gt;Memory&lt;/code&gt;表&lt;/li&gt;
&lt;li&gt;超过限制：使用&lt;code&gt;MyISAM&lt;/code&gt;表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自己建的临时表：（可以使用任意存储引擎）
&lt;ul&gt;&lt;li&gt;&lt;code&gt;create temporary table tb_name(列名 类型 类型修饰符,...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;PS：现在知道为啥配置&lt;code&gt;read_buffer_size&lt;/code&gt;了吧（系统使用临时表的时候，可能会使用&lt;code&gt;MyISAM&lt;/code&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;io相关参数&quot;&gt;3.IO相关参数&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;主要看看&lt;code&gt;Innodb&lt;/code&gt;的&lt;code&gt;IO&lt;/code&gt;相关配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事物日志：（总大小:&lt;code&gt;Innodb_log_file_size * Innodb_log_files_in_group&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;事物日志大小：&lt;code&gt;Innodb_log_file_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事物日志个数：&lt;code&gt;Innodb_log_files_in_group&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;日志缓冲区大小：&lt;code&gt;Innodb_log_buffer_size&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;一般日志先写到缓冲区中，再刷新到磁盘（一般32M~128M就够了）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;知识扩展：&lt;code&gt;redo Log&lt;/code&gt;内存中缓冲区的大小：(字节为单位)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;show variables like 'innodb_log_buffer_size';&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;PS：以字节为单位，每隔1s就会把数据存储到磁盘上&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show variables like 'innodb_log_files_in_group';&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;PS：有几个就产生几个&lt;code&gt;ib_logfile&lt;/code&gt;文件（默认是2）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;日志刷新频率：&lt;code&gt;Innodb_flush_log_at_trx_commit&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;0：每秒进行一次日志写入缓存，并刷新日志到磁盘（最多丢失1s）&lt;/li&gt;
&lt;li&gt;1：每次交执事物就把日志写入缓存，并刷新日志到磁盘（&lt;strong&gt;默认&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;2：每次事物提交就把日志写入缓存，每秒刷新日志到磁盘（&lt;strong&gt;推荐&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;刷新方式：&lt;code&gt;Innodb_flush_method=O_DIRECT&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;关闭操作系统缓存（避免了操作系统和Innodb双重缓存）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如何使用表空间：&lt;code&gt;Innodb_file_per_table=1&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;为每个innodb建立一个单独的表空间（这个基本上已经成为通用配置了）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是否使用双写缓存：&lt;code&gt;Innodb_doublewrite=1&lt;/code&gt;（避免发生页数据损坏）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;默认是开启的，如果出现写瓶颈或者不在意一些数据丢失可以不开启（开启后性能↑↑）&lt;/li&gt;
&lt;li&gt;查看是否开启：&lt;code&gt;show variables like '%double%';&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;设置innodb缓冲池大小：&lt;code&gt;innodb_buffer_pool_size&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5.9285714285714&quot;&gt;
&lt;p&gt;如果都是innodb存储引擎，这个参数的设置可以这样来算：（&lt;strong&gt;一般都是内存的&lt;code&gt;75%&lt;/code&gt;&lt;/strong&gt;）&lt;br/&gt;查看命令：&lt;code&gt;show global variables like 'innodb_buffer_pool_size';&lt;/code&gt;&lt;br/&gt;&lt;strong&gt;PS：缓存数据和索引（直接决定了innodb性能）&lt;/strong&gt; 课后拓展：&lt;a href=&quot;https://www.cnblogs.com/wanbin/p/9530833.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/wanbin/p/9530833.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;innodb缓存池实例的个数：&lt;code&gt;innodb_buffer_pool_instances&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;PS：主要目的为了减少资源锁增加并发。&lt;code&gt;每个实例的大小=总大小/实例的个数&lt;/code&gt;&lt;br/&gt;一般来说，每个实例大小不能小于1G，而且个数不超过8个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;其他服务器参数&quot;&gt;4.其他服务器参数&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;sync_binlog&lt;/code&gt;：控制MySQL如何像磁盘中刷新binlog&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;默认是0，MySQL不会主动把缓存存储到磁盘，而是靠操作系统&lt;/li&gt;
&lt;li&gt;PS：为了数据安全，建议主库设置为1（效率也容易降低）
&lt;ul&gt;&lt;li&gt;还是那句话：一般不去管，具体看业务&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;控制内存临时表大小：&lt;code&gt;tmp_table_size&lt;/code&gt; and &lt;code&gt;max_heap_table_size&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;PS：建议保持两个参数一致&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;max_connections&lt;/code&gt;：设置最大连接数&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;默认是100，可以根据环境调节，&lt;strong&gt;太大可能会导致内存溢出&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Sleep&lt;/code&gt;等待时间&lt;/strong&gt;：一般设置为相同值（通过连接参数区分是否是交互连接）
&lt;ul&gt;&lt;li&gt;&lt;code&gt;interactive_timeout&lt;/code&gt;：设置交互连接的timeout时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait_timeout&lt;/code&gt;：设置非交互连接的timeout时间&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;扩展工具pt-config-diff&quot;&gt;扩展工具：&lt;code&gt;pt-config-diff&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;使用参考：&lt;code&gt;pt-config-diff u=root,p=pass,h=localhost /etc/my.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;eg：比较配置文件和服务器配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pt-config-diff /etc/my.cnf  h=localhost --user=root --password=pass
3 config differences
Variable                  /etc/my.cnf mariadb2
========================= =========== ========
max_connect_errors        2           100
rpl_semi_sync_master_e... 1           OFF
server_id                 101         102&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;课后拓展：&lt;a href=&quot;https://www.cndba.cn/leo1990/article/2789&quot; class=&quot;uri&quot;&gt;https://www.cndba.cn/leo1990/article/2789&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;扩展常见存储引擎&quot;&gt;扩展：常见存储引擎&lt;/h3&gt;
&lt;p&gt;常见存储引擎：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;MyISAM：不支持事物，表级锁
&lt;ul&gt;&lt;li&gt;索引存储在内存中，数据放入磁盘&lt;/li&gt;
&lt;li&gt;文件后缀：&lt;code&gt;frm、MYD、MYI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Innodb&lt;/code&gt;&lt;/strong&gt;：事物级存储引擎，支持行级锁和事物ACID特性
&lt;ul&gt;&lt;li&gt;同时在内存中缓存索引和数据&lt;/li&gt;
&lt;li&gt;文件后缀：&lt;code&gt;frm、ibd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Memory&lt;/code&gt;：表结构保存在磁盘文件中，表内容存储在内存中
&lt;ul&gt;&lt;li&gt;Hash索引、B-Tree索引&lt;/li&gt;
&lt;li&gt;PS：容易丢失数据（重启后数据丢失，表结构依旧存在）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CSV&lt;/code&gt;：一般都是作为中间表
&lt;ul&gt;&lt;li&gt;以文本方式存储在文件中，&lt;strong&gt;不适合大表&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;frm（表结构）、CSV（表内容）、CSM（元数据，eg：表状态、数据量）&lt;/li&gt;
&lt;li&gt;PS：不支持索引（engine=csv），所有列不能为Null&lt;/li&gt;
&lt;li&gt;详细可以查看上次写的文章：&lt;a href=&quot;https://www.cnblogs.com/dotnetcrazy/p/10481483.html&quot; target=&quot;_blank&quot;&gt;小计：协同办公衍生出的需求&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Archive：数据归档（压缩）
&lt;ul&gt;&lt;li&gt;文件：&lt;code&gt;.frm&lt;/code&gt;(存储表结构)、&lt;code&gt;.arz&lt;/code&gt;(存储数据)&lt;/li&gt;
&lt;li&gt;只支持&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;select&lt;/code&gt;操作&lt;/li&gt;
&lt;li&gt;只允许在自增ID列上加上索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;适合场景：日志类&lt;/code&gt;（省空间）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Federated&lt;/em&gt;：建立远程连接表（性能不怎样，默认禁止）
&lt;ul&gt;&lt;li&gt;本地不存储数据（数据全部在远程服务器上）&lt;/li&gt;
&lt;li&gt;本地需要保存表结构和远程服务器的连接信息&lt;/li&gt;
&lt;li&gt;PS：类似于SQLServer的链接服务器&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;逆天点评：除非你有100%的理由，否则全选&lt;code&gt;innodb&lt;/code&gt;，特别不建议混合使用&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;memory存储引擎&quot;&gt;Memory存储引擎&lt;/h4&gt;
&lt;p&gt;Memory存储引擎：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;支持&lt;code&gt;Hash&lt;/code&gt;和&lt;code&gt;BTree&lt;/code&gt;两种索引
&lt;ul&gt;&lt;li&gt;Hash索引：等值查找（默认）&lt;/li&gt;
&lt;li&gt;Btree索引：范围查找
&lt;ul&gt;&lt;li&gt;&lt;code&gt;create index ix_name using btree on tb_name(字段,...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PS：不同场景下的不同选择，性能差异很大&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;所有字段类型都等同于&lt;strong&gt;固定长度&lt;/strong&gt;，且不支持&lt;code&gt;Text&lt;/code&gt;和&lt;code&gt;Blog&lt;/code&gt;等大字段类型
&lt;ul&gt;&lt;li&gt;eg：&lt;code&gt;varchar(100)&lt;/code&gt;==等价于==&amp;gt; &lt;code&gt;char(100)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;存储引擎使用表级锁
&lt;ul&gt;&lt;li&gt;PS：性能不见得比innodb好&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大小由&lt;code&gt;max_heap_table_size&lt;/code&gt;决定（默认16M）
&lt;ul&gt;&lt;li&gt;PS：如果想存大点，就得改参数（对已经存在的表不生效，需要重建才行）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;常用场景（&lt;code&gt;数据易丢失，要保证数据可再生&lt;/code&gt;）
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;缓存周期性聚合数据的结果&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用于查找或者映射的表（eg：邮编和地区的对应表）&lt;/li&gt;
&lt;li&gt;保存数据分析中产生的&lt;strong&gt;中间表&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;PS：现在基本上都是redis了，如果不使用redis的小项目可以考虑（eg：官网、博客...）&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;文章拓展：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;OLAP、OLTP的介绍和比较
https://www.cnblogs.com/hhandbibi/p/7118740.html

now()与sysdate()
http://blog.itpub.net/22664653/viewspace-752576/
https://stackoverflow.com/questions/24137752/difference-between-now-sysdate-current-date-in-mysql

binlog三种模式的区别（row，statement，mixed）
https://blog.csdn.net/keda8997110/article/details/50895171/

MySQL-重做日志 redo log -原理
https://www.cnblogs.com/cuisi/p/6525077.html

详细分析MySQL事务日志(redo log和undo log)
https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html

innodb_flush_method的性能差异与File I/O
https://blog.csdn.net/melody_mr/article/details/48626685

InnoDB关键特性之double write
https://www.cnblogs.com/geaozhang/p/7241744.html
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h3 id=&quot;存储引擎的扩展&quot;&gt;存储引擎的扩展&lt;/h3&gt;
&lt;h4 id=&quot;简单回顾&quot;&gt;1.简单回顾&lt;/h4&gt;
&lt;p&gt;上节在最后的时候说了下存储引擎，这边简单回顾下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;MyISAM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;MySQL5.6以前的默认存储引擎&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;用CSV格式来存储数据（一般当中间表）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;&lt;code&gt;Archive&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;只能查询和添加数据（一般记录日志用）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;Memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;数据只存储在内存中（容易丢失）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;&lt;code&gt;innodb&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;支持&lt;/strong&gt;（行级锁）&lt;/td&gt;
&lt;td&gt;现在基本上都使用这个&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;NDB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;支持&lt;/strong&gt;（行级锁）&lt;/td&gt;
&lt;td&gt;MySQL集群才使用（内存型，数据会持久化一份）&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;补充说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;Archive&lt;/code&gt;存储引擎的数据会用&lt;code&gt;zlib&lt;/code&gt;来&lt;strong&gt;压缩&lt;/strong&gt;，而且&lt;strong&gt;只支持在自增ID上添加索引&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NDB&lt;/code&gt;存储引擎的数据存储在磁盘中（热数据存储在内存中），支持Ttree索引和集群
&lt;ul&gt;&lt;li&gt;场景：数据需要完全同步（这些后面会继续说的）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;常见场景&quot;&gt;2.常见场景&lt;/h4&gt;
&lt;p&gt;提一个场景：&lt;strong&gt;&lt;code&gt;innodb&lt;/code&gt;表无法在线修改表结构的时候怎么解决？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先看下&lt;code&gt;Innodb不支持在线修改表结构&lt;/code&gt;都有哪些情况：（主要从性能方面考虑）&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;第一次创建&lt;code&gt;全文索引&lt;/code&gt;和添加&lt;code&gt;空间索引&lt;/code&gt;（&lt;code&gt;MySQL5.6&lt;/code&gt;以前版本不支持）
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;全文索引&lt;/strong&gt;：&lt;code&gt;create fulltext index name on table(列,...);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;空间索引：&lt;code&gt;alter table geom add spatial index(g);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;删除主键或者添加自增列
&lt;ul&gt;&lt;li&gt;PS：innodb存储就是按照主键进行顺序存储的（这时候需要重新排序）&lt;/li&gt;
&lt;li&gt;删除主键：&lt;code&gt;alter table 表名 drop primary key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加自增列：&lt;code&gt;alter table 表名 add column id int auto_increment primary key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;修改列类型、修改表字符集
&lt;ul&gt;&lt;li&gt;修改列类型：&lt;code&gt;alter table 表名 modify 列名 类型 类型修饰符&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改字符集：&lt;code&gt;alter table 表名 character set=utf8mb4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;PS：DDL不能并发执行&lt;/strong&gt;（表级锁）&lt;strong&gt;长时间的DDL操作会导致主从不一致&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;DDL没法进行资源限制，表数据多了容易占用大量存储IO空间（空间不够就容易执行失败）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;解决方案&quot;&gt;3.解决方案&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;安装：&lt;code&gt;yum install percona-toolkit&lt;/code&gt; or &lt;code&gt;apt-get install percona-toolkit&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PS：离线包：&lt;code&gt;https://www.percona.com/downloads/percona-toolkit/LATEST/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令：&lt;code&gt;pt-online-schema-change 选项 D=数据库,t=表名,u=用户名,p=密码&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;原理：先创建一个类型修改完的表，然后把旧表数据copy过去，然后删除旧表并重命名新表&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;查看帮助文档：&lt;code&gt;pt-online-schema-change --help | more&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0.79787234042553&quot;&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html&quot; class=&quot;uri&quot;&gt;https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PS：一般就&lt;code&gt;--alter&lt;/code&gt;和&lt;code&gt;--charset&lt;/code&gt;用的比较多&lt;/strong&gt;（&lt;code&gt;--execute&lt;/code&gt;代表执行）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用：&lt;code&gt;pt-online-schema-change --alter &quot;DDL语句&quot; --execute D=数据库,t=表名,u=用户名,p=密码&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;eg：添加新列：&lt;code&gt;pt-online-schema-change --alter &quot;add 列名 类型&quot; --execute D=数据库,t=表名,u=用户名,p=密码&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;知识回顾&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;添加字段：add
&lt;ul&gt;&lt;li&gt;&lt;code&gt;alter table tb_name add 列名 数据类型 修饰符 [first | after 列名];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PS：SQLServer没有&lt;code&gt;[first | after 列名]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;修改字段：alter、change、modify
&lt;ul&gt;&lt;li&gt;修改字段名：&lt;code&gt;alter table tb_name change 旧列名 新列名 类型 类型修饰符&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改字段类型：&lt;code&gt;alter table tb_name modify 列名 类型 类型修饰符&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加默认值：&lt;code&gt;alter table tb_name alter 列名 set default df_value&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;删除字段：drop
&lt;ul&gt;&lt;li&gt;&lt;code&gt;alter table tb_name drop 字段名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h4 id=&quot;innodb专栏&quot;&gt;4.InnoDB专栏&lt;/h4&gt;
&lt;p&gt;写在前面的概念：&lt;strong&gt;排它锁（别名：独占锁、写锁）、共享锁（别名：读锁）&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;innodb是如何实现事物的&quot;&gt;4.1.innoDB是如何实现事物的？&lt;/h5&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;事物4大特性：A（原子性）C（一致性）I（隔离性）D（持久性）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;innodb事务日志主要就是&lt;code&gt;redo log&lt;/code&gt;（重做日志）和&lt;code&gt;undo log&lt;/code&gt;（回滚日志）&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;原子性(A)&lt;/td&gt;
&lt;td&gt;回滚日志(&lt;code&gt;undo log&lt;/code&gt;)：用于记录数据&lt;strong&gt;修改前&lt;/strong&gt;的状态&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;一致性(C)&lt;/td&gt;
&lt;td&gt;重做日志(&lt;code&gt;redo log&lt;/code&gt;)：用于记录数据&lt;strong&gt;修改后&lt;/strong&gt;的状态&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;隔离性(I)&lt;/td&gt;
&lt;td&gt;锁(&lt;code&gt;lock&lt;/code&gt;)：用于资源隔离（&lt;strong&gt;共享锁&lt;/strong&gt; + &lt;strong&gt;排他锁&lt;/strong&gt;）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;持久性(D)&lt;/td&gt;
&lt;td&gt;重做日志(&lt;code&gt;redo log&lt;/code&gt;) + 回滚日志(&lt;code&gt;undo log&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;我画个转账案例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201905/1127869-20190505224339502-228772932.png&quot; alt=&quot;05/05/1.innodb事物实现.png&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;innodb读操作是否会阻塞写操作&quot;&gt;4.2.innodb&lt;code&gt;读&lt;/code&gt;操作是否会阻塞&lt;code&gt;写&lt;/code&gt;操作？&lt;/h5&gt;
&lt;p&gt;一般情况下：&lt;code&gt;查询&lt;/code&gt;需要对资源添加&lt;strong&gt;共享锁&lt;/strong&gt;（读锁） | &lt;code&gt;修改&lt;/code&gt;需要对资源添加&lt;strong&gt;排它锁&lt;/strong&gt;（写锁）&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;写锁&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不兼容&lt;/td&gt;
&lt;td&gt;不兼容&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;读锁&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不兼容&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;兼容&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;PS：共享锁和共享锁之间是可以共存的（读的多并发）&lt;strong&gt;理论上讲读操作和写操作应该相互阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;innodb&lt;/code&gt;看起来却仿佛打破了这个常规，看个案例：&lt;/p&gt;
&lt;p&gt;1.启动一个事物，但是不提交&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201903/1127869-20190306095710937-1174442755.png&quot; alt=&quot;03/03/1.1.事物不提交.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.在另一个连接中查询&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201903/1127869-20190306095741612-1352578942.png&quot; alt=&quot;03/03/1.2.另一个连接查询的结果是undolog中的记录.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;PS：理论上独占锁没提交时是不能读操作的，&lt;strong&gt;但&lt;code&gt;innodb&lt;/code&gt;做了优化，会查询&lt;code&gt;undo log&lt;/code&gt;（未修改前的数据）中的记录&lt;/strong&gt;来提高并发性&lt;/p&gt;
&lt;p&gt;3.提交事物后再查询，这时候就看到更新后的数据了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201903/1127869-20190306095826759-1724313709.png&quot; alt=&quot;03/03/1.3.更新了.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS：这个就是innodb的&lt;code&gt;MVCC&lt;/code&gt;（多版本并发控制）&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;知识拓展：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;【推荐】Mysql的InnoDB事务多版本并发控制如何实现（MVCC）

https://www.cnblogs.com/aspirant/p/6920987.html

https://blog.csdn.net/u013007900/article/details/78641913

https://www.cnblogs.com/dongqingswt/p/3460440.html

https://www.jianshu.com/p/a3d49f7507ff

https://www.jianshu.com/p/a03e15e82121

https://www.jianshu.com/p/5a9c1e487ddd

基于mysql全文索引的深入理解
https://www.cnblogs.com/dreamworlds/p/5462018.html

【推荐】MySQL中的全文索引(InnoDB存储引擎)
https://www.jianshu.com/p/645402711dac

innodb的存储结构
https://www.cnblogs.com/janehoo/p/6202240.html

深入浅出空间索引：为什么需要空间索引
https://www.cnblogs.com/mafeng/p/7909426.html

常见的空间索引方法
https://blog.csdn.net/Amesteur/article/details/80392679

【推荐】pt-online-schema-change解读
https://www.cnblogs.com/xiaoyanger/p/6043986.html

pt-online-schema-change使用说明、限制与比较
https://www.cnblogs.com/erisen/p/5971416.html

pt-online-schema-change使用注意要点
https://www.jianshu.com/p/84af8b8f040b

详细分析MySQL事务日志(redo log和undo log)
https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h3 id=&quot;mysql权限相关&quot;&gt;1.6.4.MySQL权限相关&lt;/h3&gt;
&lt;h4 id=&quot;账号权限设置&quot;&gt;1.账号权限设置&lt;/h4&gt;
&lt;p&gt;之前在SQL环境篇的时候简单提了一下权限设置（&lt;a href=&quot;http://www.cnblogs.com/dotnetcrazy/p/10810798.html#3.远程访问&quot;&gt;点我回顾&lt;/a&gt;），现在再说说常用的权限知识：&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/dotnetcrazy/p/9887708.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/dotnetcrazy/p/9887708.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;创建账号&quot;&gt;1.2.创建账号&lt;/h5&gt;
&lt;p&gt;用户组成格式：&lt;code&gt;用户名@可访问控制的列表&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;用户名：一般16字节
&lt;ul&gt;&lt;li&gt;以&lt;code&gt;UTF-8&lt;/code&gt;为例：&lt;strong&gt;1英文字符 = 1字节，1中文 = 3字节&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;可访问控制列表：
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;%&lt;/code&gt;：所有ip都可访问&lt;/strong&gt;（一般都这么干的，数据比较重要的推荐使用第二种）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;192.168.1.%&lt;/code&gt;&lt;/strong&gt;：&lt;code&gt;192.168.1&lt;/code&gt;网段的ip都可以访问
&lt;ul&gt;&lt;li&gt;这个不包含&lt;code&gt;localhost&lt;/code&gt;（数据库本地服务器不能访问）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localhost&lt;/code&gt;：只能通过数据库服务器进行本地访问&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;1.创建命令：&lt;code&gt;create user@ip identified by '密码';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PS：可以使用&lt;code&gt;\h create user&lt;/code&gt;来查看帮助文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201905/1127869-20190505080238146-567441917.png&quot; alt=&quot;05/05/1.createuser.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.查看当前用户：&lt;code&gt;select user();&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PS：&lt;code&gt;MariaDB&lt;/code&gt;&lt;strong&gt;查看当前数据库有哪些用户&lt;/strong&gt;：&lt;code&gt;select user,password,host from mysql.user;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;MySQL：&lt;code&gt;select user,authentication,host from mysql.user;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3.修改密码：&lt;code&gt;alter user user() identified by '密码';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.另类思路：我一般都是直接在表中插入数据&lt;/strong&gt;（MySQL是&lt;code&gt;authentication_string&lt;/code&gt;）&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;eg：&lt;code&gt;insert into mysql.user(user,host,password) values(&quot;用户名&quot;,&quot;%&quot;,password(&quot;密码&quot;));&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PS：修改密码：&lt;code&gt;update mysql.user set&lt;/code&gt;password&lt;code&gt;=password('新密码') where user='用户名';&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;知识拓展：&lt;a href=&quot;https://blog.csdn.net/vurtne_ye/article/details/26514499/&quot;&gt;ERROR 1045 (28000): Access denied for user 'mysql'@'localhost'&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;常用权限&quot;&gt;1.3.常用权限&lt;/h5&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;create user&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建新用户权限&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;grant option&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;为用户设置权限&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;super&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置服务器权限&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;DDL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;create&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;创建数据库和表&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;alter&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;修改表结构权限&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;index&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;创建和删除索引&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除数据库和表&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;DML&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;select&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;查询表数据权限&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;插入表数据权限&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;update&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;删除表数据权限&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可执行存储过程&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除表数据权限&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;补充说明：&lt;code&gt;super&lt;/code&gt;：如设置全局变量等系统语句，一般DBA会有这个权限&lt;/p&gt;
&lt;p&gt;PS：MariaDB查看数据库支持哪些权限：&lt;strong&gt;&lt;code&gt;show privileges;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/library/show-privileges/&quot; class=&quot;uri&quot;&gt;https://mariadb.com/kb/en/library/show-privileges/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;用户授权&quot;&gt;1.4.用户授权&lt;/h5&gt;
&lt;p&gt;权限这个东西大家都懂，一般都是最小权限&lt;/p&gt;
&lt;p&gt;授权命令如下：&lt;strong&gt;&lt;code&gt;grant 权限列表 on 数据库.表 to 用户名@ip&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;PS：开发的时候可能为了省事这么设置：&lt;strong&gt;&lt;code&gt;grant all [privileges] on 数据库.* to 用户名@'%';&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正规点一般这么设置：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;线上：&lt;code&gt;grant select,insert,update on 数据库.* to 用户名@ip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发：&lt;code&gt;grant select,insert,update,index,alter,create on 数据库.* to 用户名@ip段&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;PS：查看当前用户权限：&lt;code&gt;show grants for 用户名;&lt;/code&gt;，刷新数据库权限：&lt;code&gt;flush privileges;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;以前可以在授权的时候直接创建用户（加一段&lt;code&gt;identified by '密码'&lt;/code&gt;），新版本好像分开了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;权限收回&quot;&gt;1.5.权限收回&lt;/h5&gt;
&lt;p&gt;命令如下：&lt;strong&gt;&lt;code&gt;revoke 权限列表 on 数据库.表 from 用户名@ip&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;eg：&lt;code&gt;revoke create,alter,delete from django.* from dnt@'%'&lt;/code&gt;（是&lt;code&gt;from&lt;/code&gt;而不是&lt;code&gt;on&lt;/code&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;数据库账号安全&quot;&gt;2.数据库账号安全&lt;/h4&gt;
&lt;p&gt;这个了解即可，我也是刚从DBA朋友那边了解到的知识（&lt;code&gt;MySQL8.0&lt;/code&gt;），基本上用不到的，简单罗列下规范：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;只给最小的权限（线上权限基本上都是给最低的(防黑客)）&lt;/li&gt;
&lt;li&gt;密码强度限制（MySQL高版本默认有限制，主要针对MariaDB）&lt;/li&gt;
&lt;li&gt;密码有期限（谨慎使用，不推荐线上用户设置有效期）&lt;/li&gt;
&lt;li&gt;历史密码不可用（不能重复使用旧密码）
&lt;ul&gt;&lt;li&gt;PS：现在用BAT的产品来修改密码基本上都是不让使用上次的密码&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;设置前三次使用过的密码不能再使用：&lt;code&gt;create user@'%'identified by '密码' password history 3;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PS：&lt;strong&gt;设置用户密码过期：&lt;code&gt;alter user 用户名@ip password expire;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;迁移问题&quot;&gt;3.迁移问题&lt;/h4&gt;
&lt;p&gt;经典问题：&lt;strong&gt;如何从一个实例迁移数据库账号到另一个实例？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;eg：老集群 &amp;gt; 新集群&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://www.percona.com/doc/percona-toolkit/LATEST/pt-show-grants.html&quot; class=&quot;uri&quot;&gt;https://www.percona.com/doc/percona-toolkit/LATEST/pt-show-grants.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;版本相同&quot;&gt;3.1.版本相同&lt;/h5&gt;
&lt;p&gt;数据库备份下，然后在新环境中恢复&lt;/p&gt;
&lt;p&gt;然后&lt;strong&gt;导出用户创建和授权语句&lt;/strong&gt;：eg：&lt;strong&gt;&lt;code&gt;pt-show-grants -u=root,-p=密码,-h=服务器地址 -P=3306&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;4.9133858267717&quot;&gt;
&lt;p&gt;扩展文章：&lt;a href=&quot;https://www.cnblogs.com/shengdimaya/p/7093030.html&quot;&gt;pt-show-grants的使用&lt;/a&gt;（eg：&lt;code&gt;pt-show-grants --host=192.168.36.123 --port=3306 --user=root --password=密码&lt;/code&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生成的脚本大致是这样的：(&lt;strong&gt;把脚本放新服务器中执行即可&lt;/strong&gt;)&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;CREATE USER IF NOT EXISTS 'mysql.sys'@'localhost';
ALTER USER 'mysql.sys'@'localhost' IDENTIFIED WITH 'mysql_native_password' AS '*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE' REQUIRE NONE 
PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;GRANT SELECT ON `sys`.`sys_config` TO 'mysql.sys'@'localhost';
GRANT TRIGGER ON `sys`.* TO 'mysql.sys'@'localhost';
GRANT USAGE ON *.* TO 'mysql.sys'@'localhost';
-- Grants for 'root'@'%'
CREATE USER IF NOT EXISTS 'root'@'%';
ALTER USER 'root'@'%' IDENTIFIED WITH 'mysql_native_password' AS '*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9' REQUIRE NONE PASSWORD EXPI
RE DEFAULT ACCOUNT UNLOCK;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;版本不同&quot;&gt;3.2.版本不同&lt;/h5&gt;
&lt;p&gt;可以使用上面的方法，但是需要使用&lt;code&gt;mysql_upgrade&lt;/code&gt;升级下系统表（适用：&lt;strong&gt;低版本到高版本&lt;/strong&gt;）但是推荐使用&lt;strong&gt;&lt;code&gt;生成SQL脚本&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;1.3157894736842&quot;&gt;
&lt;p&gt;扩展文章：&lt;a href=&quot;https://www.cnblogs.com/zengkefu/p/5678054.html&quot; target=&quot;_blank&quot;&gt;mysql升级小结和mysql_upgrade的用途&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 05 May 2019 15:16:00 +0000</pubDate>
<dc:creator>鲲逸鹏</dc:creator>
<og:description>1.6.SQL运维篇 运维这块逆天只能说够用，并不能说擅长，所以这篇就当抛砖之用，欢迎补充和纠错 PS：再说明下 这部分的内容来源：首先这块逆天不是很擅长，所以主要是参考网上的DBA文章，之后请教了下</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dotnetcrazy/p/10810798.html</dc:identifier>
</item>
<item>
<title>F#周报2019年第18期 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/10816214.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/10816214.html</guid>
<description>[unable to retrieve full-text content]新闻 &quot;FableConf 2019开始征集提案&quot; &quot;2019理事会选举 &quot; &quot;如同DSL一般的Elmish封装器fable elmish，可以创建控制台或者终端界面&quot; &quot;介绍VS Code的远程开发&quot; &quot;F (.NET Core 2.1)开发容器&quot; &quot;SAFE开发容器定义示例&quot; &quot;Rider 20</description>
<pubDate>Sun, 05 May 2019 15:02:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>新闻 'FableConf 2019开始征集提案' '2019理事会选举 ' '如同DSL一般的Elmish封装器fable elmish，可以创建控制台或者终端界面' '介绍VS Code的远程开发</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/10816214.html</dc:identifier>
</item>
<item>
<title>Allure自动化测试报告我是这样用的 - Refain</title>
<link>http://www.cnblogs.com/longronglang/p/10816871.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/longronglang/p/10816871.html</guid>
<description>&lt;h3&gt;关于自动化测试报告：&lt;/h3&gt;
&lt;p&gt;之前用过testNG自带的测试报告、优化过reportNG的测试报告、extentreport、Zreport(大飞总原创)，这些是我之前都用过的，也是在去年雯姐和我说过Allure2这个报告不错，一直没时间，正巧最近有用到，接触下发现确实是个神器。&lt;/p&gt;
&lt;p&gt;Allure（已经有allure2了，小编用的就是allure2），生成的测试报告与上述对比，简直堪称完美！先上个测试报告的图表，给大家直观感受下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505212256044-1611021361.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;473&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505212427977-1089488211.png&quot; alt=&quot;&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面让我们一起走进Allure的世界，跟上步伐，相信我这一切并不难&lt;/p&gt;
&lt;h3&gt;一、pom文件部分&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;allure-demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;allure-demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;allure.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.10.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;allure.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aspectj.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.9.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aspectj.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;suiteXmlFile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/test/resources/suite/test-moudle/testng.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;suiteXmlFile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;selenium-server-standalone&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;selenium-server-standalone&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.9.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.qameta.allure&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;allure-testng&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${allure.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hamcrest&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hamcrest-all&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.testng&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testng&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6.14.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.qameta.allure&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;allure-java-commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.10.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.22.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;argLine&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        -javaagent:&quot;${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar&quot;
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;argLine&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;suiteXmlFiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;该文件位于工程根目录时，直接填写名字，其它位置要加上路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;suiteXmlFile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/test/resources/testng.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;suiteXmlFile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;suiteXmlFiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.aspectj&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;aspectjweaver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${aspectj.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reporting&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;excludeDefaults&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;excludeDefaults&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.qameta.allure&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;allure-maven&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.10.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reportVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${allure.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reportVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reporting&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、安装插件&lt;/h3&gt;
&lt;p&gt;在Jenkins插件管理中，搜索Allure即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505213957081-131970702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;三、安装Allure Commandline&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;安装完&lt;/span&gt;allure插件后，进入系统管理--&amp;gt;全局工具配置，&lt;span&gt;安装&lt;/span&gt;Allure Commandline&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;15&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505214358412-63720587.png&quot; alt=&quot;&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存即可&lt;/p&gt;
&lt;p&gt;此时再通过Jenkins构建并执行测试代码后，就可以看到Allure的测试报告了。以上，完成了Allure的基本配置。&lt;/p&gt;
&lt;h3&gt;四、Allure用法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、注解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我只列举一些常用的注解，其他的可以自行去官网查阅&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用例编号&lt;/span&gt;
    @TmsLink(&quot;562&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bug编号&lt;/span&gt;
    @Issue(&quot;4042&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bug严重等级,优先级，包含blocker, critical, normal, minor, trivial 几个不同的等级&lt;/span&gt;
&lt;span&gt;    @Severity(SeverityLevel.TRIVIAL)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用例描述&lt;/span&gt;
    @Description(&quot;测试一个流程，用作回归冒烟测试&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加@TmsLink， @Issue注解后，在allure report中会生成相应的链接，但是它是如何访问我们的缺陷管理系统以及用例管理系统给的呢，在官网文档有说明。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505221418332-481388668.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看文档发现，需要有一个配置文件，将我们系统域名预先设置好，再将{}的内容使用注解进行替换，这样就能访问到我们想范文的连接了。但是官方并没有说明这个配置文件的具体配置，好在官方有一些简单的小demo可供产考；&lt;/p&gt;
&lt;p&gt;这是官方的testng的demo地址https://github.com/allure-examples/allure-testng-example/tree/master/src/test/resources&lt;br/&gt;可以看到它有一个文件名叫做allure.properties&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505221624683-2031409755.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是文件的内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
allure.results.directory=target/allure-&lt;span&gt;results
allure.link.issue.pattern&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;example.org/issue/{}&lt;/span&gt;
allure.link.tms.pattern=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;example.org/tms/{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个应该是默认的输出路径，暂时未用到先不研究，将你需要访问的url替换就可以，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
allure.link.issue.pattern=http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;jira.XXX.com/browse/{}&lt;/span&gt;
allure.link.tms.pattern=http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;testlink.XXX.com/{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里需要注意一点，allure.properties的位置必须是跟你路径下的test同级否则会找不到这个文件；&lt;/p&gt;
&lt;p&gt;我用的是idea创建的maven项目&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505221803117-1899479172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最终效果如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505221829019-2046281823.gif&quot; alt=&quot;&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 2、自动截图&lt;/h3&gt;
&lt;p&gt;allure最吸引我的地方是，不用存到本地，它能将selenium的截图放到report中&lt;/p&gt;
&lt;p&gt;第一步：写一个监听类，当执行失败自动截图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.allure.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.qameta.allure.Attachment;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.OutputType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.TakesScreenshot;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.ITestResult;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.TestListenerAdapter;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TestFailListener &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; TestListenerAdapter {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onTestFailure(ITestResult result) {
        screenshot();
    }

    @Attachment(value &lt;/span&gt;= &quot;screen shot&quot;,type = &quot;image/png&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[]  screenshot(){
        &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] screenshotAs =&lt;span&gt; ((TakesScreenshot)GetDriver.driver).getScreenshotAs(OutputType.BYTES);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; screenshotAs;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二步：在测试类上，添加Listeners的注解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.allure.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; io.qameta.allure.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.By;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.Keys;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.WebDriver;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.Assert;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; org.testng.annotations.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.TimeUnit;

@Epic(&lt;/span&gt;&quot;百度查询功能测试&quot;&lt;span&gt;)
@Feature(&lt;/span&gt;&quot;百度查询功能&quot;&lt;span&gt;)
@Listeners(TestFailListener.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AllureDemo {

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; WebDriver driver;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAX_TIMEOUT_IN_SECONDS = 5&lt;span&gt;;

    @BeforeClass
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; beforeClass() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        driver &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GetDriver().getDriver();
        String url &lt;/span&gt;= &quot;https://www.baidu.com/&quot;&lt;span&gt;;
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(MAX_TIMEOUT_IN_SECONDS, TimeUnit.SECONDS);
        driver.get(url);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用例编号&lt;/span&gt;
    @TmsLink(&quot;562&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bug编号&lt;/span&gt;
    @Issue(&quot;4042&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bug严重等级,优先级，包含blocker, critical, normal, minor, trivial 几个不同的等级&lt;/span&gt;
&lt;span&gt;    @Severity(SeverityLevel.TRIVIAL)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用例描述&lt;/span&gt;
    @Description(&quot;测试一个流程，用作回归冒烟测试&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *功能块，具有相同feature或astory的用例将规整到相同模块下,执行时可用于筛选
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Story(&lt;/span&gt;&quot;查询场景-正向查询功能&quot;&lt;span&gt;)
    @Test(description &lt;/span&gt;= &quot;验证百度查询功能&quot;, dataProvider = &quot;testDemo&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testDemo(String key) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        driver.findElement(By.id(&lt;/span&gt;&quot;kw&quot;&lt;span&gt;)).clear();
        driver.findElement(By.id(&lt;/span&gt;&quot;kw&quot;&lt;span&gt;)).sendKeys(key, Keys.ENTER);
        Thread.sleep(&lt;/span&gt;3000&lt;span&gt;);
        Assert.assertEquals(driver.getTitle(), key &lt;/span&gt;+ &quot;_百度搜索&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key.equals(&quot;java&quot;&lt;span&gt;)){
            Assert.assertEquals(driver.getTitle(),&lt;/span&gt;&quot;断言失败！&quot;&lt;span&gt;);
        }
    }

    @AfterClass
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; tearDownAfterClass() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (driver != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            System.out.println(&lt;/span&gt;&quot;运行结束！&quot;&lt;span&gt;);
            driver.quit();
        }
    }

    @DataProvider(name &lt;/span&gt;= &quot;testDemo&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object[][] testDemo() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[][]{
                {&lt;/span&gt;&quot;软件测试君&quot;&lt;span&gt;},
                {&lt;/span&gt;&quot;refain 博客园&quot;&lt;span&gt;},
                {&lt;/span&gt;&quot;java&quot;&lt;span&gt;},
        };
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图效如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/718867/201905/718867-20190505224025628-530413934.png&quot; alt=&quot;&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是很nice，还不动手试一试········&lt;/p&gt;

</description>
<pubDate>Sun, 05 May 2019 14:44:00 +0000</pubDate>
<dc:creator>Refain</dc:creator>
<og:description>关于自动化测试报告： 之前用过testNG自带的测试报告、优化过reportNG的测试报告、extentreport、Zreport(大飞总原创)，这些是我之前都用过的，也是在去年雯姐和我说过Allu</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/longronglang/p/10816871.html</dc:identifier>
</item>
<item>
<title>【动态规划】多重背包问题 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/10816837.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/10816837.html</guid>
<description>&lt;h2 id=&quot;说明&quot;&gt;说明&lt;/h2&gt;
&lt;p&gt;前面已经介绍完了01背包和完全背包，今天介绍最后一种背包问题——多重背包。&lt;/p&gt;
&lt;p&gt;这个背包，听起来就很麻烦的样子。别慌，只要你理解了前面的两种背包问题，拿下多重背包简直小菜一碟。&lt;/p&gt;
&lt;p&gt;如果没有看过前两篇01背包和完全背包的文章，强烈建议先阅读一下，因为本文跟前两篇文章关联性很强。&lt;/p&gt;
&lt;h2 id=&quot;多重背包&quot;&gt;多重背包&lt;/h2&gt;
&lt;p&gt;有N种物品和一个容量为T的背包，第i种物品最多有M[i]件可用，价值为P[i]，体积为V[i]，求解：选哪些物品放入背包，可以使得这些物品的价值最大，并且体积总和不超过背包容量。&lt;/p&gt;
&lt;p&gt;对比一下完全背包，其实只是多了一个限制条件，完全背包问题中，物品可以选择任意多件，只要你装得下，装多少件都行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/05/5cced9a232122.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但多重背包就不一样了，每种物品都有指定的数量限制，所以不是你想装，就能一直装的。&lt;/p&gt;
&lt;p&gt;举个栗子：有A、B、C三种物品，相应的数量、价格和占用空间如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/05/5ccee0bee771a.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;跟完全背包一样，贪心算法在这里也不适用，我就不重复说明了，大家可以回到上一篇中看看说明。&lt;/p&gt;
&lt;h2 id=&quot;递归法&quot;&gt;递归法&lt;/h2&gt;
&lt;p&gt;还是用之前的套路，我们先来用递归把这个问题解决一次。&lt;/p&gt;
&lt;p&gt;用ks(i,t)表示前i种物品放入一个容量为t的背包获得的最大价值，那么对于第i种物品，我们有k种选择，0 &amp;lt;= k &amp;lt;= M[i] &amp;amp;&amp;amp; 0 &amp;lt;= k * V[i] &amp;lt;= t，即可以选择0、1、2...M[i]个第i种物品，所以递推表达式为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ks(i,t) = max{ks(i-1, t - V[i] * k) + P[i] * k}; （0 &amp;lt;= k &amp;lt;= M[i] &amp;amp;&amp;amp; 0 &amp;lt;= k * V[i] &amp;lt;= t）&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同时，ks(0,t)=0;ks(i,0)=0;&lt;/p&gt;
&lt;p&gt;对比一下完全背包的递推关系式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ks(i,t) = max{ks(i-1, t - V[i] * k) + P[i] * k}; （0 &amp;lt;= k * V[i] &amp;lt;= t）&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;简直一毛一样，只是k多了一个限制条件而已。&lt;/p&gt;
&lt;p&gt;使用上面的栗子，我们可以先写出递归解法：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static class MultiKnapsack {
    private static int[] P={0,2,3,4};
    private static int[] V={0,3,4,5};
    private static int[] M={0,4,3,2};
    private static int T = 15;

    @Test
    public void soleve1() {
        int result = ks(P.length - 1,T);
        System.out.println(&quot;最大价值为：&quot; + result);
    }

    private int ks(int i, int t){
        int result = 0;
        if (i == 0 || t == 0){
            // 初始条件
            result = 0;
        } else if(V[i] &amp;gt; t){
            // 装不下该珠宝
            result = ks(i-1, t);
        } else {
            // 可以装下
            // 取k个物品i，取其中使得总价值最大的k
            for (int k = 0; k &amp;lt;= M[i] &amp;amp;&amp;amp; k * V[i] &amp;lt;= t; k++){
                int tmp2 = ks(i-1, t - V[i] * k) + P[i] * k;
                if (tmp2 &amp;gt; result){
                    result = tmp2;
                }
            }
        }
        return result;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样，这里的数组P/V/M分别添加了一个元素0，是为了减少越界判断而做的简单处理，运行如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;最大价值为：11&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对比一下完全背包中的递归解法：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private int ks(int i, int t){
    int result = 0;
    if (i == 0 || t == 0){
        // 初始条件
        result = 0;
    } else if(V[i] &amp;gt; t){
        // 装不下该珠宝
        result = ks(i-1, t);
    } else {
        // 可以装下
        // 取k个物品i，取其中使得总价值最大的k
        for (int k = 0; k * V[i] &amp;lt;= t; k++){
            int tmp2 = ks(i-1, t - V[i] * k) + P[i] * k;
            if (tmp2 &amp;gt; result){
                result = tmp2;
            }
        }
    }
    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;仅仅多了一个判断条件而已，所以只要弄懂了完全背包，多重背包就不值一提了。&lt;/p&gt;
&lt;p&gt;最优化原理和无后效性的证明跟多重背包基本一致，所以就不重复证明了。&lt;/p&gt;
&lt;h2 id=&quot;动态规划&quot;&gt;动态规划&lt;/h2&gt;
&lt;p&gt;参考完全背包的动态规划解法，就很容易写出多重背包的动态规划解法。&lt;/p&gt;
&lt;h3 id=&quot;自上而下记忆法&quot;&gt;自上而下记忆法&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;ks(i,t) = max{ks(i-1, t - V[i] * k) + P[i] * k}; （0 &amp;lt;= k &amp;lt;= M[i] &amp;amp;&amp;amp; 0 &amp;lt;= k * V[i] &amp;lt;= t）&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static class MultiKnapsack {
    private static int[] P={0,2,3,4};
    private static int[] V={0,3,4,5};
    private static int[] M={0,4,3,2};
    private static int T = 15;

    private Integer[][] results = new Integer[P.length + 1][T + 1];

    @Test
    public void solve2() {
        int result = ks2(P.length - 1,T);
        System.out.println(&quot;最大价值为：&quot; + result);
    }

    private int ks2(int i, int t){
        // 如果该结果已经被计算，那么直接返回
        if (results[i][t] != null) return results[i][t];
        int result = 0;
        if (i == 0 || t == 0){
            // 初始条件
            result = 0;
        } else if(V[i] &amp;gt; t){
            // 装不下该珠宝
            result = ks2(i-1, t);
        } else {
            // 可以装下
            // 取k个物品，取其中使得价值最大的
            for (int k = 0; k &amp;lt;= M[i] &amp;amp;&amp;amp; k * V[i] &amp;lt;= t; k++){
                int tmp2 = ks2(i-1, t - V[i] * k) + P[i] * k;
                if (tmp2 &amp;gt; result){
                    result = tmp2;
                }
            }
        }
        results[i][t] = result;
        return result;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里其实只是照葫芦画瓢。&lt;/p&gt;
&lt;h3 id=&quot;自下而上填表法&quot;&gt;自下而上填表法&lt;/h3&gt;
&lt;p&gt;同样也可以使用填表法来解决，此时需要将数组P、V、M额外添加的元素0去掉。&lt;/p&gt;
&lt;p&gt;除了k的限制不一样之外，其他地方跟完全背包的解法完全一致：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static class MultiKnapsack {
    private static int[] P={2,3,4};
    private static int[] V={3,4,5};
    private static int[] M={4,3,2};
    private static int T = 15;

    private int[][] dp = new int[P.length + 1][T + 1];

    @Test
    public void solve3() {
        for (int i = 0; i &amp;lt; P.length; i++){
            for (int j = 0; j &amp;lt;= T; j++){
                for (int k = 0; k &amp;lt;= M[i] &amp;amp;&amp;amp; k * V[i] &amp;lt;= j; k++){
                    dp[i+1][j] = Math.max(dp[i+1][j], dp[i][j-k * V[i]] + k * P[i]);
                }
            }
        }
        System.out.println(&quot;最大价值为：&quot; + dp[P.length][T]);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;跟01背包问题一样，完全背包的空间复杂度也可以进行优化，具体思路这里就不重复介绍了，可以翻看前面的01背包问题优化篇。&lt;/p&gt;
&lt;p&gt;优化后的状态转移方程为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ks(t) = max{ks(t), ks(t - Vi) + Pi}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static class MultiKnapsack {
    private static int[] P={2,3,4};
    private static int[] V={3,4,5};
    private static int[] M={4,3,2};
    private static int T = 15;

    private int[] newResults = new int[T + 1];

    @Test
    public void resolve4() {
        int result = ksp(P.length,T);
        System.out.println(result);
    }

    private int ksp(int i, int t){
        // 开始填表
        for (int m = 0; m &amp;lt; i; m++){
            for (int n = V[m]; n &amp;lt;= t ; n++){
                if (n &amp;gt;= V[m] * (M[m] + 1)){
                    newResults[n] = newResults[n - 1];
                }else {
                    newResults[n] = Math.max(newResults[n] , newResults[n - V[m]] + P[m]);
                }
            }
            // 可以在这里输出中间结果
            System.out.println(JSON.toJSONString(newResults));
        }
        return newResults[newResults.length - 1];
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[0,0,0,2,2,2,4,4,4,6,6,6,8,8,8,8]
[0,0,0,2,3,3,4,5,6,6,7,8,9,9,10,11]
[0,0,0,2,3,4,4,5,6,7,8,8,9,10,11,11]
11&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的优化多了一个限制条件，跟完全背包相比，唯一的区别在这里：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;if (n &amp;gt;= V[m] * (M[m] + 1)){
    newResults[n] = newResults[n - 1];
}else {
    newResults[n] = Math.max(newResults[n] , newResults[n - V[m]] + P[m]);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码很简单，但要理解却并不容易，为了加深理解，再画一张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/05/5ccef4c950a89.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;多重背包问题同样也可以转化成01背包问题来求解，因为第i件物品最多选 M[i] 件，于是可以把第i种物品转化为M[i]件体积和价值相同的物品，然后再来求解这个01背包问题。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;多重背包问题跟完全背包简直如出一辙，仅仅是比完全背包多一个限制条件而已，如果你回过头去看看前一篇文章，就会发现这篇文章简直就是抄袭。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/02/5ccaee9d39578.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于多重背包问题的解析到此就结束了，三个经典的背包问题到这里就告一段落了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/14/5c8a580b1789e.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果有疑问或者有什么想法，也欢迎关注我的公众号进行留言交流：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/14/5c8a58ba229ca.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 May 2019 14:38:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<og:description>说明 前面已经介绍完了01背包和完全背包，今天介绍最后一种背包问题——多重背包。 这个背包，听起来就很麻烦的样子。别慌，只要你理解了前面的两种背包问题，拿下多重背包简直小菜一碟。 如果没有看过前两篇0</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/10816837.html</dc:identifier>
</item>
<item>
<title>大白话5分钟带你走进人工智能-第二十二节决策树系列之概念介绍(1) - LHBlog</title>
<link>http://www.cnblogs.com/LHWorldBlog/p/10816798.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LHWorldBlog/p/10816798.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;                                                                                                                 第二十二节决策树系列之概念介绍(1)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本系列我们讲一个新算法及其衍生出来的系列算法，决策树，随机森林以及集成学习。无论是线性回归，逻辑回归，SVM，最大熵模型也好，都是w做参数，而我们的最终结果无论需要预测还是要分类，都是把x跟w互相搞一搞，然后得出一个结果。我们的y是通过x跟自己学的参数计算出来的，而决策树是通过一个树形的结构，来把我们的预测和分类问题完成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;决策树既能做预测也能做分类，它本质上最直观的是用来做分类，&lt;/strong&gt;但是通过一点点的调整也可以用来做预测。决策树的起源非常早，所谓最早时期的人工智能就是指这。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如拿下棋举例，第1节点表示对方走了一步棋，然后再走一步棋，走到2这个节点，当走到4这个节点的时候，有可能再走回1这个节点。&lt;strong&gt;每一个节点之间连线代表一个状态&lt;/strong&gt;，这个状态也叫&lt;strong&gt;有限状态机&lt;/strong&gt;，&lt;strong&gt;所谓的有限状态机就是指就有若干的状态，每个状态之间可以互相转换。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;比如说对方第一步走的是第一种状态，你就做出一个决策，对方第二步走到另外一个状态，你就跳到另一个决策，在早期的游戏AI里面通常都是用这种方式来做。它背后都是一个有限状态机，看到你做了什么情况，就跑到某一个状态去执行一个决策，发现你又变成另一个状态，它有可能跳回原来那个状态去执行之前的决策，所以它是根据不同的形式评估，然后在不同的状态之间跳转，有不同的策略执行。每一个状态其实都有可能是一个子函数，背后取做一系列的操作。当有限状态机设计的特别复杂的时候，一定程度上它就具备一定的智能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以那个时代里所谓的人工智能就是发现对方往前走了，下一步应该做什么？背后其是一系列特别复杂的策略写的程序存到计算机里面，就相当于在编写这个程序的时候，你替计算机想到了所有一切可能发生的情况，告诉它遇到什么情况就干什么，&lt;strong&gt;所以看起来像是在模仿人类做决策的过程，其实背后就是一堆的if else。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以人工智能里面有一句笑话叫有多少人工就有多少智能，在那个时代说的确实对，人想到了多少事，计算机只是帮你记下来，遇到这个情况的时候，去执行这个程序，这个就叫&lt;strong&gt;显示编程&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而机器学习推翻了那种思路，它想通过不需要你显示编程的方式，让计算机从数据集中通过某些合理的算法，自己大量计算后，得到一些信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单来说，人工智能主要解决两个问题，一是决策问题，就是所有数据给你之后，你应该做什么？大部分数据挖掘就是做这件事情，帮人们做一些决策。二是识别问题，把自然界中没有整理好的数据及丢给计算机，让它能认识这个东西是什么，比如图像识别，语音识别，比如自然语音处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;决策和识别哪个更复杂一点？识别，让计算机理解人才能理解的东西更复杂。它的几个分支，一个是&lt;strong&gt;CV计算机视觉&lt;/strong&gt;，一个是&lt;strong&gt;NLP自然语言处理&lt;/strong&gt;，比如我们积累了大量的数据在移动互联网里，那么这些数据是未经处理的，怎么样从中提取信息，基本上是自然语言处理要做的事。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是各个分支不会是自己独立的一部分，做决策也需要这些支撑。比如阿里天气竞赛有一个健康绿色的比赛，它里面要根据几万个人的体检报告给参赛者，去评估人的血压血脂各种指标。那里面很多数据的维度并不是整理好的数据，而是x1到xn是一组数，很多给你的原始数据是医生写的评语。那么在做数据预处理的时候，也需要用一些简单的自然语言处理模型来把它先转换成计算机可以认识的语言。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;回到决策树身上，其实决策树本身作为一个树形结构其实就是一堆if else&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在决策树也应用在了&lt;strong&gt;有监督机器学习模型&lt;/strong&gt;上。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;举个例子，比如quitting time是下班时间，你要做一个决策，今天到底晚上要不要学习？假如下班时间早于6点半，你会看今天要不要和女朋友去约个会；如果今天没有约会，回家也没有什么事情做，有可能就学习(Y)了；如果今天天气好，出去玩，肯定就会导致不学习(N)；假如9点半之后才下班，回家已经非常累了，你看跳槽的面试时间(deadline)还有两天以上，今天就休息，不学习了(N)；或者面试已经过去两天了，心情已经平复下来，暂时也不学习(N)了；明天就要面试了，就可能学习(Y)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就是一个简单的决策树的形式，上面的图就是一棵树，我们称这棵树quitting time这个节点叫做&lt;strong&gt;根节点&lt;/strong&gt;，下面真正要去做决策的节点叫做&lt;strong&gt;叶子节点&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在这棵已经做好给你了，怎么做预测？来一条数据第一个维度记录着今天这个人下班的时间，第二个维度是有没有约会，第三个维度是deadline截止日期还有多少？有了这三个数据，只要扔到这个树里边，它在每一个叶子结点要分裂的时候去读取相应的数据判断一下到底分到哪枝了，然后再读取数据来判断一下最后的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;树在生长的过程中可不可能出现两个同样维度？比如have  a date分裂条件是true的情况下会接着再出现quitting time吗？在这个例子里面貌似是不会出现的，在实际的例子中这样是没问题的，只不过赋予它的意义有点矛盾了，但对某些数据的具体实际含义来说，也有可能出现多次的。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 May 2019 14:31:00 +0000</pubDate>
<dc:creator>LHBlog</dc:creator>
<og:description>第二十二节决策树系列之概念介绍(1) 本系列我们讲一个新算法及其衍生出来的系列算法，决策树，随机森林以及集成学习。无论是线性回归，逻辑回归，SVM，最大熵模型也好，都是w做参数，而我们的最终结果无论需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LHWorldBlog/p/10816798.html</dc:identifier>
</item>
<item>
<title>C#的自定义语法糖 - 程度飞</title>
<link>http://www.cnblogs.com/agul/p/10816541.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/agul/p/10816541.html</guid>
<description>&lt;p&gt;　　语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。——摘自百度百科：&lt;a href=&quot;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E7%B3%96/5247005&quot; target=&quot;_blank&quot;&gt;语法糖&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;　　对If...Where的封装——语法糖WhereIf（如果读者已经知晓，请自行跳过）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　　在做条件查询的时候，我们可能经常要写这样的代码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
        List&amp;lt;User&amp;gt;&lt;span&gt; Query(User queryModel)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个演示数据集&lt;/span&gt;
            List&amp;lt;User&amp;gt; userList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt;
            {
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;燕双鹰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10369852103&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ,  Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;沈七七&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;14785203630&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;反派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;步鹰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,    Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;14702021596&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;反派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小玲&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,    Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;19469874106&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;赵一平&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;18502369740&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;反派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = userList.AsQueryable();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转为IQueryable类型

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;条件过滤&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(queryModel.UserName))
            {
                data &lt;/span&gt;= data.Where(u =&amp;gt; u.UserName ==&lt;span&gt; queryModel.UserName);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(queryModel.Phone))
            {
                data &lt;/span&gt;= data.Where(u =&amp;gt; u.Phone ==&lt;span&gt; queryModel.Phone);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(queryModel.Role))
            {
                data &lt;/span&gt;= data.Where(u =&amp;gt; u.Role ==&lt;span&gt; queryModel.Role);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (queryModel.Sex != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                data &lt;/span&gt;= data.Where(u =&amp;gt; u.Sex ==&lt;span&gt; queryModel.Sex);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data.ToList();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　当传入的参数不为空时，才执行查询。很明显，这里大量的If-Where语句是极为简单，且不断重复出现的代码（逻辑），可以进行封装以简化操作，以简化代码。&lt;/p&gt;
&lt;p&gt;　　创建泛型扩展方法WhereIf，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IQueryable&amp;lt;T&amp;gt; WhereIf&amp;lt;T&amp;gt;(&lt;span&gt;this&lt;/span&gt; IQueryable&amp;lt;T&amp;gt; query, &lt;span&gt;bool&lt;/span&gt; condition, Expression&amp;lt;Func&amp;lt;T, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; predicate)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; condition
                &lt;/span&gt;?&lt;span&gt; query.Where(predicate)
                : query;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　该方法实现了对If-Where的封装，使用方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
        List&amp;lt;User&amp;gt;&lt;span&gt; Query(User queryModel)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个演示数据集&lt;/span&gt;
            List&amp;lt;User&amp;gt; userList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt;
            {
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;燕双鹰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10369852103&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ,  Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;沈七七&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;14785203630&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;反派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;步鹰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,    Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;14702021596&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;反派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小玲&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,    Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;19469874106&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;},
               &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User{ UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;赵一平&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Phone = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;18502369740&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  Role = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;反派&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   Sex = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
            };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; userList.AsQueryable()
                .WhereIf(&lt;/span&gt;!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(queryModel.UserName), u =&amp;gt; u.UserName ==&lt;span&gt; queryModel.UserName)
                .WhereIf(&lt;/span&gt;!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(queryModel.Phone), u =&amp;gt; u.Phone ==&lt;span&gt; queryModel.Phone)
                .WhereIf(&lt;/span&gt;!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(queryModel.Role), u =&amp;gt; u.Role ==&lt;span&gt; queryModel.Role)
                .WhereIf(queryModel.Sex &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt;, u =&amp;gt; u.Sex ==&lt;span&gt; queryModel.Sex);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data.ToList();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　之前超过8行代码的查询代码，被精简到4行，代码行数减少超过一半，可读性大幅提高，由于只是简单的封装，运行效率几乎不变。（减少大量代码，提高可读性，功能不变，效率不变，有优无缺，因此强烈建议WhereIf来代替传统的If-Where操作。）&lt;/p&gt;

&lt;p&gt;　　新的问题来了，If语句还存在一个条件不满足的情况：else，WhereIf方法只封装了IfWhere，却没有封装If-Whrere-else-Where语句，如果遇到如下的查询要求，要怎么做呢？&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(queryModel.UserName))
            {
                data &lt;/span&gt;= data.Where(u =&amp;gt; u.UserName ==&lt;span&gt; queryModel.UserName);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                data &lt;/span&gt;= data.Where(u =&amp;gt; u.UserName == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;燕双鹰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果查询条件为空，就查询燕双鹰的姓名&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　有三个办法可以解决这个问题：&lt;/p&gt;
&lt;p&gt;　　第一个办法，是修改WhereIf方法，增加else-Where的逻辑，使其支持If-Whrere-else-Where的逻辑：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IQueryable&amp;lt;T&amp;gt; WhereIf&amp;lt;T&amp;gt;(&lt;span&gt;this&lt;/span&gt; IQueryable&amp;lt;T&amp;gt; query, &lt;span&gt;bool&lt;/span&gt; condition, Expression&amp;lt;Func&amp;lt;T, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; truePredicate, Expression&amp;lt;Func&amp;lt;T, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; falsePredicate = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;=&amp;gt; condition ? query.Where(truePredicate) : falsePredicate == &lt;span&gt;null&lt;/span&gt; ? query : query.Where(falsePredicate);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　这样的做的缺点也是明显的：在参数condition为false时，会进行第二次逻辑判断，缺点是减低效率，优点是代码简洁。（当然，多一个逻辑判断也减低不了多少效率）&lt;/p&gt;

&lt;p&gt;　　第二个方法，避免第二次逻辑判断的方式是进行方法重载，也就是写两个WhereIf方法，在新增的这个WhereIf方法中，参数falsePredicate不再设置为可空参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IQueryable&amp;lt;T&amp;gt; WhereIf&amp;lt;T&amp;gt;(&lt;span&gt;this&lt;/span&gt; IQueryable&amp;lt;T&amp;gt; query, &lt;span&gt;bool&lt;/span&gt; condition, Expression&amp;lt;Func&amp;lt;T, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; truePredicate, Expression&amp;lt;Func&amp;lt;T, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; falsePredicate)
            &lt;/span&gt;=&amp;gt; condition ? query.Where(truePredicate) :  query.Where(falsePredicate);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　优点是可以在不影响效率的情况下支持If-Whrere-else-Where逻辑，因为两个WhereIf方法的逻辑是差不多的，缺点是又写了简单重复的代码，不简洁。（当然，仅仅是定义它的时候不简洁，调用时候简洁程度和方法一，是一样的）&lt;/p&gt;

&lt;p&gt;　　第三个方法，完全不修改WhereIf方法， 仅仅在调用的时候，通过对参数condition进行取反操作，来达到目的：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; data2 = data.WhereIf(!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(queryModel.UserName), u =&amp;gt; u.UserName ==&lt;span&gt; queryModel.UserName)
                            .WhereIf(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(queryModel.UserName), u =&amp;gt; u.UserName == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;燕双鹰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　优点：方法定义最简单，缺点：在遇到If-Whrere-else-Where逻辑时，会增加代码量。&lt;/p&gt;

&lt;p&gt;　　具体选择哪一种，请读者自行斟酌，如果有更好的实现方法，就留言讨论分享出来吧^_^&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;对for循环的封装，语法糖For&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　实际开发中，很多时候对for循环的使用，仅仅是将一个操作，循环指定的次数，而且其中没有break、continue这些提前终止循环的逻辑。这种简单重复的逻辑可以进行提取封装。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; For(&lt;span&gt;int&lt;/span&gt; count, Action&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; action)
        {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; count; i++&lt;span&gt;)
            {
                action.Invoke(i);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　这里使用了C#的内置泛型委托Action，发挥的作用就是将方法作为参数去传递。参数count表示循环总次数，Action的参数int，表示正在进行的循环次数，从0开始，读者可以根据需要改成从1开始（这里从1开始好，还是从0开始好，待定）。&lt;/p&gt;

&lt;p&gt;　　调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
SyntacticSugar.For(&lt;span&gt;1&lt;/span&gt;, p =&amp;gt; { &lt;span&gt;int&lt;/span&gt; a = p + &lt;span&gt;8&lt;/span&gt;; data2.Remove(data2[a]); });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　如果认为这样调用麻烦，可以在参数count前加this，使之变为扩展方法，以简化调用。&lt;/p&gt;
</description>
<pubDate>Sun, 05 May 2019 13:46:00 +0000</pubDate>
<dc:creator>程度飞</dc:creator>
<og:description>语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/agul/p/10816541.html</dc:identifier>
</item>
<item>
<title>图的概念、存储及遍历 - 智者侬哥</title>
<link>http://www.cnblogs.com/wuxiangnong/p/10816475.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuxiangnong/p/10816475.html</guid>
<description>&lt;p&gt;图是一种特殊的数据结构，由点和边构成，它可以用来描述元素之间的网状关系，这个网状没有顺序，也没有层次，就是简单的把各个元素连接起来。图在我们的生活中也十分常见，地图就是最简单的例子。&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;图的基本概念&quot;&gt;图的基本概念：&lt;/h3&gt;
&lt;p&gt;顶点集合为V，边集合为E的图记作G=(V,E)。另外，G=(V,E)的顶点数和边数分别为|V|和|E|。对于两个图G和G'，如果G'的顶点集合与边集合均为G的顶点集合与边集合的子集，那么称G'是G的子图。子图实际上就是一张图里面小一点的图，也可以是点，不难理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有向图&lt;/strong&gt;：图的边有方向，只能按箭头方向从一点到另一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无向图&lt;/strong&gt;：图的边没有方向，可以双向。&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2019/05/05/5cce83302cc32.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如图，（a)就是有向图，（b）就是无向图。&lt;/p&gt;
&lt;p&gt;顶点的度：&lt;strong&gt;无向图&lt;/strong&gt;中连着顶点的边的数目。&lt;/p&gt;
&lt;p&gt;顶点的入度和出度：&lt;strong&gt;有向图&lt;/strong&gt;中，以这个顶点为起点的边的数量称为这个顶点的出度；以这个顶点为终点的边称为这个顶点的入度。&lt;/p&gt;
&lt;p&gt;边权：边的费用，可以形象的理解为“过路费”。对于一张存在边权的图，我们称为“带权图”。&lt;/p&gt;
&lt;p&gt;连通：如果图中两点U,V之间存在一条由U经过若干边、点到达V的路径，则称U，V是连通的。&lt;/p&gt;
&lt;p&gt;回路：起点和终点相同的路径，称为“回路”或“环”。另外，不存在环的有向图称为Directed Acyclic Graph(DAG)。&lt;/p&gt;
&lt;p&gt;完全图：每个点都与其它所有的点有连边的图。&lt;/p&gt;
&lt;p&gt;n个点的&lt;strong&gt;有向完全图&lt;/strong&gt;的边数计算方法：每个点都可以自己为起点连出n-1条边，因为除了它自己，剩下的n-1个点都能作为它连边的终点，而整张图有n个点，所以最终结果为：n(n-1)条边；n个点的&lt;strong&gt;无向完全图&lt;/strong&gt;的边数计算方法：因为是无向的，那么a连到b、从b连到a这两条边只能算作一条，所以，无向完全图的边数应该是有向完全图的一半，即：n(n-1)/2条。&lt;/p&gt;
&lt;p&gt;稀疏图：一张边数远远少于完全图的图&lt;/p&gt;
&lt;p&gt;稠密图：一张边数接近完全图的图&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;图的存储&quot;&gt;图的存储：&lt;/h3&gt;
&lt;p&gt;对于如何存储一张图，我们主要有三种方法。&lt;/p&gt;
&lt;p&gt;（1）邻接矩阵：对于一张图来说，我们可以存储点的信息，也可以存储边的信息，而邻接矩阵存储的是点的信息。对于一个点，我们需要知道的是它和哪些点有连边，有时还要知道连边的边权。那么，不难想到用二维数组来实现。&lt;/p&gt;
&lt;p&gt;用map[u][v]来表示u和v 之间是否有连边。如果u，v之间有连边，那么map[u][v]=1或边权，如果是带全图就赋值边权，否则赋值1；反之，赋值0或无穷大，如果是无向图，就加上map[v][u]= map[u][v]。&lt;/p&gt;
&lt;p&gt;对于带权图，我们极可能设计对整张图的计算，所以要赋值边权及无穷大，无穷大比无穷小要方便得多，因为在很多算法中，我们需要边权尽量小，如果赋值无穷小，那不是优先选这条实际上不存在的边了？还可以这样想：我们的边权相当于“过路费”，我们现在无法从u到达v，你觉得是因为过路费太贵了还是过路费太便宜了？肯定是由于过路费太贵，我们付不起。这样一想，就不难理解了。&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2019/05/05/5ccea12210606.png&quot;/&gt;&lt;br/&gt;对于上面三幅图，它们的邻接矩阵分别如下：&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2019/05/05/5ccec71801b4f.png&quot;/&gt;&lt;br/&gt;注意，邻接矩阵不能存储有重边的图，因为数组里的每一个位置只能记录一个值。那么，邻接矩阵的空间复杂度就是O(n2)，n为点数，添加及查询边的复杂度均为O(1)。这种方式适合存储稠密图，因为它申请的空间是准备用来存储每个点到其它所有点的边的边权的，如果是稀疏图，会造成很大的浪费。&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;//有向图
for(i=1;i&amp;lt;=n;i++)
    for(j=1;j&amp;lt;=n;j++)
        map[i][j]=0x7ffffff;
for(i=1;i&amp;lt;=n;i++)map[i][i]=0;
for(i=1;i&amp;lt;=e;i++)
{
    scanf(&quot;%d%d%d&quot;,&amp;amp;u,&amp;amp;v,&amp;amp;w);
    map[u][v]=w;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）边集数组：除了存储点的信息，我们还可以存储边的信息。对于一条边，我们需要知道它的起点、终点以及边权，那么，我们不难想到可以用结构体来存储。这种存储方式非常简单粗暴,适用于对边&lt;strong&gt;依次&lt;/strong&gt;进行处理，但不适用于对顶点的处理和对任意一条边的处理，因为边集数组查询边的复杂度为O(e)，e为边数，这个不难理解，因为我们需要遍历整个数组。如果要处理顶点，那么每一次顶点的拓展都要花费O(e)的时间，时间复杂度非常大，而每次查找任意一条边也要花费O(e)的时间，所以均不适用。如果是对边的顺次处理，那来一遍循环就ok了。&lt;/p&gt;
&lt;p&gt;从空间上来看，边集数组适用于稀疏图，因为要存储每一条边，所以边集数组的空间复杂度为O(e)，插入边的复杂度为O(1)。根据上面说的完全图边数的计算方法，即使是无向图，当n=10000时，完全图的边数也达到了49995000，完全存不下，因此适用于稀疏图。&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;for(i=1;i&amp;lt;=e;i++)
{
    scanf(&quot;%d%d%d&quot;,&amp;amp;u,&amp;amp;v,&amp;amp;w);
    e[i].u=u;
    e[i].v=v;
    e[i].len=w;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）邻接表：边集数组的缺陷在于边与边之间没有联系，那我们想办法将边联系起来。能联系在一起的边，必然要有什么共同点，我们不妨让它们的某个东西相同。什么东西相同呢？边权吗？把边权相等的边放在一起对我们没有任何帮助。本质上，我们对边集数组的不满在于它无法快速地进行点的拓展，第一它不知道这个点连出了哪些边，第二它也不知道连出了几条，这才是最要命的。&lt;/p&gt;
&lt;p&gt;问题很明确，我们需要快速地知道一个点连出的边，那我们不妨把它们放在一起。别忘了，我们还需要很快地知道这个点连出的一条边的下一条边。有点拗口，我们不妨一个点连出的边编号1、2、3，我们需要快速地知道1下一条是2，2下一条是3，这样的形式，我们可以采用链表的形式来存储。将同一个顶点连出的边链接在同一个边链表中，链表里的每一个点代表一条边，这个点叫做边结点。&lt;/p&gt;
&lt;p&gt;现在，我们要记录的每个边结点的信息稍有变动：我们要记录这条边的终点，这条边的边权，&lt;strong&gt;以及这条边的上一条边&lt;/strong&gt;，因为我们采用的是链表的形式，所以要记录前驱，当然你也可以抽象地理解为：这条边的下一跳边，因为实现的时候处理完这条边下一个就处理我们记录的这下（上）一条边了，这个操作依然可以用结构体实现。然后，我们还要记录每个点连出的最后一条边，同样可以抽象理解为第一条边。这样，我们每次拿到这个点连出的第一条边，然后顺着第一条慢慢往下拿到第二条、第三条，时间复杂度均为O()，比边集数组快飞了。&lt;/p&gt;
&lt;p&gt;邻接表的空间复杂度为O(n+e)，我们可以算一下：首先，我们至少需要O(n)的数组来存放每个点连出边的集合，然后我们又需读入了e条边，所以复杂度为O(n+e)。查询边的复杂度为O(Mi)，Mi为由vi连出的边的数目，插入边的复杂度为O(1)。根据空间复杂度的计算，可以得出：邻接表同样适用于稀疏图。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;struct edge
{
    int to,len,last;
}e[100001];//邻接表 
int first[10001];
//每个点连出的最后（第一）条边 
int len=0;//当前边的总数，方便对边的存储 
void add(int u,int v,int w)
{
    len++;
    e[len].to=v;
    e[len].len=w;
    e[len].last=first[u];
    first[u]=len;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;三种方式的比较：&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2019/05/05/5ccee3bf67e11.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;图的遍历&quot;&gt;图的遍历：&lt;/h3&gt;
&lt;p&gt;我们想要对顶点进行操作，必然要对图进行遍历。图的遍历有两种，都是我们耳熟能详的：深度优先遍历、广度优先遍历，具体的思想和搜索一模一样，这里不再重复。&lt;/p&gt;
&lt;p&gt;深度优先遍历：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;//邻接表
void dfs(int dep)
{
    blablabla......
    int i;
    for(i=first[dep];i;i=e[i].last)
        if(b[a[i].to]==0)
        {
            b[a[i].to]=1;
            dfs(a[i].to);
            b[a[i].to]=0;   
        }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;广度优先遍历：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;//邻接表
void bfs()
{
    int head=0,tail=1;
    q[tail]=x;//x表示我们最开始的起点
    b[x]=1;
    while(head&amp;lt;tail)
    {
        head++;
        int i,t=q[head];
        for(i=first[t];i;i=a[i].last)
            if(b[a[i].to]==0)
            {
                blablabla......
                b[a[i].to]=1;
                q[tail++]=a[i].to;  
            }   
    } 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;by-wxn&quot;&gt;By wxn&lt;/h2&gt;
</description>
<pubDate>Sun, 05 May 2019 13:41:00 +0000</pubDate>
<dc:creator>智者侬哥</dc:creator>
<og:description>图的概念、存储及遍历 图是一种特殊的数据结构，由点和边构成，它可以用来描述元素之间的网状关系，这个网状没有顺序，也没有层次，就是简单的把各个元素连接起来。图在我们的生活中也十分常见，地图就是最简单的例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuxiangnong/p/10816475.html</dc:identifier>
</item>
</channel>
</rss>