<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>CSS动画实例：Loading加载动画效果（一） - aTeacher</title>
<link>http://www.cnblogs.com/cs-whut/p/13511414.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cs-whut/p/13511414.html</guid>
<description>&lt;p&gt;      一些网站或者APP在加载新东西的时候，往往会给出一个好看有趣的Loading图，大部分的Loading样式都可以使用CSS3制作出来，它不仅比直接使用gif图简单方便，还能节省加载时间和空间。下面介绍常见的一些Loading动画效果图的制作方法。&lt;/p&gt;
&lt;h3&gt;1．圆环型Loading&lt;/h3&gt;
&lt;p&gt;      这类Loading动画的基本思想是：先在呈现容器中定义一个名为loader的层，再对loader进行样式定义，使得其显示为一个圆环，最后编写关键帧动画控制，使得loader层旋转起来即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       （1&lt;/strong&gt;&lt;strong&gt;）旋转未封闭的圆环加载效果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      例如，设页面中有  &amp;lt;div class='loader'&amp;gt;&amp;lt;/div&amp;gt;，定义loader的样式规则如下：&lt;/p&gt;
&lt;p&gt;  .loader&lt;/p&gt;
&lt;p&gt;   {&lt;/p&gt;
&lt;p&gt;      width:100px;&lt;/p&gt;
&lt;p&gt;      height:100px;&lt;/p&gt;
&lt;p&gt;      border-radius:50%;&lt;/p&gt;
&lt;p&gt;      border:16px solid #f3f3f3;&lt;/p&gt;
&lt;p&gt;      border-top:16px solid #ff0000;&lt;/p&gt;
&lt;p&gt;   }&lt;/p&gt;
&lt;p&gt;则显示的图形如图1所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816055654558-834150581.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图1  圆环1&lt;/p&gt;
&lt;p&gt;      若在上面的样式规则中加上语句：border-bottom:16px solid #0000ff;，则显示的图形如图2所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816055715208-768899163.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图2 圆环2&lt;/p&gt;
&lt;p&gt;      如再同时将边框颜色修改为容器背景色，则显示的图形如图3所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816055735222-2043797788.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图3  圆环3&lt;/p&gt;
&lt;p&gt;      若只将样式规则中的&lt;span&gt;“&lt;/span&gt;border-top:16px solid #ff0000;&lt;span&gt;”&lt;/span&gt;改写为&lt;span&gt;“&lt;/span&gt;border-top:16px solid #d8d8d8;&lt;span&gt;”&lt;/span&gt;，即将图1边框上的红色改成背景色，则显示的图形如图4所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816055812080-1777876158.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图4  圆环4&lt;/p&gt;
&lt;p&gt;      编写关键帧定义，并在loader样式定义中加上animation属性设置语句，可以得到如图5所示的Loading动画效果。&lt;/p&gt;
&lt;p&gt;      完整的HTML文件内容如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fa994b5c-992a-46f9-893e-7e1c9a3ecbba')&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_fa994b5c-992a-46f9-893e-7e1c9a3ecbba&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_fa994b5c-992a-46f9-893e-7e1c9a3ecbba&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fa994b5c-992a-46f9-893e-7e1c9a3ecbba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Loading加载动画&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
   .container
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#d8d8d8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px solid rgba(255, 0, 0, 0.9)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .loader
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16px solid #d8d8d8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16px solid #ff0000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16px solid #0000ff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      animation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;load 2s linear infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   @keyframes load
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      0%   { transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; rotate(0deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      100% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(360deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div  &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;='loader'&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816055953925-901784906.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图5  Loading动画效果（1）&lt;/p&gt;
&lt;p&gt;      图1圆环对应的动画效果如图6所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060012780-479367368.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图6  Loading动画效果（2）&lt;/p&gt;
&lt;p&gt;      图4圆环对应的动画效果如图7所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060052550-300056960.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图7   Loading动画效果（3）&lt;/p&gt;
&lt;p&gt;      图5、图6和图7的效果是通过旋转实现的，还可以缩放圆环，将关键帧的定义修改为：&lt;/p&gt;
&lt;p&gt;   @keyframes load&lt;/p&gt;
&lt;p&gt;   {&lt;/p&gt;
&lt;p&gt;      0%&lt;/p&gt;
&lt;p&gt;      {&lt;/p&gt;
&lt;p&gt;          transform: scale(0.2);&lt;/p&gt;
&lt;p&gt;          opacity: 0.5;&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;
&lt;p&gt;      100%&lt;/p&gt;
&lt;p&gt;      {&lt;/p&gt;
&lt;p&gt;          transform: scale(1);&lt;/p&gt;
&lt;p&gt;          opacity: 1;&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;
&lt;p&gt;   }&lt;/p&gt;
&lt;p&gt;则呈现出如图8所示的动画效果。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060143005-1755070390.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图8  Loading动画效果（4）&lt;/p&gt;
&lt;p&gt;      可以设定两个弧段，进行交叉旋转，编写如下的HTML文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8811f51a-61fe-4a2c-9059-319d462f4df1')&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_8811f51a-61fe-4a2c-9059-319d462f4df1&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_8811f51a-61fe-4a2c-9059-319d462f4df1&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8811f51a-61fe-4a2c-9059-319d462f4df1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Loading加载动画&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
   .container
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#d8d8d8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px solid rgba(255, 0, 0, 0.9)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .loader
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;10px solid #d8d8d8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;10px solid #0000ff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      animation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;load 2s linear infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .loader:nth-child(1)
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .loader:nth-child(2)
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;70px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;70px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      animation-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; reverse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   @keyframes load
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      0%   { transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; rotate(0deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      100% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(360deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div  &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;='loader'&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;='loader'&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;      在浏览器中打开包含这段HTML代码的html文件，可以呈现出如图9所示的Loading动画效果。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060328729-1216231118.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图9  Loading动画效果（5）&lt;/p&gt;
&lt;p&gt;      若将上面.loader定义中的语句&lt;span&gt;“&lt;/span&gt;border:10px solid #d8d8d8;&lt;span&gt;”删除&lt;/span&gt;，则呈现如图10所示的动画效果。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060454330-679933763.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图10  Loading动画效果（6）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      （2&lt;/strong&gt;&lt;strong&gt;）旋转后封闭的圆环加载效果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      上面的几个圆环型动画效果是一段圆环形弧段进行旋转，旋转的整个过程中未封闭成一个圆环。若旋转过程中出现一个封闭的圆环，例如一小段圆弧逐步沿圆环转动，转动过程中圆弧段加长，直到封闭为一个圆环。动画效果如图11所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060543107-1805313194.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图11  Loading动画效果（7）&lt;/p&gt;
&lt;p&gt;      这个动画制作起来稍微复杂一点，需要借助遮罩的思想。基本思路是：先制作一个完整的圆环，然后在圆环上左右两半边上分别让一个填充色为红色的矩形框旋转，旋转时位于圆环上的部分显示出来，超出圆环的部分被隐藏（设置overflow: hidden;即可），这样就可实现图11所示的动画效果。&lt;/p&gt;
&lt;p&gt;      设页面有&amp;lt;span class=&quot;loader&quot;&amp;gt;&amp;lt;/span&amp;gt;，定义.loader的样式规则如下：&lt;/p&gt;
&lt;p&gt;   .loader&lt;/p&gt;
&lt;p&gt;   {&lt;/p&gt;
&lt;p&gt;       position: relative;&lt;/p&gt;
&lt;p&gt;       height: 100px;&lt;/p&gt;
&lt;p&gt;       width: 100px;&lt;/p&gt;
&lt;p&gt;       border-radius: 50%; &lt;/p&gt;
&lt;p&gt;       background:#f3f3f3;&lt;/p&gt;
&lt;p&gt;   }&lt;/p&gt;
&lt;p&gt;   .loader:after&lt;/p&gt;
&lt;p&gt;   {&lt;/p&gt;
&lt;p&gt;       content: &quot;&quot;;&lt;/p&gt;
&lt;p&gt;       position: absolute;&lt;/p&gt;
&lt;p&gt;       top: 20px;&lt;/p&gt;
&lt;p&gt;       left: 20px;&lt;/p&gt;
&lt;p&gt;       height: 60px;&lt;/p&gt;
&lt;p&gt;       width: 60px;&lt;/p&gt;
&lt;p&gt;       background:#d8d8d8;&lt;/p&gt;
&lt;p&gt;       border-radius: 50%;&lt;/p&gt;
&lt;p&gt;   }&lt;/p&gt;
&lt;p&gt;可以得到如图12所示的圆环。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060634919-1960058645.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图12  一个圆环&lt;/p&gt;
&lt;p&gt;      然后分别对圆环内的子元素左右矩形框进行样式设置和关键帧定义，编写如下的HTML文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('53c7b31a-8a69-4098-beac-132c9ecb40b8')&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_53c7b31a-8a69-4098-beac-132c9ecb40b8&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_53c7b31a-8a69-4098-beac-132c9ecb40b8&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53c7b31a-8a69-4098-beac-132c9ecb40b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Loading加载动画&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
   .container
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#d8d8d8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px solid rgba(255, 0, 0, 0.9)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .loader
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
       position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;  
       background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#f3f3f3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .loader:after 
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
       content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
       left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
       width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#d8d8d8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .loader &amp;gt; span 
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
       position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
       width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
       overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .left  
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; 
       left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0   
   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .right 
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; 
       left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .mask 
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
      top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;  #ff0000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0.8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      animation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; rotate1 3s infinite linear&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      transform-origin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 50% 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .left .mask 
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      border-bottom-left-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-top-left-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   .right .mask 
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      border-bottom-right-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-top-right-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      transform-origin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100% 50% 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      animation-delay&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1.5s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   @keyframes rotate1
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      0%  { transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(0deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      25% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(0deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      50% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(180deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      75% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(180deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      100%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(360deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   }
   @keyframes rotate2
   &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      0%  { transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(0deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      25% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(180deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      50% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(180deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      75% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(360deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      100%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(360deg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
   }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div  &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;loader&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;left&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mask&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mask&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;      在浏览器中打开包含这段HTML代码的html文件，可以呈现出如图11所示的Loading动画效果。&lt;/p&gt;
&lt;p&gt;      若将上面代码中.right .mask定义里的&lt;span&gt;“&lt;/span&gt;animation-name:rotate2;&lt;span&gt;”&lt;/span&gt;和&lt;span&gt;“&lt;/span&gt;animation-delay: 1.5s;&lt;span&gt;”&lt;/span&gt;语句删除，这时圆环左右两边的动画过程相同，且右边也没有延时，呈现出如图13所示的Loading动画效果。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060902334-1935618781.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图13  Loading动画效果（8）&lt;/p&gt;
&lt;p&gt;      若只将上面HTML文件中.loader:after的样式定义全删除（这样图形就变成一个实心圆，不再是一个圆环），其余部分保持不变，则呈现出如图14所示的Loading动画效果。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816060920194-937354630.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图14  Loading动画效果（9）&lt;/p&gt;
&lt;p&gt;      若将上面HTML文件中.loader:after的样式定义全删除后，再删除right .mask定义里的&lt;span&gt;“&lt;/span&gt;animation-name:rotate2;&lt;span&gt;”&lt;/span&gt;和&lt;span&gt;“&lt;/span&gt;animation-delay: 1.5s;&lt;span&gt;”&lt;/span&gt;语句，其余部分保持不变，则呈现出如图15所示的Loading动画效果。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1485495/202008/1485495-20200816061002712-1344429703.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图15  Loading动画效果（10）&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 22:10:00 +0000</pubDate>
<dc:creator>aTeacher</dc:creator>
<og:description>一些网站或者APP在加载新东西的时候，往往会给出一个好看有趣的Loading图，大部分的Loading样式都可以使用CSS3制作出来，它不仅比直接使用gif图简单方便，还能节省加载时间和空间。下面介绍</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cs-whut/p/13511414.html</dc:identifier>
</item>
<item>
<title>python操作Redis详解 - 嗨，阿良</title>
<link>http://www.cnblogs.com/fengting0913/p/13511383.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fengting0913/p/13511383.html</guid>
<description>&lt;p&gt;redis是一个key-value&lt;a href=&quot;http://baike.baidu.com/view/51839.htm&quot;&gt;存储系统&lt;/a&gt;。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(&lt;a href=&quot;http://baike.baidu.com/view/549479.htm&quot;&gt;链表&lt;/a&gt;)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些&lt;a href=&quot;http://baike.baidu.com/view/675645.htm&quot;&gt;数据类型&lt;/a&gt;都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。&lt;/p&gt;
&lt;h2 id=&quot;使用redis有哪些好处？&quot;&gt;使用Redis有哪些好处？&lt;/h2&gt;
&lt;p&gt;(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)&lt;/p&gt;
&lt;p&gt;(2) 支持丰富数据类型，支持string，list，set，sorted set，hash&lt;/p&gt;
&lt;p&gt;(3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行&lt;/p&gt;
&lt;p&gt;(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除&lt;/p&gt;
&lt;h2 id=&quot;redis相比memcached有哪些优势？&quot;&gt;redis相比memcached有哪些优势？&lt;/h2&gt;
&lt;p&gt;(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型&lt;/p&gt;
&lt;p&gt;(2) redis的速度比memcached快很多&lt;/p&gt;
&lt;p&gt;(3) redis可以持久化其数据&lt;/p&gt;
&lt;h2 id=&quot;redis常见性能问题和解决方案：&quot;&gt;redis常见性能问题和解决方案：&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;language-powershell&quot;&gt;(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件。

        - Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大              的，会间断性暂停服务，所以Master最好不要写内存快照。

        - Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，              AOF文件过大会影响Master重启的恢复速度。
                - Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过                  高，出现短暂服务暂停现象。

        总结：Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-powershell&quot;&gt;(2) Redis主从复制的性能问题：

        - 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内
    
    - 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &amp;lt;- Slave1 &amp;lt;- Slave2 &amp;lt;- Slave3...
        这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做              Master，其他不变。
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-powershell&quot;&gt;(3) 尽量避免在压力很大的主库上增加从库
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;过期数据淘汰策略&quot;&gt;过期数据淘汰策略&lt;/h2&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 &lt;strong&gt;6种数据淘汰策略&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;no-enviction（驱逐）：禁止驱逐数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;memcache与redis的区别都有哪些？&quot;&gt;Memcache与Redis的区别都有哪些？&lt;/h2&gt;
&lt;h3 id=&quot;1、存储方式&quot;&gt;1)、存储方式&lt;/h3&gt;
&lt;p&gt;Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。&lt;/p&gt;
&lt;p&gt;Redis有部份存在硬盘上，这样能保证数据的持久性。&lt;/p&gt;
&lt;h3 id=&quot;2、数据支持类型&quot;&gt;2)、数据支持类型&lt;/h3&gt;
&lt;p&gt;Memcache对数据类型支持相对简单。&lt;/p&gt;
&lt;p&gt;Redis有复杂的数据类型。&lt;/p&gt;
&lt;h3 id=&quot;3、value大小&quot;&gt;3)、value大小&lt;/h3&gt;
&lt;p&gt;redis最大可以达到1GB，而memcache只有1MB&lt;/p&gt;
&lt;h2 id=&quot;redis-最适合的场景&quot;&gt;redis 最适合的场景&lt;/h2&gt;
&lt;p&gt;Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-powershell&quot;&gt;如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：

 1、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。
 
 2、Redis支持数据的备份，即master-slave模式的数据备份。
 
 3、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;（1）会话缓存（session-cache）&quot;&gt;（1）会话缓存（Session Cache）&lt;/h3&gt;
&lt;p&gt;最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？&lt;/p&gt;
&lt;p&gt;幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。&lt;/p&gt;
&lt;h3 id=&quot;（2）全页缓存（fpc）&quot;&gt;（2）全页缓存（FPC）&lt;/h3&gt;
&lt;p&gt;除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。&lt;/p&gt;
&lt;p&gt;再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。&lt;/p&gt;
&lt;p&gt;此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。&lt;/p&gt;
&lt;h3 id=&quot;（3）队列&quot;&gt;（3）队列&lt;/h3&gt;
&lt;p&gt;Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。&lt;/p&gt;
&lt;p&gt;如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。&lt;/p&gt;
&lt;h3 id=&quot;（4），排行榜计数器&quot;&gt;（4），排行榜/计数器&lt;/h3&gt;
&lt;p&gt;Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：&lt;/p&gt;
&lt;p&gt;当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：&lt;/p&gt;
&lt;p&gt;ZRANGE user_scores 0 10 WITHSCORES&lt;/p&gt;
&lt;p&gt;Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。&lt;/p&gt;
&lt;h3 id=&quot;（5）、发布订阅&quot;&gt;（5）、发布/订阅&lt;/h3&gt;
&lt;p&gt;最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！&lt;/p&gt;
&lt;h2 id=&quot;一、redis基本使用&quot;&gt;一、Redis基本使用&lt;/h2&gt;
&lt;h3 id=&quot;1-redis安装&quot;&gt;(1) Redis安装&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;wget http://download.redis.io/releases/redis-3.0.6.tar.gz
tar xzf redis-3.0.6.tar.gz
cd redis-3.0.6
make
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;2-启动服务端&quot;&gt;(2) 启动服务端&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;src/redis-server
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3-启动客户端&quot;&gt;(3) 启动客户端&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;src/redis-cli
redis&amp;gt; set foo bar
OK
redis&amp;gt; get foo
&quot;bar&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二、python操作redis&quot;&gt;二、Python操作Redis&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;sudo pip install redis
or
sudo easy_install redis
or
源码安装
 
详见：https://github.com/WoLpH/redis-py
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;api使用&quot;&gt;API使用&lt;/h3&gt;
&lt;p&gt;redis-py 的API的使用可以分类为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;连接方式&lt;/li&gt;
&lt;li&gt;连接池&lt;/li&gt;
&lt;li&gt;操作
&lt;ul&gt;&lt;li&gt;String 操作&lt;/li&gt;
&lt;li&gt;Hash 操作&lt;/li&gt;
&lt;li&gt;List 操作&lt;/li&gt;
&lt;li&gt;Set 操作&lt;/li&gt;
&lt;li&gt;Sort Set 操作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;管道&lt;/li&gt;
&lt;li&gt;发布订阅&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;1、操作模式&quot;&gt;1、操作模式&lt;/h3&gt;
&lt;p&gt;redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import redis
 
r = redis.Redis(host='10.211.55.4', port=6379)
r.set('foo', 'Bar')
print r.get('foo')
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;2、连接池&quot;&gt;2、连接池&lt;/h3&gt;
&lt;p&gt;redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import redis
 
pool = redis.ConnectionPool(host='10.211.55.4', port=6379)
 
r = redis.Redis(connection_pool=pool)
r.set('foo', 'Bar')
print r.get('foo')
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3、操作&quot;&gt;3、操作&lt;/h3&gt;
&lt;h4 id=&quot;string操作&quot;&gt;String操作&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;redis中的String在在内存中按照一个name对应一个value来存储。如图：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/425762/201602/425762-20160222213200645-359371350.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;81&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;set(name, value, ex=None, px=None, nx=False, xx=False)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在Redis中设置值，默认，不存在则创建，存在则修改
# 参数：
     # ex，过期时间（秒）
     # px，过期时间（毫秒）
     # nx，如果设置为True，则只有name不存在时，当前set操作才执行
     # xx，如果设置为True，则只有name存在时，岗前set操作才执行
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;setnx(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;设置值，只有name不存在时，执行设置操作（添加）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;setex(name, value, time)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 设置值
# 参数：
    # time，过期时间（数字秒 或 timedelta对象）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;psetex(name, time_ms, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 设置值
# 参数：
    # time_ms，过期时间（数字毫秒 或 timedelta对象）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;**mset(*args, &lt;strong&gt;kwargs)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;批量设置值
如：
    mset(k1='v1', k2='v2')
    或
    mget({'k1': 'v1', 'k2': 'v2'})
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;获取值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;mget(keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;批量获取
如：
    mget('hi', 'aliang')
    或
    r.mget(['hi', 'aliang'])
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;getset(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;设置新值并获取原来的值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;getrange(key, start, end)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取子序列（根据字节获取，非字符）
# 参数：
    # key，根据键取值的键
    # start，起始位置（字节）
    # end，结束位置（字节）
# 如： &quot;嗨阿良&quot; ，0-3表示 &quot;嗨&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;setrange(name, offset, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）
# 参数：
    # offset，字符串的索引，字节（一个汉字三个字节）
    # value，要设置的值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;setbit(name, offset, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 对name对应值的二进制表示的位进行操作
 
# 参数：
    # name，redis的name
    # offset，位的索引（将值变换成二进制后再进行索引）
    # value，值只能是 1 或 0
 
# 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，
         那么字符串foo的二进制表示为：01100110 01101111 01101111
     所以，如果执行 setbit('n1', 7, 1)，则就会将第7位设置为1，
     那么最终二进制则变成 01100111 01101111 01101111，
     即：&quot;goo&quot;
 
# 扩展，转换二进制表示：
 
    source = &quot;foo&quot;
 
    for i in source:
        
        # ord(i)即表示将i代表的英文字符或者汉字按照ascii码的转化标准转换成二进制的数字
        num = ord(i)
        print bin(num).replace('b','')
 
    特别的，如果source是汉字 &quot;嗨阿良&quot;怎么办？
    答：对于utf-8，每一个汉字占 3 个字节，那么 &quot;嗨阿良&quot; 则有 9个字节
       对于汉字，for循环时候会按照 字节 迭代，那么在迭代时，将每一个字节转换 十进制数，然后再将十进制数转换成二进制
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;getbit(name, offset)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的值的二进制表示中的某位的值 （0或1）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;bitcount(key, start=None, end=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的值的二进制表示中 1 的个数
# 参数：
    # key，Redis的name
    # start，位起始位置
    # end，位结束位置
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;bitop(operation, dest, &lt;em&gt;keys)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值
 
# 参数：
    # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）
    # dest, 新的Redis的name
    # *keys,要查找的Redis的name
 
# 如：
    bitop(&quot;AND&quot;, 'new_name', 'n1', 'n2', 'n3')
    # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;strlen(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 返回name对应值的字节长度（一个汉字3个字节）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;incr(self, name, amount=1)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。
 
# 参数：
    # name,Redis的name
    # amount,自增数（必须是整数）
 
# 注：同incrby
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;incrbyfloat(self, name, amount=1.0)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。
 
# 参数：
    # name,Redis的name
    # amount,自增数（浮点型）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;decr(self, name, amount=1)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。
 
# 参数：
    # name,Redis的name
    # amount,自减数（整数）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;append(key, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在redis name对应的值后面追加内容
 
# 参数：
    key, redis的name
    value, 要追加的字符串
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;hash操作&quot;&gt;Hash操作&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;redis中Hash在内存中的存储格式如下图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/425762/201602/425762-20160223115506630-113443460.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;67&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hset(name, key, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# name对应的hash中设置一个键值对（不存在，则创建；否则，修改）
 
# 参数：
    # name，redis的name
    # key，name对应的hash中的key
    # value，name对应的hash中的value
 
# 注：
    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hmset(name, mapping)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的hash中批量设置键值对
 
# 参数：
    # name，redis的name
    # mapping，字典，如：{'k1':'v1', 'k2': 'v2'}
 
# 如：
    # r.hmset('xx', {'k1':'v1', 'k2': 'v2'})
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hget(name,key)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的hash中获取根据key获取value
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;hmget(name, keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的hash中获取多个key的值
 
# 参数：
    # name，reids对应的name
    # keys，要获取key集合，如：['k1', 'k2', 'k3']
    # *args，要获取的key，如：k1,k2,k3
 
# 如：
    # r.mget('xx', ['k1', 'k2'])
    # 或
    # print r.hmget('xx', 'k1', 'k2')
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hgetall(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;获取name对应hash的所有键值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hlen(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的hash中键值对的个数
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hkeys(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的hash中所有的key的值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hvals(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的hash中所有的value的值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hexists(name, key)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 检查name对应的hash是否存在当前传入的key
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hdel(name,*keys)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 将name对应的hash中指定key的键值对删除
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hincrby(name, key, amount=1)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 自增name对应的hash中的指定key的值，不存在则创建key=amount
# 参数：
    # name，redis中的name
    # key， hash对应的key
    # amount，自增数（整数）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hincrbyfloat(name, key, amount=1.0)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 自增name对应的hash中的指定key的值，不存在则创建key=amount
 
# 参数：
    # name，redis中的name
    # key， hash对应的key
    # amount，自增数（浮点数）
 
# 自增name对应的hash中的指定key的值，不存在则创建key=amount
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hscan(name, cursor=0, match=None, count=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆
 
# 参数：
    # name，redis的name
    # cursor，游标（基于游标分批取获取数据）
    # match，匹配指定key，默认None 表示所有的key
    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数
 
# 如：
    # 第一次：cursor1, data1 = r.hscan('xx', cursor=0, match=None, count=None)
    # 第二次：cursor2, data1 = r.hscan('xx', cursor=cursor1, match=None, count=None)
    # ...
    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;hscan_iter(name, match=None, count=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 利用yield封装hscan创建生成器，实现分批去redis中获取数据
 
# 参数：
    # match，匹配指定key，默认None 表示所有的key
    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数
 
# 如：
    # for item in r.hscan_iter('xx'):
    #     print item
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;list操作&quot;&gt;List操作&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;redis中的List在在内存中按照一个name对应一个List来存储。如图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/425762/201602/425762-20160223172249115-189393001.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;64&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;lpush(name,values)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的list中添加元素，每个新的元素都添加到列表的最左边
 
# 如：
    # r.lpush('oo', 11,22,33)
    # 保存顺序为: 33,22,11
 
# 扩展：
    # rpush(name, values) 表示从右向左操作
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;lpushx(name,value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边
 
# 更多：
    # rpushx(name, value) 表示从右向左操作
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;llen(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# name对应的list元素的个数
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;linsert(name, where, refvalue, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的列表的某一个值前或后插入一个新值
 
# 参数：
    # name，redis的name
    # where，BEFORE或AFTER
    # refvalue，标杆值，即：在它前后插入数据
    # value，要插入的数据
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;r.lset(name, index, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 对name对应的list中的某一个索引位置重新赋值
 
# 参数：
    # name，redis的name
    # index，list的索引位置
    # value，要设置的值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;r.lrem(name, value, num)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的list中删除指定的值
 
# 参数：
    # name，redis的name
    # value，要删除的值
    # num，  num=0，删除列表中所有的指定值；
           # num=2,从前到后，删除2个；
           # num=-2,从后向前，删除2个
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;lpop(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素
 
# 更多：
    # rpop(name) 表示从右向左操作
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;lindex(name, index)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;在name对应的列表中根据索引获取列表元素
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;lrange(name, start, end)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的列表分片获取数据
# 参数：
    # name，redis的name
    # start，索引的起始位置
    # end，索引结束位置
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ltrim(name, start, end)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的列表中移除没有在start-end索引之间的值
# 参数：
    # name，redis的name
    # start，索引的起始位置
    # end，索引结束位置
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;rpoplpush(src, dst)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边
# 参数：
    # src，要取数据的列表的name
    # dst，要添加数据的列表的name
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;blpop(keys, timeout)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 将多个列表排列，按照从左到右去pop对应列表的元素
 
# 参数：
    # keys，redis的name的集合
    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞
 
# 更多：
    # r.brpop(keys, timeout)，从右向左获取数据
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;brpoplpush(src, dst, timeout=0)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧
 
# 参数：
    # src，取出并要移除元素的列表对应的name
    # dst，要插入元素的列表对应的name
    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;自定义增量迭代&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：
    # 1、获取name对应的所有列表
    # 2、循环列表
# 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：
 
def list_iter(name):
    &quot;&quot;&quot;
    自定义redis列表增量迭代
    :param name: redis中的name，即：迭代name对应的列表
    :return: yield 返回 列表元素
    &quot;&quot;&quot;
    list_count = r.llen(name)
    for index in xrange(list_count):
        yield r.lindex(name, index)
 
# 使用
for item in list_iter('pp'):
    print item
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;set操作&quot;&gt;Set操作&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Set集合就是不允许重复的列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;sadd(name,values)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# name对应的集合中添加元素
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;scard(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;获取name对应的集合中元素个数
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;sdiff(keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;在第一个name对应的集合中且不在其他name对应的集合的元素集合
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;sdiffstore(dest, keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;sinter(keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取多一个name对应集合的并集
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;sinterstore(dest, keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;sismember(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 检查value是否是name对应的集合的成员
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;smembers(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的集合的所有成员
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;smove(src, dst, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 将某个成员从一个集合中移动到另外一个集合
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;spop(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 从集合的右侧（尾部）移除一个成员，并将其返回
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;srandmember(name, numbers)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 从name对应的集合中随机获取 numbers 个元素
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;srem(name, values)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的集合中删除某些值
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;sunion(keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取多一个name对应的集合的并集
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;*&lt;em&gt;sunionstore(dest,keys, &lt;em&gt;args)&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;sscan(name, cursor=0, match=None, count=None)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sscan_iter(name, match=None, count=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;有序集合&quot;&gt;有序集合&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;75&quot;&gt;
&lt;ul&gt;&lt;li&gt;**zadd(name, *args, &lt;strong&gt;kwargs)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 在name对应的有序集合中添加元素
# 如：
     # zadd('zz', 'n1', 1, 'n2', 2)
     # 或
     # zadd('zz', n1=11, n2=22)
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zcard(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的有序集合元素的数量
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zcount(name, min, max)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应的有序集合中分数 在 [min,max] 之间的个数
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zincrby(name, value, amount)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 自增name对应的有序集合的 name 对应的分数
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;r.zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 按照索引范围获取name对应的有序集合的元素
 
# 参数：
    # name，redis的name
    # start，有序集合索引起始位置（非分数）
    # end，有序集合索引结束位置（非分数）
    # desc，排序规则，默认按照分数从小到大排序
    # withscores，是否获取元素的分数，默认只获取元素的值
    # score_cast_func，对分数进行数据转换的函数
 
# 更多：
    # 从大到小排序
    # zrevrange(name, start, end, withscores=False, score_cast_func=float)
 
    # 按照分数范围获取name对应的有序集合的元素
    # zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)
    # 从大到小排序
    # zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zrank(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取某个值在 name对应的有序集合中的排行（从 0 开始）
 
# 更多：
    # zrevrank(name, value)，从大到小排序
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zrangebylex(name, min, max, start=None, num=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员
# 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大
 
# 参数：
    # name，redis的name
    # min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间
    # min，右区间（值）
    # start，对结果进行分片处理，索引位置
    # num，对结果进行分片处理，索引后面的num个元素
 
# 如：
    # ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga
    # r.zrangebylex('myzset', &quot;-&quot;, &quot;[ca&quot;) 结果为：['aa', 'ba', 'ca']
 
# 更多：
    # 从大到小排序
    # zrevrangebylex(name, max, min, start=None, num=None)
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zrem(name, values)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 删除name对应的有序集合中值是values的成员
 
# 如：zrem('zz', ['s1', 's2'])
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zremrangebyrank(name, min, max)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 根据排行范围删除
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zremrangebyscore(name, min, max)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 根据分数范围删除
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zremrangebylex(name, min, max)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 根据值返回删除
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zscore(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应有序集合中 value 对应的分数
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zinterstore(dest, keys, aggregate=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作

# aggregate的值为:  SUM  MIN  MAX
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zunionstore(dest, keys, aggregate=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作

# aggregate的值为:  SUM  MIN  MAX
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;zscan(name, cursor=0, match=None, count=None, score_cast_func=float)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zscan_iter(name, match=None, count=None,score_cast_func=float)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作　
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;其他常用操作&quot;&gt;其他常用操作&lt;/h4&gt;
&lt;blockquote readability=&quot;23&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;delete(*names)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 根据删除redis中的任意数据类型
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;exists(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 检测redis的name是否存在
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;keys(pattern='*')&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 根据模型获取redis的name
 
# 更多：
    # KEYS * 匹配数据库中所有 key 。
    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。
    # KEYS h*llo 匹配 hllo 和 heeeeello 等。
    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;expire(name ,time)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 为某个redis的某个name设置超时时间
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;rename(src, dst)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 对redis的name重命名为
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;move(name, db)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 将redis的某个值移动到指定的db下
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;randomkey()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 随机获取一个redis的name（不删除）
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;type(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 获取name对应值的类型
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;scan(cursor=0, match=None, count=None)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scan_iter(match=None, count=None)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# 同字符串操作，用于增量迭代获取key　
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;4、管道&quot;&gt;4、管道&lt;/h3&gt;
&lt;p&gt;redis-py默认在执行每次请求都会创建（连接池申请连接）和断开（归还连接池）一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import redis
 
pool = redis.ConnectionPool(host='10.211.55.4', port=6379)
 
r = redis.Redis(connection_pool=pool)
 
# pipe = r.pipeline(transaction=False)
pipe = r.pipeline(transaction=True)
 
pipe.set('name', 'alex')
pipe.set('role', 'sb')
 
pipe.execute()
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;5、发布订阅&quot;&gt;5、发布订阅&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/425762/201601/425762-20160121152411125-1838441844.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Demo如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RedisHelper：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
# -*- coding:utf-8 -*-

import redis


class RedisHelper:

    def __init__(self):
        self.__conn = redis.Redis(host='10.211.55.4')
        self.chan_sub = 'fm104.5'
        self.chan_pub = 'fm104.5'

    def public(self, msg):
        self.__conn.publish(self.chan_pub, msg)
        return True

    def subscribe(self):
        pub = self.__conn.pubsub()
        pub.subscribe(self.chan_sub)
        pub.parse_response()
        return pub

RedisHelper
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;订阅者：&quot;&gt;订阅者：&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from monitor.RedisHelper import RedisHelper
 
obj = RedisHelper()
redis_sub = obj.subscribe()
 
while True:
    msg= redis_sub.parse_response()
    print msg
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;发布者：&quot;&gt;发布者：&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from monitor.RedisHelper import RedisHelper
 
obj = RedisHelper()
obj.public('hello')
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;更多参见：&quot;&gt;更多参见：&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/andymccurdy/redis-py/&quot;&gt;https://github.com/andymccurdy/redis-py/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://doc.redisfans.com/&quot;&gt;http://doc.redisfans.com/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 19:59:00 +0000</pubDate>
<dc:creator>嗨，阿良</dc:creator>
<og:description>python操作Redis详解</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/fengting0913/p/13511383.html</dc:identifier>
</item>
<item>
<title>记录 | 阿里云轻量应用服务器无法远程连接 - Cindy's</title>
<link>http://www.cnblogs.com/cindycindy/p/13511174.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cindycindy/p/13511174.html</guid>
<description>&lt;h3 id=&quot;问题描述：&quot;&gt;问题描述：&lt;/h3&gt;
&lt;p&gt;小白入手阿里服务器，欣喜若狂，想要把文件发到服务器上进行相关部署但.....居然连不上&lt;/p&gt;
&lt;p&gt;先根据阿里官方的文档中的建议进行了连接尝试，想用WinSCP进行连接，但怎么也连不上（不过还是要夸一句WinSCP界面还挺好看哈哈&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/60132.html?spm=a2c4g.11186631.2.4.3ef45949tEwbvx&quot;&gt;https://help.aliyun.com/knowledge_detail/60132.html?spm=a2c4g.11186631.2.4.3ef45949tEwbvx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又尝试用Windows自带工具 &lt;code&gt;mstsc&lt;/code&gt;连接，还是不行。但是这次有错误提示，根据提示，我找到了一篇文章救了老命！！&lt;/p&gt;
&lt;h3 id=&quot;我的报错：身份验证错误-要求函数不受支持-这可能是由于credssp加密数据库修正&quot;&gt;我的报错：身份验证错误 要求函数不受支持 这可能是由于CredSSP加密数据库修正&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2109521/202008/2109521-20200816002833062-2029897622.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/github_37567324/article/details/106121615&quot;&gt;https://blog.csdn.net/github_37567324/article/details/106121615&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h3 id=&quot;解决方法：&quot;&gt;解决方法：&lt;/h3&gt;
&lt;p&gt;本问题只适用于windows远程桌面提示“出现身份验证错误 要求函数不受支持 这可能是由于CredSSP加密数据库修正”&lt;/p&gt;
&lt;p&gt;前一天远程桌面正常，次日发现突然不能用了。刚出现这个问题的时候我也是按照网上的说法去修改本地策略组中的“加密Oracle修正”去操作，将加密Oracle修正启用并将保护级别设置为易受攻击，但是我想要的结果并没有出现，依旧报这个错误，远程桌面连接不上，所以我就尝试另一种解决方法，那就是修改注册表。&lt;/p&gt;
&lt;p&gt;首先打开注册表编辑器，win+R输入regedit 打开注册表，找到\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters这一项，此时我发现我的电脑里面居然没有CredSSP这项（心中顿时十万只草泥马奔腾而过），既然自带没有这一项，那么咱们就自己手动改添加不就行了，真是的……&lt;/p&gt;
&lt;p&gt;找到\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System目录，在System上右键单击选择新建 》 项，在名称中输入CredSSP，在CredSSP上右键单击选择 新建》项 名称中输入Parameters确定，在Parameters上右键单击新建》DWORD（32位）值（D）修改名称为AllowEncryptionOracle 。在AllowEncryptionOracle 上右键单击选择修改，将“数值数据（V）”改为2，此时确定，关闭所有重新打开mstsc连接发现可以用了。&lt;/p&gt;
&lt;h3 id=&quot;效果：&quot;&gt;效果：&lt;/h3&gt;
&lt;p&gt;按照上述方法添加注册表之后！真的可以用mstsc远程连接了，但是WinSCP还是不行...【待解决】&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2109521/202008/2109521-20200816002029506-1814251613.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 16:21:00 +0000</pubDate>
<dc:creator>Cindy's</dc:creator>
<og:description>问题描述： 小白入手阿里服务器，欣喜若狂，想要把文件发到服务器上进行相关部署但.....居然连不上 先根据阿里官方的文档中的建议进行了连接尝试，想用WinSCP进行连接，但怎么也连不上（不过还是要夸一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cindycindy/p/13511174.html</dc:identifier>
</item>
<item>
<title>机器为什么能够学习？ - 分析101</title>
<link>http://www.cnblogs.com/analysis101/p/13511090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/analysis101/p/13511090.html</guid>
<description>&lt;p&gt;本系列是台湾大学资讯工程系林軒田（Hsuan-Tien Lin）教授开设的《&lt;em&gt;机器学习基石&lt;/em&gt;》课程的梳理。重在梳理，而非详细的笔记，因此可能会略去一些细节。&lt;/p&gt;
&lt;p&gt;该课程共16讲，分为4个部分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;机器什么时候能够学习？（&lt;strong&gt;When&lt;/strong&gt; Can Machines Learn？）&lt;/li&gt;
&lt;li&gt;机器为什么能够学习？（&lt;strong&gt;Why&lt;/strong&gt; Can Machines Learn？）&lt;/li&gt;
&lt;li&gt;机器怎样学习？（&lt;strong&gt;How&lt;/strong&gt; Can Machines Learn？）&lt;/li&gt;
&lt;li&gt;机器怎样可以学得更好？（&lt;strong&gt;How&lt;/strong&gt; Can Machines Learn &lt;strong&gt;Better&lt;/strong&gt;？）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;本文是&lt;strong&gt;第2部分&lt;/strong&gt;，对应原课程中的&lt;strong&gt;4-8讲&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本部分的主要内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用案例引出学习可行性的疑问；&lt;/li&gt;
&lt;li&gt;详细介绍VC维理论，它给出了机器学习的可靠性保证；&lt;/li&gt;
&lt;li&gt;介绍误差的度量，以及对误差权重不同的情况的处理方法。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;1-学习可行性的疑问&quot;&gt;1 学习可行性的疑问&lt;/h2&gt;
&lt;p&gt;先来一个小学奥数题/公务员考试题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-b810a14cf99b66e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实这个题没有标准答案，以下两种解答都是对的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对称为&lt;span class=&quot;math inline&quot;&gt;\(+1\)&lt;/span&gt;，非对称为&lt;span class=&quot;math inline&quot;&gt;\(-1\)&lt;/span&gt;，因此答案是&lt;span class=&quot;math inline&quot;&gt;\(+1\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;最左上角的格子白色为&lt;span class=&quot;math inline&quot;&gt;\(+1\)&lt;/span&gt;，黑色为&lt;span class=&quot;math inline&quot;&gt;\(-1\)&lt;/span&gt;，因此答案是&lt;span class=&quot;math inline&quot;&gt;\(-1\)&lt;/span&gt;；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因此，选择不同的规则，你会获得不同的答案。那么，如果给你一些历史数据，机器学习出某种规则，是否也会遇到这样的情况呢？&lt;/p&gt;
&lt;h2 id=&quot;2-机器学习的可靠性保证&quot;&gt;2 机器学习的可靠性保证&lt;/h2&gt;
&lt;h3 id=&quot;21-hoeffding不等式&quot;&gt;2.1 Hoeffding不等式&lt;/h3&gt;
&lt;p&gt;来看另一个问题：有一个罐子，里面装有许许多多黄色和绿色的小球，该如何估计黄球的比例？&lt;/p&gt;
&lt;p&gt;很简单，抽样就行了。抽出一部分样本，计算得到样本中的黄球比例&lt;span class=&quot;math inline&quot;&gt;\(\nu\)&lt;/span&gt;，用这个比例作为罐子中的黄球比例&lt;span class=&quot;math inline&quot;&gt;\(\mu\)&lt;/span&gt;的估计即可。这样的估计准不准呢？在统计学中，有&lt;strong&gt;Hoeffding不等式&lt;/strong&gt;给出准确率的界限：&lt;/p&gt;
&lt;p&gt;\[\mathbb{P}[\vert\nu-\mu\vert&amp;gt;\epsilon]\le 2\exp{(-2\epsilon^2 N)} \]&lt;/p&gt;
&lt;p&gt;其中&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;为抽样的样本个数。这个式子的意思是，&lt;span class=&quot;math inline&quot;&gt;\(\nu\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(\mu\)&lt;/span&gt;相差较远的概率会有一个上限，在大样本下，这个上限会比较小，因此&lt;span class=&quot;math inline&quot;&gt;\(\nu=\mu\)&lt;/span&gt;可以叫做概率近似正确（&lt;strong&gt;PAC&lt;/strong&gt;，probably approximately correct）。&lt;/p&gt;
&lt;h3 id=&quot;22-机器学习中的hoeffding不等式&quot;&gt;2.2 机器学习中的Hoeffding不等式&lt;/h3&gt;
&lt;p&gt;现在将这个过程类比到机器学习中。罐子中的小球对应于&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{X}\)&lt;/span&gt;中的单个数据&lt;span class=&quot;math inline&quot;&gt;\(\mathbf{x}\)&lt;/span&gt;，给定假设集中的一个假设&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;，罐子中黄球的比例就对应于&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{X}\)&lt;/span&gt;中使得&lt;span class=&quot;math inline&quot;&gt;\(h(\mathbf{x})=f(\mathbf{x})\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(\mathbf{x}\)&lt;/span&gt;的比例。现在抽取出一部分样本，这个样本对应于现有的数据集&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;，我们可以很容易地知道对&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;中每一个数据&lt;span class=&quot;math inline&quot;&gt;\((\mathbf{x}_n,y_n)\)&lt;/span&gt;是否有&lt;span class=&quot;math inline&quot;&gt;\(h(\mathbf{x}_n)=y_n\)&lt;/span&gt;，若相等，对应的小球为黄色，反之为绿色。我们的目的，是要知道在整个&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{X}\)&lt;/span&gt;中满足&lt;span class=&quot;math inline&quot;&gt;\(h(\mathbf{x})=f(\mathbf{x})\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(\mathbf{x}\)&lt;/span&gt;的比例有多少。&lt;/p&gt;
&lt;p&gt;若&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;足够大，且&lt;span class=&quot;math inline&quot;&gt;\(\mathbf{x}_n\)&lt;/span&gt;为i.i.d.，&lt;strong&gt;对于某个固定的&lt;/strong&gt;&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;来说，就可以用已知的&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{in}}(h)=\dfrac{1}{N}\sum\limits_{n=1}^{N} \mathbf{1}_{[h(\mathbf{x}_n)\ne y_n]}\)&lt;/span&gt;去推断&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{out}}(h)=\mathop{\mathcal{E}}\limits_{\mathbf{x}\sim P}\mathbf{1}_{[h(\mathbf{x})\ne f(\mathbf{x})]}\)&lt;/span&gt;，从而判断该&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;的表现如何，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-b677be59ff13109a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据Hoeffding不等式，就是&lt;/p&gt;
&lt;p&gt;\[\mathbb{P}[\vert E_{\text{in}}(h)-E_{\text{out}}(h)\vert&amp;gt;\epsilon]\le 2\exp{(-2\epsilon^2 N)} \]&lt;/p&gt;
&lt;p&gt;如果&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{in}}(h)\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{out}}(h)\)&lt;/span&gt;足够接近，并且&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{in}}(h)\)&lt;/span&gt;足够小，这就能保证&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{out}}(h)\)&lt;/span&gt;足够小，也就能判断出对于抽样过程&lt;span class=&quot;math inline&quot;&gt;\(P\)&lt;/span&gt;，有&lt;span class=&quot;math inline&quot;&gt;\(h\approx f\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;但是，这&lt;strong&gt;只能用来判断某个&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;是否足够好&lt;/strong&gt;。如果现在是用算法&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{A}\)&lt;/span&gt;从假设集&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;中选出一个&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;，再套用上面的不等式，就会有问题。试想一下，假设有150个人，每人丢5次硬币，就有超过99%的概率会出现有某个丢5次硬币都是正面的人，这能说明他的丢硬币技术比其他人高吗？如果选择他作为我们的“&lt;span class=&quot;math inline&quot;&gt;\(g\)&lt;/span&gt;”，能保证他以后再去丢硬币，得到正面的概率也比其他人更大吗？&lt;/p&gt;
&lt;p&gt;同理，如果是从&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;中选出一个在样本&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;内误差最小的&lt;span class=&quot;math inline&quot;&gt;\(g\)&lt;/span&gt;，能保证它在&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;外也是更好的吗？想要得到这样的保证，还需对不等式做一些修正。&lt;/p&gt;
&lt;p&gt;对每个&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;，都可能会有一些&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;，使得&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;在它上面的&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{in}}(h)\)&lt;/span&gt;和真正的&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{out}}(h)\)&lt;/span&gt;相差很大，把这种&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;称作“坏的”，Hoeffding不等式本质上是保证抽到坏的&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;的概率有一个上限。记&lt;span class=&quot;math inline&quot;&gt;\(\vert\mathcal{H}\vert=M\)&lt;/span&gt;，即共有&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;，我们想要保证的是不管最后&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{A}\)&lt;/span&gt;选出了哪个，&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;是“坏的”的概率都有较小的上限，因此，要计算的应该是对至少一个&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;来说&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;是“坏的”的概率：&lt;/p&gt;
&lt;p&gt;\[\begin{aligned} &amp;amp;\mathbb{P}_{\mathcal{D}}[(\textbf{BAD } \mathcal{D} \text{ for } h_1) \textbf{ or } (\textbf{BAD } \mathcal{D} \text{ for } h_2) \textbf{ or } \ldots \textbf{ or } (\textbf{BAD } \mathcal{D} \text{ for } h_M) ]\\ \le&amp;amp; \mathbb{P}_{\mathcal{D}}[\textbf{BAD } \mathcal{D} \text{ for } h_1] + \mathbb{P}_{\mathcal{D}}[\textbf{BAD } \mathcal{D} \text{ for } h_2] +\ldots+\mathbb{P}_{\mathcal{D}}[\textbf{BAD } \mathcal{D} \text{ for } h_M]\\ \le&amp;amp; 2\exp{(-2\epsilon^2 N)}+2\exp{(-2\epsilon^2 N)}+\ldots+2\exp{(-2\epsilon^2 N)}\\ =&amp;amp; 2M\exp{(-2\epsilon^2 N)} \end{aligned} \]&lt;/p&gt;
&lt;p&gt;这才是&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{A}\)&lt;/span&gt;选出来的&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{in}}(h)\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{out}}(h)\)&lt;/span&gt;距离的上限。但在上面的过程中，因为对事件的并集直接用了加的运算，这个上限被放得太大了，由于不同的&lt;span class=&quot;math inline&quot;&gt;\(h\)&lt;/span&gt;对应的“坏的”&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;很可能有很大重叠，因此真实的上限应该要小得多。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-d6146fb31ce4c060.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另外，&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;如果是有限的，根据上式，我们还是可以通过增大&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;来保证&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{in}}(h)\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(E_{\text{out}}(h)\)&lt;/span&gt;足够接近，但如果&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;是无限的呢？如在PLA中，系数的取值就可以是无限多个，因此PLA的&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;是无穷大的。&lt;/p&gt;
&lt;h3 id=&quot;23-vc维&quot;&gt;2.3 VC维&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;为无穷大时，还是有办法的。尽管PLA的&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;是无穷大，但其实，我们可以对它的&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;中的元素进行分类，只要样本个数是有限的，它的类别就是有限的。比如在只有一个样本的情况中，二维PLA的&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;中的元素（就是二维平面上的所有直线）可以简单分为两类，一类是把该样本点分为正的，一类是把该样本点分为负的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-190fe7a5186a5b79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而在两个样本的情况中，&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;中的元素可以分为4类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-ae65e9798ffc0034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三个样本时可分为8类：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-938e0865c409baaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但若3个点共线，那么只有6类：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-08a55a1df5374059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而当有4个样本时，&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;中的元素最多只能分成14类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-cba6d7170e86b971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这说明，在PLA中，有&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;个样本时，有效的&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;会小于等于&lt;span class=&quot;math inline&quot;&gt;\(2^N\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来，引入几个概念：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;二分（Dichotomies）&lt;/strong&gt;：对&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;个样本，每个样本都有正负两种可能，将所有样本组成的每一种可能称为一个dichotomy，dichotomies的集合可记为&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}(\mathbf{x}_1, \mathbf{x}_2, \ldots,\mathbf{x}_N)\)&lt;/span&gt;，显然，集合中元素个数的上限是&lt;span class=&quot;math inline&quot;&gt;\(2^N\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成长函数（Growth Function）&lt;/strong&gt;：定义成长函数&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)=\max\limits_{\mathbf{x}_1, \mathbf{x}_2, \ldots,\mathbf{x}_N \in \mathcal{X}} \vert \mathcal{H}(\mathbf{x}_1, \mathbf{x}_2, \ldots,\mathbf{x}_N) \vert\)&lt;/span&gt;，它的上限是&lt;span class=&quot;math inline&quot;&gt;\(2^N\)&lt;/span&gt;，对于大多数模型（如二维感知机）的&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;来说，&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)\)&lt;/span&gt;比&lt;span class=&quot;math inline&quot;&gt;\(2^N\)&lt;/span&gt;小，仅为多项式大小；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打散（Shatter）&lt;/strong&gt;：如果&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;可以完全实现&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;个样本的&lt;span class=&quot;math inline&quot;&gt;\(2^N\)&lt;/span&gt;种dichotomies，则称&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;个点可被&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;打散；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;突破点（Break Point）&lt;/strong&gt;：若&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;个点无论如何也无法被&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;打散，则称&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;为&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;的break point，根据定义，所有比&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;大的整数也都会成为break points，对于二维感知机来说，从4开始就是它的break point。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下来就是要找到，break point和&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)\)&lt;/span&gt;的关系。&lt;/p&gt;
&lt;p&gt;我们继续引入&lt;strong&gt;界限函数（Bounding Function）&lt;/strong&gt;的概念：&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)\)&lt;/span&gt;，它是当最小的break point为&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;时的&lt;strong&gt;最大可能&lt;/strong&gt;&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)\)&lt;/span&gt;。那么，该如何计算它或者它的上限？&lt;/p&gt;
&lt;p&gt;首先，当&lt;span class=&quot;math inline&quot;&gt;\(k=2\)&lt;/span&gt;时，表示任意两个点都不能被打散，因此当&lt;span class=&quot;math inline&quot;&gt;\(N=2\)&lt;/span&gt;时有&lt;span class=&quot;math inline&quot;&gt;\(B(2,2)=3\)&lt;/span&gt;，即最多能列举出3种dichotomies（4种就是这两个点被打散了），当&lt;span class=&quot;math inline&quot;&gt;\(N=3\)&lt;/span&gt;时有&lt;span class=&quot;math inline&quot;&gt;\(B(3,2)=4\)&lt;/span&gt;（穷举法可知）。而当&lt;span class=&quot;math inline&quot;&gt;\(k=1\)&lt;/span&gt;时，由于任何一个点都不能被打散，因此只能有一种dichotomy，即&lt;span class=&quot;math inline&quot;&gt;\(B(N,1)=1\)&lt;/span&gt;。另外，如果&lt;span class=&quot;math inline&quot;&gt;\(k&amp;gt;N\)&lt;/span&gt;，由于小于&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;个样本点都能被打散，因此会有&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)=2^N\)&lt;/span&gt;。而如果&lt;span class=&quot;math inline&quot;&gt;\(N=k\)&lt;/span&gt;，那么只需在&lt;span class=&quot;math inline&quot;&gt;\(2^N\)&lt;/span&gt;个被打散的点中拿掉一种dichotomy，就能满足这&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;个点不被打散的概念了，因此有&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)=2^N-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;到目前为止，在下面这张函数表中还有一部分没有计算：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-451ba3a52b719f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不妨先来看&lt;span class=&quot;math inline&quot;&gt;\(B(4,3)\)&lt;/span&gt;该如何计算。如果用穷举法，可以得出&lt;span class=&quot;math inline&quot;&gt;\(B(4,3)=11\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-4caecfca90ecc964.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;观察这11种dichotomies发现，它们可以分成两组，其中一组的前3个点是有重复的，它们成为不同的dichotomies仅仅是因为&lt;span class=&quot;math inline&quot;&gt;\(\mathbf{x}_4\)&lt;/span&gt;不同，而另一组的前3个点没有重复。&lt;/p&gt;
&lt;p&gt;如果把前3个点有重复的8种dichotomies记为&lt;span class=&quot;math inline&quot;&gt;\(2\alpha\)&lt;/span&gt;（只看前3个点就是&lt;span class=&quot;math inline&quot;&gt;\(\alpha\)&lt;/span&gt;种），后3种记为&lt;span class=&quot;math inline&quot;&gt;\(\beta\)&lt;/span&gt;，那么就有&lt;span class=&quot;math inline&quot;&gt;\(2\alpha+\beta=11\)&lt;/span&gt;。而其实，&lt;span class=&quot;math inline&quot;&gt;\(B(4,3)\)&lt;/span&gt;无非就是比&lt;span class=&quot;math inline&quot;&gt;\(B(3,\cdot)\)&lt;/span&gt;多了一个点，假设现在把最后一个点去掉，那么前3个点只可能有&lt;span class=&quot;math inline&quot;&gt;\(\alpha+\beta\)&lt;/span&gt;种dichotomies（因为第一组&lt;span class=&quot;math inline&quot;&gt;\(2\alpha\)&lt;/span&gt;种是前面3个点各重复两次，因此需要剔除一半），由于&lt;span class=&quot;math inline&quot;&gt;\(B(4,3)\)&lt;/span&gt;中任意3个点都不能被打散，因此前3个点也必须不能被打散，所以有&lt;span class=&quot;math inline&quot;&gt;\(\alpha+\beta\le B(3,3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;另一方面，由于&lt;span class=&quot;math inline&quot;&gt;\(2\alpha\)&lt;/span&gt;组中的4个点中，任意3个点都不能被打散，而第4个点是在每一组前3个点固定的情况下取正/负，因此前3个点中的任意2个点都不能被打散（否则在加入第4个点后就会有3个点被打散）。因此，必须要保证&lt;span class=&quot;math inline&quot;&gt;\(\alpha\le B(3,2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;由此可知，&lt;span class=&quot;math inline&quot;&gt;\(B(4,3)=2\alpha+\beta \le B(3,3)+B(3,2)\)&lt;/span&gt;，以此类推，有&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)\le B(N-1,k)+B(N-1,k-1)\)&lt;/span&gt;，最终结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-07dc6596942bfc18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用数学归纳法即可证明：&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)\le \sum\limits_{i=0}^{k-1}\binom{N}{i}\)&lt;/span&gt;，具体过程在此略过。事实上，可以证明得&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)=\sum\limits_{i=0}^{k-1}\binom{N}{i}\)&lt;/span&gt;，具体的数学过程较复杂，课程中也略过了。该式说明，&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)\)&lt;/span&gt;中成长最快的一项最多就是&lt;span class=&quot;math inline&quot;&gt;\(N^{k-1}\)&lt;/span&gt;的成长速度。&lt;/p&gt;
&lt;p&gt;由&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)\)&lt;/span&gt;的定义，只要break point &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;存在，那么&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)\)&lt;/span&gt;的上限就是&lt;span class=&quot;math inline&quot;&gt;\(B(N,k)\)&lt;/span&gt;，也因此，&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)\)&lt;/span&gt;中成长最快的一项最多就是&lt;span class=&quot;math inline&quot;&gt;\(N^{k-1}\)&lt;/span&gt;的成长速度。&lt;/p&gt;
&lt;p&gt;在有了&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)\)&lt;/span&gt;后，想用它取代&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;，还需要做一些处理，具体在此略过。最后可以得到的是Vapnik-Chervonenkis（VC） bound：&lt;/p&gt;
&lt;p&gt;\[\mathbb{P}[\exists h \in \mathcal{H} \text{ s.t. }\vert E_{\text{in}}(h)-E_{\text{out}}(h)\vert&amp;gt;\epsilon]\le 4 m_{\mathcal{H}}(2N)\exp{(-\dfrac{1}{8}\epsilon^2 N)} \]&lt;/p&gt;
&lt;p&gt;定义&lt;strong&gt;VC维（VC dimension）&lt;/strong&gt;&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}(\mathcal{H})\)&lt;/span&gt;为满足&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)=2^N\)&lt;/span&gt;的最大的&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;，也即&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;能打散的最大的点的个数，或最小的break point减1。当&lt;span class=&quot;math inline&quot;&gt;\(N\ge2\)&lt;/span&gt;且&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}\ge 2\)&lt;/span&gt;时，有&lt;span class=&quot;math inline&quot;&gt;\(m_{\mathcal{H}}(N)\le N^{d_{\text{vc}}}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于&lt;span class=&quot;math inline&quot;&gt;\(d\)&lt;/span&gt;维感知机模型来说，有&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}=d+1\)&lt;/span&gt;（证明略）。只要&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}\)&lt;/span&gt;是有限的，就可以完成泛化。&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}(\mathcal{H})\)&lt;/span&gt;就相当于是&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{H}\)&lt;/span&gt;的powerfulness。&lt;/p&gt;
&lt;h3 id=&quot;24-vc-bound与模型复杂度惩罚&quot;&gt;2.4 VC Bound与模型复杂度惩罚&lt;/h3&gt;
&lt;p&gt;对于&lt;span class=&quot;math inline&quot;&gt;\(g=\mathcal{A}(\mathcal{D})\in \mathcal{H}\)&lt;/span&gt;，如果&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{D}\)&lt;/span&gt;在统计上足够大，有&lt;/p&gt;
&lt;p&gt;\[\mathbb{P}[\vert E_{\text{in}}(g)-E_{\text{out}}(g)\vert&amp;gt;\epsilon]\le 4 (2N)^{d_{\text{vc}}} \exp{(-\dfrac{1}{8}\epsilon^2 N)} \]&lt;/p&gt;
&lt;p&gt;不等式左侧表示“坏的”的几率。若将不等式右边记为&lt;span class=&quot;math inline&quot;&gt;\(\delta\)&lt;/span&gt;，可将&lt;span class=&quot;math inline&quot;&gt;\(\epsilon\)&lt;/span&gt;反表示为&lt;span class=&quot;math inline&quot;&gt;\(\epsilon=\sqrt{\dfrac{8}{N}\ln{\dfrac{4(2N)^{d_{\text{vc}}}}{\delta}}}=\Omega(N,\mathcal{H},\delta)\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(\Omega(N,\mathcal{H},\delta)\)&lt;/span&gt;就代表了对模型复杂度的惩罚。&lt;/p&gt;
&lt;p&gt;可以看出，至少有&lt;span class=&quot;math inline&quot;&gt;\(1-\delta\)&lt;/span&gt;的概率，能满足&lt;/p&gt;
&lt;p&gt;\[E_{\text{out}}(g)\le E_{\text{in}}(g)+\Omega(N,\mathcal{H},\delta) \]&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}\)&lt;/span&gt;和error的关系如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-6644c8b977090fb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;要找到最优的&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}\)&lt;/span&gt;，才能使error最小。&lt;/p&gt;
&lt;p&gt;VC Bound只是一个非常宽松的理论界限。比如设定&lt;span class=&quot;math inline&quot;&gt;\(\epsilon=0.1\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(\delta=0.1\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(d_{\text{vc}}=3\)&lt;/span&gt;，那么根据前式，可得到&lt;span class=&quot;math inline&quot;&gt;\(N\approx 10,000 d_{\text{vc}}\)&lt;/span&gt;，但在实践中，往往只需要&lt;span class=&quot;math inline&quot;&gt;\(N\approx 10 d_{\text{vc}}\)&lt;/span&gt;的数据量就够了。&lt;/p&gt;
&lt;h3 id=&quot;25-有噪声时的vc-bound&quot;&gt;2.5 有噪声时的VC Bound&lt;/h3&gt;
&lt;p&gt;如果标签被打错了，或是同一个人被打了不同标签，又或是&lt;span class=&quot;math inline&quot;&gt;\(\mathbf{x}\)&lt;/span&gt;的信息不准确，都会引入噪声。在有噪声时，VC Bound依旧有效吗？&lt;/p&gt;
&lt;p&gt;回到之前小球的例子，之前的小球，每个小球的颜色都是确定的，这种情况叫做是“deterministic”的，在有噪声的情况中，可以认为每个小球的颜色服从某种概率，即&lt;span class=&quot;math inline&quot;&gt;\(y\sim P(y|\mathbf{x})\)&lt;/span&gt;，这叫做是“probabilistic”的。可以证明如果&lt;span class=&quot;math inline&quot;&gt;\((\mathbf{x},y)\mathop{\sim}^{i.i.d.}P(\mathbf{x},y)\)&lt;/span&gt;，那么VC理论依旧是有效的。&lt;/p&gt;
&lt;p&gt;有噪声时，学习的目标是在常见的样本&lt;span class=&quot;math inline&quot;&gt;\(P(\mathbf{x})\)&lt;/span&gt;上，学习&lt;span class=&quot;math inline&quot;&gt;\(P(y|\mathbf{x})\)&lt;/span&gt;。新的学习流程如下：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-6ec23c6c0f8cc734.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;VC理论依旧有效，pocket算法就是个很好的例子。&lt;/p&gt;
&lt;h2 id=&quot;3-误差度量&quot;&gt;3 误差度量&lt;/h2&gt;
&lt;p&gt;在这里介绍一种逐点的误差度量（pointwise error measure），可以表达成&lt;span class=&quot;math inline&quot;&gt;\(\text{err}(g(\mathbf{x}), f(\mathbf{x}))\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(g(\mathbf{x})\)&lt;/span&gt;可记为&lt;span class=&quot;math inline&quot;&gt;\(\tilde{y}\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(f(\mathbf{x})\)&lt;/span&gt;可记为y。&lt;/p&gt;
&lt;p&gt;有两种比较重要的pointwise error measure：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{err}(\tilde{y}, y)=\mathbb{1}_{[\tilde{y} \ne y]}\)&lt;/span&gt;，这一般用在分类问题中；&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{err}(\tilde{y}, y)=(\tilde{y} - y)^2\)&lt;/span&gt;，这一般用在回归问题中。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在有了误差度量后，学习流程如下：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-a7c79c5caf3f7d25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在分类问题中，错误可分为两类，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-10e48b402c760137.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据这两类错误的重要性不同，可以对它们赋予不同的权重。因此，不同的应用可以有不同的&lt;span class=&quot;math inline&quot;&gt;\(\text{err}\)&lt;/span&gt;。在算法中考虑误差度量时（记用在算法中的错误度量为&lt;span class=&quot;math inline&quot;&gt;\(\widehat{\text{err}}\)&lt;/span&gt;），最好的情况当然是直接令&lt;span class=&quot;math inline&quot;&gt;\(\widehat{\text{err}}=\text{err}\)&lt;/span&gt;，但这可能会导致很难计算，比如会带来NP-hard问题等，一般来说，最好要设计一个对于&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{A}\)&lt;/span&gt;来说能比较容易进行最优化的&lt;span class=&quot;math inline&quot;&gt;\(\widehat{\text{err}}\)&lt;/span&gt;，最好要有闭式解（closed-form solution）或有凸的目标函数。&lt;/p&gt;
&lt;p&gt;在&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{A}\)&lt;/span&gt;中加入误差度量的设计后，学习流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5715116-65d8b45a5c8cb50b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于两类错误权重不同的情况，可以用“virtual copying”的策略去学习。以pocket算法为例，假设false reject错误的权重为1，false accept错误的权重为1000，在计算时不必真的对每个样本点赋予权重，可以“虚拟地”将&lt;span class=&quot;math inline&quot;&gt;\(y=-1\)&lt;/span&gt;的点复制1000份。在实践中，也不必真的复制，可以在随机选择样本点时，让算法随机选出&lt;span class=&quot;math inline&quot;&gt;\(y=-1\)&lt;/span&gt;的点的概率增大1000倍即可。&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 15:55:00 +0000</pubDate>
<dc:creator>分析101</dc:creator>
<og:description>林轩田《机器学习基石》课程梳理2。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/analysis101/p/13511090.html</dc:identifier>
</item>
<item>
<title>遗传算法框架-基于java jenetics库实现 - McKay</title>
<link>http://www.cnblogs.com/aarond/p/GA.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aarond/p/GA.html</guid>
<description>&lt;p&gt; 本篇并非介绍如何从0开始开发遗传算法框架，反而推荐各位使用已有的GA库&lt;a href=&quot;https://jenetics.io/&quot; target=&quot;_blank&quot;&gt;jenetics&lt;/a&gt;来做遗传算法。 &lt;/p&gt;
&lt;p&gt; GA算法的逻辑还是贴下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/68230/202008/68230-20200815221250557-1321431972.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好了，下面介绍的是基于jenetics开发的更贴近业务侧的框架，以及使用方法。&lt;/p&gt;
&lt;p&gt;pom依赖，毕竟java的嘛，就不要用matlab、R、python这些了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/io.jenetics/jenetics &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.jenetics&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jenetics&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.jenetics&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jenetics.ext&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先看看我们提供的这个框架，能怎样简化业务侧代码吧：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(5);                            &lt;span&gt;//需要指定一个线程池，因为GA算法需要很多运算&lt;/span&gt;

        Demo1SolutionConverter &lt;span&gt;demo1SolutionConverter&lt;/span&gt; = new Demo1SolutionConverter();                 &lt;span&gt;//这个class中定义了GA算法所需的底层基因序列的定义、以及业务解决方案class与基因的互相转换逻辑&lt;/span&gt;
        Demo1FitnessBuilder &lt;span&gt;fitnessBuilder&lt;/span&gt; = new Demo1FitnessBuilder();                               &lt;span&gt;//这个class定义了适应度函数的指向（遗传算法非常依赖适应度函数，非常非常依赖，重中之重）&lt;/span&gt;

        EngineInvokeOptions &lt;span&gt;options&lt;/span&gt; = new EngineInvokeOptions();                                      &lt;span&gt;//引擎调用默认参数，如需改写默认参数单独修改即可&lt;/span&gt;
        &lt;span&gt;options&lt;/span&gt;.setFitnessBuilder(&lt;span&gt;fitnessBuilder&lt;/span&gt;);
        &lt;span&gt;options&lt;/span&gt;.setEnableMaxLimits(true);                                                             &lt;span&gt;//设置为停止条件为最大种群次数限制&lt;/span&gt;
        &lt;span&gt;options&lt;/span&gt;.setMaxLimits(20);                                                                     &lt;span&gt;//设置为最大次数限制为20次，既：20次种群迭代&lt;/span&gt;

        for(int idx=0;idx&amp;lt;20;idx++) {                                                                 &lt;span&gt;//连续执行20次看效果&lt;/span&gt;
            MinMaxScaler minMaxScaler = new MinMaxScaler(100, false);

            GAEngine gaEngine = new GAEngine(50, executorService);

            Demo1SolutionConverter.Demo1Solution solution = (Demo1SolutionConverter.Demo1Solution) gaEngine.generate(&lt;span&gt;demo1SolutionConverter&lt;/span&gt;, minMaxScaler, &lt;span&gt;options&lt;/span&gt;);
            System.out.println(solution.toString());
        }

        executorService.shutdown();
    }　　
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们先看看核心class：Demo1SolutionConverter，这个是每个业务都不同的地方，需要单独业务单独编码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Demo1SolutionConverter extends &lt;span&gt;DefaultSolutionConverter&lt;/span&gt; {                                         &lt;span&gt;//DefaultSolutionConverter是框架里的默认实现，已经实现了很多默认方法&lt;/span&gt;
        @Override
        public AbstractSolution convert2Solution(EvolvingSolutionInfo solutionInfo) {
                Demo1Solution solution=new Demo1Solution();
                solution.setFitnessValues(solutionInfo.getFitnessValues());

                Genotype&amp;lt;IntegerGene&amp;gt; geneMap=solutionInfo.getMap();                                           &lt;span&gt;//这个是获取基因架&lt;/span&gt;

                Chromosome&amp;lt;IntegerGene&amp;gt; chromosome=geneMap.getChromosome();                                    &lt;span&gt;//获取默认的也就是第一个基因条&lt;/span&gt;

                for(int idx=0;idx&amp;lt;chromosome.length();idx++)                                                   &lt;span&gt;//开始业务解码&lt;/span&gt;
                {
                        IntegerGene integerGene=chromosome.getGene(idx);
                        if(integerGene.intValue()==1)
                        {
                                solution.getSelectedIds().add(idx);                                            &lt;span&gt;//这里实现的解码逻辑：共10个数字，有2种可能0和1，0代表不选中，1代表选中，选中了就会加入selectedIds这个List里&lt;/span&gt;
                        }
                }

                return solution;
        }

        @Override
        public Genotype&amp;lt;IntegerGene&amp;gt; loadGenotype() {                                                          &lt;span&gt;//这个是唯一一个DefaultSolutionConverter种的抽象方法，必须实现，用来定义基因序列的组成&lt;/span&gt;
                Genotype&amp;lt;IntegerGene&amp;gt; genotype=Genotype.of(
                                IntegerChromosome.of(0, 1, IntRange.of(10))                                    &lt;span&gt;//10个基因，每个基因只有2种可能，0或者1&lt;/span&gt;
                );

                return genotype;
        }

        public double test(AbstractSolution solution)                                                        &lt;span&gt;//这个是适应度函数定义，要注意入参和出参，这2个是固定的&lt;/span&gt;
        {                                                                                                    &lt;span&gt;//test是method名，待会会在后面介绍，会在其他class中指定过来&lt;/span&gt;
                Demo1Solution s=(Demo1Solution)solution;

                long 偶数个数=s.getSelectedIds().stream().filter(f-&amp;gt;f%2==0).count();
                long 奇数个数=s.getSelectedIds().stream().filter(f-&amp;gt;f%2!=0).count();

                double score=(-偶数个数)+(+奇数个数);                                                          &lt;span&gt;//score是适应度函数的分值，越小越优，由于我们希望不要奇数、只要偶数，所以偶数部分为负号、奇数部分为正号&lt;/span&gt;
                return score;
        }

        @Data
        public class Demo1Solution extends DefaultSolution {                                                   &lt;span&gt;//这个是业务解码后存放的class，很好理解&lt;/span&gt;

                private List&amp;lt;Integer&amp;gt; selectedIds=new ArrayList&amp;lt;&amp;gt;();

                @Override
                public String toString() {
                        StringBuilder stringBuilder=new StringBuilder();

                        for(int id:selectedIds)
                        {
                                stringBuilder.append(id);
                                stringBuilder.append(&quot;, &quot;);
                        }

                        return stringBuilder.toString();
                }
        }
}　　
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后再看看Demo1FitnessBuilder类，既：适应度函数指向类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;52&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Demo1FitnessBuilder implements FitnessBuilder {
    @Override
    public Tuple2&amp;lt;Map&amp;lt;String, Object&amp;gt;, List&amp;lt;Tuple3&amp;lt;String, String, Double&amp;gt;&amp;gt;&amp;gt; build() {

        Map&amp;lt;String, Object&amp;gt; objConfigs= buildObjectAndConfigs();
        List&amp;lt;Tuple3&amp;lt;String, String, Double&amp;gt;&amp;gt; fitnessConfigs=buildFitnessConfigs();

        return Tuples.of(objConfigs, fitnessConfigs);
    }


    private Map&amp;lt;String, Object&amp;gt; buildObjectAndConfigs() {

        Map&amp;lt;String, Object&amp;gt; configs=new HashMap&amp;lt;&amp;gt;();

        Demo1SolutionConverter &lt;span&gt;obj&lt;/span&gt;=new Demo1SolutionConverter();                             &lt;span&gt;//这里定义的是n个适应度函数所在的对象（此处只定义了1个，也可以多个）&lt;/span&gt;
        configs.put(&quot;obj&quot;, &lt;span&gt;obj&lt;/span&gt;);

        return configs;
    }

    private List&amp;lt;Tuple3&amp;lt;String, String, Double&amp;gt;&amp;gt; buildFitnessConfigs() {
        List&amp;lt;Tuple3&amp;lt;String, String, Double&amp;gt;&amp;gt; fitnessConfigs = new ArrayList&amp;lt;&amp;gt;();

        fitnessConfigs.add(Tuples.of(&quot;obj&quot;, &quot;&lt;span&gt;test&lt;/span&gt;&quot;, 1D));                                    &lt;span&gt;//obj和上面的对应，test指明了适应度函数是在obj这个对象中方法名为test的函数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//此处也可以多个&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//1D代表默认权重，也可以定期较低的权重，比如：0.5D这种&lt;/span&gt;&lt;br/&gt;　　

        return fitnessConfigs;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看看程序的输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;136&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 3, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如同大家所见，GA算法的问题在于不太稳定，只能代表一种优化趋势，导致这样的原因有很多，最重要的原因还是在于智能算法一般使用的场景都是由于传统算法无能为力的场景，或者无法穷举的场景。&lt;/p&gt;
&lt;p&gt;下面看看加大种群迭代次数是否能解决：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
options.setMaxLimits(100);
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;134&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
0, 2, 4, 6, 8, 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;算是表面解决了，但其实还有很多因素能导致不稳定，比如，我们从当前的10个数字，enlarge到50个数字，会怎样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Override
        public Genotype&amp;lt;IntegerGene&amp;gt; loadGenotype() {
                Genotype&amp;lt;IntegerGene&amp;gt; genotype=Genotype.of(
                                IntegerChromosome.of(0, 1, IntRange.of(50))
                );

                return genotype;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;533&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 35, 36, 38, 40, 41, 42, 44, 46, 
0, 2, 4, 6, 8, 10, 11, 12, 13, 14, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
2, 4, 5, 6, 8, 10, 12, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 6, 8, 10, 12, 14, 16, 18, 22, 24, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 8, 14, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 41, 42, 44, 46, 48, 
0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 
0, 2, 4, 6, 8, 10, 12, 13, 14, 16, 18, 20, 22, 24, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 
0, 2, 4, 6, 8, 10, 12, 13, 16, 18, 19, 22, 24, 26, 28, 30, 31, 32, 36, 38, 40, 42, 43, 44, 45, 46, 48, 
0, 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 24, 25, 26, 28, 30, 32, 34, 38, 40, 42, 44, 45, 46, 48, 
0, 1, 2, 4, 5, 6, 8, 10, 11, 12, 14, 16, 18, 20, 21, 22, 23, 24, 26, 28, 30, 32, 36, 38, 40, 42, 44, 46, 48, 
2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 44, 46, 48, 
0, 2, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 32, 34, 36, 38, 40, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 38, 40, 42, 43, 44, 46, 48, 49, 
0, 2, 4, 6, 8, 9, 10, 12, 14, 18, 22, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 22, 24, 26, 32, 34, 36, 38, 40, 42, 44, 45, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 26, 28, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 13, 14, 16, 18, 20, 22, 24, 26, 28, 31, 32, 34, 38, 40, 42, 45, 46, 48, 
0, 2, 4, 6, 8, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 27, 29, 30, 32, 34, 36, 38, 40, 46, 48, 
0, 4, 6, 8, 10, 12, 14, 16, 20, 22, 24, 25, 26, 28, 30, 32, 34, 36, 38, 40, 44, 46, 48, 
0, 2, 4, 8, 10, 12, 14, 16, 18, 20, 21, 22, 24, 26, 28, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;哇塞，简直了，这结果。。。&lt;/p&gt;
&lt;p&gt;再来：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
options.setMaxLimits(2000);
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;535&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 　　
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;体会到了不确定的痛苦了吗？&lt;/p&gt;
&lt;p&gt;再来：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//        options.setEnableMaxLimits(true);
//        options.setMaxLimits(2000);
        options.setEnableSteadyFitness(true);         &lt;span&gt;//设置为稳定适应度函数值默认&lt;/span&gt;
        options.setSteadyFitnessValue(1000);          &lt;span&gt;//当连续1000次的种群迭代的最优适应度函数值都稳定的时候，稳定就是分值没有超越当前的最好分值，然后才停止算法
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;535&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;遗传算法是非常耗费算力的，能其他算法就尽量其他算法来做，真的。虽然GA也有很多优点，比如：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;当无法穷举时，这个算法就是好的&lt;/li&gt;
&lt;li&gt;当数据量较少时，这个算法也挺稳定（要调好参数）&lt;/li&gt;
&lt;li&gt;当计算什么是好，什么是坏时的逻辑是非线性的时候，GA算法也是个很好的选项&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;完整代码下载，带demo+自研框架+底层是jenetics&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/aarond/ga.rar&quot; target=&quot;_blank&quot;&gt;完整下载&lt;/a&gt;　&lt;/p&gt;

</description>
<pubDate>Sat, 15 Aug 2020 15:41:00 +0000</pubDate>
<dc:creator>McKay</dc:creator>
<og:description>本篇并非介绍如何从0开始开发遗传算法框架，反而推荐各位使用已有的GA库jenetics来做遗传算法。 GA算法的逻辑还是贴下： 好了，下面介绍的是基于jenetics开发的更贴近业务侧的框架，以及使用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/aarond/p/GA.html</dc:identifier>
</item>
<item>
<title>webpack系列之loader的基本使用 - 全栈在路上</title>
<link>http://www.cnblogs.com/itdream/p/13511046.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdream/p/13511046.html</guid>
<description>&lt;p class=&quot;te-preview-highlight&quot; data-nodeid=&quot;586&quot;&gt; &lt;/p&gt;
&lt;blockquote data-nodeid=&quot;587&quot; readability=&quot;4.620253164557&quot;&gt;
&lt;p data-nodeid=&quot;588&quot;&gt;可以访问 &lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;amp;album_id=1410124501450571776&amp;amp;__biz=MzAwMjk5NTY3Mw==#wechat_redirect&quot; data-nodeid=&quot;593&quot;&gt;这里&lt;/a&gt; 查看更多关于&lt;span data-nodeid=&quot;599&quot;&gt;大数据平台建设的原创文章。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 data-nodeid=&quot;504&quot;&gt;webpack系列之loader及简单的使用&lt;/h2&gt;
&lt;h3 data-nodeid=&quot;4&quot;&gt;一. loader有什么用&lt;/h3&gt;
&lt;blockquote data-nodeid=&quot;5&quot; readability=&quot;7&quot;&gt;
&lt;p data-nodeid=&quot;6&quot;&gt;&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;127&quot;&gt;webpack&lt;/code&gt;本身只能打包&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;129&quot;&gt;Javascript&lt;/code&gt;文件，对于其他资源例如 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;131&quot;&gt;css&lt;/code&gt;，图片，或者其他的语法集比如&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;133&quot;&gt;jsx&lt;/code&gt;，是没有办法加载的。 这就需要对应的&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;135&quot;&gt;loader&lt;/code&gt;将资源转化，加载进来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-nodeid=&quot;7&quot;&gt;&lt;span data-nodeid=&quot;150&quot;&gt;比如&lt;br/&gt;你的工程中，样式文件都使用了&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;142&quot;&gt;less&lt;/code&gt;语法，是不能被浏览器识别的，这时候我们就需要使用对应的&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;144&quot;&gt;loader&lt;/code&gt;，来把&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;146&quot;&gt;less&lt;/code&gt;语法转换成浏览器可以识别的&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;148&quot;&gt;css&lt;/code&gt;语法。&lt;/span&gt;&lt;/p&gt;
&lt;p data-nodeid=&quot;8&quot;&gt;例如一个简单的&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;152&quot;&gt;less&lt;/code&gt;文件：&lt;br/&gt;&lt;span data-nodeid=&quot;158&quot;&gt;转换前：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;lang-less hljs&quot; data-nodeid=&quot;9&quot;&gt;
&lt;code data-language=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.demo {
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;width: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;200px;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;height: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;100px;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;margin: auto;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;border: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1px solid;
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p {
        &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;font-weight:bold;
        &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;padding-left: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;30px;
    }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-nodeid=&quot;10&quot;&gt;&lt;span data-nodeid=&quot;162&quot;&gt;转换后：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;lang-css hljs&quot; data-nodeid=&quot;11&quot;&gt;
&lt;code data-language=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.demo {
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;width: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;200px;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;height: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;100px;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;margin: auto;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;border: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1px solid;
}

&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.demo &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p {
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;font-weight: bold;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;padding-left: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;30px;
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-nodeid=&quot;12&quot;&gt;后面的案例也是拿这个&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;164&quot;&gt;less&lt;/code&gt;文件来做演示的。&lt;/p&gt;
&lt;h3 data-nodeid=&quot;13&quot;&gt;二. loader是什么&lt;/h3&gt;
&lt;p data-nodeid=&quot;14&quot;&gt;先来看一下官方对&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;168&quot;&gt;loader&lt;/code&gt;的一个解释：&lt;/p&gt;
&lt;blockquote data-nodeid=&quot;15&quot; readability=&quot;5&quot;&gt;
&lt;p data-nodeid=&quot;16&quot;&gt;A loader is a node module exporting a function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-nodeid=&quot;17&quot;&gt;翻译过来：&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;172&quot;&gt;loader&lt;/code&gt;就是一个&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;174&quot;&gt;export&lt;/code&gt;出来的&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;176&quot;&gt;function&lt;/code&gt;。&lt;/p&gt;
&lt;hr data-nodeid=&quot;18&quot;/&gt;&lt;p data-nodeid=&quot;19&quot;&gt;既然是 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;179&quot;&gt;node module&lt;/code&gt;，所以如果你自己要自定义一个&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;181&quot;&gt;loader&lt;/code&gt;，完全可以这么写：&lt;/p&gt;
&lt;pre class=&quot;lang-javascript hljs&quot; data-nodeid=&quot;20&quot;&gt;
&lt;code data-language=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;module.exports = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;source&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;) {
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-nodeid=&quot;21&quot;&gt;&lt;span data-nodeid=&quot;186&quot;&gt;解释&lt;/span&gt;&lt;/p&gt;
&lt;p data-nodeid=&quot;27&quot;&gt;如果你所写的 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;202&quot;&gt;loader&lt;/code&gt; 需要依赖其他模块的话，那么同样以 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;204&quot;&gt;module&lt;/code&gt; 的写法，将依赖放在文件的顶部引进来即可：&lt;/p&gt;
&lt;pre class=&quot;lang-javascript hljs&quot; data-nodeid=&quot;28&quot;&gt;
&lt;code data-language=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var fs = &lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;require(&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;fs&quot;)
&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;module.exports = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;source&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;) {
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-nodeid=&quot;29&quot;&gt;如果你希望将处理后的结果（不止一个）返回给下一个 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;207&quot;&gt;loader&lt;/code&gt;，那么就需要调用 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;209&quot;&gt;webpack&lt;/code&gt; 所提供的 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;211&quot;&gt;API&lt;/code&gt;。&lt;/p&gt;
&lt;p data-nodeid=&quot;30&quot;&gt;由于本篇我们只讲&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;214&quot;&gt;loader&lt;/code&gt;的基本使用，故这里不再深入讲解，有兴趣的可以&lt;a href=&quot;https://webpack.js.org/api/loaders/&quot; data-nodeid=&quot;218&quot;&gt;点击&lt;/a&gt;这里学习。&lt;/p&gt;
&lt;h3 data-nodeid=&quot;31&quot;&gt;三. 使用loader&lt;/h3&gt;
&lt;p data-nodeid=&quot;32&quot;&gt;在看了前面的介绍后，接下来给大家介绍一下怎么使用&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;222&quot;&gt;loader&lt;/code&gt;。&lt;/p&gt;
&lt;h4 data-nodeid=&quot;33&quot;&gt;使用loader的方式&lt;/h4&gt;
&lt;p data-nodeid=&quot;34&quot;&gt;有三种使用方式，如下：&lt;/p&gt;
&lt;ul data-nodeid=&quot;35&quot; readability=&quot;0&quot;&gt;&lt;li data-nodeid=&quot;36&quot; readability=&quot;-0.91549295774648&quot;&gt;
&lt;p data-nodeid=&quot;37&quot;&gt;&lt;a href=&quot;https://doc.webpack-china.org/concepts/loaders/#configuration&quot; data-nodeid=&quot;228&quot;&gt;配置&lt;/a&gt;&lt;span data-nodeid=&quot;237&quot;&gt;（推荐）：在 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;233&quot;&gt;webpack.config.js&lt;/code&gt; 文件中指定 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;235&quot;&gt;loader&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;38&quot; readability=&quot;-0.9&quot;&gt;
&lt;p data-nodeid=&quot;39&quot;&gt;&lt;a href=&quot;https://doc.webpack-china.org/concepts/loaders/#inline&quot; data-nodeid=&quot;240&quot;&gt;内联&lt;/a&gt;：在每个 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;242&quot;&gt;import&lt;/code&gt; 语句中显式指定 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;244&quot;&gt;loader&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;40&quot; readability=&quot;-0.92857142857143&quot;&gt;
&lt;p data-nodeid=&quot;41&quot;&gt;&lt;a href=&quot;https://doc.webpack-china.org/concepts/loaders/#cli&quot; data-nodeid=&quot;248&quot;&gt;CLI&lt;/a&gt;：在 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;250&quot;&gt;shell&lt;/code&gt; 命令中指定它们。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr data-nodeid=&quot;42&quot;/&gt;&lt;p data-nodeid=&quot;43&quot;&gt;&lt;span data-nodeid=&quot;255&quot;&gt;以上三种方式，我们在开发过程中推荐使用第一种方式：&lt;/span&gt;&lt;/p&gt;
&lt;p data-nodeid=&quot;44&quot;&gt;比如你想使用&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;257&quot;&gt;webpack&lt;/code&gt;来打包样式文件，则可以在&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;259&quot;&gt;webpack.config.js&lt;/code&gt;里添加如下代码：&lt;/p&gt;
&lt;pre class=&quot;lang-javascript hljs&quot; data-nodeid=&quot;45&quot;&gt;
&lt;code data-language=&quot;javascript&quot;&gt;   &lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;module: {
       &lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;rules: [
           {
               &lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;test: &lt;span class=&quot;hljs-regexp&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/\.css$/,  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-nodeid=&quot;46&quot;&gt;&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;261&quot;&gt;module.rules&lt;/code&gt; 允许你在 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;263&quot;&gt;webpack&lt;/code&gt; 配置中指定多个 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;265&quot;&gt;loader&lt;/code&gt;。 这是展示 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;267&quot;&gt;loader&lt;/code&gt; 的一种简明方式，并且有助于使代码变得简洁。&lt;/p&gt;
&lt;p data-nodeid=&quot;47&quot;&gt;&lt;span data-nodeid=&quot;281&quot;&gt;上述rules的作用：&lt;br/&gt;&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;273&quot;&gt;webpack&lt;/code&gt;在打包过程中，凡是遇到后缀为&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;275&quot;&gt;css&lt;/code&gt;的文件，就会使用&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;277&quot;&gt;style-loader&lt;/code&gt;和&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;279&quot;&gt;css-loader&lt;/code&gt;去加载这个文件。&lt;/span&gt;&lt;/p&gt;
&lt;h3 data-nodeid=&quot;48&quot;&gt;四.案例&lt;/h3&gt;
&lt;p data-nodeid=&quot;49&quot;&gt;在对&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;284&quot;&gt;loader&lt;/code&gt;有了一个大概的认识后，来做一个小案例，需求如下：&lt;/p&gt;
&lt;blockquote data-nodeid=&quot;50&quot; readability=&quot;6&quot;&gt;
&lt;p data-nodeid=&quot;51&quot;&gt;将上一篇（&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;287&quot;&gt;webpack&lt;/code&gt;系列之基本概念和使用）的&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;289&quot;&gt;demo&lt;/code&gt;输出文字居中并用黑框圈起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 data-nodeid=&quot;52&quot;&gt;目录结构&lt;/h4&gt;
&lt;p data-nodeid=&quot;53&quot;&gt;代码目录结构如下：&lt;br/&gt;├── node_modules&lt;br/&gt;├── app&lt;br/&gt;│ ├── bundle.js&lt;br/&gt;│ └── index.html&lt;br/&gt;├── package-lock.json&lt;br/&gt;├── package.json&lt;br/&gt;├── src&lt;br/&gt;│ ├── index.js&lt;br/&gt;│ └── main.less&lt;br/&gt;└── webpack.config.js&lt;/p&gt;
&lt;h4 data-nodeid=&quot;54&quot;&gt;1. 安装loader&lt;/h4&gt;
&lt;p data-nodeid=&quot;55&quot;&gt;我们必须使用 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;317&quot;&gt;loader&lt;/code&gt; 告诉 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;319&quot;&gt;webpack&lt;/code&gt; 加载 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;321&quot;&gt;less&lt;/code&gt; 文件，为此，需要首先安装相对应的 &lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;323&quot;&gt;loader&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;lang-bash hljs&quot; data-nodeid=&quot;56&quot;&gt;
&lt;code data-language=&quot;bash&quot;&gt;npm install --save-dev less
npm install --save-dev less-loader
npm install --save-dev css-loader
npm install --save-dev style-loader
&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-nodeid=&quot;57&quot;&gt;这些&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;326&quot;&gt;loader&lt;/code&gt;的作用如下：&lt;/p&gt;
&lt;ul data-nodeid=&quot;58&quot; readability=&quot;0&quot;&gt;&lt;li data-nodeid=&quot;59&quot; readability=&quot;-1&quot;&gt;
&lt;p data-nodeid=&quot;60&quot;&gt;安装&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;329&quot;&gt;less-loader&lt;/code&gt;后可以在&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;331&quot;&gt;js&lt;/code&gt;中使用&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;333&quot;&gt;require&lt;/code&gt;的方式来加载&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;335&quot;&gt;less&lt;/code&gt;文件了；&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;61&quot; readability=&quot;-1&quot;&gt;
&lt;p data-nodeid=&quot;62&quot;&gt;安装&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;338&quot;&gt;css-loader&lt;/code&gt;后可以在&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;340&quot;&gt;js&lt;/code&gt;中加载&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;342&quot;&gt;css&lt;/code&gt;文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;63&quot; readability=&quot;-1&quot;&gt;
&lt;p data-nodeid=&quot;64&quot;&gt;安装&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;345&quot;&gt;style-loader&lt;/code&gt;的目的是为了让加载的&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;347&quot;&gt;css&lt;/code&gt;作为&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;349&quot;&gt;style&lt;/code&gt;标签内容插入到&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;351&quot;&gt;html&lt;/code&gt;中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 data-nodeid=&quot;65&quot;&gt;2. 配置loader&lt;/h4&gt;
&lt;p data-nodeid=&quot;66&quot;&gt;&lt;span data-nodeid=&quot;357&quot;&gt;webpack.config.js代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;lang-javascript hljs&quot; data-nodeid=&quot;67&quot;&gt;
&lt;code data-language=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;module.exports = {
    &lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;devtool: &lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;'eval-source-map',
    &lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;entry:  __dirname + &lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/src/index.js&quot;,  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 data-nodeid=&quot;68&quot;&gt;3.新建样式文件&lt;/h4&gt;
&lt;p data-nodeid=&quot;69&quot;&gt;&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;359&quot;&gt;main.less&lt;/code&gt;代码如下：&lt;/p&gt;
&lt;pre class=&quot;lang-less hljs&quot; data-nodeid=&quot;70&quot;&gt;
&lt;code data-language=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.demo {
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;width: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;200px;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;height: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;100px;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;margin: auto;
    &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;border: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1px solid;
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p {
        &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;font-weight:bold;
        &lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;padding-left: &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;30px;
    }
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 data-nodeid=&quot;71&quot;&gt;4. 修改入口文件&lt;/h4&gt;
&lt;p data-nodeid=&quot;72&quot;&gt;在入口文件&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;363&quot;&gt;index.js&lt;/code&gt;里引入我们的样式文件&lt;/p&gt;
&lt;pre class=&quot;lang-javascript hljs&quot; data-nodeid=&quot;73&quot;&gt;
&lt;code data-language=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;require (&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;'./main.less');
&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var element = &lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;document.createElement(&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;'div');
element.className = &lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;'demo';
&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var p = &lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;document.createElement(&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;'p');
p.innerText = &lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;'webpack系列之loader的基本使用！';
element.appendChild(p);
&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;document.body.appendChild(element);

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 data-nodeid=&quot;74&quot;&gt;5.打包&lt;/h4&gt;
&lt;p data-nodeid=&quot;75&quot;&gt;在项目根目录（&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;367&quot;&gt;webpack-demo&lt;/code&gt;）下执行打包命令：&lt;/p&gt;
&lt;pre class=&quot;lang-bash hljs&quot; data-nodeid=&quot;76&quot;&gt;
&lt;code data-language=&quot;bash&quot;&gt;➜  webpack-demo webpack
&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-nodeid=&quot;77&quot;&gt;打包成功，会输出如下：&lt;/p&gt;
&lt;pre class=&quot;lang-bash hljs&quot; data-nodeid=&quot;78&quot;&gt;
&lt;code data-language=&quot;bash&quot;&gt;Hash: 1bb51c6a348686a223db
Version: webpack 3.10.0
Time: 1077ms
    Asset     Size  Chunks             Chunk Names
bundle.js  53.8 kB       0  [emitted]  main
   [0] ./src/index.js 273 bytes {0} [built]
   [2] ./src/main.less 1.19 kB {0} [built]
   [2] ./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js!./src/main.less 304 bytes {0} [built]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 data-nodeid=&quot;79&quot;&gt;6. 查看结果&lt;/h4&gt;
&lt;p data-nodeid=&quot;80&quot;&gt;在浏览器里刷新&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;372&quot;&gt;index.html&lt;/code&gt;：&lt;br/&gt;你会发现&lt;span data-nodeid=&quot;387&quot;&gt;输出的文字被一个黑框给圈了起来，并且加粗显示，这就表明我们的样式文件已经生效了，而且从截图当中也可以看见样式文件也插入到了html中。&lt;br/&gt;![图片描述][3]&lt;/span&gt;&lt;/p&gt;
&lt;h3 data-nodeid=&quot;81&quot;&gt;五.常用loader&lt;/h3&gt;
&lt;h4 data-nodeid=&quot;82&quot;&gt;样式&lt;/h4&gt;
&lt;ol data-nodeid=&quot;83&quot; readability=&quot;0.75690607734807&quot;&gt;&lt;li data-nodeid=&quot;84&quot; readability=&quot;-0.73684210526316&quot;&gt;
&lt;p data-nodeid=&quot;85&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/css-loader&quot; data-nodeid=&quot;392&quot;&gt;css-loader&lt;/a&gt; : 解析&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;394&quot;&gt;css&lt;/code&gt;文件中代码&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;86&quot; readability=&quot;-0.78181818181818&quot;&gt;
&lt;p data-nodeid=&quot;87&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/style-loader&quot; data-nodeid=&quot;398&quot;&gt;style-loader&lt;/a&gt; : 将&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;400&quot;&gt;css&lt;/code&gt;模块作为样式导出到&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;402&quot;&gt;DOM&lt;/code&gt;中&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;88&quot; readability=&quot;-0.725&quot;&gt;
&lt;p data-nodeid=&quot;89&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/less-loader&quot; data-nodeid=&quot;406&quot;&gt;less-loader&lt;/a&gt; : 加载和转义&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;408&quot;&gt;less&lt;/code&gt;文件&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;90&quot; readability=&quot;-0.75555555555556&quot;&gt;
&lt;p data-nodeid=&quot;91&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/sass-loader&quot; data-nodeid=&quot;412&quot;&gt;sass-loader&lt;/a&gt; : 加载和转义&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;414&quot;&gt;sass/scss&lt;/code&gt;文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 data-nodeid=&quot;92&quot;&gt;脚本转换编译&lt;/h4&gt;
&lt;ol data-nodeid=&quot;93&quot; readability=&quot;-0.85119047619048&quot;&gt;&lt;li data-nodeid=&quot;94&quot; readability=&quot;-0.8452380952381&quot;&gt;
&lt;p data-nodeid=&quot;95&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/script-loader&quot; data-nodeid=&quot;419&quot;&gt;script-loader&lt;/a&gt; : 在全局上下文中执行一次&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;421&quot;&gt;javascript&lt;/code&gt;文件，不需要解析&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;96&quot; readability=&quot;-0.85542168674699&quot;&gt;
&lt;p data-nodeid=&quot;97&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/babel-loader&quot; data-nodeid=&quot;425&quot;&gt;babel-loader&lt;/a&gt; : 加载&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;427&quot;&gt;ES6&lt;/code&gt; 代码后使用&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;429&quot;&gt;Babel&lt;/code&gt;转义为&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;431&quot;&gt;ES5&lt;/code&gt;后浏览器才能解析&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 data-nodeid=&quot;98&quot;&gt;Files文件&lt;/h4&gt;
&lt;ol data-nodeid=&quot;99&quot; readability=&quot;-0.42753623188406&quot;&gt;&lt;li data-nodeid=&quot;100&quot; readability=&quot;0&quot;&gt;
&lt;p data-nodeid=&quot;101&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/url-loader&quot; data-nodeid=&quot;436&quot;&gt;url-loader&lt;/a&gt; : 多数用于加载图片资源,超过文件大小显示则返回&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;438&quot;&gt;data URL&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li data-nodeid=&quot;102&quot; readability=&quot;-0.80392156862745&quot;&gt;
&lt;p data-nodeid=&quot;103&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/raw-loader&quot; data-nodeid=&quot;441&quot;&gt;raw-loader&lt;/a&gt; : 加载文件原始内容&lt;code data-backticks=&quot;1&quot; data-nodeid=&quot;443&quot;&gt;(utf-8&lt;/code&gt;格式)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 data-nodeid=&quot;104&quot;&gt;加载框架&lt;/h4&gt;

</description>
<pubDate>Sat, 15 Aug 2020 15:41:00 +0000</pubDate>
<dc:creator>全栈在路上</dc:creator>
<og:description>可以访问&amp;#160;这里&amp;#160;查看更多关于大数据平台建设的原创文章。 webpack系列之loader及简单的使用 一. loader有什么用 webpack本身只能打包Javascript文件</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/itdream/p/13511046.html</dc:identifier>
</item>
<item>
<title>基于OpenSIPS 实现分机注册服务器【非集群】 - 玉修</title>
<link>http://www.cnblogs.com/initialjiang/p/13511039.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/initialjiang/p/13511039.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; 下面报文中，&lt;span&gt;401999&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; ===&amp;gt;&lt;span&gt; 首次发起注册
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; REGISTER sip:&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt;  
&lt;span&gt;  4&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;branch=z9hG4bK-d87543-c66bc353296ef71c-&lt;span&gt;1&lt;/span&gt;--d87543-&lt;span&gt;;rport
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; Max-Forwards: &lt;span&gt;70&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;
&lt;span&gt;  7&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;
&lt;span&gt;  8&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; CSeq: &lt;span&gt;1&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; Expires: &lt;span&gt;20&lt;/span&gt;&lt;span&gt;    过期时间为 20秒
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY, MESSAGE, SUBSCRIBE, INFO
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; User-Agent: eyeBeam release 1011d stamp &lt;span&gt;40820&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt; ===&amp;gt;未认证，要求认证，携带附加信息WWW-&lt;span&gt;Authenticate:
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt; &lt;span&gt;401&lt;/span&gt;&lt;span&gt; Unauthorized
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;received=&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;;branch=z9hG4bK-d87543-c66bc353296ef71c-&lt;span&gt;1&lt;/span&gt;--d87543-;rport=&lt;span&gt;56862&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;0903184bf06bf229be5b2f19c45648e4.a5a8
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; CSeq: &lt;span&gt;1&lt;/span&gt;&lt;span&gt; REGISTER   【CSeq 跟前一个一样】
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; WWW-Authenticate: Digest realm=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, nonce=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5eb6117930f436d5c6dfab18f8b2da91e65c1537&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; Server: OpenSIPS (&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; (x86_64/&lt;span&gt;linux))
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; ===&amp;gt;&lt;span&gt; 携带认证信息(Authorization)后，再次重发注册消息
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; REGISTER sip:&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;branch=z9hG4bK-d87543-f26ee314e330e316-&lt;span&gt;1&lt;/span&gt;--d87543-&lt;span&gt;;rport
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; Max-Forwards: &lt;span&gt;70&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;
&lt;span&gt; 32&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;
&lt;span&gt; 33&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; CSeq: &lt;span&gt;2&lt;/span&gt;&lt;span&gt; REGISTER   【CSeq 跟前一个一样】
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; Expires: &lt;span&gt;20&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY, MESSAGE, SUBSCRIBE, INFO
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; User-Agent: eyeBeam release 1011d stamp &lt;span&gt;40820&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt; Authorization: Digest username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,realm=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,nonce=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5eb6117930f436d5c6dfab18f8b2da91e65c1537&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,uri=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sip:10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,response=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9c46fa8d95df62b2d204c82bf4fcdccc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,algorithm=&lt;span&gt;MD5
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; ===&amp;gt;&lt;span&gt; 首次注册成功
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 你可能注意到，&lt;span&gt;200&lt;/span&gt; OK 中 Contact 里的 expires=&lt;span&gt;30&lt;/span&gt;, 不是终端请求是设置的 &lt;span&gt;20&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;因为我OpenSIPS的registrar模块配置的最小过期时长是30
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; ====
&lt;span&gt; 46&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;span&gt; OK
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;received=&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;;branch=z9hG4bK-d87543-f26ee314e330e316-&lt;span&gt;1&lt;/span&gt;--d87543-;rport=&lt;span&gt;56862&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;0903184bf06bf229be5b2f19c45648e4.fdb8
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; CSeq: &lt;span&gt;2&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;;expires=&lt;span&gt;30&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; Server: OpenSIPS (&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; (x86_64/&lt;span&gt;linux))
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; ===&amp;gt;&lt;span&gt; 15秒后再次发起注册【因为SIP终端是 EyeBeam，它是在过期前5秒重新发起注册】，注意，这次重发时，没有返回401
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; REGISTER sip:&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;branch=z9hG4bK-d87543-83347a2a0b242e5c-&lt;span&gt;1&lt;/span&gt;--d87543-&lt;span&gt;;rport
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; Max-Forwards: &lt;span&gt;70&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;
&lt;span&gt; 61&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;
&lt;span&gt; 62&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; CSeq: &lt;span&gt;3&lt;/span&gt;&lt;span&gt; REGISTER   【CSeq 跟前一个一样】
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; Expires: &lt;span&gt;20&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY, MESSAGE, SUBSCRIBE, INFO
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; User-Agent: eyeBeam release 1011d stamp &lt;span&gt;40820&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; Authorization: Digest username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,realm=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,nonce=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5eb6117930f436d5c6dfab18f8b2da91e65c1537&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,uri=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sip:10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,response=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9c46fa8d95df62b2d204c82bf4fcdccc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,algorithm=&lt;span&gt;MD5
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;span&gt; OK
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;received=&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;;branch=z9hG4bK-d87543-83347a2a0b242e5c-&lt;span&gt;1&lt;/span&gt;--d87543-;rport=&lt;span&gt;56862&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;0903184bf06bf229be5b2f19c45648e4.f41b
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; CSeq: &lt;span&gt;3&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;;expires=&lt;span&gt;30&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; Server: OpenSIPS (&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; (x86_64/&lt;span&gt;linux))
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt; ===&amp;gt;&lt;span&gt; 15秒后再次发起注册，注意，这次重发时，返回401，要求采用最新的 nonce值认证
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; REGISTER sip:&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;branch=z9hG4bK-d87543-1e206865de74ec34-&lt;span&gt;1&lt;/span&gt;--d87543-&lt;span&gt;;rport
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; Max-Forwards: &lt;span&gt;70&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;
&lt;span&gt; 86&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;
&lt;span&gt; 87&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; CSeq: &lt;span&gt;4&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; Expires: &lt;span&gt;20&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY, MESSAGE, SUBSCRIBE, INFO
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; User-Agent: eyeBeam release 1011d stamp &lt;span&gt;40820&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; Authorization: Digest username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,realm=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,nonce=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5eb6117930f436d5c6dfab18f8b2da91e65c1537&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,uri=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sip:10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,response=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9c46fa8d95df62b2d204c82bf4fcdccc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,algorithm=&lt;span&gt;MD5
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt; ===&amp;gt; 返回401，WWW-&lt;span&gt;Authenticate 中 nonce 的值发生改变
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt; &lt;span&gt;401&lt;/span&gt;&lt;span&gt; Unauthorized
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;received=&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;;branch=z9hG4bK-d87543-1e206865de74ec34-&lt;span&gt;1&lt;/span&gt;--d87543-;rport=&lt;span&gt;56862&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;0903184bf06bf229be5b2f19c45648e4.79d6
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; CSeq: &lt;span&gt;4&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; WWW-Authenticate: Digest realm=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, nonce=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5eb611acb7d0e927969146dcaf0ce1777070df6e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, stale=&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt; Server: OpenSIPS (&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; (x86_64/&lt;span&gt;linux))
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; ===&amp;gt;&lt;span&gt; 使用新的 nonce 值再次发起注册，并且返回成功
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; REGISTER sip:&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;branch=z9hG4bK-d87543-7f61e57ce525c45d-&lt;span&gt;1&lt;/span&gt;--d87543-&lt;span&gt;;rport
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; Max-Forwards: &lt;span&gt;70&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;
&lt;span&gt;112&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;
&lt;span&gt;113&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; CSeq: &lt;span&gt;5&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; Expires: &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY, MESSAGE, SUBSCRIBE, INFO
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; User-Agent: eyeBeam release 1011d stamp &lt;span&gt;40820&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; Authorization: Digest username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,realm=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,nonce=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5eb611acb7d0e927969146dcaf0ce1777070df6e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,uri=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sip:10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,response=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1f1a4b29257e292a5efc686ea846245d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,algorithm=&lt;span&gt;MD5
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;span&gt; OK
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;received=&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;;branch=z9hG4bK-d87543-7f61e57ce525c45d-&lt;span&gt;1&lt;/span&gt;--d87543-;rport=&lt;span&gt;56862&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;0903184bf06bf229be5b2f19c45648e4.771a
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;704c1b46
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; Call-&lt;span&gt;ID: YjEwZDFhZDJmY2Y0MDg4ZDQ1YjJhMTU0MGFlYTE0YmQ.
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; CSeq: &lt;span&gt;5&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401999&lt;/span&gt;@&lt;span&gt;10.32&lt;/span&gt;.&lt;span&gt;26.19&lt;/span&gt;:&lt;span&gt;56862&lt;/span&gt;;rinstance=870ce245f5361eaf&amp;gt;;expires=&lt;span&gt;30&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; Server: OpenSIPS (&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; (x86_64/&lt;span&gt;linux))
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt; ===&amp;gt; &lt;span&gt;401998&lt;/span&gt;&lt;span&gt; 取消注册的SIP报文
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; REGISTER sip:&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;:&lt;span&gt;5060&lt;/span&gt; SIP/&lt;span&gt;2.0&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; Via: SIP/&lt;span&gt;2.0&lt;/span&gt;/UDP &lt;span&gt;10.34&lt;/span&gt;.&lt;span&gt;26.140&lt;/span&gt;:&lt;span&gt;5060&lt;/span&gt;;branch=&lt;span&gt;z9hG4bK3803710069
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; From: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401998&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;sip:&lt;span&gt;401998&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;:&lt;span&gt;5060&lt;/span&gt;&amp;gt;;tag=&lt;span&gt;2259286663&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; To: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401998&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;sip:&lt;span&gt;401998&lt;/span&gt;@&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;84.19&lt;/span&gt;:&lt;span&gt;5060&lt;/span&gt;&amp;gt;
&lt;span&gt;137&lt;/span&gt; Call-ID: 1_213524545@&lt;span&gt;10.34&lt;/span&gt;.&lt;span&gt;26.140&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt; CSeq: &lt;span&gt;3&lt;/span&gt;&lt;span&gt; REGISTER
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; Contact: &amp;lt;sip:&lt;span&gt;401998&lt;/span&gt;@&lt;span&gt;10.34&lt;/span&gt;.&lt;span&gt;26.140&lt;/span&gt;:&lt;span&gt;5060&lt;/span&gt;&amp;gt;
&lt;span&gt;140&lt;/span&gt; Authorization: Digest username=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401998&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, realm=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.84.19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, nonce=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5eb503f9b40c6d1f396eef36c55a6713b8421c74&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, uri=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sip:10.2.84.19:5060&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, response=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c5e2ee46cba287df8f434fe631a2f3fd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, algorithm=&lt;span&gt;MD5
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;Allow: INVITE, INFO, PRACK, ACK, BYE, CANCEL, OPTIONS, NOTIFY, REGISTER, SUBSCRIBE, REFER, PUBLISH, UPDATE, MESSAGE
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; Max-Forwards: &lt;span&gt;70&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt; User-Agent: Yealink SIP-T21P_E2 &lt;span&gt;52.80&lt;/span&gt;.&lt;span&gt;0.147&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt; Expires: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt; Allow-Events: talk,hold,conference,refer,check-&lt;span&gt;sync&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt; Content-Length: &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 15 Aug 2020 15:39:00 +0000</pubDate>
<dc:creator>玉修</dc:creator>
<og:description>呼叫中心平台中坐席是不可或缺的一环，而坐席打电话自然需要使用办公分机。通常情况下我们通过软交换平台FreeSWITCH、Asterisk即可搭建分机注册服务。 但单台FreeSWITCH或Asteri</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/initialjiang/p/13511039.html</dc:identifier>
</item>
<item>
<title>Tun/Tap接口使用指导 - charlieroro</title>
<link>http://www.cnblogs.com/charlieroro/p/13497340.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/charlieroro/p/13497340.html</guid>
<description>&lt;h2 id=&quot;tuntap接口指导&quot;&gt;Tun/Tap接口指导&lt;/h2&gt;

&lt;h3 id=&quot;概述&quot;&gt;概述&lt;/h3&gt;
&lt;p&gt;对tun接口的了解需求主要来自于openshift的网络，在openshift3和openshift4的OVS网络中&lt;a href=&quot;https://www.cnblogs.com/sammyliu/p/10064450.html&quot;&gt;使用&lt;/a&gt;到了tun0接口，作为容器&lt;code&gt;egresss&lt;/code&gt;访问路径上的接口之一。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1334952/202008/1334952-20200813164953433-646671815.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;工作机制&quot;&gt;工作机制&lt;/h3&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;下面用到了tunctl和openvpn命令来创建tun/tap接口，但目前推荐使用&lt;code&gt;ip tuntap&lt;/code&gt;命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# ip tuntap help
Usage: ip tuntap { add | del | show | list | lst | help } [ dev PHYS_DEV ]
       [ mode { tun | tap } ] [ user USER ] [ group GROUP ]
       [ one_queue ] [ pi ] [ vnet_hdr ] [ multi_queue ] [ name NAME ]

Where: USER  := { STRING | NUMBER }
    GROUP := { STRING | NUMBER }
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;tap/tun 是Linux内核 2.4.x 版本之后使用软件实现的虚拟网络设备，这类接口仅能工作在内核中。不同于普通的网络接口，没有物理硬件(因此也没有物理线路连接到这类接口)。可以将tun/tap接口认为是一个普通的网络接口，当内核决定发送数据时，会将数据发送到连接到该接口上的用户空间的应用(而不是&quot;线路&quot;上)。当一个程序附加到tun/tap接口上时，该程序将获得一个特定的文件描述符，从该描述符上可以获得接口上发送过来的数据。类似地，程序也可以往该描述符上发送数据(需要保证数据格式的正确性)，然后这些数据会输入给tun/tap接口，内核中的tun/tap接口就像从线路上接收到数据一样。&lt;/p&gt;
&lt;p&gt;tap接口和tun接口的区别是，tap接口会会输出完整的以太帧，而tun接口会输出IP报文(不含以太头)。可以在创建接口时指定该接口是tun接口还是tap接口。&lt;/p&gt;
&lt;p&gt;这类接口可能是临时的，意味着某些程序可以创建这类接口，并在使用后销毁。当程序结束，即使没有明确地删除接口，也会被系统回收。另一种方式是通过专有工具(如tunctl或openvpn --mktun)将接口持久化，这样其他程序就可以使用该接口，此时，使用该接口的程序必须使用与接口相同的类型(tun或tap)。&lt;/p&gt;
&lt;p&gt;一旦创建了一个tun/tap接口，就可以像使用其他接口一样使用该接口，既可以给该接口分配IP，分析流量，创建防火墙规则，创建指向该接口的路由等。&lt;/p&gt;
&lt;p&gt;下面看下如何使用一个tun/tap接口。&lt;/p&gt;
&lt;h3 id=&quot;创建接口&quot;&gt;创建接口&lt;/h3&gt;
&lt;p&gt;创建一个新接口的代码与连接到一个持久接口的代码基本是相同的，不同点是前者必须使用root权限执行(即使用&lt;strong&gt;CAP_NET_ADMIN&lt;/strong&gt; capability权限的用户)，而后者可以被任意用户执行。下面看下创建新接口的场景。&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;/dev/net/tun&lt;/strong&gt;必须以读写方式打开，由于该设备被用作创建任何tun/tap虚拟接口的起点，因此也被称为克隆设备(clone device)。操作(&lt;code&gt;open()&lt;/code&gt;)后会返回一个文件描述符，但此时还无法与接口通信。&lt;/p&gt;
&lt;p&gt;下一步会使用一个特殊的&lt;code&gt;ioctl()&lt;/code&gt;系统调用，该函数的入参为上一步得到的文件描述符，以及一个&lt;strong&gt;TUNSETIFF&lt;/strong&gt;常数和一个指向描述虚拟接口的结构体指针(基本上为接口名称和操作模式--tun或tap)。作为一个可变的值，可以不指定虚拟接口名，此时内核将通过尝试分配“下一个”设备来选择一个名称(例如，如果已经存在tap2，则内核会分配tap3，以此类推)。这些操作必须通过&lt;code&gt;root&lt;/code&gt;用户完成(或具有&lt;strong&gt;CAP_NET_ADMIN&lt;/strong&gt; capability权限的用户)。&lt;/p&gt;
&lt;p&gt;如果ioctl()执行成功，则说明已经成功创建虚拟接口，且可以使用文件描述符通信。&lt;/p&gt;
&lt;p&gt;此时，会有两种情况：程序可以使用该接口(可能会在使用前分配IP)，并在程序执行完后结束并销毁该接口；另一种是通过两个特殊的&lt;code&gt;ioctl()&lt;/code&gt;调用来将接口持久化，在程序运行结束后会保留该接口，这样其他程序就可以使用该接口(当使用&lt;code&gt;tunctl&lt;/code&gt;或&lt;code&gt;openvpn --mktun&lt;/code&gt;时会发生这种情况)。同时设置虚拟接口的所有者为一个非root的用户或组，这样当程序以非root用户运行时也可以使用该接口(程序也需要有合适的权限)。&lt;/p&gt;
&lt;p&gt;可以在内核源码的&lt;a href=&quot;https://www.cnblogs.com/charlieroro/p/Documentation/networking/tuntap.rst&quot;&gt;Documentation/networking/tuntap.rst&lt;/a&gt;下找到基本的创建虚拟接口的示例代码，下面对该代码进行简单修改：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;linux /if.h&amp;gt;
#include &amp;lt;linux /if_tun.h&amp;gt;

int tun_alloc(char *dev, int flags) {

  struct ifreq ifr;
  int fd, err;
  char *clonedev = &quot;/dev/net/tun&quot;;

  /* Arguments taken by the function:
   *
   * char *dev: the name of an interface (or '\0'). MUST have enough
   *   space to hold the interface name if '\0' is passed
   * int flags: interface flags (eg, IFF_TUN etc.)
   */

   /* open the clone device */
   if( (fd = open(clonedev, O_RDWR)) &amp;lt; 0 ) { /* 使用读写方式打开 */
     return fd;
   }

   /* preparation of the struct ifr, of type &quot;struct ifreq&quot; */
   memset(&amp;amp;ifr, 0, sizeof(ifr));

   ifr.ifr_flags = flags;   /* IFF_TUN or IFF_TAP, plus maybe IFF_NO_PI */

   if (*dev) {
     /* if a device name was specified, put it in the structure; otherwise,
      * the kernel will try to allocate the &quot;next&quot; device of the
      * specified type */
     strncpy(ifr.ifr_name, dev, IFNAMSIZ); /* 设置设备名称 */
   }

   /* try to create the device */
   if( (err = ioctl(fd, TUNSETIFF, (void *) &amp;amp;ifr)) &amp;lt; 0 ) {
     close(fd);
     return err;
   }

  /* if the operation was successful, write back the name of the
   * interface to the variable &quot;dev&quot;, so the caller can know
   * it. Note that the caller MUST reserve space in *dev (see calling
   * code below) */
  strcpy(dev, ifr.ifr_name);

  /* this is the special file descriptor that the caller will use to talk
   * with the virtual interface */
  return fd;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;tun_alloc()&lt;/strong&gt; 函数具有两个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;char *dev&lt;/code&gt;&lt;/strong&gt;：包含接口的名称(例如，tap0，tun2等)。虽然可以使用任意名称，但建议最好使用能够代表该接口类型的名称。实际中通常会用到类似tunX或tapX这样的名称。如果&lt;code&gt;*dev&lt;/code&gt;为'\0'，则内核会尝试使用第一个对应类型的可用的接口(如tap0，但如果已经存在该接口，则使用tap1，以此类推)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;int flags&lt;/code&gt;&lt;/strong&gt;：包含接口的类型(tun或tap)。通常会使用&lt;code&gt;IFF_TUN&lt;/code&gt;来指定一个TUN设备(报文不包括以太头)，或使用&lt;code&gt;IFF_TAP&lt;/code&gt;来指定一个TAP设备(报文包含以太头)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;此外，还有一个&lt;code&gt;IFF_NO_PI&lt;/code&gt;标志，可以与&lt;code&gt;IFF_TUN&lt;/code&gt;或&lt;code&gt;IFF_TAP&lt;/code&gt;执行OR配合使用。&lt;code&gt;IFF_NO_PI&lt;/code&gt; 会告诉内核不需要提供报文信息，即告诉内核仅需要提供&quot;纯&quot;IP报文，不需要其他字节。否则(不设置&lt;code&gt;IFF_NO_PI&lt;/code&gt;)，会在报文开始处添加4个额外的字节(2字节的标识和2字节的协议)。&lt;code&gt;IFF_NO_PI&lt;/code&gt;不需要再创建和连接之间进行匹配(即当创建时指定了该标志，可以在连接时不指定)，需要注意的是，当使用wireshark在该接口上抓取流量时，不会显示这4个字节。&lt;/p&gt;
&lt;p&gt;因此可以使用如下代码创建一个设备：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;  char tun_name[IFNAMSIZ];
  char tap_name[IFNAMSIZ];
  char *a_name;

  ...

  strcpy(tun_name, &quot;tun1&quot;);
  tunfd = tun_alloc(tun_name, IFF_TUN);  /* tun interface */

  strcpy(tap_name, &quot;tap44&quot;);
  tapfd = tun_alloc(tap_name, IFF_TAP);  /* tap interface */

  a_name = malloc(IFNAMSIZ);
  a_name[0]='\0';
  tapfd = tun_alloc(a_name, IFF_TAP);    /* let the kernel pick a name */
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到此为止，程序可以使用该接口进行通信，或将接口持久化(或将接口分配给特定的用户/组)。&lt;/p&gt;
&lt;p&gt;还有两个&lt;code&gt;ioctl()&lt;/code&gt;调用，通常是一起使用的。第一个调用用于设置(或移除)接口的持久化状态，第二个用于将接口分配给一个普通的(非root)用户。&lt;strong&gt;tunctl&lt;/strong&gt;和&lt;strong&gt;openvpn --mktun&lt;/strong&gt;这两个程序都实现了该特性。下面看下&lt;code&gt;tunctl&lt;/code&gt;的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;...
  /* &quot;delete&quot; is set if the user wants to delete (ie, make nonpersistent)
     an existing interface; otherwise, the user is creating a new
     interface */
  if(delete) {
    /* remove persistent status */
    if(ioctl(tap_fd, TUNSETPERSIST, 0) &amp;lt; 0){
      perror(&quot;disabling TUNSETPERSIST&quot;);
      exit(1);
    }
    printf(&quot;Set '%s' nonpersistent\n&quot;, ifr.ifr_name);
  }
  else {
    /* emulate behaviour prior to TUNSETGROUP */
    if(owner == -1 &amp;amp;&amp;amp; group == -1) {
      owner = geteuid(); /* 如果没有设置用户或组，则使用本uid */
    }

    if(owner != -1) {
      if(ioctl(tap_fd, TUNSETOWNER, owner) &amp;lt; 0){ /* 设置接口用户所属者 */
        perror(&quot;TUNSETOWNER&quot;);
        exit(1);
      }
    }
    if(group != -1) {
      if(ioctl(tap_fd, TUNSETGROUP, group) &amp;lt; 0){ /* 设置接口组所属者 */
        perror(&quot;TUNSETGROUP&quot;);
        exit(1);
      }
    }

    if(ioctl(tap_fd, TUNSETPERSIST, 1) &amp;lt; 0){ /* 设置接口持久化 */
      perror(&quot;enabling TUNSETPERSIST&quot;);
      exit(1);
    }

    if(brief)
      printf(&quot;%s\n&quot;, ifr.ifr_name);
    else {
      printf(&quot;Set '%s' persistent and owned by&quot;, ifr.ifr_name);
      if(owner != -1)
          printf(&quot; uid %d&quot;, owner);
      if(group != -1)
          printf(&quot; gid %d&quot;, group);
      printf(&quot;\n&quot;);
    }
  }
  ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述的&lt;code&gt;ioctl()&lt;/code&gt;调用必须以root执行。但如果该接口已经是一个属于特定用户的持久化接口，那么该用户就可以使用该接口。&lt;/p&gt;
&lt;p&gt;如上所述，连接到一个已有的tun/tap接口的代码与创建一个tun/tap接口的代码相同，即，可以多次使用&lt;strong&gt;tun_alloc()&lt;/strong&gt;。为了执行成功，需要注意如下三点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;接口必须已经存在，且所有者与连接该接口的用户相同&lt;/li&gt;
&lt;li&gt;用户必须有 &lt;strong&gt;/dev/net/tun&lt;/strong&gt;的读写权限&lt;/li&gt;
&lt;li&gt;必须提供创建接口时使用的相同的标志(即，如果接口使用&lt;code&gt;IFF_TUN&lt;/code&gt;创建，则在连接时也必须使用该标志)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当用户指定一个已经存在的接口执行 &lt;strong&gt;TUNSETIFF&lt;/strong&gt; &lt;code&gt;ioctl()&lt;/code&gt; (且该用户是该接口的所有者)时会返回成功，但这种情况下不会创建新的接口，因此一个普通用户可以成功执行该操作。&lt;/p&gt;
&lt;p&gt;因此这样也可以尝试解释当调用&lt;strong&gt;ioctl(TUNSETIFF)&lt;/strong&gt; 会发生什么，以及内核如何区分请求分配一个新接口和请求连接到一个现有的接口。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果没有现有的接口或没有指定接口名称，意味着用户需要请求申请一个新的接口，这样内核会使用给定的名称创建一个接口(如果没有给定接口名称，则会挑选下一个可用的名称)。仅能在root用户下执行。&lt;/li&gt;
&lt;li&gt;如果指定了一个存在的接口名称，意味着用户期望连接到前面分配好的接口上。可以使用普通用户完成该操作。用户需要拥有克隆设备的合适(读写)权限，且为接口的所有者，且指定的模式(tun或tap)可以匹配创建时的模式。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以在内核源码&lt;strong&gt;drivers/net/tun.c&lt;/strong&gt;中查看上述代码的实现，实现函数为&lt;strong&gt;tun_attach()&lt;/strong&gt;, &lt;strong&gt;tun_net_init()&lt;/strong&gt;, &lt;strong&gt;tun_set_iff()&lt;/strong&gt;, &lt;strong&gt;tun_chr_ioctl()&lt;/strong&gt;，其中最后一个函数各种&lt;code&gt;ioctl()&lt;/code&gt;，包括&lt;code&gt;TUNSETIFF&lt;/code&gt;, &lt;code&gt;TUNSETPERSIST&lt;/code&gt;, &lt;code&gt;TUNSETOWNER&lt;/code&gt;, &lt;code&gt;TUNSETGROUP&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;任何一种场景下，非root用户都可以配置接口(如分配IP地址，并up该接口)，但这些操作同样可以作用于任何一个接口。如果一个非root用户需要执行一些root特权才能执行的操作，而可以使用一些方法实现这种需求，如使用suid，sudo等。&lt;/p&gt;
&lt;p&gt;下面是一般的使用场景：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建一个虚拟接口，将其持久化，分配给一个用户，并使用root权限进行配置(如，使用tunctl或其他命令实现启动初始化脚本)；&lt;/li&gt;
&lt;li&gt;然后普通用户就可以连接(或取消连接)到他们期望的虚拟接口上；&lt;/li&gt;
&lt;li&gt;使用root权限销毁虚拟接口，如在系统shutdown时使用脚本(如使用tunctl -d或其他命令)进行清理。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;举例&quot;&gt;举例&lt;/h3&gt;
&lt;p&gt;使用tun/tap接口与使用其他接口并没有什么不同，在创建或连接到已有的接口时必须知道接口的类型，以及期望读取或写入的数据。下面创建一个持久化接口，并给该接口分配IP地址。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# openvpn --mktun --dev tun2 #当然也可以使用 ip tuntap add tun3 mode tun创建tun接口
Fri Mar 26 10:29:29 2010 TUN/TAP device tun2 opened
Fri Mar 26 10:29:29 2010 Persist state set to: ON
# ip link set tun2 up
# ip addr add 10.0.0.1/24 dev tun2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面启动一个网络分析器来查看流量：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# tshark -i tun2 #使用 tcpdump -i tun2 即可
Running as user &quot;root&quot; and group &quot;root&quot;. This could be dangerous.
Capturing on tun2

# On another console
# ping 10.0.0.1
PING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.
64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=0.115 ms
64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=0.105 ms
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行ping操作后发现tshark并没有任何打印信息，即没有任何流量经过该接口。这种现象是符合预期的，因为当ping该接口的IP地址时，操作系统会认为报文不需要在&quot;线路&quot;上进行传输，由内核负责回应ping请求(当ping其他接口的IP地址时的现象也是一样的)。tshark抓包是在网络协议栈外进行的，ping本地IP地址时的报文会在协议层面处理，因此无法抓到报文。&lt;/p&gt;
&lt;p&gt;当给一个接口分配了一个24位的IP地址时，系统会为接口对应的整个IP段分配一个可连接的路由。如果路由可达，当使用tun接口时，内核会发送IP报文(无以太头)，而使用tap接口时，内核首先会发送ARP请求报文。下面是创建的一个tun，一个tap接口，可以看到&lt;code&gt;tap0&lt;/code&gt;上是有mac地址的(可以使用 &lt;strong&gt;SIOCSIFHWADDR&lt;/strong&gt; ioctl() 对mac地址进行修改，参考&lt;strong&gt;drivers/net/tun.c&lt;/strong&gt;中的函数&lt;strong&gt;tun_chr_ioctl()&lt;/strong&gt;)，而&lt;code&gt;tun3&lt;/code&gt;则没有。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;10: tun3: &amp;lt;NO-CARRIER,POINTOPOINT,MULTICAST,NOARP,UP&amp;gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 500
    link/none
11: tap0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 1000
    link/ether d6:64:12:d9:19:44 brd ff:ff:ff:ff:ff:ff
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;31&quot;&gt;
&lt;p&gt;在原文中，可能是因为10.0.0.2是一个可达的地址，因此能够ping通。在实际测试时配置的网段10.0.0.0/24是个虚拟的地址，因此可以看到该路由是linkdown的(下面可以看到，如果有程序连接到这些接口，则对应的link是up的)，因此ping 10.0.0.2时无法抓到报文。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# ip route
default via 172.x.x.x.x dev eth0
1.1.1.0/24 dev tap0 proto kernel scope link src 1.1.1.1 dead linkdown
10.0.0.0/24 dev tun2 proto kernel scope link src 10.0.0.1 dead linkdown
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以使用如下命令进行修改，这样当该路由可用时，会走默认路由&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# echo 1 &amp;gt; /proc/sys/net/ipv4/conf/tun2/ignore_routes_with_linkdown
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就可以在默认路由接口eth0上抓到该报文&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# tcpdump -i eth0 host 10.0.0.2
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
13:11:38.063274 IP iZuf6et6kto8eoc1kok0ydZ &amp;gt; 10.0.0.2: ICMP echo request, id 7030, seq 1, length 64
13:11:39.074138 IP iZuf6et6kto8eoc1kok0ydZ &amp;gt; 10.0.0.2: ICMP echo request, id 7030, seq 2, length 64
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;上面已经创建了接口，但没有程序连接这些接口，下面编写一个简单的程序来在接口上读取内核发送的数据。&lt;/p&gt;
&lt;h4 id=&quot;简单的程序&quot;&gt;简单的程序&lt;/h4&gt;
&lt;p&gt;下面的程序会连接到一个tun接口，并读取内核发送到该接口的数据。如果该接口已经被持久化，那么就可以i使用一个普通用户(可以读写克隆设备&lt;strong&gt;/dev/net/tun&lt;/strong&gt;，并且为接口的所有者)来运行这个程序。下面程序只是个框架，展示了如何从设备获取数据，并对这些数据进行简单的处理。下面程序使用了上面定义的&lt;code&gt;tun_alloc()&lt;/code&gt;函数，完整代码如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;net/if.h&amp;gt;
#include &amp;lt;linux/if_tun.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/ioctl.h&amp;gt;

int tun_alloc(char *dev, int flags) {
    struct ifreq ifr;
    int fd, err;
    char *clonedev = &quot;/dev/net/tun&quot;;

    /* Arguments taken by the function:
     *
     * char *dev: the name of an interface (or '\0'). MUST have enough
     *   space to hold the interface name if '\0' is passed
     * int flags: interface flags (eg, IFF_TUN etc.)
     */
    
     /* open the clone device */
    if( (fd = open(clonedev, O_RDWR)) &amp;lt; 0 ) {
        return fd;
    }
    
    /* preparation of the struct ifr, of type &quot;struct ifreq&quot; */
    memset(&amp;amp;ifr, 0, sizeof(ifr));
    
    ifr.ifr_flags = flags;   /* IFF_TUN or IFF_TAP, plus maybe IFF_NO_PI */
    
    if (*dev) {
        /* if a device name was specified, put it in the structure; otherwise,
         * the kernel will try to allocate the &quot;next&quot; device of the
         * specified type */
        strncpy(ifr.ifr_name, dev, IFNAMSIZ);
    }
    
    /* try to create the device */
    if( (err = ioctl(fd, TUNSETIFF, (void *) &amp;amp;ifr)) &amp;lt; 0 ) {
        close(fd);
        return err;
    }
    
    /* if the operation was successful, write back the name of the
     * interface to the variable &quot;dev&quot;, so the caller can know
     * it. Note that the caller MUST reserve space in *dev (see calling
     * code below) */
    strcpy(dev, ifr.ifr_name);
    
    /* this is the special file descriptor that the caller will use to talk
     * with the virtual interface */
    return fd;
}

int main(){
    int tun_fd,nread;
    unsigned char buffer[2000];
    char tun_name[IFNAMSIZ];
    
    /* Connect to the device */
    strcpy(tun_name, &quot;tun77&quot;);
    tun_fd = tun_alloc(tun_name, IFF_TUN | IFF_NO_PI);  /* tun interface */
    
    if(tun_fd &amp;lt; 0){
        perror(&quot;Allocating interface&quot;);
        exit(1);
    }

    /* Now read data coming from the kernel */
    while(1) {
        /* Note that &quot;buffer&quot; should be at least the MTU size of the interface, eg 1500 bytes */
        nread = read(tun_fd,buffer,sizeof(buffer));
        if(nread &amp;lt; 0) {
            perror(&quot;Reading from interface&quot;);
            close(tun_fd);
            exit(1);
        }
           
        /* Do whatever with the data */
        printf(&quot;Read %d bytes from device %s\n&quot;, nread, tun_name);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在一个终端中执行如下命令，创建一个与程序中使用的名称相同的tun接口&lt;code&gt;tun77&lt;/code&gt;，并执行ping操作：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# openvpn --mktun --dev tun77 --user waldner
Fri Mar 26 10:48:12 2010 TUN/TAP device tun77 opened
Fri Mar 26 10:48:12 2010 Persist state set to: ON
# ip link set tun77 up
# ip addr add 10.0.0.1/24 dev tun77
# ping 10.0.0.2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在另一个终端中启用编译好的程序，可以得到如下结果。84字节中，20个字节为IP首部，8字节为ICMP首部，其余56字节为ICMP的echo负载。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# ./tunclient
Read 84 bytes from device tun77
Read 84 bytes from device tun77
Read 84 bytes from device tun77
Read 84 bytes from device tun77
...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时看下路由信息，由于连接了程序，tun77对应的路由是linkup的&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# ip route
default via 172.20.98.253 dev eth0
10.0.0.0/24 dev tun77 proto kernel scope link src 10.0.0.1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以使用上述程序将多种类型的流量发送到创建的tun接口，并校验从接口上读取的数据的大小。每次read()操作都会返回一个完整的报文。类似地，如果需要往该接口写入数据，则需要写入完整的IP报文。&lt;/p&gt;
&lt;p&gt;那么如何使用这些数据呢?例如可以模拟读取的目标流量行为，为了方便解释，以上面的ping为例。可以解析报文，并从IP首部，ICMP首部和负载中抽取信息，用于构造一个包含ICMP响应的IP报文，并发送出去(即，写入tun/tap设备对应的描述符)，这样发送ping的源头将会接收到该响应。当然，上述程序的使用场景并没有限制为ping，因此可以实现各种网络协议。通常需要解析接收到的报文，并作出相应动作。如果使用tap，为了正确构建响应帧，需要在代码中实现ARP。&lt;a href=&quot;http://user-mode-linux.sourceforge.net/&quot;&gt;User-Mode Linux&lt;/a&gt;也是做了类似的事情：将一个用户空间运行的(修改过的)内核连接到主机上的一个tap接口，并通过该接口与主机进行通信。当然，一个完整的Linux内核会实现TCP/IP和以太网，新的虚拟化平台，如&lt;a href=&quot;http://libvirt.org/&quot;&gt;libvirt&lt;/a&gt;广泛使用tap接口与支持&lt;a href=&quot;http://wiki.qemu.org/Main_Page&quot;&gt;qemu&lt;/a&gt;/&lt;a href=&quot;http://www.linux-kvm.org/&quot;&gt;kvm&lt;/a&gt;的客户机进行通信，接口通常会被命名为vnet0，vnet1等。这些接口只有当它们连接的客户还在运行的时候才会存在，因此没有持久化，但可以在客户机运行期间使用&lt;code&gt;ip link show&lt;/code&gt;和&lt;code&gt;brctl show&lt;/code&gt;进行查看。&lt;/p&gt;
&lt;p&gt;类似地，也可以将自己的代码连接到接口上，并尝试网络编程以及实现以太网和TCP/IP栈。可以通过查看 &lt;strong&gt;drivers/net/tun.c&lt;/strong&gt;中的函数 &lt;strong&gt;tun_get_user()&lt;/strong&gt; 和&lt;strong&gt;tun_put_user()&lt;/strong&gt;来了解tun驱动在内核侧做的事情。&lt;/p&gt;
&lt;h3 id=&quot;隧道&quot;&gt;隧道&lt;/h3&gt;
&lt;p&gt;此外，还可以使用tun/tap接口来实现隧道功能。此时不需要重新实现TCP/IP，只需要编写一个程序，在运行相同程序的主机之间进行原始数据的传递即可(通过反射方式)。假设上面的程序中，除了连接到了tun/tap接口，还与一个远端主机建立了网络连接(该远端主机以服务器模式运行了一个类型的程序)。(实际上两个程序都是相同的，谁是客户端，谁是服务端取决于命令行参数)。一旦运行了两个程序，就可以在两个方向上传递数据。网络连接使用了TCP，但也可以使用给其他协议(如UDP，甚至ICMP)。可以在&lt;a href=&quot;https://backreference.org/wp-content/uploads/2010/03/simpletun.tar.bz2&quot;&gt;simpletun&lt;/a&gt;下载完整的代码。&lt;/p&gt;
&lt;p&gt;下面是程序的主要循环，主要的工作是在tun/tap接口和网络隧道之间传数据。下面简化了debug语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;...
  /* net_fd is the network file descriptor (to the peer), tap_fd is the
     descriptor connected to the tun/tap interface */

  /* use select() to handle two descriptors at once */
  maxfd = (tap_fd &amp;gt; net_fd)?tap_fd:net_fd;

  while(1) {
    int ret;
    fd_set rd_set;

    FD_ZERO(&amp;amp;rd_set);
    FD_SET(tap_fd, &amp;amp;rd_set); FD_SET(net_fd, &amp;amp;rd_set);

    ret = select(maxfd + 1, &amp;amp;rd_set, NULL, NULL, NULL);

    if (ret &amp;lt; 0 &amp;amp;&amp;amp; errno == EINTR) {
      continue;
    }

    if (ret &amp;lt; 0) {
      perror(&quot;select()&quot;);
      exit(1);
    }

    if(FD_ISSET(tap_fd, &amp;amp;rd_set)) {
      /* data from tun/tap: just read it and write it to the network */

      nread = cread(tap_fd, buffer, BUFSIZE);

      /* write length + packet */
      plength = htons(nread);
      nwrite = cwrite(net_fd, (char *)&amp;amp;plength, sizeof(plength));
      nwrite = cwrite(net_fd, buffer, nread);
    }

    if(FD_ISSET(net_fd, &amp;amp;rd_set)) {
      /* data from the network: read it, and write it to the tun/tap interface.
       * We need to read the length first, and then the packet */

      /* Read length */
      nread = read_n(net_fd, (char *)&amp;amp;plength, sizeof(plength));

      /* read packet */
      nread = read_n(net_fd, buffer, ntohs(plength));

      /* now buffer[] contains a full packet or frame, write it into the tun/tap interface */
      nwrite = cwrite(tap_fd, buffer, nread);
    }
  }

...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码的主要逻辑为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;程序使用&lt;code&gt;select()&lt;/code&gt;多路复用来同时操作两个描述符，当任何一个描述符接收到数据后，就会发送到另一个描述符中&lt;/li&gt;
&lt;li&gt;由于程序使用了TCP，接收者会会看到一条数据流，比较难以分辨报文边界。因此当向网络写入一个报文或一个帧时，会在实际数据包的前面加上它的长度(2个字节)。&lt;/li&gt;
&lt;li&gt;当数据来自于tap_fd 描述符时，会一次性读取一个完整的报文或帧，这样就可以将读取的数据直接写入网络，并在报文前面加上长度。由于长度字段为一个short int类型的值，大于1个字节，且使用了二进制格式，因此可以使用&lt;code&gt;ntohs()/htons()&lt;/code&gt;来兼容不同机器的字节序。&lt;/li&gt;
&lt;li&gt;当数据来自于网络时，使用前面提到的技巧，可以通过报文前面的两个字节了解到后面要读取字节流中的报文的长度。当读取报文后，会将其写入tun/tap接口描述符，后续会被内核接收。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用上述代码可以创建一个隧道。首先在隧道两端的主机上配置必要的tun/tap接口，并分配IP地址。在本例中使用了两个tun接口：本机的tun11接口，IP为192.168.0.1/24；远端主机的tun3接口，IP为192.168.0.2/24。simpletun默认会使用TCP端口55555进行连接。远端主机以服务器模式运行simpletun程序，本机以客户端模式运行(远端服务器为10.86.43.52)。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;[remote]# openvpn --mktun --dev tun3 --user waldner
Fri Mar 26 11:11:41 2010 TUN/TAP device tun3 opened
Fri Mar 26 11:11:41 2010 Persist state set to: ON
[remote]# ip link set tun3 up
[remote]# ip addr add 192.168.0.2/24 dev tun3

[remote]$ ./simpletun -i tun3 -s
# server blocks waiting for the client to connect

[local]# openvpn --mktun --dev tun11 --user waldner
Fri Mar 26 11:17:37 2010 TUN/TAP device tun11 opened
Fri Mar 26 11:17:37 2010 Persist state set to: ON
[local]# ip link set tun11 up
[local]# ip addr add 192.168.0.1/24 dev tun11

[local]$ ./simpletun -i tun11 -c 10.86.43.52
# nothing happens, but the peers are now connected

[local]$ ping 192.168.0.2
PING 192.168.0.2 (192.168.0.2) 56(84) bytes of data.
64 bytes from 192.168.0.2: icmp_seq=1 ttl=241 time=42.5 ms
64 bytes from 192.168.0.2: icmp_seq=2 ttl=241 time=41.3 ms
64 bytes from 192.168.0.2: icmp_seq=3 ttl=241 time=41.4 ms
64 bytes from 192.168.0.2: icmp_seq=4 ttl=241 time=41.0 ms

--- 192.168.0.2 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 41.047/41.599/42.588/0.621 ms

# let's try something more exciting now
[local]$ ssh waldner@192.168.0.2
waldner@192.168.0.2's password:
Linux remote 2.6.22-14-xen #1 SMP Fri Feb 29 16:20:01 GMT 2008 x86_64

Welcome to remote!

[remote]$ 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面例子中tun3和tun11之间的流量实际最终还是走的默认路由，通过eth0出去。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;不要在k8s环境或容器环境中运行上述程序，可能会由于iptables导致连接失败&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.86.42.1      0.0.0.0         UG    100    0        0 eth0
10.86.42.0      0.0.0.0         255.255.254.0   U     100    0        0 eth0
169.254.169.254 10.86.43.39     255.255.255.255 UGH   100    0        0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 tun11
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当上述隧道up之后，就可以看到simpletun两端的TCP连接。&quot;真实的&quot;数据(即，上层应用传输的数据，ping或ssh)不会在线路上传输。如果在运行simpletun的主机上启用了IP转发，并在其他主机上创建了必要的路由，那么就可以通过隧道连接到远端网络。&lt;/p&gt;
&lt;p&gt;当使用的虚拟接口类型为tap时，可以透明地桥接两个地理位置遥远的以太网LAN，这样设备会认为它们位于相同的二层网络。为了到这种效果，需要将本地LAN接口和虚拟tap接口一起桥接到网关(即，运行simpletun的主机或使用tap接口的另外一个隧道软件)上。这样，从LAN接收到的帧也会发送到tap接口上(因为使用了桥接)，隧道应用会读取数据并发送到远端。另一个网桥将确保将接收到的帧转发到远程LAN。另外一端也会发生相同的情况。由于在两个LAN之间使用了以太帧，因此可以将两个局域网有效地连接在一起。意味着可以在伦敦有10台机器，而在柏林有50台机器，且可以使用192.168.1.0/24 子网创建一个60台计算机的以太网络(或使用其他子网地址)。&lt;/p&gt;
&lt;h3 id=&quot;拓展&quot;&gt;拓展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;simpletun&lt;/strong&gt; 是一个非常简单的程序，可以通过多种方式进行扩展。首先，可以增加新的连接方式，例如，可以实现使用UDP的连接。再者，目前的数据是以明文方式传输的，但当数据位于程序的buffer中时，可以在传输前进行变更，例如进行加密。&lt;/p&gt;
&lt;p&gt;虽然simpletun是一个简单的程序，但很多热门的程序也是通过这种方式使用tun/tap网络的，如 &lt;a href=&quot;http://openvpn.net/&quot;&gt;OpenVPN&lt;/a&gt;, &lt;a href=&quot;http://vtun.sourceforge.net/&quot;&gt;&lt;code&gt;vtun&lt;/code&gt;&lt;/a&gt;或Openssh的 &lt;a href=&quot;https://backreference.org/2009/11/13/openssh-based-vpns/&quot;&gt;VPN 特性&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后要说明的是，在TCP之上运行隧道并没有任何意义，上述使用场景被称为&quot;tcp之上的tcp&quot;，更多参见&lt;a href=&quot;http://sites.inka.de/~W1011/devel/tcp-tcp.html&quot;&gt;&quot;Why tcp over tcp is a bad idea&quot;&lt;/a&gt;。OpenVPN等应用程序默认使用UDP正是出于这个原因，使用TCP会导致性能降低。&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
</description>
<pubDate>Sat, 15 Aug 2020 15:26:00 +0000</pubDate>
<dc:creator>charlieroro</dc:creator>
<og:description>Tun/Tap接口指导 概述 对tun接口的了解需求主要来自于openshift的网络，在openshift3和openshift4的OVS网络中使用到了tun0接口，作为容器egresss访问路径上</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/charlieroro/p/13497340.html</dc:identifier>
</item>
<item>
<title>【源码】RocketMQ如何实现获取指定消息 - 猫毛·波拿巴</title>
<link>http://www.cnblogs.com/longfurcat/p/13510106.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/longfurcat/p/13510106.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;消息查询是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;消息查询就是根据用户提供的msgId从MQ中取出该消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RocketMQ如果有多个节点如何查询？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题：RocketMQ分布式结构中，数据分散在各个节点，即便是同一Topic的数据，也未必都在一个broker上。客户端怎么知道数据该去哪个节点上查？&lt;/p&gt;
&lt;p&gt;猜想1：逐个访问broker节点查询数据&lt;/p&gt;
&lt;p&gt;猜想2：有某种数据中心存在，该中心知道所有消息存储的位置，只要向该中心查询即可得到消息具体位置，进而取得消息内容&lt;/p&gt;
&lt;p&gt;实际：&lt;/p&gt;
&lt;p&gt;1.消息Id中含有消息所在的broker的地址信息（IP\Port）以及该消息在CommitLog中的偏移量。&lt;/p&gt;
&lt;p&gt;2.客户端实现会从msgId字符串中解析出broker地址，向指定broker节查询消息。&lt;/p&gt;
&lt;p&gt;问题：CommitLog文件有多个，只有偏移量估计不能确定在哪个文件吧？&lt;/p&gt;
&lt;p&gt;实际：单个Broker节点内offset是全局唯一的，不是每个CommitLog文件的偏移量都是从0开始的。单个节点内所有CommitLog文件共用一套偏移量，每个文件的文件名为其第一个消息的偏移量。所以可以根据偏移量和文件名确定CommitLog文件。&lt;/p&gt;
&lt;h2&gt;源码阅读&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;0.使用方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MessageExt  msg = consumer.viewMessage(msgId);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.消息ID解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个了解下就可以了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MessageId {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; SocketAddress address;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; offset;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MessageId(SocketAddress address, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; offset) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.offset =&lt;span&gt; offset;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get-set&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;from MQAdminImpl.java&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MessageExt viewMessage(
    String msgId) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RemotingException, MQBrokerException, InterruptedException, MQClientException {

    MessageId messageId &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从msgId字符串中解析出address和offset
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;address = ip:port
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;offset为消息在CommitLog文件中的偏移量&lt;/span&gt;
        messageId =&lt;span&gt; MessageDecoder.decodeMessageId(msgId);
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MQClientException(ResponseCode.NO_MESSAGE, &quot;query message by id finished, but no message.&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mQClientFactory.getMQClientAPIImpl().viewMessage(RemotingUtil.socketAddress2String(messageId.getAddress()),
        messageId.getOffset(), timeoutMillis);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;from MessageDecoder.java&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageId decodeMessageId(&lt;span&gt;final&lt;/span&gt; String msgId) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UnknownHostException {
    SocketAddress address;
    &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; offset;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ipv4和ipv6的区别
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果msgId总长度超过32字符，则为ipv6&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; ipLength = msgId.length() == 32 ? 4 * 2 : 16 * 2&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] ip = UtilAll.string2bytes(msgId.substring(0&lt;span&gt;, ipLength));
    &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] port = UtilAll.string2bytes(msgId.substring(ipLength, ipLength + 8&lt;span&gt;));
    ByteBuffer bb &lt;/span&gt;=&lt;span&gt; ByteBuffer.wrap(port);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; portInt = bb.getInt(0&lt;span&gt;);
    address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InetSocketAddress(InetAddress.getByAddress(ip), portInt);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; offset&lt;/span&gt;
    &lt;span&gt;byte&lt;/span&gt;[] data = UtilAll.string2bytes(msgId.substring(ipLength + 8, ipLength + 8 + 16&lt;span&gt;));
    bb &lt;/span&gt;=&lt;span&gt; ByteBuffer.wrap(data);
    offset &lt;/span&gt;= bb.getLong(0&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageId(address, offset);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.长连接客户端RPC实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要发请求首先得先建立连接，这里方法可以看到创建连接相关的操作。值得注意的是，第一次访问的时候可能连接还没建立，建立连接需要消耗一段时间。代码中对这个时间也做了判断，如果连接建立完成后，发现已经超时，则不再发出请求。目的应该是尽可能减少请求线程的阻塞时间。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;from NettyRemotingClient.java&lt;/span&gt;
&lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; RemotingCommand invokeSync(String addr, &lt;span&gt;final&lt;/span&gt; RemotingCommand request, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; timeoutMillis)
    &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException, RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException {
    &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; beginStartTime =&lt;span&gt; System.currentTimeMillis();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里会先检查有无该地址的通道，有则返回，无则创建&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Channel channel = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getAndCreateChannel(addr);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (channel != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; channel.isActive()) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前置钩子&lt;/span&gt;
&lt;span&gt;            doBeforeRpcHooks(addr, request); 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断通道建立完成时是否已到达超时时间，如果超时直接抛出异常。不发请求&lt;/span&gt;
            &lt;span&gt;long&lt;/span&gt; costTime = System.currentTimeMillis() -&lt;span&gt; beginStartTime;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (timeoutMillis &amp;lt;&lt;span&gt; costTime) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RemotingTimeoutException(&quot;invokeSync call timeout&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步调用&lt;/span&gt;
            RemotingCommand response = &lt;span&gt;this&lt;/span&gt;.invokeSyncImpl(channel, request, timeoutMillis -&lt;span&gt; costTime);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后置钩子&lt;/span&gt;
            doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(channel), request, response); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;后置钩子&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; response;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (RemotingSendRequestException e) {
            log.warn(&lt;/span&gt;&quot;invokeSync: send request exception, so close the channel[{}]&quot;&lt;span&gt;, addr);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.closeChannel(addr, channel);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; e;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (RemotingTimeoutException e) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (nettyClientConfig.isClientCloseSocketIfTimeout()) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.closeChannel(addr, channel);
                log.warn(&lt;/span&gt;&quot;invokeSync: close socket because of timeout, {}ms, {}&quot;&lt;span&gt;, timeoutMillis, addr);
            }
            log.warn(&lt;/span&gt;&quot;invokeSync: wait response timeout exception, the channel[{}]&quot;&lt;span&gt;, addr);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; e;
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.closeChannel(addr, channel);
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RemotingConnectException(addr);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下一步看看它的同步调用做了什么处理。注意到它会构建一个Future对象加入待响应池，发出请求报文后就挂起线程，然后等待唤醒（waitResponse内部使用CountDownLatch等待）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//from NettyRemotingAbstract.java&lt;br/&gt;public&lt;/span&gt; RemotingCommand invokeSyncImpl(&lt;span&gt;final&lt;/span&gt; Channel channel, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; RemotingCommand request,
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; timeoutMillis)
    &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException, RemotingSendRequestException, RemotingTimeoutException {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求id&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; opaque =&lt;span&gt; request.getOpaque();

    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求存根&lt;/span&gt;
        &lt;span&gt;final&lt;/span&gt; ResponseFuture responseFuture = &lt;span&gt;new&lt;/span&gt; ResponseFuture(channel, opaque, timeoutMillis, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入待响应的请求池&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.responseTable.put(opaque, responseFuture);
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; SocketAddress addr =&lt;span&gt; channel.remoteAddress();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将请求发出，成功发出时更新状态&lt;/span&gt;
        channel.writeAndFlush(request).addListener(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChannelFutureListener() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; operationComplete(ChannelFuture f) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (f.isSuccess()) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若成功发出，更新请求状态为“已发出”&lt;/span&gt;
                    responseFuture.setSendRequestOK(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    responseFuture.setSendRequestOK(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                }

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若发出失败，则从池中移除（没用了，释放资源）&lt;/span&gt;
&lt;span&gt;                responseTable.remove(opaque);
                responseFuture.setCause(f.cause());
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;putResponse的时候会唤醒等待的线程&lt;/span&gt;
                responseFuture.putResponse(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                log.warn(&lt;/span&gt;&quot;send a request command to channel &amp;lt;&quot; + addr + &quot;&amp;gt; failed.&quot;&lt;span&gt;);
            }
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只等待一段时间，不会一直等下去
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若正常响应，则收到响应后，此线程会被唤醒，继续执行下去
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若超时，则到达该时间后线程苏醒，继续执行&lt;/span&gt;
        RemotingCommand responseCommand =&lt;span&gt; responseFuture.waitResponse(timeoutMillis);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; responseCommand) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (responseFuture.isSendRequestOK()) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RemotingTimeoutException(RemotingHelper.parseSocketAddressAddr(addr), timeoutMillis,
                    responseFuture.getCause());
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RemotingSendRequestException(RemotingHelper.parseSocketAddressAddr(addr), responseFuture.getCause());
            }
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; responseCommand;
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正常响应完成时，将future释放（正常逻辑）
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;超时时，将future释放。这个请求已经作废了，后面如果再收到响应，就可以直接丢弃了（由于找不到相关的响应钩子，就不处理了）&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.responseTable.remove(opaque);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好，我们再来看看收到报文的时候是怎么处理的。我们都了解JDK中的Future的原理，大概就是将这个任务提交给其他线程处理，该线程处理完毕后会将结果写入到Future对象中，写入时如果有线程在等待该结果，则唤醒这些线程。这里也差不多，只不过执行线程在服务端，服务执行完毕后会将结果通过长连接发送给客户端，客户端收到后根据报文中的ID信息从待响应池中找到Future对象，然后就是类似的处理了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; NettyClientHandler &lt;span&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;RemotingCommand&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;底层解码完毕得到RemotingCommand的报文&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        processMessageReceived(ctx, msg);
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; processMessageReceived(ChannelHandlerContext ctx, RemotingCommand msg) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingCommand cmd =&lt;span&gt; msg;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cmd != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断类型&lt;/span&gt;
        &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (cmd.getType()) {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; REQUEST_COMMAND:
                processRequestCommand(ctx, cmd);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; RESPONSE_COMMAND:
                processResponseCommand(ctx, cmd);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; processResponseCommand(ChannelHandlerContext ctx, RemotingCommand cmd) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得消息id&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; opaque =&lt;span&gt; cmd.getOpaque();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从待响应池中取得对应请求&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; ResponseFuture responseFuture =&lt;span&gt; responseTable.get(opaque);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (responseFuture != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将响应值注入到ResponseFuture对象中，等待线程可从这个对象获取结果&lt;/span&gt;
&lt;span&gt;        responseFuture.setResponseCommand(cmd);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求已处理完毕，释放该请求&lt;/span&gt;
&lt;span&gt;        responseTable.remove(opaque);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有回调函数的话则回调（由当前线程处理）&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (responseFuture.getInvokeCallback() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            executeInvokeCallback(responseFuture);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有的话，则唤醒等待线程（由等待线程做处理）&lt;/span&gt;
&lt;span&gt;            responseFuture.putResponse(cmd);
            responseFuture.release();
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        log.warn(&lt;/span&gt;&quot;receive response, but not matched any request, &quot; +&lt;span&gt; RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
        log.warn(cmd.toString());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结一下，客户端的处理时序大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1313132/202008/1313132-20200815223449372-319586458.png&quot; alt=&quot;&quot; width=&quot;767&quot; height=&quot;261&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结构大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1313132/202008/1313132-20200815225519598-1082658954.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.服务端的处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;//todo 服务端待补充CommitLog文件映射相关内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; NettyServerHandler &lt;span&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;RemotingCommand&amp;gt;&lt;span&gt; {

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        processMessageReceived(ctx, msg);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;from NettyRemotingAbscract.java&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; processMessageReceived(ChannelHandlerContext ctx, RemotingCommand msg) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingCommand cmd =&lt;span&gt; msg;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cmd != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (cmd.getType()) {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; REQUEST_COMMAND: &lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务端走这里&lt;/span&gt;
&lt;span&gt;                processRequestCommand(ctx, cmd);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; RESPONSE_COMMAND:
                processResponseCommand(ctx, cmd);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;from NettyRemotingAbscract.java&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; processRequestCommand(&lt;span&gt;final&lt;/span&gt; ChannelHandlerContext ctx, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; RemotingCommand cmd) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查看有无该请求code相关的处理器&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Pair&amp;lt;NettyRequestProcessor, ExecutorService&amp;gt; matched = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.processorTable.get(cmd.getCode());
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有，则使用默认处理器（可能没有默认处理器）&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Pair&amp;lt;NettyRequestProcessor, ExecutorService&amp;gt; pair = &lt;span&gt;null&lt;/span&gt; == matched ? &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.defaultRequestProcessor : matched;
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; opaque =&lt;span&gt; cmd.getOpaque();

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pair != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        Runnable run &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    doBeforeRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd);
                    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingResponseCallback callback = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RemotingResponseCallback() {
                        @Override
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; callback(RemotingCommand response) {
                            doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cmd.isOnewayRPC()) {
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (response != &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不为null，则由本类将响应值写会给请求方&lt;/span&gt;
&lt;span&gt;                                    response.setOpaque(opaque);
                                    response.markResponseType();
                                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                                        ctx.writeAndFlush(response);
                                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable e) {
                                        log.error(&lt;/span&gt;&quot;process request over, but response failed&quot;&lt;span&gt;, e);
                                        log.error(cmd.toString());
                                        log.error(response.toString());
                                    }
                                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为null，意味着processor内部已经将响应处理了，这里无需再处理。&lt;/span&gt;
&lt;span&gt;                                }
                            }
                        }
                    };
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pair.getObject1() &lt;span&gt;instanceof&lt;/span&gt; AsyncNettyRequestProcessor) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;QueryMessageProcessor为异步处理器&lt;/span&gt;
                        AsyncNettyRequestProcessor processor =&lt;span&gt; (AsyncNettyRequestProcessor)pair.getObject1();
                        processor.asyncProcessRequest(ctx, cmd, callback);
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; { 
                        NettyRequestProcessor processor &lt;/span&gt;=&lt;span&gt; pair.getObject1();
                        RemotingCommand response &lt;/span&gt;=&lt;span&gt; processor.processRequest(ctx, cmd);
                        doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);
                        callback.callback(response);
                    }
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable e) {
                    log.error(&lt;/span&gt;&quot;process request exception&quot;&lt;span&gt;, e);
                    log.error(cmd.toString());

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cmd.isOnewayRPC()) {
                        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingCommand response =&lt;span&gt; RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR,
                            RemotingHelper.exceptionSimpleDesc(e));
                        response.setOpaque(opaque);
                        ctx.writeAndFlush(response);
                    }
                }
            }
        };

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (pair.getObject1().rejectRequest()) {
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingCommand response =&lt;span&gt; RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,
                &lt;/span&gt;&quot;[REJECTREQUEST]system busy, start flow control for a while&quot;&lt;span&gt;);
            response.setOpaque(opaque);
            ctx.writeAndFlush(response);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RequestTask requestTask = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestTask(run, ctx.channel(), cmd);
            pair.getObject2().submit(requestTask);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (RejectedExecutionException e) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((System.currentTimeMillis() % 10000) == 0&lt;span&gt;) {
                log.warn(RemotingHelper.parseChannelRemoteAddr(ctx.channel())
                    &lt;/span&gt;+ &quot;, too many requests and system thread pool busy, RejectedExecutionException &quot;
                    +&lt;span&gt; pair.getObject2().toString()
                    &lt;/span&gt;+ &quot; request code: &quot; +&lt;span&gt; cmd.getCode());
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cmd.isOnewayRPC()) {
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingCommand response =&lt;span&gt; RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,
                    &lt;/span&gt;&quot;[OVERLOAD]system busy, start flow control for a while&quot;&lt;span&gt;);
                response.setOpaque(opaque);
                ctx.writeAndFlush(response);
            }
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        String error &lt;/span&gt;= &quot; request type &quot; + cmd.getCode() + &quot; not supported&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingCommand response =&lt;span&gt;
            RemotingCommand.createResponseCommand(RemotingSysResponseCode.REQUEST_CODE_NOT_SUPPORTED, error);
        response.setOpaque(opaque);
        ctx.writeAndFlush(response);
        log.error(RemotingHelper.parseChannelRemoteAddr(ctx.channel()) &lt;/span&gt;+&lt;span&gt; error);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;from QueryMessageProcesor.java&lt;/span&gt;
&lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)
    &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RemotingCommandException {
    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (request.getCode()) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; RequestCode.QUERY_MESSAGE:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.queryMessage(ctx, request);
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; RequestCode.VIEW_MESSAGE_BY_ID: &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过msgId查询消息&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.viewMessageById(ctx, request);
        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RemotingCommand viewMessageById(ChannelHandlerContext ctx, RemotingCommand request)
    &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RemotingCommandException {
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; RemotingCommand response = RemotingCommand.createResponseCommand(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; ViewMessageRequestHeader requestHeader =&lt;span&gt;
        (ViewMessageRequestHeader) request.decodeCommandCustomHeader(ViewMessageRequestHeader.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    response.setOpaque(request.getOpaque());

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;getMessagetStore得到当前映射到内存中的CommitLog文件，然后根据偏移量取得数据&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; SelectMappedBufferResult selectMappedBufferResult =
        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.brokerController.getMessageStore().selectOneMessageByOffset(requestHeader.getOffset());
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (selectMappedBufferResult != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        response.setCode(ResponseCode.SUCCESS);
        response.setRemark(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将响应通过socket写回给客户端&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;response对象的数据作为header
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息内容作为body&lt;/span&gt;
            FileRegion fileRegion =
                &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OneMessageTransfer(response.encodeHeader(selectMappedBufferResult.getSize()),
                    selectMappedBufferResult);
            ctx.channel().writeAndFlush(fileRegion).addListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChannelFutureListener() {
                @Override
                &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; operationComplete(ChannelFuture future) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                    selectMappedBufferResult.release();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;future.isSuccess()) {
                        log.error(&lt;/span&gt;&quot;Transfer one message from page cache failed, &quot;&lt;span&gt;, future.cause());
                    }
                }
            });
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable e) {
            log.error(&lt;/span&gt;&quot;&quot;&lt;span&gt;, e);
            selectMappedBufferResult.release();
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有值，则直接写回给请求方。这里返回null是不需要由外层处理响应。&lt;/span&gt;
    } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        response.setCode(ResponseCode.SYSTEM_ERROR);
        response.setRemark(&lt;/span&gt;&quot;can not find message by the offset, &quot; +&lt;span&gt; requestHeader.getOffset());
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; response;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 15 Aug 2020 15:14:00 +0000</pubDate>
<dc:creator>猫毛·波拿巴</dc:creator>
<og:description>概要 消息查询是什么？ 消息查询就是根据用户提供的msgId从MQ中取出该消息 RocketMQ如果有多个节点如何查询？ 问题：RocketMQ分布式结构中，数据分散在各个节点，即便是同一Topic的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/longfurcat/p/13510106.html</dc:identifier>
</item>
<item>
<title>【原创】Linux虚拟化KVM-Qemu分析（一） - LoyenWang</title>
<link>http://www.cnblogs.com/LoyenWang/p/13510925.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LoyenWang/p/13510925.html</guid>
<description>&lt;ul&gt;&lt;li&gt;&lt;code&gt;Read the fucking source code!&lt;/code&gt; --By 鲁迅&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A picture is worth a thousand words.&lt;/code&gt; --By 高尔基&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;KVM版本：5.9.1&lt;/li&gt;
&lt;li&gt;QEMU版本：5.0.0&lt;/li&gt;
&lt;li&gt;工具：Source Insight 3.5， Visio&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;&lt;li&gt;从这篇文章开始，将开始虚拟化的系列研究了，大概会涉及到ARM64虚拟化支持、KVM、QEMU等分析；&lt;/li&gt;
&lt;li&gt;虚拟化相关的实践与操作有且仅有：VMware/VirtualBox等虚拟机使用、QEMU使用、QEMU源码修改模拟IO设备；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Show me the code&lt;/code&gt;，一切从源代码出发；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本文作为开篇，从宏观方面来进行介绍，有个初步认识，不涉及到具体原理分析。&lt;/p&gt;

&lt;h2 id=&quot;21-虚拟化&quot;&gt;2.1 虚拟化&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202008/1771657-20200815230205366-228042642.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;什么是虚拟化？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;虚拟化是一种资源管理技术，在非虚拟化系统中，单个操作系统管理和使用所有的硬件资源，而在虚拟化系统中，硬件资源可以被抽象和分割成多个虚拟的实体用于支持多个操作系统，多个操作系统可以共享所有的实体硬件资源，从而达到物理资源的最大化利用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Virtual Machine Motior(VMM)&lt;/code&gt;，虚拟机监控器，也叫&lt;code&gt;Hypervisor&lt;/code&gt;，向下管理实际的物理资源，向上给不同的虚拟机提供逻辑资源；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Virtual Machine(VM)&lt;/code&gt;，虚拟机可以根据自己的选择运行不同的OS（Guest OS），它会认为自己独享硬件；&lt;/li&gt;
&lt;li&gt;虚拟化的好处就是能提高资源的利用率，比如当前计算机的配置资源都很高，实际的利用率比较低，如果进行统一管理并进行虚拟化，那就可以支持更多的用户来合理利用了；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;22-软件虚拟化和硬件虚拟化&quot;&gt;2.2 软件虚拟化和硬件虚拟化&lt;/h2&gt;
&lt;h3 id=&quot;221-软件虚拟化&quot;&gt;2.2.1 软件虚拟化&lt;/h3&gt;
&lt;p&gt;通过软件模拟来实现VMM层，比如&lt;code&gt;QEMU&lt;/code&gt;，还是以图片来举例说明下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202008/1771657-20200815230252833-942651255.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;以典型的场景为例（ARM+Linux的模拟环境）：在PC机Ubuntu系统中使用Qemu来模拟ARM64处理器，并在ARM64中运行Guest OS，假设Guest OS也为Linux；&lt;/li&gt;
&lt;li&gt;在没有硬件虚拟化的支持下，QEMU本质上完成的工作是二进制的翻译，这个问题怎么来理解呢？比如Guest OS运行时，APP和OS都认为自己是运行在ARM64中，执行文件也都是交叉编译器生成的，我们都知道不同的处理器架构，指令集都不一样，ARM上运行的程序放置到X86运行是无法执行的，Qemu的出现就可以解决这个问题，硬生生转换翻译过去；&lt;/li&gt;
&lt;li&gt;Qemu的翻译过程为：将&lt;code&gt;Guest代码指令&lt;/code&gt;翻译成&lt;code&gt;TCG(Tiny Code Generator)中间代码&lt;/code&gt;，最终翻译成&lt;code&gt;Host架构支持的代码指令&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;222-硬件虚拟化&quot;&gt;2.2.2 硬件虚拟化&lt;/h3&gt;
&lt;p&gt;纯软件行为来翻译指令，显然是一件很低效的事情，硬件虚拟化的支持可以提高整体的性能，硬件虚拟化指处理器本身提供能力来让客户机指令独立运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202008/1771657-20200815230344270-2102150763.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;KVM (Kernel-Based Virtual Machine)&lt;/code&gt;，基于内核的虚拟机，实现对CPU和内存的虚拟化，以及硬件I/O虚拟化的拦截，Guest的I/O被&lt;code&gt;KVM&lt;/code&gt;拦截后交给Qemu去处理；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KVM&lt;/code&gt;是内核的一个Module，可以让Linux变成一个&lt;code&gt;Hypervisor&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KVM&lt;/code&gt;需要Host处理器本身支持虚拟化扩展，比如&lt;code&gt;intel VT&lt;/code&gt;，&lt;code&gt;AMD-V&lt;/code&gt;等；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;23-半虚拟化和全虚拟化&quot;&gt;2.3 半虚拟化和全虚拟化&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202008/1771657-20200815230407725-1827452855.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;半虚拟化（&lt;code&gt;Para-Virtualization&lt;/code&gt;）：客户机操作系统知道自身运行在虚拟环境里，进行定制化修改，以配合Hypervisor进行工作，优点是半虚拟化的架构更精简，性能上有一定优势，缺点是客户机OS需要修改，用户体验偏差；&lt;/li&gt;
&lt;li&gt;典型的半虚拟化技术&lt;code&gt;virtio&lt;/code&gt;，需要宿主机/Hypervisor和客户机都安装对应的驱动；&lt;/li&gt;
&lt;li&gt;全虚拟化（&lt;code&gt;Full Virtualization&lt;/code&gt;）：客户机操作系统不需要任何改动，使用简单，由于全虚拟化需要模拟出完整的，和物理平台一样的平台给客户机，因此也增加了Hypervisor的设计难度；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;24-type1虚拟化和type2虚拟化&quot;&gt;2.4 Type1虚拟化和Type2虚拟化&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202008/1771657-20200815230423866-799257917.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;从软件的框架角度，根据Hypervisor是直接在硬件之上，还是在宿主机操作系统之上，可以将虚拟化分成Type1和Type2；&lt;/li&gt;
&lt;li&gt;Type1虚拟化：&lt;code&gt;native/bare-mental Hypervisor&lt;/code&gt;，直接控制硬件资源和客户机，典型的是&lt;code&gt;Xen&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;Type2虚拟化：Hypervisor运行在宿主机操作系统之上，典型的比如：&lt;code&gt;VMware Workstation&lt;/code&gt;, &lt;code&gt;KVM&lt;/code&gt;等，Hypervisor只是宿主机操作系统的一个应用程序；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上文的虚拟化分类来看，我们研究目标&lt;code&gt;KVM+Qemu&lt;/code&gt;，是采用硬件虚拟化技术的全虚拟化方案（Type2）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202008/1771657-20200815230442397-941820611.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Qemu (Quick Emulator)&lt;/code&gt;：是虚拟化方案的用户态组成部分，它有两种模式：1）&lt;code&gt;Emulator&lt;/code&gt;，模拟器，模拟各种硬件，使用的是二进制翻译技术；2）&lt;code&gt;Virtualiser&lt;/code&gt;，虚拟机，通过&lt;code&gt;ioctl&lt;/code&gt;与&lt;code&gt;KVM内核模块&lt;/code&gt;进行交互，完成虚拟化功能；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Qemu&lt;/code&gt;为每个&lt;code&gt;VM虚拟机&lt;/code&gt;创建一个进程，针对每个&lt;code&gt;vCPU虚拟CPU&lt;/code&gt;创建一个线程，Guest的系统和应用运行在&lt;code&gt;vCPU&lt;/code&gt;之上；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Qemu&lt;/code&gt;能模拟I/O功能，而这部分功能&lt;code&gt;KVM&lt;/code&gt;可能并不是全部支持，执行流程如下：虚拟机&lt;code&gt;VM&lt;/code&gt;中的程序执行I/O操作，&lt;code&gt;VM&lt;/code&gt;退出进入KVM，KVM进行判断处理并将控制权交给&lt;code&gt;Qemu&lt;/code&gt;，由&lt;code&gt;Qemu&lt;/code&gt;来模拟I/O设备来响应程序的I/O请求；&lt;/li&gt;
&lt;li&gt;KVM内核模块，依赖于底层硬件的虚拟化支持，主要的功能是初始化CPU硬件，打开虚拟化模式，将虚拟化客户机运行在虚拟机模式下，并对虚拟化客户机的运行提供一定的支持；&lt;/li&gt;
&lt;li&gt;KVM内核模块，实现CPU的虚拟化、内存的虚拟化等，而外设IO的虚拟化，通常不由KVM模块负责，只有对性能要求很高的虚拟设备才需要由KVM内核模块来负责，因此也就有KVM + Qemu的组合方案了；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本文纯当扫盲贴了，至于具体技术细节的深入分析，后续会进行不定期更新。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;《KVM实战-原理、进阶与性能调优》&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;欢迎关注个人公众号，不定期更新内核机制文章&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202008/1771657-20200815230534684-1723103109.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 15:07:00 +0000</pubDate>
<dc:creator>LoyenWang</dc:creator>
<og:description>背景 Read the fucking source code! --By 鲁迅 A picture is worth a thousand words. --By 高尔基 说明： KVM版本：5.9</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/LoyenWang/p/13510925.html</dc:identifier>
</item>
</channel>
</rss>