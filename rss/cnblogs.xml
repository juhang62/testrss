<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>大数据技术之_06_Zookeeper学习_Zookeeper入门+Zookeeper安装+Zookeeper内部原理+Zookeeper实战（开发重点）+企业面试真题 - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10421474.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10421474.html</guid>
<description>&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/23/kfvB7t.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h2zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;第2章 Zookeeper安装&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 id=&quot;h21&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1 本地模式安装部署&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、安装前准备&lt;/strong&gt;&lt;br/&gt;（1）安装jdk&lt;br/&gt;（2）拷贝Zookeeper安装包到Linux系统下&lt;br/&gt;（3）解压到指定目录&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 software]$ tar -zxvf zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;.tar.gz -C /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、配置修改&lt;/strong&gt;&lt;br/&gt;（1）将/opt/module/zookeeper-3.4.10/conf/这个路径下的zoo_sample.cfg修改为zoo.cfg；&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 conf]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;zookeeper&lt;/span&gt;-3.4.10/&lt;span class=&quot;hljs-title&quot;&gt;conf&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 conf]$ mv zoo_sample.cfg zoo.cfg&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）打开zoo.cfg文件，修改dataDir路径：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ vim zoo.cfg&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改如下内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;dataDir&lt;/span&gt;=/opt/module/zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/zkData&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）在/opt/module/zookeeper-3.4.10/这个目录上创建zkData文件夹&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; zkData&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、操作Zookeeper&lt;/strong&gt;&lt;br/&gt;（1）启动Zookeeper：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ bin/zkServer.sh start&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）查看进程是否启动：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ jps&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4020&lt;/span&gt; Jps&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4001&lt;/span&gt; QuorumPeerMain&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）查看状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]$ bin/zkServer.sh status&lt;br/&gt;ZooKeeper JMX enabled &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;&lt;br/&gt;Using config: &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/bin/&lt;/span&gt;../conf/zoo.cfg&lt;br/&gt;Mode: standalone&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）启动客户端：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ bin/zkCli.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）退出客户端：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 0&lt;/span&gt;] quit&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）停止Zookeeper服务：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ bin/zkServer.sh stop&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h22&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2 配置参数解读&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Zookeeper中的配置文件zoo.cfg中参数含义解读如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、tickTime=2000：通信心跳数，Zookeeper服务器与客户端心跳时间，单位毫秒。&lt;br/&gt;Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。&lt;br/&gt;它用于&lt;code&gt;心跳机制&lt;/code&gt;，并且设置最小的session超时时间为两倍心跳时间。(session的最小超时时间是2*tickTime)&lt;/li&gt;
&lt;li&gt;2、initLimit=10：LF初始通信时限&lt;br/&gt;集群中的&lt;code&gt;Follower跟随者服务器&lt;/code&gt;与&lt;code&gt;Leader领导者服务器&lt;/code&gt;之间初始连接时能容忍的最多心跳数（tickTime的数量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。&lt;/li&gt;
&lt;li&gt;3、syncLimit=5：LF同步通信时限&lt;br/&gt;集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，Leader认为Follwer死掉，从服务器列表中删除Follwer。&lt;/li&gt;
&lt;li&gt;4、dataDir：数据文件目录+数据持久化路径&lt;br/&gt;主要用于保存Zookeeper中的数据。&lt;/li&gt;
&lt;li&gt;5、clientPort=2181：客户端连接端口&lt;br/&gt;监听客户端连接的端口。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h3zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;第3章 Zookeeper内部原理&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h31&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1 选举机制（面试重点）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul readability=&quot;11&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;1）半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;2）Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过&lt;code&gt;内部的选举机制&lt;/code&gt;临时产生的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;3）以一个简单的例子来说明整个选举的过程。&lt;br/&gt;假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动，来看看会发生什么，如下图所示。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/23/kfvstf.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;（1）服务器1启动，此时只有它一台服务器启动了，它发出去的报文没有任何响应，所以它的选举状态一直是LOOKING状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;（2）服务器2启动，它与最开始启动的服务器1进行通信，互相交换自己的选举结果，由于两者都没有历史数据，所以id值较大的服务器2胜出，但是由于没有达到超过半数以上的服务器都同意选举它(这个例子中的半数以上是3)，所以服务器1、2还是继续保持LOOKING状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;（3）服务器3启动，根据前面的理论分析，服务器3成为服务器1、2、3中的老大，而与上面不同的是，此时有三台服务器选举了它，所以它成为了这次选举的Leader。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;（4）服务器4启动，根据前面的分析，理论上服务器4应该是服务器1、2、3、4中最大的，但是由于前面已经有半数以上的服务器选举了服务器3，所以它只能接收当小弟的命了。&lt;br/&gt;（5）服务器5启动，同4一样当小弟。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h32&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2 节点类型&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/23/kfvg1g.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h33stat&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3 stat结构体&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/23/kfvc9S.png&quot; alt=&quot;&quot;/&gt;&lt;ul&gt;&lt;li&gt;1）cZxid - 创建节点的事务zxid&lt;br/&gt;每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。&lt;br/&gt;事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2）ctime - znode被创建的毫秒数(从1970年开始)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3）mZxid - znode最后更新的事务zxid&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;4）mtime - znode最后修改的毫秒数(从1970年开始)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;5）pZxid - znode最后更新的子节点zxid&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;6）cversion - znode子节点变化号，znode子节点修改次数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;7）dataVersion - znode数据变化号&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;8）aclVersion - znode访问控制列表的变化号&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;9）ephemeralOwner - 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10）dataLength - znode的数据长度&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;11）numChildren - znode子节点数量&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h34&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4 监听器原理（面试重点）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/23/kfvfns.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h35&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5 写数据流程&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/23/kfv2cQ.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h4zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;第4章 Zookeeper实战（开发重点）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h41&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1 分布式安装部署&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、集群规划&lt;br/&gt;  在hadoop102、hadoop103和hadoop104三个节点上部署Zookeeper。&lt;br/&gt;2、解压安装&lt;br/&gt;（1）解压Zookeeper安装包到/opt/module/目录下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 software]$ tar -zxvf zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;.tar.gz -C /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）同步/opt/module/zookeeper-3.4.10/目录内容到hadoop103、hadoop104&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;]$ &lt;span class=&quot;hljs-title&quot;&gt;xsync&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;zookeeper&lt;/span&gt;-3.4.10/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、配置服务器编号&lt;br/&gt;（1）在/opt/module/zookeeper-3.4.10/这个目录下创建zkData&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; -p zkData&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在/opt/module/zookeeper-3.4.10/zkData目录下创建一个myid的文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zkData]$ touch myid&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加myid文件，注意一定要在linux里面创建，在notepad++里面很可能乱码。&lt;br/&gt;（3）编辑myid文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zkData]$ vim myid&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在文件中添加与server对应的编号：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;2&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）拷贝配置好的zookeeper到其他机器上&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zkData]$ xsync myid&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并分别在hadoop102、hadoop103上修改myid文件中内容为3、4&lt;br/&gt;4、配置zoo.cfg文件&lt;br/&gt;（1）重命名/opt/module/zookeeper-3.4.10/conf这个目录下的zoo_sample.cfg为zoo.cfg&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 conf]$ mv zoo_sample.cfg zoo.cfg&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）打开zoo.cfg文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 conf]$ vim zoo.cfg&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改数据存储路径配置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;dataDir&lt;/span&gt;=/opt/module/zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/zkData&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;增加如下配置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;（3）同步zoo.cfg配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 conf]$ xsync zoo.cfg&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）配置参数解读&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;server.A=B:C:D。&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A是一个数字，表示这个是第几号服务器；&lt;br/&gt;  集群模式下配置一个文件myid，这个文件在dataDir目录下，这个文件里面有一个数据就是A的值，&lt;code&gt;Zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。&lt;/code&gt;&lt;br/&gt;B是这个服务器的ip地址；&lt;br/&gt;C是这个服务器与集群中的Leader服务器&lt;code&gt;交换信息&lt;/code&gt;的端口；&lt;br/&gt;D是万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来&lt;code&gt;执行选举时&lt;/code&gt;服务器相互通信的端口。&lt;/p&gt;
&lt;p&gt;4、集群操作&lt;br/&gt;（1）分别启动Zookeeper&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ bin/zkServer.sh start&lt;br/&gt;[atguigu@hadoop103 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ bin/zkServer.sh start&lt;br/&gt;[atguigu@hadoop104 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ bin/zkServer.sh start&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）查看状态&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]&lt;br/&gt;JMX enabled &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;&lt;br/&gt;Using config: &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/bin/&lt;/span&gt;../conf/zoo.cfg&lt;br/&gt;Mode: follower&lt;br/&gt;[atguigu@hadoop103 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]&lt;br/&gt;JMX enabled &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;&lt;br/&gt;Using config: &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/bin/&lt;/span&gt;../conf/zoo.cfg&lt;br/&gt;Mode: leader&lt;br/&gt;[atguigu@hadoop104 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt;]&lt;br/&gt;JMX enabled &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;&lt;br/&gt;Using config: &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/bin/&lt;/span&gt;../conf/zoo.cfg&lt;br/&gt;Mode: follower&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h42&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2 客户端命令行操作&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、启动客户端&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop103 zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]$ bin/zkCli.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、显示所有操作命令&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;[zk: localhost:2181(CONNECTED) 1] &lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、查看当前znode中所包含的内容&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 0&lt;/span&gt;] ls /&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zookeeper&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、查看当前节点详细数据&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[zk: localhost:2181(CONNECTED) 1] ls2 /&lt;/span&gt;&lt;br/&gt;[zookeeper]&lt;br/&gt;cZxid = 0x0&lt;br/&gt;ctime = Thu Jan 01 08:00:00 CST 1970&lt;br/&gt;mZxid = 0x0&lt;br/&gt;mtime = Thu Jan 01 08:00:00 CST 1970&lt;br/&gt;pZxid = 0x0&lt;br/&gt;cversion = -1&lt;br/&gt;dataVersion = 0&lt;br/&gt;aclVersion = 0&lt;br/&gt;ephemeralOwner = 0x0&lt;br/&gt;dataLength = 0&lt;br/&gt;numChildren = 1&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5、分别创建2个普通节点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 3&lt;/span&gt;] create /sanguo &lt;span class=&quot;hljs-string&quot;&gt;&quot;zhuge&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 4&lt;/span&gt;] create /sanguo/shuguo &lt;span class=&quot;hljs-string&quot;&gt;&quot;liubei&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo/shuguo&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6、获得节点的值&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[zk: localhost:2181(CONNECTED) 5] get /sanguo&lt;/span&gt;&lt;br/&gt;zhuge&lt;br/&gt;cZxid = 0x100000003&lt;br/&gt;ctime = Wed Aug 29 00:03:23 CST 2018&lt;br/&gt;mZxid = 0x100000003&lt;br/&gt;mtime = Wed Aug 29 00:03:23 CST 2018&lt;br/&gt;pZxid = 0x100000004&lt;br/&gt;cversion = 1&lt;br/&gt;dataVersion = 0&lt;br/&gt;aclVersion = 0&lt;br/&gt;ephemeralOwner = 0x0&lt;br/&gt;dataLength = 7&lt;br/&gt;numChildren = 1&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;[zk: localhost:2181(CONNECTED) 6]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;[zk: localhost:2181(CONNECTED) 6] get /sanguo/shuguo&lt;/span&gt;&lt;br/&gt;liubei&lt;br/&gt;cZxid = 0x100000004&lt;br/&gt;ctime = Wed Aug 29 00:04:35 CST 2018&lt;br/&gt;mZxid = 0x100000004&lt;br/&gt;mtime = Wed Aug 29 00:04:35 CST 2018&lt;br/&gt;pZxid = 0x100000004&lt;br/&gt;cversion = 0&lt;br/&gt;dataVersion = 0&lt;br/&gt;aclVersion = 0&lt;br/&gt;ephemeralOwner = 0x0&lt;br/&gt;dataLength = 6&lt;br/&gt;numChildren = 0&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;7、创建短暂节点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 7&lt;/span&gt;] create -e /sanguo/wuguo &lt;span class=&quot;hljs-string&quot;&gt;&quot;zhouyu&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo/wuguo&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（1）在当前客户端是能查看到的&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 3&lt;/span&gt;] ls /sanguo &lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;wuguo, shuguo&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）退出当前客户端然后再重启客户端&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 12&lt;/span&gt;] quit&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;atguigu@hadoop104 zookeeper-3.4.10&lt;/span&gt;]$ bin/zkCli.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）再次查看根目录下短暂节点已经删除&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 0&lt;/span&gt;] ls /sanguo&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;shuguo&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;8、创建带序号的节点&lt;/strong&gt;&lt;br/&gt;（1）先创建一个普通的根节点/sanguo/weiguo&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 1&lt;/span&gt;] create /sanguo/weiguo &lt;span class=&quot;hljs-string&quot;&gt;&quot;caocao&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo/weiguo&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）创建带序号的节点&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 2&lt;/span&gt;] create -s /sanguo/weiguo/xiaoqiao &lt;span class=&quot;hljs-string&quot;&gt;&quot;jinlian&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo/weiguo/xiaoqiao0000000000&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 3&lt;/span&gt;] create -s /sanguo/weiguo/daqiao &lt;span class=&quot;hljs-string&quot;&gt;&quot;jinlian2&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo/weiguo/daqiao0000000001&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 4&lt;/span&gt;] create -s /sanguo/weiguo/diaocan &lt;span class=&quot;hljs-string&quot;&gt;&quot;jinlian3&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo/weiguo/diaocan0000000002&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果原来没有序号节点，序号从0开始依次递增。如果原节点下已有2个节点，则再排序时从2开始，以此类推。&lt;br/&gt;9、修改节点数据值&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 6&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; /sanguo/weiguo &lt;span class=&quot;hljs-string&quot;&gt;&quot;simayi&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;10、节点的值变化监听&lt;br/&gt;（1）在hadoop104主机上注册监听/sanguo节点数据变化&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 8&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; /sanguo watch&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在hadoop103主机上修改/sanguo节点的数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; /sanguo &lt;span class=&quot;hljs-string&quot;&gt;&quot;xisi&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）观察hadoop104主机收到数据变化的监听&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs lua&quot;&gt;WATCHER::&lt;br/&gt;WatchedEvent state:SyncConnected &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;:NodeDataChanged &lt;span class=&quot;hljs-built_in&quot;&gt;path&lt;/span&gt;:/sanguo&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：该注册监听一次，那么就只生效一次。下次需要重新注册。&lt;br/&gt;11、节点的子节点变化监听（路径变化）&lt;br/&gt;（1）在hadoop104主机上注册监听/sanguo节点的子节点变化&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 1&lt;/span&gt;] ls /sanguo watch&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;aa0000000001, server101&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在hadoop103主机/sanguo节点上创建子节点&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 2&lt;/span&gt;] create /sanguo/jin &lt;span class=&quot;hljs-string&quot;&gt;&quot;simayi&quot;&lt;/span&gt;&lt;br/&gt;Created /sanguo/jin&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）观察hadoop104主机收到子节点变化的监听&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs lua&quot;&gt;WATCHER::&lt;br/&gt;WatchedEvent state:SyncConnected &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;:NodeChildrenChanged &lt;span class=&quot;hljs-built_in&quot;&gt;path&lt;/span&gt;:/sanguo&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：该注册监听一次，那么就只生效一次。下次需要重新注册。&lt;br/&gt;12、删除节点&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[zk: localhost:&lt;span class=&quot;hljs-number&quot;&gt;2181&lt;/span&gt;(CONNECTED) &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; /sanguo/jin&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;13、递归删除节点&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 15&lt;/span&gt;] rmr /sanguo/shuguo&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;14、查看节点状态&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[zk: localhost:2181(CONNECTED) 17] stat /sanguo&lt;/span&gt;&lt;br/&gt;cZxid = 0x100000003&lt;br/&gt;ctime = Wed Aug 29 00:03:23 CST 2018&lt;br/&gt;mZxid = 0x100000011&lt;br/&gt;mtime = Wed Aug 29 00:21:23 CST 2018&lt;br/&gt;pZxid = 0x100000014&lt;br/&gt;cversion = 9&lt;br/&gt;dataVersion = 1&lt;br/&gt;aclVersion = 0&lt;br/&gt;ephemeralOwner = 0x0&lt;br/&gt;dataLength = 4&lt;br/&gt;numChildren = 1&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h43api&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3 API应用&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h431eclipse&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3.1 Eclipse环境搭建&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、创建一个Maven工程&lt;br/&gt;2、添加pom文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;RELEASE&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.logging.log4j&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;log4j-core&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.8.2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.zookeeper&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;zookeeper&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.4.10&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、拷贝log4j.properties文件到项目根目录&lt;br/&gt;需要在项目的src/main/resources目录下，新建一个文件，命名为“log4j.properties”，在文件中填入。&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;4&quot;&gt;log4j.rootLogger=INFO, stdout&lt;br/&gt;log4j.appender.stdout=org.apache.log4j.ConsoleAppender&lt;br/&gt;log4j.appender.stdout.layout=org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n&lt;p&gt;log4j.appender.logfile=org.apache.log4j.FileAppender&lt;br/&gt;log4j.appender.logfile.File=target/spring.log&lt;br/&gt;log4j.appender.logfile.layout=org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h432zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3.2 创建ZooKeeper客户端&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Before&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;p&gt;zkClient = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ZooKeeper(connectString, sessionTimeout, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Watcher() {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(WatchedEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;zkClient.getChildren(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h433&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3.3 创建子节点&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;6&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;p&gt;&lt;br/&gt;String nodeCreated = zkClient.create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/atguigu&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;jinlian&quot;&lt;/span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);&lt;br/&gt;System.out.println(nodeCreated);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h434&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3.4 获取子节点并监听节点变化&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;7&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getChildren&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;p&gt;List&amp;lt;String&amp;gt; children = zkClient.getChildren(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String child : children) {&lt;br/&gt;System.out.println(child);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Thread.sleep(Long.MAX_VALUE);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h435znode&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3.5 判断Znode是否存在&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;5&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;exist&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;p&gt;Stat stat = zkClient.exists(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/eclipse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;System.out.println(stat == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;not exist&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;exist&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h44&quot;&gt;&lt;span&gt;&lt;strong&gt;4.4 监听服务器节点动态上下线案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、需求&lt;br/&gt;  某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线。&lt;br/&gt;2、需求分析，如下图所示&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/23/kfvhBn.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3、具体实现&lt;br/&gt;（0）先在集群上创建/servers节点

&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;zk: localhost:2181(CONNECTED) 10&lt;/span&gt;] create /servers &lt;span class=&quot;hljs-string&quot;&gt;&quot;servers&quot;&lt;/span&gt;&lt;br/&gt;Created /servers&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（1）服务器端向Zookeeper注册代码&lt;/p&gt;
&lt;pre readability=&quot;24&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;42&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.zookeeper;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.CreateMode;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.KeeperException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.WatchedEvent;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.Watcher;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.ZooDefs.Ids;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.ZooKeeper;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DistributeServer&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException, KeeperException, InterruptedException &lt;/span&gt;{&lt;br/&gt;DistributeServer server = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DistributeServer();&lt;br/&gt;server.getConnect();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;server.registerServer(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;server.business(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String hostname)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;System.out.println(hostname + &lt;span class=&quot;hljs-string&quot;&gt;&quot; is working ...&quot;&lt;/span&gt;);&lt;br/&gt;Thread.sleep(Long.MAX_VALUE);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String parentNode = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/servers&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;registerServer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String hostname)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; KeeperException, InterruptedException &lt;/span&gt;{&lt;br/&gt;String path = zkClient.create(parentNode  + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/server&quot;&lt;/span&gt;, hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);&lt;br/&gt;System.out.println(hostname + &lt;span class=&quot;hljs-string&quot;&gt;&quot; is online &quot;&lt;/span&gt; + path);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String connectString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hadoop102:2181,hadoop103:2181,hadoop104:2181&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; sessionTimeout = &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ZooKeeper zkClient = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getConnect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;zkClient = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ZooKeeper(connectString, sessionTimeout, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Watcher() {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(WatchedEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;});&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）客户端代码&lt;/p&gt;
&lt;pre readability=&quot;25.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;45&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.zookeeper;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.KeeperException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.WatchedEvent;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.Watcher;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.ZooKeeper;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DistributeClient&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException, KeeperException, InterruptedException &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;DistributeClient client = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DistributeClient();&lt;br/&gt;client.getConnect();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;client.getChildren();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;client.business();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;client is working ...&quot;&lt;/span&gt;);&lt;br/&gt;Thread.sleep(Long.MAX_VALUE);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String parentNode = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/servers&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getChildren&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; KeeperException, InterruptedException &lt;/span&gt;{&lt;br/&gt;List&amp;lt;String&amp;gt; children = zkClient.getChildren(parentNode , &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;ArrayList&amp;lt;String&amp;gt; hosts = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String child : children) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] data = zkClient.getData(parentNode + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + child, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);&lt;br/&gt;hosts.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String(data));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;System.out.println(hosts);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String connectString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hadoop102:2181,hadoop103:2181,hadoop104:2181&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; sessionTimeout = &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ZooKeeper zkClient = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getConnect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;zkClient = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ZooKeeper(connectString, sessionTimeout, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Watcher() {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(WatchedEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;getChildren();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h5&quot;&gt;&lt;span&gt;&lt;strong&gt;第5章 企业面试真题&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h51zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;5.1 请简述ZooKeeper的选举机制（半数机制）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;详见3.1。&lt;/p&gt;
&lt;h3 id=&quot;h52zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;5.2 ZooKeeper的监听原理是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;详见3.4。&lt;/p&gt;
&lt;h3 id=&quot;h53zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;5.3 ZooKeeper的部署方式有哪几种？集群中的角色有哪些？集群最少需要几台机器？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）部署方式单机模式、集群模式。&lt;br/&gt;（2）角色：Leader和Follower。&lt;br/&gt;（3）集群最少需要机器数：3。&lt;/p&gt;
&lt;h3 id=&quot;h54zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4 ZooKeeper的常用命令&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;ls&lt;br/&gt;create&lt;br/&gt;get&lt;br/&gt;delete&lt;br/&gt;set&lt;br/&gt;……&lt;/p&gt;
</description>
<pubDate>Fri, 22 Feb 2019 17:37:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>第1章 Zookeeper入门1.1 概述1.2 特点1.3 数据结构1.4 应用场景1.5 下载地址第2章 Zookeeper安装2.1 本地模式安装部署2.2 配置参数解读第3章 Zookeepe</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10421474.html</dc:identifier>
</item>
<item>
<title>PHP设计模式-单例模式 - 崔元欣</title>
<link>http://www.cnblogs.com/cuiyuanxin/p/10421440.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cuiyuanxin/p/10421440.html</guid>
<description>&lt;p&gt;一直以来都是在写项目却从来没有仔细分析过什么是单例模式，单例模式分为几种，单例模式有什么特点。今天随便记录一个随笔，全当是复习复习做个笔记。&lt;/p&gt;
&lt;p&gt;单例模式要确保某个类只有一个实例，而且自动实例化并向整个系统提供实例。单例模式分为3种：饿汉单例模式、懒汉单例模式、登记式单例模式。&lt;/p&gt;
&lt;p&gt;单例模式有3个特点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;只有一个实例&lt;/li&gt;
&lt;li&gt;必须自行创建这个实例&lt;/li&gt;
&lt;li&gt;必须给其他对象提供这个实例&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;单例模式常被应用到数据库连接，这种耗费资源的操作。类的结构分为3私1公/4私1公。下面就编写一个简单的单例模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; db {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$config&lt;/span&gt; = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;私有的静态变量，默认值为null&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    * 私有构造方法
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    * 防止多个实例
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$config&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; '我是私有构造方法&amp;lt;br&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    * 私有克隆方法 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    * 防止多个实例
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __clone() {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    * 防止反序列化
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __wakeup() {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    * 公有静态方法
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    * 判断$instance是否实例化，存在实例化对象就直接返回，不存在实例化对象就new实例化
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getInstance() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;is_null&lt;/span&gt;(self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             self::&lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; self();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;$db&lt;/span&gt; = db::&lt;span&gt;getInstance();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$db&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;$db&lt;/span&gt; = db::&lt;span&gt;getInstance();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$db&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;PHP设计模式-单例模式&quot; src=&quot;https://img2018.cnblogs.com/blog/1359167/201902/1359167-20190222214724964-1454246212.png&quot; alt=&quot;MySQL连接单例模式&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可以看到两次执行的句柄都一样是同一个实例。接下来把这个单例完善一下变成一个数据库连接的单例模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; db {
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;私有link变量&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$link&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$config&lt;/span&gt; =&lt;span&gt; [
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         'host' =&amp;gt; 'localhost',
&lt;span&gt; 10&lt;/span&gt;         'username' =&amp;gt; 'root',
&lt;span&gt; 11&lt;/span&gt;         'password' =&amp;gt; 'root',
&lt;span&gt; 12&lt;/span&gt;         'databases' =&amp;gt; '',
&lt;span&gt; 13&lt;/span&gt;         'port' =&amp;gt; 3306,
&lt;span&gt; 14&lt;/span&gt;         'conding' =&amp;gt; 'utf8'
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;    ];
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;私有的静态变量，默认值为null&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;    * 私有构造方法
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;    * 防止多个实例
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    * array $config 数据库配置
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$config&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断$config配置是否设置，并且是数组&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$config&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;is_array&lt;/span&gt;(&lt;span&gt;$config&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存在配置，和默认配置合并，用新的配置替换默认配置&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config = &lt;span&gt;array_merge&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config, &lt;span&gt;$config&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建数据库连接&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;$this&lt;/span&gt;-&amp;gt;link = &lt;span&gt;mysqli_connect&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['host'], &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['username'], &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['password'], &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['databases'], &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['port'&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出连接错误&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;connect_errno();
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['databases'&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;$conding&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['conding'&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;$this&lt;/span&gt;-&amp;gt;query(&quot;SET NAMES '{&lt;span&gt;$condig&lt;/span&gt;}'&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;link;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    * 私有克隆方法 
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    * 防止多个实例
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __clone() {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; 
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;    * 防止反序列化
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __wakeup() {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;    * 公有静态方法
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    * 判断$instance是否实例化，存在实例化对象就直接返回，不存在实例化对象就new实例化
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;    * array $config 数据库配置
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; getInstance(&lt;span&gt;$config&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断变量$instance是否存在实例化对象，不存在&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;is_null&lt;/span&gt;(self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动实例化，给构建方法传$config配置&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;             self::&lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; self(&lt;span&gt;$config&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回$instance实例化对象&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; 
&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    * 执行sql
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;    * $query sql语句
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; query(&lt;span&gt;$query&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;$this&lt;/span&gt;-&amp;gt;result = &lt;span&gt;mysqli_query&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;link, &lt;span&gt;$query&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;result;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;    * 选择数据库
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;    * string $dbname 数据库名称
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; select_db(&lt;span&gt;$dbname&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;$this&lt;/span&gt;-&amp;gt;result = &lt;span&gt;mysqli_select_db&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;link, &lt;span&gt;$dbname&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;$conding&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['conding'&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;$this&lt;/span&gt;-&amp;gt;query(&quot;SET NAMES '{&lt;span&gt;$condig&lt;/span&gt;}'&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;result;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    * 查询一条或多条数据
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    * string $sql sql语句
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;    * MYSQLI_NUM、MYSQLI_ASSOC、MYSQLI_BOTH
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; fetch_array(&lt;span&gt;$sql&lt;/span&gt;, &lt;span&gt;$type&lt;/span&gt; =&lt;span&gt; MYSQLI_BOTH) {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;query(&lt;span&gt;$sql&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;$rows&lt;/span&gt; = &lt;span&gt;mysqli_fetch_array&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;, &lt;span&gt;$type&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;num_rows(&lt;span&gt;$result&lt;/span&gt;) &amp;gt; 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;$rows&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 &lt;span&gt;$this&lt;/span&gt;-&amp;gt;rows[] = &lt;span&gt;$rows&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;$this&lt;/span&gt;-&amp;gt;rows = &lt;span&gt;$rows&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;rows;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; num_rows(&lt;span&gt;$result&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;$this&lt;/span&gt;-&amp;gt;result = &lt;span&gt;mysqli_num_rows&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;result;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;    * 输出连接错误
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; connect_errno() {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;mysqli_connect_errno&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;link)) {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;echo&lt;/span&gt; 'MySQL数据库连接失败，错误代码ERROR:' . &lt;span&gt;mysqli_connect_errno&lt;/span&gt;() . '&amp;lt;br&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;    * 关闭数据库连接
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; close() {
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;$this&lt;/span&gt;-&amp;gt;result = &lt;span&gt;mysqli_close&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;link);
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;result;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; 
&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; 
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;$config&lt;/span&gt; =&lt;span&gt; [
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     'host' =&amp;gt; '172.17.0.2',
&lt;span&gt;141&lt;/span&gt;     'username' =&amp;gt; 'root',
&lt;span&gt;142&lt;/span&gt;     'password' =&amp;gt; 'cuiyuanxin66666',
&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'databases' =&amp;gt; 'nndb'&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;];
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;$db&lt;/span&gt; = db::getInstance(&lt;span&gt;$config&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;$db1&lt;/span&gt; = db::getInstance(&lt;span&gt;$config&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断两个实例对象是否一致&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$db&lt;/span&gt; === &lt;span&gt;$db1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; '一致'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; '&amp;lt;br&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; '不一致'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; '&amp;lt;br&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;切换数据库hkxy&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt; &lt;span&gt;$db&lt;/span&gt;-&amp;gt;select_db('hkxy'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;$sql&lt;/span&gt; = 'select * from qii_admin_menu limit 1'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;$rows&lt;/span&gt; = &lt;span&gt;$db&lt;/span&gt;-&amp;gt;fetch_array(&lt;span&gt;$sql&lt;/span&gt;,&lt;span&gt; MYSQLI_ASSOC);
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$db&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; '&amp;lt;br&amp;gt;-----------------------------------------&amp;lt;br&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$rows&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; '&amp;lt;br&amp;gt;-----------------------------------------&amp;lt;br&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;$db&lt;/span&gt;-&amp;gt;select_db('nndb'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;$sql&lt;/span&gt; = 'select * from niuniu_user limit 1'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;$rows&lt;/span&gt; = &lt;span&gt;$db&lt;/span&gt;-&amp;gt;fetch_array(&lt;span&gt;$sql&lt;/span&gt;,&lt;span&gt; MYSQLI_ASSOC);
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$rows&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过改造一个连接数据库的单例模式就写完了，看一下执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;PHP设计模式-单例模式&quot; src=&quot;https://img2018.cnblogs.com/blog/1359167/201902/1359167-20190223003700417-680875983.png&quot; alt=&quot;MySQL连接单例模式&quot; width=&quot;1200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过代码来看两个实例对象完全一样。&lt;/p&gt;
</description>
<pubDate>Fri, 22 Feb 2019 16:50:00 +0000</pubDate>
<dc:creator>崔元欣</dc:creator>
<og:description>一直以来都是在写项目却从来没有仔细分析过什么是单例模式，单例模式分为几种，单例模式有什么特点。今天随便记录一个随笔，全当是复习复习做个笔记。 单例模式要确保某个类只有一个实例，而且自动实例化并向整个系</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cuiyuanxin/p/10421440.html</dc:identifier>
</item>
<item>
<title>JavaScript的屏幕输出及时间函数 - 东小东</title>
<link>http://www.cnblogs.com/dongxiaodong/p/10418850.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongxiaodong/p/10418850.html</guid>
<description>&lt;h2&gt;Js屏幕输出&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;重定向页面输出：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;更改输出流，如果在加载时使用则会正常排序，如果在HTML加载完成后使用，如点击事件，则会全部覆盖原HTML的内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1 &amp;lt;script&amp;gt;
2    //参数为输出内容
3    document.write(&quot;dongxiaodong&amp;lt;br/&amp;gt;东小东&quot;&lt;span&gt;);
4 &amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;弹框网页：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以实现打开一个类似于提示栏窗口网页。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
window.open(&quot;https://www.cnblogs.com/dongxiaodong/p/10325081.html&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关闭当前窗口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
window.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加参数（URL,唯一名，样式）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
window.open(&quot;https://www.cnblogs.com/dongxiaodong/p/10325081.html&quot;,&quot;取个名字&quot;,&quot;width=600,height=300,top=150,left=150,menubar=no&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数表：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;13.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;channelmode=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否使用剧院模式显示窗口。默认为 no。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;directories=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否添加目录按钮。默认为 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;fullscreen=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否使用全屏模式显示浏览器。默认是 no。处于全屏模&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;式的窗口必须同&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;时处于剧院模式。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;height=pixels&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;窗口文档显示区的高度。以像素计。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;left=pixels&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;窗口的 x 坐标。以像素计。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;location=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否显示地址字段。默认是 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;menubar=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否显示菜单栏。默认是 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;resizable=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;窗口是否可调节尺寸。默认是 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;scrollbars=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否显示滚动条。默认是 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;status=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否添加状态栏。默认是 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;titlebar=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否显示标题栏。默认是 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;toolbar=yes|no|1|0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;是否显示浏览器的工具栏。默认是 yes。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;top=pixels&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;窗口的 y 坐标。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p align=&quot;left&quot;&gt;width=pixels&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;窗口的文档显示区的宽度。以像素计。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;提示框：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
alert(&quot;东小东，弹出对话框内容&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;询问框&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; resx=confirm(&quot;are you ok?&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回bool值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;时间相关函数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;日期时间函数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; datex=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(datex);//输出美式标准格式&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; alert(datex.getFullYear()+&quot;年&quot;+(datex.getMonth()+1)+&quot;月&quot;+datex.getDate()+&quot;日&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到年月日&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; alert(datex.getHours()+&quot;:&quot;+datex.getMinutes()+&quot;:&quot;+datex.getSeconds());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到时分秒&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; alert(datex.getDay());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到星期值&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(datex.getTime())//得到时间戳（毫秒）&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; datex.setFullYear(2019,2,2);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;定时循环操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启定时任务&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; funx(){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; alert(&quot;定时时间到....&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; timex=setInterval(&quot;funx()&quot;,2000);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数二为每次间隔的毫秒数&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;清除定时任务&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; clearInterval(timex);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;延时操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; timex=setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;延时完成事情&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; },5000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; clearTimeout(timex);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随时清除定时器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
</description>
<pubDate>Fri, 22 Feb 2019 16:04:00 +0000</pubDate>
<dc:creator>东小东</dc:creator>
<og:description>Js屏幕输出 重定向页面输出： 更改输出流，如果在加载时使用则会正常排序，如果在HTML加载完成后使用，如点击事件，则会全部覆盖原HTML的内容。 弹框网页： 可以实现打开一个类似于提示栏窗口网页。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongxiaodong/p/10418850.html</dc:identifier>
</item>
<item>
<title>vue中用mock制造模拟接口(本文主要解决坑),一定要看完哦 - 骑士007</title>
<link>http://www.cnblogs.com/YKSlu/p/10421373.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YKSlu/p/10421373.html</guid>
<description>
&lt;p&gt;最近新入职一家公司,后端造接口速度很慢,想来想去还是搞一套模拟接口,来满足开发需求,有人会问,我造一个死数据不就可以了吗?或者说,后端数据结构都没出来,字段我怎么定?&lt;/p&gt;
&lt;p&gt;问这个问题的人不奇怪,我之前也有这种疑问,mock造出来的数据是动态的.前端完全可以自己造数据结构,后端根据这个做一个模型就可以了,谁叫他们慢,字段嘛,实在要修改,他们确实不好改,前端改改就完事了;下面我将跟大家说说最近玩vue+mockjs的心得,&lt;/p&gt;
&lt;p&gt;vue的项目搭建我就不多说了,有自己用vue-cli创建的,也有直接用webpack自己搭建,这都没关系;关键是跑的起来,以下拿大众化的来说(vue-cli创建的项目)&lt;/p&gt;
&lt;p&gt;1,下载mockjs:    npm i  mockjs --save&lt;/p&gt;
&lt;p&gt;2,直接在main.js里面引用,如图:(此处有坑,因为只在开发环境使用.if里面不能用import方式导入,只能用require方式引入)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222225835494-1645593548.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当项目启动后,mock会拦截他规则内的http请求&lt;/p&gt;
&lt;p&gt;3,新建mock.js文件,编辑mock.js文件,大概逻辑文件如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222230301632-1620029315.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好的,mock的基本配置已经完成,下面怎么使用呢;&lt;/p&gt;
&lt;p&gt;4,现在vue项目中http请求用的最多是axios了,下面就是最关键的位置&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;问1&lt;/strong&gt;&lt;/span&gt;:为什么我配置了感觉没问题,但是只能get请求,不能post请求,后者说post没有响应?&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解&lt;/span&gt;:我猜想你是直接用axios.post(url,params)请求的,如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222231111678-1584748737.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里还引发一个另外的问题,就是在mockjs里面也必须写http时候也必须加上http://localhost:8080/,如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222231306274-12028631.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;问2&lt;/span&gt;:那么我该如何配置axios呢?&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解&lt;/span&gt;: 正确的方式是采用axios的请求拦截方式,如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222231622844-392278456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;拦截之后设置头,再去通过axios.post(url,params)后者axios.get(url,params)请求数据,&lt;/p&gt;

&lt;p&gt;到了这里,你就可以在mock.js里面写正则了,也就是前面看到的第三步图片中的22行:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1   &lt;/span&gt;let data=Mock.mock(/^\/baidu*/,'get',dataRes);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 到了这里你可以正常post请求数据,也可以get请求数据,新的问题又产生了,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;问3:&lt;/span&gt;为什么我在mock里面post可以拿到传参,但是get不能拿到呢?如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222235153954-1350878028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;解&lt;/span&gt;:这个就是axios的问题了,它有两种三种传参方式:&lt;span&gt;第一种是data&lt;/span&gt;,&lt;span&gt;第二种是params&lt;/span&gt;,&lt;span&gt;第三种是直接给个对象(适合post)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用params方式,(用get请求拿到的参数拼接在url后面)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222233259448-1032941819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222234502675-124431755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;用data方式(用get请求时mock中&lt;span&gt;可以拿到请求参数&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222233312515-1579014785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222233612071-321966473.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  直接给对象的方式,(用get请求时mock中拿不到请求参数,什么都没有)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222233711538-927577591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222235153954-1350878028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 那么post就比get传参简单了; 传参直接给对象就行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1193591/201902/1193591-20190222235021706-1913067143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 以上是个人学习心得,大神有骚操作,希望指点一下&lt;/p&gt;

</description>
<pubDate>Fri, 22 Feb 2019 16:03:00 +0000</pubDate>
<dc:creator>骑士007</dc:creator>
<og:description>最近新入职一家公司,后端造接口速度很慢,想来想去还是搞一套模拟接口,来满足开发需求,有人会问,我造一个死数据不就可以了吗?或者说,后端数据结构都没出来,字段我怎么定? 问这个问题的人不奇怪,我之前也有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YKSlu/p/10421373.html</dc:identifier>
</item>
<item>
<title>从零开始学习开发人工智能(一) - 徵羽摩柯</title>
<link>http://www.cnblogs.com/hk-zzmk/p/10421289.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hk-zzmk/p/10421289.html</guid>
<description>&lt;div class=&quot;cl-preview-section&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;关于学习如何开发人工智能。&lt;br/&gt;我从今天开始，将开始学习如何开发人工智能。&lt;br/&gt;我将会从最基础的内容开始学起。&lt;/p&gt;
&lt;p&gt;这一次，我们开发一个真正的人工智能。&lt;br/&gt;我们需要学会的内容有：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cl-preview-section&quot;&gt;
&lt;ol&gt;&lt;li&gt;编程语言：C#&lt;/li&gt;
&lt;li&gt;建模引擎：Maya&lt;/li&gt;
&lt;li&gt;游戏引擎：Unity3D&lt;/li&gt;
&lt;li&gt;混合现实与全息投影：HoloLens开发&lt;/li&gt;
&lt;li&gt;人工智能：机器学习、深度学习、神经网络、自然语言处理&lt;/li&gt;
&lt;li&gt;人工智能框架：ML.NET(微软推出的本地人工智能框架)、WindowsML(微软内置的AI框架)&lt;/li&gt;
&lt;li&gt;数据库：SQL Server&lt;/li&gt;
&lt;li&gt;网站开发框架：&lt;a href=&quot;http://asp.net/&quot;&gt;ASP.NET&lt;/a&gt;(此处我们开发项目网站需要用到)&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class=&quot;cl-preview-section&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;以后可能会增加新的学习内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cl-preview-section&quot; readability=&quot;20&quot;&gt;
&lt;p&gt;关于人工智能&lt;br/&gt;我先谈一谈我对人工智能的看法。其实机器人也是一样的。&lt;/p&gt;
&lt;p&gt;我认为人工智能一定要有这三个要素：颜值、交互、功能。&lt;/p&gt;
&lt;p&gt;颜值：人工智能一定要有一个好的形象，模型做的精度、清晰度要高，如果可以的话，应该带上特效、动画。(脑海中：人工智能穿漂亮的衣服、好看的皮肤……美美哒，和人工智能合影留念)。&lt;/p&gt;
&lt;p&gt;交互：人工智能一定要交互性好，交互不能太生硬，人与AI之间的交互、AI与AI之间的交互，应该向人和人之间的交流互动一样。(我和人工智能的亲密接触，可以和人工智能愉快的玩耍。)&lt;/p&gt;
&lt;p&gt;功能：其实功能就是指AI会做什么事情，可以想一下人会做什么事情，AI能够帮助人做什么事情。至于实现什么样的功能，最终进行到项目阶段再说吧。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 22 Feb 2019 15:28:00 +0000</pubDate>
<dc:creator>徵羽摩柯</dc:creator>
<og:description>关于学习如何开发人工智能。我从今天开始，将开始学习如何开发人工智能。我将会从最基础的内容开始学起。 这一次，我们开发一个真正的人工智能。我们需要学会的内容有： 关于学习如何开发人工智能。我从今天开始，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hk-zzmk/p/10421289.html</dc:identifier>
</item>
<item>
<title>TensorFlow tutorial - sdu20112013</title>
<link>http://www.cnblogs.com/sdu20112013/p/10421287.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sdu20112013/p/10421287.html</guid>
<description>&lt;p&gt;代码示例来自https://github.com/aymericdamien/TensorFlow-Examples&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;tensorflow先定义运算图,在run的时候才会进行真正的运算。&lt;/li&gt;
&lt;li&gt;run之前需要先建立一个session&lt;/li&gt;
&lt;li&gt;常量用constant 如a = tf.constant(2)&lt;/li&gt;
&lt;li&gt;变量用placeholder 需要指定类型 如a = tf.placeholder(tf.int16)&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;矩阵相乘&quot;&gt;矩阵相乘&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;matrix1 = tf.constant([[3., 3.]])  #1*2矩阵
matrix2 = tf.constant([[2.],[2.]]) #2*1矩阵
product = tf.matmul(matrix1, matrix2) #矩阵相乘得到1*1矩阵
with tf.Session() as sess:
    result = sess.run(product)   #result类型为ndarray
    print(result)
    # ==&amp;gt; [[ 12.]]
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;'''
Basic Operations example using TensorFlow library.
Author: Aymeric Damien
Project: https://github.com/aymericdamien/TensorFlow-Examples/
'''

from __future__ import print_function

import tensorflow as tf

# Basic constant operations
# The value returned by the constructor represents the output
# of the Constant op.
a = tf.constant(2)
b = tf.constant(3)

# Launch the default graph.
with tf.Session() as sess:
    print(&quot;a=2, b=3&quot;)
    print(&quot;Addition with constants: %i&quot; % sess.run(a+b))
    print(&quot;Multiplication with constants: %i&quot; % sess.run(a*b))

# Basic Operations with variable as graph input
# The value returned by the constructor represents the output
# of the Variable op. (define as input when running session)
# tf Graph input
a = tf.placeholder(tf.int16)
b = tf.placeholder(tf.int16)

# Define some operations
add = tf.add(a, b)
mul = tf.multiply(a, b)

# Launch the default graph.
with tf.Session() as sess:
    # Run every operation with variable input
    print(&quot;Addition with variables: %i&quot; % sess.run(add, feed_dict={a: 2, b: 3}))
    print(&quot;Multiplication with variables: %i&quot; % sess.run(mul, feed_dict={a: 2, b: 3}))


# ----------------
# More in details:
# Matrix Multiplication from TensorFlow official tutorial

# Create a Constant op that produces a 1x2 matrix.  The op is
# added as a node to the default graph.
#
# The value returned by the constructor represents the output
# of the Constant op.
matrix1 = tf.constant([[3., 3.]])

# Create another Constant that produces a 2x1 matrix.
matrix2 = tf.constant([[2.],[2.]])

# Create a Matmul op that takes 'matrix1' and 'matrix2' as inputs.
# The returned value, 'product', represents the result of the matrix
# multiplication.
product = tf.matmul(matrix1, matrix2)

# To run the matmul op we call the session 'run()' method, passing 'product'
# which represents the output of the matmul op.  This indicates to the call
# that we want to get the output of the matmul op back.
#
# All inputs needed by the op are run automatically by the session.  They
# typically are run in parallel.
#
# The call 'run(product)' thus causes the execution of threes ops in the
# graph: the two constants and matmul.
#
# The output of the op is returned in 'result' as a numpy `ndarray` object.
with tf.Session() as sess:
    result = sess.run(product)
    print(result)
    # ==&amp;gt; [[ 12.]]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;eager-api&quot;&gt;eager api&lt;/h3&gt;
&lt;p&gt;详细解释参见https://www.zhihu.com/question/67471378&lt;br/&gt;之前说过tensorflow是先定义运算图,在session.run的时候才会真正做运算.&lt;br/&gt;tensorflow推出了eager api.使得tf(tensorflow简称)中的函数可以像我们熟知的普通函数一样,调用后立刻可以得到结果,更方便调试.&lt;br/&gt;坏处是和之前的有些代码不兼容.比如和Basic1里的示例代码就无法兼容.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;tfe.enable_eager_execution() 开启eager模式要放在代码最前面&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;'''
Basic introduction to TensorFlow's Eager API.

Author: Aymeric Damien
Project: https://github.com/aymericdamien/TensorFlow-Examples/

What is Eager API?
&quot; Eager execution is an imperative, define-by-run interface where operations are
executed immediately as they are called from Python. This makes it easier to
get started with TensorFlow, and can make research and development more
intuitive. A vast majority of the TensorFlow API remains the same whether eager
execution is enabled or not. As a result, the exact same code that constructs
TensorFlow graphs (e.g. using the layers API) can be executed imperatively
by using eager execution. Conversely, most models written with Eager enabled
can be converted to a graph that can be further optimized and/or extracted
for deployment in production without changing code. &quot; - Rajat Monga

'''
from __future__ import absolute_import, division, print_function

import numpy as np
import tensorflow as tf
import tensorflow.contrib.eager as tfe

# Set Eager API
print(&quot;Setting Eager mode...&quot;)
tfe.enable_eager_execution()

# Define constant tensors
print(&quot;Define constant tensors&quot;)
a = tf.constant(2)
print(&quot;a = %i&quot; % a)
b = tf.constant(3)
print(&quot;b = %i&quot; % b)

# Run the operation without the need for tf.Session
print(&quot;Running operations, without tf.Session&quot;)
c = a + b
print(&quot;a + b = %i&quot; % c)
d = a * b
print(&quot;a * b = %i&quot; % d)


# Full compatibility with Numpy
print(&quot;Mixing operations with Tensors and Numpy Arrays&quot;)

# Define constant tensors
a = tf.constant([[2., 1.],
                 [1., 0.]], dtype=tf.float32)
print(&quot;Tensor:\n a = %s&quot; % a)
b = np.array([[3., 0.],
              [5., 1.]], dtype=np.float32)
print(&quot;NumpyArray:\n b = %s&quot; % b)

# Run the operation without the need for tf.Session
print(&quot;Running operations, without tf.Session&quot;)

c = a + b
print(&quot;a + b = %s&quot; % c)

d = tf.matmul(a, b)
print(&quot;a * b = %s&quot; % d)

print(&quot;Iterate through Tensor 'a':&quot;)
for i in range(a.shape[0]):
    for j in range(a.shape[1]):
        print(a[i][j])
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;卷积神经网络&quot;&gt;卷积神经网络&lt;/h3&gt;
&lt;p&gt;阅读这部分之前先要对卷积神经网络有多了解.参见https://www.cnblogs.com/sdu20112013/p/10149529.html&lt;br/&gt;神经网络的参数&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;输入层 样本X的维度 图片为28*28-&amp;gt;784&lt;/li&gt;
&lt;li&gt;全连接层的输出 图片种类,0到数字9共10种&lt;/li&gt;
&lt;li&gt;dropout = 0.25 # Dropout, probability to drop a unit 为了防止过拟合,丢弃某些神经元的输出&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;训练参数&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;学习率&lt;/li&gt;
&lt;li&gt;batch_size 梯度求解参考的样本数量&lt;/li&gt;
&lt;li&gt;num_steps 可能是只迭代的轮次？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;构建一个CNN&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;卷积层,池化层,完成特征提取.&lt;/li&gt;
&lt;li&gt;卷积层 32个filter filter的size是5*5 激活函数relu&lt;/li&gt;
&lt;li&gt;池化层 2个filter filter的size是2*2&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# Convolution Layer with 32 filters and a kernel size of 5
conv1 = tf.layers.conv2d(x, 32, 5, activation=tf.nn.relu)
# Max Pooling (down-sampling) with strides of 2 and kernel size of 2
conv1 = tf.layers.max_pooling2d(conv1, 2, 2)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;卷积层,池化层,进一步提取特征&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# Convolution Layer with 64 filters and a kernel size of 3
conv2 = tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu)
# Max Pooling (down-sampling) with strides of 2 and kernel size of 2
conv2 = tf.layers.max_pooling2d(conv2, 2, 2)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;全连接层,完成分类&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# Flatten the data to a 1-D vector for the fully connected layer
#全连接层接收的是个M*N的矩阵 flatten:拍平.可以理解为把一摞叠起来的矩阵拍平
fc1 = tf.contrib.layers.flatten(conv2)

# Fully connected layer (in tf contrib folder for now)
#全连接层有1024个神经元
fc1 = tf.layers.dense(fc1, 1024)
# Apply Dropout (if is_training is False, dropout is not applied)
#对训练集,要对部分神经元做dropout,以引入非线性.只有训练集才会dropout
fc1 = tf.layers.dropout(fc1, rate=dropout, training=is_training)

# Output layer, class prediction
#对全连接层输出做分类
out = tf.layers.dense(fc1, n_classes)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;模型构建好了,现在需要告诉我们的模型损失函数有关的信息,这样模型才能够知道如何求梯度,并进而更新神经元之间的权重信息.&lt;br/&gt;tensorflow要求我们定一个Estimator&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;损失函数定义&lt;/li&gt;
&lt;li&gt;最优化算法定义&lt;/li&gt;
&lt;li&gt;模型准确度定义&lt;/li&gt;
&lt;li&gt;TF Estimators requires to return a EstimatorSpec, that specify the different ops for training, evaluating,&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;logits_train = conv_net(features, num_classes, dropout, reuse=False,is_training=True)
loss_op = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))#损失函数定义
optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)#最优化算法 也可以用小批量梯度下降法SGD
train_op = optimizer.minimize(loss_op,global_step=tf.train.get_global_step())#最优化目标：使得loss最小&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此,我们已经完成了模型的创建,下面就是把数据转换成合适的格式喂给模型,进行训练.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Define the input function for training
input_fn = tf.estimator.inputs.numpy_input_fn(
x={'images': mnist.train.images}, y=mnist.train.labels,
batch_size=batch_size, num_epochs=None, shuffle=True)
# Train the Model
model.train(input_fn, steps=num_steps)

# Evaluate the Model
# Define the input function for evaluating
input_fn = tf.estimator.inputs.numpy_input_fn(
x={'images': mnist.test.images}, y=mnist.test.labels,
batch_size=batch_size, shuffle=False)
# Use the Estimator 'evaluate' method
e = model.evaluate(input_fn)
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&quot;&quot;&quot; Convolutional Neural Network.

Build and train a convolutional neural network with TensorFlow.
This example is using the MNIST database of handwritten digits
(http://yann.lecun.com/exdb/mnist/)

This example is using TensorFlow layers API, see 'convolutional_network_raw' 
example for a raw implementation with variables.

Author: Aymeric Damien
Project: https://github.com/aymericdamien/TensorFlow-Examples/
&quot;&quot;&quot;
from __future__ import division, print_function, absolute_import

# Import MNIST data
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets(&quot;/tmp/data/&quot;, one_hot=False)

import tensorflow as tf

# Training Parameters
learning_rate = 0.001
num_steps = 2000
batch_size = 128

# Network Parameters
num_input = 784 # MNIST data input (img shape: 28*28)
num_classes = 10 # MNIST total classes (0-9 digits)
dropout = 0.25 # Dropout, probability to drop a unit


# Create the neural network
def conv_net(x_dict, n_classes, dropout, reuse, is_training):
    # Define a scope for reusing the variables
    with tf.variable_scope('ConvNet', reuse=reuse):
        # TF Estimator input is a dict, in case of multiple inputs
        x = x_dict['images']

        # MNIST data input is a 1-D vector of 784 features (28*28 pixels)
        # Reshape to match picture format [Height x Width x Channel]
        # Tensor input become 4-D: [Batch Size, Height, Width, Channel]
        x = tf.reshape(x, shape=[-1, 28, 28, 1])

        # Convolution Layer with 32 filters and a kernel size of 5
        conv1 = tf.layers.conv2d(x, 32, 5, activation=tf.nn.relu)
        # Max Pooling (down-sampling) with strides of 2 and kernel size of 2
        conv1 = tf.layers.max_pooling2d(conv1, 2, 2)

        # Convolution Layer with 64 filters and a kernel size of 3
        conv2 = tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu)
        # Max Pooling (down-sampling) with strides of 2 and kernel size of 2
        conv2 = tf.layers.max_pooling2d(conv2, 2, 2)

        # Flatten the data to a 1-D vector for the fully connected layer
        fc1 = tf.contrib.layers.flatten(conv2)
        print(&quot;fcl shape&quot;,fc1.shape)

        # Fully connected layer (in tf contrib folder for now)
        fc1 = tf.layers.dense(fc1, 1024)
        # Apply Dropout (if is_training is False, dropout is not applied)
        fc1 = tf.layers.dropout(fc1, rate=dropout, training=is_training)

        # Output layer, class prediction
        out = tf.layers.dense(fc1, n_classes)

    return out


# Define the model function (following TF Estimator Template)
def model_fn(features, labels, mode):
    # Build the neural network
    # Because Dropout have different behavior at training and prediction time, we
    # need to create 2 distinct computation graphs that still share the same weights.
    logits_train = conv_net(features, num_classes, dropout, reuse=False,
                            is_training=True)
    print(&quot;logits_train.shape&quot;,logits_train.shape)
    logits_test = conv_net(features, num_classes, dropout, reuse=True,
                           is_training=False)

    # Predictions
    pred_classes = tf.argmax(logits_test, axis=1)
    pred_probas = tf.nn.softmax(logits_test)

    # If prediction mode, early return
    if mode == tf.estimator.ModeKeys.PREDICT:
        return tf.estimator.EstimatorSpec(mode, predictions=pred_classes)

        # Define loss and optimizer
    loss_op = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(
        logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))
    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)
    train_op = optimizer.minimize(loss_op,
                                  global_step=tf.train.get_global_step())

    # Evaluate the accuracy of the model
    acc_op = tf.metrics.accuracy(labels=labels, predictions=pred_classes)

    # TF Estimators requires to return a EstimatorSpec, that specify
    # the different ops for training, evaluating, ...
    estim_specs = tf.estimator.EstimatorSpec(
        mode=mode,
        predictions=pred_classes,
        loss=loss_op,
        train_op=train_op,
        eval_metric_ops={'accuracy': acc_op})

    return estim_specs

# Build the Estimator
model = tf.estimator.Estimator(model_fn)

# Define the input function for training
input_fn = tf.estimator.inputs.numpy_input_fn(
    x={'images': mnist.train.images}, y=mnist.train.labels,
    batch_size=batch_size, num_epochs=None, shuffle=True)
# Train the Model
model.train(input_fn, steps=num_steps)

# Evaluate the Model
# Define the input function for evaluating
input_fn = tf.estimator.inputs.numpy_input_fn(
    x={'images': mnist.test.images}, y=mnist.test.labels,
    batch_size=batch_size, shuffle=False)
# Use the Estimator 'evaluate' method
e = model.evaluate(input_fn)

print(&quot;Testing Accuracy:&quot;, e['accuracy'])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;顺便,说说我所理解的神经网络,&quot;神经元&quot;听着玄乎,其实每一个神经元就是y=ax+b而已,a,x都是矩阵. 神经元之间是有权重关系的,前一个神经元的输出作为下一个神经元的输入,赋以权重w. 通过这样的多层神经元,尽管每个神经元都做得是一个线性变化,（当然为了非线性会引入relu/sigmoid等)，组合起来确取得了模拟非线性的效果,利用反向传播算法,更新整个网络中的神经元直接的权重w.达到使误差最小. 本质上神经网络就是求矩阵w的运算.&lt;/p&gt;
</description>
<pubDate>Fri, 22 Feb 2019 15:28:00 +0000</pubDate>
<dc:creator>sdu20112013</dc:creator>
<og:description>代码示例来自https://github.com/aymericdamien/TensorFlow Examples tensorflow先定义运算图,在run的时候才会进行真正的运算。 run之前需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sdu20112013/p/10421287.html</dc:identifier>
</item>
<item>
<title>牛客网剑指offer java 全部题解 - 程序员乔戈里</title>
<link>http://www.cnblogs.com/qiaogeli/p/10421278.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiaogeli/p/10421278.html</guid>
<description>&lt;li&gt;每天一道剑指offer-二维数组中的查找&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484262&amp;amp;idx=2&amp;amp;sn=83fb17338c606e2080fe75331f1528f7&amp;amp;chksm=ec6e7a3edb19f32867e39964a4df4e38cacbc1779b7dbe708787d4b40851b41e21c7c4702c87&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484262&amp;amp;idx=2&amp;amp;sn=83fb17338c606e2080fe75331f1528f7&amp;amp;chksm=ec6e7a3edb19f32867e39964a4df4e38cacbc1779b7dbe708787d4b40851b41e21c7c4702c87&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/li&gt;&lt;li readability=&quot;0.14117647058824&quot;&gt;
&lt;p&gt;每天一道剑指offer-替换空格&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484283&amp;amp;idx=3&amp;amp;sn=a8e3d735d5ea5d703856d9bd96a9e547&amp;amp;chksm=ec6e7a23db19f3353fc822e753e0eb91264dc772462e9d1d406a1f89853b86fd4dfcb5353a55&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484283&amp;amp;idx=3&amp;amp;sn=a8e3d735d5ea5d703856d9bd96a9e547&amp;amp;chksm=ec6e7a23db19f3353fc822e753e0eb91264dc772462e9d1d406a1f89853b86fd4dfcb5353a55&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.17977528089888&quot;&gt;
&lt;p&gt;每天一道剑指offer-从尾到头打印链表&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484302&amp;amp;idx=2&amp;amp;sn=193f840914f5f8b47cab0aee5fa43bf1&amp;amp;chksm=ec6e7ad6db19f3c08b574fea3ca328421ae679465c8c391a5224eb7c674804b53f3bad8d858e&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484302&amp;amp;idx=2&amp;amp;sn=193f840914f5f8b47cab0aee5fa43bf1&amp;amp;chksm=ec6e7ad6db19f3c08b574fea3ca328421ae679465c8c391a5224eb7c674804b53f3bad8d858e&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.15057915057915&quot;&gt;
&lt;p&gt;每天一道剑指offer-重建二叉树&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247485461&amp;amp;idx=2&amp;amp;sn=8e837b43189575703a5ca72cc0a6ca9e&amp;amp;chksm=ec6e714ddb19f85bc58bb8cbd17408103d7f218ce684db1afa1bdb88e45293b2a5906cb9f306&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247485461&amp;amp;idx=2&amp;amp;sn=8e837b43189575703a5ca72cc0a6ca9e&amp;amp;chksm=ec6e714ddb19f85bc58bb8cbd17408103d7f218ce684db1afa1bdb88e45293b2a5906cb9f306&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.17977528089888&quot;&gt;
&lt;p&gt;每天一道剑指offer-用两个栈实现队列&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484319&amp;amp;idx=2&amp;amp;sn=aed7b194077d4f4b90ab49a7081f9143&amp;amp;chksm=ec6e7ac7db19f3d1f2b756d603b8e7dd18f268ccfec98ef08b84f3e26c1c2067b201ff301cc6&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484319&amp;amp;idx=2&amp;amp;sn=aed7b194077d4f4b90ab49a7081f9143&amp;amp;chksm=ec6e7ac7db19f3d1f2b756d603b8e7dd18f268ccfec98ef08b84f3e26c1c2067b201ff301cc6&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.17977528089888&quot;&gt;
&lt;p&gt;每天一道剑指offer-旋转数组的最小值&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484332&amp;amp;idx=2&amp;amp;sn=1189afaddf726065d816329e1023cfc3&amp;amp;chksm=ec6e7af4db19f3e2be8ba63ec6b6b44528a1bafe82b991fd3bed6f21d1b4f7c46a9afc3b98c4&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484332&amp;amp;idx=2&amp;amp;sn=1189afaddf726065d816329e1023cfc3&amp;amp;chksm=ec6e7af4db19f3e2be8ba63ec6b6b44528a1bafe82b991fd3bed6f21d1b4f7c46a9afc3b98c4&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.18888888888889&quot;&gt;
&lt;p&gt;每天一道剑指offer-牛客网斐波那契数列&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484353&amp;amp;idx=3&amp;amp;sn=95d7568a4e32be37b5d0bfd28c666fac&amp;amp;chksm=ec6e7a99db19f38f3f7bc8a12dee7e77d0d7375998d82bd38430d8c249ec6b3384a449fdaa15&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484353&amp;amp;idx=3&amp;amp;sn=95d7568a4e32be37b5d0bfd28c666fac&amp;amp;chksm=ec6e7a99db19f38f3f7bc8a12dee7e77d0d7375998d82bd38430d8c249ec6b3384a449fdaa15&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.16091954022989&quot;&gt;
&lt;p&gt;每天一道剑指offer-牛客网跳台阶&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484365&amp;amp;idx=3&amp;amp;sn=9d7127136f3d605546f0463353e36743&amp;amp;chksm=ec6e7a95db19f38387ee5d64b84583a5dca92bc2dd9f84448c2e03b4f84152ae2dc0df167ed0&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484365&amp;amp;idx=3&amp;amp;sn=9d7127136f3d605546f0463353e36743&amp;amp;chksm=ec6e7a95db19f38387ee5d64b84583a5dca92bc2dd9f84448c2e03b4f84152ae2dc0df167ed0&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.17977528089888&quot;&gt;
&lt;p&gt;每天一道剑指offer-牛客网变态跳台阶&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484374&amp;amp;idx=3&amp;amp;sn=7f3165d24603b8bd7b29fd96b7100fb9&amp;amp;chksm=ec6e7a8edb19f3980d7460a827f2ad0df67f806e6cd337fff2baff79951b575f47412ea97745&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484374&amp;amp;idx=3&amp;amp;sn=7f3165d24603b8bd7b29fd96b7100fb9&amp;amp;chksm=ec6e7a8edb19f3980d7460a827f2ad0df67f806e6cd337fff2baff79951b575f47412ea97745&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.14117647058824&quot;&gt;
&lt;p&gt;每天一道剑指offer-矩形覆盖&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484385&amp;amp;idx=3&amp;amp;sn=cf7588e1d3ffbb34eb5a075baf1d7cdc&amp;amp;chksm=ec6e7ab9db19f3af357a95b980c6ef668c97c36dd1d57976db180d5b27a4db206e8af0c45ab6&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484385&amp;amp;idx=3&amp;amp;sn=cf7588e1d3ffbb34eb5a075baf1d7cdc&amp;amp;chksm=ec6e7ab9db19f3af357a95b980c6ef668c97c36dd1d57976db180d5b27a4db206e8af0c45ab6&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.2007299270073&quot;&gt;
&lt;p&gt;每天一道剑指offer-牛客网二进制中1的个数&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484405&amp;amp;idx=3&amp;amp;sn=ca8f0e57a41e522fa0525487bb6b54bc&amp;amp;chksm=ec6e7aaddb19f3bb0b00fcb39e5506fbaa888d3be4ae32fa7ee94ef39b1799307a1088bb2d29&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484405&amp;amp;idx=3&amp;amp;sn=ca8f0e57a41e522fa0525487bb6b54bc&amp;amp;chksm=ec6e7aaddb19f3bb0b00fcb39e5506fbaa888d3be4ae32fa7ee94ef39b1799307a1088bb2d29&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.1970802919708&quot;&gt;
&lt;p&gt;每天一道剑指offer-牛客网数值的整数次方&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484420&amp;amp;idx=3&amp;amp;sn=4d70430fae06d022c6cd75b61fa19ca1&amp;amp;chksm=ec6e7d5cdb19f44a8b6739a71f7874014c63af69e0cd0142cb119240635ba703f9c0b205f414&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484420&amp;amp;idx=3&amp;amp;sn=4d70430fae06d022c6cd75b61fa19ca1&amp;amp;chksm=ec6e7d5cdb19f44a8b6739a71f7874014c63af69e0cd0142cb119240635ba703f9c0b205f414&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.23875432525952&quot;&gt;
&lt;p&gt;每天一道剑指offer-调整数组顺序使奇数位于偶数前面&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484431&amp;amp;idx=2&amp;amp;sn=67a3c6e781c0017fe9ef1a71f112dcdd&amp;amp;chksm=ec6e7d57db19f441b06a7567c3ae00ee8cd73a5fe88b2bb8168847c7245802137e6446c7041e&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484431&amp;amp;idx=2&amp;amp;sn=67a3c6e781c0017fe9ef1a71f112dcdd&amp;amp;chksm=ec6e7d57db19f441b06a7567c3ae00ee8cd73a5fe88b2bb8168847c7245802137e6446c7041e&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.19188191881919&quot;&gt;
&lt;p&gt;每天一道剑指offer-链表中倒数第k个结点&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484441&amp;amp;idx=3&amp;amp;sn=0515c8f74b33fbf505d69e970bea0176&amp;amp;chksm=ec6e7d41db19f457298b82e0bd99ead09782778be51cc22283fb010c1270bc9ad21be31e0fef&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484441&amp;amp;idx=3&amp;amp;sn=0515c8f74b33fbf505d69e970bea0176&amp;amp;chksm=ec6e7d41db19f457298b82e0bd99ead09782778be51cc22283fb010c1270bc9ad21be31e0fef&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.140625&quot;&gt;
&lt;p&gt;每天一道剑指offer-反转链表&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484468&amp;amp;idx=3&amp;amp;sn=cb5301aba0a3d78580cb6517c45442e6&amp;amp;chksm=ec6e7d6cdb19f47a632e0076940979babf1bc9128788a1b5f8ed6da8e3c7ce9f2b7849f23c4c&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484468&amp;amp;idx=3&amp;amp;sn=cb5301aba0a3d78580cb6517c45442e6&amp;amp;chksm=ec6e7d6cdb19f47a632e0076940979babf1bc9128788a1b5f8ed6da8e3c7ce9f2b7849f23c4c&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.18888888888889&quot;&gt;
&lt;p&gt;每天一道剑指offer-合并两个排序的列表&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484487&amp;amp;idx=3&amp;amp;sn=fd1be32b550725d0affd73f8f56275bf&amp;amp;chksm=ec6e7d1fdb19f409588510b30a01494a59902ea26eca919579f4df74400eca5af07318413b8c&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484487&amp;amp;idx=3&amp;amp;sn=fd1be32b550725d0affd73f8f56275bf&amp;amp;chksm=ec6e7d1fdb19f409588510b30a01494a59902ea26eca919579f4df74400eca5af07318413b8c&amp;amp;token=657087659&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.15057915057915&quot;&gt;
&lt;p&gt;每天一道剑指offer-树的子结构&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484511&amp;amp;idx=2&amp;amp;sn=7eeae5a98a5b1a55b89e9dd54544b743&amp;amp;chksm=ec6e7d07db19f4117f38ece673ca5ace7ed2bc6abb782a001753bccfab79245d98f8622b49fa&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484511&amp;amp;idx=2&amp;amp;sn=7eeae5a98a5b1a55b89e9dd54544b743&amp;amp;chksm=ec6e7d07db19f4117f38ece673ca5ace7ed2bc6abb782a001753bccfab79245d98f8622b49fa&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.16030534351145&quot;&gt;
&lt;p&gt;每天一道剑指offer-二叉树的镜像&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484519&amp;amp;idx=3&amp;amp;sn=009e0d0d017d073bed34dc924ae78aeb&amp;amp;chksm=ec6e7d3fdb19f4297c0df2990886c9ee2685c528a4f59cc2bb339da95a0e8c8922606dbb7e8a&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484519&amp;amp;idx=3&amp;amp;sn=009e0d0d017d073bed34dc924ae78aeb&amp;amp;chksm=ec6e7d3fdb19f4297c0df2990886c9ee2685c528a4f59cc2bb339da95a0e8c8922606dbb7e8a&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.16981132075472&quot;&gt;
&lt;p&gt;每天一道剑指offer-顺时针打印矩阵&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484534&amp;amp;idx=2&amp;amp;sn=2909d7d1de88d12e90286a9521a9918a&amp;amp;chksm=ec6e7d2edb19f4380ad51905c66bc4c1a2f2ddf792d36fac1c6803204701613d305ad9932039&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484534&amp;amp;idx=2&amp;amp;sn=2909d7d1de88d12e90286a9521a9918a&amp;amp;chksm=ec6e7d2edb19f4380ad51905c66bc4c1a2f2ddf792d36fac1c6803204701613d305ad9932039&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.16981132075472&quot;&gt;
&lt;p&gt;每天一道剑指offer-包含min函数的栈&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484550&amp;amp;idx=2&amp;amp;sn=3bed9f8d59bf6996117423ed830dcc1f&amp;amp;chksm=ec6e7ddedb19f4c88b435989abaeebf745dd803c04e99630928f4a43bfda42ac2183ec20a72b&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484550&amp;amp;idx=2&amp;amp;sn=3bed9f8d59bf6996117423ed830dcc1f&amp;amp;chksm=ec6e7ddedb19f4c88b435989abaeebf745dd803c04e99630928f4a43bfda42ac2183ec20a72b&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.18819188191882&quot;&gt;
&lt;p&gt;每天一道剑指offer-栈的压入、弹出序列&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484561&amp;amp;idx=2&amp;amp;sn=27aeefcfc17e2829722ee298cc96b0d7&amp;amp;chksm=ec6e7dc9db19f4df87948f9fdf04fcee9681582ee83f0c8d5dbb228ec31546eaf335a6e9125f&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484561&amp;amp;idx=2&amp;amp;sn=27aeefcfc17e2829722ee298cc96b0d7&amp;amp;chksm=ec6e7dc9db19f4df87948f9fdf04fcee9681582ee83f0c8d5dbb228ec31546eaf335a6e9125f&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.18819188191882&quot;&gt;
&lt;p&gt;每天一道剑指offer-从上往下打印二叉树&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484625&amp;amp;idx=2&amp;amp;sn=7fb0343fee005be8ce7b9879ba7c891b&amp;amp;chksm=ec6e7d89db19f49fbeb8933b9c95f225b5b14fdc95285c7d3a6e110fed702691b9abc9936db9&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484625&amp;amp;idx=2&amp;amp;sn=7fb0343fee005be8ce7b9879ba7c891b&amp;amp;chksm=ec6e7d89db19f49fbeb8933b9c95f225b5b14fdc95285c7d3a6e110fed702691b9abc9936db9&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.21428571428571&quot;&gt;
&lt;p&gt;每天一道剑指offer-二叉搜索树的后序遍历序列&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484646&amp;amp;idx=3&amp;amp;sn=d6fd39a4cc7b7180e8014ad70ea1b21b&amp;amp;chksm=ec6e7dbedb19f4a8104428a654b884d966ec37a3c55a58848e0efa578f3dad3017974aad6483&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484646&amp;amp;idx=3&amp;amp;sn=d6fd39a4cc7b7180e8014ad70ea1b21b&amp;amp;chksm=ec6e7dbedb19f4a8104428a654b884d966ec37a3c55a58848e0efa578f3dad3017974aad6483&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.21428571428571&quot;&gt;
&lt;p&gt;每天一道剑指offer-二叉树中和为某一值的路径&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484663&amp;amp;idx=2&amp;amp;sn=56e65d5dab55831c42df7b0efbae3d01&amp;amp;chksm=ec6e7dafdb19f4b95a4c7affe969086a9606498c8ae33516c54384931cc3b9a9a2724e39b05f&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484663&amp;amp;idx=2&amp;amp;sn=56e65d5dab55831c42df7b0efbae3d01&amp;amp;chksm=ec6e7dafdb19f4b95a4c7affe969086a9606498c8ae33516c54384931cc3b9a9a2724e39b05f&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;每天一道剑指offer-复杂链表的复制&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4MDA3NTM2OQ%3D%3D&amp;amp;mid=2247483717&amp;amp;idx=1&amp;amp;sn=0afe107399dc99c8a22dd5cb0d5137df&amp;amp;scene=45#wechat_redirect&quot;&gt;https://mp.weixin.qq.com/s?__biz=Mzg4MDA3NTM2OQ%3D%3D&amp;amp;mid=2247483717&amp;amp;idx=1&amp;amp;sn=0afe107399dc99c8a22dd5cb0d5137df&amp;amp;scene=45#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.1970802919708&quot;&gt;
&lt;p&gt;每天一道剑指offer-二叉搜索树与双向链表&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484676&amp;amp;idx=2&amp;amp;sn=dcf484b32398103580afcc642ceb3376&amp;amp;chksm=ec6e7c5cdb19f54a32a5f31c6e375758dbcaa0980ea48af2a1b9a65e5374efcc810e0c27eaf4&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484676&amp;amp;idx=2&amp;amp;sn=dcf484b32398103580afcc642ceb3376&amp;amp;chksm=ec6e7c5cdb19f54a32a5f31c6e375758dbcaa0980ea48af2a1b9a65e5374efcc810e0c27eaf4&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.16030534351145&quot;&gt;
&lt;p&gt;每天一道剑指offer-字符串的排列&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484748&amp;amp;idx=2&amp;amp;sn=4dd588af707d7a598206b090083f9a18&amp;amp;chksm=ec6e7c14db19f502489081a1aa1be260e288af7ef3f4c7dc6fddab1186cd34d0a93d750993bc&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484748&amp;amp;idx=2&amp;amp;sn=4dd588af707d7a598206b090083f9a18&amp;amp;chksm=ec6e7c14db19f502489081a1aa1be260e288af7ef3f4c7dc6fddab1186cd34d0a93d750993bc&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.23076923076923&quot;&gt;
&lt;p&gt;每天一道剑指offer-数组中出现次数超过一半的数字&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484690&amp;amp;idx=2&amp;amp;sn=39fde3af3fcb1f1e45be382063d85422&amp;amp;chksm=ec6e7c4adb19f55ce44772b7dde58ba4b7f4fd285ffdca84140499bd0b6e13bc774f99ac239d&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484690&amp;amp;idx=2&amp;amp;sn=39fde3af3fcb1f1e45be382063d85422&amp;amp;chksm=ec6e7c4adb19f55ce44772b7dde58ba4b7f4fd285ffdca84140499bd0b6e13bc774f99ac239d&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.15384615384615&quot;&gt;
&lt;p&gt;每天一道剑指offer-最小的K个数&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484700&amp;amp;idx=2&amp;amp;sn=f569859fab0b8919f5bbe6597db470a2&amp;amp;chksm=ec6e7c44db19f5529a7e5eaf8135f1b0b87852981767bdb19a43ae29262839970ac1b2c43cc7&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484700&amp;amp;idx=2&amp;amp;sn=f569859fab0b8919f5bbe6597db470a2&amp;amp;chksm=ec6e7c44db19f5529a7e5eaf8135f1b0b87852981767bdb19a43ae29262839970ac1b2c43cc7&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.18819188191882&quot;&gt;
&lt;p&gt;每天一道剑指offer-连续子数组的最大和&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484742&amp;amp;idx=2&amp;amp;sn=f92f21b4fd89e1fda7467590045c8dd3&amp;amp;chksm=ec6e7c1edb19f508d5454cf92e259c087ae2c93ec9e4ad0432317dff85d413aa72bdefae4ac3&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&amp;amp;mid=2247484742&amp;amp;idx=2&amp;amp;sn=f92f21b4fd89e1fda7467590045c8dd3&amp;amp;chksm=ec6e7c1edb19f508d5454cf92e259c087ae2c93ec9e4ad0432317dff85d413aa72bdefae4ac3&amp;amp;token=1812131085&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;每天一道剑指offer-整数中1出现的次数&lt;/p&gt;
&lt;/li&gt;
</description>
<pubDate>Fri, 22 Feb 2019 15:24:00 +0000</pubDate>
<dc:creator>程序员乔戈里</dc:creator>
<og:description>经过数月的努力，终于更完了牛客网的66道剑指offer，以下的顺序和大家在牛客网的顺序是一样的（排序也花了不少时间），希望对大家找工作/提高算法能力能起到些许帮助。 每天一道剑指offer 二维数组中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiaogeli/p/10421278.html</dc:identifier>
</item>
<item>
<title>使用 FFT 分析周期性数据 - MATLAB基于模型的设计</title>
<link>http://www.cnblogs.com/52geek/p/10421208.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/52geek/p/10421208.html</guid>
<description>&lt;p class=&quot;shortdesc&quot;&gt;可以使用傅里叶变换来分析数据中的变化，例如一个时间段内的自然事件。&lt;/p&gt;
&lt;p&gt;天文学家使用苏黎世太阳黑子相对数将几乎 300 年的太阳黑子的数量和大小制成表格。对大约 1700 至 2000 年间的苏黎世数绘图。&lt;/p&gt;
&lt;div class=&quot;code_responsive&quot;&gt;
&lt;div class=&quot;programlisting&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;codeinput&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
load sunspot.dat
year = sunspot(:,1);
relNums = sunspot(:,2);
plot(year,relNums)
xlabel('Year')
ylabel('Zurich Number')
title('Sunspot Data')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;为了更详细地看太阳黑子活动的周期特性，将对前 50 年的数据绘图。&lt;/p&gt;
&lt;div class=&quot;code_responsive&quot;&gt;
&lt;div class=&quot;programlisting&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;codeinput&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
plot(year(1:50),relNums(1:50),'b.-');
xlabel('Year')
ylabel('Zurich Number')
title('Sunspot Data')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;傅里叶变换是一种基础的信号处理工具，可确定数据中的频率分量。使用 &lt;code class=&quot;literal&quot;&gt;fft&lt;/code&gt; 函数可获取苏黎世数据的傅里叶变换。删除存储数据总和的输出的第一个元素。绘制该输出的其余部分，其中包含复傅里叶系数关于实轴的镜像图像。&lt;/p&gt;
&lt;div class=&quot;code_responsive&quot;&gt;
&lt;div class=&quot;programlisting&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;codeinput&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
y = fft(relNums);
y(1) = [];
plot(y,'ro')
xlabel('real(y)')
ylabel('imag(y)')
title('Fourier Coefficients')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;单独的傅里叶系数难以解释。计算系数更有意义的方法是计算其平方幅值，即计算幂。由于一半的系数在幅值中是重复的，因此您只需要对一半的系数计算幂。以频率函数的形式绘制功率频谱图，以每年的周期数为测量单位。&lt;/p&gt;
&lt;div class=&quot;code_responsive&quot;&gt;
&lt;div class=&quot;programlisting&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;codeinput&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
n = length(y);
power = abs(y(1:floor(n/2))).^2; % power of first half of transform data
maxfreq = 1/2;                   % maximum frequency
freq = (1:n/2)/(n/2)*maxfreq;    % equally spaced frequency grid
plot(freq,power)
xlabel('Cycles/Year')
ylabel('Power')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;太阳黑子活动发生的最大频率低于每年一次。为了查看更易解释的周期活动，以周期函数形式绘制幂图，以每周期的年数为测量单位。该绘图揭示了太阳黑子活动约每 11 年出现一次高峰。&lt;/p&gt;
&lt;div class=&quot;code_responsive&quot;&gt;
&lt;div class=&quot;programlisting&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;codeinput&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
period = 1./freq;
plot(period,power);
xlim([0 50]); %zoom in on max power
xlabel('Years/Cycle')
ylabel('Power')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Fri, 22 Feb 2019 15:00:00 +0000</pubDate>
<dc:creator>MATLAB基于模型的设计</dc:creator>
<og:description>可以使用傅里叶变换来分析数据中的变化，例如一个时间段内的自然事件。 天文学家使用苏黎世太阳黑子相对数将几乎 300 年的太阳黑子的数量和大小制成表格。对大约 1700 至 2000 年间的苏黎世数绘图</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/52geek/p/10421208.html</dc:identifier>
</item>
<item>
<title>Perl多线程(1)：解释器线程的特性 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/10420910.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/10420910.html</guid>
<description>&lt;p&gt;本文关于Perl线程的内容初始主要来自于《Pro Perl》的第21章，未来可能会逐渐添加、完善更多内容，当然也可能分离一部分内容单独成文。&lt;/p&gt;
&lt;h2 id=&quot;线程简介&quot;&gt;线程简介&lt;/h2&gt;
&lt;p&gt;线程(thread)是轻量级进程，和进程一样，都能独立、并行运行，也由父线程创建，并由父线程所拥有，线程也有线程ID作为线程的唯一标识符，也需要等待线程执行完毕后收集它们的退出状态(比如使用&lt;code&gt;join&lt;/code&gt;收尸)，就像waitpid对待子进程一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程运行在进程内部，每个进程都至少有一个线程，即main线程，它在进程创建之后就存在。线程非常轻量级，一个进程中可以有很多个线程，它们全都在进程内部并行地被调度、运行，就像多进程一样。每个线程都共享了进程的很多数据，除了线程自己所需要的数据，它们都直接使用父进程的，比如同一个线程解释器、同一段代码、同一段要处理的数据等&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;于是，现在开始从多进程编程转入到多线程编程。&lt;/p&gt;
&lt;h2 id=&quot;perl自己的线程&quot;&gt;Perl自己的线程&lt;/h2&gt;
&lt;p&gt;有些系统不原生支持线程模型(如某些Unix系统)，在Perl 5.8中，Perl提供了属于自己的线程模型：&lt;strong&gt;解释器线程(interpreter thread, ithreads)&lt;/strong&gt;。当然，Perl也依旧支持老线程。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Thread&lt;/code&gt;模块提供老式线程&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threads&lt;/code&gt;模块提供Perl解释器线程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以通过以下代码来检测操作系统是否支持老式线程、解释器线程。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/usr/bin/perl

BEGIN{
    use Config;
    if ($Config{usethreads}) {print &quot;support old thread\n&quot;;}
    if ($Config{useithreads}) {print &quot;support interpreter threads\n&quot;;}
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者简单的使用perldoc来检查这两个模块是否存在，一般来说安装Perl的时候就会自动安装它们：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ perldoc Thread
$ perldoc threads&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;threads&lt;/code&gt;模块提供的是面向对象的解释器线程，可以直接使用&lt;code&gt;new&lt;/code&gt;方法来创建一个线程，使用其它方法来维护线程。默认情况下，&lt;strong&gt;Perl解释器线程不会在线程之间共享数据和状态信息(也就是说数据是线程本地的)&lt;/strong&gt;，如果想要共享，可以使用&lt;code&gt;threads::shared&lt;/code&gt;。而老式线程模块&lt;code&gt;Thread&lt;/code&gt;的线程默认是自动在线程间共享数据的，且于解释器线程相互隔离，在编写复杂程序时这可能会很复杂。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;在Perl的解释器线程被创建的时候，会将父线程中所有的变量都拷贝到自己的空间中使之成为私有变量&lt;/strong&gt;，这样各线程之间就互相隔离了，并且自动实现了线程安全。如果想要在同进程的不同线程之间共享数据，需要专门使用&lt;code&gt;threads::shared&lt;/code&gt;模块将变量共享出去，这样每个线程都能访问到这个变量。&lt;/p&gt;
&lt;p&gt;解释器线程这样的行为对编写多线程来说非常的友好，但是这会影响Perl的线程性能，特别是父线程中数据量较大的时候，创建线程的成本以及内存占用上是非常昂贵的。所以，在使用Perl解释器线程的时候，应当尽量在数据量还小的时候创建子线程。&lt;/p&gt;
&lt;h2 id=&quot;创建线程&quot;&gt;创建线程&lt;/h2&gt;
&lt;p&gt;Perl线程在很多方面都像fork出来的进程一样，但是在创建线程上，它更像是一个子程序。&lt;/p&gt;
&lt;p&gt;创建线程的方式有两种：create/new、async，create和new是等价的别名，这3种(实际上是两种)创建线程的方式除了语法上不同，在线程执行上是完全一致的。&lt;/p&gt;
&lt;p&gt;创建线程的标准方法是使用&lt;code&gt;create&lt;/code&gt;或&lt;code&gt;new&lt;/code&gt;方法（它们是等价的别名），并且给它一个&lt;strong&gt;子程序或子程序引用或匿名子程序&lt;/strong&gt;，这表示创建一个新线程去运行这个子程序。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads;

my $thr = threads-&amp;gt;create(\&amp;amp;sub1);

sub sub1 {
    print(&quot;In Child Thread\n&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里main线程创建了子线程运行sub1子程序，创建完成后，main线程继续向下运行。&lt;/p&gt;
&lt;p&gt;如果子程序要传递参数，直接在create/new的参数位上传递即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads;

sub threadsub {
    my $self = threads-&amp;gt;self;
}

my $thr1 = threads-&amp;gt;create(\&amp;amp;threadsub, 'arg1', 'arg2');
# 或者使用new
my $thr2 = threads-&amp;gt;new(\&amp;amp;threadsub, @args);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果使用async创建线程，那么给async一个语句块，就像匿名子程序一样。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads;

my $thr = async {
    ... some code ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这表示新建一个子线程来运行代码块中的代码。&lt;/p&gt;
&lt;p&gt;至于选择create/new还是选择async来创建新线程，随意。但是如果创建多个线程的话，使用create/new比较方便。而且，create/new也一样能创建新线程执行匿名子程序。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my $thr1 = new threads \&amp;amp;threadsub, $arg1;
my $thr2 = new threads \&amp;amp;threadsub, $arg2;
my $thr3 = new threads \&amp;amp;threadsub, $arg3;

# create执行匿名子程序
my $thr = threads-&amp;gt;create( sub {...} );&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;线程标识&quot;&gt;线程标识&lt;/h2&gt;
&lt;p&gt;由于我们可能会创建很多个线程，我们需要区分它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一种方式是通过给不同线程的子程序传递不同参数的方式来区分不同的线程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my $thr1 = threads-&amp;gt;create(\&amp;amp;mysub,&quot;first&quot;);
my $thr1 = threads-&amp;gt;create(\&amp;amp;mysub,&quot;second&quot;);
my $thr1 = threads-&amp;gt;create(\&amp;amp;mysub,&quot;third&quot;);

sub mysub {
    my $thr_num = shift @_;
    print &quot;I am thread $thr_num\n&quot;;
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;第二种方式是获取threads模块中的线程对象，线程对象中包含了线程的id属性&lt;/strong&gt;。通过类方法&lt;code&gt;threads-&amp;gt;self()&lt;/code&gt;可以获取当前线程对象，有了线程对象，可以通过tid()对象方法获取这个线程对象的ID，当然还可以直接使用类方法&lt;code&gt;threads-&amp;gt;tid()&lt;/code&gt;来获取当前线程对象的ID。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my $myself = threads-&amp;gt;self;
my $mytid = $myself-&amp;gt;tid();

# 或
my $mytid = threads-&amp;gt;tid();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于已知道tid的线程，可以使用类方法&lt;code&gt;threads-&amp;gt;object($tid)&lt;/code&gt;去获取这个tid的线程对象。注意，object()只能获取正激活的线程对象，对于joined和detached线程(join和detach见下文)，都返回undef，不仅如此，对于无法收集的线程对象，object()都返回undef，例如收集&lt;code&gt;$tid&lt;/code&gt;不存在的线程。&lt;/p&gt;
&lt;p&gt;线程对象的ID是从0开始计算的，然后每新建一个子线程，ID就加1.0号线程就是每个进程创建时的main线程，main线程再创建一个新子线程，这个新子线程的ID就是1。&lt;/p&gt;
&lt;p&gt;可以比较两个线程是否是同一个线程，使用equal()方法（或者重载的&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;符号）即可，它们都基于线程ID进行比较：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;print &quot;Equal\n&quot; if $self-&amp;gt;equal($thr);
print &quot;Equal\n&quot; if $self == $thr;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;线程状态和joindetach&quot;&gt;线程状态和join、detach&lt;/h2&gt;
&lt;p&gt;Perl中的线程实际上是一个子程序代码块，它可能会有子程序的返回值，所以父线程需要接收子线程的返回值。不仅如此，就像父进程需要使用wait/waitpid等待子进程并为退出的子进程收尸一样，父线程也需要等待子线程退出并为子线程收尸(做最后的清理工作)。为线程收尸是很重要的，如果只创建了几个运行时间短的子线程，那么操作系统可能会自动为子线程收尸，但创建了一大堆的子线程，操作系统可能不会给我们什么帮助，我们要自己去收尸。&lt;/p&gt;
&lt;p&gt;join()方法的功能就像waitpid一样，&lt;strong&gt;当父线程中将子线程join()后，表示将子线程从父线程管理的一个线程表中加入到父线程监控的另一个列表中（实际上并非如此，只是修改了进程的状态而已，稍后解释），这个列表中的所有线程是该父线程都需要等待的。所以，将join()方法的&quot;加入&quot;含义看作是加入到了父线程的某个监控列表中即可&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;join()做三件事：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;等待子线程退出，等待过程中父线程一直阻塞&lt;/strong&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子线程退出后，为子线程收尸(OS clean up)&lt;/strong&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果子线程有返回值，则收集返回值&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;而返回值是有上下文的，根据标量(scalar)、列表(list)、空(void)上下文，应该在合理的上下文中使用返回值&lt;/strong&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;线程上下文相关，稍后解释&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads;

my ($thr) = threads-&amp;gt;create(\&amp;amp;sub1);

# join，父进程等待、收尸、收集返回值
my @returnData = $thr-&amp;gt;join();

print 'thread returned: ', join('@', @returnData), &quot;\n&quot;;

sub sub1 {
    # 返回值是列表
    return ('fifty-six', 'foo', 2);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;join的三件事中，&lt;strong&gt;如果不想要等待子线程执行完毕，可以使用detach()，它将子线程脱离父线程，父线程不再阻塞等待。因为已经脱离，父线程也将不再为子线程收尸(子线程在执行完毕的时候自己收尸)，父线程也无法收集子线程的返回值导致子线程的返回值被丢弃&lt;/strong&gt;。当然，父子关系还在，只不过当父线程退出时，子线程会继续运行，这时才会摆脱父线程成为孤儿线程，这就像daemon进程(自己成立进程组)和父进程一样。&lt;/p&gt;
&lt;p&gt;刚才使用&quot;父线程监控的另一个列表&quot;来解释join的行为，这是不准确的。实际上，线程有6种状态(这些状态稍后还会解释)：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;detached(和joined是互斥的状态)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;joined(和detached是互斥的状态)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;finished execution(执行完但还没有返回，还没退出)，其实是running状态刚结束，可以被join的阶段(joinable)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;exit&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;died&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;creation failed&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;当执行detach()后，线程的状态就变成detached，当执行join()后，线程的状态就变成joined。detached线程可以看作是粗略地看作是脱离了父线程，它无法join，父线程也不会对其有等待、收尸、收集返回值行为，只有进程退出时detached线程才默默被终止(detached状态的线程也依然是线程，是进程的内部调度单元，进程终止，线程都将终止)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads;

sub mysub {
    #alarm 10;
    for (1..10){
        print &quot;I am detached thread\n&quot;;
        sleep 1;
    }
}

my $thr1 = threads-&amp;gt;new(\&amp;amp;mysub)-&amp;gt;detach();

print &quot;main thread will exit in 2 seconds\n&quot;;
sleep 2;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的子线程会被detach，父线程继续运行，在2秒后进程终止，detach后的子线程会被默默终止。&lt;/p&gt;
&lt;p&gt;更细分一点，一个线程正常执行子程序到结束可以划分为几个过程：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.线程入口，开始执行子程序。执行子程序的阶段称为running状态&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;2.&lt;strong&gt;子程序执行完毕，但还没有返回，这个时候是running刚结束状态，也是前文提到的finished execution状态&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;如果这个线程未被detach，&lt;strong&gt;从这个状态开始，这个线程可以被join(除非是detached线程)，也就是joinable状态，父线程在这个阶段不再阻塞&lt;/strong&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3.线程执行完毕
&lt;ul&gt;&lt;li&gt;如果这个线程被join，则父线程对该线程收尸并收集该线程的返回值&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;如果这个线程被detach，则这个线程自己收尸并退出&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;如果这个线程未join也未detach，则父线程不会收尸，并且在进程退出时报告相关消息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以从另一种分类角度上看，&lt;strong&gt;线程可以分为：active、joined、detached三种状态&lt;/strong&gt;。其中detached线程已被脱离，所以不算是active线程，joined已经表示线程的子程序已经执行完毕了，也不算是active线程，只有unjoined、undetached线程才算是active线程，active包括running、joinable这两个过程。&lt;/p&gt;
&lt;p&gt;整个线程的状态和过程可以参考下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/733013/201902/733013-20190222140407479-1076540038.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面一直忽略了一种情况，线程在join之前就已经运行完毕了。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my $thr1 = threads-&amp;gt;create(\&amp;amp;sub1);

# 父线程睡5秒，给子线程5秒的执行时间
sleep 5;
$thr1-&amp;gt;join();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;子线程先执行完毕，但是父线程还没对它进行join，这时子线程一直处于joinable的状态，其实这个时候子线程基本已经失去意义了，它的返回值和相关信息都保存在线程栈(或调用栈call stack)，当父线程对其进行join()的时候，自然能从线程栈中找到返回值或某些信息的栈地址从而取得相关数据，也能从现在开始对其进行收尸行为。&lt;/p&gt;
&lt;p&gt;实际上，解释器线程是一个双端链表结构，每个线程节点记录了自己的属性，包括自己的状态。而main线程中则包含了所有子线程的一些统计信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;typedef struct {
    /* Structure for 'main' thread
     * Also forms the 'base' for the doubly-linked list of threads */
    ithread main_thread;
 
    /* Protects the creation and destruction of threads*/
    perl_mutex create_destruct_mutex;
 
    UV tid_counter;        # tid计数器，可知道当前已经创建了几个线程
    IV joinable_threads;   # 可join的线程
    IV running_threads;    # 正在运行的线程
    IV detached_threads;   # detached状态的线程
    IV total_threads;      # 总线程数
    IV default_stack_size; # 线程的默认栈空间大小
    IV page_size;
} my_pool_t;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;检查线程的状态&quot;&gt;检查线程的状态&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;threads-&amp;gt;list()&lt;/code&gt;方法可以列出未detach的线程，列表上下文下返回这些线程列表，标量上下文下返回数量。它有4种形式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;threads-&amp;gt;list()  # 返回non-detach、non-joined线程
threads-&amp;gt;list(threads::all)  # 同上
threads-&amp;gt;list(threads::running)  # non-detached、non-joined的线程对象，即正在运行的线程
threads-&amp;gt;list(threads::joinable)  # non-detached、non-joined但joinable的线程对象，即已完成子程序执行但未返回的线程&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以，list()只能统计未detach、未join的线程，&lt;code&gt;::running&lt;/code&gt;返回的是正在运行子程序主体的线程，&lt;code&gt;::joinable&lt;/code&gt;返回的是已完成子程序主体的线程，&lt;code&gt;::all&lt;/code&gt;返回的是它们之和。&lt;/p&gt;
&lt;p&gt;此外，我们还可以直接去测试线程的状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$thr-&amp;gt;is_running()
如果该线程正在运行，则返回true

$thr-&amp;gt;is_joinable()
如果该线程已经完成了子程序的主体(即running刚结束)，且未detach未join，换句话说，这个线程是joinable，于是返回true

$thr-&amp;gt;is_detached()
threads-&amp;gt;is_detached()
测试该线程或线程自身是否已经detach&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;线程的上下文环境&quot;&gt;线程的上下文环境&lt;/h2&gt;
&lt;p&gt;因为解释器线程实际上是一个运行的子程序，而父线程可能需要收集子线程的返回值(join()的行为)，而返回值在不同上下文中有不同的行为。&lt;/p&gt;
&lt;p&gt;仍以前面的示例来解释：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads;

# my(xxx)：列表上下文
# my xxx：标量上下文
my ($thr) = threads-&amp;gt;create(\&amp;amp;sub1);

# join，父进程等待、收尸、收集返回值
# @arr：列表上下文
my @returnData = $thr-&amp;gt;join();

print 'thread returned: ', join('@', @returnData), &quot;\n&quot;;

sub sub1 {
    # 返回值是列表
    return ('fifty-six', 'foo', 2);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的创建子线程后，父线程将这个子线程join()时一直阻塞，直到子线程运行完毕，父线程将子线程的返回值收集到数组&lt;code&gt;@returnData&lt;/code&gt;中。因为子程序的返回值是一个列表，所以这里join的上下文是列表上下文。&lt;/p&gt;
&lt;p&gt;其实，&lt;strong&gt;子线程的上下文是在被创建出来的时候决定的&lt;/strong&gt;，这样子程序中可以出现wantarray()。所以，&lt;strong&gt;在线程被创建时、在join时上下文都要指定：前者决定线程入口(即子程序)执行时所处何种上下文，后者决定子程序返回值环境&lt;/strong&gt;。这两个地方的上下文不一定要一样，例如创建线程的时候在标量上下文环境下，表示子程序在标量上下文中执行，而join的时候可以放在空上下文表示丢弃子程序的返回值。&lt;/p&gt;
&lt;p&gt;允许三种上下文：标量上下文、列表上下文、空上下文。&lt;/p&gt;
&lt;p&gt;对于join时的上下文没什么好解释的，根据上下文环境将返回值进行赋值而已。但是创建线程时的上下文环境需要解释。有显式和隐式两种方式来指定创建线程时的上下文。&lt;/p&gt;
&lt;p&gt;隐式上下文自然是通过所处上下文环境来暗示。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 列表上下文创建线程
my ($thr) = threads-&amp;gt;create(...);

# 标量上下文创建线程
my $thr = threads-&amp;gt;create(...);

# 空上下文创建线程
threads-&amp;gt;create(...);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显式上下文是在create/new创建线程的时候，在第一个参数位置上指定通过一个hash引用来指定上下文环境。也有两种方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 列表上下文创建线程
my $thr = threads-&amp;gt;create({ 'context' =&amp;gt; 'list' }, \&amp;amp;sub1)
my $thr = threads-&amp;gt;create({ 'list' =&amp;gt; 1 }, \&amp;amp;sub1)

# 标量上下文创建线程
my $thr = threads-&amp;gt;create({ 'context' =&amp;gt; 'scalar' }, \&amp;amp;sub1)
my $thr = threads-&amp;gt;create({ 'scalar' =&amp;gt; 1 }, \&amp;amp;sub1)

# 空上下文创建线程
my $thr = threads-&amp;gt;create({ 'context' =&amp;gt; 'void' }, \&amp;amp;sub1)
my $thr = threads-&amp;gt;create({ 'void' =&amp;gt; 1 }, \&amp;amp;sub1)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;线程的退出&quot;&gt;线程的退出&lt;/h2&gt;
&lt;p&gt;正常情况并且大多情况下，线程都应该通过子程序return的方式退出线程。但是也有其它可能。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;threads-&amp;gt;exit()
线程自身可以调用threads-&amp;gt;exit()以便在任何时间点退出。这会使得线程在标量上下文返回undef，在列表上下文返回空列表。如果是在main线程中调用`threads-&amp;gt;exit()`，则等价于exit(0)

threads-&amp;gt;exit(status)
在线程中调用时，等价于threads-&amp;gt;exit()，退出状态码status会被忽略。在main线程中调用时，等价于exit(status)

die()
直接调用die函数会让线程直接退出，如果设置了 $SIG{__DIE__} 的信号处理机制，则调用该处理方法，像一般情况下的die一样

exit(status)
在线程内部调用exit()函数会导致整个程序终止(进程中断)，所以不建议在线程内部调用exit()。但是可以改变exit()终止整个程序的行为，见下面几个设置

use threads 'exit'=&amp;gt;'threads_only'
全局设置，使得在线程内部调用exit()时不会导致整个程序终止，而是只让线程终止。由于这是全局设置，所以不是很建议设置。另外，该设置对main线程无效

threads-&amp;gt;create({'exit'=&amp;gt;'thread_only},\&amp;amp;sub1)
在创建线程的时候，就设置该线程中的exit()只退出当前线程

$thr-&amp;gt;set_thread_exit_only(bool)
修改当前线程中的exit()效果。如果给了true值，则线程内部调用exit()将只退出该线程，给false值，则终止整个程序。对main线程无效

threads-&amp;gt;set_thread_exit_only(bool)
类方法，给true值表示当前线程中的exit()只退出当前线程。对main线程无效&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最可能需要的退出方式是&lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt;或&lt;code&gt;threads-&amp;gt;exit(status)&lt;/code&gt;，如果对于线程中严重错误的问题，则可能需要的是die或exit()来终止整个程序。&lt;/p&gt;
&lt;h2 id=&quot;线程的信号处理&quot;&gt;线程的信号处理&lt;/h2&gt;
&lt;p&gt;在threads定义的解释器线程中，可以在线程内部定义信号处理器(signal handler)，并通过&lt;code&gt;$thr-&amp;gt;kill(SIGNAME)&lt;/code&gt;的方式发送信号(对于某些自动触发的信号处理，稍后解释)，&lt;code&gt;kill&lt;/code&gt;方法会返回线程对象以便进行链式调用方法。&lt;/p&gt;
&lt;p&gt;例如，在main线程中发送SIGKILL信号，并在线程内部处理这个信号。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads;

sub thr_func {
    # Thread signal handler for SIGKILL
    $SIG{KILL} = sub { 
        print &quot;Caught Signal: SIGKILL\n&quot;;
        threads-&amp;gt;exit();
    }
    ...
}

my $thr = threads-&amp;gt;create('thr_func');

...

# send SIGKILL to terminate thread, then detach 
# it so that it will clean up automatically
$thr-&amp;gt;kill('KILL')-&amp;gt;detach();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实，&lt;strong&gt;threads对于线程信号的处理方式是模拟的，不是真的从操作系统发送信号(操作系统发送的信号是给进程的，会被main线程捕获)&lt;/strong&gt;。模拟的逻辑也很简单，通过&lt;code&gt;threads-&amp;gt;kill()&lt;/code&gt;发送信号给指定线程，然后通过调用子程序中的&lt;code&gt;%SIG&lt;/code&gt;中的signal handler即可。&lt;/p&gt;
&lt;p&gt;例如上面的示例中，我们想要发送KILL信号，但这个信号不是操作系统发送的，而是模拟了一个KILL信号，表示是要终止线程的执行，于是调用线程中的SIGKILL对应的signal handler，仅此而已。&lt;/p&gt;
&lt;p&gt;但是，有些信号是某些情况下自动触发的，比如在线程中使用一个alarm计时器，在计时结束时它会发送SIGALRM信号给进程，这会使得整个进程都退出，而不仅仅是那个单独的线程，这显然不是我们所期待的结果。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;操作系统所发送的信号都会在main线程中被捕获。所以如果想要处理上面的问题，只需在main线程中定义对应操作系统发送的信号的signal handler，并在handler中重新使用&lt;code&gt;threads-&amp;gt;kill()&lt;/code&gt;发送这个信号给指定线程，从而间接实现&quot;信号-&amp;gt;线程&quot;的机制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，在线程中使用alarm并在计时结束的时候停止该线程。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;use threads qw(yield);

# 带有计时器的线程
my $thr = threads-&amp;gt;create(
    sub {
        threads-&amp;gt;yield();
        eval {
            $SIG{ALRM} = sub {die &quot;Timeout&quot;;};
            alarm 10;
            ... do somework ...
        };
        if ( $@ =~ /Timeout/) {
            warn &quot;thread timeout&quot;;
        }
    }
);

$SIG{ALRM} = sub { $thr-&amp;gt;kill('ALRM') };
... main thread continue ...&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 22 Feb 2019 14:11:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<og:description>本文关于Perl线程的内容初始主要来自于《Pro Perl》的第21章，未来可能会逐渐添加、完善更多内容，当然也可能分离一部分内容单独成文。 线程简介 线程(thread)是轻量级进程，和进程一样，都</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/10420910.html</dc:identifier>
</item>
<item>
<title>SLAM+语音机器人DIY系列：（七）语音交互与自然语言处理——1.语音交互相关技术 - 小虎哥哥爱学习</title>
<link>http://www.cnblogs.com/hiram-zhang/p/10420788.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hiram-zhang/p/10420788.html</guid>
<description>&lt;p&gt;&lt;span&gt;这一章将进入机器人语音交互的学习，让机器人能跟人进行语音对话交流。这是一件很酷的事情，本章将涉及到语音识别、语音合成、自然语言处理方面的知识。本章内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hiram-zhang/p/10420788.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;1.语音交互相关技术&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hiram-zhang/p/10421162.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;2.机器人语音交互实现&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hiram-zhang/p/10421186.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;3.自然语言处理云计算引擎&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;要机器人能完成跟人对话，涉及到语音识别、语音合成、自然语言处理等技术。简单点说，语音识别就是将人的声音转换成文字便于机器人计算与理解；语音合成就是将机器人要说的文字内容转换为声音；自然语言处理相当于机器人的大脑，负责回答提问。整个语音交互的过程，如图&lt;/span&gt;1&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190222213741739-886937597.png&quot; alt=&quot;&quot; width=&quot;700&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;1&lt;span&gt;）&lt;/span&gt;&lt;span&gt;语音交互过程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.1.&lt;span&gt;语音识别                    &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;语音识别技术，也被称为自动语音识别Automatic Speech Recognition(ASR)，其目标是将人类的语音中的词汇内容转换为计算机可读的输入，例如按键、二进制编码或者字符序列，如图2。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190222214004811-1110548389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;2&lt;span&gt;）&lt;/span&gt;&lt;span&gt;语音识别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语音识别技术所涉及的领域包括：信号处理、模式识别、概率论和信息论、发声机理和听觉机理、人工智能等等。语音识别技术的最重大突破是隐马尔科夫模型Hidden Markov Model的应用。从Baum提出相关数学推理，经过Labiner等人的研究，卡内基梅隆大学的李开复最终实现了第一个基于隐马尔科夫模型的非特定人大词汇量连续语音识别系统Sphinx。此后严格来说语音识别技术并没有脱离HMM框架。当然神经网络方法是一种新的语音识别方法，人工神经网络本质上是一个自适应非线性动力学系统，模拟了人类神经活动的原理，具有自适应性、并行性、鲁棒性、容错性和学习特性，其强的分类能力和输入-输出映射能力在语音识别中都很有吸引力。但由于存在训练、识别时间太长的缺点，目前仍处于实验探索阶段。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.2.&lt;span&gt;语音合成                    &lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;语音合成是语音识别的逆过程，也称为文字转语音（&lt;/span&gt;TTS&lt;span&gt;），&lt;/span&gt;&lt;span&gt;它是将计算机自己产生的、或外部输入的文字信息转变为可以听得懂的、流利的汉语&lt;/span&gt;&lt;span&gt;或其他&lt;/span&gt;&lt;span&gt;口语输出的技术。&lt;/span&gt;&lt;span&gt;如图&lt;/span&gt;3&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190222215035400-717488909.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;3&lt;span&gt;）&lt;/span&gt;&lt;span&gt;语音合成&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TTS&lt;span&gt;过程包括这些步骤：语言处理，&lt;/span&gt;&lt;span&gt;在文语转换系统中起着重要的作用，主要模拟人对自然语言的理解过程&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;文本规整、词的切分、&lt;/span&gt;&lt;span&gt;语法分析&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;语义分析&lt;/span&gt;&lt;span&gt;，使计算机对输入的文本能完全理解，并给出后两部分所需要的各种发音提示&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;韵律处理&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;为合成语音规划出音段特征，如音高、音长和音强等，使合成语音能正确表达语意，听起来更加自然&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;声学处理&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;根据前两部分处理结果的要求输出语音，即合成语音。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.3.&lt;span&gt;自然语言处理                &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有了语音识别和语音合成，要让机器人能智能的对答如流的和人交谈，还需要赋予机器人以灵魂。自然语言处理技术（&lt;/span&gt;NLP&lt;span&gt;）就是来赋予聊天机器人内在灵魂的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;NLP&lt;span&gt;是计算机领域与人工智能领域中的一个重要分支。由于数据的大幅度增强、计算力的大幅度提升、深度学习实现端到端的训练，深度学习引领人工智能进入有一个高潮。人们也逐渐开始将如日中天的深度学习方法引入到&lt;/span&gt;&lt;span&gt;NLP&lt;/span&gt;&lt;span&gt;领域，在机器翻译、问答系统、自动摘要等方向取得成功。经过互联网的发展，很多应用积累了足够多的数据可以用于学习。当数据量增大之后，以支持向量机（&lt;/span&gt;&lt;span&gt;SVM&lt;/span&gt;&lt;span&gt;）、条件随机场（&lt;/span&gt;&lt;span&gt;CRF&lt;/span&gt;&lt;span&gt;）为代表的传统浅层模型，由于模型过浅，无法对海量数据中的高维非线性映射做建模，所以不能带来性能的提升。然而，以&lt;/span&gt;&lt;span&gt;CNN&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;RNN&lt;/span&gt;&lt;span&gt;为代表的深度模型，可以随着模型复杂度的增大而增强，更好贴近数据的本质映射关系。一方面，深度学习的&lt;/span&gt;&lt;span&gt;word2vec&lt;/span&gt;&lt;span&gt;的出现，使得我们可以将词表示为更加低维的向量空间。另一方面，深度学习模型非常灵活，使得之前的很多任务，可以使用端到端的方式进行训练。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190222215232497-1887277437.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;4&lt;span&gt;）&lt;/span&gt;&lt;span&gt;基于深度学习的自然语言处理过程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了让大家更好的理解基于深度学习的自然语言处理过程，举一个比较通用的模型，如图&lt;/span&gt;4。问题句子通过Seq2Seq循环神经网络进行预处理和编码，然后进入答案搜索，接着通过DQN强化学习网络对问答策略进程学习。这样，随着时间的推移，问答系统回答问题的水平会越来越高，就达到了不断在线学习的目的了。&lt;/p&gt;

&lt;p&gt;如果大家对博文的相关类容感兴趣，或有什么技术疑问，欢迎加入下面的《SLAM+语音机器人DIY》QQ技术交流群，一起讨论学习^_^&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190220162438739-1654241751.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 22 Feb 2019 13:58:00 +0000</pubDate>
<dc:creator>小虎哥哥爱学习</dc:creator>
<og:description>摘要 这一章将进入机器人语音交互的学习，让机器人能跟人进行语音对话交流。这是一件很酷的事情，本章将涉及到语音识别、语音合成、自然语言处理方面的知识。本章内容： 1.语音交互相关技术 2.机器人语音交互</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hiram-zhang/p/10420788.html</dc:identifier>
</item>
</channel>
</rss>