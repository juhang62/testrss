<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python基础（五）——闭包与lambda的结合 - 孔胡子</title>
<link>http://www.cnblogs.com/KongHuZi/p/10889437.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/KongHuZi/p/10889437.html</guid>
<description>&lt;p&gt;　　要了解闭包需要先了解变量的域，也就是变量在哪一段“上下文”是有效的（类似局部变量和全局变量的区别），举一个很简单的例子。（例子不重要，就是涉及闭包就要时刻关注这个域）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test():
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     msg2 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test中的&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;====&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,msg1) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ==== 非test中的&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; msg1 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;非test中的&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;test()
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(msg1) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 非test中的&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(msg2) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 报错&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　&lt;span&gt;&lt;em&gt;&lt;strong&gt;维基百科定义&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;：闭包（Closure）或闭包函数（function Closure），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以有另一种说法认为&lt;span&gt;闭包是由函数和与其相关的引用环境组合而成的实体&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　定义可以反复体会，先看一个比较有意思的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test():
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     msg = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是test中的&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test2():
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(msg)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; test2
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; g =&lt;span&gt; test()
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; g() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 我是test中的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段代码执行到第七行的时候，输出了msg的内容。&lt;/p&gt;
&lt;p&gt;　　我们在对比【（1）变量的域】中的代码例子，那个例子中，同样是第七行的时候是报错，因为很好理解，上一个例子msg2已经脱离了test（）函数，也就是局部变量只能在内部使用，不能够全局使用。&lt;/p&gt;
&lt;p&gt;　　然后回到这个例子，这就是闭包存在的意义，我们可以在外部访问局部变量。&lt;span&gt;闭包就是：函数+上下文&lt;/span&gt;。注意到我这个例子第五行返回的是test2，是一个函数对象（in Python everything is an object ）。这里的 g 就是闭包。而我所说的&lt;span&gt;上下文：就是各种变量环境&lt;/span&gt;。所以第七行的return，返回的function不是普通function，是带着上下文环境一起的（&lt;span&gt;也就是test2() 函数中带有msg，而msg其实实在test()中定义的，但是也会被test2()带在身边&lt;/span&gt;）。不单单只返回第三第四行两行简单的内容。&lt;/p&gt;


&lt;p&gt;　　我们再看几个 &lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2295290/what-do-lambda-function-closures-capture&quot; target=&quot;_blank&quot;&gt;stockoverflow&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; 和 &lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result&quot; target=&quot;_blank&quot;&gt;官网上&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;的几个关于闭包的例子与疑点：&lt;/p&gt;
&lt;h2&gt;　1.例子一&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; adders=[0,1,2,3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; [0,1,2,3&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;    adders[i]=&lt;span&gt;lambda&lt;/span&gt; a: i+&lt;span&gt;a
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print(&lt;/span&gt;adders[1](3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　这个里之中adders列表存储了匿名函数，adders[1](3) 就是访问adders[1] 中的匿名函数，参数是3，也就是lambda a:i+a（3传递给a，i 是for...in 循环给的，计算结果是 i + a）。&lt;/p&gt;
&lt;p&gt;　　奇怪的是结果adders[1](3) = 6.我们可能会想应该是4阿，1 + 3 = 4。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;我的理解是这样的&lt;/span&gt;：因为我们需要注意这里的 i 到底是属于谁的，i 是在 for...in 中定义的，一个循环至始至终只有一个 i ,也就是  i 的引用是不变的，变得是 i 得值，所以lambda中的 i ，adders[0]，adders[1]....中的 i 都是指向同一个 i ，而最后 i 是三。adders[0,1,2,3] 中的 lambda 匿名函数的参数 i 全都是同一个，这个 i 因为循环最终值是3.  所以3+3=6.（&lt;span&gt;&lt;em&gt;&lt;strong&gt;也就是 i 是什么时候定义的？这个问题考虑好，是在调用lambda之前，也就是for循环开始的时候定义好的&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;改进方案&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; adders=[0,1,2,3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; [0,1,2,3&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;    adders[i]=&lt;span&gt;lambda&lt;/span&gt; a, b = i: b+&lt;span&gt;a
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(adders[0](3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(adders[1](3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(adders[2](3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(adders[3](3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　那我们就在lambda之中定义一个b，这个b是记录i，但是adders[ ....] 数组中的 b 是各不相同的引用哦。&lt;/p&gt;
&lt;h2&gt;    2.例子二&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; squares =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   squares.append(&lt;span&gt;lambda&lt;/span&gt;: x**2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(squares[2]()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(squares[3]()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　情况一模一样。最后全都算 4 *4 = 16。&lt;span&gt;改进如下&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; squares =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   squares.append(&lt;span&gt;lambda&lt;/span&gt; b = x: b**2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(squares[2]()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(squares[3]()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</description>
<pubDate>Sun, 19 May 2019 07:32:00 +0000</pubDate>
<dc:creator>孔胡子</dc:creator>
<og:description>（1）变量的域 要了解闭包需要先了解变量的域，也就是变量在哪一段“上下文”是有效的（类似局部变量和全局变量的区别），举一个很简单的例子。（例子不重要，就是涉及闭包就要时刻关注这个域） （2）什么是闭包</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/KongHuZi/p/10889437.html</dc:identifier>
</item>
<item>
<title>栈与堆、作用域与生存期 - cherrychenlee</title>
<link>http://www.cnblogs.com/cherrychenlee/p/10889375.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cherrychenlee/p/10889375.html</guid>
<description>&lt;p&gt;&lt;span&gt;原文地址：&lt;a href=&quot;https://www.jianshu.com/p/29e8f2930cf5&quot; class=&quot;uri&quot;&gt;https://www.jianshu.com/p/29e8f2930cf5&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;span&gt;&lt;code&gt;// correct
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;math.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
using namespace std;

/* 几何形体处理程序: 
 * 输入若干个几何形体的参数，要求按面积排序输出。
 * 输出时要指明形状。
 * Input:
 * 第一行是几何形体数目n（不超过100)
 * 下面有n行，每行以一个字母c开头
 * 若 c 是 ‘R’ ，则代表一个矩形，本行后面跟着两个整数，分别是矩形的宽和高
 * 若 c 是 ‘C’ ，则代表一个圆，本行后面跟着一个整数代表其半径
 * 若 c 是 ‘T’ ，则代表一个三角形，本行后面跟着三个整数，代表三条边的长度
 * Output:
 * 按面积从小到大依次输出每个几何形体的种类及面积。
 * 每行一个几何形体，输 出格式为：
 * 形体名称：面积*/

class CShape{
    public:
    virtual double Area()=0;
    virtual void PrintInfo()=0;
};

class CRectangle:public CShape {
    int w,h;
    public:
    CRectangle(int x,int y):w(x),h(y){}
    double Area(){return w*h;}
    void PrintInfo(){cout&amp;lt;&amp;lt;&quot;Rectangle:&quot;&amp;lt;&amp;lt;Area()&amp;lt;&amp;lt;endl;}
};

class CCircle:public CShape{
    int r;
    public:
    CCircle(int x):r(x){}
    double Area(){return r*r*3.14;}
    void PrintInfo(){cout&amp;lt;&amp;lt;&quot;Circle:&quot;&amp;lt;&amp;lt;Area()&amp;lt;&amp;lt;endl;}
};

class CTriangle:public CShape{
    int a,b,c;
    public:
    CTriangle(int x,int y,int z):a(x),b(y),c(z){}
    double Area(){
        //海伦公式
        double p=double(a+b+c)/2;
        return sqrt(p*(p-a)*(p-b)*(p-c));
    }
    void PrintInfo(){cout&amp;lt;&amp;lt;&quot;Triangle:&quot;&amp;lt;&amp;lt;Area()&amp;lt;&amp;lt;endl;}
};

int MyCompare(const void* p1,const void* p2){
        CShape** pc1;
        CShape** pc2;
        pc1=(CShape**)p1;
        pc2=(CShape**)p2;
        double a1,a2;
        a1=(*pc1)-&amp;gt;Area();
        a2=(*pc2)-&amp;gt;Area();
        if(a1&amp;gt;a2) return 1;
        else if(a1&amp;lt;a2) return -1;
        else return 0; 
}

int main(){
    CShape* p[100];
    int n;
    int i;
    cin&amp;gt;&amp;gt;n;
    for(i=0;i&amp;lt;n;i++){
        char ch;
        cin&amp;gt;&amp;gt;ch;
        switch(ch){
            case 'R':{
                int w,h;
                cin&amp;gt;&amp;gt;w&amp;gt;&amp;gt;h;
                CRectangle* pr=new CRectangle(w,h);
                p[i]=pr;
                cout&amp;lt;&amp;lt;p[i]&amp;lt;&amp;lt;endl;
                break;}
            case 'C':{
                int r;
                cin&amp;gt;&amp;gt;r;
                CCircle* pc=new CCircle(r);
                p[i]=pc;
                cout&amp;lt;&amp;lt;p[i]&amp;lt;&amp;lt;endl;
                break;}
            case 'T':{
                int a,b,c;
                cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b&amp;gt;&amp;gt;c;
                CTriangle* pt=new CTriangle(a,b,c);
                p[i]=pt;
                cout&amp;lt;&amp;lt;p[i]&amp;lt;&amp;lt;endl;
                break;}
            default:{break;}
        }
    p[0]-&amp;gt;PrintInfo();
    }
    qsort(p,n,sizeof(CShape*),MyCompare);
    for(i=0;i&amp;lt;n;i++)
    {
        p[i]-&amp;gt;PrintInfo();
    }
    return 0;
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;若将case里程序实现改为新建派生类对象，然后将指针指向该对象方式，会发现p[i]里存放的地址相同，结果会出错。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code&gt;// wrong answer
int main(){
    CShape* p[100];
    int n;
    int i;
    cin&amp;gt;&amp;gt;n;
    for(i=0;i&amp;lt;n;i++){
        char ch;
        cin&amp;gt;&amp;gt;ch;
        switch(ch){
            case 'R':{
                int w,h;
                cin&amp;gt;&amp;gt;w&amp;gt;&amp;gt;h;
                //CRectangle* pr=new CRectangle(w,h);
                CRectangle CR(w,h);
                p[i]=&amp;amp;CR;
                cout&amp;lt;&amp;lt;p[i]&amp;lt;&amp;lt;endl;
                break;}
            case 'C':{
                int r;
                cin&amp;gt;&amp;gt;r;
                //CCircle* pc=new CCircle(r);
                CCircle CC(r);
                p[i]=&amp;amp;CC;
                cout&amp;lt;&amp;lt;p[i]&amp;lt;&amp;lt;endl;
                break;}
            case 'T':{
                int a,b,c;
                cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b&amp;gt;&amp;gt;c;
                //CTriangle* pt=new CTriangle(a,b,c);
                CTriangle CT(a,b,c);
                p[i]=&amp;amp;CT;
        cout&amp;lt;&amp;lt;p[i]&amp;lt;&amp;lt;endl;
                break;}
            default:{break;}
        }
    p[0]-&amp;gt;PrintInfo();
    }
    qsort(p,n,sizeof(CShape*),MyCompare);
    for(i=0;i&amp;lt;n;i++)
    {
        p[i]-&amp;gt;PrintInfo();
    }
    return 0;
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;新建的派生类对象为栈对象，case结束后会自动调用析构函数析构；&lt;br/&gt;而new出来的为堆对象，需要delete析构。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;c内存分配方式&quot;&gt;&lt;span&gt;C++内存分配方式&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在C++中，内存分成5个区，分别是堆、栈、自由存储区、全局/静态区和常量存储区。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;栈&lt;br/&gt;存放函数参数以及局部变量，在出作用域时，将自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但分配的内存容量有限。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;堆&lt;br/&gt;new分配的内存块（包括数组、类实例等），需delete手动释放。如果未释放，在整个程序结束后，OS会帮你回收掉。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;自由存储区&lt;br/&gt;malloc分配的内存块，需free手动释放。它和堆有些相似。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;全局/静态区&lt;br/&gt;全局变量(global)和静态变量(static)存于此处。在以前的C语言中，全局变量又分为初始化的和未初始化的，C++中不区分。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;常量存储区&lt;br/&gt;常量(const)存于此处，此存储区不可修改。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;栈与堆的区别&quot;&gt;&lt;span&gt;栈与堆的区别&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;主要区别：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;管理方式不同&lt;br/&gt;栈是编译器自动管理的，堆需手动释放。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;空间大小不同&lt;br/&gt;在32位OS下，堆内存可达到4GB的的空间；而栈就小得可怜。VC6中栈默认大小是1M，当然可以对其进行修改。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;能否产生碎片不同&lt;br/&gt;对于栈来说，进栈/出栈都有着严格的顺序（先进后出），不会产生碎片；而堆频繁的new/delete，会造成内存空间的不连续，容易产生碎片。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;生长方向不同&lt;br/&gt;栈向下生长，以降序分配内存地址；堆向上生长，以升序分配内在地址。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;分配方式不同&lt;br/&gt;堆动态分配，无静态分配；栈分为静态分配和动态分配。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;分配效率不同&lt;br/&gt;栈是系统提供的数据结构，计算机会在底层对栈提供支持，进栈/出栈都有专门的指令，这就决定了栈的效率比较高；堆则不然,它由C/C++函数库提供，机制复杂，堆的效率要比栈低得多。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;可以看出，栈的效率要比堆高很多，所以，尽量用栈。不过，虽然栈有如此多的好处，但远没有堆使用灵活。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;作用域和生存期&quot;&gt;&lt;span&gt;作用域和生存期&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;作用域，顾名思义，就是作用的区域，分为函数原型作用域，局部作用域，类作用域和命名空间作用域。它们的作用范围按此顺序变大。&lt;br/&gt;生存期，顾名思义，就是生存的时间，分为静态生存期和动态生存期。静态生存期有两种情况：1.命名空间作用域中的变量具有静态生存期；2.在局部作用域中用static声明的变量也具有静态生存期。除了这两种情况之外的变量都具有动态生存期。&lt;br/&gt;在局部作用域中声明的变量如果用static修饰，则具有静态生存期，注意，虽然在整个程序中这个变量都存在，但它的作用域还是原来的作用域，而且这个变量叫做静态局部变量，也就是说生存期和作用域没有关系。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 07:20:00 +0000</pubDate>
<dc:creator>cherrychenlee</dc:creator>
<og:description>原文地址：https://www.jianshu.com/p/29e8f2930cf5 问题引入 若将case里程序实现改为新建派生类对象，然后将指针指向该对象方式，会发现p[i]里存放的地址相同，结</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cherrychenlee/p/10889375.html</dc:identifier>
</item>
<item>
<title>入门大数据行业！必备的十大基础 - 懂天明</title>
<link>http://www.cnblogs.com/xinlangboke/p/10889334.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xinlangboke/p/10889334.html</guid>
<description>&lt;div readability=&quot;102&quot;&gt;
&lt;p&gt;现在由于人工智能的大热，这方面的人才稀缺，薪资水平不用说，行业中的NO.1，所以各路人马纷纷集结互联网行业，有转行的，有转岗的。对于初学者在学习这方面肯定有许多疑问，是什么疑问呢，我在这里一 一给你解答。&lt;/p&gt;
&lt;p&gt;　　一、首先要搞清楚一个概念，什么是大数据。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1677606/201905/1677606-20190519145026374-1460037124.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 很多初学者，对大数据的概念都是模糊不清的，大数据是什么，能做什么，学的时候，该按照什么线路去学习，学完往哪方面发展，想深入了解，想学习的同学欢迎加入大数据学习qq群：410391744，有大量干货（零基础以及进阶的经典实战）分享给大家，并且有清华大学毕业的资深大数据讲师给大家免费授课，给大家分享目前国内最完整的大数据高端实战实用学习流程体系。&lt;/p&gt;
&lt;p&gt;　　大数据又称巨量资料，就是数据量大、来源广、种类繁多(日志、视频、音频)，大到PB级别，现阶段的框架就是为了解决PB级别的数据。&lt;/p&gt;
&lt;p&gt;　　专业的来讲：大数据(big data,mega data)，或称巨量资料，指的是需要新处理模式才能具有更强的决策力、洞察力和流程优化能力的海量、高增长率和多样化的信息资产。 在维克托·迈尔-舍恩伯格及肯尼斯·库克耶编写的《大数据时代》中大数据指不用随机分析法(抽样调查)这样的捷径，而采用所有数据进行分析处理。大数据的5V特点:Volume(大量)、Velocity(高速)、Variety(多样)、Value(价值密度)、Veracity(真实性)。&lt;/p&gt;
&lt;p&gt;　　二、学习大数据需要什么语言基础?&lt;/p&gt;
&lt;p&gt;　　首先，学习大数据是需要有java，python和R语言的基础。&lt;/p&gt;
&lt;p&gt;　　1)Java学习到什么样的程度才可以学习大数据呢?java需要学会javaSE即可。javaweb，javaee对于大数据用不到。学会了javase就可以看懂hadoop框架。&lt;/p&gt;
&lt;p&gt;　　2)python是最容易学习的，难易程度：python java Scala 。python不是比java更直观好理解么，因为会了Python 还是要学习java的，你学会了java，再来学习python会很简单的，一周的时间就可以学会python。&lt;/p&gt;
&lt;p&gt;　　3)R语言也可以学习，但是不推荐，因为java用的人最多，大数据的第一个框架Hadoop，底层全是Java写的。就算学会了R还是看不懂handoop。&lt;/p&gt;
&lt;p&gt;　　java在大数据中的作用是构成大数据的语言，大数据的第一个框架Hadoop，底层全是Java写的 ，所以推荐首选学习java。再给你们举例说明下它们的分工和作用，java注重业务，大数据注重数据，前端是脸(页面显示)，java是胳膊(业务)，大数据是直男大脑，人工智能，深度学习是有情商的大脑。&lt;/p&gt;
&lt;p&gt;　　例：&lt;/p&gt;
&lt;p&gt;　　你：我渴了&lt;/p&gt;
&lt;p&gt;　　直男大脑：呵呵，多喝水!&lt;/p&gt;
&lt;p&gt;　　情商大脑：我这里有橙汁，矿泉水，绿茶，你喜欢哪个?不过看你平时喜欢喝饮料，要不要来一杯橙汁。&lt;/p&gt;
&lt;p&gt;　　三、职业发展方向&lt;/p&gt;
&lt;p&gt;　　学会了大数据，不需要从java做起，可以直接做大数据开发工程师等积累了几年的经验， 就可以做算法工程师了。看看学会了大数据可以从事哪些岗位：&lt;/p&gt;
&lt;p&gt;　　大数据开发工程师&lt;/p&gt;
&lt;p&gt;　　数据分析师&lt;/p&gt;
&lt;p&gt;　　hadoop开发工程师&lt;/p&gt;
&lt;p&gt;　　spark开发工程师&lt;/p&gt;
&lt;p&gt;　　数据仓库开发工程师&lt;/p&gt;
&lt;p&gt;　　数据清洗工程师(ETL)&lt;/p&gt;
&lt;p&gt;　　大数据架构师&lt;/p&gt;
&lt;p&gt;　　算法工程&lt;/p&gt;
&lt;p&gt;　　四、优势&lt;/p&gt;
&lt;p&gt;　　大数据受国家大力支持大量的资源都投资在这方面，大数据中心在贵州落坐，人工智能和云计算都基于大数据，需要大批大数据人才。&lt;/p&gt;

&lt;div&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/11/5/166e30dcbd125f22?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/11/5/166e30dcbd125f22?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;565&quot; data-height=&quot;497&quot;/&gt;&lt;/div&gt;

&lt;p&gt;　　五、大数据人才薪资待遇&lt;/p&gt;
&lt;p&gt;　　一般的一线城市大数据相关岗位平均月薪在12-15K 北京平均17K，大数据算法工程师，年薪在30万—50万左右。&lt;/p&gt;
&lt;p&gt;　　六、学习大数据有学历/专业 有要求吗&lt;/p&gt;
&lt;p&gt;　　高中也找到工作，但是大专以上学历更好，虽然是本科学历，但大学四年中也没有学习到实际的操作技能，学习到的东西在工作中用不到，只是在理解某些东西容易些。&lt;/p&gt;
&lt;p&gt;　　七、大数据抓取数据手段有哪些?&lt;/p&gt;
&lt;p&gt;　　爬虫、Flume&lt;/p&gt;
&lt;p&gt;　　八、学大数据用会java的那些框架吗&lt;/p&gt;
&lt;p&gt;　　SSHSSMSpringBootSpringCloud 这些框架在大数据中不会用到，对于学习技术的人来说，当然懂得这些技术会更好。&lt;/p&gt;
&lt;p&gt;　　九、学习路线&lt;/p&gt;
&lt;p&gt;　　javaSE + linux + Hadoop生态圈 + Strom + Spark + 算法&lt;/p&gt;
&lt;p&gt;　　正常来讲学习大数据之前都要做到以下几点：&lt;/p&gt;
&lt;p&gt;　　1.学习基础的编程语言(java,python)&lt;/p&gt;
&lt;p&gt;　　2.掌握入门编程基础(linux操作，数据库操作、git操作)&lt;/p&gt;
&lt;p&gt;　　3.学习大数据里面的各种框架(hadoop、hive、hbase、spark)&lt;/p&gt;
&lt;p&gt;　　这是正常学习大数据必须要做到的三个步骤，如果有了java基础再去学习基本上已经成功了一半，起码不用为了基础语言的学习而恼火了。真正的大数据的学习不能仅仅停留在理论的层面上，比如现在经常用到的spark框架目前支持两种语言的开发java或者Scala，现在python语言也能支持了。大数据的方向的切入是全方位的，基础语言的学习只是很小的一个方面，编程落实到最后到编程思想，有了指导思想学习起来就能方便很多。&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Sun, 19 May 2019 07:09:00 +0000</pubDate>
<dc:creator>懂天明</dc:creator>
<og:description>现在由于人工智能的大热，这方面的人才稀缺，薪资水平不用说，行业中的NO.1，所以各路人马纷纷集结互联网行业，有转行的，有转岗的。对于初学者在学习这方面肯定有许多疑问，是什么疑问呢，我在这里一 一给你解</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xinlangboke/p/10889334.html</dc:identifier>
</item>
<item>
<title>.NET Core 3.0之深入源码理解Configuration(二) - 艾心❤</title>
<link>http://www.cnblogs.com/edison0621/p/10889325.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edison0621/p/10889325.html</guid>
<description>&lt;p&gt;上一篇文章讨论了Configuration的几个核心对象，本文继续讨论Configuration中关于文件型配置的相关内容。相比较而言，文件型配置的使用场景更加广泛，用户自定义配置扩展也可以基于文件型配置进行扩展。如果需要查看上一篇文章，可以点击&lt;strong&gt;&lt;a href=&quot;https://www.cnblogs.com/edison0621/p/10854215.html&quot;&gt;移步&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;.NET Core文件型配置中我们提供了三种主要的实现，分别是JSON、XML、INI，请查看下图&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/533598/201905/533598-20190519150805787-510308491.png&quot;&gt;&lt;img title=&quot;file2&quot; src=&quot;https://img2018.cnblogs.com/blog/533598/201905/533598-20190519150806501-1174292721.png&quot; alt=&quot;file2&quot; width=&quot;1057&quot; height=&quot;509&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由图可知，这三种配置的实现方式是一样的，当然了其他的配置比如命令行配置、环境变量配置等也是大同小异，理解了改配置类型的实现方式，后面我们再扩展基于Consul或者ZK的实现，就非常简单了。&lt;/p&gt;

&lt;p&gt;文件型配置的抽象扩展位于Microsoft.Extensions.Configuration.FileExtensions组件中，该扩展是一个基础实现。不过其命名空间是Microsoft.Extensions.Configuration，而Micros oft.Extensions.Configuration扩建本身又是整个.NET Core Configuration的基础实现。将File扩展独立于外部，体验了.NET Core的模块化设计。&lt;/p&gt;
&lt;h2&gt;FileConfigurationSource&lt;/h2&gt;
&lt;p&gt;Configuration.FileExtensions组件中，FileConfigurationSource是继承于IConfigurationSource的一个抽象类，包含了一个IConfigurationProvider类型的抽象方法，如下所示&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Builds the &amp;lt;see cref=&quot;IConfigurationProvider&quot;/&amp;gt; for this source.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;A &amp;lt;see cref=&quot;IConfigurationProvider&quot;/&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; IConfigurationProvider Build(IConfigurationBuilder builder);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该抽象类中还包括了几个比较重要的参数，分别用于配置性行为、文件内容访问以及异常处理。&lt;/p&gt;
&lt;p&gt;string Path：文件的路径&lt;/p&gt;
&lt;p&gt;bool Optional：标识加载的文件是否是可选的&lt;/p&gt;
&lt;p&gt;bool ReloadOnChange：如果文件发生修改，是否重新加载配置源&lt;/p&gt;
&lt;p&gt;int ReloadDelay：加载延迟，单位是毫秒，默认是250毫秒&lt;/p&gt;
&lt;p&gt;IFileProvider FileProvider：用于获取文件内容&lt;/p&gt;
&lt;p&gt;Action&amp;lt;FileLoadExceptionContext&amp;gt; OnLoadException：文件加载异常处理&lt;/p&gt;
&lt;p&gt;该类对FileProvider有特殊处理，就是如果没有提供FileProvider实例，则会基于绝对路径，在最近的现有目录中创建物理文件提供程序。源码如下，&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// If no file provider has been set, for absolute Path, this will creates a physical file provider &lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// for the nearest existing directory.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; ResolveFileProvider()
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (FileProvider == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;        !&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(Path) &amp;amp;&amp;amp;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;        System.IO.Path.IsPathRooted(Path))
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    
&lt;/pre&gt;
&lt;span&gt;&lt;strong&gt;var directory = System.IO.Path.GetDirectoryName(Path);&lt;/strong&gt;&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;        var pathToFile = System.IO.Path.GetFileName(Path);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(directory) &amp;amp;&amp;amp; !Directory.Exists(directory))
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;            pathToFile = System.IO.Path.Combine(System.IO.Path.GetFileName(directory), pathToFile);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;            directory = System.IO.Path.GetDirectoryName(directory);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (Directory.Exists(directory))
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;            FileProvider = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; PhysicalFileProvider(directory);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;            Path = pathToFile;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;FileConfigurationProvider&lt;/h2&gt;
&lt;p&gt;该类是继承于ConfigurationProvider的抽象类，是从文件系统加载配置的基类，同时还继承了IDisposable，其抽象方法是Load方法，用于从当前的Provider中以Stream方式加载数据&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Loads this provider's data from a stream.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;stream&quot;&amp;gt;The stream to read.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Load(Stream stream);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该类还重写了ConfigurationProvider的Load方法，并对文件加载中的异常做了处理，Data属性在前文有提到过，此处不再做其他说明。方法源码如下所示：&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Load(&lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; reload)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    var file = Source.FileProvider?.GetFileInfo(Source.Path);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (file == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt; || !file.Exists)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (Source.Optional || reload) &lt;span class=&quot;rem&quot;&gt;// Always optional on reload&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;            &lt;strong&gt;&lt;span&gt;Data&lt;/span&gt;&lt;/strong&gt; = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;&amp;gt;(StringComparer.OrdinalIgnoreCase);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;else&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;            var error = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; StringBuilder($&lt;span class=&quot;str&quot;&gt;&quot;The configuration file '{Source.Path}' was not found and is not optional.&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(file?.PhysicalPath))
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;            {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;                error.Append($&lt;span class=&quot;str&quot;&gt;&quot; The physical path is '{file.PhysicalPath}'.&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;            }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;            HandleException(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; FileNotFoundException(error.ToString()));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;else&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;        &lt;span class=&quot;rem&quot;&gt;// Always create new Data on reload to drop old keys&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (reload)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;            Data = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;&amp;gt;(StringComparer.OrdinalIgnoreCase);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; (var stream = file.CreateReadStream())
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;try&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;            {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;                Load(stream);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;            }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (Exception e)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt;            {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;                HandleException(e);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  36:  &lt;/span&gt;            }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  37:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  38:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  39:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;&lt;strong&gt;&lt;span&gt;// REVIEW: Should we raise this in the base as well / instead?，通过注释，我们可以知道OnReload()方法可能会在新版中发生变化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  40:  &lt;/span&gt;    OnReload();
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  41:  &lt;/span&gt;}
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  42:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  43:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  44:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Loads the contents of the file at &amp;lt;see cref=&quot;Path&quot;/&amp;gt;.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  45:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  46:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;exception cref=&quot;FileNotFoundException&quot;&amp;gt;If Optional is &amp;lt;c&amp;gt;false&amp;lt;/c&amp;gt; on the source and a&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  47:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// file does not exist at specified Path.&amp;lt;/exception&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  48:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Load()
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  49:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  50:  &lt;/span&gt;    Load(reload: &lt;span class=&quot;kwrd&quot;&gt;false&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  51:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外它还有一个特殊方法，就是参数类型为FileConfigurationSource的构造函数，其主要功能是监控文件，并在FileConfigurationSource.ReloadDelay设置的时间里重新加载文件并返回一个IDisposable类型的值，以下是该构造函数的源码：&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Initializes a new instance with the specified source.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;source&quot;&amp;gt;The source settings.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; FileConfigurationProvider(FileConfigurationSource source)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (source == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(source));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    Source = source;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (Source.ReloadOnChange &amp;amp;&amp;amp; Source.FileProvider != &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;        _changeTokenRegistration = ChangeToken.OnChange(
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;            () =&amp;gt; Source.FileProvider.Watch(Source.Path),
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;            () =&amp;gt; {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;                Thread.Sleep(Source.ReloadDelay);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;                Load(reload: &lt;span class=&quot;kwrd&quot;&gt;true&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;            });
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;FileConfigurationExtensions&lt;/h2&gt;
&lt;p&gt;该类是一个静态类，其提供了的多个扩展方法，主要基于&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IConfigurationBuilder&lt;/li&gt;
&lt;li&gt;IFileProvider&lt;/li&gt;
&lt;li&gt;Action&amp;lt;FileLoadExceptionContext&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;包括主要用于设置或获取IFileProvider对象，前文有介绍过，是存储于字典之中，需要注意的是，在Get的时候如果字典中并不存在IFileProvider对象，则会实例化一个PhysicalFileProvider对象出来，该类位于Microsoft.Extensions.FileProviders.PhysicalFileProvider&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Sets the default &amp;lt;see cref=&quot;IFileProvider&quot;/&amp;gt; to be used for file-based providers.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt; to add to.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;fileProvider&quot;&amp;gt;The default file provider instance.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; IConfigurationBuilder SetFileProvider(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; IConfigurationBuilder builder, IFileProvider fileProvider)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(builder));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    builder.Properties[FileProviderKey] = fileProvider ?? &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(fileProvider));
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; builder;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;}
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Gets the default &amp;lt;see cref=&quot;IFileProvider&quot;/&amp;gt; to be used for file-based providers.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; IFileProvider GetFileProvider(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; IConfigurationBuilder builder)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(builder));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder.Properties.TryGetValue(FileProviderKey, &lt;span class=&quot;kwrd&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; provider))
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; provider &lt;span class=&quot;kwrd&quot;&gt;as&lt;/span&gt; IFileProvider;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;    &lt;strong&gt;&lt;span&gt;&lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; PhysicalFileProvider(AppContext.BaseDirectory ?? &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.Empty);&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  36:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为指定路径的物理文件设置文件型Provider，该方法同样基于PhysicalFileProvider，并返回IConfigurationBuilder对象&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Sets the FileProvider for file-based providers to a PhysicalFileProvider with the base path.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt; to add to.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;basePath&quot;&amp;gt;The absolute path of file-based providers.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; IConfigurationBuilder SetBasePath(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; IConfigurationBuilder builder, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; basePath)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(builder));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (basePath == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(basePath));
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    &lt;strong&gt;&lt;span&gt;&lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; builder.SetFileProvider(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; PhysicalFileProvider(basePath));&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以及异常处理，可以看到其异常处理也会存放于字典中，如果字典中找不到，就会返回空，这个地方如果直接使用，需要注意空指针问题。&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Sets a default action to be invoked for file-based providers when an error occurs.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt; to add to.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;handler&quot;&amp;gt;The Action to be invoked on a file load exception.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; IConfigurationBuilder SetFileLoadExceptionHandler(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; IConfigurationBuilder builder, Action&amp;lt;FileLoadExceptionContext&amp;gt; handler)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(builder));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    builder.Properties[FileLoadExceptionHandlerKey] = handler;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; builder;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;}
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Gets the default &amp;lt;see cref=&quot;IFileProvider&quot;/&amp;gt; to be used for file-based providers.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; Action&amp;lt;FileLoadExceptionContext&amp;gt; GetFileLoadExceptionHandler(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; IConfigurationBuilder builder)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(builder));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder.Properties.TryGetValue(FileLoadExceptionHandlerKey, &lt;span class=&quot;kwrd&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; handler))
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; handler &lt;span class=&quot;kwrd&quot;&gt;as&lt;/span&gt; Action&amp;lt;FileLoadExceptionContext&amp;gt;;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt;    
&lt;/pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;;&lt;/strong&gt;&lt;/span&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该类还有两个静态私有变量，指定了文件Provider的Key以及文件加载异常处理Key。&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; FileProviderKey = &lt;span class=&quot;str&quot;&gt;&quot;FileProvider&quot;&lt;/span&gt;;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; FileLoadExceptionHandlerKey = &lt;span class=&quot;str&quot;&gt;&quot;FileLoadExceptionHandler&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;文件型配置还依赖于.NET Core的其他组件Microsoft.Extensions.FileProviders和Microsoft.Extensions.Primitives。&lt;/p&gt;
&lt;p&gt;FileProviders组件提供了文件处理的一般方法，Primitives组件提供了监控机制，同时还包括两个比较重要的结构体StringValues和StringSegment，本文暂时不做讨论，有兴趣的朋友，可以自行查看该组件源码。&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 07:08:00 +0000</pubDate>
<dc:creator>艾心❤</dc:creator>
<og:description>文件型配置基本内容 上一篇文章讨论了Configuration的几个核心对象，本文继续讨论Configuration中关于文件型配置的相关内容。相比较而言，文件型配置的使用场景更加广泛，用户自定义配置</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edison0621/p/10889325.html</dc:identifier>
</item>
<item>
<title>oracle学习笔记（十一）  高级查询 - Stars-one</title>
<link>http://www.cnblogs.com/kexing/p/10889316.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kexing/p/10889316.html</guid>
<description>&lt;h2 id=&quot;高级查询&quot;&gt;高级查询&lt;/h2&gt;
&lt;h3 id=&quot;分组查询&quot;&gt;分组查询&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;select * from student
[where ]
[having ] --二次限定
[order by] --asc升序 desc降序 默认升序&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看EMPLOYEE表中，员工在同一部门做相同工作且总工资大于5000，平均工资小于1500的薪水情况和人数？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select  deptno,job,count(*) from employee
group by  deptno,job
having avg(sal)&amp;lt;1500 and sum(sal) &amp;gt;5000
order by deptno;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;分组查询注意事项：&lt;/strong&gt;&lt;br/&gt;如果在查询结果中的某些字段上没有使用分组函数，那么这些字段就必须出现在group by子句中。这是一个分组查询的强制性规则。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--查询每个部门的人数以及部门的总工资
--两个列都是使用了分组函数，所以group by 语句中可以省略不写
--但deptno没有使用分组函数，所以要group by语句中要出现deptno
select deptno,count(empno),sum(sal) from employee
group by deptno
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;非等值连接&quot;&gt;非等值连接&lt;/h3&gt;
&lt;p&gt;简单地来说，连接条件就是某些值满足在某个范围之内&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--salgrade表中三个属性，losal-hisal是工资范围，grade则是该范围对应的等级
select ename,salgrade from employee,salgrade
where sal between losal and hisal;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;内连接inner-join等值连接&quot;&gt;内连接inner join(等值连接)&lt;/h3&gt;
&lt;p&gt;多用于表之间有关联关系，如主外键关系的表&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from employee e
    join department d  --这里相当于inner join,inner可以省略
        on e.deptno = d.deptno;
--等值连接
select * frjom employee e,department d
where e.deptno = d.deptno;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;左外连接left-outer-join&quot;&gt;左外连接left outer join&lt;/h3&gt;
&lt;p&gt;多用于表之间有关联关系，如主外键关系的表，不过以左边数据为标准，未匹配的以空行出现&lt;br/&gt;一般outer可以省略不写&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from employee e
    left join depaterment d on e.deptno = d.deptno;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;右外连接&quot;&gt;右外连接&lt;/h3&gt;
&lt;p&gt;与左外连接相反，以右边数据为标准，未匹配的以空行出现，好像不常用&lt;/p&gt;
&lt;h3 id=&quot;子查询&quot;&gt;子查询&lt;/h3&gt;
&lt;p&gt;单行子查询可以出现在以下位置：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;select语句&lt;/li&gt;
&lt;li&gt;from语句&lt;/li&gt;
&lt;li&gt;join子句中&lt;/li&gt;
&lt;li&gt;HAVING子句中&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;多行子查询：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;ANY(值列表): 与子查询结果列表中的任何一个值比较。&lt;/li&gt;
&lt;li&gt;ALL(值列表)：与子查询结果列表中的所有值比较。&lt;/li&gt;
&lt;li&gt;IN(值列表): 等于列表中的任何一个值。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;select * 
from employee
where sal&amp;lt;any(select distinct sal from employee where job='SALESMAN')&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 19 May 2019 07:07:00 +0000</pubDate>
<dc:creator>Stars-one</dc:creator>
<og:description>高级查询 分组查询 查看EMPLOYEE表中，员工在同一部门做相同工作且总工资大于5000，平均工资小于1500的薪水情况和人数？ 分组查询注意事项： 如果在查询结果中的某些字段上没有使用分组函数，那</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kexing/p/10889316.html</dc:identifier>
</item>
<item>
<title>『嗨威说』数据结构 - 第六章学习内容小结 - 嗨威er</title>
<link>http://www.cnblogs.com/WinniyGD/p/10889318.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WinniyGD/p/10889318.html</guid>
<description>
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt; &lt;strong&gt;本文主要内容&lt;/strong&gt;：（与树类似）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　一、图的概念&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　二、图的重中之重——两种重要存储结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　三、树的升级拓展应用：最小生成树&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　四、本节应用习题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　五、个人反思与未来计划&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;　　&lt;strong&gt;（1）图的定义：&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;　　　　图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V，E），其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。&lt;/p&gt;
&lt;p&gt;　　　　注意：线性表中可以没有元素，称为空表。树中可以没有结点，叫做空树。&lt;strong&gt;&lt;span&gt;但是在图中不允许没有顶点，可以没有边&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;　　（2）图的基本术语：&lt;/h2&gt;
&lt;p&gt;　　· 无向边：若顶点Vi和Vj之间的边没有方向，称这条边为无向边，用 &lt;code&gt;（Vi，Vj）&lt;/code&gt;来表示。&lt;/p&gt;
&lt;p&gt;　　· 无向图：图中任意两个顶点的边都是无向边。&lt;/p&gt;
&lt;p&gt;　　· 有向边：若从顶点Vi到Vj的边有方向，称这条边为有向边，也称为弧，用 &lt;code&gt;&amp;lt;Vi, Vj&amp;gt; &lt;/code&gt;来表示，其中 Vi 称为弧尾，Vj 称为弧头。&lt;/p&gt;
&lt;p&gt;　　· 有向图：图中任意两个顶点的边都是有向边。&lt;/p&gt;
&lt;p&gt;　　· 简单图：不存在自环（顶点到其自身的边）和重边（完全相同的边）的图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519135604311-1969622072.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　· 稀疏图；有很少条边或弧的图称为稀疏图，反之称为稠密图。&lt;/p&gt;
&lt;p&gt;　　· 权：表示从图中一个顶点到另一个顶点的距离或耗费。&lt;/p&gt;
&lt;p&gt; 　　· 网：带有权重的图。&lt;/p&gt;
&lt;p&gt;　　·  度：与特定顶点相连接的边数。&lt;/p&gt;
&lt;p&gt;　　· 出度、入度：有向图中的概念，出度表示以此顶点为起点的边的数目，入度表示以此顶点为终点的边的数目。&lt;/p&gt;
&lt;p&gt;　　· 连通图：任意两个顶点都相互连通的图。&lt;/p&gt;
&lt;p&gt;　　· 极大连通子图：包含竟可能多的顶点（必须是连通的），即找不到另外一个顶点，使得此顶点能够连接到此极大连通子图的任意一个顶点。&lt;/p&gt;
&lt;p&gt;　　· 连通分量：极大连通子图的数量。&lt;/p&gt;
&lt;p&gt;　　· 强连通图：此为有向图的概念，表示任意两个顶点a，b，使得a能够连接到b，b也能连接到a 的图。&lt;/p&gt;
&lt;p&gt;　　· 连通图的生成树：一个极小连通子图，它含有原图中全部定点，但只有足以构成一棵树的 n-1 条变，这样的连通子图称为连通图的生成树。&lt;/p&gt;
&lt;p&gt;　　· 最小生成树：此生成树的边的权重之和是所有生成树中最小的。&lt;/p&gt;
&lt;h2&gt;　　（3）图的两种遍历方式：&lt;/h2&gt;
&lt;p&gt;　　　　　　· 深度优先遍历：（&lt;span&gt;&lt;strong&gt;DFS常利用递归思想&lt;/strong&gt;&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;　　　　　　　　首先从图中某个顶点v0出发，访问此顶点，然后依次从v相邻的顶点出发深度优先遍历，直至图中所有与v路径相通的顶点都被访问了；若此时尚有顶点未被访问，则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519140512902-168886256.png&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;263&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　　　· 广度优先遍历：（&lt;span&gt;&lt;strong&gt;BFS常利用队列＋队列不为空循环思想&lt;/strong&gt;&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;　　　　　　　　首先，从图的某个顶点v0出发，访问了v0之后，依次访问与v0相邻的未被访问的顶点，然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519140616049-1358529400.png&quot; alt=&quot;&quot; width=&quot;515&quot; height=&quot;258&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;　　（1）邻接矩阵：&lt;/h2&gt;
&lt;p&gt;　　　　图的邻接矩阵的存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称邻接矩阵）存储图中的边或弧的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519141029023-242749365.png&quot; alt=&quot;&quot; width=&quot;485&quot; height=&quot;208&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　优缺点：&lt;/p&gt;
&lt;p&gt;　　　　　　· 优点：结构简单,操作方便&lt;/p&gt;
&lt;p&gt;　　　　　　· 缺点：对于稀疏图，这种实现方式将浪费大量的空间。&lt;/p&gt;
&lt;h2&gt;　　（2）邻接表：&lt;/h2&gt;
&lt;p&gt;　　　　邻接表是一种将数组与链表相结合的存储方法。其具体实现为：将图中顶点用一个一维数组存储，每个顶点Vi的所有邻接点用一个单链表来存储。这种方式和树结构中孩子表示法一样。&lt;/p&gt;
&lt;p&gt;　　　　对于有向图其邻接表结构如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/820353/201610/820353-20161018190216248-1898100067.png&quot; alt=&quot;&quot; width=&quot;390&quot; height=&quot;271&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　优缺点：&lt;/p&gt;
&lt;p&gt;　　　　　　· 优点：本算法的时间复杂度为 O(N + E)，其中N、E分别为顶点数和边数，邻接表实现比较适合表示稀疏图。&lt;/p&gt;
&lt;p&gt;　　　　　　· 缺点：操作繁琐&lt;/p&gt;
&lt;p&gt;　　　　注：还有一种十字链表存储结构，暂未教学，等学习熟练之后再单独拿来写博&lt;/p&gt;


&lt;h2&gt;　　（1）最小生成树的概念：&lt;/h2&gt;
&lt;p&gt;　　　　　　图的生成树是它的一棵含有所有顶点的无环连通子图。一棵加权图的最小生成树（MST）是它的一棵权值（所有边的权值之和）最小的生成树。&lt;/p&gt;
&lt;h2&gt;　　（2）最小生成树的两种实现算法：&lt;/h2&gt;
&lt;p&gt;　　　　　　· 普里姆算法（Prim）&lt;/p&gt;
&lt;p&gt;　　　　　　　　实现过程：&lt;/p&gt;
&lt;p&gt;　　　　　　　　从顶点0开始，首先将顶点0加入到树中（标记），顶点0和其它点的横切边（这里即为顶点0的邻接边）加入优先队列，将权值最小的横切边出队，加入生成树中。此时相当于也向树中添加了一个顶点2，接着将集合（顶点1，2组成）和另一个集合（除1,2的顶点组成）间的横切边加入到优先队列中，如此这般，直到队列为空。&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519142248029-1970122804.png&quot; alt=&quot;&quot; width=&quot;744&quot; height=&quot;272&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　· 克鲁斯卡尔算法（Kruskal）&lt;/p&gt;
&lt;p&gt;　　　　　　　　实现过程：&lt;/p&gt;
&lt;p&gt;　　　　　　　　按照边的权重顺序来生成最小生成树，首先将图中所有边加入优先队列，将权重最小的边出队加入最小生成树，保证加入的边不与已经加入的边形成环，直到树中有V-1到边为止。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519142528436-26721487.png&quot; alt=&quot;&quot; width=&quot;753&quot; height=&quot;244&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　注：具体实现代码暂未学习，仅了解实现过程，后续增加。&lt;/p&gt;


&lt;h2&gt;　　　　拯救007：（DFS）&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ba7340a2-d7fd-48ee-8121-efaf9546637d')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_ba7340a2-d7fd-48ee-8121-efaf9546637d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ba7340a2-d7fd-48ee-8121-efaf9546637d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ba7340a2-d7fd-48ee-8121-efaf9546637d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ba7340a2-d7fd-48ee-8121-efaf9546637d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;在老电影“007之生死关头”（Live and Let Die）中有一个情节，007被毒贩抓到一个鳄鱼池中心的小岛上，他用了一种极为大胆的方法逃脱 —— 直接踩着池子里一系列鳄鱼的大脑袋跳上岸去！（据说当年替身演员被最后一条鳄鱼咬住了脚，幸好穿的是特别加厚的靴子才逃过一劫。）

设鳄鱼池是长宽为100米的方形，中心坐标为 (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)，且东北角坐标为 (&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;)。池心岛是以 (&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) 为圆心、直径15米的圆。给定池中分布的鳄鱼的坐标、以及007一次能跳跃的最大距离，你需要告诉他是否有可能逃出生天。

输入格式：
首先第一行给出两个正整数：鳄鱼数量 N（≤&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;）和007一次能跳跃的最大距离 D。随后 N 行，每行给出一条鳄鱼的 (x,y) 坐标。注意：不会有两条鳄鱼待在同一个点上。

输出格式：
如果007有可能逃脱，就在一行中输出&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;，否则输出&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;。

输入样例 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;：
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; -&lt;span&gt;15&lt;/span&gt;
-&lt;span&gt;25&lt;/span&gt; &lt;span&gt;28&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;49&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;
-&lt;span&gt;35&lt;/span&gt; -&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;28&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; -&lt;span&gt;29&lt;/span&gt;
-&lt;span&gt;8&lt;/span&gt; -&lt;span&gt;28&lt;/span&gt;
-&lt;span&gt;20&lt;/span&gt; -&lt;span&gt;35&lt;/span&gt;
-&lt;span&gt;25&lt;/span&gt; -&lt;span&gt;20&lt;/span&gt;
-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;29&lt;/span&gt;
-&lt;span&gt;30&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;
-&lt;span&gt;35&lt;/span&gt; &lt;span&gt;40&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;&lt;span&gt;
输出样例 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;：
Yes
输入样例 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;：
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;
-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;
-&lt;span&gt;12&lt;/span&gt; -&lt;span&gt;12&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; -&lt;span&gt;12&lt;/span&gt;&lt;span&gt;
输出样例 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;：
No&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【题目】拯救007&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　题目有一点点小坑，刚开始还过了五个测试点，只差一个测试点，但还好一两小时肝一下debug出来了，下面简单说一下题意：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;有一个人在一个圆内，半径为7.5（这是个坑，不是15噢）单位，然后可以从圆内往外跳，但只有固定的几个点可以跳，而且能不能跳过去看这个人的最大跳跃距离。只要能跳出100*100的大矩形则说明可以逃生输出Yes，否则No&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　　　题目大意就是这样啦，简单拟定一下思路：&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;1、对于每一个点，用一个struct去实现其存储结构，存储其x、y坐标、能够跳到的点的编号、能够跳到点的数目、能否成为起跳点、能否成为终止点。&lt;/p&gt;
&lt;p&gt;2、输入完x、y坐标点之后，扫一遍全点，链接能跳的点，并且判断能否成为起跳点，能否成为终止点。&lt;/p&gt;
&lt;p&gt;3、特判一下当最大可跳距离大于42.5时，可以不用跳到鳄鱼，可以直接跳出矩形。&lt;/p&gt;
&lt;p&gt;4、实现DFS深搜递归，打上vis数组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　　　现在我们来动手试一下吧~ &lt;/p&gt;

&lt;p&gt;　　　　首先，头文件，因为是ACMer选手，习惯了C语言的写法，各位小伙伴不必在意噢，只需要把scanf输入的东西换成cin，printf输出的东西换成cout就搞定了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#include&amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;math.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;#define&lt;/span&gt; MAX 999
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　第二步，开始建立图结点的结构体：按上面我思路说的，存储其x、y坐标、能够跳到的点的编号、能够跳到点的数目、能否成为起跳点、能否成为终止点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ArcNode{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; num;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; Next[MAX];
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}ArcNode;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　第三步，基本变量申明以及函数原型申明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; N,maxJump,ans,vis[MAX];
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; DFS(ArcNode *p,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i);
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; buildGraph(ArcNode *&amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; buildArc(ArcNode *&amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; searchInOut(ArcNode *&amp;amp;p);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　第四步，对Main主函数进行模块化函数构建：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    ArcNode &lt;/span&gt;*&lt;span&gt;G;　　　　　　　 //建立结点
    buildGraph(G);　　　　　　//导入结点内容
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(maxJump &amp;gt;= &lt;span&gt;42.5&lt;/span&gt;&lt;span&gt;)　　 //特判
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yes\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    buildArc(G);　　　　　　　　//扫一遍所有点，构造边，使能互相跳的点结合起来
    searchInOut(G);　　　　　　//扫一遍所有点，判断是否能够成为起跳点和终止点
    ans &lt;/span&gt;= -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;　　　　　　　　　　//答案初始化
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(G[i].&lt;span&gt;in&lt;/span&gt;&lt;span&gt;)　　　　　　//如果这个点是起跳点
        {
            memset(vis,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(vis));　　//重置vis数组
            DFS(G,i);　　　　　　　　　　　　//开始深搜
        }    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ans == -&lt;span&gt;1&lt;/span&gt;) printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);　　　　//打印答案
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yes\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　第五步，导入结点，比较简单：一个输入导入就可以了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; buildGraph(ArcNode *&amp;amp;&lt;span&gt;p)
{
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;N,&amp;amp;&lt;span&gt;maxJump);
    p &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ArcNode[N+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;p[i].x,&amp;amp;&lt;span&gt;p[i].y);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　第六步，链接各点，实现保存可以互跳的点，这里需要两层for循环的遍历，可能效率优点不高，但简单粗暴&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; buildArc(ArcNode *&amp;amp;&lt;span&gt;p)
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; u = &lt;span&gt;1&lt;/span&gt;;u&amp;lt;=N;u++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(u == i) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((maxJump * maxJump) &amp;gt;= (p[i].x-p[u].x)*(p[i].x-p[u].x)+(p[i].y-p[u].y)*(p[i].y-&lt;span&gt;p[u].y)) //这里除了用sqrt还可以直接用平方比较，误差会小一点
            {
                p[i].num&lt;/span&gt;++&lt;span&gt;;
                p[i].Next[p[i].num] &lt;/span&gt;=&lt;span&gt; u;　//将可互跳的边导入
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　第七步，搜索起始点和终止点，也是比较简单的，一个距离公式就好了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; searchInOut(ArcNode *&amp;amp;&lt;span&gt;p)
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((maxJump + &lt;span&gt;7.5&lt;/span&gt;)*(maxJump + &lt;span&gt;7.5&lt;/span&gt;) &amp;gt;= p[i].x*p[i].x+p[i].y*&lt;span&gt;p[i].y)
            p[i].&lt;/span&gt;&lt;span&gt;in&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(maxJump &amp;gt;= &lt;span&gt;50&lt;/span&gt; - abs(p[i].x) || maxJump &amp;gt;= &lt;span&gt;50&lt;/span&gt; -&lt;span&gt; abs(p[i].y))
            p[i].&lt;/span&gt;&lt;span&gt;out&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　第八步，嵌套一下DFS递归就好了，注意递归的终止条件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; DFS(ArcNode *p,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i)
{
    vis[i] &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(p[i].&lt;span&gt;out&lt;/span&gt; == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) //如果搜到了这个点是终止点，说明这个人可以跳出去，那么就给答案变量做个标记。
        ans &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(p[i].num == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)　　//递归终止条件
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; u = &lt;span&gt;1&lt;/span&gt;; u&amp;lt;=p[i].num; u++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;vis[p[i].Next[u]])//防止递归循环需要一个标记数组
            DFS(p,p[i].Next[u]);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　这样整个程序就完成啦~ 完整代码贴上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('42acfd0c-bf8c-43f6-b6ea-7a79cc2a68d3')&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_42acfd0c-bf8c-43f6-b6ea-7a79cc2a68d3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_42acfd0c-bf8c-43f6-b6ea-7a79cc2a68d3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('42acfd0c-bf8c-43f6-b6ea-7a79cc2a68d3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_42acfd0c-bf8c-43f6-b6ea-7a79cc2a68d3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;math.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; MAX 999
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ArcNode{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Next[MAX];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}ArcNode;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; N,maxJump,ans,vis[MAX];
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DFS(ArcNode *p,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; buildGraph(ArcNode *&amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; buildArc(ArcNode *&amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; searchInOut(ArcNode *&amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     ArcNode *&lt;span&gt;G;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    buildGraph(G);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(maxJump &amp;gt;= &lt;span&gt;42.5&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yes\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    buildArc(G);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    searchInOut(G);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     ans = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(G[i].&lt;span&gt;in&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             memset(vis,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(vis));
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            DFS(G,i);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }    
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ans == -&lt;span&gt;1&lt;/span&gt;) printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yes\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; buildGraph(ArcNode *&amp;amp;&lt;span&gt;p)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;N,&amp;amp;&lt;span&gt;maxJump);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     p = &lt;span&gt;new&lt;/span&gt; ArcNode[N+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;p[i].x,&amp;amp;&lt;span&gt;p[i].y);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; buildArc(ArcNode *&amp;amp;&lt;span&gt;p)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; u = &lt;span&gt;1&lt;/span&gt;;u&amp;lt;=N;u++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(u == i) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;((maxJump * maxJump) &amp;gt;= (p[i].x-p[u].x)*(p[i].x-p[u].x)+(p[i].y-p[u].y)*(p[i].y-&lt;span&gt;p[u].y))
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 p[i].num++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 p[i].Next[p[i].num] =&lt;span&gt; u;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; searchInOut(ArcNode *&amp;amp;&lt;span&gt;p)
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;((maxJump + &lt;span&gt;7.5&lt;/span&gt;)*(maxJump + &lt;span&gt;7.5&lt;/span&gt;) &amp;gt;= p[i].x*p[i].x+p[i].y*&lt;span&gt;p[i].y)
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;             p[i].&lt;span&gt;in&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(maxJump &amp;gt;= &lt;span&gt;50&lt;/span&gt; - abs(p[i].x) || maxJump &amp;gt;= &lt;span&gt;50&lt;/span&gt; -&lt;span&gt; abs(p[i].y))
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             p[i].&lt;span&gt;out&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DFS(ArcNode *p,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i)
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     vis[i] = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(p[i].&lt;span&gt;out&lt;/span&gt; == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         ans = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(p[i].num == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; u = &lt;span&gt;1&lt;/span&gt;; u&amp;lt;=p[i].num; u++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;vis[p[i].Next[u]])
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;            DFS(p,p[i].Next[u]);
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【完整代码展示】拯救007&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　　　下面将具体的导入结点和DFS搜索过程打印出来，大家可以看看他的步骤流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519145247875-71890982.png&quot; alt=&quot;&quot; width=&quot;366&quot; height=&quot;859&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　有一天老师跟我说了一句话，让我一直留着比较深的印象：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1627981/201905/1627981-20190519145559192-634456373.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　是啊，从开学到现在一直有不少人告诉我，大家能够专心干一件事，你真的就是很棒的人了。&lt;/p&gt;
&lt;p&gt;　　而我，在上学期加了五个社团，Quanta、Eddy、数挖、ACM、招协，拖着班长，拖着五个兼职，我也不知道我怎么活下来的，大概是想把自己忙成狗 吧，把一些伤心的事情忘得一干二净。&lt;/p&gt;
&lt;p&gt;　　下学期收了收心，退了几个社团，仅留ACM和数挖，班长的事情随着英剧的结束事情也少了不少，兼职也拖剩了一个，慢慢收心，大概上学期各个方面的接触，也让我逐步摸清了未来的发展方向。&lt;/p&gt;
&lt;p&gt;　　就这样吧，努力计划做好每天该干的事情，不负身边人对我的期望，好好对待每一个人，去努力的带给他们快乐，带给自己快乐，带来更多的动力。&lt;/p&gt;
&lt;p&gt;　　大二，大概有了方向了，嗯，努力干下去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　（1）图比较抽象的数据结构上基础有些不牢，进一步学习普里姆算法、克鲁斯卡尔算法、迪杰斯特拉算法等，特别是碰到链式存储的指针使用的时候，需要找时间给自己多加强这方面的学习。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 　  （2）ACM集训队每天几道题，每周写一篇博客。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　（3）完成论文标解并准备好论文演讲『Improving patch-based scene text script identification with ensembles of conjoined networks』&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　（4）完成论文标解并准备好论文演讲『汉老双语命名实体识别及对齐方法研究_韩锐』&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 07:07:00 +0000</pubDate>
<dc:creator>嗨威er</dc:creator>
<og:description>本文主要内容：（与树类似） 一、图的概念 二、图的重中之重——两种重要存储结构 三、树的升级拓展应用：最小生成树 四、本节应用习题 五、个人反思与未来计划 一、图的基本概念： （1）图的定义： 图（G</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WinniyGD/p/10889318.html</dc:identifier>
</item>
<item>
<title>python+ selenium 实现简历自动刷新 - Sunzz</title>
<link>http://www.cnblogs.com/Sunzz/p/10889259.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Sunzz/p/10889259.html</guid>
<description>&lt;p&gt;本文用到的文件的下载地址&lt;br/&gt;百度网盘链接: &lt;a href=&quot;https://pan.baidu.com/s/1wIda-wUz4X_Ck72xgZ6Ddg&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1wIda-wUz4X_Ck72xgZ6Ddg&lt;/a&gt;&lt;br/&gt;提取码: etaa&lt;/p&gt;
&lt;h2 id=&quot;安装python-和-selenium&quot;&gt;1 安装Python 和 selenium&lt;/h2&gt;
&lt;p&gt;（1）下载Python&lt;br/&gt;官网地址： &lt;a href=&quot;https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe&quot; class=&quot;uri&quot;&gt;https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe&lt;/a&gt;&lt;br/&gt;百度网盘链接如上所示&lt;/p&gt;
&lt;p&gt;（2）安装Python&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1157397/201905/1157397-20190519144518225-1307966812.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1157397/201905/1157397-20190519144557857-710408608.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1157397/201905/1157397-20190519144539786-2049731773.png&quot;/&gt;&lt;br/&gt;等待安装完毕&lt;/p&gt;
&lt;p&gt;（3） 安装 selenium&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pip install selenium –i  https://www.douban.com/simple&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;导入浏览器驱动&quot;&gt;2 导入浏览器驱动&lt;/h2&gt;
&lt;p&gt;此处用的是 Chrome 74，其他浏览器请自行下载对应的驱动&lt;br/&gt;（1）下载chromedriver&lt;br/&gt;百度网盘链接见开头，对应的是谷歌浏览器74版本的驱动&lt;br/&gt;官网下载地址为：&lt;a href=&quot;http://chromedriver.chromium.org/downloads&quot; class=&quot;uri&quot;&gt;http://chromedriver.chromium.org/downloads&lt;/a&gt;&lt;br/&gt;找到谷歌浏览器对应的版本进行下载即可&lt;/p&gt;
&lt;p&gt;（2）导入&lt;br/&gt;把下载到的chromedriver.exe文件放到python的安装目录的scripts底下&lt;br/&gt;即就是C:\Program Files\Python36\Scripts 目录下&lt;/p&gt;
&lt;h2 id=&quot;获取脚本&quot;&gt;3 获取脚本&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;import random
import datetime
from selenium import webdriver
from time import sleep


your_account = &quot;前程无忧的用户名&quot;
your_password = &quot;前程无忧的密码&quot;
url = &quot;https://www.51job.com&quot;

# 加启动配置，预防谷歌浏览器安全提示
option = webdriver.ChromeOptions()
option.add_argument('disable-infobars')

# 打开chrome浏览器
browser = webdriver.Chrome(chrome_options=option)
browser.get(url)

# 设置浏览器窗口大小
# browser.set_window_size(1360, 600)
browser.maximize_window()

# 找到登录按钮并点击
sleep(2)
browser.find_element_by_class_name(&quot;showLogin&quot;).click()
# 输入账号和密码
sleep(3)
username = browser.find_element_by_id(&quot;loginname&quot;)
sleep(2)
username.send_keys(&quot;your_account&quot;)
sleep(3)
password = browser.find_element_by_id(&quot;password&quot;)
sleep(2)
password.send_keys(&quot;your_password&quot;)
# 点击登录按钮
sleep(3)
ret = browser.find_element_by_id(&quot;login_btn&quot;).click()
print(&quot;登录成功！&quot;)

while True:
    # 设置简历刷新间隔时间， 单位为秒
    # 就是随机间隔10-15秒刷新，按需求调整，建议设置长一点，万一被服务器封IP就不好了
    waittime = random.randint(10, 15)
    sleep(int(waittime))
    browser.find_element_by_id(&quot;refreshresume&quot;).click()
    print(&quot;简历 在%s 刷新成功&quot; % datetime.datetime.now())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码 也可从开头给的百度网盘获取&lt;/p&gt;
&lt;h2 id=&quot;效果如下&quot;&gt;4 效果如下&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1157397/201905/1157397-20190519151459955-716825939.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1157397/201905/1157397-20190519152453274-1051979894.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有问题欢迎随时留意交流&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 06:58:00 +0000</pubDate>
<dc:creator>Sunzz</dc:creator>
<og:description>本文用到的文件的下载地址 百度网盘链接: https://pan.baidu.com/s/1wIda wUz4X_Ck72xgZ6Ddg 提取码: etaa 1 安装Python 和 selenium</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Sunzz/p/10889259.html</dc:identifier>
</item>
<item>
<title>shell-----结构化命令 - 秦广王</title>
<link>http://www.cnblogs.com/jinyuanliu/p/10880983.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jinyuanliu/p/10880983.html</guid>
<description>&lt;h2&gt;if-then语句&lt;/h2&gt;
&lt;p&gt;bash shell的if语句会执行if后面的那个命令，如果该命令的退出码状态为0会执行then部分的命令，如果是其他值不会执行。&lt;/p&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
if command
then
    commands
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
if pwd
then
    echo &quot;ok&quot;
fi

[root@node1 ljy]# sh ceshi.sh 
/ljy
ok
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在then部分可以使用多条命令。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
testuser=ljy
if grep $testuser /etc/passwd
then
    echo &quot;ok&quot;
fi

[root@node1 ljy]# sh ceshi.sh 
ljy:x:1000:1000::/home/ljy:/bin/bash
ok
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;if-then-else&lt;/h2&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
if command
then
     commands
else
     commands
fi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;用法很简单，看一个例子就行&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
testuser=ljy
if grep $testuser /etc/passwd
then
    echo &quot;$testuser exit on system!&quot;
else
    echo &quot;$testuser does ont on system!&quot;
fi

[root@node1 ljy]# sh ceshi.sh 
ljy:x:1000:1000::/home/ljy:/bin/bash
ljy exit on system!
#此时我定义一个不存在的变量
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
testuser=ljy1
if grep $testuser /etc/passwd
then
    echo &quot;$testuser exit on system!&quot;
else
    echo &quot;$testuser does ont on system!&quot;
fi

[root@node1 ljy]# sh ceshi.sh 
ljy1 does ont on system!
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;嵌套if&lt;/h2&gt;
&lt;p&gt;语法很简单看一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
testuser=zhangsan
if grep $testuser /etc/passwd
then
    echo &quot;$testuser exit on system!&quot;
else
    echo &quot;$testuser does ont on system!&quot;
    if ls -d /home/$testuser
    then
       echo &quot;but $testuser have a directory!&quot;
    fi
fi

[root@node1 ljy]# sh ceshi.sh 
zhangsan does ont on system!
/home/zhangsan
but zhangsan have a directory!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 也可以用else部分的另外一种形式elif&lt;/p&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
if command
then
     commands
elif command2
then
     more commands
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
testuser=zhangsan
if grep $testuser /etc/passwd
then
    echo &quot;$testuser exit on system!&quot;
elif ls -d /home/$testuser
then
       echo &quot;but $testuser have a directory!&quot;
fi

[root@node1 ljy]# sh ceshi.sh 
/home/zhangsan
but zhangsan have a directory!
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;test命令&lt;/h2&gt;
&lt;p&gt;如果test命令中列出的条件成立，test命令就会退出并返回特推出状态码0&lt;/p&gt;
&lt;p&gt;test 命令可以判断3类条件：&lt;br/&gt;1. 数值比较&lt;br/&gt;2. 字符串比较&lt;br/&gt;3. 文件比较&lt;/p&gt;
&lt;h4&gt;1、数值比较&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：test 命令中不能使用浮点数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201905/1592208-20190519095409728-229691030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
value1=10
value2=11
#
if [ $value1 -gt 5 ]   #左括号右侧和右括号左侧各加一个空格，否则会报错。
then 
   echo &quot;$value1 is bigger than 5&quot;
fi
[root@node1 ljy]# sh ceshi.sh 
10 is bigger than 5
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2、字符串比较&lt;/h4&gt;
&lt;p&gt;条件测试还允许比较字符串值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201905/1592208-20190519103548373-1274145686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;字符串比较的三大注意事项：&lt;br/&gt;1. 比较的变量最好加上双引号。&lt;br/&gt;2. 大于小于符号必须转义（使用\&amp;gt;），否则 shell 会把它们当做重定向符号而把字符串值当做文件名。&lt;br/&gt;3. 大于小于顺序和 sort 命令所采用的不同。(test默认大写字母小于小写字母)&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
value1=basketball
value2=football
#
if [ $value1 \&amp;gt; $value2 ]
then 
   echo &quot;$value1 is greater than $value2&quot;
else
   echo &quot;$value1 is less than $value2&quot;
fi
[root@node1 ljy]# sh ceshi.sh 
basketball is less than football
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-n和-z可以检查一个变量是否含有数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
value1=basketball
value2=' '
#
if [ -n $value1 ]
then 
   echo &quot;'$value1' is not empty&quot;
else
   echo &quot;'$value1' is empty&quot;

fi
#
if [ -z $value2]
then 
   echo &quot;'$value2' is empty&quot;
else 
   echo &quot;'$value2' is not empty&quot;
fi
[root@node1 ljy]# sh ceshi.sh 
'basketball' is not empty
' ' is empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-n判断长度是否非0，-z判断长度是否为0&lt;/p&gt;
&lt;h4&gt;3、文件比较&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201905/1592208-20190519110649121-2104662862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;-d检测目录是否存在。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
value1=/home/ljy
if [ -d $value1 ]
then
   echo &quot;$value1 is exited&quot;
else
   echo &quot;$value1 is not exited&quot;
fi
[root@node1 ljy]# sh ceshi.sh 
/home/ljy is exited
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-e允许脚本代码在使用&lt;span&gt;文件或者目录&lt;/span&gt;前先检测是否存在。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
value1='lisi'
if [ -e /home/$value1 ]
then
   echo &quot;$value1 is exited&quot;
else
   echo &quot;$value1 is not exited&quot;
fi
[root@node1 ljy]# sh ceshi.sh 
lisi is exited
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-f确定对象是否为文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi.sh 
#!/bin/bash
value1='zhangsan'
if [ -e /home/$value1 ]  #判断变量是否存在
then
   echo &quot;$value1 is exited&quot;
   if [ -f /home/$value1 ]   #判断是否为文件
   then 
      echo &quot;$value1 is a file&quot;
   else
      echo &quot;$value1 is a directory&quot;
   fi
else
   echo &quot;$value1 is not exited&quot;
fi
[root@node1 ljy]# sh ceshi.sh 
zhangsan is exited
zhangsan is a directory
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-r测试文件是否可读。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[ljy@node1 ljy]$ more ceshi2.sh 
#!/bin/bash
pwfile=/home/lisi
#
if [ -r $pwfile ]
then 
   tail $pwfile
else 
   echo &quot;this file unable to read!&quot;
fi
[ljy@node1 ljy]$ sh ceshi2.sh 
this file unable to read!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-s检测文件是否为非空，尤其是在不想删除非空文件的时候。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi2.sh 
#!/bin/bash
pwfile=/home/lisi
#
if [ -s $pwfile ]
then 
   echo &quot;this file is not empty&quot;
else 
   echo &quot;$pwfile is empty&quot;
   echo &quot;Deleting empty file...&quot;
   rm $pwfile
fi
[root@node1 ljy]# sh ceshi2.sh   
/home/lisi is empty
Deleting empty file...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-w判断对文件是否可写。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi2.sh 
#!/bin/bash
pwfile=/home/lisi
#
if [ -w $pwfile ]
then 
   echo &quot;this file can be write!&quot;
   date +%H%M &amp;gt;&amp;gt; $pwfile
else 
   echo &quot;$pwfile can not be write&quot;
fi
[root@node1 ljy]# sh ceshi2.sh 
this file can be write!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-x判断文件是否有执行权限。&lt;/p&gt;
&lt;p&gt;当然这是针对的非root用户。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi2.sh 
#!/bin/bash
pwfile=/home/test.sh
#
if [ -x $pwfile ]
then 
   echo &quot;this file can be run!&quot;
   sh $pwfile
else 
   echo &quot;$pwfile can not be run!&quot;
fi
[root@node1 ljy]# sh ceshi2.sh 
this file can be run!
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;复合条件测试&lt;/h2&gt;
&lt;p&gt;if-then 语句允许使用布尔逻辑来组合测试：&lt;br/&gt;- 与：[ condition1 ] &amp;amp;&amp;amp; [ condition2 ] 或者 [ condition1 -a condition2 ]&lt;br/&gt;- 或：[ condition1 ] || [ condition2 ] 或者 [ condition1 -o condition2 ]&lt;br/&gt;- 非：[ !condition ]&lt;br/&gt;实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi2.sh 
#!/bin/bash
pwfile=/home/test.sh
#
if [ -d $pwdfile ] &amp;amp;&amp;amp; [ -x $pwfile ] 
then 
   echo &quot;this file can be run!&quot;
   sh $pwfile
else 
   echo &quot;$pwfile can not be run!&quot;
fi
[root@node1 ljy]# sh ceshi2.sh 
this file can be run!
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;case命令&lt;/h2&gt;
&lt;p&gt;为单个变量寻找特定的值，可以用 case 命令，而不是写那么多的 elif 语句检查。&lt;strong&gt;case 命令会检查单个变量列表格式的多个值&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
case variable in 
pattern1 | pattern2) commands1 ;; 
pattern3) commands2 ;; 
*) default commands ;; 
esac
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; case 命令会将指定的变量同不同模式进行比较。&lt;/p&gt;
&lt;p&gt;如果变量和模式是匹配的，那么 shell 会执行为该模式指定的命令。&lt;/p&gt;
&lt;p&gt;也可以通过竖线操作符来分割模式，在一行列出多个模式。星号会捕获所有跟所有列出的模式都不匹配的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@node1 ljy]# more ceshi2.sh 
#!/bin/bash
case $USER in 
root | barbara) 
   echo &quot;Welcome $USER&quot; 
   echo 'Enjoy your visit' ;; 
testing) 
  echo &quot;Special testing acount&quot; ;; 
jessica) 
  echo &quot;Don't forget to log off&quot; ;; 
*) 
  echo &quot;Sorry, you aren't allowed here&quot; ;; 
esac
[root@node1 ljy]# sh ceshi2.sh 
Welcome root
Enjoy your visit
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 19 May 2019 06:31:00 +0000</pubDate>
<dc:creator>秦广王</dc:creator>
<og:description>if-then语句 bash shell的if语句会执行if后面的那个命令，如果该命令的退出码状态为0会执行then部分的命令，如果是其他值不会执行。 格式如下： 实例： 在then部分可以使用多条命</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jinyuanliu/p/10880983.html</dc:identifier>
</item>
<item>
<title>java web项目 使用elfinder 实现文件管理器 - 待到枫叶红成海</title>
<link>http://www.cnblogs.com/aforever/p/10859828.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aforever/p/10859828.html</guid>
<description>&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/aforever/articles/10859828.html&quot; target=&quot;_blank&quot;&gt;目的&lt;/a&gt;：&lt;a href=&quot;https://www.cnblogs.com/aforever/articles/10859828.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;在客户端（浏览器）上像操作window系统中的文件/文件夹一样，操作服务器上的某些指定文件/文件夹&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　效果图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513225720634-1443032628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　框架：jsp + springMVC + Tomcat&lt;/p&gt;
&lt;p&gt;　　前台使用 &lt;a href=&quot;https://studio-42.github.io/elFinder&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;elfinder&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　这是一个很好用的开源web文件管理器插件，用jquery+jquery-ui写的，在网上一搜文档好像也挺多的，于是准备搬到项目中来（挖坑开始），了解过后发现作者附带的后台demo是php写的，大多文档资料也是php的，java的特别少，出了问题也不知道是为什么，急死个人，前后折腾了两天才勉强能用了，在这里记录一下，以供大家参考，本人菜鸟，如果有什么理解不对的地方，欢迎各位指正。&lt;/p&gt;
&lt;p&gt;　　打开官网，把代码dow下来：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513225945796-232276141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　打开压缩包：把选中的这些文件拷到项目中：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513230011866-245100749.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　选中的可能有用，没选中的肯定没用（为什么？因为这没拷进项目里他也能跑，而且没问题...）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513230040811-1676581996.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　后台使用的是一个大神开源的基于java实现demo  &lt;a href=&quot;https://github.com/bluejoe2008/elfinder-2.x-servlet&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;span&gt;elfinder-2.x-servlet&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　这个目前还在持续更新中&lt;/p&gt;
&lt;p&gt;　　接下来开始配置吧，基础版：&lt;/p&gt;
&lt;p&gt;　　Maven项目中添加依赖项&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; web文件夹管理器jar包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.github.bluejoe2008&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elfinder-servlet-2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;classifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classes&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;classifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　或者直接点击下载 &lt;a href=&quot;https://files.cnblogs.com/files/aforever/elfinder-servlet-2.1.2.zip&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;span&gt;elfinder-servlet-2.jar&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt; 包放到lib目录下&lt;/p&gt;
&lt;p&gt;　　接下来在servlet.xml中配置需要spring管理的各对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; find appropriate  command executor for given command&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;commandExecutorFactory&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.controller.executor.DefaultCommandExecutorFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;classNamePattern&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        value&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.controller.executors.%sCommandExecutor&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            &amp;lt;entry key=&quot;tree&quot;&amp;gt;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                &amp;lt;bean class=&quot;cn.bluejoe.elfinder.controller.executors.TreeCommandExecutor&quot; /&amp;gt;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            &amp;lt;/entry&amp;gt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; FsService is often retrieved from HttpRequest &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; while a static FsService is defined here &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;fsServiceFactory&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.StaticFsServiceFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;fsService&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.DefaultFsService&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;serviceConfig&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.DefaultFsServiceConfig&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;tmbWidth&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;80&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;volumeMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; two volumes are mounted here &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;A&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.localfs.LocalFsVolume&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;MyFiles&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;rootDir&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/tmp/a&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;B&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.localfs.LocalFsVolume&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Shared&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;rootDir&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/tmp/b&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;securityChecker&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.FsSecurityCheckerChain&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;filterMappings&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.FsSecurityCheckFilterMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pattern&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;A_.*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;checker&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.FsSecurityCheckForAll&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;                                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;readable&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;                                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;writable&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;                                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;                                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.FsSecurityCheckFilterMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pattern&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;B_.*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;checker&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.bluejoe.elfinder.impl.FsSecurityCheckForAll&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;                                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;readable&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;                                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;writable&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;                                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;                                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　这里配置就是服务器上的文件夹名称，服务器上是在你有tomcat所在盘的根目录下建一个叫tmp的文件夹，但在客户端（浏览器）上显示的就是你配置的名称：MyFiles&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513231024444-1907505605.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　加载jar包后，为了查看后台接收数据的url，需要加载源文件（我给的jar包压缩包里）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513234810672-1266274880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们打开这个类cn.bluejoe.elfinder.controller.ConnectorController可以看到映射路径为”connector”&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513231347524-308695512.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　这就是前台请求后台时的url路径（先暂时记住）&lt;/p&gt;
&lt;p&gt;　　接着开始写前台页面（我用的是jsp页面）：&lt;/p&gt;
&lt;p&gt;　　可以直接拿elfinder那个包里的elfinder.html改，但他里面没有引入js和css，所以还是自己来写吧&lt;/p&gt;
&lt;p&gt;　　最好按照下面给出的顺序导入，因为在最开始我没有注意，导致很多样式是乱的，响应到了错误的地方&lt;/p&gt;
&lt;p&gt;　　导入jquery.js，版本稍高的好，因为我发现他的里面用的是jquery-3.*的版本，这个根据自己的路径来导　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;script src=&quot;${pageContext.request.contextPath}/js/jquery-3.2.1.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　导入jquery-ui.js jquery-ui.css ，接下来的这些文件的路径都是根据最开始拷到项目中的elfinder包里去找&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;link href=&quot;${pageContext.request.contextPath}/elfinder/jquery/jquery-ui-1.12.0.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; charset=&quot;utf-8&quot;&amp;gt; &lt;br/&gt;&amp;lt;script src=&quot;${pageContext.request.contextPath}/elfinder/jquery/jquery-ui-1.12.0.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　导入elfinder.css、theme.css&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/elfinder/css/elfinder.min.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; charset=&quot;utf-8&quot;&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/elfinder/css/theme.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; charset=&quot;utf-8&quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　导入elfinder.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;script src=&quot;${pageContext.request.contextPath}/elfinder/js/elfinder.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　导入中文语言包elfinder.zh_CN.js，elfinder是支持国际化的，从2.0版本开始可以完美支持中文了，如果这里不导入，不配置，默认是英文的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;script src=&quot;${pageContext.request.contextPath}/elfinder/js/i18n/elfinder.ru.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;${pageContext.request.contextPath}/elfinder/js/i18n/elfinder.zh_CN.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在html标签中声明容器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;elfinder&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Js代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&lt;span&gt;
    $(document).ready(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
        $(&lt;/span&gt;'#elfinder'&lt;span&gt;).elfinder({
            url : &lt;/span&gt;'${pageContext.request.contextPath}/connector'&lt;span&gt;,　　　　//这里的请求地址对应controller中的地址
            lang : &lt;/span&gt;'zh_CN',        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置默认语言为中文&lt;/span&gt;
            height : parseInt(window.screen.availHeight * 0.7)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置高度为浏览器高度的0.7&lt;/span&gt;
&lt;span&gt;        });
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此时启动项目应该能看到以下页面了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513233133002-65103024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　此时一个坑出现了，我传什么文件都提示“未知的命令：null”,google了几个小时才发现是因数servlet.xml中配置了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;multipartResolver&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.sctbyc.sware.controller.resourceLibrary.filter.CommonsMultipartResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultEncoding&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxUploadSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;104857600&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxInMemorySize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;2048&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;　　两个冲突了，去掉CommonsMultipartResolver就可以，但是项目中其他地方用到的上传就无法使用了，度娘了很久说冲突可以写一个代理来解决（不太会），直接把别人的代码拿来（好几百行），发现并没卵用，气死个人，于是又开始疯狂搜索...&lt;/p&gt;
&lt;p&gt;　　最后发现根本不用什么代理，CommonsMultipartResolver这个类中有一个&lt;strong&gt;public&lt;/strong&gt; &lt;strong&gt;boolean&lt;/strong&gt; &lt;strong&gt;isMultipart&lt;/strong&gt;(HttpServletRequest request)方法，我们继承这个类，重写这个isMultipart方法返回true和false就可以达到是否使用这个类来处理上传了&lt;/p&gt;
&lt;p&gt;　　此处使用拦截器来判断其是我们的elfinder的上传文件或是其他上传方式，这里主要是用请求url的方式来判断是否为elfinder的请求，分三个类，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.Filter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.FilterChain;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.FilterConfig;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MultipartContextFileter &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Filter  {

    FilterConfig config;
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; destroy() {
        
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFilter(ServletRequest srequest, ServletResponse sresponse, FilterChain chain)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, ServletException {
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; isData = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        HttpServletRequest req &lt;/span&gt;=&lt;span&gt; (HttpServletRequest)srequest;
         
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据web.xml中的配置，判断当前url是否跳过此过滤器&lt;/span&gt;
        String excludeURL = config.getInitParameter(&quot;excludeURL&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (excludeURL != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&quot;&quot;&lt;span&gt;.equals(excludeURL)) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (req.getRequestURI().indexOf(excludeURL) != -1&lt;span&gt;) {
                isData &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
         
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isData) {
            String content_type &lt;/span&gt;=&lt;span&gt; req.getContentType();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (content_type != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; content_type.indexOf(&quot;multipart/form-data&quot;) != -1&lt;span&gt;) {
                MyMultiPartRequest jakarta &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyMultiPartRequest(req);
                jakarta.isData &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                req &lt;/span&gt;=&lt;span&gt; jakarta;
            }
        }
         
        chain.doFilter(req, sresponse);
        
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; init(FilterConfig arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException {
        config &lt;/span&gt;=&lt;span&gt; arg0;
        
    }

}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequestWrapper;
　&lt;/span&gt;/**&lt;br/&gt;　　* 继承request,对其进行包装，以保存更多信息，用于保存判断是否是elfinder的请求，后面执行时可以判断是否跳过CommonsMultipartResolver的处理&lt;br/&gt;　　*/
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyMultiPartRequest &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpServletRequestWrapper {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isData = &lt;span&gt;false&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否执行自定义的CommonsMultipartResolver&lt;/span&gt;
    
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyMultiPartRequest(HttpServletRequest request) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(request);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CommonsMultipartResolver &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; org.springframework.web.multipart.commons.CommonsMultipartResolver {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这里是处理Multipart http的方法。如果这个返回值为true,那么Multipart http
     * body就会MyMultipartResolver 消耗掉.如果这里返回false
     * 那么就会交给后面的自己写的处理函数处理例如刚才elfinder请求
     * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isMultipart(HttpServletRequest request) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(request &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; MyMultiPartRequest){
            MyMultiPartRequest trequest &lt;/span&gt;=&lt;span&gt; (MyMultiPartRequest)request;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(trequest.isData){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.isMultipart(request);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;　　然后在web.xml中配置拦截器，使其生效&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;MultiPartFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.sctbyc.sware.controller.resourceLibrary.filter.MultipartContextFileter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;excludeURL&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;connector&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;MultiPartFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;　　好了，这下就可以正常使用了上传文件了，好TM开心，赶紧各种建文件夹，上传文件&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　此时第二个坑出现了（文件超过2M传上去就是一个blob文件，且只有几十k到1M多不等），第一反应这应该是个不完整的二进制文件，但为什么呢？F12打开浏览器，看了下发现上传文件时它一直在不停的发请求，原来是这个前端框架使用的大文件分段上传的技术，就是把一个文件切成很多小块，一直发请求，一点点的上传，而后台似乎并没有这样实现，所以造成了这种情况，相当于多大的文件，最后都只保存了最后一次上传的那一块，知道了原因，开始查&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Studio-42/elFinder/wiki/Client-configuration-options-2.1&quot; target=&quot;_blank&quot;&gt;elfinder的文档&lt;/a&gt;，&lt;/strong&gt;&lt;/span&gt;看看他怎么说：果然还真有这样一个配置项：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513234218897-1597476123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　他说默认是10M,这寻思也没有啊，我的文件超过2M就不行了，于是我就配置了一个这个，再在后面加了两个0，约等于1G了，再试，还是不行啊，超过2M就截断了，又开始查文档，以为是自己配置的姿势没对，弄了很久，不行，没办法，只能看他的elfinder.full.js了，看看是不是这其中有什么鬼，果然我发现了一个东西&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190513234333487-536583674.png&quot; alt=&quot;&quot; width=&quot;1003&quot; height=&quot;235&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　这里默认为2M-8K的大小，和我们配置的大小中取一个，但使用的是Math.min，取得是其中小的一个，难怪我们的大了他就不用了，所能我们把他改成Math.max就可以使用我们配置的大小了，妈妈再也不用担心我给的容量不够了,注意这里查看的是elfinder.full.js（即原版），但我们引入的时候是引入的elfinder.mini.js（压缩版），所以要去mini.js中修改才有用，（因为mini版没有格式，不好找，这里告诉大家一个小技巧，可以Ctrl+F打开搜索框，搜索2097152，也就是上图里的数字，一下就找到了）（这里测试的时候因为本地tomcat给的空间不够，所报了一个OutMemoryError，内存溢出，不过不用担心，生产环境给的是16个G，随便他传）&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　还有一个问题就是上传时有一个选择目录，但好像支持得不太好，传不上去，也不知道怎么改，所以我索性就在elfinder.js中把这个给屏蔽了，过程如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190514001000490-514056447.png&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;220&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　浏览器中检查这个按钮，发现他的html代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only elfinder-tabstop elfinder-focus&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ui-button-text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　所以去elfinder.mini.js中搜索出来，在他之前加上一个判断，如果是选择目录，就返回一个空：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(i=='selectFolder')&lt;span&gt;return&lt;/span&gt; '&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190514001831763-2052740918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　这里等于selectFolder是因为在elfinder.zh_CN.js 中可以找到 &quot;选择目录&quot;对应的英文就是“selectFolder”&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1528847/201905/1528847-20190514002103037-874896265.png&quot; alt=&quot;&quot; width=&quot;553&quot; height=&quot;64&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　到这里，基本配置就结束了，从使用上来说几乎是没有问题了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　剩下的就该考虑到部分需要优化的内容了：还记得我们最开始的时候说过，后台的jar包中给定了请求的url了，但只有一个，这很容易冲突，特别是项目大了过后，更大概率会出现了，所以我们就需要自己来定义url是最好的了，其次是权限的问题，特别是项目中涉及到一部分人能操作，一部分人只能查看、下载的问题，这个等下一篇再写了。。。（拖延一下……^-^）&lt;/p&gt;

</description>
<pubDate>Sun, 19 May 2019 06:01:00 +0000</pubDate>
<dc:creator>待到枫叶红成海</dc:creator>
<og:description>目的：在客户端（浏览器）上像操作window系统中的文件/文件夹一样，操作服务器上的某些指定文件/文件夹 效果图： 框架：jsp + springMVC + Tomcat 前台使用 elfi</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aforever/p/10859828.html</dc:identifier>
</item>
<item>
<title>PHP正则表达式，看这一篇就够啦！ - Johnson木木</title>
<link>http://www.cnblogs.com/Johnson-lin/p/10875388.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Johnson-lin/p/10875388.html</guid>
<description>&lt;p&gt;不知道你们有没有这个感觉，看正则表达式就像看天文数字一样，什么电话号码、邮箱的正则表达式，上网复制一下粘贴下来就搞定了。完全不知道这写的是什么玩意。后来我自己也想学一下，因为感觉用处还是挺大的。看了看视频，额...真**简单。这里的话如果想看视频学习的话我推荐一下慕课网这门&lt;a href=&quot;https://www.imooc.com/learn/350&quot;&gt;鬼斧神工之正则表达式&lt;/a&gt;课程，上手真的太快了。好了，废话不多说，开始搞事情。&lt;/p&gt;

&lt;h2 id=&quot;界定符&quot;&gt;界定符：&lt;/h2&gt;
&lt;p&gt;标识一个正则表达式的开始和结束，用'/'或'#'或'{ }',因为语法'{ }'也可能是正则表达式的运算符，为了避免混淆，所以不建议使用。建议的用法如下：&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;$pattern = '/[0-9]/';  //我喜欢这个，看起来比较简洁 
$pattern = '#[0-9]#';&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;原子&quot;&gt;原子：&lt;/h2&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;可见原子&lt;/strong&gt;：Unicode编码表中可用键盘输出后肉眼可见的字符，例如：标点 ; . / ? 或者英文字母，汉字等等可见字符&lt;br/&gt;&lt;strong&gt;不可见原子&lt;/strong&gt;：Unicode编码表中可用键盘输出后肉眼不可见的字符，例如：换行符 \n，Tab制表符\t, 空格等等，&lt;br/&gt;一般只用这三个（换行符一般和其他字符一起匹配，因为只有换行符是匹配不到的）&lt;br/&gt;小提示：匹配运算符前面需要加 '' 例如：'+' 号，匹配的话需要写出 '+'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;元字符&quot;&gt;元字符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;原子的筛选方式：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;| 匹配两个或者多个分支选择&lt;br/&gt;[] 匹配方括号中的任意一个原子&lt;br/&gt;[^] 匹配除方括号中的原子之外的任意字符；&lt;br/&gt;例子：Duang|duang 或者 [Dd]uang 都可以匹配到Duang和duang&lt;br/&gt;区间写法：[a-z]匹配a到z的字符, [0-9]匹配0到9的字符。也可以[a-z0-9]&lt;br/&gt;. 匹配除换行符之外的任意字符&lt;br/&gt;\d 匹配任意一个十进制数字，即{0-9]&lt;br/&gt;\D 匹配任意一个非十进制数字[^0-9] 相当于[^\d]&lt;br/&gt;\s 匹配一个不可见的原子，即[\f\n\r\t\v]&lt;br/&gt;\S 匹配一个可见的原子，即[^\f\n\r\t\v],相当于[^\s]z&lt;br/&gt;\w 匹配任意一个数组、字母或下划线，即[0-9a-zA-Z_]&lt;br/&gt;\W 匹配任意一个非数组、字母或下划线，[^0-9a-zA-Z_]，相当于[^\w]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;量词&quot;&gt;量词&lt;/h2&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;{n} 表示其前面的原子刚好出现了n次。&lt;br/&gt;[n] 表示其前面的原子最少出现n次&lt;br/&gt;{n,m} 最少出现n次，最多出现m次&lt;br/&gt;&lt;code&gt;*&lt;/code&gt; 匹配0次、一次或者多次，即{0,}&lt;br/&gt;&lt;code&gt;+&lt;/code&gt; 匹配一次或多次,即{1,}&lt;br/&gt;&lt;code&gt;?&lt;/code&gt; 匹配0或1次，即{0,1}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;边界控制&quot;&gt;边界控制&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;^ 匹配字符串开始的位置&lt;br/&gt;$ 匹配字符串结尾的位置&lt;br/&gt;例：^John 可以匹配到:John 但是匹配不到:123John,因为规定了字符串以John开头&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;模式单元&quot;&gt;模式单元&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;{} 匹配其中的整体为一个原子&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2 id=&quot;贪婪匹配&quot;&gt;贪婪匹配&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;匹配结果存在歧义时取其长（默认）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;懒惰匹配&quot;&gt;懒惰匹配&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;匹配结果存在歧义时取其短，只需在正则表达式的后面'/'加上'U'，例如'/[0-9]/U';&lt;br/&gt;例子：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;$subject = &quot;test__123123123&quot;;
preg_match('/test.+123/', $subject, $matches); //贪婪模式  
var_dump($matches);
preg_match('/test.+123/U', $subject, $matches); //懒惰模式
var_dump($matches);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;常见的修正模式&quot;&gt;常见的修正模式：&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;U 懒惰匹配&lt;br/&gt;i 忽略英文字母的大小写&lt;br/&gt;x 忽略正则表达式的空白符&lt;br/&gt;s 让元字符'.' 匹配包括换行符在内的所有字符&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2 id=&quot;preg_match&quot;&gt;preg_match&lt;/h2&gt;
&lt;p&gt;执行匹配正则表达式&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;preg_match ( string $pattern , string $subject [, array &amp;amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] ) : int&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pattern: 要搜索的模式，字符串类型。&lt;/li&gt;
&lt;li&gt;subject：输入字符串。&lt;/li&gt;
&lt;li&gt;match： 如果提供了参数matches，它将被填充为搜索结果,数据结构为一维数组。&lt;/li&gt;
&lt;li&gt;flags: 可以设置为PREG_OFFSET_CAPTURE，使用搜索结果的第0个元素为匹配的字符串，第1个元素为对应的偏移量（位置）&lt;/li&gt;
&lt;li&gt;offset: 搜索从目标字符串的起始位置开始匹配。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;返回值：匹配次数&lt;br/&gt;类似函数&lt;code&gt;preg_match_all&lt;/code&gt;，参数与&lt;code&gt;preg_match&lt;/code&gt;一致&lt;br/&gt;区别：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;preg_match&lt;/code&gt;：只匹配一次，搜索结构match的数据结果为一维数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_match_all&lt;/code&gt;：匹配全部，搜索结果match的数据结构为二维数组。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;preg_replace&quot;&gt;preg_replace&lt;/h2&gt;
&lt;p&gt;执行一个正则表达式搜索和替换，返回值为替换后的字符串&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;amp;$count ]] ) : mixed&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pattern：要搜索的模式。可以是一个字符串或字符串数组。&lt;/li&gt;
&lt;li&gt;replacement：用于替换的字符串或字符串数组&lt;/li&gt;
&lt;li&gt;subject：要进行搜索和替换的字符串或字符串数组。&lt;/li&gt;
&lt;li&gt;limit：替换的最大次数。默认是 -1(无限)。&lt;/li&gt;
&lt;li&gt;count：替换次数。&lt;br/&gt;类似函数&lt;code&gt;preg_filter&lt;/code&gt;，参数与&lt;code&gt;preg_replace&lt;/code&gt;一致&lt;br/&gt;区别(使用数组进行匹配的时候才看得出区别)：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_replace&lt;/code&gt;：不管是否有替换，返回全部结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_filter&lt;/code&gt;：只返回匹配的结果。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;preg_split&quot;&gt;preg_split&lt;/h2&gt;
&lt;p&gt;通过一个正则表达式分隔字符串&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] ) : array&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$pattrn：用于搜索的模式，字符串形式。&lt;/li&gt;
&lt;li&gt;subject：输入字符串&lt;/li&gt;
&lt;li&gt;limit：将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。&lt;/li&gt;
&lt;li&gt;flags：有以下标记的组合：&lt;br/&gt;-- 1. &lt;code&gt;PREG_SPLIT_NO_EMPTY&lt;/code&gt;: 返回分隔后的非空部分。&lt;br/&gt;-- 2. &lt;code&gt;PREG_SPLIT_DELIM_CAPTURE&lt;/code&gt;: 用分隔符'()'括号把匹配的捕获并返回。&lt;br/&gt;-- 3. &lt;code&gt;PREG_SPLIT_OFFSET_CAPTURE&lt;/code&gt;： 匹配返回时将会附加字符串偏移量&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;PREG_SPLIT_DELIM_CAPTURE&lt;/code&gt;这个参数可能比较难明白，举个例子看看：&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;$subject = &quot;1a23b&quot;;  
$a = preg_split('/[\d]/', $subject, -1, PREG_SPLIT_NO_EMPTY);  
var_dump($a);  
$a = preg_split('/([\d])/', $subject, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE); 
var_dump($a);  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;array (size=2)&lt;br/&gt;0 =&amp;gt; string 'a' (length=1)&lt;br/&gt;1 =&amp;gt; string 'b' (length=1)&lt;br/&gt;array (size=5)&lt;br/&gt;0 =&amp;gt; string '1' (length=1)&lt;br/&gt;1 =&amp;gt; string 'a' (length=1)&lt;br/&gt;2 =&amp;gt; string '2' (length=1)&lt;br/&gt;3 =&amp;gt; string '3' (length=1)&lt;br/&gt;4 =&amp;gt; string 'b' (length=1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;preg_grep&quot;&gt;preg_grep&lt;/h2&gt;
&lt;p&gt;返回匹配模式的数组条目&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;preg_grep ( string $pattern , array $input [, int $flags = 0 ] ) : array&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$pattern：要搜索的模式，字符串形式&lt;/li&gt;
&lt;li&gt;$input：输入数组&lt;/li&gt;
&lt;li&gt;flags：如果不设置则返回匹配的数目，设置&lt;code&gt;PREG_GREP_INVERT&lt;/code&gt;则返回不匹配的数目。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;preg_quote&quot;&gt;preg_quote&lt;/h2&gt;
&lt;p&gt;转义正则表达式字符，返回为转义后的字符串&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;preg_quote ( string $str [, string $delimiter = NULL ] ) : string&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;str：输入字符串&lt;/li&gt;
&lt;li&gt;delimiter：需要转义的字符串&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;作者：Johnson木木&lt;br/&gt;出处：https://www.cnblogs.com/Johnson-lin/&lt;br/&gt;本文以学习、研究和分享为主，如需转载，请标明作者和出处，非商业用途&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 05:40:00 +0000</pubDate>
<dc:creator>Johnson木木</dc:creator>
<og:description>[toc] 前言 不知道你们有没有这个感觉，看正则表达式就像看天文数字一样，什么电话号码、邮箱的正则表达式，上网复制一下粘贴下来就搞定了。完全不知道这写的是什么玩意。后来我自己也想学一下，因为感觉用处</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Johnson-lin/p/10875388.html</dc:identifier>
</item>
</channel>
</rss>