<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>ASP.NET Core 打造一个简单的图书馆管理系统（九） 学生信息增删（终章） - NanaseRuri</title>
<link>http://www.cnblogs.com/gokoururi/p/10357014.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gokoururi/p/10357014.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本系列文章主要为我之前所学知识的一次微小的实践，以我学校图书馆管理系统为雏形所作。&lt;/p&gt;
&lt;p&gt;本系列文章主要参考资料：&lt;/p&gt;
&lt;p&gt;微软文档：https://docs.microsoft.com/zh-cn/aspnet/core/getting-started/?view=aspnetcore-2.1&amp;amp;tabs=windows&lt;/p&gt;
&lt;p&gt;《Pro ASP.NET MVC 5》、《锋利的 jQuery》&lt;/p&gt;

&lt;p&gt;当此系列文章写完后会在一周内推出修正版。&lt;/p&gt;

&lt;p&gt;此系列皆使用 VS2017+C# 作为开发环境。如果有什么问题或者意见欢迎在留言区进行留言。 &lt;/p&gt;
&lt;p&gt;项目 github 地址：&lt;a href=&quot;https://github.com/NanaseRuri/LibraryDemo&quot; target=&quot;_blank&quot;&gt;https://github.com/NanaseRuri/LibraryDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改前地址：&lt;a href=&quot;https://github.com/NanaseRuri/LibraryDemo/tree/SomeError&quot; target=&quot;_blank&quot;&gt;https://github.com/NanaseRuri/LibraryDemo/tree/SomeError&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;本章内容&lt;/strong&gt;：Ajax 提交自定义对象、Ajax 提交数组&lt;/p&gt;



&lt;p&gt;此处全部都在 /AdminAccount/Index 页面完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、学生信息编辑首页&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 创建一个 Admin 控制器用于编辑学生信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     [Authorize(Roles = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AdminAccountController : Controller
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; UserManager&amp;lt;Student&amp;gt;&lt;span&gt; _userManager;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; AdminAccountController(UserManager&amp;lt;Student&amp;gt;&lt;span&gt; userManager)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             _userManager =&lt;span&gt; userManager;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult Index()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             ICollection&amp;lt;Student&amp;gt; students =&lt;span&gt; _userManager.Users.ToList();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(students);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@using LibraryDemo.Models.DomainModels
@model IEnumerable&lt;/span&gt;&amp;lt;LibraryDemo.Models.DomainModels.Student&amp;gt;&lt;span&gt;
@{
    ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AccountInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    Student stu &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
}
&lt;/span&gt;&amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/css/BookInfo.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

&amp;lt;h2&amp;gt;学生信息&amp;lt;/h2&amp;gt;

&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;buttonGroup&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;button &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-primary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;return addStudent()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;添加学生&amp;lt;/button&amp;gt;
    &amp;lt;button &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-danger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;return confirmDelete()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;删除学生&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;


&amp;lt;br /&amp;gt;
&amp;lt;table&amp;gt;
    &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;@Html.LabelFor(m =&amp;gt; stu.UserName)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;@Html.LabelFor(m =&amp;gt; stu.Name)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;@Html.LabelFor(m =&amp;gt; stu.Degree)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;@Html.LabelFor(m =&amp;gt; stu.PhoneNumber)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;@Html.LabelFor(m =&amp;gt; stu.Email)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;@Html.LabelFor(m =&amp;gt; stu.MaxBooksNumber)&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;studentList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;

        @if (&lt;/span&gt;!&lt;span&gt;@Model.Any())
        {
            &lt;/span&gt;&amp;lt;tr&amp;gt;&amp;lt;td colspan=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;未有学生信息&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;span&gt;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; student &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Model)
            {
                &lt;/span&gt;&amp;lt;tr&amp;gt;
                    &amp;lt;td&amp;gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userNames&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@student.UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@student.UserName&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@student.Name&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@Html.DisplayFor(m =&amp;gt; student.Degree)&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@student.PhoneNumber&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@student.Email&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@student.MaxBooksNumber&amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;&lt;span&gt;
            }
        }
    &lt;/span&gt;&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190209231807159-173848514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、增加新学生&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此处打算使用 Ajax 来实现无刷新页面更新，因此动作方法返回类型为 Json 。&lt;/p&gt;
&lt;p&gt;动作方法：&lt;/p&gt;
&lt;p&gt;此处需注意在参数处添加 [FromBody] 修饰，否则无法读取来自页面的数据。&lt;/p&gt;
&lt;p&gt;为节省带宽，此处仅返回添加的学生的 JSON 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;        [HttpPost]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;JsonResult&amp;gt;&lt;span&gt; AddStudent([FromBody]Student student)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {            
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (_userManager.CreateAsync(student,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).Result.Succeeded)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; AddedStudent(student.UserName);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Failed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;JsonResult&amp;gt; AddedStudent(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; userName)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             Student student=&lt;span&gt;await&lt;/span&gt; _userManager.Users.FirstOrDefaultAsync(s =&amp;gt; s.UserName ==&lt;span&gt; userName);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;new&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 userName =&lt;span&gt; student.UserName,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 name =&lt;span&gt; student.Name,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 degree = student.Degree == Degrees.CollegeStudent ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;本科生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : (student.Degree == Degrees.Postgraduate ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;研究生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;博士生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 phoneNumber =&lt;span&gt; student.PhoneNumber,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 email =&lt;span&gt; student.Email,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 maxBooksNumber =&lt;span&gt; student.MaxBooksNumber
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在视图中添加 JS 代码：&lt;/p&gt;
&lt;p&gt;此处 JS 代码先是点击 添加书籍 按钮插入一行用于编辑的区域，然后通过插入区域的提交按钮提交信息，在信息成功返回后删除原来进行编辑的行，通过返回的信息添加新的行。&lt;/p&gt;
&lt;p&gt;27-33 中由于 ASP.NET Core 后台返回 JSON 数据时会对数据的键的首字母进行小写处理，因此此处读取属性也是使用首字母小写，在后台的键也是使用首字母小写加以强调。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    function postAddStudent() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        $.ajax({
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             url: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Url.Action(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;AddStudent&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             contentType: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             method: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            data: JSON.stringify({
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 UserName: $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(),
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 Name: $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(),
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 Degree:$(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#Degree&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(),
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 PhoneNumber: $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#PhoneNumber&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(),
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 Email: $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#Email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(),
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 MaxBooksNumber: $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#MaxBooksNumber&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }),
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            success: function (student) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                addStudentToTable(student);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    function addStudentToTable(student) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; studentList = document.getElementById(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;studentList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; studentInfo = document.getElementById(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;studentInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        studentList.removeChild(studentInfo);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#studentList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(`&amp;lt;tr&amp;gt;` +
&lt;span&gt;27&lt;/span&gt;             `&amp;lt;td&amp;gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userNames&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${student.userName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/td&amp;gt;` +
&lt;span&gt;28&lt;/span&gt;             `&amp;lt;td&amp;gt;${student.userName}&amp;lt;/td&amp;gt;` +
&lt;span&gt;29&lt;/span&gt;             `&amp;lt;td&amp;gt;${student.name}&amp;lt;/td&amp;gt;`+
&lt;span&gt;30&lt;/span&gt;             `&amp;lt;td&amp;gt;${student.degree}&amp;lt;/td&amp;gt;` +
&lt;span&gt;31&lt;/span&gt;             `&amp;lt;td&amp;gt;${student.phoneNumber}&amp;lt;/td&amp;gt;` +
&lt;span&gt;32&lt;/span&gt;             `&amp;lt;td&amp;gt;${student.email}&amp;lt;/td&amp;gt;` +
&lt;span&gt;33&lt;/span&gt;             `&amp;lt;td&amp;gt;${student.maxBooksNumber}&amp;lt;/td &amp;gt;` +
&lt;span&gt;34&lt;/span&gt;             `&amp;lt;/tr&amp;gt;&lt;span&gt;`);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190209233002720-1523789141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190209233014704-1440037547.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、 批量移除学生&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此处亦可以只返回更新过的元素，但为了演示 ASP.NET Core 使用 Ajax 对数组进行处理，故返回新的 Student 列表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;        [HttpPost]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;JsonResult&amp;gt; RemoveStudent([FromBody]IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; userNames)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            Student removedStudent;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; userName &lt;span&gt;in&lt;/span&gt;&lt;span&gt; userNames)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 removedStudent =&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.FindByNameAsync(userName);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (removedStudent!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.DeleteAsync(removedStudent);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                }                
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetStudentData();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JsonResult GetStudentData()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; students = _userManager.Users.Select(s =&amp;gt;&lt;span&gt;new&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 userName=&lt;span&gt;s.UserName,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 name=&lt;span&gt;s.Name,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 degree=s.Degree==Degrees.CollegeStudent?&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;本科生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:(s.Degree==Degrees.Postgraduate?&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;研究生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;博士生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 phoneNumber =&lt;span&gt; s.PhoneNumber,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 email =&lt;span&gt; s.Email,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 maxBooksNumber =&lt;span&gt; s.MaxBooksNumber                
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            });            
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Json(students);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;视图添加 JS 函数：&lt;/p&gt;
&lt;p&gt;18 行为数组元素的提交方式，不需像之前一样—— {values:values}，否则无法进行数据绑定而导致后台接收到空数据。&lt;/p&gt;
&lt;p&gt;为了对表格进行更新，先是通过 jQuery 获取了 tbody 的部分，清空后添加来自后台的新信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    function confirmDelete() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; userNames = document.getElementsByName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userNames&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;确认删除&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; values =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; userNames) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (userNames[i].&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 message = message + userNames[i].value+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                values.push(userNames[i].value);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         message = message + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (confirm(message)) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            $.ajax({
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 url: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Url.Action(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;RemoveStudent&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 contentType: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 method: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                data: JSON.stringify(values),
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                success: function(students) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    updateTable(students);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    function updateTable(data) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; body = $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#studentList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        body.empty();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; person =&lt;span&gt; data[i];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             body.append(`&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userNames&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${person.userName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;32&lt;/span&gt;             &amp;lt;td&amp;gt;${person.userName}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${person.name}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${person.degree}&amp;lt;/td&amp;gt;
&lt;span&gt;33&lt;/span&gt;             &amp;lt;td&amp;gt;${person.phoneNumber}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${person.email}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${person.maxBooksNumber}&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;span&gt;`);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190209233937007-1858457207.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190209233945966-1003184617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190209233952005-2083028014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 09 Feb 2019 15:42:00 +0000</pubDate>
<dc:creator>NanaseRuri</dc:creator>
<og:description>ASP.NET Core 打造一个简单的图书馆管理系统（九） 学生信息增删， ASP.NET Core ajax</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gokoururi/p/10357014.html</dc:identifier>
</item>
<item>
<title>Mybatis中输入输出映射和动态Sql - 风沙迷了眼</title>
<link>http://www.cnblogs.com/fsmly/p/10335456.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fsmly/p/10335456.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、输入映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　我们通过配置parameterType的值来指定输入参数的类型，这些类型可以是简单数据类型、POJO、HashMap等数据类型&lt;/p&gt;
&lt;p&gt;　　1、简单类型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129163804177-691292459.png&quot; alt=&quot;&quot; width=&quot;412&quot; height=&quot;44&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、POJO包装类型&lt;/p&gt;
&lt;p&gt;　　①这是单表查询的时候传入的POJO包装类型，即可以直接传入实体类，但是当多表查询的时候，就需要自定义POJO类型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129163920958-1529578246.png&quot; alt=&quot;&quot; width=&quot;511&quot; height=&quot;51&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　②我们使用自定义POJO类型来具体的了解一下&lt;/p&gt;
&lt;p&gt;　　先设计 包装类型如下，其中UserPOJO是除了User本身之外的添加的其他跟User相关的属性的包装类，UserVo是用于视图层面的包装类型，同样也是作为Mapper配置文件的输入类型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129170659797-334093849.png&quot; alt=&quot;&quot; width=&quot;205&quot; height=&quot;86&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其中User文件同上一篇&lt;a href=&quot;https://www.cnblogs.com/fsmly/p/10324491.html&quot; target=&quot;_blank&quot;&gt;Mybatis简单入门&lt;/a&gt;中的User，包括数据表部分也一样。这里给出UserPoJO和UserVo文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_5890d337-4c92-4add-8b72-3b5e4e0fa02f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5890d337-4c92-4add-8b72-3b5e4e0fa02f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5890d337-4c92-4add-8b72-3b5e4e0fa02f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserPoJo &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; User{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; User user;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUser(User user) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.user =&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User getUser() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserPOJO&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_f4e40cd4-6047-4fc9-876a-2d0ebb68efb7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f4e40cd4-6047-4fc9-876a-2d0ebb68efb7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f4e40cd4-6047-4fc9-876a-2d0ebb68efb7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserVo {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserPoJo userPoJo;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserPoJo getUserPoJo() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; userPoJo;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserPoJo(UserPoJo userPoJo) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.userPoJo =&lt;span&gt; userPoJo;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserVo&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　然后我们配置UserMapper.xml文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129170857448-771563557.png&quot; alt=&quot;&quot; width=&quot;541&quot; height=&quot;68&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后在UserMapper接口文件中添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试包装类型的查询&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;UserPoJo&amp;gt; findUserList(UserVo userVo) &lt;span&gt;throws&lt;/span&gt; Exception;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;使用Junit测试刚刚做的配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserList() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         UserPoJo userPoJo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserPoJo();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         UserVo userVo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserVo();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         userPoJo.setSex(&quot;男&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         userPoJo.setUsername(&quot;u&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        userVo.setUserPoJo(userPoJo);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         List&amp;lt;UserPoJo&amp;gt; userPoJoList =&lt;span&gt; userMapper.findUserList(userVo);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        System.out.println(userPoJoList);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129171139082-163360930.png&quot; alt=&quot;&quot; width=&quot;725&quot; height=&quot;65&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、输出映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、resultType&lt;/p&gt;
&lt;p&gt;①在使用resultType进行映射的时候，只有查询出来的列名和包装类型中的属性名一致的时候，才会映射成功&lt;/p&gt;
&lt;p&gt;②当使用简单类型作为输出映射的时候，我们需要保证Sql查询的结果只有一行一列，这样就可以使用简单类型&lt;/p&gt;
&lt;p&gt;如下所示示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; t_user

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; username &lt;span&gt;FROM&lt;/span&gt; t_user &lt;span&gt;WHERE&lt;/span&gt; id &lt;span&gt;=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、resultMap　　&lt;/p&gt;
&lt;p&gt;　　查询出来的列名和包装类型的属性名不一致的时候，可以使用resultMap来进行相应的映射（具体在使用中来说就是：定义resultMap中和属性的映射关系，然后将输出结果设置为resultMap的类型）　　&lt;/p&gt;
&lt;p&gt;　　下面我们使用一个例子来进行具体的测试&lt;/p&gt;
&lt;p&gt;　　①首先编写mapper配置文件，其中需要加上resultMap的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.mapper.UserMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义resultMap
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        type:resultMap最终映射的Java对象类型
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        id:对resultMap的标识
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;userResultMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;id:标识查询结果集中的唯一标识&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;_id&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;result:标识查询结果集中其他列的标识&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;_username&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;_password&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;_sex&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;_address&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserById_resultMap&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;userResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        SELECT id _id, username _username, PASSWORD _password, address _address, sex _sex FROM t_user WHERE id = #{id}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　②然后在Mapper接口中添加方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试resultMap&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; User findUserById_resultMap(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt; Exception;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　③ 测试方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserById_resultMap() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt;         User user = userMapper.findUserById_resultMap(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;        System.out.println(user);
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　④可以发现，使用resultMap的方式跟直接查询的结果是一致的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129174833403-78289043.png&quot; alt=&quot;&quot; width=&quot;772&quot; height=&quot;87&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、动态Sql&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1、if判断&lt;/p&gt;
&lt;p&gt;我们在上面使用包装类查询的用例的时候，考虑到可能出现userPoJo会是null的情况，以及其相应的属性也可能是null的情况，这样的话，如果我们直接在Sql中进行拼接而不做判断的话，可能会出现一些错误，所以我们使用if来进行动态的拼接。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserList&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.UserVo&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.UserPoJo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM t_user
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;userPoJo != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;userPoJo.sex != null and userPoJo.sex != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    AND sex = #{userPoJo.sex}
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;userPoJo.username != null and userPoJo.username != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    AND username LIKE '%${userPoJo.username}%'
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129180941343-1344425056.png&quot; alt=&quot;&quot; width=&quot;844&quot; height=&quot;84&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.Sql片段&lt;/p&gt;
&lt;p&gt;上面的例子中，我们可以将if判断抽取出来作为一个Sql片段，这样做的好处是，可能再进行别的单表查询User信息的时候可以重复使用这些Sql。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义Sql片段&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sql &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;query_user_info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;userPoJo != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;userPoJo.sex != null and userPoJo.sex != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                AND sex = #{userPoJo.sex}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;userPoJo.username != null and userPoJo.username != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                AND username LIKE '%${userPoJo.username}%'
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在别的Sql中将上面的Sql片段引入拼接即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserList&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.UserVo&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.UserPoJo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        SELECT * FROM t_user
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;refid&lt;/span&gt;&lt;span&gt;=&quot;query_user_info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.foreach&lt;/p&gt;
&lt;p&gt;当我们需要一种同样的查询方式只是参数不同的时候：SELECT * FROM t_user WHERE 1=1 AND (id = 1 OR id =2 OR id = 3)，可以使用foreach来记性sql拼接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sql &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;query_ids&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;ids != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
                SELECT * FROM t_user WHERE 1=1 AND (id = 1 OR id =2 OR id = 3)
                cilleation: 指定的是输入参数集合的属性名
                item:每次遍历的名称
                open:开始遍历时拼接串
                close:结束遍历时候拼接的串
                separator:遍历的两个对象中间需要拼接的串
            &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;collection&lt;/span&gt;&lt;span&gt;=&quot;ids&quot;&lt;/span&gt;&lt;span&gt; item&lt;/span&gt;&lt;span&gt;=&quot;item_id&quot;&lt;/span&gt;&lt;span&gt; open&lt;/span&gt;&lt;span&gt;=&quot;AND (&quot;&lt;/span&gt;&lt;span&gt; close&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt; separator&lt;/span&gt;&lt;span&gt;=&quot; OR &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                id=#{item_id}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 然后将上面的Sql片段加入响应的statment中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserByIds&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;userVo&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;userPoJo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM t_user
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;refid&lt;/span&gt;&lt;span&gt;=&quot;query_ids&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 测试结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129183844319-1997405438.png&quot; alt=&quot;&quot; width=&quot;744&quot; height=&quot;67&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 09 Feb 2019 15:32:00 +0000</pubDate>
<dc:creator>风沙迷了眼</dc:creator>
<og:description>一、输入映射 我们通过配置parameterType的值来指定输入参数的类型，这些类型可以是简单数据类型、POJO、HashMap等数据类型 1、简单类型 2、POJO包装类型 ①这是单表查询的时候传</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fsmly/p/10335456.html</dc:identifier>
</item>
<item>
<title>算法训练 K好数（C/C++）AC码 - 狼之殇</title>
<link>http://www.cnblogs.com/bencky/p/10358487.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bencky/p/10358487.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;蓝桥杯　　算法训练　K好数　AC码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;题目要求：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;21&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;算法训练　　K好数&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;问题描述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果一个自然数N的K进制表示中任意的相邻的两位都不是相邻的数字，那么我们就说这个数是K好数。求L位K进制数中K好数的数目。例如K = 4，L = 2的时候，所有K好数为11、13、20、22、30、31、33 共7个。由于这个数目很大，请你输出它对1000000007取模后的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;输入格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;输入包含两个正整数，K和L。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;输出格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;输出一个整数，表示答案对1000000007取模后的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;样例输入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4 2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;样例输出&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据规模与约定&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于30%的数据，KL &amp;lt;= 106；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于50%的数据，K &amp;lt;= 16， L &amp;lt;= 10；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于100%的数据，1 &amp;lt;= K,L &amp;lt;= 100。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;接下来是代码，每一步的思路都在代码注释中。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#include &amp;lt;stdio.h&amp;gt;                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;AC码——Accept &lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; mod 1000000007
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; dp[&lt;span&gt;105&lt;/span&gt;][&lt;span&gt;105&lt;/span&gt;]={&lt;span&gt;0&lt;/span&gt;};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化dp数组     105——数量级在100以内 &lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; k,l;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进制 k 位数 l  &lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i,j,x;
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;k,&amp;amp;&lt;span&gt;l);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;k;i++&lt;span&gt;)
        dp[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;][i]=&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单独考虑 L=1 位时候的情况&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=l;i++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;k;j++)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第i层0~k循环 &lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;(x=&lt;span&gt;0&lt;/span&gt;;x&amp;lt;k;x++)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第i-1层满足条件的数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(x!=j-&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;x!=j+&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据题意，本位的数字与前面的数字是不能相邻的&lt;/span&gt;
&lt;span&gt;                {
                    dp[i][j]&lt;/span&gt;+=dp[i-&lt;span&gt;1&lt;/span&gt;][x];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;累计符合方案数 &lt;/span&gt;
                    dp[i][j]%=mod;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次取模比最后取模好 &lt;/span&gt;
&lt;span&gt;                }
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; sum=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;k;i++&lt;span&gt;)
    {
        sum&lt;/span&gt;+=dp[l][i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所有方案数加起来 &lt;/span&gt;
        sum%=mod;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最后取模 &lt;/span&gt;
&lt;span&gt;    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,sum);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 09 Feb 2019 15:09:00 +0000</pubDate>
<dc:creator>狼之殇</dc:creator>
<og:description>蓝桥杯 算法训练　K好数　AC码 题目要求： 算法训练 K好数 问题描述 如果一个自然数N的K进制表示中任意的相邻的两位都不是相邻的数字，那么我们就说这个数是K好数。求L位K进制数中K好数的数目。例如</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bencky/p/10358487.html</dc:identifier>
</item>
<item>
<title>Spring Cloud Alibaba基础教程：Nacos配置的多文件加载与共享配置 - 程序猿DD</title>
<link>http://www.cnblogs.com/didispace/p/10358157.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/didispace/p/10358157.html</guid>
<description>&lt;p&gt;前情回顾：&lt;/p&gt;
&lt;p&gt;对于Nacos作为配置中心的使用，通过之前的几篇博文，我们已经介绍了如何在Nacos中创建配置内容、Nacos配置内容与Spring应用配置之间的对应关系以及实战中多环境下的配置管理方案。&lt;/p&gt;
&lt;p&gt;但是，我们实际应用过程中还会经常碰到这样的问题：有时候我们会对应用的配置根据具体作用做一些拆分，存储在不同的配置文件中，除了归类不同的配置之外，也可以便于共享配置给不同的应用。对于这样的需求，Nacos也可以很好的支持，下面就来具体介绍一下，当使用Nacos时，我们如何加载多个配置，以及如何共享配置。&lt;/p&gt;
&lt;h2 id=&quot;加载多个配置&quot;&gt;加载多个配置&lt;/h2&gt;
&lt;p&gt;通过之前的学习，我们已经知道Spring应用对Nacos中配置内容的对应关系是通过下面三个参数控制的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;spring.cloud.nacos.config.prefix&lt;/li&gt;
&lt;li&gt;spring.cloud.nacos.config.file-extension&lt;/li&gt;
&lt;li&gt;spring.cloud.nacos.config.group&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;默认情况下，会加载&lt;code&gt;Data ID=${spring.application.name}.properties&lt;/code&gt;，&lt;code&gt;Group=DEFAULT_GROUP&lt;/code&gt;的配置。&lt;/p&gt;
&lt;p&gt;假设现在有这样的一个需求：我们想要对所有应用的Actuator模块以及日志输出做统一的配置管理。所以，我们希望可以将Actuator模块的配置放在独立的配置文件&lt;code&gt;actuator.properties&lt;/code&gt;文件中，而对于日志输出的配置放在独立的配置文件&lt;code&gt;log.properties&lt;/code&gt;文件中。通过拆分这两类配置内容，希望可以做到配置的共享加载与统一管理。&lt;/p&gt;
&lt;p&gt;这时候，我们只需要做以下两步，就可以实现这个需求：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步&lt;/strong&gt;：在Nacos中创建&lt;code&gt;Data ID=actuator.properties&lt;/code&gt;，&lt;code&gt;Group=DEFAULT_GROUP&lt;/code&gt;和&lt;code&gt;Data ID=log.properties&lt;/code&gt;，&lt;code&gt;Group=DEFAULT_GROUP&lt;/code&gt;的配置内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/626506/201902/626506-20190209221434493-1814029328.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;：在Spring Cloud应用中通过使用&lt;code&gt;spring.cloud.nacos.config.ext-config&lt;/code&gt;参数来配置要加载的这两个配置内容，比如：&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;spring.cloud.nacos.config.ext-config[0].data-id=actuator.properties
spring.cloud.nacos.config.ext-config[0].group=DEFAULT_GROUP
spring.cloud.nacos.config.ext-config[0].refresh=true
spring.cloud.nacos.config.ext-config[1].data-id=log.properties
spring.cloud.nacos.config.ext-config[1].group=DEFAULT_GROUP
spring.cloud.nacos.config.ext-config[1].refresh=true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，&lt;code&gt;spring.cloud.nacos.config.ext-config&lt;/code&gt;配置是一个数组List类型。每个配置中包含三个参数：&lt;code&gt;data-id&lt;/code&gt;、&lt;code&gt;group&lt;/code&gt;，&lt;code&gt;refresh&lt;/code&gt;；前两个不做赘述，与Nacos中创建的配置相互对应，&lt;code&gt;refresh&lt;/code&gt;参数控制这个配置文件中的内容时候支持自动刷新，默认情况下，只有默认加载的配置才会自动刷新，对于这些扩展的配置加载内容需要配置该设置时候才会实现自动刷新。&lt;/p&gt;
&lt;h2 id=&quot;共享配置&quot;&gt;共享配置&lt;/h2&gt;
&lt;p&gt;通过上面加载多个配置的实现，实际上我们已经可以实现不同应用共享配置了。但是Nacos中还提供了另外一个便捷的配置方式，比如下面的设置与上面使用的配置内容是等价的：&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;spring.cloud.nacos.config.shared-dataids=actuator.properties,log.properties
spring.cloud.nacos.config.refreshable-dataids=actuator.properties,log.properties&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;spring.cloud.nacos.config.shared-dataids&lt;/code&gt;参数用来配置多个共享配置的&lt;code&gt;Data Id&lt;/code&gt;，多个的时候用用逗号分隔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring.cloud.nacos.config.refreshable-dataids&lt;/code&gt;参数用来定义哪些共享配置的&lt;code&gt;Data Id&lt;/code&gt;在配置变化时，应用中可以动态刷新，多个&lt;code&gt;Data Id&lt;/code&gt;之间用逗号隔开。如果没有明确配置，默认情况下所有共享配置都不支持动态刷新&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;配置加载的优先级&quot;&gt;配置加载的优先级&lt;/h2&gt;
&lt;p&gt;当我们加载多个配置的时候，如果存在相同的key时，我们需要深入了解配置加载的优先级关系。&lt;/p&gt;
&lt;p&gt;在使用Nacos配置的时候，主要有以下三类配置：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A: 通过&lt;code&gt;spring.cloud.nacos.config.shared-dataids&lt;/code&gt;定义的共享配置&lt;/li&gt;
&lt;li&gt;B: 通过&lt;code&gt;spring.cloud.nacos.config.ext-config[n]&lt;/code&gt;定义的加载配置&lt;/li&gt;
&lt;li&gt;C: 通过内部规则（&lt;code&gt;spring.cloud.nacos.config.prefix&lt;/code&gt;、&lt;code&gt;spring.cloud.nacos.config.file-extension&lt;/code&gt;、&lt;code&gt;spring.cloud.nacos.config.group&lt;/code&gt;这几个参数）拼接出来的配置&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;要弄清楚这几个配置加载的顺序，我们从日志中也可以很清晰的看到，我们可以做一个简单的实验：&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;spring.cloud.nacos.config.ext-config[0].data-id=actuator.properties
spring.cloud.nacos.config.ext-config[0].group=DEFAULT_GROUP
spring.cloud.nacos.config.ext-config[0].refresh=true

spring.cloud.nacos.config.shared-dataids=log.properties
spring.cloud.nacos.config.refreshable-dataids=log.properties&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据上面的配置，应用分别会去加载三类不同的配置文件，启动应用的时候，将会在日志中看到如下输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2019-02-08 21:23:02.665  INFO 63804 --- [main] o.s.c.a.n.c.NacosPropertySourceBuilder   : Loading nacos data, dataId: 'log.properties', group: 'DEFAULT_GROUP'
2019-02-08 21:23:02.671  INFO 63804 --- [main] o.s.c.a.n.c.NacosPropertySourceBuilder   : Loading nacos data, dataId: 'actuator.properties', group: 'DEFAULT_GROUP'
2019-02-08 21:23:02.677  INFO 63804 --- [main] o.s.c.a.n.c.NacosPropertySourceBuilder   : Loading nacos data, dataId: 'alibaba-nacos-config-client.properties', group: 'DEFAULT_GROUP'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后面加载的配置会覆盖之前加载的配置，所以优先级关系是：&lt;code&gt;A &amp;lt; B &amp;lt; C&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;h2 id=&quot;代码示例&quot;&gt;代码示例&lt;/h2&gt;
&lt;p&gt;本文示例读者可以通过查看下面仓库的中的&lt;code&gt;alibaba-nacos-config-client&lt;/code&gt;项目：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果您对这些感兴趣，欢迎star、follow、收藏、转发给予支持！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;以下专题教程也许您会有兴趣&quot;&gt;以下专题教程也许您会有兴趣&lt;/h2&gt;
</description>
<pubDate>Sat, 09 Feb 2019 14:15:00 +0000</pubDate>
<dc:creator>程序猿DD</dc:creator>
<og:description>前情回顾： '《Spring Cloud Alibaba基础教程：使用Nacos实现服务注册与发现》' '《Spring Cloud Alibaba基础教程：支持的几种服务消费方式》' '《Sprin</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/didispace/p/10358157.html</dc:identifier>
</item>
<item>
<title>Python爬虫入门这一篇就够了 - 初一丶</title>
<link>http://www.cnblogs.com/wyl-0120/p/10358086.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyl-0120/p/10358086.html</guid>
<description>&lt;h2 id=&quot;h&quot;&gt;何谓爬虫&lt;/h2&gt;
&lt;p&gt;所谓爬虫，就是按照一定的规则，自动的从网络中抓取信息的程序或者脚本。万维网就像一个巨大的蜘蛛网，我们的爬虫就是上面的一个蜘蛛，不断的去抓取我们需要的信息。&lt;/p&gt;
&lt;h2 id=&quot;h-1&quot;&gt;爬虫三要素&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;抓取&lt;/li&gt;
&lt;li&gt;分析&lt;/li&gt;
&lt;li&gt;存储&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h-2&quot;&gt;基础的抓取操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、urllib&lt;/strong&gt;&lt;br/&gt;在Python2.x中我们可以通过urllib 或者urllib2 进行网页抓取，但是再Python3.x 移除了urllib2。只能通过urllib进行操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import urllib.request

response = urllib.request.urlopen('https://blog.csdn.net/weixin_43499626')
print(response.read().decode('utf-8'))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;带参数的urllib&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
url = 'https://blog.csdn.net/weixin_43499626'
url = url + '?' + key + '=' + value1 + '&amp;amp;' + key2 + '=' + value2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、requests&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;requests库是一个非常实用的HTPP客户端库，是抓取操作最常用的一个库。Requests库满足很多需求&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests
# get请求
response = requests.get(url='https://blog.csdn.net/weixin_43499626')  
print(response.text)   #打印解码后的返回数据
# 带参数的requests get请求
response = requests.get(url='https://blog.csdn.net/weixin_43499626', params={'key1':'value1', 'key2':'value2'}) 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;h-3&quot;&gt;需要登录的情况下&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、表单提交登录&lt;/strong&gt;&lt;br/&gt;向服务器发送一个post请求并携带相关参数，将服务器返回的cookie保存在本地,cookie是服务器在客户端上的“监视器”，记录了登录信息等。客户端通过识别请求携带的cookie，确定是否登录&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
params = {'username': 'root', 'passwd': 'root'}
response = requests.post(&quot;http:xxx.com/login&quot;, data=params)
for key,value in response.cookies.items():
    print('key = ', key + ' ||| value :'+ value)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、cookie登录&lt;/strong&gt;&lt;br/&gt;我们可以将登录的cookie存储在文件中，&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import urllib.request
import http.cookiejar
&quot;&quot;&quot;
保存登录的cookie
&quot;&quot;&quot;
&quot;&quot;&quot;
MozillaCookieJar ： cookiejar的子类
从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。
&quot;&quot;&quot;
cookie = http.cookiejar.MozillaCookieJar('cookie.txt')
# 构建一个cookie的处理器
handler = urllib.request.HTTPCookieProcessor(cookie)
# 获取一个opener对象
opener = urllib.request.build_opener(handler)
# # 获取一个请求对象
request = urllib.request.Request('http://flights.ctrip.com/',headers={&quot;Connection&quot;: &quot;keep-alive&quot;})
# 请求服务器，获取响应对象。cookie会在response里一起响应
response = opener.open(request)
# 保存cookie到文件
cookie.save(ignore_discard=True, ignore_expires=True)


&quot;&quot;&quot;
请求携带文件中的cookie
&quot;&quot;&quot;

import urllib.request
import http.cookiejar
cookie = http.cookiejar.MozillaCookieJar()
cookie.load('cookie.txt', ignore_discard=True, ignore_expires=True)
handler = urllib.request.HTTPCookieProcessor(cookie)
opener = urllib.request.build_opener(handler)
request = urllib.request.Request('http://flights.ctrip.com/')
html = opener.open(request).read().decode('gbk')

print(html)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-4&quot;&gt;常见的反爬有哪些&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、通过user-agent来控制访问&lt;/strong&gt;&lt;br/&gt;user-agent能够使服务器识别出用户的操作系统及版本、cpu类型、浏览器类型和版本。很多网站会设置user-agent白名单，只有在白名单范围内的请求才能正常访问。所以在我们的爬虫代码中需要设置user-agent伪装成一个浏览器请求。有时候服务器还可能会校验Referer，所以还可能需要设置Referer(用来表示此时的请求是从哪个页面链接过来的)&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 设置请求头信息
headers = {
        'Host': 'https://blog.csdn.net',
        'Referer': 'https://blog.csdn.net/weixin_43499626/article/details/85875090',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'
    }
response = requests.get(&quot;http://www.baidu.com&quot;, headers=headers) 
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;如下是CSDN中的Request Header中的信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
accept: */*
accept-encoding: gzip, deflate, br
accept-language: zh-CN,zh;q=0.9
content-length: 0
cookie: bdshare_firstime=1500xxxxxxxx..............
origin: https://blog.csdn.net
referer: https://blog.csdn.net/weixin_43499626/article/details/85875090
user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36
x-requested-with: XMLHttpRequest
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、通过IP来限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们用同一个ip多次频繁访问服务器时，服务器会检测到该请求可能是爬虫操作。因此就不能正常的响应页面的信息了。&lt;br/&gt;解决办法常用的是使用IP代理池。网上就有很多提供代理的网站、&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
proxies = {
  &quot;http&quot;: &quot;http://119.101.125.56&quot;,
  &quot;https&quot;: &quot;http://119.101.125.1&quot;,
}
response = requests.get(&quot;http://www.baidu.com&quot;, proxies=random.choices(proxies)) 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3、设置请求间隔&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import time
time.sleep(1)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4、自动化测试工具Selenium&lt;/strong&gt;&lt;br/&gt;Web应用程序测试的Selenium工具。该工具可以用于单元测试，集成测试，系统测试等等。它可以像真正的用户一样去操作浏览器(包括字符填充、鼠标点击、获取元素、页面切换)，支持Mozilla Firefox、Google、Chrome、Safari、Opera、IE等等浏览器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、参数通过加密&lt;/strong&gt;&lt;br/&gt;某些网站可能会将参数进行某些加密，或者对参数进行拼接发送给服务器，以此来达到反爬虫的目的。这个时候我们可以试图通过js代码，查看破解的办法。&lt;br/&gt;连接xxx&lt;br/&gt;或者可以使用&quot;PhantomJS&quot;,PhantomJS是一个基于Webkit的&quot;无界面&quot;(headless)浏览器，它会把网站加载到内存并执行页面上的JavaScript，因为不会展示图形界面，所以运行起来比完整的浏览器更高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、通过robots.txt来限制爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;robots.txt是一个限制爬虫的规范，该文件是用来声明哪些东西不能被爬取。如果根目录存在该文件，爬虫就会按照文件的内容来爬取指定的范围。&lt;/p&gt;
&lt;p&gt;浏览器访问https://www.taobao.com/robots.txt&lt;br/&gt;可以查看淘宝的robots.txt文件&lt;br/&gt;部分内容如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
User-&lt;span&gt;agent:  Baiduspider
Disallow:  &lt;/span&gt;/product/&lt;span&gt;
Disallow:  &lt;/span&gt;/&lt;span&gt;

User&lt;/span&gt;-&lt;span&gt;Agent:  Googlebot
Disallow:  &lt;/span&gt;/&lt;span&gt;

User&lt;/span&gt;-&lt;span&gt;agent:  Bingbot
Disallow:  &lt;/span&gt;/&lt;span&gt;

User&lt;/span&gt;-&lt;span&gt;Agent:  360Spider
Disallow:  &lt;/span&gt;/&lt;span&gt;

User&lt;/span&gt;-&lt;span&gt;Agent:  Yisouspider
Disallow:  &lt;/span&gt;/&lt;span&gt;

User&lt;/span&gt;-&lt;span&gt;Agent:  Sogouspider
Disallow:  &lt;/span&gt;/&lt;span&gt;

User&lt;/span&gt;-&lt;span&gt;Agent:  Yahoo!  Slurp
Disallow:  &lt;/span&gt;/&lt;span&gt;

User&lt;/span&gt;-Agent:  *&lt;span&gt;
Disallow:  &lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出淘宝拒绝了百度爬虫、谷歌爬虫、必应爬虫、360爬虫、神马爬虫，搜狗爬虫、雅虎爬虫等约束。&lt;/p&gt;
&lt;h2 id=&quot;h-5&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;我们可以分析爬取的网页内容，获得我们真正需要的数据，常用的有正则表达式，BeautifulSoup,XPath、lxml等&lt;/p&gt;
&lt;p&gt;正则表达式是进行内容匹配，将符合要求的内容全部获取；&lt;br/&gt;xpath()能将字符串转化为标签，它会检测字符串内容是否为标签，但是不能检测出内容是否为真的标签；&lt;br/&gt;Beautifulsoup是Python的一个第三方库，它的作用和 xpath 作用一样，都是用来解析html数据的相比之下，xpath的速度会快一点，因为xpath底层是用c来实现的&lt;/p&gt;
&lt;h2 id=&quot;h-6&quot;&gt;存储&lt;/h2&gt;
&lt;p&gt;通过分析网页内容，获取到我们想要的数据，我们可以选择存到文本文件中，亦可以存储在数据库中，常用的数据库有MySql、MongoDB&lt;/p&gt;
&lt;p&gt;存储为json文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import json

dictObj = {
    '小明':{
        'age': 15,
        'city': 'beijing',
    },
    '汤姆': {
        'age': 16,
        'city': 'guangzhou',
    }
}

jsObj = json.dumps(dictObj, ensure_ascii=False)
fileObject = open('jsonFile.json', 'w')
fileObject.write(jsObj)
fileObject.close()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;存储为cvs文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import csv
with open('student.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['姓名', '年龄', '城市'])
    writer.writerows([['小明', 15 , '北京'],['汤姆', 16, '广州']])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;存储到Mongo&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# mongo服务
client = pymongo.MongoClient('mongodb://127.0.0.1:27017/')
# test数据库
db = client.test
# student表,没有自动创建
student_db = db.student
student_json = {
    'name': '小明',
    'age': 15,
    'city': '北京'
}
student_db.insert(student_json)
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;欢迎关注我的公众号：程序员共成长&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 公众号内回复【礼包】，获取程序员专属资料，包括但不限于Java、Python、Linux、数据库、大数据、架构、测试、前端、ui以及各方向电子书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1457234/201901/1457234-20190123131533799-1967100441.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;/&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 09 Feb 2019 13:38:00 +0000</pubDate>
<dc:creator>初一丶</dc:creator>
<og:description>何谓爬虫 所谓爬虫，就是按照一定的规则，自动的从网络中抓取信息的程序或者脚本。万维网就像一个巨大的蜘蛛网，我们的爬虫就是上面的一个蜘蛛，不断的去抓取我们需要的信息。 爬虫三要素 抓取 分析 存储 基础</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyl-0120/p/10358086.html</dc:identifier>
</item>
<item>
<title>朱晔的互联网架构实践心得S2E4：小议微服务的各种玩法（古典、SOA、传统、K8S、ServiceMesh） - lovecindywang</title>
<link>http://www.cnblogs.com/lovecindywang/p/10358064.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lovecindywang/p/10358064.html</guid>
<description>&lt;p&gt;十几年前就有一些公司开始践行服务拆分以及SOA，六年前有了微服务的概念，于是大家开始思考SOA和微服务的关系和区别。最近三年Spring Cloud的大火把微服务的实践推到了高潮，而近两年K8S在容器编排的地位确定之后大家又开始实践起以K8S为核心的云原生思想和微服务的结合如何去落地，2018年又多出一个ServiceMesh服务网格的概念，大家又在思考如何引入落地ServiceMesh，ServiceMesh和K8S以及Spring Cloud的关系如何等等。&lt;/p&gt;
&lt;p&gt;确实有点乱了，这一波又一波的热潮，几乎每两年都会来一波有关微服务架构理念和平台，许多公司还没完成微服务的改造就又提出了服务+容器道路，又有一些公司打算从微服务直接升级成ServiceMesh。本文尝试总结一下我见过的或实践过的一些微服务落地方式，并且提出一些自己的观点，希望抛砖引玉，大家可以畅谈一下自己公司的微服务落地方式。&lt;/p&gt;
&lt;h2 id=&quot;微服务v0.1古典玩法&quot;&gt;1、微服务v0.1——古典玩法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/9/168d26f166db9d3d?w=569&amp;amp;h=252&amp;amp;f=png&amp;amp;s=18343&quot;/&gt;&lt;br/&gt;（图中灰色部分代表元数据存储区域，也就是Service和Endpoint关系所保存的地方，之后所有的图都是这样）&lt;/p&gt;
&lt;p&gt;其实在2006年在使用.NET Remoting做服务拆分的时候（其实当时我们没有意识到这叫服务拆分，这是打算把一些逻辑使用独立的进程来承载，以Windows服务形式安装在不同服务器上分散压力），我们使用了F5来做服务的负载均衡。没有所谓的服务发现，针对每一个服务，我们直接在程序配置文件中写死F5的IP地址和端口，使用Excel来记录所有服务在F5的端口地址以及服务实际部署的IP:端口，然后在F5进行配置。F5在这里做了负载均衡、简单的路由策略（相同的客户端总是优先路由到相同的后端）以及简单的白名单策略等等。&lt;/p&gt;
&lt;h2 id=&quot;微服务v0.2改进版古典玩法&quot;&gt;2、微服务v0.2——改进版古典玩法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/9/168d26f86b9b6551?w=582&amp;amp;h=404&amp;amp;f=png&amp;amp;s=31101&quot;/&gt;&lt;br/&gt;之后尝试过这种改进版的古典玩法。相比v0.1的区别是，不再使用硬件F5了，而是使用几组软件反向代理服务器，比如Nginx来做服务负载均衡（如果是TCP的负载均衡的话可以选择HaProxy），Nginx的配置会比F5更方便而且还不花钱。由于生产环境Nginx可能是多组，客户端不在配置文件中写死Nginx地址而是把地址放到了配置中心去，而Nginx的配置由源码仓库统一管理，运维通过文件同步方式或其它方式从源码仓库拉取配置文件下发到不同的Nginx集群做后端服务的配置（Nginx的配置也不一定需要是一个大文件放所有的配置，可以每一组服务做一个配置文件更清晰）。&lt;/p&gt;
&lt;p&gt;虽然我的标题说这是古典玩法，但是可以说很多公司如果没有上RPC，没有上Spring Cloud，也没有上K8S的话很可能就是这样的玩法。无论是v0.2还是v0.1，本质上服务是固定在虚拟机或实体机部署的，如果需要扩容，需要迁移，那么肯定需要修改反向代理或负载均衡器的配置。少数情况下，如果调整了反向代理或负载均衡器的IP地址，那么还可能会需要修改客户端的配置。&lt;/p&gt;
&lt;h2 id=&quot;微服务v0.5soa-esb玩法&quot;&gt;3、微服务v0.5——SOA ESB玩法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/9/168d26ed47dd2716?w=659&amp;amp;h=300&amp;amp;f=png&amp;amp;s=26558&quot;/&gt;&lt;br/&gt;SOA的一个特点是使用了服务总线，服务总线承担了服务的发现、路由、协议转换、安全控制、限流等等。2012年我参与了一个大型MMO游戏《激战2》项目的技术整合工作，这个游戏整个服务端就是这种架构。它有一个叫做Portal的服务总线，所有游戏的十几个子服务都会把自己注册到服务总线，不管是什么服务需要调用什么接口，都是在调用服务总线，由服务总线来进行服务的寻址路由和协议转换，服务总线也会做服务的精细化限流，每一个用户都有自己的服务请求队列。这种架构的好处是简单，服务总线承担了所有工作，但是服务总线的压力很大，承担了所有的服务转发工作。同时需要考虑服务总线本身如何进行扩容，如果服务总线是有状态的，显然要进行扩容不是这么简单。对于游戏服务器来说，扩容可能不是一个强需求，因为游戏服务天然会按照大区进行分流，一个大区的最大人数上限是固定的。&lt;/p&gt;
&lt;p&gt;貌似互联网公司这样玩的不多，传统企业或是游戏服务端是比较适合服务总线这种架构的，如果服务和服务之间的协议不统一的话，要在客户端做协议转换的工作比较痛苦，如果可以由统一的中间层接入所有协议统一进行转换的话，客户端会比较轻量，但是这种架构的很大问题在于服务总线的扩容和可靠性。&lt;/p&gt;
&lt;h2 id=&quot;微服务v1.0传统服务框架玩法&quot;&gt;4、微服务v1.0——传统服务框架玩法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/9/168d26e3cd0d1fc4?w=523&amp;amp;h=446&amp;amp;f=png&amp;amp;s=31503&quot;/&gt;&lt;br/&gt;上图是大多数RPC框架的架构图。大多数早期的微服务实践都是RPC的方式，最近几年Spring Cloud盛行后其实Spring Cloud的玩法也差不多，只是Spring Cloud推崇的是JSON over HTTP的RESTful接口，而大多数RPC框架是二进制序列化over TCP的玩法（也有JSON over HTTP的RPC）。&lt;/p&gt;
&lt;p&gt;其实RPC框架我个人喜欢JSON over HTTP，虽然我们知道HTTP和JSON序列化性能肯定不如一些精简的二进制序列化+TCP，但是优点是良好的可读性、测试方便、客户端开发方便，而且我不认为15000的QPS和20000的QPS对于一般应用有什么区别。&lt;/p&gt;
&lt;p&gt;总的来说，我们会有一个集群化的分布式配置中心来充当服务注册的存储，比如ZK、Consul、Eureka或etcd。我们的服务框架会有客户端和服务端部分，客户端部分会提供服务的发现、软负载、路由、安全、策略控制等功能（可能也会通过插件形式包含Metrics、Logging、Tracing、Resilience等功能），服务端部分对于RPC框架会做服务的调用也会辅助做一些安全、策略控制，对于RESTful的话就服务端一般除了监控没有额外的功能。&lt;/p&gt;
&lt;p&gt;比如使用Spring Cloud来玩，那么：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Service Discovery：Eureka、Open Feign&lt;/li&gt;
&lt;li&gt;Load Balancing：Ribbon、Spring Cloud LoadBalancer&lt;/li&gt;
&lt;li&gt;Metrics：Micrometer、Spring Boot Actuator&lt;/li&gt;
&lt;li&gt;Resilience：Hystrix、Resilience4j&lt;/li&gt;
&lt;li&gt;Tracing：Sleuth、Zipkin&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在之前《朱晔和你聊Spring系列S1E8：凑活着用的Spring Cloud（含一个实际业务贯穿所有组件的完整例子）》一文中，我有一个完整的例子介绍过Spring Cloud的这套玩法，可以说的确Spring Cloud给了我们构建一套微服务体系最基本的东西，我们只需要进行一些简单的扩展和补充，比如灰度功能，比如更好的配置服务，就完全可以用于生产。&lt;br/&gt;这种模式和之前0.x的很大区别是，服务的注册有一个独立的组件，注册中心完成，通过配合客户端类库的服务发现，至少服务的扩容很轻松，扩容后也不需要手动维护负载均衡器的配置，相当于服务端从死到活的一个重大转变。而且在1.0的时代，我们更多看到了服务治理的部分，开始意识到成百上千的服务，如果没有Metrics、Logging、Tracing、Resilience等功能来辅助的话，微服务就是一个灾难。&lt;/p&gt;
&lt;p&gt;Spring Cloud已经出了G版了，表示Netflix那套已经进入了维护模式，许多程序员表示表示扶我起来还能学。我认为Spring Cloud这个方向其实是挺对的，先有开源的东西来填补空白，慢慢再用自己的东西来替换，但是开发比较苦，特别是一些公司基于Spring Cloud辛苦二次开发的框架围绕了Netflix那套东西来做的会比较痛苦。总的来说，虽然Spring Cloud给人的感觉很乱，变化很大，大到E到G版的升级不亚于在换框架，而且组件质量层次不齐，但是它确实是一无所有的创业公司能够起步微服务的不多的选择之一。如果没有现成的框架（不是说RPC框架，RPC框架虽是微服务功能的80%重点，但却是代码量20%的部分，工作量最大的是治理和整合那套），基于Spring Cloud起步微服务，至少你可以当天起步，1个月完成适合自己公司的二次开发改造。&lt;/p&gt;
&lt;h2 id=&quot;微服务v2.0容器k8s容器调度玩法&quot;&gt;5、微服务v2.0——容器+K8S容器调度玩法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/9/168d26de95bf8800?w=623&amp;amp;h=476&amp;amp;f=png&amp;amp;s=35478&quot;/&gt;&lt;br/&gt;K8S或者说容器调度平台的引入是比较革命性的，容器使得我们的微服务对环境的依赖可以打包整合进行随意分发，这是微服务节点可以任意调度的基础，调度平台通过服务的分类和抽象，使得微服务本身的部署和维护实现自动化，以及实现更上一层楼的自动伸缩。在1.x时代，服务可以进行扩缩容，但是一切都需要人工介入，在2.x时代，服务本身在哪里存在甚至有多少实例存在并不重要，重要的只是我们有多少资源，希望服务的SLA是怎么样的，其余留给调度平台来调度。&lt;/p&gt;
&lt;p&gt;如果说1.0时代大家纠结过Dubbo还是Spring Cloud，2.0时代我相信也有一些公司上过Mesos的“贼船”，我们不是先知很难预测什么框架什么技术会在最后存活下来，但是这却是也给技术带来了不少痛苦，相信还是有不少公司在干Mesos转K8S的事情。&lt;/p&gt;
&lt;p&gt;如果引入了K8S，那么服务发现可以由K8S来做，不一定需要Eureka。我们可以为Pod创建Service，通过Cluster虚拟IP的方式（如上图所示，通过IP tables）路由到Pod IP来做服务的路由（除了Cluster IP方式也有的人对于内部连接会采用Ingress方式去做，路由方面会更强大，不过这是不是又类似v0.2了呢？）。当然，我们还可以更进一步引入内部DNS，使用内部域名解析成Cluster IP，客户端在调用服务的时候直接使用域名（域名可以通过配置服务来配置，也可以直接读取环境变量）即可。如果这么干的话其实就没有Eureka啥事了，有的公司没有选择这种纯K8S服务路由的方式还是使用了注册中心，如果这样的话其实服务注册到注册中心的就是Pod IP，还是由微服务客户端做服务发现的工作。我更喜欢这种方式，我觉得K8S的服务发现还是弱了一点，而且IP tables的方式让人没有安全感（IPVS应该是更好的选择），与其说是服务发现，我更愿意让K8S只做容器调度的工作以及Pod发现的工作。&lt;/p&gt;
&lt;p&gt;虽然K8S可以做一部分服务发现的工作，我们还是需要在客户端中去实现更多的一些弹力方面的功能，因此我认为2.0时代只是说是微服务框架结合容器、容器调度，而不能是脱离微服务框架本身完全依靠K8S实现微服务。2.0和1.0的本质区别或者说增强还是很明显，那就是我们可以全局来统筹解决我们的微服务部署和可靠性问题，在没有容器和容器调度这层抽象之前，有的公司通过实现自动化虚拟机分配拉起，加上自动化初始脚本来实现自动的微服务调度扩容，有类似的意思，但是非常花时间而且速度慢。K8S真正让OPS成为了DEV而不是执行者，让OPS站在总体架构的层面通过DEV（咱不能说开发DSL文件不算开发吧）资源和资源之间的关系来统筹整个集群。在只有十几个微服务若干台服务器的小公司可能无法发挥2.0容器云的威力，但是服务器和服务一多，纯手工的命令式配置容易出错且难以管理，K8S真的释放了几十个运维人力。&lt;/p&gt;
&lt;h2 id=&quot;微服务v3.0servicemesh服务网格玩法&quot;&gt;6、微服务v3.0——ServiceMesh服务网格玩法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/9/168d26d2025b3af9?w=760&amp;amp;h=727&amp;amp;f=png&amp;amp;s=65585&quot;/&gt;&lt;br/&gt;在之前提到过几个问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;SOA的模式虽然简单，但是集中的Proxy在高并发下性能和扩容会是问题&lt;/li&gt;
&lt;li&gt;传统的RPC方式，客户端很重，做了很多工作，甚至协议转换都在客户端做，而且如果涉及到跨语言，那么RPC框架需要好几套客户端和服务端&lt;/li&gt;
&lt;li&gt;K8S虽然是一个重要的变革，但是在服务调度方面还是太弱了，它的专项在于资源调度&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;于是ServiceMesh服务网格的概念腾空而出，巧妙解决了这几个问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;采用边车模式的Proxy随服务本身部署，一服务一边车与服务共生死（当然，有的公司会使用类似ServiceBus的Global Proxy作为Sidecar Proxy的后备，防止服务活着Sidecar死了的情况）可以解决性能问题&lt;/li&gt;
&lt;li&gt;Sidecar里面做了路由、弹力等工作，客户端里可以啥都不干，如上图所示，上图是Istio的架构，Istio的理念是把ServiceMesh分成了数据面和控制面，数据面主要是负责数据传输，由智能代理负责（典型的组件是Envoy），控制面由三大组件构成，Pilot负责流量管理和配置（路由策略、授权策略）下发，Mixer负责策略和数据上报（遥测），Citadel用于密钥和证书管理&lt;/li&gt;
&lt;li&gt;由于我们双边都走Sidecar Proxy，我们对于流量的进出都可以做很细粒度的控制，这个控制力度是之前任何一种模式都无法比拟的，这种架构的方式就像把服务放到了网格之中，服务连接外部的通讯都由网格进行，服务本身轻量且只需要关注业务逻辑，网格功能强大而灵活&lt;/li&gt;
&lt;li&gt;对于Proxy的流量劫持可以使用IP table进行拦截，对于服务本身无感知，而且Sidecar可以自动注入Pod，和K8S进行自动整合，无需特殊配置，做到透明部署透明使用&lt;/li&gt;
&lt;li&gt;Pilot是平台无关的，采用适配器形式可以和多个平台做整合，如果和K8S整合的话，它会和API Server进行通讯，订阅服务、端点的信息，然后把信息转变成Istio自己的格式作为路由的元数据&lt;/li&gt;
&lt;li&gt;Mixer期望的是抽象底层的基础设施，不管是Logging还是Metrics、Tracing，在之前RPC时代的做法是客户端和服务端都会直接上报信息到InfluxDb、Tracing Server等，这让客户端变得很臃肿，Istio的理念是这部分对接后端的工作应该由统一的组件进行，不但使得Proxy可以更轻而且可以通过Plugin机制对接各种后端基础设施&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;说了这么多ServiceMesh的优势，我们来看一下这种模式的性能问题。想一下各种模式下客户端要请求服务端整个HTTP请求（跳）次数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;古典模式：2跳，代理转发一次&lt;/li&gt;
&lt;li&gt;SOA模式：2跳，总线转发一次&lt;/li&gt;
&lt;li&gt;传统模式：1跳，客户端直连服务端&lt;/li&gt;
&lt;li&gt;K8S Service模式：1跳（路由表会有一定损耗）&lt;/li&gt;
&lt;li&gt;ServiceMesh模式：3跳（其中2跳是localhost回环）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总的来说，3跳并不是ServiceMesh的瓶颈所在，而更多的可能性是Istio的倔强的架构理念。Istio认为策略和遥测不应该耦合在Sidecar Proxy应该放到Mixer，那么相当于在调用服务的时候还需要额外增加Mixer的同步请求（来获得策略方面的放行）。Istio也在一直优化这方面，比如为Mixer的策略在Proxy做本地缓存，为遥测数据做批量上报等等。虽然经过层层优化，但是Istio目前的TPS不足2000，还是和一般的RPC能达到的20000+有着十倍的差距，说不定将来Istio会有架构上的妥协，把Mixer变为非直接依赖，策略方面还是采用类似Pilot统一管理配置下发的方式，遥测方面还是由Sidecar直接上报数据到Mixer。&lt;/p&gt;
&lt;p&gt;我个人认为，ServiceMesh是一个非常正确的道路，而且ServiceMesh和K8S结合会更好，理由在于：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;K8S让资源调度变得自由，但微服务调度不是其所长也不应该由它深入实现&lt;/li&gt;
&lt;li&gt;以Istio为代表的ServiceMesh做了K8S少的，但是微服务又必须的那块工作&lt;/li&gt;
&lt;li&gt;Istio的设计方面和K8S极其相似，低耦合，抽象的很好，两者结合的也很好，我非常喜欢和赞同Agent+统一的资源管理配置下发的方式（K8S的Agent就是KubeProxy和Kubelet，Istio的Agent就是Sidecar Proxy），这是松耦合和高性能的平衡&lt;/li&gt;
&lt;li&gt;在复杂的异构环境下，多协议的内部通讯，跨平台跨语言的内部通讯很常见，如果采用传统方式，框架太胖太重，把这部分工作从内部剥离出来好处多多&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;但是，可以看到目前ServiceMesh还不算非常成熟，Istio在不断优化中，Linkerd 2.x也想再和Istio拼一下，到底谁会胜出还难以知晓，经过之前Dubbo vs Spring Cloud的折腾，Mesos vs K8S的折腾，VM vs Docker的折腾，是否还能经得起折腾Istio vs Linkerd 2呢？我建议还是再看一看，再等一等。&lt;/p&gt;
&lt;h2 id=&quot;畅想everything-mesh模式&quot;&gt;7、畅想Everything Mesh模式？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/9/168d26ba5bbee556?w=596&amp;amp;h=416&amp;amp;f=png&amp;amp;s=48131&quot;/&gt;&lt;br/&gt;之前看到过ShardingSphere受到ServiceMesh的理念影响提出了DB Mesh的架构。其实DB Proxy的中间件已经存在很多年了（集中化的Proxy类似服务总线的方式），DB Mesh把Proxy也变为轻量的Sidecar方式，DB的访问也都走本地代理。那么这里我也在想，是不是有可能所有东西都有本地的代理呢？&lt;/p&gt;
&lt;p&gt;作为应用服务本身而言，只需要和本地代理做通讯调用外部服务、缓存、数据库、消息队列，不需要关心服务和资源所在何地，以及背后的实际服务的组件形态。当然，这只是一个畅想了，对于有状态的资源，Mesh的难度很大，对于类似DB这样的资源因为调用层次并不复杂，也不太会存在异构场景，Mesh的意义不大，综合起来看Everything Mesh的投入产出比相比Service Mesh还是小很多。&lt;/p&gt;
&lt;h2 id=&quot;spring-cloudk8s和servicemesh的关系&quot;&gt;8、Spring Cloud、K8S和ServiceMesh的关系&lt;/h2&gt;
&lt;p&gt;如果搞Java微服务的话，Spring Boot是离不开的，但是是否要用Spring Cloud呢？我的观点是，在目前阶段如果没有什么更好的选择，还是应该先用。Spring Cloud和K8S首先并不是矛盾的东西，K8S是偏运维的，主要做资源整合和管理，如果彻底没有服务治理框架纯靠K8S的话会很累，而且功能不完整。开发和架构可以在Spring Cloud方面深耕，运维可以在容器和K8S方面发力，两套体系可以协作形成目前来说比较好的微服务基石。至于K8S的推行，这一定是一个正确的方向，而且和软件架构方面的改进工作一点不矛盾，毕竟K8S是脱离于具体语言和平台的。&lt;/p&gt;
&lt;p&gt;至于Service Mesh，它做的事情和Spring Cloud是有很多重复的，在将来Istio如果发展的更好的情况下，应该可以替代Spring Cloud，开发人员只需要用Spring Boot开发微服务即可，客户端方面也可以很瘦，不需要过多关心服务如何通讯和路由，服务的安全、通讯、治理、控制都由Service Mesh进行（但是，是否有了Sidecar，客户端真的完全不需要SDK了呢？我认为可能还是需要的，对于Tracing，如果没有客户端部分显然是不完整的，虽然Sidecar是localhost但是还是跨进程了）。&lt;/p&gt;
&lt;p&gt;Spring Cloud目前虽然针对K8S和Istio做了一些整合，但是并没看到一套针对ServiceMesh的最佳实践出来，是否将来Spring Cloud会在微服务这方面做退化给ServiceMesh让步还不得而知。总的来说，长期我看好Spring Boot + K8S + Istio的组合，短期我认为还是Spring Boot + K8S + Spring Cloud这么用着。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;9、总结&lt;/h2&gt;
&lt;p&gt;本文总结了各种微服务落地的形态，由于技术多样，各种理念层出不穷，造成了微服务的落地方式真的很难找到两家相同的公司，本文中我们介绍了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;客户端写死地址+F5代理的方式&lt;/li&gt;
&lt;li&gt;客户端把地址配置在配置服务+Nginx代理的方式&lt;/li&gt;
&lt;li&gt;SOA+集中式ESB的方式&lt;/li&gt;
&lt;li&gt;传统的具有注册中心的服务框架SDK形式&lt;/li&gt;
&lt;li&gt;服务框架+K8S方式&lt;/li&gt;
&lt;li&gt;K8S Service Iptables路由方式&lt;/li&gt;
&lt;li&gt;ServiceMesh代理3跳转发方式&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然，可能还会有更多的方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;内部DNS方式（直接DNS轮询）&lt;/li&gt;
&lt;li&gt;K8S内部服务走Ingress方式（内部服务也走Ingress，类似所有服务Nginx代理的方式）&lt;/li&gt;
&lt;li&gt;ServiceMesh代理2跳转发方式（可以根据需要跳过远端的Sidecar来提高性能等等）&lt;/li&gt;
&lt;li&gt;瘦服务框架SDK+ServiceMesh方式（也就是还是有一个小的SDK来对接ServiceMesh的Sidecar，而不是让应用程序自己发挥Http Client，这个方式的好处在于更灵活，这个SDK可以在这一层再做一次路由，甚至在Sidecar出问题的时候直接把流量切换出去，切换为直连远端或统一的Global Proxy）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;也可能很多公司在混用各种方式，具有N套服务注册中心，正在做容器化迁移，想想就头痛，微服务的理念层出不穷伴随着巨头之间的技术战役，苦的还是架构和开发，当然，运维可能也苦，2019新年快乐，Enjoy微服务！&lt;/p&gt;
</description>
<pubDate>Sat, 09 Feb 2019 13:27:00 +0000</pubDate>
<dc:creator>lovecindywang</dc:creator>
<og:description>十几年前就有一些公司开始践行服务拆分以及SOA，六年前有了微服务的概念，于是大家开始思考SOA和微服务的关系和区别。最近三年Spring Cloud的大火把微服务的实践推到了高潮，而近两年K8S在容器</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lovecindywang/p/10358064.html</dc:identifier>
</item>
<item>
<title>《SQL CookBook 》笔记-第一章-检索记录 - shanzm</title>
<link>http://www.cnblogs.com/shanzhiming/p/10357783.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanzhiming/p/10357783.html</guid>
<description>&lt;p&gt;第一章&lt;/p&gt;
&lt;p&gt;shanzm&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;检索所有行和列&quot;&gt;1.1检索所有行和列&lt;/h2&gt;
&lt;p&gt;问题：你有一张表，并且想查看表中的所有数据。&lt;/p&gt;
&lt;p&gt;解决方案1：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from EMP&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解决方案2：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; select empno,ename,job,sal,mgr,hiredate comm,deptno from EMP&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;建议使用方案2，因为别人看你的代码的时候不一定知道你查询的表里面的列，所以还是写出查询的具体列更方便阅读。其次从优化的角度来说，尽量避免“ select * ” 的存在，使用具体的列代替*，避免返回多余的列。&lt;/p&gt;
&lt;p&gt;【技巧】&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;查看SQL语句执行时间：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;set statistics time on

select * from EMP  
-- 注释：这里写你要测试执行时间的SQL语句

set statistics time off&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结束之后，从消息栏，可以查看&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SQL Server 执行时间:&lt;br/&gt;CPU 时间 = 0 毫秒，占用时间 = 0 毫秒。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;查看SQL语句查询时对I/0的操作情况&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;set statistics io on

select * from EMP
-- 注释：这里写你要测试的SQL语句

set statistics io of&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结束之后，从消息栏，可以查看:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;表 'EMP'。扫描计数 1，逻辑读取 1 次，物理读取 0 次，&lt;br/&gt;预读 0 次，lob 逻辑读取 0 次，lob 物理读取 0 次，lob 预读 0 次。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;&lt;h2 id=&quot;筛选行&quot;&gt;1.2筛选行&lt;/h2&gt;
&lt;p&gt;问题：你有一张表，并且只想查看满足指定条件的行。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br/&gt;使用 WHERE 子句指明保留哪些行。使用 WHERE 子句来筛选出我们感兴趣的行。如果 WHERE 子句的表达式针对某一行的判定结果为真，那么就会返回该行的数据。&lt;/p&gt;
&lt;p&gt;例如，下面的语句将查找部门编号为 10 的所有员工。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from EMP where DEPNO=10;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7782&lt;/td&gt;
&lt;td&gt;CLARK&lt;/td&gt;
&lt;td&gt;MANAGER&lt;/td&gt;
&lt;td&gt;7839&lt;/td&gt;
&lt;td&gt;1981-06-09 00:00:00.000&lt;/td&gt;
&lt;td&gt;2450&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7839&lt;/td&gt;
&lt;td&gt;KING&lt;/td&gt;
&lt;td&gt;PRESIDENT&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;1981-11-17 00:00:00.000&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7934&lt;/td&gt;
&lt;td&gt;MILLER&lt;/td&gt;
&lt;td&gt;CLERK&lt;/td&gt;
&lt;td&gt;7782&lt;/td&gt;
&lt;td&gt;1982-01-23 00:00:00.000&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr/&gt;&lt;h2 id=&quot;查找满足多个查询条件的行&quot;&gt;1.3查找满足多个查询条件的行&lt;/h2&gt;
&lt;p&gt;问题：你想返回满足多个查询条件的行。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br/&gt;使用带有 OR 和 AND 和圆括号（）的 WHERE 子句。&lt;/p&gt;
&lt;p&gt;例如，如果你想找出部门编号为 10 的所有员工、有奖金的所有员工以及部门编号是 20 且工资低于 2000 美元的所有员工。&lt;/p&gt;
&lt;p&gt;【分析】也就是要找满足以下三种情况之一的员工（注意不是要求同时满足）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;部门编号=10；&lt;/li&gt;
&lt;li&gt;奖金不为Null（&lt;strong&gt;注意不是：奖金！=0，因为我们在数据库中，对无奖金的，填写为NULL&lt;/strong&gt;）；&lt;/li&gt;
&lt;li&gt;部门编号=20 &amp;amp; 工资&amp;lt;=2000;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;select * from EMP
        where DEPTNO=10
                or COMM not NULL
                or SAL&amp;lt;=2000 and DEPTNO=20;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7369&lt;/td&gt;
&lt;td&gt;SMITH&lt;/td&gt;
&lt;td&gt;CLERK&lt;/td&gt;
&lt;td&gt;7902&lt;/td&gt;
&lt;td&gt;1980-12-17 00:00:00.000&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7499&lt;/td&gt;
&lt;td&gt;ALLEN&lt;/td&gt;
&lt;td&gt;SALESMAN&lt;/td&gt;
&lt;td&gt;7698&lt;/td&gt;
&lt;td&gt;1981-02-20 00:00:00.000&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7521&lt;/td&gt;
&lt;td&gt;WARD&lt;/td&gt;
&lt;td&gt;SALESMAN&lt;/td&gt;
&lt;td&gt;7698&lt;/td&gt;
&lt;td&gt;1981-02-22 00:00:00.000&lt;/td&gt;
&lt;td&gt;1250&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7654&lt;/td&gt;
&lt;td&gt;MARTIN&lt;/td&gt;
&lt;td&gt;SALESMAN&lt;/td&gt;
&lt;td&gt;7698&lt;/td&gt;
&lt;td&gt;1981-09-28 00:00:00.000&lt;/td&gt;
&lt;td&gt;1250&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7782&lt;/td&gt;
&lt;td&gt;CLARK&lt;/td&gt;
&lt;td&gt;MANAGER&lt;/td&gt;
&lt;td&gt;7839&lt;/td&gt;
&lt;td&gt;1981-06-09 00:00:00.000&lt;/td&gt;
&lt;td&gt;2450&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7839&lt;/td&gt;
&lt;td&gt;KING&lt;/td&gt;
&lt;td&gt;PRESIDENT&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;1981-11-17 00:00:00.000&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7844&lt;/td&gt;
&lt;td&gt;TURNER&lt;/td&gt;
&lt;td&gt;SALESMAN&lt;/td&gt;
&lt;td&gt;7698&lt;/td&gt;
&lt;td&gt;1981-09-08 00:00:00.000&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7876&lt;/td&gt;
&lt;td&gt;ADAMS&lt;/td&gt;
&lt;td&gt;CLERK&lt;/td&gt;
&lt;td&gt;7788&lt;/td&gt;
&lt;td&gt;1983-01-12 00:00:00.000&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7934&lt;/td&gt;
&lt;td&gt;MILLER&lt;/td&gt;
&lt;td&gt;CLERK&lt;/td&gt;
&lt;td&gt;7782&lt;/td&gt;
&lt;td&gt;1982-01-23 00:00:00.000&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;&lt;p&gt;【补充】检索：20号部门中有奖金的员工和工资不高于2000的员工&lt;/p&gt;
&lt;p&gt;SQL语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from EMP
        where ( 
                or comm is not null
                or sal &amp;lt;= 2000
              )
              and deptno=20;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【分析】以上SQL语句中的where字句的逻辑运算就是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(a|b)&amp;amp;c=(a&amp;amp;c)|(b&amp;amp;c)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;where (comm is not null and deptno=20) or (sal &amp;lt;= 2000 and deptno=20)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7369&lt;/td&gt;
&lt;td&gt;SMITH&lt;/td&gt;
&lt;td&gt;CLERK&lt;/td&gt;
&lt;td&gt;7902&lt;/td&gt;
&lt;td&gt;1980-12-17 00:00:00.000&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7876&lt;/td&gt;
&lt;td&gt;ADAMS&lt;/td&gt;
&lt;td&gt;CLERK&lt;/td&gt;
&lt;td&gt;7788&lt;/td&gt;
&lt;td&gt;1983-01-12 00:00:00.000&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr/&gt;&lt;h2 id=&quot;筛选列&quot;&gt;1.4筛选列&lt;/h2&gt;
&lt;p&gt;问题：你有一张表，并且只想查看特定列的值。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br/&gt;select之后指定你想要查询的列。&lt;/p&gt;
&lt;p&gt;例如，只查看员工的名字、部门编号和工资。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select ename,deptno,sal from EMP;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SMITH&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;ALLEN&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;WARD&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1250&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JONES&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;2975&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MARTIN&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1250&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;BLAKE&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;2850&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;CLARK&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2450&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;SCOTT&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;KING&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;TURNER&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ADAMS&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JAMES&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;950&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;FORD&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MILLER&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr/&gt;&lt;h2 id=&quot;创建列的别名&quot;&gt;1.5创建列的别名&lt;/h2&gt;
&lt;p&gt;问题:你可能想要修改检索结果的列名，使其更具可读性且更易于理解。考虑下面这个查询，它返回的是每个员工的工资。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select ename,sal from emp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ename是什么吗？sal 指的是什么？显然这不方便阅读查询结果。&lt;/p&gt;
&lt;p&gt;检索结果应该让人容易理解,所以我们可以在查询的时候自定义查询结果显示的列名（当然这不会改变数据库中表的列名）。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br/&gt;使用 AS 关键字创建别名，以 original_name AS new_name 的形式来修改检索结果的列名。&lt;/p&gt;
&lt;p&gt;对于一些数据库而言， AS 不是必需的，但所有的数据库都支持这个关键字。&lt;/p&gt;
&lt;p&gt;【注意】自定义的显示列名（别名），不允许有空格&lt;/p&gt;
&lt;p&gt;SQL语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select  
        ename as EmployeeName,
        sal as salary
from EMP
where deptno=30;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ALLEN&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;WARD&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MARTIN&lt;/td&gt;
&lt;td&gt;1250&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;BLAKE&lt;/td&gt;
&lt;td&gt;2850&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;TURNER&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JAMES&lt;/td&gt;
&lt;td&gt;950&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr/&gt;&lt;h2 id=&quot;在where子句中引用别名列&quot;&gt;1.6 在where子句中引用别名列&lt;/h2&gt;
&lt;p&gt;问题：根据1.5中，已经为检索结果创建了有意义的列名&lt;br/&gt;现在想要利用where子句来进行数据的过滤&lt;br/&gt;但是你按照下面的SQL语句，则无法成功&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;
select  
        sal as salary ,
        comm as commission
from EMP

where salary&amp;lt;5000
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;p&gt;【注意】&lt;br/&gt;&lt;strong&gt;where子句会比select子句先执行&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;from子句会比where子句先执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;from&amp;gt;where&amp;gt;select&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;所以你在上面的查询语句的时候，在执行where子句的时候，根本就还没有slaray。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br/&gt;法1.你在where子句中使用原始列名&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select  
        sal as salary ,
        comm as commission
from EMP

where sal&amp;lt;5000
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;法2.把查询包装为一个内嵌视图&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;
select * 
        from
        (
        select 
                sal as salary
                comm as commission
        from EMP
        )
where salary&amp;lt;5000;
&lt;/code&gt;
&lt;/pre&gt;

&lt;hr/&gt;&lt;h2 id=&quot;串联多列的值&quot;&gt;1.7 串联多列的值&lt;/h2&gt;
&lt;p&gt;问题：想要查询多列的值显示在一列上&lt;br/&gt;比如说：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select ename,job
from EMP
where deptno=10&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;CLARK&lt;/td&gt;
&lt;td&gt;MANAGER&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;KING&lt;/td&gt;
&lt;td&gt;PRESIDENT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MILLER&lt;/td&gt;
&lt;td&gt;CLERK&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;上面如愿查询到结果，但是想要显示为一列，如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;CLARK work as a MANAGER&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;KING work as a PRESIDENT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MILLER work as a CLERK&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;怎么办呢？&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select ename+' work as a ' +job as msg
from EMP 
where deptno=10&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：如上所希望。&lt;/p&gt;

&lt;hr/&gt;&lt;h2 id=&quot;在select语句里使用条件逻辑&quot;&gt;1.8 在select语句里使用条件逻辑&lt;/h2&gt;
&lt;p&gt;问题：你想在 SELECT 语句中针对查询结果值执行 IF-ELSE 操作。&lt;br/&gt;例如，你想生成类似这样的结果：&lt;br/&gt;如果员工的工资少于 2000 美元，就返回 UNDERPAID ；&lt;br/&gt;如果超过 4000 美元就返回OVERPAID ；&lt;br/&gt;若介于两者之间则返回 OK 。&lt;br/&gt;查询结果如下所示:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SMITH&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;UNDERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;ALLEN&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;UNDERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;WARD&lt;/td&gt;
&lt;td&gt;1250&lt;/td&gt;
&lt;td&gt;UNDERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JONES&lt;/td&gt;
&lt;td&gt;2975&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MARTIN&lt;/td&gt;
&lt;td&gt;1250&lt;/td&gt;
&lt;td&gt;UNDERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;BLAKE&lt;/td&gt;
&lt;td&gt;2850&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;CLARK&lt;/td&gt;
&lt;td&gt;2450&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;SCOTT&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;KING&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;OVERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;TURNER&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;UNDERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ADAMS&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;UNDERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JAMES&lt;/td&gt;
&lt;td&gt;950&lt;/td&gt;
&lt;td&gt;UNDERPAID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;FORD&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MILLER&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;UNDERPAI&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;解决方案：&lt;br/&gt;使用case语句&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select ename ,sal ,
        case 
                when sal&amp;gt;=4000 then 'OverPaid'
                when sal&amp;lt;=2000 then 'UnderPaid'
                else 'Ok'
        end as Status
from EMP
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果如上所愿！&lt;/p&gt;
&lt;p&gt;【说明】&lt;br/&gt;case语句格式如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;case
        when 限制条件语句1 then '返回值1'
        when 限制条件语句2 then '返回值2'
        ...
        else '返回值'
end as 自定义列名 &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【注意】&lt;br/&gt;1.else子句是可选的，若没有它，对于不满足测试条件的行， case 表达式会返回 Null 。&lt;/p&gt;
&lt;p&gt;2.case语句就是相当于一个列，所以自己给他定义了一个列名（在end后使用as关键字），同样因此用逗号和其他列名隔开。&lt;/p&gt;
&lt;p&gt;3.注意返回值是使用单引号，&lt;strong&gt;SQL中字符串使用单引号引起&lt;/strong&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;h2 id=&quot;限定返回行数&quot;&gt;1.9 限定返回行数&lt;/h2&gt;
&lt;p&gt;问题：想要限定返回结果的行数，而且不在意排序。&lt;/p&gt;
&lt;p&gt;例如：返回查询结果的前5行。&lt;/p&gt;
&lt;p&gt;解决方案：使用 TOP 关键字限定返回行数。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;
select top 5 *
from EMP
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果是返回EMP表的前5行&lt;/p&gt;

&lt;hr/&gt;&lt;h2 id=&quot;随机返回若干行记录&quot;&gt;1.10 随机返回若干行记录&lt;/h2&gt;
&lt;p&gt;问题：希望从表中获取特定数量的随机记录。&lt;/p&gt;
&lt;p&gt;解决方案：利用order by newid()与top子句配合，实现在记录集中获取N条随机记录&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select top 5 *
from EMP
order by newid()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果是随机的在EMP表中选取5行。&lt;/p&gt;
&lt;p&gt;【说明】&lt;br/&gt;在MS SQL中函数&lt;code&gt;newid()&lt;/code&gt;：&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;newid()函数产生一个全球唯一的标识，该标识是由网卡号、CPU时钟组成。从而保证该函数调用的返回值是唯一的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;该函数的返回值类型为uniqueidentifier类型，该类型必须与newid函数配合使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;newid函数的用途：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正是由于uniqueidentifier的唯一性，我们通常用uniqueidentifier类型作为表的主键类型&lt;/strong&gt;，&lt;strong&gt;通过newid函数为该类型的字段新增或者更新值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【举例】&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create table test

(
        id uniqueidentifier primary key,

        name varchar(20)

)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;插入新的数据：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;insert into test values ( newid() , '小明' )&lt;/code&gt;
&lt;/pre&gt;

&lt;hr/&gt;&lt;h2 id=&quot;查找-null-值&quot;&gt;1.11 查找 Null 值&lt;/h2&gt;
&lt;p&gt;问题：你想查找特定列的值为 Null 的所有行。&lt;/p&gt;
&lt;p&gt;注意：NULL是指无值（no value），它与字段包含 0、空字符串或仅仅包含空格不同。&lt;/p&gt;
&lt;p&gt;解决方案：判断一个值是否为 Null ，必须使用 &lt;code&gt;IS Null&lt;/code&gt; 。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select * from EMP
where comm is NULL&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果就是EMP表中comm列值是NULL的所有数据。&lt;/p&gt;
&lt;p&gt;【说明】毫无疑问，查找特定列的值是非NULL的方式就是使用&lt;code&gt;is not null&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;h2 id=&quot;把-null-值转换为实际值&quot;&gt;1.12 把 Null 值转换为实际值&lt;/h2&gt;
&lt;p&gt;问题：有一些行包含 Null 值，但是你想在查询的返回结果里将其替换为非 Null 值。&lt;/p&gt;
&lt;p&gt;注意：只是把你查询的结果中的NULL换成其他的值，并不是修改数据库的表。&lt;/p&gt;
&lt;p&gt;解决方案1：使用使用 &lt;code&gt;coalesce()&lt;/code&gt; 函数将 Null 值替代为实际值。&lt;/p&gt;
&lt;p&gt;例如：如果EMP表中的comm列的值是NULL，则返回0，若非NULL则返回comm值&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select coalesce(comm,0)
from EMP&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【说明】&lt;br/&gt;coalesce 动词，合并的意思，读作[,koə'lɛs]&lt;/p&gt;
&lt;p&gt;COALESCE(expression_1, expression_2, ...,expression_n)依次参考各参数表达式，&lt;strong&gt;遇到非null值即停止并返回该值&lt;/strong&gt;。如果所有的表达式都是空值，最终将返回一个空值&lt;/p&gt;
&lt;p&gt;解决方案2：使用case语句，但是没有coalesce()函数简洁&lt;/p&gt;
&lt;p&gt;顺便说一句主流数据库都自带coalesce()函数。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select 
        case
                when comm is not null then comm
                else 0
        end as comm
from EMP&lt;/code&gt;
&lt;/pre&gt;

&lt;hr/&gt;&lt;h2 id=&quot;查找匹配项&quot;&gt;1.13 查找匹配项&lt;/h2&gt;
&lt;p&gt;问题：你想返回匹配某个特定字符串或模式的行。&lt;/p&gt;
&lt;p&gt;例如：你想从编号为 10 和 20 的两个部门中找到名字中含有字母 I 或职位以 ER 结尾的人。&lt;/p&gt;
&lt;p&gt;解决方案：使用通配符&lt;code&gt;%&lt;/code&gt;配合&lt;code&gt;like&lt;/code&gt; 操作符&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select ename, job
from emp
where deptno in (10,20)
      and (ename like '%I%' or job like '%ER')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【说明】&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;最常使用的通配符是百分号（ % ）,所有DBMS皆支持。在搜索串中， &lt;code&gt;%&lt;/code&gt; 表示任何字符出现&lt;strong&gt;任意次数&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通配符 % 看起来像是可以匹配任何东西，但有个例外，这就是 NULL 。子句 WHERE name LIKE '%' 不会匹配产品名称为 NULL 的行。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;MS SQL还有通配符&lt;code&gt;[]&lt;/code&gt;,此处不详述了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;【注意】通配符不利于SQL优化&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SQL 的通配符很有用。但这种功能是有代价的，即通配符搜&lt;br/&gt;索一般比前面讨论的其他搜索要耗费更长的处理时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用通配符时要记住的技巧。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。&lt;/li&gt;
&lt;li&gt;在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;</description>
<pubDate>Sat, 09 Feb 2019 10:22:00 +0000</pubDate>
<dc:creator>shanzm</dc:creator>
<og:description>第一章 shanzm [TOC] 第一章 检索记录 1.1检索所有行和列 问题：你有一张表，并且想查看表中的所有数据。 解决方案1： 解决方案2： 说明： 建议使用方案2，因为别人看你的代码的时候不一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shanzhiming/p/10357783.html</dc:identifier>
</item>
<item>
<title>博客上的几种新职业的工作指南 - Conmajia</title>
<link>http://www.cnblogs.com/conmajia/p/new-career-intro.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/conmajia/p/new-career-intro.html</guid>
<description>&lt;p&gt;看了很多博客，发现了一些共同点。我觉得可以把这些博主分类一下，形成几种新的职业。&lt;/p&gt;
&lt;h2 id=&quot;超文本抄书匠&quot;&gt;超文本抄书匠&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hypertext Book Copier&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/407692/201902/407692-20190209162751683-576890467.png&quot; class=&quot;noborder img-responsive&quot; width=&quot;200&quot;/&gt;&lt;h3 id=&quot;工作描述&quot;&gt;工作描述&lt;/h3&gt;
&lt;p&gt;手打大师，大段抄录实体书、教材、资料内容，并发表在博客里，作为教程系列，或者记录系列，列出目录超链接，坚称“为学习留下记录”云云。与此同时，可恶的鼠标总是会&lt;em&gt;自动&lt;/em&gt;在发表之前勾选&lt;em&gt;发布至首页&lt;/em&gt;，大师本人也很无奈。&lt;/p&gt;
&lt;h3 id=&quot;入职条件&quot;&gt;入职条件&lt;/h3&gt;
&lt;p&gt;有一块优质的键盘，打字速度快。一套纸质资料，素材必不可少，否则无法开展工作。&lt;/p&gt;
&lt;h3 id=&quot;要点&quot;&gt;要点&lt;/h3&gt;
&lt;p&gt;在与大家&lt;strong&gt;分享&lt;/strong&gt;的时候，&lt;em&gt;千万不能&lt;/em&gt;说漏嘴信息来源，必须&lt;em&gt;坚持原创精神&lt;/em&gt;。&lt;small&gt;（咦？参考文献？那是什么？）&lt;/small&gt;&lt;/p&gt;
&lt;h2 id=&quot;官方文档义务保管员&quot;&gt;官方文档义务保管员&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Voluntary Official Documenter&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/407692/201902/407692-20190209165448465-453060390.png&quot; class=&quot;noborder img-responsive&quot; width=&quot;200&quot;/&gt;&lt;h3 id=&quot;工作描述-1&quot;&gt;工作描述&lt;/h3&gt;
&lt;p&gt;为了防止官网嗝屁，导致人类智慧丢失，主动花费精力，把官方文档复制到博客义务保管。&lt;/p&gt;
&lt;h3 id=&quot;入职条件-1&quot;&gt;入职条件&lt;/h3&gt;
&lt;p&gt;良好的网速，新版的浏览器。官网文档更新很快，旧的浏览器没法访问。有一只带右键的鼠标，不需要键盘，复制粘贴鼠标就可以完成。&lt;/p&gt;
&lt;h3 id=&quot;要点-1&quot;&gt;要点&lt;/h3&gt;
&lt;p&gt;收录文档时要成系列，不能只保存一两篇，&lt;/p&gt;
&lt;h2 id=&quot;低幼知识收藏家&quot;&gt;低幼知识收藏家&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Elementary Knowledge Collector&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/407692/201902/407692-20190209165806155-1081321526.jpg&quot; class=&quot;noborder img-responsive&quot; width=&quot;200&quot;/&gt;&lt;h3 id=&quot;工作描述-2&quot;&gt;工作描述&lt;/h3&gt;
&lt;p&gt;热衷收藏 &lt;span class=&quot;math inline&quot;&gt;\(1+1=2\)&lt;/span&gt; 或者 hello world 这种入门文章并发表出来和广大弱智分享。&lt;/p&gt;
&lt;h3 id=&quot;入职条件-2&quot;&gt;入职条件&lt;/h3&gt;
&lt;p&gt;数十年如一日的毅力，不是教师胜似教师的诲人心态，对简单内容的专注力，绝不写深入的东西的忍耐力。&lt;/p&gt;
&lt;h3 id=&quot;要点-2&quot;&gt;要点&lt;/h3&gt;
&lt;p&gt;“妈妈我要吃ne ne～”&lt;/p&gt;
&lt;h2 id=&quot;圣战狗&quot;&gt;圣战狗&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Jehad Dog&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://img2018.cnblogs.com/blog/407692/201902/407692-20190209174021496-1349785727.jpg&quot; class=&quot;noborder img-responsive&quot; width=&quot;&quot;/&gt;&lt;h3 id=&quot;工作描述-3&quot;&gt;工作描述&lt;/h3&gt;
&lt;p&gt;狂热拥护某种开发语言、架构、环境、业态，或者&lt;em&gt;扮演正义使者&lt;/em&gt;维护网络治安，最后说一句“已经劝了这么多，你们还要打，我也没办法（是你们太蠢）。”&lt;/p&gt;
&lt;h3 id=&quot;入职条件-3&quot;&gt;入职条件&lt;/h3&gt;
&lt;p&gt;需要将眼光收到&lt;strong&gt;极度狭隘&lt;/strong&gt;的境界，比如.NET跟Java比就只看互联网、BS，Java跟C比就只看语法特性，C和.NET比就只看底层操作能力，总之.NET开发大型软件和端游他们是看不到的，Java开发机顶盒、嵌入式设备也是看不到的，C在人工智能、物联网的应用也是看不到的。&lt;/p&gt;
&lt;h3 id=&quot;要点-3&quot;&gt;要点&lt;/h3&gt;
&lt;p&gt;你必须默认并且毫不质疑&lt;q&gt;&lt;strong&gt;软件开发=CRUD≠其他任何东西&lt;/strong&gt;&lt;/q&gt;，否则你不清真。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;BKY就是CRUD的天下，&lt;q&gt;代码改变世界&lt;/q&gt;，但是不包括飞机大炮汽车里的代码，不包括传感器IOT里的代码，不包括超算里的代码，不包括3A大作里的代码。&lt;br/&gt;呵呵，改变你 &lt;img src=&quot;https://img2018.cnblogs.com/blog/407692/201901/407692-20190120031212322-492892952.png&quot; width=&quot;24&quot; align=&quot;absmiddle&quot;/&gt; 的世界呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;投票&quot;&gt;投票&lt;/h2&gt;
&lt;p&gt;你觉得还可以总结哪些新的职业？欢迎在评论区&lt;strong&gt;投票&lt;/strong&gt;。注意&lt;em&gt;格式&lt;/em&gt;，系统会&lt;em&gt;自动识别并统计&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;▼ 投票格式&lt;/p&gt;
&lt;pre class=&quot;plain&quot;&gt;
&lt;code&gt;#投票#你的提名# 其他评论内容。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;你的提名&lt;/strong&gt;最多可以写&lt;u&gt;10个字&lt;/u&gt;，超出部分会&lt;em&gt;忽略&lt;/em&gt;（英文字母也算1个字）。如果写错了，你可以修改，刷新F5后会重新进行统计。&lt;/p&gt;
&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot; onclick=&quot;$('#tbCommentBody').focus()&quot;&gt;
&lt;p&gt;去投票&lt;/p&gt;
&lt;/button&gt;
&lt;h2 id=&quot;统计结果&quot;&gt;统计结果&lt;/h2&gt;
&lt;div class=&quot;panel panel-info&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;读者投票的博客新职业&lt;/p&gt;
&lt;p&gt;正在计票...&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我不是在嘲讽谁，真的。&lt;img src=&quot;https://img2018.cnblogs.com/blog/407692/201902/407692-20190209171500535-1604258041.png&quot; width=&quot;32&quot; align=&quot;absmiddle&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code type=&quot;run&quot; data-scale=&quot;lazy&quot; data-timeout=&quot;1000&quot;&gt;&lt;br/&gt;var store = {};&lt;br/&gt;$('.comment').each(function() {&lt;br/&gt;var m = $(this).text().match(/#投票#(.*)?#/);&lt;br/&gt;if (m &amp;amp;&amp;amp; m.length &amp;gt; 1) {&lt;br/&gt;var s = m[1].trim().substr(0, 10);&lt;br/&gt;if (!store[s]) {&lt;br/&gt;store[s] = 1;&lt;br/&gt;} else {&lt;br/&gt;store[s] = store[s] + 1;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;var p = '';&lt;br/&gt;for (var n in store) {&lt;br/&gt;p += format('{0} &amp;lt;span class=&quot;label label-badge&quot;&amp;gt;{1}&amp;lt;/span&amp;gt; ', n, store[n]);&lt;br/&gt;}&lt;br/&gt;if (p.length) {&lt;br/&gt;$('#poll').html(p);&lt;br/&gt;}else{&lt;br/&gt;$('#poll').text('目前没有投票');&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 09 Feb 2019 10:13:00 +0000</pubDate>
<dc:creator>Conmajia</dc:creator>
<og:description>看了很多博客，发现了一些共同点。我觉得可以把这些博主分类一下，形成几种新的职业。 超文本抄书匠 Hypertext Book Copier 工作描述 手打大师，大段抄录实体书、教材、资料内容，并发表在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/conmajia/p/new-career-intro.html</dc:identifier>
</item>
<item>
<title>大数据技术之_04_Hadoop学习_02_HDFS_DataNode(面试开发重点)+HDFS 2.X新特性 - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10357692.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10357692.html</guid>
<description>&lt;p id=&quot;tocid_0&quot; class=&quot;toc&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h6datanode&quot;&gt;第6章 DataNode（面试开发重点）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h61datanode&quot;&gt;6.1 DataNode工作机制&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h62&quot;&gt;6.2 数据完整性&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h63&quot;&gt;6.3 掉线时限参数设置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h64&quot;&gt;6.4 服役新数据节点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h65&quot;&gt;6.5 退役旧数据节点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h651&quot;&gt;6.5.1 添加白名单&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h652&quot;&gt;6.5.2 黑名单退役&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h66datanode&quot;&gt;6.6 Datanode多目录配置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h7hdfs2x&quot;&gt;第7章 HDFS 2.X新特性&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h71&quot;&gt;7.1 集群间数据拷贝&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h72&quot;&gt;7.2 小文件存档&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h73&quot;&gt;7.3 回收站&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10357692.html#h74&quot;&gt;7.4 快照管理&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;h6datanode&quot;&gt;&lt;span&gt;&lt;strong&gt;第6章 DataNode（面试开发重点）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h61datanode&quot;&gt;&lt;span&gt;&lt;strong&gt;6.1 DataNode工作机制&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;DataNode工作机制，如下图所示。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxqaT.png&quot; alt=&quot;&quot;/&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;1）一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括&lt;strong&gt;数据块的长度&lt;/strong&gt;，&lt;strong&gt;块数据的校验和&lt;/strong&gt;，以及&lt;strong&gt;时间戳&lt;/strong&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2）DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的块信息。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3）心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;4）集群运行中可以安全加入和退出一些机器。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h62&quot;&gt;&lt;span&gt;&lt;strong&gt;6.2 数据完整性&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  &lt;code&gt;思考：&lt;/code&gt;如果电脑磁盘里面存储的数据是控制高铁信号灯的红灯信号（1）和绿灯信号（0），但是存储该数据的磁盘坏了，一直显示是绿灯，是否很危险？同理DataNode节点上的数据损坏了，却没有发现，是否也很危险，那么如何解决呢？&lt;br/&gt;  如下是DataNode节点保证数据完整性的方法。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1）当DataNode读取Block的时候，它会计算CheckSum。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2）如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3）Client读取其他DataNode上的Block。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;4）DataNode在其文件创建后周期验证CheckSum，如下图所示。&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxfPg.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h63&quot;&gt;&lt;span&gt;&lt;strong&gt;6.3 掉线时限参数设置&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNx5xs.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;需要注意的是hdfs-site.xml 配置文件中的heartbeat.recheck.interval的单位为&lt;code&gt;毫秒&lt;/code&gt;，dfs.heartbeat.interval的单位为&lt;code&gt;秒&lt;/code&gt;。
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.heartbeat.recheck-interval&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;300000&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.heartbeat.interval&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h64&quot;&gt;&lt;span&gt;&lt;strong&gt;6.4 服役新数据节点&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;0、需求&lt;br/&gt;  随着公司业务的增长，数据量越来越大，原有的数据节点的容量已经不能满足存储数据的需求，需要在原有集群基础上动态添加新的数据节点。&lt;br/&gt;1、环境准备&lt;br/&gt;（1）在hadoop104主机上再克隆一台hadoop105主机&lt;br/&gt;（2）修改IP地址、修改主机名称、修改主机名称和ip地址映射、永久关闭防火墙、重启系统&lt;br/&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxRIS.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（3）删除原来HDFS文件系统留存的文件（/opt/module/hadoop-2.7.2/data和/logs目录）&lt;br/&gt;（4）source一下配置文件
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ source /etc/profile&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）先启动集群&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-dfs.sh&lt;br/&gt;[atguigu@hadoop103 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-yarn.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、服役新节点具体步骤&lt;br/&gt;（1）直接单独启动hadoop105的DataNode，即可关联到集群&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/hadoop-daemon.sh start datanode&lt;br/&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/yarn-daemon.sh start nodemanager&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNx2a8.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;（2）测试：在hadoop105上传文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hadoop fs -put /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hadoop&lt;/span&gt;-2.7.2/&lt;span class=&quot;hljs-title&quot;&gt;LICENSE&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;txt&lt;/span&gt; /&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）如果数据不均衡，可以用命令实现集群的再平衡&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;[atguigu@hadoop102 sbin]$ ./&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;-balancer.sh&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; balancer, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-balancer-hadoop102.out&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Time&lt;/span&gt; Stamp               Iteration&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h65&quot;&gt;&lt;span&gt;&lt;strong&gt;6.5 退役旧数据节点&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h651&quot;&gt;&lt;span&gt;&lt;strong&gt;6.5.1 添加白名单&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  添加到白名单的主机节点，都允许访问NameNode，不在白名单的主机节点，都会被退出。&lt;br/&gt;配置白名单的具体步骤如下：&lt;br/&gt;（1）在NameNode的/opt/module/hadoop-2.7.2/etc/hadoop目录下创建dfs.hosts文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hadoop&lt;/span&gt;-2.7.2/&lt;span class=&quot;hljs-title&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hadoop&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 hadoop]$ touch dfs.hosts&lt;br/&gt;[atguigu@hadoop102 hadoop]$ vim dfs.hosts&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下主机名称（不添加hadoop105）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;hadoop102&lt;/span&gt;&lt;br/&gt;hadoop103&lt;br/&gt;hadoop104&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在NameNode的hdfs-site.xml配置文件中增加dfs.hosts属性&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.hosts&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）配置文件分发&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop]$ xsync hdfs-site.xml&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）刷新NameNode&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hdfs dfsadmin -refreshNodes&lt;br/&gt;Refresh nodes successful&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）更新ResourceManager节点&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ yarn rmadmin -refreshNodes&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt; INFO client.&lt;span class=&quot;hljs-symbol&quot;&gt;RMProxy:&lt;/span&gt; Connecting to ResourceManager at hadoop103/&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;25.103&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8033&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）在web浏览器上查看&lt;br/&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxhGQ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（7）如果数据不均衡，可以用命令实现集群的再平衡
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;[atguigu@hadoop102 sbin]$ ./&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;-balancer.sh&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; balancer, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-balancer-hadoop102.out&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Time&lt;/span&gt; Stamp               Iteration&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h652&quot;&gt;&lt;span&gt;&lt;strong&gt;6.5.2 黑名单退役&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  在黑名单上面的主机都会被强制退出。&lt;br/&gt;&lt;strong&gt;0、先恢复现场&lt;/strong&gt;&lt;br/&gt;（1）注释掉hdfs-site.xml配置文件中dfs.hosts属性&lt;br/&gt;（2）配置文件分发&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop]$ xsync hdfs-site.xml&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）单独关闭hadoop105的DataNode&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/hadoop-daemon.sh start datanode&lt;br/&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/yarn-daemon.sh start nodemanager&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）刷新NameNode、刷新ResourceManager&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hdfs dfsadmin -refreshNodes&lt;br/&gt;Refresh nodes successful&lt;br/&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ yarn rmadmin -refreshNodes&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; INFO client.&lt;span class=&quot;hljs-symbol&quot;&gt;RMProxy:&lt;/span&gt; Connecting to ResourceManager at hadoop103/&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;25.103&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8033&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）检查Web浏览器，发现105节点的状态为Dead，说明数据节点105没有启动，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxoMn.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（6）然后我们启动105节点，恢复现场
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;[atguigu@hadoop105 hadoop-2.7.2]$ sbin/hadoop-daemon.sh &lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt; datanode&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; datanode, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-datanode-hadoop105.out&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现场恢复后如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNx42j.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;1、在NameNode的/opt/module/hadoop-2.7.2/etc/hadoop目录下创建dfs.hosts.exclude文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hadoop&lt;/span&gt;-2.7.2/&lt;span class=&quot;hljs-title&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hadoop&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 hadoop]$ touch dfs.hosts.exclude&lt;br/&gt;[atguigu@hadoop102 hadoop]$ vim dfs.hosts.exclude&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加如下主机名称（要退役的节点）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;hadoop105&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、在NameNode的hdfs-site.xml配置文件中增加dfs.hosts.exclude属性&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.hosts.exclude&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts.exclude&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注释掉【白名单信息】，添加上【黑名单信息】&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxTrq.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;3、配置文件分发&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop]$ xsync hdfs-site.xml&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、刷新NameNode、刷新ResourceManager&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hdfs dfsadmin -refreshNodes&lt;br/&gt;Refresh nodes successful&lt;br/&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ yarn rmadmin -refreshNodes&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt; INFO client.&lt;span class=&quot;hljs-symbol&quot;&gt;RMProxy:&lt;/span&gt; Connecting to ResourceManager at hadoop103/&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;25.103&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8033&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5、检查Web浏览器&lt;/strong&gt;&lt;br/&gt;退役节点的状态为&lt;code&gt;Decommission in Progress（退役中）&lt;/code&gt;，说明数据节点正在复制块到其他节点，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNx7q0.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;6、等待退役节点状态为&lt;code&gt;Decommissioned（所有块已经复制完成）&lt;/code&gt;，停止该节点及节点资源管理器&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;注意：&lt;/code&gt;如果副本数是3，服役的节点小于等于3，是不能退役成功的，需要修改副本数后才能退役，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxbZV.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;停止该节点及节点资源管理器（单节点退出）：
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/hadoop-daemon.sh stop datanode&lt;br/&gt;stopping datanode&lt;br/&gt;[atguigu@hadoop105 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/yarn-daemon.sh stop nodemanager&lt;br/&gt;stopping nodemanager&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;检查Web浏览器，查看【Last contact(上次连接时间)】&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxLIU.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;7、如果数据不均衡，可以用命令实现集群的再平衡&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;[atguigu@hadoop102 hadoop-2.7.2]$ sbin/&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;-balancer.sh &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; balancer, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-balancer-hadoop102.out&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Time&lt;/span&gt; Stamp               Iteration&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意：&lt;/code&gt;不允许白名单和黑名单中同时出现同一个主机名称。&lt;/p&gt;
&lt;h3 id=&quot;h66datanode&quot;&gt;&lt;span&gt;&lt;strong&gt;6.6 Datanode多目录配置&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、DataNode也可以配置成多个目录，每个目录存储的数据不一样。即：数据不是副本。&lt;br/&gt;2、具体配置如下：&lt;br/&gt;hdfs-site.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs apache&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;dfs&lt;/span&gt;.datanode.data.dir&amp;lt;/name&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;file&lt;/span&gt;:///&lt;span class=&quot;hljs-variable&quot;&gt;${hadoop.tmp.dir}&lt;/span&gt;/dfs/data1,file:///&lt;span class=&quot;hljs-variable&quot;&gt;${hadoop.tmp.dir}&lt;/span&gt;/dfs/data2&amp;lt;/value&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、配置文件分发&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop]$ xsync hdfs-site.xml&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、关闭集群&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs makefile&quot; readability=&quot;4&quot;&gt;[atguigu@hadoop102 hadoop-2.7.2]$ sbin/stop-dfs.sh &lt;br/&gt;Stopping namenodes on [hadoop102]&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop102: stopping namenode&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop102: stopping datanode&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop104: stopping datanode&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop103: stopping datanode&lt;/span&gt;&lt;br/&gt;Stopping secondary namenodes [hadoop104]&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop104: stopping secondarynamenode&lt;/span&gt;&lt;p&gt;[atguigu@hadoop103 hadoop-2.7.2]$ sbin/stop-yarn.sh &lt;br/&gt;stopping yarn daemons&lt;br/&gt;stopping resourcemanager&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop103: stopping nodemanager&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop102: stopping nodemanager&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;hadoop104: stopping nodemanager&lt;/span&gt;&lt;br/&gt;no proxyserver to stop&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、删除HDFS文件系统留存的文件（/opt/module/hadoop-2.7.2/data和/logs目录）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ rm -rf data&lt;span class=&quot;hljs-regexp&quot;&gt;/ logs/&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop103 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ rm -rf data&lt;span class=&quot;hljs-regexp&quot;&gt;/ logs/&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop104 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ rm -rf data&lt;span class=&quot;hljs-regexp&quot;&gt;/ logs/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、格式化NameNode&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hdfs namenode -&lt;span class=&quot;hljs-keyword&quot;&gt;format&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7、启动集群&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;hljs sql&quot; readability=&quot;9&quot;&gt;[atguigu@hadoop102 hadoop-2.7.2]$ sbin/&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;-dfs.sh &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Starting&lt;/span&gt; namenodes &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; [hadoop102]&lt;br/&gt;hadoop102: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; namenode, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-namenode-hadoop102.out&lt;br/&gt;hadoop102: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; datanode, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-datanode-hadoop102.out&lt;br/&gt;hadoop104: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; datanode, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-datanode-hadoop104.out&lt;br/&gt;hadoop103: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; datanode, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-datanode-hadoop103.out&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Starting&lt;/span&gt; secondary namenodes [hadoop104]&lt;br/&gt;hadoop104: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; secondarynamenode, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/hadoop-atguigu-secondarynamenode-hadoop104.out&lt;p&gt;[atguigu@hadoop103 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ sbin/&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;-yarn.sh &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; yarn daemons&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; resourcemanager, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/yarn-atguigu-resourcemanager-hadoop103.out&lt;br/&gt;hadoop104: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; nodemanager, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/yarn-atguigu-nodemanager-hadoop104.out&lt;br/&gt;hadoop102: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; nodemanager, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/yarn-atguigu-nodemanager-hadoop102.out&lt;br/&gt;hadoop103: &lt;span class=&quot;hljs-keyword&quot;&gt;starting&lt;/span&gt; nodemanager, &lt;span class=&quot;hljs-keyword&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;/yarn-atguigu-nodemanager-hadoop103.out&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8、上传数据测试&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hadoop fs -put /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hadoop&lt;/span&gt;-2.7.2/&lt;span class=&quot;hljs-title&quot;&gt;kongming&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;txt&lt;/span&gt; /&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hadoop fs -put /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hadoop&lt;/span&gt;-2.7.2/&lt;span class=&quot;hljs-title&quot;&gt;README&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;txt&lt;/span&gt; /&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9、查看目录内容&lt;/p&gt;
&lt;pre readability=&quot;9&quot;&gt;
&lt;code class=&quot;hljs coffeescript&quot; readability=&quot;12&quot;&gt;[atguigu@hadoop102 subdir0]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/data/tmp/dfs/data1/current/BP&lt;span class=&quot;hljs-number&quot;&gt;-455082023&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-192.168&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.102&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-1549543741292&lt;/span&gt;/current/finalized/subdir0/subdir0&lt;br/&gt;[atguigu@hadoop102 subdir0]$ ll&lt;br/&gt;总用量 &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;-rw-rw-r--. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; atguigu atguigu &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;月   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; blk_1073741825&lt;br/&gt;-rw-rw-r--. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; atguigu atguigu &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;月   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; blk_1073741825_1001.meta&lt;br/&gt;[atguigu@hadoop102 subdir0]$ cat blk_1073741825&lt;br/&gt;wo shi kong ming &lt;br/&gt;我是孔明&lt;p&gt;------------------------------&lt;/p&gt;&lt;p&gt;[atguigu@hadoop102 subdir0]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;/data/tmp/dfs/data2/current/BP&lt;span class=&quot;hljs-number&quot;&gt;-455082023&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-192.168&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.102&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-1549543741292&lt;/span&gt;/current/finalized/subdir0/subdir0&lt;br/&gt;[atguigu@hadoop102 subdir0]$ ll&lt;br/&gt;总用量 &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;-rw-rw-r--. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; atguigu atguigu &lt;span class=&quot;hljs-number&quot;&gt;1366&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;月   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt; blk_1073741826&lt;br/&gt;-rw-rw-r--. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; atguigu atguigu   &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;月   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt; blk_1073741826_1002.meta&lt;br/&gt;[atguigu@hadoop102 subdir0]$ cat blk_1073741826&lt;br/&gt;For the latest information about Hadoop, please visit our website at:&lt;/p&gt;&lt;p&gt;http:&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;hadoop.apache.org&lt;span class=&quot;hljs-regexp&quot;&gt;/core/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; our wiki, at:&lt;/p&gt;&lt;p&gt;http:&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;wiki.apache.org&lt;span class=&quot;hljs-regexp&quot;&gt;/hadoop/&lt;/span&gt;&lt;br/&gt;......&lt;br/&gt;......&lt;br/&gt;[atguigu@hadoop102 subdir0]$ &lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h7hdfs2x&quot;&gt;&lt;span&gt;&lt;strong&gt;第7章 HDFS 2.X新特性&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h71&quot;&gt;&lt;span&gt;&lt;strong&gt;7.1 集群间数据拷贝&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、scp实现两个远程主机之间的文件复制&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;scp -r hello.txt root&lt;span class=&quot;hljs-meta&quot;&gt;@hadoop&lt;/span&gt;103:/user/atguigu/hello.txt        &lt;br/&gt;scp -r root&lt;span class=&quot;hljs-meta&quot;&gt;@hadoop&lt;/span&gt;103:/user/atguigu/hello.txt hello.txt    &lt;br/&gt;scp -r root&lt;span class=&quot;hljs-meta&quot;&gt;@hadoop&lt;/span&gt;103:/user/atguigu/hello.txt root&lt;span class=&quot;hljs-meta&quot;&gt;@hadoop&lt;/span&gt;104:/user/atguigu      &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、采用distcp命令实现两个Hadoop集群之间的递归数据复制&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hadoop distcp &lt;span class=&quot;hljs-symbol&quot;&gt;hdfs:&lt;/span&gt;/&lt;span class=&quot;hljs-regexp&quot;&gt;/haoop102:9000/user&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/atguigu/hello&lt;/span&gt;.txt &lt;span class=&quot;hljs-symbol&quot;&gt;hdfs:&lt;/span&gt;/&lt;span class=&quot;hljs-regexp&quot;&gt;/hadoop103:9000/user&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/atguigu/hello&lt;/span&gt;.txt&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h72&quot;&gt;&lt;span&gt;&lt;strong&gt;7.2 小文件存档&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxvRJ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;案例实操&lt;br/&gt;（1）需要启动YARN进程
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-yarn.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）归档文件&lt;br/&gt;把/user/atguigu/input/目录里面的所有文件归档成一个叫input.har的归档文件，并把归档后文件存储到/user/atguigu/output/路径下。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hadoop archive -archiveName input.har -p /user/atguigu/input/ &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/output/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）查看归档&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs lua&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hadoop fs -lsr /user/atguigu/&lt;span class=&quot;hljs-built_in&quot;&gt;output&lt;/span&gt;/&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;.har&lt;br/&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hadoop fs -lsr har:///user/atguigu/&lt;span class=&quot;hljs-built_in&quot;&gt;output&lt;/span&gt;/&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;.har&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）解归档文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;atguigu@hadoop102 hadoop-2.7.2&lt;/span&gt;]$ hadoop fs -cp har:&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h73&quot;&gt;&lt;span&gt;&lt;strong&gt;7.3 回收站&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;开启回收站功能，可以将删除的文件在不超时的情况下，恢复原数据，起到防止误删除、备份等作用。&lt;br/&gt;1、回收站参数设置及工作机制&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxXiF.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;2、启用回收站&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxjG4.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;修改core-site.xml，配置垃圾回收时间为1分钟。
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;fs.trash.interval&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、查看回收站&lt;br/&gt;回收站在集群中的路径：/user/atguigu/.Trash/…&lt;br/&gt;4、修改访问垃圾回收站用户名称&lt;br/&gt;进入垃圾回收站用户名称，默认是dr.who，修改为atguigu用户&lt;br/&gt;core-site.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.http.staticuser.user&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;atguigu&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、配置文件分发&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop]$ xsync core-site.xml&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、启动集群&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-dfs.sh&lt;br/&gt;[atguigu@hadoop103 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-yarn.sh &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7、通过程序删除的文件不会经过回收站，需要调用moveToTrash()才进入回收站&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;Trash trash = &lt;span class=&quot;hljs-function&quot;&gt;New &lt;span class=&quot;hljs-title&quot;&gt;Trash&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;conf&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;trash.moveToTrash(path);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8、恢复回收站数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hadoop fs -mv &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/&lt;/span&gt;.Trash&lt;span class=&quot;hljs-regexp&quot;&gt;/Current/user/atguigu/input/&lt;/span&gt; &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9、清空回收站&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hadoop fs -expunge&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h74&quot;&gt;&lt;span&gt;&lt;strong&gt;7.4 快照管理&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/09/kNxxz9.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;案例实操&lt;br/&gt;（1）开启/禁用指定目录的快照功能
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs coffeescript&quot; readability=&quot;2&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hdfs dfsadmin -allowSnapshot &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt;&lt;br/&gt;Allowing snaphot &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt; succeeded&lt;p&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hdfs dfsadmin -disallowSnapshot &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）对目录创建快照&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hdfs dfs -createSnapshot &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt;&lt;br/&gt;Created snapshot &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt;.snapshot/s20190207&lt;span class=&quot;hljs-number&quot;&gt;-221706.618&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过web访问：http://hadoop102:50070/explorer.html#/user/atguigu/input/.snapshot/s20190207-221706.618 // 快照和源文件使用相同数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hdfs dfs -lsr &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt;.snapshot/&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）指定名称创建快照&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hdfs dfs -createSnapshot /user/atguigu/input miao190209&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）重命名快照&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hdfs dfs -renameSnapshot &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt; miao190209 atguigu190209&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）列出当前用户所有可快照目录&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ hdfs lsSnapshottableDir&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）比较两个快照目录的不同之处&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hdfs snapshotDiff &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt; . .snapshot/atguigu190209&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（7）恢复快照&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hadoop&lt;span class=&quot;hljs-number&quot;&gt;-2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]$ hdfs dfs -cp &lt;span class=&quot;hljs-regexp&quot;&gt;/user/atguigu/input/&lt;/span&gt;.snapshot&lt;span class=&quot;hljs-regexp&quot;&gt;/s20190207-221706.618 /user/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 09 Feb 2019 09:14:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>第6章 DataNode（面试开发重点）6.1 DataNode工作机制6.2 数据完整性6.3 掉线时限参数设置6.4 服役新数据节点6.5 退役旧数据节点6.5.1 添加白名单6.5.2 黑名单退</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10357692.html</dc:identifier>
</item>
<item>
<title>浅谈 .NET 中的对象引用、非托管指针和托管指针 - 黑洞视界</title>
<link>http://www.cnblogs.com/blurhkh/p/10357576.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blurhkh/p/10357576.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文主要是以 C# 为例介绍 .NET 中的三种指针类型（本文不包含对于函数指针的介绍）：&lt;strong&gt;对象引用&lt;/strong&gt;、&lt;strong&gt;非托管指针&lt;/strong&gt; 、&lt;strong&gt;托管指针&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;学习是一个不断深化理解的过程，借此博客，把自己关于 .NET 中指针相关的理解和大家一起讨论一下，若有表述不清楚，理解不正确之处，还请大家批评指正。&lt;/p&gt;
&lt;p&gt;开始话题之前，我们不妨先对一些概念作出定义。&lt;/p&gt;
&lt;p&gt;变量：给存储单元指定名称、即定义内存单元的名称或者说是标识。&lt;/p&gt;
&lt;p&gt;指针：一种特殊的变量、其存储的是值的地址而不是值本身。&lt;/p&gt;
&lt;h2 id=&quot;一对象引用&quot;&gt;一、对象引用&lt;/h2&gt;
&lt;p&gt;对于对象引用，大家都不会陌生。&lt;/p&gt;
&lt;p&gt;与值类型变量直接包含值不同，引用类型变量存储的是数据的存储位置（托管堆内存地址）。&lt;/p&gt;
&lt;p&gt;对象引用是在托管堆上分配的对象的开始位置指针。访问数据时，&lt;strong&gt;运行时&lt;/strong&gt;要先从变量中读取内存位置（隐式间接寻址），再跳转到包含数据的内存位置，这一切都是隐藏在CLR背后发生的事情，我们在使用引用类型的时候，并不需要关心其背后的实现。&lt;/p&gt;
&lt;h2 id=&quot;二值传递和引用传递&quot;&gt;二、值传递和引用传递&lt;/h2&gt;
&lt;p&gt;很多朋友，包括我，在初期学习的时候，可能都会有这么一个认知误区：&quot;对象在C#中是按引用传递的&quot;。&lt;/p&gt;
&lt;p&gt;对于引用传递，借鉴《深入理解C#》中话，我们需要记住这一点：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;假如以引用传递的方式来传送一个变量，那么调用的方法可以通过更改其参数值，来改变调用者的变量值。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如下面这么一个例子：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static  void Main(string[] args)
{
    Foo foo = new Foo
    {
        Name = &quot;A&quot;
    };

    Test(foo);

    Console.WriteLine(foo.Name); // 输出B
}

static void Test(Foo obj)
{
    obj.Name = &quot;B&quot;;
    obj = new Foo
    {
        Name = &quot;C&quot;
    };
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;按照引用传递的定义，上述代码的结果应该是 C，但实际输出的是 B。&lt;/p&gt;
&lt;p&gt;因为 C# 默认是按值传递的，在将Main函数中的 foo 变量传入Test函数时，会将它所包含的值（对象引用）复制给变量obj。所以可以通过obj变量修改原来的实例成员，这仅仅是由于引用类型的特性导致的，并不是所谓的引用传递。因为如果将obj变量指向一个新的实例，并不会影响到foo变量，它们两者是完全独立的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201123/201902/1201123-20190209155117224-306093702.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只要对上述代码做一个小修改，就能顺利地打印出 C，也就是通过大家习惯的 ref 关键词。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    Foo foo = new Foo
    {
        Name = &quot;A&quot;
    };

    Test(ref foo);

    Console.WriteLine(foo.Name); // 输出C
}

static void Test(ref Foo obj)
{
    obj.Name = &quot;B&quot;;
    obj = new Foo
    {
        Name = &quot;C&quot;
    };
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201123/201902/1201123-20190209155204323-1664296008.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;三初识托管指针和非托管指针&quot;&gt;三、初识托管指针和非托管指针&lt;/h2&gt;
&lt;p&gt;在C#中，如果我们想要定义一个引用传递的方法，我们需要通过给方法参数加上 &lt;strong&gt;ref&lt;/strong&gt; 或者 &lt;strong&gt;out&lt;/strong&gt; 关键词。&lt;/p&gt;
&lt;p&gt;同时C#也允许我们通过 &lt;strong&gt;unsafe&lt;/strong&gt; 关键词编写不安全的代码。那么这两者到底有什么区别呢。&lt;/p&gt;
&lt;p&gt;以以下C#代码为例：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static unsafe void Main(string[] args)
{
    int a, b;
    Method1(&amp;amp;a); // 使用非托管指针
    Method2(out b); // 使用out关键词

    Console.WriteLine($&quot;a:{a},b:{b}&quot;); // a:1,b:2
}

static unsafe void Method1(int* num)
{
    *num = 1;
}

static void Method2(out int b)
{
    b = 2;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，我们通过查看生成的IL的代码来分析一下这两者之间的区别。&lt;/p&gt;
&lt;pre class=&quot;il&quot;&gt;
&lt;code&gt;.assembly extern mscorlib {}
.assembly 'App' {}

.class private auto ansi beforefieldinit
  PointerDemo.Program
    extends [mscorlib]System.Object
{

  .method private hidebysig static void
    Main(
      string[] args
    ) cil managed
  {
    .entrypoint
    .maxstack 3
    .locals init (
      [0] int32 a,
      [1] int32 b
    )

    // [8 9 - 8 10]
    IL_0000: nop

    // [10 13 - 10 25]
    IL_0001: ldloca.s     a
    IL_0003: conv.u
    IL_0004: call         void PointerDemo.Program::Method1(int32*)
    IL_0009: nop

    // [11 13 - 11 28]
    IL_000a: ldloca.s     b
    IL_000c: call         void PointerDemo.Program::Method2(int32&amp;amp;)
    IL_0011: nop

    // [13 13 - 13 47]
    IL_0012: ldstr        &quot;a:{0},b:{1}&quot;
    IL_0017: ldloc.0      // a
    IL_0018: box          [mscorlib]System.Int32
    IL_001d: ldloc.1      // b
    IL_001e: box          [mscorlib]System.Int32
    IL_0023: call         string [mscorlib]System.String::Format(string, object, object)
    IL_0028: call         void [mscorlib]System.Console::WriteLine(string)
    IL_002d: nop

    // [14 9 - 14 10]
    IL_002e: ret

  } // end of method Program::Main

  .method private hidebysig static void
    Method1(
      int32* num
    ) cil managed
  {
    .maxstack 8

    // [17 9 - 17 10]
    IL_0000: nop

    // [18 13 - 18 22]
    IL_0001: ldarg.0      // num
    IL_0002: ldc.i4.1
    IL_0003: stind.i4

    // [19 9 - 19 10]
    IL_0004: ret

  } // end of method Program::Method1

  .method private hidebysig static void
    Method2(
      [out] int32&amp;amp; b
    ) cil managed
  {
    .maxstack 8

    // [22 9 - 22 10]
    IL_0000: nop

    // [23 13 - 23 19]
    IL_0001: ldarg.0      // b
    IL_0002: ldc.i4.2
    IL_0003: stind.i4

    // [24 9 - 24 10]
    IL_0004: ret

  } // end of method Program::Method2

  .method public hidebysig specialname rtspecialname instance void
    .ctor() cil managed
  {
    .maxstack 8

    IL_0000: ldarg.0      // this
    IL_0001: call         instance void [mscorlib]System.Object::.ctor()
    IL_0006: nop
    IL_0007: ret

  } // end of method Program::.ctor
} // end of class PointerDemo.Program&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到&lt;/p&gt;
&lt;p&gt;静态方法Method1中的参数对应的IL代码 &lt;strong&gt;int32&lt;/strong&gt;* num。&lt;/p&gt;
&lt;p&gt;静态方法Method2中的参数对应的IL代码是 [out] &lt;strong&gt;int32&amp;amp;&lt;/strong&gt; b，其中[out]即使去除也不影响代码的运行，上述代码是可通过ilasm编译的完整代码，有兴趣的朋友可以自己做尝试。&lt;/p&gt;
&lt;p&gt;通过学习《.NET探秘：MSIL权威指南》这本书，我们可以了解到很多相关的知识。&lt;/p&gt;
&lt;p&gt;在CLR中可以定义两种类型的指针：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;type*&lt;/td&gt;
&lt;td&gt;指向type的&lt;strong&gt;非托管指针&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;type&amp;amp;&lt;/td&gt;
&lt;td&gt;指向type的&lt;strong&gt;托管指针&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;也就是说用out/ref定义的指针类型其实对应的就是CLR中的&lt;strong&gt;托管指针&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;四非托管指针&quot;&gt;四、非托管指针&lt;/h2&gt;
&lt;p&gt;非托管指针的使用主要包括&lt;/p&gt;
&lt;p&gt;寻址运算符 &lt;strong&gt;&amp;amp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;间接寻址运算符 *&lt;/p&gt;
&lt;p&gt;用于结构指针的成员访问运算符 &lt;strong&gt;-&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非托管指针的用法和C/C++基本一致，这边不一一列出，下面主要列出几个.net 中非托管指针的注意点。&lt;/p&gt;
&lt;h3 id=&quot;非托管指针不能指向对象引用&quot;&gt;1、非托管指针不能指向对象引用&lt;/h3&gt;
&lt;p&gt;我们知道一个引用类型的变量，它所存储的是托管堆上的实例的内存地址。这个内存地址记录本身也是保存在内存的某个位置。类似于我们用记事本记下了某人的联系方式，同时这条联系方式记录本身也占据了我们记事本上一定的空间，被我们写在了记事本的某个位置。&lt;/p&gt;
&lt;p&gt;我们可以创建指向值类型变量的&lt;strong&gt;非托管指针&lt;/strong&gt;，也可以创建&lt;strong&gt;多级非托管指针&lt;/strong&gt;，但是不能创建指向引用类型变量（对象引用）的&lt;strong&gt;非托管指针&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static unsafe void Main(string[] args)
{
    int num = 2;
    object obj = new object();
    int* pNum = &amp;amp;num; // 指向值类型变量的非托管指针，编译通过
    int** ppNum = &amp;amp;pNum; // 二级指针，编译通过
    object* pObj = &amp;amp;obj; // 指向引用类型变量的非托管指针，编译不通过
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;类成员指针&quot;&gt;2、类成员指针&lt;/h3&gt;
&lt;p&gt;如果我们想要创建一个对象的值类型成员变量的指针，按下方的代码是无法编译通过的。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;class Foo
{
    public int Bar;
}

static unsafe void Main(string[] args)
{
    Foo foo = new Foo();

    int* p = &amp;amp;foo.Bar; // 编译不通过
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为对于生存在托管堆上的引用类型的实例而言，在一次 GC 之后，其内存位置可能会发生变动（GC的compact阶段），包含在实例内的成员变量也就随之发生了位置的移动。对于标识内存位置的指针而言，显然这样的情况是不能够被允许的。&lt;/p&gt;
&lt;p&gt;但是我们可以通过 fixed 关键词避免 GC 时实例内存位置的移动来实现这种类型的指针的创建，如下面代码所示。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static unsafe void Main(string[] args)
{
    Foo foo = new Foo();

    fixed (int* p = &amp;amp;foo.Bar) // 编译通过
    {
        Console.WriteLine((int)p); // 打印内存地址
        Console.WriteLine(*p); // 打印值
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同理，我们也可以利用 fixed 关键词创建指向值类型数组的指针（数组是引用类型，这里指数组的元素是值类型）。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static unsafe void Main(string[] args)
{
    int[] arr = { 1, 2 };

    // 除去 fixed 关键词外，指向数组的非托管指针声明方式与 C/C++ 类似
    fixed (int* p = arr)
    {
        // 指针保存的是第一个元素的内存地址
        Console.WriteLine(*p); // 输出1
        // 通过 +1 可以获取到第二个元素的内存地址
        Console.WriteLine(*(p + 1)); // 输出2
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;五托管指针&quot;&gt;五、托管指针&lt;/h2&gt;
&lt;p&gt;在上文我们已经提到，我们在使用引用传递的时候使用的 ref/out 关键词其实就是创建了托管指针。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;C#7&lt;/strong&gt; 之前，我们只能在方法参数上见到托管指针的身影，&lt;strong&gt;C#7&lt;/strong&gt; 进一步开放了托管指针的功能，使得我们能够在更多的场景下使用它们。例如和非托管指针一样，用于方法的返回值，&lt;/p&gt;
&lt;p&gt;托管指针完全受 CLR 管理，与非托管指针相比，在 C# 中（IL对于托管指针的限制会更少）托管指针存在以下几个特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;只能引用已经存在的项，例如字段、局部变量或者方法参数，并不支持和非托管指针一样的单独声明。&lt;/li&gt;
&lt;li&gt;不支持多级托管指针，但是托管指针能够指向对象引用。&lt;/li&gt;
&lt;li&gt;不能够打印内存地址的值。&lt;/li&gt;
&lt;li&gt;不能够执行指针算法。&lt;/li&gt;
&lt;li&gt;不需要显示的间接寻址（生成的IL代码中执行了间接寻址 通过 ldind.i4、ldind.ref 等指令 ）。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    var foo = new Foo{Bar = 1};

    // 创建指向引用类型变量（对象引用）的托管指针
    ref Foo p = ref foo;

    // IL代码中通过 ldind.ref 指令间接寻址找到对象引用
    Console.WriteLine(p.Bar); // 输出1
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 09 Feb 2019 08:17:00 +0000</pubDate>
<dc:creator>黑洞视界</dc:creator>
<og:description>[TOC] 前言 本文主要是以 C 为例介绍 .NET 中的三种指针类型（本文不包含对于函数指针的介绍）： 对象引用 、 非托管指针 、 托管指针 。 学习是一个不断深化理解的过程，借此博客，把自己关</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blurhkh/p/10357576.html</dc:identifier>
</item>
</channel>
</rss>