<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>C#效率优化（3）-- 使用foreach时避免装箱 - Minotauros</title>
<link>http://www.cnblogs.com/minotauros/p/10577149.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/minotauros/p/10577149.html</guid>
<description>&lt;h3&gt;Introduction：&lt;/h3&gt;
&lt;p&gt;　　博主是一名Unity 3D游戏开发者，游戏使用C#+lua开发，最近在优化C#代码时，发现了一处使用foreach不恰当的地方，其结果是造成了每帧近3k的GC Alloc，如此高频率的GC堆内存分配，会导致垃圾回收的调用更加频繁，从而影响游戏性能，而这只需要简单的修改即可避免；&lt;/p&gt;
&lt;p&gt; 　　原始声明代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IDictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, MyClass&amp;gt; mDic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, MyClass&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在每帧逻辑里面，会多次对其进行遍历，遍历代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; keyValuePair &lt;span&gt;in&lt;/span&gt;&lt;span&gt; mDic)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;do...&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过Unity自带的Profiler分析，可以发现其导致的GC Alloc：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/839833/201903/839833-20190322114210436-1828668943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Body：&lt;/h3&gt;
&lt;p&gt;　　通过上面的Profiler可以发现此时foreach语句实际上调用的是Dictionary定义中隐式实现的IEnumerable&amp;lt;KeyValuePair&amp;lt;TKey, TValue&amp;gt;&amp;gt;.GetEnumerator()方法，该方法的声明如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
IEnumerator&amp;lt;KeyValuePair&amp;lt;TKey, TValue&amp;gt;&amp;gt; IEnumerable&amp;lt;KeyValuePair&amp;lt;TKey, TValue&amp;gt;&amp;gt;&lt;span&gt;.GetEnumerator()
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Enumerator(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, Enumerator.KeyValuePair);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　其中，Enumerator是在Dictionary类中定义的嵌套结构类型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/839833/201903/839833-20190322115123970-2082237984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结构类型隐式转换为接口类型时会发生装箱，对于该Enumerator类型，其装箱后大小为16（开销字节）+8（字段dictionary）+8（字段next+stamp）+16（字段current：8（int字节对齐）+8）=48字节，调用29次即产生48*29=1392字节的堆内存分配，这符合我们看到Profiler里面看到的GC Alloc；&lt;/p&gt;
&lt;p&gt;　　为了解决这个问题，只需要将变量声明时改为Dictionary即可，不使用接口类型的变量，即：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, MyClass&amp;gt; mDic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, MyClass&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此时，在对mDic进行foreach循环时，就会调用Dictionary&amp;lt;TKey,TValue&amp;gt;.GetEnumerator()方法，该方法返回值类型即结构类型的Enumerator，避免了装箱操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/839833/201903/839833-20190322152616605-603362374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;One more thing：&lt;/h3&gt;
&lt;p&gt;　　这里可能很多人有个误解，即foreach是只能对实现了IEnumerable或IEnumerable&amp;lt;T&amp;gt;的类型对象进行遍历，其实不然，foreach语句还可以对满足以下条件的任何类型的对象进行遍历：&lt;/p&gt;
&lt;p&gt;　　实现了可访问的GetEnumerator()方法，且该方法的返回值类型符合：包含可访问的Current属性和bool MoveNext()方法；&lt;/p&gt;
&lt;h3&gt;Conclusion：&lt;/h3&gt;
&lt;p&gt;　　这样就知道了，.Net框架类库提供的泛型集合类型都实现了这样的方法，因此可以放心对泛型集合进行foreach遍历，而不产生堆内存的分配，也因此，我们在使用这些类型时，尽量避免直接对其接口类型的变量进行遍历；&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;如果您觉得阅读本文对您有帮助，请点一下“推荐”按钮，您的认可是我写作的最大动力！&lt;/p&gt;
&lt;p&gt;作者：&lt;a title=&quot;Minotauros&quot; href=&quot;https://www.cnblogs.com/minotauros/&quot; target=&quot;_blank&quot;&gt;Minotauros&lt;/a&gt;&lt;br/&gt;出处：&lt;a title=&quot;https://www.cnblogs.com/minotauros/&quot; href=&quot;https://www.cnblogs.com/minotauros/&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/minotauros/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/p&gt;
</description>
<pubDate>Fri, 22 Mar 2019 07:36:00 +0000</pubDate>
<dc:creator>Minotauros</dc:creator>
<og:description>Introduction： 博主是一名Unity 3D游戏开发者，游戏使用C#+lua开发，最近在优化C#代码时，发现了一处使用foreach不恰当的地方，其结果是造成了每帧近3k的GC Alloc，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/minotauros/p/10577149.html</dc:identifier>
</item>
<item>
<title>python3之Django表单(一) - Py.qi</title>
<link>http://www.cnblogs.com/zhangxinqi/p/10553650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxinqi/p/10553650.html</guid>
<description>&lt;h3&gt;1、HTML中的表单&lt;/h3&gt;
&lt;p&gt;在HTML种，表单是在&amp;lt;form&amp;gt;...&amp;lt;/form&amp;gt;种的元素，它允许用户输入文本，选择选项，操作对象等，然后发送这些数据到服务器&lt;/p&gt;
&lt;p&gt;表单元素允许用户在表单种输入内容如，文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等。&lt;/p&gt;
&lt;p&gt;大多数情况下被用到的表单标签是输入标签(&amp;lt;input&amp;gt;)，输入类型是由类型属性(type)定义的，大多数经常被用到的输入类型下面做简单介绍：&lt;/p&gt;
&lt;p&gt;（1）文本域（Text Fields）&lt;/p&gt;
&lt;p&gt;文本域通过&amp;lt;input type=&quot;text&quot;&amp;gt;标签来设定，当用户要在表单种输入字母，数字等内容是，就会用到文本域，在大多数浏览器种，文本域的缺省宽度是20个字符：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    姓名:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）密码字段&lt;/p&gt;
&lt;p&gt;密码字段通过标签&amp;lt;input type=&quot;password&quot;&amp;gt;来定义，密码字段字符不会明文显示，而是以星号或圆点替代：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    姓名:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    密码:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）单选按钮（Radio Buttons）&lt;/p&gt;
&lt;p&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;标签定义了表单单选框选项&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    姓名:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    密码:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    性别:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;man&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;男&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;weman&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;女&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）复选框（Checkboxes）&lt;/p&gt;
&lt;p&gt;&amp;lt;input type=&quot;checkbox&quot;定义了复选框，用户可以从若干个给定的选择种选择多个&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    姓名:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    密码:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    性别:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;man&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;男&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;weman&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;女&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    爱好:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;vehicle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;yundong&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;运动
          &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;vehicle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;youxi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;游戏
          &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;vehicle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;xuexi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;学习

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）提交按钮（Submit Button）&lt;/p&gt;
&lt;p&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;定义了提交按钮，当用户单击确认按钮时，表单的内容就会被传送到动作属性定义的目的文件中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;index.html&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    姓名:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    密码:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    性别:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;man&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;男&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;weman&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;女&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    爱好:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;vehicle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;yundong&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;运动
          &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;vehicle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;youxi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;游戏
          &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;vehicle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;xuexi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;学习&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器表单中的数据会发往action属性指定的URL，并且使用它的method属性指定的HTTP方法post，当点击submit类型的提交时，会将数据发送到index.html中。&lt;/p&gt;
&lt;p&gt;HTML5有许多新的input类型：&lt;/p&gt;
&lt;p&gt;color类型选取颜色，date类型日期选择器，datetime-local类型选择一个日期和时间，email类型用于e-mail地址的输入域，month类型允许选择一个月份，number类型用于数值的输入域，rang类型定义一定范围内数字的输入域，显示为滑动条可设置最大值max和最小值min，search类型用于搜索域，tel类型定义电话号码字段，time类型定义一个时间选择，url类型用于URL地址的输入域，week类型允许选择周和年。&lt;/p&gt;
&lt;p&gt;处理表单时只会用到GET和POST两种HTTP方法，GET方法会将提交的数据捆绑到URL中，而POST通过加密的方式在后台提交&lt;/p&gt;
&lt;h3&gt;2、Django中的表单&lt;/h3&gt;
&lt;p&gt;Django会处理涉及表单的三个部分：&lt;/p&gt;
&lt;p&gt;准备并重组数据，以便下一步的渲染；为数据创建HTML表单；接收并处理客户端提交的表单以及数据。&lt;/p&gt;
&lt;p&gt;Django表单系统的核心组件是Form类，Form类描述一张表单并决定它如何工作并呈现&lt;/p&gt;
&lt;p&gt;Form类，类似于模型类的字段映射到数据库字段的方式，表单类的字段会映射到HTML表单的&amp;lt;input&amp;gt;元素，表单字段本身也是类，它们管理表单数据并提交表单执行验证，在浏览器中表单字段以HTML控件的形式展现给我们，在Django中每个字段类型都有与之匹配的控件类，在必要时也可以覆盖&lt;/p&gt;
&lt;p&gt;在Django中渲染一个对象的过程通常为：在视图中获取数据，然后将数据传递给模板，使用模板变量将数据扩展到HTML标记，下面我们在Django中构建表单&lt;/p&gt;
&lt;p&gt; 在app中新建forms.py文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; forms

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;首先它继承Form类，然后通过控件类CharField定义文本域并指定属性&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexForm(forms.Form):
    username &lt;/span&gt;= forms.CharField(label=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在编辑视图并引入表单类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;views.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpResponse
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .forms &lt;span&gt;import&lt;/span&gt;&lt;span&gt; IndexForm

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;新建视图函数处理表单，首先判断提交类型为post则通过表单类接收POST请求数据并填充表单类，然后判断数据是否有效并提交到后台，此处做演示只做判断并提示接收成功，&lt;br/&gt;#如果提交类型不为POST则创建空表单通过变量传递给模板&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_name(request):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        form &lt;/span&gt;=&lt;span&gt; IndexForm(request.POST)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(form)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; form.is_valid():
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;提交到后台成功！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        form &lt;/span&gt;=&lt;span&gt; IndexForm()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:form})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表单类生成的数据如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;姓名:&amp;lt;/label&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在模板中只需简单的配置form标签并接收变量，注意表单不包含提交标签需要在模板中自己创建&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'formtest' %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    {&lt;/span&gt;% csrf_token %}  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;此处为跨站请求伪造保护功能django自提供&lt;/span&gt;
&lt;span&gt;    {{ form }}
    &lt;/span&gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提交&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;页面程序效果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;hidden&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;csrfmiddlewaretoken&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;e9Je91NyzZFWx83yXQbSiHYYjH3g4tsiz22zAjEAhSfKnNzPjAINCVd1iHZAnC4B&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;id_username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; maxlength&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt; required&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;id_username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在模板中我们只需将表单在上下问中进行渲染，来得到对应的标签元素，如上面的form变量渲染{{ form }}&lt;/p&gt;
&lt;p&gt;但在表单渲染选项还可以使用其他渲染方式：&lt;/p&gt;
&lt;p&gt;{{ form.as_table }}包装在&amp;lt;tr&amp;gt;标记中的表格单元格显示数据，但必须自己提供外层&amp;lt;table&amp;gt;元素&lt;/p&gt;
&lt;p&gt;{{ form.as_p }}包裹在&amp;lt;p&amp;gt;标记中的显示数据&lt;/p&gt;
&lt;p&gt;{{ form.as_ul }}包裹在&amp;lt;li&amp;gt;标记中显示数据，但必须自己提供外层&amp;lt;ul&amp;gt;元素&lt;/p&gt;
&lt;p&gt;手动渲染字段：&lt;/p&gt;
&lt;p&gt; 循环遍历每个字段对字段属性手动渲染，如下field.errors输出包含改字段验证的错误信息，field.label_tag为带&amp;lt;label&amp;gt;标签的label值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;遍历表单字段&lt;/span&gt;
&amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'index' %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    {&lt;/span&gt;% csrf_token %&lt;span&gt;}
    {&lt;/span&gt;% &lt;span&gt;for&lt;/span&gt; field &lt;span&gt;in&lt;/span&gt; form %&lt;span&gt;}
        {{ field.errors }}
        {{ field.label_tag }} {{ field }}&lt;/span&gt;&amp;lt;br&amp;gt;&lt;span&gt;
    {&lt;/span&gt;% endfor %&lt;span&gt;}
    &lt;/span&gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提交&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;/form&amp;gt;


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;渲染效果&lt;/span&gt;
&amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;csrfmiddlewaretoken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;benu1PCIYH6XKtSxa7cQyR8wwwIYvae7w7GPs7tKGAGLA8oOwRJLS5nzvwEiOjQq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Subject:&amp;lt;/label&amp;gt; &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Message:&amp;lt;/label&amp;gt; &amp;lt;textarea name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; cols=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rows=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_sender&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Sender:&amp;lt;/label&amp;gt; &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sender&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_sender&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_cc_myself&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Cc myself:&amp;lt;/label&amp;gt; &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cc_myself&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id_cc_myself&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提交&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;field.label_tag：输出field的label元素，如：&amp;lt;label for=&quot;id_subject&quot;&amp;gt;Subject:&amp;lt;/label&amp;gt;&lt;/p&gt;
&lt;p&gt;field：输出field的input，如：&amp;lt;input type=&quot;text&quot; name=&quot;subject&quot; maxlength=&quot;100&quot; required=&quot;&quot; id=&quot;id_subject&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;field.errors：输出field的errors元素，一般在form表单验证出错时显示&lt;/p&gt;
&lt;p&gt;field.id_for_label：输出字段的ID值&lt;/p&gt;
&lt;p&gt;field.value：输出字段填充的值&lt;/p&gt;
&lt;p&gt;field.html_name：输出字段的名称&lt;/p&gt;
&lt;p&gt;field.help_text：输出与该字段的帮助文本&lt;/p&gt;
&lt;p&gt;field.is_hidden：如果是隐藏字段属性值为True否则为False&lt;/p&gt;
&lt;h3&gt;3、表单集&lt;/h3&gt;
&lt;p&gt;Formset表单集是多个表单的集合，Formset在web开发中应用很普遍，它可以让用户在同一个页面提交多张表单，一键添加多个数据&lt;/p&gt;
&lt;p&gt;Django针对不同的formset提供了三种方法：formet_factory，modelformset_factory和inlineformset_factory&lt;/p&gt;
&lt;p&gt;（1）使用formset_factory&lt;/p&gt;
&lt;p&gt;对应继承forms.Form的自定义表单，我们可以使用formset_factory，通过设置extra指定表单数量，max_num指定表单数量最大值&lt;/p&gt;
&lt;p&gt;首先创建表单并使用formset_factory方法指定创建表单集并指定表单数量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;forms.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; forms
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.forms &lt;span&gt;import&lt;/span&gt;&lt;span&gt; formset_factory

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; registerForm(forms.Form):
    username &lt;/span&gt;= forms.CharField(max_length=120&lt;span&gt;)
    age &lt;/span&gt;=&lt;span&gt; forms.IntegerField()
    pub_date &lt;/span&gt;= forms.DateField(required=&lt;span&gt;False)

registerFormset &lt;/span&gt;= formset_factory(registerForm,extra=3,max_num=5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在视图views.py里使用formset&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;views.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,HttpResponse
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .forms &lt;span&gt;import&lt;/span&gt;&lt;span&gt; registerFormset

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; register(request):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        formset &lt;/span&gt;=&lt;span&gt; registerFormset(request.POST,request.FILES)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; formset.is_valid():
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formset is ok&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        formset &lt;/span&gt;=&lt;span&gt; registerFormset()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;register.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,context={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:formset})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后在模版中应用表单即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;{% url 'register' %}&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{ formset.management_form }}
    {% for form in formset %}
    {{ form.as_p }}
    {% endfor %}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4、从模型创建表单&lt;/h3&gt;
&lt;p&gt; 首先创建model模型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; timezone

TITLE_CHOICES &lt;/span&gt;=&lt;span&gt; (
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mr.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MRS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mrs.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ms.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Author(models.Model):
    name &lt;/span&gt;= models.CharField(max_length=100,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    title &lt;/span&gt;= models.CharField(max_length=3,choices=TITLE_CHOICES,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    birth_date &lt;/span&gt;= models.DateField(default=timezone.now,blank=True,null=True,verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据模型创建表单文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;forms.py&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;导入模型表单类&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; django.forms &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ModelForm
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Author

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;继承模型表单类创建表单&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthorForm(ModelForm):
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;= Author    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定model&lt;/span&gt;
        fields = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;birth_date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定要显示的字段，全显示可使用&quot;__all__&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在通过模型创建表单时，我们只需继承Django的模型表单类，然后重写它的属性即可，model指定要创建表单的模型，fields指定显示的模型字段,全显示可以用“__all__&quot;代替，还有其他的类属性exclude指定排除的字段，labels指定提示信息，help_texts指定帮助提示信息，widgets指定自定义插件，error_messages自定义错误信息，field_classes自定义字段类，localized_fields本地化时区时间，根据setting中TIME_ZONE设置的不同时区显示时间&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; forms
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.forms &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ModelForm
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Author

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthorForm(ModelForm):
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; Author
        fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;birth_date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
        widgets &lt;/span&gt;=&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:forms.Textarea(attrs={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cols&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:80,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:20&lt;span&gt;})
        } &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;覆盖重写title字段的类型&lt;/span&gt;
        labels =&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;作者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;头衔&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;birth_date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;出生日期&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        }
        error_messages &lt;/span&gt;=&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:{
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;max_length&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;名字长度在15个字符内&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在django中的模型字段和表单字段的字段类型定义都差不多，比较特殊的是ForeignKey和ManyToManyField模型字段在表单中的字段类型会有所不同：&lt;/p&gt;
&lt;p&gt;ForeignKey由django.forms.ModelChoiceField表示，它是一个ChoiceField，其选项是一个模型QuerySet&lt;/p&gt;
&lt;p&gt;ManyToManyField由django.forms.ModelMultipleChoiceField表示，它是一个MultipleChoiceField，其选项为一个模型QuerySet&lt;/p&gt;
&lt;p&gt;另外，每个生成的表单字段的属性设置如下：&lt;/p&gt;
&lt;p&gt;如果模型字段设置了blank=True，那么表单字段的required属性被设置为False,否知为True&lt;/p&gt;
&lt;p&gt;表单字段的label设置为模型字段的verbose_name，并且首字母大写&lt;/p&gt;
&lt;p&gt;表单字段的help_text设置为模型字段的help_text&lt;/p&gt;
&lt;p&gt;如果模型字段设置了choices，那么表单字段的widget会被设置为select，其选项来自模型字段的choices，这些选项通常包含一个默认选中的空选项，如果字段设置了必填，则会强制用户进行选项，如果模型字段设置了blank=False以及一个明确的default值，则表单字段中不会包含空选项&lt;/p&gt;
&lt;p&gt;在视图中使用表单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;views.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,HttpResponse
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .forms &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AuthorForm
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Author

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test(request):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        author_form &lt;/span&gt;=&lt;span&gt; AuthorForm(request.POST)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; author_form.is_valid():
            author_form.save(commit&lt;/span&gt;=&lt;span&gt;True)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;提交成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        author_form &lt;/span&gt;=&lt;span&gt; AuthorForm()
    obj &lt;/span&gt;=&lt;span&gt; Author.objects.all()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;author_form&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:author_form,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:obj})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;views.py中使用ModelForm的save()方法将表单数据保存到数据库中，参数commit为True时写如数据库，如果为False则创建一个Model对象但不保存到数据库中，如果要更新某个对象可以使用save的instance参数来指定要更新的model对象&lt;/p&gt;
&lt;p&gt;在模板中提交并展示数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#test.html

&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Author Form:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;{% url 'test' %}&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% csrf_token %}
    {{ author_form }}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Author Form output:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% for i in obj %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ i.id }}:{{ i.name }}:{{ i.title }}:{{ i.birth_date }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% endfor %}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表单模板ModelForm中有一个工厂函数可以直接通过Model创建表单modelform_factory()，在不需要很多自定义的情况下是很方便的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Author
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; forms
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.forms.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; modelformset_factory

modelform_Author &lt;/span&gt;= modelformset_factory(model=Author,fields=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),widgets={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:forms.Textarea()})
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 22 Mar 2019 07:20:00 +0000</pubDate>
<dc:creator>Py.qi</dc:creator>
<og:description>1、HTML中的表单 在HTML种，表单是在&lt;form&gt;...&lt;/form&gt;种的元素，它允许用户输入文本，选择选项，操作对象等，然后发送这些数据到服务器 表单元素允许用户在表单</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxinqi/p/10553650.html</dc:identifier>
</item>
<item>
<title>进程与线程杂谈 - 农码关山北</title>
<link>http://www.cnblogs.com/dslx/p/10572835.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dslx/p/10572835.html</guid>
<description>&lt;p&gt;今天同事突然问我线程与进程的关系，虽然给她解释完，但是看她茫然的眼神，我就知道并没有解释清楚。&lt;/p&gt;
&lt;h3&gt;程序概述&lt;/h3&gt;
&lt;p&gt;谈进程与线程之前，我们先谈下什么是程序，程序是为实现特定目标或解决特定问题而用计算机语言编写命令序列的集合。说得通俗点就是你用计算机听得懂话（编程语言）命令计算机为你做特定的事情。&lt;/p&gt;
&lt;h3&gt;进程概述&lt;/h3&gt;
&lt;p&gt;在我理解中，一个进程就是一个程序的一次执行过程，如果要专业的话来说&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。进程一般由程序，数据集合和进程控制块三部分组成。&lt;br/&gt;程序用于描述进程要完成的功能，是控制进程执行的指令集。&lt;br/&gt;数据集合是程序在执行时所需要的数据和工作区；程序控制块包含进程的描述信息和控制信息是进程存在的唯一标志&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;实例&lt;/h3&gt;
&lt;p&gt;打开window的任务管理器，创建一个记事本，打开记事本，会发现在任务管理器的进程列表发现“记事本”这个进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1333075/201903/1333075-20190322134347216-264188322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们多创建3个记事本，全部打开，观察进程列表，会发现有四个进程正在运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1333075/201903/1333075-20190322134500587-1390058865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那进程是如何工作的，线程（小弟）就闪亮登场了，在谈线程前，我们先总结下程序与进程的关系。&lt;/p&gt;
&lt;h3&gt;程序与进程的关系&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;一个程序可以对应多个进程，表示该程序被多次执行。&lt;/li&gt;
&lt;li&gt;一个进程只能对应于一个程序，表示该进程是按照某个程序进行的一次执行过程。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;线程&lt;/h3&gt;
&lt;p&gt;很多人好奇进程是如何做事的。事实上进程就是个大爷，是不做事的，而是吩咐别人做事，&quot;别人&quot;就是线程这位苦逼的被压榨者，当进程要做一件事，就会开启一个线程，所以我们可以得出一个结论，一个进程至少要有一个线程。没有线程这位苦逼的劳力就没人做事。被这么压榨的线程有一天终于爆发了，准备搞事情，农民起义。不幸的是他还没正式行动前就失败了。失败的原因如下&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;线程不能单独存在，必须依赖且由进程产生，它是进程的组成部分&lt;/li&gt;
&lt;li&gt;进程可以有多个线程（多线程),极端情况下，至少有一条线程。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;实例&lt;/h3&gt;
&lt;p&gt;打开记事本，任务管理器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1333075/201903/1333075-20190322143638470-2054483283.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1333075/201903/1333075-20190322143710046-362784790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到这个记事本的进程里，有6个线程。&lt;/p&gt;
&lt;h3&gt;线程的生命周期&lt;/h3&gt;
&lt;p&gt;新建--&amp;gt;就绪--&amp;gt;运行--&amp;gt;阻塞--&amp;gt;死亡&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://blog.csdn.net/xiaosheng900523/article/details/82964768&quot; target=&quot;_blank&quot;&gt;上厕所&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;你平时去商城上厕所，准备去上厕所就是新建，上厕所要排队，排队就是就绪，有坑位了，轮到你了，拉屎就是运行，你拉完屎发现没有手纸，要等待别人给你送纸过来，这个状态就是阻塞，等你上完厕所出来，上厕所这件事情结束了就是死亡状态了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：便秘也是阻塞状态，你便秘太久了，别人等不及了，把你赶走，这个就是挂起，还有一种情况，你便秘了，别人等不及了，跟你说你先出去酝酿一下，5分钟后再过来拉屎，这就是睡眠&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1613111317017269753&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot;&gt;多线程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;很多人有这样的体验，打开浏览器，一边写博客，一边听歌，我们必须打开两个网页。一个用来写作，一个听歌曲，现在浏览器有两种处理方案，一种先执行听歌任务，播放任务结束后，在执行写作任务。如果按这种方式执行，写博客的想砸电脑的心都有了，另一种就是多线程执行，&lt;/p&gt;
&lt;p&gt;浏览器开启两个线程，一个线程负责播放音乐任务，一个线程打开博客写作，相当于并行处理两个任务。但这里的并行有时候并不是真正的的并行，而是将CPU分片，&lt;span class=&quot;bjh-p&quot;&gt;每一片的单位是0.001秒，两个线程轮番占用CPU的时间，最终在2个线程优先级相同的情况下，会各占用CPU 0.5秒的时间。但因为这个切换太快了，用户是根本感觉不到的。但这种机制并不是真正的并行。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;为了更好的利用cpu的资源，如果只有一个线程，则第二个任务必须等到第一个任务结束后才能进行，如果使用多线程则在主线程执行任务的同时可以执行其他任务，而不需要等待。&lt;/li&gt;
&lt;li&gt;进程之间不能共享数据，线程可以。&lt;/li&gt;
&lt;li&gt;系统创建进程需要为该进程重新分配系统资源，创建线程代价比较小。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程和线程都是一个时间段的描述，是CPU工作时间段的描述。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;================================================&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于多线程后续Java的线程整理会详细介绍&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 22 Mar 2019 07:14:00 +0000</pubDate>
<dc:creator>农码关山北</dc:creator>
<og:description>今天同事突然问我线程与进程的关系，虽然给她解释完，但是看她茫然的眼神，我就知道并没有解释清楚。 程序概述 谈进程与线程之前，我们先谈下什么是程序，程序是为实现特定目标或解决特定问题而用计算机语言编写命</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dslx/p/10572835.html</dc:identifier>
</item>
<item>
<title>设计模式六大原则 - mingmingcome</title>
<link>http://www.cnblogs.com/mingmingcome/p/10578208.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mingmingcome/p/10578208.html</guid>
<description>&lt;p&gt;&lt;code&gt;2019年2月26日19:41:21&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计模式六大原则&quot;&gt;设计模式六大原则&lt;/h2&gt;
&lt;h4 id=&quot;为什么会有六大原则&quot;&gt;为什么会有六大原则&lt;/h4&gt;
&lt;p&gt;有言曰，“无规矩不成方圆”，有“规”才能画“圆”，那设计模式要遵循的六大原则要画一个什么的“圆”呢？&lt;/p&gt;
&lt;p&gt;这里要从面向对象编程说起，从面向过程编程到面向对象编程是软件设计的一大步，封装、继承、多态是面向对象的三大特征，本来这些都是面向对象的好处，但是一旦有人滥用了，就有了坏味道。&lt;/p&gt;
&lt;p&gt;比如，封装是隐藏对象的属性和实现细节的，我想到了还没提倡MVC的时候，一个servlet里的doGet、doPost方法就完成了所有事情，业务逻辑、数据持久化、页面渲染等，这样一来我们需要修改业务逻辑的时候是修改这个servlet，需要修改数据持久化的是修改这个servlet，甚至页面修改也是修改这个servlet。这样可维护性就很差了。&lt;/p&gt;
&lt;p&gt;因为滥用或者不正确的时候导致代码的坏味道，导致系统的可维护性和复用性等变低，所以面向对象需要遵循一些原则make the code better。如：一个servlet干所有事情可以改为MVC，每一层的类做自己负责的事情，遵循单一职责原则。&lt;/p&gt;
&lt;p&gt;为了提高系统的可维护性、复用性和高内聚低耦合等，所以有了六大原则。因为设计模式是面向对象实践出来的经验，所以这六大原则既是面向对象的六大原则，也是设计模式的六大原则。&lt;/p&gt;
&lt;h4 id=&quot;六大原则&quot;&gt;六大原则&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Mingmingcome/cnblogs/master/images/design-pattern-six-principle.png&quot; alt=&quot;设计模式六大原则&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先来个图，总体感受一下，其实说简单也简单，死记硬背这六个名词不用十分钟，但是要使用得游刃有余，还是要下一点功夫的。本文也只是纸上谈兵，聊聊六大原则的定义、用法、好处等。&lt;/p&gt;
&lt;h4 id=&quot;单一职责原则single-responsibility-principlesrp&quot;&gt;单一职责原则（Single Responsibility Principle，SRP）&lt;/h4&gt;
&lt;p&gt;定义：不要存在多于一个导致类变化的原因（There should never be more than one reason for a class to change.）。&lt;/p&gt;
&lt;p&gt;就像我前面说到的那个例子，一个servlet干完了所有事情，这样导致servlet变化的原因就不止一个了，所以要将这些事情分给不同的类。&lt;/p&gt;
&lt;p&gt;比如我现在要实现一个登录的功能，servlet代码是这样的：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class LoginServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 1、获取前端传过来的数据
        // 2、连接数据库，查询数据
        // 3、比较数据，得出结果
        // 4、封装结果，返回给前端
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;应用MVC后，代码修改如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class LoginController {

    private LoginService loginService;

    public ModelAndView Login(HttpServletRequest req, HttpServletResponse resp) {
        // 1、获取前端传过来的数据
        loginService.login();
        // 4、封装结果，返回给前端
        return null;
    }
}

public class LoginService {

    private UserDao userDao;

    public boolean login() {
        userDao.findOne();
        // 3、比较数据，得出结果
        return false;
    }
}

public class UserDao {

    public User findOne(){
        // 2、连接数据库，查询数据
        return null;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有图如下：&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Mingmingcome/cnblogs/master/images/single-responsibility-principle.jpg&quot; alt=&quot;单一职责原则&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样职责分明，有变更需求只需要找到职责相关的那部分修改就好。比如要修改比较逻辑，就修改Service层代码；要修改连接数据库，就修改Dao层就可以了；要修改返回页面的内容，就修改Controller层就可以了。&lt;/p&gt;
&lt;p&gt;应用场景：在项目开始阶段要明确类的职责，如果发现一个类有两个或以上的职责，那就拆成多个类吧。如果是项目后期，要评估好修改的代价之后在重构。别让一个类做的事情太多。&lt;/p&gt;
&lt;p&gt;好处：实现高内聚、低耦合，增加代码的复用性。&lt;/p&gt;
&lt;h4 id=&quot;开闭原则open-closed-principle-ocp&quot;&gt;开闭原则（Open Closed Principle， OCP）&lt;/h4&gt;
&lt;p&gt;定义：软件实体，如：类、模块与函数，对于扩展开放，对修改关闭（Software entities like classes, modules and functions should be open for extension but closed for modifications.）。&lt;/p&gt;
&lt;p&gt;从简单工厂模式到工厂方法模式，完美诠释了开闭原则的应用场景。有兴趣可以查看本人所写的&lt;a href=&quot;https://www.cnblogs.com/mingmingcome/p/9513238.html&quot;&gt;《简单工厂模式》&lt;/a&gt;和&lt;a href=&quot;https://www.cnblogs.com/mingmingcome/p/9522007.html&quot;&gt;《工厂方法模式》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;用类对象实现操作符运算：&lt;/p&gt;
&lt;p&gt;简单工厂模式实现：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static IOperation createOperation(String op) {
    IOperation operation = null;

    if (&quot;+&quot;.equals(op)) {
        operation = new AddOperationImpl();
    } else if (&quot;-&quot;.equals(op)) {
        operation = new SubOperationImpl();
    } else if (&quot;*&quot;.equals(op)) {
        operation = new MulOperationImpl();
    } else if (&quot;/&quot;.equals(op)) {
        operation = new DivOperationImpl();
    }
    
    return operation;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是简单工厂模式中的工厂角色实现创建所有实例的内部逻辑的方法，调用方法时，根据传进来的操作符选择不同的实现类，但是如果我要添加一个乘方的话，就需要添加else if结构，没有对修改关闭，这样就不符合开闭原则了。&lt;/p&gt;
&lt;p&gt;工厂方法模式实现：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 加
// 创建具体工厂
IOperationFactory operationFactory = new AddOperationFactoryImpl();
// 创建具体产品
IOperation operation = operationFactory.createOperation();
// 调用具体产品的功能
int result = operation.getResult(a, b); &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要什么运算，就继承IOperationFactory实现对应的实现类，使用时只需要在需要的地方new这个实现类即可。不用修改工厂类，增加运算就增加抽象工厂类的实现类，符合开闭原则。&lt;/p&gt;
&lt;p&gt;应用场景：在系统的任何地方&lt;/p&gt;
&lt;p&gt;好处：使得系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性&lt;/p&gt;
&lt;h4 id=&quot;里氏替换原则liskov-substitution-principlelsp&quot;&gt;里氏替换原则（Liskov Substitution Principle，LSP）&lt;/h4&gt;
&lt;p&gt;定义：使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象（Functions that use pointers or references to base classes must be able to use objects of derived classes whithout knowing it.）。&lt;/p&gt;
&lt;p&gt;为什么叫里氏替换原则？ 里氏代换原则由2008年图灵奖得主、美国第一位计算机科学女博士Barbara Liskov教授和卡内基·梅隆大学Jeannette Wing教授于1994年提出。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;里氏替换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。例如，我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此断定我喜欢动物，因为我并不喜欢老鼠，虽然它也是动物。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面叙述转为代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 动物
public interface Animal {
    public String getName();
}
// 狗
public class Dog implements Animal{
    private String name = &quot;狗&quot;;
    @Override
    public String getName() {
        return this.name;
    }
}
// 老鼠
public class Mouse implements Animal{
    private String name = &quot;老鼠&quot;;
    @Override
    public String getName() {
        return this.name;
    }
}
// 测试类
public class ISPTest {
    public static void main(String[] args) {
        Animal dog = new Dog();
        Animal mouse = new Mouse();
        iLoveAnimal(dog);
        iLoveAnimal(mouse);
//        iLoveDog(dog);
//        iLoveDog(mouse);
    }

    public static void iLoveAnimal(Animal animal) {
        System.out.println(animal.getName());
    }

    public static void iLoveDog(Dog dog) {
        System.out.println(dog.getName());
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中iLoveAnimal(Animal animal)可以传递的对象参数有Dog和Mouse，因为Dog和Mouse是Animal的子类，所以编译通过。iLoveDog(Dog dog)不能Mouse为参数，虽然他们同属Animal的子类，编译不能通过。在编译阶段，Java编译器会检查一个程序是否符合里氏替换原则，但是Java编译器的检查是有局限的，这只是一个与实现无关、纯语法意义上的检查，在设计上我们要注意遵循里氏替换原则。&lt;/p&gt;
&lt;p&gt;理论上，里氏替换原则是实现开闭原则的重要方式之一，使用基类对象的地方都可以使用子类对象，所以在程序中尽量使用基类类型来对对象进行定义，而在运行时在确定其子类类型，当子类类型改变时，就能实现&lt;strong&gt;扩展&lt;/strong&gt;，并没有对现有的代码结构进行&lt;strong&gt;修改&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实践中，我们能做的是：&lt;/p&gt;
&lt;h4 id=&quot;最少知识原则least-knowledge-principlelkp又名迪米特法则law-of-demeter&quot;&gt;最少知识原则（Least Knowledge Principle，LKP）又名迪米特法则（Law of Demeter）&lt;/h4&gt;
&lt;p&gt;定义：只与你最直接的朋友交流（Only talk to you immediate friends.）。&lt;/p&gt;
&lt;p&gt;又名迪米特法则的原因是：迪米特法则来自于1987年美国东北大学(Northeastern University)一个名为“Demeter”的研究项目。&lt;/p&gt;
&lt;p&gt;根据迪米特法则有，对象&lt;code&gt;O&lt;/code&gt;的一个方法&lt;code&gt;M&lt;/code&gt;仅能访问以下类型的对象：&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;1、当前对象&lt;code&gt;O&lt;/code&gt;自身（this）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;2、&lt;code&gt;M&lt;/code&gt;方法的参数对象（如，toString(Integer i)中对象&lt;code&gt;i&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;3、当前对象&lt;code&gt;O&lt;/code&gt;成员对象（当前对象&lt;code&gt;O&lt;/code&gt;直接依赖的对象）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;4、&lt;code&gt;M&lt;/code&gt;方法中所创建的对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;重要的是，方法&lt;code&gt;M&lt;/code&gt;不应该调用这些方法返回对象的方法，就是链式调用返回的但返回的并不是自身对象的对象的方法。和你朋友说话，而不是和你朋友的朋友，对于你来说是陌生人的人说话。&lt;/p&gt;
&lt;p&gt;下面是一个例子：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class LawOfDelimterDemo {

    /**
     * 这个方法有两个违反最少知识原则或迪米特法则的地方。
     */
    public void process(Order o) {

        // 这个方法调用符合迪米特法则，因为o是process方法的参数，是类型2的参数
        Message msg = o.getMessage();

        // 这个方法调用违反了迪米特法则，因为使用了msg对象，这个对象是从参数对象中得到的对象。
        // 我们应该让Order去normalize这个Message，例如：o.normalizeMessage()，而不是使用msg对象的方法
        msg.normalize();

        // 这也是违反迪米特法则的，使用了方法链代替上面说的msg临时变量。
        o.getMessage().normalize();

        // 构造函数调用
        Instrument symbol = new Instrument();

        // as per rule 4, this method call is OK, because instance of Instrument is created locally.
        // 这个方法调用是符合迪米特法则的，因为Instrument实例是本地创建的，就是类型4的对象，process方法中所创建的对象
        symbol.populate(); 
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好处：降低系统的耦合性，增加系统的可维护性和适应性。因为较少依赖于其他对象的内部结构，其他对象的修改就重新修改它们的调用者。&lt;/p&gt;
&lt;p&gt;坏处：可能会增加对象的方法，引发其他bug。&lt;/p&gt;
&lt;h4 id=&quot;接口隔离原则interface-segregation-principle-isp&quot;&gt;接口隔离原则（Interface Segregation Principle， ISP）&lt;/h4&gt;
&lt;p&gt;定义：一个类与另外一个类之间的依赖性，应该依赖于尽可能小的接口（The dependency of one class to another one should depend on the smallest possible interface.）。&lt;/p&gt;
&lt;p&gt;例子：首先有一个经理，负责管理工人。其次，有两种类型的工人，一种是在平均水平的工人，一种是高效率的工人，这些工人都需要午休时间来吃饭。最后还有一种机器人在工作，但是机器人不需要午休。&lt;/p&gt;
&lt;p&gt;设计实现代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;interface IWorker {
    public void work();
    public void eat();
}

// 一般工人
class Worker implements IWorker {
    public void work() {
        // 正常工作
    }
    pubic void eat() {
        // 午休吃饭
    }
}

// 高效率工人
class SuperWorker implements IWorker {
    public void work() {
        // 高效率工作
    }
    public void eat() {
        // 午休吃饭
    }
}

// 机器人
class Rebot implements IWorker {
    public woid work() {
        // 工作
    }
    public void eat() {
        // (实现代码为空，什么也不做)
    }
}

class Manager {
    IWorker worker;

    public void setWorker(IWorker w) {
        worker = w;
    }
    public void manage() {
        worker.work();
        worker.eat();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;经理去管理工人的时候，调用接口eat方法的时候，机器人什么也不做。我们应该让接口变小，把IWorker接口拆分。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 工作接口
interface IWorkable {
    public void work();
}
// 吃饭接口
interface IFeedable {
    public void eat();
}

// 一般工人
class Worker implements IWorkable, IFeedable {
    public void work() {
        // 正常工作
    }
    pubic void eat() {
        // 午休吃饭
    }
}

// 高效率工人
class SuperWorker implements IWorkable, IFeedable {
    public void work() {
        // 高效率工作
    }
    public void eat() {
        // 午休吃饭
    }
}

// 机器人
class Rebot implements IWorkable {
    public woid work() {
        // 工作
    }
}

class Manager {
    IWorkable worker;
    IFeedable feed;

    public void setWorker(IWorkable w) {
        worker = w;
    }
    public void setfeed(IFeedable f) {
        feed = f;
    }
    public void manageWork() {
        worker.work();
    }
    public void manageFeed() {
        feed.eat();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将IWorker接口拆分成IWorkable接口和IFeedable接口，将Manager类与工人类交互尽量依赖与比较小的接口。&lt;/p&gt;
&lt;p&gt;在使用接口隔离原则时，我们需要&lt;strong&gt;注意控制接口的粒度&lt;/strong&gt;，接口不能太小，如果太小会导致系统中接口泛滥，不利于维护；接口也不能太大，太大的接口将违背接口隔离原则，灵活性较差，使用起来很不方便。一般而言，接口中仅包含为某一类用户定制的方法即可，不应该强迫客户依赖于那些它们不用的方法。&lt;/p&gt;
&lt;h4 id=&quot;依赖倒置原则dependence-inversion-principle-dip&quot;&gt;依赖倒置原则（Dependence Inversion Principle， DIP）&lt;/h4&gt;
&lt;p&gt;定义：高层模块不应该依赖于底层模块，它们都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖与抽象（High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.）。&lt;/p&gt;
&lt;p&gt;尽量面对接口编程，而不是面对实现编程。&lt;/p&gt;
&lt;p&gt;例子：你现在是一个导演，你要拍一部电影，准备找刘德华做主角。在电影里，刘德华是一个警察，可以捉犯人。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 刘德华
class LiuDeHua {
    public LiuDeHua(){}
    public void catchPrisoner(){}
}

// 剧本
class Play {
    LiuDeHua liuDeHua = new LiuDeHua();
    liuDeHua.catchPrisoner();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是华仔因为档期来不了，于是找古天乐。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 古天乐
class GuTianLe {
    public GuTianLe(){}
    public void catchPrisoner(){}
}

// 剧本
class Play {
    GuTianLe guTianLe = new GuTianLe();
    guTianLe.catchPrisoner();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;古仔说要捐钱建学校，没空来。于是又说要找刘青云，编剧心好累……&lt;/p&gt;
&lt;p&gt;如果编剧只是面对接口编程，就会变成这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 警察
interface Police {
    public void catchPrisoner();
}

// 剧本
class Play {
    private Police police;
    public Play(Police p) {
        police = p;
    }
    police.catchPrisoner();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样无论谁来，只需要实现Police接口就可以按剧本拍了。&lt;/p&gt;
&lt;p&gt;在实现依赖倒置原则时，我们需要针对抽象层编程，而将具体类的对象通过&lt;strong&gt;依赖注入（DependencyInjection, DI）&lt;/strong&gt;的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。&lt;/p&gt;
&lt;p&gt;常用的注入方式有三种，分别是：构造注入，设值注入（Setter注入）和接口注入。构造注入是指通过构造函数来传入具体类的对象，设值注入是指通过Setter方法来传入具体类的对象，而接口注入是指通过在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象。&lt;/p&gt;
&lt;p&gt;在大多数情况下，开闭原则、里氏替换原则和依赖倒置原则这三个设计原则会同时出现，&lt;strong&gt;开闭原则是目标，里氏代换原则是基础，依赖倒置原则是手段&lt;/strong&gt;，它们相辅相成，相互补充，目标一致，只是分析问题时所站角度不同而已。&lt;/p&gt;
&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://javarevisited.blogspot.com/2014/05/law-of-demeter-example-in-java.html#ixzz5imE4BM45&quot;&gt;Law of Demeter in Java - Principle of least Knowledge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lovelion/article/details/7562783&quot;&gt;面向对象设计原则之依赖倒转原则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2019年3月22日14:31:03&lt;/code&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 22 Mar 2019 06:50:00 +0000</pubDate>
<dc:creator>mingmingcome</dc:creator>
<og:description>`2019年2月26日19:41:21` 设计模式六大原则 为什么会有六大原则 有言曰，“无规矩不成方圆”，有“规”才能画“圆”，那设计模式要遵循的六大原则要画一个什么的“圆”呢？ 这里要从面向对象编</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mingmingcome/p/10578208.html</dc:identifier>
</item>
<item>
<title>设计模式之策略者模式 - 艾心❤</title>
<link>http://www.cnblogs.com/edison0621/p/10578150.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edison0621/p/10578150.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;策略者模式定义一个算法接口，并由其实现类去实现，使得每一个算法都得到封装，并让他们可以相互替换。这是一种行为型模式。策略者模式降低了算法行为和环境角色的耦合度，使得算法可以独立发生变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;策略者模式在现实世界的使用很多，比如互金场景中的优惠券模式，可以分为本金券，返现券，加息券，增收券等，每种卡券给予用户享受不同的权益，如果有一天增加了新的优惠券，也很容易扩展进去。由此可见，策略者模式使得业务线索更加清晰明了，每种业务线索场景彼此互不关联，互不影响。&lt;/p&gt;
&lt;p&gt;同时，由于会员权益，并不强耦合企业业务，所以当有一天企业业务扩大，并同时需要对不同等级的会员进行进一步的权益扩展的时候，修改起来也会很方便，当然某些可变数据是可以通过配置来解决的，这也进一步减少了代码的修改。&lt;br/&gt;当然，我们也可以看到，根据特定的场景，充分运用其规则，并通过配合一些常规手段来进一步完善和稳定系统功能的时候，可以把设计模式的威力进一步发挥出来，切记不可拘泥于设计模式本身。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/533598/201903/533598-20190322144022469-737702492.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;由UML类图可知策略者模式分为三个角色&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Context：此处负责抽象策略类调度具体的算法策略，根据某些具体场景的不同，Context也可以有不同的实现。&lt;br/&gt;Strategy：抽象算法策略类，所以具体策略者的父类，定义了一个抽象的方法，可以是接口也可以是抽象类，我一般使用抽象类，因为我需要对一些数据进行特殊的处理后再交给子类。&lt;br/&gt;ConcreteStrategy：具体的算法策略，具体实现抽象的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下范例，会使用前面所说的互金场景下的卡券，对于用户来说，就是购买产品时所使用的卡券能为自己带来多少收益，所以此处把【用】这个算法抽象出来，由每种卡券自己去实现响应的算法&lt;/p&gt;
&lt;p&gt;策略算法抽象类：&lt;/p&gt;

&lt;div class=&quot;csharpcode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; BaseCoupon
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;   &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; productCircle;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;   &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; BaseCoupon(Product product)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;   {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;       productCircle = (product.EndTime - product.StartTime).Days;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;   }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;   &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; UseCoupon();
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;csharpcode&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;csharpcode&quot;&gt;策略算法具体的四个卡券类&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; PrincipalCoupon : BaseCoupon
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; PrincipalCoupon(Product product) : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(product)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// 使用本金券&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; UseCoupon()
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;        Console.WriteLine($&lt;span class=&quot;str&quot;&gt;&quot;此处使用的是本金券，产品周期{productCircle}，经计算将返现1.2元&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; 1.2M;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;}
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; CashBackCoupon : BaseCoupon
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; CashBackCoupon(Product product) : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(product)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// 使用返现券&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; UseCoupon()
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;        Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&quot;此处使用的是返现券，产品周期{productCircle}，经计算将返现12元&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; 12M;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  36:  &lt;/span&gt;}
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  37:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  38:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; IncreaseInterestCoupon : BaseCoupon
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  39:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  40:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; IncreaseInterestCoupon(Product product) : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(product)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  41:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  42:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  43:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  44:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  45:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  46:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// 使用加息券&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  47:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  48:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; UseCoupon()
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  49:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  50:  &lt;/span&gt;        Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&quot;此处使用的是加息券，产品周期{productCircle}，经计算将返现1.5元&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  51:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  52:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; 1.5M;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  53:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  54:  &lt;/span&gt;}
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  55:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  56:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; IncreaseIncome : BaseCoupon
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  57:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  58:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; IncreaseIncome(Product product) : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(product)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  59:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  60:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  61:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  62:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  63:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  64:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// 使用增收券&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  65:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  66:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; UseCoupon()
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  67:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  68:  &lt;/span&gt;        Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&quot;此处使用的是增收券，产品周期{productCircle}，经计算将返现5.5元&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  69:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  70:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; 5.5M;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  71:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  72:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;csharpcode&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;策略者上线文类，此处我提供了两种实现方式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、如果策略者上线文类比较简单，除了对象获取以外，没有其他特殊的使用，可以考虑类似于简单工厂的模式，毕竟，我们在开发卡券功能时，会提供响应的卡券类型枚举，此处可以借用一下&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; ConponUseContext
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; BaseCoupon GetCoupon(CouponType couponType, Product product)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;switch&lt;/span&gt; (couponType)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;case&lt;/span&gt; CouponType.PrincipalCoupon:
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;                &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; CashBackCoupon(product);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;case&lt;/span&gt; CouponType.CashBackCoupon:
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;                &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; CashBackCoupon(product);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;case&lt;/span&gt; CouponType.IncreaseInterestCoupon:
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;                &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; IncreaseInterestCoupon(product);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;case&lt;/span&gt; CouponType.IncreaseIncome:
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;                &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; IncreaseIncome(product);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;default&lt;/span&gt;:
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;                &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;str&quot;&gt;&quot;未知的卡券类型&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;调用方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Program
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Main(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;[] args)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;            Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&quot;我用了本金券&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; interest = ConponUseContext.GetCoupon(CouponType.PrincipalCoupon, &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Product());
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;            Console.WriteLine($&lt;span class=&quot;str&quot;&gt;&quot;该用户获得的收益是{interest}&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;span&gt;&lt;strong&gt;2、另外一种实现方式，就是采用注入方式，这种实现方式一般用于策略者上下文类功能比较多的情况&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; ConponUseContext
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; BaseCoupon baseCoupon;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ConponUseContext(BaseCoupon baseCoupon)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.baseCoupon = baseCoupon;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; UseCoupon()
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.baseCoupon.UseCoupon();
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;调用方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Program
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Main(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;[] args)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;        Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&quot;我用了本金券&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;decimal&lt;/span&gt; interest = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ConponUseContext(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Product()).GetCoupon(CouponType.PrincipalCoupon);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;        Console.WriteLine($&lt;span class=&quot;str&quot;&gt;&quot;该用户获得的收益是{interest}&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;很好的体现了开闭原则，开发者可以在不变更其他具体算法的基础上新增新的策略类，即便是策略者的具体场景发生变化，并需要大规模修改时，也会很容易，因为独立的场景总会带来特定的思维模式，让开发者不会被其他场景所干扰，所谓关注点分离，也可以使用如上解释。&lt;/li&gt;
&lt;li&gt;避免了大量的if-else&lt;/li&gt;
&lt;li&gt;算法可以自由切换&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;有可能会产生大量的策略类，并且所有策略类都会对外暴露&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;其实这一块我并不想写，因为写了以后，会给人一种思维定势，但是此处还是需要多讨论一下什么场景下去使用策略者模式，我们可以做一个这样的思考，当代码中或者即将编写的功能需要配合大量的if-else，其中的代码会较为复杂，并且这些产生if-else出现了较强的逻辑上的关联，外界也根本不关注其中的具体实现，在加入一层抽象层后，会使得这些功能跟家聚合，更加明确，这个时候，可以考虑使用策略者模式。需要提醒的时候，策略者模式关注的是对象的行为，如果关注对象本身，可以使用简单工厂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;以上为本篇文章的主要内容，希望大家多提提意见，如果喜欢记得点个赞哦&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 22 Mar 2019 06:41:00 +0000</pubDate>
<dc:creator>艾心❤</dc:creator>
<og:description>策略者模式简介 策略者模式定义一个算法接口，并由其实现类去实现，使得每一个算法都得到封装，并让他们可以相互替换。这是一种行为型模式。策略者模式降低了算法行为和环境角色的耦合度，使得算法可以独立发生变化</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edison0621/p/10578150.html</dc:identifier>
</item>
<item>
<title>Anaconda / Conda 实践 - 小蒋不素小蒋</title>
<link>http://www.cnblogs.com/xjnotxj/p/10577995.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xjnotxj/p/10577995.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;CentOS 7.6&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有预装 python 2.7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;&lt;h3 id=&quot;anaconda&quot;&gt;1、Anaconda&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Anaconda&lt;/code&gt; 是Python的一种&lt;strong&gt;发行版&lt;/strong&gt;。包含了：&lt;/p&gt;
&lt;p&gt;（1）conda&lt;/p&gt;
&lt;p&gt;（2）某个版本的python&lt;/p&gt;
&lt;p&gt;（3）预装好的packages&lt;/p&gt;
&lt;p&gt;Anaconda Distribution还有&lt;strong&gt;Anaconda Navigator&lt;/strong&gt;，提供了界面化的操作。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;其实还有&lt;code&gt;Miniconda&lt;/code&gt;，只有最基本的conda和python。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;conda&quot;&gt;2、Conda&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;conda&lt;/code&gt;是Anaconda下的&lt;strong&gt;包管理&lt;/strong&gt;与&lt;strong&gt;环境管理&lt;/strong&gt;工具。也可以单独安装。&lt;/p&gt;

&lt;hr/&gt;&lt;h3 id=&quot;包的来源不一样&quot;&gt;1、包的来源不一样&lt;/h3&gt;
&lt;p&gt;Conda 来源于 Anaconda repo and cloud （&lt;a href=&quot;http://anaconda.org/&quot; class=&quot;uri&quot;&gt;http://anaconda.org/&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;pip（pip Installs Packages） 来源于 PyPI （&lt;a href=&quot;https://pypi.python.org/pypi&quot; class=&quot;uri&quot;&gt;https://pypi.python.org/pypi&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;Anaconda存储库中提供了超过1,500个包，但与PyPI上提供的150,000多个软件包相比，它仍然很小。&lt;/p&gt;
&lt;h3 id=&quot;包的种类不一样&quot;&gt;2、包的种类不一样&lt;/h3&gt;
&lt;p&gt;pip 是 python 官方自带的包管理工具，只能安装 python 软件。&lt;/p&gt;
&lt;p&gt;Conda包不仅限于Python软件。它们还可能包含C或C ++库，R包或任何其他软件。&lt;strong&gt;在这个意义上，它不像pip，更像是apt或yum等跨平台版本。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Conda 是一个与语言无关的跨平台环境管理器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;conda-比-pip-多了环境管理功能&quot;&gt;3、Conda 比 pip 多了环境管理功能&lt;/h3&gt;
&lt;p&gt;Pip没有内置的环境支持，除非使用第三方 virtualenv。&lt;/p&gt;

&lt;hr/&gt;&lt;h3 id=&quot;下载&quot;&gt;1、下载&lt;/h3&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.anaconda.com/distribution/&quot; class=&quot;uri&quot;&gt;https://www.anaconda.com/distribution/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有 Python 3.7 和 Python 2.7 两个版本提供下载：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/896608/201903/896608-20190322142154242-325039550.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们下载 Python 3.7版本，即&lt;code&gt;Anaconda3-2018.12-Linux-x86_64.sh&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;2、安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bash Anaconda3-2018.12-Linux-x86_64.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在当前路径安装后，会生成&lt;code&gt;anaconda3&lt;/code&gt;目录和一些隐藏文件。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;h5 id=&quot;坑安装报错&quot;&gt;坑：安装报错&lt;/h5&gt;
&lt;p&gt;Anaconda3-2018.12-Linux-x86_64.sh: line 353: bunzip2: command not found&lt;/p&gt;
&lt;p&gt;解决方案：安装 bzip2 包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum install bzip2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;添加环境变量&quot;&gt;3、添加环境变量&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;source .bashrc&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何判断安装成功&quot;&gt;4、如何判断安装成功？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;conda --version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python --version&lt;/code&gt;（python 3.7版本会覆盖之前 centos 预装的2.7版本）&lt;/p&gt;
&lt;p&gt;安装成功后，&lt;strong&gt;机器自带的 pip 和 python、python3 都会被Conda接管。&lt;/strong&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;h3 id=&quot;基本操作&quot;&gt;1、基本操作&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# --------------------------

### 创建环境
conda create -n ds
conda create -n ds python=3.7 (推荐安装好 python，下面会说原因)
conda create -n ds python=3.4 scipy=0.15.0 astroid babel
# 还可以通过yml的环境文件（下面会介绍）
# 克隆环境（下面会介绍）

# --------------------------

### 激活环境 
source activate ds
conda activate ds

# --------------------------

### 退出环境 
source deactivate
conda deactivate

# --------------------------

### 删除环境
conda remove -n ds --all

# --------------------------

### 列出所有环境(一开始有一个名为base的默认环境)
conda info -e

# --------------------------&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;克隆环境&quot;&gt;2、克隆环境&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;conda create -n new_ds --clone ds&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;共享环境&quot;&gt;3、共享环境&lt;/h3&gt;
&lt;p&gt;用这个功能可以很好的迁移 python 项目的依赖环境，取代传统的 pip + virtualenv 的方式。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1、先激活环境

2、再导出环境配置文件
conda env export &amp;gt; environment.yml

3、再根据环境配置文件生成新环境
conda env create -f environment.yml

4、再激活新环境&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一个典型的&lt;strong&gt;环境配置文件&lt;/strong&gt;&lt;code&gt;environment.yml&lt;/code&gt;如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name: ds
channels:
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
  - defaults
dependencies:
  - ca-certificates=2019.1.23=0
  - certifi=2019.3.9=py37_0 
  - pip:
    - ansiwrap==0.8.4
    - attrs==19.1.0 
prefix: /mnt/ds/anaconda3/envs/ds
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;记得修改&lt;code&gt;prefix&lt;/code&gt;路径，因为每台机器的anaconda3安装路径可能不一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;坑1共享环境不适用不同的操作系统比如-linux-迁移到-mac&quot;&gt;&lt;strong&gt;坑1：共享环境不适用不同的操作系统（比如 linux 迁移到 mac）&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;解决办法：还是 docker 大法好啊！！&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;坑2共享环境后pip的包装不上&quot;&gt;坑2：共享环境后，pip的包装不上&lt;/h5&gt;
&lt;p&gt;原因未知……待解决&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法：还是 docker 大法好啊！！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;保存环境变量&quot;&gt;4、保存环境变量&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&quot;构建相同的conda环境&quot;&gt;5、构建相同的conda环境&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我不太清楚 构建相同的conda环境 和 共享环境 有什么具体区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实践要点重点&quot;&gt;6、实践要点【重点】&lt;/h3&gt;
&lt;p&gt;例如有 &lt;code&gt;base&lt;/code&gt;（默认） 和 &lt;code&gt;ds&lt;/code&gt; 两个环境。&lt;/p&gt;
&lt;h5 id=&quot;推荐创建新环境的时候指定安装-python&quot;&gt;（1）推荐创建新环境的时候，指定安装 python&lt;/h5&gt;
&lt;p&gt;即用&lt;code&gt;conda create -n ds python=3.7&lt;/code&gt;取代&lt;code&gt;conda create -n ds&lt;/code&gt;，不然会有一个坑，即用 pip 习惯性的去安装包的时候，因为 ds 环境没有装 python，自然就没有 pip 命令，那么 conda 的机制就会去使用 base 环境的 pip，那么装好的包虽然能在 ds 里用，但也能在 base 里用，最重要的是，若以后要做环境迁移，导出的 yml 文件，这个包只会存在 base 里，而不会在 ds 里！&lt;/p&gt;
&lt;h5 id=&quot;jupyter-notebook-选择-conda-环境&quot;&gt;（2）Jupyter notebook 选择 conda 环境&lt;/h5&gt;
&lt;p&gt;虽然机子上可能有多个 conda 环境，但&lt;strong&gt;坑的是 Jupyter notebook 始终都会选择 默认的 base 环境&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;是安装&lt;code&gt;nb_conda_kernels&lt;/code&gt;包：&lt;code&gt;conda install nb_conda_kernels&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;p&gt;A、新建notebook时指定环境：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/896608/201903/896608-20190322142226645-1147236125.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;B、修改已存在的notebook的环境：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/896608/201903/896608-20190322142239925-1222844431.png&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;略&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;conda的设计理念：几乎将所有的工具、第三方包都当做package对待，&lt;strong&gt;甚至包括anaconda、python和conda自身&lt;/strong&gt;！&lt;/p&gt;
&lt;h3 id=&quot;基本操作-1&quot;&gt;1、基本操作&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# --------------------------

### 查找包
conda search numpy

# 按照全称查找
conda search --full-name python

# --------------------------

### 安装包
conda install numpy

# 指定版本
conda install scipy=0.15.0

# 指定环境 (其他的命令也可以用这种写法)
conda install -n python34 numpy 

# --------------------------

### 更新包
conda update -n python34 numpy
# 更新anaconda
conda update anaconda
# 更新conda
conda update conda
# 更新 python
conda update python

# --------------------------

### 删除包
conda remove -n python34 numpy

# --------------------------

### 查看安装了的包
conda list 
conda list zlib

# --------------------------
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;包的来源顺序&quot;&gt;2、包的来源顺序&lt;/h3&gt;
&lt;p&gt;（1）conda / Anaconda.org&lt;/p&gt;
&lt;p&gt;（2）pip&lt;/p&gt;
&lt;p&gt;当conda和pip一起用于创建环境时会出现问题&lt;/p&gt;
&lt;p&gt;解决方案：&lt;a href=&quot;https://www.anaconda.com/using-pip-in-a-conda-environment/&quot; class=&quot;uri&quot;&gt;https://www.anaconda.com/using-pip-in-a-conda-environment/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加镜像&quot;&gt;3、添加镜像&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 添加Anaconda的TUNA镜像
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ &lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h4 id=&quot;参考资料&quot;&gt;参考资料&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.anaconda.com/anaconda/install/&quot; class=&quot;uri&quot;&gt;https://docs.anaconda.com/anaconda/install/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.conda.io/projects/conda/en/latest/user-guide/overview.html&quot; class=&quot;uri&quot;&gt;https://docs.conda.io/projects/conda/en/latest/user-guide/overview.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 22 Mar 2019 06:23:00 +0000</pubDate>
<dc:creator>小蒋不素小蒋</dc:creator>
<og:description>一、环境 CentOS 7.6 有预装 python 2.7 二、Anaconda 与 Conda 区别 1、Anaconda 是Python的一种 发行版 。包含了： （1）conda （2）某个版</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xjnotxj/p/10577995.html</dc:identifier>
</item>
<item>
<title>微服务架构 - 巧妙获取被墙的Docker镜像 - 架构与我</title>
<link>http://www.cnblogs.com/atcloud/p/10577759.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/atcloud/p/10577759.html</guid>
<description>&lt;p&gt;在国内由于种种原因，有些Docker镜像直接是获取不到的，特别是k8s中的一些镜像。本人在部署k8s中的helm组件时需要获取tiller镜像，如果直接用如下命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker pull gcr.io/kubernetes-helm/tiller:v2.12.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会由于网络原因连接不上从而导致获取镜像失败。&lt;/p&gt;
&lt;p&gt;经查相关资料，可以有一种“曲线求国”的方案，在此通过实现巧妙获取被墙的tiller镜像方法分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;1、前期准备&lt;/h2&gt;
&lt;p&gt;这种“曲线求国”的方案，首先要准备2个网站的账号：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GitHub，需要有一个GitHub账号，如果没有的，可以到官网https://github.com上注册（对于程序员来说，这个是GitHub必备的）&lt;/li&gt;
&lt;li&gt;Docker Hub，需要有一个Docker Hub账号，如果没有的，可以到官网https://hub.docker.com上注册（对于学Docker的，这个Docker Hub也是必备的）&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;自定义dockerfile&quot;&gt;2、自定义Dockerfile&lt;/h2&gt;
&lt;p&gt;通过定义Dockerfile可以构建出镜像，为此首先先自定义一个tiller的镜像的Dockerfile文件，即：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;FROM gcr.io/kubernetes-helm/tiller:v2.12.1
MAINTAINER 1256122943@qq.com&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过上面的Dockerfile内容可以发现只是以gcr.io/kubernetes-helm/tiller:v2.12.1为基础镜像，没有加其它实质的东西，这样保证了自定义Dockerfile构建的镜像跟原来的tiller镜像是一样的。&lt;/p&gt;
&lt;p&gt;定义好该Dockerfile文件，在本机上构建是不行的，因为在本机上是获取不到基础镜像gcr.io/kubernetes-helm/tiller:v2.12.1。此时就得利用GitHub了，即在GitHub上创建一个repository，比如名称就叫gcr.io_mirror。然后将Dockerfile文件上传到该repository中，即：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201903/840503-20190322134545636-2105303906.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在我本人的GitHub是将Dockerfile放到gcr.io_mirror/kubernetes-helm/tiller/v2.12.1中多了几个目录是为了方便管理。&lt;/p&gt;
&lt;h2 id=&quot;构建镜像&quot;&gt;3、构建镜像&lt;/h2&gt;
&lt;p&gt;现在Dockerfile文件已经在GitHub中，那么现在就可以通过Docker Hub来构建镜像了，首先在Docker Hub中创建repository，即：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201903/840503-20190322134600160-1289747294.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;名称可以写tiller；描述内容可以随便写一下，例如tiller:v2.12.1；要选择是公开的即是Public；最重要的就行要选择通过连接GitHub来获取需要构建的源码，即点击“Connected”,然后要你填写GitHub的相关信息（如果是第一次关联），然后选择GitHub中需要构建的库，即选择刚刚在GitHub创建的gcr.io_mirror：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201903/840503-20190322134612432-48079129.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意此处的Dockerfile location这个要填Dcokerfile所在的路径，在此处得填写为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubernetes-helm/tiller/v2.12.1/Dockerfile&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个的路径具体就是这个Dockerfile文件在GitHub的库中路径了。&lt;/p&gt;
&lt;p&gt;这些信息填写好后，就可以点击“Create &amp;amp; Build”按钮了，这个构建的过程可能需要几分钟。&lt;/p&gt;
&lt;h2 id=&quot;利用镜像&quot;&gt;4、利用镜像&lt;/h2&gt;
&lt;p&gt;镜像在Docker Hub中构建好后，就可以在本机上获取我们自定义构建的tiller镜像了，即在本机上输入命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker pull lzj09/tiller:v2.12.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就样把自定义tiller镜像获取到了，但是为了在使用中更加方便，可以为该镜像打一下tag，即：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker tag lzj09/tiller:v2.12.1 gcr.io/kubernetes-helm/tiller:v2.12.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么我们就通过这种“曲线求国”的方式获取到了gcr.io/kubernetes-helm/tiller:v2.12.1镜像了。&lt;/p&gt;
&lt;h2 id=&quot;关注我&quot;&gt;关注我&lt;/h2&gt;
&lt;p&gt;以你最方便的方式关注我：&lt;br/&gt;微信公众号：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201903/840503-20190322134702730-1901195067.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 22 Mar 2019 05:48:00 +0000</pubDate>
<dc:creator>架构与我</dc:creator>
<og:description>在国内由于种种原因，有些Docker镜像直接是获取不到的，特别是k8s中的一些镜像。本人在部署k8s中的helm组件时需要获取tiller镜像，如果直接用如下命令： 会由于网络原因连接不上从而导致获取</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/atcloud/p/10577759.html</dc:identifier>
</item>
<item>
<title>简易版本vue的实现 - Aaron-攻城狮</title>
<link>http://www.cnblogs.com/aaron---blog/p/10577662.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aaron---blog/p/10577662.html</guid>
<description>&lt;p&gt;用了&lt;code&gt;Vue&lt;/code&gt;也有两年时间了，一直以来都是只知其然，不知其所以然，为了能更好的使用&lt;code&gt;Vue&lt;/code&gt;不被&lt;code&gt;Vue&lt;/code&gt;所奴役，学习一下&lt;code&gt;Vue&lt;/code&gt;底层的基本原理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt;官网有一段这样的介绍：当你把一个普通的&lt;code&gt;JavaScript&lt;/code&gt;对象传给&lt;code&gt;Vue&lt;/code&gt;实例的&lt;code&gt;data&lt;/code&gt;选项，&lt;code&gt;Vue&lt;/code&gt;将遍历此对象所有的属性，并使用&lt;code&gt;Object.defineProperty&lt;/code&gt;把这些属性全部转为&lt;code&gt;getter/setter&lt;/code&gt;。&lt;code&gt;Object.defineProperty&lt;/code&gt;是&lt;code&gt;ES5&lt;/code&gt;中一个无法&lt;code&gt;shim&lt;/code&gt;的特性，这也就是为什么&lt;code&gt;Vue&lt;/code&gt;不支持 IE8 以及更低版本浏览器。&lt;/p&gt;
&lt;p&gt;通过这一段的介绍不难可以得出，Vue是通过&lt;code&gt;Object.defineProperty&lt;/code&gt;对实例中的&lt;code&gt;data&lt;/code&gt;数据做了挟持并且使用&lt;code&gt;Object.defineProperty&lt;/code&gt;的&lt;code&gt;getter/setter&lt;/code&gt;并对其进行处理之后完成了数据的与视图的同步。&lt;/p&gt;
&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/12/7248453.png&quot;/&gt;&lt;p&gt;这张图应该不会很陌生，熟悉&lt;code&gt;Vue&lt;/code&gt;的同学如果仔细阅读过&lt;code&gt;Vue&lt;/code&gt;文档的话应该都看到过。猜想一下&lt;code&gt;Vue&lt;/code&gt;使用&lt;code&gt;Object.defineProperty&lt;/code&gt;做为&lt;code&gt;ViewModel&lt;/code&gt;，对数据进行挟持之后如果&lt;code&gt;View&lt;/code&gt;和&lt;code&gt;Model&lt;/code&gt;发生变化的话，就会通知其相对应引用的地方进行更新处理，完成视图的与数据的双向绑定。&lt;/p&gt;
&lt;p&gt;下面举个例子：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;html:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;name&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;javaScript:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;var obj = {};
Object.defineProperty(obj,&quot;name&quot;,{
    get() {
        return document.querySelector(&quot;#name&quot;).innerHTML;
    },
    set(val) {
        document.querySelector(&quot;#name&quot;).innerHTML = val;
    }
})
obj.name = &quot;Aaron&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过上面的代码使用&lt;code&gt;Object.defineProperty&lt;/code&gt;对&lt;code&gt;Obj&lt;/code&gt;对象中的&lt;code&gt;name&lt;/code&gt;属性进行了挟持，一旦该属性发生了变化则会触发&lt;code&gt;set&lt;/code&gt;函数执行，做出响应的操作。&lt;/p&gt;
&lt;p&gt;扯了这么多，具体说一下&lt;code&gt;Vue&lt;/code&gt;实现的原理。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;需要数据监听器&lt;code&gt;Observer&lt;/code&gt;，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者。&lt;/li&gt;
&lt;li&gt;需要指令解析器&lt;code&gt;Compile&lt;/code&gt;，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数。&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;Watcher&lt;/code&gt;，作为连接&lt;code&gt;Observer&lt;/code&gt;和&lt;code&gt;Compile&lt;/code&gt;的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MVVM&lt;/code&gt;入口函数，整合以上三者，实现数据响应。&lt;/li&gt;
&lt;/ol&gt;&lt;img src=&quot;https://cn.vuejs.org/images/data.png&quot;/&gt;&lt;p&gt;接下来的文章将沿着这个思路一步一步向下进行，以便完成一个简单的&lt;code&gt;Vue&lt;/code&gt;类，完成数据与视图的实时更新。&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
    &amp;lt;p&amp;gt;{{name}}&amp;lt;/p&amp;gt;
    &amp;lt;p q-text=&quot;name&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;{{age}}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;{{doubleAge}}&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;text&quot; q-model=&quot;name&quot;/&amp;gt;
    &amp;lt;button @click=&quot;changeName&quot;&amp;gt;点击&amp;lt;/button&amp;gt;
    &amp;lt;div q-html=&quot;html&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
new QVue({
    el:&quot;#app&quot;,
    data:{
        name:&quot;I am test&quot;,
        age:12,
        html:&quot;&amp;lt;button&amp;gt;这是一个后插入的按钮&amp;lt;/button&amp;gt;&quot;
    },
    created(){
        console.log(&quot;开始吧,QVue&quot;);
        setTimeout(() =&amp;gt; {
            this.name = &quot;测试数据，更改了么&quot;;
        },2000)
    },
    methods:{
        changeName(){
            this.name = &quot;点击啦，改变吧&quot;;
            this.age = 1000000;
        }
    }
})
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上代码则是需要完成的功能，保证所有功能全部都能实现。&lt;/p&gt;
&lt;p&gt;首先我们要考虑的是，要创建一个&lt;code&gt;Vue&lt;/code&gt;的类，该类接收的是一个&lt;code&gt;options&lt;/code&gt;的对象，也就是我们在实例化&lt;code&gt;Vue&lt;/code&gt;的时候需要传递的参数。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;class QVue {
    constructor(options){
        //  缓存options对象数据
        this.$options = options;
        //  取出data数据，做数据响应
        this.$data = options.data || {};
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过上面的代码可以看出了，为什么我们可以在&lt;code&gt;Vue&lt;/code&gt;实例上通过&lt;code&gt;this.$data&lt;/code&gt;拿到我们所写的&lt;code&gt;data&lt;/code&gt;数据。&lt;/p&gt;
&lt;p&gt;对数据已经进行了缓存之后，接下来要做的事情就是对数据进行观察，达到数据变化之后能够做出对&lt;code&gt;虚拟Dom&lt;/code&gt;的操作。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;class QVue {
    constructor(options){
        this.$options = options;
        //  数据响应
        this.$data = options.data || {};
        //  监听数据变化
        this.observe(this.$data);
        //  主要用来解析各种指令，比如v-modal，v-on:click等指令
        new Compile(options.el,this);
        //  执行生命周期
        if(options.created){
            options.created.call(this);
        }
    }
    // 观察数据变化
    observe(value){
        if(!value || typeof value !== &quot;object&quot;){
            return;
        }
        let keys = Object.keys(value);
        keys.forEach((key)=&amp;gt; {
            this.defineReactive(value,key,value[key]);
            //  代理data中的属性到vue实例上
            this.proxyData(key);
        })
    }
    //  代理Data
    proxyData(key){
        Object.defineProperty(this,key,{
            get(){
                return this.$data[key];
            },
            set(newVal){
                this.$data[key] = newVal;
            }
        })
    }
    //  数据响应
    defineReactive(obj,key,val){
        //  解决数据层次嵌套
        this.observe(val);
        const dep = new Dep();
        Object.defineProperty(obj, key,{
            get(){
                //  向管理watcher的对象追加watcher实例
                //  方便管理
                Dep.target &amp;amp;&amp;amp; dep.appDep(Dep.target);
                return val;
            },
            set(newVal){
                if(newVal === val){
                    return;
                }
                val = newVal;
                // console.log(`${key}更新了：${newVal}`)
                dep.notify();
            }
        })
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们对&lt;code&gt;data&lt;/code&gt;数据中的每一项都进行了数据挟持，可是然而并没有什么卵用啊，我们并没有对相对应的&lt;code&gt;虚拟dom&lt;/code&gt;进行数据改变，当然我们肯定是不能把我们的需要更改的&lt;code&gt;虚拟dom&lt;/code&gt;操作写在这里，然而在&lt;code&gt;Vue&lt;/code&gt;中对其&lt;code&gt;Dom&lt;/code&gt;进行了特殊的处理，慢慢的向下看。&lt;/p&gt;
&lt;p&gt;想要做数据响应要做一个做具体更新的类何以用来管理这些观察者的类&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;//  管理watcher
class Dep {
    constructor() {
        //  存储
        this.deps = [];
    }
    //  添加watcher
    appDep(dep){
        this.deps.push(dep);
    }
    //  通知所有的watcher进行更新
    notify(){
        this.deps.forEach((dep) =&amp;gt; {
            dep.update();
        })
    }
}
//  观察者 做具体更新
class Watcher {
    constructor(vm,key,cb){
        //  Vue实例
        this.vm = vm;
        //  需要更新的key
        this.key = key;
        //  更新后执行的函数
        this.cb = cb;
        //  将当前watcher实例指定到Dep静态属性target
        //  用来在类间进行通信
        Dep.target = this;
        //  触发getter,添加依赖
        this.vm[this.key];
        Dep.target = null;
    }
    update(){
        this.cb.call(this.vm,this.vm[this.key]);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Dep.target = this&lt;/code&gt;上面这段代码一定要注意，是向&lt;code&gt;Dep&lt;/code&gt;类中添加了一个静态属性。&lt;/p&gt;
&lt;p&gt;主要用来解析各种指令，比如&lt;code&gt;v-modal&lt;/code&gt;，&lt;code&gt;v-on:click&lt;/code&gt;等指令。然后将模版中的变量替换成数据，渲染&lt;code&gt;view&lt;/code&gt;，将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据发生变动，收到通知，更新视图。&lt;/p&gt;
&lt;p&gt;简单说下双向绑定，双向绑定原理，在编译的时候可以解析出v-model在做操作的时候，在使用v-model元素上添加了一个事件监听（input），把事件监听的回调函数作为事件监听的回调函数，如果input发生变化的时候把最新的值设置到vue的实例上，因为vue已经实现了数据的响应化，响应化的set函数会触发界面中所有依赖模块的更新，然后通知哪些model做依赖更新，所以界面中所有跟这个数据有管的东西就更新了。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;class Compile {
    constructor(el,vm) {
        //  要遍历的宿主节点
        this.$el = document.querySelector(el);
        this.$vm = vm;

        //  编译
        if(this.$el){
            //  转换宿主节点内容为片段Fragment元素
            this.$fragment = this.node2Fragment(this.$el);
            //  执行编译过程
            this.compile(this.$fragment);
            //  将编译完的HTML结果追加至宿主节点中
            this.$el.appendChild(this.$fragment);
        }
    }

    //  将宿主元素中代码片段取出来，遍历，这样做比较高效
    node2Fragment(el){
        const frag = document.createDocumentFragment();
        //  将宿主元素中所有子元素**（搬家，搬家，搬家）**至frag中
        let child;
        //  如果 el.firstChild 为undefined或null则会停止循环
        while(child = el.firstChild){
            frag.appendChild(child);
        }
        return frag;
    }

    compile(el){
        //  宿主节点下的所有子元素
        const childNodes = el.childNodes;
        Array.from(childNodes).forEach((node) =&amp;gt; {
            if(this.isElement(node)){
                //  如果是元素
                console.log(&quot;编译元素&quot;+node.nodeName)
                //  拿到元素上所有的执行,伪数组
                const nodeAttrs = node.attributes;
                Array.from(nodeAttrs).forEach((attr) =&amp;gt; {
                    //  属性名
                    const attrName = attr.name; 
                    //  属性值
                    const exp = attr.value;     
                    //  如果是指令
                    if(this.isDirective(attrName)){
                        //  q-text
                        //  获取指令后面的内容
                        const dir = attrName.substring(2);
                        //  执行更新
                        this[dir] &amp;amp;&amp;amp; this[dir](node,this.$vm,exp);
                    }
                    //  如果是事件
                    if(this.isEvent(attrName)){
                        //  事件处理
                        let dir = attrName.substring(1);    //  @
                        this.eventHandler(node,this.$vm,exp,dir);
                    }
                })
            }else if(this.isInterpolation(node)){
                //  如果是插值文本
                this.compileText(node);
                console.log(&quot;编译文本&quot;+node.textContent)
            }
            //  递归子元素，解决元素嵌套问题
            if(node.childNodes &amp;amp;&amp;amp; node.childNodes.length){
                this.compile(node);
            }
        })
    }
    //  是否为节点
    isElement(node){
        return node.nodeType === 1;
    }
    //  是否为插值文本
    isInterpolation(node){
        return node.nodeType === 3 &amp;amp;&amp;amp; /\{\{(.*)\}\}/.test(node.textContent);
    }
    //  是否为指令
    isDirective(attr){
        return attr.indexOf(&quot;q-&quot;) == 0;
    }
    // 是否为事件
    isEvent(attr){
        return attr.indexOf(&quot;@&quot;) == 0;
    }

    //  v-text
    text(node,vm,exp){
        this.update( node, vm, exp, &quot;text&quot;);
    }
    textUpdater(node,value){
        node.textContent = value;
    }

    //  双向绑定
    //  v-model
    model(node,vm,exp){
        //  指定input的value属性，模型到视图的绑定
        this.update(node,vm,exp,&quot;model&quot;);
        //  试图对模型的响应
        node.addEventListener('input',(e) =&amp;gt; {
            vm[exp] = e.target.value;
        })
    }
    modelUpdater(node,value){
        node.value = value;
    }

    //  v-html
    html(node,vm,exp){
        this.update(node,vm,exp,&quot;html&quot;)
    }
    htmlUpdater(node,value){
        node.innerHTML = value;
    }
    
    //  更新插值文本
    compileText(node){
        let key = RegExp.$1;
        this.update( node, this.$vm, key, &quot;text&quot;);
    }
    //  事件处理器
    eventHandler(node,vm,exp,dir){
        let fn = vm.$options.methods &amp;amp;&amp;amp; vm.$options.methods[exp];
        if(dir &amp;amp;&amp;amp; fn){
            node.addEventListener(dir,fn.bind(vm));
        }
    }

    //  更新函数 - 桥接
    update(node,vm,exp,dir){
        const updateFn = this[`${dir}Updater`];
        //  初始化
        updateFn &amp;amp;&amp;amp; updateFn(node,vm[exp]);
        //  依赖收集
        new Watcher(vm,exp,function(value){
            updateFn &amp;amp;&amp;amp; updateFn(node,value);
        })
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实&lt;code&gt;Compile&lt;/code&gt;整个编译过程，就是在做一个依赖收集的工作，然&lt;code&gt;Vue&lt;/code&gt;知道每一个指令是做什么的。并做出对应的更新处理。&lt;/p&gt;
&lt;p&gt;Vue整体的编译过程，因为vue所编写的指令html无法进行识别，通过编译的过程可以进行依赖收集，依赖收集以后把data中的数据和视图进行了关联，产生了依赖关系，如果以后数据模型发生变化我们可以通过这些依赖通知这些视图进行更新，这是执行编译的目的，就可以做到数据模型驱动视图变化。&lt;/p&gt;
</description>
<pubDate>Fri, 22 Mar 2019 05:27:00 +0000</pubDate>
<dc:creator>Aaron-攻城狮</dc:creator>
<og:description>用了 也有两年时间了，一直以来都是只知其然，不知其所以然，为了能更好的使用 不被 所奴役，学习一下 底层的基本原理。 官网有一段这样的介绍：当你把一个普通的 对象传给 实例的 选项， 将遍历此对象所有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aaron---blog/p/10577662.html</dc:identifier>
</item>
<item>
<title>苹果AppStore审核注意事项，Guideline 1.2 - Safety - User Generated Content，，2.1等条例（我与苹果审核大战6回合的小故事） - code练习生</title>
<link>http://www.cnblogs.com/super-zhangkun/p/10577649.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/super-zhangkun/p/10577649.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近上线app，和同学一起码了两三个月的代码，不就是为了上线吗，上线是最激动的。然而安卓各大平台上线了半个月了，苹果却给了六次拒绝。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;刚开始等苹果等的焦头烂额，现在内心毫无波澜，目前还在审核中。。。。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;六次的拒绝，其中一次是机审拒绝的，五次都是到了人审的阶段。我们做的后台可以看到苹果审核人员的登录记录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;苹果审核使用的都是ipad，一般审核时间是北京7点--9点，22点--凌晨3点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;涉及到app登录的在提交时必须提供测试账号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1442251/201903/1442251-20190322115501362-379015570.png&quot; alt=&quot;&quot; width=&quot;661&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面说一下遇到的拒绝理由：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一次：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
2019年3月8日 上午7:32
发件人 Apple
1. 2 Safety: User Generated Content
Guideline 1.2 - Safety - User Generated Content
Your app enables the display of user-generated content but does not have the proper precautions in place.

Next Steps
To resolve this issue, please revise your app to implement all of the following precautions:
- Require that users agree to terms (EULA) and these terms must make it clear that there is no tolerance for objectionable content or abusive users
- A method for filtering objectionable content
- A mechanism for users to flag objectionable content
- A mechanism for users to block abusive users
- The developer must act on objectionable content reports within 24 hours by removing the content and ejecting the user who provided the offending content

Please see attached screenshot for details.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;第一次接触很蒙，翻译了一下大概是应用程序可以显示用户生成的内容，但没有适当的预防措施。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后就打包后再一次提交，备注中说我们有举报机制，用户可以举报。被拒了！！！&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二次：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
2019年3月9日 上午4:29
发件人 Apple
Guideline 1.2 - Safety - User Generated Content
Your app enables the display of user-generated content but does not have the proper precautions in place.
Next Steps
To resolve this issue, please revise your app to implement all of the following precautions:

- Require that users agree to terms (EULA) and these terms must make it clear that there is no tolerance for objectionable content or abusive users
- A method for filtering objectionable content
- A mechanism for users to flag objectionable content
- A mechanism for users to block abusive users
- The developer must act on objectionable content reports within 24 hours by removing the content and ejecting the user who provided the offending content
Please see attached screenshots for details.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　同样的配方，同样的味道  Guideline 1.2 - Safety - User Generated Content&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    -要求用户同意条款（EULA），并且这些条款必须明确表示，不允许有令人反感的内容或滥用的用户。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    -一种过滤有害内容的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    -一种用户标记不良内容的机制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    -用户阻止滥用用户的机制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    -开发人员必须在24小时内通过删除内容并弹出提供有问题内容的用户来处理令人不快的内容报告。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 然后我们在注册时的《&lt;strong&gt;下课说用户协议》&lt;/strong&gt;中添加了，不允许发布有令人反感的内容的动态，类似的话加了几条。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1442251/201903/1442251-20190322121709364-154195769.jpg&quot; alt=&quot;&quot; width=&quot;262&quot; height=&quot;466&quot;/&gt;  &lt;img src=&quot;https://img2018.cnblogs.com/blog/1442251/201903/1442251-20190322121825285-894830245.jpg&quot; alt=&quot;&quot; width=&quot;263&quot; height=&quot;468&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之前我们的举报机制很简单就是举报按钮，这次加上了举报分类，建议&lt;strong&gt;举报都要有分类，不管接口怎么写，app端要显示分类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1442251/201903/1442251-20190322122015982-648950466.jpg&quot; alt=&quot;&quot; width=&quot;268&quot; height=&quot;476&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再次上传，回复中有说我们有详细的举报机制，后台可以看到，我们会在24小时之内进行处理，不会存在让用户反感的内容。被拒了！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第三次：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
2019年3月13日 下午11:11
发件人 Apple
Guideline 1.2 - Safety - User Generated Content
Your app enables the display of user-generated content but does not have the proper precautions in place.
Next Steps
To resolve this issue, please revise your app to implement all of the following precautions:
- A mechanism for users to block abusive users
Request a phone call from App Review

At your request, we can arrange for an Apple Representative to call you within the next three to five business days to discuss your App Review issue. &lt;br/&gt;Our representative will be able to discuss the issue in English or Chinese.

Request a call to discuss your app's review

申请应用审核团队致电联系

如果您有需要，我们将根据您的要求在三到五个工作日内安排一位精通中文的苹果公司代表致电与您联系，讨论您的应用审核结果。

申请应用审核团队致电联系

Guideline 2.1 - Information Needed

This type of app has been identified as one that may violate one or more of the following App Store Review Guidelines. Specifically, these types of apps often:

1.1.6 - Include false information, features, or misleading metadata
2.3.0 - Undergo significant concept changes after approval
2.3.1 - Have hidden or undocumented features, including hidden &quot;switches&quot; that redirect to a gambling or lottery website
3.1.1 - Use payment mechanisms other than in-app purchase to unlock features or functionality in the app
3.2.1 - Do not come from the financial institution performing the loan services
4.3.0 - Are a duplicate of another app or are conspicuously similar to another app
5.2.1 - Were not submitted by the legal entity that owns and is responsible for offering any services provided by the app
5.2.3 - Facilitate illegal file sharing or include the ability to save, convert, or download media from third party sources without explicit authorization from those sources
5.3.4 - Do not have the necessary licensing and permissions for all the locations where the app is used
。。。。。。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;第三次涉及到了Guideline 2.1 - Information Needed，机审就没通过，然后还有Guideline 1.2 - Safety - User Generated Content，又是同样的味道！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这次给提供了，说可以&lt;strong&gt;申请电话联系指导，果断申请了&lt;/strong&gt;，申请同时不能等着啊，又一次提交。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们回复了Guideline 2.1 - Information Needed的问题&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
Hello, we have a lot of questions that we can't understand.We are college students. We have made an app for college students.
Our app doesn't have the problem of rejection.

Guideline 2.1
1.1.6 -Non-existent.
2.3.0-We're not going to do that.
2.3.1-Non-existent.
3.1.1-There is no payment.
3.2.1-There is no payment.
4.3.0-This is an app we developed independently.
5.2.1-I am the legal person of the company.I am Zhang Kun.Xuzhou Fluorescent Dream Network Technology Co., Ltd.徐州萤之梦网络科技有限公司
5.2.3-We have background auditors and user reporting mechanisms.This problem will not be allowed to exist.
5.3.4-Location analysis of nearby universities in order to expand more universities

We want to serve the college students in the nearby university, so let's pass it. Thank you.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 来回的回复邮件四五次的同时，我们又提交了。被拒了！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第四次：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
2019年3月19日 上午12:37
发件人 Apple
Guideline 1.2 - Safety - User Generated Content
Your app enables the display of user-generated content but does not have the proper precautions in place.
Next Steps
To resolve this issue, please revise your app to implement all of the following precautions:
- A mechanism for users to block abusive users
If this content is present in your app, please respond in Resolution Center with screenshots and instructions to help us locate the blocking feature. If this content is not present, please ensure that it has been added prior to resubmitting your binary.

Request a phone call from App Review

At your request, we can arrange for an Apple Representative to call you within the next three to five business days to discuss your App Review issue. Our representative will be able to discuss the issue in English or Chinese.

Request a call to discuss your app's review
申请应用审核团队致电联系
如果您有需要，我们将根据您的要求在三到五个工作日内安排一位精通中文的苹果公司代表致电与您联系，讨论您的应用审核结果。
申请应用审核团队致电联系
Please see attached screenshot for details.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　还是Guideline 1.2 - Safety - User Generated Content，准备回邮件的时候，美国来电话了，通话显示&lt;strong&gt;美国 加利福尼亚 圣何塞 ，中午12点的时候打来的&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可能是我们太蠢了，哈哈哈，提前来了电话，一般电话需要等待4-7天的时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;您好，我是肖恩，请问您是下课说的作者吗。。。一口流利的中文，大概交流了5分钟。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说了我们的主要问题是没有拉黑屏蔽机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有用户发布内容的app注意了！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;针对Guideline 1.2 - Safety - User Generated Content，需要有：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;     1.用户协议明确&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;     2.举报机制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;     3.屏蔽拉黑，屏蔽此条动态，屏蔽此人动态&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;这三条是必须的！！！必须的！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们之前也查了很多资料，查询了苹果上线的注意点，有的说最好要有屏蔽机制，有的说也可以不用，我们抱着侥幸的心理就没在意。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1442251/201903/1442251-20190322124137929-1022167017.jpg&quot; alt=&quot;&quot; width=&quot;355&quot; height=&quot;631&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好了，当天下午就紧急加上了屏蔽机制，再【我的】-【设置】-【屏蔽】中可以移除屏蔽用户，晚上就再次提交了。被拒了！！！！！！！！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们在后台查看时，其实苹果审核人员没有点击屏蔽和举报按钮，意思就是不做功能都行，但是我们还是都实实在在把功能做了，&lt;strong&gt;不要有侥幸心理为好。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第五次：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
Guideline 1.1 - Safety - Objectionable Content
Your app includes content that many users would find objectionable and offensive. Specifically, your app provides paid companionship services.
Next Steps
To resolve this issue, please remove all potentially objectionable content from your app and submit your revised binary for review.
For app design information, check out the following videos: and &quot;Designing Intuitive User Experiences,&quot; available on the Apple Developer website.
You may also want to review the iOS Human Interface Guidelines for more information on how to create a great user experience in your app.

Guideline 2.3.6 - Performance - Accurate Metadata
The rating you have selected, 9+, is inconsistent with the content of your app. Since your app includes content and features involving dating and social networking, it should be rated 17+ for this subject.
Next Steps
To resolve this issue, please update your Rating selections in App Store Connect.
- Log in to App Store Connect
- Click on &quot;My Apps&quot;
- Select your app
- Click on the app version on the left side of the screen
- Scroll down to select a Rating on the version information page
- Click the Edit button next to &quot;Rating&quot;
- Change the Rating selections
- Click &quot;Done&quot;
- Once you've completed all changes, click the &quot;Save&quot; button at the top of the App Version Information page.
Note: Apps must be rated accordingly for the highest level of content that the user is able to access in the app.

Guideline 5.0 - Legal
Your app contains content - or facilitates, enables, and encourages an activity - that is not legal in all of the locations where the app is available.Specifically, &lt;br/&gt;your app provide paid companionship services. 
Next Steps
To resolve this issue, please remove all content and features that are illegal in the locations where your app is available. &lt;br/&gt;Please note that app concepts that are considered illegal are not allowed on the App Store.
Please see attached screenshots for details.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这次很厉害了，一次来了三条，但是好的地方是Guideline 1.2 - Safety - User Generated Content终于解决了。这次主要就是内容原因。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Guideline 1.1 - Safety - Objectionable Content  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;指南1.1-安全-不良内容  具体来说，你的应用程序提供付费陪伴服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Guideline 2.3.6 - Performance - Accurate Metadata&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;指南2.3.6-性能-准确元数据。您选择的9+评级与应用程序的内容不一致。由于你的应用程序包含了约会和社交网络的内容和功能，因此这个主题应该被评为17+。&lt;strong&gt;社交app要选到17+。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; Guideline 5.0 - Legal&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;指南5.0-法律您的应用程序包含的内容或便利、启用和鼓励的活动在应用程序可用的所有位置都不合法。具体来说，你的应用程序提供付费陪伴服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1442251/201903/1442251-20190322125852478-2138225491.png&quot; alt=&quot;&quot; width=&quot;422&quot; height=&quot;563&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;邮件的附件截图，主要是因为有一个用户发布了寻找一位女生一起看电影！&lt;strong&gt;审核阶段不要有侵权内容，违规违法内容，荤段子内容，要保证内容很正经正直，符合社会主义核心价值观&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过后台把可能违规的内容都删除了，再次提交。被拒了！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第六次：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
2019年3月22日 上午3:39
发件人 Apple
2. 1 Performance: App Completeness
Guideline 2.1 - Information Needed

We have started the review of your app, but we are not able to continue because we need additional information about your app.
Next Steps
To help us proceed with the review of your app, please provide detailed information to the following questions. &lt;br/&gt;The more information you can provide upfront, the sooner we can complete your review.

- Please provide more information on the help feature. 
- Regarding 线下 and 线上, do they refer to the services or the payment?
- How do users pay for the services and what is the payment method?

Once you reply to this message in Resolution Center with the requested information, we can proceed with your review.
Please see attached screenshots for details.
Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata,&lt;br/&gt;visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, &lt;br/&gt;reply to this message in Resolution Center and we will continue the review.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这次是没看到我们怎么支付的，我们平台没涉及支付，就问我们怎么支付，目前已经回复了邮件解释了一下，等待中。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;估计没什么问题了！&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.用户协议&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.分类举报&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.屏蔽用户，屏蔽内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.内容是否正规，包括图片，有的图片很正常，苹果会说像什么违规的东西去拒绝你&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;交流很重要，最好要用英文（百度翻译），邮件回复，电话沟通，附件截图要圈起来解释这是干嘛的，尽可能的礼貌，仔细！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;坚持！希望大家可以一把过（怎么感觉像考驾照(*^_^*)）！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;题外话：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;苹果真的很严格，对代码和内容都很严格。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们用js接了即时通讯的接口，做了私聊功能，安卓测试很正常，苹果测试一堆错误，用了3天的时间都没找完bug。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;后来想让别人帮着看一下，张口要5000块钱，当天我们自己用了一个晚上就完全解决了（主要是看了大佬分享的教程）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有一个问题印象深刻，接口传参需要的id是整数类型，我们当时直接就传了api.pageParam.uid，$api.getStorage('uid')，这俩竟然返回的是字符串类型！苹果就报参数错误，一直在排查其它参数，最后才把这个参数揪出来。写代码太需要细心了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一路走来，由于个人能力不足，遇到了太多的困难，想过太多次的放弃，其实忍一忍坚持一下克服一下，困难就解决了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;困难像弹簧你弱它就强！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 22 Mar 2019 05:21:00 +0000</pubDate>
<dc:creator>code练习生</dc:creator>
<og:description>最近上线app，和同学一起码了两三个月的代码，不就是为了上线吗，上线是最激动的。然而安卓各大平台上线了半个月了，苹果却给了六次拒绝。 刚开始等苹果等的焦头烂额，现在内心毫无波澜，目前还在审核中。。。。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/super-zhangkun/p/10577649.html</dc:identifier>
</item>
<item>
<title>开箱即用Bumblebee独立部署搭建webapi网关详解 - smark</title>
<link>http://www.cnblogs.com/smark/p/10577624.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smark/p/10577624.html</guid>
<description>&lt;p&gt;&lt;span&gt;在之前的章节里都是讲述如何在程序中使用&lt;code&gt;Bumblebee&lt;/code&gt;来构建一个Webapi网关；但这样显然有些麻烦，毕竟很多时候可能只需要一个简单负载处理，还需要写个程序针对服务进行编写代码或配置的确是比较麻烦的事情；如果有负载方面的调整还需要重新编译部署这的确是很让人头痛的事情！为了解决这一问题这些时间针对&lt;code&gt;Bumblebee&lt;/code&gt;写了个简单的web管理插件并编写一个服务集成进去，只需要简单地部署即可把网关搭建起来并用web管理配置负载服务。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;服务安装&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;首先服务器要安装dotnet core 2.14或更版本，操作系统(linux，windows均可);在不同系统中安装.net core可以到&lt;a href=&quot;https://dotnet.microsoft.com/download&quot;&gt;https://dotnet.microsoft.com/download&lt;/a&gt;查看详细安装指南 下载最新版本&lt;a href=&quot;https://github.com/IKende/Bumblebee/tree/master/bin&quot;&gt;https://github.com/IKende/Bumblebee/tree/master/bin&lt;/a&gt;的&lt;code&gt;BumblebeeServerx.x.x.zip&lt;/code&gt;并解压到相应的目录中运行以下指令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果看到以下日志说明服务运行成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254151/201903/254151-20190322131030939-1931582320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;组件默认启用端口是&lt;code&gt;9090&lt;/code&gt;可以通过修改&lt;code&gt;HttpConfig.json&lt;/code&gt;来指写其他端口或HTTPS服务&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;hljs objectivec&quot;&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Host&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Port&quot;: &lt;span class=&quot;hljs-number&quot;&gt;9090,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;SSL&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;false,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;CertificateFile&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;CertificatePassword&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;web-&quot;&gt;Web管理配置&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;服务启动后就可以通过web来管理网关的负载配置策略，可能通过&lt;code&gt;http://gatewayip:9090/__admin/&lt;/code&gt;来访问管理；管理需要用户登陆，默认用户密码是:&lt;code&gt;admin&lt;/code&gt; &lt;code&gt;123456&lt;/code&gt;;进入管理后界面如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254151/201903/254151-20190322131042672-771872506.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;进入界面后可以看到网关的处理状况，主要包括CPU，并发和网络的详细使用情况。当网关没有配置服务负载策略时访问会得到一个5XX的错误信息，具体如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254151/201903/254151-20190322131050535-1250403198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时候首先要配置负载的webapi服务，可以根据实际情况添加对应服务的域名或IP地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254151/201903/254151-20190322131058789-1676500759.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;网关会检测服务的可用情况，如果服务不可用会显示一个红色灯的小图标；服务添加完成后就要进行转发路由设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254151/201903/254151-20190322131109633-1883928763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Bumblebee是以url来区分转发，可以根据自己的需求制定多个Url正则匹配，每个匹配下面都可以添加N个负载服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;*&lt;/code&gt;是默认路由，当没有匹配到的情况则使用该路由，路由是长正则优先匹配；每个路由下面都可以针对服务单独设置权重和RPS并发限制，具体设置数值则和实际应用相结合。以上设置保存后都会实时更新到网关中，因此整个配置策略是即改即生效。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;以下是简单地测试一下刚部署的网关，看一下实际处理效果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254151/201903/254151-20190322131125875-2014320079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;-gateway-&quot;&gt;在扩展的Gateway中使用管理插件&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;如果基于Bumblebee定义了一个网关服务是否可以用这个简单的管理功能呢？答案是可以的，Bumblebee提供了一系列的插件接口用于提供功能扩展，只需要引用这个管理包加载它即可&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;Install-Package &lt;span class=&quot;hljs-selector-tag&quot;&gt;BeetleX&lt;span class=&quot;hljs-selector-class&quot;&gt;.Bumblebee&lt;span class=&quot;hljs-selector-class&quot;&gt;.Configuration &lt;span class=&quot;hljs-selector-tag&quot;&gt;-Version 0&lt;span class=&quot;hljs-selector-class&quot;&gt;.5&lt;span class=&quot;hljs-selector-class&quot;&gt;.0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;安装完成后只需要在网关启动代码后加载即可&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;hljs javascript&quot;&gt; g = &lt;span class=&quot;hljs-keyword&quot;&gt;new Gateway();
 g.Open();
 g.LoadPlugin(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof(Bumblebee.Configuration.Management).Assembly);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;如果有疑问可访问： &lt;a href=&quot;https://github.com/IKende/Bumblebee/issues&quot;&gt;https://github.com/IKende/Bumblebee/issues&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 22 Mar 2019 05:13:00 +0000</pubDate>
<dc:creator>smark</dc:creator>
<og:description>在之前的章节里都是讲述如何在程序中使用Bumblebee来构建一个Webapi网关；但这样显然有些麻烦，毕竟很多时候可能只需要一个简单负载处理，还需要写个程序针对服务进行编写代码或配置的确是比较麻烦的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smark/p/10577624.html</dc:identifier>
</item>
</channel>
</rss>