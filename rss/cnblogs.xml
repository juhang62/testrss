<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>拜托，面试别再问我堆（排序）了！ - 彤哥读源码</title>
<link>http://www.cnblogs.com/tong-yuan/p/Heap.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tong-yuan/p/Heap.html</guid>
<description>&lt;h2 id=&quot;何为堆&quot;&gt;何为堆？&lt;/h2&gt;
&lt;p&gt;堆是一种特殊的树，只要满足下面两个条件，它就是一个堆：&lt;/p&gt;
&lt;p&gt;（1）堆是一颗完全二叉树；&lt;/p&gt;
&lt;p&gt;（2）堆中某个节点的值总是不大于（或不小于）其父节点的值。&lt;/p&gt;
&lt;p&gt;其中，我们把根节点最大的堆叫做大顶堆，根节点最小的堆叫做小顶堆。&lt;/p&gt;
&lt;h2 id=&quot;堆详解&quot;&gt;堆详解&lt;/h2&gt;
&lt;h3 id=&quot;满二叉树&quot;&gt;满二叉树&lt;/h3&gt;
&lt;p&gt;满二叉树是指所有层都达到最大节点数的二叉树。比如，下面这颗树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap1.png&quot; alt=&quot;heap1&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;完全二叉树&quot;&gt;完全二叉树&lt;/h3&gt;
&lt;p&gt;完全二叉树是指除了最后一层其它层都达到最大节点数，且最后一层节点都靠左排列。比如，下面这颗树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap2.png&quot; alt=&quot;heap2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可见，其实满二叉树是一种特殊的完全二叉树。&lt;/p&gt;
&lt;p&gt;那么，使用什么结构存储完全二叉树最节省空间呢？&lt;/p&gt;
&lt;p&gt;我们可以看见，完全二叉树的节点都是比较紧凑的，且只有最后一层是不满的，所以使用数组是最节省空间的，比如上面这颗完全二叉树我们可以这样存储。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap00.png&quot; alt=&quot;heap00&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们下标为0的位置不存储元素，从下标为1的位置开始存储元素，每层依次从左往右放到数组里来存储。&lt;/p&gt;
&lt;p&gt;为什么下标0的位置不存在元素呢？&lt;/p&gt;
&lt;p&gt;这是因为这样存储我们可以很方便地找到父节点，比如，4的父节点即4/2=2，5的父节点即5/2=2。&lt;/p&gt;
&lt;h3 id=&quot;堆&quot;&gt;堆&lt;/h3&gt;
&lt;p&gt;堆也是一颗完全二叉树，但是它的元素必须满足每个节点的值都不大于（或不小于）其父节点的值。比如下面这个堆：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap3.png&quot; alt=&quot;heap3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前面我们说过完全二叉树适合使用数组来存储，那上面这个堆应该怎么存储呢？&lt;/p&gt;
&lt;p&gt;同样地，我们下标为0的位置不存在元素，最后就变成下面这样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap01.png&quot; alt=&quot;heap01&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候我们要找8的父节点就拿8的位置下标5/2=2，也就是5这个节点的位置，这也是为了我们后面堆化。&lt;/p&gt;
&lt;h3 id=&quot;插入元素&quot;&gt;插入元素&lt;/h3&gt;
&lt;p&gt;往堆中插入一个元素后，我们需要继续满足堆的两个特性，即：&lt;/p&gt;
&lt;p&gt;（1）堆是一颗完全二叉树；&lt;/p&gt;
&lt;p&gt;（2）堆中某个节点的值总是不大于（或不小于）其父节点的值。&lt;/p&gt;
&lt;p&gt;为了满足条件（1），所以我们把元素插入到最后一层最后一个节点往后一位的位置，但是插入之后可能不再满足条件（2）了，所以这时候我们需要堆化。&lt;/p&gt;
&lt;p&gt;比如，上面那个堆我们需要插入元素2，我们把它放在9后面，这时不满足条件（2）了，我们就需要堆化。（这是一个小顶堆）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap4.png&quot; alt=&quot;heap4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将完全二叉树和数组对照着来看。&lt;/p&gt;
&lt;p&gt;在完全二叉树中，插入的节点与它的父节点相比，如果比父节点小，就交换它们的位置，再往上和父节点相比，如果比父节点小，再交换位置，直到比父节点大为止。&lt;/p&gt;
&lt;p&gt;在数组中，插入的节点与n/2位置的节点相比，如果比n/2位置的节点小，就交换它们的位置，再往前与n/4位置的节点相比，如果比n/4位置的节点小，再交换位置，直到比n/(2^x)位置的节点大为止。&lt;/p&gt;
&lt;p&gt;这就是插入元素时进行的&lt;strong&gt;堆化&lt;/strong&gt;，也叫自下而上的堆化。&lt;/p&gt;
&lt;p&gt;从插入元素的过程，我们知道每次与n/(2^x)的位置进行比较，所以，插入元素的时间复杂度为O(log n)。&lt;/p&gt;
&lt;h3 id=&quot;删除堆顶元素&quot;&gt;删除堆顶元素&lt;/h3&gt;
&lt;p&gt;我们知道，在小顶堆中堆顶存储的是最小的元素，这时候我们把它删除会怎样呢？&lt;/p&gt;
&lt;p&gt;删除了堆顶元素后，要使得还满足堆的两个特性，首先，我们可以把最后一个元素移到根节点的位置，这时候就满足条件（1），之后就是使它满足条件（2），就需要堆化了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap5.png&quot; alt=&quot;heap5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将完全二叉树和数组对照着来看。&lt;/p&gt;
&lt;p&gt;在完全二叉树中，把最后一个节点放到堆顶，然后与左右子节点中小的交换位置（因为是小顶堆），依次往下，直到其比左右子节点都小为止。&lt;/p&gt;
&lt;p&gt;在数组中，把最后一个元素移到下标为1的位置，然后与下标为2和3的位置对比，发现8比2大，且2是2和3中间最小的，所以与2交换位置；然后再下标为4和5的位置对比，发现8比5大，且5是5和7中最小的，所以与5交换位置，没有左右子节点了，堆化结束。&lt;/p&gt;
&lt;p&gt;这就是删除元素时进行的&lt;strong&gt;堆化&lt;/strong&gt;，也叫自上而下的堆化。&lt;/p&gt;
&lt;p&gt;从删除元素的过程，我们知道把最后一个元素拿到根节点后，每次与2n和(2n+1)位置的元素比较，取其小者，所以，删除元素的时间复杂度也为O(log n)。&lt;/p&gt;
&lt;h3 id=&quot;建堆&quot;&gt;建堆&lt;/h3&gt;
&lt;p&gt;假定给定一组乱序的数组，我们该怎么建堆呢？&lt;/p&gt;
&lt;p&gt;如下图所示，我们模拟依次往堆中添加元素。&lt;/p&gt;
&lt;p&gt;（1）插入6这个元素，只有一个，不需要比较；&lt;/p&gt;
&lt;p&gt;（2）插入8这个元素，比6大，不需要交换；&lt;/p&gt;
&lt;p&gt;（3）插入3这个元素，比下标3/2=1的位置上的元素6小，交换位置；&lt;/p&gt;
&lt;p&gt;（4）插入2这个元素，比下标4/2=2的位置上的元素8小，交换位置，比下标2/2=1的位置上的元素3小，交换位置；&lt;/p&gt;
&lt;p&gt;（5）...&lt;/p&gt;
&lt;p&gt;（10）最后，全部插入完成，即完成了建堆的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap6.png&quot; alt=&quot;heap6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们知道，完全二叉树的高度h=log n，且第h层有1个元素，第(h-1)层有2个元素，第(h-2)层有2^2个元素，...，第1层有2^(h-1)个元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap7.png&quot; alt=&quot;heap7&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实，建堆的整个过程中一个节点的比较次数是与它的高度k成正比的，比如，上图中的1这个元素，它也是从最后一层依次比较了3次（高度h=4），才到达了现在的位置。&lt;/p&gt;
&lt;p&gt;所以，我们可以得出第h层的元素有1个，它最多需要比较(h-1)次；第(h-1)层有2个元素，它们最多比较(h-2)次；第(h-2)层有2^2个元素，它们最多比较(h-3)次；...；第1层有2^(h-1)个元素，它们最多比较0次。&lt;/p&gt;
&lt;p&gt;因而，总和就如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/resource/heap8.png&quot; alt=&quot;heap8&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，建堆的时间复杂度就是O(n)。&lt;/p&gt;
&lt;h3 id=&quot;堆排序&quot;&gt;堆排序&lt;/h3&gt;
&lt;p&gt;我们知道，对于小顶堆，堆顶存储的元素就是最小的。&lt;/p&gt;
&lt;p&gt;那么，我们删除堆顶元素，堆化，第二小的跑堆顶了，再删除，再堆化，...，这些删除的元素是不是正好有序的？&lt;/p&gt;
&lt;p&gt;当然是的，所以堆排序的过程就很简单了。&lt;/p&gt;
&lt;p&gt;我们直接把堆顶的元素与第n个元素交换位置，再把前(n-1)个元素堆化，再把堆顶元素与第(n-1)个元素交换位置，再把前(n-2)个元素堆化，..，，进行下去，最后，数组中的元素就整个变成倒序的了，也就排序完了。&lt;/p&gt;
&lt;p&gt;我们知道删除一个元素的时间复杂度是O(log n)，那么删除n个元素正好是：&lt;/p&gt;
&lt;p&gt;log n + log(n-1) + log(n-2) + log 1&lt;/p&gt;
&lt;p&gt;这个公式约等于nlog n，所以堆排序的时间复杂度为O(nlog n)。&lt;/p&gt;
&lt;p&gt;而且，这样排序不需要占用额外的空间，只需要交换元素的需要一个临时变量，所以堆排序的空间复杂度为O(1)​。​&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;（1）堆是一颗完全二叉树；&lt;/p&gt;
&lt;p&gt;（2）小（大）顶堆中的每一个节点都不小于（不大于）它的父节点；&lt;/p&gt;
&lt;p&gt;（3）堆的插入、删除元素的时间复杂度都是O(log n)；&lt;/p&gt;
&lt;p&gt;（4）建堆的时间复杂度是O(n)；&lt;/p&gt;
&lt;p&gt;（5）堆排序的时间复杂度是O(nlog n)；&lt;/p&gt;
&lt;p&gt;（6）堆排序的空间复杂度是O(1)​；​&lt;/p&gt;
&lt;h2 id=&quot;彩蛋&quot;&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;堆都有哪些应用呢？&lt;/p&gt;
&lt;p&gt;其实，堆除了堆排序以外，还有很多其它的用途，比如求中位数，99%位数，定时任务等。&lt;/p&gt;
&lt;p&gt;比如，求中位数的大致思路，是分别建立一个大顶堆和一个小顶堆，然后往这两个堆中放元素，当其中一个堆的元素个数比另外一个多2时，就平衡一下，这样所有元素都放完之后，两个堆顶的元素之一（或之二）就是中位数。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;欢迎关注我的公众号“彤哥读源码”，查看更多源码系列文章, 与彤哥一起畅游源码的海洋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E9%9B%86%E5%90%88%E7%B3%BB%E5%88%97/resource/qrcode_ss.jpg&quot; alt=&quot;qrcode&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Apr 2019 23:49:00 +0000</pubDate>
<dc:creator>彤哥读源码</dc:creator>
<og:description>什么是堆？ 什么是堆化？ 什么是堆排序？ 时间复杂度各是多少？ 有哪些应用？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tong-yuan/p/Heap.html</dc:identifier>
</item>
<item>
<title>Percona XtraBackup 关于 MySQL备份还原的详细测试 - 东山絮柳仔</title>
<link>http://www.cnblogs.com/xuliuzai/p/10719975.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuliuzai/p/10719975.html</guid>
<description>&lt;h2&gt; 一. Percona XtraBackup 的优点。&lt;/h2&gt;
&lt;p&gt;（1）无需停止数据库进行InnoDB热备；&lt;/p&gt;
&lt;p&gt;（2）增量备份MySQL；&lt;/p&gt;
&lt;p&gt;（3）流压缩传输到其它服务器；&lt;/p&gt;
&lt;p&gt;（4）在线移动表；&lt;/p&gt;
&lt;p&gt;（5）能够比较容易地创建主从同步；&lt;/p&gt;
&lt;p&gt;（6）备份MySQL时不会增大服务器负载。&lt;/p&gt;
&lt;h2&gt; 二. Percona XtraBackup 工具集组成&lt;/h2&gt;
&lt;p&gt;在旧版本中，Percona XtraBackup 工具集里主要包含两个程序：innobackupex 和 xtrabackup。&lt;/p&gt;
&lt;p&gt;xtrabackup是C/C++编译的二进制程序，用来备份InnoDB的，并不能备份非InnoDB表，它在内部实现了对InnoDB的热备份。&lt;/p&gt;
&lt;p&gt;innobackupex由perl脚本编写，是对xtrabackup的封装，通过调用xtrabackup命令来备份InnoDB表，通过调用mysqldump等命令来实现对非InnoDB表的备份，并且会和MySQL数据库发送命令交互，例如获取Binlog位点、添加锁操作。&lt;/p&gt;
&lt;p&gt;因为我们公司，大量使用 innodbbackupex 备份还原，所以，本文的讲解测试仍是以innodbbackupex为主。&lt;/p&gt;
&lt;h2&gt; 三. innodbbackupex常用的参数选项&lt;/h2&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;17&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;参数选项&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;strong&gt;作用描述&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--host&lt;/td&gt;
&lt;td&gt;指定数据库实例的IP地址。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--port&lt;/td&gt;
&lt;td&gt;连接数据库实例的端口号。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--user&lt;/td&gt;
&lt;td&gt;备份时连接数据库实例/数据库的用户名。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--password&lt;/td&gt;
&lt;td&gt;连接所用账号的密码。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--copy-back&lt;/td&gt;
&lt;td&gt;将准备好的备份文件从备份目录复制到原始位置，其原始位置目录必须为空，否则报错（除非指定--force-non-empty-directories选项）。&lt;/td&gt;
&lt;td&gt;恢复阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--incremental&lt;/td&gt;
&lt;td&gt;该选项表示创建增量备份，而不是全量备份。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--incremental-basedir&lt;/td&gt;
&lt;td&gt;该选项接受一个字符串参数，表示包含作为增量备份基本数据集的完整备份的目录。与--incremental一起使用。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--incremental-dir&lt;/td&gt;
&lt;td&gt;该选项接受一个字符串参数，表示增量备份与完整备份的目录，以进行新的完整备份。与--incremental一起使用。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;--redo-only&lt;/td&gt;
&lt;td&gt;在prepare阶段，完整备份合并除最后一个增量之外的所有增量时，使用该选项。迫使innobackupex跳过“回滚”阶段，只做一次“重做”。如果已经在全量备份上重放了提交的事务并回滚了未提交的事务，则无法在此备份上添加增量。同样，如果在增量备份上执行，则无法添加其余的增量备份。&lt;/td&gt;
&lt;td&gt;Prepare阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;--incremental-lsn&lt;/td&gt;
&lt;td&gt;增量备份是基于LSN来完成的，所以，增量备份也可以指定LSN值进行。&lt;/td&gt;
&lt;td&gt;备份阶段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;--apply-log&lt;/td&gt;
&lt;td&gt;在创建备份后，备份数据其实处于不可用状态。因为在redo log中可能存在未提交的事务和已提交的事务，需要通过准备阶段来使备份数据达到一致状态。通过此阶段，备份数据就可以用来恢复了。在准备阶段，需要指定的参数选项就包含apply-log。&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;--socket&lt;/td&gt;
&lt;td&gt;该选项表示mysql.sock所在位置，以便备份进程登录mysql。在MySQL多实例场景下，需指明。&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt; 四. 安装&lt;/h2&gt;
&lt;p&gt;这个版本是 Percona XtraBackup 2.4 版本。&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;Step 1 ：下载执行文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.9/binary/redhat/6/x86_64/Percona-XtraBackup-2.4.9-ra467167cdd4-el6-x86_64-bundle.tar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;step 2 ：解压执行文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tar&lt;/span&gt; -xvf Percona-XtraBackup-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-ra467167cdd4-el6-x86_64-bundle.&lt;span&gt;tar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;step 3：安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; percona-xtrabackup-&lt;span&gt;24&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el6.x86_64.rpm –y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;step 4 安装验证&lt;/p&gt;
&lt;p&gt;查看 可执行文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;which&lt;/span&gt; xtrabackup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;版本检查&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
xtrabackup --version
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 五. 全量备份与全量恢复 &lt;/h2&gt;
&lt;h3&gt;Step 1 环境介绍及准备 &lt;/h3&gt;
&lt;p&gt; &lt;strong&gt;测试环境&lt;/strong&gt;：在一台服务器上开启2个实例，一个是3306，另一个是3307.测试的基本步骤是将3306实例上的数据库备份、然后还原到3306实例中。&lt;/p&gt;
&lt;p&gt;用来测试的数据库为Test_Xtrabackup&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419100543937-2115169169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;step 2 全量备份&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex  --port &lt;span&gt;3306&lt;/span&gt;  --socket /tmp/mysql_3306.sock --user=root --password=输入自己的密码 /data/backup/full
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为测试方便使用了 root 账号，进而不可以输入对应 --host参数。&lt;/p&gt;
&lt;p&gt;因为测试服务器上，安装了多实例，所以输入了 --socket 参数。&lt;/p&gt;
&lt;p&gt;生成的全量备份文件会存储在一个以备份时间命名的子目录下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419112255272-160821189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; step 3 Prepare 阶段&lt;/h3&gt;
&lt;p&gt;在创建备份后，备份数据其实处于不可用状态。因为在redo log中可能存在未提交的事务和已经提交的事务，需要通过准备阶段来使备份数据达到一致的状态。通过此阶段，备份数据就可以用来恢复了。&lt;/p&gt;
&lt;p&gt;在准备阶段，需要指定选项 --apply-log 和备份文档路径。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --apply-log /data/backup/full/&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-19_10-&lt;span&gt;56&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;step 4 还原环境的准备&lt;/h3&gt;
&lt;p&gt;我们打算将数据库还原到同一台服务器上的3307 端口的mysql实例中。&lt;/p&gt;
&lt;p&gt;先登入看下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419190124069-1511542429.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试需要 关闭3307 实例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419190715363-1875426768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将实例对应的数据文档清空（/data/mysql3307/data）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419190936600-1687023411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;step 5 恢复阶段&lt;/h3&gt;
&lt;p&gt;在Prepare阶段过后，如果需要用备份数据来恢复数据库，则只需要指定--copy-back 和备份数据所在目录即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --datadir=/data/mysql3307/data  --copy-back  /data/backup/full/&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-19_10-&lt;span&gt;56&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;innobackupex 将所有的数据相关文件复制到服务器中的datadir目录，该目录有my.cnf文件中的datadir选项指定。因为是多实例，在此直接指定。&lt;/p&gt;
&lt;h3&gt;step 6 修改文件的所有权&lt;/h3&gt;
&lt;p&gt;复制完成后，文件属性不会改变。在大多数的情况下，在启动MySQL数据库之前，需要修改文件的所有权。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
chown -R mysql:mysql /data/mysql3307/data
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;step 7 开启恢复后的实例，数据验证&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419193529624-415814048.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上截图说明 3306 上的数据已恢复至3307 实例上。&lt;/p&gt;
&lt;h2&gt; 六. 增量备份与恢复的测试&lt;/h2&gt;
&lt;h3&gt;1. 备份阶段&lt;/h3&gt;
&lt;p&gt;环境准备，在完整备份前，创建了一个 表 T_full_table;并向此表插入了一笔数据，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419201818925-1404799696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 增量备份基于全量备份，所以需要创建一个全量备份。全量备份的命令如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex  --port &lt;span&gt;3306&lt;/span&gt;  --socket /tmp/mysql_3306.sock --user=root --password=你的密码 /data/backup/full
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全量备份后生成的（时间子）目录为 2019-04-19_21-28-32，这个目录会在第一次增量备份是用到，incremental-basedir 选项参数需要细化到这一层，否则报错。意思是找不到xtrabackup_checkpoints文件。&lt;/p&gt;
&lt;p&gt; 全量备份后，向表中insert  2 笔 数据，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419201907928-91526631.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一个增量备份&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
innobackupex  --port 3306  --socket /tmp/mysql_3306.sock --user=root --password=你的密码  --incremental --incremental-basedir=/data/backup/full/2019-04-19_21-28-32 /data/backup/incremental
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 增量备份产生的目录文件为  /data/backup/incremental/2019-04-19_21-30-11&lt;/p&gt;
&lt;p&gt;第一次增量备份后，继续insert 2笔数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419202040995-2130653311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二个增量备份（我们是否可以在增量备份的基础上再做增量备份呢？答案是肯定的，只要把--incremental-basedir设置为上一次增量备份的目录即可。即：增量备份可以基于以前的增量备份完成数据备份。）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex  --port 3306  --socket /tmp/mysql_3306.sock --user=root --password=你的密码  --incremental --incremental-basedir=/data/backup/incremental/2019-04-19_21-30-11 /data/backup/incremental
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二次增量备份产生的目录文件为 /data/backup/incremental/2019-04-19_21-35-33&lt;/p&gt;
&lt;p&gt;再次插入2笔数据，用来验证第三次增量备份&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419202446926-385284986.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三个增量备份&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 innobackupex  --port 3306  --socket /tmp/mysql_3306.sock --user=root --password=你的密码  --incremental --incremental-basedir=/data/backup/incremental/2019-04-19_21-35-33 /data/backup/incremental
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三次增量备份产生的目录文件为 /data/backup/incremental/2019-04-19_21-38-16&lt;/p&gt;
&lt;p&gt;再次插入2笔验证数据，用来验证第四次增量备份。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419202741783-299866058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;生成第四个增量备份&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex  --port 3306  --socket /tmp/mysql_3306.sock --user=root --password=你的密码  --incremental --incremental-basedir=/data/backup/incremental/2019-04-19_21-38-16 /data/backup/incremental
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第四次增量备份产生的目录文件为 /data/backup/incremental/2019-04-19_21-40-02&lt;/p&gt;
&lt;p&gt;最后一次插入2笔验证数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419203000946-540162780.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们希望还原后的数据库是 刚刚作为第三次完整增量备份的数据库状态。&lt;/p&gt;
&lt;p&gt;（此时T_full_table 表的数据，应该为 1（全量），2,3 （一增），21,22 （二赠），31,32 （三赠））&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt; 2. 增量恢复的Prepare阶段&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; 1） 在全量备份上执行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --apply-log --redo-only /data/backup/full/2019-04-19_21-28-32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 2&lt;/strong&gt;） 在第一个增量备份上执行 （增量备份产生的子目录是 2019-04-19_21-30-11，前面完整备份的目录是 /data/backup/full/2019-04-19_21-28-32）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex --apply-log --redo-only --incremental-&lt;span&gt;dir&lt;/span&gt;=/data/backup/incremental/2019-04-19_21-30-11 /data/backup/full/2019-04-19_21-28-32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 3） 在第二个增量备份上执行&lt;/strong&gt; （增量备份产生的子目录是 2019-04-19_21-35-33，前面完整备份的目录是 /data/backup/full/2019-04-19_21-28-32）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex --apply-log --redo-only --incremental-&lt;span&gt;dir&lt;/span&gt;=/data/backup/incremental/&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-19_21-&lt;span&gt;35&lt;/span&gt;-&lt;span&gt;33&lt;/span&gt; /data/backup/full/&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-19_21-&lt;span&gt;28&lt;/span&gt;-&lt;span&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4） 在第二个增量备份上执行&lt;/strong&gt; （增量备份产生的子目录是 2019-04-19_21-38-16 ，前面完整备份的目录是 /data/backup/full/2019-04-19_21-28-32）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex --apply-log --incremental-&lt;span&gt;dir&lt;/span&gt;=/data/backup/incremental/&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-19_21-&lt;span&gt;38&lt;/span&gt;-&lt;span&gt;16&lt;/span&gt; /data/backup/full/&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-19_21-&lt;span&gt;28&lt;/span&gt;-&lt;span&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. 增量备份的恢复阶段&lt;/h3&gt;
&lt;p&gt;通过prepare阶段，base 目录包含了所有数据。在恢复时，只需要通过以下操作即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --datadir=/data/mysql3307/data  --copy-back  /data/backup/full/&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-19_21-&lt;span&gt;28&lt;/span&gt;-&lt;span&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在数据库实例启动前，需要修改文件的所有权，执行指令如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;chown&lt;/span&gt; -R mysql:mysql /data/mysql3307/data
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. 开启实例，进行验证&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190419221423917-851191154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 恢复后的数据，正是我们想要的数据，测试到达了预期效果。&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;注：&lt;/h2&gt;
&lt;p&gt;现在xtrabackup版本升级到了2.4，相比之前的2.1有了比较大的变化：&lt;code&gt;innobackupex&lt;/code&gt; 功能全部集成到 &lt;code&gt;xtrabackup&lt;/code&gt; 里面，只有一个 binary，另外为了使用上的兼容考虑，&lt;code&gt;innobackupex&lt;/code&gt;作为 &lt;code&gt;xtrabackup&lt;/code&gt; 的一个软链，即xtrabackup现在支持非Innodb表备份，并且Innobackupex在下一版本中移除，建议通过xtrabackup替换innobackupex。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-----本文部分内容参考梳理于网络知识，仅为笔记，在此原创作者感谢！&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Apr 2019 19:37:00 +0000</pubDate>
<dc:creator>东山絮柳仔</dc:creator>
<og:description>一. Percona XtraBackup 的优点。 （1）无需停止数据库进行InnoDB热备； （2）增量备份MySQL； （3）流压缩传输到其它服务器； （4）在线移动表； （5）能够比较容易地创</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuliuzai/p/10719975.html</dc:identifier>
</item>
<item>
<title>Linux 权限位详解 - 刘合栋</title>
<link>http://www.cnblogs.com/liuhedong/p/10739718.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuhedong/p/10739718.html</guid>
<description>&lt;p&gt;对于权限，有点绕，因为文件的权限和目录的权限是有一些区别的。&lt;/p&gt;

&lt;p&gt;在Linux中，有5种权限，分别是，r、w、x、s、t。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可读权限：r&lt;/li&gt;
&lt;li&gt;可写权限：w&lt;/li&gt;
&lt;li&gt;可执行权限：x&lt;/li&gt;
&lt;li&gt;Setuid：s（Set User ID）&lt;/li&gt;
&lt;li&gt;Setgid：s（Set Group ID）&lt;/li&gt;
&lt;li&gt;粘滞位：t&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面依次讲解权限位：&lt;/p&gt;

&lt;h2 id=&quot;可读权限&quot;&gt;1.1 可读权限&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;对于文件，可读权限：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于目录，可读权限：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用字符表示：r&lt;/li&gt;
&lt;li&gt;用八进制表示：4&lt;/li&gt;
&lt;li&gt;可以列出目录下的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;可写权限&quot;&gt;1.2 可写权限&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;对于文件，可写权限：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于目录，可写权限：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用字符表示：w&lt;/li&gt;
&lt;li&gt;用八进制表示：2&lt;/li&gt;
&lt;li&gt;可以在目录下创建文件或目录&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;可执行权限&quot;&gt;1.3 可执行权限&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;对于文件，可写权限：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于目录，可写权限：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用字符表示：x&lt;/li&gt;
&lt;li&gt;用八进制表示：1&lt;/li&gt;
&lt;li&gt;可以cd进入该目录&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;setuid&quot;&gt;1.4 Setuid&lt;/h2&gt;
&lt;p&gt;这是一个特殊的权限位，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于文件，Setuid：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用字符表示：s&lt;/li&gt;
&lt;li&gt;用八进制表示：4000&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Setuid最常用的是配合执行权限x使用，例如，系统中内置命令passwd，它默认是带有s权限位，passwd命令的主要功能是修改用户的密码，而修改密码的流程是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将加密后的哈希值写入到&lt;code&gt;/etc/passwd&lt;/code&gt;文件对应的用户条目中。&lt;/li&gt;
&lt;li&gt;使用pwconv工具转换到&lt;code&gt;/etc/shadow&lt;/code&gt;文件中。&lt;/li&gt;
&lt;li&gt;而普通用户是没有权限修改&lt;code&gt;/etc/passwd&lt;/code&gt; 和 &lt;code&gt;/etc/shadow&lt;/code&gt;文件&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在普通用户尝试执行passwd，该passwd的所有者是root并且设置了Suid，因此passwd以root身份执行。&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;当你查看进程时，你会发现，进程不是普通用户，而是passwd工具的所有者（root）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;setgid&quot;&gt;1.5 Setgid&lt;/h2&gt;
&lt;p&gt;这是一个特殊的权限位，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于目录，Setgid：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用字符表示：s&lt;/li&gt;
&lt;li&gt;用八进制表示：2000&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当一个目录拥有sgid权限时，其他用户在该目录下创建文件或目录后，它会继承目录的id，即创建的文件或目录的属组为父目录的属组。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;[root@self data]# mkdir project
[root@self data]# chmod 2777 project/
[root@self data]# ls -lh
total 0
drwxrwsrwx 2 root root 6 Apr 20 23:42 project
[root@self data]# su bob
[bob@self data]$ mkdir project/test_for_bob
[bob@self data]$ ls -lh project/
total 0
drwxrwsr-x 2 bob root 6 Apr 20 23:42 test_for_bob&lt;/code&gt;
&lt;/pre&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;粘滞位&quot;&gt;1.6 粘滞位&lt;/h2&gt;
&lt;p&gt;这是一个特殊的权限位，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于目录粘滞位：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用字符表示：t&lt;/li&gt;
&lt;li&gt;用八进制表示：1000&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;/tmp&lt;/code&gt;目录就是使用了粘滞位t，其作用是，在该目录下创建文件或目录后，仅允许其作者（所有者）进行删除操作。其他用户无法删除。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1568045/201904/1568045-20190420014404372-1216036035.png&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;例如：&lt;code&gt;lrwxrwxrwx. 1 root root 7 Oct 3 02:33 bin -&amp;gt; usr/bin&lt;/code&gt;&lt;/p&gt;

&lt;ul readability=&quot;9&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第一个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;-&lt;/code&gt;&lt;/strong&gt;：常规文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;b&lt;/code&gt;&lt;/strong&gt;：块特殊文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;c&lt;/code&gt;&lt;/strong&gt;：字符特殊文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;C&lt;/code&gt;&lt;/strong&gt;：高性能（”连续数据“）文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;d&lt;/code&gt;&lt;/strong&gt;：目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;D&lt;/code&gt;&lt;/strong&gt;：门(Solaris 2.5及以上版本)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;l&lt;/code&gt;&lt;/strong&gt;：符号链接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;M&lt;/code&gt;&lt;/strong&gt;：离线（”前已“）文件（Cray DMF）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;n&lt;/code&gt;&lt;/strong&gt;：网络专用文件（HP-UX）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;p&lt;/code&gt;&lt;/strong&gt;：FIFO（命名管道）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;P&lt;/code&gt;&lt;/strong&gt;：断开（Solaros 10及以上）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;s&lt;/code&gt;&lt;/strong&gt;：套接字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;?&lt;/code&gt;&lt;/strong&gt;：其他文件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第二个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;r&lt;/code&gt;&lt;/strong&gt;：属主的读权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第三个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;：属主的写权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第四个字符的含义：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第五个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;r&lt;/code&gt;&lt;/strong&gt;：属组的读权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第六个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;：属主的写权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第七个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;x&lt;/code&gt;&lt;/strong&gt;：属组执行权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;S&lt;/code&gt;&lt;/strong&gt;：设置了SGID，没有执行权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;s&lt;/code&gt;&lt;/strong&gt;：设置了SGID，具有执行权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第八个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;r&lt;/code&gt;&lt;/strong&gt;：其他人的读权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第九个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;：其他人的写权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第十个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;x&lt;/code&gt;&lt;/strong&gt;：其他人的执行权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;T&lt;/code&gt;&lt;/strong&gt;：设置了粘滞位，没有执行权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;t&lt;/code&gt;&lt;/strong&gt;：设置了粘滞位，具有执行权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第十一个字符的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt;：没有任何其他替代访问方法的SELinux安全上下文（没有设置ACL）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;+&lt;/code&gt;&lt;/strong&gt;：具有任何其他组合访问方法的SELinux安全上下文（设置了ACL）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第十二个字符的含义：该文件的硬链接数量&lt;/li&gt;
&lt;li&gt;第十三个字符的含义：该文件的属主&lt;/li&gt;
&lt;li&gt;第十四个字符的含义：该文件的属组&lt;/li&gt;
&lt;li&gt;第十五个字符的含义：该文件的大小&lt;/li&gt;
&lt;li&gt;第十六到第十八个字符的含义：最后一次修改的时间&lt;/li&gt;
&lt;li&gt;第十九个字符的含义：文件或目录的名称&lt;/li&gt;
&lt;li&gt;第二十个字符的含义：链接符号&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第二十一个字符的含义：链接文件的源文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;umask是一个内置命令。其作用是指定创建的文件或目录的默认权限。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方法：&lt;code&gt;umask [-S|-p] [mode]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/strong&gt;：打印出字符权限位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/strong&gt;：打印八进制数权限位（默认）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用不加任何参数的umask会打印出八进制的权限：默认&lt;code&gt;0022&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一个数字表示：特殊权限位的八进制数&lt;/li&gt;
&lt;li&gt;第二个数字表示：属主的八进制数的反掩码&lt;/li&gt;
&lt;li&gt;第三个数字表示：属组的八进制数的反掩码&lt;/li&gt;
&lt;li&gt;第四个数字表示：其他人的八进制数的反掩码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;例如：手动更改，可使用八进制，也可以使用字符表示&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;[root@localhost data]# umask 
0022
[root@localhost data]# mkdir test_dir
[root@localhost data]# touch test_txt
[root@localhost data]# ls -lh
total 0
drwxr-xr-x 2 root root 6 Apr 21 01:34 test_dir
-rw-r--r-- 1 root root 0 Apr 21 01:34 test_txt
[root@localhost data]# rm -rf *
[root@localhost data]# umask 0777
[root@localhost data]# mkdir test_dir
[root@localhost data]# touch test_txt
[root@localhost data]# ls -lh
total 0
d--------- 2 root root 6 Apr 21 01:37 test_dir
---------- 1 root root 0 Apr 21 01:37 test_txt&lt;/code&gt;
&lt;/pre&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意：尽管你的umask设置为0000，后续创建文件的权限依然是666。出于安全着想，执行权限必须手动添加。所以你会看到，目录权限为777，而文件权限为666&lt;/p&gt;
&lt;/blockquote&gt;

</description>
<pubDate>Fri, 19 Apr 2019 17:52:00 +0000</pubDate>
<dc:creator>刘合栋</dc:creator>
<og:description>1. Linux 权限位 对于权限，有点绕，因为文件的权限和目录的权限是有一些区别的。 在Linux中，有5种权限，分别是，r、w、x、s、t。 可读权限：r 可写权限：w 可执行权限：x Setui</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuhedong/p/10739718.html</dc:identifier>
</item>
<item>
<title>Java基础之流程控制 - 申镇华</title>
<link>http://www.cnblogs.com/shenzhenhuaya/p/10739067.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shenzhenhuaya/p/10739067.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、顺序结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       顺序结构的程序语句只能被执行一次。如果您想要同样的操作执行多次,，就需要使用循环结构。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;if-else-if 语句&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;　　if(条件){&lt;/p&gt;
&lt;p&gt;       　　当条件为true时，执行大括号内的代码&lt;/p&gt;
&lt;p&gt;　　}else if(条件){}&lt;/p&gt;
&lt;p&gt;代码实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
       &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; a=2&lt;span&gt;;
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a&amp;gt;1&lt;span&gt;){
             System.out.println(&lt;/span&gt;&quot;该数字大于1&quot;&lt;span&gt;)；
       }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(a&amp;lt;1&lt;span&gt;){
                   System.out.println(&lt;/span&gt;&quot;该数字小于1&quot;&lt;span&gt;)；
             }
        System.out.println(&lt;/span&gt;&quot;该数字为1&quot;&lt;span&gt;)；
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　switch语句&lt;/h3&gt;
&lt;p&gt;     switch 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。&lt;/p&gt;
&lt;p&gt;     语法：&lt;/p&gt;
&lt;p&gt;     switch( 变量 ){&lt;/p&gt;
&lt;p&gt;     case 值1：&lt;/p&gt;
&lt;p&gt;            break;&lt;/p&gt;
&lt;p&gt;     case 值2：&lt;/p&gt;
&lt;p&gt;            break;&lt;/p&gt;
&lt;p&gt;      default:&lt;/p&gt;
&lt;p&gt;       }&lt;/p&gt;
&lt;p&gt;      当程序执行到break关键字时，跳出当前的switch语句；&lt;/p&gt;
&lt;p&gt;代码实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; b=2&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(b){
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 4:System.out.println(&quot;该值是4&quot;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况一&lt;/span&gt;
                    &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 2:System.out.println(&quot;该值是2&quot;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况二&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
                    &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            }

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       注意事项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串类型了，同时 case 标签必须为字符串常量或字面量。&lt;/li&gt;
&lt;li&gt;switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。&lt;/li&gt;
&lt;li&gt;case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。&lt;/li&gt;
&lt;li&gt;当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。&lt;/li&gt;
&lt;li&gt;当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。&lt;/li&gt;
&lt;li&gt;switch 语句可以包含一个 default 分支，该分支必须是 switch 语句的最后一个分支。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、循环结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;while循环语句&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　语法：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;　　while&lt;/strong&gt;(条件){&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       　　当条件为true时，执行循环体内的代码；&lt;/p&gt;
&lt;p&gt;　　}&lt;/p&gt;
&lt;p&gt;　　备注：满足循环的三个条件：初始化变量、关系运算、迭代&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
           &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;){   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只要条件为true程序就一直会执行下去&lt;/span&gt;
               System.out.println(&quot;我爱你&quot;&lt;span&gt;);
           }
       }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;　&lt;strong&gt;&lt;span&gt;do-while循环语句&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;　　语法：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;　　do&lt;/strong&gt;{&lt;/p&gt;
&lt;p&gt;　　}&lt;strong&gt;while&lt;/strong&gt;(条件);&lt;/p&gt;
&lt;p&gt;　　备注：与while循环的区别是，当条件为false时，也会被执行一次。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
           &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
               System.out.println(&lt;/span&gt;&quot;我爱你&quot;&lt;span&gt;);
           } &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
       }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;  for循环语句&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;　　语法：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;　　for&lt;/strong&gt;(&lt;strong&gt;int&lt;/strong&gt; i = 0 ; i &amp;lt; 10 ; i++){&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　}&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       &lt;strong&gt;&lt;span&gt;嵌套for循环&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;打印直角三角形&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = 1 ; i &amp;lt; 10 ; i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j = 1 ; j &amp;lt;= i ; j++&lt;span&gt;){
                System.out.print(&lt;/span&gt;&quot;* &quot;&lt;span&gt;);
            }
            System.out.println();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出其结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
* 
* * 
* * * 
* * * * 
* * * * * 
* * * * * * 
* * * * * * * 
* * * * * * * * 
* * * * * * * * * 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印乘法口诀&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = 1 ; i &amp;lt; 10 ; i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j = 1 ; j &amp;lt; 10-i ; j++&lt;span&gt;){
                System.out.print(&lt;/span&gt;&quot;\t&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j = 1 ; j &amp;lt;=i ; j++&lt;span&gt;){
                System.out.print(j&lt;/span&gt;+&quot;×&quot;+i+&quot;=&quot;+(i*j)+&quot;\t&quot;&lt;span&gt;);
            }
            System.out.println();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                                                                               1×1=1    
                                                                      1×2=2    2×2=4    
                                                             1×3=3    2×3=6    3×3=9    
                                                   1×4=4    2×4=8    3×4=12    4×4=16    
                                        1×5=5    2×5=10    3×5=15    4×5=20    5×5=25    
                              1×6=6    2×6=12    3×6=18    4×6=24    5×6=30    6×6=36    
                    1×7=7    2×7=14    3×7=21    4×7=28    5×7=35    6×7=42    7×7=49    
         1×8=8     2×8=16    3×8=24    4×8=32    5×8=40    6×8=48    7×8=56    8×8=64    
1×9=9    2×9=18    3×9=27    4×9=36    5×9=45    6×9=54    7×9=63    8×9=72    9×9=81   
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;  增强 for 循环&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;       Java5 引入了一种主要用于数组的增强型 for 循环。&lt;/p&gt;
&lt;p&gt;       Java 增强 for 循环语法格式如下:&lt;/p&gt;
&lt;p&gt;       语法：&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;hl-reserved&quot;&gt;  for&lt;span class=&quot;hl-brackets&quot;&gt;(&lt;span class=&quot;hl-code&quot;&gt;声明语句 : 表达式&lt;span class=&quot;hl-brackets&quot;&gt;)&lt;span class=&quot;hl-code&quot;&gt; &lt;span class=&quot;hl-brackets&quot;&gt;{&lt;span class=&quot;hl-code&quot;&gt; &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;代码实例
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]){
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; [] numbers = {10, 20, 30, 40, 50&lt;span&gt;};
 
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x : numbers ){
         System.out.print( x );
         System.out.print(&lt;/span&gt;&quot;,&quot;&lt;span&gt;);
      }
      System.out.print(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
      String [] names &lt;/span&gt;={&quot;James&quot;, &quot;Larry&quot;, &quot;Tom&quot;, &quot;Lacy&quot;&lt;span&gt;};
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;( String name : names ) {
         System.out.print( name );
         System.out.print(&lt;/span&gt;&quot;,&quot;&lt;span&gt;);
      }
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
10,20,30,40,50&lt;span&gt;,
James,Larry,Tom,Lacy,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;br/&gt;&lt;strong&gt;&lt;span&gt;三、循环控制&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;break&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;语句&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　break 可以用于所有的循环语句或者 switch 语句中，用来跳出整个语句块。&lt;/p&gt;
&lt;p&gt;　　break 跳出该关键字所在的循环，并且继续执行该循环下面的语句。&lt;/p&gt;
&lt;p&gt;代码实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]) {
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; [] numbers = {10, 20, 30, 40, 50&lt;span&gt;};
 
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x : numbers ) {
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; x 等于 30 时跳出循环&lt;/span&gt;
         &lt;span&gt;if&lt;/span&gt;( x == 30&lt;span&gt; ) {
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
         }
         System.out.print( x );
         System.out.print(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
      }
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;语句&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。&lt;/p&gt;
&lt;p&gt;　　在 for 循环中，continue 语句使程序立即跳转到更新语句。&lt;/p&gt;
&lt;p&gt;　　在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。&lt;/p&gt;
&lt;p&gt;运行实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]) {
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; [] numbers = {10, 20, 30, 40, 50&lt;span&gt;};
 
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x : numbers ) {
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( x == 30&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
         }
         System.out.print( x );
         System.out.print(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
      }
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
10
20
40
50
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt; &lt;/h3&gt;
</description>
<pubDate>Fri, 19 Apr 2019 16:40:00 +0000</pubDate>
<dc:creator>申镇华</dc:creator>
<og:description>一、顺序结构 顺序结构的程序语句只能被执行一次。如果您想要同样的操作执行多次,，就需要使用循环结构。 if-else-if 语句 语法： if(条件){ 当条件为true时，执行大括号内的代码 }el</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shenzhenhuaya/p/10739067.html</dc:identifier>
</item>
<item>
<title>自动化测试 | UI Automator 进阶指南 - Shengjie</title>
<link>http://www.cnblogs.com/liushengchieh/p/10739655.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liushengchieh/p/10739655.html</guid>
<description>&lt;p&gt;UI Automator 相关介绍：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;跨应用的用户界面自动化测试&lt;/li&gt;
&lt;li&gt;包含在 AndroidX Test(https://developer.android.com/training/testing) 中&lt;/li&gt;
&lt;li&gt;支持的 Android 系统：&amp;gt;= Android 4.3 (API level 18)&lt;/li&gt;
&lt;li&gt;基于 instrumentation，依赖于 AndroidJUnitRunner 测试运行器&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;设置-ui-automatorset-up-ui-automator&quot;&gt;设置 UI Automator(Set up UI Automator)&lt;/h2&gt;
&lt;p&gt;在编写测试代码前，先确保以下两个配置：&lt;br/&gt;1、测试代码存放位置&lt;br/&gt;2、项目依赖（https://developer.android.com/training/testing/set-up-project)&lt;/p&gt;
&lt;p&gt;(1) 添加 Gradle 依赖（Add Gradle dependencies）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;app 目录下的 build.gradle 添加：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;allprojects {
    repositories {
        jcenter()
        google()
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;dependencies 添加需要的 AndroidX Test Package, 比如：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;dependencies {
    ...
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;如果测试代码需要基于 junit 的类，比如 Assert 和 TestSuiteLoader，在 android 区块中添加(只需要添加需要用到的 library：https://developer.android.com/training/testing/set-up-project#junit-based-libs):&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;android {
    ...

    // Gradle automatically adds 'android.test.runner' as a dependency.
    useLibrary 'android.test.runner'

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(2) 添加 manifest 声明（Add manifest declarations）&lt;br/&gt;此步骤可选，具体请看 https://developer.android.com/training/testing/set-up-project#add-manifest-declarations&lt;/p&gt;
&lt;p&gt;当前面的配置完成后，进行其他配置：&lt;br/&gt;app下的build.gralde:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dependencies {
    ...
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当所有配置都完成后，进行被测应用的 UI 组件分析，确保能被识别以及接入控制。&lt;/p&gt;
&lt;h3 id=&quot;检查设备上的用户界面inspect-the-ui-on-a-device&quot;&gt;检查设备上的用户界面（Inspect the UI on a device）&lt;/h3&gt;
&lt;p&gt;uiautomatorviewer:&lt;/p&gt;
&lt;p&gt;(1) 启动手机上的被测应用&lt;/p&gt;
&lt;p&gt;(2) 手机连接电脑&lt;/p&gt;
&lt;p&gt;(3) 打开 Terminal, 进入目录 &amp;lt;android-sdk&amp;gt;/tools/&lt;/p&gt;
&lt;p&gt;(4) 运行：uiautomatorviewer&lt;/p&gt;
&lt;p&gt;查看应用的用户界面属性：&lt;/p&gt;
&lt;p&gt;(1) 点击左上角 &quot;Device Screenshot&quot; 按钮&lt;/p&gt;
&lt;p&gt;(2) 左边是 UI 组件，右下半部分是属性，右上半部分是布局层级&lt;/p&gt;
&lt;p&gt;(3) 可选功能：点击右上角 &quot;Toggle NAF Nodes&quot; 按钮（黄色三角形，内有感叹号），查看无法被识别/访问的UI组件。---这个功能我都没搞懂怎么用，点击后貌似没效果&lt;/p&gt;
&lt;h3 id=&quot;确保-activity-可访问ensure-your-activity-is-accessible&quot;&gt;确保 activity 可访问（Ensure your activity is accessible）&lt;/h3&gt;
&lt;p&gt;Android 原生元素具有更好的访问性，利于测试代码的编写，无需额外的支持&lt;br/&gt;如果是自定义 UI 元素，需要（1）创建一个继承自 ExploreByTouchHelper 的实体类（2）通过调用 setAccessibilityDelegate() 将新创建的类的实例和特定的自定义 UI 元素相关联&lt;br/&gt;给自定义视图元素添加无障碍功能的其他参考资料：https://developer.android.com/guide/topics/ui/accessibility/custom-views.html&lt;br/&gt;学习资料 for 提高 Android 的无障碍性/可访问性：https://developer.android.com/guide/topics/ui/accessibility/apps.html&lt;/p&gt;
&lt;h2 id=&quot;创建一个-ui-automator-测试类create-a-ui-automator-test-class&quot;&gt;创建一个 UI Automator 测试类（Create a UI Automator test class）&lt;/h2&gt;
&lt;p&gt;UI Automator 测试类的写法和 JUnit 4 测试类的写法是一样的。&lt;br/&gt;JUnit 4 测试类的学习资料：https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests.html#build&lt;/p&gt;
&lt;p&gt;在测试类开头添加注解：@RunWith(AndroidJUnit4.class)&lt;br/&gt;同时，明确 AndroidX Test 中的 AndroidJUnitRunner 类为默认的测试运行器。这个步骤的详细描述：https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html#run&lt;/p&gt;
&lt;p&gt;在 UI Automator 测试类中执行以下编程模型：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取一个 UiDevice 对象去接入测试设备，调用 getInstance() 方法，传入 Instrumentation 对象作为参数。&lt;/li&gt;
&lt;li&gt;通过 UiObject 对象调用 findObject() 方法接入显示在设备上的 UI 组件（例如，当前手机屏幕显示的用户界面）。&lt;/li&gt;
&lt;li&gt;通过调用 UiObject 方法在 UI 组件上模拟一个交互的动作。例如，调用 performMultiPointerGesture() 方法模拟多指触控，调用 setText() 方法编辑文本框。当测试包含多个 UI 组件或者更加复杂的操作序列时，在第二步和第三步中可重复调用各种 API.&lt;/li&gt;
&lt;li&gt;当执行完这些用户交互的动作后，检查返回的结果是否符合预期。&lt;br/&gt;这些步骤在以下章节会讲的更加详细。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;访问用户界面组件-access-ui-components&quot;&gt;访问用户界面组件 (Access UI components)&lt;/h3&gt;
&lt;p&gt;UiDevice: 接入和控制设备状态的首要方法，可执行设备级别的行为，例如改变屏幕旋转方向、按下硬件按钮、以及点击 home 和 menu 键。&lt;/p&gt;
&lt;p&gt;从设备的主屏幕开始测试是一个好的实践。在主屏幕（或者其他你在设备上选定的开始位置），可以调用 UI Automator API 提供的方法和指定的 UI 元素进行交互。&lt;/p&gt;
&lt;p&gt;以下代码片段展示了如何获取一个 UiDevice 的实例以及模拟按下 home 键的操作：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import org.junit.Before;
import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.Until;
...
@RunWith(AndroidJUnit4.class)
@SdkSuppress(minSdkVersion = 18)
public class ChangeTextBehaviorTest {

    private static final String BASIC_SAMPLE_PACKAGE
            = &quot;com.example.android.testing.uiautomator.BasicSample&quot;;
    private static final int LAUNCH_TIMEOUT = 5000;
    private static final String STRING_TO_BE_TYPED = &quot;UiAutomator&quot;;
    private UiDevice device;

    @Before
    public void startMainActivityFromHomeScreen() {
        // Initialize UiDevice instance
        device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());

        // Start from the home screen
        device.pressHome();

        // Wait for launcher
        final String launcherPackage = device.getLauncherPackageName();
        assertThat(launcherPackage, notNullValue());
        device.wait(Until.hasObject(By.pkg(launcherPackage).depth(0)),
                LAUNCH_TIMEOUT);

        // Launch the app
        Context context = ApplicationProvider.getApplicationContext();
        final Intent intent = context.getPackageManager()
                .getLaunchIntentForPackage(BASIC_SAMPLE_PACKAGE);
        // Clear out any previous instances
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        context.startActivity(intent);

        // Wait for the app to appear
        device.wait(Until.hasObject(By.pkg(BASIC_SAMPLE_PACKAGE).depth(0)),
                LAUNCH_TIMEOUT);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例代码中的声明：@SdkSuppress(minSdkVersion = 18), 帮助确定测试只运行在 Android4.3（API level 18）或更高级别的设备上。（UI Automator 框架要求的）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;findObject()&lt;/li&gt;
&lt;li&gt;UiObject&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;UiObject cancelButton = device.findObject(new UiSelector()
        .text(&quot;Cancel&quot;)
        .className(&quot;android.widget.Button&quot;));
UiObject okButton = device.findObject(new UiSelector()
        .text(&quot;OK&quot;)
        .className(&quot;android.widget.Button&quot;));

// Simulate a user-click on the OK button, if found.
if(okButton.exists() &amp;amp;&amp;amp; okButton.isEnabled()) {
    okButton.click();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;指定一个选择器specify-a-selector&quot;&gt;指定一个选择器（Specify a selector）&lt;/h4&gt;
&lt;p&gt;UiSelector 类：在当前显示的用户界面中查询一个特定的元素。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;childSelector()&lt;/li&gt;
&lt;li&gt;UiAutomatorObjectNotFoundException&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;UiObject appItem = device.findObject(new UiSelector()
        .className(&quot;android.widget.ListView&quot;)
        .instance(0)
        .childSelector(new UiSelector()
        .text(&quot;Apps&quot;)));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;tips:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果在一个页面上找到一个以上的相同元素，自动返回第一个匹配的元素作为目标 UiObject.&lt;/li&gt;
&lt;li&gt;可以通过整合多个属性来缩小搜索范围。&lt;/li&gt;
&lt;li&gt;如果没有找到目标元素，抛出 UiAutomatorObjectNotFoundException 异常。&lt;/li&gt;
&lt;li&gt;可以使用 childSelector() 方法缩小多个 UiSelector 实例范围。&lt;/li&gt;
&lt;li&gt;如果有 Resource ID, 用这个代替 text 和 content-descripter.&lt;/li&gt;
&lt;li&gt;text 元素比较脆弱，有多种原因可能导致测试失败。（比如：多语言）&lt;br/&gt;在选择区域中去明确一个对象状态是非常有用的。比如：选择一个已选中的列表以进行取消选中状态，调用 checked() 方法，将参数设为 &quot;true&quot;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;执行动作perform-actions&quot;&gt;执行动作（Perform actions）&lt;/h3&gt;
&lt;p&gt;当获取 UiObject 对象后，可以调用 UiObject 类中的方法在其上执行相应操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;click(): 点击&lt;/li&gt;
&lt;li&gt;dragTo(): 拖动&lt;/li&gt;
&lt;li&gt;setText(): 设置文本&lt;/li&gt;
&lt;li&gt;clearTextField(): 清空文本&lt;/li&gt;
&lt;li&gt;swipeUp(): 向上滑动&lt;/li&gt;
&lt;li&gt;swipeDown(): 向下滑动&lt;/li&gt;
&lt;li&gt;swipeLeft(): 向左滑动&lt;/li&gt;
&lt;li&gt;swipeRight(): 向右滑动&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过 getContext() 方法获取到 Context 后，可以进行发送 Intent 或者启动 Activity 的操作。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void setUp() {
    ...

    // Launch a simple calculator app
    Context context = getInstrumentation().getContext();
    Intent intent = context.getPackageManager()
            .getLaunchIntentForPackage(CALC_PACKAGE);
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);

    // Clear out any previous instances
    context.startActivity(intent);
    device.wait(Until.hasObject(By.pkg(CALC_PACKAGE).depth(0)), TIMEOUT);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;在集合上执行动作perform-actions-on-collections&quot;&gt;在集合上执行动作（Perform actions on collections）&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;UiCollection 类：在一个 item 的集合上模拟用户操作（例如，歌曲列表或者邮件列表）。&lt;br/&gt;如何创建一个 UiCollection 对象：明确一个搜索UI容器或者其他子 UI 元素集合的 UiSelector. 例如，包含子 UI 元素的 layout 视图。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;UiCollection videos = new UiCollection(new UiSelector()
        .className(&quot;android.widget.FrameLayout&quot;));

// Retrieve the number of videos in this collection:
int count = videos.getChildCount(new UiSelector()
        .className(&quot;android.widget.LinearLayout&quot;));

// Find a specific video and simulate a user-click on it
UiObject video = videos.getChildByText(new UiSelector()
        .className(&quot;android.widget.LinearLayout&quot;), &quot;Cute Baby Laughing&quot;);
video.click();

// Simulate selecting a checkbox that is associated with the video
UiObject checkBox = video.getChild(new UiSelector()
        .className(&quot;android.widget.Checkbox&quot;));
if(!checkBox.isSelected()) checkbox.click();&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;在可滚动视图中执行动作perform-actions-on-scrollable-views&quot;&gt;在可滚动视图中执行动作（Perform actions on scrollable views）&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;UiScrollable 类：在手机屏幕上模拟垂直或者水平的滚动操作。这个类适用于当需要找到屏幕外的 UI 元素时，可以通过滚动操作将这个 UI 元素带到屏幕内。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;UiScrollable settingsItem = new UiScrollable(new UiSelector()
        .className(&quot;android.widget.ListView&quot;));
UiObject about = settingsItem.getChildByText(new UiSelector()
        .className(&quot;android.widget.LinearLayout&quot;), &quot;About tablet&quot;);
about.click();&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;验证结果verify-results&quot;&gt;验证结果（Verify results）&lt;/h3&gt;
&lt;p&gt;InstrumentationTestCase 继承自 TestCase，可以使用标准的 JUnit Assert 方法进行结果验证。&lt;br/&gt;以下代码片段展示了如何验证计算器加法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private static final String CALC_PACKAGE = &quot;com.myexample.calc&quot;;
public void testTwoPlusThreeEqualsFive() {
    // Enter an equation: 2 + 3 = ?
    device.findObject(new UiSelector()
            .packageName(CALC_PACKAGE).resourceId(&quot;two&quot;)).click();
    device.findObject(new UiSelector()
            .packageName(CALC_PACKAGE).resourceId(&quot;plus&quot;)).click();
    device.findObject(new UiSelector()
            .packageName(CALC_PACKAGE).resourceId(&quot;three&quot;)).click();
    device.findObject(new UiSelector()
            .packageName(CALC_PACKAGE).resourceId(&quot;equals&quot;)).click();
    // Verify the result = 5
    UiObject result = device.findObject(By.res(CALC_PACKAGE, &quot;result&quot;));
    assertEquals(&quot;5&quot;, result.getText());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;在设备或虚拟机上运行-ui-automator-测试用例run-ui-automator-tests-on-a-device-or-emulator&quot;&gt;在设备或虚拟机上运行 UI Automator 测试用例（Run UI Automator tests on a device or emulator）&lt;/h2&gt;
&lt;p&gt;可以通过 Android Studio 或者命令行运行 UI Automator tests. 确保项目的默认 instrumentation runner 是 AndroidJUnitRunner.&lt;/p&gt;
&lt;h2 id=&quot;参考资料additional-resources&quot;&gt;参考资料（Additional resources）&lt;/h2&gt;
&lt;p&gt;Samples:&lt;br/&gt;https://github.com/googlesamples/android-testing/tree/master/ui/uiautomator/BasicSample 基础的UI Automator 示例代码&lt;br/&gt;Codelabs:&lt;br/&gt;https://codelabs.developers.google.com/codelabs/android-testing/index.html&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;欢迎关注微信公众号&quot;测试开发Stack&quot;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Apr 2019 16:39:00 +0000</pubDate>
<dc:creator>Shengjie</dc:creator>
<og:description>UI Automator 相关介绍： 跨应用的用户界面自动化测试 包含在 AndroidX Test(https://developer.android.com/training/testing) 中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liushengchieh/p/10739655.html</dc:identifier>
</item>
<item>
<title>python网络-计算机网络基础(23) - Se7eN_HOU</title>
<link>http://www.cnblogs.com/Se7eN-HOU/p/10739619.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Se7eN-HOU/p/10739619.html</guid>
<description>&lt;h3&gt;一、网络简介&lt;/h3&gt;
&lt;p&gt;网络是由节点和连线构成，表示诸多对象及其相互联系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个人玩：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419214150056-1627916316.png&quot; alt=&quot;&quot; width=&quot;250&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;两个人玩：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419214307306-896970151.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多个人玩：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419214410036-12221608.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;说明&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;网络就是一种辅助双方或者多方能够连接在一起的工具&lt;/li&gt;
&lt;li&gt;如果没有网络可想&lt;code&gt;单机&lt;/code&gt;的世界是多么的孤单&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;使用网络的目的&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;就是为了联通多方然后进行通信用的，即把数据从一方传递给另外一方&lt;/li&gt;
&lt;li&gt;前面的学习编写的程序都是单机的，即不能和其他电脑上的程序进行通信&lt;/li&gt;
&lt;li&gt;为了让在不同的电脑上运行的软件，之间能够互相传递数据，就需要借助网络的功能&lt;/li&gt;
&lt;li&gt;所谓的网络编程就是，让在不同的电脑上的软件能够进行数据传递，即进程之间的通信&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419214703309-816537708.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;tcpip简介&quot;&gt;二、tcp/ip简介&lt;/h3&gt;
&lt;p id=&quot;1-什么是协议&quot;&gt;&lt;strong&gt;1. 什么是协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419214857377-1078799715.jpg&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的说英语，有的说中文，有的说德语，说同一种语言的人可以交流，不同的语言之间就不行了&lt;/p&gt;
&lt;p&gt;为了解决不同种族人之间的语言沟通障碍，现规定国际通用语言是英语，这就是一个规定，这就是协议&lt;/p&gt;
&lt;p id=&quot;2-计算机网络沟通用什么&quot;&gt;&lt;strong&gt;2. 计算机网络沟通用什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在的生活中，不同的计算机只需要能够联网（有线无线都可以）那么就可以相互进行传递数据，那么不同种类之间的计算机到底是怎么进行数据传递的呢？就像说不同语言的人沟通一样，只要有一种大家都认可都遵守的协议即可，那么这个计算机都遵守的网络通信协议叫做&lt;code&gt;&lt;strong&gt;TCP/IP&lt;/strong&gt;协议&lt;/code&gt;&lt;/p&gt;
&lt;p id=&quot;3-tcpip协议族&quot;&gt;&lt;strong&gt;3. TCP/IP协议(族)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;早期的计算机网络，都是由各厂商自己规定一套协议，IBM、Apple和Microsoft都有各自的网络协议，互不兼容&lt;/p&gt;
&lt;p&gt;为了把全世界的所有不同类型的计算机都连接起来，就必须规定一套全球通用的协议，为了实现互联网这个目标，互联网协议簇（Internet Protocol Suite）就是通用协议标准。&lt;/p&gt;
&lt;p&gt;因为互联网协议包含了上百种协议标准，但是最重要的两个协议是TCP和IP协议，所以，大家把互联网的协议简称TCP/IP协议&lt;/p&gt;
&lt;p&gt;常用的网络协议如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419215430462-231082300.jpg&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;网际层也称为：网络层&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;网络接口层也称为：链路层&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;三、端口简介&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419215907037-1178570240.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么TCP/IP协议中的端口指的是什么呢？端口就好一个房子的门，是出入这间房子的必经之路。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419220046093-1693808910.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果一个进程需要收发网络数据，那么就需要有这样的端口&lt;/p&gt;
&lt;p&gt;在linux系统中，端口可以有65536（2的16次方）个之多！&lt;/p&gt;
&lt;p&gt;既然有这么多，操作系统为了统一管理，所以进行了编号，这就是&lt;code&gt;端口号&lt;/code&gt;&lt;/p&gt;
&lt;p id=&quot;2-端口号&quot;&gt;&lt;strong&gt;2. 端口号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;端口是通过端口号来标记的，端口号只有整数，范围是从0到65535&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;3-端口是怎样分配的&quot;&gt;&lt;strong&gt;3. 端口是怎样分配的&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;端口号不是随意使用的，而是按照一定的规定进行分配。&lt;/li&gt;
&lt;li&gt;端口的分类标准有好几种，我们这里不做详细讲解，只介绍一下知名端口和动态端口&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;31-知名端口（well-known-ports）&quot;&gt;&lt;strong&gt;4.知名端口（Well Known Ports）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知名端口是众所周知的端口号，范围从0到1023&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;80端口分配给HTTP服务&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;21端口分配给FTP服务&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以理解为，一些常用的功能使用的号码好比：电话号码110、10086、10010一样&lt;/p&gt;
&lt;p&gt;一般情况下，如果一个程序需要使用知名端口的需要有root权限&lt;/p&gt;
&lt;p id=&quot;32-动态端口（dynamic-ports）&quot;&gt;&lt;strong&gt;5.动态端口（Dynamic Ports）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;动态端口的范围是从1024到65535&lt;/li&gt;
&lt;li&gt;之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。&lt;/li&gt;
&lt;li&gt;动态分配是指当一个系统进程或应用程序进程需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。&lt;/li&gt;
&lt;li&gt;当这个进程关闭时，同时也就释放了所占用的端口号。&lt;/li&gt;
&lt;li&gt;用“netstat －an”查看端口状态&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;6、端口总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;端口有什么用呢 ？ 我们知道，一台拥有IP地址的主机可以提供许多服务，比如HTTP（万维网服务）、FTP（文件传输）、SMTP（电子邮件）等，这些服务完全可以通过1个IP地址来实现。那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区分不同的服务的。 需要注意的是，端口并不是一一对应的。比如你的电脑作为客户机访问一台WWW服务器时，WWW服务器使用“80”端口与你的电脑通信，但你的电脑则可能使用“3457”这样的端口。&lt;/p&gt;

&lt;h3&gt;四、IP地址简介&lt;/h3&gt;
&lt;p&gt;IP地址就像是我们的家庭住址一样，如果你要写信给一个人，你就要知道他（她）的地址，这样邮递员才能把信送到。计算机发送信息就好比是邮递员，它必须知道唯一的“家庭地址”才能不至于把信送错人家。只不过我们的地址使用文字来表示的，计算机的地址用二进制数字表示。&lt;/p&gt;
&lt;p&gt;IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。IP地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数。例：点分十进IP地址（100.4.5.6），实际上是32位二进制数（01100100.00000100.00000101.00000110）。&lt;/p&gt;
&lt;p id=&quot;3-ip地址的分类&quot;&gt;&lt;strong&gt;ip地址的分类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751754/201904/751754-20190419233028057-202292070.jpg&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;31-a类ip地址&quot;&gt;&lt;strong&gt;A类IP地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个A类IP地址由1字节的网络地址和3字节主机地址组成，网络地址的最高位必须是“0”，&lt;/li&gt;
&lt;li&gt;地址范围1.0.0.1-126.255.255.254&lt;/li&gt;
&lt;li&gt;二进制表示为：00000001 00000000 00000000 00000001 - 01111110 11111111 11111111 11111110&lt;/li&gt;
&lt;li&gt;可用的A类网络有126个，每个网络能容纳1677214个主机&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;32-b类ip地址&quot;&gt;&lt;strong&gt;B类IP地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，网络地址的最高位必须是“10”，&lt;/li&gt;
&lt;li&gt;地址范围128.1.0.1-191.255.255.254&lt;/li&gt;
&lt;li&gt;二进制表示为：10000000 00000001 00000000 00000001 - 10111111 11111111 11111111 11111110&lt;/li&gt;
&lt;li&gt;可用的B类网络有16384个，每个网络能容纳65534主机&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;33-c类ip地址&quot;&gt;&lt;strong&gt;C类IP地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个C类IP地址由3字节的网络地址和1字节的主机地址组成，网络地址的最高位必须是“110”&lt;/li&gt;
&lt;li&gt;范围192.0.1.1-223.255.255.254&lt;/li&gt;
&lt;li&gt;二进制表示为: 11000000 00000000 00000001 00000001 - 11011111 11111111 11111110 11111110&lt;/li&gt;
&lt;li&gt;C类网络可达2097152个，每个网络能容纳254个主机&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;34-d类地址用于多点广播&quot;&gt;&lt;strong&gt;D类地址用于多点广播&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;D类IP地址第一个字节以“1110”开始，它是一个专门保留的地址。&lt;/li&gt;
&lt;li&gt;它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中&lt;/li&gt;
&lt;li&gt;多点广播地址用来一次寻址一组计算机&lt;/li&gt;
&lt;li&gt;地址范围224.0.0.1-239.255.255.254&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;35-e类ip地址&quot;&gt;&lt;strong&gt;E类IP地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;以“1111”开始，为将来使用保留&lt;/li&gt;
&lt;li&gt;E类地址保留，仅作实验和开发用&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;36-私有ip&quot;&gt;&lt;strong&gt;私有ip&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在这么多网络IP中，国际规定有一部分IP地址是用于我们的局域网使用，也就&lt;/li&gt;
&lt;li&gt;是属于私网IP，不在公网中使用的，它们的范围是：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10.0.0.0～10.255.255.255&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;172.16.0.0～172.31.255.255&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;192.168.0.0～192.168.255.255&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;IP地址127．0．0．1~127．255．255．255用于回路测试，&lt;/li&gt;
&lt;li&gt;如：127.0.0.1可以代表本机IP地址，用&lt;code&gt;http://127.0.0.1&lt;/code&gt;就可以测试本机中配置的Web服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;五、子网掩码简介&lt;/h3&gt;
&lt;p&gt;要想理解什么是子网掩码，就不能不了解IP地址的构成。互联网是由许多小型网络构成的，每个网络上都有许多主机，这样便构成了一个有层次的结构。IP地址在设计时就考虑到地址分配的层次特点，将每个IP地址都分割成网络号和主机号两部分，以便于IP地址的寻址操作。&lt;/p&gt;
&lt;p&gt;IP地址的网络号和主机号各是多少位呢？&lt;/p&gt;
&lt;p&gt;如果不指定，就不知道哪些位是网络号、哪些是主机号，这就需要通过子网掩码来实现。&lt;/p&gt;
&lt;p&gt;子网掩码不能单独存在，它必须结合IP地址一起使用。&lt;/p&gt;
&lt;p&gt;子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分子网掩码的设定必须遵循一定的规则。&lt;/p&gt;
&lt;p&gt;与IP地址相同，子网掩码的长度也是32位，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;左边是网络位，用二进制数字“1”表示；&lt;/li&gt;
&lt;li&gt;右边是主机位，用二进制数字“0”表示。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;假设IP地址为“192.168.1.1”子网掩码为“255.255.255.0”，子网掩码装换二进制位：11111111 11111111 11111111 00000000&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;其中，“1”有24个，代表与此相对应的IP地址左边24位是网络号；&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;“0”有8个，代表与此相对应的IP地址右边8位是主机号。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;这样，子网掩码就确定了一个IP地址的32位二进制数字中哪些是网络号、哪些是主机号。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;这对于采用TCP/IP协议的网络来说非常重要，只有通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最常用的子网掩码是“255.255.255.0”的网络：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;最后面一个数字可以在0~255范围内任意变化，因此可以提供256个IP地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;但是实际可用的IP地址数量是256-2，即254个，因为主机号不能全是“0”或全是“1”。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;主机号全为0，表示网络号&lt;/li&gt;
&lt;li&gt;主机号全为1，表示网络广播&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;socket简介&quot;&gt;六、socket简介&lt;/h3&gt;
&lt;p id=&quot;1本地的进程间通信（ipc）有很多种方式，例如&quot;&gt;&lt;strong&gt;1.本地的进程间通信（IPC）有很多种方式，例如&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;同步（互斥锁、条件变量等）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上通信方式都是在一台机器上不同进程之间的通信方式，那么问题来了，网络中进程之间如何通信？&lt;/p&gt;
&lt;p id=&quot;2-网络中进程之间如何通信&quot;&gt;&lt;strong&gt;2. 网络中进程之间如何通信&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！&lt;/li&gt;
&lt;li&gt;在本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。&lt;/li&gt;
&lt;li&gt;其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“ip地址”可以唯一标识网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用程序（进程）。&lt;/li&gt;
&lt;li&gt;这样利用&lt;code&gt;ip地址，协议，端口&lt;/code&gt;就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;3-什么是socket&quot;&gt;&lt;strong&gt;3. 什么是socket&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;socket(简称 &lt;code&gt;套接字&lt;/code&gt;) 是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：&lt;/li&gt;
&lt;li&gt;它能实现不同主机间的进程间通信，我们网络上各种各样的服务大多都是基于 Socket 来完成通信的&lt;/li&gt;
&lt;li&gt;例如我们每天浏览网页、QQ 聊天、收发 email 等等&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;4-创建socket&quot;&gt;&lt;strong&gt;4. 创建socket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Python 中 使用socket 模块的函数 socket 就可以完成：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
socket.socket(AddressFamily, Type)
&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;说明：&quot;&gt;说明：&lt;/p&gt;
&lt;p&gt;函数 socket.socket 创建一个 socket，返回该 socket 的描述符，该函数带有两个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Address Family：可以选择 AF_INET（用于 Internet 进程间通信） 或者 AF_UNIX（用于同一台机器进程间通信）,实际工作中常用AF_INET&lt;/li&gt;
&lt;li&gt;Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;创建一个tcp socket（tcp套接字）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import&lt;span&gt; socket

s =&lt;span&gt; socket.socket(socket.AF_INET, socket.SOCK_STREAM)

print 'Socket Created'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建一个udp socket（udp套接字）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import&lt;span&gt; socket

s =&lt;span&gt; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

print 'Socket Created'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 19 Apr 2019 16:18:00 +0000</pubDate>
<dc:creator>Se7eN_HOU</dc:creator>
<og:description>一、网络简介 网络是由节点和连线构成，表示诸多对象及其相互联系。 一个人玩： 两个人玩： 多个人玩： 说明 网络就是一种辅助双方或者多方能够连接在一起的工具 如果没有网络可想单机的世界是多么的孤单 使</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Se7eN-HOU/p/10739619.html</dc:identifier>
</item>
<item>
<title>python+scrapy 爬取西刺代理ip(一)（ubuntu环境下）  -赖大大 -博客园 - 赖大大</title>
<link>http://www.cnblogs.com/lyc642983907/p/10739577.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyc642983907/p/10739577.html</guid>
<description>&lt;h3&gt;第一步：环境搭建&lt;/h3&gt;
&lt;p&gt;1.python2 或 python3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419214954587-1973035830.png&quot; alt=&quot;&quot; width=&quot;663&quot; height=&quot;93&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.用pip安装下载scrapy框架&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419215115085-1486969195.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体就自行百度了，主要内容不是在这。&lt;/p&gt;
&lt;h3&gt;第二步：创建scrapy（简单介绍）&lt;/h3&gt;
&lt;p&gt;1.Creating a project（创建项目）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
scrapy startproject 项目名称
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.Defining our item（定义我们的项目）&lt;/p&gt;
&lt;p&gt;3.writing a spider（写spider）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
scrapy genspider (spider的名称）（爬取的网页）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.writing &amp;amp; Configure an item Pipeline（编写和配置项目管道）&lt;/p&gt;
&lt;p&gt;5.Execute crawl（执行爬虫）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
scrapy crawl (spider的名称）
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第三步：具体实现&lt;/h3&gt;
&lt;h4&gt;1.创建项目&lt;/h4&gt;
&lt;p&gt;进入scrapy项目的工作区间(xici项目名)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
scrapy startproject xici
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419215946978-1196448972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时项目结构是这样&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419220201104-612081088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;2.创建spider爬虫&lt;/h4&gt;
&lt;p&gt;进入项目创建(注意后面的不是具体地址，是域名)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 scrapy genspider xicidaili &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xicidaili.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419220648416-697428459.png&quot; alt=&quot;&quot; width=&quot;748&quot; height=&quot;59&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时，你会发现在spiders文件夹下多了个 xicidaili.py 文件（这就是爬虫文件）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419220804170-324992392.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;3.编写items.py&lt;/h4&gt;
&lt;p&gt; 根据我们的需求编写&lt;/p&gt;
&lt;p&gt;代理ip最主要是ip、端口和类型（http或https）&lt;/p&gt;
&lt;h4&gt;items.py&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Define here the models for your scraped items&lt;/span&gt;&lt;span&gt;
#
#&lt;/span&gt;&lt;span&gt; See documentation in:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; https://doc.scrapy.org/en/latest/topics/items.html&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; scrapy


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; XiciItem(scrapy.Item):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; define the fields for your item here like:&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name = scrapy.Field()&lt;/span&gt;
    ip =&lt;span&gt; scrapy.Field()
    port &lt;/span&gt;=&lt;span&gt; scrapy.Field()
    types &lt;/span&gt;= scrapy.Field()
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4.编写xicidaili.py&lt;/h4&gt;
&lt;p&gt;具体爬虫操作就在这个文件里实现&lt;/p&gt;
&lt;h3&gt;xicidaili.py&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; scrapy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; xici.items &lt;span&gt;import&lt;/span&gt;&lt;span&gt; XiciItem

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; XicidailiSpider(scrapy.Spider):
    name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xicidaili&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    allowed_domains &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xicidaili.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;把http://xicidaili.com/地址改为我们需要爬去的具体地址&lt;/span&gt;
    start_urls = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.xicidaili.com/nn/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse(self, response):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;我们发现ip都是在table标签里，那我们就用xpath选择table元素&lt;/span&gt;
        lis = response.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//table[@id=&quot;ip_list&quot;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;抓取table下的tr,一个tr就一个ip，端口，类型&lt;/span&gt;
        trs = lis[0].xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

        items &lt;/span&gt;=&lt;span&gt; []
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;除掉第一行&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; ip &lt;span&gt;in&lt;/span&gt; trs[1&lt;span&gt;:]:
            item &lt;/span&gt;=&lt;span&gt; XiciItem()
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;抓取每一行具体的内容&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; //*[@id=&quot;ip_list&quot;]/tbody/tr[2]/td[2]&lt;/span&gt;
            item[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = ip.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;td[2]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].extract()

            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; //*[@id=&quot;ip_list&quot;]/tbody/tr[2]/td[3]&lt;/span&gt;
            item[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = ip.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;td[3]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].extract()

            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; //*[@id=&quot;ip_list&quot;]/tbody/tr[2]/td[6]&lt;/span&gt;
            item[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;types&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = ip.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;td[6]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).extract()

            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;加入到数组&lt;/span&gt;
&lt;span&gt;            items.append(item)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;返回给items.py&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; items
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;5.编写pipelines.py&lt;/h4&gt;
&lt;p&gt;pipelines文件是对数据进行持久化存储的 &lt;/p&gt;
&lt;p&gt;MySQLdb不支持python3,所以我要用pymysql代替&lt;/p&gt;
&lt;p&gt;没有pymysql需要用pip下载，数据库表也要自己建&lt;/p&gt;
&lt;h3&gt;pipelines.py&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Define your item pipelines here&lt;/span&gt;&lt;span&gt;
#
#&lt;/span&gt;&lt;span&gt; Don't forget to add your pipeline to the ITEM_PIPELINES setting&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; XiciPipeline(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.client &lt;/span&gt;=&lt;span&gt; pymysql.connect(
            host&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            port&lt;/span&gt;=3306&lt;span&gt;,
            user&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用自己的用户名&lt;/span&gt;
            passwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用自己的密码&lt;/span&gt;
            db=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库名&lt;/span&gt;
            charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        )
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拿到游标&lt;/span&gt;
        self.cur =&lt;span&gt; self.client.cursor()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_item(self, item, spider):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;mysql防止sql注入&lt;/span&gt;
        sql = (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into proxyip(ip,port,types) values (%s,%s,%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        lis &lt;/span&gt;= (item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;types&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:

            self.cur.execute(sql, lis)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 向数据库提交&lt;/span&gt;
&lt;span&gt;            self.client.commit()
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Insert error:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, e)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;关闭&lt;/span&gt;
&lt;span&gt;        self.cur.close()
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; item
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;6.编写middlewares.py&lt;/h4&gt;
&lt;p&gt;middlewares.py中设置用户代理中间件&lt;/p&gt;
&lt;p&gt;对爬虫进行伪装，伪装成人工操作，否则网站会监测出你是爬虫，并拦截你&lt;/p&gt;
&lt;h3&gt; 在middlewares.py文件中加入以下代码：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56.5&quot;&gt;
&lt;pre readability=&quot;30&quot;&gt;
from scrapy.downloadermiddlewares.useragent import UserAgentMiddleware&lt;br/&gt;import random&lt;p&gt;#设置代理ip&lt;br/&gt;class MyProxyMiddleware(object):&lt;br/&gt;'''&lt;br/&gt;设置Proxy&lt;br/&gt;'''&lt;/p&gt;&lt;p&gt;def __init__(self, ip):&lt;br/&gt;self.ip = ip&lt;/p&gt;&lt;p&gt;@classmethod&lt;br/&gt;def from_crawler(cls, crawler):&lt;br/&gt;return cls(ip=crawler.settings.get('PROXIES'))&lt;/p&gt;&lt;p&gt;def process_request(self, request, spider):&lt;br/&gt;ip = random.choice(self.ip)&lt;br/&gt;request.meta['proxy'] = ip&lt;/p&gt;&lt;p&gt;class MyUserAgentMiddleware(UserAgentMiddleware):&lt;br/&gt;'''&lt;br/&gt;设置User-Agent&lt;br/&gt;'''&lt;/p&gt;&lt;p&gt;def __init__(self, user_agent):&lt;br/&gt;self.user_agent = user_agent&lt;/p&gt;&lt;p&gt;@classmethod&lt;br/&gt;def from_crawler(cls, crawler):&lt;/p&gt;&lt;p&gt;return cls(&lt;br/&gt;user_agent=crawler.settings.get('USER_AGENTS_LIST')&lt;br/&gt;)&lt;/p&gt;&lt;p&gt;def process_request(self, request, spider):&lt;br/&gt;agent = random.choice(self.user_agent)&lt;br/&gt;request.headers['User-Agent'] = agent
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;7.编写settings.py&lt;/h4&gt;
&lt;p&gt;我们刚才编写的middlewares.py和pipelines.py都要在settings.py文件里面进行配置，设置优先级等等。&lt;/p&gt;
&lt;p&gt;(一定要记得，否则你写的数据持久化存储和爬虫伪装是没有生效的，记得把ROBOTSTXT_OBEY改为False)&lt;/p&gt;
&lt;h3&gt;修改settings.py文件代码如下：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
BOT_NAME = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xici&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

SPIDER_MODULES &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xici.spiders&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
NEWSPIDER_MODULE &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xici.spiders&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;对middlewares编写的进行配置&lt;/span&gt;
DOWNLOADER_MIDDLEWARES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xici.middlewares.MyProxyMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 543&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddleware.useragent.UserAgentMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: None,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xici.middlewares.MyUserAgentMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 400&lt;span&gt;,
}

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置pipelines.py&lt;/span&gt;
ITEM_PIPELINES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xici.pipelines.XiciPipeline&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 300&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;代理的ip&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;你看到此篇文章的时候，ip已经没用了，你可以在西刺网站上拿一个试&lt;/span&gt;
PROXIES = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://192.168.42.249:808&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;user_agent&lt;/span&gt;
USER_AGENTS_LIST =&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
]

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Crawl responsibly by identifying yourself (and your website) on the user-agent&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;USER_AGENT = 'xici (+http://www.yourdomain.com)'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;要设置ROBOTSTXT_OBEY改为False&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;如果为True，则遵守robots协议（爬虫协议）&lt;/span&gt;
&lt;span&gt;
ROBOTSTXT_OBEY &lt;/span&gt;= False
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;8.执行爬虫&lt;/h4&gt;
&lt;p&gt;进入项目里面，列出爬虫&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
scrapy list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419234638796-1167380091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
scrapy crawl xicidaili
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1590884/201904/1590884-20190419234753823-139069624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;成功爬取&lt;/p&gt;
&lt;h4&gt;9.问题注意 &lt;/h4&gt;
&lt;p&gt;1.在执行的时候，可能会卡住，原因是上面用的代理ip已经过期，需要另外找，&lt;/p&gt;
&lt;p&gt;或者你可以把ip代理部分去掉，上面示例不用代理ip也能爬取，&lt;/p&gt;
&lt;p&gt;找ip代理也是因为你频繁的访问，它是禁止了你的ip，没有也可以不用！ &lt;/p&gt;
&lt;p&gt; 2.网站内的html标签有所改变，我上面xpath已经没办法找到我们想要的内容了，需要修改以下xpath&lt;/p&gt;
&lt;h3&gt;以上是我学习scrapy的分享，有什么不对，望大家指点&lt;/h3&gt;
</description>
<pubDate>Fri, 19 Apr 2019 16:02:00 +0000</pubDate>
<dc:creator>赖大大</dc:creator>
<og:description>第一步：环境搭建 1.python2 或 python3 2.用pip安装下载scrapy框架 具体就自行百度了，主要内容不是在这。 第二步：创建scrapy（简单介绍） 1.Creating a p</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyc642983907/p/10739577.html</dc:identifier>
</item>
<item>
<title>Web API  处理机制剖析 --- 拨开迷雾看本质 - 源之缘</title>
<link>http://www.cnblogs.com/yuanchenhui/p/web_api_inside.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuanchenhui/p/web_api_inside.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;span&gt;最近开发了几个项目，用到了web api，也通过项目加深了对web api的理解。本文试图从内部原理讲解web api的本质。透过重重迷雾，看清本质，就能更好的把握和利用好web api。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1&lt;/strong&gt; &lt;/span&gt;Web API 的本质&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; 1.1 交互说明&lt;/span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Web API 是基于http传输协议的函数调用。http是应用最广泛的传输协议，web服务端就实现了http服务器。由于web的流行，也带动了web服务器的完善和优化。web服务器的功能也不仅限于传输html文本，任何数据都可以通过文本传输（其实，图片，视频也可以通过变通的方式实现传输）。函数的调用就是发送数据和接收数据的过程；既然http也能发送和接收数据，当然也可以通过http实现函数调用，这就是web api。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/245753/201904/245753-20190419213613424-839691838.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;http是传输协议，并不解释传输的内容。http协议同时也定义了一些标准的术语，方便客户端和服务端交互。一个典型的http发送和响应数据如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;----&amp;gt;request&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
Request URL: https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.baidu.com/&lt;/span&gt;
&lt;span&gt;Request Method: GET
Accept: text&lt;/span&gt;/html,application/xhtml+xml,application/xml;q=&lt;span&gt;0.9&lt;/span&gt;,image/webp,image/apng,*&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;;q=0.8
&lt;span&gt;Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Connection: keep-alive
Cookie: BAIDUID=43E2CBB543131B011BC1861E7CDD83DB:FG=1
Host: www.baidu.com
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36

&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;body data&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;----reponse&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Status Code: 200 OK
Remote Address: 111.13.100.91:443
Referrer Policy: no-referrer-when-downgrade
Bdpagetype: 1
Bdqid: 0xecff8dba0009a0bc
Cache-Control: private
Connection: Keep-Alive
Content-Type: text/html
Cxy_all: baidu+5bd9cbe0adf9080de3f7682cf8f45af1
Date: Fri, 19 Apr 2019 13:44:36 GMT
Expires: Fri, 19 Apr 2019 13:44:05 GMT
Server: BWS/1.1
Set-Cookie: BIDUPSID=43E2CBB543131B011BC1861E7CDD83DB; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com
Set-Cookie: PSTM=1555681476; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com
&lt;p&gt;&lt;span&gt;body data&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;http分为包头和包体，包头包含一些关键字段，如Accept，Cookie，这些是http的保留字。你也可以通过包头传输数据，只要不使用保留字就行。如：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;myguid： 6F9619FF-8B86-D011-B42D-00C04FC964FF&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通常包头传输一组函数公用的数据，比如有10个函数，这些函数都用到guid，可以把guid放入包头。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.2 包体数据说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;http请求（request）数据：&lt;/p&gt;
&lt;p&gt;a）对于浏览器的表单，包体数据格式如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;key1=value1&amp;amp;key2=value2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是key，value对，通过&amp;amp;号分割。key，value也可以是汉字，会做转义处理。这些细节不需要我们处理。只需要知道key、value可以是任何字符就行。&lt;/p&gt;
&lt;p&gt;b）json和其他数据格式&lt;/p&gt;
&lt;p&gt;对于web api，包体数据可以是json格式。当然不限于json，可以是任意形式的数据，只要双方对处理协议达成一致就行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sites&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;菜鸟教程&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www.runoob.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }, 
    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;google&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www.google.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }, 
    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;微博&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www.weibo.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
    ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;传输复杂的数据建议使用json，json函数可以把复杂的类变量序列化；对方反序列化，就可以得到一个类变量。这样，远程函数调用与本地调用区别就很小；仅仅多一层json序列化。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2 asp.net 对web API的实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;常言：巧妇难为无米之炊。对于web api，http承载的数据就是米，asp.net框架就是巧妇。web api的本质就是数据的发送和接收，asp.net 能做的的就是方便你的接收和返回。asp.net这里是好心帮程序员减轻负担，但这种好心也有副作用：很难探究web api的本质，遇到问题难以从本质上去分析解决。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.1 数据如何变成函数参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们一般不处理http原始数据，这些数据一般会映射为函数参数。这种映射关系多种多样，见下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/245753/201904/245753-20190419232209230-231964879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;asp.net做这种映射处理就是为了减轻开发人员的负担，但是开发人员必须了解这些映射关系。不同框架处理这种映射逻辑也是不一样的，其实，开发人员可以定制自己的映射逻辑；但是好像没必要这样做，直接处理http数据，就是从asp.net request变量抽取http数据再处理，也增加不了多少工作量；这样反而使开发人员对底层数据了解更加透彻。&lt;/p&gt;
&lt;p&gt; 2.2 asp.net 客户端调用举例&lt;/p&gt;
&lt;p&gt;使用类WebClient做为示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端调用&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt;&lt;span&gt; clientPost()
    {
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Net.WebClient())
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postParam = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NameValueCollection();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传递参数&lt;/span&gt;
            postParam.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            postParam.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tom);&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;http body部分就变为 code=123&amp;amp;name=tom&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; responsebytes =&lt;span&gt; client.UploadValues(uri, postParam);

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; strResult =&lt;span&gt; System.Text.Encoding.UTF8.GetString(responsebytes);
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务端:&lt;/span&gt;
    &lt;span&gt;string&lt;/span&gt; ServerDeal(&lt;span&gt;string&lt;/span&gt; code, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http body数据部分映射为参数：code为123,name为tom&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;NameValueCollection类将数据组成key、value对，并处理字符转义。通过上面的代码可以看出，web api调用其实很简单，框架帮我们做了数据映射，字符转义等常规操作，让我从繁杂的琐事中脱身，专注处理业务逻辑。&lt;br/&gt;&lt;span&gt;&lt;strong&gt;后记&lt;/strong&gt;：&lt;/span&gt;对事物的了解要抓住本质，只要了解了本质，就一通百通。web api原理并不繁杂，但是由于上层的封装，使我们很难了解到底层处理原理，导致很难抓住事物的本质。本文通过自身的领悟，试图剖析其本质，希望对读者有所裨益！&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 19 Apr 2019 15:24:00 +0000</pubDate>
<dc:creator>源之缘</dc:creator>
<og:description>前言 最近开发了几个项目，用到了web api，也通过项目加深了对web api的理解。本文试图从内部原理讲解web api的本质。透过重重迷雾，看清本质，就能更好的把握和利用好web ap</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuanchenhui/p/web_api_inside.html</dc:identifier>
</item>
<item>
<title>深度学习之卷积神经网络(CNN)详解与代码实现（二） - w_x_w1985</title>
<link>http://www.cnblogs.com/further-further-further/p/10737065.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/further-further-further/p/10737065.html</guid>
<description>

&lt;p&gt;&lt;span&gt;            本文系作者原创，转载请注明出处&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 深度学习之卷积神经网络(CNN)详解与代码实现（二）&quot; href=&quot;https://www.cnblogs.com/further-further-further/p/10737065.html&quot; target=&quot;_blank&quot;&gt;:https://www.cnblogs.com/further-further-further/p/10737065.html&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;span&gt;1.踩过的坑(tensorflow)&lt;/span&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;span&gt;2.tensorboard&lt;/span&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;span&gt;3.代码实现（python3.6）&lt;/span&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;span&gt;4.运行结果以及分析&lt;/span&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;span&gt;1.踩过的坑(tensorflow)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;上一章CNN中各个算法都是纯手工实现的，可能存在一些难以发现的问题，这也是准确率不高的一个原因，这章主要利用tensorflow框架&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;来实现卷积神经网络，数据源还是cifar（具体下载见上一章）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在利用tensorflow框架实现CNN时，需要注意以下几点：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1.输入数据定义时，x只是起到占位符的作用（看不到真实值，只是为了能够运行代码，获取相应的tensor节点，这一点跟我们之前代码流程完全相反， 真正数据流的执行在session会话里）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;x：输入数据，y_： 标签数据，keep_prob: 概率因子，防止过拟合。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;定义，且是全局变量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
x = tf.placeholder(tf.float32, [None, 3072], name='x') 
&lt;/pre&gt;
&lt;pre&gt;
y_ = tf.placeholder(tf.float32, [None, 10], name='y_')
&lt;/pre&gt;
&lt;pre&gt;
keep_prob = tf.placeholder(tf.float32)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;后面在session里必须要初始化&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sess.run(tf.global_variables_initializer())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在session run时必须要传得到该tensor节点含有参数值（x, y_, keep_prob）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
train_accuracy = accuracy.eval(feed_dict=&lt;span&gt;{
                    x: batch[0], y_: batch[&lt;/span&gt;1], keep_prob: 1.0})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;2.原始数据集标签要向量化；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;例如cifar有10个类别，如果类别标签是 6 对应向量[0,0,0,0,0,1,0,0,0,0]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.知道每一步操作的数据大小的变化，不然，报错的时候很难定位（个人认为这也是tensorflow的弊端，无法实时追踪定位）；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;  注意padding = 'SAME'和'VALID'的区别&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;  padding = 'SAME' =&amp;gt; Height_后 = Height_前/Strides 跟padding无关  向上取整&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;  padding = 'VALID'=&amp;gt;  Height_后 = (Height_前 - Filter + 1)/Strides  向上取整&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;4.打印tensorboard流程图，可以直观看到每步操作数据大小的变化；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2. tensorboard&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;tensorboard就是一个数据结构流程图的可视化工具，通过tensorboard流程图，可以直观看到神经网络的每一步操作以及数据流的变化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;操作步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 在session会话里加入如下代码，打印结果会在当前代码文件相同路径的tensorboard文件下，默认是&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tensorboard/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sess.graph)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2. 在运行里输入cmd，然后输入（前提是安装好了tensorboard =&amp;gt; pip install  tensorboard）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tensorboard --logdir=D:\Project\python\myProject\CNN\tensorflow\captchaIdentify\tensorboard --host=127.0.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;'D:\Project\python\myProject\CNN\tensorflow\captchaIdentify\tensorboard' 是我生成的tensorboard文件的绝对路径，你替换成你自己的就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正确运行后会显示 ‘Tensorboard at http://127.0.0.1:6006’，说明tensorboard服务已经起来了，在浏览器页面输入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://127.0.0.1:6006即可显示流程图。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;3.代码实现（python3.6）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;代码逻辑实现相对比较简单，在一些重要逻辑实现上，我已做了注释，如果大家有什么疑义，可以留言给我，我们一起交流。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;因为原始图片数据集太大，不好上传，大家可以直接在&lt;a href=&quot;http://www.cs.toronto.edu/~kriz/cifar.html&quot; target=&quot;_blank&quot;&gt;http://www.cs.toronto.edu/~kriz/cifar.html&lt;/a&gt;下载CIFAR-10 python version，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;有163M，放在代码文件同路径下即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;cifar放置路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/797382/201904/797382-20190419230527066-1727239284.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;start.py&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c3070b67-dd58-4c2d-8c45-97c51c6ccec9')&quot; readability=&quot;69.5&quot;&gt;&lt;img id=&quot;code_img_closed_c3070b67-dd58-4c2d-8c45-97c51c6ccec9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c3070b67-dd58-4c2d-8c45-97c51c6ccec9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c3070b67-dd58-4c2d-8c45-97c51c6ccec9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c3070b67-dd58-4c2d-8c45-97c51c6ccec9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;134&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Disable linter warnings to maintain consistency with tutorial.&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; pylint: disable=invalid-name&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; pylint: disable=g-bad-import-order&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;__future__&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; absolute_import
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;__future__&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; division
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;__future__&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; print_function
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; argparse
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tempfile
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;from tensorflow.examples.tutorials.mnist import input_data&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt; 卷积神经网络实现10类(airplane, automobile, bird, cat, deer, dog, frog, horse, ship, truck) 
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt; 60000张图片的识别
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt; 5000次，准确率有 58%；
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt; 20000次，准确率有 68.89%；
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt; 相比mnist数字图片识别准确度低，原因有：
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt; mnist训练图片是灰度图片，纹理简单，数字的可变性小，而cifar是彩色图片，纹理复杂，动物可变性大；
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datesets
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception:
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datesets
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt; FLAGS =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; deepnn(x):
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reshape&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         x_image = tf.reshape(x, [-1, 32, 32, 3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;# 第一层卷积操作 ##&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;conv1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         W_conv1 = weight_variable([5, 5, 3, 32&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         b_conv1 = bias_variable([32&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) +&lt;span&gt; b_conv1)
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; 
&lt;span&gt; 37&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pool1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         h_pool1 =&lt;span&gt; max_pool_2x2(h_conv1)
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Second convolutional layer -- maps 32 feature maps to 64.&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;# 第二层卷积操作 ##&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;conv2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         W_conv2 = weight_variable([5, 5, 32, 64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         b_conv2 = bias_variable([64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) +&lt;span&gt; b_conv2)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pool2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         h_pool2 =&lt;span&gt; max_pool_2x2(h_conv2)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;# 第三层全连接操作 ##&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fc1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         W_fc1 = weight_variable([8 * 8 * 64, 1024&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         b_fc1 = bias_variable([1024&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         h_pool2_flat = tf.reshape(h_pool2, [-1, 8 * 8 * 64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) +&lt;span&gt; b_fc1)
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dropout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         keep_prob =&lt;span&gt; tf.placeholder(tf.float32)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;         h_fc1_drop =&lt;span&gt; tf.nn.dropout(h_fc1, keep_prob)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;# 第四层输出操作 ##&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fc2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;         W_fc2 = weight_variable([1024, 10&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         b_fc2 = bias_variable([10&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         y_conv = tf.matmul(h_fc1_drop, W_fc2) +&lt;span&gt; b_fc2
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; y_conv, keep_prob
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; conv2d(x, W):
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; max_pool_2x2(x):
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; tf.nn.max_pool(x, ksize=[1, 2, 2, 1&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                           strides=[1, 2, 2, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; weight_variable(shape):
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     initial = tf.truncated_normal(shape, stddev=0.1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tf.Variable(initial)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; bias_variable(shape):
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;     initial = tf.constant(0.1, shape=&lt;span&gt;shape)
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tf.Variable(initial)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(_):
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Import data&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;     mnist = datesets.read_data_sets(train_dir = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.\\cifar-10-batches-py\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, one_hot=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create the model&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 声明一个占位符，None表示输入图片的数量不定，28*28图片分辨率&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;     x = tf.placeholder(tf.float32, [None, 3072], name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 类别是0-9总共10个类别，对应输出分类结果&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;     y_ = tf.placeholder(tf.float32, [None, 10], name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     y_conv, keep_prob =&lt;span&gt; deepnn(x)
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过softmax-loss求交叉熵&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=&lt;span&gt;y_conv)
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 求均值&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     cross_entropy =&lt;span&gt; tf.reduce_mean(cross_entropy)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算梯度，更新参数值&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;adam_optimizer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         train_step = tf.train.AdamOptimizer(1e-4&lt;span&gt;).minimize(cross_entropy)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt;     with tf.name_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         correct_prediction =&lt;span&gt; tf.cast(correct_prediction, tf.float32)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;     accuracy =&lt;span&gt; tf.reduce_mean(correct_prediction)
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; graph_location = tempfile.mkdtemp()&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print('Saving graph to: %s' % graph_location)&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; train_writer.add_graph(tf.get_default_graph())&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;    with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 打印流程图&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;         writer = tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tensorboard/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sess.graph)
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        sess.run(tf.global_variables_initializer())
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(20000&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             batch = mnist.train.next_batch(50&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; i % 1000 ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                 train_accuracy = accuracy.eval(feed_dict=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                     x: batch[0], y_: batch[1], keep_prob: 1.0&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;step %d, training accuracy %g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (i, train_accuracy))
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; 
&lt;span&gt;124&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test accuracy %g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % accuracy.eval(feed_dict=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0&lt;span&gt;}))
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; 
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;     parser =&lt;span&gt; argparse.ArgumentParser()
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;     parser.add_argument(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--data_dir&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, type=&lt;span&gt;str,
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                         default=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/tensorflow/mnist/input_data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                         help=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Directory for storing input data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;     FLAGS, unparsed =&lt;span&gt; parser.parse_known_args()
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;     tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;datasets.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e806553f-2eac-49c9-babe-15a5aa419c8c')&quot; readability=&quot;71&quot;&gt;&lt;img id=&quot;code_img_closed_e806553f-2eac-49c9-babe-15a5aa419c8c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e806553f-2eac-49c9-babe-15a5aa419c8c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e806553f-2eac-49c9-babe-15a5aa419c8c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e806553f-2eac-49c9-babe-15a5aa419c8c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;137&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tensorflow.python.framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; dtypes
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tensorflow.python.framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random_seed
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; six.moves &lt;span&gt;import&lt;/span&gt;&lt;span&gt; xrange
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tensorflow.contrib.learn.python.learn.datasets &lt;span&gt;import&lt;/span&gt;&lt;span&gt; base
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pickle
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSet(object):
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Container class for a dataset (deprecated).
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;    THIS CLASS IS DEPRECATED. See
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    [contrib/learn/README.md](https://www.tensorflow.org/code/tensorflow/contrib/learn/README.md)
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;    for general migration instructions.
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;                 images,
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;                 labels,
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;                  fake_data=&lt;span&gt;False,
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;                  one_hot=&lt;span&gt;False,
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;                  dtype=&lt;span&gt;dtypes.float32,
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;                  reshape=&lt;span&gt;True,
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;                  seed=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Construct a DataSet.
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;        one_hot arg is used only if fake_data is true.  `dtype` can be either
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        `uint8` to leave the input as `[0, 255]`, or `float32` to rescale into
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;        `[0, 1]`.  Seed arg provides for convenient deterministic testing.
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;         seed1, seed2 =&lt;span&gt; random_seed.get_seed(seed)
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; If op level seed is not set, use whatever graph level seed is returned&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;         numpy.random.seed(seed1 &lt;span&gt;if&lt;/span&gt; seed &lt;span&gt;is&lt;/span&gt; None &lt;span&gt;else&lt;/span&gt;&lt;span&gt; seed2)
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         dtype =&lt;span&gt; dtypes.as_dtype(dtype).base_dtype
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; dtype &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; (dtypes.uint8, dtypes.float32):
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;&lt;span&gt; TypeError(
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;                 &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Invalid image dtype %r, expected uint8 or float32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; dtype)
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; fake_data:
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             self._num_examples = 10000
&lt;span&gt; 38&lt;/span&gt;             self.one_hot =&lt;span&gt; one_hot
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;assert&lt;/span&gt; images.shape[0] ==&lt;span&gt; labels.shape[0], (
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;                 &lt;span&gt;'&lt;/span&gt;&lt;span&gt;images.shape: %s labels.shape: %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (images.shape, labels.shape))
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             self._num_examples =&lt;span&gt; images.shape[0]
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Convert shape from [num examples, rows, columns, depth]&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; to [num examples, rows*columns] (assuming depth == 1)&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; reshape:
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;                 &lt;span&gt;assert&lt;/span&gt; images.shape[3] == 3
&lt;span&gt; 48&lt;/span&gt;                 images =&lt;span&gt; images.reshape(images.shape[0],
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                                         images.shape[1] * images.shape[2] * images.shape[3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; dtype ==&lt;span&gt; dtypes.float32:
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Convert from [0, 255] -&amp;gt; [0.0, 1.0].&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;                 images =&lt;span&gt; images.astype(numpy.float32)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                 images = numpy.multiply(images, 1.0 / 255.0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         self._images =&lt;span&gt; images
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         self._labels =&lt;span&gt; labels
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         self._epochs_completed =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         self._index_in_epoch =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; images(self):
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._images
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; labels(self):
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._labels
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; num_examples(self):
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._num_examples
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; epochs_completed(self):
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._epochs_completed
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; next_batch(self, batch_size, fake_data=False, shuffle=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Return the next `batch_size` examples from this data set.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; fake_data:
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             fake_image = [1] * 784
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; self.one_hot:
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                 fake_label = [1] + [0] * 9
&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 fake_label =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; [fake_image &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt;&lt;span&gt; xrange(batch_size)], [
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                 fake_label &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt;&lt;span&gt; xrange(batch_size)
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;            ]
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         start =&lt;span&gt; self._index_in_epoch
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Shuffle for the first epoch&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; self._epochs_completed == 0 &lt;span&gt;and&lt;/span&gt; start == 0 &lt;span&gt;and&lt;/span&gt;&lt;span&gt; shuffle:
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             perm0 =&lt;span&gt; numpy.arange(self._num_examples)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;            numpy.random.shuffle(perm0)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             self._images =&lt;span&gt; self.images[perm0]
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             self._labels =&lt;span&gt; self.labels[perm0]
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Go to the next epoch&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; start + batch_size &amp;gt;&lt;span&gt; self._num_examples:
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Finished epoch&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             self._epochs_completed += 1
&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Get the rest examples in this epoch&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;             rest_num_examples = self._num_examples -&lt;span&gt; start
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             images_rest_part =&lt;span&gt; self._images[start:self._num_examples]
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             labels_rest_part =&lt;span&gt; self._labels[start:self._num_examples]
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Shuffle the data&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; shuffle:
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;                 perm =&lt;span&gt; numpy.arange(self._num_examples)
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;                numpy.random.shuffle(perm)
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;                 self._images =&lt;span&gt; self.images[perm]
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 self._labels =&lt;span&gt; self.labels[perm]
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Start next epoch&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;             start =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             self._index_in_epoch = batch_size -&lt;span&gt; rest_num_examples
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             end =&lt;span&gt; self._index_in_epoch
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             images_new_part =&lt;span&gt; self._images[start:end]
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             labels_new_part =&lt;span&gt; self._labels[start:end]
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; numpy.concatenate(
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 (images_rest_part, images_new_part), axis=&lt;span&gt;0), numpy.concatenate(
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                 (labels_rest_part, labels_new_part), axis=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             self._index_in_epoch +=&lt;span&gt; batch_size
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;             end =&lt;span&gt; self._index_in_epoch
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._images[start:end], self._labels[start:end]
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; read_data_sets(train_dir,
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                    one_hot=&lt;span&gt;False,
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                    dtype=&lt;span&gt;dtypes.float32,
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                    reshape=&lt;span&gt;True,
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                    validation_size=5000&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                    seed=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt; 
&lt;span&gt;131&lt;/span&gt;     train_images,train_labels,test_images,test_labels =&lt;span&gt; load_CIFAR10(train_dir)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; 0 &amp;lt;= validation_size &amp;lt;=&lt;span&gt; len(train_images):
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;raise&lt;/span&gt; ValueError(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Validation size should be between 0 and {}. Received: {}.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;                         .format(len(train_images), validation_size))
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; 
&lt;span&gt;136&lt;/span&gt;     validation_images =&lt;span&gt; train_images[:validation_size]
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;     validation_labels =&lt;span&gt; train_labels[:validation_size]
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;     validation_labels = dense_to_one_hot(validation_labels, 10&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;     train_images =&lt;span&gt; train_images[validation_size:]
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     train_labels =&lt;span&gt; train_labels[validation_size:]
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;     train_labels = dense_to_one_hot(train_labels, 10&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;     test_labels = dense_to_one_hot(test_labels, 10&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; 
&lt;span&gt;145&lt;/span&gt;     options = dict(dtype=dtype, reshape=reshape, seed=&lt;span&gt;seed)
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;     train = DataSet(train_images, train_labels, **&lt;span&gt;options)
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;     validation = DataSet(validation_images, validation_labels, **&lt;span&gt;options)
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;     test = DataSet(test_images, test_labels, **&lt;span&gt;options)
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; 
&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; base.Datasets(train=train, validation=validation, test=&lt;span&gt;test)
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; 
&lt;span&gt;152&lt;/span&gt; 
&lt;span&gt;153&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; load_CIFAR_batch(filename):
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt; load single batch of cifar &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;     with open(filename, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;         datadict = pickle.load(f, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;         X = datadict[b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;         Y = datadict[b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;labels&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;         X = X.reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;         Y =&lt;span&gt; numpy.array(Y)
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; X, Y
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; 
&lt;span&gt;163&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; load_CIFAR10(ROOT):
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt; load all of cifar &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;     xs =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;     ys =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; b &lt;span&gt;in&lt;/span&gt; range(1,6&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;         f = os.path.join(ROOT, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;data_batch_%d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (b, ))
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;         X, Y =&lt;span&gt; load_CIFAR_batch(f)
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;        xs.append(X)
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;        ys.append(Y)
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;     Xtr =&lt;span&gt; numpy.concatenate(xs)
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;     Ytr =&lt;span&gt; numpy.concatenate(ys)
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;     &lt;span&gt;del&lt;/span&gt;&lt;span&gt; X, Y
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;     Xte, Yte = load_CIFAR_batch(os.path.join(ROOT, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test_batch&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Xtr, Ytr, Xte, Yte
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; 
&lt;span&gt;178&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; dense_to_one_hot(labels_dense, num_classes):
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Convert class labels from scalars to one-hot vectors.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;     num_labels =&lt;span&gt; labels_dense.shape[0]
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;     index_offset = numpy.arange(num_labels) *&lt;span&gt; num_classes
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;     labels_one_hot =&lt;span&gt; numpy.zeros((num_labels, num_classes))
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;     labels_one_hot.flat[index_offset + labels_dense.ravel()] = 1
&lt;span&gt;184&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; labels_one_hot
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;4.运行结果以及分析&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这里选取55000张图片作为训练样本，测试样本选取5000张。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;tensorboard可视流程图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/797382/201904/797382-20190419231134645-816503701.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行5000次，准确率：58%&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/797382/201904/797382-20190419230713937-1125268045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行20000次，准确率：68.89%&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/797382/201904/797382-20190419231032201-1623033410.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;运行40000次，准确率：100%&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/797382/201904/797382-20190419231043549-152289779.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不要让懒惰占据你的大脑，不要让妥协拖垮了你的人生。青春就是一张票，能不能赶上时代的快车，你的步伐就掌握在你的脚下。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Apr 2019 15:16:00 +0000</pubDate>
<dc:creator>w_x_w1985</dc:creator>
<og:description>用Tensorflow实现卷积神经网络(CNN) 本文系作者原创，转载请注明出处:https://www.cnblogs.com/further-further-further/p/10737065.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/further-further-further/p/10737065.html</dc:identifier>
</item>
<item>
<title>关于 iOS 性能优化方面的面试题， - 原来是泽镜啊</title>
<link>http://www.cnblogs.com/Mcci7/p/10739293.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mcci7/p/10739293.html</guid>
<description>&lt;p&gt;&lt;strong&gt;这是我前面几天碰到的面试题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何对定位和分析项目中影响性能的地方？以及如何进行性能优化？&lt;/p&gt;
&lt;p&gt;我的答案：&lt;/p&gt;
&lt;p&gt;定位方法：&lt;/p&gt;
&lt;p&gt;instruments&lt;/p&gt;
&lt;p&gt;  在iOS上进行性能分析的时候，首先考虑借助instruments这个利器分析出问题出在哪，不要凭空想象，不然你可能把精力花在了1%的问题上，最后发现其实啥都没优化，比如要查看程序哪些部分最耗时，可以使用Time Profiler，要查看内存是否泄漏了，可以使用Leaks等。关于instruments网上有很多资料，作为一个合格iOS开发者，熟悉这个工具还是很有必要的。&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;作为一个开发者，有一个学习的氛围跟一个交流圈子特别重要，这是一个我的iOS交流群：638302184，不管你是小白还是大牛欢迎入驻 ，分享BAT,阿里面试题、面试经验，讨论技术， 大家一起交流学习成长！希望帮助开发者少走弯路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优化建议：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.用ARC管理内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* ARC(Automatic Reference Counting, 自动引用计数)和iOS5一起发布，它避免了最常见的也就是经常是由于我们忘记释放内存所造成的内存泄露。它自动为你管理retain和release的过程，所以你就不必去手动干预了。下面是你会经常用来去创建一个View的代码段:  UIView *view = [[UIView alloc] init];&lt;/p&gt;
&lt;p&gt;*    // ...&lt;/p&gt;
&lt;p&gt;*   [self.view addSubview:view];&lt;/p&gt;
&lt;p&gt;*    [view release];&lt;/p&gt;
&lt;p&gt;* 忘掉代码段结尾的release简直像记得吃饭一样简单。而ARC会自动在底层为你做这些工作。除了帮你避免内存泄露，ARC还可以帮你提高性能，它能保证释放掉不再需要的对象的内存。这都啥年代了，你应该在你的所有项目里使用ARC!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.在正确的地方使用 reuseIdentifier&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* 一个开发中常见的错误就是没有给UITableViewCells， UICollectionViewCells，甚至是UITableViewHeaderFooterViews设置正确的reuseIdentifier。&lt;/p&gt;
&lt;p&gt;* 为了性能最优化，table view用 tableView:cellForRowAtIndexPath: 为rows分配cells的时候，它的数据应该重用自UITableViewCell。 一个table view维持一个队列的数据可重用的UITableViewCell对象。不使用reuseIdentifier的话，每显示一行table view就不得不设置全新的cell。这对性能的影响可是相当大的，尤其会使app的滚动体验大打折扣。&lt;/p&gt;
&lt;p&gt;* 自iOS6起，除了UICollectionView的cells和补充views，你也应该在header和footer views中使用reuseIdentifiers&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.尽量把views设置为完全不透明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* 如果你有透明的Views你应该设置它们的opaque(不透明)属性为YES。例如一个黑色半透明的可以设置为一个灰色不透明的View替代.原因是这会使系统用一个最优的方式渲染这些views。这个简单的属性在IB或者代码里都可以设定。&lt;/p&gt;
&lt;p&gt;* Apple的文档对于为图片设置透明属性的描述是：&lt;/p&gt;
&lt;p&gt;* (opaque)这个属性给渲染系统提供了一个如何处理这个view的提示。如果设为YES， 渲染系统就认为这个view是完全不透明的，这使得渲染系统优化一些渲染过程和提高性能。如果设置为NO，渲染系统正常地和其它内容组成这个View。默认值是YES。&lt;/p&gt;
&lt;p&gt;* 在相对比较静止的画面中，设置这个属性不会有太大影响。然而当这个view嵌在scroll view里边，或者是一个复杂动画的一部分，不设置这个属性的话会在很大程度上影响app的性能。&lt;/p&gt;
&lt;p&gt;* 换种说法，大家可能更好理解：只要一个视图的不透明度小于1,就会导致blending.blending操作在iOS的图形处理器（GPU）中完成的,blending主要指的是混合像素颜色的计算。举个例子,我们把两个图层叠加在一起,如果第一个图层的有透明效果,则最终像素的颜色计算需要将第二个图层也考虑进来。这一过程即为Blending。为什么Blending会导致性能的损失？原因是很直观的,如果一个图层是完全不透明的,则系统直接显示该图层的颜色即可。而如果图层是带透明效果的,则会引入更多的计算,因为需要把下面的图层也包括进来,进行混合后颜色的计算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 避免过于庞大的XIB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* iOS5中加入的Storyboards(分镜)正在快速取代XIB。然而XIB在一些场景中仍然很有用。比如你的app需要适应iOS5之前的设备，或者你有一个自定义的可重用的view,你就不可避免地要用到他们。&lt;/p&gt;
&lt;p&gt;* 如果你不得不XIB的话，使他们尽量简单。尝试为每个Controller配置一个单独的XIB，尽可能把一个View Controller的view层次结构分散到单独的XIB中去。&lt;/p&gt;
&lt;p&gt;* 需要注意的是，当你加载一个XIB的时候所有内容都被放在了内存里，包括任何图片。如果有一个不会即刻用到的view，你这就是在浪费宝贵的内存资源了。Storyboards就是另一码事儿了，storyboard仅在需要时实例化一个view controller.&lt;/p&gt;
&lt;p&gt;* 当你加载一个引用了图片或者声音资源的nib时，nib加载代码会把图片和声音文件写进内存。在OS X中，图片和声音资源被缓存在named cache中以便将来用到时获取。在iOS中，仅图片资源会被存进named caches。取决于你所在的平台，使用NSImage 或UIImage 的imageNamed:方法来获取图片资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 不要阻塞主线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* 永远不要使主线程承担过多。因为UIKit在主线程上做所有工作，渲染，管理触摸反应，回应输入等都需要在它上面完成。一直使用主线程的风险就是如果你的代码真的block了主线程，你的app会失去反应&lt;/p&gt;
&lt;p&gt;* 大部分阻碍主进程的情形是你的app在做一些牵涉到读写外部资源的I/O操作，比如存储或者网络。或者使用像 AFNetworking这样的框架来异步地做这些操作。如果你需要做其它类型的需要耗费巨大资源的操作(比如时间敏感的计算或者存储读写)那就用 Grand Central Dispatch，或者 NSOperation 和 NSOperationQueues.你可以使用NSURLConnection异步地做网络操作:  + (void)sendAsynchronousRequest:(NSURLRequest *)request queue:(NSOperationQueue *)queue completionHandler:(void (^)(NSURLResponse*, NSData*, NSError*))handler&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 在Image Views中调整图片大小&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* 如果要在UIImageView中显示一个来自bundle的图片，你应保证图片的大小和UIImageView的大小相同。在运行中缩放图片是很耗费资源的，特别是UIImageView嵌套在UIScrollView中的情况下。&lt;/p&gt;
&lt;p&gt;* 如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background thread，缩放一次，然后在UIImageView中使用缩放后的图片。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 选择正确的Collection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学会选择对业务场景最合适的类或者对象是写出能效高的代码的基础。当处理collections时这句话尤其正确。&lt;/p&gt;
&lt;p&gt;Apple有一个 Collections Programming Topics 的文档详尽介绍了可用的classes间的差别和你该在哪些场景中使用它们。这对于任何使用collections的人来说是一个必读的文档。&lt;/p&gt;
&lt;p&gt;呵呵，我就知道你因为太长没看…这是一些常见collection的总结：&lt;/p&gt;
&lt;p&gt;* Arrays: 有序的一组值。使用index来lookup很快，使用value lookup很慢， 插入/删除很慢。&lt;/p&gt;
&lt;p&gt;* Dictionaries: 存储键值对。 用键来查找比较快。&lt;/p&gt;
&lt;p&gt;* Sets: 无序的一组值。用值来查找很快，插入/删除很快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. 打开gzip压缩&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* 大量app依赖于远端资源和第三方API，你可能会开发一个需要从远端下载XML, JSON, HTML或者其它格式的app。&lt;/p&gt;
&lt;p&gt;* 问题是我们的目标是移动设备，因此你就不能指望网络状况有多好。一个用户现在还在edge网络，下一分钟可能就切换到了3G。不论什么场景，你肯定不想让你的用户等太长时间。&lt;/p&gt;
&lt;p&gt;* 减小文档的一个方式就是在服务端和你的app中打开gzip。这对于文字这种能有更高压缩率的数据来说会有更显著的效用。好消息是，iOS已经在NSURLConnection中默认支持了gzip压缩，当然AFNetworking这些基于它的框架亦然。像Google App Engine这些云服务提供者也已经支持了压缩输出。&lt;/p&gt;
</description>
<pubDate>Fri, 19 Apr 2019 14:41:00 +0000</pubDate>
<dc:creator>原来是泽镜啊</dc:creator>
<og:description>这是我前面几天碰到的面试题： 如何对定位和分析项目中影响性能的地方？以及如何进行性能优化？ 我的答案： 定位方法： instruments 在iOS上进行性能分析的时候，首先考虑借助instrumen</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mcci7/p/10739293.html</dc:identifier>
</item>
</channel>
</rss>