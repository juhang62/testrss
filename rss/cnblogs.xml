<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python机器学习笔记：使用Keras进行回归预测 - 战争热诚</title>
<link>http://www.cnblogs.com/wj-1314/p/10137184.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wj-1314/p/10137184.html</guid>
<description>&lt;p&gt;　　Keras是一个深度学习库，包含高效的数字库Theano和TensorFlow。是一个高度模块化的神经网络库，支持CPU和GPU。&lt;/p&gt;
&lt;p&gt;　　本文学习的目的是学习如何加载CSV文件并使其可供Keras使用，如何使用Keras创建一个回归问题的神经网络模型，如何使用scikit-learn和Keras一起使用交叉验证来评估模型，如何进行数据准备以提高Keras模型的技能，如何使用Keras调整模型的网络拓扑。&lt;/p&gt;
&lt;h2&gt;前期准备之Keras的scikit-learn接口包装器&lt;/h2&gt;
&lt;p&gt;　　Git地址：&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn&quot; target=&quot;_blank&quot;&gt;https://github.com/scikit-learn/scikit-learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　Scikit-learn 是基于Scipy为机器学习建造的的一个Python模块，他的特色就是多样化的分类，回归和聚类的算法包括支持向量机，逻辑回归，朴素贝叶斯分类器，随机森林，Gradient Boosting，聚类算法和DBSCAN。而且也设计出了Python numerical和scientific libraries Numpy and Scipy。&lt;/p&gt;
&lt;p&gt;　　我们可以通过包装器将Sequential模块（仅有一个输入）作为Scikit-learn工作流的一部分，相关的包装器定义在keras.wrappers.scikit_learn.py中。&lt;/p&gt;
&lt;h3&gt;1：目前有两个包装器可用&lt;/h3&gt;
&lt;p&gt;　　其中实现了sklearn的分类器接口是下面包装器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
keras.wrappers.scikit_learn.KerasClassifier(build_fn=None, **sk_params)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　实现了sklearn的回归器接口的是下面包装器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
keras.wrappers.scikit_learn.KerasRegressor(build_fn=None, **sk_params)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2，参数build_fn：可调用的函数或者类对象&lt;/h3&gt;
&lt;p&gt; 　　build_fn应构造，编译并返回一个Keras模型，该模型将稍后用于训练/测试，build_fn值可能为以下三种之一：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1，一个函数&lt;/li&gt;
&lt;li&gt;2，一个具有call方法的类对象&lt;/li&gt;
&lt;li&gt;3，None，代表你的类继承自KerasClassifier或者KerasRegressor，其call方法为其父类call方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3，参数sk_params：模型参数和训练参数&lt;/h3&gt;
&lt;p&gt;　　sk_params以模型参数和训练（超）参数作为参数，合法的模型参数为build_fn的参数，注意：‘build_fn’应提供其参数的默认值。所以我们不传递任何值给&lt;code&gt;sk_params&lt;/code&gt;也可以创建一个分类器/回归器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　sk_params&lt;/code&gt;还接受用于调用&lt;code&gt;fit&lt;/code&gt;，&lt;code&gt;predict&lt;/code&gt;，&lt;code&gt;predict_proba&lt;/code&gt;和&lt;code&gt;score&lt;/code&gt;方法的参数，如&lt;code&gt;nb_epoch&lt;/code&gt;，&lt;code&gt;batch_size&lt;/code&gt;等。这些用于训练或预测的参数按如下顺序选择：&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;传递给&lt;code&gt;fit&lt;/code&gt;，&lt;code&gt;predict&lt;/code&gt;，&lt;code&gt;predict_proba&lt;/code&gt;和&lt;code&gt;score&lt;/code&gt;的字典参数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;传递个&lt;code&gt;sk_params&lt;/code&gt;的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;keras.models.Sequential&lt;/code&gt;，&lt;code&gt;fit&lt;/code&gt;，&lt;code&gt;predict&lt;/code&gt;，&lt;code&gt;predict_proba&lt;/code&gt;和&lt;code&gt;score&lt;/code&gt;的默认值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　当使用scikit-learn的&lt;code&gt;grid_search&lt;/code&gt;接口时，合法的可转换参数是你可以传递给&lt;code&gt;sk_params&lt;/code&gt;的参数，包括训练参数。即，你可以使用&lt;code&gt;grid_search&lt;/code&gt;来搜索最佳的&lt;code&gt;batch_size&lt;/code&gt;或&lt;code&gt;nb_epoch&lt;/code&gt;以及其他模型参数。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一，问题描述&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　在本文学习中，我们将使用是&lt;/span&gt;&lt;a href=&quot;https://archive.ics.uci.edu/ml/datasets/Housing&quot;&gt;波士顿房价数据集&lt;/a&gt;&lt;span&gt;进行回归预测&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　您可以下载此数据集并将其直接保存到当前工作文件名&lt;/span&gt;&lt;em&gt;housing.csv&lt;/em&gt;&lt;span&gt;（更新：&lt;/span&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jbrownlee/Datasets/master/housing.data&quot;&gt;从此处下载数据&lt;/a&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　该数据集描述了波士顿郊区房屋的13个数字属性，并关注以数千美元(单位为k$)模拟这些郊区房屋的价格。目标值是一个位置的房屋的中值。&lt;/span&gt;&lt;span&gt;因此，这是回归预测建模问题。&lt;/span&gt;&lt;span&gt;输入属性包括犯罪率，非经营业务面积比例，化学品浓度等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　这是机器学习中经过深入研究的问题。&lt;/span&gt;&lt;span&gt;使用起来很方便，因为所有输入和输出属性都是数字的，并且有506个实例可供使用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　使用均方误差（MSE）评估的模型的合理性能约为20平方每十万美元（也就是每平方米4500美元）。这个数字对于我们的神经网络来说是一个很好的训练目标。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; housing.csv&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
 0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00
 0.02731   0.00   7.070  0  0.4690  6.4210  78.90  4.9671   2  242.0  17.80 396.90   9.14  21.60
 0.02729   0.00   7.070  0  0.4690  7.1850  61.10  4.9671   2  242.0  17.80 392.83   4.03  34.70
 0.03237   0.00   2.180  0  0.4580  6.9980  45.80  6.0622   3  222.0  18.70 394.63   2.94  33.40
 0.06905   0.00   2.180  0  0.4580  7.1470  54.20  6.0622   3  222.0  18.70 396.90   5.33  36.20
 0.02985   0.00   2.180  0  0.4580  6.4300  58.70  6.0622   3  222.0  18.70 394.12   5.21  28.70
 0.08829  12.50   7.870  0  0.5240  6.0120  66.60  5.5605   5  311.0  15.20 395.60  12.43  22.90
 0.14455  12.50   7.870  0  0.5240  6.1720  96.10  5.9505   5  311.0  15.20 396.90  19.15  27.10
 0.21124  12.50   7.870  0  0.5240  5.6310 100.00  6.0821   5  311.0  15.20 386.63  29.93  16.50
 0.17004  12.50   7.870  0  0.5240  6.0040  85.90  6.5921   5  311.0  15.20 386.71  17.10  18.90
 0.22489  12.50   7.870  0  0.5240  6.3770  94.30  6.3467   5  311.0  15.20 392.52  20.45  15.00
 0.11747  12.50   7.870  0  0.5240  6.0090  82.90  6.2267   5  311.0  15.20 396.90  13.27  18.90
 0.09378  12.50   7.870  0  0.5240  5.8890  39.00  5.4509   5  311.0  15.20 390.50  15.71  21.70
 0.62976   0.00   8.140  0  0.5380  5.9490  61.80  4.7075   4  307.0  21.00 396.90   8.26  20.40
 0.63796   0.00   8.140  0  0.5380  6.0960  84.50  4.4619   4  307.0  21.00 380.02  10.26  18.20
 0.62739   0.00   8.140  0  0.5380  5.8340  56.50  4.4986   4  307.0  21.00 395.62   8.47  19.90
 1.05393   0.00   8.140  0  0.5380  5.9350  29.30  4.4986   4  307.0  21.00 386.85   6.58  23.10
 0.78420   0.00   8.140  0  0.5380  5.9900  81.70  4.2579   4  307.0  21.00 386.75  14.67  17.50
 0.80271   0.00   8.140  0  0.5380  5.4560  36.60  3.7965   4  307.0  21.00 288.99  11.69  20.20
 0.72580   0.00   8.140  0  0.5380  5.7270  69.50  3.7965   4  307.0  21.00 390.95  11.28  18.20
 1.25179   0.00   8.140  0  0.5380  5.5700  98.10  3.7979   4  307.0  21.00 376.57  21.02  13.60
 0.85204   0.00   8.140  0  0.5380  5.9650  89.20  4.0123   4  307.0  21.00 392.53  13.83  19.60
 1.23247   0.00   8.140  0  0.5380  6.1420  91.70  3.9769   4  307.0  21.00 396.90  18.72  15.20
 0.98843   0.00   8.140  0  0.5380  5.8130 100.00  4.0952   4  307.0  21.00 394.54  19.88  14.50
 0.75026   0.00   8.140  0  0.5380  5.9240  94.10  4.3996   4  307.0  21.00 394.33  16.30  15.60
 0.84054   0.00   8.140  0  0.5380  5.5990  85.70  4.4546   4  307.0  21.00 303.42  16.51  13.90
 0.67191   0.00   8.140  0  0.5380  5.8130  90.30  4.6820   4  307.0  21.00 376.88  14.81  16.60
 0.95577   0.00   8.140  0  0.5380  6.0470  88.80  4.4534   4  307.0  21.00 306.38  17.28  14.80
 0.77299   0.00   8.140  0  0.5380  6.4950  94.40  4.4547   4  307.0  21.00 387.94  12.80  18.40
 1.00245   0.00   8.140  0  0.5380  6.6740  87.30  4.2390   4  307.0  21.00 380.23  11.98  21.00
 1.13081   0.00   8.140  0  0.5380  5.7130  94.10  4.2330   4  307.0  21.00 360.17  22.60  12.70
 1.35472   0.00   8.140  0  0.5380  6.0720 100.00  4.1750   4  307.0  21.00 376.73  13.04  14.50
 1.38799   0.00   8.140  0  0.5380  5.9500  82.00  3.9900   4  307.0  21.00 232.60  27.71  13.20
 1.15172   0.00   8.140  0  0.5380  5.7010  95.00  3.7872   4  307.0  21.00 358.77  18.35  13.10
 1.61282   0.00   8.140  0  0.5380  6.0960  96.90  3.7598   4  307.0  21.00 248.31  20.34  13.50
 0.06417   0.00   5.960  0  0.4990  5.9330  68.20  3.3603   5  279.0  19.20 396.90   9.68  18.90
 0.09744   0.00   5.960  0  0.4990  5.8410  61.40  3.3779   5  279.0  19.20 377.56  11.41  20.00
 0.08014   0.00   5.960  0  0.4990  5.8500  41.50  3.9342   5  279.0  19.20 396.90   8.77  21.00
 0.17505   0.00   5.960  0  0.4990  5.9660  30.20  3.8473   5  279.0  19.20 393.43  10.13  24.70
 0.02763  75.00   2.950  0  0.4280  6.5950  21.80  5.4011   3  252.0  18.30 395.63   4.32  30.80
 0.03359  75.00   2.950  0  0.4280  7.0240  15.80  5.4011   3  252.0  18.30 395.62   1.98  34.90
 0.12744   0.00   6.910  0  0.4480  6.7700   2.90  5.7209   3  233.0  17.90 385.41   4.84  26.60
 0.14150   0.00   6.910  0  0.4480  6.1690   6.60  5.7209   3  233.0  17.90 383.37   5.81  25.30
 0.15936   0.00   6.910  0  0.4480  6.2110   6.50  5.7209   3  233.0  17.90 394.46   7.44  24.70
 0.12269   0.00   6.910  0  0.4480  6.0690  40.00  5.7209   3  233.0  17.90 389.39   9.55  21.20
 0.17142   0.00   6.910  0  0.4480  5.6820  33.80  5.1004   3  233.0  17.90 396.90  10.21  19.30
 0.18836   0.00   6.910  0  0.4480  5.7860  33.30  5.1004   3  233.0  17.90 396.90  14.15  20.00
 0.22927   0.00   6.910  0  0.4480  6.0300  85.50  5.6894   3  233.0  17.90 392.74  18.80  16.60
 0.25387   0.00   6.910  0  0.4480  5.3990  95.30  5.8700   3  233.0  17.90 396.90  30.81  14.40
 0.21977   0.00   6.910  0  0.4480  5.6020  62.00  6.0877   3  233.0  17.90 396.90  16.20  19.40
 0.08873  21.00   5.640  0  0.4390  5.9630  45.70  6.8147   4  243.0  16.80 395.56  13.45  19.70
 0.04337  21.00   5.640  0  0.4390  6.1150  63.00  6.8147   4  243.0  16.80 393.97   9.43  20.50
 0.05360  21.00   5.640  0  0.4390  6.5110  21.10  6.8147   4  243.0  16.80 396.90   5.28  25.00
 0.04981  21.00   5.640  0  0.4390  5.9980  21.40  6.8147   4  243.0  16.80 396.90   8.43  23.40
 0.01360  75.00   4.000  0  0.4100  5.8880  47.60  7.3197   3  469.0  21.10 396.90  14.80  18.90
 0.01311  90.00   1.220  0  0.4030  7.2490  21.90  8.6966   5  226.0  17.90 395.93   4.81  35.40
 0.02055  85.00   0.740  0  0.4100  6.3830  35.70  9.1876   2  313.0  17.30 396.90   5.77  24.70
 0.01432 100.00   1.320  0  0.4110  6.8160  40.50  8.3248   5  256.0  15.10 392.90   3.95  31.60
 0.15445  25.00   5.130  0  0.4530  6.1450  29.20  7.8148   8  284.0  19.70 390.68   6.86  23.30
 0.10328  25.00   5.130  0  0.4530  5.9270  47.20  6.9320   8  284.0  19.70 396.90   9.22  19.60
 0.14932  25.00   5.130  0  0.4530  5.7410  66.20  7.2254   8  284.0  19.70 395.11  13.15  18.70
 0.17171  25.00   5.130  0  0.4530  5.9660  93.40  6.8185   8  284.0  19.70 378.08  14.44  16.00
 0.11027  25.00   5.130  0  0.4530  6.4560  67.80  7.2255   8  284.0  19.70 396.90   6.73  22.20
 0.12650  25.00   5.130  0  0.4530  6.7620  43.40  7.9809   8  284.0  19.70 395.58   9.50  25.00
 0.01951  17.50   1.380  0  0.4161  7.1040  59.50  9.2229   3  216.0  18.60 393.24   8.05  33.00
 0.03584  80.00   3.370  0  0.3980  6.2900  17.80  6.6115   4  337.0  16.10 396.90   4.67  23.50
 0.04379  80.00   3.370  0  0.3980  5.7870  31.10  6.6115   4  337.0  16.10 396.90  10.24  19.40
 0.05789  12.50   6.070  0  0.4090  5.8780  21.40  6.4980   4  345.0  18.90 396.21   8.10  22.00
 0.13554  12.50   6.070  0  0.4090  5.5940  36.80  6.4980   4  345.0  18.90 396.90  13.09  17.40
 0.12816  12.50   6.070  0  0.4090  5.8850  33.00  6.4980   4  345.0  18.90 396.90   8.79  20.90
 0.08826   0.00  10.810  0  0.4130  6.4170   6.60  5.2873   4  305.0  19.20 383.73   6.72  24.20
 0.15876   0.00  10.810  0  0.4130  5.9610  17.50  5.2873   4  305.0  19.20 376.94   9.88  21.70
 0.09164   0.00  10.810  0  0.4130  6.0650   7.80  5.2873   4  305.0  19.20 390.91   5.52  22.80
 0.19539   0.00  10.810  0  0.4130  6.2450   6.20  5.2873   4  305.0  19.20 377.17   7.54  23.40
 0.07896   0.00  12.830  0  0.4370  6.2730   6.00  4.2515   5  398.0  18.70 394.92   6.78  24.10
 0.09512   0.00  12.830  0  0.4370  6.2860  45.00  4.5026   5  398.0  18.70 383.23   8.94  21.40
 0.10153   0.00  12.830  0  0.4370  6.2790  74.50  4.0522   5  398.0  18.70 373.66  11.97  20.00
 0.08707   0.00  12.830  0  0.4370  6.1400  45.80  4.0905   5  398.0  18.70 386.96  10.27  20.80
 0.05646   0.00  12.830  0  0.4370  6.2320  53.70  5.0141   5  398.0  18.70 386.40  12.34  21.20
 0.08387   0.00  12.830  0  0.4370  5.8740  36.60  4.5026   5  398.0  18.70 396.06   9.10  20.30
 0.04113  25.00   4.860  0  0.4260  6.7270  33.50  5.4007   4  281.0  19.00 396.90   5.29  28.00
 0.04462  25.00   4.860  0  0.4260  6.6190  70.40  5.4007   4  281.0  19.00 395.63   7.22  23.90
 0.03659  25.00   4.860  0  0.4260  6.3020  32.20  5.4007   4  281.0  19.00 396.90   6.72  24.80
 0.03551  25.00   4.860  0  0.4260  6.1670  46.70  5.4007   4  281.0  19.00 390.64   7.51  22.90
 0.05059   0.00   4.490  0  0.4490  6.3890  48.00  4.7794   3  247.0  18.50 396.90   9.62  23.90
 0.05735   0.00   4.490  0  0.4490  6.6300  56.10  4.4377   3  247.0  18.50 392.30   6.53  26.60
 0.05188   0.00   4.490  0  0.4490  6.0150  45.10  4.4272   3  247.0  18.50 395.99  12.86  22.50
 0.07151   0.00   4.490  0  0.4490  6.1210  56.80  3.7476   3  247.0  18.50 395.15   8.44  22.20
 0.05660   0.00   3.410  0  0.4890  7.0070  86.30  3.4217   2  270.0  17.80 396.90   5.50  23.60
 0.05302   0.00   3.410  0  0.4890  7.0790  63.10  3.4145   2  270.0  17.80 396.06   5.70  28.70
 0.04684   0.00   3.410  0  0.4890  6.4170  66.10  3.0923   2  270.0  17.80 392.18   8.81  22.60
 0.03932   0.00   3.410  0  0.4890  6.4050  73.90  3.0921   2  270.0  17.80 393.55   8.20  22.00
 0.04203  28.00  15.040  0  0.4640  6.4420  53.60  3.6659   4  270.0  18.20 395.01   8.16  22.90
 0.02875  28.00  15.040  0  0.4640  6.2110  28.90  3.6659   4  270.0  18.20 396.33   6.21  25.00
 0.04294  28.00  15.040  0  0.4640  6.2490  77.30  3.6150   4  270.0  18.20 396.90  10.59  20.60
 0.12204   0.00   2.890  0  0.4450  6.6250  57.80  3.4952   2  276.0  18.00 357.98   6.65  28.40
 0.11504   0.00   2.890  0  0.4450  6.1630  69.60  3.4952   2  276.0  18.00 391.83  11.34  21.40
 0.12083   0.00   2.890  0  0.4450  8.0690  76.00  3.4952   2  276.0  18.00 396.90   4.21  38.70
 0.08187   0.00   2.890  0  0.4450  7.8200  36.90  3.4952   2  276.0  18.00 393.53   3.57  43.80
 0.06860   0.00   2.890  0  0.4450  7.4160  62.50  3.4952   2  276.0  18.00 396.90   6.19  33.20
 0.14866   0.00   8.560  0  0.5200  6.7270  79.90  2.7778   5  384.0  20.90 394.76   9.42  27.50
 0.11432   0.00   8.560  0  0.5200  6.7810  71.30  2.8561   5  384.0  20.90 395.58   7.67  26.50
 0.22876   0.00   8.560  0  0.5200  6.4050  85.40  2.7147   5  384.0  20.90  70.80  10.63  18.60
 0.21161   0.00   8.560  0  0.5200  6.1370  87.40  2.7147   5  384.0  20.90 394.47  13.44  19.30
 0.13960   0.00   8.560  0  0.5200  6.1670  90.00  2.4210   5  384.0  20.90 392.69  12.33  20.10
 0.13262   0.00   8.560  0  0.5200  5.8510  96.70  2.1069   5  384.0  20.90 394.05  16.47  19.50
 0.17120   0.00   8.560  0  0.5200  5.8360  91.90  2.2110   5  384.0  20.90 395.67  18.66  19.50
 0.13117   0.00   8.560  0  0.5200  6.1270  85.20  2.1224   5  384.0  20.90 387.69  14.09  20.40
 0.12802   0.00   8.560  0  0.5200  6.4740  97.10  2.4329   5  384.0  20.90 395.24  12.27  19.80
 0.26363   0.00   8.560  0  0.5200  6.2290  91.20  2.5451   5  384.0  20.90 391.23  15.55  19.40
 0.10793   0.00   8.560  0  0.5200  6.1950  54.40  2.7778   5  384.0  20.90 393.49  13.00  21.70
 0.10084   0.00  10.010  0  0.5470  6.7150  81.60  2.6775   6  432.0  17.80 395.59  10.16  22.80
 0.12329   0.00  10.010  0  0.5470  5.9130  92.90  2.3534   6  432.0  17.80 394.95  16.21  18.80
 0.22212   0.00  10.010  0  0.5470  6.0920  95.40  2.5480   6  432.0  17.80 396.90  17.09  18.70
 0.14231   0.00  10.010  0  0.5470  6.2540  84.20  2.2565   6  432.0  17.80 388.74  10.45  18.50
 0.17134   0.00  10.010  0  0.5470  5.9280  88.20  2.4631   6  432.0  17.80 344.91  15.76  18.30
 0.13158   0.00  10.010  0  0.5470  6.1760  72.50  2.7301   6  432.0  17.80 393.30  12.04  21.20
 0.15098   0.00  10.010  0  0.5470  6.0210  82.60  2.7474   6  432.0  17.80 394.51  10.30  19.20
 0.13058   0.00  10.010  0  0.5470  5.8720  73.10  2.4775   6  432.0  17.80 338.63  15.37  20.40
 0.14476   0.00  10.010  0  0.5470  5.7310  65.20  2.7592   6  432.0  17.80 391.50  13.61  19.30
 0.06899   0.00  25.650  0  0.5810  5.8700  69.70  2.2577   2  188.0  19.10 389.15  14.37  22.00
 0.07165   0.00  25.650  0  0.5810  6.0040  84.10  2.1974   2  188.0  19.10 377.67  14.27  20.30
 0.09299   0.00  25.650  0  0.5810  5.9610  92.90  2.0869   2  188.0  19.10 378.09  17.93  20.50
 0.15038   0.00  25.650  0  0.5810  5.8560  97.00  1.9444   2  188.0  19.10 370.31  25.41  17.30
 0.09849   0.00  25.650  0  0.5810  5.8790  95.80  2.0063   2  188.0  19.10 379.38  17.58  18.80
 0.16902   0.00  25.650  0  0.5810  5.9860  88.40  1.9929   2  188.0  19.10 385.02  14.81  21.40
 0.38735   0.00  25.650  0  0.5810  5.6130  95.60  1.7572   2  188.0  19.10 359.29  27.26  15.70
 0.25915   0.00  21.890  0  0.6240  5.6930  96.00  1.7883   4  437.0  21.20 392.11  17.19  16.20
 0.32543   0.00  21.890  0  0.6240  6.4310  98.80  1.8125   4  437.0  21.20 396.90  15.39  18.00
 0.88125   0.00  21.890  0  0.6240  5.6370  94.70  1.9799   4  437.0  21.20 396.90  18.34  14.30
 0.34006   0.00  21.890  0  0.6240  6.4580  98.90  2.1185   4  437.0  21.20 395.04  12.60  19.20
 1.19294   0.00  21.890  0  0.6240  6.3260  97.70  2.2710   4  437.0  21.20 396.90  12.26  19.60
 0.59005   0.00  21.890  0  0.6240  6.3720  97.90  2.3274   4  437.0  21.20 385.76  11.12  23.00
 0.32982   0.00  21.890  0  0.6240  5.8220  95.40  2.4699   4  437.0  21.20 388.69  15.03  18.40
 0.97617   0.00  21.890  0  0.6240  5.7570  98.40  2.3460   4  437.0  21.20 262.76  17.31  15.60
 0.55778   0.00  21.890  0  0.6240  6.3350  98.20  2.1107   4  437.0  21.20 394.67  16.96  18.10
 0.32264   0.00  21.890  0  0.6240  5.9420  93.50  1.9669   4  437.0  21.20 378.25  16.90  17.40
 0.35233   0.00  21.890  0  0.6240  6.4540  98.40  1.8498   4  437.0  21.20 394.08  14.59  17.10
 0.24980   0.00  21.890  0  0.6240  5.8570  98.20  1.6686   4  437.0  21.20 392.04  21.32  13.30
 0.54452   0.00  21.890  0  0.6240  6.1510  97.90  1.6687   4  437.0  21.20 396.90  18.46  17.80
 0.29090   0.00  21.890  0  0.6240  6.1740  93.60  1.6119   4  437.0  21.20 388.08  24.16  14.00
 1.62864   0.00  21.890  0  0.6240  5.0190 100.00  1.4394   4  437.0  21.20 396.90  34.41  14.40
 3.32105   0.00  19.580  1  0.8710  5.4030 100.00  1.3216   5  403.0  14.70 396.90  26.82  13.40
 4.09740   0.00  19.580  0  0.8710  5.4680 100.00  1.4118   5  403.0  14.70 396.90  26.42  15.60
 2.77974   0.00  19.580  0  0.8710  4.9030  97.80  1.3459   5  403.0  14.70 396.90  29.29  11.80
 2.37934   0.00  19.580  0  0.8710  6.1300 100.00  1.4191   5  403.0  14.70 172.91  27.80  13.80
 2.15505   0.00  19.580  0  0.8710  5.6280 100.00  1.5166   5  403.0  14.70 169.27  16.65  15.60
 2.36862   0.00  19.580  0  0.8710  4.9260  95.70  1.4608   5  403.0  14.70 391.71  29.53  14.60
 2.33099   0.00  19.580  0  0.8710  5.1860  93.80  1.5296   5  403.0  14.70 356.99  28.32  17.80
 2.73397   0.00  19.580  0  0.8710  5.5970  94.90  1.5257   5  403.0  14.70 351.85  21.45  15.40
 1.65660   0.00  19.580  0  0.8710  6.1220  97.30  1.6180   5  403.0  14.70 372.80  14.10  21.50
 1.49632   0.00  19.580  0  0.8710  5.4040 100.00  1.5916   5  403.0  14.70 341.60  13.28  19.60
 1.12658   0.00  19.580  1  0.8710  5.0120  88.00  1.6102   5  403.0  14.70 343.28  12.12  15.30
 2.14918   0.00  19.580  0  0.8710  5.7090  98.50  1.6232   5  403.0  14.70 261.95  15.79  19.40
 1.41385   0.00  19.580  1  0.8710  6.1290  96.00  1.7494   5  403.0  14.70 321.02  15.12  17.00
 3.53501   0.00  19.580  1  0.8710  6.1520  82.60  1.7455   5  403.0  14.70  88.01  15.02  15.60
 2.44668   0.00  19.580  0  0.8710  5.2720  94.00  1.7364   5  403.0  14.70  88.63  16.14  13.10
 1.22358   0.00  19.580  0  0.6050  6.9430  97.40  1.8773   5  403.0  14.70 363.43   4.59  41.30
 1.34284   0.00  19.580  0  0.6050  6.0660 100.00  1.7573   5  403.0  14.70 353.89   6.43  24.30
 1.42502   0.00  19.580  0  0.8710  6.5100 100.00  1.7659   5  403.0  14.70 364.31   7.39  23.30
 1.27346   0.00  19.580  1  0.6050  6.2500  92.60  1.7984   5  403.0  14.70 338.92   5.50  27.00
 1.46336   0.00  19.580  0  0.6050  7.4890  90.80  1.9709   5  403.0  14.70 374.43   1.73  50.00
 1.83377   0.00  19.580  1  0.6050  7.8020  98.20  2.0407   5  403.0  14.70 389.61   1.92  50.00
 1.51902   0.00  19.580  1  0.6050  8.3750  93.90  2.1620   5  403.0  14.70 388.45   3.32  50.00
 2.24236   0.00  19.580  0  0.6050  5.8540  91.80  2.4220   5  403.0  14.70 395.11  11.64  22.70
 2.92400   0.00  19.580  0  0.6050  6.1010  93.00  2.2834   5  403.0  14.70 240.16   9.81  25.00
 2.01019   0.00  19.580  0  0.6050  7.9290  96.20  2.0459   5  403.0  14.70 369.30   3.70  50.00
 1.80028   0.00  19.580  0  0.6050  5.8770  79.20  2.4259   5  403.0  14.70 227.61  12.14  23.80
 2.30040   0.00  19.580  0  0.6050  6.3190  96.10  2.1000   5  403.0  14.70 297.09  11.10  23.80
 2.44953   0.00  19.580  0  0.6050  6.4020  95.20  2.2625   5  403.0  14.70 330.04  11.32  22.30
 1.20742   0.00  19.580  0  0.6050  5.8750  94.60  2.4259   5  403.0  14.70 292.29  14.43  17.40
 2.31390   0.00  19.580  0  0.6050  5.8800  97.30  2.3887   5  403.0  14.70 348.13  12.03  19.10
 0.13914   0.00   4.050  0  0.5100  5.5720  88.50  2.5961   5  296.0  16.60 396.90  14.69  23.10
 0.09178   0.00   4.050  0  0.5100  6.4160  84.10  2.6463   5  296.0  16.60 395.50   9.04  23.60
 0.08447   0.00   4.050  0  0.5100  5.8590  68.70  2.7019   5  296.0  16.60 393.23   9.64  22.60
 0.06664   0.00   4.050  0  0.5100  6.5460  33.10  3.1323   5  296.0  16.60 390.96   5.33  29.40
 0.07022   0.00   4.050  0  0.5100  6.0200  47.20  3.5549   5  296.0  16.60 393.23  10.11  23.20
 0.05425   0.00   4.050  0  0.5100  6.3150  73.40  3.3175   5  296.0  16.60 395.60   6.29  24.60
 0.06642   0.00   4.050  0  0.5100  6.8600  74.40  2.9153   5  296.0  16.60 391.27   6.92  29.90
 0.05780   0.00   2.460  0  0.4880  6.9800  58.40  2.8290   3  193.0  17.80 396.90   5.04  37.20
 0.06588   0.00   2.460  0  0.4880  7.7650  83.30  2.7410   3  193.0  17.80 395.56   7.56  39.80
 0.06888   0.00   2.460  0  0.4880  6.1440  62.20  2.5979   3  193.0  17.80 396.90   9.45  36.20
 0.09103   0.00   2.460  0  0.4880  7.1550  92.20  2.7006   3  193.0  17.80 394.12   4.82  37.90
 0.10008   0.00   2.460  0  0.4880  6.5630  95.60  2.8470   3  193.0  17.80 396.90   5.68  32.50
 0.08308   0.00   2.460  0  0.4880  5.6040  89.80  2.9879   3  193.0  17.80 391.00  13.98  26.40
 0.06047   0.00   2.460  0  0.4880  6.1530  68.80  3.2797   3  193.0  17.80 387.11  13.15  29.60
 0.05602   0.00   2.460  0  0.4880  7.8310  53.60  3.1992   3  193.0  17.80 392.63   4.45  50.00
 0.07875  45.00   3.440  0  0.4370  6.7820  41.10  3.7886   5  398.0  15.20 393.87   6.68  32.00
 0.12579  45.00   3.440  0  0.4370  6.5560  29.10  4.5667   5  398.0  15.20 382.84   4.56  29.80
 0.08370  45.00   3.440  0  0.4370  7.1850  38.90  4.5667   5  398.0  15.20 396.90   5.39  34.90
 0.09068  45.00   3.440  0  0.4370  6.9510  21.50  6.4798   5  398.0  15.20 377.68   5.10  37.00
 0.06911  45.00   3.440  0  0.4370  6.7390  30.80  6.4798   5  398.0  15.20 389.71   4.69  30.50
 0.08664  45.00   3.440  0  0.4370  7.1780  26.30  6.4798   5  398.0  15.20 390.49   2.87  36.40
 0.02187  60.00   2.930  0  0.4010  6.8000   9.90  6.2196   1  265.0  15.60 393.37   5.03  31.10
 0.01439  60.00   2.930  0  0.4010  6.6040  18.80  6.2196   1  265.0  15.60 376.70   4.38  29.10
 0.01381  80.00   0.460  0  0.4220  7.8750  32.00  5.6484   4  255.0  14.40 394.23   2.97  50.00
 0.04011  80.00   1.520  0  0.4040  7.2870  34.10  7.3090   2  329.0  12.60 396.90   4.08  33.30
 0.04666  80.00   1.520  0  0.4040  7.1070  36.60  7.3090   2  329.0  12.60 354.31   8.61  30.30
 0.03768  80.00   1.520  0  0.4040  7.2740  38.30  7.3090   2  329.0  12.60 392.20   6.62  34.60
 0.03150  95.00   1.470  0  0.4030  6.9750  15.30  7.6534   3  402.0  17.00 396.90   4.56  34.90
 0.01778  95.00   1.470  0  0.4030  7.1350  13.90  7.6534   3  402.0  17.00 384.30   4.45  32.90
 0.03445  82.50   2.030  0  0.4150  6.1620  38.40  6.2700   2  348.0  14.70 393.77   7.43  24.10
 0.02177  82.50   2.030  0  0.4150  7.6100  15.70  6.2700   2  348.0  14.70 395.38   3.11  42.30
 0.03510  95.00   2.680  0  0.4161  7.8530  33.20  5.1180   4  224.0  14.70 392.78   3.81  48.50
 0.02009  95.00   2.680  0  0.4161  8.0340  31.90  5.1180   4  224.0  14.70 390.55   2.88  50.00
 0.13642   0.00  10.590  0  0.4890  5.8910  22.30  3.9454   4  277.0  18.60 396.90  10.87  22.60
 0.22969   0.00  10.590  0  0.4890  6.3260  52.50  4.3549   4  277.0  18.60 394.87  10.97  24.40
 0.25199   0.00  10.590  0  0.4890  5.7830  72.70  4.3549   4  277.0  18.60 389.43  18.06  22.50
 0.13587   0.00  10.590  1  0.4890  6.0640  59.10  4.2392   4  277.0  18.60 381.32  14.66  24.40
 0.43571   0.00  10.590  1  0.4890  5.3440 100.00  3.8750   4  277.0  18.60 396.90  23.09  20.00
 0.17446   0.00  10.590  1  0.4890  5.9600  92.10  3.8771   4  277.0  18.60 393.25  17.27  21.70
 0.37578   0.00  10.590  1  0.4890  5.4040  88.60  3.6650   4  277.0  18.60 395.24  23.98  19.30
 0.21719   0.00  10.590  1  0.4890  5.8070  53.80  3.6526   4  277.0  18.60 390.94  16.03  22.40
 0.14052   0.00  10.590  0  0.4890  6.3750  32.30  3.9454   4  277.0  18.60 385.81   9.38  28.10
 0.28955   0.00  10.590  0  0.4890  5.4120   9.80  3.5875   4  277.0  18.60 348.93  29.55  23.70
 0.19802   0.00  10.590  0  0.4890  6.1820  42.40  3.9454   4  277.0  18.60 393.63   9.47  25.00
 0.04560   0.00  13.890  1  0.5500  5.8880  56.00  3.1121   5  276.0  16.40 392.80  13.51  23.30
 0.07013   0.00  13.890  0  0.5500  6.6420  85.10  3.4211   5  276.0  16.40 392.78   9.69  28.70
 0.11069   0.00  13.890  1  0.5500  5.9510  93.80  2.8893   5  276.0  16.40 396.90  17.92  21.50
 0.11425   0.00  13.890  1  0.5500  6.3730  92.40  3.3633   5  276.0  16.40 393.74  10.50  23.00
 0.35809   0.00   6.200  1  0.5070  6.9510  88.50  2.8617   8  307.0  17.40 391.70   9.71  26.70
 0.40771   0.00   6.200  1  0.5070  6.1640  91.30  3.0480   8  307.0  17.40 395.24  21.46  21.70
 0.62356   0.00   6.200  1  0.5070  6.8790  77.70  3.2721   8  307.0  17.40 390.39   9.93  27.50
 0.61470   0.00   6.200  0  0.5070  6.6180  80.80  3.2721   8  307.0  17.40 396.90   7.60  30.10
 0.31533   0.00   6.200  0  0.5040  8.2660  78.30  2.8944   8  307.0  17.40 385.05   4.14  44.80
 0.52693   0.00   6.200  0  0.5040  8.7250  83.00  2.8944   8  307.0  17.40 382.00   4.63  50.00
 0.38214   0.00   6.200  0  0.5040  8.0400  86.50  3.2157   8  307.0  17.40 387.38   3.13  37.60
 0.41238   0.00   6.200  0  0.5040  7.1630  79.90  3.2157   8  307.0  17.40 372.08   6.36  31.60
 0.29819   0.00   6.200  0  0.5040  7.6860  17.00  3.3751   8  307.0  17.40 377.51   3.92  46.70
 0.44178   0.00   6.200  0  0.5040  6.5520  21.40  3.3751   8  307.0  17.40 380.34   3.76  31.50
 0.53700   0.00   6.200  0  0.5040  5.9810  68.10  3.6715   8  307.0  17.40 378.35  11.65  24.30
 0.46296   0.00   6.200  0  0.5040  7.4120  76.90  3.6715   8  307.0  17.40 376.14   5.25  31.70
 0.57529   0.00   6.200  0  0.5070  8.3370  73.30  3.8384   8  307.0  17.40 385.91   2.47  41.70
 0.33147   0.00   6.200  0  0.5070  8.2470  70.40  3.6519   8  307.0  17.40 378.95   3.95  48.30
 0.44791   0.00   6.200  1  0.5070  6.7260  66.50  3.6519   8  307.0  17.40 360.20   8.05  29.00
 0.33045   0.00   6.200  0  0.5070  6.0860  61.50  3.6519   8  307.0  17.40 376.75  10.88  24.00
 0.52058   0.00   6.200  1  0.5070  6.6310  76.50  4.1480   8  307.0  17.40 388.45   9.54  25.10
 0.51183   0.00   6.200  0  0.5070  7.3580  71.60  4.1480   8  307.0  17.40 390.07   4.73  31.50
 0.08244  30.00   4.930  0  0.4280  6.4810  18.50  6.1899   6  300.0  16.60 379.41   6.36  23.70
 0.09252  30.00   4.930  0  0.4280  6.6060  42.20  6.1899   6  300.0  16.60 383.78   7.37  23.30
 0.11329  30.00   4.930  0  0.4280  6.8970  54.30  6.3361   6  300.0  16.60 391.25  11.38  22.00
 0.10612  30.00   4.930  0  0.4280  6.0950  65.10  6.3361   6  300.0  16.60 394.62  12.40  20.10
 0.10290  30.00   4.930  0  0.4280  6.3580  52.90  7.0355   6  300.0  16.60 372.75  11.22  22.20
 0.12757  30.00   4.930  0  0.4280  6.3930   7.80  7.0355   6  300.0  16.60 374.71   5.19  23.70
 0.20608  22.00   5.860  0  0.4310  5.5930  76.50  7.9549   7  330.0  19.10 372.49  12.50  17.60
 0.19133  22.00   5.860  0  0.4310  5.6050  70.20  7.9549   7  330.0  19.10 389.13  18.46  18.50
 0.33983  22.00   5.860  0  0.4310  6.1080  34.90  8.0555   7  330.0  19.10 390.18   9.16  24.30
 0.19657  22.00   5.860  0  0.4310  6.2260  79.20  8.0555   7  330.0  19.10 376.14  10.15  20.50
 0.16439  22.00   5.860  0  0.4310  6.4330  49.10  7.8265   7  330.0  19.10 374.71   9.52  24.50
 0.19073  22.00   5.860  0  0.4310  6.7180  17.50  7.8265   7  330.0  19.10 393.74   6.56  26.20
 0.14030  22.00   5.860  0  0.4310  6.4870  13.00  7.3967   7  330.0  19.10 396.28   5.90  24.40
 0.21409  22.00   5.860  0  0.4310  6.4380   8.90  7.3967   7  330.0  19.10 377.07   3.59  24.80
 0.08221  22.00   5.860  0  0.4310  6.9570   6.80  8.9067   7  330.0  19.10 386.09   3.53  29.60
 0.36894  22.00   5.860  0  0.4310  8.2590   8.40  8.9067   7  330.0  19.10 396.90   3.54  42.80
 0.04819  80.00   3.640  0  0.3920  6.1080  32.00  9.2203   1  315.0  16.40 392.89   6.57  21.90
 0.03548  80.00   3.640  0  0.3920  5.8760  19.10  9.2203   1  315.0  16.40 395.18   9.25  20.90
 0.01538  90.00   3.750  0  0.3940  7.4540  34.20  6.3361   3  244.0  15.90 386.34   3.11  44.00
 0.61154  20.00   3.970  0  0.6470  8.7040  86.90  1.8010   5  264.0  13.00 389.70   5.12  50.00
 0.66351  20.00   3.970  0  0.6470  7.3330 100.00  1.8946   5  264.0  13.00 383.29   7.79  36.00
 0.65665  20.00   3.970  0  0.6470  6.8420 100.00  2.0107   5  264.0  13.00 391.93   6.90  30.10
 0.54011  20.00   3.970  0  0.6470  7.2030  81.80  2.1121   5  264.0  13.00 392.80   9.59  33.80
 0.53412  20.00   3.970  0  0.6470  7.5200  89.40  2.1398   5  264.0  13.00 388.37   7.26  43.10
 0.52014  20.00   3.970  0  0.6470  8.3980  91.50  2.2885   5  264.0  13.00 386.86   5.91  48.80
 0.82526  20.00   3.970  0  0.6470  7.3270  94.50  2.0788   5  264.0  13.00 393.42  11.25  31.00
 0.55007  20.00   3.970  0  0.6470  7.2060  91.60  1.9301   5  264.0  13.00 387.89   8.10  36.50
 0.76162  20.00   3.970  0  0.6470  5.5600  62.80  1.9865   5  264.0  13.00 392.40  10.45  22.80
 0.78570  20.00   3.970  0  0.6470  7.0140  84.60  2.1329   5  264.0  13.00 384.07  14.79  30.70
 0.57834  20.00   3.970  0  0.5750  8.2970  67.00  2.4216   5  264.0  13.00 384.54   7.44  50.00
 0.54050  20.00   3.970  0  0.5750  7.4700  52.60  2.8720   5  264.0  13.00 390.30   3.16  43.50
 0.09065  20.00   6.960  1  0.4640  5.9200  61.50  3.9175   3  223.0  18.60 391.34  13.65  20.70
 0.29916  20.00   6.960  0  0.4640  5.8560  42.10  4.4290   3  223.0  18.60 388.65  13.00  21.10
 0.16211  20.00   6.960  0  0.4640  6.2400  16.30  4.4290   3  223.0  18.60 396.90   6.59  25.20
 0.11460  20.00   6.960  0  0.4640  6.5380  58.70  3.9175   3  223.0  18.60 394.96   7.73  24.40
 0.22188  20.00   6.960  1  0.4640  7.6910  51.80  4.3665   3  223.0  18.60 390.77   6.58  35.20
 0.05644  40.00   6.410  1  0.4470  6.7580  32.90  4.0776   4  254.0  17.60 396.90   3.53  32.40
 0.09604  40.00   6.410  0  0.4470  6.8540  42.80  4.2673   4  254.0  17.60 396.90   2.98  32.00
 0.10469  40.00   6.410  1  0.4470  7.2670  49.00  4.7872   4  254.0  17.60 389.25   6.05  33.20
 0.06127  40.00   6.410  1  0.4470  6.8260  27.60  4.8628   4  254.0  17.60 393.45   4.16  33.10
 0.07978  40.00   6.410  0  0.4470  6.4820  32.10  4.1403   4  254.0  17.60 396.90   7.19  29.10
 0.21038  20.00   3.330  0  0.4429  6.8120  32.20  4.1007   5  216.0  14.90 396.90   4.85  35.10
 0.03578  20.00   3.330  0  0.4429  7.8200  64.50  4.6947   5  216.0  14.90 387.31   3.76  45.40
 0.03705  20.00   3.330  0  0.4429  6.9680  37.20  5.2447   5  216.0  14.90 392.23   4.59  35.40
 0.06129  20.00   3.330  1  0.4429  7.6450  49.70  5.2119   5  216.0  14.90 377.07   3.01  46.00
 0.01501  90.00   1.210  1  0.4010  7.9230  24.80  5.8850   1  198.0  13.60 395.52   3.16  50.00
 0.00906  90.00   2.970  0  0.4000  7.0880  20.80  7.3073   1  285.0  15.30 394.72   7.85  32.20
 0.01096  55.00   2.250  0  0.3890  6.4530  31.90  7.3073   1  300.0  15.30 394.72   8.23  22.00
 0.01965  80.00   1.760  0  0.3850  6.2300  31.50  9.0892   1  241.0  18.20 341.60  12.93  20.10
 0.03871  52.50   5.320  0  0.4050  6.2090  31.30  7.3172   6  293.0  16.60 396.90   7.14  23.20
 0.04590  52.50   5.320  0  0.4050  6.3150  45.60  7.3172   6  293.0  16.60 396.90   7.60  22.30
 0.04297  52.50   5.320  0  0.4050  6.5650  22.90  7.3172   6  293.0  16.60 371.72   9.51  24.80
 0.03502  80.00   4.950  0  0.4110  6.8610  27.90  5.1167   4  245.0  19.20 396.90   3.33  28.50
 0.07886  80.00   4.950  0  0.4110  7.1480  27.70  5.1167   4  245.0  19.20 396.90   3.56  37.30
 0.03615  80.00   4.950  0  0.4110  6.6300  23.40  5.1167   4  245.0  19.20 396.90   4.70  27.90
 0.08265   0.00  13.920  0  0.4370  6.1270  18.40  5.5027   4  289.0  16.00 396.90   8.58  23.90
 0.08199   0.00  13.920  0  0.4370  6.0090  42.30  5.5027   4  289.0  16.00 396.90  10.40  21.70
 0.12932   0.00  13.920  0  0.4370  6.6780  31.10  5.9604   4  289.0  16.00 396.90   6.27  28.60
 0.05372   0.00  13.920  0  0.4370  6.5490  51.00  5.9604   4  289.0  16.00 392.85   7.39  27.10
 0.14103   0.00  13.920  0  0.4370  5.7900  58.00  6.3200   4  289.0  16.00 396.90  15.84  20.30
 0.06466  70.00   2.240  0  0.4000  6.3450  20.10  7.8278   5  358.0  14.80 368.24   4.97  22.50
 0.05561  70.00   2.240  0  0.4000  7.0410  10.00  7.8278   5  358.0  14.80 371.58   4.74  29.00
 0.04417  70.00   2.240  0  0.4000  6.8710  47.40  7.8278   5  358.0  14.80 390.86   6.07  24.80
 0.03537  34.00   6.090  0  0.4330  6.5900  40.40  5.4917   7  329.0  16.10 395.75   9.50  22.00
 0.09266  34.00   6.090  0  0.4330  6.4950  18.40  5.4917   7  329.0  16.10 383.61   8.67  26.40
 0.10000  34.00   6.090  0  0.4330  6.9820  17.70  5.4917   7  329.0  16.10 390.43   4.86  33.10
 0.05515  33.00   2.180  0  0.4720  7.2360  41.10  4.0220   7  222.0  18.40 393.68   6.93  36.10
 0.05479  33.00   2.180  0  0.4720  6.6160  58.10  3.3700   7  222.0  18.40 393.36   8.93  28.40
 0.07503  33.00   2.180  0  0.4720  7.4200  71.90  3.0992   7  222.0  18.40 396.90   6.47  33.40
 0.04932  33.00   2.180  0  0.4720  6.8490  70.30  3.1827   7  222.0  18.40 396.90   7.53  28.20
 0.49298   0.00   9.900  0  0.5440  6.6350  82.50  3.3175   4  304.0  18.40 396.90   4.54  22.80
 0.34940   0.00   9.900  0  0.5440  5.9720  76.70  3.1025   4  304.0  18.40 396.24   9.97  20.30
 2.63548   0.00   9.900  0  0.5440  4.9730  37.80  2.5194   4  304.0  18.40 350.45  12.64  16.10
 0.79041   0.00   9.900  0  0.5440  6.1220  52.80  2.6403   4  304.0  18.40 396.90   5.98  22.10
 0.26169   0.00   9.900  0  0.5440  6.0230  90.40  2.8340   4  304.0  18.40 396.30  11.72  19.40
 0.26938   0.00   9.900  0  0.5440  6.2660  82.80  3.2628   4  304.0  18.40 393.39   7.90  21.60
 0.36920   0.00   9.900  0  0.5440  6.5670  87.30  3.6023   4  304.0  18.40 395.69   9.28  23.80
 0.25356   0.00   9.900  0  0.5440  5.7050  77.70  3.9450   4  304.0  18.40 396.42  11.50  16.20
 0.31827   0.00   9.900  0  0.5440  5.9140  83.20  3.9986   4  304.0  18.40 390.70  18.33  17.80
 0.24522   0.00   9.900  0  0.5440  5.7820  71.70  4.0317   4  304.0  18.40 396.90  15.94  19.80
 0.40202   0.00   9.900  0  0.5440  6.3820  67.20  3.5325   4  304.0  18.40 395.21  10.36  23.10
 0.47547   0.00   9.900  0  0.5440  6.1130  58.80  4.0019   4  304.0  18.40 396.23  12.73  21.00
 0.16760   0.00   7.380  0  0.4930  6.4260  52.30  4.5404   5  287.0  19.60 396.90   7.20  23.80
 0.18159   0.00   7.380  0  0.4930  6.3760  54.30  4.5404   5  287.0  19.60 396.90   6.87  23.10
 0.35114   0.00   7.380  0  0.4930  6.0410  49.90  4.7211   5  287.0  19.60 396.90   7.70  20.40
 0.28392   0.00   7.380  0  0.4930  5.7080  74.30  4.7211   5  287.0  19.60 391.13  11.74  18.50
 0.34109   0.00   7.380  0  0.4930  6.4150  40.10  4.7211   5  287.0  19.60 396.90   6.12  25.00
 0.19186   0.00   7.380  0  0.4930  6.4310  14.70  5.4159   5  287.0  19.60 393.68   5.08  24.60
 0.30347   0.00   7.380  0  0.4930  6.3120  28.90  5.4159   5  287.0  19.60 396.90   6.15  23.00
 0.24103   0.00   7.380  0  0.4930  6.0830  43.70  5.4159   5  287.0  19.60 396.90  12.79  22.20
 0.06617   0.00   3.240  0  0.4600  5.8680  25.80  5.2146   4  430.0  16.90 382.44   9.97  19.30
 0.06724   0.00   3.240  0  0.4600  6.3330  17.20  5.2146   4  430.0  16.90 375.21   7.34  22.60
 0.04544   0.00   3.240  0  0.4600  6.1440  32.20  5.8736   4  430.0  16.90 368.57   9.09  19.80
 0.05023  35.00   6.060  0  0.4379  5.7060  28.40  6.6407   1  304.0  16.90 394.02  12.43  17.10
 0.03466  35.00   6.060  0  0.4379  6.0310  23.30  6.6407   1  304.0  16.90 362.25   7.83  19.40
 0.05083   0.00   5.190  0  0.5150  6.3160  38.10  6.4584   5  224.0  20.20 389.71   5.68  22.20
 0.03738   0.00   5.190  0  0.5150  6.3100  38.50  6.4584   5  224.0  20.20 389.40   6.75  20.70
 0.03961   0.00   5.190  0  0.5150  6.0370  34.50  5.9853   5  224.0  20.20 396.90   8.01  21.10
 0.03427   0.00   5.190  0  0.5150  5.8690  46.30  5.2311   5  224.0  20.20 396.90   9.80  19.50
 0.03041   0.00   5.190  0  0.5150  5.8950  59.60  5.6150   5  224.0  20.20 394.81  10.56  18.50
 0.03306   0.00   5.190  0  0.5150  6.0590  37.30  4.8122   5  224.0  20.20 396.14   8.51  20.60
 0.05497   0.00   5.190  0  0.5150  5.9850  45.40  4.8122   5  224.0  20.20 396.90   9.74  19.00
 0.06151   0.00   5.190  0  0.5150  5.9680  58.50  4.8122   5  224.0  20.20 396.90   9.29  18.70
 0.01301  35.00   1.520  0  0.4420  7.2410  49.30  7.0379   1  284.0  15.50 394.74   5.49  32.70
 0.02498   0.00   1.890  0  0.5180  6.5400  59.70  6.2669   1  422.0  15.90 389.96   8.65  16.50
 0.02543  55.00   3.780  0  0.4840  6.6960  56.40  5.7321   5  370.0  17.60 396.90   7.18  23.90
 0.03049  55.00   3.780  0  0.4840  6.8740  28.10  6.4654   5  370.0  17.60 387.97   4.61  31.20
 0.03113   0.00   4.390  0  0.4420  6.0140  48.50  8.0136   3  352.0  18.80 385.64  10.53  17.50
 0.06162   0.00   4.390  0  0.4420  5.8980  52.30  8.0136   3  352.0  18.80 364.61  12.67  17.20
 0.01870  85.00   4.150  0  0.4290  6.5160  27.70  8.5353   4  351.0  17.90 392.43   6.36  23.10
 0.01501  80.00   2.010  0  0.4350  6.6350  29.70  8.3440   4  280.0  17.00 390.94   5.99  24.50
 0.02899  40.00   1.250  0  0.4290  6.9390  34.50  8.7921   1  335.0  19.70 389.85   5.89  26.60
 0.06211  40.00   1.250  0  0.4290  6.4900  44.40  8.7921   1  335.0  19.70 396.90   5.98  22.90
 0.07950  60.00   1.690  0  0.4110  6.5790  35.90 10.7103   4  411.0  18.30 370.78   5.49  24.10
 0.07244  60.00   1.690  0  0.4110  5.8840  18.50 10.7103   4  411.0  18.30 392.33   7.79  18.60
 0.01709  90.00   2.020  0  0.4100  6.7280  36.10 12.1265   5  187.0  17.00 384.46   4.50  30.10
 0.04301  80.00   1.910  0  0.4130  5.6630  21.90 10.5857   4  334.0  22.00 382.80   8.05  18.20
 0.10659  80.00   1.910  0  0.4130  5.9360  19.50 10.5857   4  334.0  22.00 376.04   5.57  20.60
 8.98296   0.00  18.100  1  0.7700  6.2120  97.40  2.1222  24  666.0  20.20 377.73  17.60  17.80
 3.84970   0.00  18.100  1  0.7700  6.3950  91.00  2.5052  24  666.0  20.20 391.34  13.27  21.70
 5.20177   0.00  18.100  1  0.7700  6.1270  83.40  2.7227  24  666.0  20.20 395.43  11.48  22.70
 4.26131   0.00  18.100  0  0.7700  6.1120  81.30  2.5091  24  666.0  20.20 390.74  12.67  22.60
 4.54192   0.00  18.100  0  0.7700  6.3980  88.00  2.5182  24  666.0  20.20 374.56   7.79  25.00
 3.83684   0.00  18.100  0  0.7700  6.2510  91.10  2.2955  24  666.0  20.20 350.65  14.19  19.90
 3.67822   0.00  18.100  0  0.7700  5.3620  96.20  2.1036  24  666.0  20.20 380.79  10.19  20.80
 4.22239   0.00  18.100  1  0.7700  5.8030  89.00  1.9047  24  666.0  20.20 353.04  14.64  16.80
 3.47428   0.00  18.100  1  0.7180  8.7800  82.90  1.9047  24  666.0  20.20 354.55   5.29  21.90
 4.55587   0.00  18.100  0  0.7180  3.5610  87.90  1.6132  24  666.0  20.20 354.70   7.12  27.50
 3.69695   0.00  18.100  0  0.7180  4.9630  91.40  1.7523  24  666.0  20.20 316.03  14.00  21.90
13.52220   0.00  18.100  0  0.6310  3.8630 100.00  1.5106  24  666.0  20.20 131.42  13.33  23.10
 4.89822   0.00  18.100  0  0.6310  4.9700 100.00  1.3325  24  666.0  20.20 375.52   3.26  50.00
 5.66998   0.00  18.100  1  0.6310  6.6830  96.80  1.3567  24  666.0  20.20 375.33   3.73  50.00
 6.53876   0.00  18.100  1  0.6310  7.0160  97.50  1.2024  24  666.0  20.20 392.05   2.96  50.00
 9.23230   0.00  18.100  0  0.6310  6.2160 100.00  1.1691  24  666.0  20.20 366.15   9.53  50.00
 8.26725   0.00  18.100  1  0.6680  5.8750  89.60  1.1296  24  666.0  20.20 347.88   8.88  50.00
11.10810   0.00  18.100  0  0.6680  4.9060 100.00  1.1742  24  666.0  20.20 396.90  34.77  13.80
18.49820   0.00  18.100  0  0.6680  4.1380 100.00  1.1370  24  666.0  20.20 396.90  37.97  13.80
19.60910   0.00  18.100  0  0.6710  7.3130  97.90  1.3163  24  666.0  20.20 396.90  13.44  15.00
15.28800   0.00  18.100  0  0.6710  6.6490  93.30  1.3449  24  666.0  20.20 363.02  23.24  13.90
 9.82349   0.00  18.100  0  0.6710  6.7940  98.80  1.3580  24  666.0  20.20 396.90  21.24  13.30
23.64820   0.00  18.100  0  0.6710  6.3800  96.20  1.3861  24  666.0  20.20 396.90  23.69  13.10
17.86670   0.00  18.100  0  0.6710  6.2230 100.00  1.3861  24  666.0  20.20 393.74  21.78  10.20
88.97620   0.00  18.100  0  0.6710  6.9680  91.90  1.4165  24  666.0  20.20 396.90  17.21  10.40
15.87440   0.00  18.100  0  0.6710  6.5450  99.10  1.5192  24  666.0  20.20 396.90  21.08  10.90
 9.18702   0.00  18.100  0  0.7000  5.5360 100.00  1.5804  24  666.0  20.20 396.90  23.60  11.30
 7.99248   0.00  18.100  0  0.7000  5.5200 100.00  1.5331  24  666.0  20.20 396.90  24.56  12.30
20.08490   0.00  18.100  0  0.7000  4.3680  91.20  1.4395  24  666.0  20.20 285.83  30.63   8.80
16.81180   0.00  18.100  0  0.7000  5.2770  98.10  1.4261  24  666.0  20.20 396.90  30.81   7.20
24.39380   0.00  18.100  0  0.7000  4.6520 100.00  1.4672  24  666.0  20.20 396.90  28.28  10.50
22.59710   0.00  18.100  0  0.7000  5.0000  89.50  1.5184  24  666.0  20.20 396.90  31.99   7.40
14.33370   0.00  18.100  0  0.7000  4.8800 100.00  1.5895  24  666.0  20.20 372.92  30.62  10.20
 8.15174   0.00  18.100  0  0.7000  5.3900  98.90  1.7281  24  666.0  20.20 396.90  20.85  11.50
 6.96215   0.00  18.100  0  0.7000  5.7130  97.00  1.9265  24  666.0  20.20 394.43  17.11  15.10
 5.29305   0.00  18.100  0  0.7000  6.0510  82.50  2.1678  24  666.0  20.20 378.38  18.76  23.20
11.57790   0.00  18.100  0  0.7000  5.0360  97.00  1.7700  24  666.0  20.20 396.90  25.68   9.70
 8.64476   0.00  18.100  0  0.6930  6.1930  92.60  1.7912  24  666.0  20.20 396.90  15.17  13.80
13.35980   0.00  18.100  0  0.6930  5.8870  94.70  1.7821  24  666.0  20.20 396.90  16.35  12.70
 8.71675   0.00  18.100  0  0.6930  6.4710  98.80  1.7257  24  666.0  20.20 391.98  17.12  13.10
 5.87205   0.00  18.100  0  0.6930  6.4050  96.00  1.6768  24  666.0  20.20 396.90  19.37  12.50
 7.67202   0.00  18.100  0  0.6930  5.7470  98.90  1.6334  24  666.0  20.20 393.10  19.92   8.50
38.35180   0.00  18.100  0  0.6930  5.4530 100.00  1.4896  24  666.0  20.20 396.90  30.59   5.00
 9.91655   0.00  18.100  0  0.6930  5.8520  77.80  1.5004  24  666.0  20.20 338.16  29.97   6.30
25.04610   0.00  18.100  0  0.6930  5.9870 100.00  1.5888  24  666.0  20.20 396.90  26.77   5.60
14.23620   0.00  18.100  0  0.6930  6.3430 100.00  1.5741  24  666.0  20.20 396.90  20.32   7.20
 9.59571   0.00  18.100  0  0.6930  6.4040 100.00  1.6390  24  666.0  20.20 376.11  20.31  12.10
24.80170   0.00  18.100  0  0.6930  5.3490  96.00  1.7028  24  666.0  20.20 396.90  19.77   8.30
41.52920   0.00  18.100  0  0.6930  5.5310  85.40  1.6074  24  666.0  20.20 329.46  27.38   8.50
67.92080   0.00  18.100  0  0.6930  5.6830 100.00  1.4254  24  666.0  20.20 384.97  22.98   5.00
20.71620   0.00  18.100  0  0.6590  4.1380 100.00  1.1781  24  666.0  20.20 370.22  23.34  11.90
11.95110   0.00  18.100  0  0.6590  5.6080 100.00  1.2852  24  666.0  20.20 332.09  12.13  27.90
 7.40389   0.00  18.100  0  0.5970  5.6170  97.90  1.4547  24  666.0  20.20 314.64  26.40  17.20
14.43830   0.00  18.100  0  0.5970  6.8520 100.00  1.4655  24  666.0  20.20 179.36  19.78  27.50
51.13580   0.00  18.100  0  0.5970  5.7570 100.00  1.4130  24  666.0  20.20   2.60  10.11  15.00
14.05070   0.00  18.100  0  0.5970  6.6570 100.00  1.5275  24  666.0  20.20  35.05  21.22  17.20
18.81100   0.00  18.100  0  0.5970  4.6280 100.00  1.5539  24  666.0  20.20  28.79  34.37  17.90
28.65580   0.00  18.100  0  0.5970  5.1550 100.00  1.5894  24  666.0  20.20 210.97  20.08  16.30
45.74610   0.00  18.100  0  0.6930  4.5190 100.00  1.6582  24  666.0  20.20  88.27  36.98   7.00
18.08460   0.00  18.100  0  0.6790  6.4340 100.00  1.8347  24  666.0  20.20  27.25  29.05   7.20
10.83420   0.00  18.100  0  0.6790  6.7820  90.80  1.8195  24  666.0  20.20  21.57  25.79   7.50
25.94060   0.00  18.100  0  0.6790  5.3040  89.10  1.6475  24  666.0  20.20 127.36  26.64  10.40
73.53410   0.00  18.100  0  0.6790  5.9570 100.00  1.8026  24  666.0  20.20  16.45  20.62   8.80
11.81230   0.00  18.100  0  0.7180  6.8240  76.50  1.7940  24  666.0  20.20  48.45  22.74   8.40
11.08740   0.00  18.100  0  0.7180  6.4110 100.00  1.8589  24  666.0  20.20 318.75  15.02  16.70
 7.02259   0.00  18.100  0  0.7180  6.0060  95.30  1.8746  24  666.0  20.20 319.98  15.70  14.20
12.04820   0.00  18.100  0  0.6140  5.6480  87.60  1.9512  24  666.0  20.20 291.55  14.10  20.80
 7.05042   0.00  18.100  0  0.6140  6.1030  85.10  2.0218  24  666.0  20.20   2.52  23.29  13.40
 8.79212   0.00  18.100  0  0.5840  5.5650  70.60  2.0635  24  666.0  20.20   3.65  17.16  11.70
15.86030   0.00  18.100  0  0.6790  5.8960  95.40  1.9096  24  666.0  20.20   7.68  24.39   8.30
12.24720   0.00  18.100  0  0.5840  5.8370  59.70  1.9976  24  666.0  20.20  24.65  15.69  10.20
37.66190   0.00  18.100  0  0.6790  6.2020  78.70  1.8629  24  666.0  20.20  18.82  14.52  10.90
 7.36711   0.00  18.100  0  0.6790  6.1930  78.10  1.9356  24  666.0  20.20  96.73  21.52  11.00
 9.33889   0.00  18.100  0  0.6790  6.3800  95.60  1.9682  24  666.0  20.20  60.72  24.08   9.50
 8.49213   0.00  18.100  0  0.5840  6.3480  86.10  2.0527  24  666.0  20.20  83.45  17.64  14.50
10.06230   0.00  18.100  0  0.5840  6.8330  94.30  2.0882  24  666.0  20.20  81.33  19.69  14.10
 6.44405   0.00  18.100  0  0.5840  6.4250  74.80  2.2004  24  666.0  20.20  97.95  12.03  16.10
 5.58107   0.00  18.100  0  0.7130  6.4360  87.90  2.3158  24  666.0  20.20 100.19  16.22  14.30
13.91340   0.00  18.100  0  0.7130  6.2080  95.00  2.2222  24  666.0  20.20 100.63  15.17  11.70
11.16040   0.00  18.100  0  0.7400  6.6290  94.60  2.1247  24  666.0  20.20 109.85  23.27  13.40
14.42080   0.00  18.100  0  0.7400  6.4610  93.30  2.0026  24  666.0  20.20  27.49  18.05   9.60
15.17720   0.00  18.100  0  0.7400  6.1520 100.00  1.9142  24  666.0  20.20   9.32  26.45   8.70
13.67810   0.00  18.100  0  0.7400  5.9350  87.90  1.8206  24  666.0  20.20  68.95  34.02   8.40
 9.39063   0.00  18.100  0  0.7400  5.6270  93.90  1.8172  24  666.0  20.20 396.90  22.88  12.80
22.05110   0.00  18.100  0  0.7400  5.8180  92.40  1.8662  24  666.0  20.20 391.45  22.11  10.50
 9.72418   0.00  18.100  0  0.7400  6.4060  97.20  2.0651  24  666.0  20.20 385.96  19.52  17.10
 5.66637   0.00  18.100  0  0.7400  6.2190 100.00  2.0048  24  666.0  20.20 395.69  16.59  18.40
 9.96654   0.00  18.100  0  0.7400  6.4850 100.00  1.9784  24  666.0  20.20 386.73  18.85  15.40
12.80230   0.00  18.100  0  0.7400  5.8540  96.60  1.8956  24  666.0  20.20 240.52  23.79  10.80
10.67180   0.00  18.100  0  0.7400  6.4590  94.80  1.9879  24  666.0  20.20  43.06  23.98  11.80
 6.28807   0.00  18.100  0  0.7400  6.3410  96.40  2.0720  24  666.0  20.20 318.01  17.79  14.90
 9.92485   0.00  18.100  0  0.7400  6.2510  96.60  2.1980  24  666.0  20.20 388.52  16.44  12.60
 9.32909   0.00  18.100  0  0.7130  6.1850  98.70  2.2616  24  666.0  20.20 396.90  18.13  14.10
 7.52601   0.00  18.100  0  0.7130  6.4170  98.30  2.1850  24  666.0  20.20 304.21  19.31  13.00
 6.71772   0.00  18.100  0  0.7130  6.7490  92.60  2.3236  24  666.0  20.20   0.32  17.44  13.40
 5.44114   0.00  18.100  0  0.7130  6.6550  98.20  2.3552  24  666.0  20.20 355.29  17.73  15.20
 5.09017   0.00  18.100  0  0.7130  6.2970  91.80  2.3682  24  666.0  20.20 385.09  17.27  16.10
 8.24809   0.00  18.100  0  0.7130  7.3930  99.30  2.4527  24  666.0  20.20 375.87  16.74  17.80
 9.51363   0.00  18.100  0  0.7130  6.7280  94.10  2.4961  24  666.0  20.20   6.68  18.71  14.90
 4.75237   0.00  18.100  0  0.7130  6.5250  86.50  2.4358  24  666.0  20.20  50.92  18.13  14.10
 4.66883   0.00  18.100  0  0.7130  5.9760  87.90  2.5806  24  666.0  20.20  10.48  19.01  12.70
 8.20058   0.00  18.100  0  0.7130  5.9360  80.30  2.7792  24  666.0  20.20   3.50  16.94  13.50
 7.75223   0.00  18.100  0  0.7130  6.3010  83.70  2.7831  24  666.0  20.20 272.21  16.23  14.90
 6.80117   0.00  18.100  0  0.7130  6.0810  84.40  2.7175  24  666.0  20.20 396.90  14.70  20.00
 4.81213   0.00  18.100  0  0.7130  6.7010  90.00  2.5975  24  666.0  20.20 255.23  16.42  16.40
 3.69311   0.00  18.100  0  0.7130  6.3760  88.40  2.5671  24  666.0  20.20 391.43  14.65  17.70
 6.65492   0.00  18.100  0  0.7130  6.3170  83.00  2.7344  24  666.0  20.20 396.90  13.99  19.50
 5.82115   0.00  18.100  0  0.7130  6.5130  89.90  2.8016  24  666.0  20.20 393.82  10.29  20.20
 7.83932   0.00  18.100  0  0.6550  6.2090  65.40  2.9634  24  666.0  20.20 396.90  13.22  21.40
 3.16360   0.00  18.100  0  0.6550  5.7590  48.20  3.0665  24  666.0  20.20 334.40  14.13  19.90
 3.77498   0.00  18.100  0  0.6550  5.9520  84.70  2.8715  24  666.0  20.20  22.01  17.15  19.00
 4.42228   0.00  18.100  0  0.5840  6.0030  94.50  2.5403  24  666.0  20.20 331.29  21.32  19.10
15.57570   0.00  18.100  0  0.5800  5.9260  71.00  2.9084  24  666.0  20.20 368.74  18.13  19.10
13.07510   0.00  18.100  0  0.5800  5.7130  56.70  2.8237  24  666.0  20.20 396.90  14.76  20.10
 4.34879   0.00  18.100  0  0.5800  6.1670  84.00  3.0334  24  666.0  20.20 396.90  16.29  19.90
 4.03841   0.00  18.100  0  0.5320  6.2290  90.70  3.0993  24  666.0  20.20 395.33  12.87  19.60
 3.56868   0.00  18.100  0  0.5800  6.4370  75.00  2.8965  24  666.0  20.20 393.37  14.36  23.20
 4.64689   0.00  18.100  0  0.6140  6.9800  67.60  2.5329  24  666.0  20.20 374.68  11.66  29.80
 8.05579   0.00  18.100  0  0.5840  5.4270  95.40  2.4298  24  666.0  20.20 352.58  18.14  13.80
 6.39312   0.00  18.100  0  0.5840  6.1620  97.40  2.2060  24  666.0  20.20 302.76  24.10  13.30
 4.87141   0.00  18.100  0  0.6140  6.4840  93.60  2.3053  24  666.0  20.20 396.21  18.68  16.70
15.02340   0.00  18.100  0  0.6140  5.3040  97.30  2.1007  24  666.0  20.20 349.48  24.91  12.00
10.23300   0.00  18.100  0  0.6140  6.1850  96.70  2.1705  24  666.0  20.20 379.70  18.03  14.60
14.33370   0.00  18.100  0  0.6140  6.2290  88.00  1.9512  24  666.0  20.20 383.32  13.11  21.40
 5.82401   0.00  18.100  0  0.5320  6.2420  64.70  3.4242  24  666.0  20.20 396.90  10.74  23.00
 5.70818   0.00  18.100  0  0.5320  6.7500  74.90  3.3317  24  666.0  20.20 393.07   7.74  23.70
 5.73116   0.00  18.100  0  0.5320  7.0610  77.00  3.4106  24  666.0  20.20 395.28   7.01  25.00
 2.81838   0.00  18.100  0  0.5320  5.7620  40.30  4.0983  24  666.0  20.20 392.92  10.42  21.80
 2.37857   0.00  18.100  0  0.5830  5.8710  41.90  3.7240  24  666.0  20.20 370.73  13.34  20.60
 3.67367   0.00  18.100  0  0.5830  6.3120  51.90  3.9917  24  666.0  20.20 388.62  10.58  21.20
 5.69175   0.00  18.100  0  0.5830  6.1140  79.80  3.5459  24  666.0  20.20 392.68  14.98  19.10
 4.83567   0.00  18.100  0  0.5830  5.9050  53.20  3.1523  24  666.0  20.20 388.22  11.45  20.60
 0.15086   0.00  27.740  0  0.6090  5.4540  92.70  1.8209   4  711.0  20.10 395.09  18.06  15.20
 0.18337   0.00  27.740  0  0.6090  5.4140  98.30  1.7554   4  711.0  20.10 344.05  23.97   7.00
 0.20746   0.00  27.740  0  0.6090  5.0930  98.00  1.8226   4  711.0  20.10 318.43  29.68   8.10
 0.10574   0.00  27.740  0  0.6090  5.9830  98.80  1.8681   4  711.0  20.10 390.11  18.07  13.60
 0.11132   0.00  27.740  0  0.6090  5.9830  83.50  2.1099   4  711.0  20.10 396.90  13.35  20.10
 0.17331   0.00   9.690  0  0.5850  5.7070  54.00  2.3817   6  391.0  19.20 396.90  12.01  21.80
 0.27957   0.00   9.690  0  0.5850  5.9260  42.60  2.3817   6  391.0  19.20 396.90  13.59  24.50
 0.17899   0.00   9.690  0  0.5850  5.6700  28.80  2.7986   6  391.0  19.20 393.29  17.60  23.10
 0.28960   0.00   9.690  0  0.5850  5.3900  72.90  2.7986   6  391.0  19.20 396.90  21.14  19.70
 0.26838   0.00   9.690  0  0.5850  5.7940  70.60  2.8927   6  391.0  19.20 396.90  14.10  18.30
 0.23912   0.00   9.690  0  0.5850  6.0190  65.30  2.4091   6  391.0  19.20 396.90  12.92  21.20
 0.17783   0.00   9.690  0  0.5850  5.5690  73.50  2.3999   6  391.0  19.20 395.77  15.10  17.50
 0.22438   0.00   9.690  0  0.5850  6.0270  79.70  2.4982   6  391.0  19.20 396.90  14.33  16.80
 0.06263   0.00  11.930  0  0.5730  6.5930  69.10  2.4786   1  273.0  21.00 391.99   9.67  22.40
 0.04527   0.00  11.930  0  0.5730  6.1200  76.70  2.2875   1  273.0  21.00 396.90   9.08  20.60
 0.06076   0.00  11.930  0  0.5730  6.9760  91.00  2.1675   1  273.0  21.00 396.90   5.64  23.90
 0.10959   0.00  11.930  0  0.5730  6.7940  89.30  2.3889   1  273.0  21.00 393.45   6.48  22.00
 0.04741   0.00  11.930  0  0.5730  6.0300  80.80  2.5050   1  273.0  21.00 396.90   7.88  11.90
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;二，开发基线神经网络模型&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　在本节中，我们将为回归问题创建基线神经网络模型。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1，导入所需的库&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　让我们从包含本文所需的所有函数和对象开始。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
import numpy
import pandas
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2，加载数据集&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　我们现在可以从本地目录中的文件加载数据集。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　事实上，数据集在UCI机器学习库中不是CSV格式，而是用空格分隔属性。&lt;/span&gt;&lt;span&gt;我们可以使用pandas库轻松加载它。&lt;/span&gt;&lt;span&gt;然后我们可以分割输入（X）和输出（Y）属性，以便使用Keras和scikit-learn更容易建模。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# load dataset
dataframe = pandas.read_csv(&quot;housing.csv&quot;, delim_whitespace=True, header=None)
dataset = dataframe.values
# split into input (X) and output (Y) variables
X = dataset[:,0:13]
Y = dataset[:,13]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　当然了，我们可以直接导入sklearn中的Boston数据集&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
boston = datasets.load_Boston() # 导入数据集
X = boston.data # 获得其特征向量
y = boston.target # 获得样本label
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3，创建评估的神经网络模型　&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　我们可以使用Keras库提供的方便的包装器对象创建Keras模型并使用scikit-learn来评估它们。&lt;/span&gt;&lt;span&gt;这是可取的，因为scikit-learn在评估模型方面表现出色，并且允许我们使用强大的数据准备和模型评估方案，只需很少的代码。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　Keras包装器需要一个函数作为参数。&lt;/span&gt;&lt;span&gt;我们必须定义的这个函数负责创建要评估的神经网络模型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　下面我们定义用于创建要评估的基线模型的函数。&lt;/span&gt;&lt;span&gt;这是一个简单的模型，它有一个完全连接的隐藏层，与输入属性具有相同数量的神经元（13）。&lt;/span&gt;&lt;span&gt;网络使用诸如隐藏层的整流器激活功能之类的良好实践。&lt;/span&gt;&lt;span&gt;没有激活函数用于输出层，因为它是一个回归问题，我们有兴趣直接预测数值而不进行转换。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　使用有效的ADAM优化算法并且优化均方误差损失函数。&lt;/span&gt;&lt;span&gt;这将与我们用于评估模型性能的指标相同。&lt;/span&gt;&lt;span&gt;这是一个理想的指标，因为通过取平方根给出了我们可以在问题的上下文中直接理解的错误值（数千美元）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# define base model
def baseline_model():
        # create model
        model = Sequential()
        model.add(Dense(13, input_dim=13, kernel_initializer='normal', activation='relu'))
        model.add(Dense(1, kernel_initializer='normal'))
        # Compile model
        model.compile(loss='mean_squared_error', optimizer='adam')
        return model
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在 scikit-learn 库中用作回归计算估计器的 Keras 封装对象名为 KerasRegressor。我们创建一个 KerasRegressor对象实例，并将创建神经网络模型的函数名称，以及一些稍后传递给模型 fit( ) 函数的参数，比如最大训练次数，每批数据的大小等。两者都被设置为合理的默认值。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于sklearn不了解的可以参考小编的博客：&lt;a href=&quot;https://www.cnblogs.com/wj-1314/p/10179741.html&quot; target=&quot;_blank&quot;&gt;Python机器学习笔记：sklearn库的学习&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　我们还使用常量随机种子初始化随机数生成器，我们将为本教程中评估的每个模型重复该过程（相同的随机数）。&lt;/span&gt;&lt;span&gt;这是为了确保我们始终如一的比较模型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)
# evaluate model with standardized dataset
estimator = KerasRegressor(build_fn=baseline_model, epochs=100, batch_size=5, verbose=0)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;最后一步是评估此基线模型。&lt;/span&gt;&lt;span&gt;我们将使用10倍交叉验证来评估模型。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;4，评估所创建的神经网络模型&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
kfold = KFold(n_splits=10, random_state=seed)
results = cross_val_score(estimator, X, Y, cv=kfold)
print(&quot;Results: %.2f (%.2f) MSE&quot; % (results.mean(), results.std()))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行此代码可以估算出模型在看不见的数据问题上的表现。结果报告均方误差，包括交叉验证评估的所有10倍的平均值和标准偏差（平均方差）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Baseline: 31.64 (26.82) MSE
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;5（补充）：交叉验证的学习&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;　　1，导入k折交叉验证模块&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
from sklearn.cross_validation import cross_val_score
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　2，交叉验证的思想&lt;/h4&gt;
&lt;p&gt;　　把某种意义下将原始数据（dataset）进行分组，一部分作为训练集（train set），另一部分作为验证集（validation set or test set），首先用训练集对分类器进行训练，再利用验证集来测试训练得到的模型（model），以此来作为评价分类器的性能指标。&lt;/p&gt;
&lt;h4&gt;　　3，为什么使用交叉验证法&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;交叉验证用于评估模型的预测性能，尤其是训练好的模型在新数据上的表现，可以在一定程序熵减少过拟合。&lt;/li&gt;
&lt;li&gt;交叉验证还可以从有限的数据中获取尽可能多的有效信息&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;　　4，主要有哪些方法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1，留出法（holdout cross validation）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在机器学习任务中，拿到数据后，我们首先会将原始数据集分为三部分：训练集，验证集和测试集。&lt;/p&gt;
&lt;p&gt;　　训练集用于训练模型，验证集用于模型的参数选择配置，测试集对于模型来说是未知数据，用于评估模型的泛化能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201812/1226410-20181228152012837-14189740.png&quot; alt=&quot;&quot; width=&quot;586&quot; height=&quot;373&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个方法操作简单，只需要随机将原始数据分为三组即可。&lt;/p&gt;
&lt;p&gt;　　不过如果只做一次分割，它对训练集，验证集和测试机的样本比例，还有分割后数据的分布是否和原始数据集的分布相同等因素比较敏感，不同的划分会得到不同的最优模型，，而且分成三个集合后，用于训练的数据更少了。于是又了2.k折交叉验证（k-fold cross validation）.&lt;/p&gt;
&lt;p&gt;　　下面例子，一共有150条数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; from sklearn.model_selection import train_test_split
&amp;gt;&amp;gt;&amp;gt; from sklearn import datasets
&amp;gt;&amp;gt;&amp;gt; from sklearn import svm

&amp;gt;&amp;gt;&amp;gt; iris = datasets.load_iris()
&amp;gt;&amp;gt;&amp;gt; iris.data.shape, iris.target.shape
((150, 4), (150,))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　用train_test_split来随机划分数据集，其中40%用于测试集，有60条数据，60%为训练集，有90条数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; X_train, X_test, y_train, y_test = train_test_split(
...     iris.data, iris.target, test_size=0.4, random_state=0)

&amp;gt;&amp;gt;&amp;gt; X_train.shape, y_train.shape
((90, 4), (90,))
&amp;gt;&amp;gt;&amp;gt; X_test.shape, y_test.shape
((60, 4), (60,))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　用train来训练，用test来评价模型的分数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)
&amp;gt;&amp;gt;&amp;gt; clf.score(X_test, y_test)                           
0.96...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2，2. k 折交叉验证（k-fold cross validation）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201812/1226410-20181228150306228-2016486943.png&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;297&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　K折交叉验证通过对k个不同分组训练的结果进行平均来减少方差，因此模型的性能对数据的划分就不那么敏感。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一步，不重复抽样将原始数据随机分为 k 份。&lt;/li&gt;
&lt;li&gt;第二步，每一次挑选其中 1 份作为测试集，剩余 k-1 份作为训练集用于模型训练。&lt;/li&gt;
&lt;li&gt;第三步，重复第二步 k 次，这样每个子集都有一次机会作为测试集，其余机会作为训练集。&lt;/li&gt;
&lt;li&gt;在每个训练集上训练后得到一个模型，&lt;/li&gt;
&lt;li&gt;用这个模型在相应的测试集上测试，计算并保存模型的评估指标，&lt;/li&gt;
&lt;li&gt;第四步，计算 k 组测试结果的平均值作为模型精度的估计，并作为当前 k 折交叉验证下模型的性能指标。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;K一般取10，数据量小的是，k可以设大一点，这样训练集占整体比例就比较大，不过同时训练的模型个数也增多。数据量大的时候，k可以设置小一点。当k=m的时候，即样本总数，出现了留一法。&lt;/p&gt;
&lt;p&gt;　　举例，这里直接调用了cross_val_score，这里用了5折交叉验证&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; from sklearn.model_selection import cross_val_score
&amp;gt;&amp;gt;&amp;gt; clf = svm.SVC(kernel='linear', C=1)
&amp;gt;&amp;gt;&amp;gt; scores = cross_val_score(clf, iris.data, iris.target, cv=5)
&amp;gt;&amp;gt;&amp;gt; scores                                              
array([ 0.96...,  1.  ...,  0.96...,  0.96...,  1.        ])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　得到最后平均分数为0.98，以及它的95%置信区间：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; print(&quot;Accuracy: %0.2f (+/- %0.2f)&quot; % (scores.mean(), scores.std() * 2))
Accuracy: 0.98 (+/- 0.03)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以直接看一下K-Fold是怎么样划分数据的：X有四个数据，把它分成2折，结构中最后一个集合是测试集，前面的是训练集，每一行为1折：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; from sklearn.model_selection import KFold

&amp;gt;&amp;gt;&amp;gt; X = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]
&amp;gt;&amp;gt;&amp;gt; kf = KFold(n_splits=2)
&amp;gt;&amp;gt;&amp;gt; for train, test in kf.split(X):
...     print(&quot;%s %s&quot; % (train, test))
[2 3] [0 1]
[0 1] [2 3]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　同样的数据X，我们来看LeaveOneOut后是什么样子，那就是把它分成4折，结果中最后一个集合是测试集，只有一个元素，前面的是训练集，每一行为1折：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; from sklearn.model_selection import LeaveOneOut

&amp;gt;&amp;gt;&amp;gt; X = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; loo = LeaveOneOut()
&amp;gt;&amp;gt;&amp;gt; for train, test in loo.split(X):
...     print(&quot;%s %s&quot; % (train, test))
[1 2 3] [0]
[0 2 3] [1]
[0 1 3] [2]
[0 1 2] [3]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3，留一法（Leave one out cross validation）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;/strong&gt;　每次的测试集都只有一个样本，要进行m次训练和预测，这个方法用于训练的数据只比整体数据集少一个样本，因此最接近原始样本的分布。但是训练复杂度增加了，因为模型的数量与原始数据样本数量相同。一般在数据缺少时使用。&lt;/p&gt;
&lt;p&gt;此外：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;多次 k 折交叉验证再求均值，例如：10 次 10 折交叉验证，以求更精确一点。&lt;/li&gt;
&lt;li&gt;划分时有多种方法，例如对非平衡数据可以用分层采样，就是在每一份子集中都保持和原始数据集相同的类别比例。&lt;/li&gt;
&lt;li&gt;模型训练过程的所有步骤，包括模型选择，特征选择等都是在单个折叠 fold 中独立执行的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;4，Bootstrapping&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　通过自助采样法，即在含有 m 个样本的数据集中，每次随机挑选一个样本，再放回到数据集中，再随机挑选一个样本，这样有放回地进行抽样 m 次，组成了新的数据集作为训练集。&lt;/p&gt;
&lt;p&gt;　　这里会有重复多次的样本，也会有一次都没有出现的样本，原数据集中大概有 36.8% 的样本不会出现在新组数据集中。&lt;/p&gt;
&lt;p&gt;　　优点是训练集的样本总数和原数据集一样都是 m，并且仍有约 1/3 的数据不被训练而可以作为测试集。&lt;br/&gt;　　缺点是这样产生的训练集的数据分布和原数据集的不一样了，会引入估计偏差。&lt;br/&gt;　　（此种方法不是很常用，除非数据量真的很少）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;三，建模标准化数据集&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　波士顿房价数据集的一个重要问题是输入的特征对于房价的影响各不相同。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在使用神经网络模型对数据进行建模之前，准备好所要使用数据总是一种好的做法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　继续上述基线模型，我们可以使用输入数据集的标准化版本重新评估相同的模型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们可以使用scikit-learn的&lt;/span&gt;&lt;a href=&quot;http://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html&quot;&gt;Pipeline&lt;/a&gt;&lt;span&gt;&lt;span&gt;框架在模型评估过程中，在交叉验证的每个折叠内执行标准化。&lt;/span&gt;&lt;span&gt;这确保了每个测试集交叉验证折叠中没有数据泄漏到训练数据中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下面的代码创建了一个scikit-learn Pipeline，它首先标准化数据集，然后创建和评估基线神经网络模型。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# evaluate model with standardized dataset
numpy.random.seed(seed)
estimators = []
estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasRegressor(build_fn=baseline_model, epochs=50, batch_size=5, verbose=0)))
pipeline = Pipeline(estimators)
kfold = KFold(n_splits=10, random_state=seed)
results = cross_val_score(pipeline, X, Y, cv=kfold)
print(&quot;Standardized: %.2f (%.2f) MSE&quot; % (results.mean(), results.std()))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行该示例提供了比没有标准化数据的基线模型更好的性能，从而减少了错误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Standardized: 29.54 (27.87) MSE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此部分的进一步扩展将类似地对输出变量应用重新缩放，例如将其归一化到0-1的范围，并在输出层上使用Sigmoid或类似的激活函数，以将输出预测缩小到相同的范围。&lt;/p&gt;
&lt;h2&gt;四，调整神经网络拓扑&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　对于神经网络模型而言，可以优化的方面有很多。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　也许效果最明显的优化之处是网络本身的结构，包括层数和每层神经元的数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　在本节中，我们将评估另外两种网络拓扑，以进一步提高模型的性能。这两个结构分别是层数更深和层度&lt;/span&gt;&lt;span&gt;更宽的网络拓扑结构。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;4.1 评估层数更深的网络拓扑&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　提高神经网络性能的一种方法是添加更多层。&lt;/span&gt;&lt;span&gt;这可能允许模型提取并重新组合数据中嵌入的高阶特征。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　在本节中，我们将评估向模型添加一个隐藏层的效果。&lt;/span&gt;&lt;span&gt;这就像定义一个新函数一样简单，这个函数将创建从上面的基线模型复制的更深层次的模型。&lt;/span&gt;&lt;span&gt;然后我们可以在第一个隐藏层之后插入一个新行。&lt;/span&gt;&lt;span&gt;在这种情况下，神经元的数量约为一半（6个）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# define the model
def larger_model():
        # create model
        model = Sequential()
        model.add(Dense(13, input_dim=13, kernel_initializer='normal', activation='relu'))
        model.add(Dense(6, kernel_initializer='normal', activation='relu'))
        model.add(Dense(1, kernel_initializer='normal'))
        # Compile model
        model.compile(loss='mean_squared_error', optimizer='adam')
        return model
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们的网络拓扑现在看起来像：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
13 inputs -&amp;gt; [13 -&amp;gt; 6] -&amp;gt; 1 output
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以采用与上述相同的方式评估此网络拓扑，同时还使用上面显示的数据集的标准化来提高性能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
numpy.random.seed(seed)
estimators = []
estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasRegressor(build_fn=larger_model, epochs=50, batch_size=5, verbose=0)))
pipeline = Pipeline(estimators)
kfold = KFold(n_splits=10, random_state=seed)
results = cross_val_score(pipeline, X, Y, cv=kfold)
print(&quot;Larger: %.2f (%.2f) MSE&quot; % (results.mean(), results.std()))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行此模型确定表明性能从28降到24,000平方美元的进一步改善。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Larger: 22.83 (25.33) MSE
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4.2 评估层宽更宽的网络拓扑&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　增加模型的表示能力的另一种方法是创建更广泛的网络。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在本节中，我们将评估保持浅层网络架构的效果，并使一个隐藏层中的神经元数量几乎翻倍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　同样，我们需要做的就是定义一个创建神经网络模型的新函数。&lt;/span&gt;&lt;span&gt;在这里，与13到20的基线模型相比，我们增加了隐藏层中神经元的数量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# define wider model
def wider_model():
        # create model
        model = Sequential()
        model.add(Dense(20, input_dim=13, kernel_initializer='normal', activation='relu'))
        model.add(Dense(1, kernel_initializer='normal'))
        # Compile model
        model.compile(loss='mean_squared_error', optimizer='adam')
        return model
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以使用与上面相同的方案评估更广泛的网络拓扑：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
numpy.random.seed(seed)
estimators = []
estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasRegressor(build_fn=wider_model, epochs=100, batch_size=5, verbose=0)))
pipeline = Pipeline(estimators)
kfold = KFold(n_splits=10, random_state=seed)
results = cross_val_score(pipeline, X, Y, cv=kfold)
print(&quot;Wider: %.2f (%.2f) MSE&quot; % (results.mean(), results.std()))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　建立模型的确看到误差进一步下降到大约2.1万平方美元，对于这个问题，这个不是一个糟糕的结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Wider: 21.64 (23.75) MSE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;很难想象更广泛的网络在这个问题上会胜过更深层次的网络。&lt;/span&gt;&lt;span&gt;结果证明了在开发神经网络模型时经验测试的重要性。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;五，完整代码的总结&lt;/h2&gt;
&lt;h3&gt;1，代码&lt;/h3&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;98&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
import numpy
import pandas
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

# 导入数据
filename = 'housing.csv'
dataframe = pandas.read_csv(filename,delim_whitespace=True,header=None)
dataset = dataframe.values
# print(dataset)

# 把数据分为输入和输出两个变量
X = dataset[:,0:13]
Y = dataset[:,13]
# print(len(Y))

# 定义个基类模型
def baseline_model():
    # 创建模型,与输入属性具有相同的神经元13
    model = Sequential()
    model.add(Dense(13,input_dim=13,kernel_initializer='normal',activation='relu'))
    model.add(Dense(1,kernel_initializer='normal'))
    # Compile model
    model.compile(loss='mean_squared_error',optimizer='adam')
    return model

# 固定随机种子的重现性
seed = 7
numpy.random.seed(seed)
# 使用标准化数据集评估模型
estimator = KerasRegressor(build_fn=baseline_model,epochs=100,batch_size=5,verbose=0)
# 评估此基类模型，我们使用10倍交叉验证来评估模型
kfold = KFold(n_splits=10,random_state=seed)
results = cross_val_score(estimator,X,Y,cv=kfold)
print(&quot;Results:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))

# 使用scikit-learn Pipeline 首先标准化数据集，然后创建和评估基线神经网络模型
numpy.random.seed(seed)
estimators = []
estimators.append(('standaedize',StandardScaler()))
estimators.append(('mlp',KerasRegressor(build_fn=baseline_model,epochs=50,batch_size=5,verbose=0)))
pipeline = Pipeline(estimators)
# 评估所创建的神经网络模型
kfold = KFold(n_splits=10,random_state=seed)
results = cross_val_score(pipeline,X,Y,cv=kfold)
print(&quot;Standardized:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))


# 针对神经网络模型进行优化
# 提高神经网络性能的一种方法是添加更多层，这可能允许模型提取并重新组合数据中嵌入的高阶特征
def larger_model():
    # 创建模型
    model = Sequential()
    model.add(Dense(13,input_dim=13,kernel_initializer='normal',activation='relu'))
    model.add(Dense(6,kernel_initializer='normal',activation='relu'))
    model.add(Dense(1,kernel_initializer='normal'))
    # 编译模型
    model.compile(loss='mean_squared_error',optimizer='adam')
    return model

# 使用scikit-learn Pipeline 首先标准化数据集，然后创建和评估基线神经网络模型
numpy.random.seed(seed)
estimators = []
estimators.append(('standaedize',StandardScaler()))
estimators.append(('mlp',KerasRegressor(build_fn=larger_model,epochs=50,batch_size=5,verbose=0)))
pipeline = Pipeline(estimators)
# 评估所创建的神经网络模型
kfold = KFold(n_splits=10,random_state=seed)
results = cross_val_score(pipeline,X,Y,cv=kfold)
print(&quot;Larger:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))


# 针对神经网络模型进行优化，评估更广泛的模型
# 提高神经网络性能的一种方法是使其更广泛，这可能允许模型提取并重新组合数据中嵌入的高阶特征

def wider_model():
    # 创建模型
    model = Sequential()
    model.add(Dense(20, input_dim=13, kernel_initializer='normal', activation='relu'))
    model.add(Dense(1, kernel_initializer='normal'))
    # 编译模型
    model.compile(loss='mean_squared_error', optimizer='adam')
    # predict model
    model.fit(X,Y,epochs=50,batch_size=5)
    predict = model.predict(X)
    # print(predict)
    return model

# 使用scikit-learn Pipeline 首先标准化数据集，然后创建和评估基线神经网络模型
numpy.random.seed(seed)
estimators = []
estimators.append(('standaedize',StandardScaler()))
estimators.append(('mlp',KerasRegressor(build_fn=wider_model,epochs=100,batch_size=5,verbose=0)))
pipeline = Pipeline(estimators)
kfold = KFold(n_splits=10,random_state=seed)
results = cross_val_score(pipeline,X,Y,cv=kfold)
print(&quot;Wider:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;代码2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;102&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
import numpy
import pandas
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
import pandas as pd

# 导入数据
filename = 'housing.csv'
dataframe = pandas.read_csv(filename,delim_whitespace=True,header=None)
dataset = dataframe.values
# print(dataset)

# 把数据分为输入和输出两个变量
X = dataset[:,0:13]
Y = dataset[:,13]
# print(len(Y))
seed = 7
# # 定义基类模型
# def baseline_model():
#     # 创建模型,与输入属性具有相同的神经元13
#     model = Sequential()
#     model.add(Dense(13,input_dim=13,kernel_initializer='normal',activation='relu'))
#     model.add(Dense(1,kernel_initializer='normal'))
#     # Compile model，使用高效的ADAM优化算法以及优化的最小均方误差损失函数
#     model.compile(loss='mean_squared_error',optimizer='adam')
#     return model
#
# # 固定随机种子的重现性
# seed = 7
# numpy.random.seed(seed)
# # 使用标准化数据集评估模型
# estimator = KerasRegressor(build_fn=baseline_model,epochs=100,batch_size=5,verbose=0)
# # 评估此基类模型，我们使用10倍交叉验证来评估模型
# kfold = KFold(n_splits=10,random_state=seed)
# results = cross_val_score(estimator,X,Y,cv=kfold)
# print(&quot;Results:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))
#
# # 使用scikit-learn Pipeline 首先标准化数据集，然后创建和评估基线神经网络模型
# numpy.random.seed(seed)
# estimators = []
# estimators.append(('standaedize',StandardScaler()))
# estimators.append(('mlp',KerasRegressor(build_fn=baseline_model,epochs=50,batch_size=5,verbose=0)))
# pipeline = Pipeline(estimators)
# # 评估所创建的神经网络模型
# kfold = KFold(n_splits=10,random_state=seed)
# results = cross_val_score(pipeline,X,Y,cv=kfold)
# print(&quot;Standardized:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))
#
#
# # 针对神经网络模型进行优化
# # 提高神经网络性能的一种方法是添加更多层，这可能允许模型提取并重新组合数据中嵌入的高阶特征
# def larger_model():
#     # 创建模型
#     model = Sequential()
#     model.add(Dense(13,input_dim=13,kernel_initializer='normal',activation='relu'))
#     model.add(Dense(6,kernel_initializer='normal',activation='relu'))
#     model.add(Dense(1,kernel_initializer='normal'))
#     # 编译模型
#     model.compile(loss='mean_squared_error',optimizer='adam')
#     return model
#
# # 使用scikit-learn Pipeline 首先标准化数据集，然后创建和评估基线神经网络模型
# numpy.random.seed(seed)
# estimators = []
# estimators.append(('standaedize',StandardScaler()))
# estimators.append(('mlp',KerasRegressor(build_fn=larger_model,epochs=50,batch_size=5,verbose=0)))
# pipeline = Pipeline(estimators)
# # 评估所创建的神经网络模型
# kfold = KFold(n_splits=10,random_state=seed)
# results = cross_val_score(pipeline,X,Y,cv=kfold)
# print(&quot;Larger:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))
#

# 针对神经网络模型进行优化，评估更广泛的模型
# 提高神经网络性能的一种方法是使其更广泛，这可能允许模型提取并重新组合数据中嵌入的高阶特征

def wider_model():
    # 创建模型
    model = Sequential()
    model.add(Dense(20, input_dim=13, kernel_initializer='normal', activation='relu'))
    model.add(Dense(1, kernel_initializer='normal'))
    # 编译模型
    model.compile(loss='mean_squared_error', optimizer='adam')
    # predict model
    model.fit(X,Y,epochs=50,batch_size=5)
    predict = model.predict(X)
    # print(predict)
    submit_txt = pd.DataFrame(predict)
    print(submit_txt)
    submit_txt.to_csv(&quot;predict_housing1.csv&quot;, sep=',', header=False, index=False)
    return model

# 使用scikit-learn Pipeline 首先标准化数据集，然后创建和评估基线神经网络模型
numpy.random.seed(seed)
estimators = []
estimators.append(('standaedize',StandardScaler()))
estimators.append(('mlp',KerasRegressor(build_fn=wider_model,epochs=100,batch_size=5,verbose=0)))
pipeline = Pipeline(estimators)
kfold = KFold(n_splits=10,random_state=seed)
results = cross_val_score(pipeline,X,Y,cv=kfold)
print(&quot;Wider:%.2f(%.2f)MSE&quot;%(results.mean(),results.std()))
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2，结果&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Results:-32.93(23.37)MSE
Standardized:-29.54(27.53)MSE
Larger:-23.31(27.07)MSE
Wider:-21.76(26.31)MSE

Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
Using TensorFlow backend.
Epoch 1/50

  5/506 [..............................] - ETA: 15s - loss: 805.4844
435/506 [========================&amp;gt;.....] - ETA: 0s - loss: 250.8078 
506/506 [==============================] - 0s 432us/step - loss: 228.3296
Epoch 2/50

  5/506 [..............................] - ETA: 0s - loss: 61.6121
455/506 [=========================&amp;gt;....] - ETA: 0s - loss: 80.5485
506/506 [==============================] - 0s 127us/step - loss: 79.0767
Epoch 3/50

  5/506 [..............................] - ETA: 0s - loss: 164.0555
485/506 [===========================&amp;gt;..] - ETA: 0s - loss: 69.5207 
506/506 [==============================] - 0s 127us/step - loss: 68.9874
Epoch 4/50

  5/506 [..............................] - ETA: 0s - loss: 45.3651
490/506 [============================&amp;gt;.] - ETA: 0s - loss: 63.1090
506/506 [==============================] - 0s 123us/step - loss: 63.5065
Epoch 5/50

  5/506 [..............................] - ETA: 0s - loss: 31.9817
495/506 [============================&amp;gt;.] - ETA: 0s - loss: 60.3168
506/506 [==============================] - 0s 123us/step - loss: 59.6500
Epoch 6/50

  5/506 [..............................] - ETA: 0s - loss: 75.1090
500/506 [============================&amp;gt;.] - ETA: 0s - loss: 57.5022
506/506 [==============================] - 0s 123us/step - loss: 57.5369
Epoch 7/50

  5/506 [..............................] - ETA: 0s - loss: 20.0596
506/506 [==============================] - 0s 123us/step - loss: 55.5891
Epoch 8/50

  5/506 [..............................] - ETA: 0s - loss: 67.5474
480/506 [===========================&amp;gt;..] - ETA: 0s - loss: 53.3222
506/506 [==============================] - 0s 125us/step - loss: 54.4315
Epoch 9/50

  5/506 [..............................] - ETA: 0s - loss: 12.8274
485/506 [===========================&amp;gt;..] - ETA: 0s - loss: 52.5087
506/506 [==============================] - 0s 123us/step - loss: 51.9669
Epoch 10/50

  5/506 [..............................] - ETA: 0s - loss: 44.8263
495/506 [============================&amp;gt;.] - ETA: 0s - loss: 50.9085
506/506 [==============================] - 0s 123us/step - loss: 50.2104
Epoch 11/50

  5/506 [..............................] - ETA: 0s - loss: 10.7946
505/506 [============================&amp;gt;.] - ETA: 0s - loss: 48.8362
506/506 [==============================] - 0s 123us/step - loss: 48.7627
Epoch 12/50

  5/506 [..............................] - ETA: 0s - loss: 29.8260
505/506 [============================&amp;gt;.] - ETA: 0s - loss: 47.2329
506/506 [==============================] - 0s 123us/step - loss: 47.1404
Epoch 13/50

  5/506 [..............................] - ETA: 0s - loss: 15.9536
506/506 [==============================] - 0s 92us/step - loss: 43.1233
Epoch 14/50

  5/506 [..............................] - ETA: 1s - loss: 36.2984
506/506 [==============================] - 0s 125us/step - loss: 43.6554
Epoch 15/50

  5/506 [..............................] - ETA: 0s - loss: 11.6092
415/506 [=======================&amp;gt;......] - ETA: 0s - loss: 40.4716
506/506 [==============================] - 0s 123us/step - loss: 42.6683
Epoch 16/50

  5/506 [..............................] - ETA: 0s - loss: 2.9016
425/506 [========================&amp;gt;.....] - ETA: 0s - loss: 38.2600
506/506 [==============================] - 0s 123us/step - loss: 39.1469
Epoch 17/50

  5/506 [..............................] - ETA: 0s - loss: 26.3887
400/506 [======================&amp;gt;.......] - ETA: 0s - loss: 39.2786
506/506 [==============================] - 0s 123us/step - loss: 38.7250
Epoch 18/50

  5/506 [..............................] - ETA: 1s - loss: 10.9436
490/506 [============================&amp;gt;.] - ETA: 0s - loss: 35.2829
506/506 [==============================] - 0s 154us/step - loss: 36.2559
Epoch 19/50

  5/506 [..............................] - ETA: 0s - loss: 110.4335
420/506 [=======================&amp;gt;......] - ETA: 0s - loss: 38.3718 
506/506 [==============================] - 0s 123us/step - loss: 37.2191
Epoch 20/50

  5/506 [..............................] - ETA: 0s - loss: 4.4877
340/506 [===================&amp;gt;..........] - ETA: 0s - loss: 36.5170
506/506 [==============================] - 0s 154us/step - loss: 34.2345
Epoch 21/50

  5/506 [..............................] - ETA: 0s - loss: 3.0911
335/506 [==================&amp;gt;...........] - ETA: 0s - loss: 27.8048
506/506 [==============================] - 0s 154us/step - loss: 34.6101
Epoch 22/50

  5/506 [..............................] - ETA: 0s - loss: 15.4901
400/506 [======================&amp;gt;.......] - ETA: 0s - loss: 35.1135
506/506 [==============================] - 0s 154us/step - loss: 36.9043
Epoch 23/50

  5/506 [..............................] - ETA: 0s - loss: 21.1735
455/506 [=========================&amp;gt;....] - ETA: 0s - loss: 33.6868
506/506 [==============================] - 0s 123us/step - loss: 34.8258
Epoch 24/50

  5/506 [..............................] - ETA: 0s - loss: 85.7751
415/506 [=======================&amp;gt;......] - ETA: 0s - loss: 35.5314
506/506 [==============================] - 0s 123us/step - loss: 34.5349
Epoch 25/50

  5/506 [..............................] - ETA: 0s - loss: 17.5053
385/506 [=====================&amp;gt;........] - ETA: 0s - loss: 32.1707
506/506 [==============================] - 0s 154us/step - loss: 33.2426
Epoch 26/50

  5/506 [..............................] - ETA: 0s - loss: 15.1037
505/506 [============================&amp;gt;.] - ETA: 0s - loss: 32.9444
506/506 [==============================] - 0s 123us/step - loss: 32.9438
Epoch 27/50

  5/506 [..............................] - ETA: 0s - loss: 9.0323
506/506 [==============================] - 0s 123us/step - loss: 33.0248
Epoch 28/50

  5/506 [..............................] - ETA: 0s - loss: 72.4469
506/506 [==============================] - 0s 92us/step - loss: 31.2194
Epoch 29/50

  5/506 [..............................] - ETA: 0s - loss: 19.6237
395/506 [======================&amp;gt;.......] - ETA: 0s - loss: 31.5439
506/506 [==============================] - 0s 123us/step - loss: 30.4992
Epoch 30/50

  5/506 [..............................] - ETA: 0s - loss: 65.1235
400/506 [======================&amp;gt;.......] - ETA: 0s - loss: 31.3186
506/506 [==============================] - 0s 123us/step - loss: 30.5432
Epoch 31/50

  5/506 [..............................] - ETA: 0s - loss: 8.7552
395/506 [======================&amp;gt;.......] - ETA: 0s - loss: 27.7944
506/506 [==============================] - 0s 154us/step - loss: 29.7216
Epoch 32/50

  5/506 [..............................] - ETA: 0s - loss: 22.3568
505/506 [============================&amp;gt;.] - ETA: 0s - loss: 29.3601
506/506 [==============================] - 0s 123us/step - loss: 29.3569
Epoch 33/50

  5/506 [..............................] - ETA: 0s - loss: 13.9683
506/506 [==============================] - 0s 123us/step - loss: 29.7533
Epoch 34/50

  5/506 [..............................] - ETA: 0s - loss: 11.6751
506/506 [==============================] - 0s 123us/step - loss: 29.6476
Epoch 35/50

  5/506 [..............................] - ETA: 0s - loss: 2.7265
506/506 [==============================] - 0s 92us/step - loss: 27.9348
Epoch 36/50

  5/506 [..............................] - ETA: 1s - loss: 39.1157
506/506 [==============================] - 0s 123us/step - loss: 27.7667
Epoch 37/50

  5/506 [..............................] - ETA: 0s - loss: 11.3104
395/506 [======================&amp;gt;.......] - ETA: 0s - loss: 28.7139
506/506 [==============================] - 0s 123us/step - loss: 26.7338
Epoch 38/50

  5/506 [..............................] - ETA: 0s - loss: 33.0695
390/506 [======================&amp;gt;.......] - ETA: 0s - loss: 29.3709
506/506 [==============================] - 0s 123us/step - loss: 26.6316
Epoch 39/50

  5/506 [..............................] - ETA: 1s - loss: 8.1361
506/506 [==============================] - 0s 123us/step - loss: 26.4067
Epoch 40/50

  5/506 [..............................] - ETA: 1s - loss: 13.7220
506/506 [==============================] - 0s 123us/step - loss: 25.9756
Epoch 41/50

  5/506 [..............................] - ETA: 0s - loss: 36.6162
405/506 [=======================&amp;gt;......] - ETA: 0s - loss: 27.9074
506/506 [==============================] - 0s 123us/step - loss: 27.2547
Epoch 42/50

  5/506 [..............................] - ETA: 0s - loss: 44.2660
415/506 [=======================&amp;gt;......] - ETA: 0s - loss: 24.8610
506/506 [==============================] - 0s 123us/step - loss: 25.4775
Epoch 43/50

  5/506 [..............................] - ETA: 0s - loss: 30.5703
425/506 [========================&amp;gt;.....] - ETA: 0s - loss: 25.0591
506/506 [==============================] - 0s 123us/step - loss: 26.3528
Epoch 44/50

  5/506 [..............................] - ETA: 0s - loss: 15.4020
435/506 [========================&amp;gt;.....] - ETA: 0s - loss: 26.9322
506/506 [==============================] - 0s 123us/step - loss: 25.1340
Epoch 45/50

  5/506 [..............................] - ETA: 0s - loss: 11.2487
440/506 [=========================&amp;gt;....] - ETA: 0s - loss: 24.6880
506/506 [==============================] - 0s 123us/step - loss: 24.4546
Epoch 46/50

  5/506 [..............................] - ETA: 0s - loss: 3.0398
440/506 [=========================&amp;gt;....] - ETA: 0s - loss: 23.9014
506/506 [==============================] - 0s 123us/step - loss: 24.2430
Epoch 47/50

  5/506 [..............................] - ETA: 0s - loss: 14.0619
450/506 [=========================&amp;gt;....] - ETA: 0s - loss: 24.5512
506/506 [==============================] - 0s 123us/step - loss: 23.2035
Epoch 48/50

  5/506 [..............................] - ETA: 0s - loss: 20.2924
455/506 [=========================&amp;gt;....] - ETA: 0s - loss: 25.8009
506/506 [==============================] - 0s 123us/step - loss: 25.0679
Epoch 49/50

  5/506 [..............................] - ETA: 0s - loss: 5.2805
445/506 [=========================&amp;gt;....] - ETA: 0s - loss: 23.9418
506/506 [==============================] - 0s 123us/step - loss: 23.4596
Epoch 50/50

  5/506 [..............................] - ETA: 0s - loss: 194.0802
455/506 [=========================&amp;gt;....] - ETA: 0s - loss: 24.0001 
506/506 [==============================] - 0s 123us/step - loss: 22.7273
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;六，基于Keras的神经网络回归模型&lt;/h2&gt;
&lt;p&gt;　　下面我们自己建立一个神经网络模型来看看。&lt;/p&gt;
&lt;h3&gt;1，代码：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;69&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
import matplotlib.pyplot as plt
from math import sqrt
from matplotlib import pyplot
import pandas as pd
from numpy import concatenate
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers.core import Dense ,Dropout,Activation
from keras.optimizers import Adam

'''Keras实现神经网络回归模型'''
# 读取数据
path = 'housing.csv'
train_df = pd.read_csv(path)
# 删除不用字符串字段
# dataset = train_df.drop('jh',axis=1)
# df转换成array
values =train_df.values
# 原始数据标准化，为了加速收敛
scaler = MinMaxScaler(feature_range=(0,1))
scaled = scaler.fit_transform(values)
y = scaled[:,-1]
X = scaled[:,0:-1]

# 随机拆分训练集与测试集
from sklearn.model_selection import train_test_split
train_X,test_X,train_y,test_y = train_test_split(X,y,test_size=0.25)

# 全连接神经网络
model = Sequential()
input = X.shape[1]
# 隐藏层128
model.add(Dense(128,input_shape=(input,)))
model.add(Activation('rule'))
# Dropout层用于防止过拟合
# model.add(Dropout(0.2))
# 隐藏层128
model.add(Dense(128))
model.add(Activation('relu'))
# model.add(Dropout(0.2))
# 没有激活函数用于输出层，因为这是一个回归问题，
# 我们希望直接预测数值，而不需要采用激活函数进行变换
model.add(Dense(1))
# 使用高效的ADAM优化算法以及优化的最小均方误差损失函数
model.compile(loss='mean_squared_error',optimizer=Adam())
# early stopping
from keras.callbacks import EarlyStopping
early_stopping = EarlyStopping(monitor='val_loss',patience=50,verbose=2)
# 训练
history = model.fit(train_X,train_y,epochs=300,batch_size=20,
                    validation_data=(test_X,test_y),verbose=2,
                    shuffle=False,callbacks=[early_stopping])
# loss曲线
pyplot.plot(history.history['loss'],label='train')
pyplot.plot(history.history['val_loss'],label='test')
pyplot.legend()
pyplot.show()
# 预测
yhat = model.predict(test_X)
# 预测y 逆标准化
inv_yhat0 = concatenate((test_X,yhat),axis=1)
inv_yhat1 = scaler.inverse_transform(inv_yhat0)
inv_yhat = inv_yhat1[:,-1]
# 原始y逆标准化
test_y = test_y.reshape(len(test_y),1)
inv_y0 = concatenate((test_X,test_y),axis=1)
inv_y1 = scaler.inverse_transform(inv_y0)
inv_y = inv_y1[:,-1]

# 计算RMSE
rmse = sqrt(mean_squared_error(inv_y,inv_yhat))
print('Test RMSE: %.3f' % rmse)
plt.plot(inv_y)
plt.plot(inv_yhat)
plt.show()
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; 如果Boston数据报错，那么可以直接导入Boston数据（在深度学习中这算是小数据集，我们可以直接导入sklearn中Boston数据集）。&lt;/h3&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# 读取数据

boston = datasets.load_boston()
df_values =boston.data
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201812/1226410-20181228155901326-1157890798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1226410/201812/1226410-20181228155918825-1363654514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Using TensorFlow backend.
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_1 (Dense)              (None, 128)               1664      
_________________________________________________________________
activation_1 (Activation)    (None, 128)               0         
_________________________________________________________________
dropout_1 (Dropout)          (None, 128)               0         
_________________________________________________________________
dense_2 (Dense)              (None, 128)               16512     
_________________________________________________________________
activation_2 (Activation)    (None, 128)               0         
_________________________________________________________________
dropout_2 (Dropout)          (None, 128)               0         
_________________________________________________________________
dense_3 (Dense)              (None, 1)                 129       
=================================================================
Total params: 18,305
Trainable params: 18,305
Non-trainable params: 0
_________________________________________________________________
Train on 404 samples, validate on 102 samples
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此处对结果做以解释：由于神经网络回归，我们是将506个数据按照4:1划分成测试集和训练集，所以得到的结果，也就是我预测的结果是101个数据，。也就是随机取到的数据，并且此神经网络模型建立之前，做了数据预处理，利用fit_transform()函数将数据转化成标准正态分布，并将其归到（0,1）之间，所以得到的结果是零点几也不足为奇，如果要得到原始数据，我们可以对数据不做归一化处理，这样得到的结果也就是原始值。&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;span&gt;参考文献：（本文是学习此文献的知识，做笔记，仅此而已）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;https://machinelearningmastery.com/regression-tutorial-keras-deep-learning-library-python/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;https://blog.csdn.net/aliceyangxi1987/article/details/73532651&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 07:39:00 +0000</pubDate>
<dc:creator>战争热诚</dc:creator>
<og:description>Keras是一个深度学习库，包含高效的数字库Theano和TensorFlow。是一个高度模块化的神经网络库，支持CPU和GPU。 本文学习的目的是学习如何加载CSV文件并使其可供Keras使用，如何</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wj-1314/p/10137184.html</dc:identifier>
</item>
<item>
<title>ASP.NET CORE 学习之自定义异常处理 - #山鸡</title>
<link>http://www.cnblogs.com/ShenNan/p/10197231.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ShenNan/p/10197231.html</guid>
<description>&lt;p&gt;&lt;strong&gt;为什么异常处理选择中间件？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的ASP.NET可以采用异常过滤器的方式处理异常，在ASP.NET CORE中，是以多个中间件连接而成的管道形式处理请求的，不过常用的五大过滤器得以保留，同样可以采用异常过滤器处理异常，但是异常过滤器不能处理MVC中间件以外的异常，为了全局统一考虑，采用中间件处理异常更为合适&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么选择自定义异常中间件?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 先来看看ASP.NET CORE 内置的三个异常处理中间件 DeveloperExceptionPageMiddleware , ExceptionHandlerMiddleware, StatusCodePagesMiddleware &lt;/p&gt;
&lt;p&gt;1.DeveloperExceptionPageMiddleware &lt;br/&gt; 能给出详细的请求/返回/错误信息，因为包含敏感信息，所以仅适合开发环境&lt;/p&gt;
&lt;p&gt;2.ExceptionHandlerMiddleware  (蒋神博客 &lt;a href=&quot;http://www.cnblogs.com/artech/p/error-handling-in-asp-net-core-3.html&quot; target=&quot;view_window&quot;&gt;http://www.cnblogs.com/artech/p/error-handling-in-asp-net-core-3.html&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;仅处理500错误&lt;/p&gt;
&lt;p&gt;3.StatusCodePagesMiddleware  (蒋神博客 &lt;a href=&quot;http://www.cnblogs.com/artech/p/error-handling-in-asp-net-core-4.html&quot; target=&quot;view_window&quot;&gt;http://www.cnblogs.com/artech/p/error-handling-in-asp-net-core-4.html&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;能处理400-599之间的错误，但需要Response中不能包含内容(ContentLength=0 &amp;amp;&amp;amp; ContentType=null，经实验不能响应mvc里未捕获异常)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于ExceptionHandlerMiddleware和StatusCodePagesMiddleware的各自的限制条件，两者需要搭配使用。相比之下自定义中间件更加灵活，既能对各种错误状态进行统一处理，也能按照配置决定处理方式。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;CustomExceptionMiddleWare&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先声明异常中间件的配置类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 异常中间件配置对象
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomExceptionMiddleWareOption
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomExceptionMiddleWareOption(
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             CustomExceptionHandleType handleType =&lt;span&gt; CustomExceptionHandleType.JsonHandle,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             IList&amp;lt;PathString&amp;gt; jsonHandleUrlKeys = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; errorHandingPath = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             HandleType =&lt;span&gt; handleType;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             JsonHandleUrlKeys =&lt;span&gt; jsonHandleUrlKeys;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             ErrorHandingPath =&lt;span&gt; errorHandingPath;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 异常处理方式
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; CustomExceptionHandleType HandleType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Json处理方式的Url关键字
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;&lt;span&gt;仅HandleType=Both时生效&lt;/span&gt;&lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IList&amp;lt;PathString&amp;gt; JsonHandleUrlKeys { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误跳转页面
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; PathString ErrorHandingPath { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误处理方式
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; CustomExceptionHandleType
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         JsonHandle = &lt;span&gt;0&lt;/span&gt;,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Json形式处理&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         PageHandle = &lt;span&gt;1&lt;/span&gt;,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转网页处理&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         Both = &lt;span&gt;2&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据Url关键字自动处理&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;声明异常中间件的成员&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 管道请求委托
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; RequestDelegate _next;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 配置对象
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomExceptionMiddleWareOption _option;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 需要处理的状态码字典
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; IDictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; exceptionStatusCodeDic;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomExceptionMiddleWare(RequestDelegate next, CustomExceptionMiddleWareOption option)
        {
            _next &lt;/span&gt;=&lt;span&gt; next;
            _option &lt;/span&gt;=&lt;span&gt; option;
            exceptionStatusCodeDic &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
            {
                { &lt;/span&gt;&lt;span&gt;401&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未授权的请求&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                { &lt;/span&gt;&lt;span&gt;404&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;找不到该页面&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                { &lt;/span&gt;&lt;span&gt;403&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问被拒绝&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                { &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务器发生意外的错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其余状态自行扩展&lt;/span&gt;
&lt;span&gt;            };
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;异常中间件主要逻辑&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Invoke(HttpContext context)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             Exception exception = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;await&lt;/span&gt; _next(context);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用管道执行下一个中间件&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                context.Response.Clear();    
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 context.Response.StatusCode = &lt;span&gt;500&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发生未捕获的异常，手动设置状态码&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 exception =&lt;span&gt; ex;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;finally&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (exceptionStatusCodeDic.ContainsKey(context.Response.StatusCode) &amp;amp;&amp;amp; 
&lt;span&gt;17&lt;/span&gt;                     !context.Items.ContainsKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExceptionHandled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;预处理标记&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; errorMsg = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (context.Response.StatusCode == &lt;span&gt;500&lt;/span&gt; &amp;amp;&amp;amp; exception != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                         errorMsg = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{exceptionStatusCodeDic[context.Response.StatusCode]}\r\n{(exception.InnerException != null ? exception.InnerException.Message : exception.Message)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         errorMsg =&lt;span&gt; exceptionStatusCodeDic[context.Response.StatusCode];
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     exception = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Exception(errorMsg);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (exception != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; handleType =&lt;span&gt; _option.HandleType;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (handleType == CustomExceptionHandleType.Both)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据Url关键字决定异常处理方式&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; requestPath =&lt;span&gt; context.Request.Path;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                         handleType = _option.JsonHandleUrlKeys != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; _option.JsonHandleUrlKeys.Count(
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                             k =&amp;gt; context.Request.Path.StartsWithSegments(k, StringComparison.CurrentCultureIgnoreCase)) &amp;gt; &lt;span&gt;0&lt;/span&gt; ?
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                            CustomExceptionHandleType.JsonHandle :
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                            CustomExceptionHandleType.PageHandle;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     
&lt;span&gt;43&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (handleType ==&lt;span&gt; CustomExceptionHandleType.JsonHandle)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                         &lt;span&gt;await&lt;/span&gt;&lt;span&gt; JsonHandle(context, exception);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                         &lt;span&gt;await&lt;/span&gt;&lt;span&gt; PageHandle(context, exception, _option.ErrorHandingPath);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 统一格式响应类
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ApiResponse GetApiResponse(Exception ex)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ApiResponse() { IsSuccess = &lt;span&gt;false&lt;/span&gt;, Message =&lt;span&gt; ex.Message };
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理方式：返回Json格式
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task JsonHandle(HttpContext context, Exception ex)
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; apiResponse =&lt;span&gt; GetApiResponse(ex);
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; serialzeStr =&lt;span&gt; JsonConvert.SerializeObject(apiResponse);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             context.Response.ContentType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.Response.WriteAsync(serialzeStr, Encoding.UTF8);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理方式：跳转网页
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;path&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task PageHandle(HttpContext context, Exception ex, PathString path)
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;             context.Items.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; originPath =&lt;span&gt; context.Request.Path;
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;             context.Request.Path = path;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置请求页面为错误跳转页面&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;88&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;                 &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _next(context);      
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { }
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;             &lt;span&gt;finally&lt;/span&gt;
&lt;span&gt;93&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;                 context.Request.Path = originPath;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;恢复原始请求页面&lt;/span&gt;
&lt;span&gt;95&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;96&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用扩展类进行中间件注册&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomExceptionMiddleWareExtensions
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IApplicationBuilder UseCustomException(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IApplicationBuilder app, CustomExceptionMiddleWareOption option)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; app.UseMiddleware&amp;lt;CustomExceptionMiddleWare&amp;gt;&lt;span&gt;(option);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Startup.cs的Configuref方法中注册异常中间件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;   app.UseCustomException(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomExceptionMiddleWareOption(
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                     handleType: CustomExceptionHandleType.Both,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据url关键字决定处理方式&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;                     jsonHandleUrlKeys: &lt;span&gt;new&lt;/span&gt; PathString[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/api&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                     errorHandingPath: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/home/error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来我们来进行测试，首先模拟一个将会进行页面跳转的未经捕获的异常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/378510/201901/378510-20190102144626521-695671656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;访问/home/about的结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/378510/201901/378510-20190102144704900-43064854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;访问/home/test的结果 (该地址不存在)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/378510/201901/378510-20190102145035089-680445501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;OK异常跳转页面的方式测试完成，接下来我们测试返回统一格式(json)的异常处理，同样先模拟一个未经捕获的异常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/378510/201901/378510-20190102145427264-217027178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;访问/api/token/gettesterror的结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/378510/201901/378510-20190102145944034-642821285.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;访问/api/token/test的结果 (该地址不存在)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/378510/201901/378510-20190102150131490-957934027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;访问/api/token/getvalue的结果 (该接口需要身份验证)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/378510/201901/378510-20190102150450259-1842297702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;测试完成，页面跳转和统一格式返回都没有问题，自定义异常中间件已按预期工作&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要注意的是，自定义中间件会响应每个HTTP请求，所以处理逻辑一定要精简，防止发生不必要的性能问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 07:14:00 +0000</pubDate>
<dc:creator>#山鸡</dc:creator>
<og:description>为什么异常处理选择中间件？ 传统的ASP.NET可以采用异常过滤器的方式处理异常，在ASP.NET CORE中，是以多个中间件连接而成的管道形式处理请求的，不过常用的五大过滤器得以保留，同样可以采用异</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ShenNan/p/10197231.html</dc:identifier>
</item>
<item>
<title>Thymeleaf【快速入门】 - 我没有三颗心脏</title>
<link>http://www.cnblogs.com/wmyskxz/p/10208648.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wmyskxz/p/10208648.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-6cc908ce40c58d5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;突然发现自己给自己埋了一个大坑，毕设好难..每一个小点拎出来都能当一个小题目（手动摆手..），没办法自己选的含着泪也要把坑填完..先一点一点把需要补充的知识学完吧..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;稍微摘一摘&lt;a href=&quot;https://www.thymeleaf.org/&quot;&gt;【官网】&lt;/a&gt;上面的介绍吧（翻译是找到，有些增加的内容）：&lt;/p&gt;
&lt;ul readability=&quot;8&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;1.Thymeleaf is a modern server-side Java template engine for both web and standalone environments.&lt;/em&gt;&lt;br/&gt;&lt;strong&gt;Thymeleaf&lt;/strong&gt;是⾯向Web和独⽴环境的现代服务器端Java模板引擎，能够处理HTML，XML，JavaScript，CSS甚⾄纯⽂本。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;em&gt;2.Thymeleaf's main goal is to bring elegant natural templates to your development workflow — HTML that can be correctly displayed in browsers and also work as static prototypes, allowing for stronger collaboration in development teams.&lt;/em&gt;&lt;br/&gt;&lt;strong&gt;Thymeleaf&lt;/strong&gt;旨在提供⼀个优雅的、⾼度可维护的创建模板的⽅式。 为了实现这⼀⽬标，&lt;strong&gt;Thymeleaf&lt;/strong&gt;建⽴在⾃然模板的概念上，将其逻辑注⼊到模板⽂件中，不会影响模板设计原型。 这改善了设计的沟通，弥合了设计和开发团队之间的差距。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;3.With modules for Spring Framework, a host of integrations with your favourite tools, and the ability to plug in your own functionality, Thymeleaf is ideal for modern-day HTML5 JVM web development — although there is much more it can do.&lt;/em&gt;&lt;br/&gt;对于Spring框架模块,一个允许你集成你最喜欢的工具的平台,并且能够插入自己的功能,&lt;strong&gt;Thymeleaf&lt;/strong&gt;是理想的现代JVM HTML5 web开发工具,虽然它可以做得多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后官网还给出了一段看起来仍然像HTML一样工作的集成了Thymeleaf模版的代码，我们大致的来感受一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-0faa1c841e11cc09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Thymeleaf官网给的例子&quot;/&gt;&lt;/p&gt;
&lt;p&gt;简单说， &lt;strong&gt;Thymeleaf&lt;/strong&gt; 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP。&lt;/p&gt;
&lt;p&gt;Thymeleaf与JSP的区别在于，不运行项目之前，Thymeleaf也是纯HTML（&lt;strong&gt;不需要服务端的支持&lt;/strong&gt;）而JSP需要进行一定的转换，这样就方便前端人员进行独立的设计、调试。相较与其他的模板引擎，它有如下三个极吸引人的特点：&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;2.Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;3.Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;0.71428571428571&quot;&gt;
&lt;p&gt;摘自：&lt;a href=&quot;https://www.cnblogs.com/ityouknow/p/5833560.html&quot;&gt;spring boot(四):thymeleaf使用详解-纯洁的微笑&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;先把需要环境搭起来&quot;&gt;00#先把需要环境搭起来&lt;/h2&gt;
&lt;p&gt;也就是SpringBoot项目的搭建，很常规，快速搭起来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-02134da6aac982f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;稍微改改包名还有描述，点击【Next】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-c185fb2bfb31e82a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;勾选上Web/Thymeleaf支持，然后点击【Next】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-795b7b2c97b7eea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择项目保存位置，点击【Finish】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-6ca04266915f109f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此就简单创建了一个用于学习Thymeleaf的简单环境。&lt;/p&gt;
&lt;h2 id=&quot;创建一个hello-thymeleaf页面&quot;&gt;01#创建一个Hello Thymeleaf页面&lt;/h2&gt;
&lt;h3 id=&quot;第一步新建一个hellocontroller&quot;&gt;第一步：新建一个HelloController&lt;/h3&gt;
&lt;p&gt;在【com.wmyskxz.demo】下新建一个【controller】包，然后新建一个【HelloController】：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.wmyskxz.demo.controoler;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HelloController {

    @RequestMapping(&quot;/hello&quot;)
    public String hello(Model model) {
        model.addAttribute(&quot;name&quot;, &quot;thymeleaf&quot;);
        return &quot;hello&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第二步新建一个hello.html页面&quot;&gt;第二步：新建一个hello.html页面&lt;/h3&gt;
&lt;p&gt;在【resources】下的【templates】下新建一个【hello.html】文件，使用这个目录的原因是当你使用模板引擎时Spring Boot会默认在&lt;code&gt;src/main/resources/templates&lt;/code&gt;下去找，当然你也可以修改这个默认路径，这里就不做演示了：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-Hello Thymeleaf&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p th:text=&quot;${name}&quot;&amp;gt;name&amp;lt;/p&amp;gt;
&amp;lt;p th:text=&quot;'Hello！ ' + ${name} + '!'&quot;&amp;gt;hello world&amp;lt;/p&amp;gt;
&amp;lt;p th:text=&quot;|Hello！ ${name}!|&quot;&amp;gt;hello world&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第三步把项目跑起来&quot;&gt;第三步：把项目跑起来&lt;/h3&gt;
&lt;p&gt;事实上，上面已经展示了三种拼接字符串的方式，你应该也能看出thymeleaf的一点端倪，不过你第一件注意到的事应该是这是一个HTML5文件，可以由任何浏览器正确的显示，因为它不包含任何非HTML得标签（浏览器会忽略他们不明白的所有属性，如：&lt;code&gt;th:text&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-a829304e17f31312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;直接打开hello.html显示的内容&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目运行之后，我们在地址栏输入&lt;code&gt;localhost:8080/hello&lt;/code&gt;，就会看到意料之中结果正确的页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-f29737dbee121c64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是你也可能会注意到，这个模板并不是一个真正有效的HTML5文档，因为HTML5规范不允许在th:*形式中使用这些非标准属性。事实上，我们甚至在我们的&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;标签中添加了一个&lt;code&gt;xmlns:th&lt;/code&gt;属性，这绝对是非HTML5标准：&lt;code&gt;&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不管怎样，你已经看到了我们将如何使用Thymeleaf模板引擎访问model中的数据：&lt;strong&gt;“${}”&lt;/strong&gt;，这和JSP极为相似，下面我们将进一步展示Thymeleaf的用法。&lt;/p&gt;
&lt;h3 id=&quot;第四步对项目做一些修改以方便调试&quot;&gt;第四步：对项目做一些修改以方便调试&lt;/h3&gt;
&lt;p&gt;现在我们基础的环境和第一个任务（一个Hello World）页面都已经开发完成了，但是有一点不好的是，每一次我们对页面的修改都不能得到及时的反应，我们需要不断的重启服务器以看到效果，这在实际开发过程中是十分糟糕的表现，我们需要做一些修改，让Thymeleaf页面能够实时的刷新而不需要重启服务器。&lt;/p&gt;
&lt;p&gt;打开IDEA-&amp;gt;Setting，将下面的选项【Build project automatically】给勾选上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-92f88420d02861df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后按下快捷键【Ctrl + Alt + Shift + /】，召唤出【Maintenance】菜单，进入【Registry】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-8ce48bd72f09f9e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;把【compiler.automake.allow.when.app.running】这个选项的 √ 给打上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-140bd0302ff64935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后再把【application.properties】弄成这个样子：&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;#thymeleaf 配置
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
#缓存设置为false, 这样修改之后马上生效，便于调试
spring.thymeleaf.cache=false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后重启项目，对我们的hello.html稍稍做一些修改，稍等一会儿，你就能刷新页面看到效果，完美。&lt;/p&gt;
&lt;h2 id=&quot;更多thymeleaf的基础用法&quot;&gt;10#更多Thymeleaf的基础用法&lt;/h2&gt;
&lt;h3 id=&quot;model-中的数据迭代&quot;&gt;1. model 中的数据迭代&lt;/h3&gt;
&lt;p&gt;Thymeleaf 的迭代和 JSP 的写法也很相似，我们将就上面的hello项目改一下：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-Hello Thymeleaf&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;table&amp;gt;
    &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;学生id&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;学生姓名&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody&amp;gt;
    &amp;lt;tr th:each=&quot;s:${students}&quot;&amp;gt;
        &amp;lt;td th:text=&quot;${s.id}&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td th:text=&quot;${s.name}&quot;&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了配合演示，在【com.wmyskxz.demo】下新建一个【pojo】包，然后新建一个【Student】类：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.wmyskxz.demo.pojo;

public class Student {
    private String name;
    private Integer id;

    public Student(String name, Integer id) {
        this.name = name;
        this.id = id;
    }

    // getter and setter
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再把controller改改，给前端添加几条数据：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(&quot;/hello&quot;)
public String hello(Model model) {

    List&amp;lt;Student&amp;gt; students = new ArrayList&amp;lt;&amp;gt;();
    students.add(new Student(&quot;张三&quot;, 1));
    students.add(new Student(&quot;李四&quot;, 2));
    students.add(new Student(&quot;王五&quot;, 3));
    students.add(new Student(&quot;二麻子&quot;, 4));
    students.add(new Student(&quot;三棒子&quot;, 5));

    model.addAttribute(&quot;students&quot;, students);
    return &quot;hello&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启项目，然后在地址栏输入：&lt;code&gt;localhost:8080/hello&lt;/code&gt;，能看到正确的显示，完美：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-6c7e1762938c5396.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;th:each&lt;/code&gt;来做循环迭代（&lt;code&gt;th:each=&quot;s:${students}&quot;&lt;/code&gt;），&lt;code&gt;s&lt;/code&gt;作为迭代元素来使用，然后像上面一样访问迭代元素中的属性，相信这样的用法应该不会陌生。&lt;/p&gt;
&lt;h4 id=&quot;进阶-带状态的遍历&quot;&gt;进阶-带状态的遍历&lt;/h4&gt;
&lt;p&gt;我们也可以使用&lt;code&gt;th:each=&quot;s,status:${students}&quot;&lt;/code&gt;方式遍历，就可以把状态放在status里面了，同时还可以用&lt;code&gt;th:class=&quot;${stauts.even}?'even':'odd'&quot;&lt;/code&gt;来判断奇偶。&lt;/p&gt;
&lt;p&gt;status里面包含的信息大致如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;从0开始的索引值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;从1开始的索引值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;集合内元素的总量&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;current&lt;/td&gt;
&lt;td&gt;当前的迭代对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;even/odd&lt;/td&gt;
&lt;td&gt;boolean类型的，用来判断是偶数个还是奇数个&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;first&lt;/td&gt;
&lt;td&gt;boolean类型，判断是否为第一个&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;last&lt;/td&gt;
&lt;td&gt;boolean类型，判断是否为最后一个&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;我们再次来修改一下我们的hello.html，让它多显示一行index属性，并增加一些简单的效果好让单双行区别开来：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-Hello Thymeleaf&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;table&amp;gt;
    &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;index&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;学生id&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;学生姓名&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody&amp;gt;
    &amp;lt;tr th:class=&quot;${status.even}?'even':'odd'&quot; th:each=&quot;s,status:${students}&quot;&amp;gt;
        &amp;lt;td th:text=&quot;${status.index}&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td th:text=&quot;${s.id}&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td th:text=&quot;${s.name}&quot;&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;style&amp;gt;
    .even{
        background-color: hotpink;
    }
    .odd{
        background-color: cornflowerblue;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不用重启，刷新一下页面就可以看到效果，完美：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-b6d381f3b47ad010.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据判断&quot;&gt;2. 数据判断&lt;/h3&gt;
&lt;p&gt;Thymeleaf 的条件判断是通过&lt;code&gt;th:if&lt;/code&gt;来做的，只有条件为真的时候才会显示当前元素，取反可以用&lt;code&gt;not&lt;/code&gt;（&lt;code&gt;th:if=&quot;not 条件&quot;&lt;/code&gt;）或者&lt;code&gt;th:unless&lt;/code&gt;，或者常见的三元判断符（x?y:z）也是适用的，我们动手再来修改我们的hello.html：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-Hello Thymeleaf&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;!-- 当students集合为空则显示提示信息 --&amp;gt;
&amp;lt;div th:if=&quot;${#lists.isEmpty(students)}&quot;&amp;gt;studnets集合为空！&amp;lt;/div&amp;gt;
&amp;lt;!-- 当students集合不为空时才会显示下面的元素 --&amp;gt;
&amp;lt;div th:if=&quot;${not #lists.isEmpty(students)}&quot;&amp;gt;
    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;index&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;学生id&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;学生姓名&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
        &amp;lt;tr th:class=&quot;${status.even}?'even':'odd'&quot; th:each=&quot;s,status:${students}&quot;&amp;gt;
            &amp;lt;td th:text=&quot;${status.index}&quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td th:text=&quot;${s.id}&quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td th:text=&quot;${s.name}&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;style&amp;gt;
    .even {
        background-color: hotpink;
    }

    .odd {
        background-color: cornflowerblue;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们相应的把Controller丢给hello.html的数据给清空：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(&quot;/hello&quot;)
public String hello(Model model) {

    List&amp;lt;Student&amp;gt; students = new ArrayList&amp;lt;&amp;gt;();
//        students.add(new Student(&quot;张三&quot;, 1));
//        students.add(new Student(&quot;李四&quot;, 2));
//        students.add(new Student(&quot;王五&quot;, 3));
//        students.add(new Student(&quot;二麻子&quot;, 4));
//        students.add(new Student(&quot;三棒子&quot;, 5));

    model.addAttribute(&quot;students&quot;, students);
    return &quot;hello&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启项目，刷新页面，能看到正确的错误提示信息（对于这样的，需要有错误提示的页面我也不知道应该怎么写好，这里就简单示范一下，如果知道怎么写好的小伙伴记得提示一下啊）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-920920d24c4b8a2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;${not #lists.isEmpty(students)}&lt;/code&gt;表达式，判断了students是否为空，Thymeleaf支持&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=、==、!=作为比较条件，同时也支持将SpringEL表达式语言用于条件中，表达式中的&lt;code&gt;#lists.isEmpty()&lt;/code&gt;语法是Thymeleaf模板自带的一种内置工具，像这样的内置工具不仅方便而且能提高我们的效率，完整的内置工具在这里可以看到：&lt;a href=&quot;http://how2j.cn/k/springboot/springboot-tool/1741.html#step7750&quot;&gt;【传送门】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;在-javascript-中访问-model&quot;&gt;3. 在 JavaScript 中访问 model&lt;/h3&gt;
&lt;p&gt;首先我们需要学习如何在Thymeleaf中引用静态资源，很简单，使用&lt;code&gt;@{}&lt;/code&gt;就可以，这在JSP下是极易出错的。我们在【main】目录下新建一个【webapp】目录，然后在【staitc/js】目录下新建一个【thymeleaf.js】文件：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function testFunction(){
    alert(&quot;test Thymeleaf.js!&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在hello.html的&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;标签中添加上下面这句话：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../../webapp/static/js/thymeleaf.js&quot; th:src=&quot;@{/static/js/thymeleaf.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过&lt;code&gt;th:href=&quot;@{/static/js/thymeleaf.js}&quot;&lt;/code&gt;这种方式，可以在渲染后的html里自动生成上下文路径，为了方便我们调试，也就是能在显示器中直接打开html文件进行效果的查看，我们还添加了&lt;code&gt;src&lt;/code&gt;属性（&lt;code&gt;src=&quot;../../webapp/static/js/thymeleaf.js&quot;&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;刷新项目，能正确得到提示信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-5c4f06b2871b30ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们把hello.html改写成下面这个样子：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-Hello Thymeleaf&amp;lt;/title&amp;gt;
    &amp;lt;script th:inline=&quot;javascript&quot;&amp;gt;
        var single = [[${student}]];
        console.log(single.name + &quot;/&quot; + single.id);
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再让Controller简单的传一个学生到前台：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(&quot;/hello&quot;)
public String hello(Model model) {
    model.addAttribute(&quot;student&quot;, new Student(&quot;我没有三颗心脏&quot;, 1));
    return &quot;hello&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;刷新项目，按下F12，就可以在控制台中看到正确的信息了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-d0bb4c8b74a95ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;th:inline=&quot;javascript&quot;&lt;/code&gt;添加到script标签，这样JavaScript代码即可访问model中的属性，再通过&lt;code&gt;[[${}]]&lt;/code&gt;格式来获得实际的值。&lt;/p&gt;
&lt;h3 id=&quot;包含&quot;&gt;4. 包含&lt;/h3&gt;
&lt;p&gt;我们在开发中常常都把页面共同的header和footer提取出来，弄成单独的页面，然后让该包含的页面包含进来，我们就拿footer举例，首先在【templates】下新建一个要背其他页面包含的footer页面【include】：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;footer th:fragment=&quot;footer1&quot;&amp;gt;
    &amp;lt;p&amp;gt;All Rights Reserved&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;footer th:fragment=&quot;footer2(start,now)&quot;&amp;gt;
    &amp;lt;p th:text=&quot;|${start} - ${now} All Rights Reserved|&quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后直接在我们的hello.html页面中分别引用上面页面定义好的两个foot：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-Hello Thymeleaf&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div th:include=&quot;include::footer1&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div th:replace=&quot;include::footer2(2015,2018)&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;刷新页面，可以看到效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-c85cadc6c754cb0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用&lt;code&gt;th:fragment&lt;/code&gt;属性来定义被包含的模板片段，然后使用&lt;code&gt;th:include&lt;/code&gt;和&lt;code&gt;th:replace&lt;/code&gt;两个标签来直接引用标记好的片段，上面hello.html其实就相当于：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-Hello Thymeleaf&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;All Rights Reserved&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;footer&amp;gt;
    &amp;lt;p&amp;gt;2015 - 2018 All Rights Reserved&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以很明显感觉到两个标签的差别，include会保留自己的主标签，而replace会保留fragment的主标签。&lt;/p&gt;
&lt;h2 id=&quot;一个crud分页的实例&quot;&gt;11#一个CRUD+分页的实例&lt;/h2&gt;
&lt;p&gt;接下来我们沿用上面的基础，把这个项目进行一定的扩展，变成一个CRUD+分页的完整项目，不过首先，我们需要把之前因为不好习惯写的pojo.student类里的id和name顺序交换一下，好匹配数据库里的结构：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.wmyskxz.demo.pojo;
public class Student {
    private Integer id;
    private String name;
    // getter and setter
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第一步准备好数据库环境&quot;&gt;第一步：准备好数据库环境&lt;/h3&gt;
&lt;p&gt;建表SQL：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create database wmyskxz;
use wmyskxz;
CREATE TABLE student (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(30),
  PRIMARY KEY (id)
) DEFAULT CHARSET=UTF8;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第二步修改application.properties和pom.xml&quot;&gt;第二步：修改application.properties和pom.xml&lt;/h3&gt;
&lt;p&gt;增加数据库相关配置到application,properties中，完整的文件如下：&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;#thymeleaf 配置
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
#缓存设置为false, 这样修改之后马上生效，便于调试
spring.thymeleaf.cache=false

#数据库
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/wmyskxz?characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;往pom.xml增加jdbc,mybatis,pageHelper的jar包：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.1.1.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;groupId&amp;gt;com.wmyskxz&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;demo&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;name&amp;gt;demo&amp;lt;/name&amp;gt;
    &amp;lt;description&amp;gt;Demo project for Spring Boot + Thymeleaf&amp;lt;/description&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;!-- 这个需要为 true 热部署才有效 --&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- servlet依赖. --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- tomcat的支持.--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- mybatis --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- mysql --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.21&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- pageHelper --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.github.pagehelper&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;pagehelper&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;

&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第三步增加studentmapper&quot;&gt;第三步：增加StudentMapper&lt;/h3&gt;
&lt;p&gt;新建【mapper】包，并在其下新增StudentMapper接口：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.wmyskxz.demo.mapper;

import com.wmyskxz.demo.pojo.Student;
import org.apache.ibatis.annotations.*;

import java.util.List;

@Mapper
public interface StudentMapper {

    @Select(&quot;select * from student&quot;)
    List&amp;lt;Student&amp;gt; findAll();

    @Insert(&quot;insert into student ( name ) values (#{name}) &quot;)
    int save(Student student);

    @Delete(&quot;delete from student where id= #{id} &quot;)
    void delete(int id);

    @Select(&quot;select * from student where id= #{id} &quot;)
    Student get(int id);

    @Update(&quot;update student set name=#{name} where id=#{id} &quot;)
    int update(Student student);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第四步新增studentcontroller类&quot;&gt;第四步：新增StudentController类&lt;/h3&gt;
&lt;p&gt;在【controller】包下新增一个【StudentController】类：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.wmyskxz.demo.controoler;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.wmyskxz.demo.mapper.StudentMapper;
import com.wmyskxz.demo.pojo.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class StudentController {
    @Autowired
    StudentMapper studentMapper;

    @RequestMapping(&quot;/addStudent&quot;)
    public String listStudent(Student student) throws Exception {
        studentMapper.save(student);
        return &quot;redirect:listStudent&quot;;
    }

    @RequestMapping(&quot;/deleteStudent&quot;)
    public String deleteStudent(Student student) throws Exception {
        studentMapper.delete(student.getId());
        return &quot;redirect:listStudent&quot;;
    }

    @RequestMapping(&quot;/updateStudent&quot;)
    public String updateStudent(Student student) throws Exception {
        studentMapper.update(student);
        return &quot;redirect:listStudent&quot;;
    }

    @RequestMapping(&quot;/editStudent&quot;)
    public String listStudent(int id, Model m) throws Exception {
        Student student = studentMapper.get(id);
        m.addAttribute(&quot;student&quot;, student);
        return &quot;editStudent&quot;;
    }

    @RequestMapping(&quot;/listStudent&quot;)
    public String listStudent(Model m, @RequestParam(value = &quot;start&quot;, defaultValue = &quot;0&quot;) int start, @RequestParam(value = &quot;size&quot;, defaultValue = &quot;5&quot;) int size) throws Exception {
        PageHelper.startPage(start, size, &quot;id desc&quot;);
        List&amp;lt;Student&amp;gt; students = studentMapper.findAll();
        PageInfo&amp;lt;Student&amp;gt; page = new PageInfo&amp;lt;&amp;gt;(students);
        m.addAttribute(&quot;page&quot;, page);
        return &quot;listStudent&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第五步配置pagehelper&quot;&gt;第五步：配置PageHelper&lt;/h3&gt;
&lt;p&gt;新建【config】包，并在下面新建【PageHelperConfig】类：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.wmyskxz.demo.config;

import com.github.pagehelper.PageHelper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Properties;

@Configuration
public class PageHelperConfig {

    @Bean
    public PageHelper pageHelper() {
        PageHelper pageHelper = new PageHelper();
        Properties p = new Properties();
        p.setProperty(&quot;offsetAsPageNum&quot;, &quot;true&quot;);
        p.setProperty(&quot;rowBoundsWithCount&quot;, &quot;true&quot;);
        p.setProperty(&quot;reasonable&quot;, &quot;true&quot;);
        pageHelper.setProperties(p);
        return pageHelper;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第六步编写html文件&quot;&gt;第六步：编写HTML文件&lt;/h3&gt;
&lt;p&gt;为了演示，我们简单添加两个页面就好了，一个是【listStudent.html】：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-CRUD和分页实例&amp;lt;/title&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div style=&quot;width:500px;margin:20px auto;text-align: center&quot;&amp;gt;
    &amp;lt;table align='center' border='1' cellspacing='0'&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;id&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;name&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;编辑&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;删除&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr th:each=&quot;student:${page.list}&quot;&amp;gt;
            &amp;lt;td th:text=&quot;${student.id}&quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td th:text=&quot;${student.name}&quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;a th:href=&quot;@{/editStudent(id=${student.id})}&quot;&amp;gt;编辑&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;a th:href=&quot;@{/deleteStudent(id=${student.id})}&quot;&amp;gt;删除&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;br/&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;a th:href=&quot;@{/listStudent(start=0)}&quot;&amp;gt;[首 页]&amp;lt;/a&amp;gt;
        &amp;lt;a th:href=&quot;@{/listStudent(start=${page.pageNum-1})}&quot;&amp;gt;[上一页]&amp;lt;/a&amp;gt;
        &amp;lt;a th:href=&quot;@{/listStudent(start=${page.pageNum+1})}&quot;&amp;gt;[下一页]&amp;lt;/a&amp;gt;
        &amp;lt;a th:href=&quot;@{/listStudent(start=${page.pages})}&quot;&amp;gt;[末 页]&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;br/&amp;gt;
    &amp;lt;form action=&quot;addStudent&quot; method=&quot;post&quot;&amp;gt;
        name: &amp;lt;input name=&quot;name&quot;/&amp;gt; &amp;lt;br/&amp;gt;
        &amp;lt;button type=&quot;submit&quot;&amp;gt;提交&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另一个就是编辑Student的页面【editStudent.html】：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Thymeleaf快速入门-CRUD和分页实例&amp;lt;/title&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div style=&quot;margin:0px auto; width:500px&quot;&amp;gt;

    &amp;lt;form action=&quot;updateStudent&quot; method=&quot;post&quot;&amp;gt;

        name: &amp;lt;input name=&quot;name&quot; th:value=&quot;${student.name}&quot;/&amp;gt; &amp;lt;br/&amp;gt;

        &amp;lt;input name=&quot;id&quot; type=&quot;hidden&quot; th:value=&quot;${student.id}&quot;/&amp;gt;
        &amp;lt;button type=&quot;submit&quot;&amp;gt;提交&amp;lt;/button&amp;gt;

    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第七步运行项目&quot;&gt;第七步：运行项目&lt;/h3&gt;
&lt;p&gt;在添加了一些数据之后，可以观察到各项功能都是可以正常使用的，这个例子也是我直接借鉴how2j教程里的源码写的，原文在这里：&lt;a href=&quot;http://how2j.cn/k/springboot/springboot-crud/1742.html#nowhere&quot;&gt;【传送门】&lt;/a&gt;，运行之后，可以看到大概是这样的效果，完美：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-9910ebbacca8d1a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;至此，我们就差不多算是对Thymeleaf入了门。&lt;/p&gt;
&lt;p&gt;按照惯例黏一个尾巴，话说有木有懂公众号运营的小伙伴啊？求指教！&lt;/p&gt;
&lt;blockquote readability=&quot;6.0896860986547&quot;&gt;
&lt;p&gt;欢迎转载，转载请注明出处！&lt;br/&gt;简书ID：&lt;a href=&quot;https://www.jianshu.com/u/a40d61a49221&quot;&gt;@我没有三颗心脏&lt;/a&gt;&lt;br/&gt;github：&lt;a href=&quot;https://github.com/wmyskxz/&quot;&gt;wmyskxz&lt;/a&gt;&lt;br/&gt;欢迎关注公众微信号：wmyskxz&lt;br/&gt;分享自己的学习 &amp;amp; 学习资料 &amp;amp; 生活&lt;br/&gt;想要交流的朋友也可以加qq群：3382693&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 02 Jan 2019 07:07:00 +0000</pubDate>
<dc:creator>我没有三颗心脏</dc:creator>
<og:description>前言： 突然发现自己给自己埋了一个大坑，毕设好难..每一个小点拎出来都能当一个小题目（手动摆手..），没办法自己选的含着泪也要把坑填完..先一点一点把需要补充的知识学完吧.. Thymeleaf介绍</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wmyskxz/p/10208648.html</dc:identifier>
</item>
<item>
<title>WPF基础之元素绑定 - SmilelyCoding</title>
<link>http://www.cnblogs.com/lovezhangyu/p/10208381.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lovezhangyu/p/10208381.html</guid>
<description>&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 元素绑定&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;数据绑定最简单的形式是源对象是WPF元素而且源属性是依赖项属性。依赖项属性具有内置的更改通知支持。因此当源对象中改变依赖属性的值时，会立即更新目标对象中的绑定属性。&lt;/p&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 绑定表达式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当使用绑定表达式时，不必对源对象做任何改动，只需配置源对象使其属性具有正确的值范围。&lt;/p&gt;
&lt;div readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;Slider Grid.Row=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sliderFontSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Minimum=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Maximum=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; TickFrequency=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; TickPlacement=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TopLeft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;&amp;lt;/Slider&amp;gt;
&amp;lt;TextBlock Grid.Row=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Simple Text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lblSimpleText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FontSize&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding ElementName=sliderFontSize,Path=Value}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;         
&amp;lt;/TextBlock&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 绑定错误&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;WPF不会引发异常来通知与数据绑定相关的问题。如果指定的元素或属性不存在，那么不会收到任何的指示；相反，只是不能在目标属性中显示数据。&lt;/p&gt;
&lt;p&gt;调试可通过Visual Studio的OutPut窗口查看，WPF会输出绑定细节的跟踪信息。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 绑定模式&lt;/strong&gt;&lt;/h3&gt;
&lt;div readability=&quot;18&quot;&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;
&lt;td&gt;说明&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;OneWay&lt;/td&gt;
&lt;td&gt;当源属性变化时更新目标属性。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;TwoWay&lt;/td&gt;
&lt;td&gt;当源属性变化时更新目标属性，并且当目标属性变化时更新源属性。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;OneTime&lt;/td&gt;
&lt;td&gt;最初根据源属性设置目标属性，然而，其后的所有改变都会被忽略。通常如果知道属性不会变化，可通过这种模式降低开销。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;OneWayToSource&lt;/td&gt;
&lt;td&gt;与OneWay相反，当目标属性变化时更新源属性。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Default&lt;/td&gt;
&lt;td&gt;此类绑定依赖于目标属性，既可以是双向的，也可以是单向的。除非明确指定了一种绑定模式，否则所有绑定使用该方法&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 使用代码创建绑定&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Binding binding = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Binding();
binding.Source &lt;/span&gt;=&lt;span&gt; sliderFontSize;
binding.Path &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; PropertyPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Value&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
binding.Mode &lt;/span&gt;=&lt;span&gt; BindingMode.TwoWay;
lblSimpleText.SetBinding(TextBlock.FontSizeProperty,binding);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 多绑定&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;可以设置TextBlock元素从文本框中获取文本，从单独的颜色列表中选择当前前景色和背景色，等等。&lt;/p&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
      &amp;lt;TextBlock Grid.Row=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lblSimpleText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                   FontSize&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding ElementName=sliderFontSize,Path=Value}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                   Text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding ElementName=txtContent,Path=Text}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                   Foreground&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding ElementName=lstColors,Path=SelectedItem.Tag}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 
        &amp;lt;/TextBlock&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;还可链接数据绑定。例如TextBox.Text属性创建表达式以链接到TextBlock.FontSize属性，而TextBlock.FontSize又链接到Slider.Value属性的绑定表达式。&lt;/p&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 绑定更新&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;源的变化会立即影响目标，然而反向的传递从目标到源未必会立即发生。他们的行为由Binding.UpdateSourceTrigger属性控制。&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt; 
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;名称&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;PropertyChanged&lt;/td&gt;
&lt;td&gt;当目标属性变化时立即更新源。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;LostFocus&lt;/td&gt;
&lt;td&gt;当目标属性变化并且目标属性失去焦点时跟新源。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;除非调用BindingExpression.UpdateSource()方法，否则无法更新源。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Default&lt;/td&gt;
&lt;td&gt;根据目标属性的元素确定更新行为。大多数属性的默认行为是PropertyChanged,但TextBox.Text属性的默认行为是LostFocus&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;表中列出的值不影响目标的更新方式，他们仅控制OneWay或OneWayToSource模式的绑定中源的更新方式。&lt;/p&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 绑定延迟&lt;/strong&gt;&lt;/h3&gt;
&lt;div readability=&quot;12.5&quot;&gt;
&lt;p&gt;用户停止输入500毫秒后更新源对象  &lt;/p&gt;
&lt;div readability=&quot;19.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;TextBox Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding ElementName=txtSampleText,Path=FontSize,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Delay=500}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtFontSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/TextBox&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; 绑定到非元素对象&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;WPF数据绑定基础结构不能获取私有信息或公有字段，必须是公有属性中。&lt;/p&gt;
&lt;p&gt;绑定到非元素对象时，需要放弃Binding.ElementName属性，并使用以下属性之一。&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Source:该属性是指向源对象的引用，提供数据的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;RelativeSource：这是引用，使用RelativeSource对象指向源对象。有了这个附加层，在在当前元素的基础上构建引用。这似乎增加了复杂程度，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 但实际上RelativeSource属性是一种特殊工具，当编写控件模版及数据模版时是很方便的。&lt;/p&gt;
&lt;p&gt;当将同一个对象的多个属性绑定到不同的元素时，DataContext属性是非常有用的，因为可在更高层次的容器对象上，设置DataContext属性。&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; Source&lt;/strong&gt;&lt;/h3&gt;
&lt;div readability=&quot;17&quot;&gt;绑定到静态对象
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Source={x:Static SystemFonts.IconFontFamily},Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.绑定到资源&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;lt;Window.Resources&amp;gt;
        &amp;lt;FontFamily x:Key=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CoustomFont&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Calibri&amp;lt;/FontFamily&amp;gt;
    &amp;lt;/Window.Resources&amp;gt;
    &amp;lt;Grid&amp;gt;
        &amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Source={StaticResource CoustomFont},Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
    &amp;lt;/Grid&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; RelativeSource&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Title,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RelativeSource对象使用FindAncestor模式，该模式告知查找元素树知道发现AncestorType属性定义的元素类型。&lt;/p&gt;
&lt;p&gt;FindAncestor模式有4种。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;名称                 &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Self&lt;/td&gt;
&lt;td&gt;表达式绑定到同一元素的另一个属性上。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;FindAncestor&lt;/td&gt;
&lt;td&gt;表达式绑定到父元素。WPF将查找元素树直至发现期望的父元素。为了指定父元素，还必须设置AncestorType属性以指示希望查找的父元素类型。此外，还可以用AncestorLevel属性略过发现的一定的数量的特定元素。例如当一棵树中查找时，如果希望绑定到第三个ListBoxItem类型的元素，应当使用如下设置，AncestorType={x:Type ListBoxItem};并且AncestorLevel=3,从而略过前连个ListBoxItem元素。默认值是1，并在找到第一个匹配的元素停止查找。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;PreviousData&lt;/td&gt;
&lt;td&gt;表达式绑定到数据绑定列表中前一个数据项。在列表中使用这种模式。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;TemplateParent&lt;/td&gt;
&lt;td&gt;表达式绑定到应用模版的元素。只有当绑定位于控件模版或数据模版内部时，这种模式才能工作。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h3 id=&quot;esa_index_0&quot;&gt;&lt;strong&gt; DataContext属性&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; 大量元素绑定到同一对象。&lt;/p&gt;
&lt;div readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Source={x:Static SystemFonts.IconFontFamily},Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
 &amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Source={x:Static SystemFonts.IconFontFamily},Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
 &amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Source={x:Static SystemFonts.IconFontFamily},Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以改成如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;StackPanel DataContext=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x:Static SystemFonts.IconFontFamily&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
        &amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
        &amp;lt;TextBlock Text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Source}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
 &amp;lt;/StackPanel&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 02 Jan 2019 06:28:00 +0000</pubDate>
<dc:creator>SmilelyCoding</dc:creator>
<og:description>元素绑定 数据绑定最简单的形式是源对象是WPF元素而且源属性是依赖项属性。依赖项属性具有内置的更改通知支持。因此当源对象中改变依赖属性的值时，会立即更新目标对象中的绑定属性。 绑定表达式 当使用绑定表</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lovezhangyu/p/10208381.html</dc:identifier>
</item>
<item>
<title>从零开始学习PYTHON3讲义（十四）写一个mp3播放器 - 俺踏月色而来</title>
<link>http://www.cnblogs.com/andrewwang/p/10208319.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/andrewwang/p/10208319.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1545112916052&amp;amp;di=d2428f9e946cda2d7df3f0ca9ff3def8&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Finsights.thoughtworkers.org%2Fwp-content%2Fuploads%2F2015%2F07%2F718-%25E4%25BD%259F%25E8%25BE%25BE-%25E5%2585%25A8%25E6%25A0%2588%25E5%25BC%2580%25E5%258F%2591%25E8%25AF%25AD%25E8%25A8%2580Python-1024x724.png&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;从零开始python3第十四讲&quot;&gt;《从零开始PYTHON3》第十四讲&lt;/h3&gt;
&lt;p&gt;通常来说，Python解释执行，运行速度慢，并不适合完整的开发游戏。随着电脑速度的快速提高，这种情况有所好转，但开发游戏仍然不是Python的重点工作。&lt;br/&gt;大多应用是利用Python开发效率高的特点，进行游戏原型验证，或者在大的游戏系统中，使用Python进行地图、场景等定制。还有就是使用游戏开发的技术和理念,将Python用于商业视觉展示、工程效果展示。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;原型验证：指的是有了一个好的游戏想法，完整的开发出来肯定需要大量的人员、费用、时间，利用Python编程简单高效的特点，先模拟完成一部分游戏的功能，从而能够展示给投资人、客户，获取大家的认可，进而得到经费投入。&lt;br/&gt;地图、场景定制：游戏的开发肯定需要很多专业技术方面的高精尖人才，但游戏的运营、地图的设计、故事情节等。这都是商业或者艺术方面的专业强项，而这些人员不大可能使用c/c++等常用的游戏开发工具来做这些工作。因此，游戏开发过程中，通常完成Python语言的接口，让这些商业、艺术工作人员也能使用比较方便的手段进行游戏功能的调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，现代的游戏开发已经是一个大团队合作的产物，已经非常难以单打独斗完成一款游戏。所以学习游戏编程的目标并不是希望自己独立完成一个游戏，而是用这种思路来解决具体问题。&lt;br/&gt;通常游戏开发的工作分工是这样的：&lt;br/&gt;&lt;img src=&quot;https://formoon.github.io/assets/cimages/201901/python314/gameRD.png&quot; alt=&quot;gameRD&quot;/&gt;&lt;br/&gt;其中音效、画面都会由更专业的团队完成。最后由程序人员集成在游戏中。在游戏中，音乐音效、操作控制、游戏逻辑、画面几个部分，都是并行在同时进行的。它们必须共同生效，游戏才会好玩。&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;pygame编程和音乐播放&quot;&gt;Pygame编程和音乐播放&lt;/h4&gt;
&lt;p&gt;Pygame是一个强大的游戏扩展包，首先也是安装：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;#使用管理员模式启动cmd命令行，然后执行：
pip install pygame  #某些系统是pip3 install pygame&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个安装扩展包的过程，我们重复了很多遍，这个算是最后一遍了。因为Pygame是我们课程讲解的最后一个扩展包。比起来其它的软件，Python的扩展包，只要你知道了名字，安装几乎都是相同的。即便不同的操作系统，差别也不大。&lt;/p&gt;
&lt;p&gt;在这一讲，我们会采用跟以前不同的方法来讲述Pygame扩展包的使用。原因是Python有非常多的扩展包。即便官方内置的扩展包，也量非常大。如果完全等待别人教你使用这种方式是不可能的，此外即便是别人教过了，Python和扩展包的升级也非常的快。原有的使用方法，很可能现在已经不适用了。这些都要求你有自己探索的能力，在Python基本技能的学习掌握之后，根据自己的编程需求，选择相应的扩展包，查找资料、文档。在网上资料的帮助下，掌握扩展包的使用方法。&lt;/p&gt;
&lt;p&gt;从目前行业内的使用情况看，最大的障碍在于目前主要的文档来源都是英文的，这要求我们具备一定的英文阅读能力。此外，虽然版本的更新对扩展包的使用有一些差别，但这种差别毕竟不算大。所以在国内一些相对较早的文档帮助下，再对应国外新版本的文档，也能降低你的学习门槛。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;只是播放mp3，Python有很多扩展包可以选，很多操作起来也更简便。不过pygame是为了游戏设计，除了背景音乐，音效、与画面的协作也考虑的更多。所以虽然用起来复杂一些，我们依然还是选择学习用Pygame播放mp3音乐。目的，更多是期望学习者除了学习python相关的知识，也更多理解现代计算机并发多任务和多种约束条件下的编程思维。&lt;/p&gt;
&lt;p&gt;拿到一个新的扩展包，通常你有这样几种途径了解它的使用：&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;到官网查看官方文档（通常是英文）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在搜索引擎网站比如百度搜索中文的资料，这种情况比较多见，因为大多情况下，你之所以知道这个扩展包，也是在网上搜索相关资料的时候，别人介绍的。而通常这种情况下，都已经有包简单实用的介绍。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;使用Python内置的dir()/help()函数，当前还是英文资料，适合已经了解扩展包的基本架构，只是在函数选择、调用的时候查找资料&lt;/p&gt;
&lt;p&gt;所以，实际上，通过搜索引擎查找相关资料，应当是你上手的最优选择。以pygame为例，通过查找中文的资料，总结之后，应当能写出这样的程序：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;#MP3播放器

#引入扩展库
import pygame
    
#歌曲文件
file='rongHua.mp3'

#初始化声音库
pygame.mixer.init(frequency=44100)
print(&quot;播放音乐-绒花&quot;)

#载入音乐文件
pygame.mixer.music.load(file)
#播放声音
pygame.mixer.music.play()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序每一条语句都有注释，大概的框架上看，应当也是顺序执行的。有一些参数可能你还不能明白，比如&lt;code&gt;frequency=44100&lt;/code&gt;，不过应当不影响你抄过来用。这个是指定音频库使用的采样频率，44100一般已经是高保真音乐的采样频率了。通常mp3文件都是这种格式。另外忘了交代，rongHua.mp3是我们要播放的声音文件名称，记得要提前准备好，放到程序同一个目录。&lt;/p&gt;
&lt;p&gt;执行程序之后发现，诡异的事情发生了，程序只显示了一行文字：“播放音乐-绒花”，然后就退出了，并没有事情发生，也没有音乐播放出来。&lt;/p&gt;
&lt;p&gt;一开始就说过了，本讲重点不完全是播放一首音乐，而是希望能引导大家使用探索的方式，来了解一个新的扩展包如何学习和使用。所以不要等待着我说出答案，而是积极的思考，判断出现了什么问题，并且尝试去解决。&lt;/p&gt;
&lt;p&gt;首先要说明的是，程序本身引入pygame库、库的初始化还有播放语句语句本身都并没有什么错误。通常在网上查找资料的时候，只要认真阅读，比较容易保证这一点。难以马上学会并应用到编程中的，是关于某个库“架构”方面的内容，也就是影响程序结构方面的内容。如果觉得这句话比较抽象的话，你可以回忆一下上一讲我们尝试过的flask网络编程框架。框架、架构，这两个词在这里基本可以划等号了。&lt;/p&gt;
&lt;p&gt;我们的程序没有能播放出来音乐，也是这方面的原因。&lt;br/&gt;通常游戏程序要包含至少4部分的内容，我们用本讲开始的那张图来说明，音乐、画面、操控、逻辑这四部分内容是并行运行，相互配合，才能展现给用户一个图文并茂、流畅、吸引人的游戏。&lt;br/&gt;因此作为游戏的一部分，音乐的播放也不可能像我们前面学过的绘图、计算等操作一样，在音乐没有播放完成前，程序停止在那里一直等待。事实上通常游戏的做法都是，发出播放音乐的命令之后，命令本身马上返回，让程序有能力并行去处理按键输入、绘图等动作。&lt;br/&gt;而在我们上面的程序中，播放这个命令肯定是发出去了，但没有等音乐声响起，程序就已经结束退出了。程序的结束退出将自动的释放程序打开的各项资源，清理运行的痕迹，从而音乐也就不可能再放出来了。&lt;br/&gt;这仅仅是我们推测分析的结果，我们来证明一下，方法就是在程序最后增加一行语句：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;#程序等待5秒钟
pygame.time.delay(1000*5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用这样语句的目的是，如果我们上面的推测成立，那肯定要对程序做结构上的调整。这个工作量会比较大，所以我们先使用简单的语句来验证一下我们的思考。&lt;br/&gt;再次运行程序，你会听到音乐响了5秒钟，然后程序退出，音乐也停止了。&lt;br/&gt;这基本可以证明，我们的思考正确。此外似乎还有些别的问题，比如音乐一开始有一个“破音”，这让人感觉不好。而且程序似乎有的时候能正常播放，有的时候还是不稳定，无法播放成功。&lt;br/&gt;下面要如何改进程序呢？&lt;/p&gt;
&lt;p&gt;通常我们会继续在网上搜索pygame模块使用的案例，阅读别人的程序，有的时候运气好，你碰到的程序代码，跟你想写的代码是完全相同的功能，这时候你可以拷贝过来直接使用。但大多时候，你只能找到功能相近的代码，所以仍然需要你阅读别人的程序，并从其中学习对你有用的部分。&lt;br/&gt;比如，你可能搜索到我们第一讲演示的游戏，其中当然也有声音处理的部分，你会重点阅读这部分的代码，来找出同自己程序的区别，以求解决问题。&lt;/p&gt;
&lt;p&gt;在这个过程中，我们又做出了一些判断，当然这些判断依然需要大量程序的经验，所以并不能要求初学者也能轻易做到。但复杂的做不到，你可以从简单的入手，逐渐积累。这里只是想告诉你正确的学习思路：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Pygame作为一个游戏开发库，声音的播放需要依赖一个窗口，也就是游戏的画面。没有窗口的情况下，播放进程无法稳定的工作。这一项原因推测来自于，很多网上找到的代码，在声音处理上并没有太多不同，但能正常工作，所以会有这样的猜测。&lt;/li&gt;
&lt;li&gt;Python的各个功能，初始化一般意味着建立各项必须的资源，完成工作后，退出之前，应当释放掉这些资源，特别是系统公用的声音、显示等，如果程序只是退出，没有释放，就可能导致再次运行的时候，声音无法正确完成初始化，毕竟一个系统的设备，是被所有程序所公用的。&lt;/li&gt;
&lt;li&gt;系统本身原因，不能快速的连续的初始化及释放，两次运行之间应当等待片刻。这个判断，在多次运行程序，查找规律的过程中，能很快的发现，当然需要你足够的细心观察。&lt;/li&gt;
&lt;li&gt;“破音”是因为在声音设备初始化后，尚未稳定之前就开始发送音频数据，此时的数据无法被正常解析，造成破音。这仅为猜测，需要实验的证实。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;验证思考最好的办法就是修改程序，然后再次运行实验，因此我们再完成一版程序：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;#引入扩展库
import pygame
    
#歌曲文件
file='rongHua.mp3'

#初始化pygame显示库
pygame.display.init()
#打开一个窗口
screen = pygame.display.set_mode([200,100])
#初始化pygame声音库
pygame.mixer.init(frequency=44100)
print(&quot;播放音乐-绒花&quot;)
#载入音乐文件
pygame.mixer.music.load(file)
#保存当前音量
v = pygame.mixer.music.get_volume()
#设置为静音，防止开始的爆破音
pygame.mixer.music.set_volume(0)
#播放声音
pygame.mixer.music.play()
#延时0.2秒打开声音，避过爆破音
pygame.time.delay(200)
pygame.mixer.music.set_volume(v)
#播放5秒钟
pygame.time.delay(1000*5)
#停止播放
pygame.mixer.music.stop()
#退出声音库和显示库
pygame.mixer.quit()
pygame.display.quit()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;每一行代码都有注释，我只讲解跟上一版不同的代码：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;初始化的时候打开一个窗口，虽然什么也没有显示，但让播放器有了载体。&lt;/li&gt;
&lt;li&gt;一开始关闭声音，延时再打开音量，避开一开始的爆破音。&lt;/li&gt;
&lt;li&gt;程序退出前关闭播放，释放各项资源。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;此外这些工作中，用到了很多新的函数，这些函数一开始你并不可能知道。这些函数的学习一般是两个方向，一是概要的浏览pygame的手册或者帮助，在心中有一个粗的概念，这样用到什么功能的时候，你会想起来可能有某个函数能完成这个功能，然后再精细查看。第二是希望用到某个功能，在网上查找使用Python或者pygame如何做到这个功能。当然还有另外一种渠道，有可能你直接搜索到了功能相近的代码，从中间直接抄过来使用。&lt;/p&gt;
&lt;p&gt;试运行之后我们开心的发现，稳定性问题和爆破音都解决了，剩下最关键的，如何完整的播放音乐文件？&lt;br/&gt;这涉及到了我们前面讲过的程序结构问题，也是一个框架型的程序库对程序结构的要求。这一部分一般没有好办法，只能通过阅读官方的文档或者阅读其它程序的成熟代码来获取，这个过程一般会较长。好在我们大多情况下不会上来就碰到这么复杂的问题，都是循序渐进。并且大多的扩展包只是增加功能性的函数，并不要求程序的结构有多少改变。&lt;/p&gt;
&lt;p&gt;我们通过一张对比图来说明pygame对程序结构的要求：&lt;br/&gt;&lt;img src=&quot;https://formoon.github.io/assets/cimages/201901/python314/python3-14.001.jpeg&quot; alt=&quot;python3-14.001&quot;/&gt;&lt;br/&gt;传统程序虽然我们不怎么熟悉声音处理，但结构我们都比较熟悉。程序中可能有循环，但总体是串行执行的，完成一件事情，才去做另外一件。&lt;br/&gt;从外观上看，右侧的游戏程序结构，跟左侧不过多了一个循环。但你要记得，这里面每一项都是并行执行的，每一个步骤并不会等待这一项工作做完，就会返回接受新的命令，所以程序的声音、图像、程序逻辑、键盘控制，才可能一起发生作用。&lt;br/&gt;这种并行处理的程序，同传统的程序比，有很多不可协调的理念区别，pygame为了做到并行，采用了“事件驱动”的理念来完成这种控制。&lt;br/&gt;事件驱动实际是存在很久的编程方式了，一般传统的Windows程序，都使用微软公司提供的消息循环，来处理所有的窗口事件。Python pygame的事件处理，也是采用类似的机制。&lt;br/&gt;总结一下使用事件驱动的方式来编写pygame程序的要点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;声音、图像、键盘鼠标输入、游戏逻辑必须并行进行，任何一个局部不能长时间无限制的执行（网络编程实际也是并行的，但在小型网站项目中，没有体现那么清晰和严格）&lt;/li&gt;
&lt;li&gt;各个环节之间的同步、配合，都是通过互相发送消息的方式来完成的。从独立一个功能（模块）角度来看，往往是得到某个消息之后，开始进行某项任务，这种方式叫做事件驱动&lt;/li&gt;
&lt;li&gt;各种消息都是通过核心的消息传递模块完成的，程序的主循环一般就是不停的读取消息，根据消息的定义分发给不同模块，并执行不同功能，也称为消息循环&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们根据刚才这些理念，重新改写程序，这个程序最终形成code4.py，这里只介绍重点的消息循环部分：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;#... 初始化及基本播放代码忽略...
#自定义一条消息(一个事件)用于表示播放结束
#pygame.USEREVENT是pygame中预定义的用户消息起始值
MUSIC_END = pygame.USEREVENT + 1
#设置当前音乐播放完成后，发送自定义的消息
pygame.mixer.music.set_endevent(MUSIC_END)

#延时0.2秒打开声音，避过爆破音
pygame.time.delay(200)
pygame.mixer.music.set_volume(v)

#定义一个退出程序标志
requireQuit = False
#程序主循环
while not requireQuit:
    #循环接受各种事件
    for event in pygame.event.get():
        #如果是自定义的播放完成消息
        if event.type == MUSIC_END:
            requireQuit=True  #退出
            break
        #界面窗口菜单关闭申请
        elif event.type == pygame.QUIT:
            requireQuit=True
            break
        #有键盘抬起
        elif event.type == pygame.KEYUP:
            #q键
            if event.key == pygame.K_q:
                requireQuit=True
                break
#... 退出操作 ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序中，我们自己定义了一条消息。所谓消息，并不是平常人类喜闻乐见的一条短信或者语音，其实就是一个整数数字。为了容易记忆，我们当然自己定义了一个变量名来代表它，但实际它就是一个数字。&lt;br/&gt;原因是对计算机来讲，其实一切都是数字，我们用一个字符串反而让计算机执行的更慢。&lt;br/&gt;随后，因为我们的消息循环中肯定还可能嵌套循环，一个break语句只能打破内部的循环，并不能让外部循环也退出，所以我们定义了一个bool的变量，来表示程序是否需要退出循环。&lt;br/&gt;这里的消息循环从技术上并没有啥难度，主要是你需要适应这么多新的函数和预定义的变量（这里当然当做常量来用，比如表示pygame需要退出）。&lt;br/&gt;在内部循环中，我们判断了三种可能需要退出的消息。一是自己定义的，如果音乐播放结束，应当退出；二是用户用鼠标关闭窗口，程序应当退出；三是按q键表示用户希望退出播放。&lt;br/&gt;按下按键游戏采取相应动作是很常见的游戏处理工作，我们在这里等待用户按下按键然后再松开的这一刻退出，这样防止用户按下q键一直没有松手所导致的程序退出后，屏幕上还会出现很多q字符的情况。&lt;/p&gt;
&lt;p&gt;现在的程序已经能正常的播放音乐了，实际上我们的程序还能进一步优化。比如1.添加播放的时间显示；2.向前向后跳转播放。&lt;br/&gt;这两个功能都可以在消息循环中处理，这样程序才是并行的。现在你可能感觉到了，实际上消息循环中，才是程序的主要逻辑。的确如此，其实所有的游戏基本都是在消息循环中做所有的主要工作，当然具体工作细节，都是由已经定义好的函数或叫子程序来具体执行完成的，在主循环中，只是对这些函数的组织、管理和调用。&lt;/p&gt;
&lt;p&gt;显示播放位置：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;#程序主循环
while not requireQuit:
    #获取当前播放位置
    pos=pygame.mixer.music.get_pos()
    #显示
    print(&quot;Playing:&quot;, pos,end='\r')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;消息循环中，在按键部分添加代码：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;  #如果是向右键，则前跳10秒
   elif event.key == pygame.K_LEFT:
      pygame.mixer.music.set_pos(pos/1000-10)
  #如果是向左键，则后跳10秒
   elif event.key == pygame.K_RIGHT:
      pygame.mixer.music.set_pos(pos/1000+10)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样的功能增加，依赖于你对pygame扩展库越来越熟悉，通过阅读文档，发现pygame扩展库能提供什么样的功能。而这个功能你又需要，就可以加入到程序中。&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;练习时间&quot;&gt;练习时间&lt;/h4&gt;
&lt;p&gt;其实本讲可以说从开始到现在都是挑战，因此没有再设置单独的挑战环节。&lt;/p&gt;
&lt;p&gt;我们直接进入练习的环节：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;以本讲前面最终版代码code5.py为蓝本，修改程序，实现由命令行参数接受mp3文件名，并播放&lt;/li&gt;
&lt;li&gt;除了q键之外，请设定ESC键也作为退出按键。提示，ESC键的代码为：pygame.K_ESCAPE&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h4 id=&quot;本讲小结&quot;&gt;本讲小结&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;python并不是很适合进行游戏编程，但游戏编程的学习能让你的程序更友好，并具有丰富的表现力&lt;/li&gt;
&lt;li&gt;并行、事件驱动的编程思想，是现代程序开发的前沿思想，对于提高程序的效率和稳定性有重要的帮助&lt;/li&gt;
&lt;li&gt;在一个新模块的学习中，循序渐进，逐步完善代码是常用的一种手段。在本讲，我们更侧重讲述，你接触到一个新的扩展包，如何查找资料、分析问题，最终掌握它的使用&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h4 id=&quot;练习答案&quot;&gt;练习答案&lt;/h4&gt;
&lt;p&gt;请参考mp3Player.py程序。&lt;br/&gt;（所有本系列中出现、使用过的源码将会在连载完成后统一整理提供下载。）&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 06:19:00 +0000</pubDate>
<dc:creator>俺踏月色而来</dc:creator>
<og:description>《从零开始PYTHON3》第十四讲 通常来说，Python解释执行，运行速度慢，并不适合完整的开发游戏。随着电脑速度的快速提高，这种情况有所好转，但开发游戏仍然不是Python的重点工作。 大多应用是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/andrewwang/p/10208319.html</dc:identifier>
</item>
<item>
<title>Java集合-08HashMap源码解析及使用实例 - Jzedy</title>
<link>http://www.cnblogs.com/JzedyBlogs/p/10208295.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JzedyBlogs/p/10208295.html</guid>
<description>&lt;h2 id=&quot;hashmap-简介&quot;&gt;HashMap 简介&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;HahMap是基于hash表的Map接口实现。该实现提供所有可选的映射操作，且允许key和value为null。同时&lt;br/&gt;它不是线程安全以及不能保证有序。初始容量(initial capacity)和加载因子(initial capacity)是影响&lt;br/&gt;HashMap的两个因素。容量表示hash表中桶(buckets)的数量，初始容量就是表示hash表在创建时候容量大小。&lt;br/&gt;加载因子就是hash表在其容量自动增加时候被允许填满程度的指标。当hash表中条目数超过当前hash表容量&lt;br/&gt;与加载因子的乘积时候，hash表将进行rehash操作(重建内部数据结构)，从而hash表的桶数目大约增长两倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;通常加载因子为0.75，这个值是时间和空间消耗的一个平衡值。过高的值降低了空间消耗但是却增加了查询成本。&lt;br/&gt;在设置初始化容量时候需要考虑Map中的条目数和加载因子，以便减少rehash操作。如果初始容量的值大于最大条目数除以加载因子，&lt;br/&gt;将不会发生rehash操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;如果你要使用HashMap存储映射关系时候，有一个充足的容量是比让HashMap自动rehash来增加容量更加有效率。需要提醒的是&lt;br/&gt;使用具有相同的hashCode()的键是会降低hash表的表现。为了避免hash碰撞，键如果是Comparable的话，对解开结有一定的帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;因为HashMap不是线程安全的，在多线程并发编程时候，如果有至少一个线程在对HashMap结构修改(结构修改指的是添加&lt;br/&gt;或者减少映射关系，对于原来有的一个映射改变它的值不是结构上的修改)，必须保证同步化操作。通常来说使用某一对象加锁，&lt;br/&gt;如果没有这么一个对象的话，该HashMap需要用Collections#synchronizedMap对其重新包裹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hashmap-构造函数&quot;&gt;HashMap 构造函数&lt;/h2&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;-2&quot;&gt;
&lt;p&gt;public HashMap()&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;定义一个初始容量为16，加载因子为0.75的HashMap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;public HashMap(int initialCapacity)&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;定义一个指定初始容量，加载因子为0.75的HashMap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;public HashMap(int initialCapacity, float loadFactor)&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;定义一个指定初始容量和加载因子的HashMap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;public HashMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m)&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;定义一个初始容量为不小于(m.size()/0.75+1)的2的最小指数，加载因子为0.75,包含了m中映射关系的HashMap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;hashmap-结构图&quot;&gt;HashMap 结构图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Jzedy/Z-books/blob/master/src/main/image/HashMap.png?raw=true&quot; alt=&quot;HashMap结构图&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;table&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于存储数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;
&lt;p&gt;entrySet&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;entrySet()方法的缓存值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;size&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;map中映射个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modCount&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/JzedyBlogs/p/10136772.html&quot;&gt;fail-fast&lt;/a&gt;判断使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;
&lt;p&gt;threshold&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;resize操作的阙值，大小为capacity * load factor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loadFactor&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加载因子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;hashmap-源码分析&quot;&gt;HashMap 源码分析&lt;/h2&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;8&quot;&gt;Node
&lt;ul&gt;&lt;li&gt;hash表中每个节点存储对象&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;static class Node&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt;{
  final int hash;
  final K key;
  V value;
  Node&amp;lt;K,V&amp;gt; next;

  Node(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) {
      this.hash = hash;
      this.key = key;
      this.value = value;
      this.next = next;
  }
  //省略set、get等方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;/li&gt;
&lt;li&gt;扩容方法&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;final Node&amp;lt;K,V&amp;gt;[] resize() {
    Node&amp;lt;K,V&amp;gt;[] oldTab = table;//扩容前的hash表指向oldTab
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    int oldThr = threshold;
    int newCap, newThr = 0;
    if (oldCap &amp;gt; 0) {//超过最大值，后续不再扩容
        if (oldCap &amp;gt;= MAXIMUM_CAPACITY) {
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }//没有超过最大值，容量扩大一倍
        else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
                 oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
            newThr = oldThr &amp;lt;&amp;lt; 1; // double threshold
    }
    else if (oldThr &amp;gt; 0) // initial capacity was placed in threshold
        newCap = oldThr;
    else {               // zero initial threshold signifies using defaults
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    if (newThr == 0) {//设置扩容阙值
        float ft = (float)newCap * loadFactor;
        newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
                  (int)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})
        Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
    table = newTab;
    if (oldTab != null) {//原来的数据移动到新的容器里面
        for (int j = 0; j &amp;lt; oldCap; ++j) {
            Node&amp;lt;K,V&amp;gt; e;
            if ((e = oldTab[j]) != null) {
                oldTab[j] = null;
                if (e.next == null)
                    newTab[e.hash &amp;amp; (newCap - 1)] = e;
                else if (e instanceof TreeNode)
                    ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
                else { // preserve order
                    Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
                    Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
                    Node&amp;lt;K,V&amp;gt; next;
                    do {
                        next = e.next;
                        if ((e.hash &amp;amp; oldCap) == 0) {
                            if (loTail == null)
                                loHead = e;
                            else
                                loTail.next = e;
                            loTail = e;
                        }
                        else {
                            if (hiTail == null)
                                hiHead = e;
                            else
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    if (loTail != null) {
                        loTail.next = null;
                        newTab[j] = loHead;
                    }
                    if (hiTail != null) {
                        hiTail.next = null;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    return newTab;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;添加方法&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}

static final int hash(Object key) {//hash函数，用于索引定位
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16);
}

final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; int n, i;
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;//存储数据Node没有初始化，此时初始化
    if ((p = tab[i = (n - 1) &amp;amp; hash]) == null)//(n-1)&amp;amp;hash用于定位，若为null，表明Node数组该位置没有Node对象，即没有碰撞
        tab[i] = newNode(hash, key, value, null);//对应位置添加Node对象
    else {//表明对应位置是有Node对象的，hash碰撞了
        Node&amp;lt;K,V&amp;gt; e; K k;
        if (p.hash == hash &amp;amp;&amp;amp;
            ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))//碰撞了，且桶中第一个节点就匹配
            e = p;//记录第一个节点
        else if (p instanceof TreeNode)//碰撞了，第一个节点没有匹配上，且桶为红黑树结构，调用红黑树结构方法添加映射
            e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
        else {//碰撞了 不为红黑树结构，那么是链表结构
            for (int binCount = 0; ; ++binCount) {
                if ((e = p.next) == null) {//如果到了链表尾端
                    p.next = newNode(hash, key, value, null);//链尾添加映射
                    if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st//链表长度大于TREEIFY_THRESHOLD值，转换为红黑树结构
                        treeifyBin(tab, hash);
                    break;
                }
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))//如果找到重复的key，判断该节点和要插入的元素key是否相等，如果相等，出循环
                    break;
                p = e;//为了遍历，和e = p.next结合来遍历
            }
        }
        if (e != null) { // existing mapping for key//key映射的节点不为空
            V oldValue = e.value;//取出节点值记录为老的节点值
            if (!onlyIfAbsent || oldValue == null)//如果onlyIfAbsent为false，或者老的节点值为null，赋予新的值
                e.value = value;
            afterNodeAccess(e);//访问后回调
            return oldValue;
        }
    }
    ++modCount;//结构性修改记录
    if (++size &amp;gt; threshold)//判断是否需要扩容
        resize();
    afterNodeInsertion(evict);//插入后回调
    return null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;put流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;1.通过hash函数计算key的hash值，调用putVal方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;2.如果hash表为空，调用resize()方法创建一个hash表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;3.根据hash值索引hash表对应桶位置，判断该位置是否有hash碰撞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;4&quot;&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;3.1 没有碰撞，直接插入映射入hash表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;4&quot;&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;3.2 有碰撞，遍历桶中节点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote readability=&quot;4&quot;&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;3.2.1 第一个节点匹配，记录该节点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote readability=&quot;4.5&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;3.2.2 第一个节点没有匹配，桶中结构为红黑树结构，按照红黑树结构添加数据，记录返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;3.2.3 第一个节点没有匹配，桶中结构是链表结构。遍历链表，找到key映射节点，记录，退出循环。&lt;br/&gt;没有则在链表尾部添加节点。插入后判断链表长度是否大于转换为红黑树要求，符合则转为红黑树结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote readability=&quot;4.5&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;3.2.4 用于记录的值判断是否为null，不为则是需要插入的映射key在hash表中原来有，替换值，返回旧值putValue方法结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;4.结构性修改记录，判断是否需要扩容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code&gt;public V get(Object key) {
    Node&amp;lt;K,V&amp;gt; e;
    return (e = getNode(hash(key), key)) == null ? null : e.value;
}

final Node&amp;lt;K,V&amp;gt; getNode(int hash, Object key) {
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first, e; int n; K k;
    if ((tab = table) != null &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
        (first = tab[(n - 1) &amp;amp; hash]) != null) {//hash表存在且长度大于0且对应的key定位的桶不为null
        if (first.hash == hash &amp;amp;&amp;amp; // always check first node
            ((k = first.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
            return first;//第一个节点符合 返回第一个
        if ((e = first.next) != null) {//第一个不符合，如果链表还有下一个节点 
            if (first instanceof TreeNode)//为红黑树结构
                return ((TreeNode&amp;lt;K,V&amp;gt;)first).getTreeNode(hash, key);//按照红黑树结构查找
            do {//遍历链表，查询hash 和equals相等的，有则返回，一直到链尾
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;修改方法&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public V replace(K key, V value) {
    Node&amp;lt;K,V&amp;gt; e;
    if ((e = getNode(hash(key), key)) != null) {//根据key查询  有则修改
        V oldValue = e.value;
        e.value = value;
        afterNodeAccess(e);
        return oldValue;
    }
    return null;
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;remove方法&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public V remove(Object key) {
    Node&amp;lt;K,V&amp;gt; e;
    return (e = removeNode(hash(key), key, null, false, true)) == null ?
        null : e.value;
}

final Node&amp;lt;K,V&amp;gt; removeNode(int hash, Object key, Object value,
                           boolean matchValue, boolean movable) {
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; int n, index;
    if ((tab = table) != null &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
        (p = tab[index = (n - 1) &amp;amp; hash]) != null) {//hash表存在且长度大于0且对应的key定位的桶不为null
        Node&amp;lt;K,V&amp;gt; node = null, e; K k; V v;
        if (p.hash == hash &amp;amp;&amp;amp;
            ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
            node = p;//判断第一个节点，符合记录
        else if ((e = p.next) != null) {//第一个节点不符合
            if (p instanceof TreeNode)//判断是否为红黑树结构
                node = ((TreeNode&amp;lt;K,V&amp;gt;)p).getTreeNode(hash, key);
            else {//为链表结构，遍历
                do {
                    if (e.hash == hash &amp;amp;&amp;amp;
                        ((k = e.key) == key ||
                         (key != null &amp;amp;&amp;amp; key.equals(k)))) {
                        node = e;
                        break;
                    }
                    p = e;
                } while ((e = e.next) != null);
            }
        }
        if (node != null &amp;amp;&amp;amp; (!matchValue || (v = node.value) == value ||
                             (value != null &amp;amp;&amp;amp; value.equals(v)))) {//判断是否符合有要移除的node
            if (node instanceof TreeNode)//为红黑树结构
                ((TreeNode&amp;lt;K,V&amp;gt;)node).removeTreeNode(this, tab, movable);
            else if (node == p)//第一个节点就是符合的
                tab[index] = node.next;//删除第一个节点(第一个节点指向null，或者指向原来第二个节点)
            else
                p.next = node.next;//链表结构，指向后面的一个节点
            ++modCount;
            --size;
            afterNodeRemoval(node);
            return node;
        }
    }
    return null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hashmap遍历&quot;&gt;HashMap遍历&lt;/h2&gt;
&lt;ul&gt;&lt;li readability=&quot;-2&quot;&gt;
&lt;p&gt;遍历HashMap键值对&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;根据map.entrySet()获得键值对Set集合，后续遍历&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;for (Map.Entry&amp;lt;Integer, String&amp;gt; entry : maps.entrySet()) {
    System.out.println(entry.getKey()+&quot;:&quot;+entry.getValue());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;for (Integer integer : maps.keySet()) {
    System.out.println(integer);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;for (String value : maps.values()) {
    System.out.println(value);
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 02 Jan 2019 06:19:00 +0000</pubDate>
<dc:creator>Jzedy</dc:creator>
<og:description>HashMap 简介 HahMap是基于hash表的Map接口实现。该实现提供所有可选的映射操作，且允许key和value为null。同时 它不是线程安全以及不能保证有序。初始容量(initial c</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JzedyBlogs/p/10208295.html</dc:identifier>
</item>
<item>
<title>2019向前看 - venicid</title>
<link>http://www.cnblogs.com/venicid/p/10208315.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/venicid/p/10208315.html</guid>
<description>&lt;p&gt;仪式感&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;现在觉得干什么要有点仪式感，或者说给自己个决心，画个分割线&lt;br/&gt;让自己能够真正的干点什么，比如&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1196120/201901/1196120-20190102141707930-2016707741.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1196120/201901/1196120-20190102141719761-609599773.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;又是陪伴自己学生时期的一款游戏。&lt;br/&gt;既然自己不能控制自己&lt;br/&gt;那就这样吧&lt;br/&gt;就像当初的DNF一样&lt;br/&gt;分解了全部的装备&lt;br/&gt;才戒掉了&lt;br/&gt;庆幸的，还小挣了1000多元&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;为什么要写？早上看到&lt;/p&gt;
&lt;p&gt;删掉了游戏，逛起来博客园&lt;br/&gt;看到大家都在总结，有句话这样些&lt;br/&gt;不写年终总结的不是好的IT人员&lt;br/&gt;或许放到阴历过年总结也可以&lt;/p&gt;
&lt;p&gt;不要把那些心中得小目标写在你的小本子上，藏在你的心中&lt;br/&gt;而是写在各个公共平台上，写在别人得心中，他们像极了镜子&lt;br/&gt;每次看到朋友们的时候，镜子们仿佛在说，“看，这个傻逼计划还没有完成”&lt;/p&gt;
&lt;h2 id=&quot;不要回忆&quot;&gt;2018不要回忆&lt;/h2&gt;
&lt;p&gt;总是告诫自己不要回忆&lt;br/&gt;用自来也老师的话说&lt;br/&gt;“回首往昔，我的人生尽是失败”&lt;/p&gt;
&lt;h3 id=&quot;半年实习期&quot;&gt;1、半年实习期&lt;/h3&gt;
&lt;p&gt;实习开始&lt;br/&gt;自己还是没有找到&lt;br/&gt;最终还是在导师的帮助下&lt;br/&gt;找到了个linux运维的&lt;br/&gt;现在看到别人都说什么猪场熊厂的实习、offer&lt;br/&gt;觉得也许这就是因果&lt;/p&gt;
&lt;p&gt;每天就是检查服务器硬件&lt;br/&gt;整理exe表格&lt;br/&gt;没有代码&lt;br/&gt;没有需求&lt;br/&gt;也没有linux命令&lt;br/&gt;只有跑腿和图像界面&lt;/p&gt;
&lt;p&gt;整理了快半年的表格&lt;br/&gt;说了个借口&lt;br/&gt;辞职学python了&lt;/p&gt;
&lt;p&gt;那时候还没有梦想&lt;br/&gt;还不知道以后干什么&lt;/p&gt;
&lt;h3 id=&quot;半年luffycity期&quot;&gt;2、半年Luffycity期&lt;/h3&gt;
&lt;p&gt;在找实习，被各种吊打&lt;br/&gt;觉得自己以后就只能linux运维了吗&lt;br/&gt;狠下心，报了luffycity学习python&lt;/p&gt;
&lt;p&gt;遇到了皇老师、必胜老师&lt;br/&gt;他们有些缺点，但我们不过都是过路人吗&lt;br/&gt;给钱就给服务，还算可以的&lt;/p&gt;
&lt;p&gt;Alex金角大王&lt;br/&gt;听他的鸡汤&lt;br/&gt;好像觉得触摸到了什么&lt;br/&gt;大千世界，成名立业&lt;br/&gt;这才是三尺男儿该干的，向往的&lt;/p&gt;
&lt;p&gt;实习结束，每天学习python&lt;br/&gt;也许知道自己菜了吧&lt;br/&gt;每天学习到凌晨&lt;br/&gt;反正很充实&lt;/p&gt;
&lt;p&gt;从此20多年的迷茫期结束了&lt;br/&gt;算找到了人生的大方向了&lt;/p&gt;
&lt;h3 id=&quot;校招期间&quot;&gt;3、校招期间&lt;/h3&gt;
&lt;p&gt;校招开始了&lt;br/&gt;前期被吊打&lt;br/&gt;后面认真复习基础知识&lt;br/&gt;算法不会，一直不会&lt;br/&gt;最后踩了狗屎运&lt;br/&gt;得到了第1个offer，太低了，不去&lt;br/&gt;然后就是第2个，工资不错，小公司&lt;/p&gt;
&lt;p&gt;接着，我就膨胀了&lt;br/&gt;成了废物了,后面就没好好复习算法&lt;br/&gt;玩游戏lol了&lt;br/&gt;现在看来，这又是因果问题吧&lt;/p&gt;
&lt;p&gt;班级群，我很活跃，分享各种内推，招聘信息&lt;br/&gt;还有自己总结的计算机基础知识博客&lt;br/&gt;收到的反馈很少，但是又不好说什么&lt;br/&gt;群是自己建立的&lt;br/&gt;拥抱开源，分享精神&lt;br/&gt;放在我们这一代，或者说我们班&lt;br/&gt;不过是掩耳盗铃罢了&lt;br/&gt;也许这就是人心&lt;/p&gt;
&lt;p&gt;算法，自己终究是不入门，&lt;br/&gt;也没开窍，最后，&lt;br/&gt;也没人管我&lt;br/&gt;自己找方法，找视频&lt;br/&gt;终究是徒劳&lt;br/&gt;为什么班级群，或者说没有人助我&lt;br/&gt;又该审视自己了&lt;/p&gt;
&lt;p&gt;我这样中庸的人&lt;br/&gt;固收黑白的人&lt;br/&gt;坚持规则的人&lt;br/&gt;不会聊天的人&lt;br/&gt;或者说天真的，幼稚的&lt;br/&gt;在校招中注定是个悲剧&lt;/p&gt;
&lt;p&gt;HR不会喜欢没有创新的人，只知道固收规则的人&lt;br/&gt;书本教的是这些呀，阅历还是太少，年轻吧&lt;/p&gt;
&lt;p&gt;好多优秀的人，他们并不是道德高尚的人&lt;br/&gt;被道德所束缚下的我们，往往是会吃亏的&lt;/p&gt;
&lt;p&gt;最后算法，与数据结构成了自己怎么也学不会的&lt;br/&gt;那些基础知识，几天就搞定了&lt;br/&gt;重点错了&lt;/p&gt;
&lt;p&gt;最后听大家谈论起我，说我offer多的都不知道如何去选&lt;br/&gt;呵呵一笑，心虚的不敢谈论，不想谈论&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;总结下：&lt;br/&gt;方向不对，努力白费&lt;br/&gt;非黑即白，不可取&lt;br/&gt;初探人心险恶，太幼稚&lt;br/&gt;阅历太少，太天真&lt;/p&gt;
&lt;h3 id=&quot;剧变&quot;&gt;4、剧变&lt;/h3&gt;
&lt;p&gt;如果说前面的不算什么的话&lt;br/&gt;10.10号就是10号的，小米面试&lt;br/&gt;给我打击的是那种&lt;br/&gt;有人去世的那种感觉&lt;br/&gt;不真实&lt;br/&gt;感觉自己包了层“空气蛹”&lt;br/&gt;恍如隔世的那种&lt;br/&gt;全都是假的&lt;br/&gt;不愿意相信&lt;/p&gt;
&lt;p&gt;数据结构与算法终究，我终究还是输了。&lt;br/&gt;与小米擦肩而过的那种&lt;br/&gt;就像梦想，就像命运如此&lt;/p&gt;
&lt;p&gt;如果说因果的话&lt;br/&gt;那就是自己拿到offer后&lt;br/&gt;膨胀的没有去学习&lt;br/&gt;国庆假全部完了LOL了&lt;/p&gt;
&lt;p&gt;自己也是侥幸心理&lt;br/&gt;觉得只会靠排序算法之类的&lt;/p&gt;
&lt;p&gt;另一方面，和我一起去的&lt;br/&gt;实验室的邻桌，女生&lt;br/&gt;她拿到了小米的offer&lt;br/&gt;可是，她说的自己很菜的&lt;br/&gt;她说自己排序都不会写&lt;br/&gt;她说自己...&lt;br/&gt;一切都是她说&lt;/p&gt;
&lt;p&gt;她的优秀，我之前是知道的&lt;br/&gt;在她的每天，我很菜的话语中&lt;br/&gt;以为自己很厉害&lt;br/&gt;语言使人麻木&lt;br/&gt;她很优秀，情商很高，会说话&lt;br/&gt;本科是辩论赛的最佳辩手，校史馆讲解员&lt;br/&gt;本科就会java，各种奖学金拿到手软&lt;br/&gt;研究生就不用说了&lt;br/&gt;努力你根本看不见&lt;br/&gt;每天就是示弱，扮猪吃老虎，我很菜，我什么都不会&lt;br/&gt;好像现在听讨厌与这样的人打交道的&lt;br/&gt;心累&lt;/p&gt;
&lt;p&gt;国庆节之前，我有offer，她还没有&lt;br/&gt;国庆节之后，我还是只有那个offer,她就收获了n+1个,都是大厂&lt;/p&gt;
&lt;p&gt;之后的之后&lt;br/&gt;我再也不说自己是米粉了&lt;br/&gt;之后的之后&lt;br/&gt;我再也不敢大声说话了&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;总结：&lt;br/&gt;又是人心&lt;br/&gt;幼稚，天真的你快快长大&lt;br/&gt;难受，想哭了&lt;/p&gt;
&lt;p&gt;忘不了的一幕：&lt;br/&gt;面试官：小米这次的招聘城市主要在南京武汉，你的意向在北京上海&lt;br/&gt;我：如果是小米的话，我会去的&lt;br/&gt;我俩会心一笑&lt;/p&gt;
&lt;h3 id=&quot;寒冬期&quot;&gt;5、寒冬期&lt;/h3&gt;
&lt;p&gt;之后&lt;br/&gt;我会知耻而后勇&lt;br/&gt;之后&lt;br/&gt;我会努力学习数据结构与算法&lt;br/&gt;之后&lt;br/&gt;我会好好准备春招&lt;/p&gt;
&lt;p&gt;你看错了，我也想错了&lt;br/&gt;这些不过是flag而已&lt;br/&gt;这些我统统没有实现&lt;/p&gt;
&lt;p&gt;2018年的10月到12月&lt;br/&gt;或者说到2019年元旦假期&lt;br/&gt;我都是在玩LOL游戏&lt;br/&gt;中间断断续续的删除了游戏&lt;br/&gt;又经受不住诱惑&lt;br/&gt;重新安装了&lt;/p&gt;
&lt;p&gt;每天的日子就是&lt;br/&gt;早上10点到实验室&lt;br/&gt;看新闻，逛B站，微博热搜看明星，吃瓜&lt;br/&gt;中午，看B站，看电影，打游戏，谎称培养睡意&lt;br/&gt;晚上有时候去健身房，有时候继续打游戏&lt;/p&gt;
&lt;p&gt;曾经的python也不学习&lt;br/&gt;手机，电脑都是娱乐活动&lt;br/&gt;每次周一觉得要重新做人&lt;br/&gt;终究还是觉得呆在舒适区挺好的&lt;br/&gt;安逸的生活，我很喜欢，那些老员工也是很喜欢的&lt;br/&gt;我还没入职，已经是老员工这样的了&lt;br/&gt;每天的学习时间不超过3个小时&lt;br/&gt;可悲可叹&lt;/p&gt;
&lt;p&gt;100天，整整100天&lt;br/&gt;就这样过来了&lt;br/&gt;现在想想都是羞耻&lt;br/&gt;浪费时间&lt;br/&gt;总是忘了伤疤&lt;br/&gt;是LOL的问题&lt;br/&gt;是手机，电脑的问题&lt;br/&gt;其实，都是自己的问题&lt;br/&gt;反正回不去了&lt;br/&gt;回不去之前那种认真的感觉&lt;br/&gt;每天学习到凌晨的冲劲了&lt;br/&gt;我觉得我没有那种激情了&lt;br/&gt;但是现在的自己已经麻木了&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;总结：&lt;br/&gt;墨菲定律：知道自己堕落，会继续堕落下去&lt;br/&gt;如何在舒适区中，迎头一击&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;2018心路历程&lt;br/&gt;别人是假菜，自己是真菜&lt;br/&gt;不要被骄傲遮蔽了双眼&lt;br/&gt;真正的大师永远都怀着一颗学徒的心。A true master is an eternal student.&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;向前看&quot;&gt;2019向前看&lt;/h2&gt;
&lt;p&gt;前几天，师妹对我说&lt;br/&gt;师兄，我发现，你自从找到工作后&lt;br/&gt;就一直这种状态&lt;br/&gt;左边打着游戏，右边看着视频&lt;/p&gt;
&lt;p&gt;我想，找到工作，那不是9月末，10月初&lt;br/&gt;细细数来，都已经100余天&lt;br/&gt;我苦笑着：我已经这样了，没救了&lt;/p&gt;
&lt;p&gt;当天晚上就失眠了&lt;/p&gt;
&lt;h3 id=&quot;学习始终学习&quot;&gt;1、学习，始终学习&lt;/h3&gt;
&lt;p&gt;我们想经济独立&lt;br/&gt;我们不想再问父母要钱&lt;br/&gt;我们想买房&lt;br/&gt;那核心竞争力是什么呢&lt;br/&gt;我们的专业知识&lt;br/&gt;python+go&lt;/p&gt;
&lt;p&gt;仔细想想&lt;br/&gt;我好像，不是好像，是从未认真读完一本专业相关的书&lt;br/&gt;买了那么多的专业书&lt;br/&gt;Python的，数据结构的，设计模式的&lt;br/&gt;未曾有一本完本&lt;/p&gt;
&lt;p&gt;早晨看了那么多的，&lt;br/&gt;大家都在讲学习，学习，在学习&lt;br/&gt;我呢&lt;/p&gt;
&lt;p&gt;不喜欢java，c++&lt;br/&gt;喜欢python，后面还有学习go&lt;br/&gt;这些都在停滞不前&lt;/p&gt;
&lt;p&gt;赶快立flag&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python技术栈
1、linux重新学习吗   
2、python重新学习吗  
3、mysql重新学习吗   
4、redis重新学习吗   
5、前端重新学习吗  
6、vue重新学习吗  
7、Django，flask，tranado要继续学习吗
8、爬虫要学习吗
9、nginx要学习吗&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;go技术栈
1、需要学习go语言吗？&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;目前，我只知道这么多东西。&lt;br/&gt;希望你能去问google而不是BD，去问Stack Overflow而不是BD&lt;/p&gt;
&lt;h3 id=&quot;阅读&quot;&gt;2、阅读&lt;/h3&gt;
&lt;p&gt;“不止写代码的程序员，还写有趣的文字，给不喜欢严肃的你”。&lt;/p&gt;
&lt;p&gt;很多人都在学习其他方面的知识。&lt;br/&gt;我们也要阅读点什么&lt;br/&gt;今年的阅读有多少本书呢？&lt;br/&gt;超过5本了吧。&lt;br/&gt;具体点呢，大概有10本吧，接近了&lt;/p&gt;
&lt;p&gt;这些课外知识，好像也是很必要的&lt;br/&gt;不过什么，不过这些都是随心所欲的读书&lt;br/&gt;只能稍微证明自己读书了&lt;br/&gt;或者说，了解了一个作者的世界&lt;br/&gt;可是这些只是随着自己的兴趣，意识&lt;br/&gt;在读书，在阅读&lt;br/&gt;根本没有体系&lt;br/&gt;没有应用&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;别的地方看到的，出售恐惧&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;《我害怕阅读的人》

我害怕阅读的人。一跟他们谈话，我就像一个透明的人，苍白的脑袋无法隐藏。我所拥有的内涵是什么？不就是人人能脱口而出，游荡在空气中最通俗的认知吗？像心脏在身体的左边。

春天之后是夏天。一本一本的书，就像一节节的脊椎，稳稳地支持着阅读的人。我害怕阅读的人。我祈祷他们永远不知道我的不安，免得他们会更轻易击垮我，甚至连打败我的意愿都没有。

我害怕阅读的人，他们懂得生命太短，人总是聪明得太迟。我害怕阅读的人，他们的一小时，就是我的一生。

我害怕阅读的人，尤其是，还在阅读的人。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;▲以上节选自台湾奥美广告公司早年为天下文化出版公司25周年庆活动创作的文案，获业界著名的创意大奖。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/read/cv132162&quot;&gt;全文阅读&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;知识付费&quot;&gt;3、知识付费&lt;/h3&gt;
&lt;p&gt;还有看到最多的东西，就是知识付费&lt;br/&gt;比如&lt;br/&gt;《极客时间》&lt;br/&gt;《知识星球》&lt;br/&gt;《樊登读书会》&lt;/p&gt;
&lt;p&gt;樊登：适当关注“关注圈”，但是一定要持续在“影响圈”来投入精力，&lt;br/&gt;因为它可以带来真实的改变，随着你的努力，影响圈会越变越大，&lt;br/&gt;而影响圈和关注圈的交集，基本就代表了大多数人对成功的向往。&lt;/p&gt;
&lt;p&gt;我觉得知识付费的潮流已经不可阻挡&lt;br/&gt;我想我不久也会参加进去的&lt;br/&gt;知识付费，学习，是更加系统，全面的学习&lt;br/&gt;你学完了，会对一个领域产生了解&lt;br/&gt;可以用到的&lt;br/&gt;或者说，有目的的学习&lt;br/&gt;与前面的阅读不一样&lt;/p&gt;
&lt;p&gt;有投入，有汇报的那种&lt;br/&gt;快快挣钱，快快知识付费吧&lt;/p&gt;
&lt;h3 id=&quot;英语&quot;&gt;4、英语&lt;/h3&gt;
&lt;p&gt;还有好多人，都在懊恼自己的英语&lt;br/&gt;我也是四级刚过的渣渣&lt;br/&gt;不能说，不能用&lt;br/&gt;记得最清楚的一个稍微装逼的是&lt;br/&gt;I hold a view that (我认为== I think)&lt;br/&gt;话说这个还是高三的时候&lt;br/&gt;学校请的讲座，报告人教我们的&lt;/p&gt;
&lt;p&gt;现在还有犹豫&lt;br/&gt;是不是要报&lt;br/&gt;英语流利说&lt;br/&gt;那个90天阅读外文的那个&lt;/p&gt;
&lt;p&gt;还有的话&lt;br/&gt;就是以后毕业工作了&lt;br/&gt;有钱了话&lt;br/&gt;一定一定要报华尔街英语&lt;br/&gt;买什么房&lt;br/&gt;前期要发育&lt;br/&gt;前期要投资&lt;/p&gt;
&lt;p&gt;默念三遍&lt;br/&gt;华尔街英语&lt;br/&gt;华尔街英语&lt;br/&gt;华尔街英语&lt;/p&gt;
&lt;h3 id=&quot;未完待续&quot;&gt;5、未完待续&lt;/h3&gt;
&lt;p&gt;前面只是感受而已&lt;br/&gt;具体的要怎样做呢&lt;br/&gt;立个flag&lt;br/&gt;虽说多被斩于flag下&lt;br/&gt;不过，能完成一半以上也是成功的&lt;/p&gt;
&lt;p&gt;毕业前，上半年flag&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;顺利毕业&lt;/li&gt;
&lt;li&gt;家人平安&lt;/li&gt;
&lt;li&gt;迈开腿，管住嘴，肚子减肥下去&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;学会游泳：健身房游泳快开了&lt;/li&gt;
&lt;li&gt;远方旅游：成都，西成高铁开通好久了&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;英语流利说：决定下&lt;/li&gt;
&lt;li&gt;提高情商，学会说话&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;半年阅读10本书&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;鼻炎到底治理不，没机会了&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;学术上的&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;毕业设计ok&lt;/li&gt;
&lt;li&gt;数据结构与算法，继续学习&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;春招参加&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;软件著作权&lt;/li&gt;
&lt;li&gt;会议&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;python看完&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;go&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt;最后配个图吧!&lt;/p&gt;
&lt;p&gt;我们也想成为独当一面的忍者..人..程序员&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1501096407,3879210526&amp;amp;fm=173&amp;amp;s=DC6AA757DF1168CC58F150680300E038&amp;amp;w=600&amp;amp;h=436&amp;amp;img.JPEG&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1196120/201901/1196120-20190102145836506-1361480256.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 06:18:00 +0000</pubDate>
<dc:creator>venicid</dc:creator>
<og:description>仪式感 现在觉得干什么要有点仪式感，或者说给自己个决心，画个分割线 让自己能够真正的干点什么，比如 又是陪伴自己学生时期的一款游戏。 既然自己不能控制自己 那就这样吧 就像当初的DNF一样 分解了全部</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/venicid/p/10208315.html</dc:identifier>
</item>
<item>
<title>Rxjs常用operators - 寻找石头鱼</title>
<link>http://www.cnblogs.com/xzsty/p/10207504.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xzsty/p/10207504.html</guid>
<description>&lt;p&gt;本文使用的是angular6内置的rxjs，版本号为6.3.3&lt;/p&gt;
&lt;h2 id=&quot;concat&quot;&gt;concat&lt;/h2&gt;
&lt;p&gt;通过顺序地发出多个 Observables 的值将它们连接起来，一个接一个的。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;other&lt;/td&gt;
&lt;td&gt;ObservableInput&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;等待被连接的 Observable。 可以接受多个输入 Observable。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;scheduler&lt;/td&gt;
&lt;td&gt;Scheduler&lt;/td&gt;
&lt;td&gt;可选的,默认值: null&lt;/td&gt;
&lt;td&gt;可选的调度器，控制每个输入 Observable 的订阅。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const timer1 = interval(1000).pipe(take(10));
    const timer2 = interval(2000).pipe(take(6));
    const timer3 = interval(500).pipe(take(10));
    const result = timer1.pipe(concat(timer2, timer3), toArray());
    result.subscribe(x =&amp;gt; console.log(x));
    // 将Observable转换为数组之后的结果
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;count&quot;&gt;count&lt;/h2&gt;
&lt;p&gt;计算源的发送数量，并当源完成时发出该数值。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;当源完成的时候，告知总共发送了多少个值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;8&quot;&gt;&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;function(value: T, i: number, source: Observable): boolean&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;A boolean 函数，用来选择哪些值会被计数。 参数如下：value: 来自源的值;index: 来自投射的 Observable 的值的 &quot;index&quot;（从0开始）;source: 源 Observable 自身实例。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;// 记录1到7之间有几个奇数
const numbers = range(1, 7);
numbers.pipe(count(i =&amp;gt; i % 2 === 1))
.subscribe(x =&amp;gt; console.log(x));
// 结果
// 4

// 返回数组的长度
const arr = [12, 9, 2, 21, 11];
from(arr).pipe(count(x =&amp;gt; true))
.subscribe(x =&amp;gt; console.log(x));
// 结果
// 5&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;delay&quot;&gt;delay&lt;/h2&gt;
&lt;p&gt;通过给定的超时或者直到一个给定的时间来延迟源 Observable 的发送。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;每个数据项的发出时间都往后推移固定的毫秒数.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;如果延时参数是数字, 这个操作符会将源 Observable 的发出时间都往后推移固定的毫秒数。 保存值之间的相对时间间隔.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;如果延迟参数是日期类型, 这个操作符会延时Observable的执行直到到了给定的时间.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;delay&lt;/td&gt;
&lt;td&gt;number或Date&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;延迟时间(以毫秒为单位的数字)或 Date 对象(发送延迟到这个时间点)。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;scheduler&lt;/td&gt;
&lt;td&gt;Scheduler&lt;/td&gt;
&lt;td&gt;可选的,默认值: async&lt;/td&gt;
&lt;td&gt;调度器，用来管理处理每项时延的定时器。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;// 每次点击延迟1秒
var clicks = Rx.Observable.fromEvent(document, 'click');
var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
delayedClicks.subscribe(x =&amp;gt; console.log(x));
// 延时所有的点击直到到达未来的时间点
var clicks = Rx.Observable.fromEvent(document, 'click');
var date = new Date('March 15, 2050 12:00:00'); // in the future
var delayedClicks = clicks.delay(date); // click emitted only after that date
delayedClicks.subscribe(x =&amp;gt; console.log(x));&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;distinct&quot;&gt;distinct&lt;/h2&gt;
&lt;h4 id=&quot;可以用来做数组去重&quot;&gt;可以用来做数组去重&lt;/h4&gt;
&lt;p&gt;返回 Observable，它发出由源 Observable 所发出的所有与之前的项都不相同的项。&lt;/p&gt;
&lt;p&gt;如果提供了 keySelector 函数，那么它会将源 Observable 的每个值都投射成一个新的值，这个值会用来检查是否与先前投射的值相等。如果没有提供 keySelector 函数，它会直接使用源 Observable 的每个值来检查是否与先前的值相等。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const arr = [1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1];
from(arr).pipe(distinct(), toArray())
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // [1, 2, 3, 4]
  
// 对象数组
const arr1 = [{ age: 4, name: 'Foo' },
{ age: 7, name: 'Bar' },
{ age: 5, name: 'Foo' }];
from(arr1).pipe(distinct(item =&amp;gt; item.name), toArray())
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // [{ age: 4, name: 'Foo' },
{ age: 7, name: 'Bar' }]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;every&quot;&gt;every&lt;/h2&gt;
&lt;h4 id=&quot;功能类似于lodash的every&quot;&gt;功能类似于lodash的every&lt;/h4&gt;
&lt;p&gt;返回的 Observable 发出是否源 Observable 的每项都满足指定的条件。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;function&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;用来确定每一项是否满足指定条件的函数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;thisArg&lt;/td&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;可选对象，作为回调函数中的 this 使用。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': false }
];
from(users).pipe(
  every(item =&amp;gt; !item.active)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // true
  
from(users).pipe(
  every(item =&amp;gt; item.user === 'barney' &amp;amp;&amp;amp; item.active === false)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // false&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;filter&quot;&gt;filter&lt;/h2&gt;
&lt;p&gt;通过只发送源 Observable 的中满足指定 predicate 函数的项来进行过滤。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;类似于 Array.prototype.filter()， 它只会发出源 Observable 中符合标准函数的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;7&quot;&gt;&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;function(value: T, index: number): boolean&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;评估源 Observable 所发出的每个值的函数。如果它返回 true，就发出值，如果是 false 则不会传给输出 Observable 。index 参数是自订阅开始后发送序列的索引，是从 0 开始的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;thisArg&lt;/td&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;可选参数，用来决定 predicate 函数中的 this 的值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': false },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  filter(item =&amp;gt; item.active)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // {user: &quot;fred&quot;, age: 40, active: true}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;find&quot;&gt;find&lt;/h2&gt;
&lt;p&gt;只发出源 Observable 所发出的值中第一个满足条件的值。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;找到第一个通过测试的值并将其发出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;function(value: T, index: number, source: Observable): boolean&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;使用每项来调用的函数，用于测试是否符合条件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;thisArg&lt;/td&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;可选参数，用来决定 predicate 函数中的 this 的值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': true },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': false },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];

from(users).pipe(
  find(item =&amp;gt; item.active)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // {user: &quot;barney&quot;, age: 36, active: true}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;findindex&quot;&gt;findIndex&lt;/h2&gt;
&lt;p&gt;只发出源 Observable 所发出的值中第一个满足条件的值的索引。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;它很像 find , 但发出的是找到的值的索引， 而不是值本身。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;function(value: T, index: number, source: Observable): boolean&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;使用每项来调用的函数，用于测试是否符合条件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;thisArg&lt;/td&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;可选参数，用来决定 predicate 函数中的 this 的值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': false },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];

from(users).pipe(
  findIndex(item =&amp;gt; item.active)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // 1&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;first&quot;&gt;first&lt;/h2&gt;
&lt;p&gt;只发出由源 Observable 所发出的值中第一个(或第一个满足条件的值)。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;只发出第一个值。或者只发出第一个通过测试的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;function(value: T, index: number, source: Observable): boolean&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;使用每项来调用的函数，用于测试是否符合条件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;resultSelector&lt;/td&gt;
&lt;td&gt;function(value: T, index: number): R&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;函数，它基于源 Observable 的值和索引来生成输出 Observable 的值。传给这个函数的参数有：value: 在源 Observable 上发出的值。index: 源值的索引。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;defaultValue&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;假如在源 Observable 上没有找到有效值，就会发出这个 默认值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': false },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  first(item =&amp;gt; item.active)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // {user: &quot;fred&quot;, age: 40, active: true}
  
from(users).pipe(
first()
)
.subscribe(x =&amp;gt; console.log(x));
// 结果
// {user: &quot;barney&quot;, age: 36, active: false}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;isempty&quot;&gt;isEmpty&lt;/h2&gt;
&lt;p&gt;如果源 Observable 是空的话，它返回一个发出 true 的 Observable，否则发出 false 。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': false },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  isEmpty()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // false&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;last&quot;&gt;last&lt;/h2&gt;
&lt;p&gt;返回的 Observable 只发出由源 Observable 发出的最后一个值。它可以接收一个可选的 predicate 函数作为 参数，如果传入 predicate 的话则发送的不是源 Observable 的最后一项，而是发出源 Observable 中 满足 predicate 函数的最后一项。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  last(item =&amp;gt; item.active)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // {user: &quot;ckdf&quot;, age: 24, active: true}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;map&quot;&gt;map&lt;/h2&gt;
&lt;p&gt;将给定的 project 函数应用于源 Observable 发出的每个值，并将结果值作为 Observable 发出。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;类似于 Array.prototype.map()， 它把每个源值传递给转化函数以获得相应的输出值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;project&lt;/td&gt;
&lt;td&gt;function(value: T, index: number): R&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;应用于由源 Observable 所发出的每个值的函数。index 参数是自订阅开始后发送序列的索引，是从 0 开始的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;thisArg&lt;/td&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;可选参数，定义在 project 函数中的 this 是什么。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  map(item =&amp;gt; 'hello' + item.user),
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // [&quot;hellobarney&quot;, &quot;hellofred&quot;, &quot;hellockdf&quot;, &quot;hellogdfg&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;mapto&quot;&gt;mapTo&lt;/h2&gt;
&lt;p&gt;每次源 Observble 发出值时，都在输出 Observable 上发出给定的常量值。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;类似于 map，但它每一次都把源值映射成同一个输出值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;将每个源值映射成的值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  mapTo('hello'),
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // [&quot;hello&quot;, &quot;hello&quot;, &quot;hello&quot;, &quot;hello&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;max&quot;&gt;max&lt;/h2&gt;
&lt;p&gt;max 操作符操作的 Observable 发出数字(或可以与提供的函数进行比较的项)并且当源 Observable 完成时它发出单一项：最大值的项。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;comparer&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;可选的比较函数，用它来替代默认值来比较两项的值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  max((a, b) =&amp;gt; a.age &amp;lt; b.age ? -1 : 1)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // {user: &quot;fred&quot;, age: 40, active: true}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;merge&quot;&gt;merge&lt;/h2&gt;
&lt;p&gt;创建一个输出 Observable ，它可以同时发出每个给定的输入 Observable 中的所有值。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;通过把多个 Observables 的值混合到一个 Observable 中 来将其打平。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  merge(interval(1000)),
  take(10),
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // [
      { 'user': 'barney', 'age': 36, 'active': false },
      { 'user': 'fred', 'age': 40, 'active': true },
      { 'user': 'ckdf', 'age': 24, 'active': true },
      { 'user': 'gdfg', 'age': 31, 'active': false },
      0,
      1,
      2,
      3,
      4,
      5
    ];&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;min&quot;&gt;min&lt;/h2&gt;
&lt;p&gt;min 操作符操作的 Observable 发出数字(或可以使用提供函数进行比较的项)并且当源 Observable 完成时它发出单一项：最小值的项。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;comparer&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;可选的比较函数，用它来替代默认值来比较两项的值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  min((a, b) =&amp;gt; a.age &amp;lt; b.age ? -1 : 1)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // {user: &quot;ckdf&quot;, age: 24, active: true}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;reduce&quot;&gt;reduce&lt;/h2&gt;
&lt;p&gt;在源 Observalbe 上应用 accumulator (累加器) 函数，然后当源 Observable 完成时，返回 累加的结果，可以提供一个可选的 seed 值。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用 accumulator (累加器) 函数将源 Observable 所发出的所有值归并在一起， 该函数知道如何将新的源值纳入到过往的累加结果中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;accumulator&lt;/td&gt;
&lt;td&gt;function(acc: R, value: T, index: number): R&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;调用每个 源值的累加器函数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;seed&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;初始累加值。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const arr = [1, 2, 3, 4];
from(arr).pipe(
  reduce((acc, curr) =&amp;gt; acc + curr, 0)
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // 10&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;repeat&quot;&gt;repeat&lt;/h2&gt;
&lt;p&gt;返回的 Observable 重复由源 Observable 所发出的项的流，最多可以重复 count 次。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;源 Observable 项重复的次数，如果 count 为0则产生一个空的 Observable 。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const arr = [1, 2, 3, 4];
from(arr).pipe(
  repeat(3),
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;startwith&quot;&gt;startWith&lt;/h2&gt;
&lt;p&gt;返回的 Observable 会先发出作为参数指定的项，然后再发出由源 Observable 所发出的项。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;values&lt;/td&gt;
&lt;td&gt;...T&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;你希望修改过的 Observable 可以先发出的项。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;scheduler&lt;/td&gt;
&lt;td&gt;Scheduler&lt;/td&gt;
&lt;td&gt;可选的&lt;/td&gt;
&lt;td&gt;用于调度 next 通知发送的 IScheduler 。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  startWith({ 'user': 'jokl', 'age': 28, 'active': false }),
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  //[
      { 'user': 'jokl', 'age': 28, 'active': false },
      { 'user': 'barney', 'age': 36, 'active': false },
      { 'user': 'fred', 'age': 40, 'active': true },
      { 'user': 'ckdf', 'age': 24, 'active': true },
      { 'user': 'gdfg', 'age': 31, 'active': false }
    ]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;take&quot;&gt;take&lt;/h2&gt;
&lt;p&gt;只发出源 Observable 最初发出的的N个值 (N = count)。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;接收源 Observable 最初的N个值 (N = count)，然后完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;发出 next 通知的最大次数。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  startWith({ 'user': 'jokl', 'age': 28, 'active': false }),
  take(3),
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  //[
      { 'user': 'jokl', 'age': 28, 'active': false },
      { 'user': 'barney', 'age': 36, 'active': false },
      { 'user': 'fred', 'age': 40, 'active': true }
    ]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;takelast&quot;&gt;takeLast&lt;/h2&gt;
&lt;p&gt;只发出源 Observable 最后发出的的N个值 (N = count)。与take类似&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;记住源 Observable 的最后N个值 (N = count)，然后只有当 它完成时发出这些值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;从源 Observable 的值序列的末尾处，要发出的值的最大数量。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  startWith({ 'user': 'jokl', 'age': 28, 'active': false }),
  takeLast(3),
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  //[
        { 'user': 'fred', 'age': 40, 'active': true },
        { 'user': 'ckdf', 'age': 24, 'active': true },
        { 'user': 'gdfg', 'age': 31, 'active': false }
    ]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;toarray&quot;&gt;toArray&lt;/h2&gt;
&lt;p&gt;将源 Observable转换为数组&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const arr = [1, 2, 3, 4];
from(arr).pipe(
  toArray()
)
  .subscribe(x =&amp;gt; console.log(x));
  // 结果
  // [1, 2, 3, 4]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;topromise&quot;&gt;toPromise&lt;/h2&gt;
&lt;p&gt;将 Observable 序列转换为符合 ES2015 标准的 Promise 。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const users = [
  { 'user': 'barney', 'age': 36, 'active': false },
  { 'user': 'fred', 'age': 40, 'active': true },
  { 'user': 'ckdf', 'age': 24, 'active': true },
  { 'user': 'gdfg', 'age': 31, 'active': false }
];
from(users).pipe(
  startWith({ 'user': 'jokl', 'age': 28, 'active': false }),
  takeLast(3),
  toArray()
)
  .toPromise()
  .then(x =&amp;gt; console.log(x))
  .catch(err =&amp;gt; console.log(err));
  // 结果
  //[
        { 'user': 'fred', 'age': 40, 'active': true },
        { 'user': 'ckdf', 'age': 24, 'active': true },
        { 'user': 'gdfg', 'age': 31, 'active': false }
    ]&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 02 Jan 2019 06:18:00 +0000</pubDate>
<dc:creator>寻找石头鱼</dc:creator>
<og:description>最近项目不太忙，有时间系统学习了一下rxjs的一些知识，将其中个人认为比较常用的一些操作符mark下来，分享学习</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xzsty/p/10207504.html</dc:identifier>
</item>
<item>
<title>N-grams模型、停顿词（stopwords）和标准化处理 - NLP学习（2） - JieLongZ</title>
<link>http://www.cnblogs.com/jielongAI/p/10189907.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jielongAI/p/10189907.html</guid>
<description>&lt;p&gt;在上一节《&lt;a href=&quot;https://www.cnblogs.com/jielongAI/p/10178585.html&quot; target=&quot;_blank&quot;&gt;Tokenization - NLP（1）&lt;/a&gt;》的学习中，我们主要学习了如何将一串字符串分割成单独的字符，并且形成一个词汇集（vocabulary），之后我们将形成的词汇集合转换成计算机可以处理的数字信息，以方便我们做进一步文本分析。这篇博客的主题还是我们如何将文本转成成更有用的成分，让我们能从文本当中提取到更多的信息以便作为特征输入到模型中训练，首先会介绍一下N-grams算法，之后会提到停顿词及英文文本常见的标准化处理手段，如大小写的改变、词干提取等（&lt;span&gt;文章中的某些例子会涉及到正则表达式的使用，但是因为不是主要的内容，对使用到的正则表达式不做过多解释，如果有需要的话自己找下书籍和在网上搜索下如何使用正则表达式&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、N-grams&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;自然语言处理过程中，一个值得我们注意的是，如果我们仅仅是将文本字符串分割成单独的文本，此时我们&lt;span&gt;只是简单的去分析文本中每个字符所代表的潜在意义与我们需要分析的结果的关系性&lt;/span&gt;，然而我们忽略一个非常重要的信息，&lt;span&gt;文本的顺序&lt;/span&gt;是含有非常的重要信息。举一个简单的例子，“钓鱼”两个词，如果我们单独去分析这两个词，而不是看作一个整体的话，那么我们得到的语意意思就是“钓”是一个动作词，“鱼”是一个名词，而当两个字放在一起的时候，我们知道其实我们想表述的“钓鱼”是我们要做的一个活动（event）。又比如&lt;span&gt;英文“hot dog&quot;，我们都知道这个词组想表达的是我们吃的食物”热狗香肠包“，所以我们不希望单独去看hot和dog两个意思，如果是这样子我们可以看出意思相差非常的远&lt;/span&gt;，由此我们可以看出文本顺序的重要性。&lt;/p&gt;
&lt;p&gt;而实际操作中，我们将这种把文本顺序保留下来的行为称之为建立N-grams模型，也就是我们将一个字符串分割成含有多个词的标识符（tokens）。当然，需要记住的一点是不论是上一节说的还是N-grams，他们都属于文本字符串Tokenization的一个过程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; nltk.util &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ngrams
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; sentence = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I love deep learning as it can help me resolve some complicated problems in 2018.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; tokenize the sentence into tokens&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; pattern = re.compile(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;([-\s.,;!?])+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; tokens =&lt;span&gt; pattern.split(sentence)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; tokens = [x &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; tokens &lt;span&gt;if&lt;/span&gt; x &lt;span&gt;and&lt;/span&gt; x &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;- \t\n.,;!?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; bigrams = list(ngrams(tokens, 2&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;([&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;.join(x) &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; bigrams])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码的输出结果是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I love&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;love deep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;deep learning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;learning as&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;as it&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;it can&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;can help&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;help me&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;me resolve&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;resolve some&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;some complicated&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;complicated problems&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;problems in&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;in 2018&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码的执行是首先将文本字符串分割成单独（unique）标识符，并且引入了正则表达式（&lt;span&gt;更多的正则表达式请参看其他资料，这里有必要指出，当我们做一些大型的文本分析时，其实真正用正则表达式去书写相应的规则执行起来的效率是很低的，因为文本是千变万化，几乎没有相同的，例如每个人在微博上post的东西，所附在文本上的字符是千差万别，然后我们一般电子书上的文本又与网络的不同，所以就形成了无法用一套正则表达式的规则去完成所有的任务，普适性是很差的。&lt;/span&gt;）来更精准的分割字符串。除此之外，我们运用了NLTK的库来分割出一个含有两个词（Bi-Gram）的标识符。所以从上面我们可以看出，如“deep learning&quot;和”complicated problems“这样子的组合更切合我们想要表达的意思，但是独个字符看的话我们就未必看得出了。&lt;/p&gt;
&lt;p&gt;虽然N-grams模型可以让我们更好的去分割出具有更好语意的标识符，进而让我们做进一步文本分析，但是缺点也是同样明显，那就是运用N-grams模型可能让我们的词汇量成指数级的增长，并且并不是所有的Bigram都含有有用信息，而这个情况在甚至乎在Trigram或者Quad gram等含有更多单独字符在内的N-grams模型会更严重。这样子做产生的问题就是我们最终拿到的&lt;span&gt;特征向量（the dimension of the feature vectors）的维度将会超过我们本身的文件样本数（length of the documents），而最终当我们将这些提取出来的特征放入到机器学习算法中的话，就会导致过拟合（over fitting）的情况&lt;/span&gt;。如此训练出来的模型将没有什么太好的performance和预测能力。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Stop Words&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;造成上述问题的一个原因可能是我们分割出来的标识符（n-grams）含有太多的不具备有用信息的组合，如带有停顿词（stop words）的词组组合，停顿词在英文中出现的频率是非常高的，如a, an, and, or, of, at, the等等单词，这些单词携带的信息量（substantive information）是极度有限的。所以我们需要做的就是在NLP分析过程中将文本中的停顿词去掉，这样子做的好处是我们减少词汇量，进而降低我们特征向量的维度。But.......我们还是需要再次注意一个问题，那就是虽然停顿词本身所携带的信息不是很多，但是stop words却可能在n-grams中存在关系性信息（relational information），考虑下面两种情况：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Mark &lt;span&gt;reported to the CEO&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Susan &lt;span&gt;reported as the CEO&lt;/span&gt; to the board&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在上述例子中，如果我们将to the和as the去掉的话，那么我们就会得到reported CEO，这是很迷惑的，因为这两个句子中本身是有一个层级意思的，但是因为我们remove掉了as，the和to这三个stop words导致了关系信息的缺失。正常情况下，我们需要创建一个4-grams的词（如上述紫色字部分标注高亮的部分）。这也就延申出我们需要讨论的关于NLP模型创立过程中碰到的一个问题，那就是基本是特定问题需要特定的解决办法。具体为根据实际运用而定，创建一个过滤器适当的过滤掉我们不需要的stop words。&lt;/p&gt;
&lt;p&gt;下面我们通过NLTK的库来看看英文中大概都有那些stop words：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; nltk
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; nltk.download(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stopwords&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; stopwords = nltk.corpus.stopwords.words(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;english&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(len(stopwords))
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(stopwords[:50])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[nltk_data] Downloading package stopwords to
[nltk_data]     C:\Users\JielongSSS\AppData\Roaming\nltk_data...
[nltk_data]   Package stopwords &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; already up-to-&lt;span&gt;date!
&lt;/span&gt;179&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;my&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;myself&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;we&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;our&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ours&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ourselves&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;you&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;you're&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;you've&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;you'll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;you'd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;your&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yours&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yourself&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yourselves&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;he&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;him&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;his&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;himself&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;she&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;she's&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;her&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;herself&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;it&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;it's&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;its&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;itself&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;they&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;them&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;their&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;theirs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;themselves&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;what&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;which&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;who&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;whom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;that&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;that'll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;these&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;those&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;am&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;are&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;was&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;were&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;be&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、标准化处理（Normalization）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;讨论那么多，我们也应该意识到一个问题：一个NLP模型的表现（performance）很大程度取决于我们所拥有的词汇量（额。。。其实嘛，很难有一个定量的分析，起码目前在学习过程中给我的感觉是如此，词汇量应该掌握在一个具体什么样的程度呢？希望有大神看了我的博客文章也留言给我，是否有一个有效的衡量方法去查看究竟我们所需要的词汇量是多少？）。当然这部分我们要讲的主要是如何通过其他方式来缩减我们tokenize之后创建的feature vector的维度，也就是减少我们的词汇量，以最大程度的保留我们所需要的觉得有用的信息。具体一般有三种处理方式：CASE FOLDING（大小写的改变），Stemming和Lemmatization，下面会展开详细的说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1 CASE Folding&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;span&gt;英文的NLP模型中，单词的大小写是非常敏感的&lt;/span&gt;，这跟我们中文比较不一样，中文是没有所谓的大小写之说的，在这里因为主要以英文NLP为主，所以就只讲英文的标准了，未来有机会更新博客的时候我会尝试引入中文相关的NLP处理方式。我们都知道，在书写英文句子的时候，我们总是让开头的第一个单词的首字母处于大写状况，或者说我们想要强调某些事件的时候，我们就希望用全大写来表示，但是我们同样知道But和but是同一个单词but并且表示同一个意思，然而文本分析过程中这是两个不同的单词，仅仅是因为他们的首字母不一样，这样子计算机自动分析的时候得到的结果就会导致有偏差，所以我们需要对这But这个单词进行大小写的规范处理，从而减少我们的词汇量。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; tokens = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Horse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;horse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tokens)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;单词数量为: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,len(set(tokens)))
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; normalized_tokens = [x.lower() &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; tokens]
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(normalized_tokens)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Normalized之后的单词数量为: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,len(set(normalized_tokens)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Horse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;horse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
单词数量为:  &lt;/span&gt;6&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;horse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;horse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
Normalized之后的单词数量为:  &lt;/span&gt;3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的结果我们可以看出，我们单词的数量从6个变为了3个，因为Horse和horse表达的就是同一个东西。当然，就如我们开头所说的，英文单词对于大小写是很敏感的，也就意味着大小写的单词对于英文单词所要表达的意思可能是不同的，如Doctor和doctor在大小写方面前者表示为博士，后者我们说的一般是医生的意思，这是我们需要注意的一点，当然你并无法完全针对每个大小写敏感的单词去做case normalization，所以一般情况我们根据需求而定，取舍来做分析，大部分时候的做法是我们只对句子的首个单词的首字母进行case normalization，这只是提供一种分析方法，根据学习过程获得信息，&lt;span&gt;英文的NLP模型最终都是不采用case normalization的，以免丢失太多的信息，对于中文等一些语言，大小写不敏感的，这个就更没意义了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 Stemming&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Stemming是另外一个处理英文文本会用到的技巧，主要是单词的复数形式中或者指代所有格结果等单词中提取出相应的词干（stem）。例如，我们知道cats，horses的词干形式是cat和horse，又比如doing的词干为do。通过这样子的处理，我们将很多不同形式的词回复为其原本的词干形式，这样子做有很大的作用。一个实例就是搜索引擎，当你搜索某样的东西的时候，很多时候你可能不知道你所需要搜索的东西的具体拼写方式，所以我们只是键入你觉得可能的词，但是此时我们需要机器反馈给我具有相关联系的搜索结果，这个结果不仅仅是需要语意上尽可能地相同，大部分时候我们是基于关键字匹配的，如果采取的是100%的匹配的话，得到的结果将会是很有限，这时候通过词干的匹配来检索呈现出相应的结果就显得异常的重要。而对于我们搭建模型，在预处理文本的阶段，则大大的&lt;span&gt;减少了我们的词汇量（意味着我们不需要大空间储存）&lt;/span&gt;与此同时它也尽可能地规避减少信息地丢失。不仅如此，提取词干也同时让我们地模型更具普适性，这点符合我们刚才说的搜索引擎的例子。这里有一点需要注意的是，这里的词干并非严格意义上的词干，而只是我们所说的字符或者标识符，这个标识符可能表示的是好几种不同拼写形式的单词。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; stemming(sent):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;.join([re.findall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^(.*ss|.*?)(s)?$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, word)[0][0].strip(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;for&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt;&lt;span&gt; sent.lower().split()])
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; stemming(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;horses&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码的输出结果为：&lt;/p&gt;

&lt;p&gt;正则表达式中想要表达的是如果一个单词的结尾为s的话则词干为去掉s之后的单词，如果多余一个s作为结尾的话，那么这个词保持原型。上述的代码示例能解决的问题是很有限的，因为更复杂的诸如dishes这样子的单词，我们知道去掉的是es，而不仅仅是s，如果要达到足够高的精准度，那我们需要写的正则表达式也会逐步增多。这样子代码执行起来的效率也不够高。下面介绍一下用NLTK库中的PorterStemmer来提取文本的词干。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; nltk.stem.porter &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PorterStemmer
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; stemmer =&lt;span&gt; PorterStemmer()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;.join([stemmer.stem(w).strip(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;for&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dishes washer's washed dishes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.split()]))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
dish washer wash dish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 Lemmatization&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;词形还原（lemmatization）也是一种在英文语言处理中比较常见的的技巧，大致的作用与词干提取类似，也是希望不同形式的单词可以在经过处理之后恢复为他们原本的模样，但是词形还原更多的是放在了单词本身的语意上。所以，词形还原其实比词干提取和大小写的改变更适合预处理文本，因为他们不是简单的改变单词的大小写或者单复数或者所有格的形式，而是基于语意去做还原。比如，我们如果用词干提取去处理better这个单词的时候，我们可能会把单词的er去掉，这样子单词就会编程bet或者bett，这完全改变了单词的意思，但是如果是基于词形还原，那么我们就得到类似的词，如good，best等等。在正式NLP模型创建过程中，我们一般是希望词形还原的运用是在词干提取前面，因为在英文文本中，lemmatization处理过后的单词更接近单词本身所要表达的意思，并且同样的也可以减少我们特征的维度。下面是通过NLTK上的WordNetLemmatizer函数来让你了解下词形还原是如何工作的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; nltk.stem &lt;span&gt;import&lt;/span&gt;&lt;span&gt; WordNetLemmatizer
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; lemmatizer =&lt;span&gt; WordNetLemmatizer()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(lemmatizer.lemmatize(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;better&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(lemmatizer.lemmatize(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;better&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, pos=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;better
good&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码第五行中的pos是part of speech是词性标注的意思，a代表的形容词的形式。&lt;/p&gt;

&lt;p&gt;综上，我们可以看出，词干提取和词形还原都可以减少单词的词汇量，但是同时他们也增加了文本的迷惑性，因为不可能将不同形式的单词100%的恢复成所要表达的单词形式，更需要明白的是，即使词干一样，基于该呈现出来的不同形式的单词的意思也会差很多，所以迷惑性也就增加了，这样子对我们自然语言文本分析其实变相的增加了难度，在实际的运用做，我们需要根据实际情况运用上述讲到的算法原理和技巧。&lt;/p&gt;

</description>
<pubDate>Wed, 02 Jan 2019 06:15:00 +0000</pubDate>
<dc:creator>JieLongZ</dc:creator>
<og:description>在上一节《Tokenization - NLP（1）》的学习中，我们主要学习了如何将一串字符串分割成单独的字符，并且形成一个词汇集（vocabulary），之后我们将形成的词汇集合转换成计算机可以处理</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jielongAI/p/10189907.html</dc:identifier>
</item>
<item>
<title>vue动态添加路由addRoutes之不能将动态路由存入缓存 - 沪-小坏</title>
<link>http://www.cnblogs.com/tnnyang/p/10208263.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tnnyang/p/10208263.html</guid>
<description>&lt;p&gt;在我不知道vue的路由还可以通过&lt;code&gt;addRoutes&lt;/code&gt;动态添加时，我只知道vue的路由都是写死在路由表中的，每当跳转时再去加载相应的路由。直到在一个新公司接到需要根据用户的权限显示不同的菜单的需求时才知道了原来&lt;code&gt;vue-router&lt;/code&gt;还有一个&lt;code&gt;addRoutes&lt;/code&gt;的API，立马研究了一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;router.addRoutes：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数签名：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;router.addRoutes(routes: Array&amp;lt;RouteConfig&amp;gt;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;动态添加更多的路由规则。参数必须是一个符合&lt;code&gt;routes&lt;/code&gt;选项要求的数组。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://router.vuejs.org/zh/api/#router-addroutes&quot;&gt;点这里去看router.addRoutes的官方解释&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;白话就是需要动态加入到路由表中的路由是必须要跟我们提前写死的路由规则是一样的。&lt;/p&gt;
&lt;p&gt;有了这个玩意儿我们就可以依据系统管理员给用户分配的权限来实现不同的用户可以进入不同的菜单页面的功能，是不是很nice？是不是很优秀？&lt;/p&gt;
&lt;p&gt;但这个还不是本文的重点，本文的重点是“不能将需要动态添加的路由存入缓存！” 为什么这么说呢？&lt;/p&gt;
&lt;p&gt;先说说我们的需求吧。&lt;/p&gt;
&lt;p&gt;我们的项目开发中的动态路由是提前配好在路由表中的，只是和静态路由分开写在了两个对象中，导出的时候默认只导出静态路由，所谓的静态路由就是所有用户都可以访问到的公共路由，比如登录页面、404页面等。而不同用户可访问不同的菜单页面是根据接口返回的一个菜单code来过滤提前配好的动态路由(提前配好的动态路由中也有一个code)，再将过滤后的路由使用&lt;code&gt;router.addRoutes&lt;/code&gt;动态添加即可。可能有些公司是通过接口直接把用户的动态路由表按照路由的规则形式给返回了出来，前端只需拿到路由表稍作处理然后addRoutes就可以了。每个公司有每个公司的想法，你开心就好！&lt;/p&gt;
&lt;p&gt;接下来就是我们项目中的路由过滤了，这里省略1000字，路由过滤完成并动态添加后就可以很愉快的访问菜单页面了。但我想的是，在全局路由守卫中请求接口返回的code（这里接口返回的是一个包含code和其他数据的json数组，所以我还得先把接口返回的code给过滤出来），然后再过滤路由，然后再动态添加，这对性能来说是一个不小的开销，所以我就琢磨着能不能把首次过滤好的路由给存在缓存中，这样下次就可以直接动态添加缓存中的路由了，岂不是是一件很美好的事情，结果是我想错了，你们都想错了！&lt;/p&gt;
&lt;p&gt;来先看看过滤后打印出来的路由吧：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688074/201901/688074-20190102133950500-239420945.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再来看看从缓存中读出来的路由吧：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688074/201901/688074-20190102134001022-2068675178.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从两张图上红色矩形圈圈可以看出，从缓存中读出来的路由信息已经发生了改变，父路由中的render方法也没有了（第一张图中父路由的&lt;code&gt;render&lt;/code&gt;方法还是有的，到了第二张就没有了），且子路由&lt;code&gt;children&lt;/code&gt;里边已经没有了&lt;code&gt;component&lt;/code&gt;属性（从第二张图中的红色箭头处可以看出），这显然不是我们想要的路由信息。有人说可以使用&lt;code&gt;import xxx from ‘xxx’&lt;/code&gt;来替代component的值，这个针对父路由的&lt;code&gt;component&lt;/code&gt;都引用了同一个&lt;code&gt;Layout&lt;/code&gt;组件来说是可以的，但是子路由呢？从缓存中读出来的子路由连&lt;code&gt;component&lt;/code&gt;都没有了，即使是有这个属性，但子路由都引用了不同的&lt;code&gt;component&lt;/code&gt;，那你怎么玩？况且将过滤后的路由信息通过缓存的存取来实现，安全上就会有问题，因为如果户手动修改了缓存里的路由，那你所谓的动态路由权限岂不是立马破功了。&lt;/p&gt;
&lt;p&gt;所以，我们能做的就只能是在每次切换路由时都要重新请求接口并根据返回的code来动态过滤路由并添加，或者根据后端返回的动态路由表直接添加，性能上浪费一点也是没有办法的事儿，总比实现不了或不安全来的更好一点。&lt;/p&gt;
&lt;p&gt;写了这么多，如果各位前端同行看的不是很明白的话，可以自己动手尝试一下，实践是检验真理的唯一标准！&lt;/p&gt;
&lt;p&gt;本文参考地址：&lt;br/&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000009127330&quot; class=&quot;uri&quot;&gt;https://segmentfault.com/q/1010000009127330&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000009524078&quot; class=&quot;uri&quot;&gt;https://segmentfault.com/q/1010000009524078&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 02 Jan 2019 06:11:00 +0000</pubDate>
<dc:creator>沪-小坏</dc:creator>
<og:description>在我不知道vue的路由还可以通过 动态添加时，我只知道vue的路由都是写死在路由表中的，每当跳转时再去加载相应的路由。直到在一个新公司接到需要根据用户的权限显示不同的菜单的需求时才知道了原来 还有一个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tnnyang/p/10208263.html</dc:identifier>
</item>
</channel>
</rss>