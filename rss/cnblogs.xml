<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring Boot(十二)：Spring Boot 如何测试打包部署 - Java极客技术</title>
<link>http://www.cnblogs.com/justdojava/p/11211807.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/justdojava/p/11211807.html</guid>
<description>
&lt;p&gt;有很多网友会时不时的问我， Spring Boot 项目如何测试，如何部署，在生产中有什么好的部署方案吗？这篇文章就来介绍一下 Spring Boot 如何开发、调试、打包到最后的投产上线。&lt;/p&gt;
&lt;h2&gt;开发阶段&lt;/h2&gt;
&lt;h3&gt;单元测试&lt;/h3&gt;
&lt;p&gt;在开发阶段的时候最重要的是单元测试了， Spring Boot 对单元测试的支持已经很完善了。&lt;/p&gt;
&lt;p&gt;1、在 pom 包中添加 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pln&quot;&gt;spring&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;boot&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;starter&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; 包引用&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;span class=&quot;pln&quot;&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;span class=&quot;pln&quot;&gt;spring-boot-starter-test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;scope&amp;gt;&lt;span class=&quot;pln&quot;&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;2、开发测试类&lt;/p&gt;
&lt;p&gt;以最简单的 helloworld 为例，在测试类的类头部需要添加： &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@RunWith&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;SpringRunner&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;kwd&quot;&gt;class&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;和 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;/code&gt;注解，在测试方法的顶端添加 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@Test&lt;/span&gt;&lt;/code&gt;即可，最后在方法上点击右键run就可以运行。&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@RunWith&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;SpringRunner&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;kwd&quot;&gt;class&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;class &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;ApplicationTests &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void &lt;span class=&quot;pln&quot;&gt;hello&lt;span class=&quot;pun&quot;&gt;() &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;kwd&quot;&gt;out&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;println&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;hello world&quot;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;实际使用中，可以按照项目的正常使用去注入数据层代码或者是 Service 层代码进行测试验证， &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pln&quot;&gt;spring&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;boot&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;starter&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; 提供很多基础用法，更难得的是增加了对 Controller 层测试的支持。&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span class=&quot;com&quot;&gt;//简单验证结果集是否正确&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span class=&quot;typ&quot;&gt;Assert&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;assertEquals&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;lit&quot;&gt;3&lt;span class=&quot;pun&quot;&gt;, &lt;span class=&quot;pln&quot;&gt;userMapper&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;getAll&lt;span class=&quot;pun&quot;&gt;().&lt;span class=&quot;pln&quot;&gt;size&lt;span class=&quot;pun&quot;&gt;());&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span class=&quot;com&quot;&gt;//验证结果集，提示&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span class=&quot;typ&quot;&gt;Assert&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;assertTrue&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;错误，正确的返回值为200&quot;&lt;span class=&quot;pun&quot;&gt;, &lt;span class=&quot;pln&quot;&gt;status &lt;span class=&quot;pun&quot;&gt;== &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;200&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span class=&quot;typ&quot;&gt;Assert&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;assertFalse&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;错误，正确的返回值为200&quot;&lt;span class=&quot;pun&quot;&gt;, &lt;span class=&quot;pln&quot;&gt;status &lt;span class=&quot;pun&quot;&gt;!= &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;200&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;引入了 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;typ&quot;&gt;MockMvc&lt;/span&gt;&lt;/code&gt;支持了对 Controller 层的测试，简单示例如下：&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;10&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;class &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;HelloControlerTests &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;private &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;MockMvc &lt;span class=&quot;pln&quot;&gt;mvc&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;com&quot;&gt;//初始化执行&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@Before&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void &lt;span class=&quot;pln&quot;&gt;setUp&lt;span class=&quot;pun&quot;&gt;() &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;throws &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Exception &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;mvc &lt;span class=&quot;pun&quot;&gt;= &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;MockMvcBuilders&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;standaloneSetup&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;kwd&quot;&gt;new &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;HelloController&lt;span class=&quot;pun&quot;&gt;()).&lt;span class=&quot;pln&quot;&gt;build&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;com&quot;&gt;//验证controller是否正常响应并打印返回结果&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void &lt;span class=&quot;pln&quot;&gt;getHello&lt;span class=&quot;pun&quot;&gt;() &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;throws &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Exception &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;mvc&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;perform&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;MockMvcRequestBuilders&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;kwd&quot;&gt;get&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;/hello&quot;&lt;span class=&quot;pun&quot;&gt;).&lt;span class=&quot;pln&quot;&gt;accept&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;MediaType&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;APPLICATION_JSON&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;andExpect&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;MockMvcResultMatchers&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;status&lt;span class=&quot;pun&quot;&gt;().&lt;span class=&quot;pln&quot;&gt;isOk&lt;span class=&quot;pun&quot;&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;andDo&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;MockMvcResultHandlers&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;kwd&quot;&gt;print&lt;span class=&quot;pun&quot;&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;andReturn&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;com&quot;&gt;//验证controller是否正常响应并判断返回结果是否正确&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void &lt;span class=&quot;pln&quot;&gt;testHello&lt;span class=&quot;pun&quot;&gt;() &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;throws &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Exception &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;mvc&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;perform&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;MockMvcRequestBuilders&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;kwd&quot;&gt;get&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;/hello&quot;&lt;span class=&quot;pun&quot;&gt;).&lt;span class=&quot;pln&quot;&gt;accept&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;MediaType&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;APPLICATION_JSON&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;andExpect&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;status&lt;span class=&quot;pun&quot;&gt;().&lt;span class=&quot;pln&quot;&gt;isOk&lt;span class=&quot;pun&quot;&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;andExpect&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;content&lt;span class=&quot;pun&quot;&gt;().&lt;span class=&quot;kwd&quot;&gt;string&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;equalTo&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;Hello World&quot;&lt;span class=&quot;pun&quot;&gt;)));&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;单元测试是验证你代码第一道屏障，要养成每写一部分代码就进行单元测试的习惯，不要等到全部集成后再进行测试，集成后因为更关注整体运行效果，很容易遗漏掉代码底层的bug.&lt;/p&gt;
&lt;h3&gt;集成测试&lt;/h3&gt;
&lt;p&gt;整体开发完成之后进入集成测试， Spring Boot 项目的启动入口在 Application 类中，直接运行 run 方法就可以启动项目，但是在调试的过程中我们肯定需要不断的去调试代码，如果每修改一次代码就需要手动重启一次服务就很麻烦， Spring Boot 非常贴心的给出了热部署的支持，很方便在 Web 项目中调试使用。&lt;/p&gt;
&lt;p&gt;pom 需要添加以下的配置：&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;span class=&quot;pln&quot;&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;span class=&quot;pln&quot;&gt;spring-boot-devtools&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;optional&amp;gt;&lt;span class=&quot;pln&quot;&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;span class=&quot;pln&quot;&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;span class=&quot;pln&quot;&gt;spring-boot-maven-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;fork&amp;gt;&lt;span class=&quot;pln&quot;&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/fork&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;添加以上配置后，项目就支持了热部署，非常方便集成测试。&lt;/p&gt;
&lt;h2&gt;投产上线&lt;/h2&gt;
&lt;p&gt;其实我觉得这个阶段，应该还是比较简单一般分为两种；一种是打包成 jar 包直接执行，另一种是打包成 war 包放到 tomcat 服务器下。&lt;/p&gt;
&lt;h3&gt;打成 jar 包&lt;/h3&gt;
&lt;p&gt;如果你使用的是 maven 来管理项目，执行以下命令既可以&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;cd &lt;span class=&quot;pun&quot;&gt;项目跟目录（和&lt;span class=&quot;pln&quot;&gt;pom&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;xml&lt;span class=&quot;pun&quot;&gt;同级）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;mvn clean &lt;span class=&quot;kwd&quot;&gt;package&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;com&quot;&gt;## 或者执行下面的命令&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;com&quot;&gt;## 排除测试代码后进行打包&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;mvn clean &lt;span class=&quot;kwd&quot;&gt;package &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;typ&quot;&gt;Dmaven&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;test&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;skip&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;kwd&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;打包完成后 jar 包会生成到 target 目录下，命名一般是 项目名+版本号.jar&lt;/p&gt;
&lt;p&gt;启动 jar 包命令&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;java &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;jar target&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;spring&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;boot&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;scheduler&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;lit&quot;&gt;1.0&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;lit&quot;&gt;0.jar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这种方式，只要控制台关闭，服务就不能访问了。下面我们使用在后台运行的方式来启动:&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;nohup java &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;jar target&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;spring&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;boot&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;scheduler&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;lit&quot;&gt;1.0&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;lit&quot;&gt;0.jar &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;也可以在启动的时候选择读取不同的配置文件&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;java &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;jar app&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;jar &lt;span class=&quot;pun&quot;&gt;--&lt;span class=&quot;pln&quot;&gt;spring&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;profiles&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;active&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;pln&quot;&gt;dev&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;也可以在启动的时候设置 jvm 参数&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;java &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;typ&quot;&gt;Xms10m &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;typ&quot;&gt;Xmx80m &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;jar app&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;jar &lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;gradle&lt;/strong&gt;&lt;br/&gt;如果使用的是 gradle，使用下面命令打包&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;gradle build&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;java &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;jar build&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;libs&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mymodule&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;lit&quot;&gt;0.0&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;lit&quot;&gt;1&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;SNAPSHOT&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;jar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;打成 war 包&lt;/h3&gt;
&lt;p&gt;打成 war 包一般可以分两种方式来实现，第一种可以通过 eclipse 这种开发工具来导出 war 包，另外一种是使用命令来完成，这里主要介绍后一种&lt;/p&gt;
&lt;p&gt;1、maven 项目，修改 pom 包&lt;/p&gt;
&lt;p&gt;将&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;packaging&amp;gt;&lt;span class=&quot;pln&quot;&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;改为&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;packaging&amp;gt;&lt;span class=&quot;pln&quot;&gt;war&lt;span class=&quot;tag&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2、打包时排除tomcat.&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;span class=&quot;pln&quot;&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;span class=&quot;pln&quot;&gt;spring-boot-starter-web&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;span class=&quot;pln&quot;&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;span class=&quot;pln&quot;&gt;spring-boot-starter-tomcat&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;scope&amp;gt;&lt;span class=&quot;pln&quot;&gt;provided&lt;span class=&quot;tag&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这里将 scope 属性设置为 provided，这样在最终形成的 WAR 中不会包含这个 JAR 包，因为 Tomcat 或 Jetty 等服务器在运行时将会提供相关的 API 类。&lt;/p&gt;
&lt;p&gt;3、注册启动类&lt;/p&gt;
&lt;p&gt;创建 ServletInitializer.java，继承 SpringBootServletInitializer ，覆盖 configure()，把启动类 Application 注册进去。外部 Web 应用服务器构建 Web Application Context 的时候，会把启动类添加进去。&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;class &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;ServletInitializer &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;extends &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;SpringBootServletInitializer &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;protected &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;SpringApplicationBuilder &lt;span class=&quot;pln&quot;&gt;configure&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;SpringApplicationBuilder &lt;span class=&quot;pln&quot;&gt;application&lt;span class=&quot;pun&quot;&gt;) &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;return &lt;span class=&quot;pln&quot;&gt;application&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;sources&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;typ&quot;&gt;Application&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;kwd&quot;&gt;class&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; java language- java&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;最后执行&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;mvn clean &lt;span class=&quot;kwd&quot;&gt;package &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;typ&quot;&gt;Dmaven&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;test&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;skip&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;kwd&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;会在 target 目录下生成：项目名+版本号.war文件，拷贝到 tomcat 服务器中启动即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gradle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果使用的是 Gradle,基本步奏一样，build.gradle中 添加 war 的支持，排除 spring-boot-starter-tomcat：&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;apply plugin&lt;span class=&quot;pun&quot;&gt;: &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;'war'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;dependencies &lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;compile&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;org.springframework.boot:spring-boot-starter-web:1.4.2.RELEASE&quot;&lt;span class=&quot;pun&quot;&gt;){&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;exclude mymodule&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;str&quot;&gt;&quot;spring-boot-starter-tomcat&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;再使用构建命令&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;gradle build&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;war 会生成在 build\libs 目录下。&lt;/p&gt;
&lt;h2&gt;生产运维&lt;/h2&gt;
&lt;h3&gt;查看 JVM 参数的值&lt;/h3&gt;
&lt;p&gt;可以根据 Java 自带的 jinfo 命令：&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;jinfo &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;flags pid&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;来查看 jar 启动后使用的是什么 gc、新生代、老年代分批的内存都是多少，示例如下：&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;CICompilerCount&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;lit&quot;&gt;3 &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;InitialHeapSize&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;lit&quot;&gt;234881024 &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;MaxHeapSize&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;lit&quot;&gt;3743416320 &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;MaxNewSize&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;lit&quot;&gt;1247805440 &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;MinHeapDeltaBytes&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;lit&quot;&gt;524288 &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;NewSize&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;lit&quot;&gt;78118912 &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;OldSize&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;lit&quot;&gt;156762112 &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:+&lt;span class=&quot;typ&quot;&gt;UseCompressedClassPointers &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:+&lt;span class=&quot;typ&quot;&gt;UseCompressedOops &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:+&lt;span class=&quot;typ&quot;&gt;UseFastUnorderedTimeStamps &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:+&lt;span class=&quot;typ&quot;&gt;UseParallelGC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;CICompilerCount&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; ：最大的并行编译数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;InitialHeapSize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;MaxHeapSize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; ：指定 JVM 的初始和最大堆内存大小&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;typ&quot;&gt;MaxNewSize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; ： JVM 堆区域新生代内存的最大可分配大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;XX&lt;span class=&quot;pun&quot;&gt;:+&lt;span class=&quot;typ&quot;&gt;UseParallelGC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; ：垃圾回收使用 Parallel 收集器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;如何重启&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;简单粗暴&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接 kill 掉进程再次启动 jar 包&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;ps &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;ef&lt;span class=&quot;pun&quot;&gt;|&lt;span class=&quot;pln&quot;&gt;grep java&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;com&quot;&gt;##拿到对于Java程序的pid&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;kill &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;lit&quot;&gt;9 &lt;span class=&quot;pln&quot;&gt;pid&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;com&quot;&gt;## 再次重启&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Java &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;jar xxxx&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;jar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当然这种方式比较传统和暴力，所以建议大家使用下面的方式来管理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脚本执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果使用的是maven,需要包含以下的配置&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;span class=&quot;pln&quot;&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;span class=&quot;pln&quot;&gt;spring-boot-maven-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;executable&amp;gt;&lt;span class=&quot;pln&quot;&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/executable&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; xml language- xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如果使用是 gradle，需要包含下面配置&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;springBoot &lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;executable &lt;span class=&quot;pun&quot;&gt;= &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;启动方式：&lt;/p&gt;
&lt;p&gt;1、 可以直接 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;./&lt;span class=&quot;pln&quot;&gt;yourapp&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;jar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; 来启动&lt;/p&gt;
&lt;p&gt;2、注册为服务&lt;/p&gt;
&lt;p&gt;也可以做一个软链接指向你的jar包并加入到 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pln&quot;&gt;init&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;中，然后用命令来启动。&lt;/p&gt;
&lt;p&gt;init.d 例子:&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;ln &lt;span class=&quot;pun&quot;&gt;-&lt;span class=&quot;pln&quot;&gt;s &lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;kwd&quot;&gt;var&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;yourapp&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;yourapp&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;jar &lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;etc&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;init&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;d&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;yourapp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;chmod &lt;span class=&quot;pun&quot;&gt;+&lt;span class=&quot;pln&quot;&gt;x &lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;etc&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;init&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;d&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;yourapp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样就可以使用 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pln&quot;&gt;stop&lt;/span&gt;&lt;/code&gt;或者是 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pln&quot;&gt;restart&lt;/span&gt;&lt;/code&gt;命令去管理你的应用。&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;str&quot;&gt;/etc/&lt;span class=&quot;pln&quot;&gt;init&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;d&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;yourapp start&lt;span class=&quot;pun&quot;&gt;|&lt;span class=&quot;pln&quot;&gt;stop&lt;span class=&quot;pun&quot;&gt;|&lt;span class=&quot;pln&quot;&gt;restart&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;ol class=&quot;linenums list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot; shell language- shell&quot;&gt;&lt;span class=&quot;pln&quot;&gt;service yourapp start&lt;span class=&quot;pun&quot;&gt;|&lt;span class=&quot;pln&quot;&gt;stop&lt;span class=&quot;pun&quot;&gt;|&lt;span class=&quot;pln&quot;&gt;restart&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;到此 Spring Boot 项目如何测试、联调和打包投产均已经介绍完，以后可以找时间研究一下 Spring Boot 的自动化运维，以及 Spring Boot 和 Docker 相结合的使用。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文章内容已经升级到 Spring Boot 2.x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;示例代码-https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-package&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java 极客技术公众号，是由一群热爱 Java 开发的技术人组建成立，专注分享原创、高质量的 Java 文章。&lt;/strong&gt;&lt;strong&gt;如果您觉得我们的文章还不错，请帮忙赞赏、在看、转发支持，鼓励我们分享出更好的文章。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关注公众号，大家可以在公众号后台回复“博客园”，免费获得作者 Java 知识体系/面试必看资料。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;rich_pages&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/laEmibHFxFw4HxcgPDQRiaQcGWmoqB7Fj8MuG51ic0QUXT2Ytq1NRiawzPNfQzjZzAWbv8JfD3ejia1ibvUYQOqFDqIw/640?wx_fmt=jpeg&quot; alt=&quot;&quot; width=&quot;258px&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jul 2019 23:31:00 +0000</pubDate>
<dc:creator>Java极客技术</dc:creator>
<og:description>有很多网友会时不时的问我， Spring Boot 项目如何测试，如何部署，在生产中有什么好的部署方案吗？这篇文章就来介绍一下 Spring Boot 如何开发、调试、打包到最后的投产上线。 开发阶段</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/justdojava/p/11211807.html</dc:identifier>
</item>
<item>
<title>Unity3D热更新之LuaFramework篇[08]--热更新原理及热更服务器搭建 - 子非鱼`</title>
<link>http://www.cnblogs.com/imteach/p/11257275.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imteach/p/11257275.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;14.79086115993&quot;&gt;
&lt;p&gt;前面铺垫了这么久，终于要开始写热更新了。&lt;/p&gt;
&lt;p&gt;Unity游戏热更新包含两个方面，一个是资源的更新，一个是脚本的更新。&lt;/p&gt;
&lt;p&gt;资源更新是Unity本来就支持的，在各大平台也都能用。而脚本的热更新在iOS平台则是不被允许的（除了Lua）。&lt;/p&gt;
&lt;p&gt;为了让一套代码能在各个平台都支持热更，将游戏的业务逻辑全面Lua化，是一种解决方法。这也是ToLua在做的事。&lt;/p&gt;
&lt;p&gt;关于Unity热更与平台的关系 可以阅读&lt;strong&gt;陈嘉栋&lt;/strong&gt;大佬的文章：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/murongxiaopifu/p/4278947.html&quot;&gt;谁偷了我的热更新？Mono，JIT，iOS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;一、热更新的原理&lt;/h2&gt;
&lt;blockquote readability=&quot;60.902128218602&quot;&gt;
&lt;h3&gt;1、热更新的简单理解&lt;/h3&gt;
&lt;p&gt;　　 手机App的更新方式有两种。&lt;/p&gt;
&lt;p&gt;　　第一种是全量更新。每一次App更新，开发者都需要上传一个完整的软件包（apk、ipa）到分发平台，而用户也需要下载一个完整的新软件包来重新安装。这对用户来说很不友好，对开发者更不友好。&lt;/p&gt;
&lt;p&gt;　　因为开发者上传到平台后，还需要等待平台的漫长审核，特别是iOS平台（短则两天，长则十天半月），很是影响游戏的版本计划。&lt;/p&gt;
&lt;p&gt;　　因此第二种更新方式就出来了。&lt;/p&gt;
&lt;p&gt;　　第二种是增量更新，每次更新，开发者上传本次更新的内容到资源服务器上，用户的App客户端也只用更新本次新增内容就行，无需重新下载App。&lt;/p&gt;
&lt;p&gt;　　看似很完美的方式，并且在端游上也是成熟的操作，但是这样的方式因为更新内容不可控，被苹果给禁止了（Lua是苹果留的一个口子）。&lt;/p&gt;
&lt;h3&gt;2、热更新原理详解&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;（&lt;span&gt;因为我个人对此框架的理解还仅限于使用阶段，并不能很好的阐述其原理。为避免误导，现直接将我学习此框架时所看的文章对于此原理的解释直接引用过来。）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;原文链接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21386682&quot; target=&quot;_blank&quot;&gt;https://zhuanlan.zhihu.com/p/21386682&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 以下两条分隔线之间的内容都是引用：&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;如下图所示，Unity3D的热更新会涉及3个目录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201907/634826-20190727225231996-453577136.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;                                                      热更新的过程图&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;游戏资源目录&lt;/strong&gt;：里面包含Unity3D工程中StreamingAssets文件夹下的文件。安装游戏之后，这些文件将会被一字不差地复制到目标机器上的特定文件夹里，不同平台的文件夹不同，如下所示（上图以windows平台为例）&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Mac OS或Windows：Application.dataPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/StreamingAssets&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
IOS： Application.dataPath &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Raw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
Android：jar:file:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot; + Application.dataPath + &quot;!/assets/&quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;​&lt;/span&gt;&lt;strong&gt;数据目录&lt;/strong&gt;&lt;span&gt;：由于“游戏资源目录”在Android和IOS上是只读的，不能把网上的下载的资源放到里面，所以需要建立一个“数据目录”，该目录可读可写。第一次开启游戏后，程序将“游戏资源目录”的内容复制到“数据目录中”（步骤1，这个步骤只会执行一次，下次再打开游戏就不复制了）。游戏过程中的资源加载，都是从“数据目录”中获取、解包（步骤3）。不同平台下，“数据目录”的地址也不同，LuaFramework的定义如下：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Android或IOS：Application.persistentDataPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/LuaFramework&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Mac OS或Windows：c:&lt;/span&gt;/LuaFramework/&lt;span&gt;
调试模式下：Application.dataPath &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/StreamingAssets/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
注：”LuaFramework”和”StreamingAssets”由配置决定，这里取默认值
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;网络资源地址&lt;/strong&gt;：存放游戏资源的网址，游戏开启后，程序会从网络资源地址下载一些更新的文件到数据目录。&lt;/p&gt;
&lt;p&gt;这些目录包含着不同版本的资源文件，以及用于版本控制的files.txt。Files.txt的内容如下图所示，里面存放着资源文件的名称和md5码。程序会先下载“网络资源地址”上的files.txt，然后与“数据目录”中文件的md5码做比较，更新有变化的文件（步骤2）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201907/634826-20190727225221504-1976051724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;em&gt;files.txt&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;LuaFramework的热更新代码定义在Assets\LuaFramework\Scripts\Manager\GameManager.cs，真正用到项目时可能还需少许改动。 &lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;  个人理解：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  游戏资源目录： &lt;/strong&gt;是游戏的安装目录。如果在是Unity里直接运行，应该指的就是Assset/StreamingAssets目录；&lt;/p&gt;
&lt;p&gt;　　如果是打包成exe程序，应该是exe程序里的某个目录（猜的，没验证）&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;数据目录：&lt;/strong&gt;因为游戏资源目录不可写，因此程序又额外开辟的一个能读写的目录，就是数据目录。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;网络资源地址：&lt;/strong&gt;这个说的就是服务器资源目录了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;二、热更服务器搭建&lt;/h2&gt;
&lt;blockquote readability=&quot;47.899141630901&quot;&gt;
&lt;p&gt;　　从上文了解下，要实现热更新功能，一个用于存放网络资源的服务器是必须的。我这里选用Tomcat来做服务器（任何其它能提供网络访问服务的服务器都可以）。&lt;/p&gt;
&lt;h3&gt;下载并安装Tomcat&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　1）下载Tomcat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　版本：Tomcat9.0 windows平台64位版，下载地址：&lt;a href=&quot;https://tomcat.apache.org/download-90.cgi&quot;&gt;https://tomcat.apache.org/download-90.cgi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201907/634826-20190727232755765-821324338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2）下载JDK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　jdk版本1.8或以上（这个版本根据Tomcat的需求来，如果使用其它版本Tomcat，则可能需要其它版本的jdk）&lt;/p&gt;
&lt;p&gt;　　下载地址：&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201907/634826-20190727233438322-737526799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;3）环境变量配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Tomcat下载之后，无需安装，解压到指定目录即可。&lt;/p&gt;
&lt;p&gt;　　JDK下载之后，执行安装程序，直到结束。&lt;/p&gt;
&lt;p&gt;　　为了让Tomcat能正常运行，需要配置环境变量，我配置了如下四项。&lt;/p&gt;
&lt;p&gt;　　用户变量里加这两个：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;JAVA_HOME：F:\ProgramsDirectory\Java\jdk1.8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;CATALINA_HOME: I:\apache-tomcat-9.0.22&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　系统变量Path里添加这两个目录：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;F:\ProgramsDirectory\Java\jdk1.8\bin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;I:\apache-tomcat-9.0.22\bin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　请参照自己的实际目录进行调整，这里不提供详细的配置方法，我这个也不是标准配法。有问题请善用搜索。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;4）运行Tomcat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　环境变量配置完成之后，执行&lt;strong&gt;apache-tomcat-9.0.22\bin&lt;/strong&gt;目录下的&lt;strong&gt;startup.bat&lt;/strong&gt;文件。&lt;/p&gt;
&lt;p&gt;　　看到http-nio-8080之类的字样，表示服务器已经运行，如下图。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201907/634826-20190727234829499-1219243449.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;（我这里不知道为啥乱码了，明明没有中文及空格等不合规目录，不过不影响使用）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在浏览器里输入：&lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; ，看到如下页面，表示Tomcat启动成功。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201907/634826-20190727235117484-42130209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　本篇就讲到这里，后边就要讲怎么实现代码及资源更新了。&lt;/p&gt;
&lt;p&gt;　　晚安！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 27 Jul 2019 15:58:00 +0000</pubDate>
<dc:creator>子非鱼`</dc:creator>
<og:description>前言 前面铺垫了这么久，终于要开始写热更新了。 Unity游戏热更新包含两个方面，一个是资源的更新，一个是脚本的更新。 资源更新是Unity本来就支持的，在各大平台也都能用。而脚本的热更新在iOS平台</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/imteach/p/11257275.html</dc:identifier>
</item>
<item>
<title>STL map 详细用法 - dyhaohaoxuexi</title>
<link>http://www.cnblogs.com/dyhaohaoxuexi/p/11257335.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dyhaohaoxuexi/p/11257335.html</guid>
<description>&lt;p&gt;Map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，第二个称为该关键字的值）的数据 处理能力。&lt;/p&gt;
&lt;h3&gt;需要的库&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
#include &amp;lt;map&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;基本操作&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
map&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;m;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是定义了一个以string为关键字，以int为值的map&lt;/p&gt;
&lt;h3&gt;插入&lt;/h3&gt;
&lt;h4&gt;方法1：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
map&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;m;
m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;101&lt;/span&gt;&lt;span&gt;;    
m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;102&lt;/span&gt;&lt;span&gt;;  
m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eric&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;103&lt;/span&gt;;   
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;方法2：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
m.insert(pair&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lee&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;104&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;方法3：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
m.insert(map&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;::value_type(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Karen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;105&lt;/span&gt;)); 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;遍历&lt;/h3&gt;
&lt;p&gt;定义一个迭代指针iter，使其指向map，实现对map的遍历。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
#include&amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    map&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;m;
    m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;101&lt;/span&gt;&lt;span&gt;;
    m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;102&lt;/span&gt;&lt;span&gt;;
    m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eric&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;103&lt;/span&gt;&lt;span&gt;;
    map&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;::iterator iter;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(iter=m.begin(); iter!=m.end(); iter++&lt;span&gt;)
        cout&lt;/span&gt;&amp;lt;&amp;lt;iter-&amp;gt;first &amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;iter-&amp;gt;second&amp;lt;&amp;lt;&lt;span&gt;endl;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Alice-&amp;gt;&lt;span&gt;102&lt;/span&gt;&lt;span&gt;
Bob&lt;/span&gt;-&amp;gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt;
Eric&lt;/span&gt;-&amp;gt;&lt;span&gt;103&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到map自动在内部以关键字为准，按字典序排序，而不是根据输入的顺序；&lt;/p&gt;
&lt;p&gt;需要注意的是 当我进行实验的时候 我发现这样一个现象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#include&amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    map&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;m;
    m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;101&lt;/span&gt;&lt;span&gt;;
    m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;102&lt;/span&gt;&lt;span&gt;;
    m[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eric&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;103&lt;/span&gt;&lt;span&gt;;
    map&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;::iterator iter;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(iter=m.begin(); iter!=m.end(); iter++&lt;span&gt;)
        cout&lt;/span&gt;&amp;lt;&amp;lt;iter-&amp;gt;first &amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;iter-&amp;gt;second&amp;lt;&amp;lt;&lt;span&gt;endl;
        
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(m[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AAA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(iter=m.begin(); iter!=m.end(); iter++&lt;span&gt;)
        cout&lt;/span&gt;&amp;lt;&amp;lt;iter-&amp;gt;first &amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;iter-&amp;gt;second&amp;lt;&amp;lt;&lt;span&gt;endl;
        

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当询问一个map中不存在的数的时候，返回的值应该是0，不过当你再次遍历的时候，就会发现map中已经多了一个键值对，只不过值是0：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Alice-&amp;gt;&lt;span&gt;102&lt;/span&gt;&lt;span&gt;
Bob&lt;/span&gt;-&amp;gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt;
Eric&lt;/span&gt;-&amp;gt;&lt;span&gt;103&lt;/span&gt;&lt;span&gt;
NO
AAA&lt;/span&gt;-&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
Alice&lt;/span&gt;-&amp;gt;&lt;span&gt;102&lt;/span&gt;&lt;span&gt;
Bob&lt;/span&gt;-&amp;gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt;
Eric&lt;/span&gt;-&amp;gt;&lt;span&gt;103&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在做题时一定要好好注意。&lt;/p&gt;
&lt;h3&gt;查找&lt;/h3&gt;
&lt;h4&gt;方法1：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cout&amp;lt;&amp;lt;m.find(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)-&amp;gt;second&amp;lt;&amp;lt;endl;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果按关键字搜索，搜不到的话会输出乱码&lt;/p&gt;
&lt;h4&gt;方法2：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    map&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;::iterator iter1;
    iter1 &lt;/span&gt;= m.find(&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(iter1 !=&lt;span&gt; m.end())
    cout&lt;/span&gt;&amp;lt;&amp;lt;iter1-&amp;gt;first &amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;iter1-&amp;gt;second&amp;lt;&amp;lt;&lt;span&gt;endl;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;    
    cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no fount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;endl;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义一个指针，指向map，如果没有的话会返回m.end()&lt;/p&gt;
&lt;h3&gt;删除&lt;/h3&gt;
&lt;h4&gt;方法1&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
m.erase(iter1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的是指针的操作&lt;/p&gt;
&lt;h4&gt;方法2&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
m.erase(&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AAA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者是根据关键字删除&lt;/p&gt;

&lt;h3&gt;map的相关函数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;begin()          返回指向map头部的迭代器&lt;/li&gt;
&lt;li&gt;clear()         删除所有元素&lt;/li&gt;
&lt;li&gt;count()          返回指定元素出现的次数&lt;/li&gt;
&lt;li&gt;empty()          如果map为空则返回true&lt;/li&gt;
&lt;li&gt;end()            返回指向map末尾的迭代器&lt;/li&gt;
&lt;li&gt;equal_range()    返回特殊条目的迭代器对&lt;/li&gt;
&lt;li&gt;erase()          删除一个元素&lt;/li&gt;
&lt;li&gt;find()           查找一个元素&lt;/li&gt;
&lt;li&gt;get_allocator()  返回map的配置器&lt;/li&gt;
&lt;li&gt;insert()         插入元素&lt;/li&gt;
&lt;li&gt;key_comp()       返回比较元素key的函数&lt;/li&gt;
&lt;li&gt;lower_bound()    返回键值&amp;gt;=给定元素的第一个位置&lt;/li&gt;
&lt;li&gt;max_size()       返回可以容纳的最大元素个数&lt;/li&gt;
&lt;li&gt;rbegin()         返回一个指向map尾部的逆向迭代器&lt;/li&gt;
&lt;li&gt;rend()           返回一个指向map头部的逆向迭代器&lt;/li&gt;
&lt;li&gt;size()           返回map中元素的个数&lt;/li&gt;
&lt;li&gt;swap()            交换两个map&lt;/li&gt;
&lt;li&gt;upper_bound()     返回键值&amp;gt;给定元素的第一个位置&lt;/li&gt;
&lt;li&gt;value_comp()      返回比较元素value的函数&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Sat, 27 Jul 2019 15:45:00 +0000</pubDate>
<dc:creator>dyhaohaoxuexi</dc:creator>
<og:description>Map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，第二个称为该关键字的值）的数据 处理能力。 需要的库 基本操作 定义 这是定义了一个以</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/dyhaohaoxuexi/p/11257335.html</dc:identifier>
</item>
<item>
<title>CSDN 免积分下载 - SeeMore</title>
<link>http://www.cnblogs.com/yinlong1991/p/free_csdn.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yinlong1991/p/free_csdn.html</guid>
<description>&lt;p&gt;注意如果 酷Q 启动时报错说插件加载失败，或者系统弹窗提示缺少 DLL 文件，则需要安装 &lt;a href=&quot;https://aka.ms/vs/15/release/VC_redist.x86.exe&quot;&gt;VC++ 2017 运行库&lt;/a&gt;（&lt;strong&gt;一定要装 x86 也就是 32 位版本！&lt;/strong&gt;），如果你的系统是 Windows 7 或 Windows Server 2008、或者安装 VC++ 2017 运行库之后仍然加载失败，则还需要安装 &lt;a href=&quot;https://support.microsoft.com/zh-cn/help/3118401/update-for-universal-c-runtime-in-windows&quot;&gt;通用 C 运行库更新&lt;/a&gt;，在这个链接里选择你系统对应的版本下载安装即可。如果此时还加载失败，请尝试重启系统。&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jul 2019 15:44:00 +0000</pubDate>
<dc:creator>SeeMore</dc:creator>
<og:description>你可能不相信这个标题，那么打开下面的链接试试吧 ↓↓↓ 'Github项目' 最新功能 ↓↓↓ '0积分资源搜索' '0积分资源搜索（备用地址）' 'CSDN资源导出' CSDN资源下载体验群 （每日</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/yinlong1991/p/free_csdn.html</dc:identifier>
</item>
<item>
<title>阅读《代码整洁之道》总结 - 编码砖家</title>
<link>http://www.cnblogs.com/xiaoyangjia/p/11245235.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoyangjia/p/11245235.html</guid>
<description>&lt;p&gt; 很早就阅读过《代码整洁之道》(英文版Clean Code)，当时博主是个青涩的菜鸟，正在为团队创造着混乱的代码。多年的工作中，屡次被别人的代码坑的苦不堪言，回想起当年我留下的代码，肯定也坑害了后来的同僚。当阅读JDK源码或者其他优秀开源工程时，叹服作者代码构建之精良，他们都有共同的特点：精确的变量名、恰到好处的设计模式、详细而不赘述的注释等等。如今重读本书，总结一下内容并加上自己的一些见解与大家分享。&lt;/p&gt;
&lt;h3 id=&quot;代码是团队沟通方式&quot;&gt;&lt;a name=&quot;code_is_communication&quot;&gt;代码是团队沟通方式&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 工作的沟通，不只是电子邮件或者面对面语言交流，代码也是沟通方式之一。用代码实现需求，只是万里长征走完了第一步，必须让代码表达自己的设计思想。试想一下，你负责的功能被另外一个同事接手，如果你的代码结构清晰、注释合理，他就不用频繁的询问代码疑点，不用打断你的工作。编写代码的时候，应该考虑到别人的阅读感受，减少阅读障碍，为整个团队创造代码，而不是你自己。&lt;/p&gt;
&lt;h3 id=&quot;让营地比来时更干净&quot;&gt;&lt;a name=&quot;make_clear&quot;&gt;让营地比来时更干净&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 这是美国童子军规的谚语，美国童子军相当于半军事化管理的青少年夏令营。夏令营结束后孩子们离开营地，要打扫卫生保持整洁，让营地比来时更干净。在软件开发过程中，可以理解为&lt;code&gt;不要破坏规则，不要引入混乱&lt;/code&gt;。如果团队已经制定了代码规范，比如类名必须有子系统前缀比如&lt;code&gt;BiOrderService&lt;/code&gt;(Bi指BI业务部门)，就继续遵循下去；再比如，团队已经提供了公共库比如MD5的加密，那就不要再次引入新的MD5库。很多新手程序员接活儿后，看到不喜欢的规范就另起炉灶，需要某些工具类也不询问老司机公共库有没有，直接引入自己熟悉的库，造成兼容性或者其他问题。&lt;/p&gt;
&lt;h3 id=&quot;合适的命名&quot;&gt;&lt;a name=&quot;corrent_name&quot;&gt;合适的命名&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 合适的命名是头等大事，正如给新生儿起个好名字那样重要。不合适的命名通常是&lt;code&gt;词不达意、误导观众、过度缩写&lt;/code&gt;等，由于英文并非我们的母语，找个合适的单词命名似乎真的很难。我建议是先把业务弄清楚，组织会议定下常用业务领域的单词，禁止组员各自发明。比如代码里使用&lt;code&gt;canteen&lt;/code&gt;表示饭堂，那就不要再发明&lt;code&gt;DinnerHall&lt;/code&gt;，既啰嗦又误导同僚。&lt;/p&gt;
&lt;h5 id=&quot;看看反例&quot;&gt;看看反例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;// 手机号
String phone = “13421800409”;
// 获取地址
private String getDiZhi();
//修改密码
private void modifyPassword(String password1 ,String password2)&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;看看正例&quot;&gt;看看正例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;// 手机号 mobileNo比phone更精确
String mobileNo= “13421800409”;

// 避免英文拼音混杂
private String getAddress();

// 参数的命名要区分意义
private void modifyPassword(String oldPassowrd,String newPassword)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;短小的方法&quot;&gt;&lt;a name=&quot;short_method&quot;&gt;短小的方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;  方法有多短小才合适没有定论，但是长达500行的一个方法，绝对让阅读者起杀人之心。过长的方法，让阅读者不知道从何看起，看了前面忘记后面。将复杂的方法，拆分成逻辑相对简单的短方法。&lt;/p&gt;
&lt;h5 id=&quot;看看反例-1&quot;&gt;看看反例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;//  获取个人信息
Private UserDTO getUserDTO(Integer userId)
{
    //获取基本信息 
    … 此处写了10行

    //获取最近的一次订单信息
    …  此处写了30行

   // 获取钱包余额、可用优惠券张数等
    ...   此处写了30行

   return userDTO;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;看看正例-1&quot;&gt;看看正例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;//  获取个人信息
Private UserDTO getUserDTO(Integer userId)
{
    //获取基本信息 
    UserDTO userDTO= getUserBasicInfo(userId);

    //获取最近的一次订单信息
    userDTO.setUserLastOrder(getUserLastOrder(userId));

    // 获取钱包、可用优惠券张数等
    userDTO.setUserAccount(getUserAccount(userId));  
    return userDTO;
}

Private  UserDTO getUserBasicInfo(userId);
Private  UserLastOrder getUserLastOrder(userId);
Private  UserAccount getUserAccount(userId);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;减少ifelse嵌套&quot;&gt;&lt;a name=&quot;reduce_nest&quot;&gt;减少if/else嵌套&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;  为什么要减少嵌套，难道嵌套看上去不时尚吗？我曾经看到某位同事的一段代码嵌套达到9层，他自己再去维护的时候都看晕了。代码过度嵌套的结果是只有原作者才能读懂，接盘侠一脸茫然。&lt;/p&gt;
&lt;h5 id=&quot;看看反例-2&quot;&gt;看看反例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;// 修改用户密码，这个例子只有3层嵌套，很温柔了
public boolean modifyPassword(Integer userId, String oldPassword, String newPassword) {
      if (userId != null &amp;amp;&amp;amp; StringUtils.isNotBlank(newPassword) &amp;amp;&amp;amp; SpringUtils.isNotBlank(oldPassword)) {
    User user = getUserById(userId);
    if(user != null) {
         if(user.getPassword().equals(oldPassword) {
              return updatePassword(userId, newPassword)
         }
    }
      }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;看看正例-2&quot;&gt;看看正例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;// 修改用户密码 
Public Boolean modifyPassword(Integer userId, String oldPassword, String newPassword) {
     if (userId == null || StringUtils.isBlank(newPassword) || StringUtils.isBlank(oldPassword)) {
            return false;
     }
     User user = getUserById(userId);
     if(user == null) {
           return false;
      }
     if(!user.getPassword().equals(oldPassword) {
           return false;    
     }
     return updatePassword(userId, newPassword);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正例采用卫语句减少了嵌套，但是并非所有场景都适合这样改写。如果不适合，可以将关联性高的逻辑抽取成一个独立的方法减少嵌套。&lt;/p&gt;
&lt;h3 id=&quot;抽离trycatch&quot;&gt;&lt;a name=&quot;remove_trycatch&quot;&gt;抽离try/catch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;  大家有没有见过一个超长的方法，从头到尾被一个try/catch照顾着？博主经历过的项目中，这种不负责的写法比比皆是。并非每行代码都会抛出错误，只要将会抛出错误的业务放在一个独立的方法即可。&lt;/p&gt;
&lt;h5 id=&quot;看看反例-3&quot;&gt;看看反例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;//  获取个人信息
Private UserDTO getUserDTO(Integer userId)
{
   try { 
       //获取基本信息 
       ... 此处写了10行
       //获取最近的一次订单信息.
       ...此处写了20行
       // 获取钱包、可用优惠券张数等
       ...此处写了20行
    }catch (Exception e) {
        logger.error(e);
        return null;
    }
}
   return userDTO;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;看看正例-3&quot;&gt;看看正例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;//  获取个人信息
Private UserDTO getUserDTO(Integer userId)
{
    //获取基本信息 
    UserDTO userDTO= getUserBasicInfo(userId);

    //获取最近的一次订单信息
    userDTO.setUserLastOrder(getUserLastOrder(userId));

    // 获取钱包、可用优惠券张数等
    userDTO.setUserAccount(getUserAccount(userId));  
    return userDTO;
}
Private  UserDTO getUserBasicInfo(userId);
Private  UserLastOrder getUserLastOrder(userId);
Private  UserAccount getUserAccount(userId)｛
      try{ // TODO } catch( Exception e) { //TODO}
｝&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;封装多个参数&quot;&gt;&lt;a name=&quot;package_params&quot;&gt;封装多个参数&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 如果方法参数将超过3个，建议放在类中包装起来，否则再增加参数时，由于语义的强耦合会导致调用方语法错误。在后台管理中的分页查询接口，常常会有很多查询参数，而且有可能增加，封装起来是最好的。&lt;/p&gt;
&lt;h5 id=&quot;看看反例-4&quot;&gt;看看反例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;// 分页查询订单 6个参数
Public Page&amp;lt;Order&amp;gt; queryOrderByPage(Integer current,Integer size,String productName,Integer userId,Date startTime,Date endTime,Bigdecimal minAmount ,Bigdecimal maxAmount) {

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;看看正例-4&quot;&gt;看看正例：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;@Getter
@Setter
Public class OrderQueryDTO extends PageDTO {
 private String productName;
 private Integer userId;
 private Date startTime;
 private Date endTime;
 private Bigdecimal minAmount ;
 private Bigdecimal maxAmount;
}
// 分页查询订单 6个参数
Public Page&amp;lt;Order&amp;gt; queryOrderByPage(OrderQueryDTO orderQueryDTO) {

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第三方库&quot;&gt;&lt;a name=&quot;third_framework&quot;&gt;第三方库&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;lombok&quot;&gt;&lt;a name=&quot;third_framework_lombok&quot;&gt;Lombok&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Lombok组件通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法&lt;br/&gt;举例如下：&lt;br/&gt;@Setter 注解在类或字段，注解在类时为所有字段生成setter方法，注解在字段上时只为该字段生成setter方法。&lt;br/&gt;@Getter 使用方法同上，区别在于生成的是getter方法。&lt;br/&gt;@ToString 注解在类，添加toString方法。&lt;br/&gt;@EqualsAndHashCode 注解在类，生成hashCode和equals方法。&lt;br/&gt;@NoArgsConstructor 注解在类，生成无参的构造方法。&lt;br/&gt;@RequiredArgsConstructor 注解在类，为类中需要特殊处理的字段生成构造方法，比如final和被@NonNull注解的字段。&lt;br/&gt;@AllArgsConstructor 注解在类，生成包含类中所有字段的构造方法。&lt;br/&gt;@Data 注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。&lt;/p&gt;
&lt;h5 id=&quot;常规写法&quot;&gt;常规写法：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;Public class Order {
     private Integer userId;
     
     public Integer getUserId() {
          return userId;
    } 

    public void setUserId(Integer userId) {
          return this.userId = userId; 
 }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;采用lombok&quot;&gt;采用Lombok：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;@Getter
@Setter
Public class Order {
     private Integer userId;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;apache-commons系列&quot;&gt;&lt;a name=&quot;third_framework_commons&quot;&gt;Apache Commons系列&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;  Apache Commons系列组件给我们提供了关于字符串、集合、IO操作等工具方法。这些组件是个大宝库，提供了不少轮子。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;beanUtils&lt;/td&gt;
&lt;td&gt;JavaBean进行各种操作，克隆对象、属性等等&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;codec&lt;/td&gt;
&lt;td&gt;处理常用的编码方法的工具类包，例如DES、SHA1、MD5、Base64等.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;collections&lt;/td&gt;
&lt;td&gt;java集合框架操作&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;configuration&lt;/td&gt;
&lt;td&gt;java应用程序的配置管理类库&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;io&lt;/td&gt;
&lt;td&gt;io工具的封装&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;lang&lt;/td&gt;
&lt;td&gt;Java基本对象方法的工具类包 如StringUtils、ArrayUtils等等.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;logging&lt;/td&gt;
&lt;td&gt;提供的日志接口&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;net&lt;/td&gt;
&lt;td&gt;提供了客户端和服务器端的数据验证框架&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h5 id=&quot;看看例子&quot;&gt;看看例子：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;例1: 判断集合是否为空:
CollectionUtils.isEmpty(null): true
CollectionUtils.isEmpty(new ArrayList()): true
CollectionUtils.isEmpty({a,b}): false

例2: 判断集合是否不为空:
CollectionUtils.isNotEmpty(null): false
CollectionUtils.isNotEmpty(new ArrayList()): false
CollectionUtils.isNotEmpty({a,b}): true

例3：2个集合间的操作： 
集合a: {1,2,3,3,4,5}
集合b: {3,4,4,5,6,7}
CollectionUtils.union(a, b)(并集): {1,2,3,3,4,4,5,6,7}
CollectionUtils.intersection(a, b)(交集): {3,4,5}
CollectionUtils.disjunction(a, b)(交集的补集): {1,2,3,4,6,7}
CollectionUtils.disjunction(b, a)(交集的补集): {1,2,3,4,6,7}
CollectionUtils.subtract(a, b)(A与B的差): {1,2,3}
CollectionUtils.subtract(b, a)(B与A的差): {4,6,7}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 27 Jul 2019 14:54:00 +0000</pubDate>
<dc:creator>编码砖家</dc:creator>
<og:description>代码是团队沟通方式 让营地比来时更干净 合适的命名 短小的方法 减少if/else嵌套 抽离try/catch 封装多个参数 第三方库 Lombok Apache Commons系列  很早</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaoyangjia/p/11245235.html</dc:identifier>
</item>
<item>
<title>如何判断链表有环 - 明说</title>
<link>http://www.cnblogs.com/cone/p/11257063.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cone/p/11257063.html</guid>
<description>&lt;p&gt;&lt;span&gt;前天晚上临睡觉前看到了公众号脚本之家推送的一篇文章，文章内容是一道算法题，并给出了思路解释，但没有具体源码实现，这让我觉得少了点什么，于是，趁周末，我补齐了缺失的内容，好了，no code, no bb，我们开始吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;题目描述：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;有一个单向链表，链表中有可能出现“环”，就像下图这样。那么，如何用程序来判断该链表是否为有环链表呢？（图片来自公众号）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1532786/201907/1532786-20190727210401134-333401162.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法1：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从头开始遍历整个单链表，每遍历一个新节点，就把它与之前遍历过的节点进行比较，如果值相同，那么就认为这两个节点是一个节点，则证明链表有环，停止遍历，否则继续遍历下一个节点，重复刚才的操作，直到遍历结束。结合上图来说，流程是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 得到 &quot;3&quot;节点，把它与第一个节点 “5”比较，值不相等，继续遍历下一个节点 “7”。（从第二个节点开始遍历）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 得到 “7”节点，把它依次与 “5”、“3”比较，值不相等，继续遍历下一个节点 “2”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 重复以上操作，直到遍历完节点 “1”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 得到节点 “2”，把它依次与 “5”、“3”、“7”、“2”、“6”、“8”、“1”进行比较，当比较到节点 “2”时，值相等，遍历结束，证明该链表有环。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设链表的节点数量为n，则该解法的时间复杂度为O（n2），由于没有创建额外的存储空间，所以空间复杂度为O（1）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链表的实现比较简单，我只写了一个add方法，一个display方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2334f185-a19d-42d1-b55d-6ecd2a572b76')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2334f185-a19d-42d1-b55d-6ecd2a572b76&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2334f185-a19d-42d1-b55d-6ecd2a572b76&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2334f185-a19d-42d1-b55d-6ecd2a572b76',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2334f185-a19d-42d1-b55d-6ecd2a572b76&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单向链表&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SingleLinkedList {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Node head;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标识头节点&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标识链表中节点个数&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SingleLinkedList() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.size = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.head = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;node类&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Node{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; Object data;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每个节点的数据&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; Node next;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向下一个节点的链接&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node(Object data) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.data =&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;     * 将节点插入链表
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; data 带插入的值
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; add(Object data) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             head = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(data);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             size++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (temp.next != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         temp.next = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(data);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         size++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;     * 从头开始遍历节点
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display() {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (size &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             Node node =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (size == 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 System.out.println(&quot;[&quot; + node.data + &quot;]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (node != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                System.out.println(node.data);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 node =&lt;span&gt; node.next;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             System.out.println(&quot;[]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法1如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 根据索引得到链表的某个节点的值
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object getNode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (key &amp;lt; 0 || key &amp;gt; size - 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArrayIndexOutOfBoundsException(&quot;越界！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (temp != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (count ==&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp.data;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 count++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt;     
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;     * 从头开始，依次与给定索引位置的节点的值进行比较，如果相同，则返回true，否则false
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; havaSameElement(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (temp != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; count &amp;lt;&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (temp.data ==&lt;span&gt; getNode(key)) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             count++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;     * 方式1
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAnnulate1() {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; size; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (havaSameElement(i)) {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法2：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这种方法用到了HashSet中add方法去重的特点，思路是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① new一个HashSet，用来存储之前遍历过的节点值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;②从头节点head开始，依次遍历链表中的节点，并把它add到集合中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 如果在集合中已经有一个相同的值，那么会返回false，这样便证明链表有环，退出遍历&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法2如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 方式2
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAnnulate2() {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Set&amp;lt;Object&amp;gt; set = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (temp != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;set.add(temp.data)) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法3：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;定义两个指针tortoise与rabbit，让它们一开始均指向head头节点，之后，tortoise每次向后移动一个节点，rabbit每次向后移动2个节点，只要这个链表是有环的，它们必定会在某一次移动完后相遇，什么？你问我为什么？我们来思考这样一个问题，两个人在运动场跑步，他们的起始位置都是一样的，当开跑后，只有在两种情况下，他们的位置会重合，第一就是他们的速度始终一致，第二就是跑得快的那个人套圈，如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1532786/201907/1532786-20190727215550943-553652147.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们假设两位跑步的同学速度始终不变，即tortoise以V的速度进行移动，rabbit以2V的速度进行移动，在经过了相同的时间T后，他们相遇了，此时tortoise移动的距离为VT，而rabbit移动的距离为2VT，他们移动的距离差VT，即为这个链表中 “环”的周长，如上图所示，节点A表示为环入口，节点B表示他们第一次相遇，我们将head头节点至节点A的距离记为a，将节点A至他们第一次相遇的节点B的距离记为b，通过我们刚才的分析，不难得出，tortoise移动的距离VT = a + b，等量代换，他们移动的距离差也为 a+ b，所以链表中环的周长为 a + b，现在已知节点A至节点B的距离为b，那么节点B至节点A的距离便为a，至此，发现什么了？head头节点到节点A的距离同样为a，我们建立一个指针 start 指向头节点，它与B节点处的tortoise同时以一个节点的速度进行移动，一段时间后，它们将在环入口相遇。我们不光能证明一个链表是否有环，还能找到环的入口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法3如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node getIntersect() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Node tortoise =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Node rabbit =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (rabbit != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; rabbit.next != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             tortoise =&lt;span&gt; tortoise.next;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             rabbit =&lt;span&gt; rabbit.next.next;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (tortoise ==&lt;span&gt; rabbit) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tortoise;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object isAnnulate3() {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (temp == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Node intersect =&lt;span&gt; getIntersect();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (intersect == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         Node startNode =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (startNode !=&lt;span&gt; intersect) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             startNode =&lt;span&gt; startNode.next;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             intersect =&lt;span&gt; intersect.next;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; startNode.data;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         
&lt;span&gt;31&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我要说明的是，方法3中的代码只是 “伪代码”，它并不能真的证明链表有环，并返回环的入口节点值。至于为什么，我的理解是，因为单链表的结构特点，它并不会真的存在 “环”，我们这里说的环只是把它抽象出来，实际上，单链表中一个节点只保留有对它后面那个节点的引用，并没有对它前面节点的引用，所以，并不存在真正的 “环”，不过，这种思路还是值得学习的。假设链表的节点数量为n，则该算法的时间复杂度为O（n），除指针外，没有占用任何额外的存储空间，所以空间复杂度为O（1）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;完整代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c0dd9e18-58f1-4cfb-af65-eb8fa3beb414')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c0dd9e18-58f1-4cfb-af65-eb8fa3beb414&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c0dd9e18-58f1-4cfb-af65-eb8fa3beb414&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c0dd9e18-58f1-4cfb-af65-eb8fa3beb414',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c0dd9e18-58f1-4cfb-af65-eb8fa3beb414&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; judgeLinkedListCircle;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt; * 单向链表
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Cone
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt; 2019年7月27日
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SingleLinkedList {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Node head;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标识头节点&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标识链表中节点个数&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;     
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SingleLinkedList() {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.size = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.head = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;     
&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;node类&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Node{
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; Object data;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每个节点的数据&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; Node next;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向下一个节点的链接&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node(Object data) {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.data =&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     
&lt;span&gt; 32&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;     * 将节点插入链表
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; data 带插入的值
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; add(Object data) {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             head = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(data);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             size++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (temp.next != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         temp.next = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(data);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         size++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     
&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;     * 从头开始遍历节点
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display() {
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (size &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             Node node =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (size == 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                 System.out.println(&quot;[&quot; + node.data + &quot;]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (node != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;                System.out.println(node.data);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                 node =&lt;span&gt; node.next;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;             System.out.println(&quot;[]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;     
&lt;span&gt; 69&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;     * 根据索引得到链表的某个节点的值
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object getNode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         
&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (key &amp;lt; 0 || key &amp;gt; size - 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArrayIndexOutOfBoundsException(&quot;越界！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (temp != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (count ==&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp.data;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 count++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     
&lt;span&gt; 93&lt;/span&gt;     
&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;     * 从头开始，依次与给定索引位置的节点的值进行比较，如果相同，则返回true，否则false
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; havaSameElement(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (temp != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; count &amp;lt;&lt;span&gt; key) {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (temp.data ==&lt;span&gt; getNode(key)) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             count++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     
&lt;span&gt;115&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;     * 方式1
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAnnulate1() {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; size; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (havaSameElement(i)) {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;     
&lt;span&gt;130&lt;/span&gt;     
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;     * 方式2
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAnnulate2() {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         Set&amp;lt;Object&amp;gt; set = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (temp != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;set.add(temp.data)) {
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             temp =&lt;span&gt; temp.next;
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;     
&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node getIntersect() {
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         Node tortoise =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;         Node rabbit =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (rabbit != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; rabbit.next != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;             tortoise =&lt;span&gt; tortoise.next;
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;             rabbit =&lt;span&gt; rabbit.next.next;
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (tortoise ==&lt;span&gt; rabbit) {
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tortoise;
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;     
&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt; &lt;span&gt;     * 方式3
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object isAnnulate3() {
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;         Node temp =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (temp == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;         Node intersect =&lt;span&gt; getIntersect();
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (intersect == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;         Node startNode =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (startNode !=&lt;span&gt; intersect) {
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             startNode =&lt;span&gt; startNode.next;
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             intersect =&lt;span&gt; intersect.next;
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; startNode.data;
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;         
&lt;span&gt;184&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; 
&lt;span&gt;186&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如有错误，欢迎指正。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码已上传至github：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/Thinker-Mars/ByteDance&quot;&gt;https://github.com/Thinker-Mars/ByteDance&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
<pubDate>Sat, 27 Jul 2019 14:29:00 +0000</pubDate>
<dc:creator>明说</dc:creator>
<og:description>如何判断链表有环 前天晚上临睡觉前看到了公众号脚本之家推送的一篇文章，文章内容是一道算法题，并给出了思路解释，但没有具体源码实现，这让我觉得少了点什么，于是，趁周末，我补齐了缺失的内容，好了，no c</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cone/p/11257063.html</dc:identifier>
</item>
<item>
<title>2019前端面试系列——JS面试题 - 奔跑的瓜牛</title>
<link>http://www.cnblogs.com/chenwenhao/p/11253403.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenwenhao/p/11253403.html</guid>
<description>&lt;h3 id=&quot;判断-js-类型的方式&quot;&gt;判断 js 类型的方式&lt;/h3&gt;
&lt;h5 id=&quot;typeof&quot;&gt;1. typeof&lt;/h5&gt;
&lt;p&gt;可以判断出'string','number','boolean','undefined','symbol'&lt;br/&gt;但判断 typeof(null) 时值为 'object'; 判断数组和对象时值均为 'object'&lt;/p&gt;
&lt;h5 id=&quot;instanceof&quot;&gt;2. instanceof&lt;/h5&gt;
&lt;p&gt;原理是 构造函数的 prototype 属性是否出现在对象的原型链中的任何位置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function A() {}
let a = new A();
a instanceof A     //true,因为 Object.getPrototypeOf(a) === A.prototype;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;object.prototype.tostring.call&quot;&gt;3. Object.prototype.toString.call()&lt;/h5&gt;
&lt;p&gt;常用于判断浏览器内置对象,对于所有基本的数据类型都能进行判断，即使是 null 和 undefined&lt;/p&gt;
&lt;h5 id=&quot;array.isarray&quot;&gt;4. Array.isArray()&lt;/h5&gt;
&lt;p&gt;用于判断是否为数组&lt;/p&gt;
&lt;h3 id=&quot;浅拷贝和深拷贝&quot;&gt;浅拷贝和深拷贝&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;浅拷贝&lt;/strong&gt;&lt;br/&gt;Object.assign()&lt;br/&gt;Array.prototype.slice()&lt;br/&gt;扩展运算符 ...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深拷贝&lt;/strong&gt;&lt;br/&gt;JSON.parse(JSON.stringify())&lt;br/&gt;递归函数&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;function cloneObject (obj) {
     var newObj = {}  //如果不是引用类型，直接返回
      if (typeof (obj) !== 'object') {
          return obj
     }
     //如果是引用类型，遍历属性
    else{
        for (var attr in obj) {
        //如果某个属性还是引用类型，递归调用
        newObj[attr] = cloneObject(obj[attr])
                }
       }
    return newObj
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5c45112e6fb9a04a027aa8fe&quot;&gt;如何实现一个深拷贝&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://juejin.im/post/5c20509bf265da611b585bec&quot;&gt;详细解析赋值、浅拷贝和深拷贝的区别&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;数组去重的方法&quot;&gt;数组去重的方法&lt;/h3&gt;
&lt;h5 id=&quot;es6-的-set&quot;&gt;1.ES6 的 Set&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;let arr = [1,1,2,3,4,5,5,6]
let arr2 = [...new Set(arr)]&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;reduce&quot;&gt;2.reduce()&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;let arr = [1,1,2,3,4,5,5,6]
let arr2 = arr.reduce(function(ar,cur) {
  if(!ar.includes(cur)) {
    ar.push(cur)
  }

  return ar
},[])&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;filter&quot;&gt;3.filter()&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;// 这种方法会有一个问题：[1,'1']会被当做相同元素，最终输入[1]
let arr = [1,1,2,3,4,5,5,6]
let arr2 = arr.filter(function(item,index) {
  // indexOf() 方法可返回某个指定的 字符串值 在字符串中首次出现的位置
  return arr.indexOf(item) === index
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;dom-事件有哪些阶段谈谈对事件代理的理解&quot;&gt;DOM 事件有哪些阶段？谈谈对事件代理的理解&lt;/h3&gt;
&lt;p&gt;分为三大阶段：捕获阶段--目标阶段--冒泡阶段&lt;/p&gt;
&lt;p&gt;事件代理简单说就是：事件不直接绑定到某元素上，而是绑定到该元素的父元素上，进行触发事件操作时(例如'click')，再通过条件判断，执行事件触发后的语句(例如'alert(e.target.innerHTML)')&lt;/p&gt;
&lt;p&gt;好处：(1)使代码更简洁；(2)节省内存开销&lt;/p&gt;
&lt;h3 id=&quot;介绍下-promise.all&quot;&gt;介绍下 promise.all&lt;/h3&gt;
&lt;p&gt;      Promise.all()方法将多个Promise实例包装成一个Promise对象（p），接受一个数组（p1,p2,p3）作为参数，数组中不一定需要都是Promise对象，但是一定具有Iterator接口，如果不是的话，就会调用Promise.resolve将其转化为Promise对象之后再进行处理。&lt;br/&gt;      使用Promise.all()生成的Promise对象（p）的状态是由数组中的Promise对象（p1,p2,p3）决定的。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果所有的Promise对象（p1,p2,p3）都变成fullfilled状态的话，生成的Promise对象（p）也会变成fullfilled状态，&lt;br/&gt;p1,p2,p3三个Promise对象产生的结果会组成一个数组返回给传递给p的回调函数。&lt;/li&gt;
&lt;li&gt;如果p1,p2,p3中有一个Promise对象变为rejected状态的话，p也会变成rejected状态，第一个被rejected的对象的返回值会传递给p的回调函数。&lt;br/&gt;Promise.all()方法生成的Promise对象也会有一个catch方法来捕获错误处理，但是如果数组中的Promise对象变成rejected状态时，&lt;br/&gt;并且这个对象还定义了catch的方法，那么rejected的对象会执行自己的catch方法。&lt;br/&gt;并且返回一个状态为fullfilled的Promise对象，Promise.all()生成的对象会接受这个Promise对象，不会返回rejected状态。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;async-和-await&quot;&gt;async 和 await&lt;/h3&gt;
&lt;p&gt;主要考察宏任务和微任务，搭配promise，询问一些输出的顺序&lt;/p&gt;
&lt;p&gt;原理：&lt;strong&gt;async 和 await 用了同步的方式去做异步，async 定义的函数的返回值都是 promise，await 后面的函数会先执行一遍，然后就会跳出整个 async 函数来执行后面js栈的代码&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;es6-的-class-和构造函数的区别&quot;&gt;ES6 的 class 和构造函数的区别&lt;/h3&gt;
&lt;p&gt;class 的写法只是语法糖，和之前 prototype 差不多，但还是有细微差别的，下面看看：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;严格模式&lt;br/&gt;类和模块的内部，默认就是严格模式，所以不需要使用&lt;code&gt;use strict&lt;/code&gt;指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;不存在提升&lt;br/&gt;类不存在变量提升（hoist），这一点与 ES5 完全不同。&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;new Foo(); // ReferenceError
class Foo {}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;方法默认是不可枚举的&lt;br/&gt;ES6 中的 class，它的方法（包括静态方法和实例方法）默认是不可枚举的，而构造函数默认是可枚举的。细想一下，这其实是个优化，让你在遍历时候，不需要再判断 hasOwnProperty 了&lt;/li&gt;
&lt;li&gt;class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有[[construct]]，不能使用 new 来调用。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;class 必须使用 new 调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用 new 也可以执行。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;ES5 和 ES6 子类 this 生成顺序不同&lt;br/&gt;ES5 的继承先 生成了子类实例，再 调用父类的构造函数修饰子类实例。ES6 的继承先 生成父类实例，再 调用子类的构造函数修饰父类实例。这个差别使得 ES6 可以继承内置对象。&lt;/li&gt;
&lt;li&gt;ES6可以继承静态方法，而构造函数不能&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;transformtranslatetransition-分别是什么属性css-中常用的实现动画方式&quot;&gt;transform、translate、transition 分别是什么属性？CSS 中常用的实现动画方式&lt;/h3&gt;
&lt;p&gt;三者属性说明&lt;br/&gt;transform 是指变换、变形，是 css3 的一个属性，和 width，height 属性一样；&lt;br/&gt;translate 是 transform 的属性值，是指元素进行 2D(3D)维度上位移或范围变换;&lt;br/&gt;transition 是指过渡效果，往往理解成简单的动画，需要有触发条件。&lt;br/&gt;这里可以补充下 transition 和 animation 的比较，前者一般定义开始结束两个状态，需要有触发条件；而后者引入了关键帧、速度曲线、播放次数等概念，更符合动画的定义，且无需触发条件&lt;/p&gt;
&lt;h3 id=&quot;介绍一下rafrequestanimationframe&quot;&gt;介绍一下rAF(requestAnimationFrame)&lt;/h3&gt;
&lt;p&gt;      对 rAF 的阐述 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame&quot;&gt;MDN 资料&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;      定时器一直是 js 动画的核心技术，但它们不够精准，因为定时器时间参数是指将执行代码放入 UI 线程队列中等待的时间，如果前面有其他任务队列执行时间过长，则会导致动画延迟，效果不精确等问题。&lt;br/&gt;所以处理动画循环的关键是知道延迟多长时间合适：时间要足够短，才能让动画看起来比较柔滑平顺，避免多余性能损耗；时间要足够长，才能让浏览器准备好变化渲染。&lt;br/&gt;这个时候 rAF 就出现了，采用系统时间间隔(大多浏览器刷新频率是 60Hz，相当于 1000ms/60≈16.6ms)，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制。并且 rAF 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回流中就完成。&lt;/p&gt;
&lt;h3 id=&quot;javascript-的垃圾回收机制讲一下&quot;&gt;javascript 的垃圾回收机制讲一下&lt;/h3&gt;
&lt;p&gt;定义：指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。&lt;/p&gt;
&lt;p&gt;像 C 这样的编程语言，具有低级内存管理原语，如 malloc()和 free()。开发人员使用这些原语显式地对操作系统的内存进行分配和释放。&lt;br/&gt;而 JavaScript 在创建对象(对象、字符串等)时会为它们分配内存，不再使用对时会“自动”释放内存，这个过程称为垃圾收集。&lt;/p&gt;
&lt;p&gt;内存生命周期中的每一个阶段:&lt;br/&gt;分配内存 —  内存是由操作系统分配的，它允许您的程序使用它。在低级语言(例如 C 语言)中，这是一个开发人员需要自己处理的显式执行的操作。然而，在高级语言中，系统会自动为你分配内在。&lt;br/&gt;使用内存 — 这是程序实际使用之前分配的内存，在代码中使用分配的变量时，就会发生读和写操作。&lt;br/&gt;释放内存 — 释放所有不再使用的内存,使之成为自由内存,并可以被重利用。与分配内存操作一样,这一操作在低级语言中也是需要显式地执行。&lt;/p&gt;
&lt;h5 id=&quot;四种常见的内存泄漏全局变量未清除的定时器闭包以及-dom-的引用&quot;&gt;四种常见的内存泄漏：全局变量，未清除的定时器，闭包，以及 dom 的引用&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;全局变量 不用 var 声明的变量，相当于挂载到 window 对象上。如：b=1; 解决：使用严格模式&lt;/li&gt;
&lt;li&gt;被遗忘的定时器和回调函数&lt;/li&gt;
&lt;li&gt;闭包&lt;/li&gt;
&lt;li&gt;没有清理的 DOM 元素引用&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;对前端性能优化有什么了解一般都通过那几个方面去优化的&quot;&gt;对前端性能优化有什么了解？一般都通过那几个方面去优化的？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xiaohuochai/p/9178390.html&quot;&gt;前端性能优化的七大手段&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;减少请求数量&lt;/li&gt;
&lt;li&gt;减小资源大小&lt;/li&gt;
&lt;li&gt;优化网络连接&lt;/li&gt;
&lt;li&gt;优化资源加载&lt;/li&gt;
&lt;li&gt;减少重绘回流&lt;/li&gt;
&lt;li&gt;性能更好的API&lt;/li&gt;
&lt;li&gt;webpack优化&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;前端安全也经常被问到的，常见的有两种——XSS、CSRF，详见&lt;a href=&quot;https://www.cnblogs.com/chenwenhao/p/11107175.html&quot;&gt;前端安全&lt;/a&gt;&lt;br/&gt;找到工作前还会不定期补充，未完待续...&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jul 2019 14:09:00 +0000</pubDate>
<dc:creator>奔跑的瓜牛</dc:creator>
<og:description>判断 js 类型的方式 1. typeof 可以判断出'string','number','boolean','undefined','symbol' 但判断 typeof(null) 时值为 'ob</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chenwenhao/p/11253403.html</dc:identifier>
</item>
<item>
<title>Jenkins-slave分布式环境搭建 - linux超</title>
<link>http://www.cnblogs.com/linuxchao/p/linunx-Jenkins-slave.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linuxchao/p/linunx-Jenkins-slave.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;之前搭建过selenium grid的分布式环境，今天我们再来搭建一次Jenkins的分布式环境：jenkins-slave&lt;/p&gt;
&lt;p&gt;Jenkins的Master-Slave分布式架构主要是为了解决Jenkins单点构建任务多、负载较高、性能不足的场景。&lt;/p&gt;
&lt;p&gt;Master-Slave相当于Server和Agent的概念。Master提供web接口让用户来管理job和Slave，job可以运行在Master本机或者被分配到Slave上运行构建。一个Master（Jenkins服务所在机器）可以关联多个Slave用来为不同的job或相同的job的不同配置来服务，现在我们开始配置Jenkins-slave&lt;/p&gt;
&lt;h2&gt;配置前准备&lt;/h2&gt;
&lt;p&gt;为了模拟真实的Jenkins环境，我采用了两台实体电脑，192.168.1.101作为Jenkins服务器，并已经安装好了Jenkins和java环境(如何安装，点击此处), 192.168.1.103作为slave机也就是node节点，并安装好Java环境，同时要保证两台机器处于同一个网段，相互能够ping通，到此为止前期的环境准备就已经完成了&lt;/p&gt;
&lt;h2&gt;新建节点&lt;/h2&gt;
&lt;p&gt;登录Jenkins服务器-点击Jenkins配置-选择Manage Nodes（节点配置）-点击New Node(新建节点)-点击ok&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727140344683-509459411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;配置节点&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727183205336-1974576286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：如果你没有配置过任何节点，那么启动方式是没有我选择的选项的(后面会讲启动方式的配置)，你只需要先随意选择一个保存即可&lt;/p&gt;
&lt;p&gt;配置完所有的节点信息之后保存，会看到如下界面，我们可以点击节点机器进去看一下[点击window10]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727141148108-541213014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727141303606-1379559569.png&quot; alt=&quot;&quot; width=&quot;984&quot; height=&quot;255&quot;/&gt;&lt;/p&gt;
&lt;p&gt;里面显示是这样的(你的机器看到的就是这样的，因为启动方式你并没有配置)，明显这里是断开链接的状态，是无法使用的， 你先别管为什么，进入下面的设置&lt;/p&gt;
&lt;h2&gt;配置启动方式&lt;/h2&gt;
&lt;p&gt;启动方式的配置(配置上一个步骤中的启动方式选项，让我们需要的启动方式能够选择)&lt;/p&gt;
&lt;p&gt;返回Jenkins主目录-点击Manage Jenkins-选择Configure Global Security(全局安全配置)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727141858658-1621732683.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来勾选如下选项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727142208621-673159619.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;全部勾选，或只勾选第3项即可（jave web的启动方式），当然不同版本的jenkins这里显示的貌似也不太一样，但是作用是一样的，也许你的是如下页面这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727142609352-1026751746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存全局安全配置，(这一步完成之后你需要重新到节点配置里面把启动方式修改一下，修成成我图中的方式)之后再次保存节点的配置，接下来查看节点，你会看到如下显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727143412680-671464849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;启动节点服务器&lt;/h2&gt;
&lt;p&gt;启动节点服务器，目的是使节点服务器与Jenkins主机建立链接，有两种方式启动&lt;/p&gt;
&lt;p&gt;1. 你可以点直接点击Launch，然后根据提示，会执行下载slave-agent.jnlp文件，下载完成后，把此文件上传到作为节点的机器（192.168.1.103）的远程工作目录中(配置节点时的远程工作目录)&lt;/p&gt;
&lt;p&gt;2. 点击上图中的agent.jar链接，下载此文件，下载完成后此文件传到作为节点的机器（192.168.1.103）的远程工作目录中(配置节点时的远程工作目录)，在此目录下执行cmd命令&lt;/p&gt;
&lt;p&gt;java -jar &lt;a href=&quot;http://localhost:8080/jnlpJars/agent.jar&quot;&gt;agent.jar&lt;/a&gt; -jnlpUrl &lt;span&gt;http://192.168.1.102:8080/computer/window10/slave-agent.jnlp&lt;/span&gt; -secret 3217c15e66f1fbbe597775fcd0513b895ccf02c3e7fc3e6b3d2a53d487e7bac4 -workDir &quot;D:\Program Files (x86)\Jenkins&quot;&lt;/p&gt;&lt;p&gt;注意其中的地址，地址中的ip是代理自动生成的Jenkins服务器代理地址，我们在执行命令时，需要把这个地址改为真实的Jenkins服务器地址192.168.1.101&lt;/p&gt;&lt;p&gt;以上两种方式任选其一，我这里选择执行cmd命令（注意命令是在节点主机上执行的），执行结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727145502676-1624480243.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再次查看Jenkins主机上的几点状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727145544600-558740763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727145611857-363650340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;构建配置&lt;/h2&gt;
&lt;p&gt;接下来配置一下Job，测试一下项目在节点主机上是否能够成功构建并执行&lt;/p&gt;
&lt;h3&gt;新建项目&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727151225194-35834435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;配置Geeral&lt;/h3&gt;
&lt;p&gt;注意这里的标签名，输入后会自动识别之前节点的标签&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727151524035-796855299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;添加构建步骤&lt;/h3&gt;
&lt;p&gt;这里我选择的是执行windows批处理命令，这里有个坑&lt;/p&gt;
&lt;p&gt;python解释器的完整目录需要是节点主机上安装的解释器路径，当然如果你的解释器配置了环境变量，也可以省去完整路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727151853146-1338840648.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ok，我们保存配置，我只做了简单的配置，没有其他功能，如果你想配置发送邮件，拉取git库的代码执行等其他功能，你可以参考我之前的文章&lt;/p&gt;
&lt;h3&gt;执行构建&lt;/h3&gt;
&lt;p&gt;接下来我们手动执行一下构建，因为这个项目是第一次配置的，所以需要手动执行一次构建，为了生成项目的工作空间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727152754407-1530187211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当手动执行完构建之后，你会在节点主机的远程项目目录下发现生成了一个workspace文件夹且里面包含了以项目名称为PytestUiAutoTest的文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727153035337-438067923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下一步，我们手动把项目的原代码复制到此目录下，然后再次执行构建&lt;/p&gt;
&lt;h3&gt;查看结果&lt;/h3&gt;
&lt;p&gt;Jenkins服务器控制台日志&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727175846564-944520633.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过控制台日志可以看到，执行任务的机器是我们配置的节点服务器执行的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421063/201907/1421063-20190727180015437-1297904120.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;整个环境的配置到这里已经全部搭建完成，再次声明需要注意的几点&lt;/p&gt;
&lt;p&gt;1. 配置节点时的远程工作目录可以是节点服务器上的任意目录&lt;/p&gt;
&lt;p&gt;2. 启动节点时的cmd命令中的ip地址一定是Jenkins服务器的真实地址，因为换成代理的虚拟地址时，节点服务器链接不上Jenkins服务器(当然你也可以试试使用代理地址，我是没成功)&lt;/p&gt;
&lt;p&gt;3. 执行脚本的批处理命令中的python解释器的路径需要是节点服务器中安装的pyhon解释器的路径(并不是Jenkins所在服务器的解释器路径)&lt;/p&gt;
&lt;p&gt;4. 这点也是最重要的一点，前面所有配置的前提是你的Jenkins主机和节点主机已经配置了Java环境&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jul 2019 13:49:00 +0000</pubDate>
<dc:creator>linux超</dc:creator>
<og:description>前言 之前搭建过selenium grid的分布式环境，今天我们再来搭建一次Jenkins的分布式环境：jenkins-slave Jenkins的Master-Slave分布式架构主要是为了解决Je</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/linuxchao/p/linunx-Jenkins-slave.html</dc:identifier>
</item>
<item>
<title>C++ 过滤出字符串的中文（GBK，UTF-8） - 梦涵的帅爸爸</title>
<link>http://www.cnblogs.com/kpxy/p/11256791.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kpxy/p/11256791.html</guid>
<description>&lt;p&gt;最近在处理游戏敏感词之类的东西，为了加强屏蔽处理，所以需要过滤掉字符串中的除汉字之外的是其他东西如数字，符号，英文字母等。&lt;/p&gt;
&lt;p&gt;首先我查阅资料并写了个函数：&lt;/p&gt;
&lt;p&gt;示例：返回输入字符串中汉字的个数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;std::string &lt;/span&gt;StrWithOutSymbol(&lt;span&gt;const&lt;/span&gt; std::&lt;span&gt;string&lt;/span&gt; &amp;amp;&lt;span&gt;source)
{    
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; sourceWithOutSymbol;

    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (source[i] != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (source[i] &amp;amp; &lt;span&gt;0x80&lt;/span&gt;&lt;span&gt; )
        {
            sourceWithOutSymbol &lt;/span&gt;+=&lt;span&gt; source[i];
            sourceWithOutSymbol &lt;/span&gt;+= source[i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
            i &lt;/span&gt;+= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            i &lt;/span&gt;++&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; 　　sourceWithOutSymbol&lt;/span&gt;&lt;span&gt;; &lt;br/&gt;} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;这个函数的原理是ord($str)&amp;amp;0x80来判断汉字 &lt;/h3&gt;
&lt;p&gt;80对应的二进制代码为1000   0000,最高位为一,代表汉字汉字编码格式通称为10格式一个汉字占2字节,但只代表一个字符&lt;/p&gt;
&lt;p&gt;&quot;Windows中，中文简体字符集的编码是同时用1个字节和2个字节来表示的。当高位是0x00～0x7f时，为一个字节，高位为0x80以上时用2个字节表示&quot;&lt;/p&gt;
&lt;p&gt;当你发现一个字节的内容大于0x7f,那它肯定是个(跟另外一个字节拼凑成一个)汉字,如何判断肯定大于0x7f呢?&lt;br/&gt;0x7f(1111111)后面一个数就是0x80(10000000),所以想要大于0x7f，这个字节的最高位都肯定是1,我们只需要判断这个最高位是否为1就行了。&lt;/p&gt;
&lt;p&gt;判断方法:&lt;br/&gt;位与(相同的位都是1的才为1，否则为0):&lt;br/&gt;如:要判断一个数的第三位是否是1，只要跟4(100)位与,判断一个数的第2位是否为1就跟2(10)位与.&lt;br/&gt;同理判断第八位是否为1只要跟(10000000)也就是0x80位与了.&lt;/p&gt;
&lt;p&gt;这里为什么不用&amp;gt;0x7f？php可能还行，但在其他强类型语言里面，1个字节的最高位用来标示负数，一个负数肯定不可能大于0x7f(最大的整数)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;再举个例子:&lt;br/&gt;a的assic码是97(1100001)&lt;br/&gt;A的assic码是65(1000001)&lt;/p&gt;
&lt;p&gt;b的assic码是98(1100010)&lt;br/&gt;B的assic码是66(1000010)&lt;/p&gt;
&lt;p&gt;发现一个规律:一个a-z的字母,只要是小写字母，第六位肯定是1，我们可以用这个来判断大小写:&lt;br/&gt;这时候只要跟用以个字母跟0x20(100000)来位与判断:&lt;br/&gt;if(ord($a)&amp;amp;0x20){&lt;br/&gt;        //大写&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;如何把所有字母改成大写?第六位的1改成0就行了: &lt;br/&gt;$a='a';&lt;br/&gt;$a        = chr(ord($a)&amp;amp;(~0x20));&lt;br/&gt;echo $a;&lt;/p&gt;

&lt;p&gt;然后我信心满满的吧这个函数加入到项目中去，点击运行，输入中文进行检查，当！项目报错了？？？？数组越界？？？？&lt;/p&gt;
&lt;p&gt;这是为什么，我又定位到报错的地方，发现我使用的cocos-lua，在向c++传递字符串的时候传进来的字符串是以UTF-8来进行编码的，我又去找UIF-8的编码规则发现&lt;/p&gt;
&lt;h3&gt;UTF-8编码规则：如果只有一个字节则其最高二进制位为0；如果是多字节，其第一个字节从最高位开始，连续的二进制位值为1的个数决定了其编码的字节数，其余各字节均以10开头。UTF-8转换表表示如下：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/981015/201907/981015-20190727211509744-1505289180.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 而我之前的是按照GBK编码进行操作的，GBK每个中文字符只占两个字节，而utf-8的话中文可能占3个字节，四个字节，甚至是五个六个，所以用刚才那样的函数就会有越界的情况发生，所以对用UTF-8进行编码的字符串，就需要进行另外的处理，所以我写了一个新函数：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;对UTF-8编码的字符串进行中文筛选的函数：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
std::&lt;span&gt;string&lt;/span&gt; censorStrWithOutSymbol(&lt;span&gt;const&lt;/span&gt; std::&lt;span&gt;string&lt;/span&gt; &amp;amp;&lt;span&gt;source)
{    
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; sourceWithOutSymbol;

    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (source[i] != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (source[i] &amp;amp; &lt;span&gt;0x80&lt;/span&gt; &amp;amp;&amp;amp; source[i] &amp;amp; &lt;span&gt;0x40&lt;/span&gt; &amp;amp;&amp;amp; source[i] &amp;amp; &lt;span&gt;0x20&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; byteCount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (source[i] &amp;amp; &lt;span&gt;0x10&lt;/span&gt;&lt;span&gt;)
            {
                byteCount &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                byteCount &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;0&lt;/span&gt;; a &amp;lt; byteCount; a++&lt;span&gt;)
            {
                sourceWithOutSymbol &lt;/span&gt;+=&lt;span&gt; source[i];
                i&lt;/span&gt;++&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (source[i] &amp;amp; &lt;span&gt;0x80&lt;/span&gt; &amp;amp;&amp;amp; source[i] &amp;amp; &lt;span&gt;0x40&lt;/span&gt;&lt;span&gt;)
        {
            i &lt;/span&gt;+= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            i &lt;/span&gt;+= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sourceWithOutSymbol;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击运行，成功了！舒服。&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jul 2019 13:22:00 +0000</pubDate>
<dc:creator>梦涵的帅爸爸</dc:creator>
<og:description>最近在处理游戏敏感词之类的东西，为了加强屏蔽处理，所以需要过滤掉字符串中的除汉字之外的是其他东西如数字，符号，英文字母等。 首先我查阅资料并写了个函数： 示例：返回输入字符串中汉字的个数： 这个函数的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/kpxy/p/11256791.html</dc:identifier>
</item>
<item>
<title>flink入门实战总结 - 一天不进步，就是退步</title>
<link>http://www.cnblogs.com/davidwang456/p/11256748.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/davidwang456/p/11256748.html</guid>
<description>&lt;p&gt;　　随着大数据技术在各行各业的广泛应用，要求能对海量数据进行实时处理的需求越来越多，同时数据处理的业务逻辑也越来越复杂，传统的批处理方式和早期的流式处理框架也越来越难以在延迟性、吞吐量、容错能力以及使用便捷性等方面满足业务日益苛刻的要求。&lt;/p&gt;
&lt;p&gt;在这种形势下，新型流式处理框架Flink通过创造性地把现代大规模并行处理技术应用到流式处理中来，极大地改善了以前的流式处理框架所存在的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201906/486074-20190620151412959-1154079380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一句话：flink是etl的工具。&lt;/p&gt;
&lt;p&gt;flink的层次结构:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201907/486074-20190727205459503-707731487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/10881915.html&quot; target=&quot;_blank&quot;&gt;windows下flink示例程序的执行&lt;/a&gt; 简单介绍了一下flink在windows下如何通过flink-webui运行已经打包完成的示例程序(jar)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/10948698.html&quot; target=&quot;_blank&quot;&gt;从flink-example分析flink组件(1)WordCount batch实战及源码分析&lt;/a&gt;讲到DataSet的转换&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/10953238.html&quot; target=&quot;_blank&quot;&gt;从flink-example分析flink组件(2)WordCount batch实战及源码分析----flink如何在本地执行的？&lt;/a&gt;flink batch批处理如何在本地执行的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11015594.html&quot; target=&quot;_blank&quot;&gt;从flink-example分析flink组件(3)WordCount 流式实战及源码分析&lt;/a&gt; flink stream流式处理如何在本地执行的？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11161621.html&quot; target=&quot;_blank&quot;&gt;使用flink Table &amp;amp;Sql api来构建批量和流式应用(1)Table的基本概念&lt;/a&gt;介绍了Table的基本概念及使用方法&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11196675.html&quot; target=&quot;_blank&quot;&gt;使用flink Table &amp;amp;Sql api来构建批量和流式应用(2)Table API概述&lt;/a&gt;介绍了如何使用Table&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11205723.html&quot; target=&quot;_blank&quot;&gt;使用flink Table &amp;amp;Sql api来构建批量和流式应用(3)Flink Sql 使用&lt;/a&gt; 介绍了如何使用sql&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11047002.html&quot; target=&quot;_blank&quot;&gt;flink dataset api使用及原理&lt;/a&gt; 介绍了DataSet Api &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11046857.html&quot; target=&quot;_blank&quot;&gt;flink DataStream API使用及原理&lt;/a&gt;介绍了DataStream Api &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11102496.html&quot; target=&quot;_blank&quot;&gt;flink中的时间戳如何使用？---Watermark使用及原理&lt;/a&gt; 介绍了底层实现的基础Watermark&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11113237.html&quot; target=&quot;_blank&quot;&gt;flink window实例分析&lt;/a&gt; 介绍了window的概念及使用原理&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/davidwang456/p/11124698.html&quot; target=&quot;_blank&quot;&gt;Flink中的状态与容错&lt;/a&gt; 介绍了State的概念及checkpoint，savepoint的容错机制&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flink的特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，给出官网给出的特征作为结束：&lt;/p&gt;
&lt;p&gt;1、一切皆为流（All streaming use cases ）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;事件驱动应用(Event-driven Applications)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;              &lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201905/486074-20190530111417772-163564358.png&quot; alt=&quot;&quot; width=&quot;643&quot; height=&quot;189&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;流式 &amp;amp; 批量分析(Stream &amp;amp; Batch Analytics)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201905/486074-20190530111550018-2055781596.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;172&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;　　&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; 数据管道&amp;amp;ETL(Data Pipelines &amp;amp; ETL)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201905/486074-20190530111657998-1146367851.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;147&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、正确性保证(Guaranteed correctness)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;唯一状态一致性(Exactly-once state consistency)&lt;/li&gt;
&lt;li&gt;事件-事件处理(Event-time processing)&lt;/li&gt;
&lt;li&gt;高超的最近数据处理(Sophisticated late data handling)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、多层api(Layered APIs)   &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基于流式和批量数据处理的SQL(SQL on Stream &amp;amp; Batch Data)&lt;/li&gt;
&lt;li&gt;流水数据API &amp;amp; 数据集API(DataStream API &amp;amp; DataSet API)&lt;/li&gt;
&lt;li&gt;处理函数 (时间 &amp;amp; 状态)(ProcessFunction (Time &amp;amp; State))&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;           &lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201905/486074-20190530112524287-1748411415.png&quot; alt=&quot;&quot; width=&quot;885&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、易用性&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;部署灵活(Flexible deployment)&lt;/li&gt;
&lt;li&gt;高可用安装(High-availability setup）&lt;/li&gt;
&lt;li&gt;保存点(Savepoints)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;5、可扩展性&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可扩展架构(Scale-out architecture)&lt;/li&gt;
&lt;li&gt;大量状态的支持(Support for very large state)&lt;/li&gt;
&lt;li&gt;增量检查点(Incremental checkpointing)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;6、高性能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;低延迟(Low latency)&lt;/li&gt;
&lt;li&gt;高吞吐量(High throughput)&lt;/li&gt;
&lt;li&gt;内存计算(In-Memory computing)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;flink架构 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、层级结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201905/486074-20190530113851450-134871127.png&quot; alt=&quot;&quot; width=&quot;432&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2.工作架构图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/486074/201905/486074-20190530111516891-1439366463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jul 2019 13:12:00 +0000</pubDate>
<dc:creator>一天不进步，就是退步</dc:creator>
<og:description>随着大数据技术在各行各业的广泛应用，要求能对海量数据进行实时处理的需求越来越多，同时数据处理的业务逻辑也越来越复杂，传统的批处理方式和早期的流式处理框架也越来越难以在延迟性、吞吐量、容错能力以及使用便</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/davidwang456/p/11256748.html</dc:identifier>
</item>
</channel>
</rss>