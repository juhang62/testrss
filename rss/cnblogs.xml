<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>GitHub 热点速览 Vol.30：那些提升效率的小工具们 - 削微寒</title>
<link>http://www.cnblogs.com/xueweihan/p/13399701.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xueweihan/p/13399701.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211644409-1356688942.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;摘要：虽然 GitHub 是一个学习技术的好去处，但是除了学习，它还集提高“搬砖”效率于一身。GitHub 上散落着各式各样的小工具，比如本周特推的 Adobe 开源的 React 组件库 react-spectrum 就能帮助开发者提升用户体验，微软开源、专为 Linux 打造的 ProcMon-for-Linux 则提供了简便有效的方式来跟踪系统调用，Forem 这个可快速搭建社区的小工具更不用说了，它集合了群组、话题等内容…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下内容摘录自微博&lt;a href=&quot;https://www.weibo.com/hellogithub/&quot;&gt;@HelloGitHub&lt;/a&gt; 的 GitHub Trending 及 Hacker News 热帖（简称 HN 热帖），选项标准：&lt;code&gt;新发布&lt;/code&gt; | &lt;code&gt;实用&lt;/code&gt; | &lt;code&gt;有趣&lt;/code&gt;，根据项目 release 时间分类，发布时间不超过 7 day 的项目会标注 &lt;code&gt;New&lt;/code&gt;，无该标志则说明项目 release 超过一周。由于本文篇幅有限，还有部分项目未能在本文展示，望周知 🌝&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;本文目录
&lt;ul&gt;&lt;li&gt;
&lt;ol&gt;&lt;li&gt;本周特推&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;1.1 完美体验 React 组件库：react-spectrum&lt;/li&gt;
&lt;li&gt;1.2 Flutter 最佳实践：Best-Flutter-UI-Templates&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;GitHub Trending 周榜&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;2.1 全栈股票系统：PythonStock&lt;/li&gt;
&lt;li&gt;2.2 Node.js 版 Wiki：Wiki.js&lt;/li&gt;
&lt;li&gt;2.3 进程监控工具：ProcMon-for-Linux&lt;/li&gt;
&lt;li&gt;2.4 社区速建：Forem&lt;/li&gt;
&lt;li&gt;2.5 Java 全家桶：JavaFamily&lt;/li&gt;
&lt;li&gt;2.6 亚马逊工程师亲测：coding-interview-university&lt;/li&gt;
&lt;li&gt;2.7 Linux 降噪小工具：NoiseTorch&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Emoji Time&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;推荐阅读&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211658932-2078413718.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-本周特推&quot;&gt;1. 本周特推&lt;/h2&gt;
&lt;h3 id=&quot;11-完美体验-react-组件库：react-spectrum&quot;&gt;1.1 完美体验 React 组件库：react-spectrum&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：1000+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;react-spectrum 是 Adobe 开源的 React 组件库，可构建自适应、国际化和定制化的 Web 用户体验。特性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无障碍：react-spectrum 组件的设计考虑了可访问性，包括全屏阅读器和键盘导航支持；&lt;/li&gt;
&lt;li&gt;自适应：react-spectrum 组件可用于与鼠标、触摸和键盘交互。无论设备是什么，它们都遵循响应式设计原则来提供良好的体验；&lt;/li&gt;
&lt;li&gt;自定义主题：支持暗黑模式；&lt;/li&gt;
&lt;li&gt;国际化：支持 30+ 种语言，支持多种 RTL 语言、日期、数字格式；&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/adobe/react-spectrum&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211712698-1158591113.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;12-flutter-最佳实践：best-flutter-ui-templates&quot;&gt;1.2 Flutter 最佳实践：Best-Flutter-UI-Templates&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：1250+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best-Flutter-UI-Templates 是一个极佳的学习 Flutter / Dart 的 Repo，它收录了由 Flutter / Dart 构建的应用。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/mitesh77/Best-Flutter-UI-Templates&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211726737-1008578154.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-github-trending-周榜&quot;&gt;2. GitHub Trending 周榜&lt;/h2&gt;
&lt;h3 id=&quot;21-全栈股票系统：pythonstock&quot;&gt;2.1 全栈股票系统：PythonStock&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：1350+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PythonStock 是基于 Python 的 Pandas，Tushare，Bokeh，Tornado，Stockstats，Ta-lib 等框架开发的全栈股票系统。支持直接使用 Docker 本地部署运行，整个项目在 Docker Hub 上压缩后 200M，本地占用 500MB 磁盘空间。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/pythonstock/stock&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211745501-987701399.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;22-nodejs-版-wiki：wikijs&quot;&gt;2.2 Node.js 版 Wiki：Wiki.js&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：2100+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wiki.js 是由 Node.js 搭建、轻量级 wiki 应用。在线体验：&lt;a href=&quot;https://wiki.js.org/&quot;&gt;https://wiki.js.org/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/Requarks/wiki&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211755663-208147609.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;23-进程监控工具：procmon-for-linux&quot;&gt;2.3 进程监控工具：ProcMon-for-Linux&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：900+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;New&lt;/code&gt; ProcMon-for-Linux 是微软开源的小工具，是 Windows Sysinternals 工具集中的 Process Monitor 应用程序的 Linux 版本。作为一种进程监控工具，ProcMon-for-Linux 提供了简便有效的方式来跟踪系统调用（syscall）活动。此外，该工具能够帮助诊断程序崩溃、资源占用率过高，甚至是潜在的恶意感染等问题。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/microsoft/ProcMon-for-Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211828918-568305979.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;24-社区速建：forem&quot;&gt;2.4 社区速建：Forem&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：750+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Forem 是一个用于构建社区的开源软件，让你可围绕某个群组 / 话题构建社区系统，此外 Forem 有丰富的生态，包括插件系统、原生 wrappers、专属浏览器等。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/forem/forem&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211841125-122509543.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;25-java-全家桶：javafamily&quot;&gt;2.5 Java 全家桶：JavaFamily&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：900+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaFamily 是一份涵盖大部分 Java 程序员所需要掌握的核心知识的项目，包括 Java 面试和学习指南。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/AobingJava/JavaFamily&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211853366-527067175.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;26-亚马逊工程师亲测：coding-interview-university&quot;&gt;2.6 亚马逊工程师亲测：coding-interview-university&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：2100+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;coding-interview-university 是一名非科班程序员为入职 Google 制定的学习计划，并严格按照每天 8-12 小时的学习节奏实施。虽然他最后没有去面试 Google 而是入职了 Amazon，但是不妨碍这是一个不错的程序员学习清单。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/jwasham/coding-interview-university&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;27-linux-降噪小工具：noisetorch&quot;&gt;2.7 Linux 降噪小工具：NoiseTorch&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本周 star 增长数：800+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;New&lt;/code&gt; NoiseTorch 是适用于带有 PulseAudio 的 Linux 小工具，它创建了一个虚拟麦克风，可以在任何应用程序中抑制噪音。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GitHub 地址→https://github.com/lawl/NoiseTorch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729211911372-1782371304.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-ttime&quot;&gt;3. TTime&lt;/h2&gt;
&lt;p&gt;原本这是 Emoji Time，为了不受限于 Emoji，这个每周话题改成 TTime 啦（Talk Time），本周小鱼干在 Twitter 上看到一个有意思的话题，#请用 5 个单词来形容下你的产品#，依旧还是小鱼干先来，🤔 用 5 个单词来形容 HelloGitHub，只能引用下川普常用词了：MAKE GITHUB GREAT AGAIN~&lt;/p&gt;
&lt;h2 id=&quot;4-推荐阅读&quot;&gt;4. 推荐阅读&lt;/h2&gt;
&lt;p&gt;以上为 2020 年第 30 个工作周的 GitHub Trending 🎉如果你 Pick 其他好玩、实用的 GitHub 项目，记得来 &lt;a href=&quot;https://github.com/521xueweihan/HelloGitHub&quot;&gt;HelloGitHub&lt;/a&gt; issue 区和我们分享下哟 🌝&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;HelloGitHub 交流群现已全面开放，添加微信号：HelloGitHub 为好友入群，可同前端、Java、Go 等各界大佬谈笑风生、切磋技术~&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202007/759200-20200729212020024-1640694833.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 30 Jul 2020 00:27:00 +0000</pubDate>
<dc:creator>削微寒</dc:creator>
<og:description>摘要：虽然 GitHub 是一个学习技术的好去处，但是除了学习，它还集提高“搬砖”效率于一身。GitHub 上散落着各式各样的小工具，比如本周特推的 Adobe 开源的 React 组件库 react</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xueweihan/p/13399701.html</dc:identifier>
</item>
<item>
<title>撸了一个 Feign 增强包 - crossoverJie</title>
<link>http://www.cnblogs.com/crossoverJie/p/13401740.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/crossoverJie/p/13401740.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/28/uA1BmwnQNs3GXHS.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最近准备将公司的一个核心业务系统用 &lt;code&gt;Java&lt;/code&gt; 进行重构，大半年没写 &lt;code&gt;Java&lt;/code&gt; ，&lt;code&gt;JDK&lt;/code&gt; 都更新到 14 了，考虑到稳定性等问题最终还是选择的 &lt;code&gt;JDK11&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在整体架构选型时，由于是一个全新的系统，所以没有历史包袱，同时团队中也有多位大牛坐镇，因此我们的选项便大胆起来。&lt;/p&gt;
&lt;p&gt;最终结果就是直接一把梭，直接上未来的大趋势：&lt;code&gt;Service Mesh&lt;/code&gt;，直接把什么 &lt;code&gt;SpringCloud&lt;/code&gt;、&lt;code&gt;Dubbo&lt;/code&gt; 这类分布式框架全部干掉。&lt;/p&gt;
&lt;p&gt;本次的重点不是讨论 &lt;code&gt;Service Mesh&lt;/code&gt; 是什么、能解决什么问题、为什么选择它，毕竟我也在学习阶段，啥时候整明白线上也稳定了再和大家来交流。&lt;/p&gt;

&lt;p&gt;既然方向定了就开始实际撸码了，不过刚一开始就验证了”理想很丰满、现实很骨感“；&lt;/p&gt;
&lt;p&gt;由于我们去掉了 &lt;code&gt;SpringCloud&lt;/code&gt; 和 &lt;code&gt;Dubbo&lt;/code&gt; 这类框架，服务的注册、发现、负载均衡等需求全部都下沉到 &lt;code&gt;Service Mesh&lt;/code&gt; 中提供了。&lt;/p&gt;
&lt;p&gt;但对于开发来说依然希望可以调用本地方法的方式来调用远程服务，这在 &lt;code&gt;SpringCloud&lt;/code&gt; 这类框架中是很容易实现的，框架本身就有很好的支持。&lt;/p&gt;
&lt;p&gt;回到我们这个场景，需求其实很简单，就是想达到 &lt;code&gt;SpringCloud&lt;/code&gt; 中的 &lt;code&gt;Feign&lt;/code&gt; 这样的声明式+注解的方式调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/28/xnIo8mQbjHfURZg.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;    @Autowired
    private StoreClient client ;
    
    Store store = client.update(1, store)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;spring-cloud-openfeign&lt;/code&gt; 这个包其实就能实现上述的需求了，但这样会引入一些我们根本不会使用的 &lt;code&gt;SpringCloud&lt;/code&gt; 的相关依赖，让人感觉”不干净了“；同时也和 &lt;code&gt;Service Mesh&lt;/code&gt; 的理念相反，其中的一大目的就是要降低这类框架的侵入性。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;其实 &lt;code&gt;spring-cloud-openfeign&lt;/code&gt; 的核心就是 &lt;a href=&quot;https://github.com/OpenFeign/feign&quot;&gt;Feign&lt;/a&gt;，本身它也是可以开箱即用的，所以便尝试看 &lt;code&gt;Feign&lt;/code&gt; 自己是否支持这样的用法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/28/TXLH9rFSNyp1x4I.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过官方文档可以得知：是可以定义接口的形式来调用远程接口的，但它本质上是不依赖其他库便可以使用，所以它本身是没有和 &lt;code&gt;Spring&lt;/code&gt; 整合也是合情合理，但也就造成了没有现成库可供我们使用。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我们自然是不想写上图红框处的代码的，希望所有接口直接注入就可以使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此结合以上的需求便有了这个库 &lt;a href=&quot;https://github.com/crossoverJie/feign-plus&quot;&gt;feign-plus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它的使用流程其实就是翻版的 &lt;code&gt;spring-cloud-openfeign&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@FeignPlusClient(name = &quot;github&quot;, url = &quot;${github.url}&quot;)
public interface Github {

    @RequestLine(&quot;GET /repos/{owner}/{repo}/contributors&quot;)
    List&amp;lt;GitHubRes&amp;gt; contributors(@Param(&quot;owner&quot;) String owner, @Param(&quot;repo&quot;) String repo);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;SpringBoot&lt;/code&gt; 入口进行扫描：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@SpringBootApplication
@EnableFeignPlusClients(basePackages = &quot;top.crossoverjie.feign.test&quot;)
public class DemoApplication {

        public static void main(String[] args) {
                SpringApplication.run(DemoApplication.class, args);
        }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;Spring&lt;/code&gt; 上下文中直接注入使用：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;    @Autowired
    private Github github ;
    
    List&amp;lt;GitHubRes&amp;gt; contributors = github.contributors(&quot;crossoverJie&quot;, &quot;feign-plus&quot;);
    logger.info(&quot;contributors={}&quot;, new Gson().toJson(contributors));    
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以当我们需要调用一些外部第三方接口时（比如支付宝、外部 OpenAPI）便可类似于这样定义一个接口，把所有 HTTP 请求的细节屏蔽掉。&lt;/p&gt;
&lt;p&gt;当然也适合公司内部之间的服务调用，和咱们以前写 &lt;code&gt;SpringCloud&lt;/code&gt; 或 &lt;code&gt;Dubbo&lt;/code&gt; 时类似；服务提供方提供一个 &lt;code&gt;Client&lt;/code&gt; 包，消费方直接依赖便可以调用。其他的负载均衡、容错之类的由 &lt;code&gt;Service Mesh&lt;/code&gt; 替我们完成。&lt;/p&gt;
&lt;p&gt;对于内部接口，也可以加上 &lt;code&gt;@RequestMapping(&quot;/path&quot;)&lt;/code&gt; 注解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/28/XetQ4EgyqiRhJdB.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在请求时便会在 url 后拼接上 &lt;code&gt;/order&lt;/code&gt;，这样在配置 &lt;code&gt;feign.order.service.url&lt;/code&gt; 时只需要填入服务提供方的域名或 IP 即可。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;code&gt;feign-plus&lt;/code&gt; 也支持切换具体的 httpclient，默认是 &lt;code&gt;okhttp3&lt;/code&gt;，通过以下配置便可更改。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-properties&quot;&gt;# default(okhttp3)
feign.httpclient=http2Client
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然也有其他相关配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-properties&quot;&gt;feign.plus.max-idle-connections = 520
feign.plus.connect-timeout = 11000
feign.plus.read-timeout = 12000
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;最后简单聊聊是如何完成的吧，其实本质上就是 &lt;code&gt;spring-cloud-openfeign&lt;/code&gt; 的浓缩版。&lt;/p&gt;
&lt;p&gt;其中最为核心的便是 &lt;code&gt;top.crossoverjie.feign.plus.factory.FeignPlusBeanFactory&lt;/code&gt; 类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/28/N3yep2SP1zniu6T.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该类实现了 &lt;code&gt;org.springframework.beans.factory.FactoryBean&lt;/code&gt;接口，并重写了 &lt;code&gt;getObject()&lt;/code&gt; 方法返回一个对象。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这段代码是不是似曾相识，其实就是 &lt;code&gt;Feign&lt;/code&gt; 的官方 &lt;code&gt;demo&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里所返回的对象其实就是我们定义的接口的代理对象，而这个对象本身则是 &lt;code&gt;Feign&lt;/code&gt; ，所以再往里说：我们的 &lt;code&gt;http&lt;/code&gt; 请求编解码、发起请求等逻辑又被这个 &lt;code&gt;feign&lt;/code&gt; 对象所代理了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/28/joLesbxGQrEkK37.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个 &lt;code&gt;HardCodedTarget&lt;/code&gt; 则是 &lt;code&gt;Feign&lt;/code&gt; 内部用于代理最终请求的对象。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;有一个小难受的地方：这样的自己定义 Bean 然后注入对象 Idea 是识别不了的，认为当前上下文没有该 Bean，但是 spring-cloud-openfeign 却可以识别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;由于 &lt;code&gt;Feign&lt;/code&gt; 支持多个客户端，所以这里的客户端可以通过配置文件动态指定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/28/q74soVAQbl5NyK6.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;SpringBoot&lt;/code&gt; 提供的 &lt;code&gt;@ConditionalOnExpression&lt;/code&gt; 注解可以根据配置动态的选择使用哪个 &lt;code&gt;httpclient&lt;/code&gt;,也就是动态选择生成哪个 &lt;code&gt;Bean&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个库的逻辑非常简单，本质上就是封装了 &lt;code&gt;Feign&lt;/code&gt; 并提供了 &lt;code&gt;SpringBoot&lt;/code&gt; 的支持，欢迎有类似需求的朋友下载使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;feign-plus&lt;/code&gt;源码：&lt;a href=&quot;https://github.com/crossoverJie/feign-plus&quot;&gt;https://github.com/crossoverJie/feign-plus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你的点赞与分享是对我最大的支持&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 30 Jul 2020 00:26:00 +0000</pubDate>
<dc:creator>crossoverJie</dc:creator>
<og:description>前言 最近准备将公司的一个核心业务系统用 Java 进行重构，大半年没写 Java ，JDK 都更新到 14 了，考虑到稳定性等问题最终还是选择的 JDK11。 在整体架构选型时，由于是一个全新的系统</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/crossoverJie/p/13401740.html</dc:identifier>
</item>
<item>
<title>JVM详解之:HotSpot VM中的Intrinsic methods - flydean</title>
<link>http://www.cnblogs.com/flydean/p/jvm-intrinsic-method.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flydean/p/jvm-intrinsic-method.html</guid>
<description>&lt;p&gt;内置方法是什么呢？它和inline method有什么关系呢？内置方法是怎么实现的呢？所有的问题都可以在本文找到答案。&lt;/p&gt;

&lt;p&gt;什么是内置方法呢？&lt;/p&gt;
&lt;p&gt;维基百科给出的定义是这样的：&lt;/p&gt;
&lt;p&gt;在计算机软件中，按照编译器理论，固有方法（或内置方法）是可在给定编程语言中使用的方法，该编程语言的实现由编译器专门处理。通常，它可以将自动生成的指令序列替换为原始方法调用，类似于内联方法。与内联方法不同，编译器对内置方法有深入的了解，因此可以针对给定情况更好地集成和优化它。&lt;/p&gt;
&lt;p&gt;实现内置方法的编译器通常仅在程序请求优化时才启用它们，否则会退回到语言运行时环境提供的默认实现。&lt;/p&gt;
&lt;p&gt;所以总结一下，内置方法就是编译器内置的方法实现。&lt;/p&gt;

&lt;p&gt;内置方法有什么特点呢？我们在这里总结一下。&lt;/p&gt;
&lt;h2 id=&quot;多样性&quot;&gt;多样性&lt;/h2&gt;
&lt;p&gt;因为内置方法是在编译器内部实现的，所以不同的虚拟机，其内置方法是不一样的。&lt;/p&gt;
&lt;p&gt;我们不能直接说哪个方法是内置方法，因为不同的JVM是不同的。&lt;/p&gt;
&lt;h2 id=&quot;兼容性&quot;&gt;兼容性&lt;/h2&gt;
&lt;p&gt;内置方法是在需要的时候才会使用的，如果在不需要的时候则会回退到普通的方法实现，也就是java代码的实现。&lt;/p&gt;
&lt;p&gt;所以在java源代码级别来看，内置方法和非内置方法是一样的。他们的区别在于JVM的实现。&lt;/p&gt;
&lt;h2 id=&quot;java语义的扩展&quot;&gt;java语义的扩展&lt;/h2&gt;
&lt;p&gt;有些方法用普通的java代码是无法实现的。比如sun.misc.Unsafe.compareAndSwapInt()。&lt;/p&gt;
&lt;p&gt;我们只能使用JNI或者内置方法来对其实现。所以内置方法可以实现对java语义的扩展。&lt;/p&gt;
&lt;p&gt;一般来说，JDK和核心库中，能使用内置方法优化都已经优化了。所以我们在平时的代码调用中，一定要尽可能的使用JDK的公共API和核心库，这样才能充分利用内置方法的特性，从而提升程序效率。&lt;/p&gt;

&lt;p&gt;那么对于Hotspot VM来说，内置的方法有哪些呢？&lt;/p&gt;
&lt;p&gt;Hotspot VM中所有的内置方法都在src/share/vm/classfile/vmSymbols.hpp类中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200625173025105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_0,text_aHR0cDovL3d3dy5mbHlkZWFuLmNvbQ==,size_35,color_8F8F8F,t_70&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图我只截取了部分标记为intrinsic方法的类的说明。&lt;/p&gt;
&lt;p&gt;可以看到java.lang.Math中大部分的方法都是intrinsic的方法。&lt;/p&gt;
&lt;p&gt;怎么查看我们代码中调用的方法是不是intrinsic方法呢？&lt;/p&gt;
&lt;p&gt;很简单，在java命令之前加上这些参数即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt; -XX:+UnlockDiagnosticVMOptions  -XX:+PrintCompilation -XX:+PrintInlining
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;举个最常用的查看java版本的例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;java  -XX:+UnlockDiagnosticVMOptions  -XX:+PrintCompilation -XX:+PrintInlining  version
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200625173513830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_0,text_aHR0cDovL3d3dy5mbHlkZWFuLmNvbQ==,size_35,color_8F8F8F,t_70&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从结果可以很清楚的看到，java.lang.System.arraycopy方法是内置方法。&lt;/p&gt;
&lt;p&gt;另外我们可以通过更加底层的汇编语言来查看，再添加&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;-XX:+PrintAssembly
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看下输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020062517531637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_0,text_aHR0cDovL3d3dy5mbHlkZWFuLmNvbQ==,size_35,color_8F8F8F,t_70&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;invokestatic意味着该方法就是intrinsified方法。&lt;/p&gt;

&lt;p&gt;内联方法就是把调用方函数代码&quot;复制&quot;到调用方函数中，减少因函数调用开销的技术。&lt;/p&gt;
&lt;p&gt;intrinsic方法大部分都是内联方法。&lt;/p&gt;

&lt;p&gt;前面我们提到了内置方法是在编译器实现的。&lt;/p&gt;
&lt;p&gt;在Hotspot VM中其实有3中编译器。&lt;/p&gt;
&lt;p&gt;第一种就是javac将java源代码编译成为字节码。&lt;/p&gt;
&lt;p&gt;在这一层，只有一些math方法和bootstrapping的MethodHandle是在这一层实现的。&lt;/p&gt;
&lt;p&gt;第二种就是在JIT的Client Compiler (C1)。&lt;/p&gt;
&lt;p&gt;第三种就是在JIT的Server Compiler (C2)。&lt;/p&gt;
&lt;p&gt;举一个例子，我们看一下java.lang.System.currentTimeMillis()方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@HotSpotIntrinsicCandidate
    public static native long currentTimeMillis();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;JDK源码使用了HotSpotIntrinsicCandidate注解。这个注解只是表示该方法可能会被用于Intrinsic，而并不意味着一定使用Intrinsic。&lt;/p&gt;
&lt;p&gt;这个方法在Interpreter级别是没有intrinsified。因为这是一个native方法，所以会通过JNI调用底层的C++实现。&lt;/p&gt;
&lt;p&gt;而在C1和C2级别，会使用intrinsified, 直接调用os::javaTimeMillis()。&lt;/p&gt;
&lt;p&gt;好处就是减少了JNI的使用，提升效率。&lt;/p&gt;
&lt;p&gt;好了问题来了，我们可以自己实现intrinsified方法吗？&lt;/p&gt;
&lt;p&gt;答案是可以，不过需要修改底层的JVM实现。&lt;/p&gt;
&lt;p&gt;这里有两个具体的例子，感兴趣的大家可以自行研究。&lt;/p&gt;
&lt;p&gt;C1级别修改（First cut: C1 Class.isInstance intrinsic）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;https://gist.github.com/rednaxelafx/2830194
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;C2级别修改（Example (XS) of adding an intrinsic method to HotSpot C2. Patch against HS20-b12）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;https://gist.github.com/rednaxelafx/1986224
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;因为Hotspot VM是用C++编写的，如果要添加Intrinsic方法，对于那些不熟悉C++的朋友来说就太难了。&lt;/p&gt;
&lt;p&gt;没关系，Oracle开发了一个项目叫做Graal。 Graal是一个用java编写的新款JIT编译器。&lt;/p&gt;
&lt;p&gt;Graal是基于Java的JIT编译器，是JDK 9中引入的实验性Ahead-of-Time（AOT）编译器的基础。&lt;/p&gt;
&lt;p&gt;开启Graal的参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过Graal，我们可以用java来实现Intrinsic方法，想想就让人兴奋。&lt;/p&gt;

&lt;p&gt;Intrinsic方法是一个非常有用的特性，希望大家能够喜欢。&lt;/p&gt;
&lt;blockquote readability=&quot;8.58&quot;&gt;
&lt;p&gt;本文作者：flydean程序那些事&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a href=&quot;http://www.flydean.com/jvm-intrinsic-method/&quot;&gt;http://www.flydean.com/jvm-intrinsic-method/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文来源：flydean的博客&lt;/p&gt;
&lt;p&gt;欢迎关注我的公众号:程序那些事，更多精彩等着您！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 30 Jul 2020 00:16:00 +0000</pubDate>
<dc:creator>flydean</dc:creator>
<og:description>简介 内置方法是什么呢？它和inline method有什么关系呢？内置方法是怎么实现的呢？所有的问题都可以在本文找到答案。 什么是Intrinsic Methods 什么是内置方法呢？ 维基百科给出</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/flydean/p/jvm-intrinsic-method.html</dc:identifier>
</item>
<item>
<title>一次django内存异常排查 - syncd</title>
<link>http://www.cnblogs.com/zhaof/p/13401692.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/13401692.html</guid>
<description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Django&lt;/code&gt; 作为 &lt;code&gt;Python&lt;/code&gt;著名的&lt;code&gt;Web&lt;/code&gt;框架，相信很多人都在用，自己工作中也有项目项目在用，而在最近几天的使用中发现，部署&lt;code&gt;Django&lt;/code&gt;程序的服务器出现了内存问题，现象就是运行一段时间之后，内存占用非常高，最终会把服务器的内存耗尽，对于&lt;code&gt;Python&lt;/code&gt;项目出现内存问题，自己之前处理过一次，所以并没有第一次解决时的慌张，自己之前把解决方法也整理了博客：&lt;a href=&quot;https://www.cnblogs.com/zhaof/p/10031945.html&quot;&gt;https://www.cnblogs.com/zhaof/p/10031945.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是事情似乎并没有我想的那么简单，自己尝试用之前的的方法&lt;code&gt;tracemalloc&lt;/code&gt;库进行问题的排查，但是问题来了实际的项目中有快一百多个接口，怎么排查？难道一个一个接口进行测试排查，但是时间又比较紧急，可能又来不及了。对比上次自己解决是因为上次的项目比较简单，相对来说定位问题比较容易，那么这次怎么处理呢？&lt;/p&gt;
&lt;h2 id=&quot;处理过程&quot;&gt;处理过程&lt;/h2&gt;
&lt;p&gt;一般&lt;code&gt;Python&lt;/code&gt;项目其实是很少出现内存问题的，一般都是自己代码写的有问题导致的，而对于这次出现的问题，自己的排查思路（对于web 接口类型的项目）：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;先排查调用比较频繁的接口&lt;/li&gt;
&lt;li&gt;然后排查数据汇总接口（查询比较复杂）&lt;/li&gt;
&lt;li&gt;如果上述还没有查出来，再排查剩余的接口&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这次的问题排查中，自己大致也是按照这个思路进行的，在对调用频繁的接口进行排查时，并没有发现内存的异常，而出现内存的问题则是在数据汇总的相关接口上。&lt;/p&gt;
&lt;p&gt;其实这种接口对于初级开发可能是容易出问题的地方，首先这种接口查询的数据相对其他接口会比较复杂，如果编码基础又不是特别好，可能就会在这些接口上出现bug.&lt;/p&gt;
&lt;p&gt;而在这次的排查中，最终确定是在一个汇总数据的接口上，定位到问题处在了&lt;code&gt;Django ORM&lt;/code&gt; 使用不当导致的。自己通过一个简单代码实例来说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class Student(models.Model):
    name = models.CharField(max_length=20)
    name2 = models.CharField(max_length=20)
    name3 = models.CharField(max_length=20)
    name4 = models.CharField(max_length=20)
    name5 = models.CharField(max_length=20)
    name6 = models.CharField(max_length=20)
    name7 = models.CharField(max_length=20)
    name8 = models.CharField(max_length=20)
    name9 = models.CharField(max_length=20)
    name10 = models.CharField(max_length=20)
    name11 = models.CharField(max_length=20)
    name12 = models.CharField(max_length=20)
    name13 = models.CharField(max_length=20)
    name14 = models.CharField(max_length=20)
    name15 = models.CharField(max_length=20)
    age = models.IntegerField(default=0)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正常情况，我们的表字段会比较多，这里就通过多个name来模拟，出现题的代码就出在关于这个表的接口上：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;def index(request):
    studets = Student.objects.filter(age__gt=20)
    if studets:
        pass
    return HttpResponse(&quot;test memory&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了让内存问题容易复现，我通过脚本向Student中插入了20000条数据，当然这里数据越多，问题越明显&lt;/p&gt;
&lt;p&gt;通过一个测试脚本并发请求这个接口，观察内存情况，你会发现，内存会出现瞬间上涨的情况，并且如果你的数据越多，请求越多，你的内存可能会在一段时间居高不下，并且逐渐上涨。问题出在哪里了？&lt;/p&gt;
&lt;p&gt;其实很简单，问题出在了代码中的if 判断那里，我们通过filter 查询返回的是QuerySet 类型的数据，而我们过滤之后的数据可能会存在非常多的时候，这个时候我们通过if 直接判断，自己的理解这个地方会将整个QuerySet加载到内存中，从而出现内存占用过高的问题，而如果并且这个时候这个接口的响应速度也是非常会变慢，而这个QuerySet 中的数据越多，内存占用越明显。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Django&lt;/code&gt;的文档中其实做了说明&lt;/p&gt;
&lt;blockquote readability=&quot;41.31713900135&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;exists&lt;/code&gt;()&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.exists&quot;&gt;¶&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Returns &lt;code&gt;True&lt;/code&gt; if the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; contains any results, and &lt;code&gt;False&lt;/code&gt; if not. This tries to perform the query in the simplest and fastest way possible, but it &lt;em&gt;does&lt;/em&gt; execute nearly the same query as a normal &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; query.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt; is useful for searches relating to both object membership in a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and to the existence of any objects in a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, particularly in the context of a large &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most efficient method of finding whether a model with a unique field (e.g. &lt;code&gt;primary_key&lt;/code&gt;) is a member of a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;entry = Entry.objects.get(pk=123)
if some_queryset.filter(pk=entry.pk).exists():
    print(&quot;Entry contained in queryset&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which will be faster than the following which requires evaluating and iterating through the entire queryset:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if entry in some_queryset:
   print(&quot;Entry contained in QuerySet&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And to find whether a queryset contains any items:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if some_queryset.exists():
    print(&quot;There is at least one object in some_queryset&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which will be faster than:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if some_queryset:
    print(&quot;There is at least one object in some_queryset&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;… but not by a large degree (hence needing a large queryset for efficiency gains).&lt;/p&gt;
&lt;p&gt;Additionally, if a &lt;code&gt;some_queryset&lt;/code&gt; has not yet been evaluated, but you know that it will be at some point, then using &lt;code&gt;some_queryset.exists()&lt;/code&gt; will do more overall work (one query for the existence check plus an extra one to later retrieve the results) than using &lt;code&gt;bool(some_queryset)&lt;/code&gt;, which retrieves the results and then checks if any were returned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以对于我们的代码我们只需要把if 判断地方改成&lt;code&gt;if not studets.exists()&lt;/code&gt; 就可以解决问题。&lt;/p&gt;
&lt;p&gt;这是一个很小的知识点，但是如果使用不对，可能就会造成非常严重的内存问题。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;除了单元测试，还需要做大数据量测试，这次的问题如果在测试的时候做过一定数据量的测试，可能很早就能及时发现问题&lt;/li&gt;
&lt;li&gt;对于基础的库的使用要更加熟悉&lt;/li&gt;
&lt;li&gt;排查问题的思路要明确，不然可能会无从下手&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h3&gt;
</description>
<pubDate>Wed, 29 Jul 2020 23:32:00 +0000</pubDate>
<dc:creator>syncd</dc:creator>
<og:description>起因 Django 作为 Python著名的Web框架，相信很多人都在用，自己工作中也有项目项目在用，而在最近几天的使用中发现，部署Django程序的服务器出现了内存问题，现象就是运行一段时间之后，内</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhaof/p/13401692.html</dc:identifier>
</item>
<item>
<title>【高并发】亿级流量场景下如何为HTTP接口限流？看完我懂了！！ - 冰河团队</title>
<link>http://www.cnblogs.com/binghe001/p/13401557.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/binghe001/p/13401557.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;blockquote readability=&quot;13.527747551687&quot;&gt;
&lt;p&gt;在互联网应用中，高并发系统会面临一个重大的挑战，那就是大量流高并发访问，比如：天猫的双十一、京东618、秒杀、抢购促销等，这些都是典型的大流量高并发场景。关于秒杀，小伙伴们可以参见我的另一篇文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MzE1NTIzNA==&amp;amp;mid=2247484357&amp;amp;idx=1&amp;amp;sn=23e6e38143704db0fa4588186b534e13&amp;amp;chksm=cee51c08f992951e5b883c55b788588f9cbc822e41694b5b4a334ea5d2dc0ae62a5d64e39dc2&amp;amp;token=1388808518&amp;amp;lang=zh_CN#rd&quot;&gt;【高并发】高并发秒杀系统架构解密，不是所有的秒杀都是秒杀！&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;关于【冰河技术】微信公众号，解锁更多【高并发】专题文章。&lt;/p&gt;
&lt;p&gt;注意：由于原文篇幅比较长，所以被拆分为：理论、算法、实战（HTTP接口实战+分布式限流实战）三大部分。&lt;/p&gt;
&lt;p&gt;理论篇：《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MzE1NTIzNA==&amp;amp;mid=2247485706&amp;amp;idx=1&amp;amp;sn=c7d71c0c6b9b15c3b330766f1083e29c&amp;amp;chksm=cee516c7f9929fd170ce636a63fc3764d5ef62eb7ef67a7601664d3d56b0d04c8759e666bc87&amp;amp;token=378924601&amp;amp;lang=zh_CN#rd&quot;&gt;【高并发】如何实现亿级流量下的分布式限流？这些理论你必须掌握！！&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;算法篇：《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MzE1NTIzNA==&amp;amp;mid=2247485719&amp;amp;idx=1&amp;amp;sn=8659791a07a55ae4b646679846d0264f&amp;amp;chksm=cee516daf9929fcc33961276715980832d0b2d875cf563121052592141f132dfa31bbd669ebf&amp;amp;token=378924601&amp;amp;lang=zh_CN#rd&quot;&gt;【高并发】如何实现亿级流量下的分布式限流？这些算法你必须掌握！！&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;项目源码已提交到github：&lt;a href=&quot;https://github.com/sunshinelyz/mykit-ratelimiter&quot;&gt;https://github.com/sunshinelyz/mykit-ratelimiter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;http接口限流实战&quot;&gt;HTTP接口限流实战&lt;/h2&gt;
&lt;p&gt;这里，我们实现Web接口限流，具体方式为：使用自定义注解封装基于令牌桶限流算法实现接口限流。&lt;/p&gt;
&lt;h2 id=&quot;不使用注解实现接口限流&quot;&gt;不使用注解实现接口限流&lt;/h2&gt;
&lt;h3 id=&quot;搭建项目&quot;&gt;搭建项目&lt;/h3&gt;
&lt;p&gt;这里，我们使用SpringBoot项目来搭建Http接口限流项目，SpringBoot项目本质上还是一个Maven项目。所以，小伙伴们可以直接创建一个Maven项目，我这里的项目名称为mykit-ratelimiter-test。接下来，在pom.xml文件中添加如下依赖使项目构建为一个SpringBoot项目。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.2.6.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;

    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;groupId&amp;gt;io.mykit.limiter&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mykit-ratelimiter-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
    &amp;lt;name&amp;gt;mykit-ratelimiter-test&amp;lt;/name&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;guava.version&amp;gt;28.2-jre&amp;lt;/guava.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;spring-boot-starter-logging&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-undertow&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-aop&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${guava.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt;&amp;lt;!--$NO-MVN-MAN-VER$--&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;${java.version}&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;${java.version}&amp;lt;/target&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，我在项目中除了引用了SpringBoot相关的Jar包外，还引用了guava框架，版本为28.2-jre。&lt;/p&gt;
&lt;h3 id=&quot;创建核心类&quot;&gt;创建核心类&lt;/h3&gt;
&lt;p&gt;这里，我主要是模拟一个支付接口的限流场景。首先，我们定义一个PayService接口和MessageService接口。PayService接口主要用于模拟后续的支付业务，MessageService接口模拟发送消息。接口的定义分别如下所示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PayService&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter.service;
import java.math.BigDecimal;
/**
 * @author binghe
 * @version 1.0.0
 * @description 模拟支付
 */
public interface PayService {
    int pay(BigDecimal price);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;MessageService&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter.service;
/**
 * @author binghe
 * @version 1.0.0
 * @description 模拟发送消息服务
 */
public interface MessageService {
    boolean sendMessage(String message);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，创建二者的实现类，分别如下。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MessageServiceImpl&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter.service.impl;
import io.mykit.limiter.service.MessageService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
/**
 * @author binghe
 * @version 1.0.0
 * @description 模拟实现发送消息
 */
@Service
public class MessageServiceImpl implements MessageService {
    private final Logger logger = LoggerFactory.getLogger(MessageServiceImpl.class);
    @Override
    public boolean sendMessage(String message) {
        logger.info(&quot;发送消息成功===&amp;gt;&amp;gt;&quot; + message);
        return true;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;PayServiceImpl&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter.service.impl;
import io.mykit.limiter.service.PayService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import java.math.BigDecimal;
/**
 * @author binghe
 * @version 1.0.0
 * @description 模拟支付
 */
@Service
public class PayServiceImpl implements PayService {
    private final Logger logger = LoggerFactory.getLogger(PayServiceImpl.class);
    @Override
    public int pay(BigDecimal price) {
        logger.info(&quot;支付成功===&amp;gt;&amp;gt;&quot; + price);
        return 1;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于是模拟支付和发送消息，所以，我在具体实现的方法中打印出了相关的日志，并没有实现具体的业务逻辑。&lt;/p&gt;
&lt;p&gt;接下来，就是创建我们的Controller类PayController，在PayController类的接口pay()方法中使用了限流，每秒钟向桶中放入2个令牌，并且客户端从桶中获取令牌，如果在500毫秒内没有获取到令牌的话，我们可以则直接走服务降级处理。&lt;/p&gt;
&lt;p&gt;PayController的代码如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter.controller;
import com.google.common.util.concurrent.RateLimiter;
import io.mykit.limiter.service.MessageService;
import io.mykit.limiter.service.PayService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;

/**
 * @author binghe
 * @version 1.0.0
 * @description 测试接口限流
 */
@RestController
public class PayController {
    private final Logger logger = LoggerFactory.getLogger(PayController.class);
    /**
     * RateLimiter的create()方法中传入一个参数，表示以固定的速率2r/s，即以每秒2个令牌的速率向桶中放入令牌
     */
    private RateLimiter rateLimiter = RateLimiter.create(2);

    @Autowired
    private MessageService messageService;
    @Autowired
    private PayService payService;
    @RequestMapping(&quot;/boot/pay&quot;)
    public String pay(){
        //记录返回接口
        String result = &quot;&quot;;
        //限流处理，客户端请求从桶中获取令牌，如果在500毫秒没有获取到令牌，则直接走服务降级处理
        boolean tryAcquire = rateLimiter.tryAcquire(500, TimeUnit.MILLISECONDS);
        if (!tryAcquire){
            result = &quot;请求过多，降级处理&quot;;
            logger.info(result);
            return result;
        }
        int ret = payService.pay(BigDecimal.valueOf(100.0));
        if(ret &amp;gt; 0){
            result = &quot;支付成功&quot;;
            return result;
        }
        result = &quot;支付失败，再试一次吧...&quot;;
        return result;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，我们来创建mykit-ratelimiter-test项目的核心启动类，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * @author binghe
 * @version 1.0.0
 * @description 项目启动类
 */
@SpringBootApplication
public class MykitLimiterApplication {

    public static void main(String[] args){
        SpringApplication.run(MykitLimiterApplication.class, args);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，我们不使用注解方式实现限流的Web应用就基本完成了。&lt;/p&gt;
&lt;h3 id=&quot;运行项目&quot;&gt;运行项目&lt;/h3&gt;
&lt;p&gt;项目创建完成后，我们来运行项目，运行SpringBoot项目比较简单，直接运行MykitLimiterApplication类的main()方法即可。&lt;/p&gt;
&lt;p&gt;项目运行成功后，我们在浏览器地址栏输入链接：&lt;a href=&quot;http://localhost:8080/boot/pay%E3%80%82%E9%A1%B5%E9%9D%A2%E4%BC%9A%E8%BE%93%E5%87%BA%E2%80%9C%E6%94%AF%E4%BB%98%E6%88%90%E5%8A%9F%E2%80%9D%E7%9A%84%E5%AD%97%E6%A0%B7%EF%BC%8C%E8%AF%B4%E6%98%8E%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82%E5%A6%82%E4%B8%8B%E6%89%80%E7%A4%BA%E3%80%82&quot;&gt;http://localhost:8080/boot/pay。页面会输出“支付成功”的字样，说明项目搭建成功了。如下所示。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200730003953908.png#pic_center&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时，我只访问了一次，并没有触发限流。接下来，我们不停的刷浏览器，此时，浏览器会输出“支付失败，再试一次吧...”的字样，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200730004004789.png#pic_center&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在PayController类中还有一个sendMessage()方法，模拟的是发送消息的接口，同样使用了限流操作，具体代码如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@RequestMapping(&quot;/boot/send/message&quot;)
public String sendMessage(){
    //记录返回接口
    String result = &quot;&quot;;
    //限流处理，客户端请求从桶中获取令牌，如果在500毫秒没有获取到令牌，则直接走服务降级处理
    boolean tryAcquire = rateLimiter.tryAcquire(500, TimeUnit.MILLISECONDS);
    if (!tryAcquire){
        result = &quot;请求过多，降级处理&quot;;
        logger.info(result);
        return result;
    }
    boolean flag = messageService.sendMessage(&quot;恭喜您成长值+1&quot;);
    if (flag){
        result = &quot;消息发送成功&quot;;
        return result;
    }
    result = &quot;消息发送失败，再试一次吧...&quot;;
    return result;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;sendMessage()方法的代码逻辑和运行效果与pay()方法相同，我就不再浏览器访问 &lt;a href=&quot;http://localhost:8080/boot/send/message&quot;&gt;http://localhost:8080/boot/send/message&lt;/a&gt; 地址的访问效果了，小伙伴们可以自行验证。&lt;/p&gt;
&lt;h3 id=&quot;不使用注解实现限流缺点&quot;&gt;不使用注解实现限流缺点&lt;/h3&gt;
&lt;p&gt;通过对项目的编写，我们可以发现，当在项目中对接口进行限流时，不使用注解进行开发，会导致代码出现大量冗余，每个方法中几乎都要写一段相同的限流逻辑，代码十分冗余。&lt;/p&gt;
&lt;p&gt;如何解决代码冗余的问题呢？我们可以使用自定义注解进行实现。&lt;/p&gt;
&lt;h2 id=&quot;使用注解实现接口限流&quot;&gt;使用注解实现接口限流&lt;/h2&gt;
&lt;p&gt;使用自定义注解，我们可以将一些通用的业务逻辑封装到注解的切面中，在需要添加注解业务逻辑的方法上加上相应的注解即可。针对我们这个限流的实例来说，可以基于自定义注解实现。&lt;/p&gt;
&lt;h3 id=&quot;实现自定义注解&quot;&gt;实现自定义注解&lt;/h3&gt;
&lt;p&gt;实现，我们来创建一个自定义注解，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter.annotation;
import java.lang.annotation.*;
/**
 * @author binghe
 * @version 1.0.0
 * @description 实现限流的自定义注解
 */
@Target(value = ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface MyRateLimiter {
    //向令牌桶放入令牌的速率
    double rate();
    //从令牌桶获取令牌的超时时间
    long timeout() default 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;自定义注解切面实现&quot;&gt;自定义注解切面实现&lt;/h3&gt;
&lt;p&gt;接下来，我们还要实现一个切面类MyRateLimiterAspect，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package io.mykit.limiter.aspect;

import com.google.common.util.concurrent.RateLimiter;
import io.mykit.limiter.annotation.MyRateLimiter;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;

/**
 * @author binghe
 * @version 1.0.0
 * @description 一般限流切面类
 */
@Aspect
@Component
public class MyRateLimiterAspect {

    private RateLimiter rateLimiter = RateLimiter.create(2);

    @Pointcut(&quot;execution(public * io.mykit.limiter.controller.*.*(..))&quot;)
    public void pointcut(){

    }

    /**
     * 核心切面方法
     */
    @Around(&quot;pointcut()&quot;)
    public Object process(ProceedingJoinPoint proceedingJoinPoint) throws Throwable{
        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();

        //使用反射获取方法上是否存在@MyRateLimiter注解
        MyRateLimiter myRateLimiter = signature.getMethod().getDeclaredAnnotation(MyRateLimiter.class);
        if(myRateLimiter == null){
            //程序正常执行，执行目标方法
            return proceedingJoinPoint.proceed();
        }
        //获取注解上的参数
        //获取配置的速率
        double rate = myRateLimiter.rate();
        //获取客户端等待令牌的时间
        long timeout = myRateLimiter.timeout();

        //设置限流速率
        rateLimiter.setRate(rate);

        //判断客户端获取令牌是否超时
        boolean tryAcquire = rateLimiter.tryAcquire(timeout, TimeUnit.MILLISECONDS);
        if(!tryAcquire){
            //服务降级
            fullback();
            return null;
        }
        //获取到令牌，直接执行
        return proceedingJoinPoint.proceed();

    }

    /**
     * 降级处理
     */
    private void fullback() {
        response.setHeader(&quot;Content-type&quot;, &quot;text/html;charset=UTF-8&quot;);
        PrintWriter writer = null;
        try {
            writer =  response.getWriter();
            writer.println(&quot;出错了，重试一次试试？&quot;);
            writer.flush();;
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            if(writer != null){
                writer.close();
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;自定义切面的功能比较简单，我就不细说了，大家有啥问题可以关注【冰河技术】微信公众号来进行提问。&lt;/p&gt;
&lt;p&gt;接下来，我们改造下PayController类中的sendMessage()方法，修改后的方法片段代码如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@MyRateLimiter(rate = 1.0, timeout = 500)
@RequestMapping(&quot;/boot/send/message&quot;)
public String sendMessage(){
    //记录返回接口
    String result = &quot;&quot;;
    boolean flag = messageService.sendMessage(&quot;恭喜您成长值+1&quot;);
    if (flag){
        result = &quot;消息发送成功&quot;;
        return result;
    }
    result = &quot;消息发送失败，再试一次吧...&quot;;
    return result;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行部署项目&quot;&gt;运行部署项目&lt;/h3&gt;
&lt;p&gt;部署项目比较简单，只需要运行MykitLimiterApplication类下的main()方法即可。这里，为了简单，我们还是从浏览器中直接输入链接地址来进行访问&lt;/p&gt;
&lt;p&gt;效果如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200730004025440.png#pic_center&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们不断的刷新浏览器。会出现“消息发送失败，再试一次吧..”的字样，说明已经触发限流操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200730004035949.png#pic_center&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;基于限流算法实现限流的缺点&quot;&gt;基于限流算法实现限流的缺点&lt;/h2&gt;
&lt;p&gt;上面介绍的限流方式都只能用于单机部署的环境中，如果将应用部署到多台服务器进行分布式、集群，则上面限流的方式就不适用了，此时，我们需要使用分布式限流。至于在分布式场景下，如何实现限流操作，我们就在下一篇中进行介绍。&lt;/p&gt;
&lt;h2 id=&quot;重磅福利&quot;&gt;重磅福利&lt;/h2&gt;
&lt;p&gt;关注「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号，后台回复 “&lt;strong&gt;设计模式&lt;/strong&gt;” 关键字领取《&lt;strong&gt;深入浅出Java 23种设计模式&lt;/strong&gt;》PDF文档。回复“&lt;strong&gt;Java8&lt;/strong&gt;”关键字领取《&lt;strong&gt;Java8新特性教程&lt;/strong&gt;》PDF文档。两本PDF均是由冰河原创并整理的超硬核教程，面试必备！！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;好了，今天就聊到这儿吧！别忘了点个赞，给个在看和转发，让更多的人看到，一起学习，一起进步！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;如果你觉得冰河写的还不错，请微信搜索并关注「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号，跟冰河学习高并发、分布式、微服务、大数据、互联网和云原生技术，「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号更新了大量技术专题，每一篇技术文章干货满满！不少读者已经通过阅读「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号文章，吊打面试官，成功跳槽到大厂；也有不少读者实现了技术上的飞跃，成为公司的技术骨干！如果你也想像他们一样提升自己的能力，实现技术能力的飞跃，进大厂，升职加薪，那就关注「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号吧，每天更新超硬核技术干货，让你对如何提升技术能力不再迷茫！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200716220443647.png#pic_center&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jul 2020 16:44:00 +0000</pubDate>
<dc:creator>冰河团队</dc:creator>
<og:description>写在前面 在互联网应用中，高并发系统会面临一个重大的挑战，那就是大量流高并发访问，比如：天猫的双十一、京东618、秒杀、抢购促销等，这些都是典型的大流量高并发场景。关于秒杀，小伙伴们可以参见我的另一篇</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/binghe001/p/13401557.html</dc:identifier>
</item>
<item>
<title>脱离舒适区域，拥抱新的责任 （一） - ChaosYang1987</title>
<link>http://www.cnblogs.com/chaosyang/p/accept-new-responsibilities-part-1.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chaosyang/p/accept-new-responsibilities-part-1.html</guid>
<description>&lt;p&gt;一晃我加入新的公司已经快两年了，在一开始的一年半中我一直在公司的产品部门做一名全栈工程师，当然作为的“全栈”也并非真的是“全”栈，主要的工作在于实现新的产品需求，定义微服务接口——实现微服务——实现前段逻辑从微服务存取数据——渲染前段界面，主要就是做了这些工作。使用到的技术栈有Apache Thrift，GraphQL，Express， React。这一年半对我来说，主要学习了Node JS和React，从前段小白变成了前段不那么小白。虽然我仍然不能实现非常炫酷的界面，但是至少我知道如何去模块化的构建前段界面，一个现代化的前段，它的HTML，Javascript，CSS是怎样编译，打包，传输到浏览器工作的， 服务器端的渲染逻辑是怎么和浏览器端的渲染逻辑共用一套代码的，等等。&lt;/p&gt;
&lt;p&gt;今天3月开始，由于受疫情的影响，公司里的工程师都进入在家办公的状态，而我则在这个时间点做出了一个重要的决定——换组。&lt;/p&gt;
&lt;p&gt;其实换组的想法早已有之，前段固然博大精深，但是我也并没有成为前段高手的想法，不是觉得前段高手不厉害，而是个人的兴趣爱好更加广泛。同时，在日常工作中，&lt;strong&gt;重复的劳动也越来越多&lt;/strong&gt;，每次实现新的需求，并没有在其中学习到新的内容，久之对工作内容的热情也会降低。&lt;/p&gt;
&lt;p&gt;对于我个人来说，Infra组是有吸引力的， 作为一名自认为要成为“真正的”全栈程序员的程序员，我一直有一个非常根本的疑问——那些Infra组的成员一天到晚在忙什么？在我的认知里，并没有&lt;strong&gt;Infra程序员就比写业务逻辑的程序员高人一等&lt;/strong&gt;的看法。由于东京只有一个产品组，并没有Infra的成员，导致很多时候在亚太时间我们的生产环境出了问题，我们也只能干着急，等待美国同事醒来处理。我在很久之前便和当时的老板说，要是东京有一个Infra的成员就好了，没准我可以兼职，也算是埋下了小小的伏笔。&lt;/p&gt;
&lt;p&gt;正在此时，公司微信群里我现在的老板正好发信息，说Infra组正在招人，我便迅速的回复了“想去”。&lt;/p&gt;
&lt;p&gt;原本并没有抱太大的希望。一个问题是我在东京，而Infra组在加州总部，如何跨时区协作是一个很大的挑战；另一个问题是我现在的组里只有我一个全栈程序员，组里几乎所有后端的活儿都是我来包揽的， 如果我换组了会出现后继无人的问题。&lt;/p&gt;
&lt;p&gt;后续的发展却顺利的超出想象，Infra组的老大很快私信了我，聊了一会儿，我表现出了对加入Infra的强烈兴趣，然后我又和当时的老板谈了换组的事情。当时的老板给与了我很大的支持，表示欢迎我去尝试新的职位，也对于东京办公室能有一位Infra成员感到欣慰——貌似这样的两次对话就定下了我要换组的基调。&lt;/p&gt;
&lt;p&gt;很快我的换组就正式的确定了，因为在原来的组还有一些负责的项目，所以我暂时还需要有一个转型的时期，在这期间需要两边花50% + 50%的时间（但其实有时候会50% + 70%）。&lt;/p&gt;
&lt;p&gt;没过几天，新的老板在远程给我来了一次onboard，基本上介绍了组里在做的一些项目，以及on call的一些手册链接，然后问了我想做的项目。作为加入infra组的第一个大任务，老板给了两个选择，一个是我之前完全没碰过的一个cron系统的改进，一个是做前段访问数据层的中间件。&lt;/p&gt;
&lt;p&gt;我在短时间内做出来后来觉的&lt;strong&gt;非常正确的决定&lt;/strong&gt;——我选择了做前段访问数据层的中间件。&lt;/p&gt;
&lt;p&gt;我选择的理由是这个项目是一个新的项目，没有历史包袱，并且我正好有一年多做前段的经验，对于前段代码还非常的熟悉。&lt;/p&gt;
&lt;p&gt;其实我加入Infra组的初衷是为了接触新的东西，为什么我要先接这样一个活儿呢？&lt;/p&gt;
&lt;p&gt;其实换组、换公司都要经历过这么一个过程，就是脱离自己舒适区域 —— 做同样的项目很长时间后，熟练度不断的提升，完成相似任务的速度越来越快，但相反的自己的提升速度就会下降。但反过来看，对于自己所在的组和公司，你处于舒适区域的输出能力反而是最强的。在新人入职的时候，不管新人在之前岗位经验是多么丰富，工作的速度是多么快，往往领导都会先派给新人一些简单的活儿，让新人可以快速的有产出。这样也可以让新人在新老板/组员面前证明自己的能力，再循序渐进的去接触复杂的工作。&lt;/p&gt;
&lt;p&gt;而我在之前的经历中就见到/听到不少反例，一些有经验的“老手”在加入新组后就迫不及待的要“搞大新闻”，结果一头扎进去很长时间都没有结果，结果造成新老板对“老手”不信任，“老手”自己的信心也受到打击。&lt;/p&gt;
&lt;p&gt;我作为在产品组工作了一年多的全栈工程师，自认为在公司的程序员中有一定的口碑，换组后，首先要做的是证明自己可以胜任新组的工作，一开始用一个自己较熟悉的领域，同时又是新组业务相关的任务作为过渡，是非常好的。新老板也肯定了，说我是&lt;strong&gt;“最适合做此任务的人选”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;未完待续。&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jul 2020 15:36:00 +0000</pubDate>
<dc:creator>ChaosYang1987</dc:creator>
<og:description>一晃我加入新的公司已经快两年了，在一开始的一年半中我一直在公司的产品部门做一名全栈工程师，当然作为的“全栈”也并非真的是“全”栈，主要的工作在于实现新的产品需求，定义微服务接口——实现微服务——实现前</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chaosyang/p/accept-new-responsibilities-part-1.html</dc:identifier>
</item>
<item>
<title>熵、联和熵与条件熵、交叉熵与相对熵是什么呢？详细解读这里有！ - Charzueus</title>
<link>http://www.cnblogs.com/chenzhenhong/p/13401300.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenzhenhong/p/13401300.html</guid>
<description>&lt;p&gt;&lt;span&gt;熵是一个很常见的名词，在物理上有重要的评估意义，自然语言处理的预备知识中，熵作为信息论的基本和重点知识，在这里我来记录一下学习的总结，并以此与大家分享。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;toc&quot; readability=&quot;65.623017671047&quot;&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;信息论基本知识&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/13401300.html#l1&quot;&gt;1、熵&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/13401300.html#l2&quot; rel=&quot;nofollow&quot;&gt;2、联和熵与条件熵&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/13401300.html#l3&quot;&gt;3、互信息&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/13401300.html#l4&quot; rel=&quot;nofollow&quot;&gt;4、交叉熵与相对熵&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/13401300.html#l5&quot; rel=&quot;nofollow&quot;&gt;5、困惑度&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/13401300.html#l6&quot; rel=&quot;nofollow&quot;&gt;6、总结&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1、熵&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;熵也被称为自信息，描述一个随机变量的不确定性的数量。熵越大，表明不确定性越大，所包含的信息量也越大，就说明很难去预测事件行为或者正确估值。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;熵的公式定义：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729225655313-193521841.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729225821325-347407065.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解答：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729225908503-1706850336.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里计算将相同概率的字符合并计算，结果表明什么呢？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;结果说明传输一个字符平均只需要2.5个比特：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;字符&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;a&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;b&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;c&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;d&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;e&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;f&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;编码&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;100&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;00&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;101&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;01&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;110&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;111&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2、联和熵与条件熵&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;联和熵描述一对随机变量平均所需要的信息量。公式定义：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230016155-1401242158.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;与之联系密切的&lt;span&gt;条件熵&lt;/span&gt;指的是：给定X的情况下，Y的条件熵为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230100055-1884413683.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;将以上公式（1）化简可以得到 &lt;/span&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; H(X,Y) =H(X) +H(Y|X)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-270&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-271&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-272&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-273&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-274&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-275&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-276&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-277&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-278&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-279&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-280&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-281&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-282&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-283&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-284&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-285&quot; class=&quot;mo&quot;&gt;+&lt;span id=&quot;MathJax-Span-286&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-287&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-288&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-289&quot; class=&quot;mi&quot;&gt;∣&lt;span id=&quot;MathJax-Span-290&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-291&quot; class=&quot;mo&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mpunct&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span&gt; &lt;span&gt;公式(4)&lt;/span&gt;，被称为熵的连锁规则。&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230220915-1332703057.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;3、互信息&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;熵的连锁规则&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-10-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; H(X,Y) =H(X) +H(Y|X)=H(Y) +H(X|Y)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-373&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-374&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-375&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-376&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-377&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-378&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-379&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-380&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-381&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-382&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-383&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-384&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-385&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-386&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-387&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-388&quot; class=&quot;mo&quot;&gt;+&lt;span id=&quot;MathJax-Span-389&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-390&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-391&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-392&quot; class=&quot;mi&quot;&gt;∣&lt;span id=&quot;MathJax-Span-393&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-394&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-395&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-396&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-397&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-398&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-399&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-400&quot; class=&quot;mo&quot;&gt;+&lt;span id=&quot;MathJax-Span-401&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-402&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-403&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-404&quot; class=&quot;mi&quot;&gt;∣&lt;span id=&quot;MathJax-Span-405&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-406&quot; class=&quot;mo&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mpunct&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;, 所以&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-11-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; H(X) - H(X|Y)=H(Y)-H(Y|X)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-407&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-408&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-409&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-410&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-411&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-412&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-413&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-414&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-415&quot; class=&quot;mo&quot;&gt;−&lt;span id=&quot;MathJax-Span-416&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-417&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-418&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-419&quot; class=&quot;mi&quot;&gt;∣&lt;span id=&quot;MathJax-Span-420&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-421&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-422&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-423&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-424&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-425&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-426&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-427&quot; class=&quot;mo&quot;&gt;−&lt;span id=&quot;MathJax-Span-428&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-429&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-430&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-431&quot; class=&quot;mi&quot;&gt;∣&lt;span id=&quot;MathJax-Span-432&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-433&quot; class=&quot;mo&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;，这个差就成为互信息，记作&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-12-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;I&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; I(X;Y)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-434&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-435&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-436&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-437&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-438&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;I&lt;span class=&quot;mopen&quot;&gt;(&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;span class=&quot;mpunct&quot;&gt;;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;span class=&quot;mclose&quot;&gt;) 。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5728;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x56FE;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x4E2D;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;I&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x53CD;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x6620;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x662F;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5DF2;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x77E5;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x503C;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x540E;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x4E0D;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x786E;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5B9A;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x6027;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x51CF;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5C11;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x91CF;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x3002;&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; &amp;amp;#x5728;&amp;amp;#x56FE;&amp;amp;#x4E2D;I(X;Y)&amp;amp;#x53CD;&amp;amp;#x6620;&amp;amp;#x7684;&amp;amp;#x662F;&amp;amp;#x5DF2;&amp;amp;#x77E5;Y&amp;amp;#x7684;&amp;amp;#x503C;&amp;amp;#x540E;X&amp;amp;#x7684;&amp;amp;#x4E0D;&amp;amp;#x786E;&amp;amp;#x5B9A;&amp;amp;#x6027;&amp;amp;#x7684;&amp;amp;#x51CF;&amp;amp;#x5C11;&amp;amp;#x91CF;&amp;amp;#x3002;&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;math&quot;&gt;&lt;span class=&quot;mrow&quot;&gt;&lt;span class=&quot;semantics&quot;&gt;&lt;span class=&quot;mrow&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230808184-1928059317.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-13-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5728;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x56FE;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x4E2D;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;I&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x53CD;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x6620;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x662F;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5DF2;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x77E5;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x503C;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x540E;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x4E0D;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x786E;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5B9A;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x6027;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x7684;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x51CF;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x5C11;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x91CF;&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x3002;&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; &amp;amp;#x5728;&amp;amp;#x56FE;&amp;amp;#x4E2D;I(X;Y)&amp;amp;#x53CD;&amp;amp;#x6620;&amp;amp;#x7684;&amp;amp;#x662F;&amp;amp;#x5DF2;&amp;amp;#x77E5;Y&amp;amp;#x7684;&amp;amp;#x503C;&amp;amp;#x540E;X&amp;amp;#x7684;&amp;amp;#x4E0D;&amp;amp;#x786E;&amp;amp;#x5B9A;&amp;amp;#x6027;&amp;amp;#x7684;&amp;amp;#x51CF;&amp;amp;#x5C11;&amp;amp;#x91CF;&amp;amp;#x3002;&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-444&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-445&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-446&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-447&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-448&quot; class=&quot;mi&quot;&gt;在&lt;span id=&quot;MathJax-Span-449&quot; class=&quot;mi&quot;&gt;图&lt;span id=&quot;MathJax-Span-450&quot; class=&quot;mi&quot;&gt;中&lt;span id=&quot;MathJax-Span-451&quot; class=&quot;mi&quot;&gt;I&lt;span id=&quot;MathJax-Span-452&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-453&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-454&quot; class=&quot;mo&quot;&gt;;&lt;span id=&quot;MathJax-Span-455&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-456&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-457&quot; class=&quot;mi&quot;&gt;反&lt;span id=&quot;MathJax-Span-458&quot; class=&quot;mi&quot;&gt;映&lt;span id=&quot;MathJax-Span-459&quot; class=&quot;mi&quot;&gt;的&lt;span id=&quot;MathJax-Span-460&quot; class=&quot;mi&quot;&gt;是&lt;span id=&quot;MathJax-Span-461&quot; class=&quot;mi&quot;&gt;已&lt;span id=&quot;MathJax-Span-462&quot; class=&quot;mi&quot;&gt;知&lt;span id=&quot;MathJax-Span-463&quot; class=&quot;mi&quot;&gt;Y&lt;span id=&quot;MathJax-Span-464&quot; class=&quot;mi&quot;&gt;的&lt;span id=&quot;MathJax-Span-465&quot; class=&quot;mi&quot;&gt;值&lt;span id=&quot;MathJax-Span-466&quot; class=&quot;mi&quot;&gt;后&lt;span id=&quot;MathJax-Span-467&quot; class=&quot;mi&quot;&gt;X&lt;span id=&quot;MathJax-Span-468&quot; class=&quot;mi&quot;&gt;的&lt;span id=&quot;MathJax-Span-469&quot; class=&quot;mi&quot;&gt;不&lt;span id=&quot;MathJax-Span-470&quot; class=&quot;mi&quot;&gt;确&lt;span id=&quot;MathJax-Span-471&quot; class=&quot;mi&quot;&gt;定&lt;span id=&quot;MathJax-Span-472&quot; class=&quot;mi&quot;&gt;性&lt;span id=&quot;MathJax-Span-473&quot; class=&quot;mi&quot;&gt;的&lt;span id=&quot;MathJax-Span-474&quot; class=&quot;mi&quot;&gt;减&lt;span id=&quot;MathJax-Span-475&quot; class=&quot;mi&quot;&gt;少&lt;span id=&quot;MathJax-Span-476&quot; class=&quot;mi&quot;&gt;量&lt;span id=&quot;MathJax-Span-477&quot; class=&quot;mi&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;在图中I(X;Y)反映的是已知Y的值后X的不确定性的减少量。&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord cjk_fallback&quot;&gt;在&lt;span class=&quot;mord cjk_fallback&quot;&gt;图&lt;span class=&quot;mord cjk_fallback&quot;&gt;中&lt;span class=&quot;mord mathdefault&quot;&gt;I&lt;span class=&quot;mopen&quot;&gt;(&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;span class=&quot;mpunct&quot;&gt;;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;span class=&quot;mclose&quot;&gt;)&lt;span class=&quot;mord cjk_fallback&quot;&gt;反&lt;span class=&quot;mord cjk_fallback&quot;&gt;映&lt;span class=&quot;mord cjk_fallback&quot;&gt;的&lt;span class=&quot;mord cjk_fallback&quot;&gt;是&lt;span class=&quot;mord cjk_fallback&quot;&gt;已&lt;span class=&quot;mord cjk_fallback&quot;&gt;知&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;span class=&quot;mord cjk_fallback&quot;&gt;的&lt;span class=&quot;mord cjk_fallback&quot;&gt;值&lt;span class=&quot;mord cjk_fallback&quot;&gt;后&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;span class=&quot;mord cjk_fallback&quot;&gt;的&lt;span class=&quot;mord cjk_fallback&quot;&gt;不&lt;span class=&quot;mord cjk_fallback&quot;&gt;确&lt;span class=&quot;mord cjk_fallback&quot;&gt;定&lt;span class=&quot;mord cjk_fallback&quot;&gt;性&lt;span class=&quot;mord cjk_fallback&quot;&gt;的&lt;span class=&quot;mord cjk_fallback&quot;&gt;减&lt;span class=&quot;mord cjk_fallback&quot;&gt;少&lt;span class=&quot;mord cjk_fallback&quot;&gt;量&lt;span class=&quot;mord cjk_fallback&quot;&gt;。简而言之，Y的值透露了多少关于X的信息量。&lt;br/&gt;因为H(X|X)=0，所以H(X)=H(X)-H(X|X)=I(X;X)，这公式推导说明了熵也成为自信息的概念，也说明两个完全相互依赖的变量之间的互信息并不是一个常量，而是取决定于它们的熵。&lt;br/&gt;&lt;strong&gt;实际应用：&lt;/strong&gt; 互信息描述了两个随机变量之间的统计相关性，平均互信息是非负的，在NLP中用来判断两个对象之间的关系，比如：根据主题类别和词汇之间的互信息进行特征提取。另外在词汇聚类、汉语自动分词、词义消岐、文本分类等问题有着重要用途。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;4、交叉熵与相对熵&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;相对熵简称KL差异或KL距离，衡量相同时间空间里两个概率分布相对差异的测度。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; H(X,Y) =H(X) +H(Y|X)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mpunct&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230511172-1458743598.png&quot; alt=&quot;&quot; width=&quot;914&quot; height=&quot;125&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据公式可知，当两个随机分布完全相同时，即p=q,其相对熵为0。当两个随机分布差别增加，相对熵的期望值也增大。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;相对熵与互信息的联系如下证明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200729213805894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYXJ6b3Vz,size_16,color_FFFFFF,t_70&quot; alt=&quot;相对熵证明&quot; width=&quot;930&quot; height=&quot;476&quot;/&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;交叉熵就是机器学习中经常提到的一种熵的计算。它到底是什么呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-8-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; H(X,Y) =H(X) +H(Y|X)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mpunct&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;交叉熵是衡量估计模型与真实概率分布之间之间差异情况。&lt;br/&gt;如果一个随机变量X~&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-17-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;q&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; p(x),q(x)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-576&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-577&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-578&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-579&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-580&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-581&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-582&quot; class=&quot;mi&quot;&gt;x&lt;span id=&quot;MathJax-Span-583&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-584&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-585&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mpunct&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;q&lt;span class=&quot;mopen&quot;&gt;(&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;span class=&quot;mclose&quot;&gt;)为用于近似&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-18-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; p(x)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-589&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-590&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-591&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-592&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-593&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;span class=&quot;mopen&quot;&gt;(&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;span class=&quot;mclose&quot;&gt;)的概率分布，则实际p与模型q之间的交叉熵定义为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;Y&amp;lt;/mi&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x2223;&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; H(X,Y) =H(X) +H(Y|X)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mpunct&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mbin&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo separator=&amp;quot;true&amp;quot;&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;q&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; p(x),q(x)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;mpunct&quot;&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; p(x)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230641261-1370490258.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230702877-842446874.png&quot; alt=&quot;&quot; width=&quot;851&quot; height=&quot;233&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在设计模型q时候，目的是使交叉熵最小，这样模型的表现更好，从而使模型更接近最真实的概率分布&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-24-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; p(x)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-752&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-753&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-754&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-755&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-756&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-757&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-758&quot; class=&quot;mi&quot;&gt;x&lt;span id=&quot;MathJax-Span-759&quot; class=&quot;mo&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;,一般的，当样本足够大时候，上面计算近似为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; p(x)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230900263-473507975.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;5、困惑度&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在设计语言模型，通常用困惑度（&lt;span class=&quot;katex--inline&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;span id=&quot;MathJax-Element-26-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;semantics&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;y&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&amp;gt; perplexity&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-785&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-786&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-787&quot; class=&quot;semantics&quot;&gt;&lt;span id=&quot;MathJax-Span-788&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-789&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-790&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-791&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-792&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-793&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-794&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-795&quot; class=&quot;mi&quot;&gt;x&lt;span id=&quot;MathJax-Span-796&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-797&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-798&quot; class=&quot;mi&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;）来代替交叉熵衡量语言模型的好坏。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1496983/202007/1496983-20200729230932866-18111087.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，寻找困惑度最小的模型成为模型设计的任务，通常指的是模型对于测试数据的困惑度。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;6、总结&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在信息论的熵部分，我们学到了什么呢？开始说到，这是NLP基础，也是入门机器学习的重要理论部分。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;熵&lt;strong&gt;（自信息）&lt;/strong&gt;&lt;/span&gt;：描述一个随机变量的不确定性的数量。熵越大，表明不确定性越大，所包含的信息量也越大，就说明很难去预测事件行为或者正确估值。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;联和熵&lt;/span&gt;：描述一对随机变量平均所需要的信息量。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;条件熵&lt;/span&gt;：给定X的情况下，通过联和熵计算Y的条件熵，类似于条件概率思想。由此引出互信息概念。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;相对熵&lt;/span&gt;：简称KL差异或KL距离，衡量相同时间空间里两个概率分布相对差异的测度，与互信息密切相关。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;交叉熵&lt;/span&gt;：衡量估计模型与真实概率分布之间之间差异情况。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;学习之后的一些记录，发现这部分知识在其他方面经常提及到，却不知其原理知识，因此做了一个简单的总结备忘，与尔共享！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;更好的阅读体验请转至我的CSDN博客哦！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;我的CSDN博客：&lt;a href=&quot;https://blog.csdn.net/Charzous/article/details/107669211&quot; target=&quot;_blank&quot;&gt;熵、联和熵与条件熵、交叉熵与相对熵是什么呢？来这里有详细解读！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的博客园：&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/13401300.html&quot; target=&quot;_blank&quot;&gt;熵、联和熵与条件熵、交叉熵与相对熵是什么呢？详细解读这里有！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;————————————————&lt;br/&gt;版权声明：本文为CSDN博主「Charzous」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&lt;br/&gt;原文链接：https://blog.csdn.net/Charzous/article/details/107669211&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 29 Jul 2020 15:18:00 +0000</pubDate>
<dc:creator>Charzueus</dc:creator>
<og:description>熵是一个很常见的名词，在物理上有重要的评估意义，自然语言处理的预备知识中，熵作为信息论的基本和重点知识，在这里我来记录一下学习的总结，并以此与大家分享。 信息论基本知识 1、熵 2、联和熵与条件熵 3</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chenzhenhong/p/13401300.html</dc:identifier>
</item>
<item>
<title>接口工具Apifox - 虫师</title>
<link>http://www.cnblogs.com/fnng/p/13401229.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fnng/p/13401229.html</guid>
<description>&lt;p&gt;最近发现一款接口测试工具--apifox，我我们很难将它描述为一款接口管理工具 或 接口自测试工具。&lt;/p&gt;
&lt;p&gt;官方给了一个简单的公式，更能说明apifox可以做什么。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Apifox = Postman + Swagger + Mock + JMeter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;apifox的特点：&quot;&gt;Apifox的特点：&lt;/h2&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接口文档定义：&lt;br/&gt;Apifox 遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范的同时，提供了非常好用的可视化文档管理功能，零学习成本，非常高效。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接口调试：&lt;br/&gt;Postman 有的功能，比如环境变量、预执行脚本、后执行脚本、Cookie/Session 全局共享 等功能，Apifox 都有，并且和 Postman 一样高效好用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;数据 Mock：&lt;br/&gt;内置 Mock.js 规则引擎，非常方便 mock 出各种数据，并且可以在定义数据结构的同时写好 mock 规则。支持添加“期望”，灵活配置根据参数值返回不同数据内容。最重要的是 Apifox 零配置 即可 Mock 出非常人性化的数据，具体在本文后面介绍。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;接口自动化测试：&lt;br/&gt;提供接口集合测试，可以通过选择接口（或接口用例）快速创建测试集。目前接口自动化测试更多功能还在开发中，敬请期待！目标是： JMeter 有的功能基本都会有，并且要更好用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;团队协作：&lt;br/&gt;Apifox 天生就是为团队协作而生的，接口云端实时同步更新，成熟的团队/项目/成员权限管理，满足各类企业的需求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看到这里 是不是觉得 Apifox 非常厉害的样子！ 那我们就来体验一下吧！&lt;/p&gt;
&lt;p&gt;官方网站：&lt;br/&gt;&lt;a href=&quot;https://www.apifox.cn/&quot;&gt;https://www.apifox.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apifox支持 windows/macOS/linux 三个平台，我们可以根据自己的操作系统选择对应的版本安装。&lt;/p&gt;
&lt;h2 id=&quot;基本使用&quot;&gt;基本使用&lt;/h2&gt;
&lt;p&gt;安装完成，第一次启动需要先登录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/311516/202007/311516-20200729230359724-1440522468.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;apifox默认给了一些例子，如果看它的界面会发现和postman比较相似。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/311516/202007/311516-20200729230413168-520515780.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再仔细研究一下，我觉得它更像一个接口管理系统的客户端。因为你可以创建团队，邀请成员，这就是QQ的邀请好友嘛！它增强了团队的协作能力，这对一个研发团队来说很重要。&lt;/p&gt;
&lt;h2 id=&quot;接口测试用例&quot;&gt;接口测试用例&lt;/h2&gt;
&lt;p&gt;我的learning-API-test 项目为例：&lt;br/&gt;&lt;a href=&quot;https://github.com/defnngj/learning-API-test&quot;&gt;https://github.com/defnngj/learning-API-test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，你可以创建一个测试环境，其实就是全局变量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/311516/202007/311516-20200729230433011-1744648655.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在默认分类下面创建一条用例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/311516/202007/311516-20200729230454716-591475385.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图，我想做过接口测试的同学应该不需要我做过多的解释。&lt;/p&gt;
&lt;p&gt;接下来是运行测试用例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/311516/202007/311516-20200729230509163-234159483.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;和postman比较类似，但Apifox可挖掘的功能还有许多。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;mock：创建mock数据，你甚至不需要真的启动一个接口服务。&lt;/li&gt;
&lt;li&gt;生成代码：它可生成各种主流语言的web框架的代码，业务代码（例如：python flask）和接口请求代码（例如：python requests），这就非常厉害了。&lt;/li&gt;
&lt;li&gt;保存为测试用例：保存用例并创建测试用例集，为接口自动化测试提供一站式服务。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;剩下的，就交给你来探索吧！&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jul 2020 15:06:00 +0000</pubDate>
<dc:creator>虫师</dc:creator>
<og:description>接口工具Apifox</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/fnng/p/13401229.html</dc:identifier>
</item>
<item>
<title>《JavaScript语言入门教程》记录整理：入门和数据类型 - findmoon</title>
<link>http://www.cnblogs.com/codemissing/p/JavaScript_intro_DataType.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codemissing/p/JavaScript_intro_DataType.html</guid>
<description>&lt;p&gt;本系列基于阮一峰老师的&lt;a href=&quot;https://wangdoc.com/javascript/index.html&quot;&gt;《JavaScrip语言入门教程》&lt;/a&gt;或《JavaScript教程》记录整理，教程采用&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/deed.zh&quot;&gt;知识共享 署名-相同方式共享 3.0协议&lt;/a&gt;。这几乎是学习js最好的教程之一(去掉之一都不过分)&lt;/p&gt;
&lt;p&gt;最好的教程而阮一峰老师又采用开源方式共享出来，之所以重新记录一遍，一是强迫自己重新认真读一遍学一遍；二是对其中知识点有个自己的记录，加深自己的理解；三是感谢这么好的教程，希望更多人阅读了解&lt;/p&gt;

&lt;h2 id=&quot;js介绍&quot;&gt;js介绍&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;JavaScript 是一种轻量级的脚本语言和嵌入式（embedded）语言，其只能通过宿主环境(host,浏览器或node环境)提供I/O操作&lt;/li&gt;
&lt;li&gt;语法角度，JS是一种&quot;对象模型&quot;语言。支持函数式编程、&quot;面向对象&quot;编程、过程式编程等&lt;/li&gt;
&lt;li&gt;js核心语法包括：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如&lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Date&lt;/code&gt;、&lt;code&gt;Math&lt;/code&gt;等）。然后就是宿主提供的API(比如浏览器提供的BOM、DOM和Web互联网相关的类；Node环境提供文件操作API、网络通信API等)&lt;/li&gt;
&lt;li&gt;JavaScript 的所有值都是对象&lt;/li&gt;
&lt;li&gt;js可以采用事件驱动(&lt;code&gt;event-driven&lt;/code&gt;)和非阻塞式(&lt;code&gt;non-blocking&lt;/code&gt;)设计，实现高并发、多任务处理&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;历史&quot;&gt;历史&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;1995年，Brendan Eich 只用了10天，完成了js的第一版，其设计借鉴了C、java、Scheme、Awk、Self、Perl、Python等多种语言，同时也留下了各种设计缺陷(导致常常需要学习各种解决问题的模式)&lt;/li&gt;
&lt;li&gt;JavaScript与Java是两种不同的语言，两者的关系仅仅是js的基本语法和对象体系最开始是想要模仿Java，而后又与当时Java的公司Sun有合作，也借助Java的声势，从而后来改名叫JavaScript&lt;/li&gt;
&lt;li&gt;ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。ECMAScript 只用来标准化 JavaScript 的基本语法结构。但其他标准如 DOM 的标准就是由 W3C组织(&lt;code&gt;World Wide Web Consortium&lt;/code&gt;)制定的&lt;/li&gt;
&lt;li&gt;2007年，ECMAScript 4.0版草案发布，但是过于激进，导致后面中止了 ECMAScript 4.0 ，将其中一小部分功能发布为ECMAScript 3.1。之后又将其改名为 ECMAScript 5。&lt;/li&gt;
&lt;li&gt;2015年6月，ECMAScript 6 正式发布，且更名为“ECMAScript 2015”。之后每年发布一个ECMAScript版本&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wangdoc.com/javascript/basic/history.html#%E5%91%A8%E8%BE%B9%E5%A4%A7%E4%BA%8B%E8%AE%B0&quot;&gt;周边大事记&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;基本语法&quot;&gt;基本语法&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;js执行单位是行(line)，一行一行地执行，一般，一行就是一个语句&lt;/li&gt;
&lt;li&gt;语句(statement)执行某种操作、表达式(expression)用于得到返回值。&lt;strong&gt;凡是 JavaScript 语言中预期为值的地方，都可以使用表达式&lt;/strong&gt;(这一点使js某些使用很灵活)&lt;/li&gt;
&lt;li&gt;语句以分号结尾，一个分号表示一个语句结束。多个语句可以写在一行内。分号前无内容，表示空语句。表达式不需要分号结尾&lt;/li&gt;
&lt;li&gt;变量是对“值”的具名引用，即为&quot;值&quot;取名。变量的名字就是变量名。如下使用var声明一个变量a，并赋值1&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var a=1;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;只声明变量而不赋值，则该变量的值是&lt;code&gt;undefined&lt;/code&gt;，表示&quot;无定义&quot;。同时变量赋值时不写&lt;code&gt;var&lt;/code&gt;也有效，但不建议。变量必须先声明再使用，否则会报错&lt;code&gt;not defined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一条var命令可以声明多个变量。js是动态类型语言，变量类型可以随时更改。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var a = 1;
a = 'hello';
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;使用&lt;code&gt;var&lt;/code&gt;重新声明一个已存在的变量，是无效的，重新声明时赋值，相当于重新赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量提升&lt;/strong&gt;：js的执行方式是，&lt;strong&gt;先解析代码，获取所有被声明的变量，然后再一行一行地运行，这样就会导致所有变量的声明语句，会被提升到代码的头部，这叫做变量提升(&lt;code&gt;hoisting&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标识符&lt;/strong&gt;(&lt;code&gt;identifier&lt;/code&gt;)指的是识别各种值的合法名称。比如变量名、函数名。js标识符大小写敏感。标识符的命名规则是：只能以字母、下划线(&lt;code&gt;_&lt;/code&gt;)和美元符号(&lt;code&gt;$&lt;/code&gt;)开头，从第二个字符开始还可以使用数字。&lt;/li&gt;
&lt;li&gt;js标识符中的字母指的是&lt;code&gt;Unicode&lt;/code&gt;字母。因此中文标识符也可以使用&lt;/li&gt;
&lt;li&gt;js中的保留字不能用于标识符，保留字是指js中用来表示特定含义的字符，如return、class、true、false、function等&lt;/li&gt;
&lt;li&gt;注释：注释用来对代码进行解释，js引擎执行时会忽略注释部分。&lt;code&gt;//&lt;/code&gt;表示单行注释。&lt;code&gt;/* */&lt;/code&gt;表示多行注释&lt;/li&gt;
&lt;li&gt;js使用大括号表示&quot;区块&quot;(block)。对于&lt;code&gt;var&lt;/code&gt;命令，js的区块不构成单独的作用域(&lt;code&gt;scope&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;条件语句：&lt;/li&gt;
&lt;/ol&gt;&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;if...else...&lt;/code&gt;结构,根据条件的布尔值判断执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;switch&lt;/code&gt;结构判断表达式的值是否与&lt;code&gt;case&lt;/code&gt;相符并执行，如果都不符则执行最后的&lt;code&gt;default&lt;/code&gt;，&lt;code&gt;case&lt;/code&gt;中&lt;code&gt;break&lt;/code&gt;不能少，否则当前case代码块执行完会接着执行下一个case。&lt;code&gt;switch&lt;/code&gt;语句部分和&lt;code&gt;case&lt;/code&gt;语句部分，都可以使用表达式，这就是js中可以为值的地方，都可以使用表达式的体现，如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;switch (1 + 3) {
  case 2 + 2:
    f();
    break;
  default:
    neverHappens();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;switch语句的值和case语句的值，比较时采用的是严格相等运算符(&lt;code&gt;===&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;?:&lt;/code&gt;三元运算符：如下，条件&lt;code&gt;true&lt;/code&gt;,执行&quot;表达式1&quot;，否则执行&quot;表达式2&quot;，然后获取对应返回值&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;(条件) ? 表达式1 : 表达式2
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;15&quot;&gt;&lt;li&gt;循环语句：重复执行某个操作&lt;/li&gt;
&lt;/ol&gt;&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt; 循环：循环条件和代码块，条件为真，就循环执行代码块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt; 循环：可以指定循环的起点、终点和终止条件。分为初始化表达式(initialize)、条件表达式(test)、递增表达式(increment)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;for (初始化表达式; 条件; 递增表达式) {
  语句
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所有for循环，都可以改写成while循环&lt;/p&gt;
&lt;p&gt;for语句的无线循环表示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;for ( ; ; ){
  console.log('Hello World');
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;do...while&lt;/code&gt; 循环：先执行一次循环体，再判断条件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;语句用于跳出代码块或循环。&lt;code&gt;continue&lt;/code&gt;语句用于立即终止本轮循环，并开始下一轮循环&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;16&quot;&gt;&lt;li&gt;js语句的前面可以添加标签（label），相当于定位符，用于跳转到程序的任意位置&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;label:
  语句
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;JavaScript的数据类型有六种(ES6新增了 Symbol 类型)&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;数值(number)：整数和小数（比如1和3.14）&lt;/li&gt;
&lt;li&gt;字符串(strin)：文本（比如&quot;Hello World&quot;）。&lt;/li&gt;
&lt;li&gt;布尔值(boolean)：表示真伪的两个特殊值，即&lt;code&gt;true&lt;/code&gt;(真)和&lt;code&gt;false&lt;/code&gt;(假)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;：表示空值，即此处的值为空。&lt;/li&gt;
&lt;li&gt;对象(object)：各种值组成的集合。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;数值、字符串、布尔值称为原始类型(&lt;code&gt;primitive type&lt;/code&gt;)，是最基本的数据类型。对象称为合成类型(&lt;code&gt;complex type&lt;/code&gt;)。&lt;code&gt;undefined&lt;/code&gt;和&lt;code&gt;null&lt;/code&gt;两个特殊值。&lt;/p&gt;
&lt;p&gt;对象分为：狭义的对象(object)、数组(array)、函数(function)&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;类型判断&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt;运算符返回一个值的数据类型:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数值、字符串、布尔值分别返回&lt;code&gt;number&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数返回&lt;code&gt;function&lt;/code&gt;，&lt;code&gt;undefined&lt;/code&gt;返回&lt;code&gt;undefined&lt;/code&gt;(可以检测未声明的变量)，对象返回&lt;code&gt;object&lt;/code&gt;，&lt;code&gt;null&lt;/code&gt;返回&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 检测未声明
if (typeof v === &quot;undefined&quot;) {
  // ...
}

typeof window // &quot;object&quot;
typeof {} // &quot;object&quot;
typeof [] // &quot;object&quot;

typeof null // &quot;object&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt;可以区分数组和对象&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;[] instanceof Array // false
[] instanceof Array // true
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;null-和-undefined&quot;&gt;null 和 undefined&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;两者含义&quot;类似&quot;，if语句中自动转为false，相等于运算符(==)两者比较为true。null表示&quot;空&quot;对象，转为数值是&lt;code&gt;0&lt;/code&gt;；&lt;code&gt;undefined&lt;/code&gt;表示&quot;无定义&quot;的原始值，转为数值是&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;Number(null) // 0
Number(undefined) // NaN
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;函数没有返回值时，默认返回 undefined&lt;/li&gt;
&lt;li&gt;布尔值表示&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;两个真假状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果 JavaScript 预期某个位置应该是布尔值，则会将该位置上现有的值自动转为布尔值。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;下面六个值会被转为&lt;code&gt;false&lt;/code&gt;,其他的值都是&lt;code&gt;true&lt;/code&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;NaN&lt;/li&gt;
&lt;li&gt;&quot;&quot;或''（空字符串）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;空数组([])和空对象({})对应的布尔值，都是&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;数值&quot;&gt;数值&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;js中所有数字都是以64位浮点数存储，整数也是如此。因此&lt;code&gt;1===1.0&lt;/code&gt;，是同一个数&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;1 === 1.0 // true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;浮点数不是精确的值，因此小数的比较和运算要特别注意&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;0.1 + 0.2 === 0.3   // false

0.3 / 0.1           // 2.9999999999999996

(0.3 - 0.2) === (0.2 - 0.1)   // false
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;js浮点数的64个二进制位，从最左边开始，由如下组成：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;第1位：符号位，0表示正数，1表示负数。数值正负&lt;/li&gt;
&lt;li&gt;第2位到第12位（共11位）：指数部分。数值的大小&lt;/li&gt;
&lt;li&gt;第13位到第64位（共52位）：小数部分（即有效数字）。数值的精度&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;绝对值小于2的53次方的整数，即$-2&lt;sup&gt;53$到$2&lt;/sup&gt;53$，都可以精确表示&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;Math.pow(2, 53); // 9007199254740992

Math.pow(2, 53) + 1; // 9007199254740992

Math.pow(2, 53) + 2; // 9007199254740994

Math.pow(2, 53) + 3; // 9007199254740996

Math.pow(2, 53) + 4; // 9007199254740996
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;最大值和最小值:&lt;code&gt;Number.MAX_VALUE&lt;/code&gt;和&lt;code&gt;Number.MIN_VALUE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;Number.MAX_VALUE // 1.7976931348623157e+308
Number.MIN_VALUE // 5e-324
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;数值表示法：&lt;code&gt;50&lt;/code&gt;(十进制)、&lt;code&gt;0xFF&lt;/code&gt;(十六进制)、&lt;code&gt;123e3&lt;/code&gt;或&lt;code&gt;123e-3&lt;/code&gt;(科学计数法)&lt;/li&gt;
&lt;li&gt;当小数点前面的数字多于21位时，或者小数点后的零多于5个时，js会自动将数值转为科学计数法表示&lt;/li&gt;
&lt;li&gt;使用字面量(&lt;code&gt;literal&lt;/code&gt;)表示数值时：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;十进制：没有前导0的数值&lt;/li&gt;
&lt;li&gt;八进制：有前缀&lt;code&gt;0o&lt;/code&gt;或&lt;code&gt;0O&lt;/code&gt;的数值，或者有前导&lt;code&gt;0&lt;/code&gt;、且只用到0-7的八个阿拉伯数字的数值。&lt;/li&gt;
&lt;li&gt;十六进制：有前缀&lt;code&gt;0x&lt;/code&gt;或&lt;code&gt;0X&lt;/code&gt;的数值。&lt;/li&gt;
&lt;li&gt;二进制：有前缀&lt;code&gt;0b&lt;/code&gt;或&lt;code&gt;0B&lt;/code&gt;的数值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;js会自动将八进制、十六进制、二进制转为十进制&lt;/p&gt;
&lt;ol start=&quot;9&quot;&gt;&lt;li&gt;js存在2个&lt;code&gt;0&lt;/code&gt;:&lt;code&gt;+0&lt;/code&gt;，&lt;code&gt;-0&lt;/code&gt;，两者是等价的。唯一区别是&lt;code&gt;+0&lt;/code&gt;或&lt;code&gt;-0&lt;/code&gt;当作分母时表达式的返回值不相等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;表示“非数字”(&lt;code&gt;Not a Number&lt;/code&gt;)，比如字符串解析为数字报错时会返回&lt;code&gt;NaN&lt;/code&gt;。0除以0得到NaN。&lt;code&gt;NaN&lt;/code&gt;只是一个特殊值，类型依旧是&lt;code&gt;Number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;NaN&lt;/code&gt;不等于任何值，包括它本身&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;NaN === NaN // false
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt;的布尔值为false，&lt;code&gt;NaN&lt;/code&gt;与任何数(包括它自己)的运算，得到的都是&lt;code&gt;NaN&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;12&quot;&gt;&lt;li&gt;&lt;code&gt;Infinity&lt;/code&gt;表示“无穷”，表示无法表示正无穷(&lt;code&gt;Infinity&lt;/code&gt;)和负无穷(&lt;code&gt;-Infinity&lt;/code&gt;)；非0数除以0，得到&lt;code&gt;Infinity&lt;/code&gt;。&lt;br/&gt;&lt;code&gt;Infinity&lt;/code&gt;大于一切数值(除了&lt;code&gt;NaN&lt;/code&gt;)，&lt;code&gt;-Infinity&lt;/code&gt;小于一切数值(除了&lt;code&gt;NaN&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt;的比较运算会返回false&lt;/p&gt;
&lt;ol start=&quot;13&quot;&gt;&lt;li&gt;&lt;code&gt;parseInt()&lt;/code&gt;方法将字符串转为整数。字符串转为整数时，会一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。转换失败返回&lt;code&gt;NaN&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;解析科学计数法的数字时会出现奇怪的结果&lt;/p&gt;
&lt;p&gt;第二个参数表示解析的值的进制&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;parseInt('1000', 2) // 8
parseInt('1000', 6) // 216
parseInt('1000', 8) // 512
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;14&quot;&gt;&lt;li&gt;&lt;code&gt;parseFloat()&lt;/code&gt;：将一个字符串转为浮点数，可以对科学计数法字符串正确转换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isNaN()&lt;/code&gt;判断一个值是否是&lt;code&gt;NaN&lt;/code&gt;。&lt;code&gt;isNaN()&lt;/code&gt;只对数值有效，其他类型值会先转为数值，再判断。对于空数组和只有一个数值成员的数组，&lt;code&gt;isNaN()&lt;/code&gt;返回false&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;isNaN('Hello') // true
// 相当于
isNaN(Number('Hello')) // true
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;16&quot;&gt;&lt;li&gt;判断NaN最好的方法是：&lt;strong&gt;&lt;code&gt;NaN&lt;/code&gt;是唯一不等于自身的值&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function myIsNaN(value) {
  return value !== value;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果使用&lt;code&gt;isNaN()&lt;/code&gt;判断，要同时判断类型：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function myIsNaN(value) {
  return typeof value === 'number' &amp;amp;&amp;amp; isNaN(value);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;17&quot;&gt;&lt;li&gt;&lt;code&gt;isFinite()&lt;/code&gt;判断是否为正常的数值，判断是参数也会进行类型转换&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;字符串&quot;&gt;字符串&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;字符串是放在单引号或双引号中的零个或多个排在一起的字符。字符串中使用相同的引号要用&lt;code&gt;\&lt;/code&gt;反斜杠转义&lt;/li&gt;
&lt;li&gt;每行的尾部使用反斜杠，可以实现多行字符串(&lt;code&gt;\&lt;/code&gt;后面只能有换行符，否则报错)&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var longString = 'Long \
long \
long \
string';

longString // &quot;Long long long string&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可使用&lt;code&gt;+&lt;/code&gt;可以将多个字符串行连接&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;反斜杠(&lt;code&gt;\&lt;/code&gt;)用来表示一些特殊字符，称为转义。如&lt;code&gt;\n&lt;/code&gt;换行符；&lt;code&gt;\r&lt;/code&gt;：回车键；&lt;code&gt;\t&lt;/code&gt;：制表符。如果在字符串中需要包含反斜杠，需要&lt;code&gt;\&lt;/code&gt;转义自身。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&quot;你好，反斜杠\\&quot;;  // &quot;你好，反斜杠\&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;字符串可以看做字符数组，但仅能使用数组的方括号运算符获取字符，而不能进行其他操作&lt;/li&gt;
&lt;li&gt;length属性返回字符串长度&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;'hello'.length  // 5
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;js使用&lt;code&gt;Unicode&lt;/code&gt;字符集。不仅以Unicode存储字符，而且可以只用Unicode码点，如'\u00A9'表示版权符号&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var s = '\u00A9';
s // &quot;©&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;每个字符在 JavaScript 内部都是以16位（2个字节）的 &lt;code&gt;UTF-16&lt;/code&gt; 格式储存。js单位字符长度固定为16位长度&lt;/p&gt;
&lt;p&gt;js 对 &lt;code&gt;UTF-16&lt;/code&gt; 的支持不完整，只支持两字节的字符，无法识别四字节的字符。比如四字节字符&lt;code&gt;𝌆&lt;/code&gt;,浏览器可以正确识别是一个字符，但js无法识别，认为是两个字符。需要特别注意&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;'𝌆'.length // 2
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;&lt;code&gt;Base64&lt;/code&gt;编码：对于ASCII 码0到31的符号无法打印出来，可以使用Base64编码转换为可打印的字符；以文本格式传递二进制数据，也可以使用Base64编码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Base64&lt;/code&gt; 是一种编码方法，可以将任意值转成 0～9、A～Z、a-z、&lt;code&gt;+&lt;/code&gt;和&lt;code&gt;/&lt;/code&gt;这64个字符组成的可打印字符&lt;/strong&gt;。目的是不出现特殊字符，简化程序处理。&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;btoa()&lt;/code&gt;：任意值转为 &lt;code&gt;Base64&lt;/code&gt; 编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atob()&lt;/code&gt;：&lt;code&gt;Base64&lt;/code&gt; 编码转为原来的值&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var string = 'Hello World!';
btoa(string) // &quot;SGVsbG8gV29ybGQh&quot;
atob('SGVsbG8gV29ybGQh') // &quot;Hello World!&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;9&quot;&gt;&lt;li&gt;&lt;code&gt;btoa()&lt;/code&gt;和&lt;code&gt;atob()&lt;/code&gt;的Base64编码解码不使用非ASCII码的字符，如&lt;code&gt;btoa('你好')&lt;/code&gt;就会报错。处理办法是加一个URI转码，如下&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function b64Encode(str) {
  return btoa(encodeURIComponent(str));
}
function b64Decode(str) {
  return decodeURIComponent(atob(str));
}

b64Encode('你好') // &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;
b64Decode('JUU0JUJEJUEwJUU1JUE1JUJE') // &quot;你好&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;对象&quot;&gt;对象&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;对象是一组&quot;键值对&quot;（key-value）的集合，是一种无序的复合数据集合。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如下，对象用大括号，键值对又叫成员，分为&quot;键名&quot;和&quot;键值&quot;，对应&quot;成员的名称&quot;和&quot;成员的值&quot;，键名与键值用冒号分割，键值对逗号分割。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var obj = {
  foo: 'Hello',
  bar: 'World'
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;对象的所有键名都是字符串(ES6中&lt;code&gt;Symbol&lt;/code&gt;值也可以作为键名)。键名要么符合标识名的规则，要么使用引号包含。键名又称为&quot;属性&quot;(&lt;code&gt;property&lt;/code&gt;)，属性可以动态创建&lt;/li&gt;
&lt;li&gt;&quot;键值&quot;可以是任何数据类型，比如&lt;br/&gt;属性值可以为函数，这个属性也可以称为&quot;方法&quot;，可以像函数一样调用&lt;br/&gt;属性的值还是对象，就可以形成链式引用&lt;/li&gt;
&lt;li&gt;对象属性之间逗号分割，最后一个属性可以加逗号(&lt;code&gt;trailing comma&lt;/code&gt;)，也可不加&lt;/li&gt;
&lt;li&gt;不同的变量名指向同一个对象，则它们都是这个对象的引用，即指向同一个内存地址。引用只局限于对象，原始类型中，两个变量就是值的拷贝&lt;/li&gt;
&lt;li&gt;对象采用大括号表示，则就有可能和代码块的大括号产生歧义。比如行首是大括号，如果看做表达式，则是一个对象；如果是语句，则表示一个代码区块。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;{ foo: 123 }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;遇到大括号的歧义时，无法确定是对象还是代码块，JavaScript引擎一律解释为代码块。&lt;/p&gt;
&lt;p&gt;可以将大括号放入圆括号中，这样就是表达式&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// eval 对字符串求值
eval('{foo: 123}') // 123
eval('({foo: 123})') // {foo: 123}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;使用点运算符或方括号运算符读取对象的属性，同时也可以用来赋值。&lt;br/&gt;&lt;strong&gt;方括号运算符的键名必须有引号，否则被看做变量&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var obj = {
  p: 'Hello World'
};

obj.p // &quot;Hello World&quot;
obj['p'] // &quot;Hello World&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;数值键名不能使用点运算符，使用方括号运算符时数值键名会转换为字符串&lt;br/&gt;8. &lt;code&gt;Object.keys(obj)&lt;/code&gt;查看一个对象所有属性或键名&lt;br/&gt;9. &lt;code&gt;delete&lt;/code&gt;用于删除对象本身的属性，成功后返回true。且删除不存在的key也返回true。只有属性存在且不能删除时，才返回false。不能删除继承的属性&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;delete obj.p // true
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;10&quot;&gt;&lt;li&gt;&lt;code&gt;in&lt;/code&gt;运算符检查对象是否包含某个属性。继承时属性也会返回true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasOwnProperty(key)&lt;/code&gt;方法片段是否为对象自身的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for...in&lt;/code&gt;循环用于遍历对象的全部属性&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;遍历的是对象所有可遍历(&lt;code&gt;enumerable&lt;/code&gt;)的属性，会跳过不可遍历的属性。&lt;/li&gt;
&lt;li&gt;不仅遍历对象自身的属性，还遍历继承的属性。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通常都是遍历对象自身的属性，因此可以结合&lt;code&gt;hasOwnProperty&lt;/code&gt;方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var person = { name: '阮一峰老师' };

for (var key in person) {
  if (person.hasOwnProperty(key)) {
    console.log(key);
  }
}
// name
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;函数是一段可以反复调用的代码块&lt;/li&gt;
&lt;li&gt;js中声明函数的三种方法&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;function&lt;/code&gt; 命令——函数的声明(&lt;code&gt;Function Declaration&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如下，&lt;code&gt;function 函数名(参数1,...){函数体}&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function print(s) {
  console.log(s);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;函数表达式(&lt;code&gt;Function Expression&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;变量赋值的方式，这个匿名函数又称函数表达式&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var print = function(s) {
  console.log(s);
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;函数表达式需要在语句的结尾加上分号，表示语句结束。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;函数表达式声明函数时，&lt;code&gt;function&lt;/code&gt;后面不带有函数名。如果加上函数名也仅在函数体内部有效。&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Function&lt;/code&gt; 构造函数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如下，使用&lt;code&gt;Function&lt;/code&gt;构造函数时，&lt;strong&gt;可以传递任意数量的参数，只有最后一个参数会被当做函数体&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var add = new Function(
  'x',
  'y',
  'return x + y'
);

// 等同于
function add(x, y) {
  return x + y;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;函数的重复声明：如果同一个函数被多次声明，后面的就会覆盖前面的声明。&lt;/li&gt;
&lt;li&gt;函数圆括号在声明时用于放入参数；非声明时函数后紧跟圆括号，表示调用函数并传入参数。&lt;code&gt;return&lt;/code&gt;语句表示返回后面表达式的值，并退出当前函数&lt;/li&gt;
&lt;li&gt;函数调用自身，就是递归(&lt;code&gt;recursion&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;js将函数看作一种值。&lt;strong&gt;凡是可以使用值的地方，就能使用函数。&lt;/strong&gt;函数是一个可以执行的值。因为函数与其他数据类型地位平等，所有在js中又称函数为&lt;strong&gt;第一等公民&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;js将函数名视为变量名，所以同样有函数名的提升，&lt;code&gt;function&lt;/code&gt;声明函数时会被提升到代码头部。但是赋值语句定义函数，在赋值前调用会报错(因为是&lt;code&gt;undefined&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;函数的属性和方法&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;name属性返回函数的名字&lt;/li&gt;
&lt;li&gt;length属性返回函数预期传入的参数个数，即函数定义之中的参数个数。&lt;br/&gt;&lt;strong&gt;length属性提供了一种机制，判断定义时和调用时参数的差异，以便实现面向对象编程的“方法重载”（overload）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;方法返回字符串，内容是函数的源码。函数内的注释也会返回。&lt;br/&gt;&lt;strong&gt;原生函数，&lt;code&gt;toString()&lt;/code&gt;方法返回&lt;code&gt;function (){[native code]}&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;9&quot;&gt;&lt;li&gt;函数作用域：作用域(&lt;code&gt;scope&lt;/code&gt;)指变量存在的范围。&lt;code&gt;ES5&lt;/code&gt;中，JavaScript只有两种作用域：全局作用域(变量在整个程序中一直存在)；函数作用域(变量只在函数内部存在)，函数作用域内同样存在变量提升。&lt;code&gt;ES6&lt;/code&gt;新增了块级作用域&lt;/li&gt;
&lt;li&gt;对于顶层函数(直接在js文件中或&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签中)，函数外部声明的变量就是全局变量(&lt;code&gt;global variable&lt;/code&gt;)。函数内部定义的变量，外部无法读取，称为&quot;局部变量&quot;(&lt;code&gt;local variable&lt;/code&gt;)，且函数内部定义的局部变量，在当前函数作用内会覆盖同名全局变量&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;var&lt;/code&gt;声明的变量只有在函数内才是局部变量，其他区块内声明仍是全局变量(比如&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;等块内)&lt;/li&gt;
&lt;li&gt;函数本身的作用域：函数本身也是一个值。它的作用域与变量一样，&lt;strong&gt;是其声明时所在的作用域，与其运行时所在的作用域无关&lt;/strong&gt;。&lt;strong&gt;函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var a = 1;
var x = function () {
  console.log(a); //声明时所在作用域的变量a
};

function f() {
  var a = 2;
  x();
}
f() // 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样，&lt;strong&gt;函数体内部声明的函数，作用域绑定函数体内部。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function foo() {
  var x = 1;
  function bar() {
    console.log(x);
  }
  return bar;
}

var x = 2;
var f = foo();
f() // 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上，fon颞部声明的函数bar，bar的作用域为foo函数内部，当在foo外部取出bar执行时，bar中使用的变量x指向的是foo内部(声明时所在作用域)的x，而不是foo外部的x。这就是&lt;code&gt;闭包&lt;/code&gt;现象&lt;/p&gt;
&lt;ol start=&quot;13&quot;&gt;&lt;li&gt;闭包(&lt;code&gt;closure&lt;/code&gt;)就是能够读取其他函数内部变量的函数。而js中，只有函数内部的子函数才能读取内部变量，因此闭包简单理解就是&quot;定义在一个函数内部的函数&quot;。本质上，闭包用于将函数内部和函数外部连接起来。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;理解闭包，要先理解变量的作用域，函数内部可以读取全局变量&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var e = &quot;我是全局变量&quot;;

function f1() {
  console.log(e);
}
f1() // &quot;我是全局变量&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，函数外部无法读取函数内部声明的变量。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function f1() {
  var n = &quot;我是函数内部变量&quot;;
}

console.log(n)  // Uncaught ReferenceError: n is not defined
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，正常无法得到函数内的局部变量，如果想要实现必须通过变通方法：在函数的内部，再定义一个函数。这样函数内部的子函数就可以使用函数内的局部变量，但是函数内无法使用其子函数内的局部变量。这就是js特有的 &lt;strong&gt;&quot;链式作用域&quot;结构(&lt;code&gt;chain scope&lt;/code&gt;)&lt;/strong&gt;，子对象会一级一级地向上寻找所有父对象的变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父对象的所有变量，对子对象都是可见的，反之则不成立。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样将子函数作为返回值，就可以在函数外部读取它的内部变量&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function f1() {
  var n = &quot;我是函数内部变量&quot;;
  function f2() {
　　console.log(n); // &quot;我是函数内部变量&quot;
  }
  return f2;
}

var result=f1();
result(); // &quot;我是函数内部变量&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上，获取&lt;code&gt;f1&lt;/code&gt;的返回值&lt;code&gt;f2函数&lt;/code&gt;，而&lt;code&gt;f2&lt;/code&gt;可以读取&lt;code&gt;f1&lt;/code&gt;的内部变量，这样就可以在外部获取&lt;code&gt;f1&lt;/code&gt;内部的变量。闭包就是函数&lt;code&gt;f2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;闭包最大的特点，就是它可以&quot;记住&quot;诞生的环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;闭包的用处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;读取函数内部的变量之外&lt;/li&gt;
&lt;li&gt;让变量始终保持在内存中(即&lt;strong&gt;闭包可以使得它的诞生环境一直存在&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function createIncrementor(start) {
  return function () {
    return start++;
  };
}

var inc = createIncrementor(5);

inc() // 5  // 闭包使得start变量一直在内存中
inc() // 6
inc() // 7
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;闭包使得函数内部环境一直存在，&lt;strong&gt;闭包可以看作是函数内部作用域的一个接口&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;封装对象的私有属性和私有方法&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function Person(name) {
  var _age;
  function setAge(n) {
    _age = n;
  }
  function getAge() {
    return _age;
  }

  return {
    name: name,
    getAge: getAge,
    setAge: setAge
  };
}

var p1 = Person('张三');
p1.setAge(25);
p1.getAge(); // 25
p1.name;     // &quot;张三&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上，函数&lt;code&gt;Person&lt;/code&gt;的内部变量&lt;code&gt;_age&lt;/code&gt;，通过闭包&lt;code&gt;getAge&lt;/code&gt;和s&lt;code&gt;etAge&lt;/code&gt;，变成了返回对象&lt;code&gt;p1&lt;/code&gt;的私有变量。&lt;/p&gt;
&lt;p&gt;比如下面，就是闭包使用的典型例子。通常其在处理循环页面dom元素并添加事件方法时需要特别注意&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var funs=[];
for(var i=0;i&amp;lt;5;i++){
  funs[i]=function(){
    console.log(i);
  }
}
funs.forEach(function(f){ 
  f(); 
})
// 输出 5个5，而不是0,1,2,3,4
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;利用闭包，可实现将变量i的每一个循环值&quot;保存&quot;，供调用时输出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var funs=[];
for(var i=0;i&amp;lt;5;i++){
  (function(i){
    funs[i]=function(){
      console.log(i);
    }
  })(i);
}
funs.forEach(function(f){ 
  f(); 
})
// 输出 0,1,2,3,4
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;14&quot;&gt;&lt;li&gt;不能滥用闭包，容易产生网页性能问题。外层函数每次运行，都会生成一个新的闭包，而每个闭包都会保留外层函数的内部变量，内存消耗很大。&lt;/li&gt;
&lt;li&gt;函数的参数，通过圆括号传递外部数据。js在调用时允许省略参数(省略的参数变为&lt;code&gt;undefined&lt;/code&gt;，但只能省略在后面的参数，靠前的参数不能省略)&lt;/li&gt;
&lt;li&gt;参数传递方式：函数参数如果是原始类型的值(数值、字符串、布尔值)，参数传递就是传值传递(&lt;code&gt;passes by value&lt;/code&gt;)。函数参数是复合类型的值(数组、对象、其他函数)，传递方式是传址传递(&lt;code&gt;pass by reference&lt;/code&gt;)，此时在函数内部修改参数，会影响原始值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments&lt;/code&gt;对象包含了函数运行时的所有参数，&lt;code&gt;arguments[0]&lt;/code&gt;是第一个参数，&lt;code&gt;arguments[1]&lt;/code&gt;是第二个参数，以此类推，&lt;code&gt;arguments&lt;/code&gt;只能在函数体内部使用。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;arguments&lt;/code&gt;的&lt;code&gt;length&lt;/code&gt;属性可以判断函数调用时的参数个数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arguments&lt;/code&gt;是对象，只是很像数组。如果想使用数组方法，需要将&lt;code&gt;arguments&lt;/code&gt;转为数组。下面是转换为数组的两种方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var args = Array.prototype.slice.call(arguments);

// 或者
var args = [];
for (var i = 0; i &amp;lt; arguments.length; i++) {
  args.push(arguments[i]);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;18&quot;&gt;&lt;li&gt;立即调用的函数表达式(&lt;code&gt;IIFE&lt;/code&gt;)：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;圆括号&lt;code&gt;()&lt;/code&gt;运算符跟在函数名后面，表示调用该函数，如果在定义函数之后，立即调用该函数，如下当&lt;code&gt;function&lt;/code&gt;出现在行首时，js会将其解释为语句，后面是函数的定义，这是以圆括号结尾就会报错。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function(){ /* code */ }();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;function&lt;/code&gt;出现在行首就是语句。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 语句
function f() {}

// 表达式
var f = function f() {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解决办法就是不要让&lt;code&gt;function&lt;/code&gt;出现在行首，让js引擎解释为表达式。这样就可以&lt;strong&gt;在定义函数之后立即运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如放圆括号中：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;(function(){ /* code */ }());
// 或者
(function(){ /* code */ })();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这就是&quot;立即调用的函数表达式&quot;(&lt;code&gt;Immediately-Invoked Function Expression&lt;/code&gt;,&lt;code&gt;IIFE&lt;/code&gt;)。&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code&gt;IIFE&lt;/code&gt;最后的分号是必须的。尤其是两个&lt;code&gt;IIFE&lt;/code&gt;写在一起时，如果省略分号，连着的两个&lt;code&gt;IIFE&lt;/code&gt;就出出现问题，可能会报错&lt;/p&gt;
&lt;p&gt;如下，两行之间没有分号，js将它们连在一起解释，&lt;strong&gt;将第二行解释为第一行的参数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 报错
(function(){ /* code */ }())
(function(){ /* code */ }())
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;任何让解释器以表达式来处理函数定义的方法，都能产生&lt;code&gt;IIFE&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var i = function(){ return 10; }();
true &amp;amp;&amp;amp; function(){ /* code */ }();
0, function(){ /* code */ }();

// 甚至
!function () { /* code */ }();
~function () { /* code */ }();
-function () { /* code */ }();
+function () { /* code */ }();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通常，只对&lt;strong&gt;匿名函数使用&quot;立即执行的函数表达式&quot;&lt;/strong&gt;。目的：一是不必为函数命名，避免了污染全局变量；二是 &lt;code&gt;IIFE&lt;/code&gt; 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。&lt;/p&gt;
&lt;p&gt;如下，写法二完全避免了污染全局变量&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 写法一
var tmp = newData;
processData(tmp);
storeData(tmp);

// 写法二
(function () {
  var tmp = newData;
  processData(tmp);
  storeData(tmp);
}());
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;数组&quot;&gt;数组&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;数组(&lt;code&gt;array&lt;/code&gt;)是按次序排列的一组值，位置编号从0开始，用方括号表示。比如&lt;code&gt;var arr = ['a', 'b', 'c'];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任何类型的数据都可以放入数组&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var arr = [
  {a: 1},
  [1, 2, 3],
  function() {return true;}
];

arr[0] // Object {a: 1}
arr[1] // [1, 2, 3]
arr[2] // function (){return true;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;数组本质是一种特殊的对象。&lt;code&gt;typeof&lt;/code&gt;返回数组的类型是&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;数组&quot;对象&quot;的键名，是按次序排列的整数。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var arr = ['a', 'b', 'c'];

Object.keys(arr); // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;js中，对象的键名一律为字符串&lt;/strong&gt;，数组的键名也是字符串。对象中数值的键名不能使用点结构(&lt;code&gt;object.key&lt;/code&gt;)，所以数组元素不能使用&lt;code&gt;.&lt;/code&gt;获取&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;数组的&lt;code&gt;length&lt;/code&gt;属性，返回数组元素的个数，即数组长度&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;js使用一个32位整数，保存数组的元素个数。即数组长度最多只有 &lt;code&gt;4294967295&lt;/code&gt; 个($2^32 - 1$)个&lt;/p&gt;
&lt;p&gt;&lt;code&gt;length&lt;/code&gt;属性是可写的。减少&lt;code&gt;length&lt;/code&gt;值可用于删除数组元素。&lt;code&gt;length&lt;/code&gt;设置为0可用于清空数组。&lt;em&gt;length属性的值等于最大的数字键加1&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var arr = [ 'a', 'b', 'c' ];
arr.length // 3

arr.length = 2;
arr // [&quot;a&quot;, &quot;b&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;不推荐使用&lt;code&gt;for...in&lt;/code&gt;遍历数组(会遍历非数字键)。可使用&lt;code&gt;for&lt;/code&gt;或&lt;code&gt;while&lt;/code&gt;循环，或&lt;code&gt;forEach&lt;/code&gt;方法遍历&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var a = [1, 2, 3];

// for循环
for(var i = 0; i &amp;lt; a.length; i++) {
  console.log(a[i]);
}

// while循环
var i = 0;
while (i &amp;lt; a.length) {
  console.log(a[i]);
  i++;
}

var l = a.length;
while (l--) {
  console.log(a[l]);
}

// forEach方法
a.forEach(function (item) {
  console.log(item);
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;数组的某个位置是空元素，即两个逗号之间没有任何值，称该数组存在空位(&lt;code&gt;hole&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var a = [1, , 3 , 4];
a.length // 4

a[1] // undefined

delete a[2];
a[2] // undefined
a.length // 4
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;数组的空位不影响&lt;code&gt;length&lt;/code&gt;属性。数组最后一个元素后面有逗号，不会产生空位。空位返回&lt;code&gt;undefined&lt;/code&gt;。&lt;code&gt;delete&lt;/code&gt;命令删除一个数组成员会形成空位，且不会影响&lt;code&gt;length&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;类似数组的对象：如果一个对象的所有键名都是正整数或零，并且有&lt;code&gt;length&lt;/code&gt;属性，则这个对象语法上称为&quot;类似数组的对象&quot;(&lt;code&gt;array-like object&lt;/code&gt;)。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;&quot;类似数组的对象&quot;并不是数组，它们不具备数组特有的方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下，&lt;code&gt;obj&lt;/code&gt;就是一个类似数组的对象&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var obj = {
  0: 'a',
  1: 'b',
  2: 'c',
  length: 3
};

obj[0] // 'a'
obj[1] // 'b'
obj.length // 3
obj.push('d') // TypeError: obj.push is not a function
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&quot;类似数组的对象&quot;的根本特征，就是具有&lt;code&gt;length&lt;/code&gt;属性。只要有&lt;code&gt;length&lt;/code&gt;属性，就可以认为这个对象类似于数组。但这种&lt;code&gt;length&lt;/code&gt;属性不是动态值&lt;/p&gt;
&lt;p&gt;典型的&quot;类似数组的对象&quot;是函数的&lt;code&gt;arguments&lt;/code&gt;对象，以及大多数DOM元素集，还有字符串。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// arguments对象
function args() { return arguments }
var arrayLike = args('a', 'b');

arrayLike[0] // 'a'
arrayLike.length // 2
arrayLike instanceof Array // false

// DOM元素集
var elts = document.getElementsByTagName('h3');
elts.length // 3
elts instanceof Array // false

// 字符串
'abc'[1] // 'b'
'abc'.length // 3
'abc' instanceof Array // false
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;数组的&lt;code&gt;slice&lt;/code&gt;方法可以将&quot;类似数组的对象&quot;变成真正的数组。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var arr = Array.prototype.slice.call(arrayLike);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了转为真正的数组，还可以通过&lt;code&gt;call()&lt;/code&gt;把数组的方法放到对象上面，从而让&quot;类似数组的对象&quot;可以使用数组的方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;Array.prototype.forEach.call(arrayLike, function (value, index) {
  console.log(index + ' : ' + value);
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;这种方法比直接使用数组原生的forEach要慢，所以可以先转为真正的数组，在调用方法&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jul 2020 14:42:00 +0000</pubDate>
<dc:creator>findmoon</dc:creator>
<og:description>本系列基于阮一峰老师的《JavaScrip语言入门教程》或《JavaScript教程》记录整理，教程采用知识共享 署名-相同方式共享 3.0协议。这几乎是学习js最好的教程之一(去掉之一都不过分) 最</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/codemissing/p/JavaScript_intro_DataType.html</dc:identifier>
</item>
<item>
<title>PHP系列之钩子 - it阿布</title>
<link>http://www.cnblogs.com/it-abu/p/13400026.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/it-abu/p/13400026.html</guid>
<description>&lt;p&gt;PHP 和 Zend Engine 为扩展提供了许多不同的钩子，这些扩展允许扩展开发人员以 PHP userland 无法提供的方式控制 PHP 运行时。&lt;/p&gt;
&lt;p&gt;本章将展示各种钩子和从扩展钩子到它们的常见用例。&lt;/p&gt;
&lt;p&gt;钩子到 PHP 功能的一般模式是 PHP 核心提供的扩展覆盖函数指针。然后扩展函数通常执行自己的工作并调用原始 PHP 核心函数。使用此模式，不同的扩展可以覆盖同一个钩子而不会导致冲突。&lt;/p&gt;
&lt;h2&gt;挂钩到函数的执行&lt;/h2&gt;
&lt;p&gt;userland和内部函数的执行由Zend引擎中的两个函数处理，您可以用自己的实现替换这两个函数。覆盖此钩子的扩展的主要用例是通用函数级评测、调试和面向方面的编程。&lt;/p&gt;
&lt;p&gt;钩子在 Zend/zend_execute.h 中定义:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ZEND_API extern void (*zend_execute_ex)(zend_execute_data *execute_data);ZEND_API extern void (*zend_execute_internal)(zend_execute_data *execute_data, zval *return_value);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要覆盖这些函数指针，则必须在 Minit 中执行此操作，因为 Zend Engine 中的其他决策是根据指针是否被覆盖这一事实提前做出的。&lt;/p&gt;
&lt;p&gt;覆盖的通常模式是这样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; void (*original_zend_execute_ex) (zend_execute_data *execute_data);&lt;span&gt;static&lt;/span&gt; void (*original_zend_execute_internal) (zend_execute_data *execute_data, zval *return_value);void my_execute_internal(zend_execute_data *execute_data, zval *return_value);void my_execute_ex (zend_execute_data *&lt;span&gt;execute_data);PHP_MINIT_FUNCTION(my_extension){

    REGISTER_INI_ENTRIES();

 

    original_zend_execute_internal &lt;/span&gt;=&lt;span&gt; zend_execute_internal;

    zend_execute_internal &lt;/span&gt;=&lt;span&gt; my_execute_internal;

 

    original_zend_execute_ex &lt;/span&gt;=&lt;span&gt; zend_execute_ex;

    zend_execute_ex &lt;/span&gt;=&lt;span&gt; my_execute_ex;

 

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;}PHP_MSHUTDOWN_FUNCTION(my_extension){

    zend_execute_internal &lt;/span&gt;=&lt;span&gt; original_zend_execute_internal;

    zend_execute_ex &lt;/span&gt;=&lt;span&gt; original_zend_execute_ex;

 

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; SUCCESS;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;覆盖 zend_execute_ex 的一个缺点是它将 Zend Virtual Machine 运行时的行为更改为使用递归，而不是在不离开解释器循环的情况下处理调用。此外，没有覆盖zend_execute_ex的 PHP 引擎也可以生成更优化的函数调用操作码。&lt;/p&gt;
&lt;p&gt;这些挂钩对性能非常敏感，具体取决于原始函数封装代码的复杂性。&lt;em id=&quot;__mceDel&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;覆盖内部功能&lt;/h2&gt;
&lt;p&gt;在覆盖执行钩子时，扩展可以记录每个函数调用，你还可以覆盖用户域，核心和扩展函数（和方法）的各个函数指针。如果扩展仅需要访问特定的内部函数调用，则具有更好的性能特征。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;if PHP_VERSION_ID &amp;lt; 70200typedef void (*zif_handler)(INTERNAL_FUNCTION_PARAMETERS);#endif&lt;/span&gt;
&lt;span&gt;
zif_handler original_handler_var_dump;ZEND_NAMED_FUNCTION(my_overwrite_var_dump){

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果我们想调用原始函数&lt;/span&gt;
&lt;span&gt;
    original_handler_var_dump(INTERNAL_FUNCTION_PARAM_PASSTHRU);}PHP_MINIT_FUNCTION(my_extension){

    zend_function &lt;/span&gt;*&lt;span&gt;original;

 

    original &lt;/span&gt;= zend_hash_str_find_ptr(EG(function_table), &quot;var_dump&quot;, &lt;span&gt;sizeof&lt;/span&gt;(&quot;var_dump&quot;)-1&lt;span&gt;);

 

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (original != &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;) {

        original_handler_var_dump &lt;/span&gt;= original-&amp;gt;internal_function.&lt;span&gt;handler;

        original&lt;/span&gt;-&amp;gt;internal_function.handler =&lt;span&gt; my_overwrite_var_dump;

    }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;覆盖类方法时，可以在 zend_class_entry上找到函数表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
zend_class_entry *ce = zend_hash_str_find_ptr(CG(class_table), &quot;PDO&quot;, &lt;span&gt;sizeof&lt;/span&gt;(&quot;PDO&quot;)-1);&lt;span&gt;if&lt;/span&gt; (ce != &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;) {

    original &lt;/span&gt;= zend_hash_str_find_ptr(&amp;amp;ce-&amp;gt;function_table, &quot;exec&quot;, &lt;span&gt;sizeof&lt;/span&gt;(&quot;exec&quot;)-1&lt;span&gt;);

 

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (original != &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;) {

        original_handler_pdo_exec &lt;/span&gt;= original-&amp;gt;internal_function.&lt;span&gt;handler;

        original&lt;/span&gt;-&amp;gt;internal_function.handler =&lt;span&gt; my_overwrite_pdo_exec;

    }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;修改抽象语法树（AST）&lt;/h2&gt;
&lt;p&gt;当 PHP 7编译 PHP 代码时，它会先将其转换为抽象语法树（AST），然后最终生成持久存储在 Opcache 中的操作码。zend_ast_process钩子会被每个已编译的脚本调用，并允许你在解析和创建 AST 之后修改 AST。&lt;/p&gt;
&lt;p&gt;这是要使用的最复杂的钩子之一，因为它需要完全了解 AST。在此处创建无效的 AST 可能会导致异常行为或崩溃。&lt;/p&gt;
&lt;p&gt;最好看看使用此钩子的示例扩展：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Google Stackdriver PHP调试器扩展&lt;/li&gt;
&lt;li&gt;基于 Stackdriver 的带有 AST 的概念验证器&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;熟悉脚本/文件编译&lt;/h2&gt;
&lt;p&gt;每当用户脚本调用include/require或其对应的include_once/require_once时，PHP内核都会在指针zend_compile_file处调用该函数处理此请求。参数是文件句柄，结果是zend_op_array。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
zend_op_array * my_extension_compile_file(zend_file_handle * file_handle，int类型);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PHP核心中有两个扩展实现了此挂钩：dtrace和opcache。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果您使用环境变量USE_ZEND_DTRACE启动PHP脚本并使用dtrace支持编译了PHP，则dtrace_compile_file用于Zend / zend_dtrace.c。&lt;/li&gt;
&lt;li&gt;Opcache将操作数组存储在共享内存中以获得更好的性能，因此，每当脚本被编译时，其最终的操作数组都会从缓存中得到服务，而不是重新编译。您可以在ext / opcache / ZendAccelerator.c中找到此实现。&lt;/li&gt;
&lt;li&gt;名为compile_file的默认实现是Zend / zend_language_scanner.l中扫描程序代码的一部分。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实施此挂钩的用例是Opcode Accelerating，PHP代码加密/解密，调试或概要分析。&lt;/p&gt;
&lt;p&gt;您可以随时在执行PHP进程时替换该挂钩，并且替换后编译的所有PHP脚本都将由该挂钩的实现处理。&lt;/p&gt;
&lt;p&gt;始终调用原始函数指针非常重要，否则PHP将无法再编译脚本，并且Opcache将不再起作用。&lt;/p&gt;
&lt;p&gt;此处的扩展覆盖顺序也很重要，因为您需要知道是要在Opcache之前还是之后注册钩子，因为Opcache如果在其共享内存缓存中找到操作码数组条目，则不会调用原始函数指针。 Opcache将其钩子注册为启动后钩子，该钩子在扩展的minit阶段之后运行，因此默认情况下，缓存脚本时将不再调用该钩子。&lt;/p&gt;
&lt;h2&gt;调用错误处理程序时的通知&lt;/h2&gt;
&lt;p&gt;与PHP用户区set_error_handler()函数类似，扩展可以通过实现zend_error_cb钩子将自身注册为错误处理程序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ZEND_API void(* zend_error_cb)(int类型，&lt;span&gt;const&lt;/span&gt; char * error_filename，&lt;span&gt;const&lt;/span&gt; uint32_t error_lineno，&lt;span&gt;const&lt;/span&gt; char * format，va_list args);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;type变量对应于E _ *错误常量，该常量在PHP用户区中也可用。&lt;/p&gt;
&lt;p&gt;PHP核心和用户态错误处理程序之间的关系很复杂：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果未注册任何用户级错误处理程序，则始终调用zend_error_cb。&lt;/li&gt;
&lt;li&gt;如果注册了userland错误处理程序，则对于E_ERROR，E_PARSE，E_CORE_ERROR，E_CORE_WARNING，E_COMPILE_ERROR的所有错误和E_COMPILE_WARNING始终调用zend_error_cb挂钩。&lt;/li&gt;
&lt;li&gt;对于所有其他错误，仅在用户态处理程序失败或返回false时调用zend_error_cb。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;另外，由于Xdebug自身复杂的实现，它以不调用以前注册的内部处理程序的方式覆盖错误处理程序。&lt;/p&gt;
&lt;p&gt;因此，覆盖此挂钩不是很可靠。&lt;/p&gt;
&lt;p&gt;再次覆盖应该以尊重原始处理程序的方式进行，除非您想完全替换它：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
void(* original_zend_error_cb)(int类型，&lt;span&gt;const&lt;/span&gt; char * error_filename，&lt;span&gt;const&lt;/span&gt; uint error_lineno，&lt;span&gt;const&lt;/span&gt; char * format，va_list args);void my_error_cb(int类型，&lt;span&gt;const&lt;/span&gt; char * error_filename，&lt;span&gt;const&lt;/span&gt; uint error_lineno，&lt;span&gt;const&lt;/span&gt; char *&lt;span&gt; format，va_list args){

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我的特殊错误处理&lt;/span&gt;
&lt;span&gt;
 

    original_zend_error_cb(type，error_filename，error_lineno，format，args);}PHP_MINIT_FUNCTION(my_extension){

    original_zend_error_cb &lt;/span&gt;=&lt;span&gt; zend_error_cb;

    zend_error_cb &lt;/span&gt;=&lt;span&gt; my_error_cb;

 

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;}PHP_MSHUTDOWN(my_extension){

    zend_error_cb &lt;/span&gt;= original_zend_error_cb;}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;该挂钩主要用于为异常跟踪或应用程序性能管理软件实施集中式异常跟踪。&lt;/p&gt;
&lt;h2&gt;引发异常时的通知&lt;/h2&gt;
&lt;p&gt;每当PHP Core或Userland代码引发异常时，都会调用zend_throw_exception_hook并将异常作为参数。&lt;/p&gt;
&lt;p&gt;这个钩子的签名非常简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
void my_throw_exception_hook(zval * &lt;span&gt;exception&lt;/span&gt;&lt;span&gt;){

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(original_zend_throw_exception_hook！= &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;){

        original_zend_throw_exception_hook(&lt;/span&gt;&lt;span&gt;exception&lt;/span&gt;&lt;span&gt;);

    }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该挂钩没有默认实现，如果未被扩展覆盖，则指向NULL。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; void(* original_zend_throw_exception_hook)(zval * ex);void my_throw_exception_hook(zval * &lt;span&gt;exception&lt;/span&gt;&lt;span&gt;);PHP_MINIT_FUNCTION(my_extension){

    original_zend_throw_exception_hook &lt;/span&gt;=&lt;span&gt; zend_throw_exception_hook;

    zend_throw_exception_hook &lt;/span&gt;=&lt;span&gt; my_throw_exception_hook;

 

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; SUCCESS;}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果实现此挂钩，请注意无论是否捕获到异常，都会调用此挂钩。将异常临时存储在此处，然后将其与错误处理程序挂钩的实现结合起来以检查异常是否未被捕获并导致脚本停止，仍然有用。&lt;/p&gt;
&lt;p&gt;实现此挂钩的用例包括调试，日志记录和异常跟踪。&lt;/p&gt;
&lt;h2&gt;挂接到eval()&lt;/h2&gt;
&lt;p&gt;PHPeval不是内部函数，而是一种特殊的语言构造。因此，您无法通过zend_execute_internal或通过覆盖其函数指针来连接它。&lt;/p&gt;
&lt;p&gt;挂钩到eval的用例并不多，您可以将其用于概要分析或出于安全目的。如果更改其行为，请注意可能需要评估其他扩展名。一个示例是Xdebug，它使用它执行断点条件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
extern ZEND_API zend_op_array *(* zend_compile_string)(zval * source_string，char * filename);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;挂入垃圾收集器&lt;/h2&gt;
&lt;p&gt;当可收集对象的数量达到一定阈值时，引擎本身会调用gc_collect_cycles()或隐式地触发PHP垃圾收集器。&lt;/p&gt;
&lt;p&gt;为了使您了解垃圾收集器的工作方式或分析其性能，可以覆盖执行垃圾收集操作的函数指针挂钩。从理论上讲，您可以在此处实现自己的垃圾收集算法，但是如果有必要对引擎进行其他更改，则这可能实际上并不可行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
int(*&lt;span&gt; original_gc_collect_cycles)(无效);int my_gc_collect_cycles(无效){

    original_gc_collect_cycles();}PHP_MINIT_FUNCTION(my_extension){

    original_gc_collect_cycles &lt;/span&gt;=&lt;span&gt; gc_collect_cycles;

    gc_collect_cycles &lt;/span&gt;=&lt;span&gt; my_gc_collect_cycles;

 

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; SUCCESS;}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;覆盖中断处理程序&lt;/h2&gt;
&lt;p&gt;当执行器全局EG(vm_interrupt)设置为1时，将调用一次中断处理程序。在执行用户域代码期间，将在常规检查点对它进行检查。引擎使用此挂钩通过信号处理程序实现PHP执行超时，该信号处理程序在达到超时持续时间后将中断设置为1。&lt;/p&gt;
&lt;p&gt;当更安全地清理或实现自己的超时处理时，这有助于将信号处理推迟到运行时执行的后期。通过设置此挂钩，您不会意外禁用PHP的超时检查，因为它具有自定义处理的优先级，该优先级高于对zend_interrupt_function的任何覆盖。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ZEND_API void(* original_interrupt_function)(zend_execute_data * execute_data);void my_interrupt_function(zend_execute_data *&lt;span&gt; execute_data){

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(original_interrupt_function！= &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;){

        original_interrupt_function(execute_data);

    }}PHP_MINIT_FUNCTION(my_extension){

    original_interrupt_function &lt;/span&gt;=&lt;span&gt; zend_interrupt_function;

    zend_interrupt_function &lt;/span&gt;=&lt;span&gt; my_interrupt_function;

 

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; SUCCESS;}
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 29 Jul 2020 14:22:00 +0000</pubDate>
<dc:creator>it阿布</dc:creator>
<og:description>PHP 提供的钩子 PHP 和 Zend Engine 为扩展提供了许多不同的钩子，这些扩展允许扩展开发人员以 PHP userland 无法提供的方式控制 PHP 运行时。 本章将展示各种钩子和从扩</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/it-abu/p/13400026.html</dc:identifier>
</item>
</channel>
</rss>