<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>挥舞的手臂(mixly+二次开发) - McKay</title>
<link>http://www.cnblogs.com/aarond/p/maker.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aarond/p/maker.html</guid>
<description>&lt;p&gt;从vb6到vb.net，一路c#, java, python, nn, c，对技术的切换早已经没有害怕的感觉了，一直有的是技术的热情和我所认为的技术信仰。&lt;/p&gt;
&lt;p&gt;扯完，开始正文。&lt;/p&gt;
&lt;p&gt;看看效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113001426701-188766454.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用的是Arduino UNO+16 Servo Drive Board+2个SG90舵机（左右手分别1个舵机摇摆）&lt;/p&gt;
&lt;p&gt;Arduino UNO:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113002846042-2123277201.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;16 Servo Drive Board&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113003028573-1684489381.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后将这2块叠在一起插上引脚硬件就好了 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113003313594-1713612553.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;连的是5和6引脚&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113003456867-1420472858.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;接下来就程序了，直接编码算是很简单的，就2步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;拷贝厂商的.h/.cpp文件夹到arduino的libraries目录&lt;/li&gt;
&lt;li&gt;写代码如下：&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
#include &amp;lt;Adafruit_PWMServoDriver.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; SERVOMIN 200
&lt;span&gt;#define&lt;/span&gt; SERVOMAX 540
&lt;span&gt;#define&lt;/span&gt; SERVOMIN_Angle 0
&lt;span&gt;#define&lt;/span&gt; SERVOMAX_Angle 112&lt;span&gt;

Adafruit_PWMServoDriver pwm &lt;/span&gt;=&lt;span&gt; Adafruit_PWMServoDriver();

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; servo_goto_angle(&lt;span&gt;int&lt;/span&gt; pinId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; angle)
{
     &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; anglePwmValue=&lt;span&gt;map(angle, SERVOMIN_Angle, SERVOMAX_Angle, SERVOMIN, SERVOMAX);
     pwm.setPWM(pinId,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, anglePwmValue);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; servo_init()
{
     Serial.begin(&lt;/span&gt;&lt;span&gt;9600&lt;/span&gt;&lt;span&gt;);
     pwm.begin();
     pwm.setPWMFreq(&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;);
     delay(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setup(){
  servo_init();
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; loop(){
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;112&lt;/span&gt;; i = i + (&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)) {
    servo_goto_angle(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;, i);
    delay(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
  }
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;112&lt;/span&gt;; i &amp;gt;= &lt;span&gt;1&lt;/span&gt;; i = i + (-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)) {
    servo_goto_angle(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;, i);
    delay(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
  }
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;112&lt;/span&gt;; i = i + (&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)) {
    servo_goto_angle(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;, i);
    delay(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
  }
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;112&lt;/span&gt;; i &amp;gt;= &lt;span&gt;1&lt;/span&gt;; i = i + (-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)) {
    servo_goto_angle(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;, i);
    delay(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;然后交叉编译，上传就好了。&lt;/p&gt;











&lt;p&gt;可是(哈哈，这里还有，故意空出了一大段)，考虑到我还要教女儿学会这个，就不能这么直接代码给她看了，毕竟才小学1年级，还好，有mixly，好，希望来了，图形化编程来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113004002770-413045666.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;鼓捣了一般，最后发现通用的组件都能用，只是这个舵机由于是厂商买来的，还没法很好的支持，得自定义！这下麻烦了，找了点&lt;a href=&quot;https://www.jianshu.com/p/c491e831a7de&quot; target=&quot;_blank&quot;&gt;mixly二次开发&lt;/a&gt;的资料看了看，最终决定自己写mixly插件。&lt;/p&gt;
&lt;p&gt;看了看mixly插件其实就是用js编写外观以及生成代码部分拼c代码出来，然后就好办了，下面是完整插件的目录结构（xml是描述文件、block中的js是生成积木外观的、generator中的js是生成c代码的）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113004435349-1709034940.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;McKay.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
type=&quot;company&quot;
block=&quot;block/McKay.js&quot;
generator=&quot;generator/McKay.js&quot;
media=&quot;media/McKay&quot;
language=&quot;language/McKay&quot;
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;../../blocks/company/McKay.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;../../generators/arduino/company/McKay.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;category &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;McKay_ServoDriveBoard&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;McKay-舵机&quot;&lt;/span&gt;&lt;span&gt; colour&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;block &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;ServoDriveBoard_Init&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;MinAngle&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;MaxAngle&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;block &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;ServoDriveBoard_Do&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;ServoNumber&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Angle&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;block\McKay.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

goog.provide(&lt;/span&gt;'Blockly.Blocks.McKay'&lt;span&gt;);

goog.require(&lt;/span&gt;'Blockly.Blocks'&lt;span&gt;);


Blockly.Blocks.ServoDriveBoard_Init&lt;/span&gt;=&lt;span&gt;{
init:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.appendDummyInput(&quot;&quot;&lt;span&gt;)
          .appendField(&lt;/span&gt;&quot;初始化舵机&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.appendValueInput(&quot;MinAngle&quot;).setCheck(Number).appendField(&quot;最小角度&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.appendValueInput(&quot;MaxAngle&quot;).setCheck(Number).appendField(&quot;最大角度&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setColour(20&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setPreviousStatement(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setNextStatement(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setInputsInline(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setTooltip(&quot;初始化舵机&quot;&lt;span&gt;);
  }
};




Blockly.Blocks.ServoDriveBoard_Do&lt;/span&gt;=&lt;span&gt;{
init:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.appendDummyInput(&quot;&quot;&lt;span&gt;)
          .appendField(&lt;/span&gt;&quot;舵机运行&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.appendValueInput(&quot;ServoNumber&quot;).setCheck(Number).appendField(&quot;舵机编号&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.appendValueInput(&quot;Angle&quot;).setCheck(Number).appendField(&quot;角度&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setColour(20&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setPreviousStatement(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setNextStatement(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setInputsInline(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setTooltip(&quot;舵机运行&quot;&lt;span&gt;);
  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;generator\McKay.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

goog.provide(&lt;/span&gt;'Blockly.Arduino.McKay'&lt;span&gt;);

goog.require(&lt;/span&gt;'Blockly.Arduino'&lt;span&gt;);



Blockly.McKay_ServoDriveBoard_MinAngle&lt;/span&gt;=0&lt;span&gt;;
Blockly.McKay_ServoDriveBoard_MaxAngle&lt;/span&gt;=0&lt;span&gt;;
Blockly.Arduino.ServoDriveBoard_Init&lt;/span&gt;=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; MinAngle = Blockly.Arduino.valueToCode(&lt;span&gt;this&lt;/span&gt;, 'MinAngle', Blockly.Arduino.ORDER_ATOMIC) || '0'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; MaxAngle = Blockly.Arduino.valueToCode(&lt;span&gt;this&lt;/span&gt;, 'MaxAngle', Blockly.Arduino.ORDER_ATOMIC) || '112'&lt;span&gt;;

    Blockly.McKay_ServoDriveBoard_MinAngle&lt;/span&gt;=&lt;span&gt;parseInt(MinAngle);
    Blockly.McKay_ServoDriveBoard_MaxAngle&lt;/span&gt;=&lt;span&gt;parseInt(MaxAngle);

    Blockly.Arduino.definitions_[&lt;/span&gt;&quot;define_McKay_ServoDriveBoard_Include&quot;] = &quot;#include &amp;lt;Adafruit_PWMServoDriver.h&amp;gt;\n&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; defines=&quot;#define SERVOMIN 200\n&quot;&lt;span&gt;;
    defines&lt;/span&gt;+=&quot;#define SERVOMAX 540\n&quot;&lt;span&gt;;
    defines&lt;/span&gt;+=&quot;#define SERVOMIN_Angle &quot;+Blockly.McKay_ServoDriveBoard_MinAngle+&quot;\n&quot;&lt;span&gt;;
    defines&lt;/span&gt;+=&quot;#define SERVOMAX_Angle &quot;+Blockly.McKay_ServoDriveBoard_MaxAngle+&quot;\n&quot;&lt;span&gt;;

    Blockly.Arduino.definitions_[&lt;/span&gt;&quot;define_McKay_ServoDriveBoard_Defines&quot;] =&lt;span&gt; defines;

    Blockly.Arduino.definitions_[&lt;/span&gt;&quot;define_McKay_ServoDriveBoard_pwmObj&quot;] = &quot;Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();\n&quot;&lt;span&gt;;


    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gotoCode=&quot;void servo_goto_angle(int pinId, int angle)\n&quot;&lt;span&gt;;
    gotoCode&lt;/span&gt;+=&quot;{\n&quot;&lt;span&gt;;
    gotoCode&lt;/span&gt;+=&quot;     int anglePwmValue=map(angle, SERVOMIN_Angle, SERVOMAX_Angle, SERVOMIN, SERVOMAX);\n&quot;&lt;span&gt;;
    gotoCode&lt;/span&gt;+=&quot;     pwm.setPWM(pinId,0, anglePwmValue);\n&quot;&lt;span&gt;;
    gotoCode&lt;/span&gt;+=&quot;}\n&quot;&lt;span&gt;;
    Blockly.Arduino.definitions_[&lt;/span&gt;&quot;define_McKay_ServoDriveBoard_goto_angle&quot;] =&lt;span&gt; gotoCode;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; initCode=&quot;void servo_init()\n&quot;&lt;span&gt;;
    initCode&lt;/span&gt;+=&quot;{\n&quot;&lt;span&gt;;
    initCode&lt;/span&gt;+=&quot;     Serial.begin(9600);\n&quot;&lt;span&gt;;
    initCode&lt;/span&gt;+=&quot;     pwm.begin();\n&quot;&lt;span&gt;;
    initCode&lt;/span&gt;+=&quot;     pwm.setPWMFreq(60);\n&quot;&lt;span&gt;;
    initCode&lt;/span&gt;+=&quot;     delay(200);\n&quot;&lt;span&gt;;
    initCode&lt;/span&gt;+=&quot;}\n&quot;&lt;span&gt;;
    Blockly.Arduino.definitions_[&lt;/span&gt;&quot;define_McKay_ServoDriveBoard_initCode&quot;] =&lt;span&gt; initCode;

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;servo_init();\n&quot;&lt;span&gt;;
};



Blockly.Arduino.ServoDriveBoard_Do&lt;/span&gt;=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ServoNumber = Blockly.Arduino.valueToCode(&lt;span&gt;this&lt;/span&gt;, 'ServoNumber', Blockly.Arduino.ORDER_ATOMIC) || '0'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Angle = Blockly.Arduino.valueToCode(&lt;span&gt;this&lt;/span&gt;, 'Angle', Blockly.Arduino.ORDER_ATOMIC) || '0'&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; code=&quot;servo_goto_angle(&quot;+ServoNumber+&quot;, &quot;+Angle+&quot;);\n&quot;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; code;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;多年编程经验的你肯定得出结论其实就是通过js拼string，string里是c代码。。。&lt;/p&gt;
&lt;p&gt;然后就可以老少皆宜的写代码了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113004936749-770029996.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;有兴趣玩玩这些，挺有意思的&lt;/p&gt;
&lt;p&gt;欢迎加入钉钉创客Maker群：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201901/68230-20190113005131695-890297088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 12 Jan 2019 16:53:00 +0000</pubDate>
<dc:creator>McKay</dc:creator>
<og:description>从vb6到vb.net，一路c#, java, python, nn, c，对技术的切换早已经没有害怕的感觉了，一直有的是技术的热情和我所认为的技术信仰。 扯完，开始正文。 看看效果图： 使用的是Ar</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aarond/p/maker.html</dc:identifier>
</item>
<item>
<title>Python装饰器学习笔记 - 周希</title>
<link>http://www.cnblogs.com/zhouxihi/p/10258243.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhouxihi/p/10258243.html</guid>
<description>&lt;h2&gt;&lt;span&gt;装饰器(Decorators)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;装饰器是 Python 的一个重要部分。它是修改其他函数的功能的函数，有助于让我们的代码更简短&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;概括的讲，装饰器的作用就是&lt;strong&gt;为已经存在的函数或对象添加额外的功能&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;为什么需要装饰器&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们假设你的程序实现了&lt;code&gt;func_enter()&lt;/code&gt;和&lt;code&gt;func_quit()&lt;/code&gt;两个函数。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;7&quot;&gt;
def func_enter():&lt;br/&gt;print &quot;enter!&quot;&lt;p&gt;def func_quit():&lt;br/&gt;print &quot;enter!&quot;  # bug here&lt;/p&gt;&lt;p&gt;if __name__ == '__main__':&lt;br/&gt;func_enter()&lt;br/&gt;func_quit()
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
enter!&lt;span&gt;
enter&lt;/span&gt;!&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在实际调用中， 我们发现程序出错了， 上面打印了2个enter。经过调试我们发现是func_quit()出错了&lt;/p&gt;
&lt;p&gt;现在假如要求调用每个方法前都要记录进入函数的名称， 比如这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[DEBUG]: enter func_enter()
enter&lt;/span&gt;!&lt;span&gt;
[DEBUG]: enter func_quit()
enter&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一种最直白简单的方式是这样写:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def func_enter():
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG]: enter func_enter()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;


def func_quit():
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG]: enter func_quit()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  # bug here


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter()
    func_quit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是很low对吧， 我们可以试着这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def debug():
    import inspect
    caller_name &lt;/span&gt;= inspect.stack()[&lt;span&gt;1&lt;/span&gt;][&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
    print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[BEBUG]: enter {}()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(caller_name)

def func_enter():
    debug()
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;


def func_quit():
    debug()
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  # bug here


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter()
    func_quit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起来会好一点， 但是每个函数都要调用一次debug()函数，还是不太够， 万一如果又改需求进出不打印调用者了， 其他地方或者函数在打印， 又要大改&lt;/p&gt;
&lt;p&gt;怎么办呢? 这个时候装饰器就可以派上用场了&lt;/p&gt;

&lt;h2 id=&quot;怎么写一个装饰器&quot;&gt;怎么写一个装饰器&lt;/h2&gt;
&lt;p&gt;我们来看一个例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def debug(func):
    def wrapper():
        print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[DEBUG]: enter {}()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(func.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@debug
def func_enter():
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

@debug
def func_quit():
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  # bug here


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter()
    func_quit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[DEBUG]: enter func_enter()
enter&lt;/span&gt;!&lt;span&gt;
[DEBUG]: enter func_quit()
enter&lt;/span&gt;!&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个最简单的装饰器， 但是有个问题， 如果被装饰的函数需要传入参数， 那么这个装饰器就坏了，因为返回的函数并不能接受参数&lt;/p&gt;
&lt;p&gt;这里可以指定装饰器函数wrapper接受和原函数一样的参数， 比如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#coding: utf-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;

def debug(func):
    def wrapper(something):     # 这里指定一样的参数
        print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[DEBUG]: enter {}()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(func.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func(something)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper # 返回包装过的函数

@debug
def func_enter(something):
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)

@debug
def func_quit(something):
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)  # bug here


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    func_quit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quit_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[DEBUG]: enter func_enter()
enter enter_func&lt;/span&gt;!&lt;span&gt;
[DEBUG]: enter func_quit()
enter quit_func&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样解决了传参数的问题， 但是这里有个很大的问题是这里只适配了我们的func_enter和func_quit函数的参数， 如果要用来去装饰其他带参数的函数呢？&lt;/p&gt;
&lt;p&gt;还好python提供可变参数*args和关键字参数**kwargs, 有这两个参数装饰器就可以用于任意目标函数了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#coding: utf-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;

def debug(func):
    def wrapper(&lt;/span&gt;*&lt;span&gt;args, **&lt;/span&gt;&lt;span&gt;&lt;span&gt;kwargs&lt;/span&gt;):     # 这里指定一样的参数
        print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[DEBUG]: enter {}()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(func.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(&lt;span&gt;*args, **&lt;/span&gt;&lt;span&gt;&lt;span&gt;kwargs&lt;/span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper # 返回包装过的函数

@debug
def func_enter(something):
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)

@debug
def func_quit(something):
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)  # bug here


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    func_quit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quit_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[DEBUG]: enter func_enter()
enter enter_func&lt;/span&gt;!&lt;span&gt;
[DEBUG]: enter func_quit()
enter quit_func&lt;/span&gt;!&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;带参数的装饰器&quot;&gt;带参数的装饰器&lt;/h3&gt;
&lt;p&gt;如果前面我们的装饰器需要完成的功能不仅仅是能在进入某个函数后打印出调用信息，还要指定log级别， 那么装饰器可以是这样:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
#coding: utf-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;

def debug(level):
    def wrapper(func):
        def inner_wrapper(&lt;/span&gt;*args, **&lt;span&gt;kwargs):
            print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[{level}]: enter {func}()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(level=level,func=&lt;span&gt;func.__name__)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; inner_wrapper
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@debug(level&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
def func_enter(something):
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)

@debug(level&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
def func_quit(something):
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)  # bug here


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    func_quit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quit_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Debug]: enter func_enter()
enter enter_func&lt;/span&gt;!&lt;span&gt;
[Debug]: enter func_quit()
enter quit_func&lt;/span&gt;!&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;基于类实现的装饰器&quot;&gt;基于类实现的装饰器&lt;/h3&gt;
&lt;p&gt;装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重载了&lt;code&gt;__call__()&lt;/code&gt;方法，那么这个对象就是callable的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test():
    def __call__(self, &lt;/span&gt;*args, **&lt;span&gt;kwargs):
        print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;call me!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

t &lt;/span&gt;=&lt;span&gt; Test()
t()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
call me!&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;像&lt;code&gt;__call__&lt;/code&gt;这样前后都带下划线的方法在Python中被称为内置方法，有时候也被称为魔法方法。重载这些魔法方法一般会改变对象的内部行为。上面这个例子就让一个类对象拥有了被调用的行为。&lt;/p&gt;

&lt;p&gt;回到装饰器上的概念上来，装饰器要求接受一个callable对象，并返回一个callable对象（不太严谨，详见后文）。那么用类来实现也是也可以的。我们可以让类的构造函数&lt;code&gt;__init__()&lt;/code&gt;接受一个函数，然后重载&lt;code&gt;__call__()&lt;/code&gt;并返回一个函数，也可以达到装饰器函数的效果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; Debug_info(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;):
    def __init__(self, func):
        self.func &lt;/span&gt;=&lt;span&gt; func

    def __call__(self, &lt;/span&gt;*args, **&lt;span&gt;kwargs):
        print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG]: enter function {func}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(func=&lt;span&gt;self.func.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.func(*args, **&lt;span&gt;kwargs)

@Debug_info
def func_enter(something):
    print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(something)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[DEBUG]: enter function func_enter()
enter enter_func&lt;/span&gt;!&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;带参数的类装饰器&quot;&gt;带参数的类装饰器&lt;/h3&gt;
&lt;p&gt;如果需要通过类形式实现带参数的装饰器，那么会比前面的例子稍微复杂一点。那么在构造函数里接受的就不是一个函数，而是传入的参数。通过类把这些参数保存起来。然后在重载&lt;code&gt;__call__&lt;/code&gt;方法是就需要接受一个函数并返回一个函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
#coding: utf-&lt;span&gt;8&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; Debug_info(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;):
    def __init__(self, level&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        self.level&lt;/span&gt;=&lt;span&gt; level

    def __call__(self, func):  # 接受函数
        def wrapper(&lt;/span&gt;*args, **&lt;span&gt;kwargs):
            print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[{level}]: enter function {func}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(level=self.level,func=&lt;span&gt;func.__name__)
            func(&lt;/span&gt;*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@Debug_info(level&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
def func_enter(something):
    print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;enter {}!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(something)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    func_enter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enter_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[INFO]: enter function func_enter()
enter enter_func&lt;/span&gt;!&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;内置的装饰器&quot;&gt;内置的装饰器&lt;/h3&gt;
&lt;p&gt;在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
s =&lt;span&gt; Student()
s.score &lt;/span&gt;= &lt;span&gt;9999&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这显然不合逻辑。为了限制score的范围，可以通过一个&lt;code&gt;set_score()&lt;/code&gt;方法来设置成绩，再通过一个&lt;code&gt;get_score()&lt;/code&gt;来获取成绩，这样，在&lt;code&gt;set_score()&lt;/code&gt;方法里，就可以检查参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; Student(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;):

    def get_score(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._score

    def set_score(self, value):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; not isinstance(value, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;):
            raise ValueError(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;score must be an integer!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; value &amp;lt; &lt;span&gt;0&lt;/span&gt; or value &amp;gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;:
            raise ValueError(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;score must between 0 ~ 100!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        self._score &lt;/span&gt;= value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，对任意的Student实例进行操作，就不能随心所欲地设置score了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; s =&lt;span&gt; Student()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s.set_score(&lt;span&gt;60&lt;/span&gt;) # ok!
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; s.get_score()
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s.set_score(&lt;span&gt;9999&lt;/span&gt;&lt;span&gt;)
Traceback (most recent call last):
  ...
ValueError: score must between &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; ~ &lt;span&gt;100&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。&lt;/p&gt;
&lt;p&gt;有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！&lt;/p&gt;
&lt;p&gt;还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的&lt;code&gt;@property&lt;/code&gt;装饰器就是负责把一个方法变成属性调用的：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; Student(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;):

    @property
    def score(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._score

    @score.setter
    def score(self, value):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; not isinstance(value, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;):
            raise ValueError(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;score must be an integer!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; value &amp;lt; &lt;span&gt;0&lt;/span&gt; or value &amp;gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;:
            raise ValueError(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;score must between 0 ~ 100!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        self._score &lt;/span&gt;= value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@property&lt;/code&gt;的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上&lt;code&gt;@property&lt;/code&gt;就可以了，此时，&lt;code&gt;@property&lt;/code&gt;本身又创建了另一个装饰器&lt;code&gt;@score.setter&lt;/code&gt;，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; s =&lt;span&gt; Student()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s.score = &lt;span&gt;60&lt;/span&gt; # OK，实际转化为s.set_score(&lt;span&gt;60&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; s.score # OK，实际转化为s.get_score()
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s.score = &lt;span&gt;9999&lt;/span&gt;&lt;span&gt;
Traceback (most recent call last):
  ...
ValueError: score must between &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; ~ &lt;span&gt;100&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到这个神奇的&lt;code&gt;@property&lt;/code&gt;，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。&lt;/p&gt;
&lt;p&gt;还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; Student(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;):

    @property
    def birth(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._birth

    @birth.setter
    def birth(self, value):
        self._birth &lt;/span&gt;=&lt;span&gt; value

    @property
    def age(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;2014&lt;/span&gt; - self._birth
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的&lt;code&gt;birth&lt;/code&gt;是可读写属性，而&lt;code&gt;age&lt;/code&gt;就是一个&lt;strong&gt;只读&lt;/strong&gt;属性，因为&lt;code&gt;age&lt;/code&gt;可以根据&lt;code&gt;birth&lt;/code&gt;和当前时间计算出来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@property&lt;/code&gt;广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。&lt;/p&gt;

&lt;h2 id=&quot;装饰器里的那些坑&quot;&gt;装饰器里的那些坑&lt;/h2&gt;
&lt;p&gt;装饰器可以让你代码更加优雅，减少重复，但也不全是优点，也会带来一些问题。&lt;/p&gt;
&lt;h3 id=&quot;位置错误的代码&quot;&gt;位置错误的代码&lt;/h3&gt;
&lt;p&gt;让我们直接看示例代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def html_tags(tag_name):
    print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;begin outer function.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    def wrapper_(func):
        print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin of inner wrapper function.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        def wrapper(&lt;/span&gt;*args, **&lt;span&gt;kwargs):
            content &lt;/span&gt;= func(*args, **&lt;span&gt;kwargs)
            print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;{tag}&amp;gt;{content}&amp;lt;/{tag}&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(tag=tag_name, content=&lt;span&gt;content)
        print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;end of inner wrapper function.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
    print &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;end of outer function&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper_

@html_tags(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
def hello(name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Toby&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello {}!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(name)

hello()
hello()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在装饰器中我在各个可能的位置都加上了print语句，用于记录被调用的情况。你知道他们最后打印出来的顺序吗？如果你心里没底，那么最好不要在装饰器函数之外添加逻辑功能，否则这个装饰器就不受你控制了。以下是输出结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;begin outer function.
end of outer function
begin of inner wrapper function.
end of inner wrapper function.
&lt;/span&gt;&amp;lt;b&amp;gt;Hello Toby!&amp;lt;/b&amp;gt;
&amp;lt;b&amp;gt;Hello Toby!&amp;lt;/b&amp;gt;&lt;span&gt;
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;错误的函数签名和文档&quot;&gt;错误的函数签名和文档&lt;/h3&gt;
&lt;p&gt;装饰器装饰过的函数看上去名字没变，其实已经变了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre readability=&quot;13&quot;&gt;
import datetime&lt;p&gt;def logging(func):&lt;br/&gt;def wrapper(*args, **kwargs):&lt;br/&gt;&quot;&quot;&quot;print log before a function.&quot;&quot;&quot;&lt;br/&gt;print &quot;[DEBUG] {}: enter {}()&quot;.format(datetime.now(), func.__name__)&lt;br/&gt;return func(*args, **kwargs)&lt;br/&gt;return wrapper&lt;/p&gt;&lt;p&gt;@logging&lt;br/&gt;def say(something):&lt;br/&gt;&quot;&quot;&quot;say something&quot;&quot;&quot;&lt;br/&gt;print &quot;say {}!&quot;.format(something)&lt;/p&gt;&lt;p&gt;print say.__name__&lt;br/&gt;print say.__doc__
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wrapper
print log before a function.
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为什么会这样呢？只要你想想装饰器的语法糖@代替的东西就明白了。@等同于这样的写法。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;say = logging(say)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;logging&lt;/code&gt;其实返回的函数名字刚好是&lt;code&gt;wrapper&lt;/code&gt;，那么上面的这个语句刚好就是把这个结果赋值给&lt;code&gt;say&lt;/code&gt;，&lt;code&gt;say&lt;/code&gt;的&lt;code&gt;__name__&lt;/code&gt;自然也就是&lt;code&gt;wrapper&lt;/code&gt;了，不仅仅是&lt;code&gt;name&lt;/code&gt;，其他属性也都是来自&lt;code&gt;wrapper&lt;/code&gt;，比如&lt;code&gt;doc&lt;/code&gt;，&lt;code&gt;source&lt;/code&gt;等等。&lt;/p&gt;
&lt;p&gt;使用标准库里的&lt;code&gt;functools.wraps&lt;/code&gt;，可以&lt;strong&gt;基本&lt;/strong&gt;解决这个问题。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import datetime
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; functools import wraps

def logging(func):
    @wraps(func)
    def wrapper(&lt;/span&gt;*args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;print log before a function.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG] {}: enter {}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(datetime.now(), func.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@logging
def say(something):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;say something&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;say {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)

print say.__name__
print say.__doc__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;say
say something
(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是其实还不太完美， 因为函数的签名和源码还是拿不到&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import datetime
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; functools import wraps
def logging(func):
    @wraps(func)
    def wrapper(&lt;/span&gt;*args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;print log before a function.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG] {}: enter {}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(datetime.now(), func.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@logging
def say(something):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;say something&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;say {}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(something)

print say.__name__
print say.__doc__

import inspect
print inspect.getargspec(say)
print inspect.getsource(say)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;say
say something
ArgSpec(args&lt;/span&gt;=[], varargs=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;args&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, keywords=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kwargs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, defaults=&lt;span&gt;None)
    @wraps(func)
    def wrapper(&lt;/span&gt;*args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;print log before a function.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG] {}: enter {}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(datetime.now(), func.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)

(wda_python) bash&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要彻底解决这个问题可以借用第三方包，比如&lt;code&gt;wrapt, 后文有介绍&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;不能装饰staticmethod-或者-classmethod&quot;&gt;不能装饰@staticmethod 或者 @classmethod&lt;/h3&gt;
&lt;p&gt;当你想把装饰器用在一个静态方法或者类方法时，不好意思，报错了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; Car(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;):
    def __init__(self, model):
        self.model &lt;/span&gt;=&lt;span&gt; model

    @logging  # 装饰实例方法，OK
    def run(self):
        print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} is running!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(self.model)

    @logging  # 装饰静态方法，Failed
    @staticmethod
    def check_model_for(obj):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(obj, Car):
            print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The model of your car is {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(obj.model)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} is not a car!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(obj)

&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;Traceback (most recent call last):
...
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;example_4.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt;&lt;span&gt; logging
    @wraps(func)
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:\Python27\lib\functools.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line &lt;span&gt;33&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt;&lt;span&gt; update_wrapper
    setattr(wrapper, attr, getattr(wrapped, attr))
AttributeError: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;staticmethod&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; has no attribute &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__module__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前面已经解释了&lt;code&gt;@staticmethod&lt;/code&gt;这个装饰器，其实它返回的并不是一个callable对象，而是一个&lt;code&gt;staticmethod&lt;/code&gt;对象，那么它是不符合装饰器要求的（比如传入一个callable对象），你自然不能在它之上再加别的装饰器。要解决这个问题很简单，只要把你的装饰器放在&lt;code&gt;@staticmethod&lt;/code&gt;之前就好了，因为你的装饰器返回的还是一个正常的函数，然后再加上一个&lt;code&gt;@staticmethod&lt;/code&gt;是不会出问题的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; Car(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;):
    def __init__(self, model):
        self.model &lt;/span&gt;=&lt;span&gt; model

    @staticmethod
    @logging  # 在@staticmethod之前装饰，OK
    def check_model_for(obj):
        pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2 id=&quot;如何优化你的装饰器&quot;&gt;如何优化你的装饰器&lt;/h2&gt;
&lt;p&gt;嵌套的装饰函数不太直观，我们可以使用第三方包类改进这样的情况，让装饰器函数可读性更好。&lt;/p&gt;
&lt;h3 id=&quot;decorator.py&quot;&gt;decorator.py&lt;/h3&gt;
&lt;p&gt;decorator.py是一个非常简单的装饰器加强包。你可以很直观的先定义包装函数&lt;code&gt;wrapper()&lt;/code&gt;，再使用&lt;code&gt;decorate(func, wrapper)&lt;/code&gt;方法就可以完成一个装饰器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt;&lt;span&gt; decorator import decorate

def wrapper(func, &lt;/span&gt;*args, **&lt;span&gt;kwargs):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;print log before a function.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG] {}: enter {}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(datetime.now(), func.__name__)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)

def logging(func):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; decorate(func, wrapper)  # 用wrapper装饰func
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你也可以使用它自带的&lt;code&gt;@decorator&lt;/code&gt;装饰器来完成你的装饰器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt;&lt;span&gt; decorator import decorator

@decorator
def logging(func, &lt;/span&gt;*args, **&lt;span&gt;kwargs):
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG] {}: enter {}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(datetime.now(), func.__name__)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;decorator.py&lt;/code&gt;实现的装饰器能完整保留原函数的&lt;code&gt;name&lt;/code&gt;，&lt;code&gt;doc&lt;/code&gt;和&lt;code&gt;args&lt;/code&gt;，唯一有问题的就是&lt;code&gt;inspect.getsource(func)&lt;/code&gt;返回的还是装饰器的源代码，你需要改成&lt;code&gt;inspect.getsource(func.__wrapped__)&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;wrapt&quot;&gt;wrapt&lt;/h3&gt;
&lt;p&gt;wrapt是一个功能非常完善的包，用于实现各种你想到或者你没想到的装饰器。使用wrapt实现的装饰器你不需要担心之前inspect中遇到的所有问题，因为它都帮你处理了，甚至&lt;code&gt;inspect.getsource(func)&lt;/code&gt;也准确无误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import wrapt

# without argument &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; decorator
@wrapt.decorator
def logging(wrapped, instance, args, kwargs):  # instance &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; must
    print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[DEBUG]: enter {}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(wrapped.__name__)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapped(*args, **&lt;span&gt;kwargs)

@logging
def say(something): pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用wrapt你只需要定义一个装饰器函数，但是函数签名是固定的，必须是&lt;code&gt;(wrapped, instance, args, kwargs)&lt;/code&gt;，注意第二个参数&lt;code&gt;instance&lt;/code&gt;是必须的，就算你不用它。当装饰器装饰在不同位置时它将得到不同的值，比如装饰在类实例方法时你可以拿到这个类实例。根据&lt;code&gt;instance&lt;/code&gt;的值你能够更加灵活的调整你的装饰器。另外，&lt;code&gt;args&lt;/code&gt;和&lt;code&gt;kwargs&lt;/code&gt;也是固定的，注意前面&lt;strong&gt;没有星号&lt;/strong&gt;。在装饰器内部调用原函数时才带星号。&lt;/p&gt;
&lt;p&gt;如果你需要使用wrapt写一个带参数的装饰器，可以这样写:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def logging(level):
    @wrapt.decorator
    def wrapper(wrapped, instance, args, kwargs):
        print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[{}]: enter {}()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(level, wrapped.__name__)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapped(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@logging(level&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
def &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;(work): pass
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于wrapt的使用，建议查阅官方文档，在此不在赘述。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;http://wrapt.readthedocs.io/en/latest/quick-start.html&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Sat, 12 Jan 2019 16:03:00 +0000</pubDate>
<dc:creator>周希</dc:creator>
<og:description>装饰器(Decorators) 装饰器是 Python 的一个重要部分。它是修改其他函数的功能的函数，有助于让我们的代码更简短 装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhouxihi/p/10258243.html</dc:identifier>
</item>
<item>
<title>我与计算机 - 若如初见rrcj</title>
<link>http://www.cnblogs.com/ryrx/p/10261567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ryrx/p/10261567.html</guid>
<description>&lt;p&gt;我与计算机的相识，在小学三年级的时候。不过那个时候的我，只知道游戏。以及后来的聊天，听音乐放松。对于计算机的特殊知识，在大学前的我是一窍不通。我是高职生，拥有较为薄弱的文科知识做基础，在报考时，只想着最想去的城市，最想去的大学以及最想学的专业必定要在三者中选择两个。于是，我来到了想来的城市，选择了自己所喜爱的专业。一开始的我，以为这会是一个较为有乐趣的专业，后来发现并不是自己所想的那种游戏体验。但我已经选择了这片领域，便已经没有了回头的路，在将来的路上，只有乘风破浪，奋勇杀敌。直到赢得属于自己的骄傲。&lt;/p&gt;
</description>
<pubDate>Sat, 12 Jan 2019 15:57:00 +0000</pubDate>
<dc:creator>若如初见rrcj</dc:creator>
<og:description>我与计算机的相识，在小学三年级的时候。不过那个时候的我，只知道游戏。以及后来的聊天，听音乐放松。对于计算机的特殊知识，在大学前的我是一窍不通。我是高职生，拥有较为薄弱的文科知识做基础，在报考时，只想着</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ryrx/p/10261567.html</dc:identifier>
</item>
<item>
<title>Swing——简单的计算器 - SakuraOne</title>
<link>http://www.cnblogs.com/myworld7/p/10261524.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myworld7/p/10261524.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;这是博主学习完Swing后，使用Swing实现的一个简单计算器。做简单的计算器的目的是将最近所学的Swing给应用起来，写博文介绍的目的是记录做这个计算器的思路。下面将分为界面和事件两部分介绍。计算器的详细代码将在文末附上链接。&lt;/p&gt;
&lt;h2 id=&quot;计算器的界面&quot;&gt;计算器的界面&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1099419/201901/1099419-20190112233455315-1035188611.png&quot; width=&quot;400&quot; height=&quot;330&quot; align=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1099419/201901/1099419-20190112233615283-789098344.png&quot; width=&quot;400&quot; height=&quot;330&quot; align=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;菜单&quot;&gt;菜单&lt;/h3&gt;
&lt;p&gt;使用到的控件类主要有&lt;code&gt;JMenuBar&lt;/code&gt; &lt;code&gt;JMenu&lt;/code&gt; &lt;code&gt;JMenuItem&lt;/code&gt; &lt;code&gt;JRadioButtonMenuItem&lt;/code&gt; &lt;code&gt;ButtonGroup&lt;/code&gt;。JMenuBar指的就是一个菜单条里面要装JMenu也就是上图的编辑、查看、帮助菜单。但是我们最终操作的单元还不是菜单，而是&lt;strong&gt;菜单项&lt;/strong&gt;，也就是编辑下面的复制、粘贴等。菜单项有像复制粘贴这样的普通菜单项，也有单选菜单项下拉菜单列表等。使用ButtonGroup的目的是为了使查看下面的单选菜单项每次只能选择一个。下图是计算器中的菜单内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1099419/201901/1099419-20190112233650993-734013013.png&quot; width=&quot;200&quot; height=&quot;150&quot; align=&quot;center&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1099419/201901/1099419-20190112233811933-879298358.png&quot; width=&quot;200&quot; height=&quot;150&quot; align=&quot;center&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1099419/201901/1099419-20190112233921647-593949998.png&quot; width=&quot;200&quot; height=&quot;150&quot; align=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;显示框和输入框&quot;&gt;显示框和输入框&lt;/h3&gt;
&lt;p&gt;界面的整体布局是使用&lt;code&gt;BorderLayout&lt;/code&gt;，显示框和输入框使用的组件是&lt;code&gt;JTextField&lt;/code&gt;，是放置在NORTH方位，前面博文介绍过布局得知BorderLayout布局有东南西北中五个方位但是每个方位只能放置一个组件。所以使用&lt;code&gt;JPanel&lt;/code&gt;容器将两个组件装在一起，然后&lt;strong&gt;将JPanel容器放在界面的北部&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;按钮区&quot;&gt;按钮区&lt;/h3&gt;
&lt;p&gt;按钮区使用的组件是&lt;code&gt;JButton&lt;/code&gt;，使用了&lt;code&gt;GridBagLayout&lt;/code&gt;布局。GridBagLayout是一种灵活的网格布局方式，使用&lt;code&gt;GridBagConstraints&lt;/code&gt;可以指定每个组件的所占网格的大小以及容器扩大时组件变化大小等。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    //设置按钮区的布局
    private void setButtonsLayout() {
        GridBagLayout gbLayout = new GridBagLayout();
        buttons.setLayout(gbLayout);
        
        GridBagConstraints gbCons = new GridBagConstraints();
        gbCons.fill = GridBagConstraints.BOTH;
        gbCons.insets = new Insets(5, 5, 5, 5);
        gbCons.weightx = 4;     //组件纵向比例为3:4
        gbCons.weighty = 3;
        JButton jbt = null;
        
        jbt = new JButton(&quot;Backspace&quot;);
        gbCons.gridx = 1;
        gbCons.gridy = 0;
        gbCons.gridwidth = 2;   //横向占两格
        buttons.add(jbt,gbCons);
        
        jbt = new JButton(&quot;CE&quot;);
        gbCons.gridx = 3;
        gbCons.gridy = 0;
        gbCons.gridwidth = 2;   //横向占两格
        buttons.add(jbt, gbCons);
        
        jbt = new JButton(&quot;C&quot;);
        gbCons.gridx = 5;
        gbCons.gridy = 0;
        gbCons.gridwidth = 1;
        buttons.add(jbt, gbCons);
        
        String[] butsStr = {&quot;MC&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;/&quot;,&quot;MR&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;*&quot;,&quot;MS&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;-&quot;,&quot;M+&quot;,&quot;0&quot;,&quot;+/-&quot;,&quot;.&quot;,&quot;+&quot;};
        int k=0;
        for(int i=1;i&amp;lt;5;i++) {
            for(int j=0;j&amp;lt;5;j++) {
                gbCons.gridx = j;
                gbCons.gridy = i;
                buttons.add(new JButton(butsStr[k]), gbCons);
                k++;
            }
        }
        
        jbt = new JButton(&quot;sqrt&quot;);
        gbCons.gridx = 5;
        gbCons.gridy = 1;
        buttons.add(jbt, gbCons);
        
        jbt = new JButton(&quot;1/x&quot;);
        gbCons.gridx = 5;
        gbCons.gridy = 2;
        buttons.add(jbt, gbCons);
        
        jbt = new JButton(&quot;=&quot;);
        gbCons.gridheight = 2;
        gbCons.gridx = 5;
        gbCons.gridy = 3;
        buttons.add(jbt, gbCons);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;结果显示列表&quot;&gt;结果显示列表&lt;/h3&gt;
&lt;p&gt;结果显示列表使用的组件类为&lt;code&gt;JList&lt;/code&gt;和&lt;code&gt;DefaultListModel&lt;/code&gt;。JList是列表容器，使用DefaultListModel想列表容器中添加列表项。&lt;/p&gt;
&lt;h2 id=&quot;计算器的事件&quot;&gt;计算器的事件&lt;/h2&gt;
&lt;p&gt;计算器的事件主要为按钮区按钮的点击事件（点击数字按钮运算按钮后结果计算）以及结果显示列表的选择事件和一个右击弹出菜单的鼠标右击事件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1099419/201901/1099419-20190112234008478-1747423278.png&quot; width=&quot;400&quot; height=&quot;330&quot; align=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;整个计算器的运算规则是仿造win10系统自带的计算器实现的，其中sqrt运算没有实现，以及+/-符号替换没有实现，有待补充，其余基本的还是已经实现。事件的处理机制，在&lt;a href=&quot;https://www.cnblogs.com/myworld7/p/10220240.html&quot;&gt;AWT/Swing——事件处理&lt;/a&gt;中已经介绍过，这里我就不再重复说啦。关于界面和事件是如何设置的代码没有详细分析，下面会贴上源码网址，详细的解释都在代码注释中。&lt;/p&gt;
&lt;p&gt;简单计算器源码地址：&lt;a href=&quot;https://github.com/Sakuraxx/SimpleCalculator&quot; class=&quot;uri&quot;&gt;https://github.com/Sakuraxx/SimpleCalculator&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 12 Jan 2019 15:44:00 +0000</pubDate>
<dc:creator>SakuraOne</dc:creator>
<og:description>前言 这是博主学习完Swing后，使用Swing实现的一个简单计算器。做简单的计算器的目的是将最近所学的Swing给应用起来，写博文介绍的目的是记录做这个计算器的思路。下面将分为界面和事件两部分介绍。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myworld7/p/10261524.html</dc:identifier>
</item>
<item>
<title>python使用rabbitMQ介绍四（路由模式） - MyStitch</title>
<link>http://www.cnblogs.com/StitchSun/p/10261510.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/StitchSun/p/10261510.html</guid>
<description>&lt;p&gt;路由模式，与发布-订阅模式一样，消息发送到exchange中，消费者把队列绑定到exchange上。&lt;/p&gt;
&lt;p&gt;这种模式在exchange上添加添加了一个路由键（routing-key），生产者发布消息的时候添加路由键（routing-key），消费者绑定队列到交换机时添加键值（routing-key），这样就可以接收到对应的消息。&lt;/p&gt;
&lt;p&gt;路由模式的direct exchange。&lt;/p&gt;
&lt;p&gt;队列模型：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/471676/201901/471676-20190112225508295-856906295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/471676/201901/471676-20190112232849017-895208211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;与发布-订阅模式不同的是，每个消费者队列接收的消息不同，根据消息的routing-key把消息发送到不同的队列中。&lt;/p&gt;
&lt;p&gt;当所有的消费队列绑定的routing-key一样时，路由模式行为与发布-订阅模式一样。&lt;/p&gt;


&lt;p&gt;发布者：不再创建队列，发送消息到exchange（交换机）中。exchange_type为direct。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                          exchange_type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; severity = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(20&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     message = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{} Hello World! {}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(i, severity[i % 3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     channel.basic_publish(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                           routing_key=severity[i % 3&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                           body=&lt;span&gt;message)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; [x] Sent: {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(message))
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; connection.close()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;每个消费者绑定的队列定义不同的routing-key，接收到不同的消息。&lt;/p&gt;
&lt;p&gt;以info为示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                          exchange_type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; result = channel.queue_declare(exclusive=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; queue_name =&lt;span&gt; result.method.queue
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; channel.queue_bind(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                    queue=&lt;span&gt;queue_name,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                    routing_key=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt; [*] Waiting for logs. To exit press CTRL+C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(ch, method, properties, body):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; [x] %r:%r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (method.routing_key, body))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;channel.basic_consume(callback,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                       queue=&lt;span&gt;queue_name,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                       no_ack=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; channel.start_consuming()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行结果输出：&lt;/p&gt;
&lt;p&gt;发布者：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[x] Sent: 0 Hello World! info
 [x] Sent: &lt;/span&gt;1&lt;span&gt; Hello World! warning
 [x] Sent: &lt;/span&gt;2&lt;span&gt; Hello World! error
 [x] Sent: &lt;/span&gt;3&lt;span&gt; Hello World! info
 [x] Sent: &lt;/span&gt;4&lt;span&gt; Hello World! warning
 [x] Sent: &lt;/span&gt;5&lt;span&gt; Hello World! error
 [x] Sent: &lt;/span&gt;6&lt;span&gt; Hello World! info
 [x] Sent: &lt;/span&gt;7&lt;span&gt; Hello World! warning
 [x] Sent: &lt;/span&gt;8&lt;span&gt; Hello World! error
 [x] Sent: &lt;/span&gt;9&lt;span&gt; Hello World! info
 [x] Sent: &lt;/span&gt;10&lt;span&gt; Hello World! warning
 [x] Sent: &lt;/span&gt;11&lt;span&gt; Hello World! error
 [x] Sent: &lt;/span&gt;12&lt;span&gt; Hello World! info
 [x] Sent: &lt;/span&gt;13&lt;span&gt; Hello World! warning
 [x] Sent: &lt;/span&gt;14&lt;span&gt; Hello World! error
 [x] Sent: &lt;/span&gt;15&lt;span&gt; Hello World! info
 [x] Sent: &lt;/span&gt;16&lt;span&gt; Hello World! warning
 [x] Sent: &lt;/span&gt;17&lt;span&gt; Hello World! error
 [x] Sent: &lt;/span&gt;18&lt;span&gt; Hello World! info
 [x] Sent: &lt;/span&gt;19 Hello World! warning
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Info输出：&lt;/p&gt;
&lt;div readability=&quot;18.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[*] Waiting &lt;span&gt;for&lt;/span&gt; logs. To exit press CTRL+&lt;span&gt;C
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0 Hello World! info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3 Hello World! info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6 Hello World! info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9 Hello World! info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;12 Hello World! info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;15 Hello World! info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;18 Hello World! info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Warning输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[*] Waiting &lt;span&gt;for&lt;/span&gt; logs. To exit press CTRL+&lt;span&gt;C
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1 Hello World! warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4 Hello World! warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;7 Hello World! warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10 Hello World! warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;13 Hello World! warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;16 Hello World! warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;19 Hello World! warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Error输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[*] Waiting &lt;span&gt;for&lt;/span&gt; logs. To exit press CTRL+&lt;span&gt;C
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2 Hello World! error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5 Hello World! error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8 Hello World! error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;11 Hello World! error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;14 Hello World! error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
 [x] &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;17 Hello World! error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以看到，不同的消费者收到不同级别的日志信息。&lt;/p&gt;


&lt;p&gt;管理页面，exchange页面，点击“direct_logs”上查看队列情况，可以看到三个不同routing_key的队列&lt;/p&gt;
&lt;p&gt;routing key列展示了对应的key。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/471676/201901/471676-20190112233642991-732105262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Sat, 12 Jan 2019 15:38:00 +0000</pubDate>
<dc:creator>MyStitch</dc:creator>
<og:description>一、模式介绍 路由模式，与发布-订阅模式一样，消息发送到exchange中，消费者把队列绑定到exchange上。 这种模式在exchange上添加添加了一个路由键（routing-key），生产者发</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/StitchSun/p/10261510.html</dc:identifier>
</item>
<item>
<title>密码学加解密实训-隐写术(墨者学院第3题) - Jaxjones</title>
<link>http://www.cnblogs.com/WhiteHatKevil/p/10261390.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WhiteHatKevil/p/10261390.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;其实这原先是实验吧的题，干脆一并写了&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190112223920887-1565538250.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、隐写术常规套路，binwalk，winhex，再加一些steg什么的工具，先用winhex打开图片或者binwalk扫描&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190112224139682-1217202202.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;









&lt;p&gt;发现pk头，MP3格式文件，txt文件。如果用binwalk会扫出这两个文件，导出即可&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、更改图片后缀名为.rar，发现两个文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190112224443767-85842371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一段音频和下图显示的钥匙，钥匙跟音频肯定是有联系的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190112224504017-1753292318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、将音频放入MP3Stego中decode.exe所在的文件夹，文件夹栏输入cmd&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;选项：-X是获取隐藏的东西 -P后面写密码也就是刚才txt里面的密码。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190112225202327-1470423102.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解密后，在Decode文件夹出现3个文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190112225308808-1436023399.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看.txt&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190112225346023-476152770.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;明显的base64编码，解码后为SimCTF{MP3_MP3_sdfdsf}&lt;/p&gt;

</description>
<pubDate>Sat, 12 Jan 2019 14:55:00 +0000</pubDate>
<dc:creator>Jaxjones</dc:creator>
<og:description>其实这原先是实验吧的题，干脆一并写了 一、隐写术常规套路，binwalk，winhex，再加一些steg什么的工具，先用winhex打开图片或者binwalk扫描 发现pk头，MP3格式文件，txt文</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WhiteHatKevil/p/10261390.html</dc:identifier>
</item>
<item>
<title>Entity Framework 查漏补缺 （二） - 【可乐不加冰】</title>
<link>http://www.cnblogs.com/qiuguochao/p/10162291.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuguochao/p/10162291.html</guid>
<description>&lt;h2&gt;数据加载&lt;/h2&gt;
&lt;p&gt; 如下这样的一个lamda查询语句，不会立马去查询数据库，&lt;span&gt;只有当需要用时去调用（如取某行，取某个字段、聚合）&lt;/span&gt;，才会去操作数据库，EF中本身的查询方法返回的都是&lt;span&gt;IQueryable&lt;/span&gt;接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190106220401778-120803214.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/qiuguochao/p/6851432.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;链接：IEnumerable和IQueryable接口说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中聚合函数会影响数据加载，诸如：toList()，sum(),Count(),First()能使数据立即查询加载。&lt;/p&gt;
&lt;h3&gt;IQueryable中的Load方法&lt;/h3&gt;
&lt;p&gt; 一般情况，我们都是使用ToList或First来完成预先加载数据操作。但在EF中还可以使用&lt;span&gt;Load() 方法来显式加载&lt;/span&gt;，将获取的数据放到EF Context中，缓存起来备用。和ToList()很像，只是它不创建列表只是把数据缓存到EF Context中而已，开销较少。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB())
{
    context.Place.Where(t&lt;/span&gt;=&amp;gt;t.PlaceID==&lt;span&gt;9&lt;/span&gt;&lt;span&gt;).Load();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;VS中的方法说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190106223036993-1684571462.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190106223209209-1415364093.png&quot; alt=&quot;&quot; width=&quot;152&quot; height=&quot;42&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;延迟加载&lt;/h3&gt;
&lt;p&gt;用之前的Place类和People为例&lt;/p&gt;
&lt;p&gt;Place对象如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Place
{
    [Key]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PlaceID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;}

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Provice { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; City { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导航属性&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; List&amp;lt;People&amp;gt; Population { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面查询，不会主动去查询出导航属性（Population ）关联的数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB())
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj = context.Place.Where(t =&amp;gt; t.PlaceID == &lt;span&gt;9&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到Population为null&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190106224259350-423344069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只有用到Population对象时，EF才会发起到数据库的查询；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190106225340661-1131739299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然导航数据必须标记&lt;span&gt;virtual，&lt;span&gt;配置延迟加载&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导航属性&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; Place Place { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要注意的事：在延迟加载条件下，经常以为导航数据也加载了，从而在循环中去遍历导航属性，造成多次访问数据库。&lt;/p&gt;
&lt;h3&gt;立即加载&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;除了前面所说的，使用聚合函数（sum等）外来立即预加载数据，还可以使用&lt;span&gt;Include&lt;/span&gt;方法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在上面的查询中，想要查询place以及关联的Population数据如下:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB())
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj = context.Place.Where(t =&amp;gt; t.PlaceID == &lt;span&gt;9&lt;/span&gt;).Include(p=&amp;gt;&lt;span&gt;p.Population).FirstOrDefault();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190106231919707-641481793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;事务&lt;/h2&gt;
&lt;p&gt; 在EF中，saveChanges(&lt;span&gt;)默认是开启了事务&lt;/span&gt;的，在调用saveChanges()之前，所有的操作都在同一个事务中，同一次数据库连接。若使用同一DbContext对象，EF的默认事务处理机制基本满足使用。&lt;/p&gt;
&lt;p&gt;除此之外，以下两种情况怎么使用事务：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;数据分阶段保存，多次调用saveChanges()&lt;/li&gt;
&lt;li&gt;使用多个DbContext对象（尽量避免）&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;第一种情况：显式事务&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB())
{
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; tran=&lt;span&gt;&lt;span&gt;context.Database.BeginTransaction&lt;/span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            context.Place.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Place { City = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PlaceID = &lt;span&gt;11&lt;/span&gt;&lt;span&gt; });
            context.SaveChanges();
            context.People.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; People { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaoli&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            context.SaveChanges();
            tran.Commit();
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
        {
            tran.Rollback();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意的是，不调用commit()提交，没有异常事务也不会默认提交。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第二种情况：TransactionScope分布式事务&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;引入System.Transactions.dll&lt;/li&gt;
&lt;li&gt;Windows需要开启MSDTC&lt;/li&gt;
&lt;li&gt;&lt;span&gt;TransactionScope也于适用于第一种情况。&lt;/span&gt;这里只讨论连接多个DBcontext的事务使用&lt;/li&gt;
&lt;li&gt;需要调用Complete()，否则事务不会提交&lt;/li&gt;
&lt;li&gt;在事务内，报错会自动回滚&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; tran = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TransactionScope())
{
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB())
        {
            context.Place.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Place { City = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5555&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;});
            context.SaveChanges();
        }
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB2())
        {
            context2.Student.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student { Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;});
            context2.SaveChanges();
        }
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Exception();
        tran.Complete();
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
    {
                    
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码在同一个事务内使用了多个DBcontext，会造次多次连接关闭数据库&lt;/p&gt;
&lt;h3&gt;题外话&lt;/h3&gt;
&lt;p&gt;如是多个DBcontext连着是同一个数据库的话，&lt;span&gt;可以将一个己打开的数据库连接对象传给它，并且需要指定EF在DbContext对象销毁时不关闭数据库连接。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DbContext对象改造，增加重载构造函数;；传入两个参数&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据库连接DbConnection&lt;/li&gt;
&lt;li&gt;contextOwnsConnection=false（DbContext对象销毁时不关闭数据库连接）：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestDB2 : DbContext
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TestDB2():&lt;span&gt;base&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name=Test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;br/&gt;{&lt;/span&gt;&lt;span&gt;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;TestDB2(DbConnection conn, bool contextOwnsConnection) : base&lt;/span&gt;&lt;span&gt;&lt;span&gt;(conn, contextOwnsConnection)&lt;/span&gt;
    {&lt;/span&gt;&lt;span&gt;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Student&amp;gt; Student { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;事务代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (TransactionScope scope = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TransactionScope())
{
    String connStr &lt;/span&gt;=&lt;span&gt; ……;
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; conn =&lt;span&gt; SqlConnection(connStr))
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;span&gt;conn.Open();
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context1 = &lt;span&gt;new&lt;/span&gt; MyDbContext(&lt;span&gt;conn, contextOwnsConnection: false&lt;/span&gt;&lt;span&gt;))
            {
                ……
                context1.SaveChanges();
            }
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context2 = &lt;span&gt;new&lt;/span&gt; MyDbContext(&lt;span&gt;conn, contextOwnsConnection: false&lt;/span&gt;&lt;span&gt;))
            {
                ……
                context2.SaveChanges();
            }&lt;br/&gt;　　　　　　　scope.Complete();
         }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e)
        {

        }
        &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
        {
            &lt;span&gt;conn.Close();&lt;/span&gt;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;DBcontent线程内唯一&lt;/h2&gt;

&lt;p&gt;链接：&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/qiuguochao/p/6864537.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;dbcontext实例创建问题&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;并发&lt;/h2&gt;
&lt;p&gt;在实际场景中，并发是很常见的事，同条记录同时被不同的两个用户修改&lt;/p&gt;
&lt;p&gt;在EF中有两种常见的并发冲突检测&lt;/p&gt;
&lt;h3&gt;方法一：ConcurrencyCheck特性&lt;/h3&gt;
&lt;p&gt;可以指定对象的一个或多个属性用于并发检测，在对应属性加上ConcurrencyCheck特性&lt;/p&gt;
&lt;p&gt;这里我们指定Student 对象的属性Name&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student
{
    [Key]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    [&lt;span&gt;ConcurrencyCheck&lt;/span&gt;]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用个两个线程同时去更新Student对象，模拟用户并发操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
{
    Task t1 &lt;/span&gt;= Task.Run(() =&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB2())
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; context.Student.First();
            obj.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LiMing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            context.SaveChanges();
        }
    });
    Task t2 &lt;/span&gt;= Task.Run(() =&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB2())
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; context.Student.First();
            obj.Age &lt;/span&gt;= &lt;span&gt;26&lt;/span&gt;&lt;span&gt;;
            context.SaveChanges();
        }
    });
    Task.WaitAll(t1,t2);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并发冲突报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190112214325471-101399616.png&quot; alt=&quot;&quot; width=&quot;558&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;

&lt;p&gt;查看了sql server profiler，&lt;span&gt;发现加了[ConcurrencyCheck]的属性名和值将出现在Where子句中&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
exec sp_executesql N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UPDATE [dbo].[Students]&lt;/span&gt;
SET [Age] = @&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
WHERE (([ID] &lt;/span&gt;= @&lt;span&gt;1&lt;/span&gt;) AND ([Name] = @&lt;span&gt;2&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;0&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;,@&lt;span&gt;1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;,@&lt;span&gt;2&lt;/span&gt; nvarchar(max) &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,@0=26,@1=1,@2=N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;WANG&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 很显然：&lt;/p&gt;
&lt;p&gt;t2再修改Age，根据并发检测属性Name的值已被改变，有其他用户在修改同一条数据，并发冲突。&lt;/p&gt;
&lt;p&gt;为每个实体类都单独地设定检测属性实在太麻烦，应该由数据库来设定特殊字段值并维护更新会更好，下面就是另一种方法&lt;/p&gt;
&lt;h3&gt; 方法二：timestamp&lt;/h3&gt;
&lt;p&gt;创建一个基类Base，指定一个特殊属性值，SQL Server中相应的字段类型为timestamp，自己项目中的实体类都可以继承它，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Base
{
    [Timestamp]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] RowVersion { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Student先基础base类，每次更新Student数据，RowVersion 字段就会由数据库生成一个新的值，根据这个特殊字段来检测并发冲突；实体类不再去考虑设置那个属性值和更新。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/949091/201901/949091-20190112220204232-1306802406.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;并发处理&lt;/h2&gt;
&lt;p&gt;同时更新并发，EF会抛出：DbUpdateConcurrencyException&lt;/p&gt;
&lt;p&gt;两个更新线程如上：t1和t2&lt;/p&gt;
&lt;p&gt;处理一&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Task t1 = Task.Run(() =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB())
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; context.Student.First();
            obj.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LiMing2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            context.SaveChanges();
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从数据库重新加载数据并覆盖当前保存失败的对象&lt;/span&gt;
&lt;span&gt;&lt;span&gt;            ex.Entries.Single().Reload();&lt;/span&gt;
            context.SaveChanges();
        }
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说，t1并发冲突更新失败，会重新从数据库拉取对象覆盖当前失败的对象，t1原本的更新被作废，于此同时的其他用户并发操作，如t2的更新将会被保存下来&lt;/p&gt;
&lt;p&gt;处理二&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Task t1 = Task.Run(() =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TestDB())
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; context.Student.First();
            obj.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LiMing2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            context.SaveChanges();
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
        {&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; entry =&lt;span&gt; ex.Entries.Single();
            &lt;span&gt;entry.OriginalValues.SetValues(entry.GetDatabaseValues());&lt;/span&gt;
            context.SaveChanges();
        }
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从数据库重新获取值来替换保存失败的对象的属性&lt;span&gt;原始值，&lt;span&gt;再次提交更改，数据库就不会因为当前更新操作获取的原始值与数据库里现有值不同而产生异常&lt;/span&gt;（如检测属性的值已成一样），t1的更新操作就能顺利提交，&lt;span&gt;其他并发操作如t2被覆盖&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 12 Jan 2019 14:05:00 +0000</pubDate>
<dc:creator>【可乐不加冰】</dc:creator>
<og:description>数据加载 如下这样的一个lamda查询语句，不会立马去查询数据库，只有当需要用时去调用（如取某行，取某个字段、聚合），才会去操作数据库，EF中本身的查询方法返回的都是IQueryable接口。 链接：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiuguochao/p/10162291.html</dc:identifier>
</item>
<item>
<title>editormd实现Markdown编辑器写文章功能 - javahih</title>
<link>http://www.cnblogs.com/mzq123/p/10261207.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mzq123/p/10261207.html</guid>
<description>&lt;p&gt;想在项目里引入Markdown编辑器实现写文章功能，网上找到一款开源的插件editormd.js&lt;/p&gt;
&lt;p&gt;介绍网站：https://pandao.github.io/editor.md/examples/index.html&lt;/p&gt;
&lt;p&gt;源码：https://github.com/pandao/editor.md，插件代码已经开源到github上了。&lt;/p&gt;
&lt;p&gt;可以先git clone下载下来&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://github.com/pandao/editor.md.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在介绍一下怎么引入JavaWeb项目里，可以在Webapp(WebContent)文件夹下面，新建一个plugins的文件夹，然后再新建editormd文件夹，文件夹命名的随意。&lt;/p&gt;
&lt;p&gt;在官方网站也给出了比较详细的使用说明，因为我需要的个性化功能不多，所以下载下来的examples文件夹下面找到simple.html文件夹&lt;/p&gt;
&lt;p&gt;加上样式css文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;link href=&quot;&amp;lt;%=basePath %&amp;gt;plugins/editormd/css/editormd.min.css&quot;
    rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关键的JavaScript脚本&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;
    src=&quot;&amp;lt;%=basePath %&amp;gt;static/js/jquery-1.8.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;
    src=&quot;&amp;lt;%=basePath %&amp;gt;plugins/editormd/editormd.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    var testEditor;
    
    $(function() {
        testEditor = editormd(&quot;test-editormd&quot;, {
            width   : &quot;90%&quot;,
            height  : 640,
            syncScrolling : &quot;single&quot;,
            path    : &quot;&amp;lt;%=basePath %&amp;gt;plugins/editormd/lib/&quot;
        });
    });
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;写个jsp页面&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
         pageEncoding=&quot;UTF-8&quot;%&amp;gt;
&amp;lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&amp;gt;
&amp;lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;%&amp;gt;
&amp;lt;%
    String path = request.getContextPath();
    String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;
%&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;base href=&quot;&amp;lt;%=basePath %&amp;gt;&quot;&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;
&amp;lt;title&amp;gt;Nicky's blog 写文章&amp;lt;/title&amp;gt;
&amp;lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;static/images/logo/logo.png&quot;&amp;gt;
&amp;lt;link href=&quot;&amp;lt;%=basePath %&amp;gt;plugins/editormd/css/editormd.min.css&quot;
    rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;
&amp;lt;link href=&quot;&amp;lt;%=basePath %&amp;gt;static/css/bootstrap.min.css&quot; 
    rel=&quot;stylesheet&quot; type=&quot;text/css&quot;  /&amp;gt;
&amp;lt;style type=&quot;text/css&quot;&amp;gt;
    #articleTitle{
        width: 68%;
        margin-top:15px;
    }
    #articleCategory{
        margin-top:15px;
        width:10%;
    }
    #btnList {
        position:relative;
        float:right;
        margin-top:15px;
        padding-right:70px;                 
    }
    
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;layout&quot;&amp;gt;
        &amp;lt;header&amp;gt;
            文章标题：&amp;lt;input type=&quot;text&quot; id=&quot;articleTitle&quot; /&amp;gt;
            类别：
            &amp;lt;select id=&quot;articleCategory&quot;&amp;gt;&amp;lt;/select&amp;gt;
            &amp;lt;span id=&quot;btnList&quot;&amp;gt;
                &amp;lt;button type=&quot;button&quot; id=&quot;publishArticle&quot; onclick=&quot;writeArticle.doSubmit();&quot; class=&quot;btn btn-info&quot;&amp;gt;发布文章&amp;lt;/button&amp;gt;
            &amp;lt;/span&amp;gt;
        &amp;lt;/header&amp;gt;
        &amp;lt;div id=&quot;test-editormd&quot;&amp;gt;
            &amp;lt;textarea id=&quot;articleContent&quot; style=&quot;display: none;&quot;&amp;gt;
&amp;lt;/textarea&amp;gt;
&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;
    src=&quot;&amp;lt;%=basePath %&amp;gt;static/js/jquery-1.8.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;
    src=&quot;&amp;lt;%=basePath %&amp;gt;plugins/editormd/editormd.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    var testEditor;
    
    $(function() {
        testEditor = editormd(&quot;test-editormd&quot;, {
            width   : &quot;90%&quot;,
            height  : 640,
            syncScrolling : &quot;single&quot;,
            path    : &quot;&amp;lt;%=basePath %&amp;gt;plugins/editormd/lib/&quot;
        });
        categorySelect.init();
    });

    /* 文章类别下拉框数据绑定 */
    var categorySelect = {
        init: function () {//初始化数据
            $.ajax({
                type: &quot;GET&quot;,
                url: 'articleSort/listArticleCategory.do',
                dataType:'json',
                contentType:&quot;application/json&quot;,
                cache: false,
                success: function(data){
                    //debugger;
                    data = eval(data) ;
                    categorySelect.buildOption(data);
                }
            });
        },
        buildOption: function (data) {//构建下拉框数据
            //debugger;
            var optionStr =&quot;&quot;;
            for(var i=0 ; i &amp;lt; data.length; i ++) {
                optionStr += &quot;&amp;lt;option value=&quot;+data[i].typeId+&quot;&amp;gt;&quot;;
                optionStr += data[i].name;
                optionStr +=&quot;&amp;lt;/option&amp;gt;&quot;;
            }
            $(&quot;#articleCategory&quot;).append(optionStr);
        }
    }

    /* 发送文章*/
    var writeArticle = {
        doSubmit: function () {//提交
            if (writeArticle.doCheck()) {
                //debugger;
                var title = $(&quot;#articleTitle&quot;).val();
                var content = $(&quot;#articleContent&quot;).val();
                var typeId = $(&quot;#articleCategory&quot;).val();
                $.ajax({
                    type: &quot;POST&quot;,
                    url: '&amp;lt;%=basePath %&amp;gt;article/saveOrUpdateArticle.do',
                    data: {'title':title,'content':content,'typeId':typeId},
                    dataType:'json',
                    //contentType:&quot;application/json&quot;,
                    cache: false,
                    success: function(data){
                        //debugger;
                        if (&quot;success&quot;== data.result) {
                           alert(&quot;保存成功!&quot;);
                            setTimeout(function(){
                                window.close();
                            },3000);
                        }
                    }
                });
            }
        },
        doCheck: function() {//校验
            //debugger;
            var title = $(&quot;#articleTitle&quot;).val();
            var content = $(&quot;#articleContent&quot;).val();
            if (typeof(title) == undefined || title == null || title == &quot;&quot; ) {
                alert(&quot;请填写文章标题!&quot;);
                return false;
            }

            if(typeof (content) == undefined || content == null || content == &quot;&quot;) {
                alert(&quot;请填写文章内容!&quot;);
                return false;
            }

            return true;
        }
    }
    
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后后台只要获取一下参数就可以，注意的是path参数要改一下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;testEditor = editormd(&quot;test-editormd&quot;, {
            width   : &quot;90%&quot;,
            height  : 640,
            syncScrolling : &quot;single&quot;,
            path    : &quot;&amp;lt;%=basePath %&amp;gt;plugins/editormd/lib/&quot;
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;SpringMVC写个接口获取参数进行保存，项目用了Spring data Jpa来实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package net.myblog.entity;

import javax.persistence.*;
import java.util.Date;

/**
 * 博客系统文章信息的实体类
 * @author Nicky
 */
@Entity
public class Article {
    
    /** 文章Id，自增**/
    private int articleId;
    
    /** 文章名称**/
    private String articleName;
    
    /** 文章发布时间**/
    private Date articleTime;
    
    /** 图片路径，测试**/
    private String imgPath;
    
    /** 文章内容**/
    private String articleContent;
    
    /** 查看人数**/
    private int articleClick;
    
    /** 是否博主推荐。0为否；1为是**/
    private int articleSupport;
    
    /** 是否置顶。0为；1为是**/
    private int articleUp;
    
    /** 文章类别。0为私有，1为公开，2为仅好友查看**/
    private int articleType;

    private int typeId;


    private ArticleSort articleSort;
    
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Id
    public int getArticleId() {
        return articleId;
    }

    public void setArticleId(int articleId) {
        this.articleId = articleId;
    }

    @Column(length=100, nullable=false)
    public String getArticleName() {
        return articleName;
    }

    public void setArticleName(String articleName) {
        this.articleName = articleName;
    }

    @Temporal(TemporalType.DATE)
    @Column(nullable=false, updatable=false)
    public Date getArticleTime() {
        return articleTime;
    }

    public void setArticleTime(Date articleTime) {
        this.articleTime = articleTime;
    }

    @Column(length=100)
    public String getImgPath() {
        return imgPath;
    }

    public void setImgPath(String imgPath) {
        this.imgPath = imgPath;
    }

    @Column(nullable=false)
    public String getArticleContent() {
        return articleContent;
    }

    public void setArticleContent(String articleContent) {
        this.articleContent = articleContent;
    }

    public int getArticleClick() {
        return articleClick;
    }

    public void setArticleClick(int articleClick) {
        this.articleClick = articleClick;
    }

    public int getArticleSupport() {
        return articleSupport;
    }

    public void setArticleSupport(int articleSupport) {
        this.articleSupport = articleSupport;
    }

    public int getArticleUp() {
        return articleUp;
    }

    public void setArticleUp(int articleUp) {
        this.articleUp = articleUp;
    }

    @Column(nullable=false)
    public int getArticleType() {
        return articleType;
    }

    public void setArticleType(int articleType) {
        this.articleType = articleType;
    }

    public int getTypeId() {
        return typeId;
    }

    public void setTypeId(int typeId) {
        this.typeId = typeId;
    }

    @JoinColumn(name=&quot;articleId&quot;,insertable = false, updatable = false)
    @ManyToOne(fetch=FetchType.LAZY)
    public ArticleSort getArticleSort() {
        return articleSort;
    }

    public void setArticleSort(ArticleSort articleSort) {
        this.articleSort = articleSort;
    }
    
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Repository接口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package net.myblog.repository;

import java.util.Date;
import java.util.List;

import net.myblog.entity.Article;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;

public interface ArticleRepository extends PagingAndSortingRepository&amp;lt;Article,Integer&amp;gt;{
    ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;业务Service类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package net.myblog.service;

import net.myblog.entity.Article;
import net.myblog.repository.ArticleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

@Service
public class ArticleService {
    
    @Autowired ArticleRepository articleRepository;
    /**
     * 保存文章信息
     * @param article
     * @return
     */
    @Transactional
    public Article saveOrUpdateArticle(Article article) {
        return articleRepository.save(article);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Controller类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package net.myblog.web.controller.admin;

import com.alibaba.fastjson.JSONObject;
import net.myblog.core.Constants;
import net.myblog.entity.Article;
import net.myblog.service.ArticleService;
import net.myblog.service.ArticleSortService;
import net.myblog.web.controller.BaseController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.util.Date;


@Controller
@RequestMapping(&quot;/article&quot;)
public class ArticleAdminController extends BaseController{

    @Autowired
    ArticleService articleService;
    @Autowired
    ArticleSortService articleSortService;
     
    /**
     * 跳转到写文章页面
     * @return
     */
    @RequestMapping(value=&quot;/toWriteArticle&quot;,method=RequestMethod.GET)
    public ModelAndView toWriteArticle() {
        ModelAndView mv = this.getModelAndView();
        mv.setViewName(&quot;admin/article/article_write&quot;);
        return mv;
    }

    /**
     * 修改更新文章
     */
    @RequestMapping(value = &quot;/saveOrUpdateArticle&quot;, method = RequestMethod.POST)
    @ResponseBody
    public String saveOrUpdateArticle (@RequestParam(&quot;title&quot;)String title , @RequestParam(&quot;content&quot;)String content,
        @RequestParam(&quot;typeId&quot;)String typeIdStr) {
        int typeId = Integer.parseInt(typeIdStr);
        Article article = new Article();
        article.setArticleName(title);
        article.setArticleContent(content);
        article.setArticleTime(new Date());
        article.setTypeId(typeId);
        JSONObject result = new JSONObject();
        try {
            this.articleService.saveOrUpdateArticle(article);
            result.put(&quot;result&quot;,&quot;success&quot;);
            return result.toJSONString();
        } catch (Exception e) {
            error(&quot;保存文章报错:{}&quot;+e);
            result.put(&quot;result&quot;,&quot;error&quot;);
            return result.toJSONString();
        }
    }
    
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190112215335166.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ0MjczOTE=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190112215449763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ0MjczOTE=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后就在自己的项目里集成成功了，项目链接：https://github.com/u014427391/myblog，自己做的一款开源博客，前端的感谢一个个人网站分享的模板做的，http://www.yangqq.com/download/div/2013-06-15/272.html，感谢作者&lt;/p&gt;
</description>
<pubDate>Sat, 12 Jan 2019 13:59:00 +0000</pubDate>
<dc:creator>javahih</dc:creator>
<og:description>想在项目里引入Markdown编辑器实现写文章功能，网上找到一款开源的插件editormd.js 介绍网站：https://pandao.github.io/editor.md/examples/in</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mzq123/p/10261207.html</dc:identifier>
</item>
<item>
<title>浏览器保存数据的几种方法 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/10230270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/10230270.html</guid>
<description>&lt;p&gt;Web产品中很多时候需要在客户端，即浏览器中保存一些必要的数据。而面临这类需求时，你应当知悉对应的解决方案不仅仅只有一种。&lt;/p&gt;

&lt;p&gt;这是最早被使用，且至今仍被广泛采用的最简单的浏览器中保存数据方法。&lt;/p&gt;
&lt;p&gt;Cookie使用键/值形式存储数据，且数据类型只能为字符串。&lt;/p&gt;
&lt;p&gt;Cookie相关的CRUD操作：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;document.cookie=&quot;username=Ken&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;document.cookie=&quot;username=Foo&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;和创建Cookie的语法一致，新的值会覆盖原有的值。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var cookies = document.cookie&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上方法可以获取所有的Cookie键值，要想获得特定键值的话可以用以下代码实现，其中的username可以替换成实际的键值：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var cookieValue = document.cookie.replace(/(?:(?:^|.*;\s*)username\s*\=\s*([^;]*).*$)|^.*$/, &quot;$1&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然没有直接的删除方式，但可以通过设置过期时间来解决这个问题。&lt;/p&gt;

&lt;p&gt;HTML 5 Web存储方式的一种，主要优势是突破cookie最大只有4KB容量的限制，能够保存10MB的数据。&lt;/p&gt;
&lt;p&gt;与Cookie同样地使用键/值形式存储数据，且数据类型只能为字符串。&lt;/p&gt;
&lt;p&gt;LocalStorage相关的CRUD操作：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;localStorage.setItem('username', 'Ken');&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;localStorage.setItem('username', 'Foo');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样是覆盖操作。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var username = localStorage.getItem('username');&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;localStorage.removeItem('username');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一次删除所有键值的方法：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;localStorage.clear();&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;另一种HTML 5 Web存储方式，其与LocalStorage的唯一区别在于LocalStorage没有过期时间，要想去除已保存的数据，只能用代码执行删除操作。而用SessionStorage保存的数据在标签页或者浏览器窗口关闭后自动失效。&lt;/p&gt;
&lt;p&gt;SessionStorage相关语法与LocalStorage一致。&lt;/p&gt;

&lt;p&gt;该技术已被W3C废弃，理由是各厂家对其的实现方式都是基于SQLite的，从而被认为缺乏多样性而达不到标准化的要求。&lt;/p&gt;
&lt;p&gt;并且该技术仅被Google Chrome，Opera，Safari和Android Browser使用。另两家主要的浏览器厂家的产品，Microsoft的Internet Explorer以及Mozilla的Firefox对它未提供支持。&lt;/p&gt;
&lt;p&gt;因此结论是使用其它相似的替换品，而不要再使用它。&lt;/p&gt;

&lt;p&gt;主流浏览器产品都支持的一种技术，包括桌面端与移动端。Web SQL Database的替代品。&lt;/p&gt;
&lt;p&gt;IndexedDB同Cookie，Local Storage与Session Storage的差别主要有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;存储容量更大，可达50M或更多&lt;/li&gt;
&lt;li&gt;支持所有的JavaScript数据类型&lt;/li&gt;
&lt;li&gt;读写操作皆包含于事务之内&lt;/li&gt;
&lt;li&gt;支持索引查询&lt;/li&gt;
&lt;li&gt;异步处理方式&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;IndexedDB的使用方法与一般的数据库有些相似，但因为其所有操作都是异步，所以编写代码时的体验还是很不一样的。&lt;/p&gt;
&lt;p&gt;第一步是打开一个数据库，如果该数据库不存在的话，会自动创建一个。&lt;br/&gt;在IndexedDB中，ObjectStore是其它数据库中数据表的概念。&lt;br/&gt;创建ObjectStore时除了可以指定主键之外，还可以对其它字段建立索引。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var db;

var request = window.indexedDB.open('info');
request.onsuccess = function (event) {
  db = request.result;
};

request.onupgradeneeded = function(event) {
  db = event.target.result;

  var objectStore = db.createObjectStore('user', { keyPath: 'id' });

  objectStore.createIndex(&quot;name&quot;, &quot;name&quot;, { unique: false });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;IndexedDB相关的CRUD操作：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function create() {
  var store = db.transaction('user', 'readwrite').objectStore('user')
  var request = store.add({ id: 1, name: 'Ken', email: 'ken@example.com' });
}

create();&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function update() {
  var store= db.transaction('user', 'readwrite').objectStore('user')
  var request = store.put({ id: 1, name: 'Ken', email: 'ken@sample.com' });
}

update()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用主键查询数据的方法：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function query() {
  var store = db.transaction('user', 'readonly').objectStore('user')
  var request = store.get(1)
  request.onsuccess = function(event) {
    console.log(request.result)
  }
}

query()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用其它字段索引查询数据的方法：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function query() {
  var store = db.transaction('user', 'readonly').objectStore('user')
  var request = store.index('name').get('Ken')
  request.onsuccess = function(event) {
    console.log(request.result)
  }
}

query()&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function delete() {
  var store = db.transaction('user', 'readwrite').objectStore('user')
  var request = store.delete(1);
}

delete()&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 12 Jan 2019 13:47:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>Web产品中很多时候需要在客户端，即浏览器中保存一些必要的数据。而面临这类需求时，你应当知悉对应的解决方案不仅仅只有一种。 Cookie 这是最早被使用，且至今仍被广泛采用的最简单的浏览器中保存数据方</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/10230270.html</dc:identifier>
</item>
<item>
<title>爬虫搭建动态代理池 - 一杯闪光喵</title>
<link>http://www.cnblogs.com/lyxdw/p/10261129.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyxdw/p/10261129.html</guid>
<description>&lt;h3&gt;代理是什么?&lt;/h3&gt;
&lt;p&gt;代理实际上就是代理服务器， 代理服务器的工作机制很象我们生活中常常提及的代理商，假设你的机器为A机，你想获得的数据由B机提供，代理服务器为C机，那么具体的连接过程是这样的。 首先，A机需要B机的数据，它与C机建立连接，C机接收到A机的数据请求后，与B机建立连接，下载A机所请求的B机上的数据到本地，再将此数据发送至A机，完成代理任务。如图（图片有点丑）：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190111164307661-599391141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;为什么要使用代理?&lt;/h3&gt;
&lt;p&gt;我们在做爬虫的过程中经常会遇到这样的情况，最初爬虫正常运行，正常抓取数据，一切看起来都是那么美好，然而一杯茶的功夫可能就会出现错误，比如403 Forbidden，这时候打开网页一看，可能会看到“您的IP访问频率太高”这样的提示。出现这种现象的原因是网站采取了一些反爬虫措施。比如，服务器会检测某个IP在单位时间内的请求次数，如果超过了这个阈值，就会直接拒绝服务，返回一些错误信息，这种情况可以称为封IP。&lt;/p&gt;
&lt;p&gt; 这时候代理的作用就来了， 你封我的ip，我用代理以后，使用代理ip来请求数据最后返回给我，你没辙了吧，哈哈！！废话不多说，进入正题！&lt;/p&gt;
&lt;h3&gt;动态代理ip&lt;/h3&gt;
&lt;p&gt;动态代理，顾名思义，会变化的ip。通过拨号vps来实现。&lt;/p&gt;
&lt;p&gt; VPS服务器，即VPS（VirtualPrivateServer虚拟专用服务器）技术，将部服务器分割成多个虚拟专享服务器的优质服务。每个VPS都可分配独立公网IP地址、独立操作系统、独立超大空间、独立内存、独立CPU资源、独立执行程序和独立系统配置等。用户除了可以分配多个虚拟主机及无限企业邮箱外，更具有独立服务器功能，可自行安装程序，单独重启服务器。通俗的来说，VPS服务器也就是虚拟的专用服务器，用户并接触不到物理上的机器，也不需要机器的物理硬件等设施负责维护等。&lt;/p&gt;
&lt;p&gt;拨号vps服务器在vps服务器的基础原理 上添加了一个动态换IP的功能，行驶不定期更换用户的功能，常用与投票，刷单，批量注册微博，批量注册QQ等，所有你能想到使用IP的服务器，有很多人用这种功能抢手机抢票你能想到用IP赚钱的方式应该都是用的上。&lt;/p&gt;
&lt;h3&gt;拨号vps架设动态代理服务器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112171008082-190070644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在购买拨号vps的时候，选择预装centos7系统，这里还附带了拨号软件pppoe。（没有的话联系服务商装好）&lt;/p&gt;
&lt;p&gt;下面来配置pppoe：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
[root@localhost ~]# pppoe-&lt;span&gt;setup 　　　　#进入配置
Welcome to the PPPoE client setup.  First, I will run some checks on
your system to make sure the PPPoE client &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; installed properly...


LOGIN NAME

Enter your Login Name (&lt;/span&gt;&lt;span&gt;default&lt;/span&gt; root): 　　　　#输入宽带账号&lt;span&gt;

INTERFACE

Enter the Ethernet &lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; connected to the PPPoE modem
For Solaris, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; likely to be something like /dev/&lt;span&gt;hme0.
For Linux, it will be ethX, &lt;/span&gt;&lt;span&gt;where&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a number.
(&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; eth0): #回车跳过就可以了，默认使用eth0网卡，ifconfig可以查看网卡信息

Do you want the link to come up on demand, or stay up continuously&lt;/span&gt;?&lt;span&gt;
If you want it to come up on demand, enter the idle time &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; seconds
after which the link should be dropped.  If you want the link to
stay up permanently, enter &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; (two letters, lower-&lt;span&gt;case&lt;/span&gt;&lt;span&gt;.)
NOTE: Demand&lt;/span&gt;-activated links &lt;span&gt;do&lt;/span&gt; not interact well with &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt; IP
addresses.  You may have some problems with demand&lt;/span&gt;-&lt;span&gt;activated links.
Enter the demand value (&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; no): no　　#这里询问的是，adsl连接以后，是否持续保持连接。或者是自动的断开，在指定的时间（以秒数计算）内。多数情况下，我们希望手动的打开关闭连接。所以这里选择默认的no。 

DNS

Please enter the IP address of your ISP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s primary DNS server.&lt;/span&gt;
If your ISP claims that &lt;span&gt;'&lt;/span&gt;&lt;span&gt;the server will provide dynamic DNS addresses&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
enter &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; (all lower-&lt;span&gt;case&lt;/span&gt;&lt;span&gt;) here.
If you just press enter, I will assume you know what you are
doing and not modify your DNS setup.
Enter the DNS information here: #DNS设置,回车跳过

PASSWORD

Please enter your Password: 　　　　#输如宽带密码
Please re&lt;/span&gt;-&lt;span&gt;enter your Password: 　　　　#再次输入

USERCTRL

Please enter &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; (three letters, lower-&lt;span&gt;case&lt;/span&gt;.) &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you want to allow
normal user to start or stop DSL connection (&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; yes): yes　　#是否允许普通用户启用/关闭 ADSL连接。默认是允许。

FIREWALLING

Please choose the firewall rules to use.  Note that these rules are
very basic.  You are strongly encouraged to use a more sophisticated
firewall setup; however, these will provide basic security.  If you
are running any servers on your machine, you must choose &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NONE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; and
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; up firewalling yourself.  Otherwise, the firewall rules will deny
access to all standard servers like Web, e&lt;/span&gt;-&lt;span&gt;mail, ftp, etc.  If you
are &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; SSH, the rules will block outgoing SSH connections which
allocate a privileged source port.

The firewall choices are:
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; - NONE: This script will not &lt;span&gt;set&lt;/span&gt;&lt;span&gt; any firewall rules.  You are responsible
          &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; ensuring the security of your machine.  You are STRONGLY
          recommended to use some kind of firewall rules.
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; - STANDALONE: Appropriate &lt;span&gt;for&lt;/span&gt; a basic stand-alone web-&lt;span&gt;surfing workstation
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; - MASQUERADE: Appropriate &lt;span&gt;for&lt;/span&gt; a machine acting &lt;span&gt;as&lt;/span&gt;&lt;span&gt; an Internet gateway
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; a LAN
Choose a type of firewall (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;): &lt;span&gt;0　　　　#防火墙选项。这里提供的防火墙可以给你提供基本的安全保护。我不推荐你使用----你最好选择“NONE”选项0。无论是什么样的用户使用，我都建议你使用额外的工具来配置防火墙规则（iptables目前看来是一个非常不错的工具）。 &lt;/span&gt;&lt;span&gt;
　　
Start &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; connection at boot time

Do you want to start &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; connection at boot time?&lt;span&gt;
Please enter no or yes (&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; no):yes　　　　#是否在开机时，打开这个连接？ 

&lt;/span&gt;** Summary of what you entered **&lt;span&gt;

Ethernet Interface: eth0
User name:          123456&lt;/span&gt;&lt;span&gt;
Activate&lt;/span&gt;-on-&lt;span&gt;demand: No
DNS:                Do not adjust
Firewalling:        NONE
User Control:       yes
Accept these settings and adjust configuration files (y&lt;/span&gt;/n)?&lt;span&gt; y　　#所有的配置信息填写完成之后，系统将给出一个报告，完整的显示出你输入的配置信息。如果，你确信你输入的配置信息是正确的，输入yes写入配置文件。输入no放弃配置。 
Adjusting &lt;/span&gt;/etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;ppp0
Adjusting &lt;/span&gt;/etc/ppp/chap-secrets and /etc/ppp/pap-&lt;span&gt;secrets
  (But first backing it up to &lt;/span&gt;/etc/ppp/chap-&lt;span&gt;secrets.bak)
  (But first backing it up to &lt;/span&gt;/etc/ppp/pap-&lt;span&gt;secrets.bak)



Congratulations, it should be all &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; up!&lt;span&gt;

Type &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/sbin/ifup ppp0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to bring up your xDSL link and &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/sbin/ifdown ppp0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
to bring it down.
Type &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/sbin/pppoe-status /etc/sysconfig/network-scripts/ifcfg-ppp0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
to see the link status.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置完成，&lt;/p&gt;
&lt;p&gt;介绍三个命令：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;pppoe-start&lt;/span&gt;　　拨号&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;pppoe-stop&lt;/span&gt;　　断开&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;pppoe-status&lt;/span&gt;　　查看拨号状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@localhost ~]# pppoe-&lt;span&gt;start
[root@localhost &lt;/span&gt;~]# pppoe-&lt;span&gt;status
pppoe&lt;/span&gt;-status: Link &lt;span&gt;is&lt;/span&gt; up and running on &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ppp0
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;: ppp0: &amp;lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;1480&lt;/span&gt; qdisc pfifo_fast state UNKNOWN qlen &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    link&lt;/span&gt;/&lt;span&gt;ppp 
    inet xxx。xxx。xxx peer &lt;/span&gt;&lt;span&gt;1.1&lt;/span&gt;.&lt;span&gt;1.1&lt;/span&gt;/&lt;span&gt;32&lt;/span&gt; scope &lt;span&gt;global&lt;/span&gt;&lt;span&gt; ppp0
       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112172954044-1426803641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红箭头所指的位置是ip。&lt;/p&gt;
&lt;p&gt;来测试一下是否可以连通网络。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@localhost ~&lt;span&gt;]# ping www.baidu.com
PING www.a.shifen.com (&lt;/span&gt;&lt;span&gt;115.239&lt;/span&gt;.&lt;span&gt;210.27&lt;/span&gt;) &lt;span&gt;56&lt;/span&gt;(&lt;span&gt;84&lt;/span&gt;&lt;span&gt;) bytes of data.
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; bytes &lt;span&gt;from&lt;/span&gt; &lt;span&gt;115.239&lt;/span&gt;.&lt;span&gt;210.27&lt;/span&gt;: icmp_seq=&lt;span&gt;1&lt;/span&gt; ttl=&lt;span&gt;54&lt;/span&gt; time=&lt;span&gt;72.4&lt;/span&gt;&lt;span&gt; ms
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; bytes &lt;span&gt;from&lt;/span&gt; &lt;span&gt;115.239&lt;/span&gt;.&lt;span&gt;210.27&lt;/span&gt;: icmp_seq=&lt;span&gt;2&lt;/span&gt; ttl=&lt;span&gt;54&lt;/span&gt; time=&lt;span&gt;70.4&lt;/span&gt;&lt;span&gt; ms
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; bytes &lt;span&gt;from&lt;/span&gt; &lt;span&gt;115.239&lt;/span&gt;.&lt;span&gt;210.27&lt;/span&gt;: icmp_seq=&lt;span&gt;3&lt;/span&gt; ttl=&lt;span&gt;54&lt;/span&gt; time=&lt;span&gt;70.7&lt;/span&gt; ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ok，有网了。&lt;/p&gt;
&lt;p&gt;代理选择使用TinyProxy。&lt;/p&gt;
&lt;p&gt;yum安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;p&gt;[root@localhost ~]# yum -y install tinyproxy&lt;br/&gt;Loaded plugins: fastestmirror&lt;br/&gt;Loading mirror speeds from cached hostfile&lt;br/&gt;* base: mirrors.163.com&lt;br/&gt;* extras: mirrors.cn99.com&lt;br/&gt;* updates: mirrors.163.com&lt;br/&gt;No package tinyproxy available.&lt;br/&gt;Error: Nothing to do&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;新系统上yum源需要自己配置，上面报错是因为镜像源没有这个包。&lt;/p&gt;
&lt;p&gt;添加&lt;span id=&quot;.E4.BC.81.E4.B8.9A.E7.89.88_Linux_.E9.99.84.E5.8A.A0.E8.BD.AF.E4.BB.B6.E5.8C.85.EF.BC.88EPEL.EF.BC.89&quot; class=&quot;mw-headline&quot;&gt;企业版 Linux 附加软件包（EPEL）,企业版 Linux 附加软件包（以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 &lt;a title=&quot;Red Hat Enterprise Linux/zh-cn&quot; href=&quot;https://fedoraproject.org/wiki/Red_Hat_Enterprise_Linux/zh-cn&quot;&gt;红帽企业版 Linux (RHEL)&lt;/a&gt;、 CentOS、Scientific Linux (SL)、Oracle Linux (OL) 。(&lt;a href=&quot;https://fedoraproject.org/wiki/EPEL/zh-cn&quot; target=&quot;_blank&quot;&gt;https://fedoraproject.org/wiki/EPEL/zh-cn&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;centos系统安装并启用epel源:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
yum install epel-release
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@localhost ~]# yum install epel-release
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.163.com
 * extras: mirrors.cn99.com
 * updates: mirrors.163.com
Resolving Dependencies
--&amp;gt; Running transaction check
---&amp;gt; Package epel-release.noarch 0:7-11 will be installed
--&amp;gt; Finished Dependency Resolution

Dependencies Resolved

=================================================================================================================================================================================================================
 Package                                                Arch                                             Version                                          Repository                                        Size
=================================================================================================================================================================================================================
Installing:
 epel-release                                           noarch                                           7-11                                             extras                                            15 k

Transaction Summary
=================================================================================================================================================================================================================
Install  1 Package

Total download size: 15 k
Installed size: 24 k
Is this ok [y/d/N]: y　　#开始
Downloading packages:
epel-release-7-11.noarch.rpm                                                                                                                                                              |  15 kB  00:00:00     
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : epel-release-7-11.noarch                                                                                                                                                                      1/1 
  Verifying  : epel-release-7-11.noarch                                                                                                                                                                      1/1 

Installed:
  epel-release.noarch 0:7-11                                                                                                                                                                                     

Complete!　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新执行thinproxy安装命令:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112174815996-929265227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置代理，访问源限制和端口设置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@localhost ~]# vi /etc/tinyproxy/tinyproxy.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改 Port 端口，默认为 8888&lt;/p&gt;
&lt;p&gt;Port 8888&lt;/p&gt;
&lt;p&gt;注释掉 Allow，表示允许所有人访问代理&lt;/p&gt;
&lt;p&gt;#Allow 127.0.0.1&lt;/p&gt;
&lt;p&gt;配置好了，启动tinyproxy。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;tinyproxy　　&lt;span&gt;启动代理&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;killall tinyproxy　　&lt;span&gt;关闭所有端口（没有killall命令，安装yum install psmisc）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@localhost ~]# firewall-cmd --zone=&lt;span&gt;public&lt;/span&gt; --add-port=&lt;span&gt;8888&lt;/span&gt;/tcp --&lt;span&gt;permanent  #设置防火墙允许8888端口通过
success　　
[root@localhost &lt;/span&gt;~]# firewall-cmd --&lt;span&gt;reload　　#重载防火墙配置
success&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;全部配置完毕，测试代理是否可用。pppoe-status查看ip，谷歌插件&lt;a class=&quot;ng-binding&quot; title=&quot;关于&quot; href=&quot;chrome-extension://padekgcemlokbadohgkifijomclgjgif/options.html#!/about&quot;&gt;SwitchyOmega&lt;/a&gt;配置代理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112195836396-1659643107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112195915054-761139305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择配置好的代理，能正常访问表示代理服务器搭建成功。&lt;/p&gt;
&lt;h3&gt;Python操作pppoe更换ip&lt;/h3&gt;
&lt;p&gt;python3环境安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
yum  -&lt;span&gt;y install wget　　#安装wget下载
wget https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz #下载&lt;/span&gt;
&lt;span&gt;
tar &lt;/span&gt;-xvf Python-&lt;span&gt;3.6&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.tgz　　#解压
cd Python&lt;/span&gt;-&lt;span&gt;3.6&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;&lt;span&gt;　　#进入文件夹
.&lt;/span&gt;/configure prefix=/usr/local/&lt;span&gt;python3　　#配置编译地址
make &lt;/span&gt;&amp;amp;&amp;amp; make install　　#开始编译&lt;br/&gt;ln -s /usr/local/python3/bin/python3  /usr/bin/python3　　#配置软连接
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112212757949-834440596.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那顺便把pip3和redis（python操作redis模块）装了，下一步会用到python3操作redis。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
yum install -y python34-&lt;span&gt;setuptools
easy_install&lt;/span&gt;-&lt;span&gt;3.4&lt;/span&gt; pip&lt;br/&gt;pip3 install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112213825601-1105815430.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import os&lt;br/&gt;#切换IP,重启代理服务
def changeIP():
    os.system('pppoe-stop') #断开
    time.sleep(2)
    os.popen('pppoe-start')    #等待2s重拨
    time.sleep(8)
    os.popen('service tinyproxy restart')    #等待重拨完毕，重启代理服务


#取出当前IP
def extractIP():
    infor = os.popen('pppoe-status').read()     #读取代理
    ip = re.search('(\d+\.\d+\.\d+\.\d+)',infor).group(1)    #正则匹配ip
    print(ip)
    return ip　　
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;搭建代理池（redis）&lt;/h3&gt;
&lt;p id=&quot;下载安装包&quot;&gt;&lt;strong&gt;下载安装包&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;hljs groovy&quot;&gt;wget &lt;span class=&quot;hljs-string&quot;&gt;http:&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p id=&quot;解压安装包并安装&quot;&gt;&lt;strong&gt;解压安装包并安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;tar &lt;span class=&quot;hljs-selector-tag&quot;&gt;xzf &lt;span class=&quot;hljs-selector-tag&quot;&gt;redis-4&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;span class=&quot;hljs-selector-class&quot;&gt;.2&lt;span class=&quot;hljs-selector-class&quot;&gt;.tar&lt;span class=&quot;hljs-selector-class&quot;&gt;.gz&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cd &lt;span class=&quot;hljs-selector-tag&quot;&gt;redis-4&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;span class=&quot;hljs-selector-class&quot;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;make&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;make &lt;span class=&quot;hljs-selector-tag&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;启动redis&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;redis-server&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112201720567-1209617412.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python操作redis写入ip&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import re,time,os,datetime,redis

#获取时间
def getTime():
    numtime = datetime.datetime.now().strftime('%Y-%m-%d %H-%M-%S---')
    return numtime


#切换IP,重启代理服务
def changeIP():
    os.system('pppoe-stop')
    time.sleep(2)
    os.popen('pppoe-start')
    time.sleep(8)
    os.popen('service tinyproxy restart')


#取出当前IP
def extractIP():
    infor = os.popen('pppoe-status').read()
    try:
        ip = re.search('(\d+\.\d+\.\d+\.\d+)',infor).group(1)
        print(ip)
        return ip
    except Exception as e:
        log_list.append(getTime()+'提取IP错误:'+str(e))
        return False
#
#删除ip   对应键ip1
def updateDel():
    r = redis.Redis(host='', port=6379, db=0, decode_responses=True, password='')
    r.delete('ip1')
#重新写入ip   对应键ip1
def updatePut(ip):
    print(&quot;更新ip&quot;)
    r = redis.Redis(host='', port=6379, db=0, decode_responses=True, password='')
    r.set('ip1',ip+':8888')
    print(&quot;更新完毕&quot;)

if __name__ == '__main__':
    #删除ip后20s重拨
    state = updateDel()
    time.sleep(20)
    os.popen('killall tinyproxy')
    #重新连接
    changeIP()
    #取出当前IP
    ip = extractIP()
    if ip:
        updatePut(ip)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redis用的键值对，也可以用表写入，提取ip更方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1364902/201901/1364902-20190112202645445-215927713.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里的意思是删除数据库中的ip后20s后重拨，保证已经提取出去的ip有20s的响应时间来跑爬虫。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;crontab设置定时任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;crontab -e&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;0 */1 * * * python3 /root/zhaozhi/IP.py &amp;amp;   &lt;span&gt;1小时执行一次(测试好ip可用时间,自行更改)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;多部署几个代理服务器，保证切换ip的断层会有ip可以提取。&lt;/p&gt;

&lt;h3&gt;温馨提示&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;如果您对本文有疑问，请在评论部分留言，我会在最短时间回复。&lt;/li&gt;
&lt;li&gt;如果本文帮助了您，也请评论关注，作为对我的一份鼓励。&lt;/li&gt;
&lt;li&gt;如果您感觉我写的有问题，也请批评指正，我会尽量修改。&lt;/li&gt;
&lt;li&gt;本文为原创，转载请注明出处。&lt;/li&gt;
&lt;li&gt;本文所有代码仅供学习参考，在爬取的同时考虑对方的服务器承受能力，适可而止。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 12 Jan 2019 13:39:00 +0000</pubDate>
<dc:creator>一杯闪光喵</dc:creator>
<og:description>代理是什么? 代理实际上就是代理服务器， 代理服务器的工作机制很象我们生活中常常提及的代理商，假设你的机器为A机，你想获得的数据由B机提供，代理服务器为C机，那么具体的连接过程是这样的。 首先，A机需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyxdw/p/10261129.html</dc:identifier>
</item>
</channel>
</rss>