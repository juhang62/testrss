<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Webpack安装配置及打包详细过程 - Eden李秉秉秉秉</title>
<link>http://www.cnblogs.com/eden-libinglin/p/13952029.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/eden-libinglin/p/13952029.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;前端经过漫长的发展，涌现出了很多实践方法来处理复杂的工作流程，让开发变得更加简便，其中，模块化可以使复杂的程序细化成为各个小的文件，而webpack并不强制你使用某种模块化方案，而是通过兼容所有模块化方案让你无痛接入项目，本文详细介绍webpack安装配置及打包的详细过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;webpack简单介绍&quot;&gt;Webpack简单介绍&lt;/h2&gt;
&lt;p&gt;本质上，&lt;em&gt;webpack&lt;/em&gt; 是一个现代 JavaScript 应用程序的&lt;em&gt;静态模块打包器(module bundler)&lt;/em&gt;。当 webpack 处理应用程序时，它会递归地构建一个&lt;em&gt;依赖关系图(dependency graph)&lt;/em&gt;，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 &lt;em&gt;bundle&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;其中包含四个核心概念&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;入口(entry)：指示 webpack 应该使用哪个模块，来作为构建其内部&lt;em&gt;依赖图&lt;/em&gt;的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的&lt;/li&gt;
&lt;li&gt;输出(output)：告诉 webpack 在哪里输出它所创建的 &lt;em&gt;bundles&lt;/em&gt;，以及如何命名这些文件，默认值为 &lt;code&gt;./dist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;loader：让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）&lt;/li&gt;
&lt;li&gt;插件(plugins)：插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。&lt;a href=&quot;https://www.webpackjs.com/api/plugins&quot;&gt;插件接口&lt;/a&gt;功能极其强大，可以用来处理各种各样的任务。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过官网的一张图，可以说明webpack的强大，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033899/201909/1033899-20190910163825444-117071023.png&quot; alt=&quot;1&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;打包步骤&quot;&gt;打包步骤&lt;/h2&gt;
&lt;p&gt;接下来详细介绍webpack安装配置及打包的详细过程&lt;/p&gt;
&lt;h3 id=&quot;安装nodejs&quot;&gt;安装node.js&lt;/h3&gt;
&lt;p&gt;可以参考百度，这里不再重复书写。&lt;/p&gt;
&lt;h3 id=&quot;全局安装webpack&quot;&gt;全局安装webpack&lt;/h3&gt;
&lt;p&gt;运行CMD，安装命令如下所示，其中， -g是全局安装，并移除安装了 webpack和webpack-cli&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;npm install webpack webpack-cli –g
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;创建本地项目文件夹&quot;&gt;创建本地项目文件夹&lt;/h3&gt;
&lt;p&gt;创建项目本地文件夹，如“D:\TestWebpack”，在CMD命令窗中分别输入如下命令，切换到该目录&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;D:                 //切换到D盘
cd D:\TestWebpack //切换到项目目录
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;本地安装webpack&quot;&gt;本地安装webpack&lt;/h3&gt;
&lt;p&gt;输入如下命令，在项目目录中安装webpack，其中，--save-dev是本地安装&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;npm install webpack webpack-cli --save-dev
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;查看webpack-版本&quot;&gt;查看webpack 版本&lt;/h3&gt;
&lt;p&gt;输入如下命令，若出现版本号，说明安装成功。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;webpack -v
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;创建packagejson文件&quot;&gt;创建package.json文件&lt;/h3&gt;
&lt;p&gt;输入如下命令，将在项目目录中自动生成package.json文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;npm init -y
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;配置打包目录&quot;&gt;配置打包目录&lt;/h3&gt;
&lt;p&gt;在项目目录下，新建config文件夹，用于存放配置文件；src文件夹，用于存放源码；out文件夹，用于存放打包生成文件，具体如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033899/201909/1033899-20190910145959677-2019225107.png&quot; alt=&quot;1&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加webpackconfigjs文件&quot;&gt;添加webpack.config.js文件&lt;/h3&gt;
&lt;p&gt;在config文件夹中添加webpack.config.js文件，并添加如下代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const path=require('path'); //调用node.js中的路径
module.exports={
    entry:{
        index:'./src/js/index.js' //需要打包的文件
    },
    output:{
        filename:'[name].js',    //输入的文件名是什么，生成的文件名也是什么
        path:path.resolve(__dirname,'../out') //指定生成的文件目录
    },
    mode:&quot;development&quot;    //开发模式，没有对js等文件压缩，默认生成的是压缩文件
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行webpack&quot;&gt;运行webpack&lt;/h3&gt;
&lt;p&gt;在cmd命令窗体中，输入如下命令，运行成功后，在out目录中会生成打包后的index.js&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;webpack --config config/webpack.config.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;配置packagejson&quot;&gt;配置package.json&lt;/h3&gt;
&lt;p&gt;每次输入命令webpack --config config/webpack.config.js，太长，且非常不方便，此时我们可以在package.json文件中配置，如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;{
  &quot;name&quot;: &quot;TestWebpack&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;,
    &quot;start&quot;: &quot;webpack --config config/webpack.config.js&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;devDependencies&quot;: {
    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,
    &quot;webpack&quot;: &quot;^4.39.3&quot;,
    &quot;webpack-cli&quot;: &quot;^3.3.8&quot;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置完成后，我们输入的如下命令，可以直接打包。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;npm run start
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;js缓存问题的处理&quot;&gt;JS缓存问题的处理&lt;/h3&gt;
&lt;p&gt;通过哈希值解决JS缓存问题(在没有修改JS要打包的内容时，不会重新打包一个JS文件)，修改webpack.config.js文件，具体代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const path=require('path');
module.exports={
    entry:{
        index:'./src/js/index.js'
    },
    output:{
        filename:'[name].[chunkhash:8].js',//增加8位的哈希值
        path:path.resolve(__dirname,'../out')
    },
    mode:&quot;development&quot;,
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;安装webpack插件clean-webpack-plugin&quot;&gt;安装webpack插件clean-webpack-plugin&lt;/h3&gt;
&lt;p&gt;通过clean-webpack-plugin插件删除输出目中之前旧的文件。&lt;/p&gt;
&lt;h5 id=&quot;安装命令&quot;&gt;安装命令&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;npm install --save-dev clean-webpack-plugin
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;用法一&quot;&gt;用法一&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const path=require('path');
const {CleanWebpackPlugin} = require('clean-webpack-plugin');
module.exports={
    entry:{
        index:'./src/js/index.js'
    },
    output:{
        filename:'[name].[chunkhash:8].js',
        path:path.resolve(__dirname,'../out')
    },
    mode:&quot;development&quot;,
    plugins:[
        new CleanWebpackPlugin()        
    ]
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;用法二&quot;&gt;用法二&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const path=require('path');
const CleanWebpackPlugin = require('clean-webpack-plugin').CleanWebpackPlugin ;
module.exports={
    entry:{
        index:'./src/js/index.js'
    },
    output:{
        filename:'[name].[chunkhash:8].js',
        path:path.resolve(__dirname,'../out')
    },
    mode:&quot;development&quot;,
    plugins:[
        new CleanWebpackPlugin()        
    ]
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置完后，我们再次运行npm run start，此时out目录中，只有一个新生成的js文件，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033899/201909/1033899-20190910172507889-567661176.png&quot; alt=&quot;1&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;至此，我们完成从webpack安装、配置、打包等一系列步骤。以上详细步骤，全部经过笔者测试通过，如果在安装或使用过程中出现问题，欢迎留言交流，如果本文对你有所帮助，希望关注支持下。&lt;/p&gt;
</description>
<pubDate>Tue, 10 Nov 2020 00:42:00 +0000</pubDate>
<dc:creator>Eden李秉秉秉秉</dc:creator>
<og:description>引言 前端经过漫长的发展，涌现出了很多实践方法来处理复杂的工作流程，让开发变得更加简便，其中，模块化可以使复杂的程序细化成为各个小的文件，而webpack并不强制你使用某种模块化方案，而是通过兼容所有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/eden-libinglin/p/13952029.html</dc:identifier>
</item>
<item>
<title>How to use vscode to build a springboot project  - 我不是铁杆啊</title>
<link>http://www.cnblogs.com/wobushitiegan/p/13951990.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wobushitiegan/p/13951990.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;首先截图一个springboot官网的一个教程说明截图。可以根据这里的指南去创建一个HelloWorld项目。能够正常运行之后Java环境也就配置好了。现在的IDE都可以自动帮助我们下载各种需要的环境和插件，所以来说很方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gki0wtwtuwj31n00s0gqm.jpg&quot; alt=&quot;image-20201108201057867&quot; loading=&quot;lazy&quot;/&gt;&lt;/h2&gt;
&lt;p&gt;创建maven项目或者springboot项目的步骤。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;装两个插件&lt;/li&gt;
&lt;li&gt;配置Java环境&lt;/li&gt;
&lt;li&gt;配置maven环境&lt;/li&gt;
&lt;li&gt;创建maven项目&lt;/li&gt;
&lt;li&gt;springboot项目&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;装两个插件&quot;&gt;装两个插件&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Java Extension pack&lt;/li&gt;
&lt;li&gt;Maven for Java&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gki1kt2l3tj31i90u0kbz.jpg&quot; alt=&quot;image-20201108203402302&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;配置环境&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;配置Java环境&lt;/li&gt;
&lt;li&gt;配置maven环境&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;创建maven项目&quot;&gt;创建maven项目&lt;/h2&gt;
&lt;h2 id=&quot;-2&quot;&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gki1yyhndpj32d90u04qp.jpg&quot; alt=&quot;image-20201108204738122&quot; loading=&quot;lazy&quot;/&gt;&lt;/h2&gt;
&lt;h2 id=&quot;创建springboot项目&quot;&gt;创建springboot项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gki1t6zipnj31eh0u011w.jpg&quot; alt=&quot;image-20201108204206065&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照图中步骤点击后，会出现和springboot官网一样的配置，选择之后回车就会开始下载项目。&lt;/p&gt;
&lt;p&gt;下载完项目后直接启动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gki2b9yg68j31sv0u0woj.jpg&quot; alt=&quot;image-20201108205923368&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gki2sjqammj32b00h4dle.jpg&quot; alt=&quot;image-20201108211604257&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;tops：&quot;&gt;tops：&lt;/h2&gt;
&lt;p&gt;在刷maven的过程中是非常慢的，后来发现配置成阿里云的镜像的话速度就会变的非常快。在maven的config文件中配置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt; &amp;lt;mirrors&amp;gt;
                &amp;lt;mirror&amp;gt;
        &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt;
    　　&amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public/&amp;lt;/url&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;        
    &amp;lt;/mirror&amp;gt;
  &amp;lt;/mirrors&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 10 Nov 2020 00:21:00 +0000</pubDate>
<dc:creator>我不是铁杆啊</dc:creator>
<og:description>How to use vscode to build a springboot project 首先截图一个springboot官网的一个教程说明截图。可以根据这里的指南去创建一个HelloWorld</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wobushitiegan/p/13951990.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core框架揭秘[博文汇总-持续更新] - Artech</title>
<link>http://www.cnblogs.com/artech/p/inside-asp-net-core-3.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/artech/p/inside-asp-net-core-3.html</guid>
<description>&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/artech/158198/o_200308031938inside-asp-net-core.png&quot; class=&quot;desc_img&quot;/&gt;之前写了一系列关于ASP.NET Core的文章，现在将它们进行的分类整理。在博客停更了几个月之后，我决定继续对这个系列进行完善，旨在打造一个全网最系统、深入的ASP.NET Core知识库。本系列的大部分内容来源于《ASP.NET Core 3框架解析》（有修改），也会包含一些新的内容。</description>
<pubDate>Tue, 10 Nov 2020 00:12:00 +0000</pubDate>
<dc:creator>Artech</dc:creator>
<og:description>第1部分 跨平台开发体验1 跨平台开发体验 001 跨平台开发体验: Windows [上篇] 002 跨平台开发体验: Windows [中篇] 003 跨平台开发体验: Windows [下篇]</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/artech/p/inside-asp-net-core-3.html</dc:identifier>
</item>
<item>
<title>图-无向图 - Ruby_Lu</title>
<link>http://www.cnblogs.com/afei-24/p/13876558.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/afei-24/p/13876558.html</guid>
<description>&lt;p&gt;　　图是由一组顶点和一组能够将两个顶点相连的边组成。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201028073930617-294297774.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　顶点叫什么名字并不重要，但我们需要一个方法来指代这些顶点。一般使用 0 至 V-1 来表示一张含有 V 个顶点的图中的各个顶点。这样约定是为了方便使用数组的索引来编写能够高效访问各个顶点信息的代码。用一张符号表来为顶点的名字和 0 到 V-1 的整数值建立一一对应的关系并不困难，因此直接使用数组索引作为结点的名称更方便且不失一般性，也不会损失什么效率。&lt;/p&gt;
&lt;p&gt;　　我们用 v-w 的记法来表示连接 v 和 w 的边， w-v 是这条边的另一种表示方法。&lt;/p&gt;
&lt;p&gt;　　在绘制一幅图时，用圆圈表示顶点，用连接两个顶点的线段表示边，这样就能直观地看出图地结构。但这种直觉有时可能会误导我们，因为图地定义和绘制地图像是无关的，一组数据可以绘制不同形态的图像。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201028074351162-1528005561.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　特殊的图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　自环：即一条连接一个顶点和其自身的边；&lt;/p&gt;
&lt;p&gt;　　多重图：连接同一对顶点的两条边成为平行边，含有平行边的图称为多重图。&lt;/p&gt;
&lt;p&gt;　　没有平行边的图称为简单图。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1.相关术语&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　当两个顶点通过一条边相连时，称这两个顶点是相邻得，并称这条边依附于这两个顶点。某个顶点的度数即为依附于它的边的总数。子图是由一幅图的所有边的一个子集（以及它们所依附的所有顶点）组成的图。许多计算问题都需要识别各种类型的子图，特别是由能够顺序连接一系列顶点的边所组成的子图。&lt;/p&gt;
&lt;p&gt;　　在图中，路径是由边顺序连接的一系列顶点。简单路径是一条没有重复顶点的路径。环是一条至少含有一条边且起点和终点相同的路径。简单环是一条（除了起点和终点必须相同之外）不含有重复顶点和边的环。路径或环的长度为其中所包含的边数。&lt;/p&gt;
&lt;p&gt;　　当两个顶点之间存在一条连接双方的路径时，我们称一个顶点和另一个顶点是连通的。&lt;/p&gt;
&lt;p&gt;　　如果从任意一个顶点都存在一条路径到达另一个任意顶点，我们称这副图是连通图。一幅非连通的图由若干连通的部分组成，它们都是其极大连通子图。&lt;/p&gt;
&lt;p&gt;　　一般来说，要处理一张图需要一个个地处理它的连通分量（子图）。&lt;/p&gt;

&lt;p&gt;　　树是一幅无环连通图。互不相连的树组成的集合称为森林。连通图的生成树是它的一幅子图，它含有图中的所有顶点且是一棵树。图的生成森林是它的所有连通子图的生成树的集合。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201029075005273-1846459200.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201029075010396-998190872.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201029075018069-439698239.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　树的定义非常通用，稍作改动就可以变成用来描述程序行为（函数调用层次）模型和数据结构。当且仅当一幅含有 V 个结点的图 G 满足下列 5 个条件之一时，它就是一棵树：&lt;/p&gt;
&lt;p&gt;　　G 有 V - 1 条边且不含有环；&lt;/p&gt;
&lt;p&gt;　　G 有 V - 1 条边且是连通的；&lt;/p&gt;
&lt;p&gt;　　G 是连通的，但删除任意一条都会使它不再连通；&lt;/p&gt;
&lt;p&gt;　　G 是无环图，但添加任意一条边都会产生一条环；&lt;/p&gt;
&lt;p&gt;　　G 中的任意一对顶点之间仅存在一条简单路径；&lt;/p&gt;

&lt;p&gt;　　图的密度是指已经连接的顶点对占所有可能被连接的顶点对的比例。在稀疏图中，被连接的顶点对很少；而在稠密图中，只有少部分顶点对之间没有边连接。一般来说，如果一幅图中不同的边的数量在顶点总数 v 的一个小的常数倍以内，那么我们认为这幅图是稀疏的，否则就是稠密的。&lt;/p&gt;
&lt;p&gt;　　二分图是一种能够将所有结点分为两部分的图，其中图的每条边所连接的两个顶点都分别属于不同的集合。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2.表示无向图的数据结构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201029205850285-1461784330.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　图的几种表示方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　接下来要面对的图处理问题就是用哪种数据结构来表示图并实现这份API，包含下面两个要求：&lt;/p&gt;
&lt;p&gt;　　1.必须为可能在应用中碰到的各种类型图预留出足够的空间；&lt;/p&gt;
&lt;p&gt;　　2.Graph 的实例方法的实现一定要快。&lt;/p&gt;

&lt;p&gt;　　下面有三种选择：&lt;/p&gt;
&lt;p&gt;　　1.邻接矩阵：我们可以使用一个 V 乘 V 的布尔矩阵。当顶点 v 和 w 之间有连接的边时，定义 v 行 w 列的元素值为 true，否则为 false。这种表示方法不符合第一个条件--含有上百万个顶点的图所需的空间是不能满足的。&lt;/p&gt;
&lt;p&gt;　　2.边的数组：我们可以使用一个 Edge 类，它含有两个 int 实例变量。这种表示方法很简单但不满足第二个条件--要实现 Adj 需要检查图中的所有边。&lt;/p&gt;
&lt;p&gt;　　3.邻接表数组：使用一个以顶点为索引的列表数组，其中每个元素都是和该顶点相连的顶点列表。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201029211644532-561771674.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;

&lt;p&gt;　　非稠密图的标准表示成为邻接表的数据结构，它将每个顶点的所有相邻顶点都保存在该顶点对应的元素所指向的一张链表中。我们使用这个数组就是为了快速访问给定顶点的邻接顶点列表。这里使用 Bag 来实现这个链表，这样我们就可以在常数时间内添加新的边或遍历任意顶点的所有相邻顶点。&lt;/p&gt;
&lt;p&gt;　　要添加一条连接 v 与 w 的边，我们将 w 添加到 v 的邻接表中并把 v 添加到  w 的邻接表中。因此在这个数据结构中每条边都会出现两次。这种 Graph 的实现的性能特点：&lt;/p&gt;
&lt;p&gt;　　1.使用的空间和 V+E 成正比；&lt;/p&gt;
&lt;p&gt;　　2.添加一条边所需的时间为常数；&lt;/p&gt;
&lt;p&gt;　　3.遍历顶点 v 的所有相邻顶点所需的时间和 v 的度数成正比。&lt;/p&gt;
&lt;p&gt;　　对于这些操作，这样的特性已经是最优的了，而且支持平行边和自环。注意，边的插入顺序决定了 Graph 的邻接表中顶点的出现顺序。多个不同的邻接表可能表示着同一幅图。因为算法在使用 Adj() 处理所有相邻的顶点时不会考虑它们在邻接表中的出现顺序，这种差异不会影响算法的正确性，但在调试或是跟踪邻接表的轨迹时需要注意这一点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Graph
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; v;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; e;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;[] adj; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;邻接表(用List 代替  bag)&lt;/span&gt;

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 创建一个含有V个顶点但不含有边的图
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;V&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; Graph(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; V)
        {
            v &lt;/span&gt;=&lt;span&gt; V;
            e &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            adj &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;[V];
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; V; i++&lt;span&gt;)
                adj[i] &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Graph(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] strs)
        {
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; str &lt;span&gt;in&lt;/span&gt;&lt;span&gt; strs)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = str.Split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; v = Convert.ToInt32(data[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; w = Convert.ToInt32(data[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
                AddEdge(v,w);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 顶点数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; V()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; v;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 边数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; E()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 向图中添加一条边 v-w
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;v&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;w&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; AddEdge(&lt;span&gt;int&lt;/span&gt; v, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; w)
        {
            adj[v].Add(w);
            adj[w].Add(v);
            e&lt;/span&gt;++&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 和v相邻的所有顶点
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;v&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; Adj(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;adj[v]&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 计算 V 的度数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;G&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;V&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Degree(Graph G, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; V)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; degree = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; G.Adj(V))
                degree&lt;/span&gt;++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; degree;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 计算所有顶点的最大度数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;G&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; MaxDegree(Graph G)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; max = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; v = &lt;span&gt;0&lt;/span&gt;; v &amp;lt; G.V(); v++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; d =&lt;span&gt; Degree(G, v);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (d &amp;gt;&lt;span&gt; max)
                    max &lt;/span&gt;=&lt;span&gt; d;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; max;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 计算所有顶点的平均度数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;G&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; AvgDegree(Graph G)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt; * G.E() /&lt;span&gt; G.V();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 计算自环的个数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;G&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; NumberOfSelfLoops(Graph G)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; v = &lt;span&gt;0&lt;/span&gt;; v &amp;lt; G.V(); v++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; G.Adj(v))
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (v ==&lt;span&gt; w)
                        count&lt;/span&gt;++&lt;span&gt;;
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; count / &lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每条边都被计算了两次&lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; s = V() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; vertices, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + E() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; edges\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; v = &lt;span&gt;0&lt;/span&gt;; v &amp;lt; V(); v++&lt;span&gt;)
            {
                s &lt;/span&gt;+= v + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Adj(v))
                {
                    s &lt;/span&gt;+= w + &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
                s &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; s;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在实际应用中还有一些操作可能有用，例如：&lt;/p&gt;
&lt;p&gt;　　　　添加一个顶点；&lt;/p&gt;
&lt;p&gt;　　　　删除一个顶点。&lt;/p&gt;
&lt;p&gt;　　实现这些操作的一种方法是，使用符号表 ST 来代替由顶点索引构成的数组，这样修改之后就不需要约定顶点名必须是整数了。可能还需要：&lt;/p&gt;
&lt;p&gt;　　　　删除一条边；&lt;/p&gt;
&lt;p&gt;　　　　检查图是否含有 v-w。&lt;/p&gt;
&lt;p&gt;　　要实现这些方法，可能需要使用 SET 代替 Bag 来实现邻接表。我们称这种方法为邻接集。现在还不需要，因为：&lt;/p&gt;
&lt;p&gt;　　　　不需要添加，删除顶点和边或是检查一条边是否存在；&lt;/p&gt;
&lt;p&gt;　　　　上述操作使用频率很低或者相关链表很短，可以直接使用穷举法遍历；&lt;/p&gt;
&lt;p&gt;　　　　某些情况下会使性能损失 logV。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　3.图的处理算法的设计模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　因为我们会讨论大量关于图处理的算法，所以设计的首要目标是将图的表示和实现分离开来。为此，我们会为每个任务创建一个相应的类，用例可以创建相应的对象来完成任务。类的构造函数一般会在预处理中构造各种数据结构，以有效地响应用例的请求。典型的用例程序会构造一幅图，将图作为参数传递给某个算法类的构造函数，然后调用各种方法来获取图的各种性质。&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202010/984232-20201031092400349-1111588595.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们用起点 s 区分作为参数传递给构造函数的顶点与图中的其他顶点。在这份 API 中，构造函数的任务就是找到图中与起点连通的其他顶点。用例可以调用 marked 方法和 count 方法来了解图的性质。方法名 marked 指的是这种基本方法使用的一种实现方式：在图中从起点开始沿着路径到达其他顶点并标记每个路过的顶点。&lt;/p&gt;
&lt;p&gt;　　在 &lt;a href=&quot;https://www.cnblogs.com/afei-24/p/13150340.html&quot; target=&quot;_blank&quot;&gt;union-find算法&lt;/a&gt; 已经见过 Search API 的实现，它的构造函数会创建一个 UF 对象，对图中的每条边进行一次 union 操作并调用 connected(s,v) 来实现 marked 方法。实现 count 方法需要一个加权的 UF 实现并扩展它的API，以便使用 count 方法返回 sz[find(v)]。&lt;/p&gt;
&lt;p&gt;　　下面的一种搜索算法是基于深度优先搜索（DFS）的，它会沿着图的边寻找喝起点连通的所有顶点。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　4.深度优先搜索&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　要搜索一幅图，只需要一个递归方法来遍历所有顶点。在访问其中一个顶点时：&lt;/p&gt;
&lt;p&gt;　　1.将它标记为已访问；&lt;/p&gt;
&lt;p&gt;　　2.递归地访问它所有没有被标记过地邻居顶点。&lt;/p&gt;
&lt;p&gt;　　这种方法称为深度优先搜索（DFS）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Graphs
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 使用一个 bool 数组来记录和起点连通地所有顶点。递归方法会标记给定地顶点并调用自己来访问该顶点地相邻顶点列表中
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 所有没有被标记过地顶点。 如果图是连通的，每个邻接链表中的元素都会被标记。
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DepthFirstSearch
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[] marked;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DepthFirstSearch(Graph G,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; s)
        {
            marked &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[G.V()];
            Dfs(G,s);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dfs(Graph g, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; V)
        {
            marked[V] &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            count&lt;/span&gt;++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; g.Adj(V))
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[w])
                    Dfs(g,w);
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Marked(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; w)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; marked[w];
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　深度优先搜索标记与起点连通的所有顶点所需的时间和顶点的度数之和成正比。&lt;/p&gt;

&lt;p&gt;　　这种简单的递归模式只是一个开始 -- 深度优先搜索能够有效处理许多和图有关的任务。&lt;/p&gt;
&lt;p&gt;　　1.连通性。给定一幅图，两个给定的顶点是否连通？（两个给定的顶点之间是否存在一条路径?路径检测） 图中有多少个连通子图？&lt;/p&gt;
&lt;p&gt;　　2.单点路径。给定一幅图和一个起点 s ，从 s 到给定目的顶点 v 是否存在一条路径？如果有，找出这条路径。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　5.寻找路径&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　单点路径的API：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201103073341440-1896347636.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　构造函数接受一个起点 s 作为参数，计算 s 到与 s 连通的每个顶点之间的路径。在为起点 s 创建 Paths 对象之后，用例可以调用 PathTo 方法来遍历从 s 到任意和 s 连通的顶点的路径上的所有顶点。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　下面的算法基于深度优先搜索，它添加了一个 edgeTo[ ] 整型数组，这个数组可以找到从每个与 s 连通的顶点回到 s 的路径。它会记住每个顶点到起点的路径，而不是记录当前顶点到起点的路径。为了做到这一点，在由边 v-w 第一次任意访问 w 时，将 edgeTo[w] = v 来记住这条路径。换句话说， v-w 是从s 到 w  的路径上最后一条已知的边。这样，搜索的结果是一棵以起点为根结点的树，edgeTo[ ] 是一棵由父链接表示的树。 PathTo 方法用变量 x 遍历整棵树，将遇到的所有顶点压入栈中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DepthFirstPaths
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[] marked;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] edgeTo; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从起点到一个顶点的已知路径上的最后一个顶点&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; s;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;起点&lt;/span&gt;

        &lt;span&gt;public&lt;/span&gt; DepthFirstPaths(Graph G, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; s)
        {
            marked &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[G.V()];
            edgeTo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[G.V()];
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.s =&lt;span&gt; s;
            Dfs(G,s);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dfs(Graph G, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            marked[v] &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; G.Adj(v))
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[w])
                {
                    edgeTo[w] &lt;/span&gt;=&lt;span&gt; v;
                    Dfs(G,w);
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; HasPathTo(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; marked[v];
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; PathTo(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;HasPathTo(v))
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            Stack&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; path = &lt;span&gt;new&lt;/span&gt; Stack&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; x = v; x != s; x =&lt;span&gt; edgeTo[x])
                path.Push(x);
            path.Push(s);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; path;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201103201612727-1479716928.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;             &lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201103201707317-1966451660.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;

&lt;p&gt;　　使用深度优先搜索得到从给定起点到任意标记顶点的路径所需的时间与路径长度成正比。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　6.广度优先搜索&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　深度优先搜索得到的路径不仅取决于图的结构，还取决于图的表示和递归调用的性质。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;单点最短路径：&lt;/strong&gt;给定一幅图和一个起点 s ，从 s 到给定目的顶点 v 是否存在一条路径？如果有，找出其中最短的那条（所含边最少）。&lt;/p&gt;
&lt;p&gt;　　解决这个问题的经典方法叫做&lt;strong&gt;广度优先搜索（BFS&lt;/strong&gt;）。深度优先搜索在这个问题上没有什么作用，因为它遍历整个图的顺序和找出最短路径的目标没有任何关系。相比之下，广度又出现搜索正式为了这个目标才出现的。&lt;/p&gt;
&lt;p&gt;　　要找到从 s 到 v 的最短路径，从 s 开始，在所有由一条边就可以到达的顶点中寻找 v ，如果找不到就继续在与 s 距离两条边的所有顶点中查找 v ,如此一直进行。&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201103204620508-1779076607.png&quot; alt=&quot;&quot; width=&quot;377&quot; height=&quot;682&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 　　在程序中，在搜索一幅图时遇到有很多边需要遍历的情况时，我们会选择其中一条并将其他边留到以后再继续搜索。在深度优先搜索中，我们用了一个可以下压栈。使用LIFO （后进先出）的规则来描述下压栈和走迷宫时先探索相邻的&lt;/p&gt;
&lt;p&gt; 通道类似。从有待搜索的通道中选择最晚遇到过的那条。在广度优先搜索中，我们希望按照与起点距离的顺序来遍历所有顶点，使用（FIFO，先进先出）队列来代替栈即可。我们将从有待搜索的通道中选择最早遇到的那条。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　下面的算法使用了一个队列来保存所有已经被标记过但其邻接表还未被检查过的顶点。先将顶点加入队列，然后重复下面步骤知道队列为空：&lt;/p&gt;
&lt;p&gt;　　　　1.取队列的下一个顶点 v 并标记它；&lt;/p&gt;
&lt;p&gt;　　　　2.将与 v 相邻的所有未被标记过的顶点加入队列。&lt;/p&gt;
&lt;p&gt;　　下面的 Bfs 方法不是递归。它显示地使用了一个队列。和深度优先搜索一样，它的结果也是一个数组 edgeTo[ ] ，也是一棵用父链接表示的根结点为 s 的树。它表示了 s 到每个与 s 连通的顶点的最短路径。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Graphs
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 广度优先搜索
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BreadthFirstPaths
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;[] marked;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到达该顶点的最短路径已知吗？&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] edgeTo;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到达该顶点的已知路径上的最后一个顶点&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; s;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;起点&lt;/span&gt;

        &lt;span&gt;public&lt;/span&gt; BreadthFirstPaths(Graph G,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; s)
        {
            marked &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[G.V()];
            edgeTo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[G.V()];
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.s =&lt;span&gt; s;
            Bfs(G,s);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Bfs(Graph G, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; s)
        {
            Queue&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; queue = &lt;span&gt;new&lt;/span&gt; Queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();
            marked[s] &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记起点&lt;/span&gt;
            queue.Enqueue(s);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将它加入队列&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; (queue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; v = queue.Dequeue();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从队列中删去下一个顶点&lt;/span&gt;
                &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; G.Adj(v))
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!marked[w])&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于每个未标记的相邻顶点&lt;/span&gt;
&lt;span&gt;                    {
                        edgeTo[w] &lt;/span&gt;= v;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存最短路径的最后一条边&lt;/span&gt;
                        marked[w] = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记它，因为最短路径已知&lt;/span&gt;
                        queue.Enqueue(w);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;并将它添加到队列中&lt;/span&gt;
&lt;span&gt;                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; HasPathTo(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; marked[v];
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　轨迹：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201104075042600-1827739510.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　对于从 s 可达的任意顶点 v ,广度优先搜索都能找到一条从 s 到 v 的最短路径，没有其他从 s 到 v 的路径所含的边比这条路径更少。&lt;/p&gt;
&lt;p&gt;　　广度优先搜索所需的时间在最坏情况下和 V+E 成正比。&lt;/p&gt;

&lt;p&gt;　　我们也可以使用广度优先搜索来实现已经用深度优先搜索实现的 Search API，因为它检查所有与起点连通的顶点和边的方法只取决于查找能力。&lt;/p&gt;
&lt;p&gt;　　广度优先搜索和深度优先搜索在搜索中都会先将起点存入数据结构，然后重复以下步骤直到数据结构清空：&lt;/p&gt;
&lt;p&gt;　　　　1.取其中的下一个顶点并标记它；&lt;/p&gt;
&lt;p&gt;　　　　2.将 v 的所有相邻而又未被标记的顶点加入数据结构。&lt;/p&gt;
&lt;p&gt;　　这两个算法的不同之处在于从数据结构中获取下一个顶点的规则（对于广度优先搜索来说是最早加入的顶点，对于深度优先搜索来说是最晚加入的顶点）。这种差异得到了处理图的两种完全不同的视角，尽管无论使用哪种规则，所有与起点连通的顶点和边都会被检查到。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201105074326189-226183894.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 　　深度优先搜索不断深入图中并在栈中保存了所有分叉的顶点；广度优先搜索则像扇面一般扫描图，用一个队列保存访问过的最前端的顶点。深度优先搜索探索一幅图的方式是寻找离起点更远的顶点，只在碰到死胡同时才访问进出的顶点；广度优先搜索则首先覆盖起点附近的顶点，只在临近的所有顶点都被访问了之后才向前进。根据应用的不同，所需要的性质也不同。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　7.连通分量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　深度优先搜索的下一个直接应用就是找出一幅图的所有连通分量。在 &lt;a href=&quot;https://www.cnblogs.com/afei-24/p/13150340.html&quot; target=&quot;_blank&quot;&gt;union-find&lt;/a&gt; 中 “与......连通” 是一种等价关系，它能够将所有顶点切分成等价类（连通分量）。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201106074054275-266562827.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　&lt;strong&gt;实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　CC 的实现使用了 marked 数组来寻找一个顶点作为每个连通分量中深度优先搜索的起点。递归的深度优先搜索第一次调用的参数是顶点 0  -- 它会标记所有与 0 连通的顶点。然后构造函数中的 for 循环会查找每个没有被标记的顶点并递归调用 Dfs 来标记和它相邻的所有顶点。另外，还使用了一个以顶点作为索引的数组 id[ ] ，值为连通分量的标识符，将同一连通分量中的顶点和连通分量的标识符关联起来。这个数组使得 Connected 方法的实现变得非常简单。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Graphs
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CC
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[] marked;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] id;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CC(Graph G)
        {
            marked &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[G.V()];
            id &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[G.V()];
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;0&lt;/span&gt;; s &amp;lt; G.V(); s++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[s])
                {
                    Dfs(G,s);
                    count&lt;/span&gt;++&lt;span&gt;;
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dfs(Graph G, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            marked[v] &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            id[v] &lt;/span&gt;=&lt;span&gt; count;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; G.Adj(v))
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[w])
                    Dfs(G,w);
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Connected(&lt;span&gt;int&lt;/span&gt; v, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; w)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; id[v] ==&lt;span&gt; id[w];
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id[v];
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Count()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; count;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　深度优先搜索的预处理使用的时间和空间与 V + E 成正比且可以在常数时间内处理关于图的连通性查询。由代码可知每个邻接表的元素都只会被检查一次，共有 2E 个元素（每条边两个）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　union-find 算法 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　CC 中基于深度优先搜索来解决图连通性问题的方法与 &lt;a href=&quot;https://www.cnblogs.com/afei-24/p/13150340.html&quot; target=&quot;_blank&quot;&gt;union-find算法&lt;/a&gt;  中的算法相比，理论上，深度优先搜索更快，因为它能保证所需的时间是常数而 union-find算法不行；但在实际应用中，这点差异微不足道。union-find算法其实更快，因为它不需要完整地构造表示一幅图。更重要的是，union-find算法是一种动态算法（我们在任何时候都能用接近常数的时间检查两个顶点是否连通，甚至是添加一条边的时候），但深度优先搜索则必须对图进行预处理。&lt;/p&gt;
&lt;p&gt;　　因此，我们在只需要判断连通性或是需要完成大量连通性查询和插入操作混合等类似的任务时，更倾向使用union-find算法，而深度优先搜索则适合实现图的抽象数据类型，因为它能更有效地利用已有的数据结构。&lt;/p&gt;

&lt;p&gt;　　使用深度优先搜索还可以解决 &lt;strong&gt;检测环&lt;/strong&gt; 和&lt;strong&gt;双色问题&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;　　检测环，给定的图是无环图吗？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Graphs
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cycle
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[] marked;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; hasCycle;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Cycle(Graph G)
        {
            marked &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[G.V()];
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;0&lt;/span&gt;; s &amp;lt; G.V(); s++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[s])
                    Dfs(G,s,s);
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dfs(Graph g, &lt;span&gt;int&lt;/span&gt; v, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; u)
        {
            marked[v] &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; g.Adj(v))
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[w])
                    Dfs(g, w, v);
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (w !=&lt;span&gt; u)
                    hasCycle &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; HasCycle()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; hasCycle;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　是二分图吗？（双色问题）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Graphs
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TwoColor
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[] marked;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[] color;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; isTwoColorable = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TwoColor(Graph G)
        {
            marked &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[G.V()];
            color &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;[G.V()];
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;0&lt;/span&gt;;s&amp;lt;G.V();s++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[s])
                    Dfs(G,s);
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dfs(Graph g, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            marked[v] &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; g.Adj(v))
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;marked[w])
                {
                    color[w] &lt;/span&gt;= !&lt;span&gt;color[v];
                    Dfs(g, w);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (color[w] ==&lt;span&gt; color[v])
                    isTwoColorable &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsBipartite()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; isTwoColorable;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 　　8.符号图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　在典型应用中，图都是通过文件或者网页定义的，使用的是字符串而非整数来表示和指代顶点。为了适应这样的应用，我们使用符号图。符号图的API：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201109073359858-1219021337.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　这份API 定义一个构造函数来读取并构造图，用 name() 和 index() 方法将输入流中的顶点名和图算法使用的顶点索引对应起来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　需要用到3种数据结构：&lt;/p&gt;
&lt;p&gt;　　1.一个符号表 st ，键的类型为 string（顶点名），值的类型 int （索引）；&lt;/p&gt;
&lt;p&gt;　　2.一个数组 keys[ ]，用作反向索引，保存每个顶点索引对应的顶点名；&lt;/p&gt;
&lt;p&gt;　　3.一个 Graph 对象 G，它使用索引来引用图中顶点。&lt;/p&gt;
&lt;p&gt;　　SymbolGraph 会遍历两遍数据来构造以上数据结构，这主要是因为构造 Graph 对象需要顶点总数 V。在典型的实际应用中，在定义图的文件中指明 V 和 E 可能会有些不便，而有了 SymbolGraph，就不需要担心维护边或顶点的总数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Graphs
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SymbolGraph
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt; st;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;符号名 -&amp;gt; 索引&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] keys;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;索引 -&amp;gt; 符号名&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Graph G;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SymbolGraph(&lt;span&gt;string&lt;/span&gt; fileName, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; sp)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; strs =&lt;span&gt; File.ReadAllLines(fileName);
            st &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一遍&lt;/span&gt;
            &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; str &lt;span&gt;in&lt;/span&gt;&lt;span&gt; strs)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _strs =&lt;span&gt; str.Split(sp);
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; _str &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _strs)
                {
                    st.Add(_str,st.Count);
                }
            }

            keys &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[st.Count];
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; st.Keys)
            {
                keys[st[name]] &lt;/span&gt;=&lt;span&gt; name;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二遍 将每一行的第一个顶点和该行的其他顶点相连&lt;/span&gt;
            &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; str &lt;span&gt;in&lt;/span&gt;&lt;span&gt; strs)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _strs =&lt;span&gt; str.Split(sp);
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; v = st[_strs[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]];
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; _strs.Length; i++&lt;span&gt;)
                {
                    G.AddEdge(v,st[_strs[i]]);
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Contains(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; s)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; st.ContainsKey(s);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Index(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; s)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; st[s];
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; keys[v];
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Graph Gra()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; G;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　 &lt;strong&gt;间隔的度数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　可以使用 SymbolGraph 和 BreadthFirstPaths 来查找图中的最短路径：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201110073000294-927624802.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/984232/202011/984232-20201110073051284-2092516329.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;







</description>
<pubDate>Mon, 09 Nov 2020 23:31:00 +0000</pubDate>
<dc:creator>Ruby_Lu</dc:creator>
<og:description>图是由一组顶点和一组能够将两个顶点相连的边组成。 顶点叫什么名字并不重要，但我们需要一个方法来指代这些顶点。一般使用 0 至 V-1 来表示一张含有 V 个顶点的图中的各个顶点。这样约定是为了方便使用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/afei-24/p/13876558.html</dc:identifier>
</item>
<item>
<title>安卓快速关机APP - janbar</title>
<link>http://www.cnblogs.com/janbar/p/13951935.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/janbar/p/13951935.html</guid>
<description>&lt;h2 id=&quot;自说自话&quot;&gt;自说自话&lt;/h2&gt;
&lt;blockquote readability=&quot;7.4540059347181&quot;&gt;
&lt;p&gt;像我这样每天晚上睡觉关机的人不知道有多少，反正我每天都有关机的需求。因此我特别讨厌长按关机键进行关机，感觉浪费我好几秒的生命。&lt;br/&gt;因此我开发了这款APP，主要是自用，有需求的人可以下载玩玩。&lt;br/&gt;查看源码：【&lt;a href=&quot;https://github.com/jan-bar/AndroidShutdown&quot;&gt;Github&lt;/a&gt;】，【&lt;a href=&quot;https://gitee.com/janbar/AndroidShutdown&quot;&gt;Gitee&lt;/a&gt;】。【&lt;a href=&quot;https://545c.com/file/28844697-470468721&quot;&gt;下载地址&lt;/a&gt;】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;安装后点开会跳转到无障碍那里，需要开启服务功能，因为本APP是调用系统那个关机界面，因此和长按电源键效果完全一样。&lt;br/&gt;需要将该APP加入自启动，并且在那些电源优化那里设置不被干掉。其实干掉也没啥，每次点击都会跳转到无障碍那里选择开启而已，不嫌麻烦可以不让后台运行。&lt;br/&gt;华为手机可以参考下图设置，将该APP设置手动管理，并允许自启动，这样清理后台也不会失效了。其他手机自己百度一下吧，因为我这个是没有界面的，所以不会出现在最近运行任务里面的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;https://img2020.cnblogs.com/blog/2135498/202011/2135498-20201110070435610-1550493292.jpg&quot; width=&quot;500&quot; height=&quot;1083&quot; alt=&quot;华为自启动设置&quot;/&gt;</description>
<pubDate>Mon, 09 Nov 2020 23:13:00 +0000</pubDate>
<dc:creator>janbar</dc:creator>
<og:description>自说自话 像我这样每天晚上睡觉关机的人不知道有多少，反正我每天都有关机的需求。因此我特别讨厌长按关机键进行关机，感觉浪费我好几秒的生命。 因此我开发了这款APP，主要是自用，有需求的人可以下载玩玩。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/janbar/p/13951935.html</dc:identifier>
</item>
<item>
<title>走进C# abstract，了解抽象类与接口的异同 - 追逐时光者</title>
<link>http://www.cnblogs.com/Can-daydayup/p/13676586.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Can-daydayup/p/13676586.html</guid>
<description>&lt;h2&gt;前言：&lt;/h2&gt;
&lt;p&gt;　　最近在研究.NET Core的一些类库源码的时候发现在底层类库中使用了大量的抽象类，然而发现自己搬砖这么多年好像从来没有在项目中使用抽象类或者抽象方法去实现某个功能模块，并且对修饰符Abstract概念也只懂得一些皮毛（也就是面试的时候会问下其基本作用）。当然，咱们不懂就要去慢慢的学习了解，不能让这些不懂的技术和知识点一直困扰着我们。接下来就让我们一起去探索C# Abstract修饰符的作用，并且了解在什么场景下我们会使用到抽象类，从而提升我们项目的健壮性。&lt;/p&gt;
&lt;h2 id=&quot;abstract-c-reference&quot;&gt;&lt;span data-ttu-id=&quot;ce88f-103&quot;&gt;abstract修饰符：&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;7.7171717171717&quot;&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;ce88f-103&quot;&gt;基本概念：abstract修饰符指示要修改的东西有缺失或不完整的实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;修饰范围：abstract修饰符可以用于修饰类、方法、属性、索引器（&lt;a href=&quot;https://www.runoob.com/csharp/csharp-indexer.html&quot; target=&quot;_blank&quot;&gt;indexer&lt;/a&gt;）和事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;抽象类：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HttpRequest{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;抽象方法：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;todo：抽象方法不能提供实际的实现，因此没有方法主体（并且抽象方法只能够在抽象类中声明）&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ActionMethod();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;抽象属性：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ContentType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;抽象索引器：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt; index] =&amp;gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取_{index}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;抽象事件：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先声明该事件的委托类型&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;delegate&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BoilerLogHandler(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; status);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 基于上面的委托定义事件&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;event&lt;/span&gt; BoilerLogHandler BoilerEventLog;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;抽象类与接口的异同：&lt;/h2&gt;
&lt;h3&gt;抽象类的用途：&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;是一个能够提供给多个派生类共享的通用基类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;接口的用途：&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;接口提供了派生类应遵循的标准结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;抽象类的基本特征：&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;1、抽象类是特殊的类，除了不能实例化（只能通过实例化继承抽象方法的派生类来获取抽象类中的成员）外，具有类的其他特性（可以单继承）。&lt;br/&gt;2、抽象类可以定义抽象方法，抽象方法没有现实。&lt;br/&gt;3、继承抽象类的类必须把里面的抽象成员（成员包括：方法，属性，索引器，事件）全部重写（orveride），抽象类除外。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;接口的基本特征：&lt;/h3&gt;
&lt;blockquote readability=&quot;15.653012048193&quot;&gt;
&lt;p&gt;1、接口无法直接进行实例化。&lt;/p&gt;
&lt;p&gt;2、一个类或结构可以实现多个接口。&lt;/p&gt;
&lt;p&gt;3、实现接口的任何类或结构都必须实现其所有成员。&lt;/p&gt;
&lt;p&gt;4、接口包含的成员只有方法，属性，&lt;a href=&quot;https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95%E5%99%A8&quot; target=&quot;_blank&quot;&gt;索引器&lt;/a&gt;（有参属性），事件四种成员。&lt;/p&gt;
&lt;p&gt;5、&lt;span data-ttu-id=&quot;09230-122&quot;&gt;接口不能包含实例字段、实例构造函数或终结器。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;09230-122&quot;&gt;&lt;span data-ttu-id=&quot;09230-123&quot;&gt;6、默认情况下，接口成员是公共的，不能有其他的修饰符。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;抽象类和接口的区别：&lt;/h3&gt;
&lt;h4&gt;相同：&lt;/h4&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;1、都可以被继承&lt;/p&gt;
&lt;p&gt;2、都不能直接被实例化&lt;/p&gt;
&lt;p&gt;3、都可以包含方法声明且都没有实现&lt;/p&gt;
&lt;p&gt;4、派生类必须实现未实现的成员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;不同点：&lt;/h4&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;1、接口可以被多重实现，抽象类只能被单一继承。&lt;/p&gt;
&lt;p&gt;2、接口可以用于支持回调，继承并不具备这个特点。&lt;/p&gt;
&lt;p&gt;3、抽象类可以定义字段、方法、属性、事件、索引器的实现。接口只能定义属性、索引器、事件、和方法声明，不能包含字段。&lt;/p&gt;
&lt;p&gt;4、接口中的成员访问类型默认为公共的，不能有其他的访问修饰符修饰。&lt;/p&gt;
&lt;p&gt;5、定义的关键字不一样，抽象类需要使用abstract，而接口则使用interface。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;抽象类和接口的使用：&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;1、抽象类表共性(常应用在具有相同的行为和特征中)，而接口则表规范（用于定义一种行为）。&lt;br/&gt;2、抽象类主要用于关系密切的对象，而接口最适合为不相关的类提供通用功能。&lt;br/&gt;3、如果要设计大的功能单元，则使用抽象类；如果要设计小而简练的功能块，则使用接口。&lt;br/&gt;4、如果预计要创建组件的多个版本，则创建抽象类。接口一旦创建就不能更改。如果需要接口的新版本，必须创建一个全新的接口。&lt;br/&gt;5、如果创建的功能将在大范围的全异对象间使用，则使用接口；如果要在组件的所有实现间提供通用的已实现功能，则使用抽象类。&lt;br/&gt;6、分析对象，提炼内部共性形成抽象类，用以表示对象本质，即“是什么”。为外部提供调用或功能需要扩充时优先使用接口。&lt;br/&gt;7、好的接口定义应该是具有专一功能性的，而不是多功能的，否则造成接口污染。如果一个类只是实现了这个接口的中一个功能，而不得不去实现接口中的其他方法，就叫接口污染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;具体实例如下：&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;实例一：就像铁门木门都是门（抽象类），你想要个门我给不了（不能实例化），但我可以给你个具体的铁门或木门（多态）；而且只能是门，你不能说它是窗（单继承）；一个门可以有锁（接口）也可以有门铃（多实现）。 门（抽象类）定义了你是什么，接口（锁）规定了你能做什么（一个接口最好只能做一件事，你不能要求锁也能发出声音吧（接口污染））。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;实例二：比如说我们一个班级有很多为同学，这些同学都有着各自的特长，爱好，穿衣打扮的风格，因此我们减少代码冗余可以定义一个通用的学生抽象类用来描述学生的身高，体重，姓名，爱好，特征等相关特征和行为的公共抽象类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;实例三：我们需要创建 “狗”、“猫”、“鱼”、“马”这些对象（类），我们可以说他们有一些共同的属性像嘴巴、尾巴、重量、颜色、大小等等一些共同的属性（properties）,但是它们彼此的属性的形状是不同的（如嘴巴），在这种情况下，我们如果一个个去定义各自类似的属性是不是比较繁琐？如果用抽象类是不是很方便的给他们去继承。抽象类也有个更加好的地方，体现在“同质异像”就是实质相同实现形式不同的方法继承上，例如上面的狗、猫、马等的呼吸这个方法或者跑的速度的方法形式不同，我们这个是用定义一个抽象方法，让他们各自的类去实现它是不是很方便。“抽象”的意义正在于此。将共同的东西抽出来封装，但不实现只给继承。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;总结：&lt;/h2&gt;
&lt;p&gt;　　通过对抽象类的深入理解发现原来在程序设计方面需要考虑优化的问题还是有很多很多的，抽象类和接口的选择就是一个很典型的例子。往往我们会图简单而去直接定义接口使用，却往往忽视了后期的软件的健壮性和可拓展性。在以后的开发中需要多思考这方面的问题。最后假如文章有什么需要补充或者不足的地方希望大家指正，谢谢。&lt;/p&gt;
&lt;h2&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/lizhenxiqnmlgb/article/details/82346478&lt;/p&gt;
&lt;p&gt;https://kb.cnblogs.com/page/41836/&lt;/p&gt;

</description>
<pubDate>Mon, 09 Nov 2020 17:39:00 +0000</pubDate>
<dc:creator>追逐时光者</dc:creator>
<og:description>前言： 最近在研究.NET Core的一些类库源码的时候发现在底层类库中使用了大量的抽象类，然而发现自己搬砖这么多年好像从来没有在项目中使用抽象类或者抽象方法去实现某个功能模块，并且对修饰符Abstr</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Can-daydayup/p/13676586.html</dc:identifier>
</item>
<item>
<title>Spring Cloud 纯干货，从入门到实战 - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/13908389.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/13908389.html</guid>
<description>&lt;p&gt;　　之前写过一篇SpringCloud从入门到精通的&lt;a href=&quot;https://www.cnblogs.com/chenyanbin/p/12608621.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;，微服务基础知识&lt;a href=&quot;https://www.cnblogs.com/chenyanbin/p/13908339.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;，今天我们使用Spring Cloud模拟一个电商项目。分别有以下2个服务，商品、订单。下面我们开始叭&lt;/p&gt;
&lt;h2&gt;技术栈&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;SpringBoot整合SpringCloud&lt;/li&gt;
&lt;li&gt;通信方式：http restful&lt;/li&gt;
&lt;li&gt;注册中心：eruka&lt;/li&gt;
&lt;li&gt;断路器：hystrix&lt;/li&gt;
&lt;li&gt;网关：zuul&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;商品服务&lt;/h2&gt;
&lt;h3&gt;功能点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;商品列表&lt;/li&gt;
&lt;li&gt;商品详情&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;订单服务&lt;/h2&gt;
&lt;h3&gt;功能点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;我的订单&lt;/li&gt;
&lt;li&gt;下单接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;创建项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101191336047-1281573018.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;项目结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101200318316-161472262.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;pom.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.18.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.ybchen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;eureka_server&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;eureka_server&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud&lt;/span&gt;&lt;span&gt;.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Greenwich.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-server&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;启动类上加注解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101200430890-1769254115.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;application.properties&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101200528630-380706064.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 服务端口号
server.port=8761
# eureka主机名
eureka.instance.hostname=localhost
# 指定当前主机是否需要向注册中心注册(不用，因为当前主机是Server，不是Client)
eureka.client.register-with-eureka=false
# 指定当前主机是否需要获取注册信息(不用，因为当前主机是Server，不是Client)
eureka.client.fetch-registry=false
# 注册中心地址
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;启动服务并查看监控台&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101201440424-113020020.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;创建项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101202948969-1027390354.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;项目结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101222840412-1231673071.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;pom.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_dfb3ecf0-4b74-4a57-84f9-549cfa1faf26&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_dfb3ecf0-4b74-4a57-84f9-549cfa1faf26&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dfb3ecf0-4b74-4a57-84f9-549cfa1faf26&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.18.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.ybchen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;product_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;product_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud&lt;/span&gt;&lt;span&gt;.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Greenwich.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;application.properties&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 服务端口号
server.port=8771
# 服务名称
spring.application.name=product_service
# 将服务注册到注册中心，eureka_service的地址
eureka.client.service-url.defaultZone:http://localhost:8761/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ProductController.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.ybchen.product_service.controller;

import com.ybchen.product_service.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * @ClassName：ProductController
 * @Description：商品
 * @Author：chenyb
 * @Date：2020/11/1 8:42 下午
 * @Versiion：1.0
 */
@RestController
@RequestMapping(&quot;/api/v1/product&quot;)
public class ProductController {
    @Autowired
    private ProductService productService;

    /**
     * 商品列表
     *
     * @return
     */
    @PostMapping(&quot;list&quot;)
    public Object list() {
        return productService.listProduct();
    }

    /**
     * 根据id查询商品
     *
     * @param id
     * @return
     */
    @GetMapping(&quot;findById&quot;)
    public Object findById(@RequestParam(&quot;id&quot;) int id) {
        return productService.findById(id);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Product.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_2749468e-3bf0-449f-adab-d2069517dfb0&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_2749468e-3bf0-449f-adab-d2069517dfb0&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2749468e-3bf0-449f-adab-d2069517dfb0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.ybchen.product_service.domain;

import java.io.Serializable;

/**
 * @ClassName：Product
 * @Description：商品实体类
 * @Author：chenyb
 * @Date：2020/11/1 8:43 下午
 * @Versiion：1.0
 */
public class Product implements Serializable {
    /**
     * 内码
     */
    private String id;
    /**
     * 商品名称
     */
    private String name;
    /**
     * 价格，分为单位
     */
    private int price;
    /**
     * 库存
     */
    private int store;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public int getStore() {
        return store;
    }

    public void setStore(int store) {
        this.store = store;
    }

    public Product() {

    }

    public Product(String id, String name, int price, int store) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.store = store;
    }

    @Override
    public String toString() {
        return &quot;product{&quot; +
                &quot;id='&quot; + id + '\'' +
                &quot;, name='&quot; + name + '\'' +
                &quot;, price=&quot; + price +
                &quot;, store=&quot; + store +
                '}';
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;ProductService.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.ybchen.product_service.service;

import com.ybchen.product_service.domain.Product;

import java.util.List;

/**
 * @ClassName：ProductService
 * @Description：商品service
 * @Author：chenyb
 * @Date：2020/11/1 8:45 下午
 * @Versiion：1.0
 */
public interface ProductService {
    /**
     * 商品列表
     * @return
     */
    List&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; listProduct();

    /**
     * 根据id查询商品
     * @param id
     * @return
     */
    Product findById(int id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ProductServiceImpl.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.product_service.service.impl;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.product_service.domain.Product;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.product_service.service.ProductService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @ClassName：ProductServiceImpl
 * @Description：ProductService实现类
 * @Author：chenyb
 * @Date：2020/11/1 8:47 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ProductService {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化内存商品数据。模拟数据库中存储的商品&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Map&amp;lt;Integer, Product&amp;gt; daoMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();

    @Value(&lt;/span&gt;&quot;${server.port}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String port;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 5; i++&lt;span&gt;) {
            daoMap.put(i, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Product(i + &quot;&quot;, &quot;iphone_&quot; + i, 1000 * i, 10&lt;span&gt;));
        }
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Product&amp;gt;&lt;span&gt; listProduct() {
        Collection&lt;/span&gt;&amp;lt;Product&amp;gt; values =&lt;span&gt; daoMap.values();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(values);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Product findById(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        Product product &lt;/span&gt;=&lt;span&gt; daoMap.get(id);
        product.setName(product.getName()&lt;/span&gt;+&quot;_&quot;+&lt;span&gt;port);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; product;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ProductServiceApplication.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.ybchen.product_service;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProductServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(ProductServiceApplication.class, args);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;启动并查看监控台&lt;/h2&gt;
&lt;p&gt;　　启动2个服务，并查看监控台&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201101224239445-1854735836.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;创建项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201102232458213-1956486896.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;项目结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201103215607072-996610613.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;pom.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.18.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.ybchen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud&lt;/span&gt;&lt;span&gt;.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Greenwich.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-ribbon&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;application.properties&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 服务端口号
server.port=8781
# 服务名称
spring.application.name=order-service
# 将服务注册到注册中心，eureka_service的地址
eureka.client.service-url.defaultZone:http://localhost:8761/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;OrderServiceApplication.java&lt;/h2&gt;
&lt;p&gt;　　启动类添加Ribbon注解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Bean
    @LoadBalanced
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestTemplate();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.client.loadbalancer.LoadBalanced;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.client.RestTemplate;

@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderServiceApplication {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 负载均衡Ribbon
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    @LoadBalanced
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestTemplate();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(OrderServiceApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;OrderController.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.ProductOrderService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestParam;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(&lt;/span&gt;&quot;api/v1/order&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderController {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ProductOrderService productOrderService;
    @RequestMapping(&lt;/span&gt;&quot;save&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object save(@RequestParam(&quot;user_id&quot;)&lt;span&gt;int&lt;/span&gt; userId,@RequestParam(&quot;product_id&quot;)&lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productOrderService.save(userId,productId);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ProductOrder.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_b6cc9895-3378-409e-9e3e-89f087fdb7d6&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_b6cc9895-3378-409e-9e3e-89f087fdb7d6&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b6cc9895-3378-409e-9e3e-89f087fdb7d6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.domain;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 商品订单实体类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductOrder {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 主键
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 商品名称
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String productName;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 订单流水号
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String tradeNo;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 价格，以分位单位
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; price;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建时间
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date createTime;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用户id
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userId;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用户名称
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userName;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getProductName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProductName(String productName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.productName =&lt;span&gt; productName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getTradeNo() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tradeNo;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTradeNo(String tradeNo) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tradeNo =&lt;span&gt; tradeNo;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getPrice() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPrice(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; price) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getCreateTime() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; createTime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCreateTime(Date createTime) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.createTime =&lt;span&gt; createTime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUserId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserId(String userId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUserName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserName(String userName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userName =&lt;span&gt; userName;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;ProductOrder{&quot; +
                &quot;id=&quot; + id +
                &quot;, productName='&quot; + productName + '\'' +
                &quot;, tradeNo='&quot; + tradeNo + '\'' +
                &quot;, price=&quot; + price +
                &quot;, createTime=&quot; + createTime +
                &quot;, userId='&quot; + userId + '\'' +
                &quot;, userName='&quot; + userName + '\'' +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;ProductOrderService.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.domain.ProductOrder;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ProductOrderService {
    ProductOrder save(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; userId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ProductOrderServiceImpl.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.impl;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.domain.ProductOrder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.ProductOrderService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.client.RestTemplate;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.UUID;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @ClassName：ProductOrderServiceImpl
 * @Description：产品订单实现类
 * @Author：chenyb
 * @Date：2020/11/2 11:34 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductOrderServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ProductOrderService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 下单接口
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userId 用户id
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; productId 产品id
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ProductOrder save(&lt;span&gt;int&lt;/span&gt; userId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId) {
        Object obj&lt;/span&gt;=&lt;span&gt;productId;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get方式&lt;/span&gt;
        Object forObject = restTemplate.getForObject(&quot;http://product-service/api/v1/product/findById?id=&quot; + productId, Object.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;post方式
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Map&amp;lt;String,String&amp;gt; map=new HashMap&amp;lt;&amp;gt;();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        map.put(&quot;id&quot;,&quot;1&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        String s = restTemplate.postForObject(&quot;&lt;/span&gt;&lt;span&gt;http://product-service/api/v1/product/test&lt;/span&gt;&lt;span&gt;&quot;, map, String.class);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(s);&lt;/span&gt;
&lt;span&gt;        System.out.println(forObject);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取商品详情&lt;/span&gt;
        ProductOrder productOrder=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProductOrder();
        productOrder.setTradeNo(UUID.randomUUID().toString());
        productOrder.setCreateTime(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
        productOrder.setUserId(userId&lt;/span&gt;+&quot;&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productOrder;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;测试负载均衡&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201103223332199-1717621552.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201103223402449-361647269.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;　　改造订单服务，调用商品服务获取商品信息&lt;/p&gt;
&lt;h2&gt;官网例子&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud-openfeign&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;改造订单服务&lt;/h2&gt;
&lt;h3&gt;添加feign依赖&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.18.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.ybchen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Greenwich.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-ribbon&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;openfeign依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;启动类上添加注解&lt;/h3&gt;
&lt;p&gt;　　启动类上添加：@EnableFeignClients&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201104231554367-1330670128.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;添加一个接口&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201104232311381-1546631074.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ProductClient.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.openfeign.FeignClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestParam;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 商品服务客户端
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; name=商品服务的服务名==========》spring.application.name=product-service&lt;/span&gt;
@FeignClient(name = &quot;product-service&quot;&lt;span&gt;)
@RequestMapping(&lt;/span&gt;&quot;/api/v1/product&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ProductClient {

    @GetMapping(&lt;/span&gt;&quot;findById&quot;&lt;span&gt;)
    String findById(@RequestParam(&lt;/span&gt;&quot;id&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改ProductOrderServiceImpl.java&lt;/h3&gt;
&lt;p&gt;原先&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.impl;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.domain.ProductOrder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.ProductOrderService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.client.RestTemplate;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.UUID;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @ClassName：ProductOrderServiceImpl
 * @Description：产品订单实现类
 * @Author：chenyb
 * @Date：2020/11/2 11:34 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductOrderServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ProductOrderService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 下单接口
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userId 用户id
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; productId 产品id
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ProductOrder save(&lt;span&gt;int&lt;/span&gt; userId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId) {
        Object obj&lt;/span&gt;=&lt;span&gt;productId;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get方式&lt;/span&gt;
        Object forObject = restTemplate.getForObject(&quot;http://product-service/api/v1/product/findById?id=&quot; + productId, Object.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;post方式
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Map&amp;lt;String,String&amp;gt; map=new HashMap&amp;lt;&amp;gt;();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        map.put(&quot;id&quot;,&quot;1&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        String s = restTemplate.postForObject(&quot;&lt;/span&gt;&lt;span&gt;http://product-service/api/v1/product/test&lt;/span&gt;&lt;span&gt;&quot;, map, String.class);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(s);&lt;/span&gt;
&lt;span&gt;        System.out.println(forObject);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取商品详情&lt;/span&gt;
        ProductOrder productOrder=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProductOrder();
        productOrder.setTradeNo(UUID.randomUUID().toString());
        productOrder.setCreateTime(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
        productOrder.setUserId(userId&lt;/span&gt;+&quot;&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productOrder;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201104233003930-832099572.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.impl;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.domain.ProductOrder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.ProductClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.ProductOrderService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.UUID;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @ClassName：ProductOrderServiceImpl
 * @Description：产品订单实现类
 * @Author：chenyb
 * @Date：2020/11/2 11:34 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductOrderServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ProductOrderService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ProductClient productClient;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 下单接口
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userId    用户id
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; productId 产品id
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ProductOrder save(&lt;span&gt;int&lt;/span&gt; userId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;-----------调用商品服务开始------------&lt;/span&gt;
        String byId =&lt;span&gt; productClient.findById(productId);
        System.out.println(byId);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;-----------调用商品服务结束------------
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取商品详情&lt;/span&gt;
        ProductOrder productOrder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProductOrder();
        productOrder.setTradeNo(UUID.randomUUID().toString());
        productOrder.setCreateTime(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
        productOrder.setUserId(userId &lt;/span&gt;+ &quot;&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productOrder;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;测试商品服务&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201104233935732-930391989.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;补充(&lt;span&gt;设置服务调用超时时间&lt;/span&gt;)&lt;/h2&gt;
&lt;p&gt;　　默认连接10秒，读取60秒，但是由于hystrix默认是1秒超时&lt;/p&gt;
&lt;p&gt;官网案例，&lt;a href=&quot;https://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.1.5.RELEASE/single/spring-cloud-openfeign.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201105224653353-1397704024.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201105224722314-735766837.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201105224750830-462993458.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;application.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 设置连接和读取超时时间
feign.client.config.default.connect-timeout=5000
feign.client.config.default.read-timeout=1100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;为什么要用？&lt;/h2&gt;
&lt;p&gt;　　在一个分布式系统里，一个服务依赖多个服务，可能存在某个服务调用失败，比如超时、异常等，如何能保证在一个依赖出问题的情况下，不会导致整体服务故障，可以通过Hystrix来解决。&lt;/p&gt;
&lt;h2&gt;官网例子&lt;/h2&gt;
&lt;p&gt;　　&lt;a href=&quot;https://spring.io/&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107205757096-540087434.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107205841567-255950370.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107205914727-1343916938.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;修改订单服务&lt;/h2&gt;
&lt;h3&gt;添加依赖&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;hystrix依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-hystrix&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_14c18614-9b19-47fe-b407-3a0b43839016&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_14c18614-9b19-47fe-b407-3a0b43839016&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_14c18614-9b19-47fe-b407-3a0b43839016&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.18.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.ybchen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Greenwich.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-ribbon&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;openfeign依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;hystrix依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-hystrix&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;启动类加注解&lt;/h3&gt;
&lt;p&gt;　　@EnableCircuitBreaker&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107213448678-780785869.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;修改控制层&lt;/h3&gt;
&lt;p&gt;　　添加注解，&lt;span&gt;&lt;strong&gt;@HystrixCommand&lt;/strong&gt;&lt;/span&gt;，并&lt;span&gt;&lt;strong&gt;定义回调方法&lt;/strong&gt;&lt;/span&gt;，返回值、入参必须一致！！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107220355955-174078997.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;入参、返回值，不一致会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107220737473-98452314.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;修改订单服务&lt;/h2&gt;
&lt;h3&gt;开启hystrix&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107230724276-37466409.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 开启hystrix
feign.hystrix.enabled=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ProductClient.java&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107230041416-66482672.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.fallback.ProductClientFallBack;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.openfeign.FeignClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 商品服务客户端
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; name=商品服务的服务名==========》spring.application.name=product-service&lt;/span&gt;
@FeignClient(name = &quot;product-service&quot;,fallback = ProductClientFallBack.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RequestMapping(&quot;/api/v1/product&quot;)&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ProductClient {

    @GetMapping(&lt;/span&gt;&quot;/api/v1/product/findById&quot;&lt;span&gt;)
    String findById(@RequestParam(&lt;/span&gt;&quot;id&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ProductClientFallBack.java&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107230223485-307943046.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.fallback;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ybchen.order_service.service.ProductClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 针对商品服务，做降级处理
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductClientFallBack &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ProductClient {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String findById(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        System.out.println(&lt;/span&gt;&quot;商品服务被降级了~~~~~~~&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;验证商品服务熔断&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107231139502-1801533358.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　为什么对商品服务做了熔断，还返回这个结果呢，那是因为service实现类，内部发生了错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107232108689-1606776040.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　下面写一些伪代码，比如：xxx微服务挂了，然后通过短信、邮件的方式，通知相应的开发人员，紧急处理事故等。&lt;/p&gt;
&lt;h2&gt;修改订单服务&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201107234845322-1027803463.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;禁用超时时间(不推荐)&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hystrix.command.default.execution.timeout.enabled=false
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;设置超时时间(推荐)&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=4000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108162032792-1678441184.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;源码位置讲解&lt;/h2&gt;
&lt;p&gt;　　通过这种方法，还可以设置更多的hystrix默认值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108163848588-1387896642.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108163921395-688945209.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;修改订单服务&lt;/h2&gt;
&lt;h3&gt;添加依赖&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;hystrix仪表盘&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_705f6339-2701-4d2f-857a-81edaa4e7945&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_705f6339-2701-4d2f-857a-81edaa4e7945&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_705f6339-2701-4d2f-857a-81edaa4e7945&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.18.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.ybchen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order_service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Greenwich.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-ribbon&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;openfeign依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;hystrix依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-hystrix&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;hystrix仪表盘&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;启动类上加注解&lt;/h3&gt;
&lt;p&gt;　　添加：@EnableHystrixDashboard&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108171908586-784242035.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;修改配置文件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 暴露全部的监控信息
management.endpoints.web.exposure.include=*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108175022922-630071676.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;访问仪表盘&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http://127.0.0.1:8781/hystrix

http://127.0.0.1:8781/actuator/hystrix.stream&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108175631744-468022121.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　仪表盘实际工作中用处不大(仁者见仁智者见智)，纯属学习用，具体参数，请自行百度，&lt;strong&gt;&lt;span&gt;只要把微服务熔断/降级报警通知处理好，比啥都好&lt;/span&gt;&lt;/strong&gt;👍&lt;/p&gt;

&lt;h2&gt;创建项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108204359689-95496543.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;项目结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108214058462-708816492.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;pom.xml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_8dc6eedc-8f56-4b5b-8a00-ee4320238239&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_8dc6eedc-8f56-4b5b-8a00-ee4320238239&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8dc6eedc-8f56-4b5b-8a00-ee4320238239&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.2.11.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.ybchen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;api-gateway&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;api-gateway&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hoxton.SR8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-zuul&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.junit.vintage&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit-vintage-engine&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;application.properties&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server.port=8800
# 服务名称
spring.application.name=api-gateway
# 将服务注册到注册中心，eureka_service的地址
eureka.client.service-url.defaultZone:http://localhost:8761/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;默认访问规则&lt;/h3&gt;
&lt;p&gt;　　http://gateway:port/service-id/**&lt;/p&gt;
&lt;p&gt;　　比如，原先下单地址：127.0.0.1:8781/api/v1/order/save?user_id=1&amp;amp;product_id=1&lt;/p&gt;
&lt;p&gt;　　现在下单地址：127.0.0.1:8800/order-service/api/v1/order/save?user_id=1&amp;amp;product_id=1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108214851905-59473972.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;自定义路由规则&lt;/h2&gt;
&lt;p&gt;　　添加application.properties信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108221143763-83385312.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 自定义路由规则，语法：zuul.routes.服务名=自定义路由
zuul.routes.order-service=/apigate/**
# 不让默认的服务对外暴露接口，语法：zuul.ignored-patterns=服务名
zuul.ignored-patterns=/order-service/**
# 忽略所有服务
# zuul.ignored-patterns=*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;处理http请求头为空的问题&lt;/h2&gt;
&lt;p&gt; 　　默认zuul过滤3个值(&quot;&lt;strong&gt;&lt;span&gt;Cookie&lt;/span&gt;&lt;/strong&gt;&quot;, &quot;&lt;span&gt;&lt;strong&gt;Set-Cookie&lt;/strong&gt;&lt;/span&gt;&quot;, &quot;&lt;span&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/span&gt;&quot;)，解决版本，设置为不过滤&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108230033144-1990195836.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108230350307-2108345741.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;源码解读&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201108230639017-274100646.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;添加属性&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 处理http请求头为空的问题
zuul.sensitive-headers=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;改造api-gateway项目&lt;/h2&gt;
&lt;h3&gt;新建LoginFilter类&lt;/h3&gt;
&lt;p&gt;　　新建该类，并继承ZuulFilter，重写里面的方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201109001226675-132353954.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.apigateway.filter;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.databind.ObjectMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.netflix.zuul.ZuulFilter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.netflix.zuul.context.RequestContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.netflix.zuul.exception.ZuulException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.http.HttpStatus;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.PrintWriter;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_TYPE;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @ClassName：LoginFilter
 * @Description：登录过滤器
 * @Author：chenyb
 * @Date：2020/11/8 11:16 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;让Spring扫描到&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ZuulFilter {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 过滤类型，有以下类型
     * 1、pre
     * 2、route
     * 3、post
     * 4、error
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String filterType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; PRE_TYPE;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 过滤器顺序，越小越先执行
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; filterOrder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 4&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 过滤器是否生效
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; shouldFilter() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、获取上下文&lt;/span&gt;
        RequestContext currentContext =&lt;span&gt; RequestContext.getCurrentContext();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、获取HttpServletRequest&lt;/span&gt;
        HttpServletRequest request =&lt;span&gt; currentContext.getRequest();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、拿到请求路径，判断是否进行拦截
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(request.getRequestURL()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://127.0.0.1&lt;/span&gt;&lt;span&gt;:8800/apigate/order/api/v1/order/save
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(request.getRequestURI()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;/apigate/order/api/v1/order/save&lt;/span&gt;
        String url =&lt;span&gt; request.getRequestURI();
        System.out.println(&lt;/span&gt;&quot;请求路径url=========&amp;gt;&quot; +&lt;span&gt; url);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((url == &lt;span&gt;null&lt;/span&gt; ? &quot;&quot; : url.toLowerCase()).startsWith(&quot;/apigate/order&quot;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 过滤器逻辑，业务逻辑
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; ZuulException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object run() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ZuulException {
        System.out.println(&lt;/span&gt;&quot;请求被拦截啦==============&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;JWT方式
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、获取上下文&lt;/span&gt;
        RequestContext currentContext =&lt;span&gt; RequestContext.getCurrentContext();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、获取HttpServletRequest&lt;/span&gt;
        HttpServletRequest request =&lt;span&gt; currentContext.getRequest();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、拿到token&lt;/span&gt;
        String token = request.getHeader(&quot;token&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求头拿token&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (token == &lt;span&gt;null&lt;/span&gt; || &quot;&quot;&lt;span&gt;.equals(token)) {
            token &lt;/span&gt;= request.getParameter(&quot;token&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;get方式拿token&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录校验逻辑，这里推荐JWT方式，做登录鉴权&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (token == &lt;span&gt;null&lt;/span&gt; || &quot;&quot;&lt;span&gt;.equals(token)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、不让继续往下走&lt;/span&gt;
            currentContext.setSendZuulResponse(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、设置状态码，401，Unauthorized&lt;/span&gt;
&lt;span&gt;            currentContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());
            sendJsonMessage(currentContext.getResponse(),&lt;/span&gt;&quot;用户未登录&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 响应json数据给前端
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; response
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; obj
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sendJsonMessage(HttpServletResponse response, Object obj) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            ObjectMapper objectMapper &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectMapper();
            response.setContentType(&lt;/span&gt;&quot;application/json;charset=utf-8&quot;&lt;span&gt;);
            PrintWriter writer &lt;/span&gt;=&lt;span&gt; response.getWriter();
            writer.print(objectMapper.writeValueAsString(obj));
            writer.close();
            writer.flush();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;用户登录鉴权测试&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201109001614848-1652901421.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;补充&lt;/h2&gt;
&lt;p&gt;　　登录鉴权，推荐使用JWT方式，下面我提供我之前的一个项目，JWT的工具类，和拦截器的部分关键代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_6b11aba3-5f06-4102-91c6-a194515850b7&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_6b11aba3-5f06-4102-91c6-a194515850b7&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6b11aba3-5f06-4102-91c6-a194515850b7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.jsonwebtoken&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jjwt&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.7.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml依赖&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_2052d0bf-3648-4d7a-918b-7b6e3d6a7a35&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_2052d0bf-3648-4d7a-918b-7b6e3d6a7a35&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2052d0bf-3648-4d7a-918b-7b6e3d6a7a35&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; net.ybclass.online_ybclass.utils;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.jsonwebtoken.Claims;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.jsonwebtoken.Jwts;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.jsonwebtoken.SignatureAlgorithm;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; net.ybclass.online_ybclass.model.entity.User;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * JWT工具类
 * 注意点：
 * 1、生成的token，是可以通过base64进行解密出铭文信息
 * 2、base64进行解密出明文信息，修改再进行编码，则会解密失败
 * 3、无法作废已颁布的token，除非改密钥
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JWTUtils {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 过期时间，一周
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; EXPIRE = 60000 * 60 * 24 * 7&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 加密密钥
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SECRET = &quot;ybclass.net168&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 令牌前缀
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String TOKEN_PREFIX = &quot;ybclass&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 主题
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SUBJECT = &quot;ybclass&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据用户信息，生成令牌
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; user
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String geneJsonWebToken(User user) {
        String token &lt;/span&gt;=&lt;span&gt; Jwts.builder().setSubject(SUBJECT)
                .claim(&lt;/span&gt;&quot;head_img&quot;&lt;span&gt;, user.getHeadImg())
                .claim(&lt;/span&gt;&quot;id&quot;&lt;span&gt;, user.getId())
                .claim(&lt;/span&gt;&quot;name&quot;&lt;span&gt;, user.getName())
                .setIssuedAt(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Date()) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;令牌颁布时间&lt;/span&gt;
                .setExpiration(&lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis() + EXPIRE)) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;过期时间&lt;/span&gt;
                .signWith(SignatureAlgorithm.HS256, SECRET) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密方式&lt;/span&gt;
&lt;span&gt;                .compact();
        token &lt;/span&gt;= TOKEN_PREFIX +&lt;span&gt; token;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; token;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 校验token方法
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; token
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Claims checkJWT(String token) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Claims claims =&lt;span&gt; Jwts.parser()
                    .setSigningKey(SECRET)
                    .parseClaimsJws(token.replace(TOKEN_PREFIX, &lt;/span&gt;&quot;&quot;&lt;span&gt;))
                    .getBody();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; claims;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;JWTUtils.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_03e75ba7-9ca2-4e53-b2d7-d5a5ab9b2b73&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_03e75ba7-9ca2-4e53-b2d7-d5a5ab9b2b73&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_03e75ba7-9ca2-4e53-b2d7-d5a5ab9b2b73&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;try {
            String accesToken = request.getHeader(&quot;token&quot;);
            if (accesToken == null) {
                accesToken = request.getParameter(&quot;token&quot;);
            }
            if (StringUtils.isNoneBlank(accesToken)) {
                Claims claims = JWTUtils.checkJWT(accesToken);
                if (claims == null) {
                    sendJsonMessage(response, JsonData.buildError(&quot;登陆过期，请重新登陆&quot;));
                    //告诉登陆过期，重新登陆
                    return false;
                }
                Integer id = (Integer) claims.get(&quot;id&quot;);
                String name = (String) claims.get(&quot;name&quot;);
                request.setAttribute(&quot;user_id&quot;, id);
                request.setAttribute(&quot;name&quot;, name);
                return true;
            }
        } catch (Exception e) {
        }
        //登陆失败
        sendJsonMessage(response, JsonData.buildError(&quot;登陆过期，请重新登陆&quot;));
        return false;



=================
        User user = userMapper.findByPhoneAndPwd(phone, CommonUtils.MD5(pwd));
        return user == null ? null : JWTUtils.geneJsonWebToken(user);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;拦截器部分代码&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　采用谷歌guava框架，网关限流&lt;/p&gt;
&lt;h2&gt;改造api-gateway项目&lt;/h2&gt;
&lt;h3&gt;创建OrderRatelimiterFilter&lt;/h3&gt;
&lt;p&gt;　　然后继承ZuulFilter，并使用springcloud继承的guava技术，只针对订单接口限流！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201109234412600-777161879.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ybchen.apigateway.filter;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.util.concurrent.RateLimiter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.netflix.zuul.ZuulFilter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.netflix.zuul.context.RequestContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.netflix.zuul.exception.ZuulException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.http.HttpStatus;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_TYPE;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @ClassName：OrderRateLimiterFilter
 * @Description：订单接口限流
 * @Author：chenyb
 * @Date：2020/11/9 11:32 下午
 * @Versiion：1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderRateLimiterFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ZuulFilter {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;限流令牌，每秒创建多少令牌，注意：springcloud 默认集成guava&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; RateLimiter RATE_LIMITER = RateLimiter.create(1000&lt;span&gt;);

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String filterType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; PRE_TYPE;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; filterOrder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -4&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; shouldFilter() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、获取上下文&lt;/span&gt;
        RequestContext currentContext =&lt;span&gt; RequestContext.getCurrentContext();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、获取HttpServletRequest&lt;/span&gt;
        HttpServletRequest request =&lt;span&gt; currentContext.getRequest();
        String url &lt;/span&gt;=&lt;span&gt; request.getRequestURI();
        System.out.println(&lt;/span&gt;&quot;限流请求路径url=========&amp;gt;&quot; +&lt;span&gt; url);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只对订单接口限流&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; ((url == &lt;span&gt;null&lt;/span&gt; ? &quot;&quot; : url.toLowerCase()).startsWith(&quot;/apigate/order&quot;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object run() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ZuulException {
        RequestContext currentContext &lt;/span&gt;=&lt;span&gt; RequestContext.getCurrentContext();
        HttpServletRequest request &lt;/span&gt;=&lt;span&gt; currentContext.getRequest();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;RATE_LIMITER.tryAcquire()) {
            currentContext.setSendZuulResponse(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            currentContext.setResponseStatusCode(HttpStatus.TOO_MANY_REQUESTS.value());
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　技术栈：nginx+lvs+keepalive&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202011/1504448-20201109235901559-1635004190.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
链接: https://pan.baidu.com/s/1bNIh-8nSCMcU7FjVVzlBnA  密码: 4wf9
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 09 Nov 2020 16:08:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>导读 之前写过一篇SpringCloud从入门到精通的点我直达，微服务基础知识点我直达，今天我们使用Spring Cloud模拟一个电商项目。分别有以下2个服务，商品、订单。下面我们开始叭 技术栈 S</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chenyanbin/p/13908389.html</dc:identifier>
</item>
<item>
<title>一个名为不安全的类Unsafe - 小高飞</title>
<link>http://www.cnblogs.com/gaofei200/p/13951764.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gaofei200/p/13951764.html</guid>
<description>&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;最近为了更加深入了解NIO的实现原理，学习NIO的源码时，遇到了一个问题。即在WindowsSelectorImpl中的&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;pollWrapper属性，当我点进去查看它的PollArrayWrapper类型时，发现它和AllocatedNativeObject类型有关，而AllocatedNativeObject继承了NativeObject类，随着又发现了NativeObject是基于一个Unsafe类实现的。不安全的类？？？？&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Unsafe&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Unsafe，顾名思义，它真是一个不安全的类，那它为什么是不安全的呢？这就要从Unsafe类的功能说起。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;学过C#的就可以知道，C#和Java的一个重要区别就是：C#可以直接操作一块内存区域，如自己申请内存和释放，而在Java中这是做不到的。而Unsafe类就可以让我们在Java中像C#一样去直接操作一块内存区域，正因为Unsafe类可以直接操作内存，意味着其速度更快，在高并发的条件之下能够很好地提高效率，所以java中很多并发框架，如Netty，都使用了Unsafe类。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;虽然，Unsafe可以提高运行速度，但是因为Java本身是不支持自己直接操作内存的，这就意味着Unsafe类所做的操作不受jvm管理的，所以不会被GC(垃圾回收)，需要我们手动GC，稍有不慎就会出现内存泄漏问题。且Unsafe的不少方法中必须提供原始地址(内存地址)和被替换对象的地址，偏移量要自己计算，一旦出现问题就是JVM崩溃级别的异常，会导致整个JVM实例崩溃。这就是为什么Unsafe被称为不安全的原因。Unsafe可以让你全力踩油门，提高自己的速度，但是它会让你的方向盘更难握稳，一不小心就可能导致车毁人亡。&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;源码查看&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;C:\Users\chencanhao\Pictures\博客\netty\Unsafe api.png&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1563713/202011/1563713-20201109235455459-1826673066.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;初始化&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;因为Unsafe的构造方法是private类型的，所以无法通过new方式实例化获取，只能通过它的getUnsafe()方法获取。又因为Unsafe是直接操作内存的，为了安全起见，Java的开发人员为Unsafe的获取设置了限制，所以想要获取它只能通过Java的反射机制来获取。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@CallerSensitive
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Unsafe getUnsafe() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过getCallerClass方法获取Unsafe类&lt;/span&gt;
    Class var0 =&lt;span&gt; Reflection.getCallerClass();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如过该var0类不是启动类加载器(Bootstrap)，则抛出异常
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正因为该判断，所以Unsafe只能通过反射获取&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;VM.isSystemDomainLoader(var0.getClassLoader())) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SecurityException(&quot;Unsafe&quot;&lt;span&gt;);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; theUnsafe;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;1&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;Reflection.getCallerClass()&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：可以返回调用类或Reflection类，或者层层上传&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;VM.isSystemDomainLoader(ClassLoader var0)&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：判断该类加载器是否是启动类加载器(Bootstrap)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;@CallerSensitive&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：为了防止黑客通过双重反射来提升权限，所以所有跟反射相关的接口方法都标注上CallerSensitive&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;所以使用下面的方式是获取不了Unsafe类的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用这样的方式获取会抛出异常，因为是通过系统类加载器加载(AppClassLoader)&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Unsafe unsafe &lt;/span&gt;=&lt;span&gt; Unsafe.getUnsafe();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;那怎么才用使用启动类加载Unsafe类并获取它呢？在Unsafe类的最下面的static代码块中有这样一段代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Unsafe theUnsafe;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.....&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
    registerNatives();
    Reflection.registerMethodsToFilter(Unsafe.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; String[]{&quot;getUnsafe&quot;&lt;span&gt;});
    theUnsafe &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Unsafe();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;学过反射机制看过以上代码就可以知道我们可以通过getDeclaredField()返回获取Un safe类的theUnsafe属性，然后通过该属性获取Unsafe类的实例，因为在Unsafe类里的theUnsafe属性已经被new实例化了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过getDeclaredField方法获取Unsafe类中名为theUnsafe的属性
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意，该属性是private类型的，所以不能用getField获取，只能用getDeclaredField&lt;/span&gt;
        Field field = Unsafe.&lt;span&gt;class&lt;/span&gt;.getDeclaredField(&quot;theUnsafe&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将该属性设为可访问&lt;/span&gt;
        field.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例该属性并转为Unsafe类型
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为theUnsafe属性是Unsafe类所在的包的启动类加载的，所以可以成功获得&lt;/span&gt;
        Unsafe unsafe = (Unsafe)field.get(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取偏移量方法&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;偏移量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在实际模式中，内存是被分成段的，如果想要获取内存中的某个储存单元，需知道储存单元的所在段地址(段头)和偏移量，即使你知道该储存单元的实际地址。而偏移量就是实际地址与所在段地址(段头)的距离，&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;偏移量=实际地址-所在段地址(段头)&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;举个例子，假设有个书架，我需要找由左到右、由上到下数的第1024本书，那我只能一本本的数，直到数到第1024本，但如果我知道书架的第4层的第一本书是第1000本书，那我只用从第1000本书开始数，数到1024，只需数1024-1000=24本。在这里，书架是内存，要找的书就是储存单元，书架的第4层就是内存段，第4层的第一本书即书架的第1000本书就是段地址(段头)，第1024本书就是实际地址，而偏移量的就是第1000本书到第1024本书的距离24.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; objectFieldOffset(Field var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;非静态&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;变量var1的偏移量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; staticFieldOffset(Field var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;静态&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;变量var1的偏移量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; Object staticFieldBase(Field var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;静态&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;变量var1的实际地址，配合staticFieldOffset方法使用，可求出变量所在的段地址&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; arrayBaseOffset(Class&amp;lt;?&amp;gt; var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取数组var1中的第一个元素的偏移量，即数组的基础地址。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在内存中，数组的存储是以一定的偏移量增量连续储存的，如数组的第一个元素的实际地址为24，偏移量为4，而数组的偏移量增量为1，那数组的第二个元素的实际地址就是25，偏移量为5.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; arrayIndexScale(Class&amp;lt;?&amp;gt; var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取数组var1的偏移量增量。结合arrayBaseOffset(Class&amp;lt;?&amp;gt; var1)方法就可以求出数组中各个元素的地址。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt; &lt;/h4&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;操作属性方法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; Object getObject(Object var1, &lt;span&gt;long&lt;/span&gt; var2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取var1对象中偏移量为var2的Object对象，该方法可以无视修饰符限制。相同方法有getInt、getLong、getBoolean等。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; putObject(Object var1, &lt;span&gt;long&lt;/span&gt; var2, Object var4);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;将var1对象中偏移量为var2的Object对象的值设为var4，该方法可以无视修饰符限制。相同的方法有putInt、putLong、putBoolean等。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; Object getObjectVolatile(Object var1, &lt;span&gt;long&lt;/span&gt; var2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;功能与getObject(Object var1, long var2)一样，但该方法可以保证读写的&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;可见性和有序性&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;，可以无视修饰符限制。相同的方法有getIntVolatile、getLongVolatile、getBooleanVolatile等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; putObjectVolatile(Object var1, &lt;span&gt;long&lt;/span&gt; var2, Object var4);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;功能与putObject(Object var1, long var2, Object var4)一样，但该方法可以保证读写的&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;可见性和有序性&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;，可以无视修饰符限制。相同的方法有putIntVolatile、putLongVolatile、putBooleanVolatile等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; putOrderedObject(Object var1, &lt;span&gt;long&lt;/span&gt; var2, Object var4);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;功能与putObject(Object var1, long var2, Object var4)一样，但该方法可以保证读写的&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;有序性(不保证可见性)&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;，可以无视修饰符限制。相同的方法有putOrderedInt、putOrderedLong等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt; &lt;/h4&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;操作内存方法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; addressSize();
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取本地指针大小，单位为byte，通常值为4或8。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pageSize();
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;获取本地内存的页数，该返回值会是2的幂次方。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; allocateMemory(&lt;span&gt;long&lt;/span&gt; var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;开辟一块新的内存块，大小为var1(单位为byte)，返回新开辟的内存块地址。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; reallocateMemory(&lt;span&gt;long&lt;/span&gt; var1, &lt;span&gt;long&lt;/span&gt; var3);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;将内存地址为var3的内存块大小调整为var1(单位为byte)，返回调整后新的内存块地址。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setMemory(&lt;span&gt;long&lt;/span&gt; var2, &lt;span&gt;long&lt;/span&gt; var4, &lt;span&gt;byte&lt;/span&gt; var6);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;从实际地址var2开始将后面的字节都修改为var6，修改大小为var4(通常为0)。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; copyMemory(Object var1, &lt;span&gt;long&lt;/span&gt; var2, Object var4, &lt;span&gt;long&lt;/span&gt; var5, &lt;span&gt;long&lt;/span&gt; var7);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;从对象var1中偏移量为var2的地址开始复制，复制到var4中偏移量为var5的地址，复制大小为var7。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当var1为空时，var2就不是偏移量而是实际地址，当var4为空时，var5就不是偏移量而是实际地址。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; freeMemory(&lt;span&gt;long&lt;/span&gt; var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;释放实际地址为var1的内存。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt; &lt;/h4&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;线程挂起和恢复方法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; unpark(Object var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;将被挂起的线程var1恢复，由于其不安全性，需保证线程var1是存活的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; park(&lt;span&gt;boolean&lt;/span&gt; var1, &lt;span&gt;long&lt;/span&gt; var2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当var2等于0时，线程会一直挂起，知道调用unpark方法才能恢复。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当var2大于0时，如果var1为false，这时var2为增量时间，即线程在被挂起var2秒后会自动恢复，如果var1为true，这时var2为绝对时间，即线程被挂起后，得到具体的时间var2后才自动恢复。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt; &lt;/h4&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;CAS方法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; compareAndSwapObject(Object var1, &lt;span&gt;long&lt;/span&gt; var2, Object var4, Object var5);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;CAS机制相关操作，对对象var1里偏移量为var2的变量进行CAS修改，var4为期待值，var5为修改值，返回修改结果。相同方法有compareAndSwapInt、compareAndSwapLong。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt; &lt;/h4&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;类加载方法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; shouldBeInitialized(Class&amp;lt;?&amp;gt; var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;判断var1类是否被初始。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ensureClassInitialized(Class&amp;lt;?&amp;gt; var1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;确保var1类已经被初始化。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; Class&amp;lt;?&amp;gt; defineClass(String var1, &lt;span&gt;byte&lt;/span&gt;[] var2, &lt;span&gt;int&lt;/span&gt; var3, &lt;span&gt;int&lt;/span&gt; var4, ClassLoader var5, ProtectionDomain var6);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;定义一个类，用于动态的创建类。var1为类名，var2为类的文件数据字节数组，var3为var2的输入起点，var4为输入长度，var5为加载该类的加载器，var6为保护领域。返回创建后的类。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; Class&amp;lt;?&amp;gt; defineAnonymousClass(Class&amp;lt;?&amp;gt; var1, &lt;span&gt;byte&lt;/span&gt;[] var2, Object[] var3);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;用于动态的创建匿名内部类。var1为需创建匿名内部类的类，var2为匿名内部类的文件数据字节数组，var3为修补对象。返回创建后的匿名内部类。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; Object allocateInstance(Class&amp;lt;?&amp;gt; var1) &lt;span&gt;throws&lt;/span&gt; InstantiationException;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;创建var1类的实例，但是不会调用var1类的构造方法，如果var1类还没有初始化，则进行初始化。返回创建实例对象。&lt;/span&gt;&lt;/p&gt;

&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;内存屏障方法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; loadFence();
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;所有读操作必须在loadFence方法执行前执行完毕。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; storeFence();
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;所有写操作必须在storeFence方法执行前执行完毕。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; fullFence();
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;所有读写操作必须在fullFence方法执行前执行完毕。&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;疑惑&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;看到这里可能有人会有一个疑惑，为什么这些方法都没有具体的功能实现代码呢？&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在文章开头时就说过，Java不支持直接操作内存，那怎么可能用Java来具体实现功能呢。你可以发现Unsafe类内的大多方法都有native修饰符，native接口可以让你调用本地的代码文件（包括其他语言，如c语言），既然Java实现不了，那就让能实现的人来做，所以Unsafe的底层实现语言其实是C语言，这也是为什么Unsafe类内会有偏移量和指针这些Java中没有的概念了。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-plain md-expand&quot;&gt;(以上为本人自己对Unsafe类的理解，如果有错误，欢迎各位前辈指出)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Mon, 09 Nov 2020 16:00:00 +0000</pubDate>
<dc:creator>小高飞</dc:creator>
<og:description>最近为了更加深入了解NIO的实现原理，学习NIO的源码时，遇到了一个问题。即在WindowsSelectorImpl中的 pollWrapper属性，当我点进去查看它的PollArrayWrapper</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/gaofei200/p/13951764.html</dc:identifier>
</item>
<item>
<title>分布式文档存储数据库之MongoDB索引管理 - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/13950287.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/13950287.html</guid>
<description>&lt;p&gt;　　前文我们聊到了MongoDB的简介、安装和对collection的CRUD操作，回顾请参考&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/13941797.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/13941797.html&lt;/a&gt;；今天我们来聊下mongodb的索引；&lt;/p&gt;
&lt;p&gt;　　1、为什么要有索引？索引的作用是干嘛的？&lt;/p&gt;
&lt;p&gt;　　我们知道mongodb通常应用在一些web站点，数据量非常大的场景中；在大数据的场景中，对于我们要查询一个数据，mongodb是否能够快速的响应结果就变得尤为的重要；这也是索引存在的意义；索引就是用来帮助我们在很大的数据集中快速查询我们想要的数据；通常我们在mongodb中插入一条数据时，mongodb会自动给我们添加一个_id的字段，这个字段是mongodb内部自己维护，通常情况我们都不会去管它；在关系型数据库中，我们可以在单个字段上构建索引，也可以在多个字段上构建索引，之所以要在多个字段构建索引是因为我们的查询条件很可能用到的字段不只一个；所以我们构建索引的原则是根据查询条件来构建；比如我们要查询年龄大于30的用户有哪些，我们就可以把索引构建在年龄这个字段上，构建在其他字段上，对于我们要查询年龄大于30这个条件来讲是没有意义的；所以构建索引通常我们会去了解用户最常的查询，在用户最常查询的字段上构建索引，这样可以有效提高用户的查询；对于mongodb也是一样的，索引的存在就是为了提高我们的查询；&lt;/p&gt;
&lt;p&gt;　　2、为什么索引能够帮助我们快速查找呢？&lt;/p&gt;
&lt;p&gt;　　首先索引是按照我们指定的字段来构建，构建索引就是把我们指定的字段抽取出来，然后提前排好序（或者按照一定规律的方式排列好），然后保存为另外一个collection；用户在查找数据时，mongodb首先会去找索引，看看用户的条件是否和索引匹配，能够匹配，索引就能告诉用户要查询的数据在那个地方，这样就很快的找到用户查询的数据；假如我们构建的索引没有匹配用户的查询，那么用户的查询会以遍历的方式去查找，这样一来无形之中速度就变慢了（原本不加索引，直接遍历，现在有索引，要先查索引，没有命中，还要遍历）；所以构建索引，如果一定是数据量很大的情况才构建，数据量小，构建索引不但不会帮助我们快速的查找内容，反而会拖慢我们的查询速度；其次在很大的数据量上，如果索引构建的字段没有被查询命中，那么我构建的索引就无意义；&lt;/p&gt;
&lt;p&gt;　　3、索引在一定程度上是要影响用户写的性能&lt;/p&gt;
&lt;p&gt;　　我们在某个字段构建好索引以后，用户在写数据时，通常会额外多一次写io；对于写请求，在没有索引的情况，用户只需要写一次io，有了索引用户每写一条数据，都会对应有一次写索引的io；这样一来在一定程度上对用户的写性能会有影响；但通常我们构建索引都是在读多写少的场景中使用；在写请求不是特别多的场景其实多一次写io，比起读请求的压力我们是可以接受的；更何况有些数据库支持延迟写索引，所谓延迟写索引是指用户在插入数据时，它不立即写索引，而是等一段时间再写，这样一来就有效的降低写索引对用户的写请求性能的影响；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201109195629385-572971246.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图主要描述了索引和文档的关系，在索引里的数据通常是我们指定的字段，用特定的排列方式组织在一起，在用户查询某个数据时，就能够很快的从索引中拿到对应文档的位置，从而不用每个文档挨着遍历；这也是索引能够帮助我们快速查找的原因吧；&lt;/p&gt;
&lt;p&gt;　　4、索引类型&lt;/p&gt;
&lt;p&gt;　　索引是有类型的，不同类型的索引在内部组织索引的方式各不相同，不同类型的索引给我们查询带来的效果也不同；常见的索引类型有b+ tree（平衡树索引），hash索引、空间索引、全文索引等等；在mongodb中索引也有很多类型，不同的是我们上面说的索引类型，b+ tree，hash索引这些都是从索引内部组织结构来描述；在mongodb中的索引我们是从索引构建的位置来描述；mongodb中的索引有单键索引、组合索引、多键索引、空间索引、文本索引和hash索引；所谓单键索引是指构建在一个字段上的索引；组合索引指构建在多个字段上的索引；多键索引指将索引构建在一个键的值是一个子文档的字段上；我们知道文档和文档是可以嵌套的，这也意味着一个文档内部可以引用另一个文档，一个文档中的某个键对应的值也可以是另外一个子文档；我们把这种索引构建在一个文档中的某个键是一个子文档的某个字段上的索引叫做多键索引，它和单键索引不是对应的；空间索引指基于位置查询的索引，但通常这种索引只有用到特定的方法来查询时，它才会生效，比如使用基于空间位置的函数；文本索引指支持搜索整个文档中的文本信息，通常这种索引我们也叫全文索引；hash索引指把某个字段的值做hash计算后组织的索引；这种索引有个特点就是时间复杂度是o(1)；不管数据有多少，在查找数据时所用到的时间都是一样的；之所以时间复杂度是o(1)，原因是hash计算每一个值都是唯一的；这种索引的查找方式有点类似键值查找，不同的是hash背后对应的是一个hash桶，先找到hash桶，然后查找到对应的hash值；hash索引和b+树索引最大的区别是，b+树索引可以查询一个范围，因为树状索引通常是把数据组织成一个有序的结构，而hash索引不能，hash索引只能查找一个精确的值，不能查找一个范围；因为hash索引背后对应的是一个hash值，每个hash值可能都不在一个hash桶，所以我们假如要查询年龄大于30岁的用户，用hash索引就不适合，因为30和31的hash值可能就不在一个hash桶上；&lt;/p&gt;
&lt;p&gt;　　5、在mongodb数据库上创建索引&lt;/p&gt;
&lt;p&gt;　　准备数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;157&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; use testdb
switched to db testdb
&amp;gt; for (i=1;i&amp;lt;=1000000;i++) db.peoples.insert({name:&quot;people&quot;+i,age:(i%120),classes:(i%20)})
WriteResult({ &quot;nInserted&quot; : 1 })
&amp;gt; db.peoples.find().count()
1000000
&amp;gt; db.peoples.find()
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543326&quot;), &quot;name&quot; : &quot;people1&quot;, &quot;age&quot; : 1, &quot;classes&quot; : 1 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543327&quot;), &quot;name&quot; : &quot;people2&quot;, &quot;age&quot; : 2, &quot;classes&quot; : 2 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543328&quot;), &quot;name&quot; : &quot;people3&quot;, &quot;age&quot; : 3, &quot;classes&quot; : 3 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543329&quot;), &quot;name&quot; : &quot;people4&quot;, &quot;age&quot; : 4, &quot;classes&quot; : 4 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54332a&quot;), &quot;name&quot; : &quot;people5&quot;, &quot;age&quot; : 5, &quot;classes&quot; : 5 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54332b&quot;), &quot;name&quot; : &quot;people6&quot;, &quot;age&quot; : 6, &quot;classes&quot; : 6 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54332c&quot;), &quot;name&quot; : &quot;people7&quot;, &quot;age&quot; : 7, &quot;classes&quot; : 7 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54332d&quot;), &quot;name&quot; : &quot;people8&quot;, &quot;age&quot; : 8, &quot;classes&quot; : 8 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54332e&quot;), &quot;name&quot; : &quot;people9&quot;, &quot;age&quot; : 9, &quot;classes&quot; : 9 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54332f&quot;), &quot;name&quot; : &quot;people10&quot;, &quot;age&quot; : 10, &quot;classes&quot; : 10 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543330&quot;), &quot;name&quot; : &quot;people11&quot;, &quot;age&quot; : 11, &quot;classes&quot; : 11 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543331&quot;), &quot;name&quot; : &quot;people12&quot;, &quot;age&quot; : 12, &quot;classes&quot; : 12 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543332&quot;), &quot;name&quot; : &quot;people13&quot;, &quot;age&quot; : 13, &quot;classes&quot; : 13 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543333&quot;), &quot;name&quot; : &quot;people14&quot;, &quot;age&quot; : 14, &quot;classes&quot; : 14 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543334&quot;), &quot;name&quot; : &quot;people15&quot;, &quot;age&quot; : 15, &quot;classes&quot; : 15 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543335&quot;), &quot;name&quot; : &quot;people16&quot;, &quot;age&quot; : 16, &quot;classes&quot; : 16 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543336&quot;), &quot;name&quot; : &quot;people17&quot;, &quot;age&quot; : 17, &quot;classes&quot; : 17 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543337&quot;), &quot;name&quot; : &quot;people18&quot;, &quot;age&quot; : 18, &quot;classes&quot; : 18 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543338&quot;), &quot;name&quot; : &quot;people19&quot;, &quot;age&quot; : 19, &quot;classes&quot; : 19 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543339&quot;), &quot;name&quot; : &quot;people20&quot;, &quot;age&quot; : 20, &quot;classes&quot; : 0 }
Type &quot;it&quot; for more
&amp;gt; it
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54333a&quot;), &quot;name&quot; : &quot;people21&quot;, &quot;age&quot; : 21, &quot;classes&quot; : 1 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54333b&quot;), &quot;name&quot; : &quot;people22&quot;, &quot;age&quot; : 22, &quot;classes&quot; : 2 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54333c&quot;), &quot;name&quot; : &quot;people23&quot;, &quot;age&quot; : 23, &quot;classes&quot; : 3 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54333d&quot;), &quot;name&quot; : &quot;people24&quot;, &quot;age&quot; : 24, &quot;classes&quot; : 4 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54333e&quot;), &quot;name&quot; : &quot;people25&quot;, &quot;age&quot; : 25, &quot;classes&quot; : 5 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54333f&quot;), &quot;name&quot; : &quot;people26&quot;, &quot;age&quot; : 26, &quot;classes&quot; : 6 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543340&quot;), &quot;name&quot; : &quot;people27&quot;, &quot;age&quot; : 27, &quot;classes&quot; : 7 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543341&quot;), &quot;name&quot; : &quot;people28&quot;, &quot;age&quot; : 28, &quot;classes&quot; : 8 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543342&quot;), &quot;name&quot; : &quot;people29&quot;, &quot;age&quot; : 29, &quot;classes&quot; : 9 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543343&quot;), &quot;name&quot; : &quot;people30&quot;, &quot;age&quot; : 30, &quot;classes&quot; : 10 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543344&quot;), &quot;name&quot; : &quot;people31&quot;, &quot;age&quot; : 31, &quot;classes&quot; : 11 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543345&quot;), &quot;name&quot; : &quot;people32&quot;, &quot;age&quot; : 32, &quot;classes&quot; : 12 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543346&quot;), &quot;name&quot; : &quot;people33&quot;, &quot;age&quot; : 33, &quot;classes&quot; : 13 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543347&quot;), &quot;name&quot; : &quot;people34&quot;, &quot;age&quot; : 34, &quot;classes&quot; : 14 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543348&quot;), &quot;name&quot; : &quot;people35&quot;, &quot;age&quot; : 35, &quot;classes&quot; : 15 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e543349&quot;), &quot;name&quot; : &quot;people36&quot;, &quot;age&quot; : 36, &quot;classes&quot; : 16 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54334a&quot;), &quot;name&quot; : &quot;people37&quot;, &quot;age&quot; : 37, &quot;classes&quot; : 17 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54334b&quot;), &quot;name&quot; : &quot;people38&quot;, &quot;age&quot; : 38, &quot;classes&quot; : 18 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54334c&quot;), &quot;name&quot; : &quot;people39&quot;, &quot;age&quot; : 39, &quot;classes&quot; : 19 }
{ &quot;_id&quot; : ObjectId(&quot;5fa943987a7deafb9e54334d&quot;), &quot;name&quot; : &quot;people40&quot;, &quot;age&quot; : 40, &quot;classes&quot; : 0 }
Type &quot;it&quot; for more
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：创建测试数据可以使用循环的方式，它这里的循环和c语言中的循环是一样的；在mongodb中查看数据，当数据量过多时，它不会一次性全部显示，而是分页显示，每次默认显示20条；键入it命令可以显示下一页；&lt;/p&gt;
&lt;p&gt;　　在mongodb上创建索引，语法格式：db.mycoll.ensureIndex(keypattern[,options])或者db.mycoll.createIndex(keypattern[,options])&lt;/p&gt;
&lt;p&gt;　　在name字段上创建索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.ensureIndex({name:1})
{
        &quot;createdCollectionAutomatically&quot; : false,
        &quot;numIndexesBefore&quot; : 1,
        &quot;numIndexesAfter&quot; : 2,
        &quot;ok&quot; : 1
}
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：这里的name是指字段名称，而非索引名称；后面的1表示升序，-1表示降序；&lt;/p&gt;
&lt;p&gt;　　查看索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.getIndices()
[
        {
                &quot;v&quot; : 2,
                &quot;key&quot; : {
                        &quot;_id&quot; : 1
                },
                &quot;name&quot; : &quot;_id_&quot;
        },
        {
                &quot;v&quot; : 2,
                &quot;key&quot; : {
                        &quot;name&quot; : 1
                },
                &quot;name&quot; : &quot;name_1&quot;
        }
]
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面返回的结果可以看到，peoples这个集合上有两个索引，一个名为_id_，其对应的字段为_id，以升序的方式排列；一个名为name_1，其对应字段为name，以升序的方式排列；默认不给索引取名，它就是字段名后面加下划线，再加表示升序或降序的数字；如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201109214544501-1812557830.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　删除索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.dropIndex(&quot;name_1&quot;)
{ &quot;nIndexesWas&quot; : 3, &quot;ok&quot; : 1 }
&amp;gt; db.peoples.dropIndex(&quot;age_-1&quot;)
{ &quot;nIndexesWas&quot; : 2, &quot;ok&quot; : 1 }
&amp;gt; db.peoples.getIndices()
[ { &quot;v&quot; : 2, &quot;key&quot; : { &quot;_id&quot; : 1 }, &quot;name&quot; : &quot;_id_&quot; } ]
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：删除索引需要指定索引名称，并且需要用引号引起来；&lt;/p&gt;
&lt;p&gt;　　在name字段上构建唯一键索引&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201109215531996-470887983.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：创建唯一键索引，我们只需要在创建索引时加上unique：true这个选项即可；所谓唯一键是指我们指定的字段上的值必须是唯一的；如果在我们在插入对应字段时和之前有的数据重复，此时会插入失败；&lt;/p&gt;
&lt;p&gt;　　验证：插入一条name字段值为peoples23的数据，看看是否能够插入成功呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201109220021723-1050646025.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到当我们在name字段上构建唯一键索引后，在插入name字段有相同值的数据时，它告诉我们说插入的数据重复；不允许我们插入；说明我们创建的唯一键索引生效了；&lt;/p&gt;
&lt;p&gt;　　重建索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.reIndex()
{
        &quot;nIndexesWas&quot; : 2,
        &quot;nIndexes&quot; : 2,
        &quot;indexes&quot; : [
                {
                        &quot;v&quot; : 2,
                        &quot;key&quot; : {
                                &quot;_id&quot; : 1
                        },
                        &quot;name&quot; : &quot;_id_&quot;
                },
                {
                        &quot;v&quot; : 2,
                        &quot;unique&quot; : true,
                        &quot;key&quot; : {
                                &quot;name&quot; : 1
                        },
                        &quot;name&quot; : &quot;name_1&quot;
                }
        ],
        &quot;ok&quot; : 1
}
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：如果我们要修改索引，可以删除重新键，上面的reIndex不能实现修改原有索引的属性信息；&lt;/p&gt;
&lt;p&gt;　　构建索引并指定为后台构建，释放当前shell&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.createIndex({age:-1},{background:true})
{
        &quot;createdCollectionAutomatically&quot; : false,
        &quot;numIndexesBefore&quot; : 2,
        &quot;numIndexesAfter&quot; : 3,
        &quot;ok&quot; : 1
}
&amp;gt; db.peoples.getIndices()
[
        {
                &quot;v&quot; : 2,
                &quot;key&quot; : {
                        &quot;_id&quot; : 1
                },
                &quot;name&quot; : &quot;_id_&quot;
        },
        {
                &quot;v&quot; : 2,
                &quot;unique&quot; : true,
                &quot;key&quot; : {
                        &quot;name&quot; : 1
                },
                &quot;name&quot; : &quot;name_1&quot;
        },
        {
                &quot;v&quot; : 2,
                &quot;key&quot; : {
                        &quot;age&quot; : -1
                },
                &quot;name&quot; : &quot;age_-1&quot;,
                &quot;background&quot; : true
        }
]
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　删除所有手动构建的索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.dropIndexes()
{
        &quot;nIndexesWas&quot; : 3,
        &quot;msg&quot; : &quot;non-_id indexes dropped for collection&quot;,
        &quot;ok&quot; : 1
}
&amp;gt; db.peoples.getIndices()
[ { &quot;v&quot; : 2, &quot;key&quot; : { &quot;_id&quot; : 1 }, &quot;name&quot; : &quot;_id_&quot; } ]
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建组合索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.createIndex({name:1,age:1},{background:true})
{
        &quot;createdCollectionAutomatically&quot; : false,
        &quot;numIndexesBefore&quot; : 1,
        &quot;numIndexesAfter&quot; : 2,
        &quot;ok&quot; : 1
}
&amp;gt; db.peoples.getIndices()
[
        {
                &quot;v&quot; : 2,
                &quot;key&quot; : {
                        &quot;_id&quot; : 1
                },
                &quot;name&quot; : &quot;_id_&quot;
        },
        {
                &quot;v&quot; : 2,
                &quot;key&quot; : {
                        &quot;name&quot; : 1,
                        &quot;age&quot; : 1
                },
                &quot;name&quot; : &quot;name_1_age_1&quot;,
                &quot;background&quot; : true
        }
]
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　以name字段为条件查询数据，看看mongodb查询过程&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;63&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.find({name:&quot;people1221&quot;}).explain()
{
        &quot;queryPlanner&quot; : {
                &quot;plannerVersion&quot; : 1,
                &quot;namespace&quot; : &quot;testdb.peoples&quot;,
                &quot;indexFilterSet&quot; : false,
                &quot;parsedQuery&quot; : {
                        &quot;name&quot; : {
                                &quot;$eq&quot; : &quot;people1221&quot;
                        }
                },
                &quot;queryHash&quot; : &quot;01AEE5EC&quot;,
                &quot;planCacheKey&quot; : &quot;4C5AEA2C&quot;,
                &quot;winningPlan&quot; : {
                        &quot;stage&quot; : &quot;FETCH&quot;,
                        &quot;inputStage&quot; : {
                                &quot;stage&quot; : &quot;IXSCAN&quot;,
                                &quot;keyPattern&quot; : {
                                        &quot;name&quot; : 1,
                                        &quot;age&quot; : 1
                                },
                                &quot;indexName&quot; : &quot;name_1_age_1&quot;,
                                &quot;isMultiKey&quot; : false,
                                &quot;multiKeyPaths&quot; : {
                                        &quot;name&quot; : [ ],
                                        &quot;age&quot; : [ ]
                                },
                                &quot;isUnique&quot; : false,
                                &quot;isSparse&quot; : false,
                                &quot;isPartial&quot; : false,
                                &quot;indexVersion&quot; : 2,
                                &quot;direction&quot; : &quot;forward&quot;,
                                &quot;indexBounds&quot; : {
                                        &quot;name&quot; : [
                                                &quot;[\&quot;people1221\&quot;, \&quot;people1221\&quot;]&quot;
                                        ],
                                        &quot;age&quot; : [
                                                &quot;[MinKey, MaxKey]&quot;
                                        ]
                                }
                        }
                },
                &quot;rejectedPlans&quot; : [ ]
        },
        &quot;serverInfo&quot; : {
                &quot;host&quot; : &quot;node01.test.org&quot;,
                &quot;port&quot; : 27017,
                &quot;version&quot; : &quot;4.4.1&quot;,
                &quot;gitVersion&quot; : &quot;ad91a93a5a31e175f5cbf8c69561e788bbc55ce1&quot;
        },
        &quot;ok&quot; : 1
}
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面返回的结果可以看到在本次查询是IXSCAN（索引扫描），所以查找很快就返回了；同时也显示了索引相关的信息；&lt;/p&gt;
&lt;p&gt;　　组合name和age字段条件查询，看看是否命中索引？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;65&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;gt; db.peoples.find({$and:[{age:{$lt:80}},{name:{$gt:&quot;people200&quot;}}]}).explain()
{
        &quot;queryPlanner&quot; : {
                &quot;plannerVersion&quot; : 1,
                &quot;namespace&quot; : &quot;testdb.peoples&quot;,
                &quot;indexFilterSet&quot; : false,
                &quot;parsedQuery&quot; : {
                        &quot;$and&quot; : [
                                {
                                        &quot;age&quot; : {
                                                &quot;$lt&quot; : 80
                                        }
                                },
                                {
                                        &quot;name&quot; : {
                                                &quot;$gt&quot; : &quot;people200&quot;
                                        }
                                }
                        ]
                },
                &quot;queryHash&quot; : &quot;96038BC4&quot;,
                &quot;planCacheKey&quot; : &quot;E71214BA&quot;,
                &quot;winningPlan&quot; : {
                        &quot;stage&quot; : &quot;FETCH&quot;,
                        &quot;inputStage&quot; : {
                                &quot;stage&quot; : &quot;IXSCAN&quot;,
                                &quot;keyPattern&quot; : {
                                        &quot;name&quot; : 1,
                                        &quot;age&quot; : 1
                                },
                                &quot;indexName&quot; : &quot;name_1_age_1&quot;,
                                &quot;isMultiKey&quot; : false,
                                &quot;multiKeyPaths&quot; : {
                                        &quot;name&quot; : [ ],
                                        &quot;age&quot; : [ ]
                                },
                                &quot;isUnique&quot; : false,
                                &quot;isSparse&quot; : false,
                                &quot;isPartial&quot; : false,
                                &quot;indexVersion&quot; : 2,
                                &quot;direction&quot; : &quot;forward&quot;,
                                &quot;indexBounds&quot; : {
                                        &quot;name&quot; : [
                                                &quot;(\&quot;people200\&quot;, {})&quot;
                                        ],
                                        &quot;age&quot; : [
                                                &quot;[-inf.0, 80.0)&quot;
                                        ]
                                }
                        }
                },
                &quot;rejectedPlans&quot; : [ ]
        },
        &quot;serverInfo&quot; : {
                &quot;host&quot; : &quot;node01.test.org&quot;,
                &quot;port&quot; : 27017,
                &quot;version&quot; : &quot;4.4.1&quot;,
                &quot;gitVersion&quot; : &quot;ad91a93a5a31e175f5cbf8c69561e788bbc55ce1&quot;
        },
        &quot;ok&quot; : 1
}
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到我们组合两个字段做条件范围查询也是可以正常索引扫描；&lt;/p&gt;
</description>
<pubDate>Mon, 09 Nov 2020 15:48:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>前文我们聊到了MongoDB的简介、安装和对collection的CRUD操作，回顾请参考https://www.cnblogs.com/qiuhom-1874/p/13941797.html；今天我</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/13950287.html</dc:identifier>
</item>
<item>
<title>【Kubernetes学习笔记】-使用Minikube快速部署K8S单机学习环境 - IT胖</title>
<link>http://www.cnblogs.com/FLY_DREAM/p/13951719.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/FLY_DREAM/p/13951719.html</guid>
<description>&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Minikube 用于快速在本地搭建 Kubernetes 单节点集群环境，它对硬件资源没有太高的要求，方便开发人员学习试用，或者进行日常的开发。&lt;/p&gt;
&lt;p&gt;其支持大部分kubernetes的功能，列表如下&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;NodePorts&lt;/li&gt;
&lt;li&gt;ConfigMaps and Secrets&lt;/li&gt;
&lt;li&gt;Dashboards&lt;/li&gt;
&lt;li&gt;Container Runtime: Docker, and rkt&lt;/li&gt;
&lt;li&gt;Enabling CNI (Container Network Interface)&lt;/li&gt;
&lt;li&gt;Ingress&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;Minikube&lt;/a&gt; 支持 Windows、macOS、Linux 三种 OS，会根据平台不同，下载对应的虚拟机镜像，并在镜像内安装 k8s。&lt;/p&gt;
&lt;p&gt;目前的虚拟机技术都是基于&lt;a href=&quot;https://en.wikipedia.org/wiki/Hypervisor&quot;&gt;Hypervisor&lt;/a&gt; 来实现的，Hypervisor 规定了统一的虚拟层接口，由此 Minikube 就可以无缝切换不同的虚拟机实现，如 macOS 可以切换&lt;a href=&quot;https://github.com/moby/hyperkit&quot;&gt;hyperkit&lt;/a&gt; 或 VirtualBox， Windows 下可以切换 &lt;a href=&quot;https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v&quot;&gt;Hyper-V&lt;/a&gt; 或 VirtualBox 等。&lt;/p&gt;
&lt;p&gt;虚拟机的切换可以通过 --vm-driver 实现，如&lt;code&gt;minikube start --vm-driver hyperkit/ minikube start --vm-driver hyperv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果 Minikube 安装在内核原生就支持 LXC 的 OS 内，如 Ubuntu 等，再安装一次虚拟机显然就是对资源的浪费了，Minikube 提供了直接对接 OS 底层的方式&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;driver!=none mode&lt;/p&gt;
&lt;p&gt;&lt;code&gt;In this case minikube provisions a new docker-machine (Docker daemon/Docker host) using any supported providers. For instance: a) local provider = your Windows/Mac local host: it frequently uses VirtualBox as a hypervisor, and creates inside it a VM based on boot2docker image (configurable). In this case k8s bootstraper (kubeadm) creates all Kubernetes components inside this isolated VM. In this setup you have usually two docker daemons, your local one for development (if you installed it prior), and one running inside minikube VM. b) cloud hosts - not supported by minikube&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;driver=none mode&lt;/p&gt;
&lt;p&gt;&lt;code&gt;In this mode, your local docker host is re-used. In case no.1 there will be a performance penalty, because each VM generates some overhead, by running several system processes required by VM itself, in addition to those required by k8s components running inside VM. I think driver-mode=none is similar to &quot; HYPERLINK &quot;https://blog.alexellis.io/be-kind-to-yourself/&quot;kind&quot; version of k8s boostraper, meant for doing CI/integration tests.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;minikube-安装&quot;&gt;Minikube 安装&lt;/h2&gt;
&lt;h3 id=&quot;下载minikube&quot;&gt;下载Minikube&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;curl -Lo minikube https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.13.0/minikube-linux-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo mv minikube /usr/local/bin/&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载kubectl&quot;&gt;下载Kubectl&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl &amp;amp;&amp;amp; chmod +x kubectl &amp;amp;&amp;amp; sudo mv kubectl /usr/local/bin/&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;启动minikube&quot;&gt;启动Minikube&lt;/h3&gt;
&lt;h4 id=&quot;启动参数&quot;&gt;启动参数&lt;/h4&gt;
&lt;p&gt;启动命令：&lt;code&gt;minikube start &quot;参数&quot;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;- --image-mirror-country cn 将缺省利用 registry.cn-hangzhou.aliyuncs.com/google_containers 作为安装Kubernetes的容器镜像仓库，
- --iso-url=*** 利用阿里云的镜像地址下载相应的 .iso 文件
- --cpus=2: 为minikube虚拟机分配CPU核数
- --memory=2000mb: 为minikube虚拟机分配内存数
- --kubernetes-version=***: minikube 虚拟机将使用的 kubernetes 版本 ,e.g. --kubernetes-version v 1.17.3
- --docker-env http_proxy 传递代理地址

默认启动使用的是 VirtualBox 驱动，使用 --vm-driver 参数可以指定其它驱动
# https://minikube.sigs.k8s.io/docs/drivers/
- --vm-driver=none 表示用容器；
- --vm-driver=virtualbox 表示用虚拟机；

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; To use kubectl or minikube commands as your own user, you may need to relocate them. For example, to overwrite your own settings, run:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;    sudo mv /root/.kube /root/.minikube $HOME
    sudo chown -R $USER $HOME/.kube $HOME/.minikube
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;示例&quot;&gt;示例&lt;/h4&gt;
&lt;h5 id=&quot;--vm-driverkvm2&quot;&gt;--vm-driver=kvm2&lt;/h5&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/drivers/kvm2/&quot;&gt;https://minikube.sigs.k8s.io/docs/drivers/kvm2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;minikube start --image-mirror-country cn --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --registry-mirror=https://ovfftd6p.mirror.aliyuncs.com --driver=kvm2&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;--vm-driverhyperv&quot;&gt;--vm-driver=hyperv&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# 创建基于Hyper-V的Kubernetes测试环境
minikube.exe start --image-mirror-country cn \
    --iso-url=https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/iso/minikube-v1.5.0.iso \
    --registry-mirror=https://xxxxxx.mirror.aliyuncs.com \
    --vm-driver=&quot;hyperv&quot; \
    --hyperv-virtual-switch=&quot;MinikubeSwitch&quot; \
    --memory=4096
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;--vm-drivernone&quot;&gt;--vm-driver=none&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;sudo minikube start --image-mirror-country cn --vm-driver=none&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/owen2016/pic-hub/raw/master/pics/20201109232454.png&quot; alt=&quot;minikube-install&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo minikube start --vm-driver=none --docker-env http_proxy=http://$host_IP:8118 --docker-env https_proxy=https:// $host_IP:8118&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中$host_IP指的是host的IP，可以通过ifconfig查看；比如在我这台机器是10.0.2.15，用virtualbox部署，则用下列命令启动minikube&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo minikube start --vm-driver=none --docker-env http_proxy=http://10.0.2.15:8118 --docker-env https_proxy=https://10.0.2.15:8118&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;minikube-状态查看&quot;&gt;Minikube 状态查看&lt;/h4&gt;
&lt;p&gt;启动完毕，将会运行一个单节点的Kubernetes集群。Minikube也已经把kubectl配置好，因此无需做额外的工作就可以管理容器。&lt;br/&gt;Minikube 创建一个Host-Only（仅主机模式）网络接口，通过这个接口可以路由到节点。如果要与运行的pods或services进行交互，你应该通过这个地址发送流量。使用 &lt;code&gt;minikube ip&lt;/code&gt; 命令可以查看这个地址：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/owen2016/pic-hub/raw/master/pics/20201109232554.png&quot; alt=&quot;minikube-status&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;minikube-使用&quot;&gt;Minikube 使用&lt;/h2&gt;
&lt;p&gt;用户使用Minikube CLI管理虚拟机上的Kubernetes环境，比如：启动，停止，删除，获取状态等。一旦Minikube虚拟机启动，用户就可以使用熟悉的Kubectl CLI在Kubernetes集群上执行操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/owen2016/pic-hub/raw/master/1603727554_20200924133259699_1050517294.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# 查看集群的所有资源
kubectl get all

# 进入节点服务器
minikube ssh

# 执行节点服务器命令，例如查看节点 docker info
minikube ssh -- docker info

# 删除集群, 删除 ~/.minikube 目录缓存的文件
minikube delete

# 关闭集群
minikube stop

## 销毁集群
minikube stop &amp;amp;&amp;amp; minikube delete
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;minikube-插件&quot;&gt;Minikube 插件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo minikube addons list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/owen2016/pic-hub/raw/master/1603727554_20200924163633817_1703858149.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Minikube 默认集成了 Kubernetes Dashboard。执行 &lt;code&gt;minikube dashboard&lt;/code&gt; 命令后，默认会打开浏览器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/owen2016/pic-hub/raw/master/pics/20201109232530.png&quot; alt=&quot;minikube-dashboard&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装遇到的问题&quot;&gt;安装遇到的问题&lt;/h2&gt;
&lt;h3 id=&quot;问题-1&quot;&gt;问题-1&lt;/h3&gt;
&lt;p&gt;Failed to save config: failed to acquire lock for /root/.minikube/profiles/minikube/config.json: unable to open /tmp/juju-mk270d1b5db5965f2dc9e9e25770a63417031943: permission denied&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/owen2016/pic-hub/raw/master/1603727554_20200924141404177_1210938693.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;sudo rm -rf /tmp/juju-mk*
sudo rm -rf /tmp/minikube.*
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;问题-2&quot;&gt;问题-2&lt;/h3&gt;
&lt;p&gt;unable to read client-cert /root/.minikube/client.crt for minikube due to open /root/.minikube/client.crt: permission denied&lt;br/&gt;unable to read client-key /root/.minikube/client.key for minikube due to open /root/.minikube/client.key: permission denied&lt;br/&gt;unable to read certificate-authority /root/.minikube/ca.crt for minikube due to open /root/.minikube/ca.crt: permission denied&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;minikube stop
minikube delete
rm -rf ~/.kube
rm -rf ~/.minikube
sudo rm -rf /var/lib/minikube
sudo rm /var/lib/kubeadm.yaml
sudo rm -rf /etc/kubernetes
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://stackoverflow.com/questions/58541104/minikube-wont-work-after-ubuntu-upgrade-to-19-10&quot;&gt;https://stackoverflow.com/questions/58541104/minikube-wont-work-after-ubuntu-upgrade-to-19-10&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题-3&quot;&gt;问题-3&lt;/h3&gt;
&lt;p&gt;Error restarting cluster: restarting kube-proxy: waiting for kube-proxy to be up for configmap update: timed out waiting for the condition&lt;/p&gt;
&lt;p&gt;通过 minikube delete，minikube start 可以解决&lt;/p&gt;
&lt;h2 id=&quot;部署应用&quot;&gt;部署应用&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;$ kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080
deployment.apps/hello-minikube created

#访问应用
$ kubectl expose deployment hello-minikube --type=NodePort
service/hello-minikube exposed

#获取服务地址
$ minikube service hello-minikube --url
http://192.168.99.105:30555

&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/221687&quot;&gt;Minikube - Kubernetes本地实验环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tutorials/hello-minikube/&quot;&gt;Hello Minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/minikube/&quot;&gt;Running Kubernetes Locally via Minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-minikube/%22&quot;&gt;Install Minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Mon, 09 Nov 2020 15:45:00 +0000</pubDate>
<dc:creator>IT胖</dc:creator>
<og:description>介绍 https://minikube.sigs.k8s.io/docs/ Minikube 用于快速在本地搭建 Kubernetes 单节点集群环境，它对硬件资源没有太高的要求，方便开发人员学习试用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/FLY_DREAM/p/13951719.html</dc:identifier>
</item>
</channel>
</rss>