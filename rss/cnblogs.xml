<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>浅谈Java中的栈和堆 - 夏天里的Jasmine</title>
<link>http://www.cnblogs.com/qianjinyan/p/10352749.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qianjinyan/p/10352749.html</guid>
<description>
&lt;p&gt;&lt;span&gt;人们常说堆栈堆栈，堆和栈是内存中两处不一样的地方，什么样的数据存在栈，又是什么样的数据存在堆中？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里浅谈Java中的栈和堆&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，将结论写在前面，后面再用例子加以验证。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Java的栈中存储以下类型数据，栈对应的英文单词是Stack&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基本类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;引用类型变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205144938262-1443083413.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享&lt;/strong&gt;。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;栈中主要存放一些基本类型的变量（int, short, long, byte, float, double, boolean, char）和对象句柄。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;栈有一个很重要的特殊性，就是存在栈中的数据可以共享。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Java的堆中存储以下类型数据，堆对应的英文单词是Heap&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实例对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205140425618-56059613.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在函数中定义的一些&lt;span&gt;&lt;strong&gt;基本类型的变量(8种)和对象的引用变量&lt;/strong&gt;&lt;/span&gt;都是在函数的&lt;span&gt;&lt;strong&gt;栈Stack&lt;/strong&gt;&lt;/span&gt;内存中分配。当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;堆Heap&lt;/strong&gt;&lt;/span&gt;内存用于存放由new创建的对象和数组。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，&lt;strong&gt;还可以在栈中定义一个特殊的变量&lt;/strong&gt;，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;引用变量是普通变量，定义时在栈中分配内存&lt;/strong&gt;&lt;/span&gt;，引用变量在程序运行到作用域外释放。而数组＆对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，数组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。这个也是java比较占内存的主要原因，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Person {

    int age;

}


public class LearnHeap {


    public static void main(String args[]){

        int a=10;
        Person person = new Person();
        person.age =20;

        change(a,person);
        System.out.println(&quot;a=&quot;+ a+&quot;,and person.age = &quot;+person.age);

    }

    static void change(int a1, Person person){

        a1 = 11;
        person.age= 21;
        System.out.println(&quot;a1=&quot;+ a1+&quot;,and age1 = &quot;+person);

    }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　两次的输出结果是什么？猜测下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205141351602-2096315519.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;以上程序内存加载的执行步骤：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第1步&lt;/strong&gt; —— main()函数是程序入口，JVM先执行，首先将main方法压入栈中，在栈内存中开辟一个空间，存放int类型变量a，同时附值10。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　在堆中分配一片区域，用来存放和创建Person对象，这片内存区域会有属于自己的内存地址，假设是1001，然后给成员变量赋值，age=20&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　执行结束后，构造防范弾栈，Person创建完成，将Person的内存地址1001赋值给person（此处person小写，是引用变量类型）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第2步&lt;/strong&gt; —— JVM执行change()函数，在栈内存中又开辟一个新的空间，存放int类型变量a和对象Person中person&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　此时main空间与change空间并存，同时运行，互不影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第3步&lt;/strong&gt; —— change()方法执行，将a赋值为11，person对象的堆中年龄age赋值为21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第4步&lt;/strong&gt; —— change()执行完毕，变量a立即释放，空间消失。但是main()函数空间仍存在，main中的变量a仍然存在，不受影响。而person在堆中对应的地址，所指的age已经赋值=21&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;实际输出如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205140307120-1710004851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果a()方法中的基本类型(8个)变量x传入b()方法中，并在b()中进行了修改，则a()方法中的x的值保持不变 &lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;如果a()方法中的引用类型        变量x传入b()方法中，并在b()中进行了修改，则a()方法中的x的值与b（）保持一致&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205142327701-11386435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面对8中基本类型进行简单的测试&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package heapandStack;

public class LearnHeap02 {

    public static void main(String args[]){


        byte b=10;
        short s=20;
        int i=30;
        long l =40l;

        float f =12.34f;
        double d = 100.123d;

        char c = 'A';
        boolean flag = true;

        change(b,s,i,l,f,d,c,flag);

        System.out.println(b);
        System.out.println(s);
        System.out.println(i);
        System.out.println(l);


        System.out.println(f);
        System.out.println(d);
        System.out.println(c);
        System.out.println(flag);

    }

    static void change(byte a, short b, int c,long d, float f, double g, char h,boolean x){

        a =11;
        b=21;
        c =31;
        d =41l;
        f=12.99f;
        g= 200.123d;
        h ='V';
        x =false;

        System.out.println(a);
        System.out.println(b);
        System.out.println(c);
        System.out.println(d);


        System.out.println(f);
        System.out.println(g);
        System.out.println(h);
        System.out.println(x);

    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面测试一下数组，是不是属于实例对象类型&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class LearnHeap03 {

    public static void main(String args[]){

     int a[] ={1,2,3};
     change(a);
        for(int i:a)
            System.out.print(i+&quot; &quot;);

    }

    static void change(int[] a){
        a[0]=4;
        a[1]=5;
        for(int i:a)
            System.out.print(i+&quot; &quot;);
        System.out.println(&quot;============ &quot;);

    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　从结果看出，数组的值被改变了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205144318704-968810208.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; Java种8种基本数据类型，并不包含String，String的值会被change函数改变吗？String应该存在栈中，还是堆中呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先直接上测试代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Learn04 {

    public static void main(String args[]){

        String s1 = new String(&quot;abcd&quot;);
        String s2 = &quot;asdfghjkl&quot;;
        System.out.println(s1+&quot;, &quot;+s2);
        change(s1,s2);
        System.out.println(s1+&quot;, &quot;+s2);

    }

    static void change(String s1,String s2){
        s1 =&quot;123456&quot;;
        s2 =&quot;000000&quot;;
        System.out.println(s1+&quot;, &quot;+s2);

    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;两种的形式来创建String，第一种是用new()来新建对象的，它会在存放于堆中。每调用一次就会创建一个新的对象。 而第二种是先在栈中创建一个对String类的对象引用变量s2，然后查找栈中有没有存放&quot;asdfghjkl&quot;，如果没有，则将&quot;asdfghjkl&quot;存放进栈，并令str指 向”abc”，如果已经有”asdfghjkl” 则直接令s2指向“asdfghjkl”。 &lt;/span&gt;　&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205151023844-740899568.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;既然讲到两种形式创建String，下面讲一个String两种形式创建的区别，先看一段代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Learn05 {

    public static void main(String args[]){

        String s1 = new String(&quot;abcd&quot;);
        String s2 = &quot;abcd&quot;;
        boolean a =s1.equals(s2);
        boolean b =(s1==s2);

        System.out.println(a);
        System.out.println(b);

        String s3 = &quot;abcd&quot;;
        boolean a1 =s3.equals(s2);
        boolean b1 =(s3==s2);

        System.out.println(a1);
        System.out.println(b1);


    }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201902/1064427-20190205154651431-1595110500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 05 Feb 2019 06:44:00 +0000</pubDate>
<dc:creator>夏天里的Jasmine</dc:creator>
<og:description>人们常说堆栈堆栈，堆和栈是内存中两处不一样的地方，什么样的数据存在栈，又是什么样的数据存在堆中？ 这里浅谈Java中的栈和堆 首先，将结论写在前面，后面再用例子加以验证。 Java的栈中存储以下类型数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qianjinyan/p/10352749.html</dc:identifier>
</item>
<item>
<title>IDEA导入eclipse项目并部署到tomcat - 一只小猿</title>
<link>http://www.cnblogs.com/chen-proj/p/10352738.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chen-proj/p/10352738.html</guid>
<description>
&lt;p&gt;1.首先引入本地项目&lt;/p&gt;
&lt;p&gt; 我这里是maven项目就直接选择的以maven项目引入，如果选eclipse的话，pom文件不会被初始化，部署tomcat会出问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205133850376-1192324732.png&quot; alt=&quot;&quot; width=&quot;477&quot; height=&quot;256&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205134614472-941434002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 这项选完后，就一路next，jdk可以在引入的时候选择，也可以引入后在配置，注意jdk版本要与项目一致&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205134938954-1712811840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205134149146-59749988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在项目就从成功引入进来了，可能现在项目会有一大堆红杠，是因为项目还没有配置环境&lt;/p&gt;
&lt;p&gt;如果有maven之外的包在原项目里的话，可以先”build path“&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205135846028-1856166031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2.项目引入进来后就开始配置项目&lt;/p&gt;
&lt;p&gt;首先设置项目，点击file &amp;gt; project structure &lt;/p&gt;
&lt;p&gt;这里选择与项目匹配的jdk&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205135409527-1205414043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;jdk配好后，配置tomcat jar包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140127733-760379922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择添加library&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140213821-609263355.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140231070-253918424.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140316859-2122854145.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140341420-1964902310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在可以看到项目的红杠都消失了&lt;/p&gt;
&lt;p&gt;3.添加tomcat&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140748134-2041360685.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140821980-696963366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205140937053-2045822872.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;460&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205141018773-1024626394.png&quot; alt=&quot;&quot; width=&quot;559&quot; height=&quot;305&quot;/&gt;&lt;/p&gt;
&lt;p&gt;改成项目名称&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205141136215-1478445014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择第二个&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205141203997-1293472911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 现在我们运行tomcat，可以看到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205141305199-1077247889.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 运行完成后会自动弹出一个项目根目录的网页&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205141415496-1601976350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;报404是因为我的这个项目没有配置路由，随意添加一个项目里有的路径就可以了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580634/201902/1580634-20190205142021240-1312062782.png&quot; alt=&quot;&quot; width=&quot;380&quot; height=&quot;144&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果操作时遇到什么问题，可以qq联系我在线协助：1218320191,验证信息填“IDEA疑问”&lt;/p&gt;

</description>
<pubDate>Tue, 05 Feb 2019 06:26:00 +0000</pubDate>
<dc:creator>一只小猿</dc:creator>
<og:description>1.首先引入本地项目 我这里是maven项目就直接选择的以maven项目引入，如果选eclipse的话，pom文件不会被初始化，部署tomcat会出问题 这项选完后，就一路next，jdk可以在引入的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chen-proj/p/10352738.html</dc:identifier>
</item>
<item>
<title>编程范式 —— 函数式编程入门 - 牧云云</title>
<link>http://www.cnblogs.com/MuYunyun/p/10352716.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MuYunyun/p/10352716.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/5/168bc270db26fcf2?w=640&amp;amp;h=280&amp;amp;f=jpeg&amp;amp;s=9651&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该系列会有 3 篇文章，分别介绍什么是函数式编程、剖析函数式编程库、以及函数式编程在 React 中的应用，欢迎关注我的 &lt;a href=&quot;https://github.com/MuYunyun/blog&quot;&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;命令式编程和声明式编程&quot;&gt;命令式编程和声明式编程&lt;/h3&gt;
&lt;p&gt;拿泡茶这个事例进行区分命令式编程和声明式编程&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;命令式编程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1.烧开水(为第一人称)&lt;br/&gt;2.拿个茶杯&lt;br/&gt;3.放茶叶&lt;br/&gt;4.冲水&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;声明式编程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1.给我泡杯茶(为第二人称)&lt;/p&gt;
&lt;p&gt;举个 demo&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 命令式编程
const convert = function(arr) {
  const result = []
  for (let i = 0; i &amp;lt; arr.length; i++) {
    result[i] = arr[i].toLowerCase()
  }
  return result
}

// 声明式编程
const convert = function(arr) {
  return arr.map(r =&amp;gt; r.toLowerCase())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;什么是函数式编程&quot;&gt;什么是函数式编程&lt;/h3&gt;
&lt;p&gt;函数式编程是声明式编程的范式。在函数式编程中数据在由纯函数组成的管道中传递。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;函数式编程可以用简单如&lt;code&gt;交换律、结合律、分配律&lt;/code&gt;的数学之法来帮我们简化代码的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它具有如下一些特性:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;纯粹性: 纯函数不改变除当前作用域以外的值;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 反面示例
let a = 0
const add = (b) =&amp;gt; a = a + b // 两次 add(1) 结果不一致

// 正确示例
const add = (a, b) =&amp;gt; a + b&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;数据不可变性: Immutable&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 反面示例
const arr = [1, 2]
const arrAdd = (value) =&amp;gt; {
  arr.push(value)
  return arr
}

arrAdd(3) // [1, 2, 3]
arrAdd(3) // [1, 2, 3, 3]

// 正面示例
const arr = [1, 2]
const arrAdd = (value) =&amp;gt; {
  return arr.concat(value)
}

arrAdd(3) // [1, 2, 3]
arrAdd(3) // [1, 2, 3]&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在后记 1 中对数组字符串方法是否对原值有影响作了整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;函数柯里化: 将多个入参的函数转化为一个入参的函数;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const add = a =&amp;gt; b =&amp;gt; c =&amp;gt; a + b + c
add(1)(2)(3)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;偏函数: 将多个入参的函数转化成两部分;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const add = a =&amp;gt; (b, c) =&amp;gt; a + b + c
add(1)(2, 3)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;可组合: 函数之间能组合使用&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const add = (x) =&amp;gt; x + x
const mult = (x) =&amp;gt; x * x

const addAndMult = (x) =&amp;gt; add(mult(x))&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;柯里化curry&quot;&gt;柯里化(curry)&lt;/h3&gt;
&lt;p&gt;如下是一个加法函数:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var add = (a, b, c) =&amp;gt; a + b + c

add(1, 2, 3) // 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;假如有这样一个 &lt;code&gt;curry&lt;/code&gt; 函数, 用其包装 &lt;code&gt;add&lt;/code&gt; 函数后返回一个新的函数 &lt;code&gt;curryAdd&lt;/code&gt;, 我们可以将参数 &lt;code&gt;a、b&lt;/code&gt; 进行分开传递进行调用。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var curryAdd = curry(add)

// 以下输出结果都相同
curryAdd(1, 2, 3) // 6
curryAdd(1, 2)(3) // 6
curryAdd(1)(2)(3) // 6
curryAdd(1)(2, 3) // 6&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;动手实现一个-curry-函数&quot;&gt;动手实现一个 curry 函数&lt;/h4&gt;
&lt;p&gt;核心思路: 若传进去的参数个数未达到 &lt;code&gt;curryAdd&lt;/code&gt; 的个数，则将参数缓存在闭包变量 lists 中:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function curry(fn, ...args) {
  const length = fn.length
  let lists = args || []

  let listLen
  return function (..._args) {
    lists = [...lists, ..._args]
    listLen = lists.length

    if (listLen &amp;lt; length) {
      const that = lists
      lists = []
      return curry(fn, ...that)
    } else if (listLen === length) {
      const that = lists
      lists = []
      return fn.apply(this, that)
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;代码组合compose&quot;&gt;代码组合(compose)&lt;/h3&gt;
&lt;p&gt;现在有 &lt;code&gt;toUpperCase&lt;/code&gt;、&lt;code&gt;reverse&lt;/code&gt;、&lt;code&gt;head&lt;/code&gt; 三个函数, 分别如下:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var toUpperCase = (str) =&amp;gt; str.toUpperCase()
var reverse = (arr) =&amp;gt; arr.reverse()
var head = (arr) =&amp;gt; arr[0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着使用它们实现将数组末位元素大写化输出, 可以这样做:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var reverseHeadUpperCase = (arr) =&amp;gt; toUpperCase(head(reverse(arr)))

reverseHeadUpperCase(['apple', 'banana', 'peach']) // &quot;PEACH&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时在构建 &lt;code&gt;reverseHeadUpperCase&lt;/code&gt; 函数的时候, 必须手动声明传入参数 arr, 是否能提供一个 &lt;code&gt;compose&lt;/code&gt; 函数让使用者更加友好的使用呢? 类似如下形式:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var reverseHeadUpperCase = compose(toUpperCase, head, reverse)

reverseHeadUpperCase(['apple', 'banana', 'peach']) // &quot;PEACH&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此外 &lt;code&gt;compose&lt;/code&gt; 函数符合&lt;code&gt;结合律&lt;/code&gt;, 我们可以这样子使用:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;compose(compose(toUpperCase, head), reverse)
compose(toUpperCase, compose(head, reverse))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上两种写法与 &lt;code&gt;compose(toUpperCase, head, reverse)&lt;/code&gt; 的效果完全相同, 都是依次从右到左执行传参中的函数。&lt;/p&gt;
&lt;p&gt;此外 &lt;code&gt;compose&lt;/code&gt; 和 &lt;code&gt;map&lt;/code&gt; 一起使用时也有相关的结合律, 以下两种写法效果相等&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;compose(map(f), map(g))
map(compose(f, g))&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;动手实现一个-compose-函数&quot;&gt;动手实现一个 compose 函数&lt;/h4&gt;
&lt;p&gt;代码精华集中在一行之内, 其为众多开源库(比如 Redux) 所采用。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var compose = (...args) =&amp;gt; (initValue) =&amp;gt; args.reduceRight((a, c) =&amp;gt; c(a), initValue)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;范畴论&quot;&gt;范畴论&lt;/h3&gt;
&lt;p&gt;范畴论是数学中的一个分支。可以将范畴理解为一个容器, 把原来对值的操作，现转为对容器的操作。如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/5/168bc270d15cb1cd?w=332&amp;amp;h=200&amp;amp;f=jpeg&amp;amp;s=9349&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;学习函数式编程就是学习各种函子的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数式编程中, &lt;code&gt;函子(Functor)&lt;/code&gt; 是实现了 &lt;code&gt;map&lt;/code&gt; 函数的容器, 下文中将函子视为范畴，模型可表示如下:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class Functor {
  constructor(value) {
    this.value = value
  }

  map(fn) {
    return new Functor(fn(this.value))
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是在函数式编程中, 要避免使用 &lt;code&gt;new&lt;/code&gt; 这种面向对象的编程方式, 取而代之对外暴露了一个 &lt;code&gt;of&lt;/code&gt; 的接口, 也称为 &lt;code&gt;pointed functor&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Functor.of = value =&amp;gt; new Functor(value)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;maybe-函子&quot;&gt;Maybe 函子&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Maybe 函子&lt;/code&gt;是为了解决 &lt;code&gt;this.value&lt;/code&gt; 为 null 的情形, 用法如下:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Maybe.of(null).map(r =&amp;gt; r.toUpperCase()) // null
Maybe.of('m').map(r =&amp;gt; r.toUpperCase())  // Maybe {value: &quot;M&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现代码如下:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class Maybe {
  constructor(value) {
    this.value = value
  }

  map(fn) {
    return this.value ? new Maybe(fn(this.value)) : null
  }
}

Maybe.of = value =&amp;gt; new Maybe(value)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;either-函子&quot;&gt;Either 函子&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Either 函子&lt;/code&gt; 是为了对应 &lt;code&gt;if...else...&lt;/code&gt; 的语法, 即&lt;code&gt;非左即右&lt;/code&gt;。因此可以将之拆分为 &lt;code&gt;Left&lt;/code&gt; 和 &lt;code&gt;Right&lt;/code&gt; 两个函子, 它们的用法如下:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Left.of(1).map(r =&amp;gt; r + 1)  // Left {value: 1}

Right.of(1).map(r =&amp;gt; r + 1) // Right {value: 2}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Left 函子&lt;/code&gt;实现代码如下:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class Left {
  constructor(value) {
    this.value = value
  }

  map(fn) {
    return this
  }
}

Left.of = value =&amp;gt; new Left(value)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Right 函子&lt;/code&gt;实现代码如下(其实就是上面的 &lt;code&gt;Functor&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class Right {
  constructor(value) {
    this.value = value
  }

  map(fn) {
    return new Right(fn(this.value))
  }
}

Right.of = value =&amp;gt; new Right(value)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体 &lt;code&gt;Either&lt;/code&gt; 函数只是对调用 &lt;code&gt;Left 函子&lt;/code&gt; 或 &lt;code&gt;Right 函子&lt;/code&gt; 作一层筛选, 其接收 &lt;code&gt;f&lt;/code&gt;、&lt;code&gt;g&lt;/code&gt; 两个函数以及一个函子(&lt;code&gt;Left or Right&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var Either = function(f, g, functor) {
  switch(functor.constructor) {
    case 'Left':
      return f(functor.value)
    case 'Right':
      return g(functor.value)
    default:
      return f(functor.value)
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用 demo:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Either((v) =&amp;gt; console.log('left', v), (v) =&amp;gt; console.log('def', v), left)   // left 1
Either((v) =&amp;gt; console.log('rigth', v), (v) =&amp;gt; console.log('def', v), rigth) // rigth 2&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;monad-函子&quot;&gt;Monad 函子&lt;/h4&gt;
&lt;p&gt;函子会发生嵌套, 比如下面这样:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Functor.of(Functor.of(1)) // Functor { value: Functor { value: 1 } }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Monad 函子&lt;/code&gt; 对外暴露了 &lt;code&gt;join&lt;/code&gt; 和 &lt;code&gt;flatmap&lt;/code&gt; 接口, 调用者从而可以扁平化嵌套的函子。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class Monad {
  constructor(value) {
    this.value = value
  }

  map(fn) {
    return new Monad(fn(this.value))
  }

  join() {
    return this.value
  }

  flatmap(fn) {
    return this.map(fn).join()
  }
}

Monad.of = value =&amp;gt; new Monad(value)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用方法:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// join
Monad.of(Monad.of(1).join()) // Monad { value: 1 }
Monad.of(Monad.of(1)).join() // Monad { value: 1 }

// flatmap
Monad.of(1).flatmap(r =&amp;gt; r + 1)  // 2&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Monad 函子可以运用在 I/O 这种不纯的操作上将之变为纯函数的操作，目前比较懵懂，日后补充。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;后记-1-数组字符串方法小结是否对原值有影响&quot;&gt;后记 1: 数组字符串方法小结(是否对原值有影响)&lt;/h3&gt;
&lt;h4 id=&quot;不会对原数组有影响的方法&quot;&gt;不会对原数组有影响的方法&lt;/h4&gt;
&lt;h5 id=&quot;slice&quot;&gt;slice&lt;/h5&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var test = [1, 2, 3]
var result = test.slice(0, 1)

console.log(test)   // [1, 2, 3]
console.log(result) // [1]&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;concat&quot;&gt;concat&lt;/h5&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var test = [1, 2, 3]
var result = test.concat(4)

console.log(test)   // [1, 2, 3]
console.log(result) // [1, 2, 3, 4]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;对原数组有影响的方法&quot;&gt;对原数组有影响的方法&lt;/h4&gt;
&lt;h5 id=&quot;splice这个需要特别记一下&quot;&gt;splice(这个需要特别记一下)&lt;/h5&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var test = [1, 2, 3]
var result = test.splice(0, 1)

console.log(test)   // [2, 3]
console.log(result) // [1]&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;sort&quot;&gt;sort&lt;/h5&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var arr = [2, 1, 3, 4]
arr.sort((r1, r2) =&amp;gt; (r1 - r2))

console.log(arr) // [1, 2, 3, 4]&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;reverse&quot;&gt;reverse&lt;/h5&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var test = [1, 2, 3]
var result = test.reverse()

console.log(test)   // [3, 2, 1]
console.log(result) // [3, 2, 1]&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;pushpopunshiftshift&quot;&gt;push/pop/unshift/shift&lt;/h5&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var test = [1, 2, 3]
var result = test.push(4)

console.log(test)   // [1, 2, 3, 4]
console.log(result) // 4&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;不会对原字符串造成影响的方法&quot;&gt;不会对原字符串造成影响的方法&lt;/h4&gt;
&lt;h5 id=&quot;substrsubstringslice&quot;&gt;substr/substring/slice&lt;/h5&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// substr
var test = 'abc'
var result = test.substr(0, 1)

console.log(test)   // 'abc'
console.log(result) // a

// substring
var test = 'abc'
var result = test.substring(0, 1)

console.log(test)   // 'abc'
console.log(result) // a

// slice
var test = 'abc'
var result = test.slice(0, 1)

console.log(test)   // 'abc'
console.log(result) // a&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
</description>
<pubDate>Tue, 05 Feb 2019 05:48:00 +0000</pubDate>
<dc:creator>牧云云</dc:creator>
<og:description>该系列会有 3 篇文章，分别介绍什么是函数式编程、剖析函数式编程库、以及函数式编程在 React 中的应用，欢迎关注我的 'blog' 命令式编程和声明式编程 拿泡茶这个事例进行区分命令式编程和声明式</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MuYunyun/p/10352716.html</dc:identifier>
</item>
<item>
<title>.NET ClrProfiler字节码重写实现对应用的跟踪和分析 - caozhiyuan</title>
<link>http://www.cnblogs.com/caozhiyuan/p/10352650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/caozhiyuan/p/10352650.html</guid>
<description>&lt;p&gt;Demo：&lt;a href=&quot;https://github.com/caozhiyuan/ClrProfiler.Trace&quot; target=&quot;_blank&quot;&gt;https://github.com/caozhiyuan/ClrProfiler.Trace&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;为了实现自动、无依赖地跟踪分析应用程序性能（达到商业级APM效果），作者希望能动态修改应用字节码。在相关调研之后，决定采用profiler api进行实现。&lt;/p&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;作者将对.NET ClrProfiler 字节码重写技术进行相关阐述。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview&quot; target=&quot;_blank&quot;&gt;Profiler&lt;/a&gt;是微软提供的一套跟踪和分析应用的工具，其提供了一套api可以跟踪和分析.NET程序运行情况。其原理架构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/media/profilingarch.png&quot; alt=&quot;架构图&quot; width=&quot;367&quot; height=&quot;271&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本文所使用的方式是直接对方法字节码进行重写，动态引用程序集、插入异常捕捉代码、插入执行前后代码。&lt;/p&gt;
&lt;p&gt;其中相关基础概念涉及CLI标准（&lt;a href=&quot;https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf&quot; target=&quot;_blank&quot;&gt;ECMS-355&lt;/a&gt;），CLI标准对公用语言运行时进行了详细的描述。&lt;/p&gt;
&lt;p&gt;本文主要涉及到 ：&lt;/p&gt;
&lt;p&gt;1. 程序集定义、引用&lt;/p&gt;
&lt;p&gt;2. 类型定义、引用&lt;/p&gt;
&lt;p&gt;3. 方法定义、引用&lt;/p&gt;
&lt;p&gt;4. 操作码&lt;/p&gt;
&lt;p&gt;5. 签名（&lt;a href=&quot;https://www.codeproject.com/Articles/42649/NET-file-format-Signatures-under-the-hood-Part-1&quot; target=&quot;_blank&quot;&gt;此文&lt;/a&gt;对签名格式举了很多例子，可以帮助理解）&lt;/p&gt;
&lt;h2&gt;实现&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.codeproject.com/Articles/453065/ILRewriting-for-beginners&quot; target=&quot;_blank&quot;&gt;此文&lt;/a&gt;中提供了入门级讲解，下面我们直接正题。&lt;/p&gt;
&lt;p&gt;在JIt编译时候将会对&lt;span&gt;CorProfiler类进行初始化，在此环节我们主要对于监听的事件进行订阅和配置初始化工作，我们主要关心&lt;/span&gt;&lt;span&gt;ModuleLoad事件。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
HRESULT STDMETHODCALLTYPE CorProfiler::Initialize(IUnknown *pICorProfilerInfoUnk)
    {
        const HRESULT queryHR = pICorProfilerInfoUnk-&amp;gt;QueryInterface(__uuidof(ICorProfilerInfo8), reinterpret_cast&amp;lt;void **&amp;gt;(&amp;amp;this-&amp;gt;corProfilerInfo));

        if (FAILED(queryHR))
        {
            return E_FAIL;
        }

        const DWORD eventMask = COR_PRF_MONITOR_JIT_COMPILATION |
            COR_PRF_DISABLE_TRANSPARENCY_CHECKS_UNDER_FULL_TRUST | /* helps the case where this profiler is used on Full CLR */
            COR_PRF_DISABLE_INLINING |
            COR_PRF_MONITOR_MODULE_LOADS |
            COR_PRF_DISABLE_ALL_NGEN_IMAGES;

        this-&amp;gt;corProfilerInfo-&amp;gt;SetEventMask(eventMask);

        this-&amp;gt;clrProfilerHomeEnvValue = GetEnvironmentValue(ClrProfilerHome);

        if(this-&amp;gt;clrProfilerHomeEnvValue.empty()) {
            Warn(&quot;ClrProfilerHome Not Found&quot;);
            return E_FAIL;
        }

        this-&amp;gt;traceConfig = LoadTraceConfig(this-&amp;gt;clrProfilerHomeEnvValue);
        if (this-&amp;gt;traceConfig.traceAssemblies.empty()) {
            Warn(&quot;TraceAssemblies Not Found&quot;);
            return E_FAIL;
        }

        Info(&quot;CorProfiler Initialize Success&quot;);

        return S_OK;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在ModuleLoadFinished后，我们主要获取程序集的EntryPointToken(mian方法token)、运行时mscorlib.dll（net framework）或System.Private.CoreLib.dll（netcore）程序版本基础信息以供后面动态引用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;51&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
  HRESULT STDMETHODCALLTYPE CorProfiler::ModuleLoadFinished(ModuleID moduleId, HRESULT hrStatus) 
    {
        auto module_info = GetModuleInfo(this-&amp;gt;corProfilerInfo, moduleId);
        if (!module_info.IsValid() || module_info.IsWindowsRuntime()) {
            return S_OK;
        }

        if (module_info.assembly.name == &quot;dotnet&quot;_W ||
            module_info.assembly.name == &quot;MSBuild&quot;_W)
        {
            return S_OK;
        }

        const auto entryPointToken = module_info.GetEntryPointToken();
        ModuleMetaInfo* module_metadata = new ModuleMetaInfo(entryPointToken, module_info.assembly.name);
        {
            std::lock_guard&amp;lt;std::mutex&amp;gt; guard(mapLock);
            moduleMetaInfoMap[moduleId] = module_metadata;
        }

        if (entryPointToken != mdTokenNil)
        {
            Info(&quot;Assembly:{} EntryPointToken:{}&quot;, ToString(module_info.assembly.name), entryPointToken);
        }

        if (module_info.assembly.name == &quot;mscorlib&quot;_W || module_info.assembly.name == &quot;System.Private.CoreLib&quot;_W) {
                                  
            if(!corAssemblyProperty.szName.empty()) {
                return S_OK;
            }

            CComPtr&amp;lt;IUnknown&amp;gt; metadata_interfaces;
            auto hr = corProfilerInfo-&amp;gt;GetModuleMetaData(moduleId, ofRead | ofWrite,
                IID_IMetaDataImport2,
                metadata_interfaces.GetAddressOf());
            RETURN_OK_IF_FAILED(hr);

            auto pAssemblyImport = metadata_interfaces.As&amp;lt;IMetaDataAssemblyImport&amp;gt;(
                IID_IMetaDataAssemblyImport);
            if (pAssemblyImport.IsNull()) {
                return S_OK;
            }

            mdAssembly assembly;
            hr = pAssemblyImport-&amp;gt;GetAssemblyFromScope(&amp;amp;assembly);
            RETURN_OK_IF_FAILED(hr);

            hr = pAssemblyImport-&amp;gt;GetAssemblyProps(
                assembly,
                &amp;amp;corAssemblyProperty.ppbPublicKey,
                &amp;amp;corAssemblyProperty.pcbPublicKey,
                &amp;amp;corAssemblyProperty.pulHashAlgId,
                NULL,
                0,
                NULL,
                &amp;amp;corAssemblyProperty.pMetaData,
                &amp;amp;corAssemblyProperty.assemblyFlags);
            RETURN_OK_IF_FAILED(hr);

            corAssemblyProperty.szName = module_info.assembly.name;

            return S_OK;
        }
        return S_OK;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面进行方法编译，在JITCompilationStarted时，我们会进行Main方法字节码插入动态加载Trace程序集（Main方法前添加Assembly.LoadFrom(path)）。&lt;/p&gt;
&lt;p&gt;在指定方法编译时，我们需要对方法签名进行分析，方法签名中主要包含方法调用方式、参数个数、泛型参数个数、返回类型、参数类型集合。　&lt;/p&gt;
&lt;p&gt;在分析完方法签名和方法名后与我们配置的方法进行匹配，如果一致进行IL重写。我们会对代码修改成如下方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
public string Test(string a, int? b, int c)
        {
            object ret = null;
            Exception ex = null;
            MethodTrace methodTrace = null;
            try
            {
                methodTrace= TraceAgent.GetInstance().BeforeMethod(&quot;Test&quot;, this, new object[] { a, b, c });

                ret = &quot;1&quot;;
                goto T;
            }
            catch (Exception e)
            {
                ex = e;
                throw;
            }
            finally
            {
                if (methodTrace != null)
                {
                    methodTrace.EndMethod(ret, ex);
                }
            }
            T:
            return (string)ret;
        }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中主要包含方法本地变量签名重写、方法体字节重写（包含代码体、异常体）。&lt;/p&gt;
&lt;p&gt;方法本地变量签名重写代码：　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;61&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
    // add ret ex methodTrace var to local var
    HRESULT ModifyLocalSig(CComPtr&amp;lt;IMetaDataImport2&amp;gt;&amp;amp; pImport,
        CComPtr&amp;lt;IMetaDataEmit2&amp;gt;&amp;amp; pEmit,
        ILRewriter&amp;amp; reWriter, 
        mdTypeRef exTypeRef,
        mdTypeRef methodTraceTypeRef)
    {
        HRESULT hr;
        PCCOR_SIGNATURE rgbOrigSig = NULL;
        ULONG cbOrigSig = 0;
        UNALIGNED INT32 temp = 0;
        if (reWriter.m_tkLocalVarSig != mdTokenNil)
        {
            IfFailRet(pImport-&amp;gt;GetSigFromToken(reWriter.m_tkLocalVarSig, &amp;amp;rgbOrigSig, &amp;amp;cbOrigSig));

            //Check Is ReWrite or not
            const auto len = CorSigCompressToken(methodTraceTypeRef, &amp;amp;temp);
            if(cbOrigSig - len &amp;gt; 0){
                if(rgbOrigSig[cbOrigSig - len -1]== ELEMENT_TYPE_CLASS){
                    if (memcmp(&amp;amp;rgbOrigSig[cbOrigSig - len], &amp;amp;temp, len) == 0) {
                        return E_FAIL;
                    }
                }
            }
        }

        auto exTypeRefSize = CorSigCompressToken(exTypeRef, &amp;amp;temp);
        auto methodTraceTypeRefSize = CorSigCompressToken(methodTraceTypeRef, &amp;amp;temp);
        ULONG cbNewSize = cbOrigSig + 1 + 1 + methodTraceTypeRefSize + 1 + exTypeRefSize;
        ULONG cOrigLocals;
        ULONG cNewLocalsLen;
        ULONG cbOrigLocals = 0;

        if (cbOrigSig == 0) {
            cbNewSize += 2;
            reWriter.cNewLocals = 3;
            cNewLocalsLen = CorSigCompressData(reWriter.cNewLocals, &amp;amp;temp);
        }
        else {
            cbOrigLocals = CorSigUncompressData(rgbOrigSig + 1, &amp;amp;cOrigLocals);
            reWriter.cNewLocals = cOrigLocals + 3;
            cNewLocalsLen = CorSigCompressData(reWriter.cNewLocals, &amp;amp;temp);
            cbNewSize += cNewLocalsLen - cbOrigLocals;
        }

        const auto rgbNewSig = new COR_SIGNATURE[cbNewSize];
        *rgbNewSig = IMAGE_CEE_CS_CALLCONV_LOCAL_SIG;

        ULONG rgbNewSigOffset = 1;
        memcpy(rgbNewSig + rgbNewSigOffset, &amp;amp;temp, cNewLocalsLen);
        rgbNewSigOffset += cNewLocalsLen;

        if (cbOrigSig &amp;gt; 0) {
            const auto cbOrigCopyLen = cbOrigSig - 1 - cbOrigLocals;
            memcpy(rgbNewSig + rgbNewSigOffset, rgbOrigSig + 1 + cbOrigLocals, cbOrigCopyLen);
            rgbNewSigOffset += cbOrigCopyLen;
        }

        rgbNewSig[rgbNewSigOffset++] = ELEMENT_TYPE_OBJECT;
        rgbNewSig[rgbNewSigOffset++] = ELEMENT_TYPE_CLASS;
        exTypeRefSize = CorSigCompressToken(exTypeRef, &amp;amp;temp);
        memcpy(rgbNewSig + rgbNewSigOffset, &amp;amp;temp, exTypeRefSize);
        rgbNewSigOffset += exTypeRefSize;
        rgbNewSig[rgbNewSigOffset++] = ELEMENT_TYPE_CLASS;
        methodTraceTypeRefSize = CorSigCompressToken(methodTraceTypeRef, &amp;amp;temp);
        memcpy(rgbNewSig + rgbNewSigOffset, &amp;amp;temp, methodTraceTypeRefSize);
        rgbNewSigOffset += methodTraceTypeRefSize;

        IfFailRet(pEmit-&amp;gt;GetTokenFromSig(&amp;amp;rgbNewSig[0], cbNewSize, &amp;amp;reWriter.m_tkLocalVarSig));

        return S_OK;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;方法体重写主要涉及到如下数据结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
struct ILInstr {
  ILInstr* m_pNext;
  ILInstr* m_pPrev;

  unsigned m_opcode;
  unsigned m_offset;

  union {
    ILInstr* m_pTarget;
    INT8 m_Arg8;
    INT16 m_Arg16;
    INT32 m_Arg32;
    INT64 m_Arg64;
  };
};

struct EHClause {
  CorExceptionFlag m_Flags;
  ILInstr* m_pTryBegin;
  ILInstr* m_pTryEnd;
  ILInstr* m_pHandlerBegin;  // First instruction inside the handler
  ILInstr* m_pHandlerEnd;    // Last instruction inside the handler
  union {
    DWORD m_ClassToken;  // use for type-based exception handlers
    ILInstr* m_pFilter;  // use for filter-based exception handlers
                         // (COR_ILEXCEPTION_CLAUSE_FILTER is set)
  };
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;il_rewriter.cpp会将方法体字节解析成一个双向链表，便于我们在链表中插入字节码。我们在方法头指针前插入pre执行代码，同时新建一个ret指针，原ret操作码全部改为goto到新建的ret指针处（需要判断方法返回类型，进行适当装箱拆箱处理），然后我们新增catch 和finally块字节码，最后我们为原方法新增catch和finall异常处理体。这样我们就实现了整个方法的拦截。&lt;/p&gt;
&lt;p&gt;最后看我们TraceAgent代码实现，我们通过Type和functiontoken获取到MethodBase，然后通过配置获取目标跟踪程序集实现对方法的跟踪和分析。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
  public EndMethodDelegate BeforeWrappedMethod(object type,
            object invocationTarget,
            object[] methodArguments,
            uint functionToken)
        {      
            if (invocationTarget == null)
            {
                throw new ArgumentException(nameof(invocationTarget));
            }

            var traceMethodInfo = new TraceMethodInfo
            {
                InvocationTarget = invocationTarget,
                MethodArguments = methodArguments,
                Type = (Type) type
            };

            var functionInfo = GetFunctionInfoFromCache(functionToken, traceMethodInfo);
            traceMethodInfo.MethodBase = functionInfo.MethodBase;

            if (functionInfo.MethodWrapper == null)
            {
                PrepareMethodWrapper(functionInfo, traceMethodInfo);
            }
            
            return functionInfo.MethodWrapper?.BeforeWrappedMethod(traceMethodInfo);
        }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt; 通过Profiler API我们动态实现了.NET应用的跟踪和分析，并且只要配置环境变量（profiler.dll目录等）。与传统的dynamicproxy或手动埋点相比，其更加灵活，且无依赖。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf&quot; rel=&quot;nofollow&quot;&gt;ECMA-ST/ECMA-335.pdf&lt;/a&gt;&lt;a href=&quot;https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/clr-samples&quot;&gt;Microsoft/clr-samples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brian-reichle/MethodCheck&quot;&gt;MethodCheck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/42649/NET-file-format-Signatures-under-the-hood-Part-1&quot; target=&quot;_blank&quot;&gt;NET-file-format-Signatures-under-the-hood&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DataDog/dd-trace-dotnet&quot;&gt;dd-trace-dotnet&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 05 Feb 2019 04:54:00 +0000</pubDate>
<dc:creator>caozhiyuan</dc:creator>
<og:description>Demo：https://github.com/caozhiyuan/ClrProfiler.Trace 背景 为了实现自动、无依赖地跟踪分析应用程序性能（达到商业级APM效果），作者希望能动态修改应</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/caozhiyuan/p/10352650.html</dc:identifier>
</item>
<item>
<title>明确MangoDB在企业中应用 - SimpleWu</title>
<link>http://www.cnblogs.com/SimpleWu/p/10352644.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/SimpleWu/p/10352644.html</guid>
<description>&lt;p&gt;明确MongoDB在企业级应用中充当的角色，为之后的技术选型提供一个可查阅的信息简报。&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;1、MongoDB是什么？&lt;/p&gt;
&lt;p&gt;2、为什么要使用MongoDB？&lt;/p&gt;
&lt;p&gt;3、主要特性&lt;/p&gt;
&lt;p&gt;4、C/S服务模型&lt;/p&gt;
&lt;p&gt;5、完善的命令行工具&lt;/p&gt;
&lt;p&gt;6、几个shell实操&lt;/p&gt;
&lt;p&gt;7、在Java中使用MongoDB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;mongodb是什么&quot;&gt;1、MongoDB是什么？&lt;/h3&gt;
&lt;p&gt;MongoDB是一款为web应用程序和互联网基础设施设计的数据库管理系统。没错MongoDB就是数据库，是NoSQL类型的数据库&lt;/p&gt;
&lt;h3 id=&quot;为什么要用mongodb&quot;&gt;2、为什么要用MongoDB？&lt;/h3&gt;
&lt;p&gt;（1）MongoDB提出的是文档、集合的概念，使用BSON（类JSON）作为其数据模型结构，其结构是面向对象的而不是二维表，存储一个用户在MongoDB中是这样子的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    username:'123',
    password:'123'
｝&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用这样的数据模型，使得MongoDB能在生产环境中提供高读写的能力，吞吐量较于mysql等SQL数据库大大增强。&lt;/p&gt;
&lt;p&gt;（2）易伸缩，自动故障转移。易伸缩指的是提供了分片能力，能对数据集进行分片，数据的存储压力分摊给多台服务器。自动故障转移是副本集的概念，MongoDB能检测主节点是否存活，当失活时能自动提升从节点为主节点，达到故障转移。&lt;/p&gt;
&lt;p&gt;（3）数据模型因为是面向对象的，所以可以表示丰富的、有层级的数据结构，比如博客系统中能把“评论”直接怼到“文章“的文档中，而不必像myqsl一样创建三张表来描述这样的关系。&lt;/p&gt;
&lt;h3 id=&quot;主要特性&quot;&gt;3、主要特性&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;（1）文档数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SQL类型的数据库是正规化的，可以通过主键或者外键的约束保证数据的完整性与唯一性，所以SQL类型的数据库常用于对数据完整性较高的系统。MongoDB在这一方面是不如SQL类型的数据库，且MongoDB没有固定的Schema，正因为MongoDB少了一些这样的约束条件，可以让数据的存储数据结构更灵活，存储速度更加快。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;（2）即时查询能力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MongoDB保留了关系型数据库即时查询的能力，保留了索引（底层是基于B tree）的能力。这一点汲取了关系型数据库的优点，相比于同类型的NoSQL redis 并没有上述的能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（3）复制能力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MongoDB自身提供了副本集能将数据分布在多台机器上实现冗余，目的是可以提供自动故障转移、扩展读能力。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;（4）速度与持久性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MongoDB的驱动实现一个写入语义 fire and forget ，即通过驱动调用写入时，可以立即得到返回得到成功的结果（即使是报错），这样让写入的速度更加快，当然会有一定的不安全性，完全依赖网络。&lt;/p&gt;
&lt;p&gt;MongoDB提供了Journaling日志的概念，实际上像mysql的bin-log日志，当需要插入的时候会先往日志里面写入记录，再完成实际的数据操作，这样如果出现停电，进程突然中断的情况，可以保障数据不会错误，可以通过修复功能读取Journaling日志进行修复。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（5）数据扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MongoDB使用分片技术对数据进行扩展，MongoDB能自动分片、自动转移分片里面的数据块，让每一个服务器里面存储的数据都是一样大小。&lt;/p&gt;
&lt;h3 id=&quot;cs服务模型&quot;&gt;4、C/S服务模型&lt;/h3&gt;
&lt;p&gt;MongoDB核心服务器主要是通过mongod程序启动的，而且在启动时不需对MongoDB使用的内存进行配置，因为其设计哲学是内存管理最好是交给操作系统，缺少内存配置是MongoDB的设计亮点，另外，还可通过mongos路由服务器使用分片功能。&lt;/p&gt;
&lt;p&gt;MongoDB的主要客户端是可以交互的js shell 通过mongo启动，使用js shell能使用js直接与MongoDB进行交流，像使用sql语句查询mysql数据一样使用js语法查询MongoDB的数据，另外还提供了各种语言的驱动包，方便各种语言的接入。&lt;/p&gt;
&lt;h3 id=&quot;完善的命令行工具&quot;&gt;5、完善的命令行工具&lt;/h3&gt;
&lt;p&gt;mongodump和mongorestore,备份和恢复数据库的标准工具。输出BSON格式，迁移数据库。&lt;/p&gt;
&lt;p&gt;mongoexport和mongoimport，用来导入导出JSON、CSV和TSV数据，数据需要支持多格式时有用。mongoimport还能用与大数据集的初始导入，但是在导入前顺便还要注意一下，为了能充分利用好mongoDB通常需要对数据模型做一些调整。&lt;/p&gt;
&lt;p&gt;mongosniff,网络嗅探工具，用来观察发送到数据库的操作。基本就是把网络上传输的BSON转换为易于人们阅读的shell语句。&lt;/p&gt;
&lt;p&gt;因此，可以总结得到，MongoDB结合键值存储和关系数据库的最好特性。因为简单，所以数据极快，而且相对容易伸缩还提供复杂查询机制的数据库。MongoDB需要跑在64位的服务器上面，且最好单独部署，因为是数据库，所以也需要对其进行热备、冷备处理。&lt;/p&gt;
&lt;h3 id=&quot;几个shell实操&quot;&gt;6、几个shell实操&lt;/h3&gt;
&lt;p&gt;因为本篇文章不是API手册，所有这里对shell的使用也是基础的介绍什么功能可以用什么语句，主要是为了展示使用MongoDB shell的方便性，如果需要知道具体的MongoDB shell语法可以查阅官方文档。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、切换数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;use dba&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建数据库并不是必须的操作，数据库与集合只有在第一次插入文档时才会被创建，与对数据的动态处理方式是一致的。简化并加速开发过程，而且有利于动态分配命名空间。如果担心数据库或集合被意外创建，可以开启严格模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2、插入语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;db.users.insert({username:&quot;smith&quot;})
db.users.save({username:&quot;smith&quot;})&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;3、查找语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;db.users.find()
db.users.count()&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;4、更新语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt; db.users.update({username:&quot;smith&quot;},{$set:{country:&quot;Canada&quot;}})
 //把用户名为smith的用户的国家改成Canada
 
 db.users.update({username:&quot;smith&quot;},{$unset:{country:1}})
 //把用户名为smith的用户的国家字段给移除
 
 db.users.update({username:&quot;jones&quot;},{$set:{favorites:{movies:[&quot;casablance&quot;,&quot;rocky&quot;]}}})
 //这里主要体现多值修改，在favorties字段中添加多个值
 
db.users.update({&quot;favorites.movies&quot;:&quot;casablance&quot;},{$addToSet:{favorites.movies:&quot;the maltese&quot;}},false,true)
//多项更新&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;5、删除语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;db.foo.remove() //删除所有数据
db.foo.remove({favorties.cities:&quot;cheyene&quot;}) //根据条件进行删除
db.drop() //删除整个集合&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;6、索引相关语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;db.numbers.ensureIndex({num:1})
//创建一个升序索引
db.numbers.getIndexes()
//获取全部索引&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;7、基本管理语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt; show dbs
 //查询所有数据库
 show collections
 //显示所有表
 db.stats()
 //显示数据库状态信息
 db.numbers.stats()
 //显示集合表状态信息
 db,shutdownServer()
//停止数据库
db.help()
//获取数据库操作命令
db.foo.help()
//获取表操作命令
tab 键 //能自动帮我们补全命令&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上的命令只是简单实例，假设如果你之前没有学习过任何数据库语法，同时开始学sql查询语法和MongoDB 查询语法，你会发现哪一个更简单呢？如果你使用的是java驱动去操作MongoDB，你会发现任何的查询都像Hibernate提供出来的查询方式一样，只要构建好一个查询条件对象，便能轻松查询（接下来会给出示例），博主之前熟悉ES6，所以入手MongoDB js shell完成没问题，也正因为这样简洁，完善的查询机制，深深的爱上了MongoDB。&lt;/p&gt;
&lt;h3 id=&quot;在java中使用mongodb&quot;&gt;7、在Java中使用MongoDB&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;1、使用maven引入jar包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里引用的是最新的驱动包，提供了一套新的访问连接方式&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;mongodb-driver-sync&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;3.8.0-beta3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;2、创建一个访问客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;MongoClient client = MongoClients.create(“mongodb://10.201.76.94:27017”);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;3、获取集合数量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;public long count() {
        MongoClient client = this.getClient();
        MongoCollection&amp;lt;Document&amp;gt; collections= client.getDatabase(&quot;mongodb_db_name&quot;).getCollection(&quot;mongodb_collection_name&quot;);
        return collections.count();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;4、查询集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt; public List&amp;lt;Document&amp;gt; find(Document params,Bson sort,int skip,int limit) {
         MongoClient client = this.getClient();
         MongoCollection&amp;lt;Document&amp;gt; collections= client.getDatabase(&quot;mongodb_db_name&quot;).getCollection(&quot;mongodb_collection_name&quot;);
        List&amp;lt;Document&amp;gt; list = new ArrayList&amp;lt;Document&amp;gt;(Integer.valueOf(config.getPro(&quot;sync_limit&quot;)));
    collections.find(params).sort(sort).skip(skip).limit(limit).forEach(new Block&amp;lt;Document&amp;gt;() {
            @Override
            public void apply(Document document) {
                list.add(document);
           }
       });
        return list;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里只举例了简单的链接与简单的MongoDB操作，可见其操作的容易性。使用驱动时是基于TCP套接字与MongoDB进行通信的，如果查询结果较多，恰好无法全部放进第一服务器中，将会向服务器发送一个getmore指令获取下一批查询结果。&lt;/p&gt;
&lt;p&gt;插入数据到服务器时间，不会等待服务器的响应，驱动会假设写入是成功的，实际是使用客户端生成对象id，但是该行为可以通过配置配置，可以通过安全模式开启，安全模式可以校验服务器端插入的错误。&lt;/p&gt;
</description>
<pubDate>Tue, 05 Feb 2019 04:28:00 +0000</pubDate>
<dc:creator>SimpleWu</dc:creator>
<og:description>[TOC] 明确MongoDB在企业级应用中充当的角色，为之后的技术选型提供一个可查阅的信息简报。 1、MongoDB是什么？ 2、为什么要使用MongoDB？ 3、主要特性 4、C/S服务模型 5、</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/SimpleWu/p/10352644.html</dc:identifier>
</item>
<item>
<title>自定义AXI总线形式SPI接口IP核，点亮OLED - 没落骑士</title>
<link>http://www.cnblogs.com/moluoqishi/p/10339863.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/moluoqishi/p/10339863.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;最近花费很多精力在算法仿真和实现上，外设接口的调试略有生疏。本文以FPGA控制OLED中的SPI接口为例，重新夯实下基础。重点内容为SPI时序的RTL设计以及AXI-Lite总线分析。当然做些项目时可以直接调用Xilinx提供的SPI IP核，这里仅出于练习的目的考虑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、接口时序分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;本项目用的OLED型号为&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;UG-2832HSWEG04，核心控制器是SSD1306。该芯片支持并口、I2C以及SPI接口，这里采用4线SPI作为数据总线。4线SPI接口包括：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;SCLK:串行时钟，SSD1306上升沿采集数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;SDIN:串行数据输入，数据顺序为MSB&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;D/C:数据命令控制，高电平为数据，低电平为控制命令&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;CS:片选信号，低电平有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;时序图如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201901/1201289-20190130213143404-440194007.png&quot; alt=&quot;&quot; width=&quot;659&quot; height=&quot;272&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;片选信号有效期间，每第8个时钟周期上升沿时刻，控制芯片会采样D/C并同时将进入的一字节数据写入到显示缓存GDDRAM或控制寄存器中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201902/1201289-20190205114140681-705508842.png&quot; alt=&quot;&quot; width=&quot;820&quot; height=&quot;257&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201901/1201289-20190130214730698-1302193484.png&quot; alt=&quot;&quot; width=&quot;784&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;根据datasheet中的AC Characteristics中参数，选择SPI串行时钟周期为200ns，占空比为50%以保证足够的时序裕量。此时传输速率为：5MHZ/8 = 625KHZ。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、SPI接口模块设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;　　根据上述分析，很容易可以设计出用于传输数据或命令的SPI时序接口模块。接口定义如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用户侧：clk rst_n com din busy，依次是系统时钟，复位，指令信号（1为发送控制信息，2则发送数据），待传输字节以及忙等待指示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;外设侧：SCLK SDIN CS D/C&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　逻辑状态分为：IDLE SEND和DONE，具体时序如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201902/1201289-20190203204722510-190113872.png&quot; alt=&quot;&quot; width=&quot;958&quot; height=&quot;447&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;直接&lt;/span&gt;&lt;span&gt;对照上图编写HDL：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_b447658f-60e9-4a7b-9550-0ea4801e4e52&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b447658f-60e9-4a7b-9550-0ea4801e4e52&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b447658f-60e9-4a7b-9550-0ea4801e4e52&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; `timescale 1ns /&lt;span&gt; 1ps
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;module&lt;/span&gt; spi_4wire#(&lt;span&gt;parameter&lt;/span&gt; DIV_CYC = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;本地接口&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt; clk,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;100MHZ&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt; rst_n,
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] com,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1发送控制信息，2发送数据 其他无效&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt; [&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] din,
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt;&lt;span&gt; busy,
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;芯片侧接口&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; sclk = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; sdin = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; cs = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1,&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; dc = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1是数据，0是控制命令&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;**************************参数定义********************************************&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; clogb2 (&lt;span&gt;input&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt;&lt;span&gt; bit_depth);
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;       &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(clogb2=&lt;span&gt;0&lt;/span&gt;; bit_depth&amp;gt;&lt;span&gt;0&lt;/span&gt;; clogb2=clogb2+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;           bit_depth = bit_depth &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;       &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;endfunction&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;localparam&lt;/span&gt; DIV_CNT_W = clogb2(DIV_CYC-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;            BIT_CNT_W = clogb2(&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;localparam&lt;/span&gt;  IDLE = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ,
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             SEND = &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ,
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             DONE = &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ;       
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;************************变量定义****************************************&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [ (DIV_CNT_W-&lt;span&gt;1&lt;/span&gt;):&lt;span&gt;0&lt;/span&gt;]  div_cnt =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;    ;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        add_div_cnt ;
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        end_div_cnt ;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [ (BIT_CNT_W-&lt;span&gt;1&lt;/span&gt;):&lt;span&gt;0&lt;/span&gt;]  bit_cnt =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;    ;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        add_bit_cnt ;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        end_bit_cnt ;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] state_c = IDLE,state_n =&lt;span&gt; IDLE;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; idle2send,send2done,done2idle;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;8&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] data_tmp = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; din_vld;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; start_send;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; busy_flag = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;************************逻辑****************************************
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;sclk时钟分频 T:10ns --&amp;gt; 200ns 20倍
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分频计数器&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n) &lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (rst_n==&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         div_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_div_cnt) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(end_div_cnt)
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             div_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;             div_cnt &amp;lt;= div_cnt+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; add_div_cnt = (&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; end_div_cnt = add_div_cnt  &amp;amp;&amp;amp; div_cnt == (DIV_CYC)-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;比特计数器&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n) &lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (rst_n==&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         bit_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_bit_cnt) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(end_bit_cnt)
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             bit_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             bit_cnt &amp;lt;= bit_cnt+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; add_bit_cnt = (state_c == SEND &amp;amp;&amp;amp;&lt;span&gt; end_div_cnt);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; end_bit_cnt = add_bit_cnt  &amp;amp;&amp;amp; bit_cnt == (&lt;span&gt;8&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;控制状态机&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n) &lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (rst_n==&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;         state_c &amp;lt;=&lt;span&gt; IDLE ;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;         state_c &amp;lt;=&lt;span&gt; state_n;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(*) &lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt;(state_c)  
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         IDLE :&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(idle2send ) 
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 state_n =&lt;span&gt; SEND ;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt;                 state_n =&lt;span&gt; state_c ;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;         SEND :&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(send2done ) 
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                 state_n =&lt;span&gt; DONE ;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;                 state_n =&lt;span&gt; state_c ;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;         DONE :&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(done2idle ) 
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;                 state_n =&lt;span&gt; IDLE ;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt;                 state_n =&lt;span&gt; state_c ;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt; : state_n =&lt;span&gt; IDLE ;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; idle2send  = state_c==IDLE &amp;amp;&amp;amp; (end_div_cnt &amp;amp;&amp;amp; data_tmp[&lt;span&gt;10&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt; -:&lt;span&gt;2&lt;/span&gt;] != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; send2done  = state_c==SEND &amp;amp;&amp;amp;&lt;span&gt; (end_bit_cnt);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; done2idle  = state_c==DONE &amp;amp;&amp;amp;&lt;span&gt; (end_div_cnt);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; 
&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入命令/数据寄存&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         data_tmp &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(din_vld)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;         data_tmp &amp;lt;=&lt;span&gt; {com,din};
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(done2idle)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;         data_tmp &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; din_vld = busy_flag == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 &amp;amp;&amp;amp; com != 2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; 
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SPI输出信号&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         sdin &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_bit_cnt)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;         sdin &amp;lt;= data_tmp[&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;bit_cnt];
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;         cs &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(start_send)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;         cs &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(done2idle)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;         cs &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; 
&lt;span&gt;153&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; start_send = add_bit_cnt &amp;amp;&amp;amp; bit_cnt == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; 
&lt;span&gt;155&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;         dc &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(start_send)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;(data_tmp[&lt;span&gt;9&lt;/span&gt;:&lt;span&gt;8&lt;/span&gt;])&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1发送控制信息，2发送数据 其他无效&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;             &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d1:dc &amp;lt;= 1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;b0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1是数据，0是控制命令&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;             &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d2:dc &amp;lt;= 1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;             &lt;span&gt;default&lt;/span&gt;:dc &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;         &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(done2idle)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;         dc &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt; 
&lt;span&gt;171&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SCLK&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;         sclk &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_div_cnt &amp;amp;&amp;amp; div_cnt == DIV_CYC/&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         sclk &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(end_div_cnt)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;         sclk &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt; 
&lt;span&gt;184&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;本地侧输出&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;@(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n == &lt;span&gt;0&lt;/span&gt;)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;         busy_flag &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(din_vld)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt;         busy_flag &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(done2idle)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;         busy_flag &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt; 
&lt;span&gt;197&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; busy = busy_flag |&lt;span&gt; din_vld;
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; 
&lt;span&gt;199&lt;/span&gt; 
&lt;span&gt;200&lt;/span&gt; &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;spi_4wire&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　&lt;span&gt;逻辑非常清晰，分频计数器控制和比特计数器作为整个时序接口模块的跳变时刻。状态机决定SPI中的CS SCLK SDIN D/C信号变化。比较重要的是busy接口信号，该信号为后续衔接AXI总线作准备。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、AXI（AXI-Lite）总线详解及接口封装&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;核心逻辑设计完成，最后是总线接口封装工作。由于SPI本地侧发送一个字节数据后需要很长一段时间才能将其转换成的串行数据发送完毕，因此使用AXI-Lite总线即可满足数据传输需求。利用VIVADO IP封装器自带的AXI总线模板可以简化设计，看下总线接口：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;1 写地址通道：&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_AWADDR:写地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_AWPORT:写地址保护类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_AWVALID:写地址有效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_AWREADY:写地址准备&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;2 写数据通道：&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_WDATA:写数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_WSTRB:指示对应字节是有效数据还是位置信息（1为有效数据）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_WVALID:写有效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_WREADY:写数据准备&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;3 写响应通道：&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_BRESP:指示写传输状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_BVALID:写响应有效指示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_BREADY:响应准备&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;4 读地址通道：&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_ARADDR:读地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_ARPROT:读地址保护类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_ARVALID:读地址有效指示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_ARREADY:读地址准备&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;5 读数据通道：&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_RDATA:读数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_RVALID:读数据有效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S_AXI_RREADY:读数据准备&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可以看出，每个通道无论有多少信号，数据信息，有效指示以及准备就绪信号是必然存在的，这三个信号能够完成最基本的总线握手传输。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201902/1201289-20190204095842167-1797823751.png&quot; alt=&quot;&quot; width=&quot;497&quot; height=&quot;170&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　这里将之前设计的SPI接口模块例化在AXI Wrapper（spi_4wire_w_v1_0）中，并添加与Slave接口模块（spi_4wire_w_v1_0_S00_AXI）的连接信号。其中Slave接口模块内ready信号默认是在ready为0且valid为1时拉高一个时钟周期，但应考虑SPI模块是否准备就绪或上一个数据传输完成，改动后AXI wrapper以及AXI-Lite Slave接口逻辑如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AXI Wrapper：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;&lt;img id=&quot;code_img_closed_0525ab83-5bac-4472-b818-4fad73d9de30&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0525ab83-5bac-4472-b818-4fad73d9de30&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0525ab83-5bac-4472-b818-4fad73d9de30&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;117&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; `timescale &lt;span&gt;1&lt;/span&gt; ns / &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ps
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;module&lt;/span&gt;&lt;span&gt; spi_4wire_w_v1_0 #
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Users to add parameters here
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; User parameters ends
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do not modify the parameters beyond this line
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Parameters of Axi Slave Bus Interface S00_AXI&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;parameter&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; C_S00_AXI_DATA_WIDTH    = &lt;span&gt;32&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;parameter&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; C_S00_AXI_ADDR_WIDTH    = &lt;span&gt;4&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Users to add ports here
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SPI signals&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt;&lt;span&gt; sclk,
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt;&lt;span&gt; sdin,
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt;&lt;span&gt; cs,
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt;&lt;span&gt; dc,
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; User ports ends
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do not modify the ports beyond this line
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Ports of Axi Slave Bus Interface S00_AXI&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_aclk,
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_aresetn,
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S00_AXI_ADDR_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_awaddr,
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_awprot,
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_awvalid,
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_awready,
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S00_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_wdata,
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [(C_S00_AXI_DATA_WIDTH/&lt;span&gt;8&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_wstrb,
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_wvalid,
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_wready,
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_bresp,
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_bvalid,
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_bready,
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S00_AXI_ADDR_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_araddr,
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_arprot,
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_arvalid,
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_arready,
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S00_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_rdata,
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_rresp,
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_rvalid,
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  s00_axi_rready    
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     
&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; rst_n = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] din;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] com;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; busy;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] data;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; data_vld;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Instantiation of Axi Bus Interface S00_AXI&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;    spi_4wire_w_v1_0_S00_AXI # ( 
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        .C_S_AXI_DATA_WIDTH(C_S00_AXI_DATA_WIDTH),
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;        .C_S_AXI_ADDR_WIDTH(C_S00_AXI_ADDR_WIDTH)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;    ) spi_4wire_w_v1_0_S00_AXI_inst (
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        .local_dout(data),
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        .local_dout_vld(data_vld),
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        .local_busy(busy),
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;        .S_AXI_ACLK(s00_axi_aclk),
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        .S_AXI_ARESETN(s00_axi_aresetn),
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;        .S_AXI_AWADDR(s00_axi_awaddr),
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        .S_AXI_AWPROT(s00_axi_awprot),
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;        .S_AXI_AWVALID(s00_axi_awvalid),
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        .S_AXI_AWREADY(s00_axi_awready),
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        .S_AXI_WDATA(s00_axi_wdata),
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;        .S_AXI_WSTRB(s00_axi_wstrb),
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;        .S_AXI_WVALID(s00_axi_wvalid),
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;        .S_AXI_WREADY(s00_axi_wready),
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        .S_AXI_BRESP(s00_axi_bresp),
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        .S_AXI_BVALID(s00_axi_bvalid),
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;        .S_AXI_BREADY(s00_axi_bready),
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        .S_AXI_ARADDR(s00_axi_araddr),
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        .S_AXI_ARPROT(s00_axi_arprot),
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        .S_AXI_ARVALID(s00_axi_arvalid),
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        .S_AXI_ARREADY(s00_axi_arready),
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        .S_AXI_RDATA(s00_axi_rdata),
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;        .S_AXI_RRESP(s00_axi_rresp),
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;        .S_AXI_RVALID(s00_axi_rvalid),
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        .S_AXI_RREADY(s00_axi_rready)
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add user logic here&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;     spi_4wire#(.DIV_CYC(&lt;span&gt;20&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    uut
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;        .clk       (s00_axi_aclk)  ,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;100MHZ&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;       .rst_n     (rst_n)  ,
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;        .com       (com)  ,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1发送控制信息，2发送数据 其他无效&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;       .din       (din)  ,
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;        .busy      (busy)  ,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rdy&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;        
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;       .sclk      (sclk)  ,
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;       .sdin      (sdin)  ,
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;       .cs        (cs)  ,
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;        .dc        (dc)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1是数据，0是控制命令&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         
&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt;@(&lt;span&gt;posedge&lt;/span&gt; s00_axi_aclk)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;         rst_n &amp;lt;=&lt;span&gt; s00_axi_aresetn;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;     
&lt;span&gt;108&lt;/span&gt;     
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; com = data_vld ? data[&lt;span&gt;9&lt;/span&gt;:&lt;span&gt;8&lt;/span&gt;] : &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; din = data_vld ? data[&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] : &lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; User logic ends&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;spi_4wire_w_v1_0&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Slave接口模块：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49.5&quot;&gt;&lt;img id=&quot;code_img_closed_52eae96c-1dd8-4ae7-b224-01d83fd88dab&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_52eae96c-1dd8-4ae7-b224-01d83fd88dab&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_52eae96c-1dd8-4ae7-b224-01d83fd88dab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;94&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; `timescale &lt;span&gt;1&lt;/span&gt; ns / &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ps
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;module&lt;/span&gt;&lt;span&gt; spi_4wire_w_v1_0_S00_AXI #
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Users to add parameters here
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; User parameters ends
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do not modify the parameters beyond this line
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Width of S_AXI data bus&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;parameter&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; C_S_AXI_DATA_WIDTH    = &lt;span&gt;32&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Width of S_AXI address bus&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;parameter&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; C_S_AXI_ADDR_WIDTH    = &lt;span&gt;4&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Users to add ports here&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] local_dout,
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; local_dout_vld = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt;&lt;span&gt; local_busy,
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; User ports ends
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do not modify the ports beyond this line
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Global Clock Signal&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_ACLK,
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Global Reset Signal. This Signal is Active LOW&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_ARESETN,
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write address (issued by master, acceped by Slave)&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S_AXI_ADDR_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_AWADDR,
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write channel Protection type. This signal indicates the
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; privilege and security level of the transaction, and whether
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; the transaction is a data access or an instruction access.&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_AWPROT,
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write address valid. This signal indicates that the master signaling
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; valid write address and control information.&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_AWVALID,
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write address ready. This signal indicates that the slave is ready
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; to accept an address and associated control signals.&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_AWREADY,
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write data (issued by master, acceped by Slave) &lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_WDATA,
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write strobes. This signal indicates which byte lanes hold
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; valid data. There is one write strobe bit for each eight
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bits of the write data bus.    &lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [(C_S_AXI_DATA_WIDTH/&lt;span&gt;8&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_WSTRB,
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write valid. This signal indicates that valid write
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; data and strobes are available.&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_WVALID,
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write ready. This signal indicates that the slave
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; can accept the write data.&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_WREADY,
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write response. This signal indicates the status
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; of the write transaction.&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_BRESP,
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write response valid. This signal indicates that the channel
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; is signaling a valid write response.&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_BVALID,
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Response ready. This signal indicates that the master
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; can accept a write response.&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_BREADY,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read address (issued by master, acceped by Slave)&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S_AXI_ADDR_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_ARADDR,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Protection type. This signal indicates the privilege
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; and security level of the transaction, and whether the
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; transaction is a data access or an instruction access.&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_ARPROT,
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read address valid. This signal indicates that the channel
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; is signaling valid read address and control information.&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_ARVALID,
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read address ready. This signal indicates that the slave is
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ready to accept an address and associated control signals.&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_ARREADY,
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read data (issued by slave)&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_RDATA,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read response. This signal indicates the status of the
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; read transfer.&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] S_AXI_RRESP,
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read valid. This signal indicates that the channel is
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; signaling the required read data.&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;output&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_RVALID,
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read ready. This signal indicates that the master can
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; accept the read data and response information.&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;  S_AXI_RREADY
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; AXI4LITE signals&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_ADDR_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;]     axi_awaddr;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;      axi_awready;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;      axi_wready;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;]     axi_bresp;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;      axi_bvalid;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_ADDR_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;]     axi_araddr;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;      axi_arready;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;]     axi_rdata;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;]     axi_rresp;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;      axi_rvalid;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Example-specific design signals
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; local parameter for addressing 32 bit / 64 bit C_S_AXI_DATA_WIDTH
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ADDR_LSB is used for addressing 32/64 bit registers/memories
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ADDR_LSB = 2 for 32 bits (n downto 2)
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ADDR_LSB = 3 for 64 bits (n downto 3)&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;     &lt;span&gt;localparam&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; ADDR_LSB = (C_S_AXI_DATA_WIDTH/&lt;span&gt;32&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;localparam&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; OPT_MEM_ADDR_BITS = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------------------------------------------
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;-- Signals for user logic register space example
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;------------------------------------------------
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;-- Number of Slave Registers 4&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]    slv_reg0;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]    slv_reg1;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]    slv_reg2;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]    slv_reg3;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;     slv_reg_rden;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;     slv_reg_wren;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [C_S_AXI_DATA_WIDTH-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]     reg_data_out;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;     &lt;span&gt;integer&lt;/span&gt;&lt;span&gt;     byte_index;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; 
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; I/O Connections assignments&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_AWREADY    =&lt;span&gt; axi_awready;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_WREADY    =&lt;span&gt; axi_wready;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_BRESP    =&lt;span&gt; axi_bresp;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_BVALID    =&lt;span&gt; axi_bvalid;
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_ARREADY    =&lt;span&gt; axi_arready;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_RDATA    =&lt;span&gt; axi_rdata;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_RRESP    =&lt;span&gt; axi_rresp;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; S_AXI_RVALID    =&lt;span&gt; axi_rvalid;
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;     
&lt;span&gt;128&lt;/span&gt;     
&lt;span&gt;129&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; local_dout =&lt;span&gt; slv_reg0;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; 
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt;@(&lt;span&gt;posedge&lt;/span&gt; S_AXI_ACLK)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;             local_dout_vld &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;             local_dout_vld &amp;lt;=&lt;span&gt; slv_reg_wren;
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;     
&lt;span&gt;138&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement axi_awready generation
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; axi_awready is asserted for one S_AXI_ACLK clock cycle when both
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_awready is
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; de-asserted when reset is low.&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;           axi_awready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;149&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt;151&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (~axi_awready &amp;amp;&amp;amp; S_AXI_AWVALID &amp;amp;&amp;amp; S_AXI_WVALID &amp;amp;&amp;amp; ~&lt;span&gt;local_busy)
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; slave is ready to accept write address when 
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; there is a valid write address and write data
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; on the write address and data bus. This design 
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expects no outstanding transactions. &lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;               axi_awready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;           &lt;span&gt;else&lt;/span&gt;           
&lt;span&gt;160&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;               axi_awready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;       
&lt;span&gt;165&lt;/span&gt; 
&lt;span&gt;166&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement axi_awaddr latching
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This process is used to latch the address when both 
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; S_AXI_AWVALID and S_AXI_WVALID are valid. &lt;/span&gt;
&lt;span&gt;169&lt;/span&gt; 
&lt;span&gt;170&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;           axi_awaddr &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;176&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt;178&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (~axi_awready &amp;amp;&amp;amp; S_AXI_AWVALID &amp;amp;&amp;amp; S_AXI_WVALID &amp;amp;&amp;amp; ~&lt;span&gt;local_busy)
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write Address latching &lt;/span&gt;
&lt;span&gt;181&lt;/span&gt;               axi_awaddr &amp;lt;=&lt;span&gt; S_AXI_AWADDR;
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;184&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;       
&lt;span&gt;185&lt;/span&gt; 
&lt;span&gt;186&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement axi_wready generation
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; axi_wready is asserted for one S_AXI_ACLK clock cycle when both
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_wready is 
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; de-asserted when reset is low. &lt;/span&gt;
&lt;span&gt;190&lt;/span&gt; 
&lt;span&gt;191&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt;           axi_wready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;197&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt;199&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (~axi_wready &amp;amp;&amp;amp; S_AXI_WVALID &amp;amp;&amp;amp; S_AXI_AWVALID &amp;amp;&amp;amp; ~&lt;span&gt;local_busy)
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; slave is ready to accept write data when 
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; there is a valid write address and write data
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; on the write address and data bus. This design 
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expects no outstanding transactions. &lt;/span&gt;
&lt;span&gt;205&lt;/span&gt;               axi_wready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt;           &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;209&lt;/span&gt;               axi_wready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;210&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;211&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;212&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;       
&lt;span&gt;213&lt;/span&gt; 
&lt;span&gt;214&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement memory mapped register select and write logic generation
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The write data is accepted and written to memory mapped registers when
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; axi_awready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted. Write strobes are used to
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; select byte enables of slave registers while writing.
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; These registers are cleared when reset (active low) is applied.
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Slave register write enable is asserted when valid address and data are available
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; and the slave is ready to accept the write address and write data.&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; slv_reg_wren = axi_wready &amp;amp;&amp;amp; S_AXI_WVALID &amp;amp;&amp;amp; axi_awready &amp;amp;&amp;amp;&lt;span&gt; S_AXI_AWVALID;
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; 
&lt;span&gt;223&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;225&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;226&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;227&lt;/span&gt;           slv_reg0 &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;           slv_reg1 &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;           slv_reg2 &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;           slv_reg3 &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;232&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;233&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (slv_reg_wren)
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;           &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; ( axi_awaddr[ADDR_LSB+&lt;span&gt;OPT_MEM_ADDR_BITS:ADDR_LSB] )
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;               &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h0:&lt;/span&gt;
&lt;span&gt;237&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; ( byte_index = &lt;span&gt;0&lt;/span&gt;; byte_index &amp;lt;= (C_S_AXI_DATA_WIDTH/&lt;span&gt;8&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt;; byte_index = byte_index+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;                   &lt;span&gt;if&lt;/span&gt; ( S_AXI_WSTRB[byte_index] == &lt;span&gt;1&lt;/span&gt; ) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;239&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Respective byte enables are asserted as per write strobes 
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Slave register 0&lt;/span&gt;
&lt;span&gt;241&lt;/span&gt;                     slv_reg0[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;] &amp;lt;= S_AXI_WDATA[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt;                   &lt;span&gt;end&lt;/span&gt;  
&lt;span&gt;243&lt;/span&gt;               &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h1:&lt;/span&gt;
&lt;span&gt;244&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; ( byte_index = &lt;span&gt;0&lt;/span&gt;; byte_index &amp;lt;= (C_S_AXI_DATA_WIDTH/&lt;span&gt;8&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt;; byte_index = byte_index+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;                   &lt;span&gt;if&lt;/span&gt; ( S_AXI_WSTRB[byte_index] == &lt;span&gt;1&lt;/span&gt; ) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;246&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Respective byte enables are asserted as per write strobes 
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Slave register 1&lt;/span&gt;
&lt;span&gt;248&lt;/span&gt;                     slv_reg1[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;] &amp;lt;= S_AXI_WDATA[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;                   &lt;span&gt;end&lt;/span&gt;  
&lt;span&gt;250&lt;/span&gt;               &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2:&lt;/span&gt;
&lt;span&gt;251&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; ( byte_index = &lt;span&gt;0&lt;/span&gt;; byte_index &amp;lt;= (C_S_AXI_DATA_WIDTH/&lt;span&gt;8&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt;; byte_index = byte_index+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;                   &lt;span&gt;if&lt;/span&gt; ( S_AXI_WSTRB[byte_index] == &lt;span&gt;1&lt;/span&gt; ) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;253&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Respective byte enables are asserted as per write strobes 
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Slave register 2&lt;/span&gt;
&lt;span&gt;255&lt;/span&gt;                     slv_reg2[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;] &amp;lt;= S_AXI_WDATA[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;                   &lt;span&gt;end&lt;/span&gt;  
&lt;span&gt;257&lt;/span&gt;               &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h3:&lt;/span&gt;
&lt;span&gt;258&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; ( byte_index = &lt;span&gt;0&lt;/span&gt;; byte_index &amp;lt;= (C_S_AXI_DATA_WIDTH/&lt;span&gt;8&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt;; byte_index = byte_index+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;                   &lt;span&gt;if&lt;/span&gt; ( S_AXI_WSTRB[byte_index] == &lt;span&gt;1&lt;/span&gt; ) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;260&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Respective byte enables are asserted as per write strobes 
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Slave register 3&lt;/span&gt;
&lt;span&gt;262&lt;/span&gt;                     slv_reg3[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;] &amp;lt;= S_AXI_WDATA[(byte_index*&lt;span&gt;8&lt;/span&gt;) +: &lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;                   &lt;span&gt;end&lt;/span&gt;  
&lt;span&gt;264&lt;/span&gt;               &lt;span&gt;default&lt;/span&gt; : &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;265&lt;/span&gt;                           slv_reg0 &amp;lt;=&lt;span&gt; slv_reg0;
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;                           slv_reg1 &amp;lt;=&lt;span&gt; slv_reg1;
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt;                           slv_reg2 &amp;lt;=&lt;span&gt; slv_reg2;
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;                           slv_reg3 &amp;lt;=&lt;span&gt; slv_reg3;
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt;                         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;270&lt;/span&gt;             &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;271&lt;/span&gt;           &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;272&lt;/span&gt;       &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;273&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;    
&lt;span&gt;274&lt;/span&gt; 
&lt;span&gt;275&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement write response logic generation
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The write response and response valid signals are asserted by the slave 
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; when axi_wready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted.  
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This marks the acceptance of address and indicates the status of 
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; write transaction.&lt;/span&gt;
&lt;span&gt;280&lt;/span&gt; 
&lt;span&gt;281&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;283&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;284&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;285&lt;/span&gt;           axi_bvalid  &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt;           axi_bresp   &amp;lt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;287&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;288&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;289&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt;290&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (axi_awready &amp;amp;&amp;amp; S_AXI_AWVALID &amp;amp;&amp;amp; ~axi_bvalid &amp;amp;&amp;amp; axi_wready &amp;amp;&amp;amp;&lt;span&gt; S_AXI_WVALID)
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;292&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; indicates a valid write response is available&lt;/span&gt;
&lt;span&gt;293&lt;/span&gt;               axi_bvalid &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;294&lt;/span&gt;               axi_bresp  &amp;lt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0; // &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;OKAY&lt;span&gt;'&lt;/span&gt;&lt;span&gt; response &lt;/span&gt;
&lt;span&gt;295&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; work error responses in future&lt;/span&gt;
&lt;span&gt;296&lt;/span&gt;           &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;297&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;298&lt;/span&gt;               &lt;span&gt;if&lt;/span&gt; (S_AXI_BREADY &amp;amp;&amp;amp;&lt;span&gt; axi_bvalid) 
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;check if bready is asserted while bvalid is high) 
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(there is a possibility that bready is always asserted high)   &lt;/span&gt;
&lt;span&gt;301&lt;/span&gt;                 &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;302&lt;/span&gt;                   axi_bvalid &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0; &lt;/span&gt;
&lt;span&gt;303&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;  
&lt;span&gt;304&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;305&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;306&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;   
&lt;span&gt;307&lt;/span&gt; 
&lt;span&gt;308&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement axi_arready generation
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; axi_arready is asserted for one S_AXI_ACLK clock cycle when
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; S_AXI_ARVALID is asserted. axi_awready is 
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; de-asserted when reset (active low) is asserted. 
&lt;/span&gt;&lt;span&gt;312&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The read address is also latched when S_AXI_ARVALID is 
&lt;/span&gt;&lt;span&gt;313&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; asserted. axi_araddr is reset to zero on reset assertion.&lt;/span&gt;
&lt;span&gt;314&lt;/span&gt; 
&lt;span&gt;315&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;316&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;317&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;318&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;319&lt;/span&gt;           axi_arready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;320&lt;/span&gt;           axi_araddr  &amp;lt;= &lt;span&gt;32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;321&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;322&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;323&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt;324&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (~axi_arready &amp;amp;&amp;amp;&lt;span&gt; S_AXI_ARVALID)
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;326&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; indicates that the slave has acceped the valid read address&lt;/span&gt;
&lt;span&gt;327&lt;/span&gt;               axi_arready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;328&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read address latching&lt;/span&gt;
&lt;span&gt;329&lt;/span&gt;               axi_araddr  &amp;lt;=&lt;span&gt; S_AXI_ARADDR;
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;331&lt;/span&gt;           &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;332&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;333&lt;/span&gt;               axi_arready &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;334&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;335&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;336&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;       
&lt;span&gt;337&lt;/span&gt; 
&lt;span&gt;338&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement axi_arvalid generation
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; axi_rvalid is asserted for one S_AXI_ACLK clock cycle when both 
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; S_AXI_ARVALID and axi_arready are asserted. The slave registers 
&lt;/span&gt;&lt;span&gt;341&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; data are available on the axi_rdata bus at this instance. The 
&lt;/span&gt;&lt;span&gt;342&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; assertion of axi_rvalid marks the validity of read data on the 
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bus and axi_rresp indicates the status of read transaction.axi_rvalid 
&lt;/span&gt;&lt;span&gt;344&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; is deasserted on reset (active low). axi_rresp and axi_rdata are 
&lt;/span&gt;&lt;span&gt;345&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; cleared to zero on reset (active low).  &lt;/span&gt;
&lt;span&gt;346&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;347&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;348&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;349&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;350&lt;/span&gt;           axi_rvalid &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;351&lt;/span&gt;           axi_rresp  &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;353&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;354&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt;355&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (axi_arready &amp;amp;&amp;amp; S_AXI_ARVALID &amp;amp;&amp;amp; ~&lt;span&gt;axi_rvalid)
&lt;/span&gt;&lt;span&gt;356&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;357&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Valid read data is available at the read data bus&lt;/span&gt;
&lt;span&gt;358&lt;/span&gt;               axi_rvalid &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;359&lt;/span&gt;               axi_rresp  &amp;lt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0; // &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;OKAY&lt;span&gt;'&lt;/span&gt;&lt;span&gt; response&lt;/span&gt;
&lt;span&gt;360&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;   
&lt;span&gt;361&lt;/span&gt;           &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (axi_rvalid &amp;amp;&amp;amp;&lt;span&gt; S_AXI_RREADY)
&lt;/span&gt;&lt;span&gt;362&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;363&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read data is accepted by the master&lt;/span&gt;
&lt;span&gt;364&lt;/span&gt;               axi_rvalid &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;365&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;                
&lt;span&gt;366&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;367&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;    
&lt;span&gt;368&lt;/span&gt; 
&lt;span&gt;369&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implement memory mapped register select and read logic generation
&lt;/span&gt;&lt;span&gt;370&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Slave register read enable is asserted when valid address is available
&lt;/span&gt;&lt;span&gt;371&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; and the slave is ready to accept the read address.&lt;/span&gt;
&lt;span&gt;372&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; slv_reg_rden = axi_arready &amp;amp; S_AXI_ARVALID &amp;amp; ~&lt;span&gt;axi_rvalid;
&lt;/span&gt;&lt;span&gt;373&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @(*&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;374&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;375&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Address decoding for reading registers&lt;/span&gt;
&lt;span&gt;376&lt;/span&gt;           &lt;span&gt;case&lt;/span&gt; ( axi_araddr[ADDR_LSB+&lt;span&gt;OPT_MEM_ADDR_BITS:ADDR_LSB] )
&lt;/span&gt;&lt;span&gt;377&lt;/span&gt;             &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h0   : reg_data_out &amp;lt;= slv_reg0;&lt;/span&gt;
&lt;span&gt;378&lt;/span&gt;             &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h1   : reg_data_out &amp;lt;= slv_reg1;&lt;/span&gt;
&lt;span&gt;379&lt;/span&gt;             &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2   : reg_data_out &amp;lt;= slv_reg2;&lt;/span&gt;
&lt;span&gt;380&lt;/span&gt;             &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h3   : reg_data_out &amp;lt;= slv_reg3;&lt;/span&gt;
&lt;span&gt;381&lt;/span&gt;             &lt;span&gt;default&lt;/span&gt; : reg_data_out &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;382&lt;/span&gt;           &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;383&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;384&lt;/span&gt; 
&lt;span&gt;385&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Output register or memory read data&lt;/span&gt;
&lt;span&gt;386&lt;/span&gt;     &lt;span&gt;always&lt;/span&gt; @( &lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; S_AXI_ACLK )
&lt;/span&gt;&lt;span&gt;387&lt;/span&gt;     &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;388&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; ( S_AXI_ARESETN == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0 )&lt;/span&gt;
&lt;span&gt;389&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;390&lt;/span&gt;           axi_rdata  &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;391&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt; 
&lt;span&gt;392&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;393&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt;394&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; When there is a valid read address (S_AXI_ARVALID) with 
&lt;/span&gt;&lt;span&gt;395&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; acceptance of read address by the slave (axi_arready), 
&lt;/span&gt;&lt;span&gt;396&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output the read dada &lt;/span&gt;
&lt;span&gt;397&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (slv_reg_rden)
&lt;/span&gt;&lt;span&gt;398&lt;/span&gt;             &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;399&lt;/span&gt;               axi_rdata &amp;lt;= reg_data_out;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; register read data&lt;/span&gt;
&lt;span&gt;400&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;   
&lt;span&gt;401&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;402&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;    
&lt;span&gt;403&lt;/span&gt; 
&lt;span&gt;404&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add user logic here
&lt;/span&gt;&lt;span&gt;405&lt;/span&gt; 
&lt;span&gt;406&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; User logic ends&lt;/span&gt;
&lt;span&gt;407&lt;/span&gt; 
&lt;span&gt;408&lt;/span&gt;     &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;spi_4wire_w_v1_0_S00_AXI&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、仿真测试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们写个简单的testbench测试接口和SPI时序逻辑正确性。只要准备就绪，便向顶层模块写入h02_4a。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;testbench代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45.5&quot;&gt;&lt;img id=&quot;code_img_closed_dc23b850-5c15-491e-bb75-53f8f0cdd99d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dc23b850-5c15-491e-bb75-53f8f0cdd99d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dc23b850-5c15-491e-bb75-53f8f0cdd99d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;86&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; `timescale 1ns /&lt;span&gt; 1ps
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;module&lt;/span&gt;&lt;span&gt; axi_spi_tb( );
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;parameter&lt;/span&gt; CYC = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;           RST_TIM = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; s00_axi_aclk;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; s00_axi_aresetn;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_awaddr;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;3&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_awprot;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; s00_axi_awvalid;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; s00_axi_awready;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;32&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_wdata;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_wstrb;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; s00_axi_wvalid;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; s00_axi_wready;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_bresp;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; s00_axi_bvalid;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; s00_axi_bready;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_araddr;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;3&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_arprot;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; s00_axi_arvalid;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; s00_axi_arready;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;32&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_rdata;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] s00_axi_rresp;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; s00_axi_rvalid;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; s00_axi_rready;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    spi_4wire_w_v1_0 #
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         
&lt;span&gt; 34&lt;/span&gt;         .C_S00_AXI_DATA_WIDTH(&lt;span&gt;16&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         .C_S00_AXI_ADDR_WIDTH(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    uut
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Users to add ports here
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SPI signals&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        . sclk                (sclk)  ,
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        . sdin                (sdin)  ,
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;        . cs                  (cs)  ,
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        . dc                  (dc)  ,
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        . s00_axi_aclk        (s00_axi_aclk)  ,
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;        . s00_axi_aresetn     (s00_axi_aresetn)  ,
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;        . s00_axi_awaddr      (s00_axi_awaddr)  ,
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;        . s00_axi_awprot      (s00_axi_awprot)  ,
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        . s00_axi_awvalid     (s00_axi_awvalid)  ,
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        . s00_axi_awready     (s00_axi_awready)  ,
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        . s00_axi_wdata       (s00_axi_wdata)  ,
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        . s00_axi_wstrb       (s00_axi_wstrb)  ,
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        . s00_axi_wvalid      (s00_axi_wvalid)  ,
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        . s00_axi_wready      (s00_axi_wready)  ,
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;        . s00_axi_bresp       (s00_axi_bresp)  ,
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        . s00_axi_bvalid      (s00_axi_bvalid)  ,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;        . s00_axi_bready      (s00_axi_bready)  ,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        . s00_axi_araddr      (s00_axi_araddr)  ,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;        . s00_axi_arprot      (s00_axi_arprot)  ,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        . s00_axi_arvalid     (s00_axi_arvalid)  ,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        . s00_axi_arready     (s00_axi_arready)  ,
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        . s00_axi_rdata       (s00_axi_rdata)  ,
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        . s00_axi_rresp       (s00_axi_rresp)  ,
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;        . s00_axi_rvalid      (s00_axi_rvalid)  ,
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;        . s00_axi_rready      (s00_axi_rready)      
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;         s00_axi_aclk = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;forever&lt;/span&gt; #(CYC/&lt;span&gt;2.0&lt;/span&gt;) s00_axi_aclk = ~&lt;span&gt;s00_axi_aclk;
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;         s00_axi_aresetn = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         s00_axi_aresetn = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         #(RST_TIM*&lt;span&gt;CYC);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         s00_axi_aresetn = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; s00_axi_awprot = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; s00_axi_bready = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; s00_axi_arprot = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;     &lt;span&gt;assign&lt;/span&gt; s00_axi_rready = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         s00_axi_awaddr = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         s00_axi_awvalid = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         s00_axi_wdata = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         s00_axi_wstrb = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         s00_axi_wvalid = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         s00_axi_araddr = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         s00_axi_arvalid = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         #(RST_TIM*&lt;span&gt;CYC);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         #(CYC*&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;         s00_axi_awaddr = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         s00_axi_awvalid = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;         s00_axi_wdata = &lt;span&gt;32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h02_4a;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;         s00_axi_wstrb = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1111;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         s00_axi_wvalid = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         s00_axi_araddr = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         s00_axi_arvalid = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;        #5_000;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;        $stop;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;     
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;axi_spi_tb&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;行为仿真波形：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201902/1201289-20190205115146661-1384937084.png&quot; alt=&quot;&quot; width=&quot;1188&quot; height=&quot;409&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201902/1201289-20190205115241183-307877254.png&quot; alt=&quot;&quot; width=&quot;1192&quot; height=&quot;423&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;在CS为低时，串行输出为：0_1_0_0_1_0_1_0，正确完成SPI数据写功能。暂仅进行行为仿真，还没有上板验证，遇到问题后续改动更新。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 05 Feb 2019 03:58:00 +0000</pubDate>
<dc:creator>没落骑士</dc:creator>
<og:description>一、前言 最近花费很多精力在算法仿真和实现上，外设接口的调试略有生疏。本文以FPGA控制OLED中的SPI接口为例，重新夯实下基础。重点内容为SPI时序的RTL设计以及AXI-Lite总线分析。当然做</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/moluoqishi/p/10339863.html</dc:identifier>
</item>
<item>
<title>十分钟通过 NPM 创建一个命令行工具 - wenruo</title>
<link>http://www.cnblogs.com/wenruo/p/10352543.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenruo/p/10352543.html</guid>
<description>&lt;p class=&quot;article-title&quot;&gt;大过年的，要不要写点代码压压惊？来花十分钟学一下怎么通过 NPM 构建一个命令行工具。&lt;/p&gt;
&lt;div class=&quot;article-content&quot; data-v-5fb28c70=&quot;&quot; data-id=&quot;5c58ec07f265da2dd1683f81&quot; readability=&quot;51.219261053907&quot;&gt;
&lt;div readability=&quot;34.278214285714&quot;&gt;
&lt;div readability=&quot;22.565582371459&quot;&gt;
&lt;p&gt;写了一个小 demo，用于代替 &lt;code&gt;touch&lt;/code&gt; 的创建文件命令 &lt;code&gt;touchme&lt;/code&gt; ，可以创建自带“佛祖保佑”注释的文件。效果如下： &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/2/4/168b8b513aaea536?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; width=&quot;556&quot; height=&quot;557&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/2/4/168b8b513aaea536?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1275&quot; data-height=&quot;1280&quot;/&gt;&lt;/p&gt;
&lt;p&gt;命令可以带有一个参数，选择注释的符号&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2019/2/4/168b8b5842618fa9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot; width=&quot;557&quot; height=&quot;596&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2019/2/4/168b8b5842618fa9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1118&quot; data-height=&quot;1194&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;现在，开始撸代码 ~&lt;/p&gt;
&lt;p&gt;首先创建一个文件夹，我起名字 &lt;code&gt;create-file-cli&lt;/code&gt; 然后通过 &lt;code&gt;npm init&lt;/code&gt; 命令创建 &lt;code&gt;package.json&lt;/code&gt; 文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;mkdir&lt;/span&gt; create-&lt;span&gt;file&lt;/span&gt;-&lt;span&gt;cli
$ cd create&lt;/span&gt;-&lt;span&gt;file&lt;/span&gt;-&lt;span&gt;cli
$ npm init &lt;/span&gt;-y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后修改 &lt;code&gt;package.json&lt;/code&gt; 添加一个 &lt;code&gt;bin&lt;/code&gt; 字段，定义一个 &lt;code&gt;touchme&lt;/code&gt; 命令，并指定该命令执行的文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;name&quot;: &quot;create-file-cli&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;version&quot;: &quot;1.0.0&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;description&quot;: &quot;&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;main&quot;: &quot;index.js&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;scripts&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;bin&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;touchme&quot;: &quot;bin/touchme.js&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;keywords&quot;&lt;span&gt;: [],
  &lt;/span&gt;&quot;author&quot;: &quot;&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;license&quot;: &quot;ISC&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来实现 &lt;code&gt;bin/touchme.js&lt;/code&gt; ，要用到  &lt;a href=&quot;https://github.com/tj/commander.js/&quot; target=&quot;_blank&quot;&gt;Commander.js&lt;/a&gt; -- node.js 命令行接口的完整解决方案。看不懂英文文档还有贴心的中文 &lt;a href=&quot;https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md&quot; target=&quot;_blank&quot;&gt;README&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;bin/touchme.js&lt;/code&gt; 如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
#!/usr/bin/env node
&lt;span&gt;
const program &lt;/span&gt;= require('commander'&lt;span&gt;);
const gen &lt;/span&gt;= require('../lib/generate-file'&lt;span&gt;);

program
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 版本信息&lt;/span&gt;
  .version('0.0.4', '-v, --version'&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用法说明&lt;/span&gt;
  .usage('&amp;lt;file ...&amp;gt; [options]'&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选择名 选项描述 默认值&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选项 可以带有一个参数 可以通过 program.copy 获取该选项信息&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果没有参数 该值为 true&lt;/span&gt;
  .option('-c, --copy &amp;lt;source&amp;gt;', 'copy file and add comment'&lt;span&gt;)
  .option(&lt;/span&gt;'-H, --hashtag', `comment by '#'&lt;span&gt;`)
  .option(&lt;/span&gt;'-s, --slash', `comment by '/'&lt;span&gt;`)
  .parse(process.argv);

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; resolve(program) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有匹配任何选项的参数会被放到数组 args 中&lt;/span&gt;
  const { copy, hashtag, slash, args } =&lt;span&gt; program;
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;args.length) {
    console.log(&lt;/span&gt;'Please input filename.'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (copy === &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
    console.log(&lt;/span&gt;'You should copy at least one file.'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
  }
  let type &lt;/span&gt;= 'star'&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (slash) type = 'slash'&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (hashtag) type = 'hashtag'&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let i = 0; i &amp;lt; args.length; i++&lt;span&gt;) {
    gen(args[i], copy, type);
  }
}

resolve(program);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体 lib/generate-file.js 实现见 https://github.com/G-lory/create-file-cli/ 就是简单的创建一个文件并写入注释。&lt;/p&gt;
&lt;p&gt;通过 option 定义命令选项并可定义参数。&lt;/p&gt;
&lt;p&gt;通过 program 可以获取命令行输入的参数信息。&lt;/p&gt;
&lt;p&gt;现在功能写完了，剩下的事情就是发布了。首先要到 https://www.npmjs.com 查找一下自己的包名有没有人已经发布了，如果有的话，你需要先修改包名。然后在 https://www.npmjs.com 注册一个账号。记住自己的账号密码和邮箱后，回到命令行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ npm &lt;span&gt;login&lt;/span&gt;&lt;span&gt;
Username: ...
Password: 
Email: (this IS public)
Logged &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; as ... on https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;registry.npmjs.org/.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意登录成功后显示的是 https://registry.npmjs.org/ 很多同学设置了淘宝的镜像，显示的就不是这个地址，那么发布之前要改回来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ npm config set registry=http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;registry.npmjs.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以发布包了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
$ npm publish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果之后有修改，更改一下 &lt;code&gt;package.json&lt;/code&gt; 中的版本号 然后再次执行 &lt;code&gt;npm publish&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;发布后可以去 npm 网站搜索一下自己的包。然后就是安装测试一下功能。&lt;/p&gt;
&lt;p&gt;全局安装一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ npm &lt;span&gt;install&lt;/span&gt; create-&lt;span&gt;file&lt;/span&gt;-cli -g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以使用 &lt;code&gt;touchme&lt;/code&gt; 命令创建文件了。也可以使用 &lt;code&gt;touchme -h&lt;/code&gt; 来查看帮助。&lt;/p&gt;
&lt;p&gt;一个命令行工具就创建成功啦~~&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 05 Feb 2019 02:27:00 +0000</pubDate>
<dc:creator>wenruo</dc:creator>
<og:description>大过年的，要不要写点代码压压惊？来花十分钟学一下怎么通过 NPM 构建一个命令行工具。 写了一个小 demo，用于代替 touch 的创建文件命令 touchme</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenruo/p/10352543.html</dc:identifier>
</item>
<item>
<title>网站开发（周五）：项目前端页面开发（实战） - CHN如是说</title>
<link>http://www.cnblogs.com/linlei1234/p/10322778.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linlei1234/p/10322778.html</guid>
<description>&lt;p&gt;&lt;strong&gt;第一、前端基础简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前端网页：根据此前项目需求分析可知，我们需要开发网站首页、文章分类页、搜索页、正文页、标签页，而一个最基本网页模版有三部分，网页顶部导航条、网页中部主体、网页底部，其中顶部和底部布局固定，中部展示内容每张网页不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190126110226831-1208078950.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190126110246344-2130242006.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt; &lt;/p&gt;
&lt;p&gt;网页代码:我们知道，网页模板的基本代码的顶部和底部相同，主要中部主体在变化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;index.html

&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;mysite2019&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div&amp;gt;顶部&amp;lt;/div&amp;gt;

&lt;span&gt;&amp;lt;div&amp;gt;中部&amp;lt;/div&amp;gt;&lt;/span&gt;

&amp;lt;div&amp;gt;底部&amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模板继承：我们把所有网页相同的代码单独提取出来放在 base.html页面里，然后在代码不同的位置，也就是主体那里用模板标签{% block content %} {% endblock %}替换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
templates/&lt;span&gt;base.html 　　#父模板

&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;mystie2019&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div&amp;gt;顶部&amp;lt;/div&amp;gt;&lt;span&gt;

{% block content %}

{% endblock %}

&lt;/span&gt;&amp;lt;div&amp;gt;底部&amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;网站首页：在实现首页模板的时候，我们通过下面的代码实现，组合成一个完整的首页。{% extends &quot;base.html&quot; %} 的意思是继承 base.html页面的代码，且这个代码一定要放页面的第一行。两个页面里都有代码{% block xxx %}{% endblock %} ，代码{% block xxx %}{% endblock %} 里的xxx可以自由命名，这个代码意思是告诉模板引擎：这个位置我要预留给别人放东西的。一般是父模版基础代码被引用到子模板中，结合子模板的主体内容，形成一个网整网页，有效解决代码冗余、代码重复修改。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
templates/&lt;span&gt;&lt;span&gt;index.html  #子模板&lt;/span&gt;

{&lt;/span&gt;% extends &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;base.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;} 
{&lt;/span&gt;% block content %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;中部&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;
{&lt;/span&gt;% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;网页样式：{% block %} 标签非常有用，一般来说，基础模板中的 {% block %} 标签越多越好，用起来也会更灵活。例如，子模板要多引用一个CSS样式文件，这个样式只需要应用在当前页面。我们可以在base.html模板里多加一个{% block  css %} {% endblock %}标签,然后在子模板页面里加以引用，如此一来，这个CSS就只在当前页面生效。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
{% block  css %&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;CSS样式文件路径&lt;/span&gt;
&amp;lt;link href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;css/style.css&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /&amp;gt;&lt;span&gt;

{&lt;/span&gt;% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第二、网页需求分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结合此前的项目需求分析，我们需要实现五个页面的展现。网站首页、文章分类列表页、搜索列表页、标签列表页、文章内容展示页，这里，我们增加一个单页面（网站声明）。其中，文章分类列表页、搜索列表页、标签列表页这三个页面展示结构都一样，我们只需要一个模板页面即可。所以说我们真正需要实现的只有4个页面，这四个页面分别对应前端模板里的首页(index.html)、列表页（list.html）、内容页(show.html)、单页(page.html)。&lt;/p&gt;
&lt;p&gt;1、我们把前端设计师做好的静态模板static移动到mysite2019根目录里，然后把index.html、list.html、show.html、page.html四个页面复制到项目下templates目录里（之前做测试时templates目录里的index.html删除掉）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190126133751739-1477430507.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、通过观察，我们发现四个页面的头部和尾部相同，只有中间主体部分不同，通过继承，我们把相同部分的代码放到base.html。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
templates/&lt;span&gt;&lt;span&gt;base.html      #父模板&lt;br/&gt;&lt;/span&gt;{&lt;/span&gt;% load staticfiles %&lt;span&gt;}
&lt;/span&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;meta http-equiv=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x-dns-prefetch-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;meta http-equiv=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X-UA-Compatible&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IE=11,IE=10,IE=9,IE=8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    content&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple-mobile-web-app-title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hydra,Hacker学院&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;Hacker学院&amp;lt;/title&amp;gt;

&amp;lt;link rel=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bootstrap-css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;css/bootstrap.min.css&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; media=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
&amp;lt;link rel=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fontawesome-css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;css/font-awesome.min.css&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; media=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
&amp;lt;link rel=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;stylesheet-css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;css/style.css&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; media=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
&amp;lt;link rel=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;raxus-css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;css/raxus.css&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; media=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
&amp;lt;link rel=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;open-social-style-css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;css/os.css&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; media=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
    &amp;lt;meta name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;robots&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; content=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index,follow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
    &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keywords&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;网络安全、网络攻防、网络渗透&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;追踪黑客前沿咨询,速递最新、最猛、最价值的黑客科技资讯！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;home blog site-layout-2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;!-- 顶部 --&amp;gt;
&amp;lt;header &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fix-wrap&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fix-wrap&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fix-main clearfix pr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fix-main&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; _hover-ignore=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index-logo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% static &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;picture/logo2.png&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hacker学院&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/a&amp;gt;
        &amp;lt;nav &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nav fl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fix-list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fix-list clearfix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;li id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu-item-24086&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;首页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;span&gt;
                {&lt;/span&gt;% &lt;span&gt;for&lt;/span&gt; category &lt;span&gt;in&lt;/span&gt; allcategory %&lt;span&gt;}
                    &lt;/span&gt;&amp;lt;li id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu-item-117720&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'index' %}list-{{ category.id }}.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{ category.name }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;span&gt;
                {&lt;/span&gt;% endfor %&lt;span&gt;}
                &lt;/span&gt;&amp;lt;li id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu-item-24086&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/about/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;网站声明&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
        &amp;lt;form method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index-search  hidden-xs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/s/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;input &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输入关键字&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;button &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;i &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fa fa-search&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;span&gt;

{% block content %}

{% endblock %}

&lt;/span&gt;&amp;lt;!-- 底部 --&amp;gt;
&amp;lt;footer &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;copyright&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; © 2010- 2019&lt;span&gt; · All Rights Reserved
        · &lt;/span&gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/linlei1234/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;博客园&amp;lt;/a&amp;gt;&lt;span&gt;
        · &lt;/span&gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.miibeian.gov.cn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; target=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_blank&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;粤ICP备27022490号&amp;lt;/a&amp;gt;&lt;span&gt; 版权所有 © 博客园
    &lt;/span&gt;&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% static &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;js/bundle.js&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% static &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;js/view-history.js&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% static &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;js/push.js&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; src=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;js/jquery.min.js&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; src=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;js/bootstrap.min.js&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; src=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;js/raxus-slider.min.js&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; src=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;js/loader.js&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; src=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;js/bj-lazy-load.min.js&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; src=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{% static &quot;js/os.js&quot; %}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、index.html、list.html、show.html、page.html四个页面，删除底部底部相同代码，剩下中部主体代码，再在四个子模板基础上继承父模板，形成完整页面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
templates/&lt;span&gt;index.html、list.html、show.html、page.html&lt;/span&gt;&lt;p&gt;{% extends &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;base.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;}&lt;br/&gt;{&lt;/span&gt;% block content %&lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;#中部主体代码&lt;/span&gt;
{% endblock %}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、其中list.html和show.html这两个页面的右侧部分和index.html右侧除“热门文章排行&quot;部分之外，样式布局都一样，我们将其提取，放到right.html页面里，原来的位置我们用下面的代码&lt;span&gt;{% include 'right.html' %}&lt;/span&gt;替代，代表在此位置引入right.html代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
{% load staticfiles %&lt;span&gt;}   &lt;span&gt; #引入样式文件
&lt;/span&gt;&lt;/span&gt;&amp;lt;section &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;widget post-right-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;h4 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post-right-title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;热门推荐&amp;lt;/h4&amp;gt;
    &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post-hot clearfix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
        {&lt;/span&gt;% &lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; remen %&lt;span&gt;}
            &lt;/span&gt;&amp;lt;li&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'index' %}show-{{ k.id }}.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{{ k.title }}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'index' %}media/{{ k.img }}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; srcset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'index' %}media/{{ k.img }}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{{ k.title }}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                             &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wp-post-image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
                    &amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'index' %}show-{{ k.id }}.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{{ k.title }}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                       target&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_blank&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{ k.title }}&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/li&amp;gt;&lt;span&gt;
        {&lt;/span&gt;% endfor %&lt;span&gt;}
    &lt;/span&gt;&amp;lt;/ul&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;/section&amp;gt;
&amp;lt;section &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;widget post-right-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;h4 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post-right-title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;所有标签&amp;lt;/h4&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tags&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
        {&lt;/span&gt;% &lt;span&gt;for&lt;/span&gt; tag &lt;span&gt;in&lt;/span&gt; tags %&lt;span&gt;}
            &lt;/span&gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% url 'index' %}tag/{{ tag.name }}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{ tag.name }}&amp;lt;/a&amp;gt;&lt;span&gt;
        {&lt;/span&gt;% endfor %&lt;span&gt;}
    &lt;/span&gt;&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;/section&amp;gt;&amp;lt;!-- /关注我们 --&amp;gt;
&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post-right-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;h4 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post-right-title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;关注我们&amp;lt;/h4&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wid-about&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;p&amp;gt;博主微信，欢迎交流！&amp;lt;/p&amp;gt;
        &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% static &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;picture/weixin.jpg&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;微信二维码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wid-about&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;联系方式:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Phone: 15622333821&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Email：982240803@qq.com&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190126153625953-1868808051.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5、修改base.html页面，引入样式文件，形成最终模板（&lt;a href=&quot;https://pan.baidu.com/s/1x6E8IylP5HwA5mA_o811QQ&quot; target=&quot;_blank&quot;&gt;点击下载&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1x6E8IylP5HwA5mA_o811QQ&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190126154143245-1362337269.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三、修改配置文件&lt;/p&gt;
&lt;p&gt;1、在mysite2019/urls.py，给六个页面都设置一个URL，并添加别名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190126161417853-1175685132.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、在blog/views.py，写六个视图函数，与mysite2019/urls.py文件里的六个url一一对应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190126161908993-351445523.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; blog.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Category,Banner, Article, Tag, Link
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.core.paginator &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Paginator, EmptyPage, PageNotAnInteger

&lt;span&gt;#优化代码，减少冗余
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; global_variable(request):
    allcategory &lt;/span&gt;=&lt;span&gt; Category.objects.all()
    remen &lt;/span&gt;= Article.objects.filter(tui__id=2)[:6&lt;span&gt;]
    tags &lt;/span&gt;=&lt;span&gt; Tag.objects.all()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; locals()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;首页&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(request):
    banner &lt;/span&gt;= Banner.objects.filter(is_active=True)[0:4&lt;span&gt;]
    tui &lt;/span&gt;= Article.objects.filter(tui__id=1)[:3&lt;span&gt;]
    allarticle &lt;/span&gt;= Article.objects.all().order_by(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0:6&lt;span&gt;]
    hot &lt;/span&gt;= Article.objects.all().order_by(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;views&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[:10&lt;span&gt;]
    link &lt;/span&gt;=&lt;span&gt; Link.objects.all()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, locals())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;列表页&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; list(request,lid):
    list &lt;/span&gt;= Article.objects.filter(category_id=&lt;span&gt;lid)
    cname &lt;/span&gt;= Category.objects.get(id=&lt;span&gt;lid)
    page &lt;/span&gt;= request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    paginator &lt;/span&gt;= Paginator(list, 5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        list &lt;/span&gt;= paginator.page(page)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取当前页码的记录&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt; PageNotAnInteger:
        list &lt;/span&gt;= paginator.page(1)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果用户输入的页码不是整数时,显示第1页的内容&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt; EmptyPage:
        list &lt;/span&gt;= paginator.page(paginator.num_pages)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果用户输入的页数不在系统的页码列表中时,显示最后一页的内容&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;list.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, locals())


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;内容页&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; show(request,sid):
    show &lt;/span&gt;= Article.objects.get(id=&lt;span&gt;sid)
    hot &lt;/span&gt;= Article.objects.all().order_by(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[:10&lt;span&gt;]
    previous_blog &lt;/span&gt;= Article.objects.filter(created_time__gt=show.created_time,category=&lt;span&gt;show.category.id).first()
    netx_blog &lt;/span&gt;= Article.objects.filter(created_time__lt=show.created_time,category=&lt;span&gt;show.category.id).last()
    show.views &lt;/span&gt;= show.views + 1&lt;span&gt;
    show.save()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;show.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, locals())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;标签页&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; tag(request, tag):
    list &lt;/span&gt;= Article.objects.filter(tags__name=&lt;span&gt;tag)
    tname &lt;/span&gt;= Tag.objects.get(name=&lt;span&gt;tag)
    page &lt;/span&gt;= request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    paginator &lt;/span&gt;= Paginator(list, 5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        list &lt;/span&gt;= paginator.page(page)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当前页码的记录&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt; PageNotAnInteger:
        list &lt;/span&gt;= paginator.page(1)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果用户输入的页码不是整数时,显示第1页的内容&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt; EmptyPage:
        list &lt;/span&gt;= paginator.page(paginator.num_pages)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果用户输入的页数不在系统的页码列表中时,显示最后一页的内容&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tags.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, locals())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 搜索页&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; search(request):
    ss&lt;/span&gt;=request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;search&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    list &lt;/span&gt;= Article.objects.filter(title__contains=&lt;span&gt;ss)
    page &lt;/span&gt;= request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    paginator &lt;/span&gt;= Paginator(list, 10&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        list &lt;/span&gt;= paginator.page(page)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当前页码的记录&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt; PageNotAnInteger:
        list &lt;/span&gt;= paginator.page(1)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果用户输入的页码不是整数时,显示第1页的内容&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt; EmptyPage:
        list &lt;/span&gt;= paginator.page(paginator.num_pages)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果用户输入的页数不在系统的页码列表中时,显示最后一页的内容&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;search.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, locals())


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 关于我们&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; about(request):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,locals())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、打开mysite2019/settings.py，找到TEMPLATES，在里面添加索引代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513540/201901/1513540-20190127110453481-633758496.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，网站前端后台均创建完毕！&lt;/p&gt;
&lt;p&gt;接下来，对网站进行运行测试。&lt;/p&gt;
</description>
<pubDate>Tue, 05 Feb 2019 01:10:00 +0000</pubDate>
<dc:creator>CHN如是说</dc:creator>
<og:description>第一、前端基础简介 前端网页：根据此前项目需求分析可知，我们需要开发网站首页、文章分类页、搜索页、正文页、标签页，而一个最基本网页模版有三部分，网页顶部导航条、网页中部主体、网页底部，其中顶部和底部布</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linlei1234/p/10322778.html</dc:identifier>
</item>
<item>
<title>SpringBoot静态资源访问+拦截器+Thymeleaf模板引擎实现简单登陆 - 站在山顶的人</title>
<link>http://www.cnblogs.com/Mzcc/p/10352466.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mzcc/p/10352466.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;在此记录一下这十几天的学习情况，卡在模板引擎这里已经是四天了。 对Springboot的配置有一个比较深刻的认识，在此和大家分享一下初学者入门Spring Boot的注意事项，如果是初学SpringBoot，或者有意向学习Springboot的朋友，这篇文章可以简单的来帮助你，处理一些不必要的麻烦。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;开发环境：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　IDea&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　JDK1.8&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　SpringBoot2+&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　Maven3.5&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1、配置Maven&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们打开IdeA我们从新建一个项目开始。SpringBoot是基于Maven来管理Jar包的。首先我们需要在Idea中配置我们Maven的本地仓库位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205022919267-449305720.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这是我本地Maven的安装目录，Idea集成了Maven,其实是不用配置的，这里简述一下配置Maven的步骤&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　打开Maven安装目录下 /conf/文件夹下的     settings.xml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205023116316-2139142928.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个是Maven的配置文件，我们可以在其中的  如下.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205023246022-1022286384.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将上面的默认本地仓库位置做一个替换，可以从上图看到我们的本地仓库位置。 之后我们在项目中，就可以通过Pom.xml将我们需要的JAr 配置到Maven中，并且由Maven来管理我们的Jar包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意，每次更新Pom文件的时候，建议刷新一下当前的Maven项目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205023705787-843193843.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们来配置自己的本地仓库 ，我们在Idea的主界面打开设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205023812663-1392195265.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意，如果是在项目页面进行设置的话生效的是当前的项目，如果是在Idea主界面进行设置的话，那么生效的是整个IDea&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们在搜索框中输入Maven然后出现以下界面，找到自己的Maven的安装目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205023940033-1059271498.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并且指定自己的Maven配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205024134220-1703110000.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后我们创建一个SpringBoot的项目，幸运的是，SpringBoot支持快速构建Maven项目我们&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205024311411-256856842.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：这一步需要联网来下载组件!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205024456416-1340812977.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以在如下的界面选择我们项目需要引入的组件，并且来引入需要的Start&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们这里选用的tymeleaf的模板引擎和 Web的支持&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;项目骨架：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205025017043-1090126594.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;静态资源访问的问题，SpringBoot自动将  如下几个文件夹作为整个项目的静态资源文件夹优先级自高至低如下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;classpath:/META-INF/resources/&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;classpath:/resources/&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;classpath:/static/&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;classpath:/public/&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;/&quot;：当前项目的根路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们将准备好的图片分别放到如上几个文件夹上，用来测试访问路径优先级：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205025511450-1164379424.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 同时：我们通过查看 SpringBoot 自动配置中的 Thymeleaf源码得知以下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205025657396-1809506702.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析前缀以及后缀和默认路径，同时，文件名为Index.html的文件默认被识别为当前项目的主页：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;区别于Jsp的不同是 Thymeleaf使用.html后缀的页面来进行展示，我们需要在页面上引入thymeleaf的命名空间     &lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;xmlns:th=&quot;http://www.thymeleaf.org&quot;   你不引入也是可以的但是没有快捷提示！&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205030400524-1085961849.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们在页面上 添加了一个Img 同时启动SpringBoot&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;启动成功：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205030540535-825018855.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到图片可以正常的访问，同时Thymeleaf解析的就是我们类路径下的  templates文件夹，同时为index.html的页面会被解析为首页。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;篇幅有限，这里仅对SpringBoot静态资源有一个简单的介绍，有兴趣的小伙伴可以将图片路径做个更改一一尝试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并且这里有一点需要注意的是，在是同thymeleaf引入资源的时候不需要加 当前静态资源文件夹的名字，例如&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205030909427-1033914303.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上简单的页面访问我们已经搞定了，现在解决一下 拦截器和拓展Spring Boot配置时 静态资源失效的问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我们先创建一个自定义的拦截器，注意，是在SpringBoot启动类同级别的目录下创建的，这里牵扯了一个SpringBoot的自动装配原理，默认扫描了SpringBoot启动类同级别的文件和其子包，感兴趣的同学可以去看一下SpringBoot的自动装配原理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205031547000-1407785602.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后我们在自定义的拦截器中使用日志来记录，这里是使用了slf4J和其实现logbak&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205031733501-524390647.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;层次图如下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205031911145-817796566.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 想让我们的自定义拦截器生效，还不行，我们需要写一个自定义配置类来完成我们的操作  如下图，有两种方式来帮助我们拓展配置，注意，这是在SpringBoot2.0之后  废弃了原有的    WebMvcConfigurerAdapter&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205032102983-2002009347.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里选用的是第一种方法，同时对拦截器进行配置拦截所有资源测试日志输出。  同时还可以对不需要拦截的资源做排除，注意下这个形参的参数类型。可以传入数组 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205032525088-392415832.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之后便是对拦截器的测试:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们在浏览器访问默认端口后  发现页面 404  观看控制台后发现 拦截器生效 ，即日志已经打印。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205032729445-886100541.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么我们的Index首页去哪了呢？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们首先看一下访问不到的页面：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205032804827-1986120699.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 后来我们知道是拦截器在作怪，我们添加一个视图映射就可以解决找不到主页的问题了：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205033926196-20897535.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;成功访问：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1402408/201902/1402408-20190205034016448-966184201.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;成功访问，这次的心得就分享到这里了，希望能帮到大家，一定要注意上面我说到的知识点，如果对哪一个知识点不熟悉的话，一定要多查资料，多思考，想想为什么这么做，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今天也正好是大家初一，给大家拜个年，新年快乐。祝大家在新的一年里，编译一遍过，运行无Bug，最后有一句话送给大家：不积跬步,无以至千里&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Java交流群 682677231&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Feb 2019 19:47:00 +0000</pubDate>
<dc:creator>站在山顶的人</dc:creator>
<og:description>在此记录一下这十几天的学习情况，卡在模板引擎这里已经是四天了。 对Springboot的配置有一个比较深刻的认识，在此和大家分享一下初学者入门Spring Boot的注意事项，如果是初学SpringB</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mzcc/p/10352466.html</dc:identifier>
</item>
<item>
<title>Mybatis延迟加载、缓存 - 风沙迷了眼</title>
<link>http://www.cnblogs.com/fsmly/p/10343184.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fsmly/p/10343184.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、Mybatis中的延迟加载&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　1、延迟加载背景：Mybatis中Mapper配置文件中的resultMap可以实现高级映射(使用association、collection实现一对一及一对多（多对多）映射)，同样的association、collection具备延迟加载功能。所谓延迟加载，就是先单表查询，需要时再从关联表去关联查询（同样也可能只是是单表查询），大大单表查询速度更快，所以可以间接的提高数据库性能&lt;/p&gt;
&lt;p&gt;　　2、在mybatis核心配置文件中配置，其中lazyLoadingEnabled表示懒加载开关、aggressiveLazyLoading表示非懒加载（积极加载），通过在Mybatis核心配置文件中配置这些属性的值来使用Mybatis的懒加载，具体配置方式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;懒加载模式在Mybatis中默认是关闭的&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;lazyLoadingEnabled&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;不同于懒加载的：积极加载方式，所以在懒加载的时候设置该属性为false&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;aggressiveLazyLoading&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;setting&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　3、由于是使用懒加载，所以我们显然可以将Mapper配置文件中的查询分为两张单表查询的statment，其中User表的查询放在Order查询配置的resultMap中，并进行延迟加载的设置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_94174381-0671-423d-a9e7-d2ab6d738cad&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_94174381-0671-423d-a9e7-d2ab6d738cad&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94174381-0671-423d-a9e7-d2ab6d738cad&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserByUid&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM USER WHERE uid = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;OrderAndUserByLazyLoading&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.Order&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;oid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;oid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;ordertime&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;ordertime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
            实现延迟加载功能
            select：指定延迟加载需要执行的statment的id（即根据用户id查询用户信息的select的statment）
            column：关联查询的列信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt; select&lt;/span&gt;&lt;span&gt;=&quot;findUserByUid&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;association&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findOrderAndUserByLazyLoading&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;OrderAndUserByLazyLoading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM orders
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;LazyLoading配置文件信息&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131153845976-768727125.png&quot; alt=&quot;&quot; width=&quot;711&quot; height=&quot;353&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4、在Mapper.java中添加了延迟加载的测试方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;延迟加载测试方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; findOrderAndUserByLazyLoading() &lt;span&gt;throws&lt;/span&gt; Exception;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5、使用Junit测试延迟加载的测试代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindOrderAndUserByLazyLoading() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         OrderMapper orderMapper = sqlSession.getMapper(OrderMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         List&amp;lt;Order&amp;gt; orderList=&lt;span&gt; orderMapper.findOrderAndUserByLazyLoading();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Order order : orderList) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            System.out.println(order.getUser());
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　6、测试结果，从测试结果可以看出，我们首先只是单表查询了order是表的信息，然后在遍历查询到的结果（打印User信息）的时候，又发出查询user信息的Sql，从而实现了延迟加载的功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131154305963-1821457846.png&quot; alt=&quot;&quot; width=&quot;542&quot; height=&quot;183&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、Mybatis中的一级缓存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、一级缓存是在SqlSession 层面进行缓存的。即在同一个SqlSession 中，多次调用同一个Mapper中的同一个statment并且是同一个参数的话，只会进行一次数据库查询，然后把数据缓存到缓冲中，如果以后要查询相同的Sql和参数，就直接先从缓存中取出数据，不会直接去查数据库。​ 但是不同的SqlSession对象，因为不用的SqlSession都是相互隔离的，所以相同的Mapper、参数和方法，他还是会再次发送到SQL到数据库去执行，返回结果。（本质上是在SqlSession作用域下面的HashMap本地缓存，当 SqlSession 刷新或 关闭之后，该Session中的所有 缓存数据就将清空。）可以用下面的这张图来表示一级缓存&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131171211430-219965001.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;229&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;2、我们来使用一级缓存进行测试，首先通过上面一级缓存的简单定义，我们可以得到下面的这张简略图，用以示解一级缓存。在实例图中，第一次查询某条记录时候，Mybatis所做的就是将查询到的结果放在该SqlSession的缓存中，如果期间没有该数据的修改、删除、或者增加操作，那么之后再读取该数据就会直接从缓存中得到数据，而不用再向数据库发Sql请求，当然，如果第一次查询之后，对数据进行了delete、update、insert操作，那么就会删除缓存中的数据，这样做的目的也很显然，保证数据的最新性，避免出现脏读的情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131171742720-1111575335.png&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;263&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、一级缓存的测试（Mybatis中默认开启的是一级缓存）&lt;/p&gt;
&lt;p&gt;　　做个简单的测试：按照上面的图中所示，我们查询两次id=1的User信息，并且两次查询期间没有进行会清空缓存的操作，结果应该是只向数据库发送一次Sql查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testUpdateUserInfo() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         User user1 = userMapper.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        System.out.println(user1);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         User user2 = userMapper.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        System.out.println(user2);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　4、我们通过观察日志可以看出，只是在第一次查询的时候发送了Sql，第二次是直接打印user信息&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131174344762-901645594.png&quot; alt=&quot;&quot; width=&quot;546&quot; height=&quot;153&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　当然，接下来要做的测试就是在两次查询期间做insert操作，然后观察日志，结果应该是发现会想数据库发送两次sql&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testUpdateUserInfo() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         User user1 = userMapper.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        System.out.println(user1);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         User user = &lt;span&gt;new&lt;/span&gt; User(&quot;InsertTest&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;man&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        userMapper.insertUserInfo(user);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         User user2 = userMapper.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        System.out.println(user2);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　5、我们在测试代码中加了insert之后，通过观察日志可以发现，在查询过程中，向Database发送了两条select语句，可以验证上面的猜想&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131175900534-194135852.png&quot; alt=&quot;&quot; width=&quot;398&quot; height=&quot;209&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、Mybatis中的二级缓存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、二级缓存的实现机制基本上和一级缓存机制相同，不同的作用域不一样，二级缓存区域在一个个的mapper中。显然，由于多个SqlSession可以操作同一个mapper，所以二级缓存比一级缓存域更大。二级缓存按照mapper划分，简而言之，也可说成按照mapper中的namespace进行划分，这样看来，每一个namespace下面都有一个二级缓存区域，而如果两个mapper的namespace相同，那么数据会缓存在相同的缓存区域中。当然，类似于一级缓存的特点，如果不同的SqlSession进行数据的insert、delete、update操作的话，也会清空二级缓存中的数据&lt;/p&gt;
&lt;p&gt;　　2、开启二级缓存后，进行测试。具体使用二级缓存在配置文件中的配置为：&lt;/p&gt;
&lt;p&gt;　　首先在Mybatis的核心配置文件中配置二级缓存（本项目中的SQLMapConfig.xml）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;settings配置二级缓存 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cacheEnabled&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;setting&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　然后在需要配置二级缓存的特定mapper配置文件中进行添加二级缓存的配置&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131183841841-646654893.png&quot; alt=&quot;&quot; width=&quot;274&quot; height=&quot;50&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、编写测试程序并运行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt; @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testCache() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         SqlSession sqlSession1 =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         User user1 = userMapper1.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        System.out.println(user1);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要将SqlSession关闭才能将数据写入缓存&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        sqlSession1.close();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         SqlSession sqlSession2 =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         User user2 = userMapper2.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        System.out.println(user2);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        sqlSession2.close();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在运行的时候出现了下面的异常，原因就是没有实现序列化接口，由于缓存数据可能再本地内存中，也可能在其他存储介质上，所以存在对象的序列化和反序列化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131183822418-1216700054.png&quot; alt=&quot;&quot; width=&quot;976&quot; height=&quot;24&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　所以在实现序列化接口之后，再次运行，得到下面的结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131184626127-1471267258.png&quot; alt=&quot;&quot; width=&quot;689&quot; height=&quot;221&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 四、Mybatis和ehcache整合&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　1、首先说明ehcache是一个分布式的缓存框架，而使用Mybatis和ehcache进行整合的时候，首先就需要导入ehcache的jar包和mybatis与ehcache整合的jar包，如下图所示&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190201114830407-2038273897.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;59&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　2、下面是mybatis-ehcache整合jar包中的Cache接口实现类&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190201115058068-1302172749.png&quot; alt=&quot;&quot; width=&quot;320&quot; height=&quot;111&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、然后我们在Mapper配置文件中配置二级缓存&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;关于cache标签的一些属性说明：
        type：指定Mybatis中默认实现的cache接口的实现类类型，Mybatis中默认使用PerpetualCache
        如果和ehcache整合，需要将type配置为ehcache实现cache的实现类类型
    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;cache &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、下面是mybatis和ehcache整合之后的测试结果&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201902/1368768-20190201122942975-1791110422.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;271&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 04 Feb 2019 17:23:00 +0000</pubDate>
<dc:creator>风沙迷了眼</dc:creator>
<og:description>一、Mybatis中的延迟加载 1、延迟加载背景：Mybatis中Mapper配置文件中的resultMap可以实现高级映射(使用association、collection实现一对一及一对多（多对多</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fsmly/p/10343184.html</dc:identifier>
</item>
</channel>
</rss>