<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring 笔记 -06- 从 MySQL 建库到 登录验证数据库信息（maven） - 肖朋伟</title>
<link>http://www.cnblogs.com/xpwi/p/10223054.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xpwi/p/10223054.html</guid>
<description>&lt;h3 id=&quot;spring-笔记--06--从-mysql-建库到-登录验证数据库信息maven&quot;&gt;Spring 笔记 -06- 从 MySQL 建库到 登录验证数据库信息（maven）&lt;/h3&gt;
&lt;p&gt;本篇和 Spring 没有什么关系，只是学习 Spring，必备一些知识，所以放在这里了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）MySQL 命令行，建立用户信息数据库，密码用 md5 加密&lt;br/&gt;（2）jdbc 链接 MySQL 8.0&lt;br/&gt;（3）Maven 管理 servlet，jsp 依赖&lt;br/&gt;（4）单元测试&lt;br/&gt;（5）难点在 DBUtils.java 文件！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态截图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190104230953722.gif&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;一建立用户信息-mysql-数据库&quot;&gt;一、建立用户信息 MySQL 数据库&lt;/h3&gt;
&lt;p&gt;（建议名称一致）&lt;/p&gt;
&lt;p&gt;（1）安装 MySQL 请百度或参考：&lt;a href=&quot;https://blog.csdn.net/qq_40147863/article/details/85685987&quot;&gt;MySQL 安装 + 入门大全 + 常用命令合集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（2）打开 cmd ，登录 mysql 的 root 用户，创建 studb 数据库，创建表 tb_user ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190104222913608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70&quot; width=&quot;90%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）显示表结构，插入 3 条用户数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190104223120912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70&quot; width=&quot;90%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）数据库 studb，表 tb_user 创建好了。&lt;/p&gt;
&lt;h3 id=&quot;二创建-maven-web-项目配置&quot;&gt;二、创建 Maven Web 项目，配置&lt;/h3&gt;
&lt;p&gt;（1）创建项目和修改目录结构，因为常用，所以写在了单独的一篇文章，请查看：&lt;a href=&quot;https://blog.csdn.net/qq_40147863/article/details/85771619&quot;&gt;Spring 笔记 -05- 创建 Maven Web 项目 + Tomcat 及目录结构配置&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;（2）上面一篇文章，全部需要！&lt;/p&gt;
&lt;p&gt;（3）配置 Maven 的配置文件 pom.xml 文件，位置在下面有提示：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;

    &amp;lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;javax.servlet.jsp&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;javax.servlet.jsp-api&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;2.3.3&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;

    &amp;lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;8.0.13&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;


  &amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190104223948172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）点击自动导入：&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190104224058632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70&quot; width=&quot;60%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（5）创建如下目录及文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/201901042244008.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,&quot; width=&quot;60%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（6）下面需要先做一件事，就是在 js 目录中，引入 Bootstrap3，&lt;br/&gt;注意：只能是 Bootstrap3 版本：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;安装 Node.js ，因为要使用 npm&lt;/li&gt;
&lt;li&gt;在项目中 js 目录，右键 Open in Explorer 可以打开该目录，并复制&lt;/li&gt;
&lt;li&gt;在 cmd 进入项目的 js 目录&lt;/li&gt;
&lt;li&gt;使用命令：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;npm install bootstrap3&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;三具体文件编码&quot;&gt;三、具体文件编码：&lt;/h3&gt;
&lt;p&gt;（1）index.jsp 文件，用于登录成功时跳转：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
&amp;lt;%--
    输出 Hello World，当前时间，列表
    列表内容为 com.list.StuList 中的内容
--%&amp;gt;

&amp;lt;%@ page import=&quot;java.util.Date&quot; pageEncoding=&quot;UTF-8&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2&amp;gt;登陆成功！&amp;lt;/h2&amp;gt;
当前时间为：&amp;lt;%=new Date().toLocaleString()%&amp;gt;
&amp;lt;hr&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）failed.jsp 文件，用于登录失败时跳转：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;lt;%--
    登录失败！
--%&amp;gt;

&amp;lt;%@ page import=&quot;java.util.Date&quot; pageEncoding=&quot;UTF-8&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2&amp;gt;登陆失败！&amp;lt;/h2&amp;gt;
当前时间为：&amp;lt;%=new Date().toLocaleString()%&amp;gt;
&amp;lt;hr&amp;gt;

&amp;lt;br&amp;gt;
&amp;lt;a href=&quot;login.html&quot; class=&quot;btn btn-default&quot;&amp;gt;返回登录&amp;lt;/a&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）login.html 文件，登录的前端界面：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;用户登录&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;js/node_modules/bootstrap3/dist/css/bootstrap.min.css&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;js/node_modules/bootstrap3/dist/css/bootstrap-theme.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;form name=&quot;loginForm&quot; action=&quot;Servlet&quot; method=&quot;post&quot;&amp;gt;
    &amp;lt;div class=&quot;center-block&quot; style=&quot;width: 45%;height: 350px&quot;&amp;gt;
        &amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
            &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
                &amp;lt;span class=&quot;glyphicon glyphicon-apple&quot;&amp;gt;&amp;lt;/span&amp;gt;用户登录

            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
                &amp;lt;div class=&quot;text-success&quot; align=&quot;center&quot;&amp;gt;
                    &amp;lt;h3&amp;gt;欢迎使用资源统一管理系统&amp;lt;/h3&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;input-group&quot;&amp;gt;
                    &amp;lt;label class=&quot;input-group-addon&quot;&amp;gt;用户名&amp;lt;/label&amp;gt;
                    &amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot; name=&quot;uname&quot; placeholder=&quot;请输入用户名&quot;&amp;gt;
                    &amp;lt;label class=&quot;input-group-addon text-warning&quot;&amp;gt;*&amp;lt;/label&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;br&amp;gt;
                &amp;lt;div class=&quot;input-group&quot;&amp;gt;
                    &amp;lt;label class=&quot;input-group-addon&quot;&amp;gt;密&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;码&amp;lt;/label&amp;gt;
                    &amp;lt;input class=&quot;form-control&quot; type=&quot;password&quot; name=&quot;upwd&quot; placeholder=&quot;请输入密码&quot;&amp;gt;
                    &amp;lt;label class=&quot;input-group-addon text-warning&quot;&amp;gt;*&amp;lt;/label&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;br&amp;gt;
                &amp;lt;div class=&quot;input-group&quot;&amp;gt;
                    &amp;lt;label class=&quot;input-group-addon&quot;&amp;gt;权&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;限&amp;lt;/label&amp;gt;
                    &amp;lt;select name=&quot;role&quot; class=&quot;form-control &quot;&amp;gt;
                        &amp;lt;option value=&quot;admin&quot;&amp;gt;管理员&amp;lt;/option&amp;gt;
                        &amp;lt;option value=&quot;teacher&quot;&amp;gt;经理&amp;lt;/option&amp;gt;
                        &amp;lt;option value=&quot;student&quot;&amp;gt;用户&amp;lt;/option&amp;gt;
                    &amp;lt;/select&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div align=&quot;center&quot;&amp;gt;


                &amp;lt;a href=&quot;javascript:loginForm.submit()&quot; class=&quot;btn btn-danger&quot;&amp;gt;&amp;lt;span
                        class=&quot;glyphicon glyphicon-log-in&quot;&amp;gt;&amp;lt;/span&amp;gt; 登录&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;
                &amp;lt;a href=&quot;javascript:loginForm.reset()&quot; class=&quot;btn btn-primary&quot;&amp;gt;&amp;lt;span
                        class=&quot;glyphicon glyphicon-remove&quot;&amp;gt;&amp;lt;/span&amp;gt; 重置&amp;lt;/a&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;br&amp;gt;
            &amp;lt;div class=&quot;panel-footer&quot;&amp;gt;
                &amp;lt;div align=&quot;center&quot;&amp;gt;
                    &amp;amp;copy;2018-2019 肖朋伟的 CSDN 博客 Copy Right

               &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果成功引入 Bootstrap3 ，打开服务器，打开本页面，会有下面界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190104225706262.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）User.java 文件：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.pojo;

//用来存放用户登录时，输入输出的信息
public class User {
    private String uname;
    private String upwd;
    private String role;

    public String getUname() {
        return uname;
    }

    public void setUname(String uname) {
        this.uname = uname;
    }

    public String getUpwd() {
        return upwd;
    }

    public void setUpwd(String upwd) {
        this.upwd = upwd;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）UserDAO.java 文件：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.dao;

import com.dbutil.DBUtils;
import com.pojo.User;

public class UserDAO {

    //返回 0 或 1
    public int login(User user){
        DBUtils dbUtils = new DBUtils();

        //与数据库是否匹配，匹配为 1
        int temp = dbUtils.login(user);
        return temp;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（6）DBUtils.java 文件：&lt;br/&gt;！！！ 成败在与这个文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;自行更改数据库名&lt;/li&gt;
&lt;li&gt;自行更改表名（两个）&lt;/li&gt;
&lt;li&gt;自行更改 root 的密码&lt;/li&gt;
&lt;li&gt;检查服务是否启动&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.dbutil;

import com.pojo.User;

import java.sql.*;

public class DBUtils {
    Connection conn;
    //预处理
    PreparedStatement pstmt;
    //结果集
    ResultSet rs;

    public DBUtils(){
        try{
            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&quot;,&quot;root&quot;,&quot;密码&quot;);

        } catch (Exception e){
            e.printStackTrace();
        }
    }

    public int login(User user){
        try{
            pstmt=conn.prepareStatement(&quot;select * from 表名 where uname = ? and upwd = md5(?)&quot;);
            pstmt.setString(1, user.getUname());
            pstmt.setString(2, user.getUpwd());
            rs = pstmt.executeQuery();
            if (rs.next())
                return 1;
            else
                return 0;
        }catch (Exception e){
            e.printStackTrace();
        }

        return 0;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（7）Servlet.java 文件：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
package com.loginServlet;

import com.pojo.User;
import com.service.UserService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet(name = &quot;Servlet&quot;,urlPatterns = &quot;/Servlet&quot;)
public class Servlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println(&quot;doPost&quot;);
        request.setCharacterEncoding(&quot;utf-8&quot;);
        //获取 post 请求中的两个参数
        String uname = request.getParameter(&quot;uname&quot;);
        String upwd = request.getParameter(&quot;upwd&quot;);
        String role = request.getParameter(&quot;role&quot;);


        /*硬编码, 不从数据库获取信息，直接验证
        if (uname.equals(&quot;admin&quot;) &amp;amp;&amp;amp; upwd.equals(&quot;123456&quot;)) {
            response.sendRedirect(&quot;index.jsp&quot;);
        }else{
            response.sendRedirect(&quot;loginServlet.html&quot;);
        }*/

        //从服务获取值
        UserService userService = new UserService();

        User user = new User();
        user.setUname(uname);
        user.setUpwd(upwd);
        user.setRole(role);

        if (userService.login(user)) {
            response.sendRedirect(&quot;index.jsp&quot;);
        }else{
            response.sendRedirect(&quot;failed.jsp&quot;);
        }

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println(&quot;doGet&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（8）UserService.java 文件：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
package com.service;

//服务层，给控制层提供服务

import com.dao.UserDAO;
import com.pojo.User;

public class UserService {

    UserDAO dao = new UserDAO();

    //参数，处理 User 对象，返回 True 或 False
    public boolean login(User user){
        int temp = dao.login(user);
        if (temp == 0)
            return false;
        else
            return true;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;四运行调试&quot;&gt;四、运行调试&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190104231032358.gif&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;五常见错误&quot;&gt;五、常见错误&lt;/h3&gt;
&lt;p&gt;（1）MySQL 8.0 版本的 jdbc 个数据版本不匹配&lt;/p&gt;
&lt;p&gt;（2）数据库服务没有运行&lt;/p&gt;
&lt;p&gt;（3）配置文件数据库信息没有自行更改&lt;/p&gt;
&lt;p&gt;（4）文件名自定义时，依赖失败&lt;/p&gt;
&lt;h3 id=&quot;更多文章链接&quot;&gt;更多文章链接：&lt;/h3&gt;
&lt;h3 id=&quot;支持博主&quot;&gt;支持博主&lt;/h3&gt;
&lt;p&gt;我正在参加 CSDN 2018 年博客之星评选，希望大家能支持我，&lt;br/&gt;我是【No. 001】号 肖朋伟 ，感谢大家宝贵的一票 ^_^/&lt;br/&gt;投票地址：https://bss.csdn.net/m/topic/blog_star2018/index&lt;/p&gt;
</description>
<pubDate>Fri, 04 Jan 2019 15:40:00 +0000</pubDate>
<dc:creator>肖朋伟</dc:creator>
<og:description>Spring 笔记 06 从 MySQL 建库到 登录验证数据库信息（maven） 本篇和 Spring 没有什么关系，只是学习 Spring，必备一些知识，所以放在这里了。 本篇内容： （1）MyS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xpwi/p/10223054.html</dc:identifier>
</item>
<item>
<title>Django 系列博客（二） - Eurekaa</title>
<link>http://www.cnblogs.com/zuanzuan/p/10223016.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuanzuan/p/10223016.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;今天博客的内容为使用 Django 完成第一个 Django 页面，并进行一些简单页面的搭建和转跳。&lt;/p&gt;
&lt;h2 id=&quot;命令行搭建-django-项目&quot;&gt;命令行搭建 Django 项目&lt;/h2&gt;
&lt;h3 id=&quot;创建纯净虚拟环境&quot;&gt;创建纯净虚拟环境&lt;/h3&gt;
&lt;p&gt;在上一篇博客中已经安装好了虚拟环境，所以用虚拟环境来安装指定版本的 Django。为了可以从头到尾的走一遍流程，我重新创建了一个虚拟环境。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fyuq46n1ycj313k0b00yf.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;激活虚拟环境并安装-django&quot;&gt;激活虚拟环境并安装 Django&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;首先进入虚拟环境路径下的 bin 目录&lt;/li&gt;
&lt;li&gt;使用命令激活虚拟环境&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyuq6rh7h5j313g05oaci.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;安装指定版本 Django&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;首先使用 pip3 list 命令查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fyuq7edhb1j313o05kwfx.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到都是创建虚拟环境时安装的依赖包，现在使用 pip 命令安装指定 django 版本，因为做项目需要稳定，所以安装的版本不是最新的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fyuq9n2jaej313m0e0n3c.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到新安装了2个包，pytz 是 python time zone 的缩写，是用来转换时区的包。&lt;/p&gt;
&lt;h3 id=&quot;创建项目&quot;&gt;创建项目&lt;/h3&gt;
&lt;p&gt;前往目标路径创建项目，在这里我的 django 项目都在我的家目录下面的 django_project里面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fyuqe1vnb2j313c04wgo1.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进入要创建项目的路径下，使用下面的命令创建一个 django 项目。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;django-admin startproject project_name&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fyuuczax3cj313q03ijt8.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到多了个文件夹。查看项目结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyuudl83h1j313m08smz6.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建应用&quot;&gt;创建应用&lt;/h3&gt;
&lt;p&gt;进入项目根目录使用下面命令创建一个 app。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python3 manage.py startapp app_name&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fyuuftcwznj313m0dm42j.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建成功并查看项目结构。&lt;/p&gt;
&lt;h3 id=&quot;启动项目&quot;&gt;启动项目&lt;/h3&gt;
&lt;p&gt;使用下面命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python3 manage.py runserver 127.0.0.1:8888&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;成功后会在本机上的8888端口开启 django 服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fyuuhy11ctj313q0dg43k.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问8888端口会显示下图页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyuuis02hwj31b30u0qdz.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，到现在你已经开启了第一个 django 服务，并且还是使用了命令行。&lt;/p&gt;
&lt;h2 id=&quot;pycharm-创建-django-项目&quot;&gt;pycharm 创建 Django 项目&lt;/h2&gt;
&lt;p&gt;其实会使用命令行创建项目那么使用 pycharm 应该是手到擒来，毕竟 pycharm 已经做了很多工作了。不过也有点麻烦。。。&lt;/p&gt;
&lt;h3 id=&quot;在虚拟环境下使用-pycharm-安装指定django-版本&quot;&gt;在虚拟环境下使用 pycharm 安装指定django 版本&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fyuupb78ktj31bi0u0wuz.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建项目-1&quot;&gt;创建项目&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fyuuqqcy7ij31740sowkx.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;项目目录结构及作用&quot;&gt;项目目录结构及作用&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;项目目录：包含项目最基本的一些配置
    -- __init__.py：模块的配置文件，将blog_proj文件夹变成了模块
    -- settings.py：配置总文件
    -- urls.py：url配置文件，django项目中的所有页面都需要对其配置url地址
    -- wsgi.py：(web server gateway interface)，服务器网关接口，python应用与web服务器直接通信的接口
templates：模板文件夹，存放html文件的(页面)，支持使用Django模板语言(DTL)，也可以使用第三方(jinja2)
manage.py：项目管理器，与项目交互的命令行工具集的入口，查看支持的所有命令python3 manage.py&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;settings.py结构&quot;&gt;settings.py结构&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import os
# 项目根目录
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 项目安全码
SECRET_KEY = 'guwba1u$18=&amp;amp;*8kf44_u&amp;amp;swqb@xlwgel7n$0rs=(+f10yvz)p0'

# 调试模式，上线项目要关闭debug模式，不然后台出现异常会直接抛给前台展现给用户看了
DEBUG = True

# 在上线项目中，规定只能以什么ip地址来访问django项目
# DEBUG = FALSE
# ALLOWED_HOSTS = ['localhost']
ALLOWED_HOSTS = []

# 项目自带的应用
# 我们创建了自己的应用就要将自定义应用添加到该配置
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# 中间件
# django自带的工具集
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 配置url配件文件的根文件，执行urls.py
ROOT_URLCONF = '项目目录.urls'

# 模板，一个个html文件
TEMPLATES = [
    {
        # 如果使用第三方，可以在这个地方修改模板引擎
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 服务器网关接口应用
WSGI_APPLICATION = '项目目录.wsgi.application'

# 数据库配置
# 要配置自定义数据库去下面链接去查询详细配置
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# 密码认证配置
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# 国际化相关配置
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# 静态文件地址 (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = '/static/'&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;创建项目应用&quot;&gt;创建项目应用&lt;/h3&gt;
&lt;p&gt;使用 pycharm 自带的命令行工具来创建应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fyuuvtcnljj31b30u0atp.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;应用创建完后将应用名添加到 settings.py文件中&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;INSTALLED_APPS = [
    'django.contrib.admin',
        ...
    'django.contrib.staticfiles',
    # 添加的自定义应用
    'app',
]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;app目录结构&quot;&gt;app目录结构&lt;/h3&gt;
&lt;p&gt;创建后的 app 目录结构和使用命令行创建的一样，下面来看看具体都有什么作用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;migrations：数据迁移(移植)模块，内容都是由Django自动生成
    -- __init__.py
__init__.py
admin.py：应用的后台管理系统配置
apps.py：django 1.9后，本应用的相关配置
models.py：数据模型模块，使用ORM框架，类似于MVC模式下的Model层
tests.py：自动化测试模块，可以写自动化测试脚本
views.py：执行相应的逻辑代码模块(相应什么，如何相应)，代码逻辑处理的主要地点，项目的大部分代码所在位置&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;页面响应&quot;&gt;页面响应&lt;/h2&gt;
&lt;h3 id=&quot;第一个响应&quot;&gt;第一个响应&lt;/h3&gt;
&lt;p&gt;通过配置路由和视图文件来响应第一次连接请求。&lt;/p&gt;
&lt;h4 id=&quot;配置路由&quot;&gt;配置路由&lt;/h4&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django.conf.urls import url
from django.contrib import admin

# 导入应用视图
import app.views as app_view # 取别名

# 配置路由
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    # 为指定函数配置 url
    url(r'^index/&amp;amp;', app_view.index)
]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;配置视图&quot;&gt;配置视图&lt;/h4&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 导入处理请求的 http 相应功能
from django.http import HttpResponse

# django中每一个请求都会设置相应函数来进行处理
# 函数的参数约定为 request
def index(request):
    return HttpResponse('index page!')&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;启动服务&quot;&gt;启动服务&lt;/h4&gt;
&lt;p&gt;启动服务后访问 localhost:8000/index/，可以看到响应为 index 函数里填写的响应，说明服务成功启动并且响应了自己想要的响应字符串。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyuvics5u0j31b30u0thr.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一个模板页面&quot;&gt;第一个模板页面&lt;/h3&gt;
&lt;p&gt;项目目录下有个 templates 文件夹是专门用于存放页面资源的，比如index.html&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django.shortcuts import render

def index(request):
    # 参数：请求对象 request，模板 html 文件，传给前台的资源
    return render(request, 'index.html')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;index.html 文件&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt; &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;主页&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;这是主页&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置完成后，访问127.0.0.1:8000/index/后显示为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyuxy92naoj31b30u0wno.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在 views.py文件中编写对应响应功能函数时，会自动出现模板文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyuxzv8234j311k07awfu.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是因为在 settings.py文件中已经把模板路径配置好了&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;TEMPLATES = [
    {
        # 如果使用第三方，可以在这个地方修改模板引擎
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 模板页面默认路径：项目根路径下的templates文件夹
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        # 允许所有app均拥有自己的模板文件夹
        'APP_DIRS': True,
        ...
    },
]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;第一个重定向&quot;&gt;第一个重定向&lt;/h3&gt;
&lt;p&gt;和上面的一样，首先在 views.py文件中配置响应函数&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django.shortcuts import render, redirect
# / 路径渲染index.html页面
def home(request):
    return render(request, 'index.html')
# /index/ 路径重定向到 / 路径，达到渲染index.html页面
def index(request):
    return redirect('/')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;响应的路由配置为&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django.conf.urls import url
from django.contrib import admin
# 导入应用视图
import app.views as app_view
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^index/$', app_view.index),
    url(r'^$', app_view.home),
]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fyuy56m6f8j31c00u0qd3.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;状态码显示为301说明发生了转跳，查看网络详细信息发现在index/中有个 location 字段，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fyuy91l4xfj30wf0u0gt0.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该字段值为 &lt;strong&gt;/&lt;/strong&gt;，说明转跳到了根目录下。&lt;/p&gt;
&lt;h2 id=&quot;其他配置&quot;&gt;其他配置&lt;/h2&gt;
&lt;h3 id=&quot;url应用移植&quot;&gt;url应用移植&lt;/h3&gt;
&lt;h4 id=&quot;项目目录下的urls.py文件&quot;&gt;项目目录下的urls.py文件&lt;/h4&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 导入include功能，将url配置转移到指定应用内部的自身url配置文件
from django.conf.urls import url, include
from django.contrib import admin
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    # 将url配置操作交给app_test自身的urls.py来进行操作
    # app-test/为app_test应用的总路径
    url(r'^app-test/', include('app_test.urls')),
]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;app_test下的urls.py文件&quot;&gt;app_test下的urls.py文件&lt;/h4&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from django.conf.urls import url
from . import views
urlpatterns = [
    # 1.不要直接留空，直接留空 http://localhost:8000/app-test/* 均可以访问
    # 2.如果要配置index，访问的地址为 http://localhost:8000/app-test/index
    # 3.配置方式：r'^index/$'，不要省略 / 符号
    # 4.正则是否以$标识结尾取决于该路径是否会有下一级路径
    url(r'^$', views.index),
]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;多应用相同模板页面冲突&quot;&gt;多应用相同模板页面冲突&lt;/h3&gt;
&lt;p&gt;如果在两个应用中均有相同的模板页面假如为index.html&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 1.在应用templates文件夹下建立与应用同名的文件夹，eg：app_text下就建立app_text
# 2.将模板创建在与应用同名的模板文件夹下
# 3.修改指定应用下views.py处理请求的render模板指向
def index(request):
    # 模板指向：blog_app应用的templates下的blog_app文件夹中的index.html
    return render(request, 'app_text/index.html')&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;静态资源的配置&quot;&gt;静态资源的配置&lt;/h3&gt;
&lt;p&gt;假如页面需要一些静态资源，比如需要 css 样式、js 文件等，那么就需要在 settings 文件中配置好静态文件的路径。&lt;/p&gt;
&lt;h4 id=&quot;配置-settings.py文件&quot;&gt;配置 settings.py文件&lt;/h4&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 静态文件地址 (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = '/static/'
# 在项目根目录下新建static文件夹，静态资源均放在该文件夹中
# 增加STATICFILES_DIRS配置
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
# 前端页面加载静态资源的路径：/static/... (...为具体在static文件夹中的路径)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;拓展静态资源配置&quot;&gt;拓展静态资源配置&lt;/h4&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 如果要将项目根目录下source文件夹也作为静态资源路径
# STATICFILES_DIRS增加source配置
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'source')
]
# 前端页面加载静态资源路径依旧不变，Django会自动索引：/static/... (...为具体在source文件夹中的路径)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;url正则&quot;&gt;url正则&lt;/h2&gt;
&lt;h3 id=&quot;原生字符串&quot;&gt;原生字符串&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# urls.py配置路由
url(r'test', app_view.test)

# views.py设置响应函数
def test(request):
    return HttpResponse('test')

# 问题：请求地址包含test均可以访问
# http://127.0.0.1:8000/test =&amp;gt; /test | /atest | /testa | /atesta | /test/a | /test/&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;开头&quot;&gt;开头&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# urls.py配置路由
url(r'^test', app_view.test)

# views.py设置响应函数
def test(request):
    return HttpResponse('test')

# 问题：请求地址以test开头均可以访问
# http://127.0.0.1:8000/test =&amp;gt; /test | /testa | /test/a | /test/&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;结尾&quot;&gt;结尾&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# urls.py配置路由
url(r'^test$', app_view.test)

# views.py设置响应函数
def test(request):
    return HttpResponse('test')

# 问题：只能一种方式访问
# http://127.0.0.1:8000/test =&amp;gt; /test
# 不能以 /test/ 访问
# http://127.0.0.1:8000/test/&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;优化结尾&quot;&gt;优化结尾&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# urls.py配置路由
url(r'^test/$', app_view.test)

# views.py设置响应函数
def test(request):
    return HttpResponse('test')

# /test 和 /test/ 均可以访问
# http://127.0.0.1:8000/test
# http://127.0.0.1:8000/test/

# 问题：不能作为应用总路由
# eg：app_test应用在项目urls.py
# url(r'^app-test/', include('app_test.urls')) 末尾不能加$，因为作为应用总目录，是有下一级，如果用$标识结尾了，就代表不能有下一级路由&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;地址捕获&quot;&gt;地址捕获&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# urls.py配置路由
url(r'^test/(\d+)/\d+/(\d+)/$', app_view.test)

# 对应请求路径
# http://127.0.0.1:8000/test/1/22/333/

# 对应响应函数
def test(request, arg1, arg2):
    # arg1: str 1
    # arg2: str 333
    return HttpResponse('test')&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 常规路由配置
# r'^index/$'
# r'^page/2/$'

# 应用路由配置
# r'^app/'

# 根路由配置
# r'^$'

# 路由配置均以 / 结尾
# ()中的字段会被请求响应函数捕获

# 限制响应函数捕获的变量名
# (?P&amp;lt;num&amp;gt;[0-9]+) 响应函数参数(requset, num)&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 04 Jan 2019 15:23:00 +0000</pubDate>
<dc:creator>Eurekaa</dc:creator>
<og:description>Django 系列博客（二） 前言 今天博客的内容为使用 Django 完成第一个 Django 页面，并进行一些简单页面的搭建和转跳。 命令行搭建 Django 项目 创建纯净虚拟环境 在上一篇博客</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuanzuan/p/10223016.html</dc:identifier>
</item>
<item>
<title>接口隔离原则 - LieBrother</title>
<link>http://www.cnblogs.com/liebrother/p/10222756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liebrother/p/10222756.html</guid>
<description>&lt;p&gt;个人博客原文：&lt;br/&gt;&lt;a href=&quot;http://www.liebrother.com/interface-segregation-principle&quot;&gt;接口隔离原则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.liebrother.com/upload/c1c89a591a8141bfa4d0318cecfebadd_0015_01.jpg&quot; alt=&quot;景&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;设计模式六大原则之四：接口隔离原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;姓名&lt;/strong&gt; ：接口隔离原则&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;英文名&lt;/strong&gt; ：Interface Segregation Principle&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;价值观&lt;/strong&gt; ：宁缺毋滥&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人介绍&lt;/strong&gt; ：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Clients should not be forced to depend upon interfaces that they don't use.（客户端不应该依赖它不需要的接口。）&lt;/li&gt;
&lt;li&gt;The dependency of one class to another one should depend on the smallest possible interface.（类间的依赖关系应该建立在最小的接口上。）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;也用一个故事来讲这 2 句干巴巴的定义。&lt;/p&gt;
&lt;p&gt;一小伙子跑到大城市的工厂打工，工作了一年半载，越来越觉得没劲，每天干那么多活，又领那么一点工资，和他老爸抱怨这段时间的困扰，老爸想着，家里有个小作坊，自己也一年不如一年了，要不就让儿子回老家管理这小作坊。小伙子熬不过这个年，就跑回老家跟着老爸打理小作坊。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.liebrother.com/upload/c635b2192ca04b6783392e49f5423347_0015_02.jpg&quot; alt=&quot;布娃娃&quot;/&gt;&lt;br/&gt;(来自Google Image)&lt;/p&gt;
&lt;p&gt;小作坊主要是做布娃娃的，如上图，工作在于打扮包装布娃娃，工序有给布娃娃扎辫子、穿衣服、包装入箱、打标签。整个完整的流程都是一个人做的。有很多个工人每天都在做这个事情。&lt;/p&gt;
&lt;p&gt;老爸向小伙子诉苦，感觉招工挺多人的，生产力还是提不上去。小伙子记着老爸的话，在工厂里面观察了几天，他发现每个工人都要做这 4 个打扮包装布娃娃的工序，有些工人扎辫子很快但穿衣服很慢，有些工人扎辫子很慢但穿衣服快，他用了笔记本记下来：李大姨扎辫子快，王大妈穿衣服快，就这样把每个人有效率的工作都记录下来。&lt;/p&gt;
&lt;p&gt;一天晚上吃饭，小伙子跟老爸说了自己观察到的现象，也把本子拿给老爸看，跟老爸商量：可不可以做个尝试，不要每个人负责打扮包装布娃娃全步骤，而是按工序分开，每个人只负责一个工序，每个工人只干一件事，更容易熟能生巧。老爸听着觉得有道理。&lt;/p&gt;
&lt;p&gt;第二天早上，就到小作坊里，召集了所有工人，按小伙子的笔记上面的名单分工，大家都做好各自负责的内容，像流水线一样，做好了就放到下个工序的地方，让下个工序的人去做。到了下班，小伙子清点了今天工作的成果，包装完成的娃娃比前一天多了 50% 。晚上小伙子跟老爸喝着百威吃起大肉庆祝一番。&lt;/p&gt;
&lt;p&gt;这个故事你看了可能想骂爹骂娘，跟上面的定义有啥毛关系？故事只是把大家带入这个场景，我们在工作中，着手开发之前不都得先理清好需求背景，这就是要讲接口隔离原则的背景，通过代码来给大家讲解一下如何用好接口隔离原则。&lt;/p&gt;
&lt;h2 id=&quot;父亲的运营模式&quot;&gt;父亲的运营模式&lt;/h2&gt;
&lt;p&gt;先看代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;interface Work {

    void hairBraiding();
    void getDressed();
    void packingIntoTheBox();
    void makeTag();

}

class WangMather implements Work{

    @Override
    public void hairBraiding() {
        System.out.println(&quot;王大妈给布娃娃扎辫子&quot;);
    }

    @Override
    public void getDressed() {
        System.out.println(&quot;王大妈给布娃娃穿衣服&quot;);
    }

    @Override
    public void packingIntoTheBox() {
        System.out.println(&quot;王大妈把布娃娃装入箱子&quot;);
    }

    @Override
    public void makeTag() {
        System.out.println(&quot;王大妈给箱子打标签&quot;);
    }
}

class LiAunt implements Work {

    @Override
    public void hairBraiding() {
        System.out.println(&quot;李大姨给布娃娃扎辫子&quot;);
    }

    @Override
    public void getDressed() {
        System.out.println(&quot;李大姨给布娃娃穿衣服&quot;);
    }

    @Override
    public void packingIntoTheBox() {
        System.out.println(&quot;李大姨把布娃娃装入箱子&quot;);
    }

    @Override
    public void makeTag() {
        System.out.println(&quot;李大姨给箱子打标签&quot;);
    }
}

// 测试代码
WangMather wangMather = new WangMather();
wangMather.hairBraiding();
wangMather.getDressed();
wangMather.packingIntoTheBox();
wangMather.makeTag();

LiAunt liAunt = new LiAunt();
liAunt.hairBraiding();
liAunt.getDressed();
liAunt.packingIntoTheBox();
liAunt.makeTag();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在父亲管理下的小作坊，是大家各自完成好一个布娃娃，工作互不交接，在这种运营模式下，我们把所有工作都合并在一个接口 Work 是没有问题的。有人可能要问，不是说接口隔离么？这里面 Work 接口的 4 个方法都可以分离开，它们都是各自的工作内容。稍等一下，我们现在是基于老父亲运营的模式下实现，如果小作坊一直都是这种模式运营，这段代码有问题么？其实没问题的，我们根据当时的业务考虑，在这种情况下，把 Work 抽成 4 个接口不是不可以，只是不现实，每个工人都去实现一模一样的 4 个接口在老父亲运营模式下是不切实际。&lt;/p&gt;
&lt;h2 id=&quot;儿子的运营模式&quot;&gt;儿子的运营模式&lt;/h2&gt;
&lt;p&gt;接下来介绍儿子的运营模式。儿子提倡的是每个工人职责分明，只负责一个事情，在这种情况下，如果还是用老父亲的 Work 接口会有什么问题呢？上面我们说了，李大姨扎辫子快，王大妈穿衣服快，所以李大姨被分配去给布娃娃扎辫子，王大妈被分配去给布娃娃穿衣服。我们沿用老父亲的 Work 接口实现，代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class WangMather2 implements Work{

    @Override
    public void hairBraiding() {
    }

    @Override
    public void getDressed() {
        System.out.println(&quot;王大妈给布娃娃穿衣服&quot;);
    }

    @Override
    public void packingIntoTheBox() {
    }

    @Override
    public void makeTag() {
    }
}

class LiAunt2 implements Work {

    @Override
    public void hairBraiding() {
        System.out.println(&quot;李大姨给布娃娃扎辫子&quot;);
    }

    @Override
    public void getDressed() {
    }

    @Override
    public void packingIntoTheBox() {
    }

    @Override
    public void makeTag() {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看出问题来了么？李大姨仅仅参与扎辫子工作，王大妈参与了穿衣服工作，但是却都要依旧实现其他 3 个多余的接口。所以在儿子的运营模式下，老父亲的 Work 接口需要重新分配，以工序的角度分配，而不是以完成一个布娃娃的角度分配。总共有 4 个工序：扎辫子、穿衣服、包装入箱、打标签，我们需要定义 4 个接口，让员工去实现各自负责的工序接口。代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
interface Hair {
    void hairBraiding();
}

interface Dress {
    void getDressed();
}

interface Box {
    void packingIntoTheBox();
}

interface Tag {
    void makeTag();
}

/**
 * 李大姨给布娃娃扎辫子快
 */
class LiAunt3 implements Hair {

    @Override
    public void hairBraiding() {
        System.out.println(&quot;李大姨给布娃娃扎辫子&quot;);
    }
}

/**
 * 王大妈给布娃娃穿衣服快
 */
class WangMather3 implements Dress{

    @Override
    public void getDressed() {
        System.out.println(&quot;王大妈给布娃娃穿衣服&quot;);
    }

}

/**
 * 陈大叔包装快
 */
class ChenUncle implements Box {

    @Override
    public void packingIntoTheBox() {
        System.out.println(&quot;陈大叔给布娃娃装箱&quot;);
    }
}

/**
 * 黄大姐贴标签快
 */
class HuangSister implements Tag {

    @Override
    public void makeTag() {
        System.out.println(&quot;黄大姐给箱子打标签&quot;);
    }
}

// 测试代码
LiAunt3 liAunt3 = new LiAunt3();
WangMather3 wangMather3 = new WangMather3();
ChenUncle chenUncle = new ChenUncle();
HuangSister huangSister = new HuangSister();
liAunt3.hairBraiding();
wangMather3.getDressed();
chenUncle.packingIntoTheBox();
huangSister.makeTag();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码看起来就很清晰了，在儿子的运营模式下，大家都是只做一道工序，这样子实现就非常合理。看了这个过程，你理解了接口隔离原则了么？再看一看上面的定义：客户端不应该依赖它不需要的接口。闭上眼睛，静默 3 秒，感受一下。&lt;br/&gt;我们也可以回忆一下在工作中编写的代码，是不是有遵守接口隔离原则？在特定的场景下，如果很多类实现了同一个接口，并且都只实现了接口的极少部分方法，这时候很有可能就是接口隔离性不好，就要去分析能不能把方法拆分到不同的接口。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;接口隔离原则最最最重要一点就是要&lt;strong&gt;根据实际情况，具体业务具体分析&lt;/strong&gt;，不能犯了上面说到的错误：在老父亲的运营模式下，按儿子的工序划分接口去实现，那样子会得不偿失。&lt;/p&gt;
&lt;p&gt;参考资料：《大话设计模式》、《Java设计模式》、《设计模式之禅》、《研磨设计模式》、《Head First 设计模式》&lt;/p&gt;
&lt;p&gt;希望文章对您有所帮助，设计模式系列会持续更新，感兴趣的同学可以关注公众号，第一时间获取文章推送阅读，也可以一起交流，交个朋友。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/mp/homepage?__biz=MzIxMzgwMTAyMg==&amp;amp;hid=2&amp;amp;sn=c97b64288d92312f57d3c8298f8d8888&quot;&gt;公众号之设计模式系列文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.liebrother.com/upload/df81ac224abe46b38131a0e78f4dcf9c_wechat.jpg&quot; alt=&quot;公众号&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 04 Jan 2019 14:03:00 +0000</pubDate>
<dc:creator>LieBrother</dc:creator>
<og:description>设计模式六大原则之四：接口隔离原则。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liebrother/p/10222756.html</dc:identifier>
</item>
<item>
<title>Bayesian Personalized Ranking 算法解析及Python实现 - Bo_hemian</title>
<link>http://www.cnblogs.com/wkang/p/10217172.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wkang/p/10217172.html</guid>
<description>&lt;h2&gt;&lt;span class=&quot;fontstyle0&quot;&gt;1. Learning to Rank &lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;1.1 什么是排序算法&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 为什么google搜索 ”idiot“ 后，会出现特朗普的照片？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104204351380-1617963623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;“我们已经爬取和存储了数十亿的网页拷贝在我们相应的索引位置。因&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;此，你输入一个关键字，我们将关键词与网页进行匹配，并根据&lt;span class=&quot;fontstyle1&quot;&gt;200&lt;span class=&quot;fontstyle0&quot;&gt;多个&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;因子对其进行排名，这些因子包括相关性、新鲜度、流行度、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;PageRank&lt;span class=&quot;fontstyle0&quot;&gt;值、查询和文档匹配的单词个数、网页&lt;span class=&quot;fontstyle2&quot;&gt;URL&lt;span class=&quot;fontstyle0&quot;&gt;链接地址长度以及&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;其他人对排序结果的满意度等。在此基础上，在任何给定的时间，我们&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;尝试为该查询&lt;span class=&quot;fontstyle3&quot;&gt;排序&lt;span class=&quot;fontstyle0&quot;&gt;并找到最佳结果。”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　—— &lt;span class=&quot;fontstyle5&quot;&gt;GoogleCEO&lt;span class=&quot;fontstyle0&quot;&gt;： 桑达尔&lt;span class=&quot;fontstyle5&quot;&gt;·&lt;span class=&quot;fontstyle0&quot;&gt;皮查伊&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;1.2 排序算法的发展&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;1.2.1 早期排序技术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;最早主要是利用词频、逆文档频率和文档长度这几个因子来人工拟合排序公式&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;因为考虑因素不多，由人工进行公式拟合是完全可行的，此时机器学习并不能派上很大用场，因为机器学&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;习更适合采用很多特征来进行公式拟合。此外，对于有监督机器学习来说，首先需要大量的训练数据，在&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;此基础上才可能自动学习排序模型，单靠人工标注大量的训练数据不太现实。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;1.2.2 基于机器学习的排序技术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;对于搜索引擎来说，尽管无法靠人工来标注大量训练数据，但是用户点击记录是可以当做机器学习方法训练数据的一个替代品，比如用户发出一个查询，搜索引擎返回搜索结果，用户会点击其中某些网页，可以假设用户点击的网页是和用户查询更加相关的页面。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;1.3 Learning to Rank&lt;span class=&quot;fontstyle2&quot;&gt;（&lt;span class=&quot;fontstyle0&quot;&gt;LTR&lt;span class=&quot;fontstyle2&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;机器学习排序系统由&lt;span class=&quot;fontstyle1&quot;&gt;4&lt;span class=&quot;fontstyle0&quot;&gt;个步骤组成：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;人工标注训练数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;文档特征抽取&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;学习分类函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;在实际搜索系统中采用机器学习模型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104210509634-1574629234.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;2. PointWise Approach&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;定义：单文档方法的处理对象是单独的一篇文档，将文档转换为特征向量后，机器学习系统根据从训练数&lt;span class=&quot;fontstyle0&quot;&gt;据中学习到的分类或者回归函数对文档打分，打分结果即是搜索结果。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104210525066-1733470522.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle5&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;Score&lt;span class=&quot;fontstyle1&quot;&gt;（&lt;span class=&quot;fontstyle0&quot;&gt;Q&lt;span class=&quot;fontstyle1&quot;&gt;， &lt;span class=&quot;fontstyle0&quot;&gt;D&lt;span class=&quot;fontstyle1&quot;&gt;）＝&lt;span class=&quot;fontstyle0&quot;&gt;a&lt;span class=&quot;fontstyle1&quot;&gt;×&lt;span class=&quot;fontstyle0&quot;&gt;CS&lt;span class=&quot;fontstyle1&quot;&gt;＋&lt;span class=&quot;fontstyle0&quot;&gt;b&lt;span class=&quot;fontstyle1&quot;&gt;×&lt;span class=&quot;fontstyle0&quot;&gt;PM&lt;span class=&quot;fontstyle1&quot;&gt;＋&lt;span class=&quot;fontstyle0&quot;&gt;c&lt;span class=&quot;fontstyle1&quot;&gt;×&lt;span class=&quot;fontstyle0&quot;&gt;PR&lt;span class=&quot;fontstyle1&quot;&gt;＋&lt;span class=&quot;fontstyle0&quot;&gt;d &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;fontstyle0&quot;&gt;对于某个新的查询&lt;span class=&quot;fontstyle1&quot;&gt;Q&lt;span class=&quot;fontstyle0&quot;&gt;和文档&lt;span class=&quot;fontstyle1&quot;&gt;D&lt;span class=&quot;fontstyle0&quot;&gt;，系统首先获得其文档&lt;span class=&quot;fontstyle1&quot;&gt;D&lt;span class=&quot;fontstyle0&quot;&gt;对应的&lt;span class=&quot;fontstyle1&quot;&gt;3&lt;span class=&quot;fontstyle0&quot;&gt;个特征的特征值，之后利用学习到的参数组&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;合计算两者得分，当得分大于设定的阈值，即可判断文档是相关文档，否则判断为不相关文档。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;3. PairWise Approach &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104210542962-1564177288.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于左、右两张图，按照pointwise的思想，则认为这两条样本 i 和 j 都被点击，因此label都是1。但在右图包含更重要的信息 ：用户只点了红框内的酒店，而没有点黄框内的酒店（右图黄框内的酒店和左图点击红框的酒店一致）。这说明样本 j 的 label应该比样本 i 的label大（样本 j 排名比样本 i 更靠前），很显然，pointwise并没有利用到这个信息。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;对于搜索任务来说，系统接收到用户查询后，返回相关文档列表，所以&lt;strong&gt;&lt;span class=&quot;fontstyle1&quot;&gt;问题的关键是确定文档之间的先后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;顺序关系。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;单文档方法（&lt;span class=&quot;fontstyle2&quot;&gt;PointWise Approach&lt;span class=&quot;fontstyle0&quot;&gt;）完全从单个文档的分类得分角度计算，没有考虑文档之间的顺序关系。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;文档对方法（&lt;span class=&quot;fontstyle2&quot;&gt;PairWise Approach&lt;span class=&quot;fontstyle0&quot;&gt;）则将重点转向了对文档顺序关系是否合理进行判断。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;之所以被称为文档对方法，是因为这种机器学习方法的训练过程和训练目标，是判断任意两个文档组成的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;文档对&lt;span class=&quot;fontstyle2&quot;&gt;&amp;lt;Doc1,Doc2&amp;gt;&lt;span class=&quot;fontstyle0&quot;&gt;是否满足顺序关系，即判断是否&lt;span class=&quot;fontstyle2&quot;&gt;Doc1&lt;span class=&quot;fontstyle0&quot;&gt;应该排在&lt;span class=&quot;fontstyle2&quot;&gt;Doc2&lt;span class=&quot;fontstyle0&quot;&gt;的前面。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104210555191-905664833.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;根据转换后的训练实例，就可以利用机器学习方法进行分类函数的学习： &lt;span class=&quot;fontstyle2&quot;&gt;输入一个查询和文档对&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&amp;lt;Doc1,Doc2&amp;gt;&lt;span class=&quot;fontstyle2&quot;&gt;，机器学习排序能够判断这种顺序关系是否成立，如果成立，那么在搜索结果中&lt;span class=&quot;fontstyle3&quot;&gt;Doc1&lt;span class=&quot;fontstyle2&quot;&gt;应该&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;排在&lt;span class=&quot;fontstyle3&quot;&gt;Doc2&lt;span class=&quot;fontstyle2&quot;&gt;前面，否则&lt;span class=&quot;fontstyle3&quot;&gt;Doc2&lt;span class=&quot;fontstyle2&quot;&gt;应该排在&lt;span class=&quot;fontstyle3&quot;&gt;Doc1&lt;span class=&quot;fontstyle2&quot;&gt;前面。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;通过这种方式，就完成搜索结果的排序任务。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;文档对方法（&lt;span class=&quot;fontstyle4&quot;&gt;PairWise Approach&lt;span class=&quot;fontstyle0&quot;&gt;）只考虑了两个文档对的相对先后顺序，却没有考虑文档出现在搜&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;索列表中的位置。排在搜索结果前列的文档更为重要，如果前列文档出现判断错误，代价明显高于排&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;在后面的文档。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;不同的查询，其相关文档数量差异很大，所以转换为只有十几个对应的文档对，这对机器学习系统的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle3&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle4&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;效果评价造成困难。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;4. ListWise Approach&lt;/h2&gt;
&lt;p&gt;1. 单文档方法（PointWise Approach）将训练集里每一个文档当做一个训练实例。&lt;/p&gt;
&lt;p&gt;2. 文档对方法（PairWise Approach）将同一个查询的搜索结果里任意两个文档对作为一个训练实例。&lt;/p&gt;
&lt;p&gt;3. 文档列表方法（ListWise Approach）与上述两种表示方式不同，是将每一个查询对应的所有搜索结果列表整体作为一个训练实例，这也是为何称之为文档列表方法的原因。&lt;/p&gt;
&lt;p&gt;4. 文档列表方法根据K个训练实例（一个查询及其对应的所有搜索结果评分作为一个实例）训练得到最优评分函数F。对于一个新的用户查询，函数F对每一个文档打分，之后按照得分顺序由高到低排序，就是对应的搜索结果。&lt;/p&gt;
&lt;p&gt;对于某个评分函数 f 来说，对3个搜索结果文档的相关性打分，得到3个不同的相关度得分F(A)、 F(B)和F(C)，根据这3个得分就可以计算6种排列组合情况各自的概率值。不同的评分函数，其6种搜索结果排列组合的概率分布是不一样的。所以可以通过不同的评分函数分布与实际分布比较得出最优的那个评分函数作为排序模型。如何判断 h 和 f 与虚拟的最优评分函数 g 更接近？一般可以用两个分布概率之间的距离远近来度量这种相似性，比如 KL散度等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104210657712-314872508.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5. Bayesian Personalized Ranking&lt;/h2&gt;
&lt;h3&gt;5.1 BPR介绍&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;在推荐系统中，分为召回和排序两个阶段。&lt;/li&gt;
&lt;li&gt;贝叶斯个性化排序属于Pairwise Approach。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; BPR算法的五个核心知识点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;每个⽤户之间的偏好⾏为相互独⽴&lt;/li&gt;
&lt;li&gt;同⼀⽤户对不同物品的偏序，即排序关系相互独⽴&lt;/li&gt;
&lt;li&gt;表⽰⽤户u对 I 的偏好⼤于对 j 的偏好&lt;/li&gt;
&lt;li&gt;满⾜完整性，反对称性和传递性&lt;/li&gt;
&lt;li&gt;采用最⼤后验估计计算参数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 其中，完整性，反对称性和传递性的定义如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104202608306-680287063.png&quot; alt=&quot;&quot; width=&quot;417&quot; height=&quot;94&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.2 BPR参数&lt;/h3&gt;
&lt;p&gt;在推荐系统中，排序算法通常完成对候选商品的二次筛选，也叫Reranking。这里的BPR算法借鉴了召回步骤中协同过滤算法的思想： 矩阵分解 。&lt;/p&gt;
&lt;p&gt;对于用户u：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104202740848-1382526463.png&quot; alt=&quot;&quot; width=&quot;215&quot; height=&quot;51&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于所有用户：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104202756502-481843141.png&quot; alt=&quot;&quot; width=&quot;89&quot; height=&quot;23&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中用户矩阵W：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104202835594-1108191237.png&quot; alt=&quot;&quot; width=&quot;62&quot; height=&quot;23&quot;/&gt;&lt;/p&gt;
&lt;p&gt;物品矩阵H：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104202848488-1478527943.png&quot; alt=&quot;&quot; width=&quot;55&quot; height=&quot;23&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.3 BPR参数计算方法&lt;/h3&gt;
&lt;p&gt;BPR算法采用的是最大化后验概率来估计参数（关于什么是最大化后验概率，可移步我的另外一篇文章：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/wkang/p/10069780.html&quot;&gt;似然与概率的异同&lt;/a&gt;），因此，这里用到了贝叶斯公式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104202918420-40001536.png&quot; alt=&quot;&quot; width=&quot;678&quot; height=&quot;38&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之前已经假设每个用户之间的偏好行为相互独立，同一用户对不同物品的偏序相互独立，所以：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104202947755-1962648441.png&quot; alt=&quot;&quot; width=&quot;608&quot; height=&quot;33&quot;/&gt;&lt;/p&gt;
&lt;p&gt;δ(b)函数返回1 如果条件b成立， 否则返回0。D为训练集， (u,i,j) 表示关系，即相对于j，用户u更喜欢 i 。&lt;/p&gt;
&lt;p&gt;由于&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203024927-1840597185.png&quot; alt=&quot;&quot; width=&quot;22&quot; height=&quot;16&quot;/&gt;满足完整性和反对称性，所以上式可简化为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203055795-2016118811.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;99&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，δ()为sigmod函数，用户 u 相比于 j 更喜欢 i 通过借助用户 u 对 i 的喜欢程度与对 j 的喜欢程度的差进行度量。&lt;/p&gt;
&lt;p&gt;因此，&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203156114-479859867.png&quot; alt=&quot;&quot; width=&quot;47&quot; height=&quot;17&quot;/&gt; 可表示为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203211227-138387521.png&quot; alt=&quot;&quot; width=&quot;272&quot; height=&quot;24&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目标是求解θ。 由于采用最大后验估计来学习参数，所以假设θ服从正态分布：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203229903-308818696.png&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;22&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据概率密度函数，求得：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203254426-780766770.png&quot; alt=&quot;&quot; width=&quot;133&quot; height=&quot;24&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于这个等式的推导，笔者尝试将概率分布带入到概率密度函数中，发现并不能推导出来，但是由于存在正比关系，所以可以近似等于。&lt;/p&gt;
&lt;p&gt;所以，最终的后验概率估计函数为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203305466-1799288265.png&quot; alt=&quot;&quot; width=&quot;729&quot; height=&quot;40&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过最大化这个函数，可以求出参数W和H。 &lt;/p&gt;
&lt;h2&gt;6. Bayesian Personalized Ranking算法实现&lt;/h2&gt;
&lt;p&gt;网上开源的BPR代码有很多，这里着重表达一下用户embedding矩阵和物品embedding矩阵，以及损失函数的构造。其中损失函数为最小化上一小节的最大后验概率函数。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104210714147-2027175680.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104210717542-1438059980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 7. 总结&lt;/h2&gt;
&lt;p&gt;回顾Bayesian Personalized Ranking 算法，有以下三点值得回味：&lt;/p&gt;
&lt;p&gt;1. θ的正态分布（先验）形式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1473228/201901/1473228-20190104203229903-308818696.png&quot; alt=&quot;&quot; width=&quot;139&quot; height=&quot;24&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之所以这样设计，笔者以为有两点：一是方便取对数、二是能与正则化联系起来。&lt;/p&gt;
&lt;p&gt;2. 用户 u 相比于 j 更喜欢 i 通过借助用户 u 对 i 的喜欢程度与对 j 的喜欢程度的差进行度量。这当然是最直观的表示方法，当然也可以加以改进。&lt;/p&gt;
&lt;p&gt;3. 万物皆可embedding ！通过对用户以及物品分别构造embedding向量，从而完成用户对物品喜好程度的计算。&lt;/p&gt;

</description>
<pubDate>Fri, 04 Jan 2019 13:22:00 +0000</pubDate>
<dc:creator>Bo_hemian</dc:creator>
<og:description>1. Learning to Rank 1.1 什么是排序算法 为什么google搜索 ”idiot“ 后，会出现特朗普的照片？ “我们已经爬取和存储了数十亿的网页拷贝在我们相应的索引位置。因此，你输</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wkang/p/10217172.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core WebAPI中的分析工具MiniProfiler - LamondLu</title>
<link>http://www.cnblogs.com/lwqlun/p/10222505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwqlun/p/10222505.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201901/65831-20190104210544072-1060849204.png&quot;/&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;作为一个开发人员，你知道如何分析自己开发的Api性能么？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Visual Studio和Azure中, 我们可以使用Application Insight来监控项目。除此之外我们还可以使用一个免费工具&lt;strong&gt;Stackify Prefix&lt;/strong&gt;,它允许追踪所有的Http请求, 这里有一篇博客讲解了如何使用&lt;strong&gt;Stackify Prefix&lt;/strong&gt;(&lt;a href=&quot;https://www.carlrippon.com/scalable-and-performant-asp-net-core-web-apis-profiling-and-monitoring/&quot;&gt;Scalable and Performant ASP.NET Core Web APIs: Profiling and Monitoring&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;本文我将引入另外一个工具&lt;strong&gt;MiniProfiler&lt;/strong&gt;, 我将讲解如何将&lt;strong&gt;MiniProfiler&lt;/strong&gt;集成到ASP.NET Core WebAPI中。&lt;/p&gt;
&lt;p&gt;与&lt;strong&gt;Stackify Prefix&lt;/strong&gt;相似，&lt;strong&gt;MiniProfiler&lt;/strong&gt;也是一款免费的工具（官网地址：&lt;a href=&quot;https://miniprofiler.com/dotnet/&quot; class=&quot;uri&quot;&gt;https://miniprofiler.com/dotnet/&lt;/a&gt;），你可以使用它精确的分析ASP.NET和ASP.NET Core应用程序的任何代码。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Tips: &lt;strong&gt;MiniProfiler&lt;/strong&gt;在ASP.NET和控制台程序中也可以使用哦。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们可以使用Nuget来下载这个包。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;PM&amp;gt; Install-Package MiniProfiler.AspNetCore.Mvc&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;MiniProfiler&lt;/strong&gt;配置起来很简单，只需要以下几步&lt;/p&gt;
&lt;h2 id=&quot;在configureservices方法中添加miniprofiler服务&quot;&gt;在&lt;code&gt;ConfigureServices&lt;/code&gt;方法中添加&lt;strong&gt;MiniProfiler&lt;/strong&gt;服务&lt;/h2&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
   services.AddMiniProfiler(options =&amp;gt;
      options.RouteBasePath = &quot;/profiler&quot;
   );
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;这里是配置了MiniProfiler的路由基础路径，默认的路径是/mini-profiler-resources&lt;/li&gt;
&lt;li&gt;按照当前配置，你可以使用&quot;/profiler/results&quot;来访问分析报告&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;激活中间件启用miniprofiler服务&quot;&gt;激活中间件，启用&lt;strong&gt;MiniProfiler&lt;/strong&gt;服务&lt;/h2&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
   app.UseMiniProfiler();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置需要监控分析的代码&quot;&gt;配置需要监控分析的代码&lt;/h2&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class ValueController : ControllerBase
{
   [HttpGet]
   public IEnumerable&amp;lt;string&amp;gt; Get()
   {
      string url1 = string.Empty;
      string url2 = string.Empty;
      using (MiniProfiler.Current.Step(&quot;Get方法&quot;))
      {
         using (MiniProfiler.Current.Step(&quot;准备数据&quot;))
         {
            using (MiniProfiler.Current.CustomTiming(&quot;SQL&quot;, &quot;SELECT * FROM Config&quot;))
            {
               // 模拟一个SQL查询
               Thread.Sleep(500);
               
               url1 = &quot;https://www.baidu.com&quot;;
               url2 = &quot;https://www.sina.com.cn/&quot;;
            }
         }
         
         
         using (MiniProfiler.Current.Step(&quot;使用从数据库中查询的数据，进行Http请求&quot;))
         {
            using (MiniProfiler.Current.CustomTiming(&quot;HTTP&quot;, &quot;GET &quot; + url1))
            {
               var client = new WebClient();
               var reply = client.DownloadString(url1);
            }

            using (MiniProfiler.Current.CustomTiming(&quot;HTTP&quot;, &quot;GET &quot; + url2))
            {
               var client = new WebClient();
               var reply = client.DownloadString(url2);
            }
         }
      }
      return new string[] { &quot;value1&quot;, &quot;value2&quot; }; 
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码解释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;MiniProfiler.Current.Step&lt;/code&gt;方法定义了分析的步骤，这个方法可以接受一个&lt;code&gt;String&lt;/code&gt;类型的参数，它会显示在最终的报告中&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MiniProfiler.Current.CustomTiming&lt;/code&gt;方法是更细粒度的对报告内容进行分类，以上代码中定义了2种分类，一种是SQL, 一种是Http&lt;/li&gt;
&lt;li&gt;上述程序的功能： 模拟从数据库拉取2个网站的Url, 并使用&lt;code&gt;WebClient&lt;/code&gt;来分别请求网站的Url&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;查看效果&quot;&gt;查看效果&lt;/h2&gt;
&lt;p&gt;下面我们启动项目, 项目默认打开/api/values&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201901/65831-20190104210642172-803889783.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们来访问以下/profiler/results, 就会出现如下页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201901/65831-20190104210653096-1702141553.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，我们可以很清楚的看到代码中每一部分的耗时，由于我们添加了2种分类SQL和Http，所以列表中会对2种分类进行汇总。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;重点： 当前页面只会显示最近的一次请求&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从当前报告中可以得到以下结论&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当前请求总响应时间 1723.6ms&lt;/li&gt;
&lt;li&gt;SQL语句查询耗时517.ms&lt;/li&gt;
&lt;li&gt;2次Http请求共耗时868.3ms, 其中访问百度耗时424.6ms, 访问新浪耗时443.7ms&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这里我们就不再讲如何在ASP.NET Core中整合Swagger。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MiniProfiler和Swagger是可以集成在一起的，为了完成这个功能，我们需要进行以下几步&lt;/p&gt;
&lt;h2 id=&quot;下载swagger自定义页面&quot;&gt;下载Swagger自定义页面&lt;/h2&gt;
&lt;p&gt;默认的index.html页面可以从如下链接下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/master/src/Swashbuckle.AspNetCore.SwaggerUI/index.html&quot; class=&quot;uri&quot;&gt;https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/master/src/Swashbuckle.AspNetCore.SwaggerUI/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载之后将这个文件放置到项目根目录下。&lt;/p&gt;
&lt;p&gt;接下来我们需要在这个文件的头部加入如下脚本代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script async=&quot;async&quot; id=&quot;mini-profiler&quot; src=&quot;/profiler/includes.min.js?v=4.0.138+gcc91adf599&quot; 
        data-version=&quot;4.0.138+gcc91adf599&quot; data-path=&quot;/profiler/&quot; 
        data-current-id=&quot;4ec7c742-49d4-4eaf-8281-3c1e0efa748a&quot; data-ids=&quot;&quot; data-position=&quot;Left&quot; 
        data-authorized=&quot;true&quot; data-max-traces=&quot;15&quot; data-toggle-shortcut=&quot;Alt+P&quot; 
        data-trivial-milliseconds=&quot;2.0&quot; data-ignored-duplicate-execute-types=&quot;Open,OpenAsync,Close,CloseAsync&quot;&amp;gt;
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后我们需要配置这个index.html文件的Bulid Action为Embedded resource&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201901/65831-20190104210634028-1477798696.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装自定义页面&quot;&gt;安装自定义页面&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;Startup.cs&lt;/code&gt;文件中，我们需要修改&lt;code&gt;UseSwaggerUI&lt;/code&gt;中间件的配置，这里我们需要添加一个&lt;code&gt;InputStream&lt;/code&gt;配置。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.UseSwaggerUI(c =&amp;gt;
{
   c.RoutePrefix = &quot;swagger&quot;;
   c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
   c.IndexStream = () =&amp;gt; GetType().GetTypeInfo().Assembly.GetManifestResourceStream(&quot;MiniProfilerSample.index.html&quot;);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：这里&lt;code&gt;MiniProfilerSample&lt;/code&gt;是项目的命名空间名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最终效果&quot;&gt;最终效果&lt;/h2&gt;
&lt;p&gt;重新启动项目，Swagger文档页面的左上角就出现了一个小的面板，当模拟请求一个连接之后，它就会显示出当前请求的分析数据，看起来是不是很酷炫。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201901/65831-20190104210701260-1750343820.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本篇博客描述了如何使用&lt;strong&gt;MiniProfiler&lt;/strong&gt;来监控分析你的Api。 &lt;strong&gt;MiniProfiler&lt;/strong&gt;除了提供网页显示报告，还支持将报告结果存储在数据库中，后面我会补充一篇文章来说明如何将报告保存到数据库中。&lt;/p&gt;
&lt;p&gt;本篇源代码： &lt;a href=&quot;https://github.com/lamondlu/Sample_MiniProfiler&quot; class=&quot;uri&quot;&gt;https://github.com/lamondlu/Sample_MiniProfiler&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 04 Jan 2019 13:13:00 +0000</pubDate>
<dc:creator>LamondLu</dc:creator>
<og:description>本篇博客描述了如何使用MiniProfiler来监控分析你的Api, 以及如何将MiniProfiler和Swagger集成起来</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwqlun/p/10222505.html</dc:identifier>
</item>
<item>
<title>【原】Coursera—Andrew Ng机器学习—课程笔记 Lecture 18—Photo OCR 应用实例:图片文字识别 - 马小豆包</title>
<link>http://www.cnblogs.com/maxiaodoubao/p/10222391.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/maxiaodoubao/p/10222391.html</guid>
<description>&lt;h2&gt;18.1 问题描述和流程图 Problem Description and Pipeline&lt;/h2&gt;
&lt;p&gt;图像文字识别需要如下步骤:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201130697-1092575702.png&quot; alt=&quot;&quot; width=&quot;548&quot; height=&quot;324&quot;/&gt;&lt;br/&gt;1.文字侦测(Text detection)——将图片上的文字与其他环境对象分离开来&lt;br/&gt;2.字符切分(Character segmentation)——将文字分割成一个个单一的字符&lt;br/&gt;3.字符分类(Character classification)——确定每一个字符是什么&lt;/p&gt;
&lt;p&gt;如果用任务流程图来表达这个问题，每一项任务可以由一个单独的小队来负责：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201144955-356682252.png&quot; alt=&quot;&quot; width=&quot;570&quot; height=&quot;139&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;18.2 滑动窗口 Sliding Windows&lt;/h2&gt;
&lt;p&gt;滑动窗口是一项用来从图像中抽取对象的技术。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201257012-1312024359.png&quot; alt=&quot;&quot; width=&quot;664&quot; height=&quot;332&quot;/&gt;&lt;/p&gt;
&lt;p&gt;假使需要在图片中识别行人，首先用许多固定尺寸的图片来训练一个能够准确识别行人的模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201344673-1535545461.png&quot; alt=&quot;&quot; width=&quot;671&quot; height=&quot;413&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后使用训练模型时用的图片尺寸对预测图片进行剪裁，将切片交给模型判断其是否为行人，然后滑动剪裁区域，剪裁切片后再交给模型判断，直至将图片全部检测完。&lt;br/&gt;然后按比例放大剪裁的区域，以新的尺寸对图片进行剪裁，将新剪裁的切片按比例缩小至模型采纳的尺寸，交给模型判断，如此循环。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201421143-355149272.png&quot; alt=&quot;&quot; width=&quot;498&quot; height=&quot;354&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201434241-1625418289.png&quot; alt=&quot;&quot; width=&quot;498&quot; height=&quot;342&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104202911165-792929113.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;360&quot;/&gt;&lt;br/&gt;滑动窗口技术也被用于文字识别，首先训练模型使其能够区分字符与非字符，然后，运用滑动窗口技术识别字符。一旦完成了识别，将识别得出的区域进行一些扩展，然后将重叠的区域进行合并。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201527716-374790036.png&quot; alt=&quot;&quot; width=&quot;564&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着以宽高比作为过滤条件，过滤高度比宽度更大的区域(因为单词的长度通常比高度要大)。下图中绿色区域是识别出的文字区域，红色区域是被忽略的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104203101737-180771931.png&quot; alt=&quot;&quot; width=&quot;541&quot; height=&quot;293&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下一步是训练模型分割字符，需要的训练集为单个字符的图和两个相连字符之间的图。模型训练完后，仍然使用滑动窗口技术来进行字符识别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201544585-255520107.png&quot; alt=&quot;&quot; width=&quot;573&quot; height=&quot;325&quot;/&gt; &lt;/p&gt;
&lt;p&gt;最后是字符分类阶段，利用神经网络、支持向量机或者逻辑回归算法训练一个分类器即可。&lt;/p&gt;
&lt;h2&gt;18.3 获取大量数据和人工数据 Getting Lots of Data and Artificial Data&lt;/h2&gt;
&lt;p&gt;以文字识别应用为例，一种方法是从网站下载各种字体，利用不同的字体配上各种不同的随机背景，创造出一些用于训练的实例，能够获得一个无限大的训练集。这属于从零开始创造实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201626780-1763031016.png&quot; alt=&quot;&quot; width=&quot;543&quot; height=&quot;312&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201641222-1755285488.png&quot; alt=&quot;&quot; width=&quot;548&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另一种方法是，对已有的数据进行修改，例如将其进行扭曲、旋转、模糊处理。只要认为实际数据有可能和处理后的数据类似，便可以用这样的方法来创造大量的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201651937-40913570.png&quot; alt=&quot;&quot; width=&quot;536&quot; height=&quot;277&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 某些处理起不到增加数据集的作用，例如加入高斯噪声、将单个图片复制多份等&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201714184-1854246705.png&quot; alt=&quot;&quot; width=&quot;570&quot; height=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在增大数据集之前，必须确保当前训练的已经是一个低偏差的模型。不然增大数据集也没有用&lt;/p&gt;
&lt;p&gt;有关获得更多数据的几种方法: 1.人工数据合成；2.手动收集、标记数据；3.众包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201740405-1704095666.png&quot; alt=&quot;&quot; width=&quot;611&quot; height=&quot;286&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;18.4 上限分析 What Part of the Pipeline to Work on Next&lt;/h2&gt;
&lt;p&gt;如何知道哪一部分最值得花时间和精力去改善呢?可以使用流程图进行上限分析，流程图中每一部分的输出都是下一部分的输入。&lt;/p&gt;
&lt;p&gt;在上限分析中，我们选取一部分，手工提供 100%正确的输出结果，然后看应用的整体效果提升了多少。假使当前总体效果为 72%的正确率：&lt;br/&gt;1) 如果让文字检测部分100%正确，系统的总体效果从 72%提高到了89%。这意味着很值得投入时间精力来提高我们的文字检测的准确度&lt;br/&gt;2) 接着让字符切分结果100%正确，系统总体效果只提升了 1%，这意味着字符切分部分可能已经足够好了&lt;br/&gt;3) 最后让字符分类100%正确，系统总体效果又提升了10%，这意味着我们可能也会应该投入更多的时间和精力到分类这部分&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201801719-38830923.png&quot; alt=&quot;&quot; width=&quot;599&quot; height=&quot;328&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另一个上限分析的例子，人脸识别：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/542362/201901/542362-20190104201819291-718678811.png&quot; alt=&quot;&quot; width=&quot;616&quot; height=&quot;326&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中最值得优化的是：脸部检测Face detection，眼部分割Eyes segmentation 和 逻辑回归Logistic regression 三个部分。&lt;/p&gt;
&lt;p&gt;建议不要根据直觉，而是使用上限分析判断应该改进哪个模块。当把精力花在最值得优化的那个模块上，会让整个系统的表现有显著的提高。&lt;/p&gt;
</description>
<pubDate>Fri, 04 Jan 2019 12:51:00 +0000</pubDate>
<dc:creator>马小豆包</dc:creator>
<og:description>Lecture 18—Photo OCR 应用实例:图片文字识别 18.1 问题描述和流程图 Problem Description and Pipeline 图像文字识别需要如下步骤: 1.文字侦测</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/maxiaodoubao/p/10222391.html</dc:identifier>
</item>
<item>
<title>搞懂Ｃ语言函数指针 - 编程珠玑</title>
<link>http://www.cnblogs.com/bianchengzhuji/p/10222335.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bianchengzhuji/p/10222335.html</guid>
<description>&lt;hr/&gt;
&lt;h2 id=&quot;h&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;函数指针是什么？如何使用函数指针？函数指针到底有什么大用？本文将一一介绍。&lt;/p&gt;
&lt;h2 id=&quot;h-1&quot;&gt;如何理解函数指针&lt;/h2&gt;
&lt;p&gt;如果有int *类型变量，它存储的是int类型变量的地址；那么对于函数指针来说，它存储的就是函数的地址。函数也是有地址的，函数实际上由载入内存的一些指令组成，而指向函数的指针存储了函数指令的起始地址。如此看来，函数指针并没有什么特别的。我们可以查看程序中函数的地址：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include &lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;test&lt;span class=&quot;hljs-params&quot;&gt;()&lt;br/&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this is test function&quot;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;0;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void)&lt;br/&gt;{&lt;br/&gt;test();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;0;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;gcc &lt;span class=&quot;hljs-selector-tag&quot;&gt;-o &lt;span class=&quot;hljs-selector-tag&quot;&gt;testFun &lt;span class=&quot;hljs-selector-tag&quot;&gt;testFun&lt;span class=&quot;hljs-selector-class&quot;&gt;.c&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看test函数相对地址(并非实际运行时的地址)：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;$ nm testFun |grep &lt;span class=&quot;hljs-built_in&quot;&gt;test  &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-2&quot;&gt;如何声明函数指针&lt;/h2&gt;
&lt;p&gt;声明普通类型指针时，需要指明指针所指向的数据类型，而声明函数指针时，也就要指明指针所指向的函数类型，即需要指明函数的返回类型和形参类型。例如对于下面的函数原型：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int,&lt;span class=&quot;hljs-keyword&quot;&gt;int);&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它是一个返回值为int类型，参数是两个int类型的函数，那么如何声明该类型函数的指针呢？很简单，将函数名替换成(*pf)形式即可，即我们把sum替换成(*fp)即可，fp为函数指针名，结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int （*fp）(&lt;span class=&quot;hljs-keyword&quot;&gt;int,&lt;span class=&quot;hljs-keyword&quot;&gt;int);&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就声明了和sum函数类型相同的函数指针fp。这里说明两点，第一，*和fp为一体，说明了fp为指针类型，第二，*fp需要用括号括起来，否则就会变成下面的情况：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int *&lt;span class=&quot;hljs-title&quot;&gt;fp&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int,&lt;span class=&quot;hljs-keyword&quot;&gt;int);&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种情况下，意思就大相径庭了，它声明了一个参数为两个int类型，返回值为int类型的指针的函数，而不再是一个函数指针了。&lt;/p&gt;
&lt;p&gt;在经常使用函数指针之后，我们很快就会发现，每次声明函数指针都要带上长长的形参和返回值，非常不便。这个时候，我们应该想到使用typedef，即为某类型的函数指针起一个别名，使用起来就方便许多了。例如，对于前面提到的函数可以使用下面的方式声明：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef &lt;span class=&quot;hljs-title&quot;&gt;int &lt;span class=&quot;hljs-params&quot;&gt;(*myFun)&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int,&lt;span class=&quot;hljs-keyword&quot;&gt;int);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的myFun就是一个函数指针类型，在其他地方就可以很方便地用来声明变量了。typedef的使用不在本文的讨论范围，但是特别强调一句，&lt;strong&gt;typedef中声明的类型在变量名的位置出现&lt;/strong&gt;，理解了这一句，也就很容易使用typedef了。因而下面的方式是错误的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef &lt;span class=&quot;hljs-title&quot;&gt;myFun &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int)&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int,&lt;span class=&quot;hljs-keyword&quot;&gt;int);   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-3&quot;&gt;为函数指针赋值&lt;/h2&gt;
&lt;p&gt;赋值也很简单，既然是指针，将对应指针类型赋给它既可。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include&lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;test&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int a,&lt;span class=&quot;hljs-keyword&quot;&gt;int b)&lt;br/&gt;{&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里，声明了返回类型为int，接受两个int类型参数的函数指针f1和f2，分别给它们进行了赋值。表达式1和表达式2在作用上并没有什么区别。因为函数名在被使用时总是由编译器把它转换为函数指针，而前面加上&amp;amp;不过显式的说明了这一点罢了。&lt;/p&gt;
&lt;h2 id=&quot;h-4&quot;&gt;调用&lt;/h2&gt;
&lt;p&gt;调用也很容易，把它看成一个普通的函数名即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include&lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;test&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int a,&lt;span class=&quot;hljs-keyword&quot;&gt;int b)&lt;br/&gt;{&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在函数指针后面加括号，并传入参数即可调用，其中表达式1和表达式2似乎都可以成功调用，但是哪个是正确的呢？ANSI C认为这两种形式等价。&lt;/p&gt;
&lt;h4 id=&quot;h-5&quot;&gt;函数指针有何用&lt;/h4&gt;
&lt;p&gt;函数指针的应用场景比较多，以库函数qsort排序函数为例，它的原型如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;qsort&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void *base,&lt;span class=&quot;hljs-keyword&quot;&gt;size_t nmemb,&lt;span class=&quot;hljs-keyword&quot;&gt;size_t size , &lt;span class=&quot;hljs-keyword&quot;&gt;int(*compar)&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;const &lt;span class=&quot;hljs-keyword&quot;&gt;void *,&lt;span class=&quot;hljs-keyword&quot;&gt;const &lt;span class=&quot;hljs-keyword&quot;&gt;void *));&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看起来很复杂对不对？拆开来看如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;qsort&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void *base, &lt;span class=&quot;hljs-keyword&quot;&gt;size_t nmemb, &lt;span class=&quot;hljs-keyword&quot;&gt;size_t size, );&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;拿掉第四个参数后，很容易理解，它是一个无返回值的函数，接受4个参数，第一个是void*类型，代表原始数组，第二个是size_t类型，代表数据数量，第三个是size_t类型，代表单个数据占用空间大小，而第四个参数是函数指针。这第四个参数，即函数指针指向的是什么类型呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs delphi&quot;&gt;int&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很显然，这是一个接受两个const void*类型入参，返回值为int的函数指针。&lt;br/&gt;到这里也就很清楚了。这个参数告诉qsort，应该使用哪个函数来比较元素，即只要我们告诉qsort比较大小的规则，它就可以帮我们对任意数据类型的数组进行排序。&lt;/p&gt;
&lt;p&gt;在这里函数指针作为了参数，而他同样可以作为返回值，创建数组，作为结构体成员变量等等，它们的具体应用我们在后面的文章中会介绍，本文不作展开。本文只介绍一个简单实例。&lt;/p&gt;
&lt;h2 id=&quot;h-6&quot;&gt;实例介绍&lt;/h2&gt;
&lt;p&gt;我们通过一个实例来看函数指针怎么使用。假设有一学生信息，需要按照学生成绩进行排序，该如何处理呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include &lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include &lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;define STU_NAME_LEN 16&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们创建了一个学生信息结构，结构成员包括名字，学号和成绩。main函数中创建了一个包含三个学生信息的数组，并使用qsort函数对数组按照学生成绩进行排序。qsort函数第四个参数是函数指针，因此我们需要传入一个函数指针，并且这个函数指针的入参是cont void *类型，返回值为int。我们通过前面的学习知道了函数名本身就是指针，因此只需要将我们自己实现的studentCompare作为参数传入即可。&lt;/p&gt;
&lt;p&gt;最终运行结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;name&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:two,&lt;span class=&quot;hljs-selector-tag&quot;&gt;id&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:2,&lt;span class=&quot;hljs-selector-tag&quot;&gt;score&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:77&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;name&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:three,&lt;span class=&quot;hljs-selector-tag&quot;&gt;id&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:3,&lt;span class=&quot;hljs-selector-tag&quot;&gt;score&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:88&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;name&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:one,&lt;span class=&quot;hljs-selector-tag&quot;&gt;id&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:1,&lt;span class=&quot;hljs-selector-tag&quot;&gt;score&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:99&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，最终学生信息按照分数从低到高输出。&lt;/p&gt;
&lt;h2 id=&quot;h-7&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文介绍了函数指针的声明和简单使用。更多使用将在后面的文章介绍，本文总结如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;函数指针与其他指针类型无本质差异，不过它指向的是函数的地址罢了。&lt;/li&gt;
&lt;li&gt;声明函数指针需要指明函数的返回类型和形参类型。&lt;/li&gt;
&lt;li&gt;函数名在被使用时总是由编译器把它转换为函数指针。&lt;/li&gt;
&lt;li&gt;要想声明函数指针，只需写出函数原型，然后将函数名用(*fp)代替即可。这里fp是声明的函数指针变量。&lt;/li&gt;
&lt;li&gt;typedef中声明的类型在变量名的位置出现。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;微信公众号【编程珠玑】：专注但不限于分享计算机编程基础，Linux，C语言，C++，Python，数据库等编程相关[原创]技术文章，号内包含大量经典电子书和视频学习资源。欢迎一起交流学习，一起修炼计算机“内功”，知其然，更知其所以然。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 04 Jan 2019 12:41:00 +0000</pubDate>
<dc:creator>编程珠玑</dc:creator>
<og:description>函数指针是什么？难吗？未必。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bianchengzhuji/p/10222335.html</dc:identifier>
</item>
<item>
<title>一个Python开源项目-腾讯哈勃沙箱源码剖析(上) - 七夜的故事</title>
<link>http://www.cnblogs.com/qiyeboy/p/10222084.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiyeboy/p/10222084.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;2019年来了，2020年还会远吗？ 请把&lt;strong&gt;下一年的年终奖&lt;/strong&gt;&lt;strong&gt;发一下&lt;/strong&gt;，谢谢。。。&lt;/p&gt;
&lt;p&gt;回顾逝去的2018年，最大的改变是从&lt;strong&gt;一名学生&lt;/strong&gt;变成了&lt;strong&gt;一位工作者&lt;/strong&gt;，不敢说自己多么的职业化，但是正在努力往那个方向走。&lt;/p&gt;
&lt;p&gt;以前想的更多是尝试，现在需要考虑的更多是&lt;strong&gt;落地&lt;/strong&gt;。学校和公司还是有很大的不一样，&lt;strong&gt;学到了很多东西&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2019年了，新年新气象，给大家宣布一下”七夜安全博客“今年的规划：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 2019年不再接任何商业广告(文末腾讯广告除外)，纯粹输出安全技术干货。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 2019年每周至少两篇原创图文，也就是说每个月至少八篇文章。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 2019年每篇图文都不再单独开赞赏，统一在每个月1号开赞赏，并回顾上个月的内容，简称&lt;/strong&gt;&lt;strong&gt;收租&lt;/strong&gt;&lt;strong&gt;，大家觉得上个月的文章不错，就多赞赏即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 2019年的主题是二进制安全，至少上半年是这样，包括木马的设计与检测方面，会按照系列和专题发布文章。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;废话不多说，新的一年就从哈勃沙箱说起，用来检测linux恶意文件。&lt;/p&gt;

&lt;h2&gt;哈勃沙箱&lt;/h2&gt;
&lt;p&gt;今天说的哈勃沙箱是腾讯哈勃检测系统中,linux恶意文件检测部分的开源代码。github地址为：&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;https://github.com/Tencent/HaboMalHunter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104191708516-142072049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;今天是源码剖析的第一篇，目标是简要介绍一下沙箱使用的检测手段和主要技术点。从github中输出的html报表里，监控的信息还是挺丰富的。这里只截取一部分，根据github中的说明，大家很容易就可以搭建一个沙箱。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104191733254-1935986091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;静态检测&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在哈勃沙箱的代码目录中，static目录下即为静态检测的代码，代码很清晰。静态检测的本质是&lt;/strong&gt;特征码匹配，对已知的恶意文件进行快速匹配进而查杀，如果能在静态检测层面发现恶意代码，就不需要动态分析了，这样速度就会快很多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104191931849-1545049493.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; 从static_analyzer.py来看，哈勃linux沙箱&lt;strong&gt;静态检测，获取的信息主要有六个方面：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104191953098-1686333072.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 文件类型信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过file命令获取文件信息，比如是二进制还是其他类型文件，在linux中是无法通过后缀判断它是什么文件的。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192018015-1477317012.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 文件hash比对&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于已知的恶意文件都有相应的hash库，方便快速比对。哈勃主要计算文件的&lt;strong&gt;md5,sha1,sha256&lt;/strong&gt;,这是一种绝对匹配方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192042743-1894793696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还有一种方式是计算文件的ssdeep值，这个在我之前在公众号讲webshell检测时讲过这个，这个值可以通过相似度判断恶意文件的一些变形。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192110334-844507840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. exiftool信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取文件属性信息，通过exiftool工具来实现，内容包括修改时间，创建时间等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192133788-444370559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 文件大小&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件大小也是一个辅助判断的依据，毕竟木马文件不会很大，几兆的木马文件上传也是费事。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. yara模糊过滤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;YARA是一款旨在帮助恶意软件研究人员识别和分类恶意软件样本的开源工具，使用YARA可以基于文本或二进制模式创建恶意软件家族描述信息。&lt;/p&gt;
&lt;p&gt;YARA的每一条描述或规则都由一系列字符串和一个布尔型表达式构成，并阐述其逻辑。YARA规则可以提交给文件或在运行进程，以帮助研究人员识别其是否属于某个已进行规则描述的恶意软件家族。比如下面这个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
rule silent_banker : banker
{
    meta:
        description = &quot;This is just an example&quot;
        thread_level = 3
        in_the_wild = true
    strings:
        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}
        $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}
        $c = &quot;UVODFRYSIHLNWPEJXQZAKCBGMT&quot;
    condition:
        $a or $b or $c
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　实现代码为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192453422-330096676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;6. 查壳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般的恶意文件，为了防止被逆向人员分析，都会加壳的。&lt;/p&gt;
&lt;p&gt;哈勃主要是判断了是否是upx壳。如果是upx,则进行解压。判断是upx壳的方法很简单，直接使用upx进行解压，返回是否成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192523610-2143465342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;接着提取以下信息：&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;明文字符串(通过strings命令)，&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;动态库(通过ldd命令)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;入口点，节，段，符号等信息(通过readelf命令)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192549075-2067243719.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;动态检测&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;动态检测是沙箱的核心部分，但是本篇不展开讲解，在下一篇进行详细分析，因为动态检测的原理比较复杂。动态检测的内容在dynamic目录下的dynamic_analyzer.py文件里。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192628768-1077441726.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般的动态检测主要是监视程序三个部分的内容：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;syscall系统调用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进程内存&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络流量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于系统调用，哈勃使用了三种方式进行了全方位的监控：ltrace/strace/sysdig。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;ltrace和strace&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;ltrace和strace都是基于ptrace机制进行检测的，但是又有很大的不同，strace跟踪系统调用，而ltrace可以跟踪动态库函数。我们知道，ptrace机制可以用来跟踪系统调用，那么ltrace是如何使用它跟踪库函数呢？&lt;/p&gt;

&lt;p&gt;首先ltrace打开elf文件，对其进行分析。在elf文件中，出于动态链接的需要，需要在elf文件中保存函数的符号，供链接器使用。具体格式，大家可以参考elf文件的格式。&lt;/p&gt;

&lt;p&gt;这样ltrace就能够获得该文件中，所有系统调用的符号，以及对应的执行指令。然后，ltrace将该执行指令所对应的4个字节替换成断点指令。&lt;/p&gt;

&lt;p&gt;这样在进程执行到相应的库函数后，就可以通知到了ltrace，ltrace将对应的库函数打印出来之后，继续执行子进程。&lt;/p&gt;

&lt;p&gt;实际上ltrace与strace使用的技术大体相同，但ltrace在对支持fork和clone方面，不如strace。strace在收到fork和clone等系统调用后，做了相应的处理，而ltrace没有。&lt;/p&gt;

&lt;p&gt;至于&lt;strong&gt;sysdig的原理，以及与ltrace，strace的区别&lt;/strong&gt;，我们会在下一文章中进行详细说明。&lt;/p&gt;


&lt;h3&gt;&lt;strong&gt;内存分析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;对于内存，沙箱基本上都是基于&lt;strong&gt;volatility&lt;/strong&gt;来做的，哈勃也不例外。哈勃主要分析了两部分内存：&lt;/p&gt;
&lt;p&gt;1.bash 调用历史&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192713358-1305978463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2.父子进程的关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192734383-947589569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;网络分析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;对于网络，沙箱主要做了两个部分的工作，一部分是&lt;strong&gt;虚拟网络环境&lt;/strong&gt;，另一部分是&lt;strong&gt;网络抓包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1.INetSim虚拟网络环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104192806764-441819745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2.tcpdump 抓取数据包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104193001417-1822944221.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;有的木马，还会有自删除，自锁定，自修改的行为，这是一些自保护的需要。沙箱中对此也进行了检测：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899843/201901/899843-20190104193033480-1622765031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;现有代码的不足&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;对于开源的部分代码，发现一些不能落地生产环境的地方，&lt;strong&gt;付费版的代码&lt;/strong&gt;应该没这些问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.没有实现检测的自动化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它是把沙箱安装到虚拟机中，然后人工拖动程序进入沙箱检测，没有发现自动化的代码。当然，对于虚拟机的自动化控制，这个是可以做的，二次开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.没有策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 沙箱的检测策略是没有开源的，这是很宝贵的东西。我们虽然可以获取大量的信息，但是哪些是恶意的，我们没办法判别。当然这就是我们策略该做的事情了，只要有样本，策略还是可以做的。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;3.请期待下一篇：沙箱的动态检测机制。&lt;/strong&gt;&lt;/h3&gt;

&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body cnblogs-markdown&quot; readability=&quot;57&quot;&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;关注公众号：&lt;strong&gt;七夜安全博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/899843/201604/899843-20160412112303145-1979448153.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;回复【1】：领取 Python数据分析 教程大礼包&lt;/li&gt;
&lt;li&gt;回复【2】：领取 Python Flask 全套教程&lt;/li&gt;
&lt;li&gt;回复【3】：领取 某学院 机器学习 教程&lt;/li&gt;
&lt;li&gt;回复【4】：领取 爬虫 教程&lt;/li&gt;
&lt;li&gt;回复【5】：领取 编译原理 教程 &lt;/li&gt;
&lt;li&gt;回复【6】：领取 渗透测试 教程 &lt;/li&gt;
&lt;li&gt;回复【7】：领取 人工智能数学基础 教程&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;本文章属于原创作品,欢迎大家转载分享，禁止修改文章的内容。尊重原创,转载请注明来自:七夜的故事 http://www.cnblogs.com/qiyeboy/&lt;/p&gt;
</description>
<pubDate>Fri, 04 Jan 2019 11:40:00 +0000</pubDate>
<dc:creator>七夜的故事</dc:creator>
<og:description>前言 2019年来了，2020年还会远吗？ 请把下一年的年终奖发一下，谢谢。。。 回顾逝去的2018年，最大的改变是从一名学生变成了一位工作者，不敢说自己多么的职业化，但是正在努力往那个方向走。 以前</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiyeboy/p/10222084.html</dc:identifier>
</item>
<item>
<title>微服务之:从零搭建ocelot网关和consul集群 - Chaunce</title>
<link>http://www.cnblogs.com/xiaoliangge/p/10221950.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoliangge/p/10221950.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104191020845-791202813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;微服务中有关键的几项技术，其中网关和服务服务发现，服务注册相辅相成。&lt;/p&gt;
&lt;p&gt;首先解释几个本次教程中需要的术语&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网关&lt;/strong&gt; Gateway（API GW / API 网关），顾名思义，是企业 IT 在系统边界上提供给外部访问内部接口服务的统一入口，简化了外部由于多服务协同完成任务时的繁琐配置。网关组件有Kong，ocelot,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务发现&lt;/strong&gt;：通过网关访问内部各个微服务，网关要找到所需服务的过程称为服务发现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务注册&lt;/strong&gt;：既然有服务发现，前提是要把所需服务提前“录入”，这个录入的过程称为服务注册。服务注册可配置文件（人肉方式不推荐），也可用服务注册组件如Consul或者Eureka等等（推荐）&lt;/p&gt;

&lt;p&gt;官网下载Consul程序，https://www.consul.io/downloads.html&lt;/p&gt;
&lt;p&gt;下载下来就是一个可执行文件Consul.exe&lt;/p&gt;
&lt;p&gt;Consul有两种代理模式，一种server,一种client,官方建议Server端达到3台以上才可高可用，但不要太多，太多会给集群间数据同步造成压力，client数量不限。&lt;/p&gt;
&lt;p&gt;多个server端之间会选择出一个leader,当一个server的leader宕机则会从其他server端”投票“选择新的leader&lt;/p&gt;

&lt;p&gt;这里server我们用2台实验&lt;/p&gt;
&lt;p&gt;192.168.74.55&lt;/p&gt;
&lt;p&gt;192.168.74.54&lt;/p&gt;
&lt;p&gt;1台Client&lt;/p&gt;
&lt;p&gt;192.168.74.161&lt;/p&gt;
&lt;p&gt;consul启动有两种方式一种是命令行，一种是配置文件的方式。&lt;/p&gt;
&lt;p&gt;命令行方式启动一个consul的server端&lt;/p&gt;
&lt;p&gt;consul agent -server -ui -bootstrap-expect 2 -data-dir opt/consul/data -node ServerMaster -bind 192.168.74.55 -client 192.168.74.55&lt;/p&gt;
&lt;p&gt;关键参数说明&lt;/p&gt;
&lt;p&gt;-server：server模式启动&lt;/p&gt;
&lt;p&gt;-ui ：开启ui界面（consul.exe内部带了GUI图形界面操作）&lt;/p&gt;
&lt;p&gt; -bootstrap-expect 2：server端到2个时集群生效&lt;/p&gt;
&lt;p&gt;-data-dir：consul产生的文件路径（consul自己会产生一下数据存储的位置）&lt;/p&gt;
&lt;p&gt;-node：此节点名称&lt;/p&gt;
&lt;p&gt;-bind：集群内部通信地址，默认0.0.0.0&lt;/p&gt;
&lt;p&gt;-client：此节点绑定的通讯地址&lt;/p&gt;
&lt;p&gt;以上只是关键参数，以下是完整参数说明： &lt;/p&gt;

&lt;div readability=&quot;9&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104155954017-1006060549.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;但是命令启动很繁琐，所以推荐下面的配置文件的方式启动&lt;/p&gt;
&lt;p&gt;在consul同文件夹下建立一个server.json的配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;129&quot;&gt; 
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;datacenter&quot;: &quot;dc1&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;data_dir&quot;: &quot;opt/consul/data&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;node_name&quot;: &quot;consul-server01&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;server&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;bootstrap_expect&quot;: 2&lt;span&gt;,
  &lt;/span&gt;&quot;bind_addr&quot;: &quot;192.168.74.55&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;client_addr&quot;: &quot;192.168.74.55&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;ui&quot;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了快速启动，再建立一个bat批处理文件runconsul.bat&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
consul agent -config-&lt;span&gt;dir server.json
&lt;span&gt;pause&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;双击runconsul.bat启动consul&lt;/p&gt;
&lt;p&gt;在192.168.74.54服务器开启一个server端继续以上操作。&lt;/p&gt;
&lt;p&gt;命令方式启动&lt;/p&gt;
&lt;p&gt;consul agent -server -ui -data-dir opt/consul/data -node Server01 -bind 192.168.74.54 -client 192.168.74.54 -join=192.168.74.55&lt;/p&gt;
&lt;p&gt;-join将192.168.74.54加入到192.168.74.55服务器&lt;/p&gt;
&lt;p&gt;配置文件方式：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;datacenter&quot;: &quot;dc1&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;data_dir&quot;: &quot;opt/consul/data&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;node_name&quot;: &quot;consul-server2&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;server&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;bind_addr&quot;: &quot;192.168.74.54&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;client_addr&quot;: &quot;192.168.74.54&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;ui&quot;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;retry_join&quot;: [&quot;192.168.74.55&quot;&lt;span&gt;],
  &lt;/span&gt;&quot;retry_interval&quot;: &quot;30s&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;rejoin_after_leave&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;start_join&quot;:[&quot;192.168.74.55&quot;&lt;span&gt;]
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在192.168.74.161服务器开启一个consul的client端&lt;/p&gt;
&lt;p&gt;命令方式：&lt;/p&gt;
&lt;p&gt;consul agent -ui -data-dir opt/consul/data -node ServerSlave  -bind 192.168.74.161 -client 192.168.74.161 -join 192.168.74.55&lt;/p&gt;
&lt;p&gt;配置文件方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;datacenter&quot;: &quot;dc1&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;data_dir&quot;: &quot;opt/consul/data&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;node_name&quot;: &quot;consul-client01&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;server&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;bind_addr&quot;: &quot;192.168.74.161&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;client_addr&quot;: &quot;192.168.74.161&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;ui&quot;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;retry_join&quot;: [&quot;192.168.74.55&quot;&lt;span&gt;],
  &lt;/span&gt;&quot;retry_interval&quot;: &quot;30s&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;rejoin_after_leave&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&quot;start_join&quot;:[&quot;192.168.74.55&quot;&lt;span&gt;]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;简单Consul集群到这里就搭建成功，只要访问三台服务器任意一个都可数据同步，演示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104173125824-2109033607.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104163328352-1531363688.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;服务注册关键代码&lt;/p&gt;
&lt;p&gt;首先新建一个ConsulClient的类库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104165513053-1464771418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;final-path&quot;&gt;ConsulRegister.csproj所需组件如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Project &lt;/span&gt;&lt;span&gt;Sdk&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.NET.Sdk&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;netstandard2.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Consul&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;0.7.2.6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.AspNetCore.Hosting.Abstractions&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.1.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.AspNetCore.Http.Abstractions&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.1.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.Extensions.Configuration.Abstractions&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.1.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.Extensions.DependencyInjection.Abstractions&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.1.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.Extensions.Options.ConfigurationExtensions&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.1.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ServiceDiscoveryOptions.cs

&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsulRegister
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 服务治理第三方组件Consul相关配置参数
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceDiscoveryOptions
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ServiceName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ConsulOptions Consul { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsulOptions
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; HttpEndPoint { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;RegisterToConsulExtension.cs

&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Consul;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Builder;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Hosting;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Hosting.Server.Features;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Http;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Http.Features;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Options;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Net;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Net.NetworkInformation;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Net.Sockets;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsulRegister
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RegisterToConsulExtension
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Add Consul
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 添加consul
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;services&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;configuration&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IServiceCollection AddConsul(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IServiceCollection services, IConfiguration configuration)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; configuration Consul register address
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置consul注册地址&lt;/span&gt;
            services.Configure&amp;lt;ServiceDiscoveryOptions&amp;gt;(configuration.GetSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServiceDiscovery&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;configuration Consul client
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置consul客户端&lt;/span&gt;
            services.AddSingleton&amp;lt;IConsulClient&amp;gt;(sp =&amp;gt; &lt;span&gt;new&lt;/span&gt; Consul.ConsulClient(config =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; consulOptions = sp.GetRequiredService&amp;lt;IOptions&amp;lt;ServiceDiscoveryOptions&amp;gt;&amp;gt;&lt;span&gt;().Value;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(consulOptions.Consul.HttpEndPoint))
                {
                    config.Address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(consulOptions.Consul.HttpEndPoint);
                }
            }));

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; services;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; use Consul
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 使用consul
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; The default health check interface format is &lt;/span&gt;&lt;span&gt;http://host&lt;/span&gt;&lt;span&gt;:port/HealthCheck
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 默认的健康检查接口格式是 &lt;/span&gt;&lt;span&gt;http://host&lt;/span&gt;&lt;span&gt;:port/HealthCheck
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;app&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IApplicationBuilder UseConsul(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IApplicationBuilder app)
        {
            IConsulClient consul &lt;/span&gt;= app.ApplicationServices.GetRequiredService&amp;lt;IConsulClient&amp;gt;&lt;span&gt;();
            IApplicationLifetime appLife &lt;/span&gt;= app.ApplicationServices.GetRequiredService&amp;lt;IApplicationLifetime&amp;gt;&lt;span&gt;();
            IOptions&lt;/span&gt;&amp;lt;ServiceDiscoveryOptions&amp;gt; serviceOptions = app.ApplicationServices.GetRequiredService&amp;lt;IOptions&amp;lt;ServiceDiscoveryOptions&amp;gt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; features = app.Properties[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;server.Features&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;as&lt;/span&gt;&lt;span&gt; FeatureCollection;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; port = &lt;span&gt;new&lt;/span&gt; Uri(features.Get&amp;lt;IServerAddressesFeature&amp;gt;&lt;span&gt;()
                .Addresses
                .FirstOrDefault()).Port;
            Console.ForegroundColor &lt;/span&gt;=&lt;span&gt; ConsoleColor.Blue;
            Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application port is :{port}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; addressIpv4Hosts =&lt;span&gt; NetworkInterface.GetAllNetworkInterfaces()
            .OrderByDescending(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Speed)
            .Where(c &lt;/span&gt;=&amp;gt; c.NetworkInterfaceType != NetworkInterfaceType.Loopback &amp;amp;&amp;amp; c.OperationalStatus ==&lt;span&gt; OperationalStatus.Up);

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; addressIpv4Hosts)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; props =&lt;span&gt; item.GetIPProperties();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this is ip for ipv4
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这是ipv4的ip地址&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; firstIpV4Address =&lt;span&gt; props.UnicastAddresses
                    .Where(c &lt;/span&gt;=&amp;gt; c.Address.AddressFamily ==&lt;span&gt; AddressFamily.InterNetwork)
                    .Select(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Address)
                    .FirstOrDefault().ToString();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serviceId = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{serviceOptions.Value.ServiceName}_{firstIpV4Address}:{port}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; httpCheck = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceCheck()
                {
                    DeregisterCriticalServiceAfter &lt;/span&gt;= TimeSpan.FromMinutes(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
                    Interval &lt;/span&gt;= TimeSpan.FromSeconds(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this is default health check interface
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个是默认健康检查接口&lt;/span&gt;
                    HTTP = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Uri.UriSchemeHttp}://{firstIpV4Address}:{port}/HealthCheck&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                };

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; registration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceRegistration()
                {
                    Checks &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt;[] { httpCheck },
                    Address &lt;/span&gt;=&lt;span&gt; firstIpV4Address.ToString(),
                    ID &lt;/span&gt;=&lt;span&gt; serviceId,
                    Name &lt;/span&gt;=&lt;span&gt; serviceOptions.Value.ServiceName,
                    Port &lt;/span&gt;=&lt;span&gt; port
                };

                consul.Agent.ServiceRegister(registration).GetAwaiter().GetResult();
                                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;send consul request after service stop
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当服务停止后想consul发送的请求&lt;/span&gt;
                appLife.ApplicationStopping.Register(() =&amp;gt;&lt;span&gt;
                {
                    consul.Agent.ServiceDeregister(serviceId).GetAwaiter().GetResult();
                });

                Console.ForegroundColor &lt;/span&gt;=&lt;span&gt; ConsoleColor.Blue;
                Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;health check service:{httpCheck.HTTP}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;register localhost address
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册本地地址&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; localhostregistration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceRegistration()
            {
                Checks &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceCheck()
                {
                    DeregisterCriticalServiceAfter &lt;/span&gt;= TimeSpan.FromMinutes(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
                    Interval &lt;/span&gt;= TimeSpan.FromSeconds(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;),
                    HTTP &lt;/span&gt;= $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Uri.UriSchemeHttp}://localhost:{port}/HealthCheck&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                } },
                Address &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                ID &lt;/span&gt;= $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{serviceOptions.Value.ServiceName}_localhost:{port}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Name &lt;/span&gt;=&lt;span&gt; serviceOptions.Value.ServiceName,
                Port &lt;/span&gt;=&lt;span&gt; port
            };

            consul.Agent.ServiceRegister(localhostregistration).GetAwaiter().GetResult();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;send consul request after service stop
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当服务停止后想consul发送的请求&lt;/span&gt;
            appLife.ApplicationStopping.Register(() =&amp;gt;&lt;span&gt;
            {
                consul.Agent.ServiceDeregister(localhostregistration.ID).GetAwaiter().GetResult();
            });

            app.Map(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/HealthCheck&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, s =&amp;gt;&lt;span&gt;
            {
                s.Run(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt; context =&amp;gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; context.Response.WriteAsync(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                });
            });
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; app;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再新建一个.netcore的webapi项目WebA，并且引用ConsulRegister项目&lt;/p&gt;
&lt;p&gt;在WebA项目中的Startup.cs文件中加入Consul服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
           &lt;strong&gt; &lt;span&gt;services.AddConsul(Configuration);&lt;/span&gt;&lt;/strong&gt;
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

           &lt;strong&gt;&lt;span&gt; app.UseConsul();&lt;/span&gt;&lt;/strong&gt;
            app.UseMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在WebA项目的appsettings.json配置文件中加入以下Consul服务端配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;Logging&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;LogLevel&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;Default&quot;: &quot;Warning&quot;&lt;span&gt;
    }
  },
  &lt;/span&gt;&quot;AllowedHosts&quot;: &quot;*&quot;&lt;span&gt;,
  &lt;/span&gt;
  &quot;ServiceDiscovery&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;ServiceName&quot;: &quot;A&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;Consul&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;HttpEndpoint&quot;: &quot;&lt;span&gt;http://192.168.74.161:8500&lt;/span&gt;&quot;&lt;span&gt;
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里服务注册就算完成&lt;/p&gt;

&lt;p&gt;接下来继续Ocelot借助于Consul实现服务发现&lt;/p&gt;
&lt;p&gt;新建项目Ocelot.Gateway&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104170326735-486785746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将以下依赖加入Ocelot.Gateway.csproj中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Project &lt;/span&gt;&lt;span&gt;Sdk&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.NET.Sdk.Web&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;netcoreapp2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.AspNetCore.App&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Ocelot&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;12.0.1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PackageReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Ocelot.Provider.Consul&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;0.1.2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Content &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span&gt;=&quot;ocelot.json&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CopyToOutputDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;PreserveNewest&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;CopyToOutputDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建ocelot.json文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReRoutes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UseServiceDiscovery&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, 
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DownstreamPathTemplate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/{url}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DownstreamScheme&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServiceName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoadBalancerOptions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RoundRobin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      },
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UpstreamPathTemplate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/a/{url}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UpstreamHttpMethod&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ],
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReRoutesCaseSensitive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt; 
    }
  ],
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalConfiguration&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用Consul服务治理&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServiceDiscoveryProvider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.74.161&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;8500&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConfigurationKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Oceolot_A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储在Consul上的Key&lt;/span&gt;
&lt;span&gt;    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改Startup.cs文件如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Startup(IConfiguration configuration)
        {
            Configuration &lt;/span&gt;=&lt;span&gt; configuration;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IConfiguration Configuration { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);


            services.AddOcelot(
                 &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
                 .AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ocelot.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, optional: &lt;span&gt;false&lt;/span&gt;, reloadOnChange: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;).Build())
                 .AddConsul()
                 .AddConfigStoredInConsul();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseOcelot().Wait();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发布WebA后复制两份分别启动&lt;/p&gt;
&lt;p&gt;dotnet WebA.dll --urls=&quot;http://0.0.0.0:2001&quot;&lt;/p&gt;
&lt;p&gt;dotnet WebA.dll --urls=&quot;http://0.0.0.0:2002&quot;&lt;/p&gt;
&lt;p&gt;到这里相当于2001和2002程序简单集群了一下&lt;/p&gt;
&lt;p&gt;可以发现日志中有 http://192.168.74.161:2002/HealthCheck调用信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104173726646-1748009096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这其实是consul进行健康检查进行的调用。&lt;/p&gt;
&lt;p&gt;启动多个程序后，打开浏览器打开Consuld界面会发现注册了两个服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104183644001-1951190915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104183823572-2031712510.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/578477/201901/578477-20190104184713469-666368477.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里ocelot网关和consul的服务注册和发现就算初步集成。&lt;/p&gt;
&lt;p&gt;如果生成环境是windows的情况，将consul做成windwos服务即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sc create &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConsulServer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; binPath=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F:\XXX\consul.exe agent -config-dir XXX.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生产环境是linux则借助systemd做成守护进程即可 &lt;/p&gt;
&lt;p&gt;目前集群搭建成功，但是连接的话如果指定某个端点的ip进行连接，端点宕机，就会导致网关一样无法连接consul进行服务发现。所以还需进行配置暴露一个端点让客户端连接，配置详情：https://www.consul.io/docs/connect/configuration.html&lt;/p&gt;
&lt;p&gt;不过也可以做成虚拟ip进行多台consul的负载。客户端连接虚拟ip即可&lt;/p&gt;
&lt;p&gt;项目地址：&lt;/p&gt;
&lt;p&gt;https://github.com/liuyl1992/Ocelot.GatewayToConsul&lt;/p&gt;









&lt;/div&gt;

</description>
<pubDate>Fri, 04 Jan 2019 11:14:00 +0000</pubDate>
<dc:creator>Chaunce</dc:creator>
<og:description>介绍 微服务中有关键的几项技术，其中网关和服务服务发现，服务注册相辅相成。 首先解释几个本次教程中需要的术语 网关 Gateway（API GW / API 网关），顾名思义，是企业 IT</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoliangge/p/10221950.html</dc:identifier>
</item>
<item>
<title>深度学习入门实战（一）：像Prisma一样算法生成梵高风格画像 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/10221774.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/10221774.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文由云+社区发表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;作者：董超&lt;/p&gt;
&lt;p&gt;导语：现在人工智能是个大热点，而人工智能离不开机器学习，机器学习中深度学习又是比较热门的方向，本系列文章就从实战出发，介绍下如何使用MXnet进行深度学习~ 既然是实战而且本文是入门级别的我们就不讲那么多大家都听不懂的数学公式啦～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;x00-深度学习简介&quot;&gt;0x00 深度学习简介&lt;/h2&gt;
&lt;p&gt;虽然吧，我们不讲哪些深奥的数学原理，但是基本的原理还是要掌握下的～&lt;/p&gt;
&lt;p&gt;在介绍深度学习之前我们要先了解两个概念，机器学习和神经网络。&lt;/p&gt;
&lt;h3 id=&quot;机器学习&quot;&gt;机器学习：&lt;/h3&gt;
&lt;p&gt;在介绍深度学习之前，我们先简单介绍下机器学习，我们引用下维基百科上机器学习的定义：&lt;/p&gt;
&lt;p&gt;机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。&lt;/p&gt;
&lt;p&gt;机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。&lt;/p&gt;
&lt;p&gt;简单的说机器学习就是让机器去分析数据找规律，并通过找到的规律对新的数据进行处理。&lt;/p&gt;
&lt;h3 id=&quot;神经网络&quot;&gt;神经网络：&lt;/h3&gt;
&lt;h4 id=&quot;神经元&quot;&gt;神经元：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410040284_4097_1492410040646.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以图像为例子，每个数据或者输入就是一张图片，而里面的每个x可以是图片中的每个像素。对于每个像素我们都赋予一个权重，然后经过转换函数（Transfer Function, 这里是线性叠加）得到一个数值。简单来说，我们对所有像素做个线性加权叠加。得到的数值会经过激活函数得到新的数值。这个激活函数（Activation Function）往往是那几个符合某些特性的非线性函数。为什么需要非线性的转换呢？举个简单的例子，在同一个平面你和你的影子是重叠是分不开的，在立体的空间你们却能分开了。非线性的转换有类似的作用。常用的激活函数有relu, softmax, tanh。&lt;/p&gt;
&lt;p&gt;简单的说一个神经元是一个简单的分类器，你输入一个&lt;/p&gt;
&lt;p&gt;比如我们有一大堆猫、狗照片，把每一张照片送进一个机器里，机器需要判断这幅照片里的东西是猫还是狗。我们把猫狗图片处理一下，左边是狗的特征向量，右边是猫的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410054302_1348_1492410054568.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家想想，最简单地把这两组特征向量分开的方法是啥？当然是在两组数据中间画一条竖直线，直线左边是狗，右边是猫，分类器就完成了。以后来了新的向量，凡是落在直线左边的都是狗，落在右边的都是猫。&lt;/p&gt;
&lt;p&gt;一条直线把平面一分为二，一个平面把三维空间一分为二，一个n-1维超平面把n维空间一分为二，两边分属不同的两类，这种分类器就叫做神经元。&lt;/p&gt;
&lt;p&gt;当然，上面那幅图我们是开了上帝视角才知道“一条竖直线能分开两类”，在实际训练神经元时，我们并不知道特征是怎么抱团的。神经元模型的一种学习方法称为Hebb算法：&lt;/p&gt;
&lt;p&gt;先随机选一条直线/平面/超平面，然后把样本一个个拿过来，如果这条直线分错了，说明这个点分错边了，就稍微把直线移动一点，让它靠近这个样本，争取跨过这个样本，让它跑到直线正确的一侧；如果直线分对了，它就暂时停下不动。因此训练神经元的过程就是这条直线不断在跳舞，最终跳到两个类之间的竖直线位置。&lt;/p&gt;
&lt;h4 id=&quot;神经网络-1&quot;&gt;神经网络：&lt;/h4&gt;
&lt;p&gt;神经网络简单点将就是由好多个神经元组成的系统。&lt;/p&gt;
&lt;p&gt;神经元一个缺点是：它只能切一刀！你给我说说一刀怎么能把下面这两类分开吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410087099_5006_1492410087281.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决办法是多层神经网络，底层神经元的输出是高层神经元的输入。我们可以在中间横着砍一刀，竖着砍一刀，然后把左上和右下的部分合在一起，与右上的左下部分分开；也可以围着左上角的边沿砍10刀把这一部分先挖出来，然后和右下角合并。&lt;/p&gt;
&lt;p&gt;每砍一刀，其实就是使用了一个神经元，把不同砍下的半平面做交、并等运算，就是把这些神经元的输出当作输入，后面再连接一个神经元。这个例子中特征的形状称为异或，这种情况一个神经元搞不定，但是两层神经元就能正确对其进行分类。&lt;/p&gt;
&lt;p&gt;只要你能砍足够多刀，把结果拼在一起，什么奇怪形状的边界神经网络都能够表示，所以说神经网络在理论上可以表示很复杂的函数/空间分布。但是真实的神经网络是否能摆动到正确的位置还要看网络初始值设置、样本容量和分布。&lt;/p&gt;
&lt;h4 id=&quot;深度学习&quot;&gt;深度学习：&lt;/h4&gt;
&lt;p&gt;那什么是深度学习呢？深度学习简单点说就是一种为了让层数较多的多层神经网络可以训练，能够运行起来而演化出来的一系列的新的结构和新的方法。&lt;/p&gt;
&lt;p&gt;就像下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410113957_8887_1492410114358.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;普通的神经网络可能只有几层，深度学习可以达到十几层。深度学习中的深度二字也代表了神经网络的层数。现在流行的深度学习网络结构有&quot;CNN(卷积神经网络)、RNN(循环神经网络)、DNN(深度神经网络)的等。&lt;/p&gt;
&lt;p&gt;当然我们是以实战为主，可以直接使用现在市面上的一些现有深度学习框架，现在流行的深度学习框架有MXnet,tensorflow,caffe等，本文主要介绍MXnet这个开源的优秀深度学习框架。&lt;/p&gt;
&lt;h3 id=&quot;x01-安装mxnet&quot;&gt;0x01 安装MXnet&lt;/h3&gt;
&lt;p&gt;这里我们安装的是CPU版的MXnet，为什么不安装GPU版？因为偶的Macbook是AMD的卡啊，MXnet只支持CUDA&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.下载源码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建一个目录，到那个目录下执行&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;git clone --recursive https://github.com/dmlc/mxnet&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.编译安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行setup-utils目录下的install-mxnet-osx.sh脚本，中间要编译些东西，要多等会，再输入个密码，就自动编译安装完成啦。&lt;/p&gt;
&lt;p&gt;注意一下：&lt;/p&gt;
&lt;p&gt;1.因为要读取make目录下的文件，所以这里要在MXnet源码的根目录执行安装脚本～&lt;/p&gt;
&lt;p&gt;比如在mxnet的源码根目录执行&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;sh ./setup-utils/install-mxnet-osx.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.以后运行脚本可能需要一些python模块，建议安装下pip&lt;/p&gt;
&lt;p&gt;mac下安装的方法也很简单： sudo easy_install pip&lt;/p&gt;
&lt;h3 id=&quot;x02-样例运行&quot;&gt;0x02 样例运行&lt;/h3&gt;
&lt;p&gt;我们可以试着运行下MXnet自带的一些样例，这里我们试下Neural art这个样例&lt;/p&gt;
&lt;p&gt;Neural art是个让机器模仿已有画作的绘画风格来把一张照片重新绘画的算法。&lt;/p&gt;
&lt;p&gt;比如我们输入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410311641_9640_1492410312247.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;和&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410341335_4504_1492410342053.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最终生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410374868_7751_1492410375150.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.首先打开example/neural-style目录，大部分样例都是有README的，大家在运行之前可以先看看&lt;/p&gt;
&lt;p&gt;这个样例的README有说&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;First use &lt;code&gt;download.sh&lt;/code&gt;to download pre-trained model and sample inputs Then run &lt;code&gt;python nstyle.py&lt;/code&gt;, use&lt;code&gt;-h&lt;/code&gt; to see more options&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那我们就要运行这个目录下的download.sh&lt;/p&gt;
&lt;p&gt;脚本会自动下载训练模型vgg19.params到Model目录，输入的素材到input目录&lt;/p&gt;
&lt;p&gt;2.运行Demo&lt;/p&gt;
&lt;p&gt;因为我们运行的是CPU版，所以要这么输入&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;python nstyle.py --gpu -1 --max-num-epochs 150 --output_dir ~/Desktop/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;--gpu：使用哪个一个GPU,-1代表使用CPU&lt;/p&gt;
&lt;p&gt;--max-num-epochs：最大迭代次数，这里我们迭代150次&lt;/p&gt;
&lt;p&gt;--output_dir：结果输出路径&lt;/p&gt;
&lt;p&gt;可能大家一次运行不起来，会出现No module named for xxx的提示，一般是相应的python模块没有安装，在google搜下No module named for xxx一般都能找到安装方法，大部分都能通过pip安装~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们看下不同迭代次数时的结果是什么样的&lt;/p&gt;
&lt;p&gt;10次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410501567_7719_1492410501919.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;50次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410509077_8796_1492410509471.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;100次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410520604_6790_1492410520870.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;150次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-10039692.file.myqcloud.com/1492410546808_3897_1492410547158.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出迭代次数越多效果越好~当然由于深度学习是有很多层神经网络组成，需要的运算量巨大，使用CPU即使是i7，150次迭代也需要好几十分钟了，有条件的看官可以尝试使用GPU版，可以将时间缩短到几分钟，甚至在云平台上跑。&lt;/p&gt;
&lt;p&gt;样例的具体原理可以参考参考附录的第二个链接。&lt;/p&gt;
&lt;p&gt;参考附录：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.leiphone.com/news/201608/wh8osGY4vg28XlvM.html&quot; class=&quot;uri&quot;&gt;http://www.leiphone.com/news/201608/wh8osGY4vg28XlvM.html&lt;/a&gt; &lt;a href=&quot;http://phunter.farbox.com/post/mxnet-tutorial2&quot; class=&quot;uri&quot;&gt;http://phunter.farbox.com/post/mxnet-tutorial2&lt;/a&gt; &lt;a href=&quot;https://zhuanlan.zhihu.com/p/20634163&quot; class=&quot;uri&quot;&gt;https://zhuanlan.zhihu.com/p/20634163&lt;/a&gt; &lt;a href=&quot;http://www.cnblogs.com/peizhe123/p/4641149.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/peizhe123/p/4641149.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区在各渠道发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取更多新鲜技术干货，可以关注我们腾讯云技术社区-云加社区官方号及知乎机构号&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 04 Jan 2019 10:23:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<og:description>本文由云+社区发表 作者：董超 导语：现在人工智能是个大热点，而人工智能离不开机器学习，机器学习中深度学习又是比较热门的方向，本系列文章就从实战出发，介绍下如何使用MXnet进行深度学习~ 既然是实战</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/10221774.html</dc:identifier>
</item>
</channel>
</rss>