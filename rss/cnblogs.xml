<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>深入剖析.NETCORE中CORS（跨站资源共享） - Ron.Liang</title>
<link>http://www.cnblogs.com/viter/p/13367650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/viter/p/13367650.html</guid>
<description>&lt;p&gt;由于现代互联网的飞速发展，我们在开发现代 Web 应用程序中，经常需要考虑多种类型的客户端访问服务的情况；而这种情况放在15年前几乎是不可想象的，在那个时代，我们更多的是考虑怎么把网页快速友好的嵌套到服务代码中，经过服务器渲染后输出HTML到客户端，没有 iOS，没有 Android，没有 UWP。更多的考虑是 防止 XSS，在当时的环境下，XSS一度成为各个站长的噩梦，甚至网站开发的基本要求都要加上：必须懂防 XSS 攻击。&lt;/p&gt;

&lt;p&gt;言归正传，CORS（Cross-Origin Resource Sharing）是由 W3C 指定的标准，其目的是帮助在各个站点间的资源共享。CORS 不是一项安全标准，启用 CORS 实际上是让站点放宽了安全标准；通过配置 CORS，可以允许配置中的请求源执行允许/拒绝的动作。&lt;/p&gt;

&lt;p&gt;在 .NETCore　中，已经为我们集成好 CORS 组件 Microsoft.AspNetCore.Cors，在需要的时候引入该组件即可，Microsoft.AspNetCore.Cors 的设计非常的简洁，包括两大部分的内容，看图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/26882/202007/26882-20200723174045903-461772115.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图中我们可以看出，左边是入口，是我们常见的 AddCors/UseCors，右边是 CORS 的核心配置和验证，配置对象是 CorsPolicyBuilder 和 CorsPolicy，验证入口为 CorsService，中间件 CorsMiddleware 提供了拦截验证入口。&lt;/p&gt;
&lt;p&gt;CorsService 是整个 CORS 的核心实现，客户端的请求流经中间件或者AOP组件后，他们在内部调用 CorsService 的相关验证方法，在 CorsService 内部使用配置好的 PolicyName 拉去相关策略进行请求验证，最终返回验证结果到客户端。&lt;/p&gt;

&lt;p&gt;通常情况下，我们会在 Startup 类中的 ConfigureServices(IServiceCollection services) 方法内部调用 AddCors() 来启用 CROS 策略，但是，该 AddCors() 并不是上图中 CorsServiceCollectionExrensions 中的 AddCors 扩展方法。&lt;/p&gt;
&lt;p&gt;实际上，在 ConfigureServices 中调用的 AddCors 是处于程序集 Microsoft.AspNetCore.Mvc.Cors ；在 Microsoft.AspNetCore.Mvc.Cors 内部的扩展方法 AddCors() 中，以 AOP 方式定义了对 EnableCorsAttribute/DisableCorsAttributeAttribute 的拦截检查。&lt;/p&gt;
&lt;p&gt;具体做法是在程序集 Microsoft.AspNetCore.Mvc.Cors 内部，定义了类 CorsApplicationModelProvider ，当我们调用 AddCors 扩展方法的时候，将进一步调用 CorsApplicationModelProvider.OnProvidersExecuting(ApplicationModelProviderContext context) 方法，从而执行检查 EnableCorsAttribute/DisableCorsAttributeAttribute 策略。&lt;/p&gt;
&lt;p&gt;所以，我们在 ConfigureServices 中调用的 AddCore，其实是在该程序集内部定义的类： MvcCorsMvcCoreBuilderExtensions 的扩展方法，我们看 MvcCorsMvcCoreBuilderExtensions 的定义&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static class MvcCorsMvcCoreBuilderExtensions
{
    public static IMvcCoreBuilder AddCors(this IMvcCoreBuilder builder)
    {
       ...
       AddCorsServices(builder.Services);
       ...
    }

    public static IMvcCoreBuilder AddCors(this IMvcCoreBuilder builder,Action&amp;lt;CorsOptions&amp;gt; setupAction)
    {
      ...
      AddCorsServices(builder.Services);
      ...
    }

    public static IMvcCoreBuilder ConfigureCors(this IMvcCoreBuilder builder,Action&amp;lt;CorsOptions&amp;gt; setupAction)
    {
      ...
    }

    // Internal for testing.
    internal static void AddCorsServices(IServiceCollection services)
    {
        services.AddCors();

        services.TryAddEnumerable(
            ServiceDescriptor.Transient&amp;lt;IApplicationModelProvider, CorsApplicationModelProvider&amp;gt;());
        services.TryAddTransient&amp;lt;CorsAuthorizationFilter, CorsAuthorizationFilter&amp;gt;();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重点就在上面的 AddCorsServices(IServiceCollection services) 方法中， 在方法中调用了 CORS 的扩展方法 AddCors()。&lt;/p&gt;
&lt;p&gt;那么我们就要问， CorsApplicationModelProvider 是在什么时候被初始化的呢？&lt;br/&gt;答案是在 startup 中 ConfigureServices(IServiceCollection services) 方法内调用 services.AddControllers() 的时候。在AddControllers() 方法内部，调用了 AddControllersCore 方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private static IMvcCoreBuilder AddControllersCore(IServiceCollection services)
{
    // This method excludes all of the view-related services by default.
    return services
        .AddMvcCore()
        .AddApiExplorer()
        .AddAuthorization()
        .AddCors()
        .AddDataAnnotations()
        .AddFormatterMappings();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;理解了 CORS 的执行过程，下面我们就可以开始了解应该怎么在 .NETCore 中使用 CORS 的策略了&lt;/p&gt;

&lt;p&gt;在 .NETCore 中，可以通过以下三种方式启用 CORS&lt;/p&gt;
&lt;p&gt;1、使用默认策略/命名策略的中间件的方式&lt;br/&gt;2、终结点路由 + 命名策略&lt;br/&gt;3、命名策略 + EnableCorsAttribute&lt;/p&gt;
&lt;p&gt;通过上面的三种方式，可以灵活在程序中控制请求源的走向，但是，残酷的事实告诉我们，一般情况下，我们都是会对全站进行 CORS。所以，现实情况就是在大部分的 Web 应用程序中， CORS 已然成为皇帝的新装，甚至有点累赘。&lt;/p&gt;

&lt;p&gt;通过上面的 CORS 思维导图，我们已经大概了解了 CORS 的整个结构。由上图我们知道，CorsPolicyBuilder 位于命名空间 Microsoft.AspNetCore.Cors.Infrastructure 中。&lt;br/&gt;在内部提供了两种基础控制策略：全开/半开。这两种策略都提供了基本的方法供开发者直接调用，非常的贴心。&lt;/p&gt;
&lt;h2 id=&quot;全开&quot;&gt;全开&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;public CorsPolicyBuilder AllowAnyHeader();
public CorsPolicyBuilder AllowAnyMethod();
public CorsPolicyBuilder AllowAnyOrigin();
public CorsPolicyBuilder AllowCredentials();
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;半开&quot;&gt;半开&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;public CorsPolicyBuilder DisallowCredentials();
public CorsPolicyBuilder WithHeaders(params string[] headers);
public CorsPolicyBuilder WithMethods(params string[] methods);
public CorsPolicyBuilder WithOrigins(params string[] origins);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的策略定义从字面理解就可以知道其用途，实际上呢，他们的实现原理也是非常的简单。在 CorsPolicyBuilder 内部维护着一个 CorsPolicy 对象，当你使用全开/半开方式配置策略的时候，builder 会将配置写入内部 CorsPolicy 中存储备用。&lt;/p&gt;
&lt;p&gt;比如半开 WithOrigins(params string[] origins);,通过迭代器将配置的源写入 _policy.Origins 中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public CorsPolicyBuilder WithOrigins(params string[] origins)
    {
        foreach (var origin in origins)
        {
            var normalizedOrigin = GetNormalizedOrigin(origin);
            _policy.Origins.Add(normalizedOrigin);
        }

        return this;
    }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;在理解了配置的过程后，我们就可以进入真正的使用环节了，通过上面的学习我们知道，启用 CORS 有三种方式，咱们一步一步来。&lt;/p&gt;
&lt;h2 id=&quot;使用默认策略命名策略的中间件的方式&quot;&gt;使用默认策略/命名策略的中间件的方式&lt;/h2&gt;
&lt;p&gt;所谓的命名策略就是给你的策略起个名字，默认策略就是没有名字，所有的入口都使用同一个策略，下面的代码演示了命名策略&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private readonly string CORS_ALLOW_ORGINS = &quot;cors_allow_orgins&quot;;

public void ConfigureServices(IServiceCollection services)
{
    services.AddCors(options =&amp;gt;
    {
        options.AddPolicy(CORS_ALLOW_ORGINS, policy =&amp;gt;
        {
            policy.WithOrigins(&quot;http://localhost:5500&quot;, &quot;http://localhost:8099&quot;);
        });
    });
    services.AddControllers().AddJsonOptions(options =&amp;gt;
    {
        options.JsonSerializerOptions.Converters.Add(new StringJsonConverter());
    });
}

// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }
    app.UseRouting();
    app.UseCors(CORS_ALLOW_ORGINS);
    app.UseAuthorization();
    app.UseEndpoints(endpoints =&amp;gt;
    {
        endpoints.MapControllers();
    });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码演示了如何在站点中全局终结点启用 CORS，首先声明了命名策略 cors_allow_orgins ，然后将其用 AddCors() 添加到 CORS 中，最后使用 UseCors() 启用该命名策略，需要注意的是，AddCors() 和 UseCors() 必须成对出现，并且要使用同一个命名策略。&lt;/p&gt;

&lt;p&gt;.NETCore 支持通过对单个路由设置 CORS 命名策略，从而可以实现在一个系统中，对不同的业务提供个性化的支持。终结点路由 + 命名策略的配置和上面的命名策略基本相同，仅仅是在配置路由的时候，只需要对某个路由增加 RequireCors 的配置即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private readonly string CORS_ALLOW_ORGINS = &quot;cors_allow_orgins&quot;;
public void ConfigureServices(IServiceCollection services)
{
    services.AddCors(options =&amp;gt;
    {
        options.AddPolicy(CORS_ALLOW_ORGINS, policy =&amp;gt;
        {
            policy.WithOrigins(&quot;http://localhost:5500&quot;, &quot;http://localhost:8099&quot;);
        });
    });
    services.AddControllers().AddJsonOptions(options =&amp;gt;
    {
        options.JsonSerializerOptions.Converters.Add(new StringJsonConverter());
    });
}
// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }
    app.UseRouting();
    app.UseCors();
    app.UseAuthorization();
    app.UseEndpoints(endpoints =&amp;gt;
    {
        endpoints.MapControllerRoute(&quot;weatherforecast&quot;, &quot;{controller=WeatherForecast}/{action=Get}&quot;).RequireCors(CORS_ALLOW_ORGINS);
        // endpoints.MapControllers();
    });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码，指定了路由 weatherforecast 需要执行 CORS 策略 CORS_ALLOW_ORGINS。通过调用 RequireCors() 方法，传入策略名称，完成 CORS 的配置。RequireCors 方法是在程序集 Microsoft.AspNetCore.Cors 内部的扩展方法，具体是怎么启用策略的呢，其实就是在内部给指定的终结点路由增加了 EnableCorsAttribute ，这就是下面要说到的第三种启用 CORS 的方式。&lt;/p&gt;
&lt;p&gt;来看看 RequireCors() 内部的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static TBuilder RequireCors&amp;lt;TBuilder&amp;gt;(this TBuilder builder, string policyName) where TBuilder : IEndpointConventionBuilder
{
    if (builder == null)
    {
        throw new ArgumentNullException(nameof(builder));
    }
    builder.Add(endpointBuilder =&amp;gt;
    {
        endpointBuilder.Metadata.Add(new EnableCorsAttribute(policyName));
    });
    return builder;
}

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;最后一种启用 CORS 的方式是使用 EnableCorsAttribute 特性标记，和 RequireCors 方法内部的实现不同的是，这里说的 EnableCorsAttribute 是显式的指定到控制器上，在应用 EnableCorsAttribute 的时候，你可以应用到根控制器或者子控制器上，如果是对根控制器进行标记，被标记的根控制器和他的所有子控制器都将受指定 CORS 策略的影响；反之，如果只是对子控制器进行标记，CORS 策略也只对当前控制器产生影响。&lt;/p&gt;
&lt;h2 id=&quot;cors-的初始化&quot;&gt;CORS 的初始化&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddCors(options =&amp;gt;
    {
        options.AddPolicy(&quot;controller_cors&quot;, policy =&amp;gt;
        {
            policy.WithOrigins(&quot;http://localhost:5500&quot;, &quot;http://localhost:8099&quot;);
        });
        options.AddPolicy(&quot;action_cors&quot;, policy =&amp;gt;
        {
            policy.WithOrigins(&quot;http://localhost:5500&quot;, &quot;http://localhost:8099&quot;);
        });
    });
    services.AddControllers().AddJsonOptions(options =&amp;gt;
    {
        options.JsonSerializerOptions.Converters.Add(new StringJsonConverter());
    });
}

// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }
    app.UseRouting();
    app.UseCors();
    app.UseAuthorization();
    app.UseEndpoints(endpoints =&amp;gt;
    {
        endpoints.MapControllers();
    });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的代码中，因为 EnableCorsAttribute 可以应用到类和属性上，所以我们定义了两个 CORS 策略，分别是 controller_cors 和 action_cors。接下来将这两种策略应用到 WeatherForecastController 上。&lt;/p&gt;
&lt;h2 id=&quot;应用-enablecorsattribute-特性标记&quot;&gt;应用 EnableCorsAttribute 特性标记&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;[ApiController]
[Route(&quot;[controller]&quot;)]
[EnableCors(&quot;controller_cors&quot;)]
public class WeatherForecastController : ControllerBase
{
    [EnableCors(&quot;action_cors&quot;)]
    [HttpPost]
    public string Users()
    {
        return &quot;Users&quot;;
    }

    [DisableCors]
    [HttpGet]
    public string List()
    {
        return &quot;List&quot;;
    }

    [HttpGet]
    public string Index()
    {
        return &quot;Index&quot;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的 WeatherForecastController 控制器中，我们将 controller_cors 标记到控制器上，将 action_cors 标记到 Action 名称为 Users 上面，同时，还对 List 应用了 DisableCors ，表示对 List 禁用 CORS 的策略，所以我们知道，在 CORS 中，有 AddCors/UseCors，也有 EnableCors/DisableCors ，都是成对出现的。&lt;/p&gt;

&lt;p&gt;我们还记得，在 .NETCore 中，一共有 4 种策略，分别是：Header、Method、Origin、Credentials，但是本文仅演示了 WithOrigins 这一种方式，相信通过这一种方式的演示，对大家在启用其它策略的时候，其思想也是一致的，所谓的标头、请求方式、凭据 等等，其基本法是不变的。&lt;/p&gt;
&lt;p&gt;通过对 Microsoft.AspNetCore.Cors 的内部实现的剖析，我们了解到，其实现 CORS 的原理非常简单，结构清晰，就算不用系统自带的 CORS 组件，自行实现一个 CORS 策略，也是非常容易的。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-3.1#same-origin&quot;&gt;(CORS) 启用跨域请求 ASP.NET Core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub：&lt;br/&gt;&lt;a href=&quot;https://github.com/dotnet/aspnetcore/tree/master/src/Mvc/Mvc/src&quot;&gt;https://github.com/dotnet/aspnetcore/tree/master/src/Mvc/Mvc/src&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/dotnet/aspnetcore/tree/master/src/Mvc/Mvc.Cors/src&quot;&gt;https://github.com/dotnet/aspnetcore/tree/master/src/Mvc/Mvc.Cors/src&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/dotnet/aspnetcore/tree/master/src/Middleware/CORS/src&quot;&gt;https://github.com/dotnet/aspnetcore/tree/master/src/Middleware/CORS/src&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 24 Jul 2020 00:12:00 +0000</pubDate>
<dc:creator>Ron.Liang</dc:creator>
<og:description>前言 由于现代互联网的飞速发展，我们在开发现代 Web 应用程序中，经常需要考虑多种类型的客户端访问服务的情况；而这种情况放在15年前几乎是不可想象的，在那个时代，我们更多的是考虑怎么把网页快速友好的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/viter/p/13367650.html</dc:identifier>
</item>
<item>
<title>Flask前后端分离项目案例 - JonPan</title>
<link>http://www.cnblogs.com/panlq/p/13369842.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/panlq/p/13369842.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;学习慕课课程，Flask前后端分离API后台接口的实现demo，前端可以接入小程序，暂时已经完成后台API基础架构，使用&lt;code&gt;postman&lt;/code&gt;调试.&lt;br/&gt;&lt;a href=&quot;https://github.com/Panlq/Py-Project/tree/master/Web-Pro/yushu2&quot;&gt;项目地址git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重构部分:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;token校验模块&lt;/li&gt;
&lt;li&gt;auths认证模块&lt;/li&gt;
&lt;li&gt;scope权限模块，增加全局扫描器（参考&lt;code&gt;flask HTTPExceptions&lt;/code&gt;模块）&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;收获&quot;&gt;收获&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;我们可以接受定义时的复杂，但不能接受调用时的复杂&lt;/li&gt;
&lt;li&gt;如果你觉得写代码厌倦，无聊，那你只是停留在功能的实现上，功能的实现很简单，你要追求的是更好的写法，抽象的艺术，不是机械的劳动而是要&lt;strong&gt;创造&lt;/strong&gt;，要有自己的思考&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sqlalchemy&lt;/code&gt;中对类的创建都是用元类的方式，所以调用的时候都不用实例化，当我们重写&lt;code&gt;__init__&lt;/code&gt;方法是需要调用&lt;code&gt;orm.reconstrcut&lt;/code&gt;装饰器，才会执行实例化对象的构造函数&lt;/li&gt;
&lt;li&gt;权限等级模块的设计(&lt;code&gt;api访问权限&lt;/code&gt;)，如超级管理员，管理员，普通用户，访客，这四者之间的关系，有包含的关系，所以可以考虑合并也可以考虑排除的方式来构建权限控制模块. 参考本项目中的&lt;code&gt;app.libs.scope&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;学的是解决问题的方法，首先要有深度，在去考虑广度，还要懂得迁移应用，形成自己的思维模型。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;推荐阅读:&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://tech.meituan.com/2018/04/16/study-vs-work.html&quot;&gt;工作中如何做好技术积累&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.jianshu.com/p/40d24a1f6958&quot;&gt;没有技术深度的苦恼&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;知识点复盘&quot;&gt;知识点复盘&lt;/h2&gt;
&lt;h3 id=&quot;初始化flask应用程序&quot;&gt;初始化flask应用程序&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;app = Flask(__name__, static_folder='views/statics', static_url_path='/static', template_folder=&quot;templates&quot;)  
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建Flask应用程序实例对象, 如果模块存在，会根据模块所在的目录去寻找静态文件和模块文件, 如果模块不存在，会默认使用app对象所在的项目目录&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;__name__&lt;/code&gt; 表示以此模块所在的目录作为工作目录，就是静态文等从这个目录下去找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_folder&lt;/code&gt; 指定静态文件存放相对路径 flask默认会用/进行分割然后取最后一个作为访问&lt;code&gt;url&lt;/code&gt; 类似&lt;code&gt;Django&lt;/code&gt;中的&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_url_path&lt;/code&gt; 指定访问静态文件的&lt;code&gt;url&lt;/code&gt;地址前缀, 类似&lt;code&gt;Django&lt;/code&gt; 中的 &lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template_folder&lt;/code&gt; 指定模板文件的目录&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;     @property
    def static_url_path(self):
        &quot;&quot;&quot;The URL prefix that the static route will be accessible from.

        If it was not configured during init, it is derived from
        :attr:`static_folder`.
        &quot;&quot;&quot;
        if self._static_url_path is not None:
            return self._static_url_path

        if self.static_folder is not None:
            basename = os.path.basename(self.static_folder)
            return (&quot;/&quot; + basename).rstrip(&quot;/&quot;)

    @static_url_path.setter
    def static_url_path(self, value):
        if value is not None:
            value = value.rstrip(&quot;/&quot;)

        self._static_url_path = value
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;flask-中url相关底层类&quot;&gt;Flask 中&lt;code&gt;url&lt;/code&gt;相关底层类&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;BaseConverter&lt;/code&gt;子类：保存提取&lt;code&gt;url&lt;/code&gt;参数匹配规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rule&lt;/code&gt;类：记录一个&lt;code&gt;url&lt;/code&gt;和一个视图函数的对应关系&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;类：记录所有&lt;code&gt;url&lt;/code&gt;地址和试图函数对应的关系 &lt;code&gt;Map(Rule, Rule, ....)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MapAdapter&lt;/code&gt;类：执行&lt;code&gt;url&lt;/code&gt;匹配的过程，其中有一个&lt;code&gt;match&lt;/code&gt;方法，&lt;code&gt;Rule.match(path, method)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;自定义路由管理器&quot;&gt;自定义路由管理器&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from flask import Flask

app = Flask(__name__)

from werkzeug.routing import BaseConverter

class RegexUrl(BaseConverter):
    # 指定匹配参数时的正则表达式
    # 如: # regex = '\d{6}'
    def __init__(self, url_map, regex):
        &quot;&quot;&quot;
        :param url_map: flask会自动传递该参数
        :param regex: 自定义的匹配规则
        &quot;&quot;&quot;
        super(RegexUrl, self).__init__(url_map)
        self.regex = regex
    
    # 在对应的试图函数之前调用
    # 从url中提取出参数之后，会先调用to_python
    # 会把提取出的值作为参数传递给to_pthon在返回给对应的试图
    def to_python(self, value):
        &quot;&quot;&quot;可以在这里做一些参数的类型转换&quot;&quot;&quot;
        return value
    
    # 调用url_for时会被调用, 用来处理url反向解析时url参数处理
        # 返回值用来拼接url
    def to_url(self, value):
        &quot;&quot;&quot;对接收到参数做一些过滤等&quot;&quot;&quot;
        return value
        
# 将自定义路由转换器类添加到转换器字典中
app.url_map.converters['re'] = RegexUrl


# 案例
@app.route('/user/&amp;lt;re(&quot;[a-z]{3}&quot;):id&amp;gt;')
def hello(id):
    return f'hello {id}'


if __name__ == '__main__':
    app.run(debug=True)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;全局异常捕获&quot;&gt;全局异常捕获&lt;/h3&gt;
&lt;p&gt;AOP编程思想，面向切面编程，把事件统一在一个地方处理，在一个统一的出口做处理&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errorhandler&lt;/code&gt; 在flask 1.0版本之前只支持填写对应的错误码，比如 &lt;code&gt;@app.errorhandler(404)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在flask1.0版本之后就支持全局的异常捕获了&lt;code&gt;@app.errorhandler(code_or_exception)&lt;/code&gt;，有了这个之后，就可以在全局做一个异常捕获了，不用每个视图函数都做异常捕获。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;@app.errorhandler(Exception)
def framework_error(e):
    if isinstance(e, APIException):
        return e
    elif isinstance(e, HTTPException):
        code = e.code
        msg = e.description
        error_code = 1007
        return APIException(msg, code, error_code)

    else:
        if not current_app.config['DEBUG']:
            return ServerError()
        else:
            raise e
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;异常类型&quot;&gt;异常类型&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;可预知的异常（已知异常）&lt;/li&gt;
&lt;li&gt;完全没有意识的异常（未知异常）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;abort函数&quot;&gt;abort函数&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;abort(状态码) 是一个默认的抛出异常的方法&lt;/li&gt;
&lt;li&gt;调用abort函数可以抛出一个指定状态码对应的异常信息&lt;/li&gt;
&lt;li&gt;abort函数会立即终止当前视图函数的运行**&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;模型对象的序列化&quot;&gt;模型对象的序列化&lt;/h3&gt;
&lt;p&gt;场景：我们有时候可能需要返回模型对象中的某些字段，或者全部字段，平时的做法就是将对象中的各个字段转为字典在返回&lt;code&gt;jsonnify(data)&lt;/code&gt;, 但是这样的写法可能在每个需要返回数据的试图函数中都写一个对应的字典。。对象转字典在返回。&lt;code&gt;json&lt;/code&gt;默认是不能序列化对象的，一般我们的做法是 &lt;code&gt;json.dumps(obj, default=lambda o: o.__dict__)&lt;/code&gt;但是 &lt;code&gt;__dict__&lt;/code&gt;中只保存实例属性，我们的模型类基本定义的类属性。解决这个问题就要看&lt;code&gt;jsonify&lt;/code&gt;中是如何做序列化的，然后怎么重写。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;重写&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from datetime import date
from flask import Flask as _Flask
from flask.json import JSONEncoder as _JSONEncoder

class JSONEncoder(_JSONEncoder):
    &quot;&quot;&quot;
    重写json序列化，使得模型类的可序列化
    &quot;&quot;&quot;
    def default(self, o):
        if hasattr(o, 'keys') and hasattr(o, '__getitem__'):
            return dict(o)
        if isinstance(o, date):
            return o.strftime('%Y-%m-%d')
        
                super(JSONEncoder, self).default(o)
        

# 需要将重写的类绑定到应用程序中
class Flask(_Flask):
    json_encoder = JSONEncoder
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;模型类的定义&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class User(Base):
    id = Column(Integer, primary_key=True)
    email = Column(String(24), unique=True, nullable=False)
    nickname = Column(String(24), unique=True)
    auth = Column(SmallInteger, default=1)
    _password = Column('password', String(100))
    
    def keys(self):
        return ['id', 'email', 'nickname', 'auth']
    
    def __getitem__(self, item):
        return getattr(self, item)

&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意： 修改了&lt;code&gt;json_encode&lt;/code&gt;方法后，只要调用到&lt;code&gt;flask.json&lt;/code&gt; 模块的都会走这个方法&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么要写&lt;code&gt;keys&lt;/code&gt;和&lt;code&gt;__getitem__&lt;/code&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;当我们使用&lt;code&gt;dict(object)&lt;/code&gt; 操作一个对象的时候，&lt;code&gt;dict&lt;/code&gt;首先会到实例中找&lt;code&gt;keys&lt;/code&gt;的方法，将其返回列表的值作为&lt;code&gt;key&lt;/code&gt;, 然后会根据&lt;code&gt;object[key]&lt;/code&gt; 获取对应的值，所以实例要实现&lt;code&gt;__getitem__&lt;/code&gt;方法才可以使用中括号的方式调用属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;进阶写法&lt;/strong&gt; - &lt;strong&gt;控制返回的字段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;场景：当我们有一个&lt;code&gt;Book&lt;/code&gt;的模型类，我们的&lt;code&gt;api&lt;/code&gt;接口可能需要返回&lt;code&gt;book&lt;/code&gt;的详情页所以就要返回所有字典，但另外一个接口可能只需要返回某几个字段。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class Book(Base):
    id = Column(Integer, primary_key=True, autoincrement=True)
    title = Column(String(50), nullable=False)
    author = Column(String(30), default='未名')
    binding = Column(String(20))
    publisher = Column(String(50))
    price = Column(String(20))
    pages = Column(Integer)
    pubdate = Column(String(20))
    isbn = Column(String(15), nullable=False, unique=True)
    summary = Column(String(1000))
    image = Column(String(50))
        
    # orm实例化对象, 字段需要写在构造函数中，这样每个实例对象都会有自己的一份，删除增加都不会互相影响
    @orm.reconstructor
    def __init__(self):
        self.fields = ['id', 'title', 'author', 'binding',
                       'publisher', 'price', 'pages', 'pubdate',
                       'isbn', 'summary', 'image']
        
        def keys(self):
        return self.fields if hasattr(self, 'fields') else []
    
    def hide(self, *keys):
        for key in keys:
            self.fields.remove(key)
        return self
    
    def append(self, *keys):
        for key in keys:
            self.fields.append(key)
        return self


@api.route('/search')
def search():
    books = Book.query.filter().all()  # 根据某些条件搜索的
        books = [book.hide('summary') for book in books]
    return jsonify(books)
    
    
@api,route('/&amp;lt;isbn&amp;gt;/detail')
def detail(isbn):
    book = Book.query.filter_by(isbn=isbn).first_or_404()
    return jsonify(book)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;请求钩子函数&quot;&gt;请求钩子函数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;before_first_request：在处理第一个请求前运行。&lt;/li&gt;
&lt;li&gt;before_request：在每次请求前运行。&lt;/li&gt;
&lt;li&gt;after_request：如果没有未处理的异常抛出，在每次请求后运行。&lt;/li&gt;
&lt;li&gt;teardown_request：在每次请求后运行，即使有未处理的异常抛出。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;全局扫描器&quot;&gt;全局扫描器&lt;/h3&gt;
&lt;p&gt;模仿flask exceptions 预加载各个异常类的方式，将用户组自动加载进内存中，这样获取的话就更方便&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;str2obj = {}
level2str = {}


def iteritems(d, *args, **kwargs):
    return iter(d.items(*args, **kwargs))


def _find_scope_group():
    for _name, obj in iteritems(globals()):
        try:
            is_scope_obj = issubclass(obj, BaseScope)
        except TypeError:
            is_scope_obj = False
        if not is_scope_obj or obj.level &amp;lt; 1:
            continue

        old_obj = str2obj.get(_name, None)
        if old_obj is not None and issubclass(obj, old_obj):
            continue
        str2obj[_name] = obj
        level2str[obj.level] = _name


# 模仿flask exceptions 预加载各个异常类的方式，将用户组自动加载进内存
_find_scope_group()
del _find_scope_group
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;常见bug&quot;&gt;常见bug&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;form&lt;/code&gt;正则校验注意事项&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;r'^[A-Za-z0-9_]{6, 25}$'

# 带空格和不带空格是两码事, 正则里面{,} 连续不带空格 

r'^[A-Za-z0-9_]{6,25}$'
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://coding.imooc.com/class/220.html&quot;&gt;Python Flask高级编程之RESTFul API前后端分离精讲&lt;/a&gt;&lt;br/&gt;七月老师的课程挺好的，不是纯写代码，而是从问题入手，怎么把复杂问题简单化，从0到1。&lt;/p&gt;
</description>
<pubDate>Thu, 23 Jul 2020 18:11:00 +0000</pubDate>
<dc:creator>JonPan</dc:creator>
<og:description>简介 学习慕课课程，Flask前后端分离API后台接口的实现demo，前端可以接入小程序，暂时已经完成后台API基础架构，使用postman调试. 项目地址git 重构部分: token校验模块 au</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/panlq/p/13369842.html</dc:identifier>
</item>
<item>
<title>硬核干货：5W字17张高清图理解同步器框架AbstractQueuedSynchronizer - throwable</title>
<link>http://www.cnblogs.com/throwable/p/13369717.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/throwable/p/13369717.html</guid>
<description>&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;并发编程大师&lt;strong&gt;Doug Lea&lt;/strong&gt;在编写&lt;code&gt;JUC&lt;/code&gt;（&lt;code&gt;java.util.concurrent&lt;/code&gt;）包的时候引入了&lt;code&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer&lt;/code&gt;，其实是&lt;code&gt;Abstract Queued Synchronizer&lt;/code&gt;，也就是&quot;基于队列实现的抽象同步器&quot;，一般我们称之为&lt;code&gt;AQS&lt;/code&gt;。其实&lt;code&gt;Doug Lea&lt;/code&gt;大神编写&lt;code&gt;AQS&lt;/code&gt;是有严谨的理论基础的，他的个人博客上有一篇论文&lt;a href=&quot;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&quot;&gt;《The java.util.concurrent Synchronizer Framewor》&lt;/a&gt;，可以在互联网找到相应的译文《JUC同步器框架》，如果想要深入研究&lt;code&gt;AQS&lt;/code&gt;必须要理解一下该论文的内容，然后结合论文内容详细分析一下&lt;code&gt;AQS&lt;/code&gt;的源码实现。本文在阅读&lt;code&gt;AQS&lt;/code&gt;源码的时候选用的&lt;code&gt;JDK&lt;/code&gt;版本是&lt;code&gt;JDK11&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;出于写作习惯，下文会把AbstractQueuedSynchronizer称为AQS、JUC同步器框或者同步器框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;aqs的主要功能&quot;&gt;AQS的主要功能&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt;是&lt;code&gt;JUC&lt;/code&gt;包中用于构建锁或者其他同步组件（信号量、事件等）的基础框架类。&lt;code&gt;AQS&lt;/code&gt;从它的实现上看主要提供了下面的功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;同步状态的原子性管理。&lt;/li&gt;
&lt;li&gt;线程的阻塞和解除阻塞。&lt;/li&gt;
&lt;li&gt;提供阻塞线程的存储队列。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;基于这三大功能，衍生出下面的附加功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过中断实现的任务取消，此功能基于线程中断实现。&lt;/li&gt;
&lt;li&gt;可选的超时设置，也就是调用者可以选择放弃等待任务执行完毕直接返回。&lt;/li&gt;
&lt;li&gt;定义了&lt;code&gt;Condition接口&lt;/code&gt;，用于支持管程形式的&lt;code&gt;await/signal/signalAll&lt;/code&gt;操作，代替了&lt;code&gt;Object&lt;/code&gt;类基于&lt;code&gt;JNI&lt;/code&gt;提供的&lt;code&gt;wait/notify/notifyAll&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt;还根据同步状态的不同管理方式区分为两种不同的实现：&lt;strong&gt;独占状态的同步器&lt;/strong&gt;和&lt;strong&gt;共享状态的同步器&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;同步器框架基本原理&quot;&gt;同步器框架基本原理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&quot;&gt;《The java.util.concurrent Synchronizer Framework》&lt;/a&gt;一文中其实有提及到同步器框架的伪代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// acquire操作如下：
while (synchronization state does not allow acquire) {
    enqueue current thread if not already queued;
    possibly block current thread;
}
dequeue current thread if it was queued;

//release操作如下：
update synchronization state;
if (state may permit a blocked thread to acquire){
    unblock one or more queued threads;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;撇脚翻译一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// acquire操作如下：
while(同步状态申请获取失败){
    if(当前线程未进入等待队列){
        当前线程放入等待队列;
    }
    尝试阻塞当前线程;
}
当前线程移出等待队列

//release操作如下：
更新同步状态
if(同步状态足够允许一个阻塞的线程申请获取){
    解除一个或者多个等待队列中的线程的阻塞状态;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了实现上述操作，需要下面三个基本环节的相互协作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;同步状态的原子性管理。&lt;/li&gt;
&lt;li&gt;等待队列的管理。&lt;/li&gt;
&lt;li&gt;线程的阻塞与解除阻塞。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其实基本原理很简单，但是为了应对复杂的并发场景和并发场景下程序执行的正确性，同步器框架在上面的&lt;code&gt;acquire&lt;/code&gt;操作和&lt;code&gt;release&lt;/code&gt;操作中使用了&lt;strong&gt;大量的死循环和&lt;code&gt;CAS&lt;/code&gt;等操作&lt;/strong&gt;，再加上&lt;code&gt;Doug Lea&lt;/code&gt;喜欢使用单行复杂的条件判断代码，如&lt;strong&gt;一个&lt;code&gt;if&lt;/code&gt;条件语句会包含大量操作&lt;/strong&gt;，&lt;code&gt;AQS&lt;/code&gt;很多时候会让人感觉实现逻辑过于复杂。&lt;/p&gt;
&lt;h3 id=&quot;同步状态管理&quot;&gt;同步状态管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt;内部内部定义了一个&lt;code&gt;32&lt;/code&gt;位整型的&lt;code&gt;state&lt;/code&gt;变量用于保存同步状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * The synchronization state.（同步状态值）
 */
private volatile int state;

// 获取state
protected final int getState() {
    return state;
}

// 直接覆盖设置state
protected final void setState(int newState) {
    state = newState;
}

// CAS设置state
protected final boolean compareAndSetState(int expect, int update) {
    return STATE.compareAndSet(this, expect, update);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同步状态&lt;code&gt;state&lt;/code&gt;在不同的实现中可以有不同的作用或者表示意义，这里其实不能单纯把它理解为中文意义上的&quot;状态&quot;，它可以代表资源数、锁状态等等，下文遇到具体的场景我们再分析它表示的意义。&lt;/p&gt;
&lt;h3 id=&quot;clh队列与变体&quot;&gt;CLH队列与变体&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CLH&lt;/code&gt;锁即&lt;code&gt;Craig, Landin, and Hagersten (CLH) locks&lt;/code&gt;，因为它底层是基于队列实现，一般也称为&lt;code&gt;CLH&lt;/code&gt;队列锁。&lt;code&gt;CLH&lt;/code&gt;锁也是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程仅仅在本地变量上自旋，它不断轮询前驱的状态，假设发现前驱释放了锁就结束自旋。从实现上看，&lt;code&gt;CLH&lt;/code&gt;锁是一种自旋锁，能确保无饥饿性，提供先来先服务的公平性。先看简单的&lt;code&gt;CLH&lt;/code&gt;锁的一个简单实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class CLHLock implements Lock {

    AtomicReference&amp;lt;QueueNode&amp;gt; tail = new AtomicReference&amp;lt;&amp;gt;(new QueueNode());

    ThreadLocal&amp;lt;QueueNode&amp;gt; pred;
    ThreadLocal&amp;lt;QueueNode&amp;gt; current;

    public CLHLock() {
        current = ThreadLocal.withInitial(QueueNode::new);
        pred = ThreadLocal.withInitial(() -&amp;gt; null);
    }

    @Override
    public void lock() {
        QueueNode node = current.get();
        node.locked = true;
        QueueNode pred = tail.getAndSet(node);
        this.pred.set(pred);
        while (pred.locked) {
        }
    }

    @Override
    public void unlock() {
        QueueNode node = current.get();
        node.locked = false;
        current.set(this.pred.get());
    }

    static class QueueNode {

        boolean locked;
    }

    // 忽略其他接口方法的实现
}       
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面是一个简单的&lt;code&gt;CLH&lt;/code&gt;队列锁的实现，内部类&lt;code&gt;QueueNode&lt;/code&gt;只使用了一个简单的布尔值&lt;code&gt;locked&lt;/code&gt;属性记录了每个线程的状态，如果该属性为&lt;code&gt;true&lt;/code&gt;，则相应的线程要么已经获取到锁，要么正在等待锁，如果该属性为&lt;code&gt;false&lt;/code&gt;，则相应的线程已经释放了锁。新来的想要获取锁的线程必须对&lt;code&gt;tail&lt;/code&gt;属性调用&lt;code&gt;getAndSet()&lt;/code&gt;方法，使得自身成为队列的尾部，同时得到一个指向前驱节点的引用&lt;code&gt;pred&lt;/code&gt;，最后线程所在节点在其前驱节点的&lt;code&gt;locked&lt;/code&gt;属性上自旋，直到前驱节点释放锁。上面的实现是无法运行的，因为一旦自旋就会进入死循环导致&lt;code&gt;CPU&lt;/code&gt;飙升，可以尝试使用下文将要提到的&lt;code&gt;LockSupport&lt;/code&gt;进行改造。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CLH&lt;/code&gt;队列锁本质是使用队列（实际上是单向链表）存放等待获取锁的线程，等待的线程总是在其所在节点的前驱节点的状态上自旋，直到前驱节点释放资源。&lt;strong&gt;从实际来看，过度自旋带来的CPU性能损耗比较大，并不是理想的线程等待队列的实现&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-17.png&quot; alt=&quot;j-a-q-s-ex-17&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;基于原始的&lt;code&gt;CLH&lt;/code&gt;队列锁中提供的等待队列的基本原理，&lt;strong&gt;&lt;code&gt;AQS&lt;/code&gt;实现一种了CLH锁队列的变体（Variant）&lt;/strong&gt;。&lt;code&gt;AQS&lt;/code&gt;类的&lt;code&gt;protected&lt;/code&gt;修饰的构造函数里面有一大段注释用于说明&lt;code&gt;AQS&lt;/code&gt;实现的等待队列的细节事项，这里列举几点重要的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;AQS&lt;/code&gt;实现的等待队列没有直接使用&lt;code&gt;CLH&lt;/code&gt;锁队列，但是参考了其设计思路，等待节点会保存前驱节点中线程的信息，内部也会维护一个控制线程阻塞的状态值。&lt;/li&gt;
&lt;li&gt;每个节点都设计为一个持有单独的等待线程并且&quot;带有具体的通知方式&quot;的监视器，这里所谓通知方式就是自定义唤醒阻塞线程的方式而已。&lt;/li&gt;
&lt;li&gt;一个线程是等待队列中的第一个等待节点的持有线程会尝试获取锁，但是并不意味着它一定能够获取锁成功（这里的意思是存在公平和非公平的实现），获取失败就要重新等待。&lt;/li&gt;
&lt;li&gt;等待队列中的节点通过&lt;code&gt;prev&lt;/code&gt;属性连接前驱节点，通过&lt;code&gt;next&lt;/code&gt;属性连接后继节点，简单来说，就是&lt;strong&gt;双向链表的设计&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLH&lt;/code&gt;队列本应该需要一个虚拟的头节点，但是在&lt;code&gt;AQS&lt;/code&gt;中没有直接提供虚拟的头节点，而是延迟到第一次竞争出现的时候懒创建虚拟的头节点（其实也会创建尾节点，初始化时头尾节点是同一个节点）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Condition&lt;/code&gt;（条件）等待队列中的阻塞线程使用的是相同的&lt;code&gt;Node&lt;/code&gt;结构，但是提供了另一个链表用来存放，&lt;code&gt;Condition&lt;/code&gt;等待队列的实现比非&lt;code&gt;Condition&lt;/code&gt;等待队列复杂。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;线程阻塞与唤醒&quot;&gt;线程阻塞与唤醒&lt;/h3&gt;
&lt;p&gt;线程的阻塞和唤醒在&lt;code&gt;JDK1.5&lt;/code&gt;之前，一般只能依赖于&lt;code&gt;Object&lt;/code&gt;类提供的&lt;code&gt;wait()&lt;/code&gt;、&lt;code&gt;notify()&lt;/code&gt;和&lt;code&gt;notifyAll()&lt;/code&gt;方法，它们都是&lt;code&gt;JNI&lt;/code&gt;方法，由&lt;code&gt;JVM&lt;/code&gt;提供实现，并且它们必须运行在获取监视器锁的代码块内（&lt;code&gt;synchronized&lt;/code&gt;代码块中），这个局限性先不谈性能上的问题，代码的简洁性和灵活性是比较低的。&lt;code&gt;JDK1.5&lt;/code&gt;引入了&lt;code&gt;LockSupport&lt;/code&gt;类，底层是基于&lt;code&gt;Unsafe&lt;/code&gt;类的&lt;code&gt;park()&lt;/code&gt;和&lt;code&gt;unpark()&lt;/code&gt;方法，提供了线程阻塞和唤醒的功能，它的机制有点像只有一个允许使用资源的信号量&lt;code&gt;java.util.concurrent.Semaphore&lt;/code&gt;，也就是一个线程只能通过&lt;code&gt;park()&lt;/code&gt;方法阻塞一次，只能调用&lt;code&gt;unpark()&lt;/code&gt;方法解除调用阻塞一次，线程就会唤醒（多次调用&lt;code&gt;unpark()&lt;/code&gt;方法也只会唤醒一次），可以想象是内部维护了一个0-1的计数器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LockSupport&lt;/code&gt;类如果使用得好，可以提供更灵活的编码方式，这里举个简单的使用例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class LockSupportMain implements Runnable {

    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);

    private Thread thread;

    private void setThread(Thread thread) {
        this.thread = thread;
    }

    public static void main(String[] args) throws Exception {
        LockSupportMain main = new LockSupportMain();
        Thread thread = new Thread(main, &quot;LockSupportMain&quot;);
        main.setThread(thread);
        thread.start();
        Thread.sleep(2000);
        main.unpark();
        Thread.sleep(2000);
    }

    @Override
    public void run() {
        System.out.println(String.format(&quot;%s-步入run方法,线程名称:%s&quot;, FORMATTER.format(LocalDateTime.now()),
                Thread.currentThread().getName()));
        LockSupport.park();
        System.out.println(String.format(&quot;%s-解除阻塞,线程继续执行,线程名称:%s&quot;, FORMATTER.format(LocalDateTime.now()),
                Thread.currentThread().getName()));
    }

    private void unpark() {
        LockSupport.unpark(thread);
    }
}
// 某个时刻的执行结果如下：
2019-02-25 00:39:57.780-步入run方法,线程名称:LockSupportMain
2019-02-25 00:39:59.767-解除阻塞,线程继续执行,线程名称:LockSupportMain
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;LockSupport&lt;/code&gt;类&lt;code&gt;park()&lt;/code&gt;方法也有带超时的变体版本方法，遇到带超时期限阻塞等待场景下不妨可以使用&lt;code&gt;LockSupport#parkNanos()&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;独占线程的保存&quot;&gt;独占线程的保存&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AbstractOwnableSynchronizer&lt;/code&gt;是&lt;code&gt;AQS&lt;/code&gt;的父类，一个同步器框架有可能在一个时刻被某一个线程独占，&lt;code&gt;AbstractOwnableSynchronizer&lt;/code&gt;就是为所有的同步器实现和锁相关实现提供了基础的保存、获取和设置独占线程的功能，这个类的源码很简单：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public abstract class AbstractOwnableSynchronizer
    implements java.io.Serializable {

    private static final long serialVersionUID = 3737899427754241961L;

    protected AbstractOwnableSynchronizer() { }
    
    // 当前独占线程的瞬时实例 - 提供Getter和Setter方法
    private transient Thread exclusiveOwnerThread;

    protected final void setExclusiveOwnerThread(Thread thread) {
        exclusiveOwnerThread = thread;
    }

    protected final Thread getExclusiveOwnerThread() {
        return exclusiveOwnerThread;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它就提供了一个保存独占线程的变量对应的&lt;code&gt;Setter&lt;/code&gt;和&lt;code&gt;Getter&lt;/code&gt;方法，方法都是&lt;code&gt;final&lt;/code&gt;修饰的，子类只能使用不能覆盖。&lt;/p&gt;
&lt;h2 id=&quot;clh队列变体的实现&quot;&gt;CLH队列变体的实现&lt;/h2&gt;
&lt;p&gt;这里先重点分析一下&lt;code&gt;AQS&lt;/code&gt;中等待队列的节点&lt;code&gt;AQS&lt;/code&gt;的静态内部类&lt;code&gt;Node&lt;/code&gt;的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;static final class Node {
   // 标记一个节点处于共享模式下的等待
   static final Node SHARED = new Node();
   // 标记一个节点处于独占模式下的等待
   static final Node EXCLUSIVE = null;
   // 取消状态
   static final int CANCELLED =  1;
   // 唤醒状态
   static final int SIGNAL    = -1;
   // 条件等待状态
   static final int CONDITION = -2;
   // 传播状态
   static final int PROPAGATE = -3;
   // 等待状态，初始值为0，其他可选值是上面的4个值
   volatile int waitStatus;
   // 当前节点前驱节点的引用
   volatile Node prev;
   // 当前节点后继节点的引用
   volatile Node next;
   // 当前节点持有的线程，可能是阻塞中等待唤醒的线程
   volatile Thread thread;
   // 下一个等待节点
   Node nextWaiter;
   // 当前操作的节点是否处于共享模式
   final boolean isShared() {
      return nextWaiter == SHARED;
   }
   // 获取当前节点的前驱节点，确保前驱节点必须存在，否则抛出NPE  
   final Node predecessor() {
        Node p = prev;
        if (p == null)
            throw new NullPointerException();
        else
            return p;
    }
    
    // 空节点，主要是首次创建队列的时候创建的头和尾节点使用
    Node() {}

    // 设置下一个等待节点，设置持有线程为当前线程
    Node(Node nextWaiter) {
        this.nextWaiter = nextWaiter;
        THREAD.set(this, Thread.currentThread());
    }

    // 设置waitStatus，设置持有线程为当前线程
    Node(int waitStatus) {
        WAITSTATUS.set(this, waitStatus);
        THREAD.set(this, Thread.currentThread());
    }

    // CAS更新waitStatus  
    final boolean compareAndSetWaitStatus(int expect, int update) {
        return WAITSTATUS.compareAndSet(this, expect, update);
    }
    // CAS设置后继节点
    final boolean compareAndSetNext(Node expect, Node update) {
        return NEXT.compareAndSet(this, expect, update);
    }
    // 设置前驱节点
    final void setPrevRelaxed(Node p) {
        PREV.set(this, p);
    }

    // 下面是变量句柄的实现，在VarHandle出现之前使用的是Unsafe，其实底层还是照样使用Unsafe
    private static final VarHandle NEXT;
    private static final VarHandle PREV;
    private static final VarHandle THREAD;
    private static final VarHandle WAITSTATUS;
    static {
        try {
            MethodHandles.Lookup l = MethodHandles.lookup();
            NEXT = l.findVarHandle(Node.class, &quot;next&quot;, Node.class);
            PREV = l.findVarHandle(Node.class, &quot;prev&quot;, Node.class);
            THREAD = l.findVarHandle(Node.class, &quot;thread&quot;, Thread.class);
            WAITSTATUS = l.findVarHandle(Node.class, &quot;waitStatus&quot;, int.class);
        } catch (ReflectiveOperationException e) {
            throw new ExceptionInInitializerError(e);
        }
    }     
}       
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，变量句柄（&lt;code&gt;VarHandle&lt;/code&gt;）是&lt;code&gt;JDK9&lt;/code&gt;引入的新特性，其实底层依赖的还是&lt;code&gt;Unsafe&lt;/code&gt;的方法，笔者认为可以简单理解它为&lt;code&gt;Unsafe&lt;/code&gt;的门面类，而定义的方法基本都是面向变量属性的操作。这里需要关注一下&lt;code&gt;Node&lt;/code&gt;里面的几个属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;waitStatus&lt;/code&gt;：当前&lt;code&gt;Node&lt;/code&gt;实例的等待状态，可选值有5个。
&lt;ol&gt;&lt;li&gt;初始值整数0：当前节点如果不指定初始化状态值，默认值就是0，侧面说明节点正在等待队列中处于等待状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node#CANCELLED&lt;/code&gt;整数值1：表示当前节点实例因为超时或者线程中断而被取消，等待中的节点永远不会处于此状态，被取消的节点中的线程实例不会阻塞。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node#SIGNAL&lt;/code&gt;整数值-1：表示当前节点的后继节点是（或即将是）阻塞的（通过&lt;code&gt;LockSupport#park()&lt;/code&gt;），当它释放或取消时，当前节点必须&lt;code&gt;LockSupport#unpark()&lt;/code&gt;它的后继节点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node#CONDITION&lt;/code&gt;整数值-2：表示当前节点是条件队列中的一个节点，当它转换为同步队列中的节点的时候，状态会被重新设置为0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node#PROPAGATE&lt;/code&gt;整数值-3：此状态值通常只设置到调用了&lt;code&gt;doReleaseShared()&lt;/code&gt;方法的头节点，确保&lt;code&gt;releaseShared()&lt;/code&gt;方法的调用可以传播到其他的所有节点，简单理解就是共享模式下节点释放的传递标记。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prev&lt;/code&gt;、&lt;code&gt;next&lt;/code&gt;：当前&lt;code&gt;Node&lt;/code&gt;实例的前驱节点引用和后继节点引用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;：当前&lt;code&gt;Node&lt;/code&gt;实例持有的线程实例引用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextWaiter&lt;/code&gt;：这个值是一个比较容易令人生疑的值，虽然表面上它称为&quot;下一个等待的节点&quot;，但是实际上它有三种取值的情况。
&lt;ol&gt;&lt;li&gt;值为静态实例&lt;code&gt;Node.EXCLUSIVE&lt;/code&gt;（也就是null），代表当前的&lt;code&gt;Node&lt;/code&gt;实例是独占模式。&lt;/li&gt;
&lt;li&gt;值为静态实例&lt;code&gt;Node.SHARED&lt;/code&gt;，代表当前的&lt;code&gt;Node&lt;/code&gt;实例是共享模式。&lt;/li&gt;
&lt;li&gt;值为非&lt;code&gt;Node.EXCLUSIVE&lt;/code&gt;和&lt;code&gt;Node.SHARED&lt;/code&gt;的其他节点实例，&lt;strong&gt;代表Condition等待队列中当前节点的下一个等待节点&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Node&lt;/code&gt;类的等待状态&lt;code&gt;waitStatus&lt;/code&gt;理解起来是十分费劲的，下面分析&lt;code&gt;AQS&lt;/code&gt;其他源码段的时候会&lt;strong&gt;标识此状态变化的时机&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实上面的&lt;code&gt;Node&lt;/code&gt;类可以直接拷贝出来当成一个新建的类，然后尝试构建一个双向链表自行调试，这样子就能深刻它的数据结构。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class AqsNode {

    static final AqsNode SHARED = new AqsNode();
    static final AqsNode EXCLUSIVE = null;

    static final int CANCELLED = 1;
    static final int SIGNAL = -1;
    static final int CONDITION = -2;
    static final int PROPAGATE = -3;

    volatile int waitStatus;

    volatile AqsNode prev;

    volatile AqsNode next;

    volatile Thread thread;

    AqsNode nextWaiter;

    final boolean isShared() {
        return nextWaiter == SHARED;
    }

    final AqsNode predecessor() {
        AqsNode p = prev;
        if (p == null)
            throw new NullPointerException();
        else
            return p;
    }

    AqsNode() {
    }

    AqsNode(AqsNode nextWaiter) {
        this.nextWaiter = nextWaiter;
        THREAD.set(this, Thread.currentThread());
    }

    AqsNode(int waitStatus) {
        WAITSTATUS.set(this, waitStatus);
        THREAD.set(this, Thread.currentThread());
    }

    final boolean compareAndSetWaitStatus(int expect, int update) {
        return WAITSTATUS.compareAndSet(this, expect, update);
    }

    final boolean compareAndSetNext(AqsNode expect, AqsNode update) {
        return NEXT.compareAndSet(this, expect, update);
    }

    final void setPrevRelaxed(AqsNode p) {
        PREV.set(this, p);
    }

    private static final VarHandle NEXT;
    private static final VarHandle PREV;
    private static final VarHandle THREAD;
    private static final VarHandle WAITSTATUS;

    static {
        try {
            MethodHandles.Lookup l = MethodHandles.lookup();
            NEXT = l.findVarHandle(AqsNode.class, &quot;next&quot;, AqsNode.class);
            PREV = l.findVarHandle(AqsNode.class, &quot;prev&quot;, AqsNode.class);
            THREAD = l.findVarHandle(AqsNode.class, &quot;thread&quot;, Thread.class);
            WAITSTATUS = l.findVarHandle(AqsNode.class, &quot;waitStatus&quot;, int.class);
        } catch (ReflectiveOperationException e) {
            throw new ExceptionInInitializerError(e);
        }
    }

    public static void main(String[] args) throws Exception {
        AqsNode head = new AqsNode();
        AqsNode next = new AqsNode(AqsNode.EXCLUSIVE);
        head.next = next;
        next.prev = head;
        AqsNode tail = new AqsNode(AqsNode.EXCLUSIVE);
        next.next = tail;
        tail.prev = next;
        List&amp;lt;Thread&amp;gt; threads = new ArrayList&amp;lt;&amp;gt;();
        for (AqsNode node = head; node != null; node = node.next) {
            threads.add(node.thread);
        }
        System.out.println(threads);
    }
}
// 某次执行的输出：
[null, Thread[main,5,main], Thread[main,5,main]]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上，&lt;code&gt;AQS&lt;/code&gt;中一共存在两种等待队列，其中一种是普通的同步等待队列，这里命名为&lt;code&gt;Sync Queue&lt;/code&gt;，另一种是基于&lt;code&gt;Sync Queue&lt;/code&gt;实现的条件等待队列，这里命名为&lt;code&gt;Condition Queue&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;理解同步等待队列&quot;&gt;理解同步等待队列&lt;/h3&gt;
&lt;p&gt;前面已经介绍完&lt;code&gt;AQS&lt;/code&gt;的同步等待队列节点类，下面重点分析一下同步等待队列的相关源码，&lt;strong&gt;下文的Sync队列、Sync Queue、同步队列和同步等待队列是同一个东西&lt;/strong&gt;。首先，我们通过分析&lt;code&gt;Node&lt;/code&gt;节点得知&lt;code&gt;Sync&lt;/code&gt;队列一定是双向链表，&lt;code&gt;AQS&lt;/code&gt;中有两个瞬时成员变量用来存放头节点和尾节点：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 头节点引用（注意由transient volatile修饰，不会序列化，并且写操作会马上刷新到主内存）
private transient volatile Node head;
// 尾节点引用（注意由transient volatile修饰，不会序列化，并且写操作会马上刷新到主内存）
private transient volatile Node tail;

// 变量句柄相关，用于CAS操作头尾节点
private static final VarHandle STATE;
private static final VarHandle HEAD;
private static final VarHandle TAIL;

static {
    try {
        MethodHandles.Lookup l = MethodHandles.lookup();
        STATE = l.findVarHandle(AbstractQueuedSynchronizer.class, &quot;state&quot;, int.class);
        HEAD = l.findVarHandle(AbstractQueuedSynchronizer.class, &quot;head&quot;, Node.class);
        TAIL = l.findVarHandle(AbstractQueuedSynchronizer.class, &quot;tail&quot;, Node.class);
    } catch (ReflectiveOperationException e) {
            throw new ExceptionInInitializerError(e);
    }
    // 确保LockSupport类已经初始化 - 这里应该是为了修复之前一个因为LockSupport未初始化导致的BUG
    Class&amp;lt;?&amp;gt; ensureLoaded = LockSupport.class;
}

// 初始化同步队列，注意初始化同步队列的时候，头尾节点都是指向同一个新的Node实例
private final void initializeSyncQueue() {
    Node h;
    if (HEAD.compareAndSet(this, null, (h = new Node())))
        tail = h;
}

// CAS设置同步队列的尾节点
private final boolean compareAndSetTail(Node expect, Node update) {
    return TAIL.compareAndSet(this, expect, update);
}

// 设置头节点，重点注意这里：传入的节点设置成头节点之后，前驱节点和持有的线程会置为null，这是因为：
// 1.头节点一定没有前驱节点。
// 2.当节点被设置为头节点，它所在的线程一定是已经解除了阻塞。
private void setHead(Node node) {
    head = node;
    node.thread = null;
    node.prev = null;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当前线程加入同步等待队列和同步等待队列的初始化是同一个方法，前文提到过：同步等待队列的初始化会延迟到第一次可能出现竞争的情况，这是为了避免无谓的资源浪费，具体方法是&lt;code&gt;addWaiter(Node mode)&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 添加等待节点到同步等待队列，实际上初始化队列也是这个方法完成的
private Node addWaiter(Node mode) {
    // 基于当前线程创建一个新节点，节点的模式由调用者决定
    Node node = new Node(mode);
    for (;;) {
        Node oldTail = tail;
       // 尾节点不为空说明队列已经初始化过，则把新节点加入到链表中，作为新的尾节点，建立和前驱节点的关联关系
        if (oldTail != null) {
            node.setPrevRelaxed(oldTail);
            if (compareAndSetTail(oldTail, node)) {
                oldTail.next = node;
                return node;
            }
        } else {
            // 尾节点为空说明队列尚未初始化过，进行一次初始化操作
            initializeSyncQueue();
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在首次调用&lt;code&gt;addWaiter()&lt;/code&gt;方法，死循环至少执行两轮再跳出，因为同步队列必须初始化完成后（第一轮循环），然后再把当前线程所在的新节点实例添加到等待队列中再返（第二轮循环）当前的节点，&lt;strong&gt;这里需要注意的是新加入同步等待队列的节点一定是添加到队列的尾部并且会更新&lt;code&gt;AQS&lt;/code&gt;中的tail属性为最新入队的节点实例&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设我们使用&lt;code&gt;Node.EXCLUSIVE&lt;/code&gt;模式把新增的等待线程加入队列，例如有三个线程分别是&lt;code&gt;thread-1&lt;/code&gt;、&lt;code&gt;thread-2&lt;/code&gt;和&lt;code&gt;thread-3&lt;/code&gt;，线程入队的时候都处于阻塞状态，模拟一下依次调用上面的入队方法的同步队列的整个链表的状态。&lt;/p&gt;
&lt;p&gt;先是线程&lt;code&gt;thread-1&lt;/code&gt;加入等待队列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-1.png&quot; alt=&quot;j-a-q-s-ex-1&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着是线程&lt;code&gt;thread-2&lt;/code&gt;加入等待队列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-2.png&quot; alt=&quot;j-a-q-s-ex-2&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后是线程&lt;code&gt;thread-3&lt;/code&gt;加入等待队列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-3.png&quot; alt=&quot;j-a-q-s-ex-3&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果仔细研究会发现，如果所有的入队线程都处于阻塞状态的话，新入队的线程总是添加到队列的&lt;code&gt;tail&lt;/code&gt;节点，&lt;strong&gt;阻塞的线程总是&quot;争抢&quot;着成为&lt;code&gt;head&lt;/code&gt;节点，这一点和&lt;code&gt;CLH&lt;/code&gt;队列锁的阻塞线程总是基于前驱节点自旋以获取锁的思路是一致的&lt;/strong&gt;。下面将会分析的&lt;strong&gt;独占模式与共享模式，线程加入等待队列都是通过&lt;code&gt;addWaiter()&lt;/code&gt;方法&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;理解条件等待队列&quot;&gt;理解条件等待队列&lt;/h3&gt;
&lt;p&gt;前面已经相对详细地介绍过同步等待队列，在&lt;code&gt;AQS&lt;/code&gt;中还存在另外一种相对特殊和复杂的等待队列-&lt;strong&gt;条件等待队列&lt;/strong&gt;。介绍条件等待队列之前，要先介绍&lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt;接口。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public interface Condition {
    
    // 当前线程进入等待状态直到被唤醒或者中断
    void await() throws InterruptedException;

    // 当前线程进入等待状态，不响应中断，阻塞直到被唤醒
    void awaitUninterruptibly();

    // 当前线程进入等待状态直到被唤醒或者中断，阻塞带时间限制
    long awaitNanos(long nanosTimeout) throws InterruptedException;

    // 当前线程进入等待状态直到被唤醒或者中断，阻塞带时间限制
    boolean await(long time, TimeUnit unit) throws InterruptedException;

    // 当前线程进入等待状态直到被唤醒或者中断，阻塞带时间限制
    boolean awaitUntil(Date deadline) throws InterruptedException;

    // 唤醒单个阻塞线程
    void signal();

    // 唤醒所有阻塞线程
    void signalAll();
}    
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Condition&lt;/code&gt;可以理解为&lt;code&gt;Object&lt;/code&gt;中的&lt;code&gt;wait()&lt;/code&gt;、&lt;code&gt;notify()&lt;/code&gt;和&lt;code&gt;notifyAll()&lt;/code&gt;的替代品，因为&lt;code&gt;Object&lt;/code&gt;中的相应方法是&lt;code&gt;JNI&lt;/code&gt;（&lt;code&gt;Native&lt;/code&gt;）方法，由&lt;code&gt;JVM&lt;/code&gt;实现，对使用者而言并不是十分友好（有可能伴随&lt;code&gt;JVM&lt;/code&gt;版本变更而受到影响），而&lt;code&gt;Condition&lt;/code&gt;是基于数据结构和相应算法实现对应的功能，我们可以从源码上分析其实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Condition&lt;/code&gt;的实现类是&lt;code&gt;AQS&lt;/code&gt;的公有内部类&lt;code&gt;ConditionObject&lt;/code&gt;。&lt;code&gt;ConditionObject&lt;/code&gt;提供的入队列方法如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class ConditionObject implements Condition, java.io.Serializable {
    private static final long serialVersionUID = 1173984872572414699L;
    /** First node of condition queue. */ - 条件队列的第一个节点
    private transient Node firstWaiter;
    /** Last node of condition queue. */ - 条件队列的最后一个节点
    private transient Node lastWaiter;
    // 公有构造函数
    public ConditionObject() { }
    // 添加条件等待节点
    private Node addConditionWaiter() {
        // 这里做一次判断，当前线程必须步入此同步器实例
        if (!isHeldExclusively())
            throw new IllegalMonitorStateException();
        // 临时节点t赋值为lastWaiter引用
        Node t = lastWaiter;
        // If lastWaiter is cancelled, clean out.
        // 最后一个节点不为条件等待状态，则是取消状态
        if (t != null &amp;amp;&amp;amp; t.waitStatus != Node.CONDITION) {
            // 解除所有取消等待的节点的连接
            unlinkCancelledWaiters();
            t = lastWaiter;
        }
        // 基于当前线程新建立一个条件等待类型的节点
        Node node = new Node(Node.CONDITION);
        // 首次创建Condition的时候，最后一个节点临时引用t为null，则把第一个节点置为新建的节点
        if (t == null)
            firstWaiter = node;
        else
            // 已经存在第一个节点，则通过nextWaiter连接新的节点
            t.nextWaiter = node;
        // 最后一个节点的引用更新为新节点的引用    
        lastWaiter = node;
        return node;
    } 
    // 从条件等待队列解除所有取消等待的节点的连接，其实就是所有取消节点移除的操作，涉及到双向链表的断链操作、第一个和最后一个节点的引用更新
    private void unlinkCancelledWaiters() {
        Node t = firstWaiter;
        Node trail = null;
        while (t != null) {
            Node next = t.nextWaiter;
            // 注意这里等待状态的判断
            if (t.waitStatus != Node.CONDITION) {
                t.nextWaiter = null;
                if (trail == null)
                    firstWaiter = next;
                else
                    trail.nextWaiter = next;
                if (next == null)
                    lastWaiter = trail;
            }
            else
                trail = t;
            t = next;
        }
    } 
    // 当前同步器实例持有的线程是否当前线程(currentThread())
    protected boolean isHeldExclusively() {
        throw new UnsupportedOperationException();
    } 

// 暂时不分析其他方法             
}        
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上，&lt;code&gt;Condition&lt;/code&gt;的所有&lt;code&gt;await()&lt;/code&gt;方法变体都调用&lt;code&gt;addConditionWaiter()&lt;/code&gt;添加阻塞线程到条件队列中。我们按照分析同步等待队列的情况，分析一下条件等待队列。正常情况下，假设有2个线程&lt;code&gt;thread-1&lt;/code&gt;和&lt;code&gt;thread-2&lt;/code&gt;进入条件等待队列，都处于阻塞状态。&lt;/p&gt;
&lt;p&gt;先是&lt;code&gt;thread-1&lt;/code&gt;进入条件队列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-4.png&quot; alt=&quot;j-a-q-s-ex-4&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后是&lt;code&gt;thread-2&lt;/code&gt;进入条件队列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-5.png&quot; alt=&quot;j-a-q-s-ex-5&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;条件等待队列看起来也并不复杂，但是它并不是单独存在和使用的，一般依赖于同步等待队列，下面的一节分析&lt;code&gt;Condition&lt;/code&gt;的实现的时候再详细分析。&lt;/p&gt;
&lt;h2 id=&quot;独占模式与共享模式&quot;&gt;独占模式与共享模式&lt;/h2&gt;
&lt;p&gt;前文提及到，同步器涉及到独占模型和共享模式。下面就针对这两种模式详细分析一下&lt;code&gt;AQS&lt;/code&gt;的具体实现源码。&lt;/p&gt;
&lt;h3 id=&quot;独占模式&quot;&gt;独占模式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt;同步器如果使用独占（&lt;code&gt;EXCLUSIVE&lt;/code&gt;）模式，那么意味着同一个时刻，只有唯一的一个节点所在线程获取（&lt;code&gt;acuqire&lt;/code&gt;）原子状态&lt;code&gt;status&lt;/code&gt;成功，此时该线程可以从阻塞状态解除继续运行，而同步等待队列中的其他节点持有的线程依然处于阻塞状态。独占模式同步器的功能主要由下面的四个方法提供：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;acquire(int arg)&lt;/code&gt;：申请获取&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;（申请成功可以简单理解为&lt;code&gt;status = status - arg&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acquireInterruptibly(int arg)&lt;/code&gt;：申请获取&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;，响应线程中断。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tryAcquireNanos(int arg, long nanosTimeout)&lt;/code&gt;：申请获取&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;，带超时的版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release(int arg)&lt;/code&gt;：释放&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;（释放成功可以简单理解为&lt;code&gt;status = status + arg&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;独占模式下，&lt;code&gt;AQS&lt;/code&gt;同步器实例初始化时候传入的&lt;code&gt;status&lt;/code&gt;值，可以简单理解为&quot;允许申请的资源数量的上限值&quot;，下面的&lt;code&gt;acquire&lt;/code&gt;类型的方法暂时称为&quot;获取资源&quot;，而&lt;code&gt;release&lt;/code&gt;方法暂时称为&quot;释放资源&quot;。接着我们分析前面提到的四个方法的源码，先看&lt;code&gt;acquire(int arg)&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public final void acquire(int arg) {
    // 获取资源成功或者新增一个独占类型节点到同步等待队列成功则直接返回，否则中断当前线程
    if (!tryAcquire(arg) &amp;amp;&amp;amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}

// 此方法必须又子类覆盖，用于决定是否获取资源成功
protected boolean tryAcquire(int arg) {
    throw new UnsupportedOperationException();
}

// 中断当前线程
static void selfInterrupt() {
    Thread.currentThread().interrupt();
}

// 不可中断的独占模式下，同步等待队列中的线程获取资源的方法
final boolean acquireQueued(final Node node, int arg) {
    boolean interrupted = false;
    try {
        for (;;) {
            // 获取新入队节点的前驱节点
            final Node p = node.predecessor();
            // 前驱节点为头节点并且尝试获取资源成功，也就是每一轮循环都会调用tryAcquire尝试获取资源，除非阻塞或者跳出循环
            if (p == head &amp;amp;&amp;amp; tryAcquire(arg)) {
                // 设置新入队节点为头节点，原来的节点会从队列中断开
                setHead(node);
                p.next = null; // help GC
                return interrupted;   // &amp;lt;== 注意，这个位置是跳出死循环的唯一位置
            }
            // 判断是否需要阻塞当前获取资源失败的节点中持有的线程
            if (shouldParkAfterFailedAcquire(p, node))
                // 阻塞当前线程，如果被唤醒则返回并清空线程的中断标记
                interrupted |= parkAndCheckInterrupt();
        }
    } catch (Throwable t) {
        cancelAcquire(node);
        if (interrupted)
            selfInterrupt();
        throw t;
    }
}

/**
 * 检查并且更新获取资源失败的节点的状态，返回值决定线程是否需要被阻塞。
 * 这个方法是所有循环获取资源方法中信号控制的主要方法
 */
private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
    // 这里记住ws是当前处理节点的前驱节点的等待状态
    int ws = pred.waitStatus;
    if (ws == Node.SIGNAL)
        // 前驱节点状态设置成Node.SIGNAL成功，等待被release调用释放，后继节点可以安全地进入阻塞状态
        return true;
    if (ws &amp;gt; 0) {
        // ws大于0只有一种情况Node.CANCELLED，说明前驱节点已经取消获取资源，
        // 这个时候会把所有这类型取消的前驱节点移除，找到一个非取消的节点重新通过next引用连接当前节点
        do {
           node.prev = pred = pred.prev;
        } while (pred.waitStatus &amp;gt; 0);
        pred.next = node;
    } else {
        // 其他等待状态直接修改前驱节点等待状态为Node.SIGNAL
        pred.compareAndSetWaitStatus(ws, Node.SIGNAL);
    }
    return false;
}

// 阻塞当前线程，获取并且重置线程的中断标记位
private final boolean parkAndCheckInterrupt() {
    // 这个就是阻塞线程的实现，依赖Unsafe的API
    LockSupport.park(this);
    return Thread.interrupted();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码虽然看起来能基本理解，但是最好用图推敲一下&quot;空间上的变化&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-6.png&quot; alt=&quot;j-a-q-s-ex-6&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-7.png&quot; alt=&quot;j-a-q-s-ex-7&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着分析一下&lt;code&gt;release(int arg)&lt;/code&gt;的实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 释放资源
public final boolean release(int arg) {
    // 尝试释放资源
    if (tryRelease(arg)) {
        Node h = head;
        if (h != null &amp;amp;&amp;amp; h.waitStatus != 0)
            unparkSuccessor(h);
        return true;
    }
    return false;
}

// 尝试释放资源，独占模式下，尝试通过重新设置status的值从而实现释放资源的功能
// 这个方法必须由子类实现
protected boolean tryRelease(int arg) {
    throw new UnsupportedOperationException();
}

// 解除传入节点(一般是头节点)的第一个后继节点的阻塞状态，当前处理节点的等待状态会被CAS更新为0
private void unparkSuccessor(Node node) {
    int ws = node.waitStatus;
    // 当前处理的节点(一般是头节点)状态小于0则直接CAS更新为0
    if (ws &amp;lt; 0)
        node.compareAndSetWaitStatus(ws, 0);
    Node s = node.next;
    if (s == null || s.waitStatus &amp;gt; 0) {
        s = null;
        // 如果节点的第一个后继节点为null或者等待状态大于0(取消)，则从等待队列的尾节点向前遍历，
        // 找到最后一个不为null，并且等待状态小于等于0的节点
        for (Node p = tail; p != node &amp;amp;&amp;amp; p != null; p = p.prev)
            if (p.waitStatus &amp;lt;= 0)
                s = p;
    }
    // 解除上面的搜索到的节点的阻塞状态
    if (s != null)
        LockSupport.unpark(s.thread);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着用上面的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-8.png&quot; alt=&quot;j-a-q-s-8&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面图中&lt;code&gt;thread-2&lt;/code&gt;晋升为头节点的第一个后继节点，等待下一个&lt;code&gt;release()&lt;/code&gt;释放资源唤醒之就能晋升为头节点，一旦晋升为头节点也就是意味着可以解除阻塞继续运行。接着我们可以看&lt;code&gt;acquire()&lt;/code&gt;的响应中断版本和带超时的版本。先看&lt;code&gt;acquireInterruptibly(int arg)&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public final void acquireInterruptibly(int arg)
            throws InterruptedException {
    // 获取并且清空线程中断标记位，如果是中断状态则直接抛InterruptedException异常
    if (Thread.interrupted())
        throw new InterruptedException();
    // 如果获取资源失败
    if (!tryAcquire(arg))
        doAcquireInterruptibly(arg);
}

// 独占模式下响应中断的获取资源方法
private void doAcquireInterruptibly(int arg) throws InterruptedException {
    // 基于当前线程新增一个独占的Node节点进入同步等待队列中
    final Node node = addWaiter(Node.EXCLUSIVE);
    try {
        for (;;) {
            final Node p = node.predecessor();
            if (p == head &amp;amp;&amp;amp; tryAcquire(arg)) {
                setHead(node);
                p.next = null; // help GC
                return;
            }
            // 获取资源失败进入阻塞状态
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp; parkAndCheckInterrupt())
                    // 解除阻塞后直接抛出InterruptedException异常
                    throw new InterruptedException();
            }
         } catch (Throwable t) {
            cancelAcquire(node);
            throw t;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;doAcquireInterruptibly(int arg)&lt;/code&gt;方法和&lt;code&gt;acquire(int arg)&lt;/code&gt;类似，最大的不同点在于阻塞线程解除阻塞后并不是正常继续运行，而是直接抛出&lt;code&gt;InterruptedException&lt;/code&gt;异常。最后看&lt;code&gt;tryAcquireNanos(int arg, long nanosTimeout)&lt;/code&gt;的实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 独占模式下尝试在指定超时时间内获取资源，响应线程中断
public final boolean tryAcquireNanos(int arg, long nanosTimeout) throws InterruptedException {
    if (Thread.interrupted())
        throw new InterruptedException();
    return tryAcquire(arg) || doAcquireNanos(arg, nanosTimeout);
}

// 独占模式下带超时时间限制的获取资源方法
private boolean doAcquireNanos(int arg, long nanosTimeout) throws InterruptedException {
    // 超时期限小于0纳秒，快速失败
    if (nanosTimeout &amp;lt;= 0L)
        return false;
    // 超时的最终期限是当前系统时钟纳秒+外部指定的nanosTimeout增量
    final long deadline = System.nanoTime() + nanosTimeout;
    final Node node = addWaiter(Node.EXCLUSIVE);
    try {
        for (;;) {
            final Node p = node.predecessor();
            if (p == head &amp;amp;&amp;amp; tryAcquire(arg)) {
                setHead(node);
                p.next = null; // help GC
                return true;
            }
            // 计算出剩余的超时时间
            nanosTimeout = deadline - System.nanoTime();
            // 剩余超时时间小于0说明已经超时则取消获取
            if (nanosTimeout &amp;lt;= 0L) {
                cancelAcquire(node);
                return false;
            }
            // 这里会判断剩余超时时间大于1000纳秒的时候才会进行带超时期限的线程阻塞，否则会进入下一轮获取尝试
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp; nanosTimeout &amp;gt; SPIN_FOR_TIMEOUT_THRESHOLD)
                    LockSupport.parkNanos(this, nanosTimeout);
            if (Thread.interrupted())
                throw new InterruptedException();
            }
    } catch (Throwable t) {
        cancelAcquire(node);
        throw t;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;tryAcquireNanos(int arg, long nanosTimeout)&lt;/code&gt;其实和&lt;code&gt;doAcquireInterruptibly(int arg)&lt;/code&gt;类似，它们都响应线程中断，不过&lt;code&gt;tryAcquireNanos()&lt;/code&gt;在获取资源的每一轮循环尝试都会计算剩余可用的超时时间，只有同时满足获取失败需要阻塞并且剩余超时时间大于&lt;code&gt;SPIN_FOR_TIMEOUT_THRESHOLD(1000纳秒)&lt;/code&gt;的情况下才会进行阻塞。&lt;/p&gt;
&lt;p&gt;独占模式的同步器的一个显著特点就是：头节点的第一个有效（非取消）的后继节点，总是尝试获取资源，一旦获取资源成功就会解除阻塞并且晋升为头节点，原来所在节点会移除出同步等待队列，原来的队列长度就会减少1，然后头结点的第一个有效的后继节点继续开始竞争资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-9.png&quot; alt=&quot;j-a-q-s-ex-9&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用独占模式同步器的主要类库有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可重入锁&lt;code&gt;ReentrantLock&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;读写锁&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;中的写锁&lt;code&gt;WriteLock&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;共享模式&quot;&gt;共享模式&lt;/h3&gt;
&lt;p&gt;共享（&lt;code&gt;SHARED&lt;/code&gt;）模式中的&quot;共享&quot;的含义是：同一个时刻，如果有一个节点所在线程获取（&lt;code&gt;acuqire&lt;/code&gt;）原子状态&lt;code&gt;status&lt;/code&gt;成功，那么它会解除阻塞被唤醒，并且会把&lt;strong&gt;唤醒状态传播&lt;/strong&gt;到所有有效的后继节点（换言之就是唤醒整个同步等待队列中的所有有效的节点）。共享模式同步器的功能主要由下面的四个方法提供：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;acquireShared(int arg)&lt;/code&gt;：申请获取&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;（申请成功可以简单理解为&lt;code&gt;status = status - arg&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acquireSharedInterruptibly(int arg)&lt;/code&gt;：申请获取&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;，响应线程中断。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tryAcquireSharedNanos(int arg, long nanosTimeout)&lt;/code&gt;：申请获取&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;，带超时的版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;releaseShared(int arg)&lt;/code&gt;：释放&lt;code&gt;arg&lt;/code&gt;个原子状态&lt;code&gt;status&lt;/code&gt;（释放成功可以简单理解为&lt;code&gt;status = status + arg&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;先看&lt;code&gt;acquireShared(int arg)&lt;/code&gt;的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 共享模式下获取资源
public final void acquireShared(int arg) {
    // 注意tryAcquireShared方法值为整型，只有小于0的时候才会加入同步等待队列
    if (tryAcquireShared(arg) &amp;lt; 0)
        doAcquireShared(arg);
}

// 共享模式下尝试获取资源，此方法需要由子类覆盖
protected int tryAcquireShared(int arg) {
    throw new UnsupportedOperationException();
}

// 共享模式下获取资源和处理同步等待队列的方法
private void doAcquireShared(int arg) {
    // 基于当前线程新建一个标记为共享的新节点
    final Node node = addWaiter(Node.SHARED);
    boolean interrupted = false;
    try {
        for (;;) {
            final Node p = node.predecessor();
            // 如果当前节点的前驱节点是头节点
            if (p == head) {
                // 每一轮循环都会调用tryAcquireShared尝试获取资源，除非阻塞或者跳出循环
                int r = tryAcquireShared(arg);
                if (r &amp;gt;= 0) {  // &amp;lt;= tryAcquireShared方法&amp;gt;=0说明直资源获取成功
                    // 设置头结点，并且传播获取资源成功的状态，这个方法的作用是确保唤醒状态传播到所有的后继节点
                    // 然后任意一个节点晋升为头节点都会唤醒其第一个有效的后继节点，起到一个链式释放和解除阻塞的动作
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    return;
                }
            }
            // 判断获取资源失败是否需要阻塞，这里会把前驱节点的等待状态CAS更新为Node.SIGNAL
            if (shouldParkAfterFailedAcquire(p, node))
                interrupted |= parkAndCheckInterrupt();
        }
    } catch (Throwable t) {
        cancelAcquire(node);
        throw t;
    } finally {
        if (interrupted)
            selfInterrupt();
    }
}

// 设置同步等待队列的头节点，判断当前处理的节点的后继节点是否共享模式的节点，如果共享模式的节点，
// propagate大于0或者节点的waitStatus为PROPAGATE则进行共享模式下的释放资源
private void setHeadAndPropagate(Node node, int propagate) {
    // h为头节点的中间变量
    Node h = head;
    // 设置当前处理节点为头节点
    setHead(node);
    // 这个判断条件比较复杂：入参propagate大于0 || 头节点为null || 头节点的状态为非取消 || 再次获取头节点为null || 再次获取头节点不为取消
    if (propagate &amp;gt; 0 || h == null || h.waitStatus &amp;lt; 0 || (h = head) == null || h.waitStatus &amp;lt; 0) {
        Node s = node.next;
        // 当前节点(其实已经成为头节点)的第一个后继节点为null或者是共享模式的节点
        if (s == null || s.isShared())
            doReleaseShared();
    }
}

// Release action for shared mode：共享模式下的释放资源动作
private void doReleaseShared() {
    for (;;) {
        Node h = head;
        // 头节点不为null并且不为尾节点
        if (h != null &amp;amp;&amp;amp; h != tail) {
            int ws = h.waitStatus;
            // 如果头节点等待状态为SIGNAL(-1)则CAS更新它为0，更新成功后唤醒和解除其后继节点的阻塞
            if (ws == Node.SIGNAL) {
                if (!h.compareAndSetWaitStatus(Node.SIGNAL, 0))
                    continue;
                // 唤醒头节点的后继节点
                unparkSuccessor(h);
            }
            // 如果头节点的等待状态为0，则CAS更新它为PROPAGATE(-3)
            else if (ws == 0 &amp;amp;&amp;amp; !h.compareAndSetWaitStatus(0, Node.PROPAGATE))
                continue;
            }
        // 头节点没有变更，则跳出循环
        if (h == head)
            break;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实代码的实现和独占模式有很多类似的地方，一个很大的不同点是：共享模式同步器当节点获取资源成功晋升为头节点之后，它会把自身的等待状态通过&lt;code&gt;CAS&lt;/code&gt;更新为&lt;code&gt;Node.PROPAGATE&lt;/code&gt;，下一个加入等待队列的新节点会把头节点的等待状态值更新回&lt;code&gt;Node.SIGNAL&lt;/code&gt;，标记后继节点处于可以被唤醒的状态，如果遇上资源释放，那么这个阻塞的节点就能被唤醒从而解除阻塞。我们还是画图理解一下，先假设&lt;code&gt;tryAcquireShared(int arg)&lt;/code&gt;总是返回小于0的值，入队两个阻塞的线程&lt;code&gt;thread-1&lt;/code&gt;和&lt;code&gt;thread-2&lt;/code&gt;，然后进行资源释放确保&lt;code&gt;tryAcquireShared(int arg)&lt;/code&gt;总是返回大于0的值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-10.png&quot; alt=&quot;j-a-q-s-ex-10&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看起来和独占模式下的同步等待队列差不多，实际上真正不同的地方在于有节点解除阻塞和晋升为头节点的过程。因此我们可以先看&lt;code&gt;releaseShared(int arg)&lt;/code&gt;的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 共享模式下释放资源
public final boolean releaseShared(int arg) {
    // 尝试释放资源成功则调用前面分析过的doReleaseShared以传播唤醒状态和unpark头节点的后继节点
    if (tryReleaseShared(arg)) {
        doReleaseShared();
        return true;
    }
    return false;
}

// 共享模式下尝试释放资源，必须由子类覆盖
protected boolean tryReleaseShared(int arg) {
    throw new UnsupportedOperationException();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;releaseShared(int arg)&lt;/code&gt;就是在&lt;code&gt;tryReleaseShared(int arg)&lt;/code&gt;调用返回&lt;code&gt;true&lt;/code&gt;的情况下主动调用一次&lt;code&gt;doReleaseShared()&lt;/code&gt;从而基于头节点传播唤醒状态和&lt;code&gt;unpark&lt;/code&gt;头节点的后继节点。接着之前的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-11.png&quot; alt=&quot;j-a-q-s-ex-11&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-12.png&quot; alt=&quot;j-a-q-s-ex-12&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着看&lt;code&gt;acquireSharedInterruptibly(int arg)&lt;/code&gt;的源码实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 共享模式下获取资源的方法，响应线程中断
public final void acquireSharedInterruptibly(int arg) throws InterruptedException {
    if (Thread.interrupted())
        throw new InterruptedException();
    if (tryAcquireShared(arg) &amp;lt; 0)
        doAcquireSharedInterruptibly(arg);
}

private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {
    final Node node = addWaiter(Node.SHARED);
    try {
        for (;;) {
            final Node p = node.predecessor();
            if (p == head) {
                int r = tryAcquireShared(arg);
                if (r &amp;gt;= 0) {
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    return;
                }
            }
            // 和非响应线程中断的acquireShared方法类似，不过这里解除阻塞之后直接抛出异常InterruptedException
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp; parkAndCheckInterrupt())
                throw new InterruptedException();
        }
    } catch (Throwable t) {
        cancelAcquire(node);
        throw t;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后看&lt;code&gt;tryAcquireSharedNanos(int arg, long nanosTimeout)&lt;/code&gt;的源码实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 共享模式下获取资源的方法，带超时时间版本
public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout) throws InterruptedException {
        if (Thread.interrupted())
            throw new InterruptedException();
        // 注意这里只要tryAcquireShared &amp;gt;= 0或者doAcquireSharedNanos返回true都认为获取资源成功
        return tryAcquireShared(arg) &amp;gt;= 0 || doAcquireSharedNanos(arg, nanosTimeout);
}

private boolean doAcquireSharedNanos(int arg, long nanosTimeout) throws InterruptedException {
    if (nanosTimeout &amp;lt;= 0L)
        return false;
    // 计算超时的最终期限    
    final long deadline = System.nanoTime() + nanosTimeout;
    final Node node = addWaiter(Node.SHARED);
    try {
        for (;;) {
            final Node p = node.predecessor();
            if (p == head) {
                int r = tryAcquireShared(arg);
                if (r &amp;gt;= 0) {
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    return true;
                }
            }
            //重新计算剩余的超时时间 
            nanosTimeout = deadline - System.nanoTime();
            // 超时的情况下直接取消获取
            if (nanosTimeout &amp;lt;= 0L) {
                cancelAcquire(node);
                return false;
            }
            // 满足阻塞状态并且剩余的超时时间大于阀值1000纳秒则通过LockSupport.parkNanos()阻塞线程
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp; nanosTimeout &amp;gt; SPIN_FOR_TIMEOUT_THRESHOLD)
                LockSupport.parkNanos(this, nanosTimeout);
            // 解除阻塞后判断线程的中断标记并且清空标记位，如果是处于中断状态则抛出InterruptedException 
            if (Thread.interrupted())
                throw new InterruptedException();
        }
    } catch (Throwable t) {
        cancelAcquire(node);
        throw t;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;共享模式的同步器的一个显著特点就是：头节点的第一个有效（非取消）的后继节点，总是尝试获取资源，一旦获取资源成功就会解除阻塞并且晋升为头节点，原来所在节点会移除出同步等待队列，原来的队列长度就会减少1，重新设置头节点的过程会传播唤醒的状态，简单来说就是唤醒一个有效的后继节点，只要一个节点可以晋升为头节点，它的后继节点就能被唤醒，以此类推。&lt;strong&gt;节点的唤醒顺序遵循类似于FIFO的原则，通俗说就是先阻塞或者阻塞时间最长则先被唤醒&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-13.png&quot; alt=&quot;j-a-q-s-ex-13&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用共享模式同步器的主要类库有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;信号量&lt;code&gt;Semaphore&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;倒数栅栏&lt;code&gt;CountDownLatch&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;condition的实现&quot;&gt;Condition的实现&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Condition&lt;/code&gt;实例的建立是在&lt;code&gt;Lock&lt;/code&gt;接口的&lt;code&gt;newCondition()&lt;/code&gt;方法，它是锁条件等待的实现，基于作用或者语义可以见&lt;code&gt;Condition&lt;/code&gt;接口的相关API注释：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Condition是对象监视器锁方法Object#wait()、Object#notify()和Object#notifyAll()的替代实现，对象监视器锁实现锁的时候作用的效果是每个锁对象必须使用多个wait-set(JVM内置的等待队列)，通过Object提供的方法和监视器锁结合使用就能达到Lock的实现效果。如果替换synchronized方法和语句并且结合使用Lock和Condition，就能替换并且达到对象监视器锁的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Condition&lt;/code&gt;必须固有地绑定在一个&lt;code&gt;Lock&lt;/code&gt;的实现类上，也就是要通过&lt;code&gt;Lock&lt;/code&gt;的实例建立&lt;code&gt;Condition&lt;/code&gt;实例，而且&lt;code&gt;Condition&lt;/code&gt;的方法调用使用必须在&lt;code&gt;Lock&lt;/code&gt;的&quot;锁定代码块&quot;中，这一点和&lt;code&gt;synchronized&lt;/code&gt;关键字以及&lt;code&gt;Object&lt;/code&gt;的相关JNI方法使用的情况十分相似。&lt;/p&gt;
&lt;p&gt;前文介绍过&lt;code&gt;Condition&lt;/code&gt;接口提供的方法以及&lt;code&gt;Condition&lt;/code&gt;队列，也就是条件等待队列，通过画图简单介绍了它的队列节点组成。实际上，条件等待队列需要结合同步等待队列使用，这也刚好对应于&lt;strong&gt;前面提到的&lt;code&gt;Condition&lt;/code&gt;的方法调用使用必须在&lt;code&gt;Lock&lt;/code&gt;的锁定代码块中&lt;/strong&gt;。听起来很懵逼，我们慢慢分析一下&lt;code&gt;ConditionObject&lt;/code&gt;的方法源码就能知道具体的原因。&lt;/p&gt;
&lt;p&gt;先看&lt;code&gt;ConditionObject#await()&lt;/code&gt;方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 退出等待后主动进行中断当前线程
private static final int REINTERRUPT = 1;
// 退出等待后抛出InterruptedException异常
private static final int THROW_IE   = -1;
/** 
 * 可中断的条件等待实现
 * 1、当前线程处于中断状态则抛出InterruptedException
 * 2、保存getState返回的锁状态，并且使用此锁状态调用release释放所有的阻塞线程
 * 3、线程加入等待队列进行阻塞，直到signall或者中断
 * 4、通过保存getState返回的锁状态调用acquire方法
 * 5、第4步中阻塞过程中中断则抛出InterruptedException
 */
public final void await() throws InterruptedException {
    // 如果线程是中断状态则清空中断标记位并且抛出InterruptedException
    if (Thread.interrupted())
        throw new InterruptedException();
    // 当前线程所在的新节点加入条件等待队列
    Node node = addConditionWaiter();
    // 释放当前AQS中的所有资源返回资源的status保存值，也就是基于status的值调用release(status) - 其实这一步是解锁操作
    int savedState = fullyRelease(node);
    // 初始化中断模式
    int interruptMode = 0;
    // 如果节点新建的节点不位于同步队列中(理论上应该是一定不存在)，则对节点所在线程进行阻塞，第二轮循环理论上节点一定在同步等待队列中
    while (!isOnSyncQueue(node)) {
        LockSupport.park(this);
        // 处理节点所在线程中断的转换操作
        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)
            break;
    }
    // 节点所在线程被唤醒后，如果节点所在线程没有处于中断状态，则以独占模式进行头节点竞争
    // 注意这里使用的status是前面释放资源时候返回的保存下来的status
    if (acquireQueued(node, savedState) &amp;amp;&amp;amp; interruptMode != THROW_IE)
        interruptMode = REINTERRUPT;
    // 下一个等待节点不空，则从等待队列中移除所有取消的等待节点
    if (node.nextWaiter != null) // clean up if cancelled
        unlinkCancelledWaiters();
    // interruptMode不为0则按照中断模式进行不同的处理
    if (interruptMode != 0)
        reportInterruptAfterWait(interruptMode);
}

// 释放当前AQS中的所有资源，其实也就是基于status的值调用release(status)
// 这一步对于锁实现来说，就是一个解锁操作
final int fullyRelease(Node node) {
    try {
        int savedState = getState();
        if (release(savedState))
            return savedState;
        throw new IllegalMonitorStateException();
    } catch (Throwable t) {
        // 释放失败则标记等待状态为取消
        node.waitStatus = Node.CANCELLED;
        throw t;
    }
}

// 传入的节点是否在同步队列中
final boolean isOnSyncQueue(Node node) {
    // 节点等待您状态为CONDITION或者前驱节点为null则返回false
    if (node.waitStatus == Node.CONDITION || node.prev == null)
        return false;
    // 因为等待队列是通过nextWaiter连接，next引用存在说明节点位于同步队列
    if (node.next != null)
        return true;
    // 从同步队列的尾部向前遍历是否存在传入的节点实例
    return findNodeFromTail(node);
}

// 从同步队列的尾部向前遍历是否存在传入的节点实例
private boolean findNodeFromTail(Node node) {
    for (Node p = tail;;) {
        if (p == node)
            return true;
        if (p == null)
            return false;
        p = p.prev;
    }
}

// 这是一个很复杂的判断，用了两个三目表达式，作用是如果新建的等待节点所在线程中断，
// 则把节点的状态由CONDITION更新为0，并且加入到同步等待队列中，返回THROW_IE中断状态，如果加入同步队列失败，返回REINTERRUPT
// 如果新建的等待节点所在线程没有中断，返回0，也就是初始状态的interruptMode
private int checkInterruptWhileWaiting(Node node) {
    return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;
}

// 节点线程中断取消等待后的转换操作
final boolean transferAfterCancelledWait(Node node) {
    // CAS更新节点的状态由CONDITION更改为0
    if (node.compareAndSetWaitStatus(Node.CONDITION, 0)) {
        // 节点加入同步等待队列
        enq(node);
        return true;
    }
    // 这里尝试自旋，直到节点加入同步等待队列成功
    while (!isOnSyncQueue(node))
        Thread.yield();
    return false;
}

// 等待完毕后报告中断处理，前边的逻辑得到的interruptMode如果为THROW_IE则抛出InterruptedException，如果为REINTERRUPT则中断当前线程
private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {
    if (interruptMode == THROW_IE)
        throw new InterruptedException();
    else if (interruptMode == REINTERRUPT)
        selfInterrupt();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实上面的&lt;code&gt;await()&lt;/code&gt;逻辑并不复杂，前提是理解了对象监视器锁那套等待和唤醒的机制（由&lt;code&gt;JVM&lt;/code&gt;实现，&lt;code&gt;C&lt;/code&gt;语言学得好的可以去看下源码），这里只是通过算法和数据结构重新进行了一次实现。&lt;code&gt;await()&lt;/code&gt;主要使用了两个队列：同步等待队列和条件等待队列。我们先假设有两个线程&lt;code&gt;thread-1&lt;/code&gt;和&lt;code&gt;thread-2&lt;/code&gt;调用了下面的代码中的&lt;code&gt;process()&lt;/code&gt;方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;ReentrantLock lock = new ReentrantLock();
Condition condition = lock.newCondition();

public void process(){
    try{
        lock.lock();
        condition.await();
        // 省略其他逻辑...
    }finally{
        lock.unlock();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;使用的是&lt;code&gt;AQS&lt;/code&gt;独占模式的实现，因此在调用&lt;code&gt;lock()&lt;/code&gt;方法的时候，同步等待队列的一个瞬时快照（假设线程&lt;code&gt;thread-1&lt;/code&gt;先加入同步等待队列）可能如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-14.png&quot; alt=&quot;j-a-q-s-ex-14&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着，线程&lt;code&gt;thread-1&lt;/code&gt;所在节点是头节点的后继节点，获取锁成功，它解除阻塞后可以调用&lt;code&gt;await()&lt;/code&gt;方法，这个时候会释放同步等待队列中的所有等待节点，也就是线程&lt;code&gt;thread-2&lt;/code&gt;所在的节点也被释放，因此线程&lt;code&gt;thread-2&lt;/code&gt;也会调用&lt;code&gt;await()&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-15.png&quot; alt=&quot;j-a-q-s-ex-15&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只要有线程能够到达&lt;code&gt;await()&lt;/code&gt;方法，&lt;strong&gt;那么原来的同步器中的同步等待队列就会释放所有阻塞节点，表现为释放锁，然后这些释放掉的节点会加入到条件等待队列中，条件等待队列中的节点也是阻塞的&lt;/strong&gt;，这个时候只有通过&lt;code&gt;signal()&lt;/code&gt;或者&lt;code&gt;signalAll()&lt;/code&gt;进行&lt;strong&gt;队列元素转移&lt;/strong&gt;才有机会唤醒阻塞的线程。因此接着看&lt;code&gt;signal()&lt;/code&gt;和&lt;code&gt;signalAll()&lt;/code&gt;的源码实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 从等待队列中移动一个等待时间最长的线程(如果过存在的话)到锁同步等待队列中
public final void signal() {
    // 判断当前线程是否和独占线程一致，其实就是此操作需要在锁代码块中执行
    if (!isHeldExclusively())
        throw new IllegalMonitorStateException();
    Node first = firstWaiter;
    if (first != null)
        doSignal(first);
}

// 基于第一个等待节点进行Signal操作
private void doSignal(Node first) {
    do {
        // 首节点的下一个等待节点为空，说明只剩下一个等待节点
        if ( (firstWaiter = first.nextWaiter) == null)
            lastWaiter = null;
        // 当前处理节点从链表从移除    
        first.nextWaiter = null;
    } while (!transferForSignal(first) &amp;amp;&amp;amp; (first = firstWaiter) != null);
}

// 唤醒的转换操作
final boolean transferForSignal(Node node) {
    // CAS更新节点状态由CONDITION到0，更新失败则返回false不唤醒
    if (!node.compareAndSetWaitStatus(Node.CONDITION, 0))
        return false;
    // 节点作为新节点重新加入到同步等待队列
    Node p = enq(node);
    int ws = p.waitStatus;
    // 取消或者更新节点等待状态为SIGNAL的节点需要解除阻塞进行重新同步，这里的操作只针对取消和状态异常的节点
    if (ws &amp;gt; 0 || !p.compareAndSetWaitStatus(ws, Node.SIGNAL))
        LockSupport.unpark(node.thread);
    return true;
}

// 从等待队列中移动所有等待时间最长的线程(如果过存在的话)到锁同步等待队列中
public final void signalAll() {
    if (!isHeldExclusively())
        throw new IllegalMonitorStateException();
    Node first = firstWaiter;
        if (first != null)
        doSignalAll(first);
}

// 基于第一个等待节点进行SignalAll操作
private void doSignalAll(Node first) {
    // 置空lastWaiter和firstWaiter
    lastWaiter = firstWaiter = null;
    do {
        // 获取下一个等待节点
        Node next = first.nextWaiter;
        // 当前处理节点从链表从移除
        first.nextWaiter = null;
        // 处理当前节点
        transferForSignal(first);
        // 更新中间引用
        first = next;
    } while (first != null);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实&lt;code&gt;signal()&lt;/code&gt;或者&lt;code&gt;signalAll()&lt;/code&gt;会对取消的节点或者短暂中间状态的节点进行解除阻塞，但是正常情况下，它们的操作结果是把阻塞等待时间最长的一个或者所有节点重新加入到&lt;code&gt;AQS&lt;/code&gt;的同步等待队列中。例如，上面的例子调用&lt;code&gt;signal()&lt;/code&gt;方法后如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-16.png&quot; alt=&quot;j-a-q-s-ex-16&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样子，相当于线程&lt;code&gt;thread-1&lt;/code&gt;重新加入到&lt;code&gt;AQS&lt;/code&gt;同步等待队列中（从条件等待队列中移动到同步等待队列中），并且开始竞争头节点，一旦竞争成功，就能够解除阻塞。这个时候从逻辑上看，&lt;code&gt;signal()&lt;/code&gt;方法最终解除了对线程&lt;code&gt;thread-1&lt;/code&gt;的阻塞。&lt;code&gt;await()&lt;/code&gt;的其他变体方法的原理是类似的，这里因为篇幅原因不再展开。这里小结一下&lt;code&gt;Condition&lt;/code&gt;的显著特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、同时依赖两个同步等待队列，一个是&lt;code&gt;AQS&lt;/code&gt;提供，另一个是&lt;code&gt;ConditionObject&lt;/code&gt;提供的。&lt;/li&gt;
&lt;li&gt;2、&lt;code&gt;await()&lt;/code&gt;方法会释放&lt;code&gt;AQS&lt;/code&gt;同步等待队列中的阻塞节点，这些节点会加入到条件等待队列中进行阻塞。&lt;/li&gt;
&lt;li&gt;3、&lt;code&gt;signal()&lt;/code&gt;或者&lt;code&gt;signalAll()&lt;/code&gt;会把条件等待队列中的节点重新加入&lt;code&gt;AQS&lt;/code&gt;同步等待队列中，并不解除正常节点的阻塞状态。&lt;/li&gt;
&lt;li&gt;4、接第3步，这些进入到&lt;code&gt;AQS&lt;/code&gt;同步等待队列的节点会重新竞争成为头节点，接下来的步骤其实也就是前面分析过的独占模式下的&lt;code&gt;AQS&lt;/code&gt;的运作原理。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;取消获取资源cancelacquire&quot;&gt;取消获取资源(cancelAcquire)&lt;/h2&gt;
&lt;p&gt;新节点加入等待队列失败导致任何类型的异常或者带超时版本的API调用的时候剩余超时时间小于等于零的时候，就会调用&lt;code&gt;cancelAcquire()&lt;/code&gt;方法，用于取消该节点对应节点获取资源的操作。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 取消节点获取资源的操作
private void cancelAcquire(Node node) {
    // 节点为null直接返回
    if (node == null)
        return;
    // 置空节点持有的线程，因为此时节点线程已经发生中断
    node.thread = null;
    Node pred = node.prev;
    // 这个循环是为了获取当前节点的上一个不为取消状态的节点，也就是中间如果发生了取消的节点都直接断开
    while (pred.waitStatus &amp;gt; 0)
        node.prev = pred = pred.prev;
    // 保存当前节点的上一个不为取消状态的节点的后继节点    
    Node predNext = pred.next;
    // 当前节点等待状态更新为CANCELLED
    node.waitStatus = Node.CANCELLED;
    // 如果当前节点为尾节点，则直接更新尾节点为当前节点的上一个不为取消状态的节点
    if (node == tail &amp;amp;&amp;amp; compareAndSetTail(node, pred)) {
         // 然后更新该节点的后继节点为null，因为它已经成为新的尾节点
         pred.compareAndSetNext(predNext, null);
    } else {
        int ws;
        // 当前节点的上一个不为取消状态的节点已经不是头节点的情况，需要把当前取消的节点从AQS同步等待队列中断开
        if (pred != head &amp;amp;&amp;amp;
            ((ws = pred.waitStatus) == Node.SIGNAL || (ws &amp;lt;= 0 &amp;amp;&amp;amp; pred.compareAndSetWaitStatus(ws, Node.SIGNAL))) &amp;amp;&amp;amp; pred.thread != null) {
            Node next = node.next;
            if (next != null &amp;amp;&amp;amp; next.waitStatus &amp;lt;= 0)
                pred.compareAndSetNext(predNext, next);
        } else {
            // 当前节点的上一个不为取消状态的节点已经是头节点，相当于头节点之后的节点都是取消，需要唤醒当前节点的后继节点
            unparkSuccessor(node);
        }
        // 节点后继节点设置为自身，那么就不会影响后继节点
        node.next = node;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cancelAcquire()&lt;/code&gt;方法有多处调用，主要包括下面的情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、节点线程在阻塞过程中主动中断的情况下会调用。&lt;/li&gt;
&lt;li&gt;2、&lt;code&gt;acquire&lt;/code&gt;的处理过程发生任何异常的情况下都会调用，包括&lt;code&gt;tryAcquire()&lt;/code&gt;、&lt;code&gt;tryAcquireShared()&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;3、新节点加入等待队列失败导致任何类型的异常或者带超时版本的API调用的时候剩余超时时间小于等于零的时候。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;cancelAcquire()&lt;/code&gt;主要作用是把取消的节点移出同步等待队列，必须时候需要进行后继节点的唤醒。&lt;/p&gt;
&lt;h2 id=&quot;实战篇&quot;&gt;实战篇&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt;是一个抽象的同步器基础框架，其实我们也可以直接使用它实现一些高级的并发框架。下面基于&lt;code&gt;AQS&lt;/code&gt;实现一些非内建的功能，这两个例子来自于&lt;code&gt;AQS&lt;/code&gt;的注释中。&lt;/p&gt;
&lt;h3 id=&quot;metux&quot;&gt;metux&lt;/h3&gt;
&lt;p&gt;大学&lt;code&gt;C&lt;/code&gt;语言课程中经常提及到的只有一个资源的&lt;code&gt;metux&lt;/code&gt;（互斥区），也就是说，同一个时刻，只能有一个线程获取到资源，其他获取资源的线程需要阻塞等待到前一个线程释放资源。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class Metux implements Lock, Serializable {

    private static class Sync extends AbstractQueuedSynchronizer {

        @Override
        protected boolean tryAcquire(int arg) {
            assert 1 == arg;
            if (compareAndSetState(0, 1)) {
                setExclusiveOwnerThread(Thread.currentThread());
                return true;
            }
            return false;
        }

        @Override
        protected boolean tryRelease(int arg) {
            assert 1 == arg;
            if (!isHeldExclusively()) {
                throw new IllegalMonitorStateException();
            }
            setExclusiveOwnerThread(null);
            setState(0);
            return true;
        }

        public Condition newCondition() {
            return new ConditionObject();
        }

        public boolean isLocked() {
            return getState() != 0;
        }

        @Override
        public boolean isHeldExclusively() {
            return getExclusiveOwnerThread() == Thread.currentThread();
        }

        private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
            s.defaultReadObject();
            setState(0);
        }
    }

    private final Sync sync = new Sync();

    @Override
    public void lock() {
        sync.acquire(1);
    }

    @Override
    public void lockInterruptibly() throws InterruptedException {
        sync.acquireInterruptibly(1);
    }

    @Override
    public boolean tryLock() {
        return sync.tryAcquire(1);
    }

    @Override
    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
        return sync.tryAcquireNanos(1, unit.toNanos(time));
    }

    public boolean isLocked() {
        return sync.isLocked();
    }

    public boolean isHeldByCurrentThread() {
        return sync.isHeldExclusively();
    }

    @Override
    public void unlock() {
        sync.release(1);
    }

    @Override
    public Condition newCondition() {
        return sync.newCondition();
    }

    public static void main(String[] args) throws Exception {
        final Metux metux = new Metux();
        new Thread(() -&amp;gt; {
            metux.lock();
            System.out.println(String.format(&quot;%s-thread-1获取锁成功休眠3秒...&quot;, LocalDateTime.now()));
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                //ignore
            }
            metux.unlock();
            System.out.println(String.format(&quot;%s-thread-1获解锁成功...&quot;, LocalDateTime.now()));
            return;
        }, &quot;thread-1&quot;).start();
        new Thread(() -&amp;gt; {
            metux.lock();
            System.out.println(String.format(&quot;%s-thread-2获取锁成功...&quot;,LocalDateTime.now()));
            return;
        }, &quot;thread-2&quot;).start();
        Thread.sleep(Integer.MAX_VALUE);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;某个时间的某次运行结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;2019-04-07T11:49:27.858791200-thread-1获取锁成功休眠3秒...
2019-04-07T11:49:30.876567-thread-2获取锁成功...
2019-04-07T11:49:30.876567-thread-1获解锁成功...
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二元栅栏&quot;&gt;二元栅栏&lt;/h3&gt;
&lt;p&gt;二元栅栏是&lt;code&gt;CountDownLatch&lt;/code&gt;的简化版，只允许一个线程阻塞，由另一个线程负责唤醒。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class BooleanLatch {

    private static class Sync extends AbstractQueuedSynchronizer {

        boolean isSignalled() {
            return getState() != 0;
        }

        @Override
        protected int tryAcquireShared(int ignore) {
            return isSignalled() ? 1 : -1;
        }

        @Override
        protected boolean tryReleaseShared(int ignore) {
            setState(1);
            return true;
        }
    }

    private final Sync sync = new Sync();

    public boolean isSignalled() {
        return sync.isSignalled();
    }

    public void signal() {
        sync.releaseShared(1);
    }

    public void await() throws InterruptedException {
        sync.acquireSharedInterruptibly(1);
    }

    public static void main(String[] args) throws Exception {
        BooleanLatch latch = new BooleanLatch();
        new Thread(() -&amp;gt; {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                //ignore
            }
            latch.signal();
        }).start();
        System.out.println(String.format(&quot;[%s]-主线程进入阻塞...&quot;, LocalDateTime.now()));
        latch.await();
        System.out.println(String.format(&quot;[%s]-主线程进被唤醒...&quot;, LocalDateTime.now()));
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;某个时间的某次运行结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;[2019-04-07T11:55:12.647816200]-主线程进入阻塞...
[2019-04-07T11:55:15.632088]-主线程进被唤醒...
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;JUC&lt;/code&gt;的重要并发类库或者容器中，&lt;code&gt;AQS&lt;/code&gt;起到了基础框架的作用，理解同步器的实现原理，有助于理解和分析其他并发相关类库的实现。这篇文章前后耗费了接近1个月时间编写，&lt;code&gt;DEBUG&lt;/code&gt;过程最好使用多线程断点，否则很难模拟真实的情况。&lt;code&gt;AQS&lt;/code&gt;里面的逻辑是相对复杂的，很敬佩并发大师&lt;code&gt;Doug Lea&lt;/code&gt;如此精巧的类库设计，此所谓巨人的肩膀。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;（本文完 c-30-d e-a-20190407 r-a-20200723 ProcessOn重新修订所有插图，强迫症发作修正病句和错字）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202007/j-a-q-s-ex-18.png&quot; alt=&quot;j-a-q-s-ex-18&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 23 Jul 2020 16:13:00 +0000</pubDate>
<dc:creator>throwable</dc:creator>
<og:description>前提 并发编程大师Doug Lea在编写JUC（java.util.concurrent）包的时候引入了java.util.concurrent.locks.AbstractQueuedSynchro</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/throwable/p/13369717.html</dc:identifier>
</item>
<item>
<title>CSS帧动画 - 云崖先生</title>
<link>http://www.cnblogs.com/Yunya-Cnblogs/p/13369671.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Yunya-Cnblogs/p/13369671.html</guid>
<description>&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;基础知识&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;　　通过定义一段动画中的关键点、关键状态来创建动画。&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;@Keyframes&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;相比&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;transition&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;对动画过程和细节有更强的控制。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;过渡动画是两个状态间的变化，帧动画可以处理动画过程中不同时间的细节变化，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;对过渡动画理解后再学习习帧动画会非常容易，也可以把帧动画理解为多个帧之间的过渡动画。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;一句话，帧动画是CSS中的大杀器，你应该充分的了解并掌握它。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;关键帧&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;规则配置动画中的各个帧&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;from 表示起始点&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;to表示终点&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;可以使用百分数如 20% 代表动画运行到20%处&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;基本使用&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;下面使用 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;定义了动画叫 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;radius&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;并配置了两个帧动作&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;from/to&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;，然后在&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;main:hover div&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;中使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;引用了动画并使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-duration&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;声明执行三秒。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;注意：动画命名不要使用CSS关键字如 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;none&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234512948-2121846159.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234512948-2121846159.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;可以看到上面的动画是从&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;30%&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;的圆角过渡到了&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;50%&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;的圆角，但是整个动画的结束是瞬间结束，整个动画并不完美。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;不要着急，下面会介绍各种方法让你的帧动画随心所欲。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('da560f3d-b4d4-499d-94ba-5380b7f69a4e')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_da560f3d-b4d4-499d-94ba-5380b7f69a4e&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_da560f3d-b4d4-499d-94ba-5380b7f69a4e&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_da560f3d-b4d4-499d-94ba-5380b7f69a4e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; radius&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                @keyframes radius&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        from{
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        to&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;时间点&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;帧动画需要定义在不同时间执行的动作，开始与结束可以使用 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;form/to&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;或 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;0%/100%&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;声明。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;必须添加百分号，25%是正确写法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;时间点没有顺序要求，即100%写在25%前也可以&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;未设置&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;0%&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;与&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;100%&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;时将使用元素原始状态&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;你可以这么理解，目前所学的一组帧动画它的运行应该是这样的&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;初始状态 ---&amp;gt; 0% 或者 from ---&amp;gt; 100% 或者 to ---&amp;gt; 初始状态&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;所以现在看上面的动画，就知道为什么看起来比较生硬了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;物体移动&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;下面定义不同时间点来让物体元素移动一圈，下例中可以不设置&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;from/to&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;系统将定义为元素初始状态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234512348-1551548482.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234512348-1551548482.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ab7e3937-c2c2-4f31-b5c7-26035608bc5d')&quot; readability=&quot;34.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_ab7e3937-c2c2-4f31-b5c7-26035608bc5d&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_ab7e3937-c2c2-4f31-b5c7-26035608bc5d&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ab7e3937-c2c2-4f31-b5c7-26035608bc5d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; move&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始状态 ---&amp;gt; 帧  ---&amp;gt; 初始状态 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        25%{
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,0)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        50%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(0,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;同时声明&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;时间点可以动画样式一样时可以一起声明，下面将25%/75%背景一起声明。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234511759-270632780.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234511759-270632780.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('619f6704-71c8-4c38-8ff3-7f53dc7275af')&quot; readability=&quot;35.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_619f6704-71c8-4c38-8ff3-7f53dc7275af&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_619f6704-71c8-4c38-8ff3-7f53dc7275af&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_619f6704-71c8-4c38-8ff3-7f53dc7275af&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; move&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始状态 ---&amp;gt; 帧  ---&amp;gt; 初始状态 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        25%{
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,0)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        50%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(0,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        25%,75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff4757&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        50%,100%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;使用动画&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;规则可以在元素身上同时使用多个动画。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用多个动画时用逗号分隔多个&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;动画有相同属性时，后面动画的属性优先使用&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;基本使用&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234511280-805798186.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234511280-805798186.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('34800603-a503-4c89-9de6-8522d78795bf')&quot; readability=&quot;37&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_34800603-a503-4c89-9de6-8522d78795bf&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_34800603-a503-4c89-9de6-8522d78795bf&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_34800603-a503-4c89-9de6-8522d78795bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; move,radius&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始状态 ---&amp;gt; 帧  ---&amp;gt; 初始状态 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        25%{
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,0)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        50%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(0,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;
                        
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 相同设置，前者不生效 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
​
                        25%,75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff4757&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        50%,100%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                }
​
                @keyframes radius&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
​
                        25%{
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        50%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 相同设置后者覆盖前者，所以移动时的颜色会变为下面两种 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
​
                        25%,75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ffa502&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        50%,100%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2ed573&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;动画时间&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-duration&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;可以声明动画播放的时间，即把所有帧执行一遍所需要的时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;可以使用m秒，ms毫秒时间单位&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;可为不同动画单独设置执行时间&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;如果动画数量大于时间数量，将重新从时间列表中计算 。 如一个动画有Move,Radius,Background 而时间是1s,2s，那么Move的时间是1s，Radius的时间是2s，Background的时间从头开始数，又是1s.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;效果体验&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;如下图的过渡时间，圆角是六秒完成，背景色是四秒完成，移动是两秒完成，但是他们的开始时间都是一样的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234510625-1364621362.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234510625-1364621362.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b5d7a97a-b4c0-4304-b522-a152566ffcb6')&quot; readability=&quot;35.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_b5d7a97a-b4c0-4304-b522-a152566ffcb6&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_b5d7a97a-b4c0-4304-b522-a152566ffcb6&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b5d7a97a-b4c0-4304-b522-a152566ffcb6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; radius,background,move&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长 圆角是六秒完成，背景色是四秒完成，移动是两秒完成，但是他们的开始时间都是一样的 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 6s,4s,2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将动画停留在最后一帧 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; forwards&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
     
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                @keyframes radius&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
                @keyframes background&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                
                        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(0,150px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
​
  
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;动画属性&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;不是所有css属性都有过渡效果，&lt;span class=&quot;md-meta-i-c md-link&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;查看支持动画的CSS属性&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;md-plain&quot;&gt;，一般来讲有中间值的属性都可以设置动画如宽度、透明度等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;如何理解中间值？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;比如，一个元素的宽度从100px变为200px，那么它们之间就有中间值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;而一个元素的边框样式从实心线变为虚心线，他们就没有中间值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;效果体验&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;看下面这张图，从实心线变为虚心线是瞬间变化，而背景颜色的改变却是跟着动画时间来进行渐变的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234509934-385758172.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234509934-385758172.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c35091e0-70f1-40c4-8e46-8ba2c1bde002')&quot; readability=&quot;33.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_c35091e0-70f1-40c4-8e46-8ba2c1bde002&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_c35091e0-70f1-40c4-8e46-8ba2c1bde002&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c35091e0-70f1-40c4-8e46-8ba2c1bde002&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加实心线 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-style,background&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将动画停留在最后一帧 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; forwards&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
​
                &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                @keyframes border-style&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;15px dotted red &lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
                @keyframes background&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                
                        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
     
​
  
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;中间值&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;可以看下下面这个例子，左边的块&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;与&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;to&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;设置的尺寸单位没有中间值，所以是瞬间变大。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;而右边块的&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;与&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;to&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;设置的尺寸单位是具有中间值的，所以是跟随动画时间进行渐变。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234509353-1400063388.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234509353-1400063388.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('44b94dba-fc2b-4380-a2f1-2eb341eef4b5')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_44b94dba-fc2b-4380-a2f1-2eb341eef4b5&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_44b94dba-fc2b-4380-a2f1-2eb341eef4b5&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_44b94dba-fc2b-4380-a2f1-2eb341eef4b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main div:nth-child(1) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
​
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main div:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
​
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff4757&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div:nth-child(1) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; size-percentage&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将动画停留在最后一帧 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; forwards&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
​
                &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; size-px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将动画停留在最后一帧 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; forwards&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
​
                &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
​
                @keyframes size-percentage &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
​
                        from {
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; px 与 % 之间没有中间值，所以是瞬间出现 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
​
                        to &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
​
                @keyframes size-px &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
​
                        from {
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 有中间值，跟随动画时间进行渐变 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
​
                        to &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;重复动画&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-iteration-count&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;规则设置动画重复执行次数，可以给一个数字。当设置值为 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;infinite&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;表示无限循环执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;可同时设置元素的多个动画重复，使用逗号分隔&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;如果动画数量大于重复数量定义，后面的动画将重新计算重复&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;效果体验&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;如下面这个案例，移动的次数是一次，而变化圆角是无限次。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234508764-85332647.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234508764-85332647.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d1d8b7e9-4fb7-4d6c-af0f-9383ef3ebe5b')&quot; readability=&quot;37.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_d1d8b7e9-4fb7-4d6c-af0f-9383ef3ebe5b&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_d1d8b7e9-4fb7-4d6c-af0f-9383ef3ebe5b&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d1d8b7e9-4fb7-4d6c-af0f-9383ef3ebe5b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; move,radius&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 代表移动只走一遍，随后就不断的圆角变化，进入死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1,infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始状态 ---&amp;gt; 帧  ---&amp;gt; 初始状态 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        25%{
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,0)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        50%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(300px,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(0,300px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;
                        
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 相同设置，前者不生效 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
​
                        25%,75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff4757&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        50%,100%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                }
​
                @keyframes radius&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
​
                        25%{
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        50%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 相同设置后者覆盖前者，所以移动时的颜色会变为下面两种 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
​
                        25%,75%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ffa502&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                        50%,100%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2ed573&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
​
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;心动感觉&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用循环动画绘制心动效果。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234508017-174868432.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234508017-174868432.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ed914e4d-8222-4546-a294-91ac75a24634')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_ed914e4d-8222-4546-a294-91ac75a24634&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_ed914e4d-8222-4546-a294-91ac75a24634&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed914e4d-8222-4546-a294-91ac75a24634&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;//at.alicdn.com/t/font_1953712_q6h4xm8p2jc.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main i.iconfont&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover i&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; xin&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .5s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 循环次数  死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                @keyframes xin &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .5&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 120px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        20%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .6&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 130px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        40%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .7&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        
                        60%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 150px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        80%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .9&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 160px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        to&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }

        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;iconfont icon-xin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;动画方向&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-direction&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;控制动画运行的方向。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;table class=&quot;md-table&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;选项&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;说明&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;normal&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;从0%到100%运行动画&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;reverse&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;从100%到0%运行动画&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;alternate&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;先从0%到100%，然后从100%到0%&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;alternate-reverse&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;先从100%到0%，然后从0%到100%&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;效果对比&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234507183-203686445.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234507183-203686445.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('95213908-9367-4c88-9eda-24351862a4d9')&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_95213908-9367-4c88-9eda-24351862a4d9&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_95213908-9367-4c88-9eda-24351862a4d9&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_95213908-9367-4c88-9eda-24351862a4d9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;//at.alicdn.com/t/font_1953712_q6h4xm8p2jc.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 800px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main i.iconfont &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                main:hover i &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; xin&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .5s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 循环次数  死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main i:nth-child(1):after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;normal&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(-50%, -50%)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                main i:nth-child(2):after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;normal-reverse&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(-50%, -50%)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                main i:nth-child(3):after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;alternate&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(-50%, -50%)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                main i:nth-child(4):after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;alternate-reverse&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(-50%, -50%)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                main:hover i:nth-child(1) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0-100 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; normal&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover i:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 100-0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; reverse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover i:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0-100 100-0  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; alternate&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover i:nth-child(4) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 100-0 0-100 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; alternate-reverse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                @keyframes xin &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to {
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .5&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 120px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        20% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .6&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 130px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        40% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .7&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        60% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .8&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 150px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        80% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; .9&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 160px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        to &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;iconfont icon-xin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;iconfont icon-xin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;iconfont icon-xin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;iconfont icon-xin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;弹跳球&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;alternate-reverse&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;是100-0 0-100，因此非常适合用来做弹跳球。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;我们先把球和阴影都定义在下方，然后使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;alternate-reverse&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;将球转移到上方即可。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234505977-1954761275.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234505977-1954761275.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('305e2c86-892e-421c-8da3-0c319d03e35d')&quot; readability=&quot;37&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_305e2c86-892e-421c-8da3-0c319d03e35d&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_305e2c86-892e-421c-8da3-0c319d03e35d&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_305e2c86-892e-421c-8da3-0c319d03e35d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;//at.alicdn.com/t/font_1953712_q6h4xm8p2jc.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        flex-flow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-end&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(45deg, #7bed9f, #2ed573, #1e90ff, #3742fa)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main section &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2f3542&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 75%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 高斯模糊 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        filter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blur(3px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; beat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 运动方式 100-0 0-100 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; alternate-reverse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover section &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 运动方式 100-0 0-100 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; alternate-reverse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                @keyframes beat &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        from{
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(90deg, #7bed9f, #2ed573, #1e90ff, #3742fa)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                        to &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY(-280px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }

                @keyframes size&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        to{
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 70px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }

        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;延迟动画&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-delay&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;规则定义动画等待多长时间后执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;我们可以为多个动画指定不同的延迟时间，与动画时间的使用规则相同。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;效果体验&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;延迟动画 圆角3s后执行，背景色2s后执行，移动1s后执行&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234504768-1217419662.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234504768-1217419662.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('53c9826f-2b7b-4d40-aade-6051d5f4e3c6')&quot; readability=&quot;35.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_53c9826f-2b7b-4d40-aade-6051d5f4e3c6&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_53c9826f-2b7b-4d40-aade-6051d5f4e3c6&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53c9826f-2b7b-4d40-aade-6051d5f4e3c6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #5352ed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; radius,background,move&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 延迟动画  圆角3s后执行，背景色2s后执行，移动1s后执行&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-delay&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3s,2s,1s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将动画停留在最后一帧 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; forwards&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
     
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                @keyframes radius&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
                @keyframes background&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ffa502&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translate(0,150px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }

  
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;动画速率&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;系统属性&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-timing-function&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;来控制动画速率&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;table class=&quot;md-table&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;值&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;描述&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;14&quot;&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;linear&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;6&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;ease&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;开始慢，然后快，慢下来，结束时非常慢（cubic-bezier(0.25,0.1,0.25,1)）默认值。&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;ease-in&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;开始慢，结束快（等于 cubic-bezier(0.42,0,1,1)）&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;ease-out&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;开始快，结束慢（等于 cubic-bezier(0,0,0.58,1)）&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;ease-in-out&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;中间快，两边慢（等于 cubic-bezier(0.42,0,0.58,1)）&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;cubic-bezier(&lt;span class=&quot;md-pair-s&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;span class=&quot;md-plain&quot;&gt;,&lt;span class=&quot;md-pair-s&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;span class=&quot;md-plain&quot;&gt;,&lt;span class=&quot;md-pair-s&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;span class=&quot;md-plain&quot;&gt;,&lt;span class=&quot;md-pair-s&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;span class=&quot;md-plain&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在 cubic-bezier 函数中定义自己的值&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;可以在帧中单独定义，将影响当前帧的速率&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;贝塞尔曲线&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;其实不管是&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;linear&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;或者是&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;ease&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;都是由贝塞尔曲线来完成的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;我们需要设置四个值 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;cubic-bezier(&amp;lt;x1&amp;gt;, &amp;lt;y1&amp;gt;, &amp;lt;x2&amp;gt;, &amp;lt;y2&amp;gt;)&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;来控制曲线速度，可在 &lt;span class=&quot;md-meta-i-c md-link&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://cubic-bezier.com/&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;https://cubic-bezier.com&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;md-plain&quot;&gt;网站在线体验效果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200721222224680-414285024.png&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200721222224680-414285024.png&quot; alt=&quot;image-20200721212338537&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;效果体验&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234504156-1708569665.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234504156-1708569665.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('45f49a4f-fef3-49af-9430-6c52c6981792')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_45f49a4f-fef3-49af-9430-6c52c6981792&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_45f49a4f-fef3-49af-9430-6c52c6981792&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45f49a4f-fef3-49af-9430-6c52c6981792&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-end&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                      
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 25%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff4757 content-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 一组帧的名字  可以使用多组帧&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; move&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 重复动画 死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(1)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(2)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(3)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-in&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(4)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-out&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(5)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-in-out&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        to{
                                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
     
  
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;linear&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ease&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ease-in&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ease-out&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ease-in-out&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;弹跳球&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;ease-out&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;是开始快，结束慢，而&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;ease-in&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;是结束快，开始慢。因此这两个组合做弹跳小球刚好。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234503412-2082709917.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234503412-2082709917.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('95e9ea7d-49e0-4261-9a48-9e33146a6ad9')&quot; readability=&quot;49&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_95e9ea7d-49e0-4261-9a48-9e33146a6ad9&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_95e9ea7d-49e0-4261-9a48-9e33146a6ad9&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_95e9ea7d-49e0-4261-9a48-9e33146a6ad9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;//at.alicdn.com/t/font_1953712_q6h4xm8p2jc.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        flex-flow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-between&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(45deg, #eccc68, #ffa502, #ff6b81, #ff4757)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main section &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 70px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2f3542&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 75%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 高斯模糊 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        filter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blur(3px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; beat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover section &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                @keyframes beat &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        0% {
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(60deg, #eccc68, #ffa502, #ff6b81, #ff4757)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY(0px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-in&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                             
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        30% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(120deg, #eccc68, #ffa502, #ff6b81, #ff4757)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY(50px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-in&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        60% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(240deg, #eccc68, #ffa502, #ff6b81, #ff4757)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY(100px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-in&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        80% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(300deg, #eccc68, #ffa502, #ff6b81, #ff4757)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY(150px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-in&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        95% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(340deg, #eccc68, #ffa502, #ff6b81, #ff4757)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY(200px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-in&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        15%,
                        45%,
                        70%,
                        85%,
                        100% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY(280px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease-out&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }

                @keyframes size &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        0% {
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        30% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 85px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        60% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 95px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        80% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 110px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        95% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 120px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        15%,
                        45%,
                        70%,
                        85%,
                        100% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 140px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
       
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;按钮提交&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;这个需要用到盒子阴影，一个元素可以有多个阴影。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;盒子阴影的设置规则如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;　　水平偏移度/垂直偏移度/模糊度/颜色&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;对于颜色而言可以使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;currentColor&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;来获取当前盒子的&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;属性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234502153-733610153.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234502153-733610153.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b8394a40-7cd9-4c12-9e32-bc83b9bcb428')&quot; readability=&quot;34.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_b8394a40-7cd9-4c12-9e32-bc83b9bcb428&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_b8394a40-7cd9-4c12-9e32-bc83b9bcb428&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b8394a40-7cd9-4c12-9e32-bc83b9bcb428&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;//at.alicdn.com/t/font_1953712_q6h4xm8p2jc.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main button &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #747d8c&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main button::after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ''&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; inline-block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                 
                        margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;

                &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Js中可换成点击事件 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                button:hover::after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; point&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 死循环 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画速率 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                @keyframes point &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        60%{
                                box-shadow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        30% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                box-shadow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3px 0 currentColor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        60% &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                box-shadow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3px 0 currentColor, 9px 0 currentColor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                        to &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                box-shadow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3px 0 currentColor, 9px 0 currentColor, 15px 0 currentColor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提交&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;步进速度&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;过渡使用阶梯化呈现，有点像现实生活中的机械舞，下面是把过渡分3步完成。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;table class=&quot;md-table&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;选项&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;说明&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;steps(n,start)&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;设置n个时间点，第一时间点变化状态&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;steps(n,end)&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;设置n个时间点，第一时间点初始状态&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;step-start&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;等于steps(1,start)，可以理解为从下一步开始&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;step-end&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;等于steps(1,end)，可以理解为从当前步开始&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;总是先走，&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;总是后走。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234501606-1274253848.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234501606-1274253848.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('733468c3-6217-43d8-add0-9def13f07661')&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_733468c3-6217-43d8-add0-9def13f07661&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_733468c3-6217-43d8-add0-9def13f07661&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_733468c3-6217-43d8-add0-9def13f07661&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 800px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main::after&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;START&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 25%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff4757&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
   

                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                        
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main::before&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;END&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 25%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #70a1ff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                
                main:hover::after&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组动画帧 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; move&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 步进动画，3步 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                      animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; steps(3,start)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长2s &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                      animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover::before&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组动画帧 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                      animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; move&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 步进动画，3步 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                      animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; steps(3,end)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 动画时长2s &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                      animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                @keyframes move&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;

                        to{
                                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateX(600px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }

        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;播放状态&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-plain&quot;&gt;使用 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-play-state&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;可以控制动画的暂停与运行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;table class=&quot;md-table&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;选项&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;说明&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;paused&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;鼠标放上时暂停&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;running&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;鼠标放上时运行&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;轮播图&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234500995-218532371.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234500995-218532371.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fdb5851f-1b72-4ff2-81a2-f169455595b5')&quot; readability=&quot;37&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_fdb5851f-1b72-4ff2-81a2-f169455595b5&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_fdb5851f-1b72-4ff2-81a2-f169455595b5&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fdb5851f-1b72-4ff2-81a2-f169455595b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2c3e50&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; solid 5px #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                border-width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5px 0 5px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            main:hover section &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                animation-play-state&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; paused&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            main:hover ul::before &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                animation-play-state&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; paused&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            section &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1600px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                flex-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; row&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; slide&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; steps(4, end)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            section div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            section div img &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            ul &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateX(-50%)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            ul li &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; solid 3px transparent&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; rgba(0, 0, 0, .3)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                box-shadow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 0 3px rgba(0, 0, 0, 1)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            ul::before &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ''&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #e74c3c&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; num&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-iteration-count&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                animation-timing-function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; steps(4, end)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
            @keyframes slide &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                from {
                    transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateX(0px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
                to &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                    transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateX(-100%)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            }
    
            @keyframes num &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                100% {
                    transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateX(200px)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;1.jpg&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;2.jpg&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;3.jpg&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;4.jpg&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;填充模式&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;　　&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-fill-mode&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;用于定义动画播放结束后的处理模式，是回到原来状态还是停止在动画结束状态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;table class=&quot;md-table&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;选项&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;说明&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;none&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;需要等延迟结束，起始帧属性才应用&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;backwards&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;动画效果在起始帧，不等延迟结束&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;forwards&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;结束后停留动画的最后一帧&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;both&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;包含backwards与forwards规则，即动画效果在起始帧，不等延迟结束，并且在结束后停止在最后一帧&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;效果对比&lt;/span&gt;&lt;/h3&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image&quot; data-src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234500005-1810091494.gif&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1881426/202007/1881426-20200723234500005-1810091494.gif&quot; alt=&quot;关键帧&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('45230da4-4373-47a7-bc0a-fdca493b9402')&quot; readability=&quot;33&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_45230da4-4373-47a7-bc0a-fdca493b9402&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_45230da4-4373-47a7-bc0a-fdca493b9402&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45230da4-4373-47a7-bc0a-fdca493b9402&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; content-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 800px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;  
                        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #000 content-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 添加一组帧动画 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; background&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 运行时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 延迟时间 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        animation-delay&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;


                
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main div:nth-child(1)::before&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;等待延迟 不停留最后一帧&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bolder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                   
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main div:nth-child(2)::before&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;不等待延迟 不停留最后一帧 &quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bolder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                   
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main div:nth-child(3)::before&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;等待延迟 停留最后一帧 &quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bolder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                   
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main div:nth-child(4)::before&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;不等待延迟 停留最后一帧 &quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-evenly&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

                        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bolder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                   
                        top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;


                main:hover div:nth-child(1)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(2)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; backwards&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(3)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; forwards&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                main:hover div:nth-child(4)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        animation-fill-mode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; both&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                @keyframes background&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                        from{
                                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff6348&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        30%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ffa502&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        60%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #eccc68&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                        to&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2ed573&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
                }


        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;none&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;backwards&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;forwards&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;both&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;简写模式&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;　　和CSS中的其他属性一样，可以使用&lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;组合定义帧动画。animation 属性是一个简写属性，用于设置六个动画属性：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;animation-name 帧动画名字&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;animation-duration 帧动画运行时间&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;animation-timing-function 帧动画速率&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;animation-delay 帧动画播放状态（暂停/运行）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;animation-iteration-count 帧动画循环次数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;animation-direction 延迟时间&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;　　必须存在 &lt;span class=&quot;md-pair-s&quot;&gt;&lt;code&gt;animation-duration&lt;/code&gt;&lt;span class=&quot;md-plain md-expand&quot;&gt;属性，否则过渡时间为0没有动画效果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 23 Jul 2020 15:55:00 +0000</pubDate>
<dc:creator>云崖先生</dc:creator>
<og:description>CSS帧动画 基础知识 通过定义一段动画中的关键点、关键状态来创建动画。@Keyframes相比transition对动画过程和细节有更强的控制。 过渡动画是两个状态间的变化，帧动画可以处理动画过程中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Yunya-Cnblogs/p/13369671.html</dc:identifier>
</item>
<item>
<title>设计模式之适配器模式 - WeihanLi</title>
<link>http://www.cnblogs.com/weihanli/p/adapter-pattern.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/weihanli/p/adapter-pattern.html</guid>
<description>&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;适配器模式（&lt;code&gt;Adapter&lt;/code&gt;），将一个类的接口适配成用户所期待的。一个适配允许通常因为接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。也被称为 Wrapper 模式。&lt;/p&gt;
&lt;p&gt;通常这个类是外部的类，不能直接修改，所以需要做一层包装，以适配现有的接口。&lt;/p&gt;
&lt;h2 id=&quot;prototype&quot;&gt;Prototype&lt;/h2&gt;
&lt;p&gt;实现适配器模式，通常有这几个组件&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Target&lt;/code&gt;: 一个标准模式的类型，标准化接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Adaptee&lt;/code&gt;: 一个需要适配的类型，特殊类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TargetAdapter&lt;/code&gt;: &lt;code&gt;Adaptee&lt;/code&gt; 针对 &lt;code&gt;Target&lt;/code&gt; 的适配器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;public class Target
{
    public virtual void Request()
    {
        Console.WriteLine(&quot;This is a common request&quot;);
    }
}

public class Adaptee
{
    public void SpecialRequest()
    {
        Console.WriteLine(&quot;this is a special request&quot;);
    }
}

public class TargetAdapter : Target
{
    private readonly Adaptee _adaptee = new Adaptee();

    public override void Request()
    {
        _adaptee.SpecialRequest();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;more&quot;&gt;More&lt;/h2&gt;
&lt;p&gt;asp.net core 中的应用实例:&lt;/p&gt;
&lt;p&gt;之前介绍的 asp.net core 3.x 里引入了 &lt;code&gt;ServiceProviderFactory&lt;/code&gt;,使得 .net core 可以更方便的集成第三方的依赖注入框架，这里使用了适配器模式通过 &lt;code&gt;ServiceFactoryAdapter&lt;/code&gt; 来适配各种不同的第三方的依赖注入框架&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/489462/202007/489462-20200723234427522-803337740.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/489462/202007/489462-20200723234512402-2051469078.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;更多内容可以参考文末的源码链接查看源码&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
</description>
<pubDate>Thu, 23 Jul 2020 15:48:00 +0000</pubDate>
<dc:creator>WeihanLi</dc:creator>
<og:description>适配一下，work together</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/weihanli/p/adapter-pattern.html</dc:identifier>
</item>
<item>
<title>移动端点击事件延迟的诞生消亡史 - 雨霖月寒</title>
<link>http://www.cnblogs.com/jofun/p/13369552.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jofun/p/13369552.html</guid>
<description>&lt;p&gt;快速反馈对于任何 UI 的实现都是至关重要的。研究表明，100ms 是界面让用户感到即时的最大延迟。尽管如此，移动网络仍然受到一个巨大的反馈问题的困扰：触摸任何元素后，延迟 300 毫秒。这种延迟是许多用户认为基于 HTML 的 Web 应用程序“卡顿”的最重要原因之一。在本文中，本文将带你了解移动端点击事件延迟的从诞生到消亡的过程。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;137.79157576775&quot;&gt;
&lt;p&gt;快速反馈对于任何 UI 的实现都是至关重要的。研究表明，100ms 是界面让用户感到即时的最大延迟。尽管如此，移动网络仍然受到一个巨大的反馈问题的困扰：触摸任何元素后，延迟 300 毫秒。这种延迟是许多用户认为基于 HTML 的 Web 应用程序“卡顿”的最重要原因之一。在本文中，本文将带你了解移动端点击事件延迟的从诞生到消亡的过程。&lt;/p&gt;
&lt;h2 id=&quot;诞生史&quot;&gt;诞生史&lt;/h2&gt;
&lt;p&gt;在 2007 年，苹果公司发布首款 iPhone 之前，由于当时的网站普遍为大屏幕设备所设计，为了应对 iPhone 这种小屏幕设备浏览桌面网站的问题，由此，苹果引入了多项变革，其中就包含了“双击缩放准确定位正文主体，并将其缩放至适合的比例展现”的功能，即双击缩放功能。然而，由于这种双击缩放的操作，在用户第一次单击页面元素时，浏览器并不知道用户是想做双击缩放操作还是普通的单击操作。因此，IOS Safari 浏览器首先引入了 300 毫秒延迟，用来判断用户是否会再次点击，也就是说，在第一次点击延迟 300 毫秒，300 毫秒后用户没有再次点击则认定为用户在进行普通的单击操作，并触发单击（Click）事件。&lt;/p&gt;
&lt;p&gt;全面的移动开发者与单击事件延迟战争拉开了序幕。鉴于 iPhone 的巨大成功，其他浏览器厂商也都快步跟进纷纷效仿了 iPhone Safari 浏览器的做法。于是，单击事件延迟成为了移动开发者不得不面对的痛。&lt;/p&gt;
&lt;h2 id=&quot;消亡史&quot;&gt;消亡史&lt;/h2&gt;
&lt;p&gt;虽然从当时来看 300ms 延迟并没有什么不妥，然而在越来越注重用户体验的移动互联网时代，这种延迟是无法被用户所接受的，加之开发者也可以对网站进行响应式适配，双击缩放的操作变成了一种可有可无的操作，浏览器厂商开始意识到延迟所带来的体验问题，提出了一些解决方案。&lt;/p&gt;
&lt;h3 id=&quot;禁用缩放&quot;&gt;禁用缩放&lt;/h3&gt;
&lt;p&gt;解决此问题的第一个方法是常识性方法。由于延迟产生的原因是双击缩放操作，那么就禁用页面缩放功能，最直接的方法就是设置 Viewport 禁止缩放，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no&quot;&amp;gt;
&amp;lt;!-- 或者 --&amp;gt;
&amp;lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;适用于 Android 的 Chrome 浏览器是第一个引入此更改的应用程序，随后紧接着是 Android 的 Firefox。没有其他浏览器供应商宣布要添加此优化的计划。尽管此解决方案非常巧妙，背后却以牺牲整个页面缩放为代价，带来的影响是对于页面上的图像或小文本，想要进行缩放变得难以完成。即大多数网站都无法从 Android 版 Chrome 和 Android 版 Firefox 的优化中受益。&lt;/p&gt;
&lt;p&gt;幸运的是，随后 Chrome 团队在 Chrome 32 之后的版本中，提出了新的优秀方案，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;约定当 Viewport 的 width 小于或等于 device-width 时，去除双击缩放功能。这项技术的另一个关键在于，它仅消除了双击缩放的功能，用户依然可以使用双指缩放功能。因此，不存在与禁用缩放相关的可用性和可访问性问题。&lt;/p&gt;
&lt;h3 id=&quot;指针事件&quot;&gt;指针事件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;指针事件&lt;/strong&gt;是 Microsoft 提出的一系列针对 Web 的新事件，现已成为 W3C 规范。指针事件规范是尝试使用单个事件模型统一我们对所有输入类型（鼠标，触摸，手写笔等）的处理。根据规范，CSS 属性 &lt;strong&gt;touch-action&lt;/strong&gt; 用于设置触摸屏用户如何操纵元素的区域(例如，浏览器内置的缩放功能)。touch-action 默认值是 auto，当设置为 none 时会禁止用户缩放，能成功解决 300ms 延迟的问题，如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;a[href],
button {
  touch-action: none;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;甚至可以添加 touch-action: none 到 body 以完全禁用双击来缩放（注意：这也将禁用双指缩放功能，因此它与我们前面讨论的与禁用缩放相关的可访问性和可用性问题相同）。&lt;/p&gt;
&lt;p&gt;2014年3月13日，W3C 规范增添了新的 touch-action 属性值 &lt;strong&gt;manipulation&lt;/strong&gt;。该属性值提供了两全其美的体验；它允许双指缩放，以避免 touch-action: none 出现的可访问性和可用性问题，但它仍然可以通过禁用双击缩放来消除 300ms 的延迟。&lt;/p&gt;
&lt;h3 id=&quot;fastclick&quot;&gt;FastClick&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ftlabs/fastclick&quot;&gt;FastClick&lt;/a&gt; 是一个小型 JavaScript 库，专门旨在防止移动浏览器中的 300ms 点击延迟。FastClick 的实现基础建立于 touchstart ，touchmove 或者 touchend 事件中的任意一个调用 event.preventDefault，mouse 事件 以及 click 事件将不会触发。FastClick 的原理在 touchend 阶段调用 event.preventDefault，然后通过 document.createEvent 创建一个自定义事件 MouseEvents，然后通过 event​Target​.dispatch​Event 触发对应目标元素上绑定的 click 事件。&lt;/p&gt;
&lt;p&gt;关于 FastClick 的好处是，它非常容易使用，只需在文档加载后调用 FastClick.attach() 在 body 元素上实例化：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;if ('addEventListener' in document) {
        document.addEventListener('DOMContentLoaded', function() {
                FastClick.attach(document.body);
        }, false);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;FastClick足够聪明，可以检测到如果是桌面浏览器或者存在 meta 标记和 touch-action 解决方案的时候，不会执行任何操作。因此，在我们为所有平台提供真正的解决方案之前，这是一个极好的解决方法。&lt;/p&gt;
&lt;h3 id=&quot;现代浏览器&quot;&gt;现代浏览器&lt;/h3&gt;
&lt;p&gt;得益于现代浏览器对 W3C 规范 &lt;strong&gt;touch-action: manipulation&lt;/strong&gt; 的支持性，才真正彻底解决了点击事件延迟的问题。&lt;strong&gt;touch-action: manipulation&lt;/strong&gt; 规定浏览器只允许进行滚动和持续缩放操作。任何其它被 touch-action: auto 支持的行为不被支持。启用平移和双指缩放手势，但禁用其他非标准手势，例如双击缩放。 禁用双击缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;html {
  touch-action: manipulation;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从此，移动端点击事件延迟正式宣告消亡。&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 23 Jul 2020 15:22:00 +0000</pubDate>
<dc:creator>雨霖月寒</dc:creator>
<og:description>快速反馈对于任何 UI 的实现都是至关重要的。研究表明，100ms 是界面让用户感到即时的最大延迟。尽管如此，移动网络仍然受到一个巨大的反馈问题的困扰：触摸任何元素后，延迟 300 毫秒。这种延迟是许</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jofun/p/13369552.html</dc:identifier>
</item>
<item>
<title>拓扑排序 - spcia</title>
<link>http://www.cnblogs.com/spciay/p/13369386.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/spciay/p/13369386.html</guid>
<description>&lt;h2 id=&quot;1-算法分析&quot;&gt;1. 算法分析&lt;/h2&gt;
&lt;h3 id=&quot;11-特点分析&quot;&gt;1.1 特点分析&lt;/h3&gt;
&lt;p&gt;    拓扑排序可以在线性的时间复杂度 O(n + m) 内完成求出拓扑序的操作,对象是有向无环图。&lt;br/&gt;拓扑图的性质如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;有向图才有拓扑序&lt;/li&gt;
&lt;li&gt;有向无环图必定存在拓扑序&lt;/li&gt;
&lt;li&gt;存在拓扑序 &amp;lt;=&amp;gt; 无环&lt;/li&gt;
&lt;li&gt;有向无环图至少存在一个入度为0的点&lt;/li&gt;
&lt;li&gt;当前的点只影响后面的状态，所以可以dp处理&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;12-使用场景&quot;&gt;1.2 使用场景&lt;/h3&gt;
&lt;p&gt;    拓扑排序，可以支持以下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;求出拓扑序：&lt;br/&gt;1.1 求一般拓扑序：如果是一般队列，那么求出的为一般的拓扑序&lt;br/&gt;1.2 求字典序最大/最小拓扑序：如果是优先队列，那么求出的是字典序最大/最小拓扑序&lt;/li&gt;
&lt;li&gt;拓扑序判断环&lt;br/&gt;判断图中是否有环：如果原来的点数==最后拓扑序内的点数，那么拓扑序唯一，无环；否则，有环&lt;/li&gt;
&lt;li&gt;拓扑序+dp：&lt;br/&gt;3.1 求最短\长路：如果边权全部大于0，那么可以使用拓扑排序找最短路&lt;br/&gt;3.2 求每个点的可达性&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;2-例题&quot;&gt;2. 例题&lt;/h2&gt;
&lt;h3 id=&quot;21-求出拓扑序&quot;&gt;2.1 求出拓扑序&lt;/h3&gt;
&lt;h4 id=&quot;211-一般拓扑序&quot;&gt;2.1.1 一般拓扑序&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int const N = 1e5 + 10;
int e[N], ne[N], h[N], idx, d[N];
int n, m;
vector&amp;lt;int&amp;gt; ans;

// 建立邻接表
void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}

// 拓扑排序
void top_sort()
{
    queue&amp;lt;int&amp;gt; q;  // 维护一个队列
    for (int i = 1; i &amp;lt;= n; ++i) if (!d[i]) q.push(i);  // 把入度为0的点加入队列
    // 当队列不为空时
    while (q.size())
    {
        auto t = q.front();  // 取队头
        q.pop();  // 队头出队
        ans.push_back(t);  // 把这个数字放入答案序列
        for (int i = h[t]; i != -1; i = ne[i])  // 枚举所有队头元素相邻的元素
        {
            int j = e[i];
            d[j]--;  // 队头元素出队相当于把与队头元素相连的元素的入度减一
            if (!d[j]) q.push(j);  // 把入度为0的元素放入队列
        }
    }
    if (ans.size() == n)   // 输出答案序列
    {
        for (auto a: ans) printf(&quot;%d &quot;, a);
    }
    else cout &amp;lt;&amp;lt; &quot;-1&quot;;
}

int main()
{
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;  // 输入点数和边数
    memset(h, -1, sizeof h);  // 初始化h
    for (int i = 0; i &amp;lt; m; ++i)  // 读入每条边
    {
        int a, b;
        scanf(&quot;%d %d&quot;, &amp;amp;a, &amp;amp;b);
        add(a, b);  // 把b插入a的边表
        d[b]++;  // b的入度加一
    }
    top_sort();
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;212-求出字典序最大最小的拓扑序&quot;&gt;2.1.2 求出字典序最大/最小的拓扑序&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int const N = 1e5 + 10;
int e[N], ne[N], h[N], idx, d[N];
int n, m;
vector&amp;lt;int&amp;gt; ans;

// 建立邻接表
void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}

// 拓扑排序
void top_sort()
{
    priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, greater&amp;lt;int&amp;gt;&amp;gt; q;  // 这里是求字典序最小的拓扑序，如果求字典序最大的，那么改成 priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, less&amp;lt;int&amp;gt;&amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) if (!d[i]) q.push(i);  // 把入度为0的点加入队列
    // 当队列不为空时
    while (q.size())
    {
        auto t = q.top();  // 取队头
        q.pop();  // 队头出队
        ans.push_back(t);  // 把这个数字放入答案序列
        for (int i = h[t]; i != -1; i = ne[i])  // 枚举所有队头元素相邻的元素
        {
            int j = e[i];
            d[j]--;  // 队头元素出队相当于把与队头元素相连的元素的入度减一
            if (!d[j]) q.push(j);  // 把入度为0的元素放入队列
        }
    }
    for (int i = 0; i &amp;lt; ans.size(); ++i) {
        cout &amp;lt;&amp;lt; ans[i];
        if (i != ans.size() - 1) cout &amp;lt;&amp;lt; &quot; &quot;;
    }
    cout &amp;lt;&amp;lt; endl;
}

int main()
{
    while (scanf(&quot;%d%d&quot;, &amp;amp;n, &amp;amp;m) != EOF) {
        memset(d, 0, sizeof d);
        ans.clear();
        idx= 0;
        memset(h, -1, sizeof h);  // 初始化h
        for (int i = 0; i &amp;lt; m; ++i)  // 读入每条边
        {
            int a, b;
            scanf(&quot;%d %d&quot;, &amp;amp;a, &amp;amp;b);
            add(a, b);  // 把b插入a的边表
            d[b]++;  // b的入度加一
        }
        top_sort();
    }
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;HDU2857 逃生&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;题意：&lt;/strong&gt; t个测试样例，每个测试样例给出n和m，表示n个点、m条边。下面m行给出m条有向边信息a b，表示a-&amp;gt;b。求出拓扑序，要求当拓扑序不唯一时，使得序号小的在前。&lt;br/&gt;&lt;strong&gt;题解：&lt;/strong&gt; 让编号小的尽量靠前，这个意思不是字典序最小的拓扑序。解法：反向建图，优先队列（大顶堆）求字典序最大的序列，倒着输出即为本题答案。理解：看上图，我们从1开始走，邻接点3和4,我们不知道后面还有个2，所以不知道3和4先选谁，故正向寻找是错的。既然要求编号小的尽量靠前，那我们可以考虑把编号大的放到后面去。&lt;br/&gt;我们反向走，从最后面往前走，优先走编号大的，也就是字典序最大。最后把序列倒着输出，如此，就满足了本题。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int const N = 1e5 + 10;
int e[N], ne[N], h[N], idx, d[N];
int n, m, t;
vector&amp;lt;int&amp;gt; ans;

// 建立邻接表
void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}

// 拓扑排序
void top_sort()
{
    priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, less&amp;lt;int&amp;gt;&amp;gt; q;  // 维护一个从大到小的优先队列
    for (int i = 1; i &amp;lt;= n; ++i) if (!d[i]) q.push(i);  // 把入度为0的点加入队列
    // 当队列不为空时
    while (q.size())
    {
        auto t = q.top();  // 取队头
        q.pop();  // 队头出队
        ans.push_back(t);  // 把这个数字放入答案序列
        for (int i = h[t]; i != -1; i = ne[i])  // 枚举所有队头元素相邻的元素
        {
            int j = e[i];
            d[j]--;  // 队头元素出队相当于把与队头元素相连的元素的入度减一
            if (!d[j]) q.push(j);  // 把入度为0的元素放入队列
        }
    }
    reverse(ans.begin(), ans.end());  // 反转输出
    for (int i = 0; i &amp;lt; ans.size(); ++i) {
        cout &amp;lt;&amp;lt; ans[i];
        if (i != ans.size() - 1) cout &amp;lt;&amp;lt; &quot; &quot;;
    }
    cout &amp;lt;&amp;lt; endl;
}

int main()
{
    cin &amp;gt;&amp;gt; t;
    while (t--) {
        scanf(&quot;%d%d&quot;, &amp;amp;n, &amp;amp;m);
        memset(d, 0, sizeof d);
        ans.clear();
        idx= 0;
        memset(h, -1, sizeof h);  // 初始化h
        for (int i = 0; i &amp;lt; m; ++i)  // 读入每条边
        {
            int a, b;
            scanf(&quot;%d %d&quot;, &amp;amp;a, &amp;amp;b);
            add(b, a);  // 把b插入a的边表
            d[a]++;  // b的入度加一
        }
        top_sort();
    }
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;22-判断图中是否有环&quot;&gt;2.2 判断图中是否有环&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Codeforces Round #656 (Div. 3) E. Directing Edges&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;题意：&lt;/strong&gt; 给定t个测试样例，每个测试样例给定n和m，n为图的点数，m为图的边数，给定m条边，每条边为op, a, b。如果op == 1,表示有一条有向边a -&amp;gt; b;如果op == 0，表示a和b之间有一条无向边。现在要求把无向边变成有向边(把a--b变成a-&amp;gt;b或b-&amp;gt;a)，使得最后这m条边没有环。&lt;span class=&quot;math inline&quot;&gt;\(\sum_{i=1}^n n、m\)&lt;/span&gt; ~ 2e5&lt;br/&gt;&lt;strong&gt;题解：&lt;/strong&gt; 题意可以转换为现在有一张有向图，要求向这张有向图内加入有向边，使得这张有向图没有环，求加边的方法。因此，可以先做一次拓扑排序，求出拓扑序，如果没有拓扑序，说明已经存在环；否则，只需要加入拓扑序小的指向拓扑序大的边即可。(因为想要形成环，必须有回路，则必须a-&amp;gt;b，同时b-&amp;gt;a,一旦出现拓扑序，说明存在a-&amp;gt;b,不存在b-&amp;gt;a,因此只要不加入b-&amp;gt;a,则不可能出现环)&lt;br/&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;#include&amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int const N = 2e5 + 10;
int t, n, m;
set&amp;lt;int&amp;gt; point;
int e[N * 2], ne[N * 2], idx, h[N];
int d[N], sorted[N];
vector&amp;lt;pair&amp;lt;int, int&amp;gt; &amp;gt; undirect, direct;
vector&amp;lt;int&amp;gt; ans;
struct Edge{
    int op, u, v;
};
vector&amp;lt;Edge&amp;gt; E;

void top_sort() {
    queue&amp;lt;int&amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) {
        if (!d[i]) {
            q.push(i);
        }
    }
    while (q.size()) {
        auto t = q.front();
        q.pop();
        ans.push_back(t);

        for (int i = h[t]; ~i; i = ne[i]) {
            int j = e[i];
            d[j]--;
            if (!d[j]) {
                q.push(j);
            }
        }
    }

    // 记录一下拓扑序内的点的顺序
    for (int i = 0; i &amp;lt; ans.size(); ++i) {
        sorted[ans[i]] = i + 1;
    }
    return ;
}

void add(int a, int b) {
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}
 
int main() {
    cin &amp;gt;&amp;gt; t;
    while (t--) {
        memset(h, -1, sizeof h);
        memset(d, 0, sizeof d);
        idx = 0;
        E.clear();
        memset(sorted, 0, sizeof sorted);
        ans.clear();
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        for (int i = 0, op, a, b; i &amp;lt; m; ++i) {
            scanf(&quot;%d%d%d&quot;, &amp;amp;op, &amp;amp;a, &amp;amp;b);
            E.push_back({op, a, b});
            if (op == 1) {
                add(a, b);
                d[b]++;
            }
        }
        top_sort();
        if (ans.size() != n) {
            cout &amp;lt;&amp;lt; &quot;NO\n&quot;;
            continue;
        }
        cout &amp;lt;&amp;lt; &quot;YES\n&quot;;
        for (int i = 0; i &amp;lt; E.size(); ++i) {
            if (E[i].op == 1) {
                cout &amp;lt;&amp;lt; E[i].u &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; E[i].v &amp;lt;&amp;lt; endl;
            }
            else {
                // 按照拓扑序内顺序小的指向顺序大的
                if (sorted[E[i].u] &amp;lt; sorted[E[i].v]) cout &amp;lt;&amp;lt; E[i].u &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; E[i].v &amp;lt;&amp;lt; endl;
                else cout &amp;lt;&amp;lt; E[i].v &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; E[i].u &amp;lt;&amp;lt; endl;
            }
        }
    }
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;23-拓扑排序dp&quot;&gt;2.3 拓扑排序+dp&lt;/h3&gt;
&lt;h4 id=&quot;231-求最短路最长路&quot;&gt;2.3.1 求最短路\最长路&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;acwing1192奖金&lt;/strong&gt;&lt;br/&gt;公司按照每个人的贡献给每个人发奖金。奖金存在M对关系，每对关系为a,b,表示a的奖金比b高。每位员工工资最少为100元，问最少需要发多少奖金。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;/*
本题是差分约束的简化版，形成的边只有正权边
如果存在正环那么无解，换言之，如果不存在拓扑序则无解，因此可以使用拓扑排序来判断
如果有解，求出拓扑序后，直接按照拓扑序更新最长路即可
*/
#include&amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int const N = 1e4 + 10, M = 2e4 + 10;
int n, m;
int din[N], dis[N];
int e[M], ne[M], h[N], idx;
vector&amp;lt;int&amp;gt; ans;

// 拓扑排序
bool topsort()
{
    queue&amp;lt;int&amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i)
        if (!din[i]) q.push(i);
    
    while (q.size())
    {
        auto t = q.front();
        q.pop();
        ans.push_back(t);

        for (int i = h[t]; ~i; i = ne[i])
        {
            int j = e[i];
            din[j]--;
            if (!din[j]) q.push(j);
        }
    }v

    return ans.size() == n;    
}

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}

int main()
{
    // 建图
    memset(h, -1, sizeof h);
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    for (int i = 0; i &amp;lt; m; ++i)
    {
        int a, b;
        scanf(&quot;%d %d&quot;, &amp;amp;a, &amp;amp;b);
        add(b, a);
        din[a] ++;
    }

    // 拓扑排序判断是否有解
    if (!topsort()) 
    {
        printf(&quot;Poor Xed\n&quot;);
        return 0;
    }

    // 按照拓扑排序更新最长路
    for (int i = 1; i &amp;lt;= n; ++i) dis[i] = 100;
    for (int i = 0; i &amp;lt; n; ++i)
    {
        int t = ans[i];
        for (int j = h[t]; ~j; j = ne[j])
        {
            int k = e[j];
            dis[k] = max(dis[k], dis[t] + 1);
        }
    }

    // 计算答案
    int ans = 0;
    for (int i = 1; i &amp;lt;= n; ++i) ans += dis[i];
    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;acwing456车站分级&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;题意：&lt;/strong&gt; 一条单向的铁路线上，依次有编号为1, 2, …, n 的n个火车站。每个火车站都有一个级别，最低为1级。现有若干趟车次在这条线路上行驶，每一趟都满足如下要求：如果这趟车次停靠了火车站x，则始发站、终点站之间所有级别大于等于火车站x的都必须停靠。（注意：起始站和终点站自然也算作事先已知需要停靠的站点）&lt;br/&gt;例如，下表是5趟车次的运行情况。&lt;br/&gt;其中，前4趟车次均满足要求，而第5趟车次由于停靠了3号火车站（2级）却未停靠途经的6号火车站（亦为2级）而不满足要求。&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2020/07/23/MtnZgyxRzTEuesl.png&quot; alt=&quot;微信截图_20200723220613.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;现有m趟车次的运行情况（全部满足要求），试推算这n个火车站至少分为几个不同的级别。1≤n,m≤1000&lt;br/&gt;&lt;strong&gt;题解：&lt;/strong&gt; 很明显，不停靠的站点的优先级一定比停靠的站点的优先级要小，因此不停靠的站点的优先级最小为1，且停靠的站点的优先级&amp;gt;=不停靠的站点的优先级+1，则本题可以转换为一个差分约束问题，且边权大于等于0。(这里不需要tarjan判断是否有正环，因为明确了有解，不可能出现正环，所以直接拓扑排序求拓扑序(tarjan的目的也是缩点完求拓扑序))。本题的另一个难点在于建图，如果直接把不停靠的站点向停靠的站点连一条边，那么建图的复杂度为O(mn^2^)。对于一个二分图，左边的每个点都需要向右边每个点连一条边的建图模型来说，可以设置一个虚拟节点，然后使得左边每个点连向虚拟节点，虚拟节点再向右边每个点连边。这样就把O(n ^ 2)优化到O(n)。&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2020/07/23/XYAlbICZpWgPc6N.png&quot; alt=&quot;文档 07-23.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;/*
本题是一道差分约束问题，对于每一辆车停靠的站点的优先级一定比没停靠的站点的优先级要高，因此
所有未停靠的站点都可以连一条边到停靠的站点。
但是如果这样建图将会建边平方条，1e8，超时
考虑简单的建边方法：对于每辆车建立一个虚拟节点，这个虚拟节点可以认为是未停靠的车站的最高优先级，
那么对于每个关系b&amp;gt;=a+1则可以从原来的a-&amp;gt;b建权值为1的边变化为a向虚拟节点ver建一条边权为0的边，再从ver到b建一条
边权为1的边，这样子就可以把平方的边数降到线性，每辆车最多建立2000条边，总共2e6条边
建图后，由于本题特点保证了一定是一张DAG，所以要求最长路不需要判正环，直接拓扑排序后得到顺序，然后dp求最长路即可
*/
#include&amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int const N = 2e3 + 10, M = 2e6 + 10;
int n, m;
int e[M], ne[M], h[N], w[M], idx;
int din[N], st[N], dis[N];
vector&amp;lt;int&amp;gt; ans;

void add(int a, int b, int c)
{
    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;
}

// 拓扑排序
void topsort()
{
    queue&amp;lt;int&amp;gt; q;
    for (int i = 1; i &amp;lt;= n + m; ++i) if (!din[i]) q.push(i);

    while (q.size())
    {
        auto t = q.front();
        q.pop();
        ans.push_back(t);

        for (int i = h[t]; ~i; i = ne[i])
        {
            int j = e[i];
            din[j]--;
            if (!din[j]) q.push(j);
        }
    }
}

int main()
{
    memset(h, -1, sizeof h);
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    for (int i = 1; i &amp;lt;= m; ++i)
    {
        // 建图（加入虚节点，平方-&amp;gt;线性）
        memset(st, 0, sizeof st);
        int cnt, start = n, end = 1, ver = n + i;  // start记录最小的点，end记录最大的点，ver记录虚拟节点
        cin &amp;gt;&amp;gt; cnt;
        for (int i = 0; i &amp;lt; cnt; ++i)
        {
            int t;
            cin &amp;gt;&amp;gt; t;
            st[t] = 1;
            start = min(start, t);
            end = max(end, t);
        }

        // 把a-&amp;gt;b的边拆成a-&amp;gt;ver和ver-&amp;gt;b
        for (int j = start; j &amp;lt;= end; ++j)
        {
            if (st[j]) add(ver, j, 1), din[j]++;
            else add(j, ver, 0), din[ver]++;
        }
    }

    // 拓扑排序得到更新的顺序
    topsort();

    // dp求最大值
    for (int i = 1; i &amp;lt;= n; ++i) dis[i] = 1;
    for (int i = 0; i &amp;lt; ans.size(); ++i)
    {
        int k = ans[i];
        for (int j = h[k]; ~j; j = ne[j])
        {
            int t = e[j];
            dis[t] = max(dis[t], dis[k] + w[j]);
        }
    }

    int res = 0;
    for (int i = 1; i &amp;lt;= n; ++i) res = max(res, dis[i]);
    cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;232-求可达性&quot;&gt;2.3.2 求可达性&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;acwing164可达性统计&lt;/strong&gt;&lt;br/&gt;给定一张N个点M条边的有向无环图，分别统计从每个点出发能够到达的点的数量。第一行两个整数N,M，接下来M行每行两个整数x,y，表示从x到y的一条有向边。输出共N行，表示每个点能够到达的点的数量。1≤N,M≤30000&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;/*
因为是有向无环图，所以当前状态只影响后面的状态，所以可以使用dp的思想处理
因此，先做一次拓扑排序，得到拓扑序，而后使用逆拓扑序倒着向前更新每个点的可达性
具体更新的时候可以使用一个bitset即可维护当前每个点的可达状态
*/
#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int const N = 3e4 + 10;
int e[N], ne[N], idx, h[N];
int n, m, d[N];
bitset&amp;lt;N&amp;gt; f[N];
vector&amp;lt;int&amp;gt; ans;

void add(int a, int b) {
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}

void top_sort() {
    queue&amp;lt;int&amp;gt; q;
    for (int i = 1; i &amp;lt;= n; ++i) if (!d[i]) q.push(i);
    while (!q.empty()) {
        auto t = q.front();
        q.pop();
        ans.push_back(t);
        
        for (int i = h[t]; ~i; i = ne[i]) {
            int j = e[i];
            d[j]--;
            if (!d[j]) q.push(j);
        }
    }
    return ;
}

int main(){
    memset(h, -1, sizeof h);
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    for (int i = 1, a, b; i &amp;lt;= m; ++i) {
        scanf(&quot;%d%d&quot;, &amp;amp;a, &amp;amp;b);
        d[b] ++;
        add(a, b);
    }
    
    // 求出拓扑序
    top_sort();
    
    // 倒着更新求出可达性
    for (int i = ans.size() - 1; i &amp;gt;= 0; --i) {
        int j = ans[i];  // 当前这个点
        f[j][j] = 1;  // 当前这个点到自己是可达的
        for (int k = h[j]; ~k; k = ne[k]) {
            int t = e[k];  // j能够遍历到的点是t
            f[j] |= f[t];  // j的状态受t影响
        }
    }
    
    for (int i = 1; i &amp;lt;= n; ++i) cout &amp;lt;&amp;lt; f[i].count() &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 23 Jul 2020 14:52:00 +0000</pubDate>
<dc:creator>spcia</dc:creator>
<og:description>拓扑排序 1. 算法分析 1.1 特点分析 拓扑排序可以在线性的时间复杂度 O(n + m) 内完成求出拓扑序的操作,对象是有向无环图。 拓扑图的性质如下： 有向图才有拓扑序 有向无环图必定存在拓扑序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/spciay/p/13369386.html</dc:identifier>
</item>
<item>
<title>【算法】手撕红黑树（上）—— 基本性质以及插入实现（附带代码实现） - 469の一方爬行</title>
<link>http://www.cnblogs.com/469Accelerator/p/13368981.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/469Accelerator/p/13368981.html</guid>
<description>&lt;p&gt;在阅读其他博主关于红黑树增删实现的时候，博主们大多直接使用文字图片描述，对整个增删整体的流程突出的不太明显（当然dalao们写得还是很棒得，不然我也写不出这篇文章）。 所以我特意花了2天时间用CAD制作了 一张插入操作的流程图和一张删除操作的流程图（删除见下篇）并手撕了代码（手撕红黑树233）. 本文则试图通过流程图，让大家换一个角度来了解整个插入操作的实现过程。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;142&quot;&gt;
&lt;p&gt;在阅读其他博主关于红黑树增删实现的时候，博主们大多直接使用文字图片描述，对整个增删整体的流程突出的不太明显（当然dalao们写得还是很棒得，不然我也写不出这篇文章），所以我特意花了2天时间用CAD制作了 一张插入操作的流程图和一张删除操作的流程图（删除见下篇）并手撕代码（好吧，其实大部分时间在调试代码，毕竟talk is easy,show me the code.）。&lt;/p&gt;
&lt;p&gt;废话不多说了，进入正题吧。&lt;/p&gt;
&lt;p&gt;红黑树是一种常见而又有点复杂的数据结构，它的应用场景有很多，比如经典的JAVA的HashMap，当slot中元素大于8时就会树化为红黑树。&lt;/p&gt;
&lt;p&gt;和AVL树一样，红黑树也是一种二叉搜索树（BST）。但与AVL树不同的是，红黑树通过稍微牺牲其平衡性（即弱化了查找效率），并配合其特殊的规则（下面会说）以实现在增删上的效率提升。即相比AVL树，增删一个节点最多只用旋转三次。【红黑树：没有什么是两次旋转不能解决的，如果有就三次&lt;img src=&quot;https://img2020.cnblogs.com/blog/2083829/202007/2083829-20200723214633341-703766554.png&quot; alt=&quot;&quot; width=&quot;24&quot; height=&quot;24&quot; loading=&quot;lazy&quot;/&gt;】&lt;/p&gt;

&lt;p&gt;下面介绍以下红黑树的五个规则：&lt;/p&gt;
&lt;p&gt;0、树中节点不是红色就是黑色；&lt;/p&gt;
&lt;p&gt;1、根节点必为黑色；&lt;/p&gt;
&lt;p&gt;2、红色节点的父子不能也是红色（或者说，由根至叶子的每一条路径上不能有连续的红节点）；&lt;/p&gt;
&lt;p&gt;3、每个叶子节点（NIL节点）是黑色的&lt;/p&gt;
&lt;p&gt;4、任意节点到其下方的NIL节点的每一条路径上经过的黑色节点相同（或者说，除去红色节点，黑色节点就是是一个AVL树）；&lt;/p&gt;
&lt;p&gt;5、在维护红黑树性质之前，对于新插入的节点，我们把它涂红。【这其实只是一个经验，另外，五条规则有六个不是常识么？】&lt;/p&gt;

&lt;p&gt;接下来我们就用流程图来梳理一下红黑树的插入操作：&lt;/p&gt;
&lt;p&gt;但在此之前我们先规定下图中一些代号节点的含义以及旋转的操作：&lt;/p&gt;
&lt;p&gt;C节点（Curent,当前要操作节点的指针）&lt;/p&gt;
&lt;p&gt;P节点（Parent,当前C节点的父节点）&lt;/p&gt;
&lt;p&gt;G节点（Grandparent,当前C节点的爷爷节点）&lt;/p&gt;
&lt;p&gt;U节点（Uncle,当前C节点的叔叔节点，即P节点的兄弟节点）   &lt;/p&gt;
&lt;p&gt;【注意P、G、U节点应当随着C的更新而更新】&lt;/p&gt;
&lt;p&gt;旋转： 以P为支点进行右旋为例——C顶替P的位置，P变为C的有右孩子，C原来的右孩子变为P的左孩子。左旋反向即可。&lt;/p&gt;
&lt;p&gt;另外图中白圈节点指代黑节点（毕竟CAD背景色是黑的嘛QAQ），红圈节点就是红节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2083829/202007/2083829-20200723222850406-1560278605.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后附上代码（由于增删方法我是一起写的，所以代码中写了删除方法的实现，删除方法的具体流程请参阅下篇）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt; * 手撕红黑树
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt; * By 469の瘸子 （意义不明的口胡：现在应该是420の的瘸子233）
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt; * *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RedBlackTree&amp;lt;E &lt;span&gt;extends&lt;/span&gt; Comparable&amp;lt;E&amp;gt; &amp;amp; PrintToDOS&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; black = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; red = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node root;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;class&lt;/span&gt; Node {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点类&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node parent;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node left;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node right;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt;&lt;span&gt; E element;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; color;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; Node (E element){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造方法，默认新节点为红色&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.element =&lt;span&gt; element;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt;red;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印的红黑树的时候，会调用每个节点的打印方法&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; print(){
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先打印颜色&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.color) {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;                     System.out.print(&quot;  black:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;                     System.out.print(&quot;  red:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;再打印值&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;                element.print();
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;最后打印父节并换行&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(parent==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;                     System.out.println(&quot;  this is root&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;                     System.out.print(&quot;  parent is:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;                    parent.element.println();
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入方法，会调用insert方法和fixAfterInsertion方法&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; insert(E element){
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case1:树中无元素，直接将elemnt插进去涂黑&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (root==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;                 root = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(element);
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                 root.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2:树非空，先按二叉搜索树的方式确定元素位置，再视父元素颜色分类处理
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先把节点插进去，如果插的元素已经存在会返回null&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;                 Node node =&lt;span&gt; insertBST(element);
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;再对树进行维护&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;                fixAfterInsertion(node);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该方法只负责将新的节点插进树里，不负责维护红黑树性质&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Node insertBST(E element){
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             Node pointer =&lt;span&gt; root;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             Node pointer_parent = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;do&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                 &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (element.compareTo(pointer.element)){
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                     &lt;span&gt;case&lt;/span&gt; 0&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                         System.out.println(&quot;已有当前元素！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                     &lt;span&gt;case&lt;/span&gt; 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                         pointer_parent =&lt;span&gt; pointer;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                         pointer =&lt;span&gt; pointer.right;
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                     &lt;span&gt;case&lt;/span&gt; -1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                         pointer_parent =&lt;span&gt; pointer;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                         pointer =&lt;span&gt; pointer.left;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                     &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             }&lt;span&gt;while&lt;/span&gt; (pointer!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;             Node child = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(element);
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             child.parent =&lt;span&gt; pointer_parent;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;compareTo的结果只会是1或-1。不会出现0，是0的话，在上方的switch语句里就return了&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(pointer_parent.element.compareTo(element)&amp;gt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 pointer_parent.left =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                 pointer_parent.right =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; 
&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该方法负责插入后的维护工作&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fixAfterInsertion(Node node){
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;            Node cur,parent,grandparent,uncle;
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             cur =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查是否需要维护树,cur是null的话说明插的元素已存在，就不用维护了&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(cur !=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                 parent =&lt;span&gt; cur.parent;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cur.print();
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.1:父节点为黑色或为空，不用维护&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(parent==&lt;span&gt;null&lt;/span&gt;||parent.color ==&lt;span&gt; black){
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.2:父节点为红色，视叔叔节点颜色分类处理
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;region 先获取U、G节点的引用（这里G必然非空，因为G空必然P为根且黑，那就不会执行到这里）&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;                     grandparent =&lt;span&gt; parent.parent;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(grandparent.left ==&lt;span&gt; parent){
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;                         uncle =&lt;span&gt; grandparent.right;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                         uncle =&lt;span&gt; grandparent.left;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;endregion
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.2.1:U节点为黑色（NIL节点也是黑色的）。视C、P、G节点的形态处理&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (uncle==&lt;span&gt;null&lt;/span&gt;||uncle.color==&lt;span&gt;black){
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.2.1.1:C、P、G形态为“/”、“\”。以G为支点右旋或左旋，P变黑、G变红&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(grandparent.element.compareTo(parent.element)==&lt;span&gt;parent.element.compareTo(cur.element)){
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                             parent.color=&lt;span&gt;black;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;                             grandparent.color=&lt;span&gt;red;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;(grandparent.element.compareTo(parent.element)&amp;gt;0){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;“/”形态，右旋&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;                                rightRotate(grandparent);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                             }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;“\”形态，左旋&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;                                leftRotate(grandparent);
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                         }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.2.1.2:C、P、G形态为“&amp;lt;”、“&amp;gt;”。先以P为支点左旋或右旋，在以P为支点右旋或左旋&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;                             cur.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                             grandparent.color =&lt;span&gt;red;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;(grandparent.element.compareTo(parent.element)&amp;gt;0){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;“&amp;lt;”形态，P左旋后、G右旋&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;                                leftRotate(parent);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;                                rightRotate(grandparent);
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                             }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;“&amp;gt;”形态，P右旋后、G左旋&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;                                rightRotate(parent);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                                leftRotate(grandparent);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.2.2:U节点为红色。将P、G、U节点换色，然后cur指向G节点调用维护函数&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;                         grandparent.color=&lt;span&gt;red;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                         parent.color=&lt;span&gt;black;
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                         uncle.color=&lt;span&gt;black;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;                        fixAfterInsertion(grandparent);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; 
&lt;span&gt;145&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; 
&lt;span&gt;147&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;             root.color=&lt;span&gt;black;
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; 
&lt;span&gt;151&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;左旋方法&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; leftRotate(Node node){
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             Node parent =&lt;span&gt; node.parent;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;             Node child =&lt;span&gt; node.right;
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;             Node childLeft = child==&lt;span&gt;null&lt;/span&gt;?&lt;span&gt;null&lt;/span&gt;&lt;span&gt;:child.left;
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;子节点上位&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(parent==&lt;span&gt;null&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支点为根节点，parent会是空&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;                 child.parent = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;                 root =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (parent.left ==&lt;span&gt; node){
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;                     parent.left =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                     child.parent =&lt;span&gt; parent;
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;                     parent.right =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;                     child.parent =&lt;span&gt; parent;
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;父节点下位&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt;             child.left =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             node.parent =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;子树调整&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;             node.right =&lt;span&gt; childLeft;
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(childLeft!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;                 childLeft.parent =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;右旋方法&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rightRotate(Node node){
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             Node parent =&lt;span&gt; node.parent;
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;             Node child =&lt;span&gt; node.left;
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;             Node childRight = child==&lt;span&gt;null&lt;/span&gt;?&lt;span&gt;null&lt;/span&gt;&lt;span&gt;:child.right;
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;子节点上位&lt;/span&gt;
&lt;span&gt;184&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(parent==&lt;span&gt;null&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支点为根节点，parent会是空&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt;                 child.parent = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;                 root =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支点不是根节点&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (parent.left ==&lt;span&gt; node){
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;                     parent.left =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;                     child.parent =&lt;span&gt; parent;
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;                     parent.right =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;                     child.parent =&lt;span&gt; parent;
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; 
&lt;span&gt;197&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;父节点下位&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt;             child.right =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;             node.parent =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;子树调整&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt;             node.left =&lt;span&gt; childRight;
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(childRight!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;                 childRight.parent =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; 
&lt;span&gt;207&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印红黑树&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printRBT(Node node){
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; 
&lt;span&gt;210&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(node!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; &lt;span&gt;                printRBT(node.left);
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; &lt;span&gt;                node.print();
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; &lt;span&gt;                printRBT(node.right);
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; 
&lt;span&gt;219&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; 
&lt;span&gt;221&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;13,8,5,11,6,22,27,25,14,17 另外一组调试数据&lt;/span&gt;
&lt;span&gt;222&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] nums = {1,2,3,4,5,6,7,8,9,10&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;             RedBlackTree&amp;lt;Element&amp;gt; redBlackTree = &lt;span&gt;new&lt;/span&gt; RedBlackTree&amp;lt;Element&amp;gt;&lt;span&gt; ();
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; 
&lt;span&gt;225&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i: nums){
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt;                 Element element = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Element(i);
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &lt;span&gt;                redBlackTree.insert(element);
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印红黑树&lt;/span&gt;
&lt;span&gt;230&lt;/span&gt; &lt;span&gt;            redBlackTree.printRBT(redBlackTree.root);
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt;             
&lt;span&gt;232&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除操作&lt;/span&gt;
&lt;span&gt;233&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; value = 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;             redBlackTree.remove(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Element(value));
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;             System.out.println(&quot;删除节点&quot;+value+&quot;后，打印：&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;             
&lt;span&gt;237&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印红黑树&lt;/span&gt;
&lt;span&gt;238&lt;/span&gt; &lt;span&gt;            redBlackTree.printRBT(redBlackTree.root);
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt; 
&lt;span&gt;241&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;——————————  ——   分割线：以下是删除代码   —————————————*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;242&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从树中删除一个元素的代码&lt;/span&gt;
&lt;span&gt;243&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; remove(E element){
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;             Node pointer =&lt;span&gt; getNodeByElement(element);
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(pointer==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;                 System.out.print(&quot;树中并没有要删除的元素&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;             &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case1:要删除的节点仅有一个子树，红黑树性质决定该情况下删除的必然是黑节点，且子节点为红色叶子节点&lt;/span&gt;
&lt;span&gt;251&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; ((pointer.left==&lt;span&gt;null&lt;/span&gt;)!=(pointer.right==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要删除的节点的子树（仅为一个红色叶子节点）顶上来并变色&lt;/span&gt;
&lt;span&gt;253&lt;/span&gt; &lt;span&gt;                    removeOneBranchNode(pointer);
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2:删除节点为叶子节点&lt;/span&gt;
&lt;span&gt;256&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; ((pointer.left == &lt;span&gt;null&lt;/span&gt;)&amp;amp;&amp;amp;(pointer.right == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;                        removeLeafNode(pointer);
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;                     } &lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case3:要删除的节点有两个子树
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指针指向后继节点，后继节点element顶替要删除的element。再do一次以判定新指针的case(此时只会是case2、3)&lt;/span&gt;
&lt;span&gt;261&lt;/span&gt;                         pointer =&lt;span&gt; changePointer(pointer);
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; 
&lt;span&gt;265&lt;/span&gt;             }&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; 
&lt;span&gt;268&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取要删除的元素的Node，若返回为null代表树中没有要删除的元素&lt;/span&gt;
&lt;span&gt;269&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node getNodeByElement(E element){
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(root==&lt;span&gt;null&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;树为空，返回null&lt;/span&gt;
&lt;span&gt;271&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;  &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; 
&lt;span&gt;274&lt;/span&gt;             Node pointer =&lt;span&gt; root;
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt;             &lt;span&gt;do&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(element.compareTo(pointer.element)&amp;gt;0){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;大于，指针指向右孩子&lt;/span&gt;
&lt;span&gt;277&lt;/span&gt;                     pointer =&lt;span&gt; pointer.right;
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(element.compareTo(pointer.element)&amp;lt;0){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小于，指针指向左孩子&lt;/span&gt;
&lt;span&gt;280&lt;/span&gt;                         pointer =&lt;span&gt; pointer.left;
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等于，返回当前的节点&lt;/span&gt;
&lt;span&gt;282&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pointer;
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;285&lt;/span&gt;             }&lt;span&gt;while&lt;/span&gt; (pointer!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt; 
&lt;span&gt;289&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指针指向后继节点，并用后继节点的element顶替要删除的element,没有后继节点就返回null&lt;/span&gt;
&lt;span&gt;290&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node changePointer(Node pointer){
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指针备份方便替换时找到引用&lt;/span&gt;
&lt;span&gt;292&lt;/span&gt;             Node pointer_old =&lt;span&gt; pointer;
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;寻找后继节点&lt;/span&gt;
&lt;span&gt;294&lt;/span&gt;             pointer =&lt;span&gt; pointer.right;
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (pointer.left!=&lt;span&gt;null&lt;/span&gt;){ pointer =&lt;span&gt; pointer.left; }
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt;             pointer_old.element=&lt;span&gt;pointer.element;
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pointer;
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt; 
&lt;span&gt;300&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除叶子节点，红色的就直接删，黑色的分情况处理&lt;/span&gt;
&lt;span&gt;301&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeLeafNode(Node pointer){
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt;             Node parent =&lt;span&gt; pointer.parent;
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt;             Node pointer_old =&lt;span&gt; pointer;
&lt;/span&gt;&lt;span&gt;304&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case:2.1叶子节点是根节点&lt;/span&gt;
&lt;span&gt;305&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(parent==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt;                 root=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case:2.2叶子节点是红色的的话直接删除，黑色的要分类处理&lt;/span&gt;
&lt;span&gt;310&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(pointer.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(pointer.parent.left==&lt;span&gt;pointer){
&lt;/span&gt;&lt;span&gt;312&lt;/span&gt;                     pointer.parent.left=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;313&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;314&lt;/span&gt;                     pointer.parent.right=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;316&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3:叶子节点是黑色的,视兄弟点分类处理&lt;/span&gt;
&lt;span&gt;318&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (pointer.parent!=&lt;span&gt;null&lt;/span&gt;&amp;amp;&amp;amp;pointer.color==&lt;span&gt;black){
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt;                     parent = pointer.parent;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在case2.3.2.2下循环，要更新parent&lt;/span&gt;
&lt;span&gt;320&lt;/span&gt; &lt;span&gt;                    Node brother;
&lt;/span&gt;&lt;span&gt;321&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(pointer.parent.left==pointer){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左叶子节点处理方式&lt;/span&gt;
&lt;span&gt;322&lt;/span&gt;                         brother =&lt;span&gt; pointer.parent.right;
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.1:兄弟节点为红色。那么将其转换为黑色&lt;/span&gt;
&lt;span&gt;324&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(brother.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt;                             brother.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;326&lt;/span&gt;                             parent.color =&lt;span&gt; red;
&lt;/span&gt;&lt;span&gt;327&lt;/span&gt; &lt;span&gt;                            leftRotate(parent);
&lt;/span&gt;&lt;span&gt;328&lt;/span&gt;                             brother =&lt;span&gt; parent.right;
&lt;/span&gt;&lt;span&gt;329&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.2:兄弟节点为黑色，侄子节点都是黑色（NIL）&lt;/span&gt;
&lt;span&gt;331&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;((brother.left == &lt;span&gt;null&lt;/span&gt;)&amp;amp;&amp;amp;(brother.right == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;332&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.2.1:父节点为红色&lt;/span&gt;
&lt;span&gt;333&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;(parent.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt;                                 parent.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;335&lt;/span&gt;                                 brother.color =&lt;span&gt; red;
&lt;/span&gt;&lt;span&gt;336&lt;/span&gt;                                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;337&lt;/span&gt;                             }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.2.2:父节点为黑色&lt;/span&gt;
&lt;span&gt;338&lt;/span&gt;                                 brother.color =&lt;span&gt; red;
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt;                                 pointer =&lt;span&gt; parent;
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt;                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;继续循环&lt;/span&gt;
&lt;span&gt;341&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;342&lt;/span&gt;                         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.3:兄弟节点为黑色,左侄子为红色&lt;/span&gt;
&lt;span&gt;344&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;((brother.color==black)&amp;amp;&amp;amp;brother.left!=&lt;span&gt;null&lt;/span&gt;&amp;amp;&amp;amp;brother.left.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;345&lt;/span&gt;                                 brother.left.color =&lt;span&gt; parent.color;
&lt;/span&gt;&lt;span&gt;346&lt;/span&gt;                                 parent.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;347&lt;/span&gt; &lt;span&gt;                                rightRotate(brother);
&lt;/span&gt;&lt;span&gt;348&lt;/span&gt; &lt;span&gt;                                leftRotate(parent);
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt;                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.4:兄弟节点为黑色,右侄子为红色&lt;/span&gt;
&lt;span&gt;350&lt;/span&gt;                             }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;((brother.color==black)&amp;amp;&amp;amp;brother.right!=&lt;span&gt;null&lt;/span&gt;&amp;amp;&amp;amp;brother.right.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;351&lt;/span&gt;                                 brother.color =&lt;span&gt; parent.color;
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt;                                 parent.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;353&lt;/span&gt;                                 brother.right.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;354&lt;/span&gt; &lt;span&gt;                                leftRotate(parent);
&lt;/span&gt;&lt;span&gt;355&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;356&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;357&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;358&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右叶子节点处理方式&lt;/span&gt;
&lt;span&gt;359&lt;/span&gt;                         brother =&lt;span&gt; pointer.parent.left;
&lt;/span&gt;&lt;span&gt;360&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.1:兄弟节点为红色。那么将其转换为黑色&lt;/span&gt;
&lt;span&gt;361&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(brother.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;362&lt;/span&gt;                             brother.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;363&lt;/span&gt;                             parent.color =&lt;span&gt; red;
&lt;/span&gt;&lt;span&gt;364&lt;/span&gt; &lt;span&gt;                            rightRotate(parent);
&lt;/span&gt;&lt;span&gt;365&lt;/span&gt;                             brother =&lt;span&gt; parent.left;
&lt;/span&gt;&lt;span&gt;366&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;367&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.2:兄弟节点为黑色，侄子节点都是黑色（NIL）&lt;/span&gt;
&lt;span&gt;368&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;((brother.left == &lt;span&gt;null&lt;/span&gt;)&amp;amp;&amp;amp;(brother.right == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;369&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.2.1:父节点为红色&lt;/span&gt;
&lt;span&gt;370&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;(parent.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;371&lt;/span&gt;                                 parent.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;372&lt;/span&gt;                                 brother.color =&lt;span&gt; red;
&lt;/span&gt;&lt;span&gt;373&lt;/span&gt;                                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;374&lt;/span&gt;                             }&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.2.2:父节点为黑色&lt;/span&gt;
&lt;span&gt;375&lt;/span&gt;                                 brother.color =&lt;span&gt; red;
&lt;/span&gt;&lt;span&gt;376&lt;/span&gt;                                 pointer =&lt;span&gt; parent;
&lt;/span&gt;&lt;span&gt;377&lt;/span&gt;                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;继续循环&lt;/span&gt;
&lt;span&gt;378&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;379&lt;/span&gt; 
&lt;span&gt;380&lt;/span&gt;                         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;381&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.3:兄弟节点为黑色,右侄子为红色&lt;/span&gt;
&lt;span&gt;382&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;((brother.color==black)&amp;amp;&amp;amp;brother.right!=&lt;span&gt;null&lt;/span&gt;&amp;amp;&amp;amp;brother.right.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;383&lt;/span&gt;                                 brother.right.color =&lt;span&gt; parent.color;
&lt;/span&gt;&lt;span&gt;384&lt;/span&gt;                                 parent.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;385&lt;/span&gt; &lt;span&gt;                                leftRotate(brother);
&lt;/span&gt;&lt;span&gt;386&lt;/span&gt; &lt;span&gt;                                rightRotate(parent);
&lt;/span&gt;&lt;span&gt;387&lt;/span&gt;                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case2.3.4:兄弟节点为黑色,左侄子为红色&lt;/span&gt;
&lt;span&gt;388&lt;/span&gt;                             }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;((brother.color==black)&amp;amp;&amp;amp;brother.left!=&lt;span&gt;null&lt;/span&gt;&amp;amp;&amp;amp;brother.left.color==&lt;span&gt;red){
&lt;/span&gt;&lt;span&gt;389&lt;/span&gt;                                 brother.color =&lt;span&gt; parent.color;
&lt;/span&gt;&lt;span&gt;390&lt;/span&gt;                                 parent.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;391&lt;/span&gt;                                 brother.left.color =&lt;span&gt; black;
&lt;/span&gt;&lt;span&gt;392&lt;/span&gt; &lt;span&gt;                                rightRotate(parent);
&lt;/span&gt;&lt;span&gt;393&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;394&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;395&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;396&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;397&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;398&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;最后别忘了删掉这个节点&lt;/span&gt;
&lt;span&gt;399&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(pointer_old.parent.left ==&lt;span&gt; pointer_old){
&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;                     pointer_old.parent.left = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;401&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;((pointer_old.parent.right ==&lt;span&gt; pointer_old)){
&lt;/span&gt;&lt;span&gt;402&lt;/span&gt;                     pointer_old.parent.right = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;403&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;404&lt;/span&gt;                 pointer_old.parent = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;405&lt;/span&gt; 
&lt;span&gt;406&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;407&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;408&lt;/span&gt; 
&lt;span&gt;409&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除单分支节点（此时删除节点必为红色，子树仅为一个叶子节点）。子树（就是一个叶子节点）顶上来涂黑即可。&lt;/span&gt;
&lt;span&gt;410&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeOneBranchNode(Node pointer){
&lt;/span&gt;&lt;span&gt;411&lt;/span&gt;             Node child = pointer.left!=&lt;span&gt;null&lt;/span&gt;?&lt;span&gt;pointer.left:pointer.right;
&lt;/span&gt;&lt;span&gt;412&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(pointer.parent.left==&lt;span&gt;pointer){
&lt;/span&gt;&lt;span&gt;413&lt;/span&gt;                 pointer.parent.left =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;414&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;415&lt;/span&gt;                 pointer.parent.right =&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt;416&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;417&lt;/span&gt;             child.parent =&lt;span&gt; pointer.parent;
&lt;/span&gt;&lt;span&gt;418&lt;/span&gt;             child.color=&lt;span&gt;black;
&lt;/span&gt;&lt;span&gt;419&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;420&lt;/span&gt; 
&lt;span&gt;421&lt;/span&gt; 
&lt;span&gt;422&lt;/span&gt; 
&lt;span&gt;423&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上文中泛型E的测试用类及其打印接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Element &lt;span&gt;implements&lt;/span&gt; Comparable&amp;lt;Element&amp;gt;&lt;span&gt; ,PrintToDOS{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Element(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; println() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        System.out.println(value);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; print() { System.out.print(value); }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;this大于element返回1，小于返回-1，相等返回0&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(Element element) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.value&amp;gt;&lt;span&gt;element.value){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.value&amp;lt;&lt;span&gt;element.value){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;  -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;  0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;打印接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; PrintToDOS {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; print();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印值但不换行&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; println();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印值后换行&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;初次发布的时候忘了加测试结果了QAQ，补上：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/2083829/202007/2083829-20200723233825409-8220415.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;最后，本文如有纰漏还请dalao们指正。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2083829/202007/2083829-20200723224904408-895079285.png&quot; alt=&quot;&quot; width=&quot;142&quot; height=&quot;144&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Thu, 23 Jul 2020 14:52:00 +0000</pubDate>
<dc:creator>469の一方爬行</dc:creator>
<og:description>在阅读其他博主关于红黑树增删实现的时候，博主们大多直接使用文字图片描述，对整个增删整体的流程突出的不太明显（当然dalao们写得还是很棒得，不然我也写不出这篇文章）。 所以我特意花了2天时间用CAD制</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/469Accelerator/p/13368981.html</dc:identifier>
</item>
<item>
<title>【Nginx】并发量太高，Nginx扛不住？这次我错怪Nginx了！！ - 冰河团队</title>
<link>http://www.cnblogs.com/binghe001/p/13369332.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/binghe001/p/13369332.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;最近，在服务器上搭建了一套压测环境，不为别的，就为压测下Nginx的性能，到底有没有传说中的那么牛逼！具体环境为：11台虚拟机，全部安装CentOS 6.8 64位操作系统，1台安装部署Nginx，其他10台作为客户端同时以压满CPU的线程向Nginx发送请求，对Nginx进行压测。没想到，出现问题了！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;nginx报错&quot;&gt;Nginx报错&lt;/h2&gt;
&lt;p&gt;Nginx服务器访问量非常高，在Nginx的错误日志中不停的输出如下错误信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
2020-07-23 02:53:49 [alert] 13576#0: accept() failed (24: Too many open files)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据错误日志的输出信息，我们可以看出：是打开的文件句柄数太多了，导致Nginx报错了！那我们该如何解决这个问题呢？&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;问题分析&lt;/h2&gt;
&lt;p&gt;既然我们能够从Nginx的错误日志中基本能够确定导致问题的原因，那这到底是不是Nginx本身的问题呢？答案为：是，也不全是！&lt;/p&gt;
&lt;p&gt;为啥呢？原因很简单：Nginx无法打开那么多的文件句柄，一方面是因为我没有配置Nginx能够打开的最大文件数；另一方面是因为CentOS 6.8操作系统本身对打开的最大文件句柄数有限制，我同样没有配置操作系统的最大文件句柄数。所以说，不全是Nginx的锅！在某种意义上说，我错怪Nginx了！&lt;/p&gt;
&lt;p&gt;在CentOS 6.8服务器中，我们可以在命令行输入如下命令来查看服务器默认配置的最大文件句柄数。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe150 ~]# ulimit -n
1024
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，在CentOS 6.8服务器中，默认的最大文件句柄数为1024。&lt;/p&gt;
&lt;p&gt;此时，当Nginx的连接数超过1024时，Nginx的错误日志中就会输出如下错误信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[alert] 13576#0: accept() failed (24: Too many open files)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;解决问题&quot;&gt;解决问题&lt;/h2&gt;
&lt;p&gt;那我们该如何解决这个问题呢？其实，也很简单，继续往下看！&lt;/p&gt;
&lt;p&gt;使用如下命令可以把打开文件句柄数设置的足够大。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;ulimit -n 655350
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同时修改nginx.conf ， 添加如下配置项。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;worker_rlimit_nofile 655350; 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：上述配置需要与error_log同级别。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样就可以解决Nginx连接过多的问题，Nginx就可以支持高并发（这里需要配置Nginx）。&lt;/p&gt;
&lt;p&gt;另外， &lt;code&gt;ulimit -n&lt;/code&gt; 还会影响到MySQL的并发连接数。把它提高，也可以提高MySQL的并发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意： 用 &lt;code&gt;ulimit -n 655350&lt;/code&gt; 修改只对当前的shell有效，退出后失效。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;永久解决问题&quot;&gt;永久解决问题&lt;/h2&gt;
&lt;p&gt;若要令修改ulimits的数值永久生效，则必须修改配置文件，可以给ulimit修改命令放入/etc/profile里面，这个方法实在是不方便。&lt;/p&gt;
&lt;p&gt;还有一个方法是修改/etc/security/limits.conf配置文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ba&quot;&gt;vim /etc/security/limits.conf
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在文件最后添加如下配置项。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;* soft nofile 655360
* hard nofile 655360
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;保存并退出vim编辑器。&lt;/p&gt;
&lt;p&gt;其中：星号代表全局， soft为软件，hard为硬件，nofile为这里指可打开的文件句柄数。&lt;/p&gt;
&lt;p&gt;最后，需要注意的是：要使 limits.conf 文件配置生效，必须要确保 pam_limits.so 文件被加入到启动文件中。查看 /etc/pam.d/login 文件中是否存在如下配置。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;session required /lib64/security/pam_limits.so
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不存在，则需要添加上述配置项。&lt;/p&gt;
&lt;h2 id=&quot;获取福利&quot;&gt;获取福利&lt;/h2&gt;
&lt;p&gt;关注「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号，后台回复 “设计模式” 关键字领取《深入浅出Java 23种设计模式》PDF文档。回复“Java8”关键字领取《Java8新特性教程》PDF文档。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;好了，今天就聊到这儿吧！别忘了点个赞，给个在看和转发，让更多的人看到，一起学习，一起进步！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;如果你觉得冰河写的还不错，请微信搜索并关注「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号，跟冰河学习高并发、分布式、微服务、大数据、互联网和云原生技术，「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号更新了大量技术专题，每一篇技术文章干货满满！不少读者已经通过阅读「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号文章，吊打面试官，成功跳槽到大厂；也有不少读者实现了技术上的飞跃，成为公司的技术骨干！如果你也想像他们一样提升自己的能力，实现技术能力的飞跃，进大厂，升职加薪，那就关注「 &lt;strong&gt;冰河技术&lt;/strong&gt; 」微信公众号吧，每天更新超硬核技术干货，让你对如何提升技术能力不再迷茫！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200716220443647.png#pic_center&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 23 Jul 2020 14:46:00 +0000</pubDate>
<dc:creator>冰河团队</dc:creator>
<og:description>写在前面 最近，在服务器上搭建了一套压测环境，不为别的，就为压测下Nginx的性能，到底有没有传说中的那么牛逼！具体环境为：11台虚拟机，全部安装CentOS 6.8 64位操作系统，1台安装部署Ng</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/binghe001/p/13369332.html</dc:identifier>
</item>
<item>
<title>性能测试 -- docker安装influxdb - mua~mua~</title>
<link>http://www.cnblogs.com/mua9102/p/12995337.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mua9102/p/12995337.html</guid>
<description>&lt;p&gt;一、前提&lt;/p&gt;
&lt;p&gt;　　1、项目已经部署好&lt;/p&gt;
&lt;p&gt;　　2、docker已经安装好&lt;/p&gt;


&lt;p&gt;二、docker安装influxdb&lt;/p&gt;
&lt;p&gt;　　1、下载influxdb镜像：docker pull tutum/influxdb&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200530115249931-1940336822.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　　   1）超时报错：&lt;/p&gt;
&lt;p&gt;　　　　2）解决办法：vim /etc/docker/daemon.json（应该只有一个key.json文件而没有daemon.json文件，如果没有daemon.json文件就直接新建就好了。）&lt;/p&gt;
&lt;p&gt;　　　　　　　添加阿里的镜像源：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exec-opts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;native.cgroupdriver=systemd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log-driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json-file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log-opts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;max-size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insecure-registries&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:[
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.180.105:1180&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                      ],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;registry-mirrors&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://6kx4zyno.mirror.aliyuncs.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2、查询influxdb是否下载成功：docker images&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531135522472-1484524623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　3、打开8083和8086端口：firewall-cmd --zone=public --add-port=8083-8086/tcp --permanent&lt;/p&gt;

&lt;p&gt;　　4、启动influxdb容器：&lt;/p&gt;
&lt;p&gt;　　　　1）启动：docker run -d -p 8083:8083 -p 8086:8086 --name my_influxdb influxdb（--name 就是把influxdb容器命名为 “my_influxdb”）&lt;/p&gt;
&lt;p&gt;　　　　2）启动号容器后，会产生这个钥匙，要记住，后面需要用到。570c48b4a919fb01d86025641c98bc6f33abe3180440dda8b58d40637e40f0cf&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531135814197-1575131972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　　　3）查看docker内启动了哪些东西：docker ps&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531140039738-487210758.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　5、进入influxdb容器&lt;/p&gt;
&lt;p&gt;　　　　1）进入的命令：docker exec -it my_influxdb bash&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531140501474-984775187.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　6、进入/usr/bin目录，可以查看influxdb的工具&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531140819390-321393732.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　7、进入influxdb客户端命令行&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531140931097-1285311215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　8、创建名为 “jmeter” 的库&lt;/p&gt;
&lt;p&gt;　　　　1）执行类sql语句： creat database jmeter;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531141428602-422118482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　9、使用 “jmeter” 库（就取名 “jmeter”，因为我用jmeter做性能，后面在 jmeter 的 “后端监听器” 中需要这个名字）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531141540535-1721717161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　10、查询一下（结果是空，因为这时候还没有数据产生）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531143925873-1814555395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;三、jmeter连接docker中的influxdb&lt;/p&gt;
&lt;p&gt;　　1、给&lt;strong&gt;线程组&lt;/strong&gt;添加一个“&lt;strong&gt;后端监听器&lt;/strong&gt;”(backend Listener)&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531142527753-1425908479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　2、设置 后端监听器（backend Listener）&lt;/p&gt;
&lt;p&gt;　　　　1）选择对 influxdb 监听&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531143145753-2010023895.png&quot; alt=&quot;&quot; width=&quot;1023&quot; height=&quot;245&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 　　　　2）配置监听器&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531143624469-1880671365.png&quot; alt=&quot;&quot; width=&quot;926&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 　　3、运行一下 jmx脚本，看能否把数据传入到 influxdb 的 jmeter 库中。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531144312765-1889427037.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　4、在 influxdb 客户端命令查询 jmeter库，看看是否产生了数据&lt;/p&gt;
&lt;p&gt;　　select * from jmeter;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1890192/202005/1890192-20200531144417183-889260499.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;influxdb部署完成！！！接下来部署grafana&lt;/p&gt;

</description>
<pubDate>Thu, 23 Jul 2020 14:30:00 +0000</pubDate>
<dc:creator>mua~mua~</dc:creator>
<og:description>一、前提 1、项目已经部署好 2、docker已经安装好 二、docker安装influxdb 1、下载influxdb镜像：docker pull tutum/influxdb 1）超时报错： 2）</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/mua9102/p/12995337.html</dc:identifier>
</item>
</channel>
</rss>