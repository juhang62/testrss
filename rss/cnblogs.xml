<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>微软到底有多恐怖? - dotnetcms.org工作室</title>
<link>http://www.cnblogs.com/mqingqing123/p/12128210.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mqingqing123/p/12128210.html</guid>
<description>&lt;p&gt;最近在做Office365开发，所以了解了微软云和Office365，这里给大家截图看看微软到底有多少功能，看看你会多少知识？&lt;/p&gt;
&lt;p&gt;看的有点怀疑人生。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）微软云服务体系列表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一个大类，每个类别点进去，都是更细的小类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082609312-384272464.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082617401-697084313.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082626082-452346658.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082631229-1911870028.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082635298-1116929837.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082640044-770241087.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082658511-4416335.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082702424-1826103941.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082706523-1039775401.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082710030-1349295096.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082713871-1078959447.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082718471-1801139155.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 点击上面分类里的“标识”，进去后又可以看到N多功能。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101083658372-50716719.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;（2）Office365&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微软Office365可能大家更熟悉，里面有word，excel，powerpoint，outlook，sharepoint... 每一个都是巨无霸&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082852269-183251110.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082902365-1954211792.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082907479-792040683.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/7841/202001/7841-20200101082913403-1483044599.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 01 Jan 2020 00:32:00 +0000</pubDate>
<dc:creator>dotnetcms.org工作室</dc:creator>
<og:description>最近在做Office365开发，所以了解了微软云和Office365，这里给大家截图看看微软到底有多少功能，看看你会多少知识？还有哪些不懂的？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/mqingqing123/p/12128210.html</dc:identifier>
</item>
<item>
<title>一篇长文说 git 基础 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/12128087.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/12128087.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git/git_thumb.jpg&quot; alt=&quot;git_thumb&quot;/&gt;&lt;/p&gt;
&lt;p&gt;版本管理在产品级开发中是非常重要的一个部分，它涉及到团队协作，且影响到产品最终的发布、上线以及测试环节，当前最流行的版本控制系统是 git。git 内容非常多，本文尽量克制地来介绍 git 的基础内容&lt;/p&gt;
&lt;h3 id=&quot;概述&quot;&gt;概述&lt;/h3&gt;
&lt;h4 id=&quot;版本控制系统的作用&quot;&gt;版本控制系统的作用&lt;/h4&gt;
&lt;p&gt;版本控制系统(Version Control System)是一种记录若干文件修订记录的系统，它有以下三个作用：&lt;/p&gt;
&lt;p&gt;1、从当前版本回退到任意版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git/git_base_01.png&quot; alt=&quot;git_base&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、查看历史版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git/git_base_02.png&quot; alt=&quot;git_base&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、对比两个版本差异&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git/git_base_03.png&quot; alt=&quot;git_base&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-优势&quot;&gt;git 优势&lt;/h4&gt;
&lt;p&gt;1、速度快&lt;/p&gt;
&lt;p&gt;2、设计简单&lt;/p&gt;
&lt;p&gt;3、轻量级的分支操作，允许上千个并行开发的分支，对非线性开发模式的强力支持&lt;/p&gt;
&lt;p&gt;4、有能力高效管理类似 linux 内核一样的超大规模项目&lt;/p&gt;
&lt;p&gt;5、git 已经成为事实上的标准，几乎所有优秀的前端项目都通过 git 来进行版本控制&lt;/p&gt;
&lt;p&gt;6、社区成熟活跃，git 的流行离不开 github 的贡献&lt;/p&gt;
&lt;h4 id=&quot;重要概念&quot;&gt;重要概念&lt;/h4&gt;
&lt;p&gt;要理解 git，首先要了解 git 中的重要概念&lt;/p&gt;
&lt;p&gt;【术语介绍】&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;repository 仓库
branch 分支
summary 概要
track 跟踪
modify 修改
stage 暂存
commit 提交
push 推送
pull 拉取
clone 克隆
amend 修改
merge 合并
conflict 冲突
origin 起源
upstream 上游
downstream 下游
verbose 冗长的
reflog 回流&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【&lt;code&gt;.git&lt;/code&gt; 目录】&lt;/p&gt;
&lt;p&gt;每个项目都有一个 git 目录(如果 &lt;code&gt;git clone&lt;/code&gt; 出来的话，就是其中&lt;code&gt;.git&lt;/code&gt; 的目录)，它是 git 用来保存元数据和对象数据库的地方。这个目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据&lt;/p&gt;
&lt;p&gt;【三种状态】&lt;/p&gt;
&lt;p&gt;对于任何一个文件，在 git 中都只有三种状态：已提交(committed)，已修改(modified)和已暂存(staged)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;已提交：该文件已经被安全地保存在本地数据库中了
已修改：修改了某个文件，但还没有提交保存
已暂存：把已修改的文件放在下次提交时要保存的清单中&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文化的三种状态正好对应文件流转的三个工作区域：git 的工作目录，暂存区域，以及本地仓库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git_base3.png&quot; alt=&quot;git_fileStatus&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面来分别解释下，这三个工作区域&lt;/p&gt;
&lt;p&gt;工作目录是对项目的某个版本独立提取出来的内容&lt;/p&gt;
&lt;p&gt;暂存区域是一个简单的文件，一般都放在 &lt;code&gt;.git&lt;/code&gt; 目录中。有时候人们会把这个文件叫做索引文件&lt;/p&gt;
&lt;p&gt;本地仓库就是指的 &lt;code&gt;.git&lt;/code&gt; 目录&lt;/p&gt;
&lt;p&gt;基本的 git 工作流程如下：&lt;/p&gt;
&lt;p&gt;1、在工作目录中修改某些文件&lt;/p&gt;
&lt;p&gt;2、对修改后的文件进行快照，然后保存到暂存区域&lt;/p&gt;
&lt;p&gt;3、提交更新，将保存在暂存区域的文件快照永久转储到Git目录中&lt;/p&gt;
&lt;p&gt;【commit 哈希值】&lt;/p&gt;
&lt;p&gt;在保存到 git 之前，所有数据都要进行内容的校验和(checksum)计算，并将此结果作为数据的唯一标识和索引，而不是文件名&lt;/p&gt;
&lt;p&gt;git 使用 &lt;code&gt;SHA-1&lt;/code&gt; 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个SHA-1哈希值，作为指纹字符串。该字符串由40个十六进制字符(0-9及a-f)组成，看起来就像是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;23b9da6552252987aa493b52f8696cd6d3b00372&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;git-配置&quot;&gt;git 配置&lt;/h3&gt;
&lt;h4 id=&quot;配置级别&quot;&gt;配置级别&lt;/h4&gt;
&lt;p&gt;git 共有三个配置级别&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;　　--local【默认，高优先级】：只影响本仓库，文件为.git/config

　　--global【中优先级】：影响到所有当前用户的git仓库，文件为~/.gitconfig

　　--system【低优先级】：影响到全系统的git仓库，文件为/etc/gitconfig&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;基础配置&quot;&gt;基础配置&lt;/h4&gt;
&lt;p&gt;一般在新的系统上，需要先配置下自己的 git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要随时可以用相同的命令修改已有的配置&lt;/p&gt;
&lt;p&gt;1、用户名&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git config --global user.name &quot;xiaohuochai&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、邮箱&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git config --global user.email &quot;121631835@qq.com&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、文本编辑器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git config --global core.editor &quot;code --wait&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、更改 git 处理行结束条符的方式&lt;/p&gt;
&lt;p&gt;Windows 使用回车（CR）和换行（LF）两个字符来结束一行，而 Mac 和 Linux 只使用换行（LF）一个字符。下面的代码告诉 git 在提交时把回车和换行转换成换行，检出时不转换。这样在 Windows 上的检出文件中会保留回车和换行，而在 Mac 和 Linux 上，以及版本库中会保留换行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git config --global core.autocrlf input&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、取消对中文的转义&lt;/p&gt;
&lt;p&gt;使用 git 时，经常会碰到有一些中文文件名或者路径被转义成\xx\xx\xx的情况，通过下面的配置可以改变默认转义&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git config --global core.quotepath false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、只允许 push 当前分支到远程同名分支上&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git config --global push.default simple&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;查看配置&quot;&gt;查看配置&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;git config --list # 查看所有配置
git config --list --global # 查看全局配置
git config user.name # 查看某个配置项&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果要删除或修改配置，更简单的办法是直接打开&lt;code&gt;~/.gitconfig&lt;/code&gt;文件，或者&lt;code&gt;.git/config&lt;/code&gt;文件修改即可&lt;/p&gt;
&lt;h4 id=&quot;关于忽略的配置&quot;&gt;关于忽略的配置&lt;/h4&gt;
&lt;p&gt;一般总会有些文件无需纳入 git 的管理，也不希望它们总出现在未跟踪文件列表&lt;/p&gt;
&lt;p&gt;可以在项目根目录创建一个名为 &lt;code&gt;.gitignore&lt;/code&gt; 的文件，列出要忽略的文件模式&lt;/p&gt;
&lt;p&gt;文件 &lt;code&gt;.gitignore&lt;/code&gt; 的格式规范如下：&lt;/p&gt;
&lt;p&gt;1、所有空行或者以注释符号 ＃ 开头的行都会被 git 忽略&lt;/p&gt;
&lt;p&gt;2、可以使用标准的glob模式匹配&lt;/p&gt;
&lt;p&gt;3、匹配模式以反斜杠(/)开头防止递归&lt;/p&gt;
&lt;p&gt;4、匹配模式最后跟反斜杠(/)说明要忽略的是目录&lt;/p&gt;
&lt;p&gt;5、要忽略指定模式以外的文件或目录，可以在模式前加上叹号(!)取反&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; 文件常见设置如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node_modules/
ecosystem.json
.DS_Store
.idea
.vscode&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;ssh-配置&quot;&gt;SSH 配置&lt;/h4&gt;
&lt;p&gt;如果要进行远程操作，即从 github 远程服务器 push 和 pull 代码，需要解决一个问题，就是 github 怎么知道是我在提交我的代码？&lt;br/&gt;除了每次输入用户名、密码外，更简单的方式是配置 SSH&lt;/p&gt;
&lt;p&gt;大多数 git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权&lt;/p&gt;
&lt;p&gt;首先先确认一下是否已经有一个公钥了。SSH公钥默认储存在账户的主目录下的 &lt;code&gt;~/.ssh&lt;/code&gt; 目录，有.pub后缀的文件就是公钥，另一个文件则是密钥&lt;/p&gt;
&lt;p&gt;然后，使用如下命令来生成 SSH key，然后一路回车，使用默认值即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ ssh-keygen -t rsa -b 4096 -C 121631835@qq.com&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果一切顺利的话，可以在用户主目录里找到 &lt;code&gt;.ssh&lt;/code&gt; 目录，里面有 &lt;code&gt;id_rsa&lt;/code&gt; 和 &lt;code&gt;id_rsa.pub&lt;/code&gt; 两个文件，这两个就是 SSH Key 的秘钥对，&lt;code&gt;id_rsa&lt;/code&gt; 是私钥，不能泄露出去，&lt;code&gt;id_rsa.pub&lt;/code&gt; 是公钥，可以放心地告诉任何人&lt;/p&gt;
&lt;p&gt;SSH的公钥如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3ltgCdqTIrPuN6yMYCeSMg8shtM+TRBIULDmfeh/9lE51e2g2t8ytLxz/QrPu3jvvpBqMimyPxC0NyW38eIHP9dkXTS0V76LlXy1MZvIjP3SnaU3AJs/fke61wc9y9EdPfrpSjIZpG7Z134+huaioLhPRShRmUQjl3plC9a89fnCyzTmtix5fDKKFjU3ZU6uVSDPy8+o+vsTfwAPQ1ylaBbY733Y1shmd6Texwmb8ttkv1Xj31RdhTdSS2eI3pSN/Ld1GC6/d2u3zcLnC6T4+1WLd0KTm/lqdzB2uWSsnMBI11wfKdw3pqEI17oGrPxurmunoMPzyR/dHwkfwotwh 121631835@qq.com&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，登陆 gitHub，打开 &lt;code&gt;Settings&lt;/code&gt; 中的 &lt;code&gt;SSH Keys&lt;/code&gt; 页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git_trusteeship6.png&quot; alt=&quot;github&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，点 &lt;code&gt;New SSH Key&lt;/code&gt;，填上任意 Title，在 Key 文本框里粘贴 &lt;code&gt;id_rsa.pub&lt;/code&gt; 文件的内容&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;Add SSH key&lt;/code&gt; 按钮后，即算配置完成了&lt;/p&gt;
&lt;p&gt;接下来，使用 &lt;code&gt;ssh -T git@github.com&lt;/code&gt; 来测试 SSH 是否配置成功&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ ssh -T git@github.com
Hi littlematch0123! You've successfully authenticated, but GitHub does not provide shell access.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;回到这部分最开始的问题，在请求代码时，我怎么知道对方是 github 呢？也需要 github 提供一个公钥给我，所以在第一次连接 github 时要选择 yes 来接受对方的公钥，也就是下面的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ ssh -T git@github.com
The authenticity of host 'github.com (13.250.177.223)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
warning: Permanently added 'github.com' (rsa) to the list of known hosts
Hi littlematch0123! You've successfully authenticated, but GitHub does not provide shell access.&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;git-基础操作&quot;&gt;git 基础操作&lt;/h3&gt;
&lt;h4 id=&quot;初始化新仓库&quot;&gt;初始化新仓库&lt;/h4&gt;
&lt;p&gt;要对现有的某个项目开始用 git 管理，只需到此项目所在的目录，执行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git init&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;初始化后，在当前目录下会出现一个名为 &lt;code&gt;.git&lt;/code&gt; 的目录，所有 git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但还没有开始跟踪管理项目中的任何一个文件&lt;/p&gt;
&lt;h4 id=&quot;检查文件状态&quot;&gt;检查文件状态&lt;/h4&gt;
&lt;p&gt;要确定哪些文件当前处于什么状态，可以用 &lt;code&gt;git status&lt;/code&gt; 命令&lt;/p&gt;
&lt;p&gt;如果在取得仓库之后立即执行此命令，会看到类似这样的输出&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status
On branch master
Initial commit
nothing to commit(create/copy files and use &quot;git add&quot; to track)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这说明现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过，或者没有任何文件&lt;/p&gt;
&lt;p&gt;现在创建一个新文件README，保存退出后运行 &lt;code&gt;git status&lt;/code&gt; 会看到该文件出现在未跟踪文件列表中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status
On branch master

No commits yet

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

    README.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在状态报告中可以看到新建的README文件出现在“Untracked files”下面。未跟踪的文件意味着 git 在之前的快照(提交)中没有这些文件&lt;/p&gt;
&lt;h4 id=&quot;跟踪新文件&quot;&gt;跟踪新文件&lt;/h4&gt;
&lt;p&gt;使用命令 &lt;code&gt;git add&lt;/code&gt; 开始跟踪一个新文件。所以，要跟踪README文件，运行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git add README.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用命令 &lt;code&gt;git add .&lt;/code&gt; 会批量跟踪所有工作目录下未被跟踪的文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git add .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时再运行 &lt;code&gt;git status&lt;/code&gt; 命令，会看到README文件已被跟踪，并处于暂存状态&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status
On branch master

No commits yet

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只要在“Changes to be committed”这行下面的，就说明是已暂存状态&lt;/p&gt;
&lt;h4 id=&quot;暂存已修改文件&quot;&gt;暂存已修改文件&lt;/h4&gt;
&lt;p&gt;现在修改下之前已跟踪过的文件README.txt，将其内容修改为hello world&lt;/p&gt;
&lt;p&gt;然后再次运行status命令，会看到这样的状态报告：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ echo hello world &amp;gt; README.txt
$ git status
On branch master

No commits yet

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README.txt

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

    modified:   README.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件README.txt出现在 “Changes not staged for commit” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行git add命令&lt;/p&gt;
&lt;p&gt;git add 命令是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等&lt;/p&gt;
&lt;p&gt;因此，将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适&lt;/p&gt;
&lt;p&gt;现在运行 &lt;code&gt;git add&lt;/code&gt; 将README.txt放到暂存区，然后再看看git status的输出&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status
On branch master

No commits yet

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;提交更新&quot;&gt;提交更新&lt;/h4&gt;
&lt;p&gt;每次准备提交前，先用 &lt;code&gt;git status&lt;/code&gt; 看下，是不是都已暂存起来了，然后再运行提交命令&lt;code&gt;git commit&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git commit&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种方式会启动文本编辑器以便输入本次提交的说明，编辑器会显示类似下面的文本信息&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   new file:   README.txt
#
# Changes not staged for commit:
#   modified:   README.txt
#&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，默认的提交消息包含最后一次运行 &lt;code&gt;git status&lt;/code&gt; 的输出，放在注释行里，另外开头还有一空行，需要输入提交说明&lt;/p&gt;
&lt;p&gt;另外也可以用 &lt;code&gt;-m&lt;/code&gt; 参数后跟提交说明的方式，在一行命令中提交更新&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git commit -m '更新 README 内容'
[master 34c5aa0] 更新 README 内容
 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;提交后它会提示，当前是在哪个分支(master)提交的，本次提交的完整SHA-1校验和是什么(34c5aa0)，以及在本次提交中，有多少文件修订过，多少行添改和删改过&lt;/p&gt;
&lt;p&gt;在提交的时候，给 &lt;code&gt;git commit&lt;/code&gt; 加上 &lt;code&gt;-a&lt;/code&gt; 选项，git 会自动把所有已经跟踪过的文件暂存起来一并提交&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git commit -am '更新 README'
[master daa40d0] 更新 README
 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，跳过 &lt;code&gt;git add&lt;/code&gt; 步骤，不等于完全不使用 &lt;code&gt;git add&lt;/code&gt;。因为 &lt;code&gt;git commit -a&lt;/code&gt; 是将所有跟踪过的文件暂存起来并提交，只是省略了暂存这一步。但一个未跟踪状态的文件需要使用 &lt;code&gt;git add&lt;/code&gt; 命令来使其变成已跟踪状态&lt;/p&gt;
&lt;p&gt;还有一种提交方式是使用 &lt;code&gt;-v&lt;/code&gt; 或&lt;code&gt;--verbose&lt;/code&gt;选项，翻译成中文是冗余的，它不仅能回顾刚刚修改的内容，而且会迫使把提交理由写得更详细些&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;将 README 内容中的 12345 去掉
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
# Changes to be committed:
#   modified:   README.txt
#
# ------------------------ &amp;gt;8 ------------------------
# Do not modify or remove the line above.
# Everything below it will be ignored.
diff --git a/README.txt b/README.txt
index 5c1d8ad..95d09f2 100644
--- a/README.txt
+++ b/README.txt
@@ -1 +1 @@
-hello world12345
\ No newline at end of file
+hello world
\ No newline at end of file&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git commit --verbose
[master 2494a62] 将 README 内容中的 12345 去掉
 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;git-查看&quot;&gt;git 查看&lt;/h3&gt;
&lt;h4 id=&quot;状态简览&quot;&gt;状态简览&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; 命令的输出十分详细，但其用语有些繁琐。 如果使用 &lt;code&gt;git status -s&lt;/code&gt; 命令或 &lt;code&gt;git status --short&lt;/code&gt; 命令，将得到一种更为紧凑的格式输出&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status -s
 M README   # 文件被修改，但还没有放入暂存区
MM Rakefile # 在工作区被修改并提交到暂存区后又在工作区中被修改了
A  lib/git.rb # 新添加到暂存区中的文件
M  lib/simplegit.rb # 文件被修改，且放入了暂存区
?? LICENSE.txt # 新添加的未跟踪的文件&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一般地，&lt;code&gt;-s&lt;/code&gt; 选项与&lt;code&gt;-b&lt;/code&gt;选项同时使用，&lt;code&gt;s&lt;/code&gt; 代表 summary(概要)，&lt;code&gt;b&lt;/code&gt; 代表 branch(分支)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status -sb
## master...origin/master [ahead 1]
 M &quot;git.md&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;状态详览&quot;&gt;状态详览&lt;/h4&gt;
&lt;p&gt;如果在知道具体哪行发生了改变，要使用 &lt;code&gt;git diff&lt;/code&gt; 命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; 命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容，如果暂存了所有更新过的文件后，则运行 &lt;code&gt;git diff&lt;/code&gt; 后会什么都没有&lt;/p&gt;
&lt;p&gt;下面的代码中，README.txt 文件的内容从 'hello world1' 变化到 'hello world123'&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git diff
diff --git a/README.txt b/README.txt
index 62b372b..6d7f756 100644
--- a/README.txt
+++ b/README.txt
@@ -1 +1 @@
-hello world1
\ No newline at end of file
+hello world123
\ No newline at end of file&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 &lt;code&gt;git diff--cached&lt;/code&gt; 命令&lt;/p&gt;
&lt;p&gt;下面的代码中，README.txt 文件的内容从空内容变化到 'hello world1'&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git diff --cached
diff --git a/README.txt b/README.txt
new file mode 100644
index 0000000..62b372b
--- /dev/null
+++ b/README.txt
@@ -0,0 +1 @@
+hello world1
\ No newline at end of file&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;查看提交历史&quot;&gt;查看提交历史&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;git log&lt;/code&gt; 命令可以查看提交历史&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git log
commit 3f7b9ed403e6d624651014a5d15c481463572c15 (HEAD -&amp;gt; master)
Author: xiaohuochai &amp;lt;121631835@qq.com&amp;gt;
Date:   Sun Dec 29 23:19:44 2019 +0800

    add b

commit ee5ae6f1dd5f620f4d2ac4a3702eb4814a062fce
Author: xiaohuochai &amp;lt;121631835@qq.com&amp;gt;
Date:   Sun Dec 29 23:15:10 2019 +0800

    delete c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认不用任何参数的话，&lt;code&gt;git log&lt;/code&gt; 会按提交时间列出所有的更新，最近的更新排在最上面，每次更新都有一个SHA-1校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明&lt;/p&gt;
&lt;p&gt;我们常用 &lt;code&gt;-p&lt;/code&gt; 选项展开显示每次提交的内容差异，用 &lt;code&gt;-2&lt;/code&gt; 则仅显示最近的两次更新&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git log -p -2
commit 3f7b9ed403e6d624651014a5d15c481463572c15 (HEAD -&amp;gt; master)
Author: xiaohuochai &amp;lt;121631835@qq.com&amp;gt;
Date:   Sun Dec 29 23:19:44 2019 +0800

    add b

diff --git a/b1 b/b1
new file mode 100644
index 0000000..e69de29

commit ee5ae6f1dd5f620f4d2ac4a3702eb4814a062fce
Author: xiaohuochai &amp;lt;121631835@qq.com&amp;gt;
Date:   Sun Dec 29 23:15:10 2019 +0800

    delete c

diff --git a/c b/c
deleted file mode 100644
index e69de29..0000000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该选项除了显示基本信息之外，还在附带了每次 commit 的变化。当进行代码审查，或者快速浏览某个搭档提交的 commit 的变化时，这个参数就非常有用了&lt;/p&gt;
&lt;p&gt;可以用 &lt;code&gt;--oneline&lt;/code&gt; 选项将每个提交放在一行显示，这在提交数很大时非常有用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git log --oneline
3f7b9ed (HEAD -&amp;gt; master) add b
ee5ae6f delete c&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;git-命令历史&quot;&gt;git 命令历史&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt; 命令按照之前经过的所有的 &lt;code&gt;commit&lt;/code&gt; 路径按序来排列，用来记录每一次命令，常用于版本切换的辅助操作中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git reflog&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;git-版本切换&quot;&gt;git 版本切换&lt;/h3&gt;
&lt;p&gt;git 要进行版本切换，就必须知道当前版本是哪个版本。在 git 中，用 &lt;code&gt;HEAD&lt;/code&gt; 来表示当前版本，也就是最新的提交，上一个版本就是 &lt;code&gt;HEAD^&lt;/code&gt;，上上一个版本就是 &lt;code&gt;HEAD^^&lt;/code&gt;，当然往上100个版本写100个^比较容易数不过来，所以写成 &lt;code&gt;HEAD~100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先使用 &lt;code&gt;git log --online&lt;/code&gt; 来简览当前的提交历史&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git log --oneline
e7422c8 (HEAD -&amp;gt; master) add b
ee5ae6f delete c
8760a0f add c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用命令 &lt;code&gt;git reset --hard commit_id&lt;/code&gt; 在版本的历史之间切换&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; git reset --hard HEAD^
HEAD is now at ee5ae6f delete c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再使用 &lt;code&gt;git log --online&lt;/code&gt; 来简览提交历史，发现最新的那个版本已经看不到了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git log --oneline
ee5ae6f (HEAD -&amp;gt; master) delete c
8760a0f add c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果找到最新版本的提交对象呢？ git提供了一个命令 &lt;code&gt;git reflog&lt;/code&gt;，该命令按照之前经过的所有的 &lt;code&gt;commit&lt;/code&gt; 路径按序来排列，用来记录每一次命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git reflog
ee5ae6f (HEAD -&amp;gt; master) HEAD@{0}: reset: moving to HEAD^
e7422c8 HEAD@{1}: commit (amend): add b
3f7b9ed HEAD@{2}: commit: add b
ee5ae6f (HEAD -&amp;gt; master) HEAD@{3}: commit: delete c
8760a0f HEAD@{4}: commit: add c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从 &lt;code&gt;git reflog&lt;/code&gt; 命令返回的结果中发现，e7422c8 是最新版本的 commit id&lt;/p&gt;
&lt;p&gt;　　下面使用 &lt;code&gt;git reset --hard&lt;/code&gt; 命令，将文件恢复到最新版本&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git reset --hard e7422c8
HEAD is now at e7422c8 add b&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;git-分支管理&quot;&gt;git 分支管理&lt;/h3&gt;
&lt;p&gt;几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着可以从开发主线上分离开来，然后在不影响主线的同时继续工作。&lt;/p&gt;
&lt;p&gt;git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针，即一个包含所指对象校验和(40个字符长度SHA-1字串)的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入41个字节(外加一个换行符)那么简单，当然也就很快了&lt;/p&gt;
&lt;p&gt;git 会使用 master 作为分支的默认名字。在若干次提交后，其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git_branch3.png&quot; alt=&quot;git_branch&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建分支&quot;&gt;创建分支&lt;/h4&gt;
&lt;p&gt;创建一个新的分支指针。比如新建一个 testing 分支，可以使用 &lt;code&gt;git branch&lt;/code&gt; 命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git branch testing&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这会在当前 &lt;code&gt;commit&lt;/code&gt; 对象上新建一个分支指针&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git_branch4.png&quot; alt=&quot;git_branch&quot;/&gt;&lt;/p&gt;
&lt;p&gt;git 保存着一个名为 HEAD 的特别指针，它是一个指向正在工作中的本地分支的指针(可以将 HEAD 想象为当前分支的别名)。运行 &lt;code&gt;git branch&lt;/code&gt; 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，依然还在 &lt;code&gt;master&lt;/code&gt; 分支里工作&lt;/p&gt;
&lt;h4 id=&quot;切换分支&quot;&gt;切换分支&lt;/h4&gt;
&lt;p&gt;要切换到其他分支，可以执行 &lt;code&gt;git checkout&lt;/code&gt; 命令。现在转换到新建的 &lt;code&gt;testing&lt;/code&gt; 分支，这样 HEAD 就指向了 &lt;code&gt;testing&lt;/code&gt; 分支&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout testing&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git_branch6.png&quot; alt=&quot;git_branch&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt; 使用 &lt;code&gt;-b&lt;/code&gt;选项，可以新建并切换到该分支，比如 iss53 分支&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout -b iss53&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;合并分支&quot;&gt;合并分支&lt;/h4&gt;
&lt;p&gt;可以使用 &lt;code&gt;git merge&lt;/code&gt; 命令来实现分支合并。一般地，合并分支有以下三种情况&lt;/p&gt;
&lt;p&gt;1、快进(Fast forward)合并&lt;/p&gt;
&lt;p&gt;如果当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进(Fast forward)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 README | 1 -
 1 file changed, 1 deletion(-)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、无冲突合并&lt;/p&gt;
&lt;p&gt;如下图所示，issue 53分支要合并回 master 分支中，git 会用两个分支的末端(C4和C5)以及它们的共同祖先(C2)进行一次简单的三方合并计&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git_branch16.png&quot; alt=&quot;git_branch&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout master
$ git merge iss53
Auto-merging README
Merge made by the 'recursive' strategy.
 README | 1 +
 1 file changed, 1 insertion(+)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;git 对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象(C6)。这个提交对象比较特殊，它有两个祖先(C4和C5)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/git_branch17.png&quot; alt=&quot;git_branch&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、有冲突合并&lt;/p&gt;
&lt;p&gt;如果在不同的分支中都修改了同一个文件的同一部分，git 就无法干净地把两者合到一起(逻辑上说，这种问题只能由人来裁决)。如果在解决问题 #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;git 作了合并，但没有提交，它会停下来等待解决冲突。要看看哪些文件在合并时发生冲突，可以用 &lt;code&gt;git status&lt;/code&gt; 查阅&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both modified:      index.html

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;任何包含未解决冲突的文件都会以未合并(unmerged)的状态列出。git会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
&amp;lt;div id=&quot;footer&quot;&amp;gt;contact : email.support@github.com&amp;lt;/div&amp;gt;
=======
&amp;lt;div id=&quot;footer&quot;&amp;gt;
  please contact us at support@github.com
&amp;lt;/div&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; iss53&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在解决了所有文件里的所有冲突后，要运行 &lt;code&gt;git add&lt;/code&gt; 命令将把它们标记为已解决状态(实际上就是将一次快照保存到暂存区域)。因为一旦暂存，就表示冲突已经解决&lt;/p&gt;
&lt;p&gt;再运行一次 &lt;code&gt;git status&lt;/code&gt; 来确认所有冲突都已解决&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git status
On branch master
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

        modified:   index.html&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果确认所有冲突都已解决，可以用 &lt;code&gt;git commit&lt;/code&gt; 来完成这次合并提交。提交说明会自动生成&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Merge branch 'iss53'

Conflicts:
  index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#       .git/MERGE_HEAD
# and try again.
#&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;查看分支&quot;&gt;查看分支&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt; 命令如果不加任何参数，它会给出当前所有分支的清单。master 分支前的 &lt;code&gt;*&lt;/code&gt; 字符表示当前所在的分支。也就是说，如果现在提交更新，master 分支将随着开发进度前移&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git branch
  iss53
* master
  testing&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;若要查看各个分支最后一个提交对象的信息，运行 &lt;code&gt;git branch -v&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 add scott to the author list in the readmes&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;删除分支&quot;&gt;删除分支&lt;/h4&gt;
&lt;p&gt;之前的工作成果已经合并到 master 了，那么 iss53 分支也就没用了。可以使用 &lt;code&gt;git branch -d&lt;/code&gt; 命令来删除它&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git branch -d iss53&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果一个分支没有被合并过，则该分支需要使用 &lt;code&gt;-D&lt;/code&gt; 选项来删除&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git branch -D iss53&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;git-远程仓库与分支&quot;&gt;git 远程仓库与分支&lt;/h3&gt;
&lt;p&gt;要参与任何一个 git 项目的协作，必须要了解该如何管理远程仓库。远程仓库是指托管在网络上的项目仓库，同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。管理远程仓库的工作，包括添加远程库，移除远程库，管理远程库分支，定义是否跟踪这些分支等&lt;/p&gt;
&lt;p&gt;远程分支(remote branch)是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在 git 进行网络交互时才会更新。远程分支就像是书签，提醒着上次连接远程仓库时上面各分支的位置&lt;/p&gt;
&lt;p&gt;通常用(远程仓库名)/(分支名)这样的形式表示远程分支，比如 &lt;code&gt;origin/master&lt;/code&gt; 分支&lt;/p&gt;
&lt;h4 id=&quot;克隆远程仓库&quot;&gt;克隆远程仓库&lt;/h4&gt;
&lt;p&gt;克隆仓库的命令格式为 &lt;code&gt;git clone [url]&lt;/code&gt;。比如，要克隆代码仓库 git_learn，可以用下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git clone git@github.com:littlematch0123/git_learn.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这会在当前目录下创建一个名为 &lt;code&gt;git_learn&lt;/code&gt; 的目录，其中包含一个.git的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 &lt;code&gt;git_learn&lt;/code&gt; 目录，会看到项目中的所有文件已经在里边了，准备好后续开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git clone git@github.com:littlematch0123/git_learn.git learnGit&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果最后一个字符是点，表示会在当前目录存放项目的所有文件，但当前目录一开始最好是个空目录&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git clone git@github.com:littlematch0123/git_learn.git .&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;查看远程仓库&quot;&gt;查看远程仓库&lt;/h4&gt;
&lt;p&gt;要查看当前配置有哪些远程仓库，可以用 &lt;code&gt;git remote&lt;/code&gt; 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 &lt;code&gt;origin&lt;/code&gt; 的远程库，git 默认使用这个名字来标识所克隆的原始仓库&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote
origin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以加上 -v 选项(v为--verbose的简写，中文意思是冗长的)，显示对应的克隆地址。如果没有推送权限，将看不到 push 的地址&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote -v
origin  git@github.com:littlematch0123/git_learn.git (fetch)
origin  git@github.com:littlematch0123/git_learn.git (push)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;添加远程仓库&quot;&gt;添加远程仓库&lt;/h4&gt;
&lt;p&gt;通常情况下，一个本地 git 仓库对应一个远程仓库；然而，在一些情况下，一个本地仓库需要同时关联多个远程仓库，比如同时将一个项目发布在 github 和 coding上&lt;/p&gt;
&lt;p&gt;添加一个新的远程仓库，可以指定一个名字，以便将来引用，运行 &lt;code&gt;git remote add [shortname] [url]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote add coding git@git.coding.net:ehuo0123/git_learn.git
$ git remote -v
coding  git@git.coding.net:ehuo0123/git_learn.git (fetch)
coding  git@git.coding.net:ehuo0123/git_learn.git (push)
origin  git@github.com:littlematch0123/git_learn.git (fetch)
origin  git@github.com:littlematch0123/git_learn.git (push)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;推送本地分支&quot;&gt;推送本地分支&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; 命令用于将本地分支的更新，推送到远程主机&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面命令的意思是取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push origin serverfix:serverfix&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然，分支名字可以不同，但不建议这样做&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git push origin serverfix:awesomebranch&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为本地和远程分支的名字相同，有下面简要写法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push origin serverfix&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果要把本地的 master 分支推送到 origin 服务器上，可以运行下面的命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push origin master&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面命令表示将当前分支推送到 origin 主机的对应分支，如果当前分支是 master 分支则推送 master 分支，如果是 x 分支则推送 x 分支&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push origin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一般地，当前分支只有一个追踪分支，那么主机名都可以省略&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果当前分支与多个主机存在追踪关系，则可以使用 &lt;code&gt;-u&lt;/code&gt; 选项指定一个默认主机，这样后面就可以不加任何参数使用 &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push -u origin master&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 &lt;code&gt;–all&lt;/code&gt; 选项&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push --all origin&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;从服务器抓取数据&quot;&gt;从服务器抓取数据&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;git fetch&lt;/code&gt; 命令从服务器抓取所有分支的数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git fetch origin
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/littlematch0123/git_learn
 * [new branch]      y          -&amp;gt; origin/y&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果加上分支名，则只更新该分支的数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git fetch origin master&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是要注意的是，&lt;code&gt;fetch&lt;/code&gt; 命令只抓取数据，本地不会自动生成一份可编辑的副本（拷贝）。 换句话说，这种情况下，不会有一个新的 y 分支——只有一个不可以修改的 origin/y 指针&lt;/p&gt;
&lt;p&gt;可以运行 &lt;code&gt;git merge origin/y&lt;/code&gt; 将这些工作合并到当前所在的 master 分支&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git merge origin/y&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果想要在自己的 y 分支上工作，可以将其建立在远程跟踪分支之上：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout -b y origin/y&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支，本地分支与远程分支之间建立了一种追踪关系(tracking)&lt;/p&gt;
&lt;p&gt;当克隆一个仓库时，它通常会自动地创建一个跟踪 &lt;code&gt;origin/master&lt;/code&gt; 的 master 分支&lt;/p&gt;
&lt;p&gt;如果在一个跟踪分支上输入 &lt;code&gt;git pull&lt;/code&gt;，git 能自动地识别去哪个服务器上抓取、合并到哪个分支。所以，实际上，&lt;code&gt;git pull&lt;/code&gt; 是 &lt;code&gt;git fetch&lt;/code&gt; 后跟&lt;code&gt;git merge FETCH_HEAD&lt;/code&gt; 的缩写。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;比如，要取回 origin 主机的 next 分支，与本地的 master 分支合并，需要写成下面这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git pull origin next:master&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果远程分支(next)要与当前分支合并，如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git pull origin next&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git pull origin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果当前分支只有一个追踪分支，连远程主机名都可以省略&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git pull&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果 &lt;code&gt;git pull&lt;/code&gt; 时，提示 &lt;code&gt;no tracking information&lt;/code&gt;，则说明本地分支和远程分支的追踪关系没有创建，用命令 &lt;code&gt;git branch --set-upstream branch-name origin/branch-name&lt;/code&gt; 来建立追踪&lt;/p&gt;
&lt;h4 id=&quot;删除远程分支&quot;&gt;删除远程分支&lt;/h4&gt;
&lt;p&gt;如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支&lt;/p&gt;
&lt;p&gt;下面命令表示删除 origin 主机的 x 分支&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git push origin :x
# 等同于
$ git push origin --delete x&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;远程仓库删除和重命名&quot;&gt;远程仓库删除和重命名&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote rename coding cd # 重命名&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote rm coding # 删除&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;不区分远程仓库&quot;&gt;不区分远程仓库&lt;/h4&gt;
&lt;p&gt;由于添加了多个远程仓库，在 push 和 pull 时便面临了仓库的选择问题。诚然如此较为严谨，但是在许多情况下，只需要保持远程仓库完全一致，而不需要进行区分，因而这样的区分便显得有些“多余”&lt;/p&gt;
&lt;p&gt;先查看当前的 &lt;code&gt;git remote&lt;/code&gt; 情况&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote -v
origin  git@github.com:littlematch0123/git_learn.git (fetch)
origin  git@github.com:littlematch0123/git_learn.git (push)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，不额外添加远程仓库，而是给现有的远程仓库添加额外的URL&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;git remote set-url --add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt;，给已有的远程仓库添加一个远程地址&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote set-url --add origin git@git.coding.net:ehuo0123/git_learn.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次查看所关联的远程仓库：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote -v
origin  git@github.com:littlematch0123/git_learn.git (fetch)
origin  git@github.com:littlematch0123/git_learn.git (push)
origin  git@git.coding.net:ehuo0123/git_learn.git (push)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样设置后的 push 和pull 操作与最初的操作完全一致，不需要进行调整&lt;/p&gt;
&lt;p&gt;如果不再需要多个仓库，可以使用&lt;code&gt;git remote set-url --delete &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt;，将其删除&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote set-url --delete origin git@git.coding.net:ehuo0123/git_learn.git&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;git-其他操作&quot;&gt;git 其他操作&lt;/h3&gt;
&lt;h4 id=&quot;删除文件&quot;&gt;删除文件&lt;/h4&gt;
&lt;p&gt;1、从工作目录中删除文件，直接使用 &lt;code&gt;rm&lt;/code&gt; 命令删除即可，因为其没有纳入 git 版本库中，git 并不知道&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;touch a # 新建 a
rm a # 删除 a&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果画蛇添足地使用 &lt;code&gt;git rm a&lt;/code&gt;，反而会提示错误&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git rm a
fatal: pathspec 'a' did not match any files&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、从暂存区中删除文件，需要使用 &lt;code&gt;git rm -f&lt;/code&gt; 命令来强制删除&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;touch b # 新建 b
git add b # 将 b 添加到暂存区
git rm -f b # 删除 b&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果使用 &lt;code&gt;git rm b&lt;/code&gt;，会提示如下错误&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git rm b
error: the following file has changes staged in the index:
    b
(use --cached to keep the file, or -f to force removal)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、从本地仓库中删除文件，使用&lt;code&gt;git rm&lt;/code&gt;命令即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;touch c # 新建 c
git add c # 将 c 添加到暂存区
git commit -m 'add c' # 提交到本地仓库
git rm c # 删除 c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、如果仅仅是想把文件从 git 仓库中删除(亦即从暂存区域移除)，但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些文件不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 &lt;code&gt;.gitignore&lt;/code&gt; 文件中补上，用--cached选项即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git rm d --cached&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;文件重命名&quot;&gt;文件重命名&lt;/h4&gt;
&lt;p&gt;1、从工作目录中文件重命名，直接使用 &lt;code&gt;mv&lt;/code&gt; 命令删除即可，因为其没有纳入 git 版本库中，git 并不知道&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;touch a # 新建 a
mv a a1 # 重命名 a 为 a1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果画蛇添足地使用 &lt;code&gt;git mv a a1&lt;/code&gt;，反而会提示错误&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git mv a a1
fatal: not under version control, source=a, destination=a1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、从暂存区，或者本地仓库中重命名文件，直接使用 &lt;code&gt;git mv&lt;/code&gt; 命令就可以了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git mv b1 b2
localhost:t bailiang$ git status
On branch master
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    renamed:    b1 -&amp;gt; b2&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;撤消操作&quot;&gt;撤消操作&lt;/h4&gt;
&lt;p&gt;任何时候，都有可能需要撤消刚才所做的某些操作。但要注意的是，有些撤销操作是不可逆的，所以要谨慎小心，一旦失误，就有可能丢失部分工作成果&lt;/p&gt;
&lt;p&gt;1、修改最后一次提交&lt;/p&gt;
&lt;p&gt;有时候提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 &lt;code&gt;--amend&lt;/code&gt; 选项重新提交：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git commit --amend&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 &lt;code&gt;--amend&lt;/code&gt; 提交&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容&lt;/p&gt;
&lt;p&gt;2、取消已暂存的文件&lt;br/&gt;使用 &lt;code&gt;git reset HEAD &amp;lt;file&amp;gt;...&lt;/code&gt; 命令可以取消暂存，将暂存区的文件恢复到工作目录中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git reset HEAD a.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、取消对文件的修改&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;git checkout -- &amp;lt;file&amp;gt;...&lt;/code&gt; 命令可以将文件恢复到上一个版本的状态。要注意的是这个命令非常危险，对文件做的任何修改都会消失，因为只是拷贝了另一个文件来覆盖它。除非确实不想要那个文件了，否则不要使用这个命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout -- a.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;注意事项&lt;/h3&gt;
&lt;p&gt;1、版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等。图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道&lt;/p&gt;
&lt;p&gt;微软的 Word 格式是二进制格式，因此，版本控制系统是没法跟踪 Word&lt;/p&gt;
&lt;p&gt;当然，办法也是有的，需要安装 &lt;code&gt;docx2txt&lt;/code&gt; 程序，将 word 文档转换为可读的文本文件&lt;/p&gt;
&lt;p&gt;把下面这行文本加到 .gitattributes 文件中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;*.docx diff=word&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;写一个脚本把输出结果包装成 git 支持的格式。 在可执行路径下创建一个叫 docx2txt 文件，添加这些内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/bash
docx2txt.pl $1 -&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用 &lt;code&gt;chmod a+x&lt;/code&gt; 给这个文件加上可执行权限。 最后，需要配置 git 来使用这个脚本&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git config diff.word.textconv docx2txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在如果在两个快照之间进行比较，git 就会对那些以 .docx 结尾的文件应用“word”过滤器，即 docx2txt。这样，Word 文件就能被高效地转换成文本文件并进行比较了&lt;/p&gt;
&lt;p&gt;2、不要使用 Windows 自带的记事本编辑任何文本文件。原因是 Microsoft 开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf(十六进制)的字符，会遇到很多不可思议的问题&lt;/p&gt;
&lt;p&gt;3、&lt;code&gt;git commit -am&lt;/code&gt;可以写成&lt;code&gt;git commit -a -m&lt;/code&gt;，但不能写成&lt;code&gt;git commit -m -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、在 git 中任何已提交的东西几乎总是可以恢复的，但任何未提交的东西丢失后很可能再也找不到了&lt;/p&gt;
&lt;h3 id=&quot;git-常用命令&quot;&gt;git 常用命令&lt;/h3&gt;
&lt;h4 id=&quot;基础操作&quot;&gt;基础操作&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ git init  #初始化仓库
$ git add &amp;lt;file&amp;gt; #跟踪新文件，或者把已跟踪的文件放到暂存区
$ git add .  #批量跟踪所有工作目录下未被跟踪的文件
$ git rm &amp;lt;file&amp;gt; #从本地仓库中删除文件
$ git rm -f &amp;lt;file&amp;gt; #从暂存区中删除文件
$ git rm --cached &amp;lt;file&amp;gt; #从git仓库中删除，但保留在当前工作目录中
$ git commit  #把文件提交到本地仓库
$ git commit -m 'wrote a file'  #-m参数后跟提交说明的方式，在一行命令中提交更新
$ git commit -am 'wrote a file'  #把所有已经跟踪过的文件暂存起来一并提交
$ git commit -v #启动文本编辑器以便输入本次提交的说明，编辑器会显示与上次提交相比的变更之处
$ git commit --amend  #修改最后一次提交
$ git reset HEAD &amp;lt;file&amp;gt;  #取消暂存
$ git checkout -- &amp;lt;file&amp;gt;  #恢复文件内容&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;查看操作&quot;&gt;查看操作&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ git status  #检查当前文件状态
$ git status -s #更为紧凑的格式的状态输出
$ git diff  #查看工作目录与暂存区的差异
$ git diff --cached  #查看暂存区与某次提交的差异，默认为HEAD
$ git diff id1 id2  #查看两次提交之间的差异
$ git log  #查看提交历史
$ git log -p #展开显示每次提交的内容差异
$ git log -2 #仅显示最近的两次更新
$ git log --oneline #每个提交放在一行显示
$ git log --all #显示所有分支的提交记录
$ git log --graph  #显示 ASCII 图形表示的分支合并历史
$ git reflog  #按照之前经过的所有的commit路径按序来排列，用来记录每一次命令&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;分支操作&quot;&gt;分支操作&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ git branch  #列出所有分支，当前分支前面会标一个*号
$ git branch -v  #查看各分支最后一个提交对象的信息
$ git branch &amp;lt;branchName&amp;gt;  #新建分支
$ git branch -d &amp;lt;branchName&amp;gt;  #删除分支
$ git branch -D &amp;lt;branchName&amp;gt;  #强制删除分支，用于删除没有合并过的分支
$ git checkout &amp;lt;branchName&amp;gt;   #分支切换
$ git checkout -b &amp;lt;branchName&amp;gt;  #创建新分支并切换到该分支
$ git checkout -  #将HEAD移动到上一分支
$ git merge &amp;lt;branchName&amp;gt;  #将目标分支合并到当前分支
$ git reset --hard &amp;lt;commit&amp;gt;  #将当前分支回退到历史某个版本，提交的内容会复制到暂存区和工作目录&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;远程操作&quot;&gt;远程操作&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ git remote   #查看所有的远程仓库
$ git remote -v  #显示远程仓库对应的克隆地址
$ git remote add [shortname] [url]  #添加一个新的远程仓库
$ git remote rename pb paul   #将远程库的名称从pb改为paul
$ git remote rm [shortname]   #取消对该远程库的关联
$ git remote set-url --add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;  #给现有的远程仓库添加额外的URL
$ git remote set-url --delete &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;  #给现有的远程仓库删除额外的URL
$ git clone &amp;lt;address&amp;gt;  #克隆远程仓库的所有分支
$ git push origin &amp;lt;branchName&amp;gt;  #取出在本地的&amp;lt;branchName&amp;gt;分支，推送到远程仓库的&amp;lt;branchName&amp;gt;分支
$ git fetch origin  #从远程服务器抓取所有分支的数据
$ git pull origin &amp;lt;branchName&amp;gt;  #相当于fetch和merge命令的合体
$ git push origin :serverfix  #在服务器上删除serverfix分支
$ git push origin --delete serverfix  #删除服务器分支的另外写法&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 31 Dec 2019 19:33:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<og:description>[1]概述 [2]git 配置 [3]git 基础操作 [4]git 查看 [5]git 版本切换 [6]git 分支管理 [7]git 远程仓库与分支 [8]git 其他操作 [9]</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaohuochai/p/12128087.html</dc:identifier>
</item>
<item>
<title>X-Admin&amp;ABP框架开发-代码生成器 - 微笑刺客D</title>
<link>http://www.cnblogs.com/CKExp/p/11996382.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CKExp/p/11996382.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;在日常开发中，有时会遇到一些相似的代码，甚至是只要CV一次，改几个名称，就可以实现功能了，而且总归起来，都可以由一些公用的页面更改而来，因此，结合我日常开发中使用到的页面，封装一个&lt;span&gt;适合自己&lt;/span&gt;的代码生成器，仅处于入门阶段，包括生成的代码结构都仅是把框架展示出来，内部详细暂时没得，针对于应用服务中的接口和实现，相关Dto，MVC中的控制器、视图及视图模型进行了模板制作及生成相关的文件。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;一、设计思路&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　方案一：开始想到的是，搞个控制台，然后给一个.cs文件，然后控制台去解析其中的命名空间，类名，属性，再用配置好的razor模板去替换，再生成相关的一些文件出来，但是发现，万事开头难，第一步去解析cs文件就不好搞，找了网上的资料，不太好弄，干脆想了下，放弃这种方案，因为想到了另一种常用的方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1133736/201912/1133736-20191231120942272-2101395526.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　方案二：直接在控制台中，配置控制台去访问数据库，然后给定指定表名，去读取数据库中的表和字段，再反过来去生成相关文件，但是这里会遇到一个这样的问题，比如我使用的是mysql，mysql本身有个配置表名大小写忽视的，这样一来，获取到的表名都将是小写打头，尽管可能配置了是区分大小写，但是，我设计表时，采用Pre_table，形式区分业务表，比如是CRM模块需要用到的CRM_Client，那将用CRM打头，后面这部分Client才是实际代码中的类名，种种问题都有可能，但是作为没有那么多可能性下，比如没得前缀，不区分大小写，形式简单，那么可以考虑使用。此时，想到了abp中的Migrator控制台并想到了方案三。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1133736/201912/1133736-20191231130506509-378699436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　方案三：如果说直接搞一个控制台在代码中，模仿Abp自带的Migrator一样，启动后，给定类名，通过反射去取得该类的属性名，岂不是美滋滋，需要哪个类的相关文件，只需启动，然后输入类名，即可得到相关的文件。这几种方案的前提都是在Dto文件中会展示所有实体字段，如果需要选择性的使用字段，则还需借助人工智能，以人力去完成更改生成的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1133736/201912/1133736-20191231130645103-1359269734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;二、Razor引擎的使用&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　我选择了方案二作为入手去实现，并且采用&lt;a href=&quot;https://github.com/Antaris/RazorEngine&quot; target=&quot;_blank&quot;&gt;Razor引擎&lt;/a&gt;作为模板解析的工具。Nuget引入&lt;strong&gt;RazorEngine.NetCore&lt;/strong&gt;包，开始实现依靠模板生成代码。 &lt;/p&gt;
&lt;p&gt;1、先尝试下Razor引擎，控制台中CV下Razor引擎提供的Demo，引入相关命名空间，学习下如何去使用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;string&lt;/span&gt; template = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello @Model.Name, welcome to RazorEngine!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = Engine.Razor.RunCompile(template, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;templateKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
Console.WriteLine(result);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 运行完毕，可以获取到运行结果，需要注意的是，如果是在linux或是mac跑会得到错误，该问题是Razor引擎本身的问题，暂时只能在window下跑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1133736/201912/1133736-20191231132031424-1774011997.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、熟悉了下Razor的使用方式后，开始使用简单文件形式填充一些数据模拟生成过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1133736/201912/1133736-20191231133713276-2025603509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;首先，一个文件作为填充模板，一个文件内存储Json数据作为数据源，程序启动时加载两个文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; templatePage = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SimpleCOders\\Templates&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;templatePage.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
TemplatePage &lt;/span&gt;=&lt;span&gt; File.ReadAllText(templatePage);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; templatePageJson = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SimpleCOders\\Templates&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;templatePageJson.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
TemplatePageJson &lt;/span&gt;= File.ReadAllText(templatePageJson);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其次，数据源整理成相应类结构，得到批量待解析数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; templatePageJsonList = JsonConvert.DeserializeObject&amp;lt;List&amp;lt;PageDataModel&amp;gt;&amp;gt;&lt;span&gt;(TemplatePageJson);

&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; templatePageJson &lt;span&gt;in&lt;/span&gt;&lt;span&gt; templatePageJsonList)
{
    RazorParse(
        templatePageJson.Index &lt;/span&gt;?? &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
        templatePageJson.Date,
        templatePageJson.Index &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
        templatePageJson.Index &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
        templatePageJson.Content
    );
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，设计一下解析器，将读取到的数据源，进行解析成相关的类，然后依次按照模板生成文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; entityResult = Engine.Razor.RunCompile(TemplatePage, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;templatePageKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
{
    PostData &lt;/span&gt;= (date ?? DateTime.Now).ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy-MM-dd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    PrevIndex &lt;/span&gt;=&lt;span&gt; prev.Value,
    NextIndex &lt;/span&gt;=&lt;span&gt; next.Value,
    ContentHtml &lt;/span&gt;=&lt;span&gt; content
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按照一条数据便是一个模板文件去生成可以得到批量生成文件。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;三、适合自己的简单代码生成器&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　开始着手适合自己的简单代码生成器，思路一致，只是增加了需要读取数据库这一环节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1133736/201912/1133736-20191231141536939-729631184.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、模板制作，以应用服务接口为例，常用的增删改查进行封装，利用Razor语法进行填充处理，此处对于主键类型，没有进行处理，只能支持诸如int、long之类的，后期在继续优化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Application.Services;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Application.Services.Dto;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; @Model.ProjectNameSpace.@Model.ProjectModule.@(Model.EntityName)s.Dto;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; @Model.ProjectNameSpace.@Model.ProjectModule.@(Model.EntityName)s
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; @(Model.EntityDescription)应用服务接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; I@(Model.EntityName)AppService : IApplicationService
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取@(Model.EntityDescription)数据集合
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        Task&amp;lt;PagedResultDto&amp;lt;@(Model.EntityName)ListDto&amp;gt;&amp;gt;&lt;span&gt; GetPaged@(Model.EntityName)(GetPaged@(Model.EntityName)Input input);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取@(Model.EntityDescription)编辑信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        Task&amp;lt;Get@(Model.EntityName)ForEditOutput&amp;gt; Get@(Model.EntityName)ForEdit(NullableIdDto&amp;lt;@Model.EntityKeyType&amp;gt;&lt;span&gt; input);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 创建或修改@(Model.EntityDescription)信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        Task CreateOrUpdate@(Model.EntityName)(CreateOrUpdate@(Model.EntityName)Input input);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 删除@(Model.EntityDescription)
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        Task Delete@(Model.EntityName)(List&amp;lt;EntityDto&amp;lt;@Model.EntityKeyType&amp;gt;&amp;gt;&lt;span&gt; inputs);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2、设置相应的解析器，与之前的尝试不同，这次使用了具体的类型，这是Razor中的另一种方式，解析完毕后将文件按照指定路径保存，尽量符合项目的路径存储。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; iRazorAppService = Engine.Razor.RunCompile(IRazorAppService, nameof(IRazorAppService), &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TemplateParseModel), templateParseModel);
UtilHelper.Save(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, applicationPath, $&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I{templateParseModel.EntityName}AppService.cs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;), iRazorAppService);
builder.Append(iRazorAppService);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3、数据库连接读取表结构，控制台下，采用直接读取的形式，不走DbContext方式，Nuget中引入&lt;strong&gt;MySql.Data&lt;/strong&gt;包(我本地用的Mysql)，增加Appsettings.json文件并配置好连接字符串,用sql语句形式直接读取数据库中的信息，此处封装了一个DbHelper类及将读取到的信息封装到指定类中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; SqlConnection = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MySqlConnection(connectionStr))
{
    SqlConnection.Open();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columsInfo = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;select table_name,column_name,ordinal_position,is_nullable,data_type,character_maximum_length,column_key,column_comment
        from information_schema.COLUMNS
        where table_schema = '{0}' and table_name = '{1}'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dbschema, tablename);

    MySqlCommand mySqlCommand &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MySqlCommand(columsInfo, SqlConnection);
    MySqlDataReader dataReader &lt;/span&gt;=&lt;span&gt; mySqlCommand.ExecuteReader();

    List&lt;/span&gt;&amp;lt;ColumnInfo&amp;gt; sqlDatasList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;ColumnInfo&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (dataReader.Read())
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columnInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ColumnInfo()
        {
            TableName &lt;/span&gt;= dataReader[dataReader.GetName(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)].ToString(),
            Name &lt;/span&gt;= dataReader[dataReader.GetName(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)].ToString(),
            OrdinalPosition &lt;/span&gt;= StringExtension.GetValueOrNull&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(dataReader[dataReader.GetName(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)].ToString()),
            IsNullable &lt;/span&gt;= dataReader[dataReader.GetName(&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)].ToString(),
            DataType &lt;/span&gt;= dataReader[dataReader.GetName(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)].ToString(),
            CharacterMaximumLength &lt;/span&gt;= StringExtension.GetValueOrNull&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(dataReader[dataReader.GetName(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)].ToString()),
            ColumnKey &lt;/span&gt;= dataReader[dataReader.GetName(&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)].ToString(),
            ColumnComment &lt;/span&gt;= dataReader[dataReader.GetName(&lt;span&gt;7&lt;/span&gt;&lt;span&gt;)].ToString(),
        };
        sqlDatasList.Add(columnInfo);
    }

    dataReader.Close();
    SqlConnection.Close();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sqlDatasList;
&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、启动后输入表名、实体名、实体描述(并未保存到数据库中)，再通过手动将其加入到项目中，诸如命名空间及模块名称都加入到了配置文件中，方便配置，至少相对手动去一个个添加来讲，减少了部分工作量，也达到了辅助的效果，但是要达到全面辅助，还得在进行继续优化，针对其中的类等等，暂时没有加入属性，只放置了Id、Name等等，之后得考虑把数据库中字段也循环输出到模板文件中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1133736/201912/1133736-20191231144210618-1841082672.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　至此，依靠Razor引擎制作一个简单的(算是减少了工作量)代码生成器初步完成了，年后继续完善，加入丰富的功能，并移入到框架中作为提高生产力的手段。新年快乐~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　仓库地址：&lt;a href=&quot;https://gitee.com/530521314/Partner.TreasureChest.git&quot; target=&quot;_blank&quot;&gt;https://gitee.com/530521314/Partner.TreasureChest.git&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;lang-java prettyprint prettyprinted&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;&lt;strong&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2020-&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;01&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;-&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;01,望技术有成后能回来看见自己的脚步&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 31 Dec 2019 16:02:00 +0000</pubDate>
<dc:creator>微笑刺客D</dc:creator>
<og:description>在日常开发中，有时会遇到一些相似的代码，甚至是只要CV一次，改几个名称，就可以实现功能了，而且总归起来，都可以由一些公用的页面更改而来，因此，结合我日常开发中使用到的页面，封装一个适合自己的代码生成器</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/CKExp/p/11996382.html</dc:identifier>
</item>
<item>
<title>[译文] 实体与值对象到底是不是一回事? - 心千</title>
<link>http://www.cnblogs.com/xixixiao/p/is-entity-same-as-value-object.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xixixiao/p/is-entity-same-as-value-object.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://enterprisecraftsmanship.com/posts/is-entity-same-as-value-object/&quot;&gt;原文: &lt;em&gt;Is Entity the same as Value Object?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;In this post, we’ll discuss an interesting question about whether the concepts of Entity and Value Object are the same.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这篇文章中, 我们将讨论一个有趣的问题, 关于实体与值对象的概念是否相同.&lt;/p&gt;
&lt;blockquote readability=&quot;6.4280701754386&quot;&gt;
&lt;p&gt;I wrote a lot about entities and value objects. Here’s the go-to post if you need to learn more about what they are and the differences between them: &lt;a href=&quot;https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/&quot;&gt;Entity vs Value Object: the ultimate list of differences&lt;/a&gt;. And to this date, I find interesting angles to look at these concepts from.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我写了一堆关于实体和值对象的文章. 如果你需要了解它们是什么以及它们之间的区别, 可参考下这篇文章: &lt;em&gt;&lt;a href=&quot;https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/&quot;&gt;实体 vs 值对象: 终极差异清单&lt;/a&gt;&lt;/em&gt;. 到目前为止, 我发现了一些有趣的角度来探索这些概念.&lt;/p&gt;
&lt;blockquote readability=&quot;4.2786885245902&quot;&gt;
&lt;p&gt;This one comes from Panos Kousidis who asked a insightful question in the comments to &lt;a href=&quot;https://enterprisecraftsmanship.com/posts/value-object-better-implementation/&quot;&gt;one of my posts about value objects&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题来来源于 Panos Kousidis, 他在我的一篇 &lt;em&gt;&lt;a href=&quot;https://enterprisecraftsmanship.com/posts/value-object-better-implementation/&quot;&gt;关于值对象的一篇文章&lt;/a&gt;&lt;/em&gt; 的评论中提出了一个极为深刻的问题:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;em&gt;Can we consider an &quot;Entity&quot; as a &quot;ValueObject&quot; that compares only its Id for equality? Can this result in defining the base entity class as&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;我们是否可以考虑将 &lt;code&gt;实体&lt;/code&gt; 视作为 &lt;code&gt;值对象&lt;/code&gt;, 仅比较它们的 &lt;code&gt;Id&lt;/code&gt; 是否相等? 可否将实体基类定义为&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public abstract class Entity : ValueObject
{
   public int Id { get; protected set; }

   protected override IEnumerable&amp;lt;object&amp;gt; GetEqualityComponents()
   {
       yield return Id;
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7.5&quot;&gt;
&lt;p&gt;This is a deep question which doesn’t have a quick answer, so let’s break it down into two parts. Here’s what differentiates entities from value objects (again, taken from &lt;a href=&quot;https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/&quot;&gt;this article&lt;/a&gt;):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是个很难回答的问题, 所以我们将其分为两部分. 这里有关于实体和值对象区别的文章(还是这里, 取自 &lt;em&gt;&lt;a href=&quot;https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/&quot;&gt;这篇文章&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;Identity comparison&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;标识符比较.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;Immutability&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;不可变性.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;History preservation*&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;历史维持*.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;(译者注: History preservation, 历史维持. 这个翻译是 &lt;em&gt;&lt;a href=&quot;https://www.cnblogs.com/forerunner&quot;&gt;茶姨&lt;/a&gt;&lt;/em&gt; 提供的, 我在 &lt;em&gt;领域驱动设计：软件核心复杂性应对之道（修订版）&lt;/em&gt; 并没找到对应翻译, 还可译为 &quot;历史保存&quot;, 大概意思是实体的状态变更的记录将会保存下来.)&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Let’s review the treatment of entities as value objects with regards to each of these two items.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们重新看下, 将实体视为值对象的处理方法, 其中涉及到这两项 (作者指的是 &lt;code&gt;实体&lt;/code&gt; 和 &lt;code&gt;值对象&lt;/code&gt;) 中的每一项.&lt;/p&gt;
&lt;h2 id=&quot;标识符比较-identity-comparison&quot;&gt;标识符比较 (Identity comparison)&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Identity comparison&lt;/strong&gt; defines how two instances of a class compare to each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;标识符比较&lt;/strong&gt; 定义类的两个实例如何相互比较彼此.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Entities are compared by their identifiers. Two objects are deemed equal if they have the same Id:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实体通过它们的标识符在彼此之间进行比较. 对于两个对象, 若他们拥有相同的 Id, 则被认为是相等的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1714921/201912/1714921-20191231233132159-1916978422.png&quot; alt=&quot;Identifier equality&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Identifier equality (标识符的相等)&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Value objects are compared by their content. Two value objects are deemed the same if their contents match:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;值对象则根据他们的内容去比较. 若两个值对象的内容完全相同, 则被认为相等.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1714921/201912/1714921-20191231233435286-621594046.png&quot; alt=&quot;Identifier equality&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Structural equality (结构的相等)&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Note that although you usually compare value objects by &lt;strong&gt;all&lt;/strong&gt; of their contents, it doesn’t have to always be the case. Some fields might not matter for identity comparison.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意, 尽管通常通过值对象的内容比较来比较他们, 但可不一定总是这样. 某些字段在比较标识符的时候可能并不重要.&lt;/p&gt;
&lt;blockquote readability=&quot;3.8888888888889&quot;&gt;
&lt;p&gt;An example is the &lt;code&gt;Error&lt;/code&gt; class I brought up in a &lt;a href=&quot;https://enterprisecraftsmanship.com/posts/advanced-error-handling-techniques/&quot;&gt;recent article&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个例子是这个我在 &lt;em&gt;&lt;a href=&quot;https://enterprisecraftsmanship.com/posts/advanced-error-handling-techniques/&quot;&gt;最近的一篇文章&lt;/a&gt;&lt;/em&gt; 中提到的 &lt;code&gt;Error&lt;/code&gt; 类:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public sealed class Error : ValueObject
{
    public string Code { get; }
    public string Message { get; }

    internal Error(string code, string message)
    {
        Code = code;
        Message = message;
    }

    protected override IEnumerable&amp;lt;object&amp;gt; GetEqualityComponents()
    {
        yield return Code; // the only field used for comparison (唯一用于比较的字段).
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;This class contains two fields:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此类包含两个字段 (此处有争议, 上文代码里应为&lt;code&gt;属性&lt;/code&gt;, 但作者在此文中经常混用 &lt;code&gt;field(字段)&lt;/code&gt; 和 &lt;code&gt;property(属性)&lt;/code&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Code&lt;/code&gt; — this is what defines an error,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Message&lt;/code&gt; — for additional debug information just for developers.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Code&lt;/code&gt; —  这个定义了错误码,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Message&lt;/code&gt; —  仅为开发者附加的调试信息.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;If you pass errors to external systems, those systems shouldn’t ever bind to error messages, only to their codes. This is why the &lt;code&gt;Error&lt;/code&gt; class uses only the &lt;code&gt;Code&lt;/code&gt; field for identity comparison: changes in debug messages don’t matter; two errors with the same code are treated as the same error even if their messages differ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你将错误传递给外部系统, 那么这些系统不应该与错误信息绑定, 而应该仅仅绑定到给他们错误码. 这就是为什么 &lt;code&gt;Error&lt;/code&gt; 类仅使用 &lt;code&gt;Code&lt;/code&gt; 字段作为标识符比较: 调试信息的变化无关紧要. 具有相同错误码的两个错误被认为是相同的错误, 即使它们的消息不同.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;This is where Panos Kousidis' question comes from too. If you can exclude some fields from a value object’s identity comparison, can you also exclude all of them (except for the Id) and end up with the code like the following?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这也就是 Panos Kousidis 的问题根源. 如果你能从值对象的标识符比较中排除一些字段, 那么是否还能排除除了 Id 之外所有字段, 直到它们的类似于下面的代码?&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public abstract class Entity : ValueObject
{
    public int Id { get; protected set; }

    protected override IEnumerable&amp;lt;object&amp;gt; GetEqualityComponents()
    {
        yield return Id;
    }
}

public class Customer : Entity
{
    public string Name { get; protected set; }
    public string Email { get; protected set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;You definitely can, I don’t see any reason why not. So, from the identity comparison perspective, the answer to the question &quot;&lt;em&gt;Can you treat Entity and Value Object as the same concept?&lt;/em&gt;&quot; is &lt;strong&gt;yes&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你完全可以这么做, 我看不出来有什么理由不可以. 因此, 从标识符比较的视角, &quot;&lt;em&gt;是否可以将实体和值对象视为相同的概念?&lt;/em&gt;&quot; 的答案是 &quot;&lt;strong&gt;YES&lt;/strong&gt;&quot;.&lt;/p&gt;
&lt;h2 id=&quot;不可变性-immutability&quot;&gt;不可变性 (Immutability)&lt;/h2&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;In terms of immutability, the difference between entities and value object is that value objects are immutable, whereas entities are almost always mutable. You don’t modify a value object; instead, you create a new one and replace the old instance with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在不可变性上, 实体与值对象的区别在于值对象是不可变的, 而实体几乎总是可变的. 不需要修改值对象; 而是创建一个值对象的新实例去替换旧实例.&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;One could argue that immutability isn’t a defining property of a value object either. You could even apply the same line of reasoning as with &lt;strong&gt;identity comparison&lt;/strong&gt; and say that what matters is immutability of the fields that form the value object’s identity, and that all other fields can be left mutable. In the example with the &lt;code&gt;Error&lt;/code&gt; class, that would mean being able to change the &lt;code&gt;Message&lt;/code&gt; field, but not &lt;code&gt;Code&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有人可能会说, 不可变性也不是值对象的属性定义. 你甚至可以应用同样的推理作为 &lt;strong&gt;标识符比较&lt;/strong&gt;, 并说重要的是构成值对象的标识符字段的不可变性, 而其它所有的字段可以保持可变的. 在 &lt;code&gt;Error&lt;/code&gt; 类的示例中, 意味着可以修改 &lt;code&gt;Message&lt;/code&gt; 字段, 但是不能修改 &lt;code&gt;Code&lt;/code&gt; 字段.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;And it’s true that fields that form the object’s identity must not change. This requirement works similarly for entities and value objects:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确, 构成对象的标识符字段不能变更, 这一要求同样适用于实体和值对象:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;The modification of an entity’s Id field would turn that entity into a different one. Thus, such a modification is prohibited.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;修改实体的 Id 字段会将该实体变成另外一个实体. 因此, 这种修改是被禁止的.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;Similarly, the modification of fields that form a value object’s identity would, too, turn that value object into a different one.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;同样地, 对构成值对象的标识符字段修改也会将该值对象转变成另外一个不同的值对象.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;But what about the remaining fields? If we can change an entity’s properties (except for the Id one), can’t we also change the fields of a value object, as long as they aren’t part of its identity?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是剩余其它的字段呢? 如果我们能改变一个实体除 &lt;code&gt;Id&lt;/code&gt; 外的属性, 那么我们是否也可以修改值对象的字段, 只要这些字段不是值对象标识符的一部分?&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;On the surface, it looks like we can, but this line of reasoning falls apart when you take into account the 3rd component that differentiates entities from value objects: history preservation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从表面上看, 我们好像可以这样子做, 但是当考虑到实体与值对象的第三个区别: &lt;strong&gt;历史维持&lt;/strong&gt; 时, 这种推理就经不起推敲了.&lt;/p&gt;
&lt;h2 id=&quot;历史维持-history-preservation&quot;&gt;历史维持 (History preservation)&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;History preservation&lt;/strong&gt; is whether or not an object has a history in your domain model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;历史维持&lt;/strong&gt; 指的是对象在域模型中是否具有历史记录.&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Entities have such a history (even though you might not store it explicitly). In other words, entities &lt;em&gt;live in a continuum&lt;/em&gt;: they are created, modified, and deleted — all at different points in time. Value objects don’t have a history; they are a mere snapshot of some state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实体就具有这样的历史记录 (即使你可能没有显示地存储它). 换句话说, 实体是连续存在的: 它们在不同的时间点被创建, 修改和删除. 值对象没有历史, 它们仅仅是某些状态的快照.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The modification of a value object implicitly extends its lifetime beyond just being a snapshot. Such a modification assumes the value object also has a history, which goes against the requirement of not preserving history in value objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;值对象的修改隐式地延长了其生存期, 而不仅仅是作为快照. 这样的修改假设值对象也具有历史记录, 但是这违反了值对象中不保留历史记录的要求.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;History preservation is what answers the question of &quot;&lt;em&gt;Can you treat Entity and Value Object as the same concept?&lt;/em&gt;&quot;. That answer is &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;历史维持是对 &quot;&lt;code&gt;可以将实体对象和值对象视为同一个概念?&lt;/code&gt;&quot; 这一问题的回答, 答案是否定的.&lt;/p&gt;
&lt;h2 id=&quot;总结-summary&quot;&gt;总结 (Summary)&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The answer to the question of &quot;Can we consider an entity as a value object that compares only its Id for equality?&quot; boils down to three parts:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&quot;&lt;em&gt;我们是否可以考虑将 &lt;code&gt;实体&lt;/code&gt; 视作为 &lt;code&gt;值对象&lt;/code&gt;, 仅比较它们的 &lt;code&gt;Id&lt;/code&gt; 是否相等?&lt;/em&gt;&quot; 这个问题的回答可以归结为三个部分:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;In terms of &lt;strong&gt;identity comparison&lt;/strong&gt;, the answer is &lt;strong&gt;yes&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;就比较标识符而言, 答案是&lt;strong&gt;可以&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;In terms of &lt;strong&gt;immutability&lt;/strong&gt;, the answer is &lt;strong&gt;yes&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;就不可变性而言, 答案是&lt;strong&gt;可以&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;In terms of &lt;strong&gt;history preservation&lt;/strong&gt;, the answer is &lt;strong&gt;no&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;就历史保护而言, 答案是&lt;strong&gt;不能&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Thus, the overall answer is also &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此, 总的答案也是&lt;strong&gt;不能的&lt;/strong&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 31 Dec 2019 15:39:00 +0000</pubDate>
<dc:creator>心千</dc:creator>
<og:description>在这篇文章中, 我们将讨论一个有趣的问题, 关于实体与值对象的概念是否相同.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xixixiao/p/is-entity-same-as-value-object.html</dc:identifier>
</item>
<item>
<title>Joomla 3.9.13 二次注入分析（CVE-2019-19846） - ka1n4t</title>
<link>http://www.cnblogs.com/litlife/p/12127838.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/litlife/p/12127838.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;这一个需要管理员权限的二次SQL注入，利用起来比较鸡肋。这里仅分享一下挖洞时的思路，不包含具体的poc。&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;
&lt;p&gt;漏洞触发点在components/com_content/models/articles.php:L458&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$dateFiltering = $this-&amp;gt;getState('filter.date_filtering', 'off');
$dateField     = $this-&amp;gt;getState('filter.date_field', 'a.created');

switch ($dateFiltering)
{
    case 'range':
        ...
        $query-&amp;gt;where(
            '(' . $dateField . ' &amp;gt;= ' . $startDateRange . ' AND ' . $dateField .
            ' &amp;lt;= ' . $endDateRange . ')'
        );
        break;

    ...
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到这里的dateField从getState('filter.date_field')取值之后未经任何过滤就直接拼接到where语句中。通过在这个model的逆向查找，并没有找到date_field这个state初始化的地方。我们只能先通过构造入口，来看看使用这个model的控制器是否对date_field进行了初始化。&lt;/p&gt;
&lt;p&gt;这个model属于前台的com_content组件，但是这个model的入口与同组件下的其他几个model不太一样。其他的model基本上都可以通过访问这个组件来访问，而articles model在本组件中却没有使用。&lt;/p&gt;
&lt;p&gt;程序中有两个名为articles的model，一个在/components，一个在/administrator/components目录下。我在黑盒测试的时候构造了一个url如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/index.php?option=com_content&amp;amp;view=articles&amp;amp;layout=modal&amp;amp;tmpl=component&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里程序中的控制器会根据view和layout的值，将请求直接跳到了administrator目录下的articles中了。但是根据&lt;code&gt;存在即合理，天生我材必有用&lt;/code&gt;，/components下面有个前台articles的model，因此程序中一定会有调用这里的地方。最终找到了几处调用前台article的地方，只是有的跟正常调用的不太一样，这里是动态调用。写法大概有如下几种&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' =&amp;gt; true));

也有动态调用model：
/libraries/src/MVC/Controller/BaseController.php:createModel($model, ...){
    ...
    JModelLegacy::getInstance($modelName, $classPrefix, $config);
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过访问&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;index.php/blog?252c5a5ef0e3df8493dbe18e7034957e=1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以到达漏洞点，但是state我们控制不了，因为首先在articles model中没有对date_field做赋值处理，只能寄希望于调用这个model的地方能对date_field赋值。可是通过查看代码发现，当前的index.php/blog路由背后的com_content组件并没有对date_field进行初始化，因此这个组件只能放弃，看看其他的。&lt;/p&gt;
&lt;p&gt;终于，在一个module：mod_articles_popular的helper类中找到了有设置date_field的地方，大概如下/modules/mod_articles_popular/helper.php&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function getList(&amp;amp;$params){
    $model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' =&amp;gt; true)); //调用articles model
    ...
    $date_filtering = $params-&amp;gt;get('date_filtering', 'off');
    if ($date_filtering !== 'off'){
        $model-&amp;gt;setState('filter.date_filtering', $date_filtering);
        $model-&amp;gt;setState('filter.date_field', $params-&amp;gt;get('date_field', 'a.created'));
        ...
    }
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到这里通过$params-&amp;gt;get('date_field')来进行赋值，这里的param是从modules表中取出的。通过逆向查找发现，/libraries/src/Helper/ModuleHelper.php:getModuleList()方法会从modules表取出module的属性（包括param），然后在/libraries/src/Document/Renderer/Html/ModulesRenderer.php:render():L45对module进行遍历并渲染：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foreach (ModuleHelper::getModules($position) as $mod){
    $moduleHtml = $renderer-&amp;gt;render($mod, $params, $content);
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到这里我们理一下思路，首先是那个SQL注入点，date_field，需要从param中获取值，而param又是从module在数据库中对应的param获取的。因此我们这里可以考虑一下二次注入。由于在获取date_field的值时使用了&lt;code&gt;$this-&amp;gt;getState('filter.date_field', 'a.created');&lt;/code&gt;，且默认值为a.created，因此猜测这个字段在某个部分是可以修改的。&lt;/p&gt;
&lt;p&gt;通过对漏洞点和此module附近的功能与逻辑进行部分了解之后，可以发现在首页的module编辑中，可以直接编辑date_field字段！因此我们只要点击保存后抓包修改一下date_field的内容即可将之写进modules表中！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201912/1077935-20191231224943681-632572123.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里回到最开始的漏洞点&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$dateFiltering = $this-&amp;gt;getState('filter.date_filtering', 'off');
$dateField     = $this-&amp;gt;getState('filter.date_field', 'a.created');

switch ($dateFiltering)
{
    case 'range':
        $startDateRange = $db-&amp;gt;quote($this-&amp;gt;getState('filter.start_date_range', $nullDate));
        $endDateRange   = $db-&amp;gt;quote($this-&amp;gt;getState('filter.end_date_range', $nullDate));
        $query-&amp;gt;where(
            '(' . $dateField . ' &amp;gt;= ' . $startDateRange . ' AND ' . $dateField .
            ' &amp;lt;= ' . $endDateRange . ')'
        );//vuln 
        break;

    ....&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到这里还有个dateFiltering的限制。其实我们只要在刚刚的module设置中把date_filtering设置为range即可。&lt;/p&gt;
&lt;h3 id=&quot;更好的注入&quot;&gt;更好的注入&lt;/h3&gt;
&lt;p&gt;可是目前为止这个漏洞还只是盲注而已。。回显它不香吗？并且之前拼接的SQL语句执行之后会报错&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Unknown column 'a.hits' in 'order clause'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于最后有个order by一个不可控的column名，并且我们不知道a.hits列名的表叫什么（每个Joomla系统的表前缀都默认是随机的），因此我们不能很好的union出数据。这里最简单的办法就是看看是否能控制order by的值，比如将之置为1。查看代码发现这个order by的确是可以控制的，就在之前的漏洞点下面几行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$query-&amp;gt;order($this-&amp;gt;getState('list.ordering', 'a.ordering') . ' ' . $this-&amp;gt;getState('list.direction', 'ASC'));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里依旧是通过getState()来进行取值。通过回看模块mod_articles_popular的赋值点，发现这里写死成a.hits了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201912/1077935-20191231225006583-228700910.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因此这个module就不太好用了，我们要考虑另一个list.ordering可控的module，结果就发现了模块mod_articles_category，满足我们的所有幻想：date_field可控、date_filtering可控、list.ordering可控&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ordering = $params-&amp;gt;get('article_ordering', 'a.ordering');

switch ($ordering){
    ...
    default:
        $articles-&amp;gt;setState('list.ordering', $ordering);
        ...
}

$date_filtering = $params-&amp;gt;get('date_filtering', 'off');
if ($date_filtering !== 'off'){
    $articles-&amp;gt;setState('filter.date_filtering', $date_filtering);
    $articles-&amp;gt;setState('filter.date_field', $params-&amp;gt;get('date_field', 'a.created'));

    ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同理，登陆后在首页编辑模块，然后将相应的值改掉就好了。经过测试发现这里的list.ordering没有进行任何的过滤，因此可以算是一个单独的order by注入。不过这里我们的目标是只要将order by的列置为1即可，以便在date_field的位置进行union 注入。&lt;/p&gt;
&lt;h3 id=&quot;利用&quot;&gt;利用&lt;/h3&gt;
&lt;p&gt;这里仅放出效果图，具体的poc就不公开了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201912/1077935-20191231225021911-1690406926.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201912/1077935-20191231225029097-676419401.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;这个洞还是比较鸡肋的，1是需要最高的super user权限，2是由于有token校验无法进行csrf，因此把这个漏洞限制成只能有sa账号才能进行利用。&lt;/p&gt;
&lt;h3 id=&quot;补丁分析&quot;&gt;补丁分析&lt;/h3&gt;
&lt;p&gt;在最新版的3.9.14中，通过diff发现官方做的修复很简单，只是在module中存储时对字段进行了校验&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201912/1077935-20191231225048582-110320173.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也就是只加了个&lt;code&gt;validate=&quot;options&quot;&lt;/code&gt;。下面我们要跟进一下这个字段有何意义，在这之前我们要先搞懂这个xml文件是啥。&lt;/p&gt;
&lt;p&gt;下图是利用链的第一部分：module的目录结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201912/1077935-20191231225059841-1980783604.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;helper.php是我们利用的文件，而这个xml配置文件主要是包含了当前module的一些基本信息，以及一些&lt;code&gt;参数&lt;/code&gt;的信息，包括参数的描述、type、默认值、值范围等等，这是我们需要重点关注的。以我们的poc中的date_filter作为例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201912/1077935-20191231225145429-1342858745.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到它的默认值是&lt;code&gt;a.title&lt;/code&gt;，同时下面还有很多option标签，也就是说这个字段的值只能是option标签的值的其中一个。&lt;/p&gt;
&lt;p&gt;但是说是这么说，Joomla在这次补丁之前并没有进行校验，也就是前面说的&lt;code&gt;validate=&quot;options&quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面跟进源码走一下，下面的代码是保存param之前的逻辑&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/libraries/src/MVC/Controller/FormController.php

public function save(...) {
    ....
    $data  = $this-&amp;gt;input-&amp;gt;post-&amp;gt;get('jform', array(), 'array');//获取用户传参
    ....
    $form = $model-&amp;gt;getForm($data, false);
    ....
    $validData = $model-&amp;gt;validate($form, $data);//校验
    ...
    if (!$model-&amp;gt;save($validData)) {//保存
        ..error...
    }
    
    ...
    
    return true;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;跟进这里的validate，底层代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/libraries/src/MVC/Model/FormModel.php

public function validate(...) {
    ...
    $data = $form-&amp;gt;filter($data);
    $return = $form-&amp;gt;validate($data, $group);

    ...
    return $data;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继续跟进validate&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/libraries/src/Form/Form.php

public function validate($data, $group = null)
{
    ...

    // Create an input registry object from the data to validate.
    $input = new Registry($data);

    // Get the fields for which to validate the data.
    $fields = $this-&amp;gt;findFieldsByGroup($group);

    ...

    // Validate the fields.
    foreach ($fields as $field)//
    {
        $value = null;
        $name = (string) $field['name'];

        // Get the group names as strings for ancestor fields elements.
        $attrs = $field-&amp;gt;xpath('ancestor::fields[@name]/@name');
        $groups = array_map('strval', $attrs ? $attrs : array());
        $group = implode('.', $groups);

        // Get the value from the input data.
        if ($group)
        {
            $value = $input-&amp;gt;get($group . '.' . $name);
        }
        else
        {
            $value = $input-&amp;gt;get($name);
        }

        // Validate the field.
        $valid = $this-&amp;gt;validateField($field, $group, $value, $input);//

        // Check for an error.
        if ($valid instanceof \Exception)
        {
            $this-&amp;gt;errors[] = $valid;
            $return         = false;
        }
    }

    return $return;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;跟进validateField&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected function validateField(\SimpleXMLElement $element, $group = null, $value = null, Registry $input = null)
{
    ...

    // Get the field validation rule.
    if ($type = (string) $element['validate'])//根据xml中的每个field节点的&quot;validate&quot;属性做校验
    {
        // Load the JFormRule object for the field.
        $rule = $this-&amp;gt;loadRuleType($type);//如果$type是options，则$rule为类&quot;Joomla\\CMS\\Form\\Rule\\OptionsRule&quot;的实例化

        ...

        // Run the field validation rule test.
        $valid = $rule-&amp;gt;test($element, $value, $group, $input, $this);//

        // Check for an error in the validation test.
        if ($valid instanceof \Exception)
        {
            return $valid;
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里获取&lt;code&gt;validate&lt;/code&gt;属性的值之后，调用对应类的test方法。这里我们以本次的补丁为例&lt;code&gt;validate=options&lt;/code&gt;，跟进OptionsRule的test方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public function test(\SimpleXMLElement $element, $value, $group = null, Registry $input = null, Form $form = null)
{
    // Check if the field is required.
    $required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');

    if (!$required &amp;amp;&amp;amp; empty($value))
    {
        return true;
    }

    // Make an array of all available option values.
    $options = array();

    // Create the field
    $field = null;

    if ($form)
    {
        $field = $form-&amp;gt;getField((string) $element-&amp;gt;attributes()-&amp;gt;name, $group);
    }

    // When the field exists, the real options are fetched.
    // This is needed for fields which do have dynamic options like from a database.
    if ($field &amp;amp;&amp;amp; is_array($field-&amp;gt;options))
    {
        foreach ($field-&amp;gt;options as $opt)//取出所有option节点
        {
            $options[] = $opt-&amp;gt;value;//取出field节点对应的option子节点，用于后面进行in_array()校验合法性
        }
    }
    else
    {
        foreach ($element-&amp;gt;option as $opt)//取出所有option节点
        {
            $options[] = $opt-&amp;gt;attributes()-&amp;gt;value;//取出field节点对应的option子节点，用于后面进行in_array()校验合法性
        }
    }

    // There may be multiple values in the form of an array (if the element is checkboxes, for example).
    if (is_array($value))
    {
        // If all values are in the $options array, $diff will be empty and the options valid.
        $diff = array_diff($value, $options);//校验

        return empty($diff);
    }
    else
    {
        // In this case value must be a string
        return in_array((string) $value, $options);//校验
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;原理比较简单，就是通过&lt;code&gt;in_array()和array_diff()&lt;/code&gt;将用户输入值与option节点的值进行对比。&lt;/p&gt;
&lt;p&gt;######################### 最后最后一句话&lt;/p&gt;
&lt;p&gt;新年快乐，希望2020年能变强。&lt;/p&gt;
&lt;p&gt;2019年12月31日 22点55分&lt;/p&gt;
</description>
<pubDate>Tue, 31 Dec 2019 14:52:00 +0000</pubDate>
<dc:creator>ka1n4t</dc:creator>
<og:description>[TOC] 前言 这一个需要管理员权限的二次SQL注入，利用起来比较鸡肋。这里仅分享一下挖洞时的思路，不包含具体的poc。 分析 漏洞触发点在components/com_content/models</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/litlife/p/12127838.html</dc:identifier>
</item>
<item>
<title>salesforce零基础学习（九十五）lightning out - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/12121976.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/12121976.html</guid>
<description>&lt;p&gt;随着salesforce对lightning的推进，越来越多的项目基于lightning开发，导致很多小伙伴可能都并不了解classic或者认为不需要用到classic直接就开始了lightning的开发。其实有精力了解classic的使用还是很有必要的，因为lightning还在不断的优化中，可能有一部分还需要使用classic的功能来实现或者来协助实现，比如list view的list button目前只能使用visualforce page搭配lightning component。那么vf 如何去引用已经弄好的lightning component呢，我们接下来使用一个demo去简单了解一下。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;需求：&lt;/strong&gt;在lightning环境下的contact list view定义一个自定义的list button，实现使用pop up方式弹出所勾选的数据列表( lwc + aura实现)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 实现步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.构建LwC component画UI；&lt;/p&gt;
&lt;p&gt;2. 构建aura component包含lwc component；&lt;/p&gt;
&lt;p&gt;3. 创建aura single APP继承ltng:outApp(包含SLDS样式库)/ltng:outAppUnstyled(不包含SLDS样式库)，使用aura:dependency标签的resource属性引入2步骤中的aura component；&lt;/p&gt;
&lt;p&gt;4. 创建vf page，使用$Lightning.use引入上面的aura single APP，然后动态创建component显示即可。&lt;/p&gt;
&lt;p&gt;Talk is cheap,show me the code.下面根据上面的需求进行开发。&lt;/p&gt;
&lt;p&gt; 1. ContactListController.cls：根据选择的contact id list进行搜索数据，因为前端使用wire装载方式，所以方法声明必须使用cacheable=true&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; with sharing &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ContactListController {
    @AuraEnabled(cacheable&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;Contact&amp;gt; fetchContactListByIDs(List&amp;lt;String&amp;gt;&lt;span&gt; idList){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [SELECT Id,Name
                FROM Contact
                WHERE Id IN :idList];
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2. contactListForLwc.html：用来展示一个popup modal，modal中展示一个table数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section &lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;=&quot;dialog&quot;&lt;/span&gt;&lt;span&gt; tabindex&lt;/span&gt;&lt;span&gt;=&quot;-1&quot;&lt;/span&gt;&lt;span&gt; aria-labelledby&lt;/span&gt;&lt;span&gt;=&quot;modal-heading-01&quot;&lt;/span&gt;&lt;span&gt; aria-modal&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; aria-describedby&lt;/span&gt;&lt;span&gt;=&quot;modal-content-id-1&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal slds-fade-in-open&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal__container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; modal header start &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;header &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal__header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-button slds-button_icon slds-modal__close slds-button_icon-inverse&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;Close&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning-icon &lt;/span&gt;&lt;span&gt;icon-name&lt;/span&gt;&lt;span&gt;=&quot;utility:close&quot;&lt;/span&gt;&lt;span&gt;
                    alternative-text&lt;/span&gt;&lt;span&gt;=&quot;close&quot;&lt;/span&gt;&lt;span&gt;
                    variant&lt;/span&gt;&lt;span&gt;=&quot;inverse&quot;&lt;/span&gt;&lt;span&gt;
                    size&lt;/span&gt;&lt;span&gt;=&quot;small&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-assistive-text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Close&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;modal-heading-01&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;slds-text-heading_medium slds-hyphenate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Selected Contact List&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; modal body start &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-modal__content slds-p-around_medium&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;modal-content-id-1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-table slds-table_cell-buffer slds-table_bordered&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-line-height_reset&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; scope&lt;/span&gt;&lt;span&gt;=&quot;col&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-truncate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Contact Id&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; scope&lt;/span&gt;&lt;span&gt;=&quot;col&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-truncate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Contact Name&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;if:true&lt;/span&gt;&lt;span&gt;={contactList.data}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;for:each&lt;/span&gt;&lt;span&gt;={contactList.data} &lt;/span&gt;&lt;span&gt;for:item&lt;/span&gt;&lt;span&gt;=&quot;contact&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;={contact.Id}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{contact.Id}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; {contact.Name}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;if:false&lt;/span&gt;&lt;span&gt;={contactList.data}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;colspan&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;List View is not contains any data&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-backdrop slds-backdrop_open&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;contactListForLwc.js：调用后台获取列表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
import { LightningElement, api, wire } from 'lwc'&lt;span&gt;;
import fetchContactListByIDs from &lt;/span&gt;'@salesforce/apex/ContactListController.fetchContactListByIDs'&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; class ContactListForLwc extends LightningElement {
    @api contactIdList;

    @wire(fetchContactListByIDs,{idList:&lt;/span&gt;'$contactIdList'&lt;span&gt;})
    contactList;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3. ContactListForAura.cmp：用于包一层lwc，用来在single app中使用，因为目前的动态创建component只能aura,所以lwc需要套一层。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;selectedIds&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;List&quot;&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:contactListForLwc &lt;/span&gt;&lt;span&gt;contactIdList&lt;/span&gt;&lt;span&gt;=&quot;{!v.selectedIds}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4. ContactListApp.app：创建single app，设置access 为GLOBAL，因为需要使用SLDS的样式，这里extends为ltng:outApp,然后通过aura:dependency引入想要渲染的子component&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:application &lt;/span&gt;&lt;span&gt;access&lt;/span&gt;&lt;span&gt;=&quot;GLOBAL&quot;&lt;/span&gt;&lt;span&gt; extends&lt;/span&gt;&lt;span&gt;=&quot;ltng:outApp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:dependency &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;c:ContactListForAura&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:application&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5. ContactListPage.page：用于声明contact list类型，然后使用$Lightning.user实现lightning out的功能。这里需要有几点小小的注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; 需要设置recordSetVar，这样才可以使用到list view的list button中；&lt;/li&gt;
&lt;li&gt;需要引入apex:includeLightning，最好放在引入的第一行；&lt;/li&gt;
&lt;li&gt;javascript中使用GETRECORDIDS函数来获取列表中选择的数据选项，在vf page中需要使用{!selected}来获取，因为在js中如果使用''方式扩上他返回的是string类型，不扩上直接在list引用会报错，所以这里使用apex:repeat方式将其迭代在一个list中；&lt;/li&gt;
&lt;li&gt;使用$lightning.use引入一个single app，然后在动态创建里面的auraDependency的component，$lightning.use可以多次使用，但是需要多次引入不同的single app，详细的使用自行查看文档。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;apex:page &lt;/span&gt;&lt;span&gt;standardController&lt;/span&gt;&lt;span&gt;=&quot;Contact&quot;&lt;/span&gt;&lt;span&gt; recordSetVar&lt;/span&gt;&lt;span&gt;=&quot;Contacts&quot;&lt;/span&gt;&lt;span&gt; showHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;apex:includeLightning&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;lightning&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; selectedList &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;apex:repeat &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;{!selected}&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;selectedItem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            selectedList.push(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{!selectedItem}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;); 
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;apex:repeat&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(selectedList.length &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
            window.location.href &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/003&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            $Lightning.use(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c:ContactListApp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            $Lightning.createComponent(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c:ContactListForAura&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                {selectedIds : selectedList},
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lightning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(cmp) {
                    console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;component created&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
                );
            });
        }
        
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;apex:page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 6. 创建contact的list button，然后类型选择 list button，选择指定的vf page，然后在search layout中的list view中将定义的拖拽即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201912/910966-20191231163447228-463472896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201912/910966-20191231163536872-16711594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;效果展示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Contact列表勾选了两条数据，然后点击按钮&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201912/910966-20191231163859525-1946952439.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 2. 弹出页面展示选择的两条数据。&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201912/910966-20191231163911662-314813267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;总结：&lt;/strong&gt;篇中通过简单的例子展示了lightning out实现以及list view button关于vf page如何引入lightning component / lightning web component。缺点是使用vf page无法实现类似action的效果在本页pop up，查找了很多资料也没有实现，有好的实现方式欢迎留言。lightning out实际场景不仅仅demo中的使用场景，详细的lightning out知识以及限制自行查看。篇中有错误地方欢迎指出，有不懂地方欢迎留言。&lt;/p&gt;
</description>
<pubDate>Tue, 31 Dec 2019 13:55:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<og:description>随着salesforce对lightning的推进，越来越多的项目基于lightning开发，导致很多小伙伴可能都并不了解classic或者认为不需要用到classic直接就开始了lightning的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zero-zyq/p/12121976.html</dc:identifier>
</item>
<item>
<title>WPF实现大数据分析 - 气宇轩昂_2017</title>
<link>http://www.cnblogs.com/luoyuhao/p/12127588.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luoyuhao/p/12127588.html</guid>
<description>&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Canvas &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;-100,0,0,0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;hainan&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;海南&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;536.396,694.058 532.068,692.389 528.406,691.387 525.076,689.718 523.745,688.716 522.746,687.714 522.08,683.708 521.747,679.033 522.08,675.027 522.413,673.357 523.079,671.688 526.075,670.686 527.74,670.018 529.072,669.351 529.405,663.007 530.403,662.339 531.069,662.005 532.734,662.339 534.399,662.673 535.73,662.673 536.729,662.673 545.386,657.999 560.701,656.997
562.033,657.665 563.365,658.666 564.696,660.336 566.028,662.339 566.028,665.678 565.362,667.013 564.696,668.349 561.034,673.691 559.369,676.362 558.038,679.367 557.039,681.704 556.373,683.374 555.374,684.709 551.379,686.713 547.716,689.05 541.058,693.39 536.396,694.058&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;guangdong&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;广东&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;548.573,653.146 547.237,652.144 546.235,651.141 545.233,649.47 544.231,645.794 539.556,639.444 539.556,636.436 539.89,634.765 540.892,633.763 542.561,632.426 543.229,627.747 543.897,626.076 544.565,624.405 545.567,623.068 546.903,621.731 550.577,618.723 555.253,613.71 557.59,611.705 560.262,609.7 565.272,603.684 570.281,598.671 572.285,597 573.621,595.329
574.623,593.324 575.291,590.985 575.291,588.311 575.625,586.64 575.959,585.303 576.627,584.301 578.297,582.63 579.633,581.627 580.969,579.956 580.301,570.264 581.971,568.593 582.972,566.588 583.306,564.583 583.64,562.577 585.978,558.567 589.318,558.567 594.996,563.914 598.335,563.914 598.669,563.246 599.003,562.577 599.337,560.572 599.671,557.898 596.331,554.222
597.333,553.888 613.364,553.888 615.368,554.222 618.374,554.222 621.379,553.888 623.049,553.22 624.051,552.551 626.055,552.551 626.055,555.893 619.042,563.914 619.376,566.254 620.044,567.256 620.711,567.925 621.713,568.259 623.049,568.593 627.057,568.927 636.408,564.583 639.748,564.583 641.752,566.588 643.756,566.254 645.426,565.585 649.099,563.246 651.103,562.243
653.107,561.575 655.445,561.241 658.117,561.909 663.126,567.925 670.474,577.951 670.474,580.624 667.134,580.958 665.13,581.627 664.128,582.63 663.126,583.632 661.122,585.303 660.455,585.972 660.121,587.308 660.121,588.311 661.122,589.982 661.122,590.985 657.115,592.99 653.107,595.329 649.099,597.669 645.426,599.674 642.754,602.347 641.752,602.347 640.75,602.013
640.082,601.345 639.748,600.676 636.742,600.676 634.738,603.35 632.401,603.35 631.733,602.347 631.065,601.679 630.397,601.345 629.729,601.345 628.727,601.345 627.391,601.679 627.391,605.69 626.389,606.358 625.721,607.026 624.385,607.361 623.717,607.361 623.049,608.029 622.715,609.032 622.047,610.368 620.044,610.034 619.376,609.7 619.042,609.366 618.374,608.363
617.706,607.026 616.704,607.026 612.362,603.016 609.69,603.016 608.688,605.021 607.686,607.695 604.347,613.042 602.009,614.045 600.673,615.047 599.337,616.384 598.001,618.389 595.997,618.723 594.328,619.058 590.654,622.4 587.982,622.4 585.978,622.734 584.642,623.068 583.306,623.737 582.304,625.742 580.301,625.742 577.629,624.739 575.959,624.739 574.623,625.408
572.619,626.076 562.934,629.752 559.594,630.086 556.922,630.421 554.919,631.757 552.581,633.763 552.247,637.773 550.243,638.441 548.907,639.444 548.239,640.781 548.239,643.12 549.575,644.123 551.579,645.794 552.581,647.131 553.249,648.133 553.917,649.47 553.917,651.141 552.581,651.81 550.911,652.478 548.573,653.146&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;yunnan&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;云南&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;398.202,638.707 395.856,636.705 393.846,635.037 391.835,634.036 389.825,633.035 390.16,630.033 390.16,627.698 389.825,625.696 389.155,624.028 387.479,622.693 385.804,622.693 384.464,623.027 383.124,623.361 382.118,624.028 380.108,625.696 378.433,627.698 373.742,626.697 371.396,623.361 370.391,622.026 369.386,621.359 366.705,618.023 365.7,617.022 365.03,616.688
364.025,616.355 362.684,616.355 358.999,616.355 358.329,615.02 357.658,613.686 357.323,612.351 356.988,611.017 356.988,608.681 356.988,606.68 357.994,604.011 358.329,601.342 357.994,599.006 357.658,598.006 357.323,597.005 353.303,596.004 351.292,595.003 350.957,594.669 350.957,594.002 350.957,591.667 349.282,585.995 347.271,582.993 346.266,579.323 345.596,577.989
344.926,577.321 343.921,576.654 342.916,576.321 339.9,575.987 335.209,578.656 332.864,579.657 330.853,579.99 330.518,579.323 330.183,564.978 332.864,558.973 335.544,555.97 337.89,553.635 340.57,551.299 344.256,548.63 348.277,544.961 348.612,537.955 350.287,534.952 350.287,531.282 350.287,527.613 350.957,524.61 351.292,523.276 351.962,522.608 352.297,519.606
352.632,517.271 352.297,514.935 351.292,512.934 344.256,506.928 344.256,501.59 345.931,501.59 347.606,501.257 351.292,499.922 351.627,497.921 351.627,495.919 351.627,493.917 351.292,491.916 350.287,488.579 350.287,486.911 349.952,485.243 351.292,484.242 352.632,483.242 353.303,483.242 353.973,483.242 354.978,483.909 355.983,484.576 358.664,490.581 360.004,494.251
361.009,498.254 361.679,499.255 362.349,499.589 365.03,499.922 365.7,498.588 366.37,497.587 366.705,494.918 366.705,490.581 368.716,488.913 369.721,490.581 370.726,492.583 372.401,497.921 375.082,501.924 376.757,504.259 379.103,506.928 385.804,507.929 391.835,519.272 397.866,527.279 398.202,529.948 396.861,531.616 395.856,532.951 395.521,534.285 395.521,537.287
397.196,539.289 398.536,540.957 400.882,542.625 402.222,542.959 403.898,543.626 405.908,544.961 407.248,545.962 409.259,546.629 413.95,546.295 426.347,540.957 427.352,538.288 428.022,536.287 428.357,533.951 428.357,531.616 427.017,529.614 426.012,528.613 423.667,526.945 423.667,522.942 423.667,521.608 424.672,520.273 427.017,518.939 429.698,517.271 432.043,515.269
434.054,512.934 434.054,508.596 433.383,506.261 432.378,504.593 431.708,503.592 430.703,502.591 430.368,501.257 433.048,500.59 434.389,498.922 435.394,497.254 436.064,495.252 436.734,494.251 437.739,493.917 439.75,493.917 442.765,494.251 446.451,503.926 448.126,505.928 449.467,507.262 451.142,508.596 457.173,508.596 459.854,506.595 462.534,504.593 463.539,506.261
463.539,508.596 463.204,511.599 462.534,514.602 461.864,515.936 460.859,517.271 458.513,517.938 456.168,517.938 450.807,515.269 446.451,515.269 443.435,515.936 442.095,516.27 440.755,517.271 437.739,519.606 435.729,522.608 435.729,525.945 435.729,527.613 436.734,529.948 437.069,531.616 437.739,532.617 438.409,533.618 439.415,534.619 440.42,534.952 441.76,534.619
443.435,533.951 446.116,533.618 447.121,533.284 448.461,533.284 449.131,533.951 449.802,534.619 450.137,536.287 450.472,538.288 448.126,546.295 446.786,548.297 445.781,549.965 445.781,551.633 446.116,552.967 447.121,554.302 448.461,555.303 450.472,556.304 453.152,557.305 452.817,561.975 452.482,564.31 451.477,566.979 451.477,568.314 451.477,569.982 451.812,571.316
452.482,572.651 457.508,578.656 468.9,581.658 470.241,582.659 471.246,583.327 472.586,583.994 476.942,584.327 477.947,587.997 476.942,589.332 476.272,590.666 472.586,593.001 469.571,594.336 467.225,594.336 465.215,594.669 463.204,595.337 461.529,596.004 458.178,597.672 454.828,600.007 453.487,602.676 452.147,604.344 450.807,605.679 444.441,605.679 441.09,609.349
440.085,610.016 439.079,610.683 437.739,611.017 436.734,611.017 435.394,609.015 434.054,607.681 432.713,607.013 431.373,607.013 430.033,607.347 428.692,608.014 426.347,609.682 424.672,610.016 423.331,610.016 421.991,609.682 421.321,609.349 419.646,608.014 418.305,606.68 416.295,606.346 414.955,606.346 413.615,606.346 412.609,607.013 411.604,607.681 410.934,608.348
409.594,610.683 408.589,611.35 407.583,611.684 406.243,611.684 405.238,611.35 403.227,610.349 402.222,609.349 399.542,609.349 397.866,611.017 396.861,612.351 396.526,614.019 396.191,617.022 397.531,619.023 398.872,621.025 399.207,622.026 399.207,623.361 399.207,625.029 398.872,626.697 398.872,628.698 399.542,631.034 399.877,633.703 400.547,637.039 399.207,638.04
398.202,638.707&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;guangxi&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;广西&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;529.649,632.45 529.649,629.438 528.98,629.438 528.645,629.103 527.976,628.099 525.968,627.764 525.634,626.425 524.964,625.422 524.295,624.417 523.626,624.083 522.957,624.083 522.288,624.083 520.615,624.417 519.611,628.768 508.234,629.438 501.207,628.099 495.519,627.43 490.835,622.409 489.162,619.063 488.492,619.063 487.823,616.72 488.158,614.712 488.827,613.038
489.831,611.365 489.831,607.014 485.816,604.337 485.816,603.333 478.12,602.998 471.762,602.329 468.081,600.655 466.408,596.639 471.762,596.304 473.101,595.635 474.774,594.631 477.785,591.954 479.124,589.276 479.458,586.933 479.124,584.925 478.12,582.917 473.435,582.583 471.428,581.244 469.085,580.24 465.07,578.901 461.055,577.562 457.709,576.224 455.366,573.212
454.697,571.873 454.363,571.204 456.37,568.191 457.374,566.853 458.043,566.183 459.382,565.514 460.386,565.179 462.393,564.845 464.735,564.845 469.42,566.518 474.439,570.869 476.112,571.204 478.12,571.204 480.462,571.204 483.139,570.869 485.816,568.191 488.827,565.179 491.504,561.833 494.181,559.155 494.515,555.474 498.531,555.139 500.204,557.482 501.877,558.151
503.55,559.155 505.892,560.494 508.569,561.498 511.58,561.498 518.607,559.155 520.949,557.147 522.957,555.808 524.964,554.47 527.641,553.131 528.31,552.127 529.649,551.123 531.656,548.445 532.995,547.776 533.999,546.772 537.01,545.768 540.356,545.433 546.379,545.099 549.725,542.756 552.737,540.748 554.075,540.078 555.748,539.409 557.756,539.074 560.098,539.074
563.779,545.099 566.79,548.111 564.113,552.796 562.44,555.139 561.436,557.816 561.102,562.502 561.771,562.837 563.109,562.837 566.79,562.837 568.463,567.857 569.801,569.865 577.163,569.195 578.167,570.869 578.836,573.212 579.505,575.889 579.505,578.901 578.167,580.575 577.163,581.579 575.824,582.248 575.49,582.917 575.155,583.252 574.486,583.587 573.482,591.284
572.478,593.292 571.474,595.635 569.467,596.974 568.463,597.643 568.463,598.647 566.79,599.317 565.452,600.321 564.113,601.994 562.775,603.667 560.432,607.014 559.094,608.353 557.421,609.357 557.086,610.026 556.417,610.696 554.744,611.7 552.402,614.042 550.06,616.72 549.725,617.055 549.725,617.389 549.056,617.389 549.056,618.393 548.052,618.393 547.383,618.728
545.71,620.067 543.368,622.744 541.025,628.434 538.349,629.103 536.006,630.107 534.333,631.111 532.326,632.45 529.649,632.45&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;taiwan&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;台湾&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;734.538,608.384 729.259,600.309 727.61,599.636 726.62,598.963 725.63,597.954 725.301,597.281 724.311,595.599 723.651,593.58 721.012,590.215 721.342,586.178 722.002,582.477 722.331,579.112 722.331,577.43 722.002,576.084 722.002,572.047 722.661,569.355 723.651,567 725.96,564.308 727.28,557.916 730.909,549.841 733.548,546.476 735.857,543.785 738.166,541.43
741.135,539.074 748.063,539.411 749.053,540.084 750.042,544.121 750.372,546.476 750.372,548.832 749.383,551.187 748.723,553.542 748.393,556.234 748.393,558.925 748.723,564.981 749.053,570.701 748.063,573.056 747.073,575.748 740.476,590.215 738.826,606.029 737.177,607.711 735.857,608.047 734.538,608.384&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;fujian&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;福建&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;672.546,579.024 672.546,578.02 672.211,577.016 671.206,575.343 670.202,574.005 669.197,573.336 669.197,572.332 659.487,560.286 656.474,559.617 654.13,559.283 651.786,559.283 650.112,558.948 649.777,556.271 649.777,553.594 650.782,549.245 651.116,547.906 651.451,546.903 651.451,544.56 651.451,542.218 651.116,540.211 656.474,534.188 657.143,530.173 656.809,524.819
656.809,522.477 657.143,521.473 657.478,520.804 659.822,519.466 662.166,518.127 665.514,514.447 666.853,511.435 666.853,508.424 665.849,506.416 665.514,504.743 665.179,503.74 665.514,502.736 666.184,501.732 667.188,501.063 669.867,499.055 671.876,498.721 673.885,498.386 676.229,498.051 678.572,497.048 680.247,495.709 681.586,493.702 682.925,491.36 683.93,489.352
684.934,489.017 685.939,489.017 687.278,489.352 688.617,490.021 689.287,491.694 689.622,493.702 690.961,497.717 691.631,499.725 692.97,501.732 694.309,503.405 696.653,505.078 706.028,505.747 707.033,504.743 708.372,504.409 711.051,503.405 714.399,503.405 717.413,503.07 719.087,504.074 716.408,506.416 715.404,507.755 714.064,509.762 713.729,515.116 710.381,514.781
707.033,514.781 706.028,515.451 705.024,516.12 704.354,517.123 704.689,519.131 706.363,520.135 708.037,522.142 710.716,523.815 708.372,526.158 708.372,527.496 708.037,529.169 707.033,532.18 707.033,533.853 706.698,535.526 707.033,536.865 707.702,538.538 709.377,539.876 709.377,540.545 708.372,540.211 703.685,540.211 703.015,541.214 703.015,542.218 703.35,543.222
703.015,545.229 700.671,546.903 699.332,548.241 698.662,549.914 697.992,553.26 696.318,555.267 694.644,557.275 688.617,557.61 687.948,558.613 687.948,559.617 688.282,560.956 689.957,562.628 687.948,563.298 686.273,564.301 684.599,565.305 683.26,566.644 680.581,569.32 677.903,572.666 677.568,575.008 676.229,576.347 674.889,577.351 672.546,579.024&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;guizhou&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;贵州&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;477.547,569.397 474.545,568.058 472.543,566.719 471.209,565.38 469.874,564.376 466.205,563.037 462.869,563.037 460.534,563.037 458.533,563.707 456.197,565.38 453.529,569.063 453.529,567.054 453.862,565.38 454.863,563.037 455.197,556.007 447.858,552.66 448.191,550.651 448.859,548.978 451.527,539.939 452.194,539.27 452.194,538.266 452.194,536.592 451.527,533.914
449.192,531.236 447.191,531.571 445.189,531.905 440.852,532.91 439.852,532.91 439.185,532.24 438.851,531.905 438.517,530.901 438.517,529.562 438.517,528.893 437.517,526.884 437.85,524.206 438.184,522.198 439.185,520.524 440.185,519.52 441.52,518.515 443.188,517.846 447.524,516.842 449.859,516.842 452.528,518.181 455.197,519.185 456.531,519.52 458.199,519.854
459.867,519.52 461.535,518.85 463.87,516.172 464.871,513.159 466.539,512.825 467.206,513.494 468.54,513.829 471.876,514.164 479.548,514.498 480.549,513.159 481.216,512.155 481.55,510.816 481.884,509.477 481.884,507.134 481.884,504.79 480.216,503.117 478.881,502.113 475.879,500.439 470.208,498.43 469.874,497.091 469.541,496.087 469.541,495.083 469.874,494.413
470.542,494.079 471.209,493.744 473.544,493.409 477.213,496.087 483.885,497.426 486.554,497.091 489.222,496.422 491.891,495.083 494.56,493.744 496.895,491.735 498.896,489.727 500.564,487.718 501.899,485.375 502.232,484.036 502.566,482.697 503.233,481.693 504.234,481.023 505.234,480.689 506.569,480.354 509.571,480.354 510.572,481.023 511.573,482.027 512.573,483.032
513.574,484.371 514.909,487.718 515.576,491.4 519.912,496.757 522.247,499.434 525.25,502.113 530.587,504.121 531.254,506.129 531.921,508.808 531.921,510.147 531.921,511.82 531.588,513.159 530.587,514.498 528.586,515.503 526.584,516.507 523.582,517.511 522.581,518.515 521.914,519.52 521.914,521.528 521.914,524.206 523.915,524.206 526.25,523.537 532.922,523.202
532.255,534.918 532.922,536.257 533.589,537.261 536.258,539.939 538.593,543.622 535.924,543.956 533.589,544.626 529.92,546.969 528.586,548.643 527.251,549.982 524.249,552.325 520.913,554.668 517.911,557.346 515.242,558.016 512.573,559.02 509.905,559.355 507.57,559.355 502.899,556.677 500.231,553.999 499.564,553.664 498.896,553.329 497.228,553.329 494.56,553.329
493.559,553.664 492.892,554.334 492.558,558.016 487.888,562.702 485.887,565.046 483.885,567.724 481.884,568.728 480.216,569.063 477.547,569.397&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;hunan&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;湖南&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;579.215,568.916 577.877,567.911 576.873,567.576 575.869,567.241 574.865,567.241 572.858,567.911 570.85,568.581 569.512,565.901 569.177,563.892 568.843,562.552 567.839,561.882 566.835,561.547 565.831,561.212 564.827,561.212 562.82,561.547 562.82,559.202 566.166,552.838 567.839,549.823 568.508,547.144 564.827,543.124 563.824,541.114 563.154,539.44 561.482,537.765
560.143,537.095 559.139,537.095 557.801,537.095 552.447,538.435 550.774,540.109 549.102,541.114 545.756,543.459 540.067,543.794 539.733,542.119 539.398,540.779 538.06,538.77 536.387,537.095 535.049,536.09 534.379,534.415 534.379,521.352 528.357,521.687 526.014,522.022 523.672,522.692 523.672,521.017 524.007,520.012 524.341,519.677 525.011,519.007 526.684,518.672
529.026,518.002 530.03,517.332 531.033,516.662 532.706,514.318 533.71,511.973 534.045,509.628 531.703,499.579 531.368,487.856 530.364,483.836 531.368,483.166 532.706,482.161 534.379,480.152 535.718,477.807 537.056,475.127 539.398,473.452 541.74,472.113 542.744,471.443 544.083,471.443 545.756,471.443 547.429,471.778 548.767,471.778 550.105,471.108 551.109,470.438
551.778,469.098 551.444,467.088 551.109,465.413 550.105,464.408 549.102,463.739 549.771,462.734 550.44,462.399 551.444,462.064 552.782,462.399 555.793,463.069 558.805,464.073 563.489,464.743 569.512,467.758 572.523,469.433 575.869,471.443 580.888,473.452 585.907,473.452 589.253,469.433 590.591,469.768 592.264,470.773 593.937,472.113 595.61,474.122 598.956,475.797
601.633,477.137 604.31,478.812 607.321,481.491 609.663,484.506 610.667,487.521 611.002,490.535 611.002,492.21 611.002,493.885 610.667,495.895 609.998,497.904 606.317,501.924 604.979,503.599 604.31,505.609 603.975,507.618 603.975,509.963 604.979,512.643 606.317,515.657 607.321,519.007 607.656,519.677 608.325,521.017 609.329,524.366 611.002,531.4 612.34,533.745
612.675,535.755 612.675,538.1 612.005,541.114 612.005,545.804 612.675,548.818 613.678,551.833 594.941,552.503 594.607,553.173 594.607,553.843 595.276,555.518 596.949,557.527 598.287,559.202 597.618,562.217 596.614,562.217 595.276,561.547 593.268,559.872 590.926,557.192 585.238,556.857 582.227,561.547 581.892,563.222 581.557,565.231 580.554,567.241 579.884,568.246
579.215,568.916&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;jiangxi&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;江西&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;625.24,567.472 624.236,566.47 623.232,566.137 621.225,565.803 621.225,564.801 627.918,556.12 627.583,552.781 626.914,550.778 624.571,550.778 622.898,551.112 621.559,551.779 620.221,552.447 615.536,552.447 613.528,545.769 613.862,542.097 614.197,538.758 614.532,535.419 614.197,534.083 614.197,532.414 612.524,530.745 612.189,528.741 611.854,526.738 610.516,522.731
609.177,519.059 608.173,515.72 606.5,512.047 606.165,510.711 605.831,509.042 605.496,507.706 605.831,506.371 606.5,505.035 607.504,503.366 608.173,503.032 608.843,502.364 610.516,500.361 612.524,496.354 612.524,487.673 610.516,482.331 609.177,480.662 613.193,477.323 615.87,476.655 617.878,475.987 618.547,475.653 618.882,475.319 620.221,475.319 621.225,473.984
622.563,472.648 625.91,470.311 629.256,468.308 632.268,466.304 633.607,464.969 634.945,463.967 636.953,463.3 638.961,462.632 643.311,461.63 645.319,460.962 647.327,459.961 648.331,457.624 648.666,456.956 649,456.622 650.674,456.288 653.016,456.288 653.351,464.301 654.355,464.969 655.359,465.303 658.036,465.637 659.04,464.635 659.375,463.633 660.044,461.964
660.713,459.961 661.048,459.293 661.382,458.625 662.052,460.295 663.056,462.298 664.06,463.3 665.064,463.967 666.068,464.635 667.406,465.303 669.749,465.303 671.757,464.969 674.099,464.301 676.442,463.3 679.453,463.3 678.784,464.301 677.78,465.303 676.107,467.306 675.438,468.642 674.768,469.643 674.768,470.979 674.768,472.314 677.111,474.986 679.119,477.657
681.127,480.662 683.469,484.334 683.135,488.341 682.465,489.009 681.796,490.01 680.792,492.682 679.119,494.351 677.446,495.686 676.107,496.354 674.768,496.688 671.757,497.022 670.083,497.356 668.41,498.024 665.733,500.027 664.394,501.696 663.725,502.364 663.725,503.366 663.725,507.039 664.729,508.374 665.064,510.044 664.729,511.713 664.06,513.716 660.378,517.389
657.032,520.06 656.028,520.728 655.359,521.73 655.024,523.065 655.024,524.401 655.693,529.743 654.355,534.417 652.012,536.421 650.674,538.09 650.004,539.092 649.67,540.093 649.67,543.432 650.004,547.439 649.335,549.776 648.331,552.447 647.996,555.786 647.996,558.791 649,561.462 642.977,564.801 641.638,563.465 639.965,562.798 638.292,562.464 636.953,562.798
635.28,563.465 633.607,564.133 630.26,565.469 627.918,566.47 625.24,567.472&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;sichuan&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;四川&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;410.189,545.331 408.515,544.663 405.837,542.991 403.494,541.654 401.485,540.651 399.477,539.314 397.134,536.64 397.134,533.965 398.473,532.294 399.477,530.288 399.811,528.951 399.477,527.279 399.142,525.942 398.473,524.605 396.464,521.93 395.125,520.593 394.121,518.922 392.112,515.913 390.773,513.238 389.1,510.898 387.761,507.555 387.091,506.887 386.422,506.218
385.752,505.884 385.083,505.884 382.405,505.884 379.392,504.546 375.375,498.863 372.363,490.171 370.019,487.163 367.676,487.163 366.337,488.166 365.333,489.168 364.998,490.84 364.998,494.517 364.664,496.189 363.994,498.195 362.655,497.526 362.32,494.517 361.316,491.509 360.312,489.168 359.642,486.828 360.312,486.16 360.647,485.491 360.981,484.154 360.981,481.814
361.651,475.462 360.312,472.119 359.642,469.11 359.308,466.102 359.642,463.427 361.316,461.421 362.99,459.415 362.32,451.726 358.638,446.378 356.964,440.026 356.295,437.686 355.291,435.68 351.943,431.668 349.265,427.991 346.922,424.314 346.253,422.642 345.918,420.971 339.893,416.959 338.888,415.287 337.884,415.287 337.884,411.276 337.884,409.27 338.219,407.933
339.558,407.264 340.562,406.261 341.232,405.258 341.566,403.921 341.901,401.581 342.236,398.907 337.884,393.892 337.884,390.215 350.27,389.546 351.609,390.215 353.282,391.886 354.956,393.892 356.63,396.232 356.63,398.238 357.299,400.244 358.303,401.915 359.308,403.921 362.32,407.598 365.668,410.941 367.007,410.941 368.346,411.276 369.015,411.61 369.685,411.944
371.358,414.284 372.697,413.95 374.036,413.95 375.375,413.282 377.384,411.944 378.388,411.944 379.392,412.613 379.392,413.282 379.727,413.95 380.396,414.284 381.066,414.619 383.074,414.953 385.083,415.287 386.422,416.959 389.769,416.959 392.782,414.619 400.481,413.282 401.15,412.279 401.82,411.276 401.82,409.27 401.15,406.93 400.146,402.918 399.477,400.912
399.142,398.907 399.477,397.569 399.811,396.566 400.816,397.235 402.155,398.572 403.494,399.575 405.837,400.912 406.841,402.25 408.85,402.918 411.193,402.918 413.536,402.918 416.214,402.25 418.892,399.575 418.557,396.232 417.888,393.892 417.218,392.221 416.883,390.549 418.557,388.543 420.566,386.872 421.905,385.869 422.909,385.534 424.248,385.534 425.921,386.203
426.591,388.209 427.595,389.88 429.269,391.552 431.947,393.892 436.298,395.564 437.972,397.569 440.315,399.575 442.993,401.915 444.332,403.253 445.337,405.258 446.675,408.601 447.68,410.607 449.353,412.947 451.362,414.953 452.701,415.956 454.04,416.29 465.756,416.29 467.43,415.287 469.438,414.284 471.447,413.616 473.79,413.616 481.489,416.29 488.518,416.29
491.866,419.299 493.874,420.302 497.222,420.636 500.569,423.645 500.569,432.003 498.226,435.011 496.217,438.354 494.878,441.697 493.539,445.375 489.857,450.389 485.171,455.404 482.828,456.072 481.154,456.072 479.48,455.738 478.476,455.404 476.468,453.398 473.79,451.392 472.785,450.389 471.781,449.386 469.773,448.383 468.099,448.049 466.425,448.049 465.756,449.386
465.756,456.072 466.425,458.078 467.095,460.084 467.095,462.424 467.095,465.433 466.76,467.773 466.091,470.782 466.091,473.791 466.425,477.134 469.103,479.808 470.108,480.477 471.112,481.48 472.116,482.817 473.12,484.488 473.455,486.16 473.455,487.831 473.12,489.503 471.781,491.174 469.438,492.512 468.434,493.514 468.099,494.183 467.764,495.186 467.764,498.195
468.769,499.198 469.773,500.2 472.785,501.538 476.468,502.875 478.476,504.212 480.15,505.549 479.815,509.227 479.48,511.233 478.811,511.901 478.476,512.904 474.794,512.57 471.112,512.235 468.099,511.567 465.756,510.564 465.421,508.224 465.086,506.218 464.417,504.546 463.747,502.875 462.408,503.209 461.069,503.209 459.396,504.212 457.722,505.549 456.048,506.552
451.697,506.552 450.023,505.215 448.684,503.543 447.68,502.206 447.01,500.535 446.006,497.192 445.337,494.517 443.328,491.843 438.976,491.843 437.303,491.843 436.298,492.177 435.294,492.846 434.625,493.849 433.955,495.52 433.62,497.526 432.282,498.529 430.943,499.198 429.938,499.532 428.599,500.2 428.599,503.209 429.938,504.546 431.277,506.887 431.947,507.889
432.282,509.227 432.282,510.564 431.947,512.235 431.277,513.573 430.273,514.576 427.595,516.247 422.909,519.256 421.57,520.927 421.57,527.613 422.239,528.616 422.909,529.285 424.582,530.288 425.252,530.956 425.921,532.294 426.256,533.965 426.591,536.305 425.252,538.98 423.244,539.983 421.235,540.986 410.189,545.331&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;xizhuang&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;西藏&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;259.87,515.971 258.867,515.637 256.862,514.967 252.517,514.633 245.833,514.633 243.494,515.637 240.486,514.967 238.815,514.298 238.146,513.964 237.812,513.629 237.812,512.291 238.481,510.952 239.149,509.614 240.152,507.941 240.82,506.268 240.82,502.588 238.815,501.584 237.144,500.915 236.141,500.246 235.139,499.242 234.804,498.238 234.47,497.234 233.802,494.892
232.799,493.22 228.12,493.22 224.11,492.216 221.436,488.201 218.094,487.197 215.086,485.859 212.747,484.52 211.076,483.517 209.07,482.513 203.055,482.513 201.384,483.851 199.713,485.524 197.708,487.197 195.368,488.201 193.363,490.208 192.026,492.885 191.358,496.231 190.689,499.577 188.016,498.907 187.013,498.573 186.344,497.904 185.342,496.231 185.008,494.558
185.008,492.55 185.676,490.543 186.344,488.535 187.347,486.862 187.347,484.186 185.008,482.847 183.671,482.178 181.331,482.178 172.976,483.851 169.634,484.855 166.292,486.528 164.621,486.193 162.95,485.859 161.613,485.189 160.611,484.52 158.605,482.513 157.269,480.505 154.929,477.829 141.561,477.829 140.224,476.825 139.221,475.821 137.885,473.144 136.882,470.468
135.879,468.126 133.206,467.457 132.537,466.787 131.869,465.784 128.193,463.107 121.508,460.765 119.169,458.757 117.832,457.085 116.83,455.412 116.161,454.073 115.827,452.735 115.827,451.397 115.493,447.382 113.822,444.036 106.469,444.37 103.461,443.032 102.459,442.363 101.79,441.694 101.122,440.021 100.788,437.679 99.1166,436.006 97.7798,435.002 95.4403,433.329
88.7562,427.641 83.0747,418.273 79.0642,418.273 77.7274,418.607 76.0564,419.277 74.0511,420.28 72.0459,421.619 66.0302,421.619 64.025,419.946 62.6881,418.607 61.6855,416.934 60.6829,415.262 59.6803,411.916 59.3461,408.57 54.333,400.874 52.3277,398.867 50.3225,397.529 47.9831,396.19 45.9778,395.187 41.6331,393.514 37.6227,392.175 36.2858,391.172 35.6174,390.168
35.6174,389.164 35.6174,388.16 35.9516,386.487 36.9542,385.149 37.9569,384.145 38.6253,383.142 39.2937,381.134 39.9621,369.089 38.6253,365.743 38.2911,364.739 37.9569,364.07 38.2911,363.736 38.9595,363.401 41.6331,363.067 43.6384,364.405 44.641,366.412 45.3094,367.751 46.312,368.754 47.3146,369.424 48.6515,369.758 49.9883,369.089 51.3251,367.751 52.9961,363.067
51.9935,352.36 48.9857,343.995 48.3172,340.315 48.3172,338.642 48.6515,337.304 48.9857,335.965 49.6541,334.962 50.6567,333.623 51.9935,332.619 53.6646,329.943 60.0145,332.619 66.0302,332.619 67.367,331.616 68.7038,330.612 70.0407,329.608 71.7117,328.27 73.3827,324.255 75.388,321.244 76.3906,319.905 78.0616,318.567 81.7379,316.225 83.4089,316.225 86.4168,317.229
94.1035,321.913 94.4377,323.251 95.1061,324.255 96.1088,324.589 97.1114,324.589 100.119,324.255 102.793,323.251 108.809,322.247 111.482,319.571 112.151,318.567 113.153,317.898 114.156,317.898 115.159,317.898 116.83,318.567 118.501,319.905 118.835,322.582 118.835,323.586 119.169,324.255 120.84,325.593 123.848,327.601 129.864,329.943 134.877,329.943 137.216,328.939
139.556,328.27 142.229,327.601 145.571,327.266 148.913,325.593 150.25,325.259 151.587,325.259 152.59,325.259 154.261,325.593 158.271,327.601 165.289,327.601 166.626,326.262 167.295,325.259 168.297,324.255 169.968,323.586 173.31,320.909 174.981,319.905 176.652,319.236 178.324,319.236 180.329,319.236 183.002,320.24 185.676,321.244 190.355,321.244 195.368,320.574
200.381,320.24 205.728,320.24 210.407,322.582 212.747,324.924 214.752,326.262 217.091,327.266 217.426,331.281 218.762,332.954 220.434,335.296 221.102,336.634 221.436,337.973 221.436,339.646 221.102,341.653 218.094,346.672 218.094,353.029 218.428,357.379 218.762,361.394 218.762,365.409 219.431,369.758 220.099,373.773 221.436,377.788 222.439,379.461 223.776,381.469
225.112,383.476 226.783,385.149 230.46,387.491 232.465,388.495 234.804,389.833 242.157,390.837 243.494,393.179 245.165,395.187 247.17,396.859 249.175,398.198 251.515,399.202 254.188,400.205 256.862,400.874 260.204,401.544 262.878,403.551 265.551,405.559 266.888,406.228 268.559,406.897 270.564,407.566 272.904,407.901 290.951,407.566 294.962,408.904 300.643,412.585
303.985,420.28 304.654,423.292 305.656,425.299 307.327,427.307 310.335,430.318 314.011,430.318 316.017,427.307 319.024,426.972 319.359,427.641 319.359,428.31 320.695,429.314 322.366,429.983 324.372,430.318 330.387,426.637 332.058,424.295 333.729,421.953 335.4,419.277 337.072,417.269 337.74,416.934 338.743,418.273 340.414,419.277 344.424,421.953 344.758,423.626
345.761,425.634 347.766,429.314 350.774,432.994 354.116,437.009 357.458,448.051 358.795,450.058 360.132,452.4 361.134,455.077 361.469,456.75 361.469,458.423 359.463,461.099 358.127,463.107 357.792,465.449 357.792,469.799 358.461,472.141 359.463,474.817 359.798,476.49 360.132,477.829 359.798,479.502 359.463,481.174 359.463,484.855 358.461,484.855 358.461,484.186
358.127,483.851 357.124,482.847 356.121,482.178 355.119,481.509 352.445,481.844 350.774,482.513 349.771,483.182 348.435,484.52 348.435,486.528 349.103,488.87 350.106,494.558 349.771,498.907 347.432,499.577 343.421,499.577 338.074,492.55 335.735,491.881 333.395,491.547 331.724,492.216 330.053,493.22 329.051,494.892 328.382,496.565 328.382,498.907 328.716,501.584
327.714,502.922 327.045,504.261 324.706,503.926 322.701,503.257 320.695,502.253 319.693,501.584 319.024,497.904 316.017,496.231 313.009,495.227 308.33,493.554 306.325,491.212 302.982,491.212 301.98,491.547 300.977,491.881 299.64,493.22 297.301,495.227 289.948,499.242 286.941,500.246 285.938,500.58 284.935,501.249 283.933,502.922 281.927,505.599 277.917,505.934
276.58,506.603 275.578,506.937 274.575,507.607 273.572,508.61 271.233,511.956 269.562,513.294 266.554,513.964 264.215,514.633 259.87,515.971&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;zhejiang&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;浙江&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;703.055,504.42 699.723,503.751 697.724,503.083 696.058,502.08 694.725,501.077 691.059,490.047 687.727,487.373 684.728,487.039 685.061,484.365 684.395,482.025 683.395,479.685 682.396,477.68 680.73,475.674 679.063,474.003 676.731,471.329 676.731,470.326 677.064,469.324 678.397,467.652 679.73,465.981 681.063,464.644 681.063,463.307 681.396,462.639 682.062,461.636
682.729,461.302 684.728,459.965 686.394,458.962 688.393,455.619 688.393,450.606 688.393,448.266 688.727,446.929 690.06,446.595 691.726,445.592 692.392,445.258 693.392,445.258 694.391,445.258 695.391,445.926 700.056,445.926 701.056,445.258 702.055,444.589 703.388,444.255 704.721,444.255 707.72,444.923 710.386,445.592 712.052,446.929 714.051,447.932 715.051,448.266
716.384,448.6 717.717,448.266 719.05,447.932 720.716,446.595 722.382,444.923 723.382,444.589 724.381,444.255 725.381,444.589 726.714,445.592 730.712,447.263 737.377,447.932 736.71,448.934 735.377,449.937 732.045,452.277 730.712,453.948 729.713,455.285 729.379,456.288 729.379,456.956 729.379,457.625 730.046,458.293 735.044,458.293 737.043,456.288 737.377,457.959
737.377,459.296 736.71,460.299 734.378,460.967 733.045,461.636 730.379,462.973 730.712,466.315 734.044,467.987 733.378,471.998 733.378,477.011 733.711,478.348 734.044,480.02 733.711,482.359 733.378,483.028 733.045,484.03 731.712,484.365 731.379,482.025 730.712,481.691 730.046,481.691 728.713,482.025 727.38,483.028 726.047,484.365 723.382,487.039 721.715,489.044
721.049,490.715 720.383,492.052 720.049,501.746 718.383,501.411 713.718,501.746 710.053,502.08 706.721,503.083 703.055,504.42&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;chongqing&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;重庆&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;529.754,502.013 527.742,501.014 525.729,499.683 524.051,498.351 522.374,496.686 519.69,493.69 517.678,490.694 517.007,487.698 516,484.702 514.659,482.371 512.981,480.374 510.633,479.042 509.627,478.709 508.62,478.376 507.278,478.376 505.936,478.709 504.595,479.042 503.253,479.708 501.24,481.705 500.569,482.704 500.234,484.702 498.892,487.032 496.879,489.03
492.853,492.691 492.853,493.357 491.847,493.357 491.512,493.69 490.841,494.356 487.151,495.688 483.125,495.355 479.435,494.356 476.416,493.024 475.074,492.359 473.732,491.36 475.074,488.697 475.074,486.366 474.738,484.369 474.403,482.038 470.042,478.043 468.7,476.046 467.694,474.048 469.036,460.066 467.694,454.407 467.358,452.409 467.358,450.079 468.029,449.746
473.732,453.408 478.093,457.403 479.77,458.069 481.112,458.069 482.79,458.069 484.467,457.403 485.809,456.737 487.151,456.071 489.834,453.741 492.182,450.745 493.86,447.749 495.537,444.419 496.879,441.423 502.582,432.435 502.582,424.778 506.272,422.78 509.627,422.447 512.981,422.114 514.994,422.447 516.671,422.78 518.684,423.779 520.697,425.111 526.4,430.437
533.444,432.102 536.464,433.766 540.154,436.763 541.831,438.427 543.508,440.425 544.515,442.422 544.85,444.419 541.831,446.417 539.483,448.414 537.135,450.412 534.786,452.409 532.103,453.075 529.083,453.408 523.716,453.408 521.368,453.075 518.684,453.408 516.336,454.074 514.323,455.073 514.994,458.402 515.665,460.066 515.665,461.398 514.994,464.727 514.659,466.392
514.994,468.056 516,469.721 518.349,471.385 523.381,476.046 528.077,482.704 529.754,488.697 529.754,502.013&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;hubei&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;湖北&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;529.781,482.279 528.448,479.936 527.116,477.929 523.783,474.247 517.119,467.889 516.786,465.881 516.786,464.877 517.119,463.873 517.452,462.535 517.785,459.188 516.453,456.176 517.452,455.507 519.451,455.172 523.783,454.838 532.447,455.172 535.113,454.168 537.445,452.495 539.445,450.487 541.777,448.479 546.109,445.133 546.442,442.121 543.443,437.771 540.444,434.759
537.445,432.082 534.113,430.408 533.113,428.4 532.78,420.369 535.446,417.692 537.112,416.353 539.111,415.349 540.111,414.345 540.778,413.341 540.778,412.337 540.778,411.333 539.778,409.326 538.778,407.987 536.112,405.979 535.113,405.31 534.446,404.306 549.108,404.306 555.439,405.31 556.106,406.648 557.438,407.987 558.771,409.326 560.437,410.664 562.437,412.003
564.436,413.007 566.435,414.011 568.768,414.68 572.767,416.353 592.426,416.688 598.758,421.038 599.424,422.377 600.424,423.715 601.757,425.389 603.756,427.062 612.753,427.731 619.417,430.743 620.084,431.078 620.75,431.078 622.749,431.078 625.082,431.412 626.415,431.747 627.748,432.751 628.081,433.42 628.414,434.424 629.081,435.428 630.413,436.432 631.413,436.767
633.412,437.101 634.745,437.436 635.412,438.105 636.078,439.109 636.411,440.113 634.412,442.456 634.079,443.794 633.412,446.137 634.412,447.141 635.745,448.479 637.078,450.153 638.411,452.83 638.411,454.168 638.744,456.176 639.077,457.18 639.744,457.85 640.743,458.854 642.076,459.523 642.076,460.192 638.744,460.861 636.078,461.531 633.746,462.535 631.746,463.539
628.081,466.55 623.083,469.897 622.083,470.566 620.75,471.236 619.084,473.578 616.085,474.582 613.419,475.251 612.42,475.586 611.42,476.255 610.087,476.925 609.087,478.263 607.088,479.267 601.757,474.917 599.757,474.247 598.091,473.578 596.758,472.574 595.425,471.57 593.426,469.562 591.427,467.889 588.761,468.224 587.428,468.558 586.429,469.897 584.762,471.905
581.763,471.57 578.764,470.901 576.099,469.897 573.433,468.558 568.435,465.547 564.103,463.204 561.104,462.535 558.438,462.2 554.44,460.861 549.774,460.861 548.442,461.531 547.442,461.865 547.109,462.869 547.442,464.208 548.442,465.881 550.108,467.889 549.108,469.897 546.775,469.562 543.776,469.562 541.444,470.232 539.445,470.901 537.779,472.24 536.112,473.578
535.113,475.586 532.447,480.271 531.114,481.275 529.781,482.279&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;anhui&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;安徽&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;656.078,463.989 655.408,463.318 655.408,455.604 653.735,454.262 650.389,454.262 649.385,454.597 648.381,454.933 647.711,455.268 647.042,456.275 645.704,458.622 644.7,459.293 644.03,459.629 643.696,458.622 643.361,457.952 641.688,456.945 640.349,454.933 640.349,453.256 640.015,451.914 639.68,450.573 639.011,449.902 638.007,448.225 637.337,447.554 637.003,446.548
635.664,445.206 635.664,443.529 636.668,442.523 638.676,440.846 638.341,438.833 637.672,437.491 636.668,436.485 635.329,435.814 632.318,434.808 631.314,434.473 629.975,433.802 629.64,431.454 628.971,430.783 628.971,429.777 629.306,429.106 630.644,427.429 632.318,426.423 634.325,425.752 637.003,422.398 636.668,418.708 635.999,415.354 634.66,412.336 633.991,411.329
632.987,409.988 629.306,409.988 627.967,411.665 626.629,412 625.625,410.994 624.955,409.988 623.951,407.64 623.282,403.95 619.936,401.602 620.27,400.261 620.94,398.919 621.609,397.913 622.613,396.571 624.955,394.559 626.963,392.546 627.633,389.192 627.633,385.838 627.298,379.801 627.967,379.465 629.64,380.136 629.975,381.478 630.979,383.826 631.983,385.167
632.652,386.173 633.656,387.18 634.995,387.85 638.341,387.85 639.68,385.167 640.349,383.155 641.018,381.142 642.022,378.794 642.357,376.782 635.999,370.744 636.333,369.403 637.003,368.732 637.672,368.397 638.676,367.726 639.68,367.726 641.353,369.738 643.361,371.751 645.034,374.434 646.707,377.788 649.385,381.142 661.432,383.49 664.109,385.503 665.448,388.857
666.786,392.882 667.79,394.894 669.129,396.907 670.468,398.584 672.475,400.261 673.145,401.602 676.157,401.267 678.164,400.932 679.838,400.261 680.172,398.248 680.172,397.913 680.507,397.913 681.176,397.913 683.519,397.913 684.857,400.261 685.527,402.273 685.861,404.621 683.854,405.292 681.846,405.627 678.164,405.627 676.491,409.652 675.822,413.677 675.153,414.683
674.483,415.354 674.483,416.696 674.483,418.373 681.511,425.081 682.18,425.417 683.519,425.752 684.857,426.423 685.192,427.094 685.527,428.1 688.204,430.448 696.236,431.119 697.909,432.46 697.909,435.144 696.57,436.15 695.232,436.821 692.554,437.491 691.216,438.162 690.546,438.833 689.877,439.839 689.542,441.516 690.212,443.193 690.212,444.2 690.212,444.871
688.204,445.877 686.865,446.883 686.865,455.268 685.527,456.945 684.188,458.287 683.184,459.293 681.511,459.964 678.834,460.97 675.153,461.641 672.81,462.647 670.468,463.318 668.46,463.318 666.452,462.647 664.779,460.97 663.44,459.293 662.771,457.616 661.767,456.61 660.428,456.61 659.759,456.945 659.089,458.622 657.751,463.989 656.078,463.989&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;jiangsu&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;江苏&quot;&lt;/span&gt;&lt;span&gt; Points&lt;/span&gt;&lt;span&gt;=&quot;697.822,444.736 695.815,444.067 694.478,443.733 692.136,443.733 692.136,441.39 691.468,441.056 691.468,440.721 691.468,440.387 692.136,439.717 693.474,439.383 698.156,437.71 699.829,435.702 699.494,433.026 698.825,431.353 697.822,430.014 696.819,429.345 695.146,429.01 693.809,429.01 690.464,429.01 688.458,428.007 687.454,427.003 686.116,424.995 683.775,423.991
682.103,422.988 680.765,421.649 679.762,420.645 677.755,419.307 676.752,418.303 676.418,417.299 675.749,416.296 676.752,415.627 677.421,414.957 677.755,413.284 678.09,410.608 679.093,407.262 681.1,407.262 683.106,407.262 685.113,406.927 686.451,406.258 687.454,405.589 687.12,402.577 686.785,399.566 685.448,397.558 684.779,396.555 684.11,395.885 680.765,396.22
678.759,396.889 678.09,399.566 674.411,400.235 673.742,398.897 673.073,398.228 671.735,397.558 669.394,393.209 667.722,389.193 666.05,385.848 664.043,382.836 662.037,381.832 660.03,381.163 656.685,381.163 650.331,379.156 648.993,377.483 647.321,374.137 644.98,371.125 642.639,368.114 640.632,366.441 640.632,364.099 640.632,361.757 640.632,361.087 641.301,360.753
642.304,360.753 643.642,361.422 644.311,362.76 645.649,363.43 645.649,364.099 646.652,364.768 647.99,366.106 648.993,367.445 650.665,369.787 652.003,370.122 654.01,370.791 659.361,371.125 660.364,370.456 661.368,369.452 663.04,367.11 664.043,366.106 665.047,365.772 665.715,365.772 666.384,366.106 667.388,367.445 670.398,367.779 674.077,363.095 674.411,360.084
675.414,357.407 676.083,356.403 677.087,355.399 678.424,355.065 680.097,354.73 680.097,359.08 685.448,363.43 688.123,364.433 690.799,366.106 693.809,367.779 697.153,369.452 702.839,379.825 705.849,385.513 709.528,391.201 709.862,393.209 710.531,395.551 711.534,397.893 712.872,400.57 720.564,404.585 724.243,406.927 728.591,409.938 728.591,410.942 727.922,411.611
726.584,411.611 723.574,411.946 719.227,411.611 719.227,415.292 724.912,417.299 724.243,418.303 723.909,419.307 723.909,420.311 724.243,421.649 730.932,424.995 731.601,425.999 731.266,427.337 730.932,428.341 730.263,429.345 729.26,430.014 726.919,431.687 724.578,433.026 724.578,433.695 723.909,434.029 722.905,434.698 720.564,436.706 716.216,440.721 710.531,442.729
710.196,443.398 701.835,443.063 699.829,443.733 697.822,444.736&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;henan&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;河南&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;626.478,429.816 619.141,428.814 613.472,425.809 609.47,425.809 606.802,425.475 604.468,424.807 602.467,423.137 599.466,418.797 593.797,415.124 573.788,414.79 566.117,411.785 562.783,410.115 561.782,409.114 560.782,408.112 559.114,407.11 558.114,405.775 556.78,403.771 556.446,401.1 555.779,398.763 553.779,394.756 549.777,388.078 547.109,380.398 546.775,374.054
549.11,373.72 551.111,372.384 553.445,371.049 555.112,369.713 556.446,368.711 558.114,368.044 561.115,367.71 564.117,366.708 566.784,365.372 569.786,363.369 572.454,363.035 575.455,362.367 581.458,360.698 583.792,359.028 585.793,357.025 589.795,353.018 591.129,351.682 592.463,350.013 593.13,348.343 593.463,346.674 594.13,342.667 594.13,339.328 603.134,341.331
615.807,341.331 618.141,344.67 619.475,345.672 620.475,347.676 620.809,349.011 620.809,350.347 620.475,351.682 619.808,353.018 617.807,354.02 616.473,355.355 615.473,356.691 614.806,359.028 613.806,359.362 612.805,359.696 612.805,361.032 618.808,365.372 619.141,366.374 621.476,368.378 622.81,369.379 624.477,370.381 626.145,371.383 628.145,371.717 629.813,371.383
631.814,370.381 632.814,370.715 633.481,371.383 635.482,373.386 640.151,377.059 639.817,378.395 639.484,379.396 639.15,380.064 638.483,382.068 638.15,384.405 637.483,386.408 634.815,385.407 632.481,382.068 630.813,379.396 630.146,378.395 628.812,378.061 627.478,377.727 625.478,378.061 625.811,389.747 624.477,392.085 622.476,394.422 620.475,396.759 618.141,398.429
618.141,402.102 619.475,403.437 621.809,404.773 623.477,411.117 623.81,411.785 624.477,412.453 625.811,413.454 626.811,413.788 627.812,413.788 628.812,412.786 629.813,412.119 630.813,411.785 632.481,412.119 633.481,414.122 634.482,416.793 634.815,418.463 635.149,420.132 635.149,421.468 634.482,423.137 632.814,423.471 631.147,424.473 628.812,426.477 626.478,429.816
&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;xianxi&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;陕西&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;530.096,429.334 527.759,428.666 526.089,427.665 523.417,425.661 519.075,421.655 514.734,420.319 511.394,420.319 508.388,420.319 505.382,420.987 504.046,421.321 502.71,421.989 501.041,421.655 499.371,420.653 497.033,418.984 495.363,418.65 494.027,418.316 492.691,417.648 491.689,416.98 490.353,415.311 489.685,414.977 489.017,414.643 482.004,414.643 474.657,411.972
474.657,410.637 474.991,409.635 475.992,407.632 475.992,405.294 475.658,403.625 474.991,402.623 473.989,402.289 472.987,400.954 472.653,400.286 472.653,399.284 472.653,398.951 482.338,398.617 483.006,397.281 483.674,395.612 483.674,393.942 484.008,392.273 483.674,389.268 483.34,386.597 481.336,381.589 480.334,375.245 480.334,372.907 481.002,371.572 482.004,370.57
484.008,369.902 486.68,369.569 490.019,369.569 497.701,373.241 499.705,372.907 500.707,372.574 501.375,372.24 501.375,365.228 501.708,364.56 502.376,363.893 503.044,363.559 504.38,363.559 506.718,363.559 507.72,363.893 508.388,364.56 513.064,364.56 513.732,362.891 514.066,360.888 514.4,356.881 514.4,353.208 514.066,351.873 513.732,350.537 514.066,348.534
514.4,347.198 515.401,345.195 515.401,341.856 512.73,341.522 510.058,339.853 507.72,338.183 505.382,336.848 504.046,335.846 501.041,335.178 498.035,334.177 495.363,333.175 493.693,332.173 493.693,330.504 494.027,329.502 495.363,327.833 494.361,321.823 495.029,321.489 496.031,320.487 497.367,318.15 499.705,318.15 501.375,318.15 503.378,318.818 516.737,319.486
517.739,317.816 518.741,316.147 519.075,314.143 519.409,312.14 519.075,308.134 519.075,305.129 519.075,303.793 519.409,302.791 519.743,301.79 520.411,301.122 521.747,300.12 523.417,298.451 528.426,291.105 533.436,287.433 536.442,283.092 540.116,285.763 541.117,285.763 542.119,284.762 543.121,283.76 544.457,281.089 546.127,281.423 547.797,281.757 548.799,282.424
549.467,283.092 549.801,284.428 550.135,285.763 548.131,289.77 547.797,293.109 547.129,296.114 546.795,297.783 545.793,299.119 544.791,300.788 543.455,302.124 543.121,304.127 542.787,306.13 543.121,310.137 544.457,319.152 544.457,320.821 544.123,322.157 542.787,325.496 540.784,328.501 539.114,331.172 539.114,345.195 541.451,350.537 542.119,353.542 542.453,356.881
541.785,359.886 541.117,363.225 541.117,366.898 541.451,368.901 541.785,370.904 543.121,372.574 544.123,373.909 545.125,375.912 544.791,381.255 548.799,391.271 550.469,393.608 552.139,396.28 553.475,399.618 554.477,403.291 549.801,402.289 540.116,402.289 534.772,402.623 533.102,402.623 532.1,403.291 531.766,405.294 538.446,410.637 539.114,413.308 536.442,414.309
534.438,415.645 532.768,417.314 531.098,419.318 531.098,429.334 530.096,429.334&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;qinghai&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;青海&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;312.178,428.853 307.166,424.515 305.162,417.84 302.489,411.834 301.152,410.499 299.816,409.164 296.809,407.495 294.136,406.494 291.797,405.827 273.755,406.16 271.75,405.827 269.745,405.159 266.404,403.491 263.731,401.488 261.392,399.486 256.715,398.819 253.039,397.484 249.364,396.149 246.357,394.147 246.023,393.146 245.689,392.145 244.686,390.476 243.016,389.141
239.675,388.474 236.667,387.806 233.995,386.805 231.656,385.47 230.319,385.137 228.983,384.469 226.978,382.801 225.307,380.465 223.971,378.129 222.969,375.459 221.966,373.123 220.964,369.118 219.962,347.427 222.3,343.422 222.969,341.42 223.637,339.752 223.303,337.416 222.635,335.413 221.966,334.078 221.632,333.411 223.637,333.077 224.305,333.411 225.307,333.745
226.978,333.745 228.315,332.076 228.649,331.075 229.985,330.741 230.987,330.741 231.99,331.409 232.992,332.076 234.997,333.745 236.333,334.746 238.004,335.747 241.345,335.747 243.35,335.413 245.02,334.746 246.357,333.077 246.357,328.739 244.686,326.403 243.016,324.401 242.682,323.733 242.682,322.732 242.682,321.731 243.35,320.73 248.027,318.06 250.032,316.058
250.7,314.056 251.369,312.053 251.035,310.719 250.7,309.384 249.698,308.383 248.696,307.715 246.691,306.047 245.355,303.711 243.684,301.708 242.013,300.04 241.011,299.706 240.343,299.706 240.009,298.705 239.34,297.704 239.006,297.036 239.006,296.035 239.675,295.034 239.675,294.033 239.675,293.032 239.34,292.031 238.338,290.362 237.336,289.695 237.336,288.36
240.009,288.026 243.016,287.359 249.364,287.025 255.712,286.358 259.053,285.69 262.06,285.023 266.738,282.687 271.75,280.684 274.089,279.683 276.762,279.35 279.769,278.682 283.11,278.682 286.785,280.351 291.797,280.017 297.143,280.351 299.816,280.351 302.489,280.684 305.162,281.352 307.835,282.353 320.865,290.696 322.202,292.698 326.545,296.035 329.218,297.704
332.893,299.039 337.905,299.039 340.244,297.036 340.578,294.367 340.244,292.031 339.91,290.028 339.576,288.36 340.244,288.026 340.912,287.692 342.917,287.359 347.26,287.359 352.272,290.696 357.284,292.031 363.298,292.698 369.98,296.035 375.326,300.04 375.326,300.707 376.997,302.042 379.002,302.376 381.006,302.042 385.684,301.375 392.366,309.384 401.722,316.058
406.399,318.394 414.752,318.394 416.089,320.396 417.425,324.067 418.427,327.738 419.43,331.409 423.105,340.085 423.773,347.427 425.11,349.096 426.112,351.432 426.446,352.766 426.446,354.101 425.778,355.102 424.776,356.437 420.432,359.107 419.096,360.108 417.759,361.443 415.755,364.446 413.082,369.118 407.068,373.457 407.068,376.126 412.748,381.132 412.413,382.133
411.745,382.801 411.077,383.134 410.075,383.468 408.404,383.468 407.068,383.468 401.388,379.797 395.708,379.463 393.369,379.797 392.032,380.131 392.032,384.135 392.032,385.804 392.366,387.473 393.035,389.141 394.037,390.81 395.708,392.478 397.712,394.48 397.712,400.487 400.385,408.83 400.051,410.165 399.717,410.832 399.383,411.5 398.38,411.834 396.71,412.167
394.705,412.167 392.7,412.835 391.698,413.502 389.359,415.171 387.689,415.171 386.352,413.168 381.675,412.835 381.675,411.834 381.006,411.166 379.67,410.165 376.329,409.831 375.995,410.832 374.658,411.5 373.656,412.167 372.653,412.167 371.651,409.831 366.639,408.83 359.623,400.821 358.62,399.152 358.62,397.15 358.286,395.148 357.618,393.813 356.95,392.478
354.945,390.476 352.94,388.474 349.933,387.806 346.592,387.473 340.912,387.806 337.905,388.14 337.237,388.807 336.903,389.141 336.569,391.143 336.569,394.48 340.578,399.82 340.578,403.157 338.908,405.159 336.903,407.495 336.235,408.496 335.9,409.831 335.9,411.5 336.569,412.835 336.569,413.836 335.9,415.171 334.23,417.84 330.889,422.512 329.886,423.847
328.884,425.182 327.548,425.849 325.877,426.517 324.206,428.519 323.204,428.185 322.202,428.185 321.533,427.184 320.865,426.183 320.865,425.516 319.863,425.182 319.195,424.848 317.19,424.848 314.851,425.516 313.515,427.518 312.846,428.185 312.178,428.853&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;shanxi&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;山西&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;546.826,372.539 545.49,371.199 544.154,369.859 543.486,368.854 543.151,367.515 543.151,364.835 543.151,362.49 544.822,357.466 544.488,351.772 541.481,344.068 541.481,331.675 542.817,329.33 544.154,326.986 546.492,322.631 546.492,317.942 545.49,312.583 545.156,309.903 544.822,307.558 545.156,305.214 545.49,303.204 546.826,301.194 548.831,299.52 549.499,296.84
549.833,294.495 550.167,290.141 552.172,286.456 552.506,284.447 553.174,283.107 553.842,281.767 554.845,280.427 557.183,278.418 559.856,276.408 562.863,271.719 564.867,269.374 565.87,268.369 566.872,267.699 569.879,264.685 575.558,265.02 577.229,265.02 578.899,264.685 580.235,264.35 581.238,263.345 583.242,263.01 584.913,262.34 586.583,261.335 588.588,259.66
589.924,257.986 592.931,259.995 592.597,261 591.929,262.005 589.924,263.68 588.922,264.685 588.254,265.689 587.585,267.029 587.919,268.369 589.256,268.704 590.926,269.374 591.929,270.379 593.265,271.719 595.604,274.733 598.276,278.753 598.276,281.767 596.272,284.447 594.601,286.121 589.924,289.136 588.254,291.816 586.917,294.495 586.249,296.17 586.249,297.845
586.249,299.52 587.251,300.859 591.594,304.544 592.931,306.554 594.267,308.563 594.935,310.238 595.604,311.578 595.938,313.587 596.272,315.597 595.269,318.947 594.267,322.296 592.931,324.641 591.26,326.986 589.256,329.33 587.585,331.005 587.251,333.015 591.26,337.369 591.929,339.714 591.929,342.728 591.594,345.743 590.926,349.092 588.588,351.772 586.249,354.117
580.904,358.806 568.876,361.82 565.87,363.83 562.863,365.17 560.19,365.84 556.849,366.51 552.506,369.189 550.835,370.529 549.499,371.534 546.826,372.539&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;shandong&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;山东&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;627.772,370.132 623.097,367.116 616.085,360.749 617.755,357.398 620.426,355.052 621.428,353.711 622.429,352.371 622.429,346.674 620.426,339.301 619.09,335.28 618.089,333.269 618.089,329.583 618.422,328.577 619.424,327.572 621.094,324.556 623.097,322.545 627.438,318.188 628.774,316.178 630.109,314.502 631.445,313.161 633.449,311.821 637.122,309.475 641.129,307.129
649.81,298.416 651.146,304.783 655.487,304.783 657.49,301.097 660.829,301.097 663.167,301.097 665.17,300.427 665.17,301.097 665.838,302.103 667.508,304.448 667.508,311.821 669.845,313.497 672.85,315.172 676.189,316.513 678.193,316.848 680.196,316.848 686.875,306.459 688.21,304.783 689.546,303.443 691.549,302.438 693.219,301.432 695.556,301.097 698.228,301.097
705.574,304.113 721.602,303.778 722.937,304.448 722.269,305.119 722.269,306.124 721.602,311.151 715.925,311.821 711.25,314.502 706.242,317.518 703.904,319.194 701.901,321.204 700.565,323.215 699.563,325.226 695.89,326.902 694.888,328.242 693.553,328.912 690.548,329.918 689.546,330.923 689.212,336.62 687.876,338.631 685.873,340.642 684.203,342.652 682.868,344.663
682.868,348.349 682.2,350.695 681.198,352.706 679.862,352.706 678.527,353.041 677.191,353.376 676.189,354.046 674.52,355.722 673.184,357.398 672.516,359.743 671.849,362.089 670.513,364.435 669.845,365.441 668.509,366.111 668.509,365.441 666.84,364.1 663.835,363.765 661.831,366.111 659.828,368.792 657.824,369.127 655.487,369.127 653.149,368.792 651.814,368.122
650.812,366.111 644.134,359.408 639.793,359.073 639.459,360.414 639.125,362.089 638.791,366.111 637.122,366.446 635.786,367.116 634.784,367.786 634.116,368.457 632.113,368.792 630.443,369.127 627.772,370.132&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;ningxia&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;宁夏&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;467.295,354.652 465.956,348.943 465.621,344.914 464.952,341.22 463.947,334.839 460.934,331.146 458.255,328.123 455.576,325.773 453.902,323.758 449.55,321.407 450.219,320.736 451.224,320.064 454.237,319.057 460.934,318.049 462.608,316.37 463.612,315.699 465.286,315.027 468.3,314.691 471.313,310.998 470.979,304.281 476.001,294.879 476.671,289.842 478.01,289.506
479.014,289.17 481.358,288.163 482.698,287.827 483.702,287.827 485.041,288.163 486.381,288.835 487.385,291.521 486.046,294.543 485.041,297.565 482.698,300.252 482.363,301.595 481.693,302.938 481.693,305.961 482.028,309.99 488.39,310.998 489.394,312.341 491.068,313.684 493.077,315.363 494.417,316.035 495.756,316.37 495.421,317.378 494.751,318.721 493.747,320.064
492.742,321.072 491.738,322.415 490.399,323.758 487.72,325.773 485.711,326.109 484.037,326.109 483.367,326.78 483.032,327.452 483.367,329.467 483.032,331.146 482.698,333.16 481.023,335.511 480.019,337.526 479.684,339.541 479.349,343.57 482.028,345.921 483.367,346.257 485.376,346.928 486.046,347.936 486.716,348.943 487.05,350.286 486.716,351.965 485.711,353.98
482.698,354.988 480.354,355.995 476.336,359.353 475.331,360.025 474.327,360.025 473.322,359.689 471.983,358.681 467.295,354.652&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;hebei&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;河北&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;618.793,342.216 616.455,339.873 604.763,339.873 594.074,337.531 592.069,335.857 590.399,334.184 589.397,332.845 589.063,332.176 595.41,324.813 597.08,319.124 597.748,315.443 597.414,312.096 596.412,309.419 595.076,307.076 593.74,304.733 591.735,302.725 587.727,298.709 587.727,296.367 588.395,294.359 589.397,293.02 590.399,291.347 592.069,290.343 593.406,289.004
597.08,286.996 599.753,282.645 599.753,277.626 597.414,274.279 595.41,271.602 593.406,269.594 591.067,267.586 589.731,267.251 589.731,266.582 593.072,263.904 594.074,261.896 594.408,260.892 594.742,259.888 590.733,256.542 590.733,253.195 588.395,250.518 586.725,248.51 586.725,241.147 589.397,238.135 590.399,237.8 591.401,237.466 592.404,237.131 592.404,229.434
594.074,227.76 595.076,227.091 596.412,226.756 597.414,227.426 598.416,228.43 599.419,230.103 599.753,231.107 600.087,232.446 598.75,233.45 598.082,234.454 598.082,235.458 598.416,236.462 599.419,237.466 600.421,238.804 603.093,241.147 604.763,241.147 607.436,239.474 607.436,238.47 608.104,237.466 608.772,236.796 609.44,236.127 611.444,234.788 613.783,233.784
615.119,232.111 616.789,231.442 618.459,231.107 620.464,230.772 624.806,230.438 626.81,230.103 628.815,229.099 628.481,220.398 629.817,218.724 631.153,217.386 634.828,215.043 636.164,214.039 637.5,213.704 638.502,213.704 639.17,214.374 639.838,215.378 640.506,216.716 642.177,220.398 648.524,230.438 648.858,232.446 649.192,234.119 649.86,235.123 650.528,235.792
651.53,236.462 653.2,237.131 657.543,236.796 660.549,236.796 663.222,237.131 661.885,238.135 660.883,239.139 659.547,240.143 658.545,241.482 658.545,243.49 658.545,245.163 658.879,245.832 659.547,246.836 660.215,247.84 661.551,248.844 663.222,249.179 664.558,249.848 667.23,251.522 670.237,253.53 673.577,255.538 676.25,257.88 668.232,268.924 667.898,269.928
667.23,271.267 666.228,272.606 664.892,273.61 661.885,275.618 659.547,276.622 656.207,277.291 653.2,277.96 650.528,275.952 648.524,273.944 646.853,271.936 645.183,270.598 644.515,269.259 644.515,267.92 644.515,265.243 644.181,262.9 644.181,261.896 643.847,261.227 638.502,259.219 638.502,255.872 638.836,252.526 639.17,249.514 639.17,247.506 635.83,247.171
633.157,246.836 631.821,246.502 630.819,245.832 630.151,245.163 629.817,244.494 626.476,244.494 625.474,244.494 624.806,244.828 624.472,245.498 624.138,246.502 623.47,249.514 621.132,250.518 619.127,251.856 615.453,254.534 615.453,255.538 615.787,256.876 616.455,258.215 617.457,260.223 617.123,261.562 616.121,262.566 615.453,263.57 614.117,263.904 612.112,264.908
611.11,265.578 610.442,266.247 610.442,268.255 610.108,270.263 609.774,272.271 610.108,273.275 610.442,273.944 621.132,273.944 622.468,272.606 623.804,271.602 624.806,270.932 625.808,270.932 627.144,270.598 628.815,270.932 629.483,271.936 630.151,272.271 631.153,273.275 632.489,273.944 633.825,276.956 635.162,284.319 636.832,286.661 639.17,288.669 641.843,290.677
643.513,291.347 645.517,292.016 648.858,297.705 648.19,297.705 647.187,298.04 645.851,299.379 644.515,300.717 643.513,301.721 642.845,303.06 641.509,304.064 638.836,306.407 636.164,308.08 633.491,309.084 631.153,311.092 629.149,312.765 627.479,315.108 625.808,317.451 620.464,322.471 618.459,324.479 617.123,326.821 616.121,329.164 616.121,332.176 616.789,335.857
618.459,340.208 618.793,342.216&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;xinjiang&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;新疆&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;238.882,334.515 236.544,333.176 232.536,329.161 229.864,329.161 228.194,329.161 227.526,329.495 227.192,329.83 226.19,332.172 224.52,331.503 220.177,331.838 219.175,330.165 218.841,328.491 218.507,326.149 215.501,324.81 211.493,321.464 209.823,320.126 207.819,319.122 205.815,318.452 203.811,318.118 201.807,318.118 199.469,318.787 193.123,319.791 189.783,319.791
186.777,319.791 180.765,317.783 175.755,317.783 172.415,319.456 169.409,321.129 166.737,323.472 165.735,324.81 164.733,326.149 159.055,325.814 153.711,323.472 150.037,323.472 148.701,323.807 147.698,324.81 143.022,325.814 140.35,326.149 138.346,326.818 136.342,327.822 134.004,328.491 132,328.491 129.996,327.822 125.988,326.484 122.648,324.81 120.644,323.137
120.31,319.791 119.976,319.122 119.642,318.452 118.306,317.448 116.636,316.11 113.296,316.445 112.294,316.445 111.626,316.779 110.29,318.118 108.286,320.795 105.614,321.464 102.942,321.799 100.27,322.133 99.2679,322.803 97.9318,323.137 96.9298,323.137 96.2618,321.464 94.2578,319.791 92.5878,318.452 90.5837,317.114 88.5797,316.11 86.5757,315.106 84.5717,314.771
82.9016,314.437 80.8976,314.771 77.2236,317.448 74.5515,319.791 72.5475,322.803 70.5435,326.484 68.8735,328.491 67.2034,329.83 65.1994,330.834 62.8614,331.503 57.8513,330.165 56.1813,329.161 55.5133,328.826 54.5113,328.826 53.8433,327.153 53.1753,325.814 52.1732,324.476 51.1712,323.807 48.8332,322.468 46.4952,321.464 44.4911,318.452 44.4911,311.425 45.1591,310.421
45.1591,309.083 45.1591,306.74 44.1571,305.067 43.1551,303.728 41.4851,302.724 40.1491,302.39 36.809,302.055 35.473,301.721 34.137,301.386 31.465,298.709 27.4569,291.347 21.4448,290.008 21.1108,288.67 21.1108,286.997 21.1108,285.658 21.4448,284.32 22.4468,281.642 23.4489,279.3 23.1149,277.292 22.7809,275.284 22.1128,273.611 21.1108,272.273 18.7728,269.596
16.4348,267.253 8.75267,263.572 7.75066,262.234 7.75066,258.553 7.75066,257.549 8.41867,257.214 9.08667,256.545 10.0887,256.21 13.4287,254.537 15.4328,252.864 16.1008,252.195 16.7688,251.191 16.7688,234.793 16.1008,232.116 15.0988,230.443 13.7627,229.439 12.4267,229.105 10.7567,228.77 9.08667,228.77 5.74663,228.77 4.74461,229.439 4.0766,230.443 3.7426,230.443
3.7426,231.113 2.74059,228.435 2.40659,226.762 2.40659,225.424 2.74059,224.085 6.74864,222.077 6.74864,218.062 5.41263,216.054 4.41061,215.05 3.7426,214.381 3.7426,214.046 5.07862,213.377 6.74864,212.373 9.08667,211.034 13.0947,205.011 20.1088,202.334 25.1189,201.999 29.1269,201.665 33.469,200.661 38.1451,198.653 41.1511,198.653 41.1511,200.661 41.8191,203.338
42.4871,204.342 43.4891,205.68 44.8251,206.684 46.1612,207.353 48.1652,207.353 49.8352,207.019 51.8392,206.684 53.8433,205.68 58.8533,198.987 62.8614,199.322 64.8654,199.322 67.2034,198.987 69.5415,196.98 72.2135,195.306 75.2195,194.972 78.8936,196.31 81.2316,196.98 83.9037,197.314 85.5737,196.645 87.5777,195.976 91.9198,195.641 96.2618,194.972 98.5999,194.303
100.604,193.633 107.284,189.618 108.954,184.598 110.624,183.929 111.96,182.59 112.962,181.252 113.964,179.579 115.3,175.898 116.302,172.886 119.308,171.547 120.644,170.543 121.98,169.205 124.318,163.851 124.652,154.146 123.65,150.131 123.984,146.45 124.652,142.769 124.652,140.761 124.652,139.422 124.318,138.084 123.65,136.745 122.982,135.072 131.332,135.407
135.674,135.741 140.016,136.411 141.686,136.745 143.022,137.415 146.028,137.749 149.703,138.418 151.373,139.422 153.377,140.426 155.715,140.426 158.053,138.084 158.053,135.741 157.385,133.399 157.051,131.391 157.719,129.383 158.387,127.71 164.733,120.013 165.735,116.667 166.737,114.325 168.407,111.982 170.745,109.64 171.413,107.632 172.081,106.628 172.415,106.293
173.083,105.959 175.087,105.959 184.773,111.982 186.777,112.317 189.115,112.652 191.787,113.321 193.123,113.99 194.459,114.994 198.133,114.994 200.137,114.994 202.141,114.659 204.145,113.99 205.815,113.321 207.151,111.982 208.153,109.974 207.151,98.5968 208.821,95.5851 210.491,93.5773 212.495,92.2387 214.499,91.2348 216.837,90.5656 219.175,90.2309 225.522,89.5617
226.19,89.227 226.858,88.5578 228.194,86.8846 229.53,83.2036 231.868,80.8611 239.216,80.8611 239.55,81.1958 240.218,82.1997 240.552,84.5422 241.22,87.5539 242.222,90.5656 249.57,101.609 253.578,103.282 259.256,104.955 264.266,108.301 266.938,112.652 267.94,121.352 271.28,127.71 271.614,130.722 271.614,134.403 271.614,136.411 271.28,138.084 270.612,140.092
269.944,141.765 266.27,144.107 265.268,144.777 264.934,145.446 264.266,146.115 264.266,147.119 263.932,151.135 264.6,154.481 265.268,156.489 266.604,158.831 271.948,162.512 279.964,164.52 281.968,165.524 284.306,166.528 286.31,167.197 288.648,167.866 293.658,168.536 299.336,168.87 301.341,170.209 304.013,172.217 309.023,177.236 316.705,183.594 318.709,183.929
320.713,184.598 322.717,185.937 324.721,187.945 326.057,193.299 327.059,196.31 328.395,199.657 330.399,200.995 331.067,201.999 332.069,204.007 331.735,209.027 333.071,212.708 331.067,214.046 329.731,215.385 329.063,217.058 328.395,220.07 328.395,225.424 329.397,231.782 328.395,232.451 316.037,232.786 310.359,233.79 308.021,234.459 306.017,235.128 304.347,236.467
302.677,238.14 301.674,240.148 300.673,242.825 298.668,244.833 297.332,246.506 296.33,248.514 295.328,251.191 293.658,252.195 291.654,252.864 287.98,253.533 284.64,253.868 281.634,253.868 281.3,255.541 280.298,257.549 278.962,259.222 277.626,260.56 276.958,261.899 276.958,263.238 277.292,265.915 278.294,268.926 279.296,272.607 279.63,276.623 270.278,278.631
268.274,279.635 266.27,280.639 262.93,282.646 257.252,283.985 251.24,284.989 245.896,285.658 240.552,285.658 237.546,286.327 235.542,287.666 235.542,289.004 235.876,290.008 236.544,291.347 238.214,293.689 237.212,295.028 236.878,296.366 236.878,297.37 237.546,298.709 238.214,299.713 239.55,300.717 242.556,303.059 246.23,308.413 247.566,309.083 248.568,310.086
248.902,310.756 248.902,311.76 248.902,314.437 246.898,316.445 243.558,318.118 242.556,318.787 241.888,319.456 241.22,320.46 240.886,321.464 240.886,325.145 241.888,326.149 243.224,327.822 244.226,329.83 244.56,331.169 244.56,332.507 242.89,333.511 241.22,333.846 238.882,334.515&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;nemenggu&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;内蒙古&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;445.289,322.482 438.935,316.462 435.591,309.773 435.925,305.091 436.26,303.418 436.929,301.746 437.932,300.408 438.935,299.071 440.607,297.733 442.279,296.729 445.289,294.054 447.964,290.04 447.63,287.365 446.292,285.358 445.289,284.02 443.951,283.352 442.948,283.017 441.61,282.683 440.273,283.017 436.929,284.02 432.916,287.365 427.231,290.04 426.228,289.037
425.224,288.368 423.552,287.365 416.53,287.365 414.189,287.699 412.851,288.368 411.848,289.706 411.179,291.378 410.845,294.388 410.51,298.067 409.507,298.736 408.504,298.736 407.501,298.736 406.498,298.402 404.825,297.398 403.488,297.064 400.144,292.716 397.469,290.04 396.131,286.696 394.459,284.02 393.79,283.017 392.787,282.014 391.449,281.679 390.112,281.01
384.092,274.656 380.414,273.653 380.748,272.315 381.083,270.977 382.086,269.974 383.089,268.97 385.43,267.298 386.768,266.295 387.771,265.291 390.112,260.275 390.112,258.268 389.777,256.596 389.108,255.592 388.44,254.923 382.755,254.923 377.404,255.592 372.388,256.596 367.706,258.268 366.369,259.271 365.031,259.606 364.028,259.606 363.025,259.606 363.359,252.582
360.684,248.903 354.664,243.887 354.664,241.88 355.333,240.208 356.671,237.198 356.337,232.181 356.337,230.174 355.668,228.168 352.324,223.82 352.324,218.134 369.044,222.148 398.137,222.482 403.488,223.82 406.832,224.823 409.842,225.827 419.205,233.519 421.546,234.522 430.24,235.86 434.253,238.536 445.289,242.214 446.292,242.883 447.295,243.887 449.97,246.228
451.642,247.231 453.314,247.566 454.986,247.231 457.327,246.228 457.996,245.224 458.999,244.221 461.006,242.883 463.681,241.88 466.022,240.877 468.697,238.87 470.704,237.532 473.379,236.529 477.057,235.86 477.057,235.191 477.726,234.857 479.064,234.188 480.736,233.519 482.408,232.85 483.411,232.85 484.749,232.181 487.09,230.843 489.43,229.171 490.768,228.837
492.106,228.502 494.112,227.499 496.453,226.83 498.794,226.83 501.803,226.83 505.816,227.833 511.501,228.502 514.511,228.502 517.186,228.502 519.527,227.833 520.53,227.499 521.199,226.83 524.209,226.495 526.884,225.158 529.559,223.82 531.9,221.813 533.906,219.806 536.247,217.465 539.926,212.783 545.611,207.766 547.952,205.76 550.627,203.753 553.302,202.415
554.64,201.746 555.977,200.408 555.643,196.061 549.958,190.709 548.955,187.031 549.289,182.683 549.624,180.676 549.958,179.004 550.627,177.666 551.63,176.328 552.968,174.99 554.974,174.322 555.309,173.653 555.643,173.318 556.312,173.653 557.315,174.322 563,178.335 567.347,179.673 572.029,179.673 574.035,179.004 575.707,177.666 577.714,175.994 579.386,173.987
583.064,169.974 586.074,165.96 587.077,165.291 588.08,164.623 589.084,164.623 590.421,164.288 592.762,164.623 595.437,164.957 597.109,163.619 598.447,162.95 601.791,161.613 606.138,157.599 606.807,157.265 607.142,156.596 608.145,154.924 608.814,151.914 609.817,149.238 610.82,147.566 612.158,146.562 613.495,145.893 616.505,144.89 618.846,144.556 621.521,143.552
623.193,141.546 625.2,139.873 627.54,138.536 629.881,137.198 631.553,136.194 633.225,135.86 635.901,135.526 638.576,135.526 644.261,135.86 649.277,136.529 651.952,135.191 652.955,133.853 653.624,132.181 653.959,130.509 653.959,129.171 653.624,127.499 652.955,126.161 651.618,123.82 647.27,119.807 639.579,115.124 639.245,114.121 638.576,112.783 636.904,111.111
634.563,108.77 629.212,108.77 626.537,111.78 621.521,111.78 620.518,117.8 619.18,118.134 617.508,118.134 616.171,117.8 614.833,117.465 612.158,116.128 610.486,115.459 605.804,115.459 603.798,116.128 602.125,117.131 599.116,119.472 597.444,119.472 595.772,118.803 594.769,118.134 594.1,117.131 593.431,116.128 593.096,115.124 593.096,113.118 598.113,108.435
597.778,103.084 598.113,101.077 598.113,99.0708 599.785,95.7263 601.122,92.7163 601.122,89.0373 601.457,86.3617 602.125,83.6862 603.463,81.345 606.807,81.345 610.82,82.014 615.502,82.3484 617.843,82.014 620.183,81.6795 622.524,81.0106 624.531,79.6728 626.872,77.6661 629.547,75.325 631.888,72.9838 633.894,70.6427 633.894,65.626 634.229,59.6059 634.563,56.5959
635.232,53.9203 636.235,51.9136 636.904,51.2447 637.907,50.5758 638.91,48.9036 639.913,46.8969 640.582,43.2179 641.586,39.539 642.589,37.8668 643.592,36.529 643.592,29.5056 642.923,28.1678 639.245,23.82 635.901,22.1477 635.901,20.4755 636.235,19.1377 636.904,17.8 637.573,16.7966 638.576,15.7933 639.913,14.7899 642.589,13.4521 643.926,13.4521 644.93,12.7832
647.27,11.7799 649.611,10.7765 650.615,10.4421 652.286,10.1076 652.286,11.111 652.621,11.4455 653.959,12.7832 653.29,17.131 651.952,18.8033 650.949,19.8066 650.28,21.1444 649.946,23.1511 653.959,26.1611 654.962,27.4989 655.965,28.5022 657.637,29.1712 660.312,29.5056 661.315,23.4855 662.653,23.4855 664.325,23.4855 666.332,24.1545 668.672,25.4922 670.01,27.4989
670.679,30.5089 671.348,33.519 672.351,36.8634 673.354,38.2012 674.357,39.8735 676.364,40.8769 681.38,40.5424 683.052,39.8735 684.724,39.2046 688.402,38.8702 690.409,38.2012 692.081,37.8668 693.753,36.8634 695.425,35.5257 696.763,33.1845 698.1,31.5123 699.438,30.5089 700.775,29.8401 702.447,30.1745 704.12,30.8434 705.792,32.1812 707.798,34.5223 711.142,43.5524
710.473,46.8969 709.47,51.2447 708.132,55.927 706.46,59.6059 706.46,63.6193 710.473,71.3116 710.139,72.6494 709.804,74.3216 708.467,78.0005 708.132,80.0072 708.467,81.6795 709.47,83.6862 710.139,84.355 711.477,85.3584 711.811,87.3651 711.811,89.7062 711.477,95.3919 707.798,96.0608 707.129,95.0574 706.46,94.0541 706.126,92.3818 706.46,89.7062 705.792,88.034
704.788,86.6962 702.447,87.0307 701.11,87.3651 700.775,88.034 700.441,88.7029 700.775,91.044 700.441,92.3818 699.772,93.7196 697.431,96.0608 695.759,98.4019 694.422,101.077 693.753,104.422 692.415,106.429 690.743,108.101 688.737,110.108 687.065,111.445 686.73,117.465 688.068,119.472 690.074,122.817 695.759,126.161 699.772,125.827 702.447,121.813 703.451,123.82
704.12,125.492 704.454,127.499 701.11,128.502 698.1,129.84 698.1,131.178 698.435,132.516 698.435,133.519 699.103,134.188 699.772,135.191 700.775,135.526 697.431,140.208 695.425,142.215 693.419,143.887 691.078,143.218 684.389,138.87 681.38,138.87 680.042,140.542 679.708,141.546 679.373,142.549 679.708,146.897 680.377,147.9 681.38,148.569 683.721,150.241
686.73,152.582 688.068,153.92 689.406,155.592 689.406,161.947 690.743,163.954 692.081,166.964 694.422,173.318 695.759,174.99 698.435,174.99 700.775,170.308 705.123,167.298 707.464,170.977 709.136,173.318 710.473,176.328 710.808,179.004 711.811,181.679 712.48,183.017 713.483,184.021 714.82,185.358 716.493,186.362 717.161,187.699 716.827,189.706 716.827,192.047
716.827,197.398 714.82,199.405 712.814,199.071 711.811,198.402 709.804,197.398 704.788,197.733 702.782,198.067 701.444,198.736 700.107,199.74 699.103,200.743 697.097,204.422 696.428,205.091 695.759,205.76 695.425,206.763 694.422,207.766 691.412,210.107 685.727,213.786 684.724,215.459 682.383,217.131 678.036,220.141 676.364,222.148 673.354,222.816 670.344,219.806
669.007,216.796 668.338,215.793 667.335,215.124 666.666,214.455 665.663,214.455 663.322,214.121 662.653,215.459 662.319,217.131 661.984,218.803 661.65,220.81 661.984,222.482 662.319,224.489 663.322,226.161 664.66,227.833 665.328,234.857 660.981,235.191 657.303,235.526 655.296,235.191 653.624,234.857 652.286,234.522 650.949,233.853 650.28,230.174 649.277,227.833
647.939,226.161 646.267,224.154 641.92,214.455 639.913,212.449 638.576,211.78 637.573,211.78 635.901,211.78 633.894,213.452 631.553,215.124 629.547,216.462 627.54,218.134 626.872,220.141 626.537,222.482 626.537,225.492 627.206,228.502 616.505,229.505 607.142,235.191 605.804,237.867 604.801,238.87 604.466,239.204 603.798,239.204 601.791,237.867 600.788,236.863
600.453,235.526 600.119,234.522 602.125,233.184 601.791,231.178 601.457,229.505 600.788,228.168 599.785,227.164 598.781,226.161 597.444,225.492 596.106,225.158 594.769,225.158 593.096,225.827 592.093,226.83 591.09,227.833 590.421,229.171 590.421,230.509 590.421,232.181 591.09,236.194 587.746,236.863 587.077,237.867 586.743,239.204 585.071,239.873 585.071,249.238
588.415,253.251 588.415,256.261 586.743,259.271 583.064,261.612 579.051,262.616 575.707,263.285 572.029,263.285 569.354,263.619 567.682,264.288 566.344,265.291 564.672,266.629 562.331,268.636 560.325,271.98 557.649,275.325 551.63,282.014 547.617,279.338 542.935,279.673 542.267,282.014 541.598,283.017 540.929,283.686 540.26,282.683 539.257,282.014 537.585,281.345
536.247,281.345 534.91,281.345 534.241,283.017 533.238,284.355 532.234,286.027 530.562,287.365 528.89,288.368 527.218,290.04 525.881,291.713 524.543,293.719 521.868,297.398 520.196,299.071 518.524,300.408 517.855,302.415 517.521,304.422 517.521,309.438 517.521,310.776 517.521,313.117 516.517,317.131 515.514,317.8 510.498,317.465 506.151,316.796 497.791,315.459
492.44,312.783 489.43,309.438 483.411,308.101 483.411,303.084 485.417,300.074 487.424,297.064 488.762,293.719 489.096,292.047 489.096,290.375 488.427,288.703 487.758,287.699 486.755,287.03 485.752,286.362 483.411,286.362 481.405,286.362 480.067,287.03 479.064,287.699 476.054,288.034 475.051,288.368 474.717,289.037 474.717,290.709 474.382,294.388 473.044,295.726
472.376,297.733 469.032,303.753 469.366,310.442 467.36,312.783 464.684,313.452 463.012,313.786 461.675,314.79 460.003,316.127 455.655,317.131 450.974,318.134 449.302,319.472 447.964,320.475 446.961,321.813 445.289,322.482&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;beijing&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;北京&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;644.69,289.752 642.337,288.425 640.321,287.098 638.304,285.439 637.296,283.78 636.624,282.121 636.288,279.466 635.952,276.812 635.616,276.148 635.28,275.484 634.607,273.493 631.246,270.507 629.902,269.843 628.558,269.18 627.213,268.848 625.533,269.18 622.172,269.843 621.164,271.171 620.155,272.166 611.753,272.498 611.753,270.175 612.089,268.184 612.089,267.521
612.761,266.857 613.434,266.525 614.778,266.193 618.475,263.207 618.811,261.88 619.147,260.553 619.147,259.557 618.811,258.562 617.803,256.903 617.467,255.907 617.467,255.244 621.5,252.921 623.516,251.262 625.533,249.603 625.869,247.944 626.205,246.948 626.877,246.284 628.558,245.953 631.583,248.607 637.632,249.271 636.96,251.262 636.624,254.58 636.96,258.23
637.296,259.889 637.968,261.548 640.993,261.88 643.01,263.207 642.674,266.525 642.674,267.853 643.01,269.18 643.346,270.175 644.354,271.503 645.362,272.83 647.379,274.157 650.74,278.471 646.707,280.462 645.362,281.457 644.354,283.116 644.69,289.752&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;liaoning&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;辽宁&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;699.775,279.645 699.441,278.978 700.443,276.642 701.779,275.641 702.781,274.641 704.451,273.306 706.121,269.97 706.121,267.301 702.447,265.299 702.113,263.297 702.113,261.629 702.447,260.295 703.115,258.96 704.785,256.625 707.122,254.623 707.79,253.289 708.458,251.954 708.792,248.952 708.792,246.616 708.792,244.281 702.447,237.275 699.441,236.941 693.764,237.942
691.426,239.944 689.422,242.279 685.08,247.284 682.074,252.288 680.405,254.623 678.735,256.625 672.055,252.288 669.049,249.953 666.378,247.951 664.04,247.617 662.37,246.95 661.368,245.949 660.366,245.282 660.366,242.947 660.7,241.612 661.034,241.279 661.368,240.945 663.372,240.611 665.042,238.276 667.046,235.941 666.712,227.266 666.044,226.933 665.042,225.265
663.706,221.595 663.706,218.259 664.04,216.924 664.708,215.923 666.044,216.591 667.046,217.258 667.714,218.926 668.382,220.928 670.051,222.262 671.721,223.597 672.723,224.264 673.725,224.598 675.061,224.598 677.065,224.264 680.071,221.261 684.078,218.259 688.42,214.922 692.428,211.586 696.435,208.584 698.105,206.582 699.107,204.58 701.111,200.91 704.117,199.91
706.789,199.242 707.79,199.242 709.126,199.576 710.796,200.243 712.466,201.244 715.806,201.244 718.478,198.242 718.478,189.901 719.48,187.232 720.815,187.566 722.819,188.567 724.489,190.235 726.493,192.57 728.497,194.238 730.167,194.905 732.505,195.239 733.173,194.572 733.507,193.237 733.841,191.903 735.51,189.901 736.846,191.235 737.18,197.574 739.184,199.91
741.188,202.579 743.526,205.581 746.532,208.584 746.532,216.924 748.869,219.927 754.547,223.93 758.555,226.599 758.221,227.6 757.219,228.935 753.545,231.604 749.537,234.272 747.199,235.941 744.194,238.943 741.522,241.946 739.184,244.948 738.85,246.283 738.516,247.951 738.182,249.619 737.514,251.287 735.176,252.288 732.505,253.622 729.165,254.29 726.159,255.291
723.487,256.625 720.815,257.96 718.478,259.628 716.474,261.629 714.136,263.965 712.132,266.634 711.13,269.636 709.794,273.64 708.792,277.643 703.783,278.978 699.775,279.645&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;jilin&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;吉林&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;758.615,224.293 756.61,222.296 753.936,220.298 749.59,217.635 748.253,215.97 748.587,210.643 748.253,208.645 747.584,206.648 745.913,204.983 744.91,203.984 743.907,201.986 739.227,196.992 738.893,196.659 738.559,190.001 737.222,188.669 736.219,188.003 735.216,188.003 734.213,188.003 733.21,189.335 732.542,190.333 731.205,193.33 730.536,193.33 726.19,189.002
724.185,187.004 722.179,185.672 719.17,185.006 717.165,184.341 715.493,183.675 714.491,182.343 713.488,181.344 713.154,179.679 712.151,175.684 711.148,173.021 709.477,170.69 707.136,167.361 706.468,164.697 705.131,164.364 699.782,169.025 697.442,173.353 696.105,172.355 695.437,171.356 694.434,169.025 693.765,166.695 693.431,166.029 693.097,165.363 691.091,161.035
691.091,155.042 689.085,152.378 687.08,150.381 683.068,147.051 682.066,146.718 681.397,146.385 681.063,145.387 681.063,144.388 681.731,142.057 682.4,141.058 683.403,140.725 685.743,142.39 688.083,144.055 690.757,145.053 692.428,145.719 694.1,145.719 695.771,144.388 697.442,142.723 699.114,141.058 700.785,139.726 702.457,137.063 703.459,136.397 704.128,135.731
705.131,135.731 706.468,136.397 707.471,137.396 708.808,139.394 709.142,141.058 709.811,142.723 711.148,144.388 712.485,145.719 714.156,147.051 716.162,148.05 718.502,148.716 720.842,149.382 730.202,146.718 737.89,140.059 739.562,140.725 739.227,143.389 739.227,144.721 739.227,146.385 739.896,147.717 740.899,149.049 742.236,149.715 744.576,150.048 745.913,149.382
747.584,148.716 748.587,148.05 749.59,147.717 750.593,148.05 751.596,148.383 753.601,150.381 755.607,152.711 759.618,154.043 760.956,156.041 762.627,158.371 764.633,161.035 767.641,163.365 768.978,163.365 770.649,161.701 771.652,159.703 772.321,158.038 772.99,156.041 775.998,157.039 776.667,159.037 778.004,161.368 780.009,163.698 782.349,165.696 782.349,166.362
786.695,170.024 792.043,169.691 793.046,168.359 794.383,167.361 794.718,167.028 795.386,166.695 796.389,165.696 796.389,164.364 795.386,163.698 795.386,163.032 796.055,162.366 798.06,161.368 802.072,160.036 803.075,159.37 803.743,159.037 805.08,157.705 805.415,158.038 805.749,158.371 806.417,159.703 807.42,161.368 808.423,162.033 809.76,162.699 815.777,167.028
821.126,168.026 821.126,169.691 821.126,172.355 821.126,173.686 820.792,175.018 820.457,176.017 819.454,176.683 817.783,181.011 816.78,186.671 815.109,187.004 814.774,186.005 814.106,185.672 813.437,185.339 812.769,185.339 811.097,185.672 810.429,186.005 809.76,185.672 809.76,178.681 808.423,177.016 807.42,176.35 806.417,176.017 805.415,176.017 804.412,176.35
803.409,177.349 801.738,179.679 800.735,182.676 799.398,186.005 797.726,189.002 796.389,192.331 795.721,193.33 794.718,194.662 792.378,195.993 790.038,196.659 786.695,196.992 785.358,197.658 785.024,197.991 784.689,198.657 784.355,200.655 784.355,203.984 788.701,207.646 788.366,208.645 787.698,209.644 786.026,211.309 784.689,211.642 783.018,211.642 779.341,211.642
776.332,210.976 773.992,210.31 772.655,209.311 771.318,208.645 769.981,208.312 768.978,208.645 767.975,208.978 766.972,209.977 764.967,211.642 761.29,222.296 760.621,223.961 758.615,224.293&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;heilongjiang&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;黑龙江&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;787.606,168.461 780.935,162.125 778.933,158.457 777.933,156.79 777.265,155.79 775.931,155.123 774.931,154.456 773.263,154.123 771.595,154.456 768.593,161.125 767.592,160.792 766.258,160.125 764.257,157.791 762.923,155.456 762.256,154.123 761.589,153.789 761.255,153.122 760.588,151.789 756.919,151.122 755.585,149.121 754.584,147.787 753.583,147.12 752.583,146.454
750.248,146.12 747.579,145.787 746.912,146.787 744.577,147.454 742.91,147.454 741.909,146.787 741.575,145.787 741.242,144.453 741.242,142.786 741.242,139.785 739.908,138.451 738.907,138.117 737.906,137.784 736.572,137.784 733.57,141.452 731.235,142.786 730.235,143.786 728.9,144.453 727.566,145.453 725.898,145.787 722.563,146.787 719.561,147.12 715.558,145.453
714.224,144.453 712.89,143.453 712.223,142.452 711.222,141.118 710.222,138.117 708.22,135.116 707.553,134.45 707.22,134.116 705.552,134.116 702.884,133.783 702.55,134.116 701.216,133.449 700.549,132.782 700.215,131.782 699.882,130.782 701.216,130.448 702.884,130.115 704.551,129.448 706.219,128.448 705.885,125.113 705.218,122.779 703.884,120.445 701.549,120.445
700.215,121.112 699.548,122.446 698.547,124.446 697.213,124.446 696.212,124.113 694.211,123.113 692.877,121.779 691.209,121.112 690.876,119.445 690.208,118.444 688.874,116.777 688.874,112.776 690.876,110.775 692.877,109.108 695.545,105.107 696.212,102.773 696.88,101.105 697.88,99.4382 698.881,97.771 700.882,95.1034 701.883,93.4363 702.55,91.769 702.884,88.4346
703.551,88.768 704.218,89.1015 704.885,90.4353 704.885,92.1025 704.551,94.1031 704.885,95.1034 705.218,96.1038 705.885,97.1042 707.22,97.771 710.222,97.771 711.889,97.1042 713.224,96.1038 713.557,89.7683 713.557,87.1009 713.224,84.7668 711.889,83.0995 710.889,81.4324 710.222,80.0985 710.222,78.7648 710.555,77.7644 710.889,76.4307 712.223,73.7632 711.889,70.7622
710.889,67.7612 709.888,65.7605 708.887,64.4268 708.554,60.4255 710.555,55.7573 710.889,53.4232 711.222,51.4225 712.89,47.0878 712.556,44.4203 712.223,41.7527 711.556,38.7517 710.555,36.0842 709.221,33.7502 707.887,31.4161 706.219,29.7488 704.551,28.7485 701.549,28.7485 699.548,29.0819 697.547,29.7488 695.879,31.0826 694.211,33.7502 692.877,35.4173 691.209,36.4176
688.207,37.0845 685.205,37.418 682.537,38.0849 679.868,38.7517 677.534,39.4186 676.199,38.7517 675.199,37.7514 674.532,37.0845 674.198,36.0842 673.865,34.417 673.531,33.0832 672.864,29.7488 671.863,27.0813 670.529,25.0806 669.195,23.4134 666.526,22.4131 664.192,21.7462 662.524,21.4128 661.19,21.7462 660.189,22.7465 659.855,24.0803 659.522,25.7475 659.522,28.4151
652.184,23.08 652.184,22.0796 655.519,18.4118 656.186,12.0764 653.852,10.0757 664.192,4.07377 666.86,3.07346 669.528,2.40653 672.53,2.40653 675.866,2.74003 678.201,4.07377 680.202,5.07413 682.87,5.40751 686.206,5.741 689.541,5.07413 692.21,4.7407 695.212,5.40751 699.214,6.74137 706.219,15.4108 710.222,20.079 714.558,25.0806 717.56,33.0832 724.898,39.4186
726.566,41.7527 727.566,43.42 728.233,45.4206 728.567,48.755 729.568,49.7553 730.568,50.7557 734.237,53.4232 734.904,54.757 735.238,57.4245 736.239,61.4258 737.906,62.0927 740.908,62.0927 744.244,61.7593 747.246,61.4258 748.914,61.4258 750.248,61.4258 752.249,62.0927 754.584,63.4265 758.587,63.4265 759.254,62.7596 759.921,62.4262 762.589,62.0927 769.594,68.4281
771.595,68.4281 773.596,68.4281 775.598,69.095 776.932,69.7619 777.933,70.7622 780.601,77.0976 780.935,78.7648 781.935,80.7654 782.936,83.0995 784.27,85.1002 785.938,86.7674 786.938,87.4343 787.939,87.7677 789.273,88.1012 790.607,87.7677 791.942,87.4343 793.276,86.7674 798.613,85.4336 804.283,83.433 806.952,81.7658 809.286,78.0979 811.621,75.097 814.29,72.4294
817.292,69.7619 821.628,65.0937 829.633,58.4248 831.968,58.7583 832.969,59.0917 833.302,59.4252 833.636,60.0921 833.302,60.7589 832.969,64.0934 832.969,71.0956 835.637,73.7632 836.971,76.0973 837.638,77.0976 837.972,78.4314 837.638,85.4336 835.971,89.7683 835.303,90.7687 834.636,91.769 834.303,94.1031 834.636,96.7707 834.97,99.7716 834.97,110.775 833.302,117.444
833.636,124.446 832.301,126.114 831.301,126.78 830.3,127.447 826.631,127.781 823.629,127.114 821.294,126.78 817.292,126.447 816.625,127.781 815.957,128.781 815.29,129.781 814.623,131.115 812.956,131.449 811.621,132.116 810.621,132.782 809.954,133.783 809.62,134.783 809.286,135.783 809.62,139.118 812.288,143.453 812.956,146.787 814.29,150.455 816.291,154.123
818.292,158.457 819.96,165.126 817.625,165.126 815.957,164.459 814.29,163.793 812.622,162.792 810.287,160.792 808.286,159.458 807.952,158.124 807.619,157.124 806.952,156.457 806.284,155.79 805.284,155.79 804.617,155.456 803.95,155.79 803.282,156.123 802.949,157.457 800.281,158.124 797.946,159.124 793.609,161.458 793.609,164.459 794.277,165.126 792.275,166.127
790.941,167.794 787.606,168.461&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Polygon &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;gansu&quot;&lt;/span&gt;&lt;span&gt; ToolTip&lt;/span&gt;&lt;span&gt;=&quot;甘肃&quot;&lt;/span&gt;&lt;span&gt;  Points&lt;/span&gt;&lt;span&gt;=&quot;498.021,371.408 496.018,370.07 494.015,369.066 492.346,368.397 490.677,367.728 487.338,367.394 484,367.728 482.33,368.063 480.327,368.732 479.326,370.739 478.658,373.08 478.324,375.087 478.324,377.429 478.992,379.771 479.659,382.447 481.663,387.464 481.996,391.813 481.996,394.155 481.329,396.831 472.983,396.831 471.313,397.834 470.979,398.503 470.646,401.514
474.318,404.19 474.318,406.532 473.316,409.208 472.315,411.884 469.644,412.219 467.975,412.888 466.306,413.891 464.302,414.56 454.955,414.895 453.953,414.56 452.952,412.888 451.616,411.884 450.615,411.215 449.613,410.881 448.611,408.204 444.939,400.845 440.933,397.5 440.265,396.496 439.264,395.493 437.261,393.82 435.258,393.151 433.588,392.482 430.25,390.475
428.914,387.464 427.579,385.457 426.244,384.119 424.908,383.785 423.573,383.785 421.904,384.119 417.897,386.461 416.562,387.799 415.56,388.803 415.227,390.141 415.227,392.482 415.894,393.82 416.562,394.824 416.896,396.496 417.23,398.838 415.227,400.176 414.225,400.845 412.89,401.18 410.219,401.514 406.213,398.838 402.54,396.496 399.536,393.82 396.865,391.144
395.863,390.141 394.862,389.137 394.194,387.464 393.86,386.126 393.526,383.116 393.526,381.109 400.537,381.443 406.213,385.123 408.216,385.123 410.219,385.123 411.22,385.123 412.222,384.788 413.223,384.119 414.225,383.116 414.225,380.44 410.553,377.095 409.217,375.756 408.55,374.418 411.888,372.077 415.227,368.397 418.231,364.717 419.233,362.71 419.9,361.038
422.571,359.7 424.574,358.362 425.242,358.027 426.244,357.358 427.579,355.686 427.245,348.661 426.244,347.323 425.242,345.65 424.908,343.978 424.574,342.639 424.574,340.298 424.574,339.294 424.24,338.96 420.902,330.597 419.9,324.91 417.23,319.558 416.228,317.551 415.227,316.547 407.214,316.547 405.545,315.878 403.542,314.875 400.203,312.533 397.199,310.526
394.862,308.853 386.849,299.487 385.18,299.487 383.845,299.822 381.842,300.491 377.835,300.156 370.157,293.8 363.146,290.455 359.808,290.121 357.137,289.786 352.463,288.783 350.46,287.11 349.124,286.441 347.455,285.772 346.454,285.437 343.783,285.437 340.444,285.437 337.44,287.11 337.773,289.117 338.107,291.124 338.441,293.131 338.107,296.142 337.44,296.811
336.438,297.145 335.103,297.48 334.101,297.48 331.764,296.811 329.427,295.473 327.09,294.135 325.087,292.462 322.416,289.786 315.739,284.434 309.062,280.754 306.058,279.416 303.387,278.413 298.045,278.413 293.038,278.413 290.367,278.413 288.03,278.078 285.693,277.409 283.69,276.74 282.021,276.406 281.687,274.064 281.019,271.722 280.685,269.715 280.018,268.712
279.35,266.036 278.682,263.694 278.682,262.69 279.016,261.687 279.35,261.018 280.685,260.683 282.021,258.007 283.356,255.331 286.361,255.331 290.033,254.997 292.036,254.662 293.705,253.993 295.375,252.99 296.71,251.986 298.713,247.637 302.385,243.623 303.721,240.612 304.722,238.605 306.392,236.933 308.061,235.929 310.064,235.26 312.401,234.926 318.41,234.257
320.747,234.257 324.42,234.257 326.423,234.257 328.426,233.922 330.095,233.253 331.43,232.25 330.095,224.556 330.095,220.542 330.429,218.534 330.763,216.862 331.764,215.524 332.766,214.52 333.433,214.186 334.435,214.186 336.438,214.855 351.127,216.862 350.794,218.2 350.46,220.207 350.794,224.221 352.797,227.566 353.798,229.239 354.8,231.915 354.8,235.929
353.464,239.609 352.797,241.951 353.131,244.292 360.475,251.317 361.477,253.324 361.477,260.349 362.145,260.683 363.146,261.018 366.485,261.352 368.488,260.014 370.825,258.676 373.162,258.007 375.832,257.338 381.842,256.669 387.517,256.335 388.519,259.011 387.183,261.687 386.182,264.029 384.846,265.701 383.177,266.705 380.84,268.377 379.839,269.381 379.171,270.719
378.837,272.391 378.837,274.398 384.179,276.406 385.514,278.413 387.517,280.42 389.52,282.092 392.191,283.765 393.193,285.772 394.194,288.114 395.863,290.455 396.531,291.124 397.866,291.793 402.874,298.484 404.543,299.153 407.548,300.156 408.883,300.156 410.219,300.156 411.554,299.487 412.556,298.484 412.556,293.8 412.556,292.462 412.89,291.124 413.557,290.455
414.225,289.786 415.894,289.117 417.897,288.783 419.9,288.783 421.57,288.783 422.571,289.117 423.573,289.452 424.908,290.121 425.91,291.124 428.581,291.459 430.917,290.121 433.254,288.783 435.258,287.445 437.261,286.107 438.262,285.103 439.598,284.768 443.604,284.434 445.941,287.779 445.607,289.117 444.939,290.455 443.938,291.793 442.936,293.131 440.265,295.138
437.594,297.145 435.591,299.822 434.59,302.832 434.256,306.177 433.922,310.192 437.928,317.551 439.264,319.558 441.267,321.565 442.602,322.569 443.938,323.238 445.607,323.907 447.276,323.907 447.61,323.238 449.613,323.238 450.948,323.907 452.284,324.91 455.622,327.921 459.295,331.935 461.965,335.615 463.301,341.636 463.635,345.316 464.302,349.664 465.304,354.682
467.307,356.689 468.976,358.027 470.979,359.365 474.318,361.707 476.989,360.703 481.329,359.031 481.663,357.693 482.33,357.024 484,356.355 486.67,355.686 487.672,354.013 488.673,352.34 488.673,351.002 488.673,349.33 488.006,347.992 487.338,346.654 485.669,344.647 482.664,343.643 481.663,342.974 481.329,342.305 480.995,341.636 480.995,340.632 481.329,338.291
484.667,333.273 484.667,328.255 485.669,327.586 486.336,327.586 488.673,327.586 490.677,325.245 493.013,323.907 493.347,326.248 493.013,327.586 492.346,328.59 492.012,329.259 491.678,332.604 492.346,333.608 493.681,334.277 496.352,335.615 503.029,337.287 511.375,342.974 514.046,342.974 513.044,345.316 511.709,347.992 513.044,358.027 511.375,362.71 510.04,362.71
509.372,362.376 508.37,362.041 505.7,361.372 503.363,361.707 502.361,362.041 501.36,362.376 500.358,363.379 499.69,364.383 499.69,371.073 498.021,371.408&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Canvas&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 31 Dec 2019 13:41:00 +0000</pubDate>
<dc:creator>气宇轩昂_2017</dc:creator>
<og:description>开头语 经过一段时间研究，终于实现CS和BS相同效果的大数据展示平台了。首先来看看实现的效果，超炫的效果，客户特别喜欢，个人也非常满意，分享给各位，同大家一起交流学习。 大数据展示平台 从上图可以看出</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/luoyuhao/p/12127588.html</dc:identifier>
</item>
<item>
<title>玩转MQTT-阿里云之MQTT使用（下）  - 赫山老妖</title>
<link>http://www.cnblogs.com/flyfire-cn/p/12127512.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flyfire-cn/p/12127512.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;玩转MQTT-阿里云之MQTT使用（下）&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;       为使物联网项目在正式使用时，能顺利切换到具有高并发高负载能力的服务平台，对阿里云提供的MQTT服务进行使用验证。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;       之前写“&lt;a href=&quot;https://www.cnblogs.com/flyfire-cn/p/10633995.html&quot; target=&quot;_blank&quot;&gt;MQTT之阿里云使用-玩转阿里云&lt;/a&gt;”这篇文章时，由于时间关系（写文章也是要花费大量时间的），打算将内容拆分为两部分，将写好的一部分先发了出去，打算稍后再补充后续完结内容。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       不成想，文章发出后，居然被管理员从首页移除，严重打击了本人原本不那么强悍的内心，导致一直不太有兴趣完成后续部分。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;      近来翻看自己的文章，发表这篇烂尾的文章居然是自己文章中阅读访问量最高的一篇。虽然文章内容组织比较凌乱，表述也不够好，在这9102年即将过去之际，还是打算来一个续篇，为自己忙忙碌碌（碌碌无为）的2019做个收尾。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;       书接上回，我们说到了阿里云RocketMQ、MQTT服务的开通（MQTT消息的持久化依托MQ服务）、介绍了MQ、MQTT实例的创建，顶级Topic资源的创建，GroupID前缀的创建以及RAM帐号资源的创建及帐号授权。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       一系列准备工作之后，准备开始使用MQTT消息中间件服务。&lt;/p&gt;
&lt;h2&gt;访问鉴权&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;       使用微消息队列 MQTT 的客户端收发消息时，服务端会根据 MQTT 客户端设置的 Username 和 Password 参数来进行鉴权。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       阿里云支持两种鉴权模式&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       签名验证：永久授权，适用于客户端安全受信任的场景&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       临时 Token 权限验证：临时授权，适用于客户端不安全的场景&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       具体鉴权认证的相关资料在这里，大家可自行访问阅读。&lt;a href=&quot;https://help.aliyun.com/document_detail/54225.html&quot;&gt;https://help.aliyun.com/document_detail/54225.html&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h2&gt;签名校验&lt;/h2&gt;
&lt;p&gt;      简单介绍一下阿里云MQTT访问中的签名鉴权模式下的访问要点&lt;/p&gt;
&lt;p&gt;      1、 MQTT连接参数中ClientId必须以GroupID为前缀，以@@@作为连接符，连接自定义的客户ID&lt;/p&gt;
&lt;p&gt;      2、 MQTT连接参数中Username由鉴权模式名称、AccessKey、InstanceId 三部分组成，以 “|” 分隔。&lt;/p&gt;
&lt;p&gt;      3、 MQTT连接参数中Password是用AccessKey对应的AccessKeySecret对ClientId使用 HMAC-SHA1 方法进行签名计算得到一个二进制数组，再对该二进制数组做 Base64 编码得到最终的 Password 签名字符串。&lt;/p&gt;

&lt;p&gt;      签名校验资料网址如下：&lt;a href=&quot;https://help.aliyun.com/document_detail/48271.html&quot;&gt;https://help.aliyun.com/document_detail/48271.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;      阿里云MQTT服务管理页面中，提供了一个在线的JS版本的签名校验验证计算页面，用于验证各位自行实现的校验算法是否正确。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231210808740-1836203222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;h2&gt;MQTT连接测试&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;让我们调出Paho神器，来一场说连就连的测试&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://repo.eclipse.org/content/repositories/paho-releases/org/eclipse/paho/org.eclipse.paho.ui.app/1.0.2/&quot;&gt;https://repo.eclipse.org/content/repositories/paho-releases/org/eclipse/paho/org.eclipse.paho.ui.app/1.0.2/&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/paho/downloads.php&quot;&gt;https://www.eclipse.org/paho/downloads.php&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231211038005-1572902433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;      如上图，先创建MQTT连接，填入服务器地址及端口，填入客户机标识（ClientId）&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231211011632-802596823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;      在MQTT连接选项中，勾选开启登录，填写用户名、密码&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231211114194-832622571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      点击连接，正常情况下，即可成功连接并登录到阿里云MQTT服务器。&lt;/p&gt;
&lt;p&gt;      笔者基于C#,使用开源MQTTnet的Nuget包，也实现了一个简单的MQTT客户端。我们用这个客户端进行连接测试，效果如下图。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231211132700-1895424862.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;h2&gt;消息消费&lt;/h2&gt;
&lt;p&gt;      MQTT是基于二进制消息的发布/订阅编程模式的消息协议。&lt;/p&gt;
&lt;p&gt;      要使用MQTT进行通讯，就需要有发布者和消费者。发布者通过发布主题消息传递信息，接收者通过订阅对应的主题接收和消费信息。&lt;/p&gt;
&lt;h2&gt;订阅主题&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231211203276-469294532.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;      MQTT客户端与MQTT服务器建立连接之后，我们即可以进行消息订阅和消息发布。&lt;/p&gt;
&lt;h2&gt;发布主题&lt;/h2&gt;
&lt;p&gt;      我们使用上文中建立的顶级主题创建一个带有通配符的订阅主题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      注意，MQTT允许使用通配符订阅主题，但是并不允许使用通配符广播。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231211226168-765043366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;       我们创建一个顶级主题下带有城市和发布者编号的主题，发布一条消息，Payload中携带一个json格式的状态信息和坐标信息。&lt;/p&gt;
&lt;p&gt;       点击发布，可以看到上图中，接收框中，成功接收到订阅主题下的消息。（操作中发布了二条消息）。&lt;/p&gt;

&lt;p&gt;       使用Paho测试消息发布/订阅，效果相同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/i-beta/1525067/201912/1525067-20191231211306038-921250613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;       一个发布者发布的消息，可以被多个订阅者接收。&lt;/p&gt;
&lt;p&gt;       至此，阿里云MQTT服务使用介绍完毕。&lt;/p&gt;

&lt;p&gt;      &lt;span&gt;&amp;lt;&amp;lt;&amp;lt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/flyfire-cn/p/10633995.html&quot;&gt;玩转MQTT-阿里云之MQTT使用（上）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 31 Dec 2019 13:21:00 +0000</pubDate>
<dc:creator>赫山老妖</dc:creator>
<og:description>玩转MQTT-阿里云之MQTT使用（下） 摘要 为使物联网项目在正式使用时，能顺利切换到具有高并发高负载能力的服务平台，对阿里云提供的MQTT服务进行使用验证。 引言 之前写“MQTT之阿里云使用-玩</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/flyfire-cn/p/12127512.html</dc:identifier>
</item>
<item>
<title>Rxjava2 介绍与详解实例 - 日新月异_M</title>
<link>http://www.cnblogs.com/jiangming-blogs/p/12127183.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiangming-blogs/p/12127183.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;现在我们可以看到越来越多的开发者都在使用 Rx 相关的技术进行 App，Java 后端等领域进行开发。在开源的社区以及互联网公司，Rx、响应式编程、函数式都是热门的存在。所以笔者将结合自身的学习以及实际使用情况，写一个针对 Rxjava2 的系列文章，一起学习和使用 Rxjava 所带来的便捷。&lt;/p&gt;
&lt;p&gt;笔者将利用工作之余，结合 ReactiveX 官方 &lt;code&gt;Wiki&lt;/code&gt; 对 Rxjava 的定义与介绍，对相关基础知识、基本操作，常用部分的 API 进行整理，并加上个人理解和相关操作的示例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rxjava2 系列文章目录：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;rx介绍&quot;&gt;RX介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ReactiveX的历史&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReactiveX&lt;/code&gt; 是Reactive Extensions的缩写，一般简写为Rx，最初是LINQ的一个扩展，由微软的架构师Erik Meijer领导的团队开发，在2012年11月开源，Rx是一个编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流，Rx库支持.NET、JavaScript和C++，Rx近几年越来越流行了，现在已经支持几乎全部的流行编程语言了，Rx的大部分语言库由ReactiveX这个组织负责维护，比较流行的有RxJava/RxJS/Rx.NET，社区网站是reactivex.io。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是ReactiveX&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微软给的定义是，Rx是一个函数库，让开发者可以利用可观察序列和LINQ风格查询操作符来编写异步和基于事件的程序，使用Rx，开发者可以用Observables表示异步数据流，用LINQ操作符查询异步数据流， 用Schedulers参数化异步数据流的并发处理，Rx可以这样定义：Rx = Observables + LINQ + Schedulers。&lt;/p&gt;
&lt;p&gt;ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行&lt;code&gt;异步编程&lt;/code&gt;的编程接口，ReactiveX结合了&lt;code&gt;观察者模式&lt;/code&gt;、&lt;code&gt;迭代器模式&lt;/code&gt;和&lt;code&gt;函数式编程&lt;/code&gt;的精华。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RxJava 到底是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RxJava 在 GitHub 主页上的自我介绍是 &quot;a library for composing asynchronous and event-based programs using observable sequences for the Java VM&quot;（一个在 Java VM 上使用&lt;strong&gt;可观测的序列来组成异步的、基于事件的程序的库&lt;/strong&gt;）。这就是 RxJava ，概括得非常精准。&lt;/p&gt;
&lt;p&gt;然而，对于初学者来说，这还是比较含蓄难懂的。因为它是一个&lt;code&gt;总结&lt;/code&gt;，而初学者更需要一个入门的介绍或者理解。其实， RxJava 的本质可以总结为&lt;code&gt;异步&lt;/code&gt;的概念。说到本质上，它就是一个实现&lt;strong&gt;异步操作&lt;/strong&gt;的库。RxJava 的异步实现，是通过一种扩展的&lt;code&gt;观察者模式&lt;/code&gt;来实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RxJava 优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同样是做&lt;strong&gt;异步&lt;/strong&gt;，为什么去使用它，而不用现成的 Thread，ThreadPoolExecutor，Android的AsyncTask / Handler / ... ？其实就是&lt;code&gt;简洁，易用&lt;/code&gt; !&lt;/p&gt;
&lt;p&gt;异步操作很关键的一点是程序的简洁性，因为在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。 正如Android 创造的 AsyncTask 和Handler ，其实都是为了让异步代码更加简洁。RxJava 的优势也是简洁，但它的简洁的与众不同之处在于，&lt;strong&gt;随着程序逻辑变得越来越复杂，它依然能够保持简洁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;名词定义&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Reactive 直译为反应性的，有活性的，根据上下文一般翻译为反应式、响应式。&lt;/li&gt;
&lt;li&gt;Iterable 可迭代对象，支持以迭代器的形式遍历，许多语言中都存在这个概念。&lt;/li&gt;
&lt;li&gt;Observable 可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者。&lt;/li&gt;
&lt;li&gt;Observer 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现。&lt;/li&gt;
&lt;li&gt;emit 直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法，文章里一律译为发射。&lt;/li&gt;
&lt;li&gt;items 直译为项目，条目，在Rx里是指Observable发射的数据项，文章里一律译为数据，数据项。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;rx模式&quot;&gt;Rx模式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用观察者模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建：Rx可以方便的创建事件流和数据流&lt;/li&gt;
&lt;li&gt;组合：Rx使用查询式的操作符组合和变换数据流&lt;/li&gt;
&lt;li&gt;监听：Rx可以订阅任何可观察的数据流并执行操作&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;简化代码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;函数式风格：对可观察数据流使用无副作用的输入输出函数，避免了程序里错综复杂的状态&lt;/li&gt;
&lt;li&gt;简化代码：Rx的操作符通通常可以将复杂的难题简化为很少的几行代码&lt;/li&gt;
&lt;li&gt;异步错误处理：传统的try/catch没办法处理异步计算，Rx提供了合适的错误处理机制&lt;/li&gt;
&lt;li&gt;轻松使用并发：Rx的Observables和Schedulers让开发者可以摆脱底层的线程同步和各种&lt;br/&gt;并发问题&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;使用Observable的优势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rx扩展了观察者模式用于支持数据和事件序列，添加了一些操作符，它让你可以声明式的组合这些序列，而无需关注底层的实现：如线程、同步、线程安全、并发数据结构和非阻塞IO。&lt;/p&gt;
&lt;p&gt;Observable通过使用最佳的方式访问异步数据序列填补了这个间隙。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;T getData()&lt;/td&gt;
&lt;td&gt;Iterable getData&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;异步&lt;/td&gt;
&lt;td&gt;Future&amp;lt;T&amp;gt; getData()&lt;/td&gt;
&lt;td&gt;Observable&amp;lt;T&amp;gt; getData()&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Rx的Observable模型让你可以像使用集合数据一样操作异步事件流，对异步事件流使用各种&lt;br/&gt;简单、可组合的操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Observable可组合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于单层的异步操作来说，Java中Future对象的处理方式是非常简单有效的，但是一旦涉及到嵌套，它们就开始变得异常繁琐和复杂。使用Future很难很好的组合带条件的异步执行流程（考虑到运行时各种潜在的问题，甚至可以说是不可能的），当然，要想实现还是可以做到的，但是非常困难，或许你可以用 Future.get() ，但这样做，异步执行的优势就完全没有了。从另一方面说，Rx的bservable一开始就是为组合异步数据流准备的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Observable更灵活&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rx的Observable不仅支持处理单独的标量值（就像Future可以做的），也支持数据序列，甚至是无穷的数据流。 Observable 是一个抽象概念，适用于任何场景。Observable拥有它的近亲Iterable的全部优雅与灵活。&lt;/p&gt;
&lt;p&gt;Observable是异步的双向push，Iterable是同步的单向pull，对比：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;获取数据&lt;/td&gt;
&lt;td&gt;T next()&lt;/td&gt;
&lt;td&gt;onNext(T)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;异常处理&lt;/td&gt;
&lt;td&gt;throws Exception&lt;/td&gt;
&lt;td&gt;onError(Exception)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;任务完成&lt;/td&gt;
&lt;td&gt;!hasNext()&lt;/td&gt;
&lt;td&gt;onCompleted&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;3. Observable无偏见&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rx对于对于并发性或异步性没有任何特殊的偏好，Observable可以用任何方式实现，线程池、事件循环、非阻塞IO、Actor模式，任何满足你的需求的，你擅长或偏好的方式都可以。无论你选择怎样实现它，无论底层实现是阻塞的还是非阻塞的，客户端代码将所有与Observable的交互都当做是异步的。&lt;/p&gt;
&lt;h2 id=&quot;rx使用依赖&quot;&gt;Rx使用依赖：&lt;/h2&gt;
&lt;p&gt;下列是笔者使用的版本（可根据实际情况进行选择）：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用Gradle依赖：&lt;code&gt;implementation &quot;io.reactivex.rxjava2:rxjava:2.2.12&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用Maven依赖或者Jar包下载 ：&lt;a href=&quot;https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava/2.2.12&quot;&gt;Rxjava 2.2.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;其他版本以及相关下载 ：&lt;a href=&quot;https://mvnrepository.com/search?q=rxjava&quot;&gt;Maven&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;rxjava的入门基础&quot;&gt;Rxjava的入门基础&lt;/h2&gt;
&lt;h3 id=&quot;observable&quot;&gt;1. Observable&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.1 观察者模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本概念：&lt;code&gt;Observable&lt;/code&gt; (可观察者，即被观察者)、&lt;code&gt;Observer&lt;/code&gt; (观察者)、 &lt;code&gt;subscribe&lt;/code&gt; (订阅)、&lt;code&gt;事件&lt;/code&gt;。Observable 和 Observer 通过 subscribe() 方法实现订阅关系，从而 Observable 可以在需要的时候发出事件来通知 Observer（观察者观察被观察者的通知事件）。&lt;/p&gt;
&lt;p&gt;在RxJava中，一个实现了 Observer 接口的对象可以订阅 (subscribe) 一个 Observable 类的实例。订阅者(subscriber) 对 Observable 发射 (emit) 的任何数据或数据序列作出响应。这种模式 简化了并发操作，因为它不需要阻塞等待 Observable 发射数据，而是创建了一个处于待命状态的观察者哨兵，哨兵在未来某个时刻响应Observable的通知。&lt;/p&gt;
&lt;p&gt;RxJava 的事件回调方法: &lt;code&gt;onSubscribe()&lt;/code&gt; 、&lt;code&gt;onNext()&lt;/code&gt; 、 &lt;code&gt;onCompleted()&lt;/code&gt; 和 &lt;code&gt;onError()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;onSubscribe(): 当被观察者被观察者订阅的时候触发。&lt;/li&gt;
&lt;li&gt;onNext(): 当被观察者发送数据的时候通过此方法通知观察者数据变换。&lt;/li&gt;
&lt;li&gt;onCompleted(): 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的 onNext() 发出时，需要触发 onCompleted() 方法作为标志。&lt;/li&gt;
&lt;li&gt;onError(): 事件队列异常。在事件处理过程中出异常时，onError() 会被触发，同时队列自动终止，不允许再有事件发出。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 在一个正确运行的事件序列中, onCompleted() 和 onError() 有且只有一个，并且是事件序列中的最后一个。需要注意的是，onCompleted() 和 onError() 二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2 Consumer 和 Action&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这两个词意思分别是 &lt;code&gt;消费者&lt;/code&gt;（可以理解为消费被观察者发射出来的事件）和 &lt;code&gt;行为&lt;/code&gt;（可以理解为响应被观察者的行为）。对于 Observer 中的 4 个回调方法，我们未必都能用得到，如果只需要用到其中的一部分，就需要 Consumer 和 Action 上场了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 1. 进行订阅，subscribe(Observer)
    observable.subscribe(observer);
        
    System.out.println(&quot;---------------------------------------------&quot;);
    // 2. 进行订阅，subscribe(Consumer onNext)
    observable.subscribe(nextConsumer);
    
    System.out.println(&quot;---------------------------------------------&quot;);
    // 3. 进行订阅，subscribe(Consumer onNext, Consumer onError)
    observable.subscribe(nextConsumer, errorConsumer);
        
    System.out.println(&quot;---------------------------------------------&quot;);
    // 4. 进行订阅，subscribe(Consumer onNext, Consumer onError, Action onCompleted)
    observable.subscribe(nextConsumer, errorConsumer, completedAction);
        
    System.out.println(&quot;---------------------------------------------&quot;);
    // 5. 进行订阅，subscribe(Consumer onNext, Consumer onError, Action onCompleted, Consumer onSubscribe)
    observable.subscribe(nextConsumer, errorConsumer, completedAction, onSubscribeComsumer);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.3 Observable的分类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在RxJava中，Observable 有 Hot 与 Cold 之分。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hot Observable : 无论有没有观察者进行订阅，事件始终都会发生。当有多个观察者订阅时，Hot Observable此时与订阅者们的关系时一对多的关系，可以与多个订阅者共享信息。&lt;/li&gt;
&lt;li&gt;Cold Observable : 只有有观察者订阅了，才开始执行数据流的发送，并且与观察者时一对一的关系。当有多个不同的订阅者时，消息是重新完整发送的，也就是说对于订阅者们来说，它们的事件是彼此独立的。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html&quot;&gt;Observable&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;flowable&quot;&gt;2. Flowable&lt;/h3&gt;
&lt;p&gt;Rxjava2.x 中有这么一个被观察者 &lt;code&gt;Flowable&lt;/code&gt;，同样作为被观察者，它和Observable有什么区别呢，在Rxjava2中，Observable不再支持背压，而新增的Flowable支持背压，何为&lt;strong&gt;背压&lt;/strong&gt;，就是&lt;code&gt;异步场景&lt;/code&gt;下上游发送事件的速度大于下游处理事件的速度所产生的现象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191027211424103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-Flowable&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5.5428571428571&quot;&gt;
&lt;p&gt;提示：在本系列后面会有详细的单独篇章来介绍和如何使用背压。&lt;br/&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Flowable.html&quot;&gt;Flowable&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;single&quot;&gt;3. Single&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Single&lt;/code&gt; 类似于 Observable，不同的是，它总是只发射一个值，或者一个错误通知，而不是发射一系列的值。&lt;/p&gt;
&lt;p&gt;因此，不同于Observable需要三个方法 onNext, onError, onCompleted，订阅Single只需要两个方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;onSuccess: Single发射单个的值到这个方法&lt;/li&gt;
&lt;li&gt;onError: 如果无法发射需要的值，Single发射一个Throwable对象到这个方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Single 只会调用这两个方法中的一个，而且只会调用一次，调用了任何一个方法之后，订阅关系终止。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191027211221869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-single&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // Single: 只发送 onSuccess or onError 通知,并且只会发送一次, 第一次发送数据后的都不会在处理
    Single.create(new SingleOnSubscribe&amp;lt;String&amp;gt;() {
    
            @Override
            public void subscribe(SingleEmitter&amp;lt;String&amp;gt; emitter) throws Exception {
                emitter.onSuccess(&quot;Success&quot;);           // 发送success通知
                emitter.onSuccess(&quot;Success2&quot;);      // 只能发送一次通知,后续不在处理
            }
    }).subscribe(new BiConsumer&amp;lt;String, Throwable&amp;gt;() {
    
            @Override
            public void accept(String t1, Throwable t2) throws Exception {
                System.out.println(&quot;--&amp;gt; accept: t1 = &quot; + t1 + &quot;,  t2 = &quot; + t2);
            }
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--&amp;gt; accept: t1 = Success,  t2 = null&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7.5675675675676&quot;&gt;
&lt;p&gt;提示：Single 可以通过 &lt;code&gt;toXXX&lt;/code&gt; 方法转换为 Observable, Flowable, Completable与Maybe。&lt;br/&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Single.html&quot;&gt;Single&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;completable&quot;&gt;4. Completable&lt;/h3&gt;
&lt;p&gt;Completable 在创建后，不会发射任何数据, 只有 &lt;code&gt;onComplete&lt;/code&gt; 与 &lt;code&gt;onError&lt;/code&gt;事件，同时没有Observable中的一些操作符，如 map，flatMap。通常与 &lt;code&gt;andThen&lt;/code&gt; 操作符结合使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191027213426400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-Completable&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 1. Completable：只发送complete 或 error 事件,不发送任何数据
    Completable.fromAction(new Action() {

        @Override
        public void run() throws Exception {
            System.out.println(&quot;Hello World! This is Completable.&quot;);
        }
    }).subscribe(new CompletableObserver() {

        @Override
        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        @Override
        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError&quot;);
        }

        @Override
        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    });

    System.out.println(&quot;----------------------------------------------&quot;);
    // 2. 与 andThen 结合使用，当Completable执行完onCompleted后，执行andThen里的任务
    Completable.create(new CompletableOnSubscribe() {

        @Override
        public void subscribe(CompletableEmitter emitter) throws Exception {
            Thread.sleep(1000);
            System.out.println(&quot;--&amp;gt; completed&quot;);
            emitter.onComplete();
        }
    }).andThen(Observable.range(1, 5)).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {

        @Override
        public void accept(Integer t) throws Exception {
            System.out.println(&quot;--&amp;gt; accept: &quot; + t);
        }
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--&amp;gt; onSubscribe
Hello World! This is Completable.
--&amp;gt; onComplete
----------------------------------------------
--&amp;gt; completed
--&amp;gt; accept: 1
--&amp;gt; accept: 2
--&amp;gt; accept: 3
--&amp;gt; accept: 4
--&amp;gt; accept: 5&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7.2413793103448&quot;&gt;
&lt;p&gt;提示：Completable 可以通过 &lt;code&gt;toXXX&lt;/code&gt; 方法转换为 Observable, Flowable, Single与Maybe。&lt;br/&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Completable.html&quot;&gt;Completable&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;maybe&quot;&gt;5. Maybe&lt;/h3&gt;
&lt;p&gt;Maybe 是 Rxjava 2.x 以后的新类型，只能发射 0 或者 1 项数据，即使后续有多个数据，后面的数据也不会被处理。可以看做是 Single 与 Completable 结合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191027222536990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-Maybe&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // Maybe 只发送0个或者1个数据，后续数据将被忽略
    Maybe.create(new MaybeOnSubscribe&amp;lt;String&amp;gt;() {

        @Override
        public void subscribe(MaybeEmitter&amp;lt;String&amp;gt; emitter) throws Exception {
            // 如果先发送了，将会调用MaybeObserver的onCompleted方法，如果有数据发送或者调用onError，则不会去调用
            // emitter.onComplete();
            emitter.onSuccess(&quot;Hello&quot;); // 如果发送了第一个数据后续数据将不会被处理
            emitter.onSuccess(&quot;World&quot;);
        }
    }).subscribe(new MaybeObserver&amp;lt;String&amp;gt;() {

        @Override
        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        @Override
        public void onSuccess(String t) {
            System.out.println(&quot;--&amp;gt; onSuccess: &quot; + t);
        }

        @Override
        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError: &quot; + e);
        }

        @Override
        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--&amp;gt; onSubscribe
--&amp;gt; onSuccess: Hello&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7.6363636363636&quot;&gt;
&lt;p&gt;提示：Maybe 可以通过 &lt;code&gt;toXXX&lt;/code&gt; 方法转换为 Observable, Flowable, Single与Completable。&lt;br/&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Maybe.html&quot;&gt;Maybe&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;subject&quot;&gt;6. Subject&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;/code&gt; 可以看成是一个桥梁或者代理，在 RxJava 实现中，它同时充当了 &lt;code&gt;Observer&lt;/code&gt; 和 &lt;code&gt;Observable&lt;/code&gt; 的角色。因为它是一个Observer，它可以订阅一个或多个 Observable；又因为它是一个 Observable ，它可以转发它收到(Observe)的数据，也可以发射新的数据。&lt;/p&gt;
&lt;p&gt;它既可以是数据源observerable，也可以是数据的订阅者Observer。这个可以通过源码来了解一下。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public abstract class Subject&amp;lt;T&amp;gt; extends Observable&amp;lt;T&amp;gt; implements Observer&amp;lt;T&amp;gt; {
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Subject 实际上还是 Observable，不过它因为实现了Observer接口，可以通过onNext、onComplete、onError方法发射和终止发射数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 不要使用&lt;code&gt;just(T)&lt;/code&gt;、&lt;code&gt;from(T)&lt;/code&gt;、&lt;code&gt;create(T)&lt;/code&gt;来使用Subject，因为会把Subject转换为Obserable。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Rxjava 中，官方一共为我们提供了几种Subject：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AsyncSubject （仅释放接收到的最后一个数据）&lt;/li&gt;
&lt;li&gt;BehaviorSubject （释放订阅前最后一个数据和订阅后接收到的所有数据）&lt;/li&gt;
&lt;li&gt;PublishSubject （释放订阅后接收到的数据）&lt;/li&gt;
&lt;li&gt;ReplaySubject （释放接收到的所有数据）&lt;/li&gt;
&lt;li&gt;UnicastSubject (仅支持订阅一次的Subject)&lt;/li&gt;
&lt;li&gt;Serialized（串行化）&lt;/li&gt;
&lt;li&gt;TestSubject（在2.x中被TestScheduler和TestObserver替代）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;asyncsubject&quot;&gt;6.1 AsyncSubject&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;AsyncSubject&lt;/code&gt; 仅释放 onComplete() 之前的最后一个数据（必须调用subject.onComplete()才会发送数据，否则观察者不会接收到任何数据）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以获取数据业务逻辑的最后的结果数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019103011031221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-AsyncSubject&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果因异常（Error）终止，将不会向后续的Observer释放数据，但是会向Observer传递一个异常通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 注意: 不要使用just(T)、from(T)、create(T)来使用Subject，因为会把Subject转换为Obserable
    // 无论订阅的时候AsyncSubject是否Completed，均可以收到最后一个值的回调
    AsyncSubject&amp;lt;String&amp;gt; asyncSubject = AsyncSubject.create();
    asyncSubject.onNext(&quot;emitter 1&quot;);
    asyncSubject.onNext(&quot;emitter 2&quot;);
    asyncSubject.onNext(&quot;emitter 3&quot;);
    asyncSubject.onNext(&quot;emitter 4&quot;);
    asyncSubject.onNext(&quot;emitter 5&quot;); // 此时订阅后将近发送此项数据
    // asyncSubject.onNext(1/0 + &quot;&quot;); // 发生error时将不会有数据发射，仅发送error通知
    asyncSubject.onComplete();

    // 订阅后只会接收最后一个数据
    asyncSubject.subscribe(new Observer&amp;lt;String&amp;gt;() {

        @Override
        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        @Override
        public void onNext(String t) {
            System.out.println(&quot;--&amp;gt; onNext = &quot; + t);
        }

        @Override
        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError = &quot; + e);
        }

        @Override
        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--&amp;gt; onSubscribe
--&amp;gt; onNext = emitter 5
--&amp;gt; onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subjects/AsyncSubject.html&quot;&gt;AsyncSubject&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;behaviorsubject&quot;&gt;6.2 BehaviorSubject&lt;/h4&gt;
&lt;p&gt;当观察者订阅 &lt;code&gt;BehaviorSubject&lt;/code&gt; 时，它开始发射原始Observable在订阅前的最后一个发射的数据（如果此时还没有收到任何数据，它会发射一个默认值），然后继续发射其它任何来自原始Observable的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以缓存订阅前最后一次发出的数据，以及订阅后发送的所有数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191030110630637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-BehaviorSubject&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果因异常（Error）终止，将不会向后续的Observer释放数据，但是会向Observer传递一个异常通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 创建无默认值的BehaviorSubject
    BehaviorSubject&amp;lt;Integer&amp;gt; subject = BehaviorSubject.create();
    // 创建有默认值的BehaviorSubject
    BehaviorSubject&amp;lt;Integer&amp;gt; subjectDefault = BehaviorSubject.createDefault(-1);
    
    // 观察者对象
    Observer&amp;lt;Integer&amp;gt; observer = new Observer&amp;lt;Integer&amp;gt;() {

        @Override
        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--------------------------------&quot;); 
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        @Override
        public void onNext(Integer t) {
            System.out.println(&quot;--&amp;gt; onNext: &quot; + t);
        }

        @Override
        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError: &quot; + e);
        }

        @Override
        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    };
    
    // 1. 无数据发送的时候，发送默认值
    //  subjectDefault.subscribe(observer);
    
    // 2. 此时会发射所有订阅后正常发射的数据: 1, 2, 3, 4, error
    //  subject.subscribe(observer);
    subject.onNext(1);
    subject.onNext(2);
    subject.onNext(3);
    
    // 3. 此时会发射订阅前的一个数据及后面正常发射的数据: 3, 4, error
    //  subject.subscribe(observer);
    subject.onNext(4);
    subject.onError(new NullPointerException());
    
    // 4. 此时不会发射后续数据，仅发送Error通知
    //  subject.subscribe(observer);
    subject.onNext(5);
    subject.onComplete();
    
    // 5. 此时没有数据发射，如果有error存在的话，将会发送error
    subject.subscribe(observer);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext: -1
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext: 1
--&amp;gt; onNext: 2
--&amp;gt; onNext: 3
--&amp;gt; onNext: 4
--&amp;gt; onError: java.lang.NullPointerException
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext: 3
--&amp;gt; onNext: 4
--&amp;gt; onError: java.lang.NullPointerException
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onError: java.lang.NullPointerException
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onError: java.lang.NullPointerException&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subjects/BehaviorSubject.html&quot;&gt;BehaviorSubject&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;publishsubject&quot;&gt;6.3 PublishSubject&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;PublishSubject&lt;/code&gt; 只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者。需要注意的是，PublishSubject 可能会一创建完成就立刻开始发射数据（除非你可以阻止它发生），因此这里有一个风险：&lt;strong&gt;在Subject被创建后到有观察者订阅它之前这个时间间隙内，可能有一个或多个数据可能会丢失&lt;/strong&gt;。如果要确保来自原始Observable的所有数据都被分发，你需要这样做：使用Create创建那个Observable以便手动给它引入 &quot;冷&quot; Observable的行为（当所有观察者都已经订阅时才开始发射数据），或者改用 &lt;code&gt;ReplaySubject&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果 PublishSubject 在订阅前已经调用了 &lt;code&gt;onComplete()&lt;/code&gt; 方法，则观察者不会接收到数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191030153914440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-PublishSubject&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果因异常（Error）终止，将不会向后续的Observer释放数据，但是会向Observer传递一个异常通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 释放订阅后接收到正常发射的数据，有error将不会发射任何数据
    PublishSubject&amp;lt;Integer&amp;gt; subject = PublishSubject.create();
    // 观察者对象
    Observer&amp;lt;Integer&amp;gt; observer = new Observer&amp;lt;Integer&amp;gt;() {

        @Override
        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--------------------------------&quot;);
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        @Override
        public void onNext(Integer t) {
            System.out.println(&quot;--&amp;gt; onNext: &quot; + t);
        }

        @Override
        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError: &quot; + e);
        }

        @Override
        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    };
    
    // 1. 此时订阅将释放后续正常发射的数据： 1，2, 3, 4, error
    // subject.subscribe(observer);
    subject.onNext(1);
    subject.onNext(2);
    
    // 2. 此时订阅，发射后续正常发射的数据：3, 4, error
    // subject.subscribe(observer);
    subject.onNext(3);
    subject.onNext(4);
    
    // 此时将不会发送任何数据，直接发送error
    subject.onError(new NullPointerException());
    subject.onNext(5);
    subject.onComplete();
    
    // 3. 此时订阅如果有error，仅发送error，否则无数据发射
    subject.subscribe(observer);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext: 1
--&amp;gt; onNext: 2
--&amp;gt; onNext: 3
--&amp;gt; onNext: 4
--&amp;gt; onError: java.lang.NullPointerException
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext: 3
--&amp;gt; onNext: 4
--&amp;gt; onError: java.lang.NullPointerException
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onError: java.lang.NullPointerException&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subjects/PublishSubject.html&quot;&gt;PublishSubject&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;replaysubject&quot;&gt;6.4 ReplaySubject&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ReplaySubject&lt;/code&gt; 会发射所有来自原始Observable的数据给观察者，无论它们是何时订阅的。也 有其它版本的ReplaySubject，在重放缓存增长到一定大小的时候或过了一段时间后会丢弃旧的数据（原始Observable发射的）。&lt;/p&gt;
&lt;p&gt;如果你把 &lt;code&gt;ReplaySubject&lt;/code&gt; 当作一个观察者使用，注意不要从&lt;strong&gt;多个线程&lt;/strong&gt;中调用它的onNext方法 （包括其它的on系列方法），这可能导致同时（非顺序）调用，这会违反Observable协议， 给Subject的结果增加了不确定性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191030200326776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-ReplaySubject&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191030200411351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfOTd5,size_16,color_FFFFFF,t_70&quot; alt=&quot;img-ReplaySubjectError&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ReplaySubject 还可以限制缓存数据的数量，限制缓存的时间：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;create(bufferAge)：指定内部缓存，减少内部缓存区增长过多的重分配&lt;/li&gt;
&lt;li&gt;createWithSize(maxAge)：指定&lt;strong&gt;订阅后&lt;/strong&gt;接受之前已经发射过数据的 maxAge 个数据项&lt;/li&gt;
&lt;li&gt;createWithTime(timeout, TimeUnit, Scheduler) ：接受&lt;strong&gt;订阅后&lt;/strong&gt;接受之前已经发射过指定 timeout 时间段内的数据项&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;实例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 1. 接受收到的所有数据以及通知，对每隔Observer都执行相同的独立的操作
    ReplaySubject&amp;lt;Integer&amp;gt; subject = ReplaySubject.create();
    
    // 2. 指定内部缓存大小，此方法避免在内部缓冲区增长以容纳新缓冲区时过多的数组重分配
    // ReplaySubject&amp;lt;Integer&amp;gt; subject = ReplaySubject.create(5);
    
    // 3. createWithSize(count) 
    // 指定保留订阅前数据项的个数的Subject，会发射订阅前count个数据和后续的数据
    // ReplaySubject&amp;lt;Integer&amp;gt; subject = ReplaySubject.createWithSize(1);
    
    // 4. createWithTime(maxAge, unit, scheduler) 
    // 指定保留订阅前指定maxAge时间段内数据和后续的数据
    // ReplaySubject&amp;lt;Integer&amp;gt; subject = ReplaySubject.createWithTime(1, TimeUnit.MILLISECONDS, Schedulers.trampoline());

    // 创建Observer(观察者), 可以接受Observable所有通知
    Observer&amp;lt;Integer&amp;gt; observer = new Observer&amp;lt;Integer&amp;gt;() {

        public void onSubscribe(Disposable d) {
            System.out.println(&quot;----------------------------------&quot;);
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        public void onNext(Integer t) {
            System.out.println(&quot;--&amp;gt; onNext = &quot; + t);
        }

        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError: &quot; + e);
        }

        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    };
    
    // 正常接受所有Observable的数据和通知
    subject.subscribe(observer);
    subject.onNext(1);
    subject.onNext(2);
    subject.onNext(3);
    
    // 正常接受所有Observable的数据和通知
    subject.subscribe(observer);
    subject.onNext(4);
    // 如果有error，则发送error通知，不影响任何一个观察者数据与通知接受
    // subject.onError(new NullPointerException());
    subject.onNext(5);
    subject.onComplete();
    
    // 正常接受所有Observable的数据和通知
    subject.subscribe(observer);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;----------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext = 1
--&amp;gt; onNext = 2
--&amp;gt; onNext = 3
----------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext = 1
--&amp;gt; onNext = 2
--&amp;gt; onNext = 3
--&amp;gt; onNext = 4
--&amp;gt; onNext = 4
--&amp;gt; onNext = 5
--&amp;gt; onNext = 5
--&amp;gt; onComplete
--&amp;gt; onComplete
----------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext = 1
--&amp;gt; onNext = 2
--&amp;gt; onNext = 3
--&amp;gt; onNext = 4
--&amp;gt; onNext = 5
--&amp;gt; onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subjects/ReplaySubject.html&quot;&gt;ReplaySubject&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;unicastsubject&quot;&gt;6.5 UnicastSubject&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;UnicastSubject&lt;/code&gt; 是仅支持订阅一次的 Subject ,如果多个订阅者试图订阅这个 Subject 将会受到 &lt;code&gt;IllegalStateException&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用于一次性消费或安全场合，如网络结算，支付等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 创建UnicastSubject，只能被订阅一次，不能再次被订阅
    UnicastSubject&amp;lt;Integer&amp;gt; subject = UnicastSubject.create();
    
    // 创建Observer(观察者), 可以接受Observable所有通知
    Observer&amp;lt;Integer&amp;gt; observer = new Observer&amp;lt;Integer&amp;gt;() {

        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--------------------------------&quot;);
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        public void onNext(Integer t) {
            System.out.println(&quot;--&amp;gt; onNext = &quot; + t);
        }

        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError: &quot; + e);
        }

        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    };
    // 订阅后，此subject将不可以再被订阅了
    subject.subscribe(observer);
    
    subject.onNext(1);
    subject.onNext(2);
    subject.onNext(3);
    // 此时会有IllegalStateException，因为只能订阅一次，不能重复订阅
    subject.subscribe(observer);
    subject.onNext(4);
    subject.onNext(5);
    subject.onComplete();
    
    // 此时会有IllegalStateException，因为只能被订阅一次，不能重复订阅
    subject.subscribe(observer);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext = 1
--&amp;gt; onNext = 2
--&amp;gt; onNext = 3
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onError: java.lang.IllegalStateException: Only a single observer allowed.
--&amp;gt; onNext = 4
--&amp;gt; onNext = 5
--&amp;gt; onComplete
--------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onError: java.lang.IllegalStateException: Only a single observer allowed.&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subjects/UnicastSubject.html&quot;&gt;UnicastSubject&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;serializedsubject&quot;&gt;6.6 SerializedSubject&lt;/h4&gt;
&lt;p&gt;在并发情况下，不推荐使用通常的Subject对象，此时会产生多次调用产生一系列不可控的问题，而是推荐使用 &lt;code&gt;SerializedSubject&lt;/code&gt;，并发时只允许一个线程调用onNext等方法，将Subject &lt;strong&gt;串行化&lt;/strong&gt; 后，所有其他的Observable和Subject方法都是线程安全的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 在Rxjava2 中 &lt;code&gt;SerializedSubject&lt;/code&gt; 是一个不公开(不是public)的类型，意味着不可以直接创建使用，但是可以通过Subject.toSerialized()方法将Subject对象串行化保证其线程安全。同时也提供了 SerializedObserver，SerializedSubscriber等来包装对象成为串行化对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // 创建Subject
    ReplaySubject&amp;lt;String&amp;gt; subject = ReplaySubject.create();

    // 通过toSerialized()进行串行化
    Subject&amp;lt;String&amp;gt; serialized = subject.toSerialized();

    // 订阅
    serialized.subscribe(new Consumer&amp;lt;String&amp;gt;() {

        @Override
        public void accept(String t) throws Exception {
            System.out.println(&quot;--&amp;gt; accept: &quot; + t + &quot;, ReceiverThreadID: &quot; + Thread.currentThread().getId());
        }
    });

    // 多线程执行
    for (int i = 0; i &amp;lt; 10; i++) {
        final int value = i + 1;
        new Thread(new Runnable() {

            @Override
            public void run() {
                serialized.onNext(value + &quot;-SendThreadID: &quot; + Thread.currentThread().getId());
            }
        }).start();
    }

    System.in.read();
    
    System.out.println(&quot;---------------------------------------------------------------------&quot;);

    // 创建一个 SerializedObserver来进行串行化，保证线程安全
    // 注意：只保证同时只有一个线程调用 onNext, onCompleted, onError方法，并不是将所有emit的值放到一个线程上然后处理
    SerializedObserver&amp;lt;String&amp;gt; observer = new SerializedObserver&amp;lt;String&amp;gt;(new Observer&amp;lt;String&amp;gt;() {

        @Override
        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--&amp;gt; onSubscribe&quot;);
        }

        @Override
        public void onNext(String t) {
            System.out.println(&quot;--&amp;gt; onNext: &quot; + t + &quot;, ReceiverThreadID: &quot; + Thread.currentThread().getId());
        }

        @Override
        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError&quot;);
        }

        @Override
        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete&quot;);
        }
    });

    // 订阅
    subject.subscribe(observer);

    // 多线程执行
    for (int i = 0; i &amp;lt; 10; i++) {
        final int value = i + 1;
        new Thread(new Runnable() {

            @Override
            public void run() {
                subject.onNext(value + &quot;-SendThreadID: &quot; + Thread.currentThread().getId());
        //      if (value == 10) {
        //          subject.onComplete();
        //      }
            }
        }).start();
    }

    System.in.read();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--&amp;gt; accept: 1-SendThreadID: 11, ReceiverThreadID: 11
--&amp;gt; accept: 2-SendThreadID: 12, ReceiverThreadID: 11
--&amp;gt; accept: 10-SendThreadID: 20, ReceiverThreadID: 11
--&amp;gt; accept: 9-SendThreadID: 19, ReceiverThreadID: 11
--&amp;gt; accept: 8-SendThreadID: 18, ReceiverThreadID: 11
--&amp;gt; accept: 7-SendThreadID: 17, ReceiverThreadID: 11
--&amp;gt; accept: 6-SendThreadID: 16, ReceiverThreadID: 11
--&amp;gt; accept: 4-SendThreadID: 14, ReceiverThreadID: 11
--&amp;gt; accept: 5-SendThreadID: 15, ReceiverThreadID: 11
--&amp;gt; accept: 3-SendThreadID: 13, ReceiverThreadID: 11
---------------------------------------------------------------------
--&amp;gt; onSubscribe
--&amp;gt; onNext: 1-SendThreadID: 11, ReceiverThreadID: 11
--&amp;gt; onNext: 3-SendThreadID: 13, ReceiverThreadID: 11
--&amp;gt; onNext: 4-SendThreadID: 14, ReceiverThreadID: 11
--&amp;gt; onNext: 5-SendThreadID: 15, ReceiverThreadID: 11
--&amp;gt; onNext: 6-SendThreadID: 16, ReceiverThreadID: 16
--&amp;gt; onNext: 7-SendThreadID: 17, ReceiverThreadID: 16
--&amp;gt; onNext: 8-SendThreadID: 18, ReceiverThreadID: 16
--&amp;gt; onNext: 9-SendThreadID: 19, ReceiverThreadID: 16
--&amp;gt; onNext: 10-SendThreadID: 20, ReceiverThreadID: 16
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;testsubject&quot;&gt;6.7 TestSubject&lt;/h4&gt;
&lt;p&gt;Rxjava2 中已经取消了TestSubject，使用&lt;code&gt;TestScheduler&lt;/code&gt;和&lt;code&gt;TestObserver&lt;/code&gt;替代，下面主要以 TestObserver 为例进行介绍。&lt;/p&gt;
&lt;p&gt;TestObserver 是一个一个记录事件并允许对其进行&lt;strong&gt;断言&lt;/strong&gt;的观察者，多用于测试场合。一般可以创建一个&lt;code&gt;TestObserver&lt;/code&gt; 对象或者从Observable 或者 Subject 中直接调用 &lt;code&gt;test()&lt;/code&gt; 方法获取。&lt;/p&gt;
&lt;p&gt;实例代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    // Observable
    Observable&amp;lt;Integer&amp;gt; observable = Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {

        @Override
        public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
            emitter.onNext(1);
            emitter.onNext(2);
            emitter.onNext(3);
            emitter.onNext(100);
            emitter.onError(new NullPointerException());
            emitter.onComplete();
        }
    });

    // 1. 创建TestObserver对象
    TestObserver&amp;lt;Integer&amp;gt; testObserver = TestObserver.create(new Observer&amp;lt;Integer&amp;gt;() {

        @Override
        public void onSubscribe(Disposable d) {
            System.out.println(&quot;--&amp;gt; onSubscribe:&quot;);
        }

        @Override
        public void onNext(Integer t) {
            System.out.println(&quot;--&amp;gt; onNext: &quot; + t);
        }

        @Override
        public void onError(Throwable e) {
            System.out.println(&quot;--&amp;gt; onError: &quot; + e);
        }

        @Override
        public void onComplete() {
            System.out.println(&quot;--&amp;gt; onComplete:&quot;);
        }
    });

    observable.subscribe(testObserver);
    try {
        // 断言是否为收到订阅，但是没有事件发送
        testObserver.assertEmpty();
        // 断言是否收到onComplete()
        testObserver.assertComplete();
        // 断言没有数据100发送
        testObserver.assertNever(100);
        // 断言接收数据结果
        testObserver.assertResult(1, 2, 3);
        // 断言异常
        testObserver.assertError(NullPointerException.class);
        ... 更多请参考Api
    } catch (Error e) {
        System.out.println(&quot;Error: &quot; + e);
    }

    System.out.println(&quot;-----------------------------------------------&quot;);
    // Subject
    AsyncSubject&amp;lt;Object&amp;gt; subject = AsyncSubject.create();

    // 2. 从Observable或者Subject中获取TestObserver对象
    TestObserver&amp;lt;Integer&amp;gt; test = observable.test();
    TestObserver&amp;lt;Object&amp;gt; test2 = subject.test();
    System.out.println(test.values()); // received onNext values
    try {
        // 断言是否为收到订阅，但是没有事件发送
        test.assertEmpty();
        test2.assertEmpty();
        // 断言是否收到onComplete()
        test.assertComplete();
        // 断言没有数据100发送
        test.assertNever(100);
        // 断言接收数据结果
        test.assertResult(1, 2, 3);
        // 断言异常
        test.assertError(NullPointerException.class);
        ... 更多请参考Api
    } catch (Error e) {
        System.out.println(&quot;Error: &quot; + e);
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出（当出现断言不匹配的情况，会有相应Error抛出）：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--&amp;gt; onSubscribe:
--&amp;gt; onNext: 1
--&amp;gt; onNext: 2
--&amp;gt; onNext: 3
--&amp;gt; onNext: 100
--&amp;gt; onError: java.lang.NullPointerException
Error: java.lang.AssertionError: Value counts differ; expected: 0 but was: 4 (latch = 0, values = 4, errors = 1, completions = 0)
-----------------------------------------------
[1, 2, 3, 100]
Error: java.lang.AssertionError: Value counts differ; expected: 0 but was: 4 (latch = 0, values = 4, errors = 1, completions = 0)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Javadoc: &lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html&quot;&gt;TestObserver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;processor&quot;&gt;6.8 Processor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Process&lt;/code&gt; 和 &lt;code&gt;Subject&lt;/code&gt; 的作用和使用相同。Process 是 Rxjava2 中的新功能，它是一个接口，继承自 Subscriber、Publish。与Subject 最大的区别是 Process 支持&lt;strong&gt;背压&lt;/strong&gt;，关于背压，后续将会有专题文章来做详细介绍。&lt;/p&gt;
&lt;h3 id=&quot;scheduler&quot;&gt;7. Scheduler&lt;/h3&gt;
&lt;p&gt;如果你想给Observable操作符链添加多线程功能，你可以指定操作符（或者特定的 Observable）在特定的调度器(&lt;code&gt;Scheduler&lt;/code&gt;)上执行。&lt;/p&gt;
&lt;p&gt;某些ReactiveX的Observable操作符有一些变体，它们可以接受一个&lt;code&gt;Scheduler&lt;/code&gt;参数。这个参数指定操作符将它们的部分或全部任务放在一个特定的调度器上执行。&lt;/p&gt;
&lt;p&gt;使用ObserveOn和SubscribeOn操作符，你可以让Observable在一个特定的调度器上执行, ObserveOn指示一个Observable在一个特定的调度器上调用观察者的onNext, onError和 onCompleted方法，SubscribeOn更进一步，它指示Observable将全部的处理过程（包括发射数据和通知）放在特定的调度器上执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调度器的种类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下表展示了RxJava中可用的调度器种类：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Schedulers.computation()&lt;/td&gt;
&lt;td&gt;用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())，默认线程数等于处理器的数量 。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Schedulers.from(executor)&lt;/td&gt;
&lt;td&gt;使用指定的Executor作为调度器。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Schedulers.trampoline()&lt;/td&gt;
&lt;td&gt;调度在当前线程上工作，但不立即执行。当其它排队的任务完成后，在当前线程排队开始执行。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Schedulers.io()&lt;/td&gt;
&lt;td&gt;用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；对于普通的计算任务，请使用 Schedulers.computation()；Schedulers.io( )默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Schedulers.newThread()&lt;/td&gt;
&lt;td&gt;为每个任务创建一个新线程&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Schedulers.single()&lt;/td&gt;
&lt;td&gt;一个默认的、共享的、单线程支持的调度器实例，用于需要在同一后台线程上强顺序执行的工作。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;关于Rxjava中的线程模型、线程转换操作、调度器的使用等后面会有专题文章来详细介绍。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结：&lt;/h2&gt;
&lt;p&gt;本章主要介绍了Rxjava的概念与添加使用依赖、Rxjava中的观察者模式、Observable、Flowable、Subject，Schedule等基础对象的介绍与使用，应该可以对Rxjava的概念及基本对象有了基本的认识和了解，以及简单的上手使用。&lt;/p&gt;
&lt;p&gt;有关Rxjava2 的其他相关部分内容，后续将有系列的文章来介绍，请关注上面的实时文章目录。&lt;/p&gt;
</description>
<pubDate>Tue, 31 Dec 2019 13:20:00 +0000</pubDate>
<dc:creator>日新月异_M</dc:creator>
<og:description>[toc] 前言 现在我们可以看到越来越多的开发者都在使用 Rx 相关的技术进行 App，Java 后端等领域进行开发。在开源的社区以及互联网公司，Rx、响应式编程、函数式都是热门的存在。所以笔者将结</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jiangming-blogs/p/12127183.html</dc:identifier>
</item>
<item>
<title>初识 Kafka Producer 生产者 - 中间件兴趣圈</title>
<link>http://www.cnblogs.com/dingwpmz/p/12127451.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dingwpmz/p/12127451.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;温馨提示：整个 Kafka Client 专栏基于 kafka-2.3.0 版本。&lt;/p&gt;
&lt;p&gt;@(本节目录)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;kafkaproducer-概述&quot;&gt;1、KafkaProducer 概述&lt;/h2&gt;
&lt;p&gt;根据 KafkaProducer 类上的注释上来看 KafkaProducer 具有如下特征：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;KafkaProducer 是线程安全的，可以被多个线程交叉使用。&lt;/li&gt;
&lt;li&gt;KafkaProducer 内部包含一个缓存池，存放待发送消息，即 ProducerRecord 队列，与此同时会开启一个IO线程将 ProducerRecord 对象发送到 Kafka 集群。&lt;/li&gt;
&lt;li&gt;KafkaProducer 的消息发送 API send 方法是异步，只负责将待发送消息 ProducerRecord 发送到缓存区中，立即返回，并返回一个结果凭证 Future。&lt;/li&gt;
&lt;li&gt;acks&lt;br/&gt;KafkaProducer 提供了一个核心参数 acks 用来定义消息“已提交”的条件(标准)，就是 Broker 端向客户端承偌已提交的条件，可选值如下：
&lt;ul&gt;&lt;li&gt;0&lt;br/&gt;表示生产者不关系该条消息在 broker 端的处理结果，只要调用 KafkaProducer 的 send 方法返回后即认为成功，显然这种方式是最不安全的，因为 Broker 端可能压根都没有收到该条消息或存储失败。&lt;/li&gt;
&lt;li&gt;all 或 -1&lt;br/&gt;表示消息不仅需要 Leader 节点已存储该消息，并且要求其副本（准确的来说是 ISR 中的节点）全部存储才认为已提交，才向客户端返回提交成功。这是最严格的持久化保障，当然性能也最低。&lt;/li&gt;
&lt;li&gt;1&lt;br/&gt;表示消息只需要写入 Leader 节点后就可以向客户端返回提交成功。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;retries&lt;br/&gt;kafka 在生产端提供的另外一个核心属性，用来控制消息在发送失败后的重试次数，设置为 0 表示不重试，重试就有可能造成消息在发送端的重复。&lt;/li&gt;
&lt;li&gt;batch.size&lt;br/&gt;kafka 消息发送者为每一个分区维护一个未发送消息积压缓存区，其内存大小由batch.size指定，默认为 16K。&lt;br/&gt;但如果缓存区中不足100条，但发送线程此时空闲，是需要等到缓存区中积满100条才能发送还是可以立即发送呢？默认是立即发送，即 batch.size 的作用其实是客户端一次发送到broker的最大消息数量。&lt;/li&gt;
&lt;li&gt;linger.ms&lt;br/&gt;为了提高 kafka 消息发送的高吞吐量，即控制在缓存区中未积满 batch.size 时来控制 消息发送线程的行为，是立即发送还是等待一定时间，如果linger.ms 设置为 0表示立即发送，如果设置为大于0，则消息发送线程会等待这个值后才会向broker发送。该参数者会增加响应时间，但有利于增加吞吐量。有点类似于 TCP 领域的 Nagle 算法。&lt;/li&gt;
&lt;li&gt;buffer.memory&lt;br/&gt;用于控制消息发送者缓存的总内存大小，如果超过该值，往缓存区中添加消息会被阻塞，具体会在下文的消息发送流程中详细介绍，阻塞的最大时间可通过参数 max.block.ms 设置，阻塞超过该值会抛出超时异常。&lt;/li&gt;
&lt;li&gt;key.serializer&lt;br/&gt;指定 key 的序列化处理器。&lt;/li&gt;
&lt;li&gt;value.serializer&lt;br/&gt;指定 消息体的序列化处理器。&lt;/li&gt;
&lt;li&gt;enable.idempotence&lt;br/&gt;从 kafka0.11版本开始，支持消息传递幂等，可以做到消息只会被传递一次，通过 enable.idempotence 为 true 来开启。如果该值设置为 true，其 retries 将设置为 Integer.MAX_VALUE，acks 将被设置为 all。为了确保消息发送幂等性，必须避免应用程序端的任何重试，并且如果消息发送API如果返回错误，应用端应该记录最后成功发送的消息，避免消息的重复发送。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从Kafka 0.11开始，kafka 也支持事务消息。&lt;/p&gt;
&lt;h2 id=&quot;kafkaproducer-类图&quot;&gt;2、KafkaProducer 类图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191103130908591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ByZXN0aWdlZGluZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;在 Kafka 中，生产者通过接口 Producer 定义，通过该接口的方法，我们基本可以得知 KafkaProducer 将具备如下基本能力：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;void initTransactions()&lt;br/&gt;初始化事务，如果需要使用事务方法，该方法必须首先被调用。&lt;/li&gt;
&lt;li&gt;void beginTransaction()&lt;br/&gt;开启事务。&lt;/li&gt;
&lt;li&gt;void sendOffsetsToTransaction(Map&amp;lt; TopicPartition, OffsetAndMetadata&amp;gt; offsets,String consumerGroupId)&lt;br/&gt;向消费组提交当前事务中的消息偏移量，将在介绍 Kafka 事务相关文章中详细介绍。&lt;/li&gt;
&lt;li&gt;void commitTransaction()&lt;br/&gt;提交事务。&lt;/li&gt;
&lt;li&gt;void abortTransaction()&lt;br/&gt;回滚事务。&lt;/li&gt;
&lt;li&gt;Future&amp;lt; RecordMetadata&amp;gt; send(ProducerRecord&amp;lt;K, V&amp;gt; record)&lt;br/&gt;消息发送，该方法默认为异步发送，如果要实现同步发送的效果，对返回结果调用 get 方法即可，该方法将在下篇文章中详细介绍。&lt;/li&gt;
&lt;li&gt;Future&amp;lt; RecordMetadata&amp;gt; send(ProducerRecord&amp;lt;K, V&amp;gt; record, Callback callback)&lt;br/&gt;消息发送，支持回调。&lt;/li&gt;
&lt;li&gt;void flush()&lt;br/&gt;忽略 linger.ms 的值，直接唤醒发送线程，将缓冲区中的消息全部发送到 broker。&lt;/li&gt;
&lt;li&gt;List&amp;lt; PartitionInfo&amp;gt; partitionsFor(String topic)&lt;br/&gt;获取 topic 的路由信息（分区信息）。&lt;/li&gt;
&lt;li&gt;Map&amp;lt; MetricName, ? extends Metric&amp;gt; metrics()&lt;br/&gt;获取由生产者收集的统计信息。&lt;/li&gt;
&lt;li&gt;void close()&lt;br/&gt;关闭发送者。&lt;/li&gt;
&lt;li&gt;void close(Duration timeout)&lt;br/&gt;定时关闭消息发送者。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的方法我们会根据需要在后续文章中进行详细的介绍。接下来我们看一下 KafkaProducer 的核心属性的含义。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;String clientId&lt;br/&gt;客户端ID。在创建 KafkaProducer 时可通过 client.id 定义 clientId，如果未指定，则默认 producer- seq，seq 在进程内递增，强烈建议客户端显示指定 clientId。&lt;/li&gt;
&lt;li&gt;Metrics metrics&lt;br/&gt;度量的相关存储容器，例如消息体大小、发送耗时等与监控相关的指标。&lt;/li&gt;
&lt;li&gt;Partitioner partitioner&lt;br/&gt;分区负载均衡算法，通过参数 partitioner.class 指定。&lt;/li&gt;
&lt;li&gt;int maxRequestSize&lt;br/&gt;调用 send 方法发送的最大请求大小，包括 key、消息体序列化后的消息总大小不能超过该值。通过参数 max.request.size 来设置。&lt;/li&gt;
&lt;li&gt;long totalMemorySize&lt;br/&gt;生产者缓存所占内存的总大小，通过参数 buffer.memory 设置。&lt;/li&gt;
&lt;li&gt;Metadata metadata&lt;br/&gt;元数据信息，例如 topic 的路由信息，由 KafkaProducer 自动更新。&lt;/li&gt;
&lt;li&gt;RecordAccumulator accumulator&lt;br/&gt;消息记录累积器，将在消息发送部分详细介绍。&lt;/li&gt;
&lt;li&gt;Sender sender&lt;br/&gt;用于封装消息发送的逻辑，即向 broker 发送消息的处理逻辑。&lt;/li&gt;
&lt;li&gt;Thread ioThread&lt;br/&gt;用于消息发送的后台线程，一个独立的线程，内部使用 Sender 来向 broker 发送消息。&lt;/li&gt;
&lt;li&gt;CompressionType compressionType&lt;br/&gt;压缩类型，默认不启用压缩，可通过参数 compression.type 配置。可选值：none、gzip、snappy、lz4、zstd。&lt;/li&gt;
&lt;li&gt;Sensor errors&lt;br/&gt;错误信息收集器，当成一个 metrics，用来做监控的。&lt;/li&gt;
&lt;li&gt;Time time&lt;br/&gt;用于获取系统时间或线程睡眠等。&lt;/li&gt;
&lt;li&gt;Serializer&amp;lt; K&amp;gt; keySerializer&lt;br/&gt;用于对消息的 key 进行序列化。&lt;/li&gt;
&lt;li&gt;Serializer&amp;lt; V&amp;gt; valueSerializer&lt;br/&gt;对消息体进行序列化。&lt;/li&gt;
&lt;li&gt;ProducerConfig producerConfig&lt;br/&gt;生产者的配置信息。&lt;/li&gt;
&lt;li&gt;long maxBlockTimeMs&lt;br/&gt;最大阻塞时间，当生产者使用的缓存已经达到规定值后，此时消息发送会阻塞，通过参数 max.block.ms 来设置最多等待多久。&lt;/li&gt;
&lt;li&gt;ProducerInterceptors&amp;lt;K, V&amp;gt; interceptors&lt;br/&gt;生产者端的拦截器，在消息发送之前进行一些定制化处理。&lt;/li&gt;
&lt;li&gt;ApiVersions apiVersions&lt;br/&gt;维护 api 版本的相关元信息，该类只能在 kafka 内部使用。&lt;/li&gt;
&lt;li&gt;TransactionManager transactionManager&lt;br/&gt;kafka 消息事务管理器。&lt;/li&gt;
&lt;li&gt;TransactionalRequestResult initTransactionsResult&lt;br/&gt;kafka 生产者事务上下文环境初始结果。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;经过上面的梳理，详细读者朋友对 KafkaProducer 消息生产者有了一个大概的认识，下一篇会重点介绍消息发送流程。接下来我们以一个简单的示例结束本文的学习。&lt;/p&gt;
&lt;h2 id=&quot;kafkaproducer-简单示例&quot;&gt;3、KafkaProducer 简单示例&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package persistent.prestige.demo.kafka;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import java.util.Properties;
import java.util.concurrent.Future;
public class KafkaProducerTest {
    public static void main(String[] args){
        Properties props = new Properties();
        props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092,localhost:9082,localhost:9072,&quot;);
        props.put(&quot;acks&quot;, &quot;all&quot;);
        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);
        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);
        Producer&amp;lt;String, String&amp;gt; producer = new KafkaProducer&amp;lt;&amp;gt;(props);
        try {
            for (int i = 0; i &amp;lt; 100; i++) {
                Future&amp;lt;RecordMetadata&amp;gt;  future = producer.send(new ProducerRecord&amp;lt;String, String&amp;gt;(&quot;TOPIC_ORDER&quot;, Integer.toString(i), Integer.toString(i)));
                RecordMetadata recordMetadata = future.get();
                System.out.printf(&quot;offset:&quot; + recordMetadata.offset());
            }
        } catch (Throwable e) {
            e.printStackTrace();
        } finally {
            producer.close();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本文就介绍到这里，其主要的目的是了解Kafka 的 Producer，引出后续需要学习的内容，下一篇将重点讲述 Kafka 消息的发送流程，敬请关注。&lt;/p&gt;
&lt;p&gt;如果本文对大家有所帮助的话，麻烦帮忙点个赞，谢谢。&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;7.5714285714286&quot;&gt;
&lt;p&gt;作者介绍：&lt;br/&gt;丁威，《RocketMQ技术内幕》作者，RocketMQ 社区布道师，公众号：&lt;a href=&quot;https://mp.weixin.qq.com/s/LB7k8A06BgssXy9bxfZC3w&quot;&gt;中间件兴趣圈&lt;/a&gt; 维护者，目前已陆续发表源码分析Java集合、Java 并发包(JUC)、Netty、Mycat、Dubbo、RocketMQ、Mybatis等源码专栏。欢迎加入我的知识星球，构建一个高质量的技术交流社群。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191127232921737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ByZXN0aWdlZGluZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 31 Dec 2019 13:04:00 +0000</pubDate>
<dc:creator>中间件兴趣圈</dc:creator>
<og:description>温馨提示：整个 Kafka Client 专栏基于 kafka 2.3.0 版本。 @ &amp;quot;TOC&amp;quot; 1、KafkaProducer 概述 根据 KafkaProducer 类上的注</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/dingwpmz/p/12127451.html</dc:identifier>
</item>
</channel>
</rss>