<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>wtf！rds数据同步居然出问题了--小白db的数据修复历程 - 等你归去来</title>
<link>http://www.cnblogs.com/yougewe/p/10459364.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yougewe/p/10459364.html</guid>
<description>&lt;p&gt;　　由于一次上线操作的数据变更太多，导致执行时间很长！&lt;/p&gt;
&lt;p&gt;　　由于做手动主从关系，所以操作落在了主库上。&lt;/p&gt;
&lt;p&gt;　　由于主从关系不是对整个库的操作，所以在有表新增的地方，添加了dts新的同步关系。&lt;/p&gt;
&lt;p&gt;　　db变更完成后，就发布代码上线了！&lt;/p&gt;
&lt;p&gt;以上是背景！一切看起来都很美好。&lt;/p&gt;
&lt;p&gt;　　代码上线后，从从库发现数据一直没有，时间在一分分地过去。&lt;/p&gt;
&lt;p&gt;　　我知道不能再等了，我从后台直接进入主库，查看数据，正常写入！&lt;/p&gt;
&lt;p&gt;　　我知道是数据同步出问题了！妈蛋，说好的花钱买稳定呢？&lt;/p&gt;
&lt;p&gt;　　同步出问题了，这让我怎么排查？我又不是dts的开发人员！&lt;/p&gt;
&lt;p&gt;不过我还是想了几个方向查一下：&lt;/p&gt;
&lt;p&gt;　　1. 查看同步任务，检查是否有同步异常日志；&lt;br/&gt;　　2. 检查目前的同步状态，是否有异常；&lt;br/&gt;　　3. 检查同步流量情况，如果同步正常的话；&lt;br/&gt;　　4. 检查监控报警是否存在；&lt;br/&gt;　　5. 检查dts服务是否被黑名单了；&lt;br/&gt;　　6. 如果实在不行，给阿里云提交工单吧；&lt;/p&gt;
&lt;p&gt;针对这几个方向，着实是一个个落实了的。然而，结果是，不得而知。&lt;/p&gt;
&lt;p&gt;　　1. 同步没有日志，why，可能是日志太多没意义吧！&lt;br/&gt;　　2. 没有发现异常，所有监控为空；&lt;br/&gt;　　3. 由于我最开始做主从关系时，没进行全量初始化数据，所以初始化状态拦也为空；&lt;br/&gt;　　4. 同步流量监控，基本为0，但是这貌似不能说明问题，才怪！&lt;br/&gt;　　5. 重新把自己加入到报警人员中，期待出问题时收到消息，不过最终并没有收到过；&lt;br/&gt;　　6. 检查ip白名单问题，发现并无异常，而且数据库进程中，也有dts服务存在；&lt;br/&gt;　　7. 最终还是给阿里云提交了工单，然而并没有什么卵用，迫在眉睫，还得自己先解决问题！&lt;br/&gt;　　8. 怀疑是在做数据结构变更或者新增同步对象时，dts发生了异常，然而怀疑有毛用。反正又不能解决！&lt;/p&gt;
&lt;p&gt;　　实在没办法，我觉得这个同步任务多半已经挂掉了，所以决定重新搞一个任务。也就是，把原来的同步任务删掉，然后新建一个同步。虽然看到了很多警告，我还是干了，没办法。重新设置任务，想勾选初始化数据和全量同步，结果失败了。原因是，数据表已在目标库中存在，可能存在冲突。&lt;/p&gt;
&lt;p&gt;　　重新设置同步任务的过程，等待也是让人着急。但不管怎么样，还是看到了同步中的状态，发现从库有数据了，但是仅仅是部分。抽查了几个表数据后，发现某些表结构也不一样，很自然的想到了，中间的数据同步已经被丢掉了。&lt;/p&gt;
&lt;p&gt;　　我目前能快速做的，就是先主动把从库表结构更改为一致状态，以让后续数据同步能顺利进行。操作过程中，提示了很多错误，我完全忽略。但这在我最后的思考中，成了思路来源！&lt;/p&gt;
&lt;p&gt;　　我把结构变更操作后，数据总算恢复了平静，从库数据写入了。还不错，从这一刻起，数据是正常的。&lt;/p&gt;
&lt;p&gt;　　然而，这里遇到了另一个更大的问题：数据一致性！两个库的数据不一致！（这是业界最为重视的话题之一）！不过幸好，这只是个从库。但是有很多业务是从这个库数据数据源的，这绝逼会成为生产事故的啊。&lt;/p&gt;
&lt;p&gt;　　事情也不算太糟，虽然db小白很着急，db老鸟们却在笑：小场面，小场面！你不是主库的数据源是正确的嘛，同步过来就好了嘛！&lt;/p&gt;
&lt;p&gt;　　是的，只要从主库将数据搞一份过来就好了嘛！但是，怎么搞？&lt;/p&gt;
&lt;p&gt;　　和虽然听过很多的道理，却依旧过不好这一生一般。虽然你知道数据库的n种操作姿势，却不一定能在关键的时候用出一招！&lt;/p&gt;
&lt;p&gt;　　　　1. 一是最笨型姿势：直接将从库的数据删除，从主库里把全里数据导过来；即：备份&amp;amp;恢复！&lt;br/&gt;　　　　2. 导入的方式可以是自己dump，也可以利用dts进行全量初始化；&lt;br/&gt;　　　　3. 二还是笨的：根据数据表时间点，导出停顿时间段的数据，挨个导入到从库。这很危险，因为你可能导入一些过期的数据；&lt;br/&gt;　　　　4. 三使用dump数据导入：使用mysqldump 根据特征，取出数据，然后使用replace的方式，插入到从库中；注意一些表项的设置！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# --skip-add-&lt;span&gt;locks 不使用锁进行表写入。因为使用锁时，极有可能导致更新花费很长时间！所以尽量将该参数带上！
# &lt;/span&gt;--skip-tz-&lt;span&gt;utc 即不修改时区，数据库里存储多少就是多少。因为本身两个库的数据是相当的，所以无需修改该参数！
# &lt;/span&gt;-&lt;span&gt;t 代表不创建表
mysqldump &lt;/span&gt;-uroot -t -p --skip-tz-utc --skip-add-locks  --replace --host=localhost -&lt;span&gt;w&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; --databases test &amp;gt; lostdata.dump
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　5. 使用dump时，参数设置最为关键，使用不当将导致数据取错，或者直接更新错误；&lt;/p&gt;
&lt;p&gt;　　四高级姿势：既然数据同步是通过binlog做的，那么，只要将binlog重新执行一遍，就好了嘛。但是风险同在，一是基于云的服务貌似不提供这种功能；二是binlog重读能保证结果一致吗（幂等性），还得研究研究！&lt;/p&gt;
&lt;p&gt;不管怎么样，用笨人的方式，最终还是让数据保持一致了。&lt;/p&gt;
&lt;p&gt; mysqldump过程中，几点经验之谈：&lt;/p&gt;
&lt;p&gt;　　1. 所有表尽可能添加公共特征字段，比如 update_time，这样在同步的时候就可以方便使用where进行过滤了；&lt;br/&gt;　　2. 可以以mysqldump作为命令，执行定时更新数据的脚本；脚本如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash
date_yesterday&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+%Y-%m-%d 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-1 day&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`;
date_before_yesterday&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+%Y-%m-%d 00:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-2 day&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`;
mysqldump &lt;/span&gt;-uroot -t -p --skip-tz-utc --skip-add-locks --replace --host=&lt;span&gt;rm&lt;/span&gt;-xxx.mysql.rds.aliyuncs.com -&lt;span&gt;w&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update_time &amp;gt;= '$date_before_yesterday' AND update_time &amp;lt; '$date_yesterday'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; --databases test --tables t_myusers &amp;gt;&lt;span&gt; lastday.dump
# 去除指定数据库操作，以让外部参数生效
&lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/^USE `.*`;/d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; lastday.dump &amp;gt;&lt;span&gt; lastday.dump
&lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/^CREATE DATABASE.*;/d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; lastday.dump &amp;gt;&lt;span&gt; lastday.dump
# 数据导入新库中
mysql &lt;/span&gt;-uroot -p123 -Dtest_new &amp;lt;  lastday.dump
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     这样，就可以mysqldump来做简单的备份，以及不实时的数据同步了！（调整频率实现）&lt;/p&gt;
&lt;p&gt;　　一句话总结：练为战！&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 15:33:00 +0000</pubDate>
<dc:creator>等你归去来</dc:creator>
<og:description>由于一次上线操作的数据变更太多，导致执行时间很长！ 由于做手动主从关系，所以操作落在了主库上。 由于主从关系不是对整个库的操作，所以在有表新增的地方，添加了dts新的同步关系。 db变更完成后，就发布</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yougewe/p/10459364.html</dc:identifier>
</item>
<item>
<title>论type与object的关系----Python创世纪 - Lorthevan</title>
<link>http://www.cnblogs.com/lorthevan/p/10459097.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lorthevan/p/10459097.html</guid>
<description>&lt;p&gt;这篇随笔的灵感来源于学习源码时对type及object关系的疑惑,主要参考了这篇论文:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Python Types and Objects&quot; href=&quot;http://www.cs.utexas.edu/~cannata/cs345/Class%20Notes/15%20Python%20Types%20and%20Objects.pdf&quot; target=&quot;_blank&quot;&gt;http://www.cs.utexas.edu/~cannata/cs345/Class%20Notes/15%20Python%20Types%20and%20Objects.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.Object是什么?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　计算机的工作过程概括下来就是:读取'数据', 经由'逻辑'运算,输出'结果'&lt;/p&gt;
&lt;p&gt;　　数据在软件中的表示形式,是通过'键'指向存储地址,从而'引用'该地址中的值&lt;/p&gt;
&lt;p&gt;　　所以'程序'在干的事,就是告诉计算机,用什么'数据', 进行什么'逻辑'运算,一言以蔽之,就是操作键值对&lt;/p&gt;
&lt;p&gt;　　这里只谈'数据',不讲'逻辑'&lt;/p&gt;
&lt;p&gt;　　在面向对象中, 我们将键值对分门别类的放好,并封装成一个个对象&lt;/p&gt;
&lt;p&gt;　　'object'就是这样一个东西---python原初的对象.&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 2.Type又是什么?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　先上代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; object
&amp;lt;class 'object'&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type
&amp;lt;class 'type'&amp;gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(object)
&amp;lt;class 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(type)
&amp;lt;class 'type'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; object.__class__ 
&amp;lt;class 'type'&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; type.__class__ 
&amp;lt;class 'type'&amp;gt; 

&amp;gt;&amp;gt;&amp;gt; type.__bases__&lt;span&gt; 
(&amp;lt;class 'object'&amp;gt;&lt;span&gt;,)
&amp;gt;&amp;gt;&amp;gt; object.__bases__&lt;span&gt;
() &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到,从代码中体现的是:&lt;/p&gt;
&lt;p&gt;　　　　·object和type都是类(class)&lt;/p&gt;
&lt;p&gt;　　　　·object和type的类型(type)都是type&lt;/p&gt;
&lt;p&gt;　　　　·type的父类是object,object则没有父类,源码中描述object为&quot;&quot;&quot; The most base type &quot;&quot;&quot;&lt;/p&gt;
&lt;p&gt;　　接下来看一张图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531002/201903/1531002-20190301195158436-1821398257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中虚线表示实例化关系,实现表示继承关系,可以看出:　　&lt;/p&gt;
&lt;p&gt;　　　·因为object是type的实例,所以他的子类(list,tupe,dict)都是type的实例,即一个类的实例化对象的派生类也从属于该类&lt;/p&gt;
&lt;p&gt;　　　·因为mylist是list的实例,且list又是object的子类,所以mylist也是type的实例,即一个类的实例化对象的实例化对象也从属与该类&lt;/p&gt;
&lt;p&gt;　　现在再说这句话应该会更容易理解:&lt;/p&gt;
&lt;p&gt;　　　objcet的type是type,object是type的实例,type是自己的实例&lt;/p&gt;
&lt;p&gt;　　　因此两者之间互相依赖对方定义自身,可以说是鸡生蛋和蛋生鸡的关系&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3.三生万物&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　官方文档中有这么一个概念:&lt;/p&gt;
&lt;h3&gt;　　Type Objects&lt;/h3&gt;
&lt;p id=&quot;index-57&quot;&gt;　　Type objects represent the various object types. An object’s type is accessed by the built-in function &lt;a class=&quot;reference internal&quot; title=&quot;type&quot; href=&quot;https://docs.python.org/3/library/functions.html#type&quot;&gt;&lt;code class=&quot;xref py py-func docutils literal notranslate&quot;&gt;type()&lt;/code&gt;&lt;/a&gt;. There are no special operations on types. The standard module &lt;a class=&quot;reference internal&quot; title=&quot;types: Names for built-in types.&quot; href=&quot;https://docs.python.org/3/library/types.html#module-types&quot;&gt;&lt;code class=&quot;xref py py-mod docutils literal notranslate&quot;&gt;types&lt;/code&gt;&lt;/a&gt; defines names for all standard built-in types.&lt;/p&gt;
&lt;p&gt;　　type objects翻译过来就是类型对象, 其表示各种对象的类型,我们可以使用type()去访问任何对象的类型,type和object都属于Type Objects&lt;/p&gt;
&lt;p&gt;　　结合上面的阐述,可以勾勒出python中'对象'这个概念的全貌:&lt;/p&gt;
&lt;p&gt;　　object和type是两个原初的对象,由他们派生(实例化)的对象也可以分为两类:&lt;/p&gt;
&lt;p&gt;　　　　·类型对象(type objects)&lt;/p&gt;
&lt;p&gt;　　　　·非类型对象(non-type object)&lt;/p&gt;
&lt;p&gt;　　他们都是对象,不同的是,类型对象能够实例化新的对象,非类型对象则不可以,例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
num = int(1&lt;span readability=&quot;3&quot;&gt;)
# num是int实例化的对象,有具体的值,我们不会这么去调用他:num()&lt;p&gt;&lt;span&gt;type(num)
&amp;gt;&amp;gt;&amp;gt; &amp;lt;class 'int'&amp;gt;&lt;span&gt;
type(int)
&amp;gt;&amp;gt;&amp;gt; &amp;lt;class 'type'&amp;gt;&lt;span&gt;

obj =&lt;span&gt; object()
type(obj)
&amp;gt;&amp;gt;&amp;gt; &amp;lt;class 'object'&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对象之间的关系,不外乎以下两种:&lt;/p&gt;
&lt;p&gt;　　　　·父子关系（ the subclass-superclass relationship）&lt;/p&gt;
&lt;p&gt;　　　　·类型实例关系（ the type-instance relationship ）&lt;/p&gt;
&lt;p&gt;　　我们可以通过实例化type来产生新的类型对象,然后再把这个类型实例化,当然,这个新的类型对象也必须继承自object:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
type('A', (object,), {num=1&lt;span&gt;})
# 这个写法可以清晰的表明类型对象是type的实例化,但我们在实际写代码的时候一般这样写:
class&lt;span&gt; A(object):
    num=1&lt;br/&gt;a = A()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这其中,A既是type的实例化对象(instance),又是object的子类(subclass), a则只是A的实例化对象&lt;/p&gt;
&lt;p&gt;　　至此,我们完成了从object到type,再到Type Objects,从'对象'这一角度描绘出了Python这门语言的一个轮廓,相信大家都听说过画杨桃的故事,笔者水平尚浅,幸得窥见这一角度,希望在今后能从更多角度出发去观察,从而从二维升级到三维.&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 14:22:00 +0000</pubDate>
<dc:creator>Lorthevan</dc:creator>
<og:description>这篇随笔的灵感来源于学习源码时对type及object关系的疑惑,主要参考了这篇论文: http://www.cs.utexas.edu/~cannata/cs345/Class%20Notes/15</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lorthevan/p/10459097.html</dc:identifier>
</item>
<item>
<title>nmap参数原理抓包分析 - 雨中落叶</title>
<link>http://www.cnblogs.com/yuzly/p/10458997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuzly/p/10458997.html</guid>
<description>&lt;p&gt;&lt;span&gt;nmap参数原理抓包分析&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;实验环境:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Nmap7.70&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实验步骤:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.主机发现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.端口扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.服务版本探测&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、主机发现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主机发现,如果主机活跃,扫描1000个常用的tcp端口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、Nmap ip   #默认进行主机发现、端口扫描、服务版本探测等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.1先以一个不存在的ip为例:nmap 1.2.3.4 抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301211828190-801037066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到如果没有给出主机发现选项,nmap默认使用以下四种方式来确认目标机器是否活跃(只有以下四种方式任意一个得到目标的响应就可以说明目标主机存活)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.nmap就发送一个ICMP 回声请求到每台目标机器,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.TCP ACK 报文到80端口,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.TCP ACK 报文到443端口,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.还有一个基于时间的ICMP请求到每台目标机器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212221794-293182308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从上图可以看到，nmap不带参数默认使用上面的四种方式来确定目标机器是否存活&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.2再以一个存在的ip为例:nmap 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　可以看到获得扫描成功的结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212514214-2130179105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析抓包的数据,可以看到目标机器对ICMP回显请求响应了,对基于时间的icmp请求响应了,对TCP ACK 报文到80端口和TCP ACK 报文到443端口响应了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212544202-391309010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;得到主机存活之后,就开始了扫描1000个常用的端口(默认扫描的端口)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212620796-483245736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、nmap -sP ip    #ping扫描 只主机发现  #须注意,目标必须是公网ip,局域网ip本参数无效,因为局域网扫描时,默认使用ARP扫描目标(-PR参数)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该选项告诉Nmap仅仅进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机 。 没有进一步的测试 (如端口扫描或者操作系统探测)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.1以一个存在的IP为例: nmap -sP 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到只进行主机发现,没有进一步的测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212844997-1473627880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到抓取的数据包只有关于主机发现的数据,得到目标主机存活之后也没有进行下一步测试(因为nmap -sP参数的限制)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301212912916-91235479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要注意的是即使 您指定了其它 -P*选项，ARP发现(-PR)对于局域网上的 目标而言是默认行为，因为它总是更快更有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.2下面以nmap -sP 192.168.43.200  为例扫描一个局域网IP,抓包分析  #注意目标IP是局域网IP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下图可以看到,局域网扫描可以获得目标主机的MAC地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213050045-105533309.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到下图的抓包,虽然使用的是-sP参数,但因为是在局域网内扫描目标IP,默认使用ARP扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213127490-634993507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.nmap -P0  ip   #无ping 跳过主机发现  把目标ip看成是活跃的直接进行高强度扫描(端口扫描、服务版本探测或操作系统版本探测等)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该选项完全跳过 Nmap发现阶段。通常nmap在进行高强度的扫描时用它确定正在运行的机器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1以一个存在的IP为例: nmap -sP 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行的结果如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213243904-1816839394.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过查看下图抓取的数据包,可以看到没有进行主机发现,直接进行高强度的扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213310203-151235043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.nmap -PS  ip   #TCP SYN 扫描   主机发现只连接目标的tcp 80端口,不使用ICMP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只要目标主机响应TCP SYN 就说明目标主机是活跃的,无论响应的是哪种数据包(RST或者SYN/ACK)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该选项发送一个设置了 SYN 标志位的空 TCP 报文, 默认目的端口为80, 但不同的端口也可以作为选项指定。甚至可以指定一个以逗号分隔的端口列表(如 -PS22，23，25，80，113，1050，35000)，在这种情况下，每个端口会被并发地扫描。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SYN 标志位告诉对方您正试图建立一个连接。通常目标端口是关闭的，一个RST(复位) 包会发回来。 如果碰巧端口是开放的，目标会进行 TCP 三步握手的第二步，回应 一个 SYN/ACKTCP报文。然后运行 Nmap 的机器则会扼杀这个正在建立的连接，发送一个 RST 而非 ACK报文，否则，一个完全的连接将会建立。 RST 报文是运行 Nmap 的机器而不是 Nmap 本身响应的，因为它对收到 的 SYN/ACK感到很意外。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Nmap&lt;/strong&gt; &lt;strong&gt;并不关心端口开放还是关闭。 无论 RST 还是 SYN/ACK响应都告诉 Nmap 该主机正 在运行。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.1以一个存在的IP为例: nmap -PS 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到目标响应一个SYN/ACK包,说明目标ip是活跃的,然后便进行默认端口扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213705913-1657591630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.2 nmap -PS ip 也可以指定端口(不指定默认1000个常用的端口)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面以nmap -PS 192.168.43.200 -p 80,443,53为例,抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213741213-1205957320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析下图的数据包可以看到扫描53端口的过程:nmap发送TCP SYN包到目标IP,目标IP响应SYN/ACK包,nmap不进行第三次握手(ACK包),就直接发送RST包。这就是-PS参数的特点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301213825956-639515397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.nmap -PA ip  #TCP ACK 扫描&lt;/span&gt;　　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TCPACK ping 和刚才讨论的 SYN ping相当类似。区别就是设置 TCP 的 ACK标志位而不是 SYN 标志位。-PA选项使用和 SYN 探测(-PS)相同的默认端口(80)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ACK报文表示确认一个建立连接的尝试，但该连接尚未完全建立。 所以远程主机应该总是回应一个 RST 报文， 因为它们并没有发出过连接请 求到运行 Nmap 的机器，如果它们正在运行的话。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于没头没脑的 ACK 报文通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS 又指定-PA来即发送 SYN又发送 ACK。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.1以一个存在的IP为例: nmap -PS 121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214037250-318544333.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析抓取到的数据,可以看到主机发现的过程(默认以80端口作为主机发现):namp直接发送一个ACK的报文到目标IP,目标IP响应RST报文,说明主机存活&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214116072-825881266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.2带端口的跟不带端口的原理一样,这里不进行测试了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.3由于没头没脑的 ACK 报文通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS 又指定-PA来即发送 SYN又发送 ACK。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以一个存在的IP为例: nmap -PS  -PA  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214151668-396568427.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到同时应用了-PS和-PA参数就构造成了一个完整的数据包,不会轻易被防火墙拦截丢弃&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214219394-202716982.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6.namp -PU  ip   #UDP扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它发送一个空的(除非指定了--data-length)UDP报文到给定的端口。端口列表的格式和前面讨论过的-PS 和-PA选项还是一样。如果不指定端口,默认是31338。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果目标机器的端口是关闭的，UDP 探测应该马上得到一个 ICMP 端口无法到达的回应报 文。 这对于 Nmap 意味着该机器正在运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -PU  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214308468-466539024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析抓取的数据包,可以发现nmap给目标机器的端口31338(默认的UDP端口),得到响应的是目标不可达,说明目标机器是存活的。(因为31338端口是一个关闭的端口)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214353814-1282769923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、端口扫描&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.Nmap -sS ip    #半连接 2/3 默认用-sP去发现主机,如果没结果请尝试改成-PS或者-PU 或者-P0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SYN 扫描作为默认的也是最受欢迎的扫描选项, SYN 扫描相对来说不张扬，不易被注意到，因为它从来不完成 TCP连接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它常常被称为半开放扫描，因为它不打开一个完全的TCP连接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -sS  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214521325-1654728193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面以80端口为例,分析-sS参数的过程,namp发送一个SYN报文到目标IP,目标IP响应一个SYN/ACK报文,然后nmap就不回复了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214552289-21414255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.Nmap -sT ip    #全连接3/3  默认用-sP去发现主机,如果没结果请尝试改成-PS或者-PU 或者-P0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -sT  121.194.14.84  抓包分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面以443端口为例,分析-sS参数的过程: namp发送一个SYN报文到目标IP,目标IP响应一个SYN/ACK报文,然后nmap回复ACK。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214646483-1308018813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、服务版本探测&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个存在的IP为例: nmap -sV  121.194.14.84&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201903/1592114-20190301214713664-1366133006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 01 Mar 2019 13:54:00 +0000</pubDate>
<dc:creator>雨中落叶</dc:creator>
<og:description>nmap参数原理抓包分析 实验环境: Nmap7.70 实验步骤: 1.主机发现 2.端口扫描 3.服务版本探测 一、主机发现 主机发现,如果主机活跃,扫描1000个常用的tcp端口 1、Nmap i</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuzly/p/10458997.html</dc:identifier>
</item>
<item>
<title>simulink创建简单模型 - MATLAB基于模型的设计</title>
<link>http://www.cnblogs.com/52geek/p/10458482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/52geek/p/10458482.html</guid>
<description>&lt;h2 id=&quot;bthii4g&quot; class=&quot;title r2018a&quot;&gt;创建简单模型&lt;/h2&gt;
&lt;p&gt;您可以使用 Simulink® 对系统建模，然后仿真该系统的动态行为。Simulink 允许您创建模块图，图中的各个连接模块代表系统的各个部分，信号代表这些模块之间的输入/输出关系。Simulink 的主要功能是对系统各个组件随时间流逝的行为变化进行仿真。简单来讲就是：采用一个时钟，按时间确定各个模块的仿真顺序，并在仿真过程中依次将在上一个模块图中计算得出的输出传播到下一个模块，直至最后一个模块。假设有一个打开加热器的开关。在每个时间步中，Simulink 必须计算开关的输出，将该输出传播到加热器，然后计算热量输出。&lt;/p&gt;
&lt;p&gt;通常，组件的输入对其输出的影响不是瞬时的。例如，打开加热器不会导致温度立即发生变化。该动作为微分方程提供输入，历史温度（一个&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;状态&lt;/em&gt;）也是一个输入因子。当模块图的仿真需要求解微分或差分方程时，Simulink 使用内存和数值求解器来计算时间步的状态值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Simulink 处理三类数据：&lt;/p&gt;
&lt;div class=&quot;itemizedlist&quot;&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;信号 - 在仿真期间计算的模块输入和输出&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;状态 - 在仿真期间中计算的代表模块动态的内部值&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;参数 - 影响模块行为的值，由用户控制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;p&gt;在每个时间步，Simulink 都计算信号和状态的新值。相比之下，您可以在编译模型时指定参数，并且可以在仿真运行时偶尔更改它们。&lt;/p&gt;
&lt;h3 id=&quot;bqea1hh-3&quot; class=&quot;title&quot;&gt;模型概述&lt;/h3&gt;

&lt;p&gt;本教程中创建简单模型所使用的基本方法也适用于创建更复杂的模型。此示例仿真的是在踩下加速踏板后简化的汽车运动。&lt;/p&gt;
&lt;p&gt;Simulink 模块是定义模块输入和模块输出之间数学关系的模型元素。要创建这个简单模型，您需要四个 Simulink 模块。&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-condensed&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;tcol1&quot; width=&quot;33%&quot;/&gt;&lt;col class=&quot;tcol2&quot; width=&quot;33%&quot;/&gt;&lt;col class=&quot;tcol3&quot; width=&quot;33%&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块名称&lt;/th&gt;
&lt;th&gt;模块目的&lt;/th&gt;
&lt;th&gt;模型目的&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Pulse Generator&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;为模型生成输入信号&lt;/td&gt;
&lt;td&gt;模拟加速踏板&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Gain&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;将输入信号乘以一个因子&lt;/td&gt;
&lt;td&gt;模拟踩下加速踏板对汽车加速所造成的影响&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Integrator, Second-Order&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;对输入信号执行二次积分&lt;/td&gt;
&lt;td&gt;根据加速度计算汽车位置&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span class=&quot;guiicon&quot;&gt;Outport&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;将信号指定为模型的输出&lt;/td&gt;
&lt;td&gt;将位置指定为模型的输出&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;此模型的仿真过程是将一个简短的脉冲信号积分两次，形成一个斜坡信号，然后将结果显示在一个示波器窗口中。输入脉冲表示踩下汽车的加速踏板，输出斜坡表示与起点的距离增加。&lt;/p&gt;
&lt;h3 id=&quot;bu3nd7o-1&quot; class=&quot;title&quot;&gt;打开新模型&lt;/h3&gt;

&lt;p&gt;使用 Simulink Editor 构建模型。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;启动 MATLAB®。从 MATLAB 工具条上，点击 &lt;span class=&quot;guilabel&quot;&gt;Simulink 按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline8&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/icon_simulink_zh_CN.png&quot; alt=&quot;&quot; width=&quot;24&quot; height=&quot;24&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;点击 &lt;span class=&quot;guilabel&quot;&gt;Blank Model 模板。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Simulink Editor 打开。&lt;/p&gt;

&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;从 &lt;span class=&quot;guilabel&quot;&gt;File 菜单中，选择 &lt;span class=&quot;guilabel&quot;&gt;Save as。在 &lt;span class=&quot;guilabel&quot;&gt;File name 文本框中，输入您的模型的名称，例如 &lt;code class=&quot;literal&quot;&gt;simple_model&lt;/code&gt;。点击 &lt;span class=&quot;guibutton&quot;&gt;Save。模型使用文件扩展名 &lt;code class=&quot;literal&quot;&gt;.slx&lt;/code&gt; 进行保存。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;h3 id=&quot;bt9ataa-1&quot; class=&quot;title&quot;&gt;打开 &lt;span class=&quot;trademark&quot;&gt;Simulink Library Browser&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simulink 在 Library Browser 中提供了一系列按功能分类的模块库。下面是大多数工作流常用的一些模块库：&lt;/p&gt;
&lt;div class=&quot;itemizedlist&quot;&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Continuous - 连续状态系统的构建模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Discrete - 离散状态系统的构建模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Math Operations - 实现代数和逻辑方程的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Sinks - 存储并显示所连接信号的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Sources - 生成模型的驱动信号值的模块&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;从 Simulink Editor 工具栏上，点击 &lt;span class=&quot;guilabel&quot;&gt;Library Browser 按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline8&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/library_browser_button_zh_CN.png&quot; alt=&quot;&quot; width=&quot;27&quot; height=&quot;27&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将 Library Browser 设置为始终在其他桌面窗口前端。在 Library Browser 工具栏中，选择 &lt;span class=&quot;guilabel&quot;&gt;Stay on top 按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline10&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/simulik_library_browser_pin_icon_zh_CN.png&quot; alt=&quot;&quot; width=&quot;29&quot; height=&quot;26&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p&gt;要浏览模块库，请从左窗格中选择一个 MathWorks® 产品，然后选择一个功能区。要搜索所有可用的模块库，请输入搜索词。&lt;/p&gt;
&lt;p&gt;例如，查找 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块。在浏览器工具栏的搜索框中输入 &lt;code class=&quot;literal&quot;&gt;pulse&lt;/code&gt;，然后按 Enter 键。Simulink 将在模块库中搜索名称或说明中包含 &lt;code class=&quot;literal&quot;&gt;pulse&lt;/code&gt; 的模块，然后显示这些模块。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;获取模块的详细信息。右键点击某个模块，然后选择 &lt;/p&gt;
&lt;p&gt;模块通常有几个参数。您可以通过双击该模块来访问所有参数。&lt;/p&gt;
&lt;h3 id=&quot;bt9ata1-1&quot; class=&quot;title&quot;&gt;将模块添加到模型&lt;/h3&gt;

&lt;p&gt;要开始构建模型，请浏览库并添加模块。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;从 &lt;span class=&quot;guiicon&quot;&gt;Sources 库中，将 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块拖到 Simulink Editor 中。您的模型中将出现 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块的副本，还有一个文本框用于输入 &lt;span class=&quot;guilabel&quot;&gt;Amplitude 参数的值。输入 &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;参数值在整个仿真过程中保持不变。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;使用相同的方法将以下模块添加到模型中。&lt;/p&gt;

&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-condensed&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;tcol1&quot; width=&quot;26%&quot;/&gt;&lt;col class=&quot;tcol2&quot; width=&quot;41%&quot;/&gt;&lt;col class=&quot;tcol3&quot; width=&quot;33%&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;库&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Gain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Simulink/Math Operations&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Gain: &lt;code class=&quot;literal&quot;&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Integrator, Second Order&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Simulink/Continuous&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Initial condition: &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Outport&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;Simulink/Sinks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Port number:1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;通过右键点击并拖动一个现有 Outport 模块，添加第二个 Outport 模块。&lt;/p&gt;
&lt;p&gt;现在您的模型应该具有所需的全部模块了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过点击并拖动每个模块来按如下方式排列模块。要调整模块大小，请点击并拖动一个角。&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;h3 id=&quot;bt6d_1y-1&quot; class=&quot;title&quot;&gt;连接模块&lt;/h3&gt;

&lt;p&gt;通过在输出端口和输入端口之间创建线条来连接模块。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;4&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;点击 &lt;span class=&quot;block&quot;&gt;Pulse Generator 模块右侧的输出端口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该输出端口和所有可供连接的输入端口都将突出显示。&lt;/p&gt;


&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;点击 &lt;span class=&quot;block&quot;&gt;Gain 模块的输入端口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Simulink 用线条连接模块，并用箭头表示信号流的方向。&lt;/p&gt;


&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将 &lt;span class=&quot;block&quot;&gt;Gain block 的输出端口连接到 &lt;span class=&quot;block&quot;&gt;Integrator, Second Order 模块的输入端口。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将 &lt;span class=&quot;block&quot;&gt;Integrator, Second Order 模块的两个输出连接到两个 &lt;span class=&quot;block&quot;&gt;Outport 模块。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存模型。选择 &lt;/p&gt;



&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p&gt;您的模型搭建完成。&lt;/p&gt;
&lt;h3 id=&quot;mw_53120a0d-b4d9-4b18-96ab-c39a2a2c6890&quot; class=&quot;title&quot;&gt;添加信号查看器&lt;/h3&gt;

&lt;p&gt;要查看结果，请将第一个输出连接到一个 &lt;span class=&quot;block&quot;&gt;Signal Viewer。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过右键点击信号来访问上下文菜单。选择 &lt;/p&gt;

&lt;p&gt;您可以随时通过双击该图标打开查看器。&lt;/p&gt;
&lt;h3 id=&quot;bt6d__m-1&quot; class=&quot;title&quot;&gt;运行仿真&lt;/h3&gt;
&lt;p&gt;定义配置参数后，即可进行模型仿真。&lt;/p&gt;
&lt;div class=&quot;orderedlist&quot;&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;在模型窗口上，通过更改工具栏上的值来设置仿真停止时间。&lt;/p&gt;

&lt;p&gt;默认停止时间 &lt;code class=&quot;literal&quot;&gt;10.0&lt;/code&gt; 适合此模型。此时间值没有单位。Simulink 中的时间单位取决于方程的构造方式。此示例对简化的汽车运动进行为时 10 秒的仿真。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;要运行仿真，请点击 &lt;span class=&quot;guibutton&quot;&gt;Run 仿真按钮 &lt;span class=&quot;guiicon&quot;&gt;&lt;span class=&quot;inlinemediaobject&quot;&gt;&lt;img class=&quot;baseline5&quot; src=&quot;https://ww2.mathworks.cn/help/simulink/gs/start_button_ue_zh_CN.png&quot; alt=&quot;&quot; width=&quot;31&quot; height=&quot;29&quot;/&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;仿真运行并在查看器上生成输出。&lt;/p&gt;

&lt;h2 id=&quot;d120e1729&quot;&gt; &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关注公众号： MATLAB基于模型的设计 （ID：xaxymaker） ，每天推送MATLAB学习最常见的问题，&lt;/strong&gt;每天进步一点点，业精于勤荒于嬉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1082605/201812/1082605-20181216183156624-877634862.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 打开微信扫一扫哦！&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 12:02:00 +0000</pubDate>
<dc:creator>MATLAB基于模型的设计</dc:creator>
<og:description>创建简单模型 您可以使用 Simulink® 对系统建模，然后仿真该系统的动态行为。Simulink 允许您创建模块图，图中的各个连接模块代表系统的各个部分，信号代表这些模块之间的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/52geek/p/10458482.html</dc:identifier>
</item>
<item>
<title>python的Web框架，Django模型系统二，模型属性，及数据库进阶查询 - 華華</title>
<link>http://www.cnblogs.com/hua888/p/10458486.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hua888/p/10458486.html</guid>
<description>&lt;h6 id=&quot;原始数据接上篇文章来操作-可能需要查看后才能懂&quot; data-source-line=&quot;1&quot;&gt;原始数据接上篇文章来操作。可能需要查看后才能懂。&lt;a href=&quot;https://www.cnblogs.com/hua888/p/10442702.html&quot; target=&quot;_blank&quot;&gt;点击这里查看&lt;/a&gt;&lt;/h6&gt;

&lt;p data-source-line=&quot;3&quot;&gt;官方文档：&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/ref/models/fields/#field-types&quot; target=&quot;_blank&quot;&gt;https://docs.djangoproject.com/en/2.1/ref/models/fields/#field-types&lt;/a&gt;&lt;/p&gt;
&lt;p data-source-line=&quot;5&quot;&gt;定义的模型中，类名对应的表名，类属性对应的表的字段，我们在上节内容有说过，可以查看。这里我们详细了解。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p data-source-line=&quot;5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1605939/201903/1605939-20190301194242475-1599491201.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;django和mysql的对应类型modelsmodel下的方法&quot; data-source-line=&quot;8&quot;&gt;django和mysql的对应类型，models.Model下的方法&lt;/h3&gt;
&lt;table data-source-line=&quot;9&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;django类型&lt;/th&gt;
&lt;th&gt;映射到mysql类型&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;IntegerField : 整型&lt;/td&gt;
&lt;td&gt;映射到数据库中的int类型。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;CharField: 字符类型&lt;/td&gt;
&lt;td&gt;映射到数据库中的varchar类型，通过max_length指定最大长度。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;TextField: 文本类型&lt;/td&gt;
&lt;td&gt;映射到数据库中的text类型。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;BooleanField: 布尔类型&lt;/td&gt;
&lt;td&gt;映射到数据库中的tinyint类型，在使用的时候，传递True/False进去。如果要可以为空，则用NullBooleanField。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;DateField: 日期类型&lt;/td&gt;
&lt;td&gt;没有时间。映射到数据库中是date类型在使用的时候，可以设置DateField.auto_now每次保存对象时，自动设置该字段为当前时间。设置DateField.auto_now_add当对象第一次被创建时自动设置当前时间。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;DateTimeField: 日期时间类型&lt;/td&gt;
&lt;td&gt;映射到数据库中的是datetime类型，在使用的时候，传递datetime.datetime()进去。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;
&lt;p data-source-line=&quot;22&quot;&gt;官方文档：&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/ref/models/fields/#field-options&quot; target=&quot;_blank&quot;&gt;https://docs.djangoproject.com/en/2.1/ref/models/fields/#field-options&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;field常用参数&quot; data-source-line=&quot;23&quot;&gt;field常用参数&lt;/h3&gt;
&lt;table data-source-line=&quot;24&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr&gt;&lt;td&gt;primary_key:&lt;/td&gt;
&lt;td&gt;指定是否为主键。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;unique:&lt;/td&gt;
&lt;td&gt;指定是否唯一。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;null:&lt;/td&gt;
&lt;td&gt;指定是否为空，默认为False。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;blank:&lt;/td&gt;
&lt;td&gt;等于True时form表单验证时可以为空，默认为False。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;default:&lt;/td&gt;
&lt;td&gt;设置默认值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;DateField.auto_now:&lt;/td&gt;
&lt;td&gt;每次修改都会将当前时间更新进去，只有调用，QuerySet.update方法将不会调用。这个参数只是Date和DateTime以及TimModel.save()方法才会调用e类才有的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DateField.auto_now_add:&lt;/td&gt;
&lt;td&gt;第一次添加进去，都会将当前时间设置进去。以后修改，不会修改这个值&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;主键的设置&quot; data-source-line=&quot;34&quot;&gt;主键的设置&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;第一种方式设置主键，指定int类型，设置为主键，使用自增长。
id &lt;/span&gt;= models.IntegerField(primary_key=True, auto_created=&lt;span&gt;True)

第二种方式：使用AutoField方法，这个方法是自增长且为int类型
id &lt;/span&gt;= models.AutoField(primary_key=True使用AutoField方法，这个方法是自增长且为int类型)
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;unique设置唯一注意的事项&quot; data-source-line=&quot;42&quot;&gt;unique设置唯一，注意的事项&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; qq = models.CharField(max_length=20, &lt;span&gt;unique=True&lt;/span&gt;, null=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;pre data-source-line=&quot;43&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;
&lt;span class=&quot;zh-hans&quot;&gt;当你设置的这个字段是唯一了，就代表必须和其他的不一样，但是有的时候用户没有提供，可以不填的，就可以为空，不然就会出错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;h4 id=&quot;管理器理解&quot; data-source-line=&quot;54&quot;&gt;管理器理解&lt;/h4&gt;
&lt;p data-source-line=&quot;55&quot;&gt;objects是Students的对象，是django.db.models.manager.Manager的一个实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;Students.objects
&lt;/span&gt;&amp;lt;django.db.models.manager.Manager at 0xb36edaec&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;queryset&quot; data-source-line=&quot;60&quot;&gt;QuerySet&lt;/h4&gt;
&lt;p data-source-line=&quot;61&quot;&gt;表示数据库中对象的集合，可以等同于select的语句。它是惰性的。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;单条数据查询&quot; data-source-line=&quot;65&quot;&gt;单条数据查询：&lt;/h2&gt;
&lt;p data-source-line=&quot;67&quot;&gt;排序：默认按照主键id排序，可以通过模型中的_meta属性设置排序问题。&lt;/p&gt;
&lt;h4 id=&quot;first-获取第一条返回的是一个对象默认按照主键id排序&quot; data-source-line=&quot;69&quot;&gt;&lt;span&gt;first&lt;/span&gt; 获取第一条，返回的是一个对象，默认按照主键id排序&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;Students.objects.first()
&lt;/span&gt;&amp;lt;Students: 小明-16&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;last-获取最后一条默认按照主键id排序&quot; data-source-line=&quot;75&quot;&gt;&lt;span&gt;last&lt;/span&gt; 获取最后一条，默认按照主键id排序&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;Students.objects.last()
 &lt;/span&gt;&amp;lt;Students: 刘一-19&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;getkwargs-根据给定的条件获取一个对象如果有多个对象符合则会报错&quot; data-source-line=&quot;81&quot;&gt;&lt;span&gt;get(**kwargs)&lt;/span&gt; 根据给定的条件，获取一个对象，如果有多个对象符合，则会报错。&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;Students.objects.get(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;刘一&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
 &lt;/span&gt;&amp;lt;Students: 刘一-19&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;h2 id=&quot;多条数据查询&quot; data-source-line=&quot;89&quot;&gt;多条数据查询&lt;/h2&gt;
&lt;h4 id=&quot;all-获取所有记录返回的是queryset&quot; data-source-line=&quot;91&quot;&gt;all() 获取所有记录，返回的是QuerySet&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Students.objects.all() 
&lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: 小明-16&amp;gt;, &amp;lt;Students: XiaoHong-16&amp;gt;, &amp;lt;Students: 王五-24&amp;gt;, &amp;lt;Students: 赵柳-22&amp;gt;, &amp;lt;Students: 张三-23&amp;gt;, &amp;lt;Students: 李思-17&amp;gt;, &amp;lt;Students: 赵柳-19&amp;gt;, &amp;lt;Students: 孙奇-29&amp;gt;, &amp;lt;Students: Ats: abc-6&amp;gt;, &amp;lt;Students: 刘一-19&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;filterkwargs过滤根据给定的条件获取一个过滤后的queryset多个条件的queryset语句是and连接&quot; data-source-line=&quot;97&quot;&gt;&lt;span&gt;filter(**kwargs)&lt;/span&gt;：过滤，根据给定的条件，获取一个过滤后的QuerySet，多个条件的QuerySet语句是and连接&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;res = Students.objects.filter(sex=1,age=16&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE (`teacher_students`.`age` &lt;/span&gt;= 16 AND `teacher_students`.`sex` = 1)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;excludekwargs-排除和filter使用方法一致作用相反根据给定的条件获取一个排除后的queryset可以多个条件&quot; data-source-line=&quot;105&quot;&gt;&lt;span&gt;exclude(**kwargs)&lt;/span&gt; 排除，和filter使用方法一致，作用相反，根据给定的条件，获取一个排除后的QuerySet，可以多个条件&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;res = Students.objects.exclude(sex=1&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE NOT (`teacher_students`.`sex` &lt;/span&gt;= 1)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;q或者多条件查询相当于mysql中的or这个方法需要单独导入&quot; data-source-line=&quot;113&quot;&gt;Q：或者，多条件查询，相当于MySQL中的or，这个方法需要单独导入&lt;/h4&gt;
&lt;p data-source-line=&quot;114&quot;&gt;需要导包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db.models &lt;span&gt;import&lt;/span&gt; Q
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;118&quot;&gt;语法: Q(*args) |&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res =Students.objects.filter(Q(age=0)|Q(age=1&lt;span&gt;))
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE (`teacher_students`.`age` &lt;/span&gt;= 0 OR `teacher_students`.`age` = 1)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;valuesfields字段查询-可以多个查询返回一个queryset返回一个字典列表而不是数据对象&quot; data-source-line=&quot;124&quot;&gt;&lt;span&gt;values(*fields)&lt;/span&gt;，字段查询。可以多个查询，返回一个QuerySet，返回一个字典列表，而不是数据对象&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.values(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`name` FROM `teacher_students`

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;res
&lt;/span&gt;&amp;lt;QuerySet [{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;小明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;XiaoHong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;赵柳&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李思&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;赵柳&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;孙奇&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, {&amp;gt;

&amp;gt;&amp;gt;&amp;gt;res[0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;可以多条查询 res = Students.objects.values('name','age') &lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;可以增加过滤 res = Students.objects.values('name').filter(age=0) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;onlyfield-返回queryset是一个对象列表不是字典而且only一定包含主键字段-此方法用的更多些&quot; data-source-line=&quot;140&quot;&gt;&lt;span&gt;only(*field)&lt;/span&gt; 返回QuerySet,是一个对象列表，不是字典，而且only一定包含主键字段。此方法用的更多些。&lt;/h4&gt;
&lt;p data-source-line=&quot;141&quot;&gt;因为是一个对象列表，所以可以有后期的其他操作，我们可以指定很少的字段后再后期继续获取，效率较高，还可以动态的拿到其他数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.only(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name` FROM `teacher_students`
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;会默认拿到id主键&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;res[0].c_time
datetime.datetime(&lt;/span&gt;2019, 2, 26, 8, 4, 57, 955584, tzinfo=&amp;lt;UTC&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;没有获取这个字段也一样可以拿到，这就是only的作用&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;其他写法：&lt;/span&gt;
res = Students.objects.only(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).filter(age=16)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;deferfields-返回一个queryset和only一样用法作用相反&quot; data-source-line=&quot;156&quot;&gt;&lt;span&gt;defer(*fields)&lt;/span&gt; 返回一个QuerySet，和only一样用法，作用相反&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;res = Students.objects.defer(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone` FROM `teacher_students`

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;res
 &lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: 小明-16&amp;gt;, &amp;lt;Students: XiaoHong-16&amp;gt;, &amp;lt;Students: 王五-24&amp;gt;, &amp;lt;Students: 赵柳-22&amp;gt;, &amp;lt;Students: 张三-23&amp;gt;, &amp;lt;Students: 李思-17&amp;gt;, &amp;lt;Students: 赵柳-19&amp;gt;, &amp;lt;Students: 孙奇-29&amp;gt;, &amp;lt;Students: nts: abc-6&amp;gt;, &amp;lt;Students: 刘一-19&amp;gt;]&amp;gt;
 
 &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;res[0].c_time
 datetime.datetime(&lt;/span&gt;2019, 2, 26, 8, 4, 57, 955584, tzinfo=&amp;lt;UTC&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;排序&quot; data-source-line=&quot;169&quot;&gt;排序&lt;/h2&gt;
&lt;h4 id=&quot;order_byfields根据给定的字段来排序默认是正序在字段名前加上-会变成反序可以多字段排序&quot; data-source-line=&quot;171&quot;&gt;&lt;span&gt;order_by(*fields)&lt;/span&gt;：根据给定的字段来排序,默认是正序，在字段名前加上-，会变成反序，可以多字段排序。&lt;/h4&gt;
&lt;p data-source-line=&quot;172&quot;&gt;正序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;res = Students.objects.order_by(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` ORDER BY `teacher_students`.`c_time` ASC

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;可以配合only使用:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;res = Students.objects.order_by('c_time').only('name')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;182&quot;&gt;反序,在需要的条件前面加上'-'&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;res = Students.objects.order_by(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-c_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` ORDER BY `teacher_students`.`c_time` DESC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;lower按照小写进行排序创建复杂查询的时候用&quot; data-source-line=&quot;189&quot;&gt;&lt;span&gt;Lower&lt;/span&gt;：按照小写进行排序,创建复杂查询的时候用。&lt;/h4&gt;
&lt;p data-source-line=&quot;190&quot;&gt;Lower这个方法需要导包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db.models.functions &lt;span&gt;import&lt;/span&gt; Lower
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;194&quot;&gt;正序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.order_by(Lower(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` ORDER BY LOWER(`teacher_students`.`name`) ASC
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;LOWER是数据库本身的功能，它把字段的内容(`teacher_students`.`name`) 变成大写排序。&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res
 &lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: ABC-5&amp;gt;, &amp;lt;Students: abc-6&amp;gt;, &amp;lt;Students: XiaoHong-16&amp;gt;, &amp;lt;Students: 刘一-19&amp;gt;, &amp;lt;Students: 孙奇-29&amp;gt;, &amp;lt;Students: 小明-16&amp;gt;, &amp;lt;Students: 张三-23&amp;gt;, &amp;lt;Students: 李思-17&amp;gt;, &amp;lt;Students: 王五ents: 赵柳-22&amp;gt;, &amp;lt;Students: 赵柳-19&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;205&quot;&gt;倒序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.order_by(Lower(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).desc())

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` ORDER BY LOWER(`teacher_students`.`name`) DESC

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res
 &lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: 赵柳-22&amp;gt;, &amp;lt;Students: 赵柳-19&amp;gt;, &amp;lt;Students: 王五-24&amp;gt;, &amp;lt;Students: 李思-17&amp;gt;, &amp;lt;Students: 张三-23&amp;gt;, &amp;lt;Students: 小明-16&amp;gt;, &amp;lt;Students: 孙奇-29&amp;gt;, &amp;lt;Students: 刘一-19&amp;gt;, &amp;lt;Students: Xiaents: ABC-5&amp;gt;, &amp;lt;Students: abc-6&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;切片&quot; data-source-line=&quot;215&quot;&gt;切片&lt;/h2&gt;
&lt;h4 id=&quot;等同于mysql里面的limitoffset数量量和偏移量和python的列表切片用法相似不支持负索引数量量大时不用步长&quot; data-source-line=&quot;216&quot;&gt;等同于MySQL里面的LIMIT,OFFSET,数量量和偏移量，和python的列表切片用法相似，不支持负索引，数量量大时不用步长&lt;/h4&gt;
&lt;h4 id=&quot;切片过后不再支持附加的过滤条件与排序条件需要放在切片之前&quot; data-source-line=&quot;217&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;***切片过后，不再支持附加的过滤条件与排序，条件需要放在切片之前。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;res = Students.objects.all()[:5&lt;span&gt;]

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students`  LIMIT &lt;/span&gt;5

&amp;gt;&amp;gt;&amp;gt;res = Students.objects.all()[2:6&lt;span&gt;]

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;(res.query) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;打印出他的sql语句&lt;/span&gt;
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students`  LIMIT 4 OFFSET 2


&amp;gt;&amp;gt;&amp;gt;res = Students.objects.all()[::2&lt;span&gt;]

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;res
[&lt;/span&gt;&amp;lt;Students: 小明-16&amp;gt;, &amp;lt;Students: 赵柳-22&amp;gt;, &amp;lt;Students: 赵柳-19&amp;gt;, &amp;lt;Students: abc-6&amp;gt;&lt;span&gt;]
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;得到的直接是一个list列表，不是一个对象，不能再有后续的操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;h2 id=&quot;常用查询条件-一般使用双下划线-__&quot; data-source-line=&quot;239&quot;&gt;常用查询条件 ，一般使用双下划线 '&lt;span&gt;__&lt;/span&gt;'&lt;/h2&gt;
&lt;h6 id=&quot;支持filter-exclude-get-link子句&quot; data-source-line=&quot;240&quot;&gt;&lt;span&gt;支持 filter、exclude、get……, LINK子句&lt;/span&gt;&lt;/h6&gt;
&lt;h4 id=&quot;exact精准匹配对象列表&quot; data-source-line=&quot;241&quot;&gt;&lt;span&gt;exact&lt;/span&gt;：精准匹配，对象列表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(id__exact=4&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;__exact也可以不写，默认的不用写&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`id` &lt;/span&gt;= 4
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;iexact不区分大小写对象列表&quot; data-source-line=&quot;249&quot;&gt;&lt;span&gt;iexact&lt;/span&gt;:不区分大小写，对象列表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__iexact=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` LIKE abc

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res
&lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: ABC-5&amp;gt;, &amp;lt;Students: abc-6&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;contains-包含&quot; data-source-line=&quot;259&quot;&gt;&lt;span&gt;contains&lt;/span&gt; 包含&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__contains=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` LIKE BINARY &lt;/span&gt;%abc%

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res
 &lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: abc-6&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;icontains-包含不区分大小写&quot; data-source-line=&quot;269&quot;&gt;&lt;span&gt;icontains&lt;/span&gt; 包含,不区分大小写&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__icontains=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` LIKE &lt;/span&gt;%abc%
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;in在里面找&quot; data-source-line=&quot;278&quot;&gt;&lt;span&gt;in&lt;/span&gt;：在……里面找&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__in=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` IN (abc, ABC, 小明)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;range范围在一个范围内找&quot; data-source-line=&quot;286&quot;&gt;&lt;span&gt;range：&lt;/span&gt;范围，在一个范围内找。&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(age__range=(14,20&lt;span&gt;))

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`age` BETWEEN &lt;/span&gt;14 AND 20

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res
 &lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: 小明-16&amp;gt;, &amp;lt;Students: XiaoHong-16&amp;gt;, &amp;lt;Students: 李思-17&amp;gt;, &amp;lt;Students: 赵柳-19&amp;gt;, &amp;lt;Students: 刘一-19&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;ge大于gee大于等于&quot; data-source-line=&quot;297&quot;&gt;&lt;span&gt;gt&lt;/span&gt;:大于，&lt;span&gt;gte&lt;/span&gt;:大于等于&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;大于 方法&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(age__gt=18&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`age` &lt;/span&gt;&amp;gt; 18


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;大于等于 方法&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(age__gte=18&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`age` &lt;/span&gt;&amp;gt;= 18
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;lt小于lte小于等于&quot; data-source-line=&quot;314&quot;&gt;&lt;span&gt;lt&lt;/span&gt;:小于,&lt;span&gt;lte&lt;/span&gt;：小于等于&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;小于方法&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(age__lt=18&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`age` &lt;/span&gt;&amp;lt; 18


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;小于等于 方法&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(age__lte=18&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`age` &lt;/span&gt;&amp;lt;= 18
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;startswith-以开头大小写敏感区分大小写&quot; data-source-line=&quot;331&quot;&gt;&lt;span&gt;startswith&lt;/span&gt; :以……开头,大小写敏感，区分大小写&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__startswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` LIKE BINARY 小&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;istartswith-以开头不区分大小写&quot; data-source-line=&quot;338&quot;&gt;&lt;span&gt;istartswith&lt;/span&gt; :以……开头,不区分大小写&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__istartswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` LIKE 小&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;endswith-以结尾区分大小写&quot; data-source-line=&quot;345&quot;&gt;&lt;span&gt;endswith&lt;/span&gt; :以……结尾,区分大小写&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__endswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` LIKE BINARY &lt;/span&gt;%小
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;iendswith-以结尾不区分大小写&quot; data-source-line=&quot;353&quot;&gt;&lt;span&gt;iendswith&lt;/span&gt; :以……结尾,不区分大小写&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__iendswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` LIKE &lt;/span&gt;%小
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;isnull返回truefalsebool值对应mysql中的is-null-is-not-null&quot; data-source-line=&quot;362&quot;&gt;&lt;span&gt;isnull&lt;/span&gt;：返回True，False，BOOL值，对应MySQL中的IS NULL、IS NOT NULL&lt;/h4&gt;
&lt;h5 id=&quot;truefalse-做-if-nullif-not-null-查&quot; data-source-line=&quot;363&quot;&gt;True/False; 做 IF NULL/IF NOT NULL 查&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__isnull=&lt;span&gt;True)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` IS NULL

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(name__isnull=&lt;span&gt;False)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time` FROM `teacher_students` WHERE `teacher_students`.`name` IS NOT NULL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;快速查找方法表&quot; data-source-line=&quot;376&quot;&gt;快速查找方法表&lt;/h4&gt;
&lt;table data-source-line=&quot;377&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;24&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;exact&lt;/td&gt;
&lt;td&gt;精确匹配: polls.get_object(id__exact=14).&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;iexact&lt;/td&gt;
&lt;td&gt;忽略大小写的精确匹配: polls.objects.filter(slug__iexact=&quot;foo&quot;) 匹配 foo, FOO, fOo, 等等.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;contains&lt;/td&gt;
&lt;td&gt;大小写敏感的内容包含测试: polls.objects.filter(question__contains=&quot;spam&quot;) 返回question 中包含 &quot;spam&quot; 的所有民意测验.(仅PostgreSQL 和 MySQL支持. SQLite 的LIKE 语句不支持大小写敏感特性. 对Sqlite 来说, contains 等于 icontains.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;icontains&lt;/td&gt;
&lt;td&gt;大小写不敏感的内容包含测试:&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;gt&lt;/td&gt;
&lt;td&gt;大于: polls.objects.filter(id__gt=4).&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gte&lt;/td&gt;
&lt;td&gt;大于等于.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lt&lt;/td&gt;
&lt;td&gt;小于.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lte&lt;/td&gt;
&lt;td&gt;小于等于.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ne&lt;/td&gt;
&lt;td&gt;不等于.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;位于给定列表中: polls.objects.filter(id__in=[1, 3, 4]) 返回一个 polls 列表(ID 值分别是 1或3或4).&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;startswith&lt;/td&gt;
&lt;td&gt;大小写敏感的 starts-with: polls.objects.filter(question__startswith=&quot;Would&quot;). (仅PostgreSQL 和MySQL支持. SQLite 的LIKE 语句不支持大小写敏感特性. 对Sqlite 来说,&lt;code&gt;startswith&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 等于 istartswith)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;endswith&lt;/td&gt;
&lt;td&gt;大小写敏感的 ends-with. (仅PostgreSQL 和 MySQL)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;istartswith&lt;/td&gt;
&lt;td&gt;大小写不敏感的 starts-with.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;iendswith&lt;/td&gt;
&lt;td&gt;大小写不敏感的 ends-with.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;范围测试: polls.objects.filter(pub_date__range=(start_date, end_date)) 返回 pub_date 位于 start_date 和 end_date (包括)之间的所有民意测验&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;year&lt;/td&gt;
&lt;td&gt;对 date/datetime 字段, 进行精确的 年 匹配: polls.get_count(pub_date__year=2005).&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;month&lt;/td&gt;
&lt;td&gt;对 date/datetime 字段, 进行精确的 月 匹配:&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;day&lt;/td&gt;
&lt;td&gt;对 date/datetime 字段, 进行精确的 日 匹配:&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;isnull&lt;/td&gt;
&lt;td&gt;True/False; 做 IF NULL/IF NOT NULL 查询: polls.objects.filter(expire_date__isnull=True).&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;&lt;h2 id=&quot;聚合&quot; data-source-line=&quot;401&quot;&gt;聚合&lt;/h2&gt;
&lt;p data-source-line=&quot;402&quot;&gt;需要导包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db.models &lt;span&gt;import&lt;/span&gt; Count, Avg, Max, Min, Sum
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;406&quot;&gt;通过管理器的aggregate方法&lt;/p&gt;
&lt;h4 id=&quot;count-统计与count首字母小写&quot; data-source-line=&quot;408&quot;&gt;&lt;strong&gt;&lt;span&gt;Count&lt;/span&gt;&lt;/strong&gt; 统计与&lt;span&gt;count&lt;/span&gt;（首字母小写）&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;小写count
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Students.objects.filter(name__startswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).count()
&lt;/span&gt;1&lt;span&gt;

大写Count
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Students.objects.filter(sex=1).aggregate(age_count=Count(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;avg-平均数&quot; data-source-line=&quot;420&quot;&gt;&lt;span&gt;Avg&lt;/span&gt; 平均数&lt;/h4&gt;
&lt;p data-source-line=&quot;421&quot;&gt;返回一个字典，需要我们给一个key，然后生成一个字典。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; Students.objects.filter(sex=1).aggregate(age_avg=Avg(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age_avg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 17.4286}
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;max-最大&quot; data-source-line=&quot;427&quot;&gt;&lt;span&gt;Max&lt;/span&gt; 最大&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; Students.objects.filter(sex=1).aggregate(age_max=Max(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age_max&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 29}
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;min-最小&quot; data-source-line=&quot;433&quot;&gt;&lt;span&gt;Min&lt;/span&gt; 最小&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; Students.objects.filter(sex=1).aggregate(age_min=Min(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
 {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age_min&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 5}
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;求和&quot; data-source-line=&quot;438&quot;&gt;&lt;span&gt;Sum&lt;/span&gt; 求和&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; Students.objects.filter(sex=1).aggregate(age_sum=Sum(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age_sum&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 122}
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;h2 id=&quot;分组&quot; data-source-line=&quot;445&quot;&gt;分组&lt;/h2&gt;
&lt;h5 id=&quot;需要配合聚合-values-count一起使用&quot; data-source-line=&quot;446&quot;&gt;需要配合聚合、values、Count一起使用&lt;/h5&gt;
&lt;p data-source-line=&quot;447&quot;&gt;通过找到字段数据后，然后对这个字段的信息进行聚合后，再分组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;拿到字段为sex的，然后对sex这个字段来统计聚合后，再分组
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Students.objects.values(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).annotate(num=Count(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
 &lt;/span&gt;&amp;lt;QuerySet [{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 4}]&amp;gt;
 
&amp;gt;&amp;gt;&amp;gt; Students.objects.values(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).annotate(num=Count(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
 &lt;/span&gt;&amp;lt;QuerySet [{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 16, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 2}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 24, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 22, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 23, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 17, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 19, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 2}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 29, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 5, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1}, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 6, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1}]&amp;gt;
 
 
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.values(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).annotate(num=Count(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`age`, COUNT(`teacher_students`.`age`) AS `num` FROM `teacher_students` GROUP BY `teacher_students`.`age` ORDER BY NULL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;p data-source-line=&quot;467&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1605939/201903/1605939-20190301194301202-727639179.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;onetoone一对一的表关系onetoonefield方法&quot; data-source-line=&quot;3&quot;&gt;&lt;span&gt;OneToOne&lt;/span&gt;：一对一的表关系，OneToOneField方法&lt;/h3&gt;
&lt;p data-source-line=&quot;4&quot;&gt;使用主键关联主键。模型类操作。&lt;/p&gt;
&lt;pre data-source-line=&quot;6&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;zh-hans&quot;&gt;例子如上面内容所写&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    学生主表（一）
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Students(models.Model):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         name = models.CharField(max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         age = models.SmallIntegerField(default=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         sex = models.SmallIntegerField(default=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         qq = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         phone = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         c_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         e_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;__str__代码,表示输出格式化，是为了在ipython调试中方便查看数据，对数据库不造成任何影响，不用做数据库迁移&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s-%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (self.name, self.age)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    学生详情表（一）
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    Class StudentsDetail(models.Model):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         num = models.CharField(max_length=20, default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         college = models.CharField(max_length=20, default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         student = models.OneToOneField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         
&lt;span&gt;23&lt;/span&gt;         
&lt;span&gt;24&lt;/span&gt;         一对一的关联操作解析：&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OneToOneField&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         student = models.OneToOneField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         第一个参数是需要关联的表，需要字符串操作，第二个参数&lt;span&gt;'&lt;/span&gt;&lt;span&gt;on_delete=models.CASCADE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;表示级联操作，如果主表有信息删除则此表信息也会跟着删除。
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;onetomany一对多的表关系foreignkey方法&quot; data-source-line=&quot;38&quot;&gt;&lt;span&gt;OneToMany&lt;/span&gt;：一对多的表关系，ForeignKey方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models

    学生主表(多)
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Students(models.Model):
        name &lt;/span&gt;= models.CharField(max_length=20&lt;span&gt;)
        age &lt;/span&gt;= models.SmallIntegerField(default=&lt;span&gt;0)
        sex &lt;/span&gt;= models.SmallIntegerField(default=1&lt;span&gt;)
        qq &lt;/span&gt;= models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
        phone &lt;/span&gt;= models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
        c_time &lt;/span&gt;= models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)
        e_time &lt;/span&gt;= models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now=&lt;span&gt;True)
        grade &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Grade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=models.SET_NULL, null=&lt;span&gt;True)
        
        
        多对一关联解析：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ForeignKey&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;：设置外键关联Grade表
        grade &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Grade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=models.SET_NULL, null=&lt;span&gt;True)
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;on_delete=models.SET_NULL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;：(必须带一个null=&lt;span&gt;True)代表如果关联的表对应数据被删除，则显示NULL，不会被级联删除(如果班级被删除，学生则还在，所以不能级联)
    
    班级表（一）
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Grade(models.Model):
        num &lt;/span&gt;= models.CharField(max_length=20&lt;span&gt;)
        name &lt;/span&gt;= models.CharField(max_length=20)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;manytomany多对多的表关系manytomanyfield&quot; data-source-line=&quot;64&quot;&gt;&lt;span&gt;ManyToMany&lt;/span&gt;：多对多的表关系，ManyToManyField&lt;/h3&gt;
&lt;h5 id=&quot;只有一个字段的多对多简单的多对多&quot; data-source-line=&quot;66&quot;&gt;只有一个字段的多对多：（简单的多对多）&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    学生主表(多)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Students(models.Model):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         name = models.CharField(max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         age = models.SmallIntegerField(default=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         sex = models.SmallIntegerField(default=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         qq = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         phone = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         c_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         e_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         grade = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Grade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=models.SET_NULL, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt;         
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    课程表(多)    
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Course(models.Model):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         name = models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         students = models.ManyToManyField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当你的另外一张表里面仅仅只有两个字段的时候（id+外键），Django会自动创建中间表，不需要我们自己来创建。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;多张表的多对多复杂通过manytomany多对多表和foreignkey外键来实现&quot; data-source-line=&quot;89&quot;&gt;多张表的多对多，复杂，通过ManyToMany(多对多表)和ForeignKey(外键)来实现。&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    学生主表(多)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Students(models.Model):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         name = models.CharField(max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         age = models.SmallIntegerField(default=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         sex = models.SmallIntegerField(default=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         qq = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         phone = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         c_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         e_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         grade = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Grade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=models.SET_NULL, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt;         
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    课程表(多)    
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Course(models.Model):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         name = models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         students = models.ManyToManyField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,through=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Enroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    报名表(多)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Enrloo(models,Model):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         student = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         student = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         pay = models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;缴费金额&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         c_time = models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;报名时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=True)
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;117&quot;&gt;使用报名表的两个外键把学生表和报名表关联起来，来达到多对多的方法，但是想要学生表直接访问到课程表，就需要在ManyToMany的参数中设置好两张表的关联。('多对多的表',through=来源的表)&lt;/p&gt;
&lt;p data-source-line=&quot;117&quot;&gt; &lt;/p&gt;
&lt;p data-source-line=&quot;117&quot;&gt; &lt;/p&gt;
&lt;p data-source-line=&quot;117&quot;&gt;创建关系的5张表汇总代码如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;↓↓↓最后的全部代码参考↓↓↓
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your models here.&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 学生表&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Students(models.Model):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     name = models.CharField(max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     age = models.SmallIntegerField(default=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     sex = models.SmallIntegerField(default=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     qq = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     phone = models.CharField(max_length=20, unique=True, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     c_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     e_time = models.DateTimeField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;修改时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     grade = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Grade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=models.SET_NULL, null=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s-%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (self.name, self.age)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 学生详情表&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StudentsDetail(models.Model):
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     num = models.CharField(max_length=20, default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     college = models.CharField(max_length=20, default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建一对一需要创建的第一个参数是需要关联的表，第二个参数是主表有信息删除则此表信息也会跟着删除。&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     student = models.OneToOneField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 年级表&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Grade(models.Model):
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     num = models.CharField(max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     name = models.CharField(max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 课程表&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Course(models.Model):
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     name = models.CharField(max_length=20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     student = models.ManyToManyField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, through=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Enroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 报名表&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Enroll(models.Model):
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     student = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     course = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Course&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     pay = models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;缴费金额&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     c_time = models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;报名时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=True)
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;输出的结果通过工具查看他的导向图&quot; data-source-line=&quot;172&quot;&gt;输出的结果通过工具查看他的导向图：&lt;/h5&gt;
&lt;p data-source-line=&quot;173&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1605939/201903/1605939-20190301194920928-423206258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p data-source-line=&quot;175&quot;&gt;sqlmigrate 从迁移获取sql语句：获取创建表的sql语句&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; python manage.py sqlmigrate teacher 0001&lt;span&gt;

解析： teacher:appname        &lt;/span&gt;0001：Django的迁移执行文件
&lt;/pre&gt;&lt;/div&gt;

&lt;table data-source-line=&quot;181&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;on_delete=models.CASCADE&lt;/td&gt;
&lt;td&gt;级联关系，级联的表对应的数据删除，此表的对应的数据就删除，保证同步删除。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;on_delete=models.SET_NULL (必须带一个null=True)&lt;/td&gt;
&lt;td&gt;代表如果关联的表对应数据被删除，则显示NULL，不会被级联删除(如果班级被删除，学生则还在，所以不能级联)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;
&lt;h2 id=&quot;one-to-many一对多and多对一&quot; data-source-line=&quot;190&quot;&gt;One-To-Many：一对多and多对一&lt;/h2&gt;
&lt;h3 id=&quot;正向的增删改查&quot; data-source-line=&quot;191&quot;&gt;正向的增删改查：&lt;/h3&gt;
&lt;p data-source-line=&quot;192&quot;&gt;一个模型如果定义了一个外键字段，通过这个模型的操作外键就是正向。&lt;/p&gt;
&lt;p data-source-line=&quot;194&quot;&gt;现在我们开始操作数据库：&lt;/p&gt;
&lt;p data-source-line=&quot;196&quot;&gt;首先给年级表teacher_grade表增加几条数据&lt;/p&gt;
&lt;table data-source-line=&quot;197&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;num&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;33期&lt;/td&gt;
&lt;td&gt;django框架&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;34期&lt;/td&gt;
&lt;td&gt;爬虫&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 data-source-line=&quot;202&quot;&gt;&lt;span&gt;以下代码为清除数据后的新表，代码是和前面的有关联的，变量和前面的有关。&lt;/span&gt;&lt;/h4&gt;
&lt;h4 id=&quot;赋值增加通过外键字段得到关联表的数据&quot; data-source-line=&quot;202&quot;&gt;赋值增加：通过外键字段得到关联表的数据&lt;/h4&gt;
&lt;p data-source-line=&quot;203&quot;&gt;第一种方法：通过赋值方式添加数据，使用获取到的关联表的数据，通过本表的外键接受数据，然后保存即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 通过获取到的数据，赋值给当前表的外键字段，然后保存。
 
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 先拿到Grade的一条数据&lt;/span&gt;
 &amp;gt;&amp;gt;&amp;gt; g1 =&lt;span&gt; Grade.objects.first()
 
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取一个Students的空对象&lt;/span&gt;
 &amp;gt;&amp;gt;&amp;gt; s =&lt;span&gt; Students()
 
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 给对象添加一个name字段的数据&lt;/span&gt;
 &amp;gt;&amp;gt;&amp;gt; s.name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
 
 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把g1的数据复制给Students的grade的字段，然后得到数据。&lt;/span&gt;
 &amp;gt;&amp;gt;&amp;gt; s.grade =&lt;span&gt; g1
 
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存&lt;/span&gt;
 &amp;gt;&amp;gt;&amp;gt; s.save()
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;222&quot;&gt;第二种方法：通过外键字段得到关联表的数据，用对象的外键字段名接受关联表的数据(id获取)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; s2 = Students(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; g2 =&lt;span&gt; Grade.objects.last()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用对象的外键字段名接受关联表的数据，需要是关联表的主键id&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s2.grade_id =&lt;span&gt; g2.id

&lt;/span&gt;&amp;gt;&amp;gt; sa.save()
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;更新和修改&quot; data-source-line=&quot;233&quot;&gt;更新和修改&lt;/h4&gt;
&lt;p data-source-line=&quot;234&quot;&gt;也可以通过赋值来操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把对象的外键grade字段拿来接受g2的对象数据，以达到修改&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s.grade =&lt;span&gt; g2

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s.save()
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;删除外键数据&quot; data-source-line=&quot;241&quot;&gt;删除外键数据&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过赋值None来操作&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s.grade =&lt;span&gt; None

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s.save()
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;查询&quot; data-source-line=&quot;250&quot;&gt;查询&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过外键去拿到关联的数据&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; s2.grade.name
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;爬虫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;反向的增删改查&quot; data-source-line=&quot;257&quot;&gt;反向的增删改查&lt;/h3&gt;
&lt;p data-source-line=&quot;258&quot;&gt;一个模型被另外一个模型的外键关联，通过这个模型对关联他的这个模型操作就是反向。&lt;/p&gt;
&lt;h5 id=&quot;通过被关联表名的小写加上set来操作-管理器范式小写_set&quot; data-source-line=&quot;259&quot;&gt;通过被关联表名的小写加上set来操作。管理器范式(小写_set)&lt;/h5&gt;
&lt;h4 id=&quot;增加&quot; data-source-line=&quot;261&quot;&gt;增加&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在创建的同时，也直接把g2的对象数据一起增加了，此方法立刻执行&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; g2.students_set.create(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
 &lt;/span&gt;&amp;lt;Students: 王五-0&amp;gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;把已有的对象通过add方法增加关联的数据，此方法立刻执行，如果本身自带了数据，则自动修改为本对象的数据&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; g2.students_set.add(s)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;查询-2&quot; data-source-line=&quot;270&quot;&gt;查询&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; g2.students_set.all()
 &lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: 张三-0&amp;gt;, &amp;lt;Students: 李四-0&amp;gt;, &amp;lt;Students: 王五-0&amp;gt;]&amp;gt;
 
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查询的所有方法都可以使用，这里只做一个例子&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;删除&quot; data-source-line=&quot;277&quot;&gt;删除&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;删除单条&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; g2.students_set.remove(s, s2)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;删除所有&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; g2.students_set.clear()
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;set方法接受对象列表此方法是先执行clear后再执行set添加&quot; data-source-line=&quot;285&quot;&gt;&lt;span&gt;set方法&lt;/span&gt;,接受对象列表，此方法是先执行&lt;span&gt;clear&lt;/span&gt;后，再执行&lt;span&gt;set&lt;/span&gt;添加。&lt;/h4&gt;
&lt;p data-source-line=&quot;286&quot;&gt;把本来有的对象删除后，再添加新的对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取对象后，添加到本对象的表中&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; g3.students_set.set([s, s2])

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; g3.students_set.all()
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;通过本表的外键查询关联表的关于本表的数据&quot; data-source-line=&quot;293&quot;&gt;通过本表的外键查询关联表的关于本表的数据&lt;/h5&gt;
&lt;p data-source-line=&quot;294&quot;&gt;通过学生表查询年级表的所有学生，用外键字段加上__和关联表的字段名, 字段查询，不能全部查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用本表的外键查询('外键'+'__'+'关联表字段名')&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(grade__name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;爬虫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res
&lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: 张三-0&amp;gt;, &amp;lt;Students: 李四-0&amp;gt;, &amp;lt;Students: 赵柳-0&amp;gt;]&amp;gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time`, `teacher_students`.`e_time`, `teacher_students`.`grade_id` FROM `teacher_students` INNER JOIN `teacher_grade` ON (`teacher_students`.`grade_id` &lt;/span&gt;= `teacher_grade`.`id`) WHERE `teacher_grade`.`name` = 爬虫
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;h2 id=&quot;many-to-many多对多&quot; data-source-line=&quot;308&quot;&gt;Many-To-Many：多对多&lt;/h2&gt;
&lt;p data-source-line=&quot;309&quot;&gt;多对多的两端都可以获得自动API去访问，访问的原理和一对多的反向有点类似，但是有一个不同的地方是多对多的模型使用的是本字段的属性名，而反向的是使用原始模型的小写加上set。下面我们来看怎么操作。&lt;/p&gt;
&lt;h5 id=&quot;指定了中间表后add-remove-set都不能用必须用中间表&quot; data-source-line=&quot;311&quot;&gt;指定了中间表后，add、remove、set都不能用，必须用中间表。&lt;/h5&gt;
&lt;p data-source-line=&quot;312&quot;&gt;首先增加几个课程数据(Course)来实现例子：&lt;/p&gt;
&lt;table data-source-line=&quot;313&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;pyton全栈&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Java全栈&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-source-line=&quot;319&quot;&gt;查看一下当前Students表数据&lt;/p&gt;
&lt;table data-source-line=&quot;320&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;sex&lt;/th&gt;
&lt;th&gt;qq&lt;/th&gt;
&lt;th&gt;phone&lt;/th&gt;
&lt;th&gt;c_time&lt;/th&gt;
&lt;th&gt;e_time&lt;/th&gt;
&lt;th&gt;grade_id&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;2019-02-28 11:09:52.462364&lt;/td&gt;
&lt;td&gt;2019-02-28 11:34:21.636189&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;2019-02-28 11:18:47.456735&lt;/td&gt;
&lt;td&gt;2019-02-28 11:18:47.456806&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;2019-02-28 11:52:15.526063&lt;/td&gt;
&lt;td&gt;2019-02-28 11:52:15.526134&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-source-line=&quot;326&quot;&gt;&lt;strong&gt;add、remove、set&lt;/strong&gt;都是没有指定中间表(through='Enroll')的时候才可以使用，不能使用用在对多的字段，当他指定这个的时候，就不能使用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把创建出来的Course对象获取到变量中得到c1, c2, c3&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; c1,c2,c3 =&lt;span&gt; Course.objects.all() 

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把创建出来的Students对象获取到变量中得到s1, s2, s3&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s1,s2,s3 = Students.objects.all()
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;增加-2&quot; data-source-line=&quot;335&quot;&gt;增加&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取一个空对象&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; e =&lt;span&gt; Enroll()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把c1的对象赋值给Enroll的这个对象&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; e.course =&lt;span&gt; c1

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把s1的对象赋值给Enroll的这个对象&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; e.student =&lt;span&gt; s1

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; e.save()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;用两个外键字段名接受 关联表对象的数据。然后保存，可以得到一条外键关联的数据。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;350&quot;&gt;结果得到的Enroll表数据为：&lt;/p&gt;
&lt;table data-source-line=&quot;351&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;pay&lt;/th&gt;
&lt;th&gt;c_time&lt;/th&gt;
&lt;th&gt;course_id&lt;/th&gt;
&lt;th&gt;student_id&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2019-03-01 04:18:12.193959&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;用外键字段名id接受关联的对象id&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; e.course_id =&lt;span&gt; c2.id

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; e.student_id =&lt;span&gt; s2.id

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; e.save()
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;363&quot;&gt;结果到的Enroll表为：&lt;/p&gt;
&lt;table data-source-line=&quot;364&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;pay&lt;/th&gt;
&lt;th&gt;c_time&lt;/th&gt;
&lt;th&gt;course_id&lt;/th&gt;
&lt;th&gt;student_id&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2019-03-01 04:18:12.193959&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2019-03-01 04:24:53.105775&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-source-line=&quot;369&quot;&gt;create方法创建，直接操作数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用creat方法可以一起指定外键，然后创建&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Enroll.objects.create(sudent=s1,course=c3)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;表中manytomany方法的应用&quot; data-source-line=&quot;374&quot;&gt;表中ManyToMany方法的应用。&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建表的时候的代码解析：&lt;/span&gt;
student = models.ManyToManyField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Students&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, through=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Enroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;Course表中的的字段，并不会在数据库中创建，而是django中需要配置的管理器。他可以很方便的在查询中起到作用。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;379&quot;&gt;我们来应用这个管理器，他可以很方便的查询到我们需要的数据，不是一个字段,我们可以在不使用第三张表(Enroll表)介入的时候，让Students和Course两个相互访问。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在course表中，使用的ManyToMany是一个管理器&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; c1.student
&lt;/span&gt;&amp;lt;django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.&amp;lt;locals&amp;gt;.ManyRelatedManager at 0xaff763ec&amp;gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查找c1下面的所有学生&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; c1.student.all()
&lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Students: 张三-0&amp;gt;]&amp;gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查找学生报名的所有课程&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; s1.course_set.all()
 &lt;/span&gt;&amp;lt;QuerySet [&amp;lt;Course: pyton全栈&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;one-to-one-一对一&quot; data-source-line=&quot;393&quot;&gt;One-To-One 一对一&lt;/h2&gt;
&lt;h5 id=&quot;增加-3&quot; data-source-line=&quot;394&quot;&gt;增加&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; sd = StudentsDetail.objects.create(num=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20190301001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, college=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;家里蹲&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, student=&lt;span&gt;s1)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sd
&lt;/span&gt;&amp;lt;StudentsDetail: 家里蹲-20190301001&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;查询-3&quot; data-source-line=&quot;401&quot;&gt;查询&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sd.student
&lt;/span&gt;&amp;lt;Students: 张三-0&amp;gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sd.student.name
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;409&quot;&gt;在一对一的关系中，可以通过关联表的模型名的小写（是对象，不是管理器），来拿到需要的数据,没有_set&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; s1.studentsdetail
&lt;/span&gt;&amp;lt;StudentsDetail: 家里蹲-20190301001&amp;gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; s1.studentsdetail.num
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20190301001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;跨表查询&quot; data-source-line=&quot;417&quot;&gt;跨表查询&lt;/h2&gt;
&lt;p data-source-line=&quot;418&quot;&gt;跨模型的相关字段的字段名，并且用双下划綫'__'去分割，直到达到想要获取的字段位置。&lt;/p&gt;
&lt;h5 id=&quot;例子&quot; data-source-line=&quot;420&quot;&gt;&lt;span&gt;通过例子来查看如何跨表查询&lt;/span&gt;&lt;/h5&gt;
&lt;p data-source-line=&quot;421&quot;&gt;查询男生都报名了什么课程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用相关联的字段名+'__'关联表的字段名&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; res = Course.objects.filter(student__sex=1&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_course`.`id`, `teacher_course`.`name` FROM `teacher_course` INNER JOIN `teacher_enroll` ON (`teacher_course`.`id` &lt;/span&gt;= `teacher_enroll`.`course_id`) INNER JOIN `teacher_students` ON (`teacher_enroll`.`student_id` = `teacher_students`.`id`) WHERE `teacher_students`.`sex` = 1
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;反向查询用对应的模型名的小写&quot; data-source-line=&quot;430&quot;&gt;&lt;span&gt;反向查询:用对应的模型名的小写。&lt;/span&gt;&lt;/h5&gt;
&lt;p data-source-line=&quot;431&quot;&gt;查询所有报名python课程的学员：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;模糊查询用contains&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(course__name__contains=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time`, `teacher_students`.`e_time`, `teacher_students`.`grade_id` FROM `teacher_students` INNER JOIN `teacher_enroll` ON (`teacher_students`.`id` &lt;/span&gt;= `teacher_enroll`.`student_id`) INNER JOIN `teacher_course` ON (`teacher_enroll`.`course_id` = `teacher_course`.`id`) WHERE `teacher_course`.`name` LIKE BINARY %python%
&lt;/pre&gt;&lt;/div&gt;

&lt;pre data-source-line=&quot;432&quot;&gt;
&lt;strong&gt;&lt;span&gt;and关系&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p data-source-line=&quot;441&quot;&gt;查询所有报名英语的33期的学员：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(course__name__contains=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;englist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,grade__num__contains=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;33期&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time`, `teacher_students`.`e_time`, `teacher_students`.`grade_id` FROM `teacher_students` INNER JOIN `teacher_enroll` ON (`teacher_students`.`id` &lt;/span&gt;= `teacher_enroll`.`student_id`) INNER JOIN `teacher_course` ON (`teacher_enroll`.`course_id` = `teacher_course`.`id`) INNER JOIN `teacher_grade` ON (`teacher_students`.`grade_id` = `teacher_grade`.`id`) WHERE (`teacher_course`.`name` LIKE BINARY %englist% AND `teacher_grade`.`num` LIKE BINARY %33期%)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre data-source-line=&quot;443&quot;&gt;
查询所有缴费金额小于3000的学员：
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Students.objects.filter(enroll__pay__lt=3000&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_students`.`id`, `teacher_students`.`name`, `teacher_students`.`age`, `teacher_students`.`sex`, `teacher_students`.`qq`, `teacher_students`.`phone`, `teacher_students`.`c_time`, `teacher_students`.`e_time`, `teacher_students`.`grade_id` FROM `teacher_students` INNER JOIN `teacher_enroll` ON (`teacher_students`.`id` &lt;/span&gt;= `teacher_enroll`.`student_id`) WHERE `teacher_enroll`.`pay` &amp;lt; 3000.0
&lt;/pre&gt;&lt;/div&gt;

&lt;pre data-source-line=&quot;450&quot;&gt;
查询所有报名python的班级有哪些
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; res = Grade.objects.filter(students__course__name__contains=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
通过学生表去查课程名称之后，

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.query)
SELECT `teacher_grade`.`id`, `teacher_grade`.`num`, `teacher_grade`.`name` FROM `teacher_grade` INNER JOIN `teacher_students` ON (`teacher_grade`.`id` &lt;/span&gt;= `teacher_students`.`grade_id`) INNER JOIN `teacher_enroll` ON (`teacher_students`.`id` = `teacher_enroll`.`student_id`) INNER JOIN `teacher_course` ON (`teacher_enroll`.`course_id` = `teacher_course`.`id`) WHERE `teacher_course`.`name` LIKE BINARY %python%
&lt;/pre&gt;&lt;/div&gt;

&lt;pre data-source-line=&quot;457&quot;&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;跨表查询小节：需要查询的结果表名放在前面，然后把要查询的内容放在括号内。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 01 Mar 2019 12:02:00 +0000</pubDate>
<dc:creator>華華</dc:creator>
<og:description>1.常用的模型字段类型 官方文档：https://docs.djangoproject.com/en/2.1/ref/models/fields/#field-types 定义的模型中，类名对应的表名</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hua888/p/10458486.html</dc:identifier>
</item>
<item>
<title>测试12.2.0.1RAC PDB级别的Failover - AlfredZhao</title>
<link>http://www.cnblogs.com/jyzhao/p/10458233.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jyzhao/p/10458233.html</guid>
<description>&lt;p&gt;&lt;strong&gt;关键步骤：&lt;/strong&gt;手工添加服务名A并启动（已验证默认的服务名测试验证无法实现Failover）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[oracle@db90 ~]$ srvctl add service -db orcl -service A -preferred cdb11,cdb12 -pdb pdb1
[oracle@db90 ~]$ srvctl start service -db orcl -service A&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;完整步骤：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.1 服务端信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL&amp;gt; show parameter name

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
cdb_cluster_name                     string      orcl
cell_offloadgroup_name               string
db_file_name_convert                 string
db_name                              string      orcl
db_unique_name                       string      orcl
global_names                         boolean     FALSE
instance_name                        string      cdb11
lock_name_space                      string
log_file_name_convert                string
pdb_file_name_convert                string
processor_group_name                 string

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
service_names                        string      orcl
SQL&amp;gt; show con_id

CON_ID
------------------------------
1
SQL&amp;gt; show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         2 PDB$SEED                       READ ONLY  NO
         3 PDB1                           READ WRITE NO
         4 PDB2                           READ WRITE NO&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1.2 客户端tnsnames.ora配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;PDB=
        (DESCRIPTION =
                (ADDRESS_LIST =
        (LOAD_BALANCE = off)
        (FAILOVER=on)
                (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.90)(PORT = 1521))
                (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.92)(PORT = 1521))
        )
        (CONNECT_DATA =
                (SERVER = DEDICATED)
                (SERVICE_NAME = A)
                (FAILOVER_MODE =
                        (TYPE = SELECT)
                        (METHOD = BASIC)
                        (RETRIES = 180)
                        (DELAY = 5)
                        )
                )
        )&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code&gt;[oracle@db90 ~]$ srvctl add service -db orcl -service A -preferred cdb11,cdb12 -pdb pdb1
[oracle@db90 ~]$ srvctl start service -db orcl -service A&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看服务状态，看到已经成功增加了ora.orcl.a.svc：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[grid@db90 ~]$ crsctl stat res -t
--------------------------------------------------------------------------------
Name           Target  State        Server                   State details       
--------------------------------------------------------------------------------
Local Resources
--------------------------------------------------------------------------------
ora.ASMNET1LSNR_ASM.lsnr
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.DATA.dg
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.FRA.dg
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.LISTENER.lsnr
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.MGMT.dg
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.OCRVT.dg
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.chad
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.net1.network
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
ora.ons
               ONLINE  ONLINE       db90                     STABLE
               ONLINE  ONLINE       db92                     STABLE
--------------------------------------------------------------------------------
Cluster Resources
--------------------------------------------------------------------------------
ora.LISTENER_SCAN1.lsnr
      1        ONLINE  ONLINE       db92                     STABLE
ora.MGMTLSNR
      1        ONLINE  ONLINE       db92                     169.254.59.133 10.0.
                                                             0.92,STABLE
ora.asm
      1        ONLINE  ONLINE       db90                     Started,STABLE
      2        ONLINE  ONLINE       db92                     Started,STABLE
      3        OFFLINE OFFLINE                               STABLE
ora.cvu
      1        ONLINE  ONLINE       db90                     STABLE
ora.db90.vip
      1        ONLINE  ONLINE       db90                     STABLE
ora.db92.vip
      1        ONLINE  ONLINE       db92                     STABLE
ora.mgmtdb
      1        ONLINE  ONLINE       db92                     Open,STABLE
ora.orcl.a.svc
      1        ONLINE  ONLINE       db90                     STABLE
      2        ONLINE  ONLINE       db92                     STABLE
ora.orcl.db
      1        ONLINE  ONLINE       db90                     Open,HOME=/u01/app/o
                                                             racle/product/12.2.0
                                                             /db_1,STABLE
      2        ONLINE  ONLINE       db92                     Open,HOME=/u01/app/o
                                                             racle/product/12.2.0
                                                             /db_1,STABLE
ora.qosmserver
      1        ONLINE  ONLINE       db90                     STABLE
ora.scan1.vip
      1        ONLINE  ONLINE       db92                     STABLE
--------------------------------------------------------------------------------&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code&gt;[oracle@db01 admin]$ sqlplus scott/tiger@pdb

SQL*Plus: Release 11.2.0.4.0 Production on Fri Mar 1 17:35:08 2019

Copyright (c) 1982, 2013, Oracle.  All rights reserved.


Connected to:
Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production

SQL&amp;gt; show parameter name

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
cdb_cluster_name                     string      orcl
cell_offloadgroup_name               string
db_file_name_convert                 string
db_name                              string      orcl
db_unique_name                       string      orcl
global_names                         boolean     FALSE
instance_name                        string      cdb11
lock_name_space                      string
log_file_name_convert                string
pdb_file_name_convert                string
processor_group_name                 string

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
service_names                        string      orcl&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code&gt;[oracle@db90 ~]$ sqlplus / as sysdba

SQL*Plus: Release 12.2.0.1.0 Production on Fri Mar 1 18:21:33 2019

Copyright (c) 1982, 2016, Oracle.  All rights reserved.


Connected to:
Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production

SQL&amp;gt; show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         2 PDB$SEED                       READ ONLY  NO
         3 PDB1                           READ WRITE NO
         4 PDB2                           READ WRITE NO
SQL&amp;gt; alter session set container=pdb1;

Session altered.

SQL&amp;gt; show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         3 PDB1                           READ WRITE NO
SQL&amp;gt; shutdown immediate;
Pluggable Database closed.
SQL&amp;gt; show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         3 PDB1                           MOUNTED
SQL&amp;gt; &lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code&gt;[oracle@db01 admin]$ sqlplus scott/tiger@pdb

SQL*Plus: Release 11.2.0.4.0 Production on Fri Mar 1 18:23:48 2019

Copyright (c) 1982, 2013, Oracle.  All rights reserved.


Connected to:
Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production

SQL&amp;gt; show parameter name

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
cdb_cluster_name                     string      orcl
cell_offloadgroup_name               string
db_file_name_convert                 string
db_name                              string      orcl
db_unique_name                       string      orcl
global_names                         boolean     FALSE
instance_name                        string      cdb12
lock_name_space                      string
log_file_name_convert                string
pdb_file_name_convert                string
processor_group_name                 string

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
service_names                        string      orcl
SQL&amp;gt; &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;启动节点1的服务就会拉起实例1的pdb1:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[oracle@db90 ~]$ srvctl start service -db orcl -service A -node db90&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;整个测试过程已完成。&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 11:08:00 +0000</pubDate>
<dc:creator>AlfredZhao</dc:creator>
<og:description>关键步骤： 手工添加服务名A并启动（已验证默认的服务名测试验证无法实现Failover） 完整步骤： '1.确认环境信息' '2.手工添加服务并启动' '3.测试客户端连接到服务端' '4.关闭实例1</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jyzhao/p/10458233.html</dc:identifier>
</item>
<item>
<title>剑指offer：调整数组顺序使奇数位于偶数前面 - 守望先生</title>
<link>http://www.cnblogs.com/bianchengzhuji/p/10458251.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bianchengzhuji/p/10458251.html</guid>
<description>&lt;h2 id=&quot;h&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。&lt;/p&gt;
&lt;h2 id=&quot;h-1&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;事实上，这个题比较简单，很多种方式都可以实现，但是其时间复杂度或空间复杂度不尽相同。&lt;/p&gt;
&lt;h2 id=&quot;h-2&quot;&gt;解法一&lt;/h2&gt;
&lt;p&gt;书中作者提到一种初始的做法是，从头扫描整个数组，如果遇到偶数，则拿出这个数，并且把整个数组的数据都向前挪动一位，再把拿出的数放到末尾。每碰到一个偶数就需要移动O(N)次，这样总的&lt;strong&gt;时间复杂度为O(n^2),空间复杂度为O(1)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这种方式很简单，如果已经很清楚是怎么回事，可以跳过例子说明，继续阅读下一个解法。但是&lt;strong&gt;可以尝试自己写一下代码，发现有些细节部分并不是那么容易写出来&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;举个例子，假设有数据1,2,3,4,5,6：&lt;/p&gt;
&lt;p&gt;从左往右扫描，找到第一个偶数2，并临时保存：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;取出&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;将2后面的所有数往前移动一个位置，并将2放到最后一个位置：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;移动后&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;继续扫描&lt;strong&gt;当前位置&lt;/strong&gt;，发现3为奇数，继续，发现4为偶数，将从3之后位置的数开始，到倒数第二个位置，所有数往前移动一个位置，并将4放到最后：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;移动后&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;继续扫描当前位置数5，6，至此，偶数有2两个，当前指向位置为,所在下标为4，总数 - 位置 &amp;lt;= 偶数 ,结束。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;根据该思路，C语言代码实现如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;/&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-3&quot;&gt;解法二&lt;/h2&gt;
&lt;p&gt;很多人其实最先想到的解法可能是，创建一个新的数组，从头扫描，遇到偶数放后边，遇到奇数放前边。扫描结束后，再将数组内容拷贝到原数组，这样整个&lt;strong&gt;时间复杂度为(n）,而空间复杂度也为O(n)&lt;/strong&gt;，这样的方法实现简单，也不容易出错。C语言代码实现如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;/&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-4&quot;&gt;解法三&lt;/h2&gt;
&lt;p&gt;还记得我们之前介绍过的《&lt;a href=&quot;https://www.yanbinghu.com/2019/02/21/28355.html&quot;&gt;快速排序优化详解&lt;/a&gt;》吗？快速排序中，有一个分区操作，是将整个数组大于等于基准的部分放右边，而小于等于基准的部分放左边，即根据基准，将数组一分为二。其实在这里，同样可以参考这个思路，只不过跟基准比大小，变成了判断是奇还是偶。&lt;br/&gt;这里简单描述一下该思路，更多细节可以参考《&lt;a href=&quot;https://www.yanbinghu.com/2019/02/21/28355.html&quot;&gt;快速排序优化详解&lt;/a&gt;》中如何将元素移动到基准两侧一节：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;定义下标i和j，分别从开头和结尾开始扫描&lt;/li&gt;
&lt;li&gt;当i遇到偶数时，停止扫描&lt;/li&gt;
&lt;li&gt;当j遇到奇数时，停止扫描&lt;/li&gt;
&lt;li&gt;此时交换i和j位置的值&lt;/li&gt;
&lt;li&gt;继续前面的操作，直到i和j交错或相等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举个例子，假设有数据1,2,3,4,5,6,7,8：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;j&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;i和j继续扫描，i遇到2停止，j遇到5停止，交换两处的值：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;j&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;i和j继续扫描，i遇到4停止，j遇到5停止，交换两处的值：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;j&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;继续扫描，此时，i和j交错，扫描结束：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;th&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;j&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;基于该思路的算法&lt;strong&gt;时间复杂度为O(n)，空间复杂度为O(1)&lt;/strong&gt;，C语言代码实现如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;/&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-5&quot;&gt;运行效率比较&lt;/h2&gt;
&lt;p&gt;编译后，对一百万数据进行操作，运行时间结果如下。&lt;br/&gt;解法一：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;$ &lt;span class=&quot;hljs-keyword&quot;&gt;time ./reorder &lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并没有耐心等到结果出来。&lt;br/&gt;解法二：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs go&quot;&gt;$ time ./reorder1 &lt;span class=&quot;hljs-number&quot;&gt;100000000&lt;br/&gt;reorder &lt;span class=&quot;hljs-keyword&quot;&gt;for &lt;span class=&quot;hljs-number&quot;&gt;100000000 numbers&lt;br/&gt;before reorder:too much，will not &lt;span class=&quot;hljs-built_in&quot; readability=&quot;1&quot;&gt;print&lt;br/&gt;after  reorder:too much，will not &lt;span class=&quot;hljs-built_in&quot; readability=&quot;2&quot;&gt;print&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;real    &lt;span class=&quot;hljs-number&quot;&gt;0m2&lt;span class=&quot;hljs-number&quot;&gt;.425s&lt;br/&gt;user    &lt;span class=&quot;hljs-number&quot;&gt;0m2&lt;span class=&quot;hljs-number&quot;&gt;.141s&lt;br/&gt;sys    &lt;span class=&quot;hljs-number&quot;&gt;0m0&lt;span class=&quot;hljs-number&quot;&gt;.284s&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对1亿数据进行操作，耗时很短，只是内存占用较多。&lt;br/&gt;解法三：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs go&quot;&gt;$ time ./reorder2 &lt;span class=&quot;hljs-number&quot;&gt;100000000&lt;br/&gt;reorder &lt;span class=&quot;hljs-keyword&quot;&gt;for &lt;span class=&quot;hljs-number&quot;&gt;100000000 numbers&lt;br/&gt;before reorder:too much，will not &lt;span class=&quot;hljs-built_in&quot; readability=&quot;1&quot;&gt;print&lt;br/&gt;after  reorder:too much，will not &lt;span class=&quot;hljs-built_in&quot; readability=&quot;2&quot;&gt;print&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;real    &lt;span class=&quot;hljs-number&quot;&gt;0m2&lt;span class=&quot;hljs-number&quot;&gt;.146s&lt;br/&gt;user    &lt;span class=&quot;hljs-number&quot;&gt;0m2&lt;span class=&quot;hljs-number&quot;&gt;.018s&lt;br/&gt;sys    &lt;span class=&quot;hljs-number&quot;&gt;0m0&lt;span class=&quot;hljs-number&quot;&gt;.128s&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;耗时很短，内存占用少。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;微信公众号【编程珠玑】：专注但不限于分享计算机编程基础，Linux，C语言，C++，算法，数据库等编程相关[原创]技术文章，号内包含大量经典电子书和视频学习资源。欢迎一起交流学习，一起修炼计算机“内功”，知其然，更知其所以然。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;h-6&quot;&gt;扩展&lt;/h2&gt;
&lt;p&gt;在本题中，只是对整数是奇还是偶进行分开，那么如果是别的条件呢？例如是否为素数，是否为正数等等。我们可以让调用者传入一个条件函数，让它决定到底是放在后半部分，还是前半部分。这是不是很向库函数qsort需要传入一个比较函数的做法？这部分内容可以参考《&lt;a href=&quot;https://www.yanbinghu.com/2019/01/03/3593.html&quot;&gt;函数指针&lt;/a&gt;》，根据这个思路，我们修改解法三的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;略&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个时候通过传入函数指针，可以对任意条件进行处理了。&lt;/p&gt;
&lt;h2 id=&quot;h-7&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们发现，一些基本算法的思想，通常可以用到其他问题上，而不同的思路，带来的效率可能天差地别。&lt;/p&gt;
&lt;h2 id=&quot;h-8&quot;&gt;练习&lt;/h2&gt;
&lt;p&gt;尝试自己实现上面的算法。如果需要保证奇数或偶数之间的相对位置不变，该如何修改？&lt;/p&gt;
&lt;h2 id=&quot;h-9&quot;&gt;备注&lt;/h2&gt;
&lt;p&gt;完整代码以及模拟一亿数据处理请访问:&lt;a href=&quot;https://www.yanbinghu.com/2019/02/28/31098.html&quot;&gt;剑指offer：调整数组顺序使奇数位于偶数前面&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;微信公众号【编程珠玑】：专注但不限于分享计算机编程基础，Linux，C语言，C++，算法，数据库等编程相关[原创]技术文章，号内包含大量经典电子书和视频学习资源。欢迎一起交流学习，一起修炼计算机“内功”，知其然，更知其所以然。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 01 Mar 2019 10:58:00 +0000</pubDate>
<dc:creator>守望先生</dc:creator>
<og:description>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bianchengzhuji/p/10458251.html</dc:identifier>
</item>
<item>
<title>跨域解决方案汇总 - parallel_y</title>
<link>http://www.cnblogs.com/y-dt/p/10458176.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/y-dt/p/10458176.html</guid>
<description>&lt;h3 id=&quot;同源策略&quot;&gt;同源策略&lt;/h3&gt;
&lt;p&gt;由于浏览器的同源策略，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源，只要有一者不同，就会造成跨域&lt;/p&gt;
&lt;h3 id=&quot;jsonp&quot;&gt;jsonp&lt;/h3&gt;
&lt;p&gt;jsonp由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定。而数据就是传入回调函数中的JSON数据。形式如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
var localHandle = function(data){
    alert(&quot;返回的数据:&quot; + data);
}
&amp;lt;/script&amp;gt;

&amp;lt;script src=&quot;http://remoteserver.com/remote.js?name=value&amp;amp;callback=localHandle&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;remote.js代码如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;localHandler({&quot;result&quot;:&quot;我是远程js带来的数据&quot;});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;服务器根据请求里的callback=localHandle知道了本地的回调函数名称localHandle，查询字符串为name=value，然后服务器执行相对应的函数并返回数据给本地的localHandle回调函数。&lt;/p&gt;
&lt;p&gt;建议动态的创建script来查询&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
var localHandle = function(data){
    alert(&quot;返回的数据:&quot; + data);
}

// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）
var url = &quot;http://remoteserver.com/remote.js?name=value&amp;amp;callback=localHandle&quot;;
// 创建script标签，设置其属性
var script = document.createElement('script');
script.setAttribute('src', url);
// 把script标签加入head，此时调用开始
document.getElementsByTagName('head')[0].appendChild(script);
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;jsonp优点&quot;&gt;jsonp优点&lt;/h4&gt;
&lt;p&gt;简单易用，能够直接访问响应文本，支持浏览器和服务器之间的双向通信&lt;/p&gt;
&lt;h4 id=&quot;jsonp缺点&quot;&gt;jsonp缺点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;安全性不足。借助JSONP有可能进行跨站请求伪造(CSRF)攻击，当一个恶意网站使用访问者的浏览器向服务器发送请求并进行数据变更时，被称为CSRF攻击。由于请求会携带cookie信息，服务器会认为是用户自己想要提交表单或者发送请求，而得到用户的一些隐私数据。&lt;/li&gt;
&lt;li&gt;错误原因不易找。JSONP缺乏错误处理机制，如果脚本注入成功后，就会调用回调函数，但是注入失败后，没有任何提示。这就意味着，当JSONP遇到404、505或者其他服务器错误时，你是无法检测出错原因的。我们能够做的也只有超时，没有收到响应，便认为请求失败，执行对应的错误回调。&lt;/li&gt;
&lt;li&gt;只能适用于get请求。只能使用GET请求就意味着很多限制，提交到服务器的数据量将受限于浏览器的最大URL长度。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;jsonp封装&quot;&gt;jsonp封装&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * JSONP请求工具
 * @param url 请求的地址
 * @param data 请求的参数
 * @returns {Promise&amp;lt;any&amp;gt;}
 */
const request = ({url, data}) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    // 处理传参成xx=yy&amp;amp;aa=bb的形式
    const handleData = (data) =&amp;gt; {
      const keys = Object.keys(data)
      const keysLen = keys.length
      return keys.reduce((pre, cur, index) =&amp;gt; {
        const value = data[cur]
        const flag = index !== keysLen - 1 ? '&amp;amp;' : ''
        return `${pre}${cur}=${value}${flag}`
      }, '')
    }
    // 动态创建script标签
    const script = document.createElement('script')
    // 接口返回的数据获取
    window.jsonpCb = (res) =&amp;gt; {
      document.body.removeChild(script)
      delete window.jsonpCb
      resolve(res)
    }
    script.src = `${url}?${handleData(data)}&amp;amp;cb=jsonpCb`
    document.body.appendChild(script)
  })
}
// 使用方式
request({
  url: 'http://localhost:9871/api/jsonp',
  data: {
    // 传参
    msg: 'helloJsonp'
  }
}).then(res =&amp;gt; {
  console.log(res)
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;空iframe加form&quot;&gt;空iframe加form&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;const requestPost = ({url, data}) =&amp;gt; {
  // 首先创建一个用来发送数据的iframe.
  const iframe = document.createElement('iframe')
  iframe.name = 'iframePost'
  iframe.style.display = 'none'
  document.body.appendChild(iframe)
  const form = document.createElement('form')
  const node = document.createElement('input')
  // 注册iframe的load事件处理程序,如果你需要在响应返回时执行一些操作的话.
  iframe.addEventListener('load', function () {
    console.log('post success')
  })

  form.action = url
  // 在指定的iframe中执行form
  form.target = iframe.name;   //target规定在何处打开 action URL。这里可以通过iframe.name来指定iframe
  form.method = 'post'
  for (let name in data) {
    node.name = name
    node.value = data[name].toString()
    form.appendChild(node.cloneNode())
  }
  // 表单元素需要添加到主文档中.
  form.style.display = 'none'
  document.body.appendChild(form)
  form.submit()

  // 表单提交后,就可以删除这个表单,不影响下次的数据发送.
  document.body.removeChild(form)
}
// 使用方式
requestPost({
  url: 'http://localhost:9871/api/iframePost',
  data: {
    msg: 'helloIframePost'
  }
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;document.domain-iframe&quot;&gt;document.domain + iframe&lt;/h3&gt;
&lt;p&gt;通过document.domain将两个页面的域名都设置成相同域名，也可以实现跨域。 不过这个方法只适用于不同子域的框架间的交互&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// a.html
&amp;lt;iframe id=&quot;iframe&quot; src=&quot;http://child.domain.com/b.html&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script&amp;gt;
    document.domain = 'domain.com';
    var user = 'admin';
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;// b.html
&amp;lt;script&amp;gt;
    document.domain = 'domain.com';
    // 获取父窗口中变量
    alert('get js data from parent ---&amp;gt; ' + window.parent.user);
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;location.hash&quot;&gt;location.hash&lt;/h3&gt;
&lt;p&gt;通过location.hash来跨域，原理是改变url的hash部分来进行双向通信，父页面向iframe子页面通信只需监听自身的url变化来发送信息，而子页面向父页面通信就麻烦一些，由于两个页面不在同一个域，IE和Chrome都不允许修改parent.location.hash的值，所以需要创建一个和父页面同域的中间页，中间页可利用parent.parent访问父页面的所有对象。&lt;/p&gt;
&lt;p&gt;该方法的缺点是会造成不必要的浏览器历史记录，并且有些浏览器不支持onhashchange事件，数据直接暴露在url中，数据容量和类型都有限等。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; // a.html
&amp;lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script&amp;gt;
    var iframe = document.getElementById('iframe');

    // 向b.html传hash值
    setTimeout(function() {
        iframe.src = iframe.src + '#user=admin';
    }, 1000);
    
    // 开放给同域c.html的回调方法
    function onCallback(res) {
        alert('data from c.html ---&amp;gt; ' + res);
    }
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt; // b.html
&amp;lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain1.com/c.html&quot; style=&quot;display:none;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script&amp;gt;
    var iframe = document.getElementById('iframe');

    // 监听a.html传来的hash值，再传给c.html
    window.onhashchange = function () {
        iframe.src = iframe.src + location.hash;
    };
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt; // c.html
&amp;lt;script&amp;gt;
    // 监听b.html传来的hash值
    window.onhashchange = function () {
        // 再通过操作同域a.html的js回调，将结果传回
        window.parent.parent.onCallback('hello: ' + location.hash.replace('#user=', ''));
    };
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;window.name-iframe&quot;&gt;window.name + iframe&lt;/h3&gt;
&lt;p&gt;window.name + iframe，利用window.name在不同页面（甚至不同域）加载后依旧存在，并且支持大小达到了2MB。 步骤： 首先在a页面中创建iframe，将src指向外域保存数据到window.name，再将iframe的src指向和a页面同域的b代理页面，借此让a页面以iframe.contentWindow.name的形式成功读取数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//a.html
var proxy = function(url, callback) {
    var state = 0;
    var iframe = document.createElement('iframe');

    // 加载跨域页面
    iframe.src = url;

    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name
    iframe.onload = function() {
        if (state === 1) {
            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据
            callback(iframe.contentWindow.name);
            destoryFrame();

        } else if (state === 0) {
            // 第1次onload(跨域页)成功后，切换到同域代理页面
            iframe.contentWindow.location = 'http://www.domain1.com/proxy.html';
            state = 1;
        }
    };

    document.body.appendChild(iframe);

    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）
    function destoryFrame() {
        iframe.contentWindow.document.write('');
        iframe.contentWindow.close();
        document.body.removeChild(iframe);
    }
};

// 请求跨域b页面数据
proxy('http://www.domain2.com/b.html', function(data){
    alert(data);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//b.html
&amp;lt;script&amp;gt;
    window.name = 'This is domain2 data!';
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;postmessage跨域&quot;&gt;postMessage跨域&lt;/h3&gt;
&lt;p&gt;postMessage是HTML5新增的window属性&lt;/p&gt;
&lt;p&gt;用法：postMessage(data,origin)方法接受两个参数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//a.html
&amp;lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script&amp;gt;       
    var iframe = document.getElementById('iframe');
    iframe.onload = function() {
        var data = {
            name: 'aym'
        };
        // 向domain2传送跨域数据
        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');
    };

    // 接受domain2返回数据
    window.addEventListener('message', function(e) {
        alert('data from domain2 ---&amp;gt; ' + e.data);
    }, false);
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//b.html
&amp;lt;script&amp;gt;
    // 接收domain1的数据
    window.addEventListener('message', function(e) {
        alert('data from domain1 ---&amp;gt; ' + e.data);

        var data = JSON.parse(e.data);
        if (data) {
            data.number = 16;

            // 处理后再发回domain1
            window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com');
        }
    }, false);
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;cors&quot;&gt;CORS&lt;/h3&gt;
&lt;p&gt;CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。&lt;/p&gt;
&lt;p&gt;整个CORS通信过程中，都是浏览器自动完成，对于开发者来说，CORS和同源的AJAX通信没有差别，浏览器一旦发现AJAX跨域，就会自动添加一些附加的头部信息，根据请求的不同还会多出一次附加的请求。&lt;/p&gt;
&lt;p&gt;实现CORS通信的关键是服务器，只要服务器实现了CORS接口，就实现了跨域&lt;/p&gt;
&lt;p&gt;服务器实现CORS通信的关键是设置以下请求头&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Access-Control-Allow-Origin，&lt;br/&gt;该字段时必选的，用于设置允许响应资源的origin&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;Access-Control-Allow-Origin: *  //允许所有域
Access-Control-Allow-Origin: &amp;lt;origin&amp;gt;   允许指定的origin&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;Access-Control-Allow-Credentials 该字段是可选的，用于设置是否允许发送Cookie，该字段的值只能设为布尔值 ==true== ,删除该字段即可不发送。如果需要发送Cookie，这里还需要前端的AJAX请求设置 ==withCredentials== 属性，此外，Access-Control-Allow-Origin不能设为星号，必须明确指定与请求网页一致的域名，并且，Cookie依旧遵循同源策略，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;var xhr = new XMLHttpRequest();
xhr.withCredentials = true;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;Access-Control-Expose-Header&lt;br/&gt;该字段可选，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;cors与jsonp比较&quot;&gt;CORS与JSONP比较&lt;/h4&gt;
&lt;p&gt;CORS与JSONP的使用目的相同，但是比JSONP更强大。&lt;/p&gt;
&lt;p&gt;JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 10:43:00 +0000</pubDate>
<dc:creator>parallel_y</dc:creator>
<og:description>跨域解决方案汇总 同源策略 由于浏览器的同源策略，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源，只要有一者不同，就会造成跨域 jsonp jsonp由两部分组成：回调函数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/y-dt/p/10458176.html</dc:identifier>
</item>
<item>
<title>事物的基本概念，附图示 - Visitors</title>
<link>http://www.cnblogs.com/dmeck/p/10457964.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dmeck/p/10457964.html</guid>
<description>&lt;h2&gt;来源&lt;/h2&gt;
&lt;p&gt;《数据库系统原理》&lt;/p&gt;

&lt;h2&gt;并发操作问题&lt;/h2&gt;
&lt;p&gt;　　事务是并发操作的基本单位，保证事务的ACID特征是事务处理的重要任务，而事务的ACID特征可能遭到破坏的原因之一是多个事务对数据库的并发操作造成的。为了保证事务的隔离性和一致性，DBMS需要对并发操作进行正确调度。其中完整性校验可以保证一个事务单独执行时，若输入的数据库状态是正确的，则其输出的数据库状态也是正确的，但当多个事务交错执行时，可能出现不一致的问题，这也称为并发操作问题，典型的有如下三种：丢失更新、不可重复读和读”脏“数据。&lt;/p&gt;
&lt;p&gt;　　（1）丢失更新&lt;/p&gt;
&lt;p&gt;　　设有两个事务T1和T2，当它们同时读入同一数据并加以修改时，事务T2的提交结果会破坏事务T1的提交的结果，由此导致事务T1的修改丢失。这就是一种由于对数据的并发操作而带来的数据不一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/864142/201903/864142-20190301175736684-1863610578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　（2）不可重复读&lt;/p&gt;
&lt;p&gt;　　设有两个事务T1和T2，不可重复读是指事务T1读取事务后，事务T2执行更新操作，使事务T1无法再现前一次读取的结果。通常，不可重复读包括三种情况。&lt;/p&gt;
&lt;p&gt;　　　　i）事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时，得到与前一次不同的值。&lt;/p&gt;
&lt;p&gt;　　　　ii）事务T1按一定的条件从数据库中读取某些数据后，事务T1删除了其中部分记录，当事务T1再次按相同条件读取数据时，发现某些记录神秘的消失了。&lt;/p&gt;
&lt;p&gt;　　　　iii）事务T1按一定的条件从数据库中读取某些记录后，事务T2插入了一些记录，当事务T1再次按相同条件读取数据时，发现多了一些记录。&lt;/p&gt;
&lt;p&gt;　　（3）读”脏“数据&lt;/p&gt;
&lt;p&gt;　　　设有两个事务T1和T2，读”脏“数据是指，事务T1修改了某一数据，并将其写回磁盘，事务T2读取同一数据后，事务T1由于某种原因被撤销，这时事务T1已经修改过的数据恢复原值，事务T2读到的数据，就与数据库中的数据不一致，则事务T2读到的数据就为‘’脏‘数据，即不正确的数据。&lt;/p&gt;
&lt;p&gt;　　产生上述三类数据不一致的主要原因是并发操作破坏了事务的隔离性，并发控制机制就是要用正确的方式调度并发操作，使一个用户事务的执行不受其他事务的干扰，从而避免造成数据的不一致。&lt;/p&gt;
&lt;p&gt;　　解决并发操作所带来的数据不一致问题的方法有封锁、时间戳、乐观控制法和多版本并发控制等。本节接下来主要介绍封锁方法，这也是众多数据库产品采用的基本方法。　　&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 09:58:00 +0000</pubDate>
<dc:creator>Visitors</dc:creator>
<og:description>来源 《数据库系统原理》 并发操作问题 事务是并发操作的基本单位，保证事务的ACID特征是事务处理的重要任务，而事务的ACID特征可能遭到破坏的原因之一是多个事务对数据库的并发操作造成的。为了保证事务</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dmeck/p/10457964.html</dc:identifier>
</item>
<item>
<title>vue的路由懒加载 - 小小灬厮</title>
<link>http://www.cnblogs.com/cielsys/p/10457945.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cielsys/p/10457945.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://router.vuejs.org/zh/guide/advanced/lazy-loading.html&quot;&gt;路由懒加载官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;非懒加载写法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import Login from '@/components/Login'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所有路由涉及到的文件会被打包到 app.xxx.js 中&lt;/p&gt;
&lt;p&gt;懒加载写法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const Login = () =&amp;gt; import('@/components/Login')&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;这里要扩展说明的是 &lt;strong&gt;把组件按组分块&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const Login = () =&amp;gt; import(/* webpackChunkName: &quot;group-index&quot; */ '@/components/Login')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样去写的话，那么 webpackChunkName: &quot;group-index&quot; 的所有路由组件就会被打包到一起，如 0.faxxx.js，如果有多个组，那么就是依次 1.xxx.js，2.xxx.js。&lt;br/&gt;比方说 用户相关的路由为一组，设置相关的路由为一组等，打包完成后的打印日志能看到每个组对应的js文件：&lt;br/&gt;&lt;img src=&quot;http://www.cnblogs.com/cielsys/p/9CD827451D2347EB897E245833C7F3E9&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的话，首屏加载的时候就不会一次性下载所有路由文件，而是根据当前页面下载对应的文件，等到用户首次跳转到另一个路由组的时候再进行下载。&lt;/p&gt;
&lt;p&gt;比如 编译后，我首次加载主页，那么会下载 group-index 对应的路由文件资源，之后跳转用户列表页，再下载 group-user 路由文件资源。&lt;br/&gt;&lt;img src=&quot;http://www.cnblogs.com/cielsys/p/1B3B95C9B66845339407845EE157DAB9&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://www.cnblogs.com/cielsys/p/4F399F0160CF4653A6DD06B8525F4934&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的话初始化的时候会比之前稍微快些，因为首次加载少下载了一些资源。&lt;/p&gt;
&lt;p&gt;但副作用就是，当你跳转到新的分组页面的时候，会卡那么一下，因为需要等待下载路由文件资源，等待时间根据用户网路和当前路由文件资源大小决定，所以路由文件组的分割需要开发者自己进行判断。&lt;/p&gt;
&lt;p&gt;个人建议打包后如果超过1M了可以考虑拆分一下，网速慢的话可能下载需要1~2s时间。&lt;/p&gt;
</description>
<pubDate>Fri, 01 Mar 2019 09:56:00 +0000</pubDate>
<dc:creator>小小灬厮</dc:creator>
<og:description>'路由懒加载官方介绍' 非懒加载写法： 所有路由涉及到的文件会被打包到 app.xxx.js 中 懒加载写法： 这里要扩展说明的是 把组件按组分块 ： 这样去写的话，那么 webpackChunkNa</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cielsys/p/10457945.html</dc:identifier>
</item>
</channel>
</rss>