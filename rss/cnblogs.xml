<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>[每日一题系列] LeetCode 1071. 字符串的最大公因子 - JethroYu</title>
<link>http://www.cnblogs.com/JethroYu/p/12467001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JethroYu/p/12467001.html</guid>
<description>&lt;p&gt;对于字符串 S 和 T，只有在 S = T + ... + T（T 与自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。&lt;br/&gt;返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br/&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;

&lt;p&gt;首先假设这两个字符串都是由一个(且最长)子串X生成的，那么很容易想到S串和T串都是X的重复，则S=k个X，T=n个X，则S+T == T+S == (k+n)个X&lt;br/&gt;则如果S+T == T+S，则有解，否则直接返回空串表示无解。&lt;/p&gt;
&lt;p&gt;然后S和T都是X的倍数，则最长X为他们长度的最大公因子（题目都写了）&lt;/p&gt;

&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Solution {
  public String gcdOfStrings(String str1, String str2) {
      if ((str1+str2).equals(str2+str1))
          return str1.substring(0,GCD(str1.length(),str2.length()));
      else
          return &quot;&quot;;
  }
  public int GCD(int a,int b)
  {
      if(a==0) return b;
      if(b==0) return a;
      if(!(a%2==1)&amp;amp;&amp;amp;!(b%2==1))
      {
          return GCD(a&amp;gt;&amp;gt;1,b&amp;gt;&amp;gt;1)&amp;lt;&amp;lt;1;
      }
      else if(!(b%2==1))
      {
          return GCD(a,b&amp;gt;&amp;gt;1);
      }
      else if(!(a%2==1))
      {
          return GCD(a&amp;gt;&amp;gt;1,b);
      }
      else
      {
          return GCD(Math.abs(a-b),Math.min(a,b));
      }
  }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 12 Mar 2020 00:41:00 +0000</pubDate>
<dc:creator>JethroYu</dc:creator>
<og:description>题目 对于字符串&amp;#160;S 和&amp;#160;T，只有在 S = T + ... + T（T&amp;#160;与自身连接 1 次或多次）时，我们才认定&amp;#160;“T 能除尽 S”。 返回最长字符串&amp;#16</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/JethroYu/p/12467001.html</dc:identifier>
</item>
<item>
<title>当老板如何带团队？ - 刘成庚</title>
<link>http://www.cnblogs.com/a1670233579/p/12466993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/a1670233579/p/12466993.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1677432/202003/1677432-20200312083541806-30723547.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;什么样的老板才能让团队迅速壮大，有战斗力？我研究从这三个方面着手，供大家参考。&lt;/p&gt;
&lt;p&gt;第一：分钱。当老板，别整虚假的，清晰楚的明白大家都是来挣钱的，首先谈分钱机制，多干活，多拿钱，少干活，自然是要少给，不干活就分文不给，这点很重要，要成为公司公认的制度。企业是谈业绩的地方，在分钱方面不能讲感情，要杀伐果断，没有情面可讲。光有苦劳没有功劳的人也是分文不给，对这些不创造利润还谈苦劳的人网开一面的话，老板就得“死”，活活的被拖死，这种风气还会影响企业文化，浪费财力物力，减缓企业发展速度。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第二：公司权力分配问题。&lt;/p&gt;
&lt;p&gt;当老板核心事之一，就是识人、用人，把权力下放。层次低的老板喜欢抓住权力不放，大大小小的事揽在自己手里，啥事喜欢亲力亲为，搞得其他人不知道做什么事好，大家就等着老板安排事做，安排他做这件事才被动的去做事，做事还光只动手不动脑，不动脑做事就容易出问题，出了问题就卡在半路也没人管，谁也不愿意承担责任，非常的误事，老板也会累死。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;权力下放，让其它人都有成就感，大家有权力了，他才会有责任心，才能认真把事做好，事做好了，他就心情愉悦。&lt;/p&gt;
&lt;p&gt;权力下放时，责任、利益与权力要绑在一起跑，追究责任要单一，&lt;/p&gt;
&lt;p&gt;出了问题不能是两个人以上承担，多人承担责任等于没责任，谁下的命令谁负责到底，做好了有赏，做砸有罚，赏罚分明。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第三：团队成员精神、制度及文化问题。&lt;/p&gt;
&lt;p&gt;我们当老板，一定要做到坦诚对待团队成员，言行一致，说真话，做实事，畅所欲言，让每个人都可以自由且轻松发言，要调动发言的积极性，企业就更透明、开放，大家都交流了，你当老板才能发现问题，及时改正。&lt;/p&gt;
&lt;p&gt;老板时刻要调整自己的状态，把控好团队成员的状态。老板要保持激情，要让激情时刻在血液里流动，并且辐射到团队成员身上，团队成员没有激情，一定是老板出了问题，这些虚的东西老板要重视，要做实，做实的方法有很多，比如，先扶持几个人先富起来，榜样调动激情力量是巨大的，对企业文化也有帮助。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这些虚的东西做实了，制度就可以更简单，毕竟再完美的制度，也管不住人，管不全面，越完美的制度，管人越会出现漏洞，制度多了往往是个形式主义，大家更记不住，一个公司制度越多，就是这个老板不及格，或者是这个团队带头人不及格，是虚的东西没做实，是企业文化衰弱的表现，这是很危险的，不要觉得企业文化要等到公司上规模了才重视。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第四：统一目标。&lt;/p&gt;
&lt;p&gt;初创公司，先不谈统一价值观，由于每个人的生活环境，受到的教育，悟性不一样，遇到的人和事各异，就先给每个人设定具体目标，大家各司其职，团队协同作战，以实现目标来统一团队，等实现几个具体目标，建立足够的信任感后，再来统一价值观，这个顺序不能搞错了，不能的话，让大家觉得你这个人不实在。所以，初创公司不搞形式主义，一切以实用方便为准。&lt;/p&gt;
</description>
<pubDate>Thu, 12 Mar 2020 00:37:00 +0000</pubDate>
<dc:creator>刘成庚</dc:creator>
<og:description>如何当老板，如何带领团队</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/a1670233579/p/12466993.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core 快速入门（Razor Pages + Entity Framework Core） - 三生石上(FineUI控件)</title>
<link>http://www.cnblogs.com/sanshi/p/12441884.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sanshi/p/12441884.html</guid>
<description>&lt;p&gt;自从 2009 年开始在博客园写文章，这是目前我写的最长的一篇文章了。&lt;/p&gt;
&lt;p&gt;前前后后，我总共花了 5 天的时间，每天超过 3 小时不间断写作和代码调试。总共有 8 篇文章，每篇 5~6 个小结，总截图数高达 60 多个。&lt;/p&gt;

&lt;p&gt;俗话说，桃李不言下自成蹊。&lt;/p&gt;
&lt;p&gt;希望我的辛苦和努力能得到你的认可，并对你的学习和工作有所帮助。&lt;/p&gt;
&lt;p&gt;欢迎评论和 &lt;input onclick=&quot;votePost(12441884,'Digg');&quot; type=&quot;button&quot; value=&quot;推荐&quot;/&gt; （这是一个可以点击的按钮，点击即可推荐本文！）&lt;/p&gt;



&lt;p&gt;这是一个系列教程，以自微软的&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/razor-pages/razor-pages-start&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;为基础，与微软官方文档的区别主要有如下几点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;更通俗易懂的语言&lt;/li&gt;
&lt;li&gt;从代码入手（而非依赖VS的基架模板）&lt;/li&gt;
&lt;li&gt;关键知识点的深入解读&lt;/li&gt;
&lt;li&gt;加入和 WebForms / MVC 的对比&lt;/li&gt;
&lt;li&gt;使用 FineUICore 控件库（而非原生的控件）&lt;/li&gt;
&lt;li&gt;更少的代码和更现代化的界面（得益于FineUICore强大的控件库）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本教程包含如下内容：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section1&quot; target=&quot;_blank&quot;&gt;Razor Pages 项目&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;安装软件&lt;/li&gt;
&lt;li&gt;下载 FineUICore 空项目&lt;/li&gt;
&lt;li&gt;项目目录&lt;/li&gt;
&lt;li&gt;项目运行截图&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section2&quot; target=&quot;_blank&quot;&gt;向 Razor Pages 添加模型&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;POCO 类&lt;/li&gt;
&lt;li&gt;DbContext 类&lt;/li&gt;
&lt;li&gt;配置数据库连接字符串&lt;/li&gt;
&lt;li&gt;在 Startup.cs 中注册数据库服务&lt;/li&gt;
&lt;li&gt;初始化数据库和数据迁移&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section3&quot; target=&quot;_blank&quot;&gt;列表页面&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;新增 Movie 页面&lt;/li&gt;
&lt;li&gt;默认生成的页面和模型类&lt;/li&gt;
&lt;li&gt;异步获取数据并通过表格控件展示&lt;/li&gt;
&lt;li&gt;列标题文字是怎么来的？&lt;/li&gt;
&lt;li&gt;格式化显示日期&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section4&quot; target=&quot;_blank&quot;&gt;新增页面&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;新增页面模型&lt;/li&gt;
&lt;li&gt;新增页面视图&lt;/li&gt;
&lt;li&gt;查看 HTTP POST 请求的数据&lt;/li&gt;
&lt;li&gt;客户端模型验证&lt;/li&gt;
&lt;li&gt;自定义 JavaScript 来绕开客户端验证&lt;/li&gt;
&lt;li&gt;自定义模型验证错误消息&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section5&quot; target=&quot;_blank&quot;&gt;编辑页面&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;编辑页面模型&lt;/li&gt;
&lt;li&gt;编辑页面视图&lt;/li&gt;
&lt;li&gt;路由模板&lt;/li&gt;
&lt;li&gt;更新电影信息&lt;/li&gt;
&lt;li&gt;处理并发冲突　　&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section6&quot; target=&quot;_blank&quot;&gt;列表页面和弹出窗体&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;更新表格页面&lt;/li&gt;
&lt;li&gt;行编辑按钮&lt;/li&gt;
&lt;li&gt;窗体的关闭事件&lt;/li&gt;
&lt;li&gt;更新编辑页面&lt;/li&gt;
&lt;li&gt;先弹出提示对话框，再关闭当前窗体&lt;/li&gt;
&lt;li&gt;表格与窗体互动（动图）&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section7&quot; target=&quot;_blank&quot;&gt;搜索框与行删除按钮&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;行删除按钮&lt;/li&gt;
&lt;li&gt;行删除按钮的自定义回发&lt;/li&gt;
&lt;li&gt;行删除事件&lt;/li&gt;
&lt;li&gt;搜索框&lt;/li&gt;
&lt;li&gt;搜索框事件&lt;/li&gt;
&lt;li&gt;服务端标记搜索框不能为空　　&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section8&quot; target=&quot;_blank&quot;&gt;分页与排序&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;数据库分页&lt;/li&gt;
&lt;li&gt;保持分页状态和搜索状态&lt;/li&gt;
&lt;li&gt;将 5 个回发事件合并为 1 个&lt;/li&gt;
&lt;li&gt;排序&lt;/li&gt;
&lt;li&gt;SortBy 扩展方法&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/12441884.html#section9&quot; target=&quot;_blank&quot;&gt;下载项目源代码&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;最终完整的作品是一个简单的电影数据管理页面，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311175013812-1309712821.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果你希望了解 ASP.NET MVC 的基础知识，请查阅我之前写的系列教程：&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/6210695.html&quot; target=&quot;_blank&quot;&gt;ASP.NET MVC快速入门（MVC5+EF6）&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;1.1、安装软件&lt;/h2&gt;
&lt;p&gt;在进行本教程之前需要安装如下两个软件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;VS2019（需要选择 ASP.NET and web development 工作负载）&lt;/li&gt;
&lt;li&gt;.NET Core SDK 最新版：&lt;a href=&quot;https://dotnet.microsoft.com/download&quot;&gt;https://dotnet.microsoft.com/download&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;1.2、下载 FineUICore 空项目&lt;/h2&gt;
&lt;p&gt;FineUICore 相关产品可以到我的知识星球内下载：&lt;a href=&quot;https://fineui.com/fans/&quot;&gt;https://fineui.com/fans/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FineUICore空项目已经完成相关的配置，并可以 F5 直接运行。建议初学者从空项目入手，在熟悉 ASP.NET Core 开发流程后再自行创建项目。&lt;/p&gt;
&lt;p&gt;在知识星球内，我们提供两个空项目，分别是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;【空项目】FineUICore_EmptyProject_RazorPages_vxxx.zip&lt;/li&gt;
&lt;li&gt;【空项目】FineUICore_EmptyProject_vxxx.zip&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其中，不带 RazorPages 字符串的是基于 MVC 架构的项目，而本教程需要使用的是带 RazorPages 标识的。&lt;/p&gt;

&lt;p&gt;在 FineUICore_EmptyProject_RazorPages 项目中，页面视图中使用了 TagHelpers 标签，使得页面结构更加清晰，和 WebForms 的标签更加类似。&lt;/p&gt;
&lt;p&gt;我之前曾经写过一篇文章，对比 RazorPages + TagHelpers 的项目和传统的 ASP.NET MVC + HtmlHelpers 的区别，有兴趣可以了解一下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/11017648.html&quot; target=&quot;_blank&quot;&gt;全新ASP.NET Core，比WebForms还简单！&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;1.3、项目目录&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200308112842535-405521038.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里面有一些主要的文件和目录，从上到下分别是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. wwwroot 目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包含静态文件，如 HTML 文件、JavaScript 文件和 CSS 文件。&lt;/p&gt;
&lt;p&gt;这是 ASP.NET Core 引入的一个命名约定，将全部的静态资源放置于 wwwroot 目录有助于保持项目结构的清晰，之前的ASP.NET MVC 和 WebForms项目，我们一般都自行创建一个 res 目录。&lt;/p&gt;
&lt;p&gt;我的理解，这样的结构有助于提高项目的编译速度，如果对比 ASP.NET MVC/WebForms 和 ASP.NET Core 的项目文件（.csproj），你会发现之前的文件是显式包含进来的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Content &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;res\images\themes\vader.png&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Compile &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Areas\Button\Controllers\ButtonController.cs&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
    ...
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而 ASP.NET Core 项目文件已经没有了这些配置项，说明是隐式包含的，也就是说：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;wwwroot 目录中的是网站内容，无需编译&lt;/li&gt;
&lt;li&gt;其他目录中的需要编译&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2. Code 目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自行创建的目录，主要放置页面基类，已经自定义类。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Pages 目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包含 Razor 页面和帮助文件（以下划线开头）。&lt;/p&gt;
&lt;p&gt;每个 Razor 页面都由两个文件组成：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一个 .cshtml 文件，其中包含使用 Razor 语法的 C＃ 代码的 HTML 标签 。&lt;/li&gt;
&lt;li&gt;一个 .cshtml.cs 文件，其中包含处理页面事件的 C# 代码 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Razor 页面的访问遵循着简单的目录结构，比如：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Pages/Index.cshtml 的访问URL地址：/Index 或者 /&lt;/li&gt;
&lt;li&gt;Pages/Admin/Users.cshtml 的访问URL地址：/Admin/Users&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;相比 ASP.NET MVC 架构的页面，这是一个巨大的进步，在 MVC 中我们需要借助于抽象的 Areas 目录，并且很难支持 3 级以上的URL网址，比如：/Mobile/Button/Group&lt;/p&gt;

&lt;p&gt;帮助文件主要有如下几个：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Shared/_Layout.cshtml：主要放置页面框架标签，比如页面&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;body&amp;gt;标签，以及引入共用的css和js文件，类似于 WebForms 中的母版页（Master Page）。&lt;/li&gt;
&lt;li&gt;_ViewImports.cshtml：一个 using 指令和 addTagHelpers 指令，以便在 Razor 页面使用不加前缀的控件名和标签。&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200308115620588-1556350797.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/li&gt;
&lt;li&gt;_ViewStart.cshtml：Razor页面的启动文件，会在页面执行之前调用，默认包含了对布局页面的调用。这个文件是可以在目录中嵌套的，运行是会先执行最外层目录中的_ViewStart.cshtml文件，再执行内层目录中的_ViewStart.cshtml。这也很好理解，为了确保最靠近Razor页面的内层定义覆盖外层定义。 &lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200308115855100-1015970426.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;4. appSettings.json&lt;/strong&gt;&lt;br/&gt;包含配置数据，如数据库连接字符串。默认包含了 FineUICore 的一些全局配置信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200308120259913-1610762702.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Program.cs&lt;/strong&gt;&lt;br/&gt;包含程序的入口点。 &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;6. Startup.cs&lt;/strong&gt;&lt;br/&gt;包含配置应用行为的代码。 这个文件非常关键，里面定义了用于依赖注入的配置项，已经执行 ASP.NET Core HTTP请求管道的插件。&lt;/p&gt;
&lt;p&gt;当然，对于初学者不需要关注这些细节问题，我们简单看下在请求管道中添加 FineUICore 插件的地方：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200308120559820-2097631877.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;1.4、项目运行截图&lt;/h3&gt;
&lt;p&gt;可以直接 Ctrl + F5 不调试运行项目，运行截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200308120902041-1537193582.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;项目默认的是 Pure_Black 主题，这个在 appSettings.json 中有定义 。&lt;/p&gt;
&lt;p&gt;为了和VS2019的深色主题相配，我们特意选取了 Dark_Hive 深色主题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200308121159394-2099282965.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;2.1、POCO类&lt;/h2&gt;
&lt;p&gt;本示例将实现一个简单的电影管理页面，所以需要添加一个数据模型，也称为POCO类（plain-old CLR objects），因为它们与 EF Core 没有任何依赖关系。&lt;/p&gt;
&lt;p&gt;在 Code 目录中新建一个 Movie.cs 文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Movie
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Title { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [DataType(DataType.Date)]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发布日期&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ReleaseDate { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;类型&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Genre { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;价格&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;decimal&lt;/span&gt; Price { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Movie 类包含：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;ID 字段：数据库表主键，遵循命名约定，可以是ID或者MovieID。&lt;/li&gt;
&lt;li&gt;[Require]：指定字段为必填项。&lt;/li&gt;
&lt;li&gt;[Display(Name = &quot;名称&quot;)]：指定字段在前端界面的显示名称，主要用于如下两个地方：
&lt;ol&gt;&lt;li&gt;表格的表头文字&lt;/li&gt;
&lt;li&gt;表单字段的标题文字　　&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;[DataType(DataType.Date)]：指定此字段的数据类型为日期。 这个特性有两个作用：
&lt;ol&gt;&lt;li&gt;不仅影响数据库中的字段类型（仅包含日期部分，需要包含时间）；&lt;/li&gt;
&lt;li&gt;也影响客户端的表格展示，和数据录入。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;2.2、DbContext类&lt;/h2&gt;
&lt;p&gt;为了能正确初始化数据库，我们还需要一个继承自 DbContext的类，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MovieContext(DbContextOptions&amp;lt;MovieContext&amp;gt; options) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Movie&amp;gt; Movies { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于空项目尚未引入 EF Core，所以上述代码会有错误提示。&lt;/p&gt;

&lt;p&gt;下面我们需要安装 EntityFrameworkCore 相关程序包，打开菜单【工具】-&amp;gt;【Nuget包管理器】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309143946907-629394128.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们需要安装如下两个程序包：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Microsoft.EntityFrameworkCore&lt;/li&gt;
&lt;li&gt;Microsoft.EntityFrameworkCore.SqlServer：Microsoft SqlServer数据库支持。&lt;/li&gt;
&lt;li&gt;Microsoft.EntityFrameworkCore.Tools：用于在包管理控制台使用 EF Core 的数据迁移命令，比如Add-Migration等。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309144338859-1699783816.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;安装完成后，我们需要更新 MovieContext.cs 文件，在文件头添加如下指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; Microsoft.EntityFrameworkCore;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2.3、配置数据库连接字符串&lt;/h2&gt;
&lt;p&gt;本示例使用LocalDb数据库，LocalDb是轻型版的 SQL Server Express 数据库引擎，主要用于开发阶段。默认情况下，LocalDB 数据库在 C:\Users\&amp;lt;user&amp;gt;\AppData 目录下创建 *.mdf 文件。&lt;/p&gt;
&lt;p&gt;从【视图】菜单中，打开【SQL Server 对象资源管理器】，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309145457366-224628121.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在SQL Server 节点上点击右键，选中【添加 SQL Server ...】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309145658941-1800201191.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时，可以看到我们连接的LocalDb数据库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309145832203-1620881481.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;右键，点击【属性】，找到【连接字符串】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309150007379-369245680.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;

&lt;p&gt;将这个数据库字符串拷贝出来，放到 appSettings.json 文件中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;FineUI&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;DebugMode&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;CustomTheme&quot;: &quot;pure_black&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;EnableAnimation&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  },
  &lt;/span&gt;&quot;ConnectionStrings&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;MovieContext&quot;: &quot;Data Source=(localdb)\\MSSQLLocalDB;Database=MovieContext;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False&quot;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：在数据库连接字符串中添加 Database=MovieContext; 用来指定我们自己的数据库，否则新建的表都会添加到系统表 master 中。 &lt;/p&gt;

&lt;h2&gt;2.4、在Startup.cs中注册数据库服务&lt;/h2&gt;
&lt;p&gt;ASP.NET Core 内置了依赖注入的支持。我们首先需要在 Startup.cs 中注册各种服务（比如 Razor Pages、FineUICore以及 EF Core 服务），然后在页面中通过构造函数传入已经注册的服务。&lt;/p&gt;
&lt;p&gt;简化后的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; FineUI 服务&lt;/span&gt;
&lt;span&gt;    services.AddFineUI(Configuration);

    services.AddRazorPages();

    services.AddDbContext&lt;/span&gt;&amp;lt;MovieContext&amp;gt;(options =&amp;gt;&lt;span&gt;
        options.UseSqlServer(Configuration.GetConnectionString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MovieContext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 AddDbContext 中，我们通过 Configuration 来获取 appSettings.json 中定义的数据库连接字符串。&lt;/p&gt;

&lt;h2&gt;2.5、初始化数据库和数据迁移&lt;/h2&gt;
&lt;p&gt;这一节，我们会使用 EF Core 提供的数据迁移工具（Data Migration）来初始化数据库。&lt;/p&gt;
&lt;p&gt;首先打开VS的包管理控制台（Package Manager Console），位于菜单项【工具】下面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309140934867-931789403.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt; &lt;/p&gt;
&lt;p&gt;在 PM&amp;gt; 提示符下输入：Add-Migration InitialCreate&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309173921129-1142978264.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，我们的项目多了一个 Migrations 目录，里面有一个类似 20200309093752_InitialCreate.cs 的文件。&lt;/p&gt;
&lt;p&gt;这个就是初始化迁移脚本，里面包含一个 Up 方法和一个Down 方法，分别对应于应用本迁移和取消本迁移：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309175331312-350433364.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的 Up 方法主要做了是三个事情：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建名为 Movies 的表格&lt;/li&gt;
&lt;li&gt;分别定义表格列ID、Title、ReleaseDate....&lt;/li&gt;
&lt;li&gt;定义表格主键为列ID&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;此时数据库尚未创建 Movies 表，为了执行 Up 函数，我们还需要执行 Update-Database 命名。 &lt;/p&gt;
&lt;p&gt;在 PM&amp;gt; 提示符下输入：Update-Database&lt;/p&gt;

&lt;p&gt;运行结束后，在【Sql Server对象资源管理器】面板中，找到刚刚创建的 MovieContext 数据库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309190157733-313079930.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt; &lt;/p&gt;
&lt;p&gt; 查看 Movies 的视图设计器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309190636037-1007242734.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;通过Movies 的数据预览面板，我们还可以新增一条数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309191722411-315352654.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;3.1、新增 Movie 页面&lt;/h2&gt;
&lt;p&gt;在VS的资源管理器面板，Pages目录右键，并添加一个 Razor 页面，命名为 Movie：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309191958709-448157381.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个面板中，使用布局页留空，默认使用 _ViewStart.cshtml 中定义的布局文件（Shared/_Layout.cshtml）。&lt;/p&gt;


&lt;p&gt;默认生成的页面文件 Movie.cshtml：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieModel
@{
    ViewData[&quot;Title&quot;] = &quot;Movie&quot;;
}

&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Movie&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个页面中：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;@page：指示这是一个页面，可以通过命名约定来访问（/Movie），@page指令必须是页面上的第一个指令。&lt;/li&gt;
&lt;li&gt;@model：指示本页面对应的页面模型，类似于WebForms的后台文件。&lt;/li&gt;
&lt;li&gt;ViewData：用来在模型和视图之间，以及视图之间传值，可以在 Shared/_Layout.cshtml 访问这里定义的 ViewData[&quot;Title&quot;] 数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3.2、默认生成的页面和模型类 &lt;/h2&gt;
&lt;p&gt;默认生成的页面文件 Movie.cshtml.cs 模型类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnGet()
        {

        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个继承自 PageModel 的类，OnGet方法用来初始化页面数据，ASP.NET Core还支持异步调用，这个函数的异步签名如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
{
    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Students.ToListAsync();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过在 OnGet 后面添加 Async，并且返回 async Task 这样的命名约定来启用异步调用。&lt;/p&gt;
&lt;p&gt;本示例中的HTTP请求（Get，Post）以及对数据库的操作我们都将使用异步调用的形式，以提高性能。&lt;/p&gt;

&lt;h2&gt;3.3、异步获取数据并通过表格控件展示&lt;/h2&gt;
&lt;p&gt;将 Movie.cshtml.cs 模型类更新为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MovieContext _context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MovieModel(MovieContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IList&amp;lt;Movie&amp;gt; Movies { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
        {
            Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.ToListAsync();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码中：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;构造函数使用依赖注入将数据库上下文DbContext添加到页面中&lt;/li&gt;
&lt;li&gt;属性Movies保存获取的电影列表&lt;/li&gt;
&lt;li&gt;_context.Movies.ToListAsync() 通过异步的方法获取电影列表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;页面上通过一个FineUICore表格控件，用来展示电影列表数据，修改后的 Movie.cshtml 文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieModel
@{
    ViewData[&quot;Title&quot;] = &quot;Movie&quot;;
}

@section body {
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;电影列表&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
            DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;打开 Index.cshtml 框架页，将 Movie 页面添加到左侧菜单项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TreeNode &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;默认分类&quot;&lt;/span&gt;&lt;span&gt; Expanded&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TreeNode &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;开始页面&quot;&lt;/span&gt;&lt;span&gt; NavigateUrl&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Hello&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TreeNode&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TreeNode &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;登录页面&quot;&lt;/span&gt;&lt;span&gt; NavigateUrl&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Login&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TreeNode&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TreeNode &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;电影管理&quot;&lt;/span&gt;&lt;span&gt; NavigateUrl&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Movie&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TreeNode&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TreeNode&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ctrl+F5 运行，此时的页面效果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309214355351-1401329858.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在，我们已经完成了对数据库的读操作，并通过 FineUICore 的表格控件展现出来。&lt;/p&gt;

&lt;h2&gt;3.4、列标题文字是怎么来的？&lt;/h2&gt;
&lt;p&gt;如果你细心观察，可以发现在 Movie.cshtml 的表格控件中，我们并没有显示的定义表格列标题，而实际页面是有的，这是怎么回事？&lt;/p&gt;
&lt;p&gt;其实这个功能是 ASP.NET Core 和 FineUICore 共同努力的结果：&lt;/p&gt;
&lt;p&gt;1. 首先 Movie.cs 模型中使用 Display 注解来标识列的显示文本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Display(Name = &quot;名称&quot;)]
public string Title { get; set; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2. 然后 FineUICore 的表格控件通过 RenderField 的 For 属性来关联模型类属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其实这个代码等效于如下标签：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;DataField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; HeaderText&lt;/span&gt;&lt;span&gt;=&quot;名称&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这样的话，我们就丢失了两个优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;For属性指定的是C#代码，而DataField指定的是字符串。强类型在代码编写时有很多好处：
&lt;ol&gt;&lt;li&gt;编译时错误检查，特别是以后更改模型类属性名时，可以在编译时发现错误，而不是等到运行时才发现这个名字忘记改了。&lt;/li&gt;
&lt;li&gt;VS贴心的智能提示。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;HeaderText同样是字符串，不仅容易写错，而且在两处定义相同的代码会产生冗余数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3.5、格式化显示日期&lt;/h2&gt;
&lt;p&gt;上面显示的发布日期是不友好的，我们可以在页面标签中指定格式化字符串，修改后的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时的页面显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200309220240285-1863426903.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;4.1、新增页面模型&lt;/h2&gt;
&lt;p&gt;新建一个 MovieNew 页面，将页面模型类修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieNewModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MovieContext _context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MovieNewModel(MovieContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnGet()
        {

        }

        [BindProperty]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Movie Movie { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; OnPostBtnSave_ClickAsync()
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ModelState.IsValid)
            {
                _context.Movies.Add(Movie);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();

                Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;保存成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这段代码主要有三部分组成：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过构造函数注入的数据库上下文（MovieContext）：用于数据库查询和更新操作&lt;/li&gt;
&lt;li&gt;使用 BindProperty 修饰的 Movie 属性：BindProperty一般用于模型类的属性，执行页面回发时的数据绑定（虽然回发是WebForms中的一个术语，但用在这里也恰如其分），ASP.NET Core会从HTTP请求的各个地方（URL，Headers，Forms）查找与BindProperty相匹配的键值，并对属性进行赋值。&lt;/li&gt;
&lt;li&gt;OnPostXXXXAsync：这个称为页面模型处理器（Handler），用于执行页面上的【保存】按钮的回发操作。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在OnPostXXXXAsync处理程序中，执行如下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;判断模型是否有效（ModelState.IsValid）：这是 ASP.NET Core 提供的一个属性，在执行模型绑定之后会紧接着进行模型验证，验证规则定义在模型类（Movie），比如[Required]，[DataType(DataType.Date)]就是常见的验证规则。&lt;/li&gt;
&lt;li&gt;将绑定后的Movie属性添加到数据库上下文（Movies.Add）并执行数据库保存操作（SaveChangesAsync）：在Movies.Add操作时，只是将内存中的Movie属性添加一个新数据的标记，并没有真正执行数据库操作，只有在调用SaveChangesAsync异步方法时EF Core才会动态生成SQL语句并执行。&lt;/li&gt;
&lt;li&gt;返回 FineUICore.UIHelper.Result()：这是 FineUICore 提供的一个方法，FineUICore 中所有页面回发都是 HTTP AJAX 请求（而非整个页面的表单提交），都需要返回 UIHelper.Result()。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;之前我曾写过一篇文章专门介绍 UIHelper，感兴趣的同学可以参考一下：&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/6473592.html&quot; target=&quot;_blank&quot;&gt;FineUIMvc随笔（5）UIHelper是个什么梗？&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;4.2、新增页面视图&lt;/h2&gt;
&lt;p&gt;将页面视图文件修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieNewModel
@{
    ViewData[&quot;Title&quot;] = &quot;MovieNew&quot;;
}

@section body {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:SimpleForm &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;新建&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TextBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TextBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:DatePicker &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.ReleaseDate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:DatePicker&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TextBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Genre&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TextBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:NumberBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Price&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:NumberBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;BtnSave&quot;&lt;/span&gt;&lt;span&gt; ValidateForms&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; Icon&lt;/span&gt;&lt;span&gt;=&quot;SystemSave&quot;&lt;/span&gt;&lt;span&gt;
                      OnClick&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;BtnSave_Click&quot;)&quot; OnClickFields&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;保存&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:SimpleForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;页面显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310114600883-460167045.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击保存按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310114624343-1677396970.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回列表页面，可以看到我们刚刚新增的数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310114651497-1133371291.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里使用了 FineUICore 提供的一些表单控件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;SimpleForm作为一个表单容器：不仅在UI上提供视觉上的面板样式，而且在点击【保存】按钮时，可以通过 OnClickFields=&quot;SimpleForm1&quot; 来指定回发操作时需要提交的表单数据。&lt;/li&gt;
&lt;li&gt;TextBox、DatePicker、NumberBox：这些表单字段分别对应于不同的数据表字段类型，For属性对应一个C#表达式，这种强名称的写法不仅可以在编译时错误检查，而且可以充分利用VS的智能提示。同时 FineUICore 会将相应的模型类注解解析成对应的控件属性应用到控件上，比较[Required]注解对应于TextBox控件的 Required=true属性。&lt;/li&gt;
&lt;li&gt;按钮的点击事件OnClick：通过Url.Handler 来生成一个服务器请求处理URL，本示例中也就是：MovieNew?handler=BtnSave_Click
&lt;ol&gt;&lt;li&gt;ValidateForms=&quot;SimpleForm1&quot;：指定点击按钮回发之前需要执行的客户端验证表单。&lt;/li&gt;
&lt;li&gt;OnClickFields=&quot;SimpleForm1&quot;：指定点击按钮回发时需要提交的表单数据。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;4.3、查看 HTTP POST 请求的数据&lt;/h2&gt;
&lt;p&gt;下面，我们通过浏览器的调试工具来观察点击【保存】按钮时的HTTP POST请求：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310114843096-1396463408.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的每个地方都是可追溯的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Request URL：是我们通过 Url.Handler(&quot;BtnSave_Click&quot;) 生成的，对应于页面模型类的 OnPostBtnSave_ClickAsync&lt;/li&gt;
&lt;li&gt;Form Data：里面的 Movie.Title 等字段的值是我们通过 OnClickFields=&quot;SimpleForm1&quot; 指定的，FineUICore 会自动计算表单内所有字段的值，并添加到 HTTP POST 请求正文中。&lt;/li&gt;
&lt;li&gt;_RequestVerificationToken：是我们在 Shared/_Layout.cshtml 中通过 @Html.AntiForgeryToken() 指定的。ASP.NET Core 将此字段用于阻止CSRF工具，无需特别关注。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;4.4、客户端模型验证&lt;/h2&gt;
&lt;p&gt; 前面我们多次提到了模型验证，具体来说分为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端模型验证：使用 FineUICore 控件的内置支持，可以在回发事件之前触发表单的JavaScript验证（来源于模型类的数据注解）。&lt;/li&gt;
&lt;li&gt;服务端模型验证：使用 ASP.NET Core 的内置支持，ModelState.IsValid 可以用来在服务端验证模型（来源于模型类的数据注解），并在失败时调用 FineUICore.Alert.Show 在前端显示提示对话框。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上述两个验证都是利用了模型类的数据注解，这也是 ASP.NET Core 一个强大的地方，无需我们在多处维护验证规则和验证提示。而 FineUICore 表单控件的内置属性支持，将进一步简化开发人员的代码编写，提升产品的可维护性。&lt;/p&gt;
&lt;p&gt;在前端，如果未输入【名称】，点击【保存】按钮时就会弹出提示框，并阻止进一步的回发操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310114746067-1743747927.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这个大家都能看明白。那有的网友就有疑问了，既然模型验证已经在客户端被阻止了，服务器端验证又有什么用呢？&lt;/p&gt;

&lt;p&gt;其实服务器端验证非常重要！&lt;/p&gt;
&lt;p&gt;因为客户端验证可以很轻松的被有经验的开发人员绕过！我之前在讲解《&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/6211226.html&quot; target=&quot;_blank&quot;&gt;ASP.NET MVC快速入门&lt;/a&gt;》时，曾经有过详细的剖析，感兴趣的可以看一下。&lt;/p&gt;

&lt;h2&gt;4.5、自定义JavaScript来绕开客户端验证&lt;/h2&gt;
&lt;p&gt;这里，我们就使用一个简单的 JavaScript 调用，来绕开客户端验证。&lt;/p&gt;
&lt;p&gt;在 MovieNew 页面，F12打开浏览器调试工具，执行如下 JS 片段：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
F.doPostBack('/MovieNew?handler=BtnSave_Click', 'SimpleForm1')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在服务器模型验证失败，FineUICore会自动处理并弹出错误提示对话框：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310123120792-1719327645.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4.6、自定义模型验证错误消息&lt;/h2&gt;
&lt;p&gt;上面的服务端模型验证错误消息是英文的，并且和客户端的验证消息不一致。其实我们可以自定义验证错误消息，修改 Movie 模型类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[Required(ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;名称不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
[Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Title { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为 Required 数据注解增加了 ErrorMessage 参数，现在再验证上述的两个验证界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310171746062-1830629373.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310171800258-2033982029.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;五、编辑页面&lt;/h2&gt;
&lt;h2&gt;5.1、编辑页面模型&lt;/h2&gt;
&lt;p&gt;新建一个 MovieEdit 页面，将页面模型类修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieEditModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MovieContext _context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MovieEditModel(MovieContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }

        [BindProperty]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Movie Movie { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnGetAsync(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            Movie &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt; _context.Movies.FirstOrDefaultAsync(m =&amp;gt; m.ID ==&lt;span&gt; id);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Movie == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Page();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; OnPostBtnSave_ClickAsync()
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ModelState.IsValid)
            {
                _context.Attach(Movie).State &lt;/span&gt;=&lt;span&gt; EntityState.Modified;

                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();
                    Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!_context.Movies.Any(e =&amp;gt; e.ID ==&lt;span&gt; Movie.ID))
                    {
                        Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;指定的电影不存在：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Movie.Title);
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码主要有如下几个部分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过构造函数注入的数据库上下文（MovieContext）&lt;/li&gt;
&lt;li&gt;使用[BindProperty]修饰的Movie属性，有两个作用：
&lt;ol&gt;&lt;li&gt;在 OnGet 时将数据从模型类传入页面视图&lt;/li&gt;
&lt;li&gt;在 OnPost 时，ASP.NET Core执行模型绑定，将HTTP POST提交的数据绑定到 Movie 属性&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;OnGetAsync：页面初始化代码，从数据库检索数据，并保存到Movie属性&lt;/li&gt;
&lt;li&gt;OnPostBtnSave_ClickAsync：点击【保存】按钮时对应的页面模型处理器（Handler）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;5.2、编辑页面视图&lt;/h2&gt;
&lt;p&gt;将编辑页面视图代码修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page &quot;{id:int}&quot;
@model FineUICore.EmptyProject.RazorPages.MovieEditModel
@{
    ViewData[&quot;Title&quot;] = &quot;MovieEdit&quot;;
}

@section body {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:SimpleForm &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;编辑&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:HiddenField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.ID&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:HiddenField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TextBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TextBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:DatePicker &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.ReleaseDate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:DatePicker&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TextBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Genre&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TextBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:NumberBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Price&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:NumberBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;BtnSave&quot;&lt;/span&gt;&lt;span&gt; ValidateForms&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; Icon&lt;/span&gt;&lt;span&gt;=&quot;SystemSave&quot;&lt;/span&gt;&lt;span&gt;
                      OnClick&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;BtnSave_Click&quot;)&quot; OnClickFields&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;保存&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:SimpleForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个页面和 MovieNew 很相似，主要有两个不同的地方：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;@page 后面多了个参数&lt;/li&gt;
&lt;li&gt;新增了HiddenField表单字段保存当前电影的ID&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;5.3、路由模板&lt;/h2&gt;
&lt;p&gt;首先来看下 @page 指令后面的参数 {id:int}，这是一个路由模板，指定了访问页面的URL中必须带一个不为空的整形参数。&lt;/p&gt;
&lt;p&gt;在浏览器中，我们可以通过类似的URL访问：/MovieEdit/2&lt;/p&gt;
&lt;p&gt;如果在访问路径中缺少了后面的 /2 ，ASP.NET Core 路由引擎会直接返回 HTTP 404：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310175722658-1019356892.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面看下 OnGet 的初始化处理：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Movie = &lt;span&gt;await&lt;/span&gt; _context.Movies.FirstOrDefaultAsync(m =&amp;gt; m.ID ==&lt;span&gt; id);

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Movie == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先在数据库中查找 ID 为传入值的电影，如果指定的电影不存在，则返回 NotFound ，ASP.NET Core会将此解析为一个 HTTP 404 响应，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310180227946-1159105564.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;5.4、更新电影信息&lt;/h2&gt;
&lt;p&gt;更新当前电影信息的逻辑如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
_context.Attach(Movie).State =&lt;span&gt; EntityState.Modified;

&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();
Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码涉及三个操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Attach操作将一个实体对象添加到数据库上下文中，并将其状态更新为 Modified。我之前曾写过一篇剖析Attach的文章，感兴趣的同学可以自行查阅：&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/3280632.html&quot; target=&quot;_blank&quot;&gt;AppBox升级进行时 - Attach陷阱（Entity Framework）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SaveChangesAsync会执行数据库更新操作，EF Core会生成Update的SQL语句，并在Where字句中通过ID来指定需要更新的数据。&lt;/li&gt;
&lt;li&gt;FineUICore.Alert在前台界面给用户一个明确的提示。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;正常操作完毕之后，页面是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310194842688-1190064022.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;5.5、处理并发冲突&lt;/h2&gt;
&lt;p&gt;上面的更新操作放在一个try-catch语句中，catch的DbUpdateConcurrencyException参数表明我们需要捕获并发冲突的异常。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (!_context.Movies.Any(e =&amp;gt; e.ID ==&lt;span&gt; Movie.ID))
{
    Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;指定的电影不存在：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Movie.Title);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这段逻辑中，首先查找指定 Movie.ID 的数据是否存在，如果不存在则提示用户。&lt;/p&gt;

&lt;p&gt;什么情况下会出现这个异常呢？&lt;/p&gt;
&lt;p&gt;当我们（张三）打开某个电影的编辑页面之后，另一个用户（李四）在表格页面删除了相同的电影，然后张三更新这个电影信息。很明显，此时这条电影信息已经被删除了。&lt;/p&gt;
&lt;p&gt;我们可以手工重现：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;打开页面 /MovieEdit/2&lt;/li&gt;
&lt;li&gt;在点击【保存】按钮之前，在 VS 中打开【SQL Server资源管理器】面板，并删除ID==2的这个数据&lt;/li&gt;
&lt;li&gt;点击【保存】按钮，此时会出现错误提示。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310195649308-650268656.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310194830411-1929092236.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;


&lt;p&gt;前面的新增页面和编辑页面，我们都是通过URL直接访问的，如何将其整合到列表页面呢？&lt;/p&gt;
&lt;p&gt;我们可以使用内嵌IFrame的Window控件，首先在页面上定义一个 Window 控件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Window &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Window1&quot;&lt;/span&gt;&lt;span&gt; IsModal&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Target&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt; EnableResize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
          EnableMaximize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; EnableIFrame&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;650&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt;
          OnClose&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Window1_Close&quot;)&quot; OnCloseFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在点击新增按钮时，显示这个Window控件并传入IFrame网址：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; onNewClick(event) {
    F.ui.Window1.show(&lt;/span&gt;'@Url.Content(&quot;~/MovieNew&quot;)', '新增'&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6.1、更新表格页面&lt;/h2&gt;
&lt;p&gt;更新后的 Movie.cshtml 代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieModel
@{
    ViewData[&quot;Title&quot;] = &quot;Movie&quot;;
}

@section body {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Panel &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Layout&lt;/span&gt;&lt;span&gt;=&quot;Fit&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;用户管理&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionEdit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Toolbar &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Toolbar1&quot;&lt;/span&gt;&lt;span&gt; Position&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;btnNew&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;PlusCircle&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;新增&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Listener &lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;=&quot;click&quot;&lt;/span&gt;&lt;span&gt; Handler&lt;/span&gt;&lt;span&gt;=&quot;onNewClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Toolbar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Panel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Window &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Window1&quot;&lt;/span&gt;&lt;span&gt; IsModal&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Target&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt; EnableResize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
              EnableMaximize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; EnableIFrame&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;650&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt;
              OnClose&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Window1_Close&quot;)&quot; OnCloseFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}

@section script {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; onNewClick(event) {
            F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieNew&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;新增&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionEdit(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn edit&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-pencil f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        F.ready(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; grid1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; F.ui.Grid1;
            grid1.el.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.action-btn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cnode &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; rowData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; grid1.getRowData(cnode.closest(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.f-grid-row&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieEdit/&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; rowData.id, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                }
            });

        });

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相比之前的代码，这次的更新主要集中在以下几点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;为了将【新增】按钮放在在工具栏中，并为以后的搜索框预留位置，我们在 Grid 控件的外面嵌套了一个面板控件（Panel1）。&lt;/li&gt;
&lt;li&gt;更新布局：去除Grid1的 IsViewPort 属性，为Panel1增加 IsViewPort=true和 Layout=Fit，这两个属性是让面板（Panel1）占据整个页面，并让内部的表格（Grid1）填充整个面板区域。&lt;/li&gt;
&lt;li&gt;放置于工具栏的【新增】按钮，并通过Listener标签来定义客户端的点击脚本。&lt;/li&gt;
&lt;li&gt;表格新增一个编辑列，并通过 RendererFunction来指定客户端渲染函数。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; 现在页面的显示效果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200310232851036-1043833968.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;6.2、行编辑按钮&lt;/h2&gt;
&lt;p&gt;行编辑按钮是通过一个JS渲染出来的，RenderField的RendererFunction可以指定一个渲染函数，表格在进行行渲染时会调用此函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionEdit(value, params) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; '&amp;lt;a class=&quot;action-btn edit&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-pencil f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;'&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数返回一个HTML片段，一个可点击的超链接，显示内容则是一个编辑图标。&lt;/p&gt;
&lt;p&gt;基于页面标签和JS代码分离的原则，我们把超链接的 href 属性留空（href=&quot;javascript:;&quot;），并使用如下脚本注册编辑按钮的点击事件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
F.ready(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; grid1 =&lt;span&gt; F.ui.Grid1;
    grid1.el.on(&lt;/span&gt;'click', 'a.action-btn', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cnode = $(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rowData = grid1.getRowData(cnode.closest('.f-grid-row'&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cnode.hasClass('edit'&lt;span&gt;)) {
            F.ui.Window1.show(&lt;/span&gt;'@Url.Content(&quot;~/MovieEdit/&quot;)' + rowData.id, '编辑'&lt;span&gt;);
        }
    });

});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这段JS代码中：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;F.ready 是由 FineUICore 提供的一个入口点，会在页面上控件初始化完毕后调用。所有自定义的初始化代码都应该放在 F.ready 的回调函数中。&lt;/li&gt;
&lt;li&gt;通过 F.ui.Grid1 获取表格控件的客户端实例，并通过 jQuery 的 on 函数来注册行编辑按钮的点击事件。F.ui.Grid1.el 表示的是表格控件的最外层元素。&lt;/li&gt;
&lt;li&gt;通过 F.ui.Grid1.getRowData 获取行信息，其中 rowData.id 对应当前行标识符（由表格的DataIdField指定对应于数据库表的哪个字段）。&lt;/li&gt;
&lt;li&gt;使用 F.ui.Windows.show 来弹出窗体，并传入编辑页面的URL：/MovieEdit/2&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;6.3、窗体的关闭事件&lt;/h2&gt;
&lt;p&gt;在前面窗体（Window1）的标签定义中，我们看到有 OnClose 事件处理函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
OnClose=&quot;@Url.Handler(&quot;Window1_Close&quot;)&quot; OnCloseFields=&quot;Panel1&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是我们尝试点击弹出窗体右上角的关闭按钮，发现并不能触发这个关闭事件。&lt;/p&gt;
&lt;p&gt;这是因为窗体有个控制关闭行为的属性CloseAction=&quot;Hide&quot;，默认值Hide是意思就是简单关闭，如果希望关闭之后还触发OnClose事件，我们需要设置： CloseAction=&quot;HidePostBack&quot;&lt;/p&gt;

&lt;p&gt;这个回发在什么情况下触发呢？&lt;/p&gt;
&lt;p&gt;在弹出窗体IFrame页面内，保存成功时（不管是新增还是编辑）都会导致表格数据的改变，此时我们需要通知窗体（Window1）触发关闭事件。&lt;/p&gt;

&lt;p&gt;在窗体关闭事件中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostWindow1_CloseAsync(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] Grid1_fields)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Grid1 = UIHelper.Grid(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movies = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.ToListAsync();
    Grid1.DataSource(movies, Grid1_fields);

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;首先通过 UIHelper.Grid 获取表格控件帮助类，这是由 FineUICore 提供的一个辅助方法，注意这个获取的 Grid1 仅仅是一个帮助类，而非表格控件对象。因为在 ASP.NET MVC/Core 中，回发时不会带上页面状态信息（没有了WebForms中ViewState机制），因此在服务器端无法还原表格控件及其属性。&lt;/li&gt;
&lt;li&gt;重新获取电影数据，并通过表格帮助类提供的 DataSource 函数来更新表格。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;6.4、更新编辑页面&lt;/h2&gt;
&lt;p&gt;将编辑页面的代码更新为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page &quot;{id:int}&quot;
@model FineUICore.EmptyProject.RazorPages.MovieEditModel
@{
    ViewData[&quot;Title&quot;] = &quot;MovieEdit&quot;;
}

@section body {
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Panel &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; AutoScroll&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Layout&lt;/span&gt;&lt;span&gt;=&quot;Fit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Toolbar &lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;=&quot;Bottom&quot;&lt;/span&gt;&lt;span&gt; ToolbarAlign&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;BtnClose&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;Close&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;关闭&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Listener &lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;=&quot;click&quot;&lt;/span&gt;&lt;span&gt; Handler&lt;/span&gt;&lt;span&gt;=&quot;F.activeWindow.hide();&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:ToolbarSeparator&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:ToolbarSeparator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;BtnSave&quot;&lt;/span&gt;&lt;span&gt; ValidateForms&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;Save&quot;&lt;/span&gt;&lt;span&gt;
                              OnClick&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;BtnSave_Click&quot;)&quot; OnClickFields&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;保存后关闭&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Toolbar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:SimpleForm &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;SimpleForm1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:HiddenField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.ID&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:HiddenField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TextBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TextBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:DatePicker &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.ReleaseDate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:DatePicker&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TextBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Genre&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TextBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:NumberBox &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movie.Price&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:NumberBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:SimpleForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Panel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和之前的代码相比，主要的改动：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;为了在工具栏中放置【关闭】和【保存后关闭】按钮，我们在SimpleForm外面嵌套了一个面板（Panel1）控件。&lt;/li&gt;
&lt;li&gt;布局的调整和列表页面是一样的。&lt;/li&gt;
&lt;li&gt;【关闭】按钮的行为直接通过内联JavaScript脚本定义：F.activeWindow.hide(); 也即是关闭当前激活的窗体对象（在当前页面外部定义的Window1控件）&lt;/li&gt;
&lt;li&gt;【保存后关闭】按钮的标签无变化，但是为了在关闭后刷新表格（也就是调用Window1的OnClose事件），我们需要在 BtnSave_Click 事件中进行处理。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311000546964-822182247.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;6.5、先弹出提示对话框，再关闭当前窗体&lt;/h2&gt;
&lt;p&gt;我们来看下【保存后关闭】按钮的点击事件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; OnPostBtnSave_ClickAsync()
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ModelState.IsValid)
    {
        _context.Attach(Movie).State &lt;/span&gt;=&lt;span&gt; EntityState.Modified;

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();
            Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty, MessageBoxIcon.Success, ActiveWindow.GetHidePostBackReference());
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!_context.Movies.Any(e =&amp;gt; e.ID ==&lt;span&gt; Movie.ID))
            {
                Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;指定的电影不存在：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Movie.Title);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你对之前的代码还有印象，你会发现上面的代码只有一处改动，那就是把原来的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Alert.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改为了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Alert.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;.Empty, MessageBoxIcon.Success, ActiveWindow.GetHidePostBackReference());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这么一个小小的改动却包含着一个大的操作流程变化：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先：保存成功后，弹出提示对话框&lt;/li&gt;
&lt;li&gt;其次：用户点击提示对话框的【确定】按钮时，执行脚本：ActiveWindow.GetHidePostBackReference()&lt;/li&gt;
&lt;li&gt;再次：这个脚本会先关闭当前IFrame所在的窗体控件（也就是在外部页面定义的Window1控件）&lt;/li&gt;
&lt;li&gt;之后：触发Window1控件的关闭事件（OnClose）&lt;/li&gt;
&lt;li&gt;最后：在Window1的关闭事件中，重新绑定表格（以反映最新的数据更改）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一个看似不起眼的功能，FineUICore却花费了大量的心思来精雕细琢，确保开发人员以尽量少的代码完成所需的业务功能。&lt;/p&gt;

&lt;h2&gt;6.6、表格与窗体互动（动图）&lt;/h2&gt;
&lt;p&gt;最后，通过一个动态（GIF）来看下表格和窗体是如何交互的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311100606399-121614989.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;7.1、行删除按钮&lt;/h2&gt;
&lt;p&gt;前面我们已经为表格增加了行编辑按钮，现在照葫芦画瓢，我们再增加一个行删除按钮：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionDelete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列渲染函数定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function renderActionDelete(value, params) {
    return '&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;action-btn delete&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;f-icon f-icon-trash f-grid-cell-iconfont&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;';
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个包含了删除图标的超链接，其中 f-icon f-icon-trash 指定了一个删除样式的字体图标。这个是 FineUICore 内置的，可以在这里查看所有&lt;a href=&quot;https://pages.fineui.com/#/config/IconFontsFA&quot; target=&quot;_blank&quot;&gt;可用的字体图标&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311101533454-864573898.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;7.2、行删除按钮的自定义回发&lt;/h2&gt;
&lt;p&gt;下面为行删除按钮添加点击事件，并将数据传入后台执行删除事件。&lt;/p&gt;
&lt;p&gt;好吧，这些还是WebForms的习惯用语，其实挺亲切的，也没有违和感，当然你也可以按照 ASP.NET Core 的说法来：发起一个HTTP POST请求到页面模型处理器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
F.ready(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; grid1 =&lt;span&gt; F.ui.Grid1;
    grid1.el.on(&lt;/span&gt;'click', 'a.action-btn', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cnode = $(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rowData = grid1.getRowData(cnode.closest('.f-grid-row'&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cnode.hasClass('delete'&lt;span&gt;)) {
            F.confirm({
                message: &lt;/span&gt;'确定删除此记录？'&lt;span&gt;,
                target: &lt;/span&gt;'_top'&lt;span&gt;,
                ok: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    F.doPostBack(&lt;/span&gt;'@Url.Handler(&quot;Grid_RowDelete&quot;)', 'Panel1'&lt;span&gt;, {
                        deletedRowID: rowData.id
                    });
                }
            });
        }
    });

});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码中：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先弹出一个确认对话框（F.confirm），在得到用户的许可后，再执行回发操作（发起HTTP POST请求）&lt;/li&gt;
&lt;li&gt;这个回发操作是由 FineUICore 提供的 F.doPostBack 进行，这里有&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/11995203.html&quot; target=&quot;_blank&quot;&gt;一篇文章详细讲解 F.doPostBack&lt;/a&gt; 使用细节。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;F.doPostBack的函数签名如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
F.doPostBack(url, fields, params)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三个参数分别是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;url：发送请求的地址&lt;/li&gt;
&lt;li&gt;fields：【可选】发送到服务器的表单字段数据，以逗号分隔多个表单字段（如果是容器，则查找容器内的所有表单字段）&lt;/li&gt;
&lt;li&gt;params：【可选】发送到服务器的数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;此时点击行删除按钮，页面的显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311102724742-1827704606.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt; &lt;/p&gt;

&lt;h2&gt;7.3、行删除事件&lt;/h2&gt;
&lt;p&gt;用户点击确认对话框的【确定】按钮时，才会发起回发请求：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostGrid_RowDeleteAsync(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deletedRowID)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Grid1 = UIHelper.Grid(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.FindAsync(deletedRowID);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (movie != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        _context.Movies.Remove(movie);
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movies = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.ToListAsync();
        Grid1.DataSource(movies, Grid1_fields);
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个处理器接受两个参数：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Grid1_fields：这个是由 F.doPostBack 时第二个参数 'Panel1' 传入的。这个参数表示表格用到的数据字段列表，在数据绑定时用来限制哪些列的数据返回客户端。&lt;/li&gt;
&lt;li&gt;deletedRowID：这个是由 F.doPostBack 时第三个参数 { deletedRowID: rowData.id } 传入的。特别注意，指定参数类型为int就可以避免通过C#进行强制类型转换，因为数据模型中ID为整形（而不是字符串）。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;处理器的主体代码中：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先根据表主键查找指定的movie&lt;/li&gt;
&lt;li&gt;然后从数据库上下文删除这个movie，注意此时仅仅是将movie标记为删除项，而非真正的数据库删除操作&lt;/li&gt;
&lt;li&gt;其次SaveChanges动态创建删除SQL语句并执行&lt;/li&gt;
&lt;li&gt;最后查询所有的电影列表，并重新绑定表格&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311104836848-1475606787.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;7.4、搜索框&lt;/h2&gt;
&lt;p&gt;为了添加搜索框，我们需要再次调整页面布局，在面板中放入一个 Form 控件，此时的面板标签：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Panel &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Layout&lt;/span&gt;&lt;span&gt;=&quot;VBox&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;用户管理&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Form &lt;/span&gt;&lt;span&gt;ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;TBSearchMessage&quot;&lt;/span&gt;&lt;span&gt; ShowLabel&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; EmptyText&lt;/span&gt;&lt;span&gt;=&quot;在名称中搜索&quot;&lt;/span&gt;&lt;span&gt; Trigger1Icon&lt;/span&gt;&lt;span&gt;=&quot;Clear&quot;&lt;/span&gt;&lt;span&gt; ShowTrigger1&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Trigger2Icon&lt;/span&gt;&lt;span&gt;=&quot;Search&quot;&lt;/span&gt;&lt;span&gt;
                                          OnTrigger1Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage_Trigger1&quot;)&quot; OnTrigger1ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;
                                          OnTrigger2Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage_Trigger2&quot;)&quot; OnTrigger2ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; BoxFlex&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionEdit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionDelete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Toolbar &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Toolbar1&quot;&lt;/span&gt;&lt;span&gt; Position&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;btnNew&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;PlusCircle&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;新增&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Listener &lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;=&quot;click&quot;&lt;/span&gt;&lt;span&gt; Handler&lt;/span&gt;&lt;span&gt;=&quot;onNewClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Toolbar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Panel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相比之前的代码，主要的调整为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;新增一个触发器输入框控件 TwinTriggerBox，并放置于一个 Form 面板中。&lt;/li&gt;
&lt;li&gt;将Form面板放在 Grid 的前面。&lt;/li&gt;
&lt;li&gt;调整布局：外部面板（Panel1）的布局由（Layout=Fit）改为（Layout=VBox），并为表格增加（BoxFlex=1）。这个调整的目的是让Form控件自适应高度，而Grid占据剩余的全部高度。&lt;/li&gt;
&lt;li&gt;将Toolbars由原来Panel1移到Grid1里面，这样可以确保【新增】按钮在表格里面，也就是搜索框的下面。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;早在 2012 年，我就写过一系列文章介绍 FineUI 的布局，现在仍然可以作为参考而不过时：&lt;a href=&quot;https://www.cnblogs.com/sanshi/archive/2012/07/27/2611116.html&quot;&gt;https://www.cnblogs.com/sanshi/archive/2012/07/27/2611116.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在的页面效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311123401626-2146961358.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;7.5、搜索框事件&lt;/h2&gt;
&lt;p&gt;在搜索框的标签定义中，有两个回发事件的定义，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;OnTrigger1Click=&quot;@Url.Handler(&quot;TBSearchMessage_Trigger1&quot;)&quot; OnTrigger1ClickFields=&quot;Panel1&quot;
OnTrigger2Click=&quot;@Url.Handler(&quot;TBSearchMessage_Trigger2&quot;)&quot; OnTrigger2ClickFields=&quot;Panel1&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个事件分别对应触发器输入框的两个触发按钮：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;清空图标：OnTrigger1Click&lt;/li&gt;
&lt;li&gt;搜索图标：OnTrigger2Click&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;由于这两个事件都需要进行表格的重新绑定，所以我们先将其提取为一个独立的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task ReloadGrid(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; searchMessage)
{
    IQueryable&lt;/span&gt;&amp;lt;Movie&amp;gt; q =&lt;span&gt; _context.Movies;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 搜索框&lt;/span&gt;
    searchMessage = searchMessage?&lt;span&gt;.Trim();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(searchMessage))
    {
        q &lt;/span&gt;= q.Where(s =&amp;gt;&lt;span&gt; s.Title.Contains(searchMessage));
    }

    Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.ToListAsync();
    UIHelper.Grid(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).DataSource(Movies, Grid1_fields);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码中，为了将检索条件带入数据库查询，我们做了一些改变：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;IQueryable&amp;lt;Movie&amp;gt;：是 System.Linq 提供的一个查询功能，在各种查询条件以及分页排序时都需要用到，非常重要。&lt;/li&gt;
&lt;li&gt;q.Where：指定具体的查询条件&lt;/li&gt;
&lt;li&gt;q.ToList：执行数据库查询操作&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面看下搜索框的两个事件定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostTBSearchMessage_Trigger1Async(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] Grid1_fields)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清空搜索框，并隐藏清空图标&lt;/span&gt;
    TBSearchMessageUI.Text(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
    TBSearchMessageUI.ShowTrigger1(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
    &lt;span&gt;await&lt;/span&gt; ReloadGrid(Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostTBSearchMessage_Trigger2Async(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示清空图标&lt;/span&gt;
    TBSearchMessageUI.ShowTrigger1(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
    &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, TBSearchMessage);

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个事件逻辑对比着看就很清楚了：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;点击清空图标：清空搜索框文本，隐藏清空图标，重新加载表格&lt;/li&gt;
&lt;li&gt;点击搜索图标：显示清空图标，重新加载表格&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311130237982-463376791.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;7.6、服务端标记搜索框不能为空&lt;/h2&gt;
&lt;p&gt;在上面的实现中，如果用户将搜索框留空并点击搜索图标，还是会触发搜索事件。&lt;/p&gt;
&lt;p&gt;我们在服务器端阻止这个行为，FineUICore提供了标记某个字段无效的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostTBSearchMessage_Trigger2Async(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(TBSearchMessage))
    {
        TBSearchMessageUI.MarkInvalid(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;搜索文本不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示清空图标&lt;/span&gt;
        TBSearchMessageUI.ShowTrigger1(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
        &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, TBSearchMessage);
    }


    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这段代码中，如果搜索文本为空，会调用文本框的 MarkInvalid 方法将文本框标记为无效。&lt;/p&gt;
&lt;p&gt;看下实际的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311130650842-7600541.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;目前为止，我们来看下更新后的列表页面视图和模型类的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieModel
@{
    ViewData[&quot;Title&quot;] = &quot;Movie&quot;;
}

@section body {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Panel &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Layout&lt;/span&gt;&lt;span&gt;=&quot;VBox&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;用户管理&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Form &lt;/span&gt;&lt;span&gt;ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;TBSearchMessage&quot;&lt;/span&gt;&lt;span&gt; ShowLabel&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; EmptyText&lt;/span&gt;&lt;span&gt;=&quot;在名称中搜索&quot;&lt;/span&gt;&lt;span&gt; Trigger1Icon&lt;/span&gt;&lt;span&gt;=&quot;Clear&quot;&lt;/span&gt;&lt;span&gt; ShowTrigger1&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Trigger2Icon&lt;/span&gt;&lt;span&gt;=&quot;Search&quot;&lt;/span&gt;&lt;span&gt;
                                              OnTrigger1Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage_Trigger1&quot;)&quot; OnTrigger1ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;
                                              OnTrigger2Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage_Trigger2&quot;)&quot; OnTrigger2ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; BoxFlex&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionEdit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionDelete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Toolbar &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Toolbar1&quot;&lt;/span&gt;&lt;span&gt; Position&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;btnNew&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;PlusCircle&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;新增&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Listener &lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;=&quot;click&quot;&lt;/span&gt;&lt;span&gt; Handler&lt;/span&gt;&lt;span&gt;=&quot;onNewClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Toolbar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Panel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Window &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Window1&quot;&lt;/span&gt;&lt;span&gt; IsModal&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Target&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt; EnableResize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
              EnableMaximize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; EnableIFrame&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;650&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt;
              OnClose&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Window1_Close&quot;)&quot; OnCloseFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}

@section script {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; onNewClick(event) {
            F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieNew&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;新增&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionEdit(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn edit&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-pencil f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionDelete(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn delete&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-trash f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }


        F.ready(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; grid1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; F.ui.Grid1;
            grid1.el.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.action-btn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cnode &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; rowData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; grid1.getRowData(cnode.closest(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.f-grid-row&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.confirm({
                        message: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;确定删除此记录？&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        target: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_top&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        ok: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            F.doPostBack(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Handler(&quot;Grid_RowDelete&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Panel1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
                                deletedRowID: rowData.id
                            });
                        }
                    });
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieEdit/&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; rowData.id, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                }
            });

        });

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MovieContext _context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MovieModel(MovieContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IList&amp;lt;Movie&amp;gt; Movies { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
        {
            Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.ToListAsync();
        }


        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task ReloadGrid(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; searchMessage)
        {
            IQueryable&lt;/span&gt;&amp;lt;Movie&amp;gt; q =&lt;span&gt; _context.Movies;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 搜索框&lt;/span&gt;
            searchMessage = searchMessage?&lt;span&gt;.Trim();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(searchMessage))
            {
                q &lt;/span&gt;= q.Where(s =&amp;gt;&lt;span&gt; s.Title.Contains(searchMessage));
            }

            Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.ToListAsync();
            UIHelper.Grid(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).DataSource(Movies, Grid1_fields);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostWindow1_CloseAsync(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] Grid1_fields)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt; ReloadGrid(Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostGrid_RowDeleteAsync(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deletedRowID)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.FindAsync(deletedRowID);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (movie != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                _context.Movies.Remove(movie);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
                &lt;span&gt;await&lt;/span&gt; ReloadGrid(Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostTBSearchMessage_Trigger1Async(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] Grid1_fields)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清空搜索框，并隐藏清空图标&lt;/span&gt;
            TBSearchMessageUI.Text(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
            TBSearchMessageUI.ShowTrigger1(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt; ReloadGrid(Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostTBSearchMessage_Trigger2Async(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(TBSearchMessage))
            {
                TBSearchMessageUI.MarkInvalid(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;搜索文本不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示清空图标&lt;/span&gt;
                TBSearchMessageUI.ShowTrigger1(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
                &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, TBSearchMessage);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;8.1、数据库分页&lt;/h2&gt;
&lt;p&gt;这一节我们会给表格控件增加分页和排序，首先来看下分页的标签定义： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; BoxFlex&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; 
    DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;
    AllowPaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; IsDatabasePaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; PageSize&lt;/span&gt;&lt;span&gt;=&quot;@Model.PageSize&quot;&lt;/span&gt;&lt;span&gt; RecordCount&lt;/span&gt;&lt;span&gt;=&quot;@Model.RecordCount&quot;&lt;/span&gt;&lt;span&gt; 
    OnPageIndexChanged&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Grid1_PageIndexChanged&quot;)&quot; OnPageIndexChangedFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了支持数据库分页，我们增加如下一些属性：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;AllowPaging：启用分页&lt;/li&gt;
&lt;li&gt;IsDatabasePaging：启用数据库分页&lt;/li&gt;
&lt;li&gt;PageSize：每页显示的记录数&lt;/li&gt;
&lt;li&gt;RecordCount：总记录数&lt;/li&gt;
&lt;li&gt;OnPageIndexChanged：分页改变事件&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其中 PageSize 和 RecordCount 数据来自于模型类属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每页显示记录数&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PageSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 总记录数&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; RecordCount { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于需要在页面第一次加载时（OnGet）和HTTP POST请求时（OnPost）获取表格数据，我们将获取表格分页数据的方法提取为一个公共函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task PrepareGridData(&lt;span&gt;string&lt;/span&gt; searchMessage, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageIndex)
{
    IQueryable&lt;/span&gt;&amp;lt;Movie&amp;gt; q =&lt;span&gt; _context.Movies;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 搜索框&lt;/span&gt;
    searchMessage = searchMessage?&lt;span&gt;.Trim();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(searchMessage))
    {
        q &lt;/span&gt;= q.Where(s =&amp;gt;&lt;span&gt; s.Title.Contains(searchMessage));
    }

    RecordCount &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.CountAsync();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对传入的 pageIndex 进行有效性验证&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; pageCount = RecordCount /&lt;span&gt; PageSize;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (RecordCount % PageSize != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        pageCount&lt;/span&gt;++&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pageIndex &amp;gt; pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    {
        pageIndex &lt;/span&gt;= pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pageIndex &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        pageIndex &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分页&lt;/span&gt;
    q = q.Skip(pageIndex *&lt;span&gt; PageSize).Take(PageSize);
    

    Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.ToListAsync();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数中会对 RecordCount 和 Movies 属性进行赋值，其中 Movies 表示的就是当前分页的数据（数据库分页）。&lt;/p&gt;
&lt;p&gt;在页面第一次加载时的调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
{
    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; PrepareGridData(&lt;span&gt;string&lt;/span&gt;.Empty, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在分页改变事件中的调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostGrid1_PageIndexChangedAsync(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
    &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, Grid1_pageIndex, TBSearchMessage);

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task ReloadGrid(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; searchMessage)
{
    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; PrepareGridData(searchMessage, Grid1_pageIndex);

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Grid1UI = UIHelper.Grid(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置总记录数&lt;/span&gt;
&lt;span&gt;    Grid1UI.RecordCount(RecordCount);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置分页数据&lt;/span&gt;
&lt;span&gt;    Grid1UI.DataSource(Movies, Grid1_fields);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时的分页效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311155158226-234030904.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;8.2、保持分页状态和搜索状态&lt;/h2&gt;
&lt;p&gt;不仅如此，我们还需要对 Window1_Close、Grid_RowDelete、TBSearchMessage_Trigger1、TBSearchMessage_Trigger2 的事件处理函数进行重构，传入 Grid1_pageIndex 和 TBSearchMessage 参数。&lt;/p&gt;
&lt;p&gt;原因是我们希望在用户关闭窗体时、行删除时，以及搜索时，能够保持页面上的状态不丢失，目前的状态主要有两个：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;当前正在展现表格的哪一页？&lt;/li&gt;
&lt;li&gt;当前正在搜索哪个关键词？&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;更新后的模型类代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MovieContext _context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MovieModel(MovieContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IList&amp;lt;Movie&amp;gt; Movies { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每页显示记录数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PageSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 总记录数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; RecordCount { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; PrepareGridData(&lt;span&gt;string&lt;/span&gt;.Empty, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task PrepareGridData(&lt;span&gt;string&lt;/span&gt; searchMessage, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageIndex)
        {
            IQueryable&lt;/span&gt;&amp;lt;Movie&amp;gt; q =&lt;span&gt; _context.Movies;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 搜索框&lt;/span&gt;
            searchMessage = searchMessage?&lt;span&gt;.Trim();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(searchMessage))
            {
                q &lt;/span&gt;= q.Where(s =&amp;gt;&lt;span&gt; s.Title.Contains(searchMessage));
            }

            RecordCount &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.CountAsync();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对传入的 pageIndex 进行有效性验证&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; pageCount = RecordCount /&lt;span&gt; PageSize;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (RecordCount % PageSize != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                pageCount&lt;/span&gt;++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pageIndex &amp;gt; pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                pageIndex &lt;/span&gt;= pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pageIndex &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                pageIndex &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分页&lt;/span&gt;
            q = q.Skip(pageIndex *&lt;span&gt; PageSize).Take(PageSize);
            

            Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.ToListAsync();
        }


        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task ReloadGrid(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; searchMessage)
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; PrepareGridData(searchMessage, Grid1_pageIndex);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Grid1UI = UIHelper.Grid(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置总记录数&lt;/span&gt;
&lt;span&gt;            Grid1UI.RecordCount(RecordCount);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置分页数据&lt;/span&gt;
&lt;span&gt;            Grid1UI.DataSource(Movies, Grid1_fields);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostWindow1_CloseAsync(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, Grid1_pageIndex, TBSearchMessage);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostGrid_RowDeleteAsync(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt; TBSearchMessage, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deletedRowID)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.FindAsync(deletedRowID);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (movie != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                _context.Movies.Remove(movie);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
                &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, Grid1_pageIndex, TBSearchMessage);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostTBSearchMessage_Trigger1Async(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清空搜索框，并隐藏清空图标&lt;/span&gt;
            TBSearchMessageUI.Text(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
            TBSearchMessageUI.ShowTrigger1(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt; ReloadGrid(Grid1_fields, Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostTBSearchMessage_Trigger2Async(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(TBSearchMessage))
            {
                TBSearchMessageUI.MarkInvalid(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;搜索文本不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示清空图标&lt;/span&gt;
                TBSearchMessageUI.ShowTrigger1(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
                &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, Grid1_pageIndex, TBSearchMessage);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostGrid1_PageIndexChangedAsync(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TBSearchMessage)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, Grid1_pageIndex, TBSearchMessage);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }
        
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时对应的页面视图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieModel
@{
    ViewData[&quot;Title&quot;] = &quot;Movie&quot;;
}

@section body {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Panel &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Layout&lt;/span&gt;&lt;span&gt;=&quot;VBox&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;用户管理&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Form &lt;/span&gt;&lt;span&gt;ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;TBSearchMessage&quot;&lt;/span&gt;&lt;span&gt; ShowLabel&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; EmptyText&lt;/span&gt;&lt;span&gt;=&quot;在名称中搜索&quot;&lt;/span&gt;&lt;span&gt; Trigger1Icon&lt;/span&gt;&lt;span&gt;=&quot;Clear&quot;&lt;/span&gt;&lt;span&gt; ShowTrigger1&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Trigger2Icon&lt;/span&gt;&lt;span&gt;=&quot;Search&quot;&lt;/span&gt;&lt;span&gt;
                                              OnTrigger1Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage_Trigger1&quot;)&quot; OnTrigger1ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;
                                              OnTrigger2Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage_Trigger2&quot;)&quot; OnTrigger2ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; BoxFlex&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;
                    AllowPaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; IsDatabasePaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; PageSize&lt;/span&gt;&lt;span&gt;=&quot;@Model.PageSize&quot;&lt;/span&gt;&lt;span&gt; RecordCount&lt;/span&gt;&lt;span&gt;=&quot;@Model.RecordCount&quot;&lt;/span&gt;&lt;span&gt; 
                    OnPageIndexChanged&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Grid1_PageIndexChanged&quot;)&quot; OnPageIndexChangedFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionEdit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionDelete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Toolbar &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Toolbar1&quot;&lt;/span&gt;&lt;span&gt; Position&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;btnNew&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;PlusCircle&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;新增&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Listener &lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;=&quot;click&quot;&lt;/span&gt;&lt;span&gt; Handler&lt;/span&gt;&lt;span&gt;=&quot;onNewClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Toolbar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Panel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Window &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Window1&quot;&lt;/span&gt;&lt;span&gt; IsModal&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Target&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt; EnableResize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
              EnableMaximize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; EnableIFrame&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;650&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt;
              OnClose&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Window1_Close&quot;)&quot; OnCloseFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}

@section script {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; onNewClick(event) {
            F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieNew&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;新增&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionEdit(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn edit&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-pencil f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionDelete(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn delete&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-trash f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }


        F.ready(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; grid1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; F.ui.Grid1;
            grid1.el.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.action-btn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cnode &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; rowData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; grid1.getRowData(cnode.closest(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.f-grid-row&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.confirm({
                        message: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;确定删除此记录？&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        target: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_top&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        ok: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            F.doPostBack(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Handler(&quot;Grid_RowDelete&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Panel1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
                                deletedRowID: rowData.id
                            });
                        }
                    });
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieEdit/&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; rowData.id, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                }
            });

        });

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了验证状态保持效果，我们进行如下操作步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;转到第2页&lt;/li&gt;
&lt;li&gt;搜索关键词：【星球】，此时能保持状态：表格处于第2页&lt;/li&gt;
&lt;li&gt;转到第1页，此时能保持状态：关键词为【星球】&lt;/li&gt;
&lt;li&gt;修改一条记录并返回，此时能保持状态：表格处于第2页 + 关键词为【星球】&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面的动图展示了这一系列操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311155740513-1432621801.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;8.3、将 5 个回发事件合并为 1 个&lt;/h2&gt;
&lt;p&gt;你可能也注意到了，上述 5 个回发事件都需要接受如下三个参数：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;string[] Grid1_fields：表格需要用到的数据字段（对应模型类属性名列表）&lt;/li&gt;
&lt;li&gt;int Grid1_pageIndex：表格当前位于第几页&lt;/li&gt;
&lt;li&gt;string TBSearchMessage：搜索关键词&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;并且这 5 个回发事件最后都要重新绑定表格数据，造成很多代码都是重复的。&lt;/p&gt;
&lt;p&gt;随着程序功能的增加，这个重复会越来越多，比如更多的查询条件，以及后面要添加的表格排序，都需要添加更多的参数。&lt;/p&gt;

&lt;p&gt;对于一个注重自我修养的程序员，如此的代码重复是我们不能容忍的，重构在所难免。&lt;/p&gt;
&lt;p&gt;为了合并 5 个事件处理函数，我们需要从视图代码入手，通过参数指定需要进行的操作，所有需要回发的地方都要修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 行删除事件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
F.doPostBack('@Url.Handler(&quot;Grid_RowDelete&quot;)', 'Panel1'&lt;span&gt;, {
    deletedRowID: rowData.id
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
F.doPostBack('@Url.Handler(&quot;Movie_PostBack&quot;)', 'Panel1'&lt;span&gt;, {
    actionType: &lt;/span&gt;'delete'&lt;span&gt;,
    deletedRowID: rowData.id
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. 窗体关闭事件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
OnClose=&quot;@Url.Handler(&quot;Window1_Close&quot;)&quot; OnCloseFields=&quot;Panel1&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
OnClose=&quot;@Url.Handler(&quot;Movie_PostBack&quot;)&quot; OnCloseFields=&quot;Panel1&quot; OnCloseParameter1=&quot;@(new Parameter(&quot;actionType&quot;, &quot;close&quot;, ParameterMode.String))&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. 表格分页事件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
OnPageIndexChanged=&quot;@Url.Handler(&quot;Grid1_PageIndexChanged&quot;)&quot; OnPageIndexChangedFields=&quot;Panel1&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
OnPageIndexChanged=&quot;@Url.Handler(&quot;Movie_PostBack&quot;)&quot; OnPageIndexChangedFields=&quot;Panel1&quot; OnPageIndexChangedParameter1=&quot;@(new Parameter(&quot;actionType&quot;, &quot;page&quot;, ParameterMode.String))&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4. 搜索框事件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;OnTrigger1Click=&quot;@Url.Handler(&quot;TBSearchMessage_Trigger1&quot;)&quot; OnTrigger1ClickFields=&quot;Panel1&quot;
OnTrigger2Click=&quot;@Url.Handler(&quot;TBSearchMessage_Trigger2&quot;)&quot; OnTrigger2ClickFields=&quot;Panel1&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;OnTrigger1Click=&quot;@Url.Handler(&quot;Movie_PostBack&quot;)&quot; OnTrigger1ClickFields=&quot;Panel1&quot; OnTrigger1ClickParameter1=&quot;@(new Parameter(&quot;actionType&quot;, &quot;trigger1&quot;, ParameterMode.String))&quot;
OnTrigger2Click=&quot;@Url.Handler(&quot;Movie_PostBack&quot;)&quot; OnTrigger2ClickFields=&quot;Panel1&quot; OnTrigger2ClickParameter1=&quot;@(new Parameter(&quot;actionType&quot;, &quot;trigger2&quot;, ParameterMode.String))&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更新后的视图文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieModel
@{
    ViewData[&quot;Title&quot;] = &quot;Movie&quot;;
}

@section body {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Panel &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Layout&lt;/span&gt;&lt;span&gt;=&quot;VBox&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;用户管理&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Form &lt;/span&gt;&lt;span&gt;ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;TBSearchMessage&quot;&lt;/span&gt;&lt;span&gt; ShowLabel&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; EmptyText&lt;/span&gt;&lt;span&gt;=&quot;在名称中搜索&quot;&lt;/span&gt;&lt;span&gt; Trigger1Icon&lt;/span&gt;&lt;span&gt;=&quot;Clear&quot;&lt;/span&gt;&lt;span&gt; ShowTrigger1&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Trigger2Icon&lt;/span&gt;&lt;span&gt;=&quot;Search&quot;&lt;/span&gt;&lt;span&gt;
                                              OnTrigger1Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnTrigger1ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnTrigger1ClickParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;trigger1&quot;, ParameterMode.String))&quot;
                                              OnTrigger2Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnTrigger2ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnTrigger2ClickParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;trigger2&quot;, ParameterMode.String))&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; BoxFlex&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;
                    AllowPaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; IsDatabasePaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; PageSize&lt;/span&gt;&lt;span&gt;=&quot;@Model.PageSize&quot;&lt;/span&gt;&lt;span&gt; RecordCount&lt;/span&gt;&lt;span&gt;=&quot;@Model.RecordCount&quot;&lt;/span&gt;&lt;span&gt; 
                    OnPageIndexChanged&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnPageIndexChangedFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnPageIndexChangedParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;page&quot;, ParameterMode.String))&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionEdit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionDelete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Toolbar &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Toolbar1&quot;&lt;/span&gt;&lt;span&gt; Position&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;btnNew&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;PlusCircle&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;新增&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Listener &lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;=&quot;click&quot;&lt;/span&gt;&lt;span&gt; Handler&lt;/span&gt;&lt;span&gt;=&quot;onNewClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Toolbar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Panel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Window &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Window1&quot;&lt;/span&gt;&lt;span&gt; IsModal&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Target&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt; EnableResize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
              EnableMaximize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; EnableIFrame&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;650&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt;
              OnClose&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnCloseFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnCloseParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;close&quot;, ParameterMode.String))&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}

@section script {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; onNewClick(event) {
            F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieNew&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;新增&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionEdit(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn edit&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-pencil f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionDelete(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn delete&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-trash f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }


        F.ready(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; grid1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; F.ui.Grid1;
            grid1.el.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.action-btn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cnode &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; rowData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; grid1.getRowData(cnode.closest(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.f-grid-row&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.confirm({
                        message: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;确定删除此记录？&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        target: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_top&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        ok: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            F.doPostBack(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Handler(&quot;Movie_PostBack&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Panel1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
                                actionType: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                deletedRowID: rowData.id
                            });
                        }
                    });
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieEdit/&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; rowData.id, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                }
            });

        });

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更新后的模型类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MovieContext _context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MovieModel(MovieContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IList&amp;lt;Movie&amp;gt; Movies { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每页显示记录数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PageSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 总记录数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; RecordCount { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; PrepareGridData(&lt;span&gt;string&lt;/span&gt;.Empty, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task PrepareGridData(&lt;span&gt;string&lt;/span&gt; searchMessage, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageIndex)
        {
            IQueryable&lt;/span&gt;&amp;lt;Movie&amp;gt; q =&lt;span&gt; _context.Movies;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 搜索框&lt;/span&gt;
            searchMessage = searchMessage?&lt;span&gt;.Trim();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(searchMessage))
            {
                q &lt;/span&gt;= q.Where(s =&amp;gt;&lt;span&gt; s.Title.Contains(searchMessage));
            }

            RecordCount &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.CountAsync();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对传入的 pageIndex 进行有效性验证&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; pageCount = RecordCount /&lt;span&gt; PageSize;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (RecordCount % PageSize != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                pageCount&lt;/span&gt;++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pageIndex &amp;gt; pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                pageIndex &lt;/span&gt;= pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pageIndex &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                pageIndex &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分页&lt;/span&gt;
            q = q.Skip(pageIndex *&lt;span&gt; PageSize).Take(PageSize);


            Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.ToListAsync();
        }


        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task ReloadGrid(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; searchMessage)
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; PrepareGridData(searchMessage, Grid1_pageIndex);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Grid1UI = UIHelper.Grid(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置总记录数&lt;/span&gt;
&lt;span&gt;            Grid1UI.RecordCount(RecordCount);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置分页数据&lt;/span&gt;
&lt;span&gt;            Grid1UI.DataSource(Movies, Grid1_fields);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostMovie_PostBackAsync(&lt;span&gt;string&lt;/span&gt; actionType, &lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt; Grid1_pageIndex, &lt;span&gt;string&lt;/span&gt; TBSearchMessage, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deletedRowID)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (actionType == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.FindAsync(deletedRowID);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (movie == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;指定的电影不存在！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    _context.Movies.Remove(movie);
                    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (actionType == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trigger1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清空搜索框，并隐藏清空图标&lt;/span&gt;
                TBSearchMessageUI.Text(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
                TBSearchMessageUI.ShowTrigger1(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不要忘记设置搜索文本为空字符串&lt;/span&gt;
                TBSearchMessage = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (actionType == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trigger2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(TBSearchMessage))
                {
                    TBSearchMessageUI.MarkInvalid(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;搜索文本不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示清空图标&lt;/span&gt;
                    TBSearchMessageUI.ShowTrigger1(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; actionType: page, close 无需特殊处理

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, Grid1_pageIndex, TBSearchMessage);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码中：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过 actionType 获取当前需要执行的操作&lt;/li&gt;
&lt;li&gt;点击清空图标时，要设置 TBSearchMessage = string.Empty; 因为后面重新绑定表格数据时用到这个变量&lt;/li&gt;
&lt;li&gt;表格分页和窗体关闭事件无需特殊处理，只需要重新绑定表格即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;8.4、排序 &lt;/h2&gt;
&lt;p&gt;在前面表格分页实现之后，再添加排序操作就轻车熟路了。首先看下表格的标签定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; BoxFlex&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;
    AllowPaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; IsDatabasePaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; PageSize&lt;/span&gt;&lt;span&gt;=&quot;@Model.PageSize&quot;&lt;/span&gt;&lt;span&gt; RecordCount&lt;/span&gt;&lt;span&gt;=&quot;@Model.RecordCount&quot;&lt;/span&gt;&lt;span&gt;
    OnPageIndexChanged&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnPageIndexChangedFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnPageIndexChangedParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;page&quot;, ParameterMode.String))&quot;
    AllowSorting&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;@Model.SortField&quot;&lt;/span&gt;&lt;span&gt; SortDirection&lt;/span&gt;&lt;span&gt;=&quot;@Model.SortDirection&quot;&lt;/span&gt;&lt;span&gt;
    OnSort&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnSortFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnSortParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;sort&quot;, ParameterMode.String))&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionEdit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionDelete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意新增的部分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;AllowSorting、SortField、SortDirection：启用排序，设置表格默认的排序字段和排序方向。&lt;/li&gt;
&lt;li&gt;OnSort：排序事件&lt;/li&gt;
&lt;li&gt;为需要排序的列添加SortField属性，比如名称列：For=&quot;Movies.First().Title&quot; SortField=&quot;Title&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;模型类中的修改不多，只需要在分页之前添加排序代码即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排序&lt;/span&gt;
q = q.SortBy(SortField + &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; SortDirection);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分页&lt;/span&gt;
q = q.Skip(PageIndex * PageSize).Take(PageSize);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，这里的 SortBy 并非 .NET Core 原生支持的方法，而是我们自定义的一个扩展方法。&lt;/p&gt;

&lt;h2&gt;8.5、SortBy 扩展方法&lt;/h2&gt;
&lt;p&gt;因为  .NET Core 提供的 OrderByDescending 和 OrderBy 不支持字符串参数，因为要支持我们的 SortField 和 SortDirection，我们需要写一堆id-else语句，类似如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (SortDirection == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DESC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderByDescending(q =&amp;gt;&lt;span&gt; q.Title);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReleaseDate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderByDescending(q =&amp;gt;&lt;span&gt; q.ReleaseDate);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderByDescending(q =&amp;gt;&lt;span&gt; q.Price);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Genre&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderByDescending(q =&amp;gt;&lt;span&gt; q.Genre);
    }
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderBy(q =&amp;gt;&lt;span&gt; q.Title);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReleaseDate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderBy(q =&amp;gt;&lt;span&gt; q.ReleaseDate);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderBy(q =&amp;gt;&lt;span&gt; q.Price);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (SortField == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Genre&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        q &lt;/span&gt;= q.OrderBy(q =&amp;gt;&lt;span&gt; q.Genre);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个代码是如此的丑陋，以至于我根本无需下手......&lt;/p&gt;

&lt;p&gt;早在 2013年我们更新 AppBoxPro 时就曾提出这个问题，并综合大家的代码给我了我们的解决办法：&lt;a href=&quot;https://www.cnblogs.com/sanshi/p/3277507.html&quot; target=&quot;_blank&quot;&gt;AppBox升级进行时 - 如何向OrderBy传递字符串参数（Entity Framework）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那就是自定义扩展方法，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311174621384-1562658739.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在我们来看下列表页面的完整视图代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model FineUICore.EmptyProject.RazorPages.MovieModel
@{
    ViewData[&quot;Title&quot;] = &quot;Movie&quot;;
}

@section body {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Panel &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; BodyPadding&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Layout&lt;/span&gt;&lt;span&gt;=&quot;VBox&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;用户管理&quot;&lt;/span&gt;&lt;span&gt; IsViewPort&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Form &lt;/span&gt;&lt;span&gt;ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;TBSearchMessage&quot;&lt;/span&gt;&lt;span&gt; ShowLabel&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; EmptyText&lt;/span&gt;&lt;span&gt;=&quot;在名称中搜索&quot;&lt;/span&gt;&lt;span&gt; Trigger1Icon&lt;/span&gt;&lt;span&gt;=&quot;Clear&quot;&lt;/span&gt;&lt;span&gt; ShowTrigger1&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; Trigger2Icon&lt;/span&gt;&lt;span&gt;=&quot;Search&quot;&lt;/span&gt;&lt;span&gt;
                                              OnTrigger1Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnTrigger1ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnTrigger1ClickParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;trigger1&quot;, ParameterMode.String))&quot;
                                              OnTrigger2Click&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnTrigger2ClickFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnTrigger2ClickParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;trigger2&quot;, ParameterMode.String))&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:TwinTriggerBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:FormRow&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Rows&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Grid &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Grid1&quot;&lt;/span&gt;&lt;span&gt; BoxFlex&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; ShowBorder&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; ShowHeader&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; DataIDField&lt;/span&gt;&lt;span&gt;=&quot;ID&quot;&lt;/span&gt;&lt;span&gt; DataTextField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; DataSource&lt;/span&gt;&lt;span&gt;=&quot;@Model.Movies&quot;&lt;/span&gt;&lt;span&gt;
                    AllowPaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; IsDatabasePaging&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; PageSize&lt;/span&gt;&lt;span&gt;=&quot;@Model.PageSize&quot;&lt;/span&gt;&lt;span&gt; RecordCount&lt;/span&gt;&lt;span&gt;=&quot;@Model.RecordCount&quot;&lt;/span&gt;&lt;span&gt;
                    OnPageIndexChanged&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnPageIndexChangedFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnPageIndexChangedParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;page&quot;, ParameterMode.String))&quot;
                    AllowSorting&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;@Model.SortField&quot;&lt;/span&gt;&lt;span&gt; SortDirection&lt;/span&gt;&lt;span&gt;=&quot;@Model.SortDirection&quot;&lt;/span&gt;&lt;span&gt;
                    OnSort&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnSortFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnSortParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;sort&quot;, ParameterMode.String))&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RowNumberField &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Title&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; ExpandUnusedSpace&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; FieldFormat&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Genre&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;Genre&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;For&lt;/span&gt;&lt;span&gt;=&quot;Movies.First().Price&quot;&lt;/span&gt;&lt;span&gt; SortField&lt;/span&gt;&lt;span&gt;=&quot;Price&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionEdit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:RenderField &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; RendererFunction&lt;/span&gt;&lt;span&gt;=&quot;renderActionDelete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:RenderField&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Toolbar &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Toolbar1&quot;&lt;/span&gt;&lt;span&gt; Position&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:ToolbarFill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Button &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;btnNew&quot;&lt;/span&gt;&lt;span&gt; IconFont&lt;/span&gt;&lt;span&gt;=&quot;PlusCircle&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;新增&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Listener &lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;=&quot;click&quot;&lt;/span&gt;&lt;span&gt; Handler&lt;/span&gt;&lt;span&gt;=&quot;onNewClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Toolbar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Toolbars&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Items&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Panel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f:Window &lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;=&quot;Window1&quot;&lt;/span&gt;&lt;span&gt; IsModal&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Target&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt; EnableResize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
              EnableMaximize&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; EnableIFrame&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;650&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt;
              OnClose&lt;/span&gt;&lt;span&gt;=&quot;@Url.Handler(&quot;&lt;/span&gt;&lt;span&gt;Movie_PostBack&quot;)&quot; OnCloseFields&lt;/span&gt;&lt;span&gt;=&quot;Panel1&quot;&lt;/span&gt;&lt;span&gt; OnCloseParameter1&lt;/span&gt;&lt;span&gt;=&quot;@(new Parameter(&quot;&lt;/span&gt;&lt;span&gt;actionType&quot;, &quot;close&quot;, ParameterMode.String))&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;f:Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}

@section script {

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; onNewClick(event) {
            F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieNew&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;新增&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionEdit(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn edit&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-pencil f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderActionDelete(value, params) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;action-btn delete&quot; href=&quot;javascript:;&quot;&amp;gt;&amp;lt;i class=&quot;f-icon f-icon-trash f-grid-cell-iconfont&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }


        F.ready(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; grid1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; F.ui.Grid1;
            grid1.el.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.action-btn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cnode &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; rowData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; grid1.getRowData(cnode.closest(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.f-grid-row&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.confirm({
                        message: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;确定删除此记录？&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        target: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_top&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        ok: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            F.doPostBack(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Handler(&quot;Movie_PostBack&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Panel1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
                                actionType: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                deletedRowID: rowData.id
                            });
                        }
                    });
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cnode.hasClass(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
                    F.ui.Window1.show(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@Url.Content(&quot;~/MovieEdit/&quot;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; rowData.id, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                }
            });

        });

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;列表页面完整的模型类代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; FineUICore.EmptyProject.RazorPages
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MovieContext _context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MovieModel(MovieContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IList&amp;lt;Movie&amp;gt; Movies { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前所在的页&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PageIndex { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每页显示记录数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PageSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 总记录数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; RecordCount { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排序字段名称&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SortField { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排序方向（DESC：倒序，ASC：正序）&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SortDirection { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DESC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; PrepareGridData(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task PrepareGridData(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; searchMessage)
        {
            IQueryable&lt;/span&gt;&amp;lt;Movie&amp;gt; q =&lt;span&gt; _context.Movies;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 搜索框&lt;/span&gt;
            searchMessage = searchMessage?&lt;span&gt;.Trim();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(searchMessage))
            {
                q &lt;/span&gt;= q.Where(s =&amp;gt;&lt;span&gt; s.Title.Contains(searchMessage));
            }

            RecordCount &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.CountAsync();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对传入的 pageIndex 进行有效性验证&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; pageCount = RecordCount /&lt;span&gt; PageSize;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (RecordCount % PageSize != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                pageCount&lt;/span&gt;++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (PageIndex &amp;gt; pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                PageIndex &lt;/span&gt;= pageCount - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (PageIndex &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                PageIndex &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排序&lt;/span&gt;
            q = q.SortBy(SortField + &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; SortDirection);


            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分页&lt;/span&gt;
            q = q.Skip(PageIndex *&lt;span&gt; PageSize).Take(PageSize);


            Movies &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; q.ToListAsync();
        }


        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task ReloadGrid(&lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; searchMessage)
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; PrepareGridData(searchMessage);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Grid1UI = UIHelper.Grid(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grid1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置总记录数&lt;/span&gt;
&lt;span&gt;            Grid1UI.RecordCount(RecordCount);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置分页数据&lt;/span&gt;
&lt;span&gt;            Grid1UI.DataSource(Movies, Grid1_fields);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; OnPostMovie_PostBackAsync(&lt;span&gt;string&lt;/span&gt; actionType, &lt;span&gt;string&lt;/span&gt;[] Grid1_fields, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Grid1_pageIndex,
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; Grid1_sortField, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Grid1_sortDirection,
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; TBSearchMessage, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deletedRowID)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; TBSearchMessageUI = UIHelper.TwinTriggerBox(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TBSearchMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (actionType == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movies.FindAsync(deletedRowID);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (movie == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    Alert.Show(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;指定的电影不存在！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    _context.Movies.Remove(movie);
                    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (actionType == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trigger1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清空搜索框，并隐藏清空图标&lt;/span&gt;
                TBSearchMessageUI.Text(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
                TBSearchMessageUI.ShowTrigger1(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不要忘记设置搜索文本为空字符串&lt;/span&gt;
                TBSearchMessage = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (actionType == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trigger2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(TBSearchMessage))
                {
                    TBSearchMessageUI.MarkInvalid(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;搜索文本不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示清空图标&lt;/span&gt;
                    TBSearchMessageUI.ShowTrigger1(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; actionType: page, close 无需特殊处理&lt;/span&gt;
&lt;span&gt;
            PageIndex &lt;/span&gt;=&lt;span&gt; Grid1_pageIndex;
            SortField &lt;/span&gt;=&lt;span&gt; Grid1_sortField;
            SortDirection &lt;/span&gt;=&lt;span&gt; Grid1_sortDirection;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新加载表格数据&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ReloadGrid(Grid1_fields, TBSearchMessage);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; UIHelper.Result();
        }


    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在，来进行最后一波操作，看下我们的劳动成果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/48817/202003/48817-20200311175013812-1309712821.gif&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;


&lt;p&gt;FineUICore（基础版）非免费软件，你可以加入【三石和他的朋友们】知识星球下载本教程的完整项目源代码：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://fineui.com/fans/&quot;&gt;https://fineui.com/fans/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;欢迎评论和 &lt;input onclick=&quot;votePost(12441884,'Digg');&quot; type=&quot;button&quot; value=&quot;推荐&quot;/&gt; （这是一个可以点击的按钮，点击即可推荐本文！）&lt;/p&gt;

</description>
<pubDate>Thu, 12 Mar 2020 00:33:00 +0000</pubDate>
<dc:creator>三生石上(FineUI控件)</dc:creator>
<og:description>引子 自从 2009 年开始在博客园写文章，这是目前我写的最长的一篇文章了。 前前后后，我总共花了 5 天的时间，每天超过 3 小时不间断写作和代码调试。总共有 8 篇文章，每篇 5~6 个小结，总截</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/sanshi/p/12441884.html</dc:identifier>
</item>
<item>
<title>[ASP.NET Core 3框架揭秘]服务承载系统[6]: 承载服务启动流程[下篇] - Artech</title>
<link>http://www.cnblogs.com/artech/p/inside-asp-net-core-09-06.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/artech/p/inside-asp-net-core-09-06.html</guid>
<description>&lt;p&gt;实际上HostBuilder对象并没有在实现的Build方法中调用构造函数来创建Host对象，该对象利用作为依赖注入容器的IServiceProvider对象创建的。为了可以采用依赖注入框架来提供构建的Host对象，HostBuilder必须完成前期的服务注册工作。总地来说，HostBuilder针对Host对象的构建大体可以划分为如下5个步骤：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建&lt;/strong&gt;&lt;strong&gt;HostBuilderContext&lt;/strong&gt;&lt;strong&gt;上下文：&lt;/strong&gt;创建针对宿主配置的IConfiguration对象和表示承载环境的IHostEnvironment对象，然后利用二者创建出代表承载上下文的HostBuilderContext对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建针对应用的配置：&lt;/strong&gt;创建针对应用配置的IConfiguration对象，并用它替换HostBuilderContext对象承载的配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注册依赖服务：&lt;/strong&gt;注册所需的依赖服务，包括应用程序通过调用ConfigureServices方法提供的服务注册和其他一些确保服务承载正常执行的默认服务注册。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建&lt;/strong&gt;&lt;strong&gt;IServiceProvider&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;利用注册的IServiceProviderFactory&amp;lt;TContainerBuilder&amp;gt;工厂（系统默认注册或者应用程序显式注册）创建出用来提供所有依赖服务的IServiceProvider对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建&lt;/strong&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;strong&gt;对象：&lt;/strong&gt;利用IServiceProvider对象提供作为宿主的Host对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于很多依赖服务都是针对当前承载上下文进行注册的，所以Build方法首要的任务就是创建出作为承载上下文的HostBuilderContext对象。一个HostBuilderContext对象由承载针对宿主配置的IConfiguration对象和描述当前承载环境的IHostEnvironment对象组成，但是后者提供的环境名称、应用名称和内容文件根目录路径可以通过前者来指定，具体配置项名称定义在如下这个静态类型HostDefaults中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HostDefaults
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; EnvironmentKey = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ContentRootKey = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;contentRoot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ApplicationKey = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;applicationName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们通过一个简单的实例来演示如何利用配置的方式来指定上述三个与承载环境相关的属性。我们定义了如下一个名为FakeHostedService的承载服务，并在构造函数中注入IHostEnvironment对象。在实现的StartAsync方法中，我们将与承载环境相关的环境名称、应用名称和内容文件根目录路径输出到控制台上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FakeHostedService : IHostedService
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IHostEnvironment _environment;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FakeHostedService(IHostEnvironment environment) =&amp;gt; _environment =&lt;span&gt; environment;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StartAsync(CancellationToken cancellationToken)
    {
        Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0,-15}:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, nameof(_environment.EnvironmentName), _environment.EnvironmentName);
        Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0,-15}:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, nameof(_environment.ApplicationName), _environment.ApplicationName);
        Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0,-15}:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, nameof(_environment.ContentRootPath), _environment.ContentRootPath);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task StopAsync(CancellationToken cancellationToken) =&amp;gt;&lt;span&gt; Task.CompletedTask;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FakeHostedService采用如下的形式承载于当前应用程序中。如下面的代码片段所示，在创建作为宿主构建者的HostBuilder之后，我们调用了它的ConfigureHostConfiguration方法注册了基于命令行参数作为配置源，意味着我们可以利用命令行参数的形式来初始化相应的配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
{
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
    {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HostBuilder()
            .ConfigureHostConfiguration(builder &lt;/span&gt;=&amp;gt;&lt;span&gt; builder.AddCommandLine(args))
            .ConfigureServices(svcs &lt;/span&gt;=&amp;gt; svcs.AddHostedService&amp;lt;FakeHostedService&amp;gt;&lt;span&gt;())
            .Build()
            .Run();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们采用命令行的方式启动这个演示程序，并利用传入的命令行参数指定环境名称、应用名称和内容文件根目录路径（确保路径确实存在）。从如图10-11所示的输出结果表明应用程序当前的承载环境确实与基于宿主的配置一致。（S1009）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/19327/202003/19327-20200312082251040-1717572460.png&quot;&gt;&lt;img width=&quot;425&quot; height=&quot;124&quot; title=&quot;10-11&quot; alt=&quot;10-11&quot; src=&quot;https://img2018.cnblogs.com/blog/19327/202003/19327-20200312082251372-36234018.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HostBuilder针对HostBuilderContext对象的创建体现在如下所示的CreateBuilderContext方法中。如下面的代码片段所示，该方法创建了一个ConfigurationBuilder对象并调用AddInMemoryCollection扩展方法注册了针对内存变量的配置源。HostBuilder接下来会将这个ConfigurationBuilder对象作为参数调用ConfigureHostConfiguration方法注册的所有Action&amp;lt;IConfigurationBuilder&amp;gt;委托。这个ConfigurationBuilder对象生成的IConfiguration对象将会作为HostBuilderContext上下文对象的配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HostBuilder : IHostBuilder
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Action&amp;lt;IConfigurationBuilder&amp;gt;&amp;gt;&lt;span&gt; _configureHostConfigActions;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IHost Build()
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buildContext =&lt;span&gt; CreateBuilderContext();
        …
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; HostBuilderContext CreateBuilderContext()
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Create Configuration&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; configBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder().AddInMemoryCollection();
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; buildAction &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _configureHostConfigActions)
        {
            buildAction(configBuilder);
        }
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hostConfig =&lt;span&gt; configBuilder.Build();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Create HostingEnvironment&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; contentRoot =&lt;span&gt; hostConfig[HostDefaults.ContentRootKey];
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; contentRootPath = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(contentRoot)
            &lt;/span&gt;?&lt;span&gt; AppContext.BaseDirectory
            : Path.IsPathRooted(contentRoot)
            &lt;/span&gt;?&lt;span&gt; contentRoot
            : Path.Combine(Path.GetFullPath(AppContext.BaseDirectory), contentRoot);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hostingEnvironment = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HostingEnvironment()
        {
            ApplicationName &lt;/span&gt;=&lt;span&gt; hostConfig[HostDefaults.ApplicationKey],
            EnvironmentName &lt;/span&gt;= hostConfig[HostDefaults.EnvironmentKey] ??&lt;span&gt; Environments.Production,
            ContentRootPath &lt;/span&gt;=&lt;span&gt; contentRootPath,
        };
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(hostingEnvironment.ApplicationName))
        {
            hostingEnvironment.ApplicationName &lt;/span&gt;=&lt;span&gt;
                Assembly.GetEntryAssembly()&lt;/span&gt;?&lt;span&gt;.GetName().Name;
        }
        hostingEnvironment.ContentRootFileProvider &lt;/span&gt;=
            &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhysicalFileProvider(hostingEnvironment.ContentRootPath);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Create HostBuilderContext&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HostBuilderContext(Properties)
        {
            HostingEnvironment &lt;/span&gt;=&lt;span&gt; hostingEnvironment,
            Configuration &lt;/span&gt;=&lt;span&gt; hostConfig
        };
    }
…
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在创建出HostBuilderContext对象的配置之后，HostBuilder会根据配置创建出代表承载环境的HostingEnvironment对象。如果不存在针对应用名称的配置项，应用名称将会设置为当前入口程序集的名称。如果内容文件根目录路径对应的配置项不存在，当前应用的基础路径（AppContext.BaseDirectory）将会作为内容文件根目录路径。如果指定的是一个相对路径，HostBuilder会根据基础路径生成一个绝对路径作为内容文件根目录路径。CreateBuilderContext方法最终会根据创建的这个HostingEnvironment对象和之前创建的IConfiguration创建出代表承载上下文的BuilderContext对象。&lt;/p&gt;

&lt;p&gt;到目前为止，作为承载上下文的BuilderContext对象携带的是通过调用ConfigureHostConfiguration方法初始化的配置，接下来通过调用ConfigureAppConfiguration方法初始化的配置将会与之合并，具体的逻辑体现在如下所示的BuildAppConfiguration方法上。&lt;/p&gt;
&lt;p&gt;如下面的代码片段所示，BuildAppConfigration方法会创建一个ConfigurationBuilder对象，并调用其AddConfiguration方法将现有的配置合并进来。于此同时，内容文件根目录的路径将会作为配置文件所在目录的基础路径。HostBuilder最后会将之前创建的HostBuilderContext 对象和这个ConfigurationBuilder对象作为参数调用在ConfigureAppConfiguration方法注册的每一个Action&amp;lt;HostBuilderContext, IConfigurationBuilder&amp;gt;委托。通过这个ConfigurationBuilder对象创建的IConfiguration对象将会重新赋值给HostBuilderContext对象的Configuration属性，我们自此就可以从承载上下文中得到完整的配置了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HostBuilder: IHostBuilder
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Action&amp;lt;HostBuilderContext, IConfigurationBuilder&amp;gt;&amp;gt;&lt;span&gt;  _configureAppConfigActions;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IHost Build()
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buildContext =&lt;span&gt; CreateBuilderContext();
        buildContext.Configuration &lt;/span&gt;=&lt;span&gt; BuildAppConfigration(buildContext);
        …
    }        

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IConfiguration BuildAppConfigration(HostBuilderContext buildContext)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; configBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
            .SetBasePath(buildContext.HostingEnvironment.ContentRootPath)
            .AddConfiguration(buildContext.Configuration,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; action &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _configureAppConfigActions)
        {
            action(_hostBuilderContext, configBuilder);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; configBuilder.Build();
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当作为承载上下文的HostBuilderContext对象创建出来并完成被初始化后，HostBuilder需要完成服务注册工作，这一实现体现在如下所示的ConfigureAllServices方法中。如下面的代码片段所示，ConfigureAllServices方法在将代表承载上下文的HostBuilderContext对象和创建的ServiceCollection对象作为参数调用ConfigureServices方法中注册的每一个Action&amp;lt;HostBuilderContext, IServiceCollection&amp;gt;委托对象之前，它会注册一些额外的系统服务。ConfigureAllServices方法最终返回包含所有服务注册的IServiceCollection对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HostBuilder: IHostBuilder
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Action&amp;lt;HostBuilderContext, IServiceCollection&amp;gt;&amp;gt;&lt;span&gt; _configureServicesActions;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IHost Build()
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buildContext =&lt;span&gt; CreateBuilderContext();
        buildContext.Configuration &lt;/span&gt;=&lt;span&gt; BuildAppConfigration(buildContext);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; services =&lt;span&gt; ConfigureAllServices (buildContext);
        …
    }  

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IServiceCollection ConfigureAllServices(HostBuilderContext buildContext)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; services = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceCollection();
        services.AddSingleton(buildContext);
        services.AddSingleton(buildContext.HostingEnvironment);
        services.AddSingleton(_ &lt;/span&gt;=&amp;gt;&lt;span&gt; buildContext.Configuration);
        services.AddSingleton&lt;/span&gt;&amp;lt;IHostApplicationLifetime, ApplicationLifetime&amp;gt;&lt;span&gt;();
        services.AddSingleton&lt;/span&gt;&amp;lt;IHostLifetime, ConsoleLifetime&amp;gt;&lt;span&gt;();
        services.AddSingleton&lt;/span&gt;&amp;lt;IHost,Host&amp;gt;&lt;span&gt;();
        services.AddOptions();
        services.AddLogging();

        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; configureServicesAction &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _configureServicesActions)
        {
            configureServicesAction(_hostBuilderContext, services);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; services;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于ConfigureAllServices方法默认注册的这些服务，如果我们自定义的承载服务需要使用到它们，可以直接采用构造器注入的方式对它们进行消费。由于其中包含了针对Host的服务注册，所有由所有服务注册构建的IServiceProvider对象可以提供最终构建的Host对象。&lt;/p&gt;

&lt;p&gt;目前我们已经拥有了所有的服务注册，接下来的任务就是利用它创建出作为依赖注入容器的IServiceProvider对象并利用它提供构建的Host对象。针对IServiceProvider的创建体现在如下所示的CreateServiceProvider方法中。如下面的代码片段所示，CreateServiceProvider方法会先得到_serviceProviderFactory字段表示的IServiceFactoryAdapter对象，该对象是根据UseServiceProviderFactory&amp;lt;TContainerBuilder&amp;gt;方法注册的IServiceProviderFactory&amp;lt;TContainerBuilder&amp;gt;对象创建的，我们调用它的CreateBuilder方法可以得到由注册的IServiceProviderFactory&amp;lt;TContainerBuilder&amp;gt;对象创建的TContainerBuilder对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HostBuilder : IHostBuilder
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;IConfigureContainerAdapter&amp;gt;&lt;span&gt; _configureContainerActions;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IServiceFactoryAdapter _serviceProviderFactory

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IHost Build()
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buildContext =&lt;span&gt; CreateBuilderContext();
        buildContext.Configuration &lt;/span&gt;=&lt;span&gt; BuildAppConfigration(buildContext);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; services =&lt;span&gt; ConfigureServices(buildContext);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serviceProvider =&lt;span&gt; CreateServiceProvider(buildContext, services);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; serviceProvider.GetRequiredService&amp;lt;IHost&amp;gt;&lt;span&gt;();
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IServiceProvider CreateServiceProvider(HostBuilderContext builderContext, IServiceCollection services)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; containerBuilder =&lt;span&gt; _serviceProviderFactory.CreateBuilder(services);
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; containerAction &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _configureContainerActions)
        {
            containerAction.ConfigureContainer(builderContext, containerBuilder);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _serviceProviderFactory.CreateServiceProvider(containerBuilder);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们将这个TContainerBuilder对象作为参数调用_configureContainerActions字段中的每个IConfigureContainerAdapter对象的ConfigureContainer方法，这里的每个IConfigureContainerAdapter对象都是根据ConfigureContainer&amp;lt;TContainerBuilder&amp;gt;方法提供的Action&amp;lt;HostBuilderContext, TContainerBuilder&amp;gt;对象创建的。在完成了用户针对TContainerBuilder对象的设置之后，CreateServiceProvider会将该对象会作为参数调用 IServiceFactoryAdapter的CreateServiceProvider创建出代表依赖注入容器的IServiceProvider对象，Build方法正是利用它来提供构建的Host对象。&lt;/p&gt;

&lt;p&gt;当目前为止，我们演示的实例都是直接创建HostBuilder对象来创建作为服务宿主的IHost对象。如果直接利用模板来创建一个ASP.NET Core应用，我们会发现生成的程序会采用如下的服务承载方式。具体来说，用来创建宿主的IHostBuilder对象是间接地调用静态类型Host的CreateDefaultBuilder方法创建出来的，那么这个方法究竟会提供创建一个IHostBuilder对象呢。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IHostBuilder CreateHostBuilder(&lt;span&gt;string&lt;/span&gt;[] args) =&amp;gt;&lt;span&gt;
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                webBuilder.UseStartup&lt;/span&gt;&amp;lt;Startup&amp;gt;&lt;span&gt;();
            });
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下所示的是定义在静态类型Host中的两个CreateDefaultBuilder方法重载的定义的，我们会发现它们最终提供的仍旧是一个HostBuilder对象，但是在返回该对象之前，该方法会帮助我们做一些初始化工作。如下面的代码片段所示，当CreateDefaultBuilder方法创建出HostBuilder对象之后，它会自动将当前目录所在的路径作为内容文件根目录的路径。接下来，该方法还会调用HostBuilder对象的ConfigureHostConfiguration方法注册针对环境变量的配置源，对应环境变量名称前缀被设置为“DOTNET_”。如果提供了代表命令行参数的字符串数组，CreateDefaultBuilder方法还会注册针对命令行参数的配置源。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Host
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IHostBuilder CreateDefaultBuilder() =&amp;gt; CreateDefaultBuilder(args: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IHostBuilder CreateDefaultBuilder(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HostBuilder();

        builder.UseContentRoot(Directory.GetCurrentDirectory());
        builder.ConfigureHostConfiguration(config &lt;/span&gt;=&amp;gt;&lt;span&gt;
        {
            config.AddEnvironmentVariables(prefix: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DOTNET_&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (args != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                config.AddCommandLine(args);
            }
        });

        builder.ConfigureAppConfiguration((hostingContext, config) &lt;/span&gt;=&amp;gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; env =&lt;span&gt; hostingContext.HostingEnvironment;

            config
                .AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, optional: &lt;span&gt;true&lt;/span&gt;, reloadOnChange: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                .AddJsonFile($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.{env.EnvironmentName}.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
                    optional: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, reloadOnChange: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (env.IsDevelopment() &amp;amp;&amp;amp; !&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(env.ApplicationName))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; appAssembly = Assembly.Load(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AssemblyName(env.ApplicationName));
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (appAssembly != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    config.AddUserSecrets(appAssembly, optional: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                }
            }

            config.AddEnvironmentVariables();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (args != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                config.AddCommandLine(args);
            }
        })
        .ConfigureLogging((hostingContext, logging) &lt;/span&gt;=&amp;gt;&lt;span&gt;
        {
            logging.AddConfiguration(hostingContext.Configuration.GetSection(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            logging.AddConsole();
            logging.AddDebug();
            logging.AddEventSourceLogger();
        })
        .UseDefaultServiceProvider((context, options) &lt;/span&gt;=&amp;gt;&lt;span&gt;
        {
            options.ValidateScopes &lt;/span&gt;=&lt;span&gt; context.HostingEnvironment.IsDevelopment();
        });

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在设置了针对宿主的配置之后，CreateDefaultBuilder调用了HostBuilder的ConfigureAppConfiguration方法设置针对应用的配置，具体的配置源包括针对Json文件“appsettings.json”和“appsettings.{environment}.json”、环境变量（没有前缀限制）和命令行参数（如果提供了表示命令航参数的字符串数组）。&lt;/p&gt;
&lt;p&gt;在完成了针对配置的设置之后，CreateDefaultBuilder方法还会调用HostBuilder的ConfigureLogging扩展方法作一些与日志相关的设置，其中包括应用日志相关的配置（对应配置节名称为“Logging”）和注册针对控制台、调试器和EventSource的日志输出渠道。在此之后，它还会调用UseDefaultServiceProvider方法让针对服务范围的验证在开发环境下被自动开启。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-09-01.html&quot;&gt;服务承载系统[1]: 承载长时间运行的服务[上篇]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-09-02.html&quot;&gt;服务承载系统[2]: 承载长时间运行的服务[下篇]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-09-03.html&quot;&gt;服务承载系统[3]: 总体设计[上篇]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-09-04.html&quot;&gt;服务承载系统[4]: 总体设计[下篇]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-09-05.html&quot;&gt;服务承载系统[5]: 承载服务启动流程[上篇]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/inside-asp-net-core-09-06.html&quot;&gt;服务承载系统[6]: 承载服务启动流程[下篇]&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Mar 2020 00:24:00 +0000</pubDate>
<dc:creator>Artech</dc:creator>
<og:description>实际上HostBuilder对象并没有在实现的Build方法中调用构造函数来创建Host对象，该对象利用作为依赖注入容器的IServiceProvider对象创建的。为了可以采用依赖注入框架来提供构建</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/artech/p/inside-asp-net-core-09-06.html</dc:identifier>
</item>
<item>
<title>教妹学Java：Spring 入门篇 - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/12466976.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/12466976.html</guid>
<description>&lt;p&gt;你好呀，我是沉默王二，一个和黄家驹一样身高，刘德华一样颜值的程序员（管你信不信呢）。从两位偶像的年纪上，你就可以断定我的码龄至少在 10 年以上，但实话实说，我一直坚信自己只有 18 岁，因为我有一颗好学的心。本篇文章就打算通过我和三妹对话的形式来学一学“Spring 的基础”。&lt;/p&gt;
&lt;p&gt;教妹学 Java，没见过这么放肆的标题吧？“语不惊人死不休”，没错，本篇文章的标题就是这么酷炫，不然你怎么会点进来？&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/03/java-spring-rumen-01.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;我有一个漂亮如花的妹妹（见上图），她叫什么呢？我想聪明的读者能猜得出：沉默王三，没错，年方三六。父母正考虑让她向我学习，做一名正儿八经的 Java 程序员。我期初是反对的，因为程序员这行业容易掉头发。但家命难为啊，与其反对，不如做点更积极的事情，比如说写点有趣的文章教教她。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/03/java-spring-rumen-02.gif&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;“二哥，你怎么现在才想起来要教我学 Spring 啊？”&lt;/p&gt;
&lt;p&gt;“没办法啊，三妹，之前教妹学 Java 系列被喷的体无完肤，没办法就停滞了。今天决定走自己的路，让别人也走自己的路去。”&lt;/p&gt;
&lt;p&gt;“我就说嘛，Spring 在 Java 中占据那么重要的位置，你竟然没舍得教我，还以为你怕被我拍死在沙滩上呢？”&lt;/p&gt;
&lt;p&gt;“嗯，你天真了。”&lt;/p&gt;
&lt;h3 id=&quot;h01spring&quot;&gt;&lt;span&gt;01、Spring 简史&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;“二哥，据说 Spring 前后经历了 3 个时代，你能给我说说吗？”&lt;/p&gt;
&lt;p&gt;“没问题啊。”&lt;/p&gt;
&lt;p&gt;1）石器时代&lt;/p&gt;
&lt;p&gt;也就是 Spring 1.x 时代，一个项目看上去全都是 xml 文件，里面配置着各种各样的 bean，项目越大，xml 文件就越多，到最后人都感觉不好了，像回到了原始社会。&lt;/p&gt;
&lt;p&gt;2）黑铁时代&lt;/p&gt;
&lt;p&gt;也就是 Spring 2.x 时代，终于可以使用注解配置 bean 了，这主要得益于 JDK 1.5 新增的注解功能。想一想，一个小小的注解，比如说 &lt;code&gt;@Component&lt;/code&gt; 、&lt;code&gt;@Service&lt;/code&gt; 就可以替代一大段的 xml 配置代码，简直爽歪歪啊。&lt;/p&gt;
&lt;p&gt;使用 xml 文件配置数据源，使用注解配置业务类，两种方式相得益彰。&lt;/p&gt;
&lt;p&gt;3）黄金时代&lt;/p&gt;
&lt;p&gt;也就是 Spring 3.x 至今，可以使用 Java 配置的方式了。那什么是 Java 配置呢？&lt;/p&gt;
&lt;p&gt;其实从形式上看，Java 配置和注解配置没什么区别，因为 Java 配置也用的是注解，只不过，以前用 application-context.xml 配置数据源等信息，现在用 &lt;code&gt;@Configuration&lt;/code&gt; 注解的类配置。&lt;/p&gt;
&lt;h3 id=&quot;h02spring&quot;&gt;&lt;span&gt;02、Spring 特性&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;“二哥，据说 Spring 的特性非常丰富，你能给我说说吗？”&lt;/p&gt;
&lt;p&gt;“没问题啊。”&lt;/p&gt;
&lt;p&gt;1）核心技术：依赖注入（DI）、面向切面编程（AOP）、国际化、数据绑定、类型转换&lt;/p&gt;
&lt;p&gt;2）测试：TestContext 框架、Spring MVC 测试&lt;/p&gt;
&lt;p&gt;3）数据访问：事务、JDBC、对象关系映射（ORM）&lt;/p&gt;
&lt;p&gt;4）Spring MVC（一个模型 - 视图 - 控制器「MVC」的 Web 框架）、Spring WebFlux（一个典型非阻塞异步的框架）&lt;/p&gt;
&lt;p&gt;5）Spring Integration（面向企业应用集成）&lt;/p&gt;
&lt;h3 id=&quot;h03spring&quot;&gt;&lt;span&gt;03、Spring 生态&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;“二哥，据说 Spring 的生态圈非常火热，你能给我说说吗？”&lt;/p&gt;
&lt;p&gt;“没问题啊。”&lt;/p&gt;
&lt;p&gt;1）Spring Boot：当下最火的一个 Spring 项目了，使用它我们可以快速搭建好一个项目&lt;/p&gt;
&lt;p&gt;2）Spring Cloud：为分布式开发提供了强大的工具集&lt;/p&gt;
&lt;p&gt;3）Spring Security：通过认证和授权保护应用&lt;/p&gt;
&lt;p&gt;4）Spring Web Flow：基于 Spring MVC 的流程式 Web 应用&lt;/p&gt;
&lt;p&gt;5）等等等等&lt;/p&gt;
&lt;h3 id=&quot;h04spring&quot;&gt;&lt;span&gt;04、快速搭建 Spring 项目&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;“二哥，说了那么多，能不能来个上手项目，让我瞧瞧 Spring 项目到底长什么样子？”&lt;/p&gt;
&lt;p&gt;“马上就来，三妹。”&lt;/p&gt;
&lt;p&gt;我推荐使用 Intellij IDEA 作为集成开发工具，因为它插件丰富、功能全面。就我们目前的开发任务来说，社区版足够用了。&lt;/p&gt;
&lt;p&gt;1）打开 IDEA，依次点击 File→New→Project→Maven。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/03/java-spring-rumen-03.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;2）点击 Next 后填写项目的名称，然后创建项目。打开 pom.xml 文件，添加以下内容。&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.2.2.RELEASE&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.6.1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;dependencies 节点下添加了 Spring 的核心依赖 spring-context，它为 Spring 提供了一个运行时的环境，用以保存各个对象的状态。它依赖于 Spring 的四个核心组件：spring-aop、spring-beans、spring-core、spring-expression，也就是说只要引入 spring-context 的依赖，Maven 会自动引入这四个核心。&lt;/p&gt;
&lt;p&gt;build 节点下添加了 Maven 的编译插件，并且指定了 Java 的编译版本为 1.8。&lt;/p&gt;
&lt;p&gt;3）IDEA 下编辑文件会自动保存，所以与此同时，Maven 会将 Spring 的依赖包全部下载到本地仓库中。&lt;/p&gt;
&lt;p&gt;4）稍稍眯一会眼睛，就可以看到 Spring 的依赖包了。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/03/java-spring-rumen-04.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;5）Maven 是一个软件项目管理工具，基于项目对象模型（Project Object Model，明白 pom.xml 的由来了吧？）的概念，可以管理项目依赖的 jar 包，对项目进行编译打包等。&lt;/p&gt;
&lt;p&gt;6）新建 HelloService 类，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HelloService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String what)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + what);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@Service&lt;/code&gt; 注解一般在业务逻辑层使用。该类非常简单，只有一个方法 &lt;code&gt;hello()&lt;/code&gt;，参数是字符串，然后在控制台打印 &lt;code&gt;hello xxx&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;7）新建 HelloConfig 类，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HelloConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Bean&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; HelloService &lt;span class=&quot;hljs-title&quot;&gt;helloService&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HelloService();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt; 注解表明当前类是一个配置类，相当于 Spring 配置的一个 xml 文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt; 注解用在 &lt;code&gt;helloService()&lt;/code&gt; 方法上，表明当前方法返回一个 Bean 对象（HelloService），然后将其交给 Spring 管理。产生这个 Bean 对象的方法只会被调用一次，随后 Spring 将其放在自己的 IOC 容器中。&lt;/p&gt;
&lt;p&gt;8）新建 HelloMain 类，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HelloMain&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;AnnotationConfigApplicationContext context = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AnnotationConfigApplicationContext(HelloConfig.class);&lt;br/&gt;HelloService helloService = context.getBean(HelloService.class);&lt;br/&gt;helloService.hello(&lt;span class=&quot;hljs-string&quot;&gt;&quot;66666&quot;&lt;/span&gt;);&lt;br/&gt;context.close();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;HelloMain 类中有一个 &lt;code&gt;main()&lt;/code&gt; 方法，它负责将当前项目跑起来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt; 是一个用来管理注解 Bean 的容器，可以将 &lt;code&gt;@Configuration&lt;/code&gt; 注解的类 Class 作为参数获取容器对象。再通过 &lt;code&gt;getBean()&lt;/code&gt; 方法获取注册的 Bean 对象。获取到 HelloService 对象后，就可以让它说一声“66666”了。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/03/java-spring-rumen-05.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;“二哥，这篇文章中的示例代码你上传到码云了吗？最近 GitHub 访问起来有点卡。”&lt;/p&gt;
&lt;p&gt;“你到挺贴心啊，三妹。&lt;a href=&quot;https://gitee.com/qing_gee/JavaPoint/tree/master&quot;&gt;码云传送门~&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt;“二哥，你教得真不错，我完全学会了，一点也不枯燥。”&lt;/p&gt;
&lt;p&gt;“那必须滴啊，期待下一篇吧？”&lt;/p&gt;
&lt;p&gt;“那是当然啊，期待，非常期待，望眼欲穿的感觉。”&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/03/java-spring-rumen-06.gif&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;h3 id=&quot;h05&quot;&gt;&lt;span&gt;05、鸣谢&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;请允许我热情地吐槽一下，这篇文章我不希望再被喷了，看在我这么辛苦搞原创（创意+干货+有趣）的份上，多鼓励鼓励好不好？别瞅了，点赞呗，你最美你最帅👍。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;如果觉得文章对你有点帮助，请微信搜索「 &lt;strong&gt;沉默王二&lt;/strong&gt; 」第一时间阅读，回复【&lt;strong&gt;666&lt;/strong&gt;】【&lt;strong&gt;1024&lt;/strong&gt;】更有我为你精心准备的 500G 高清教学视频（已分门别类），以及大厂技术牛人整理的面经一份。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 12 Mar 2020 00:21:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>你好呀，我是沉默王二，一个和黄家驹一样身高，刘德华一样颜值的程序员（管你信不信呢）。从两位偶像的年纪上，你就可以断定我的码龄至少在 10 年以上，但实话实说，我一直坚信自己只有 18 岁，因为我有一颗</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qing-gee/p/12466976.html</dc:identifier>
</item>
<item>
<title>SpringBoot2 整合ElasticJob框架，定制化管理流程 - 知了一笑</title>
<link>http://www.cnblogs.com/cicada-smile/p/12466930.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cicada-smile/p/12466930.html</guid>
<description>&lt;p&gt;本文源码：&lt;a href=&quot;https://github.com/cicadasmile/middle-ware-parent&quot;&gt;GitHub·点这里&lt;/a&gt; || &lt;a href=&quot;https://gitee.com/cicadasmile/middle-ware-parent&quot;&gt;GitEE·点这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;定时任务&quot;&gt;1、定时任务&lt;/h2&gt;
&lt;p&gt;在前面的文章中，说过QuartJob这个定时任务，被广泛应用的定时任务标准。但Quartz核心点在于执行定时任务并不是在于关注的业务模式和场景，缺少高度自定义的功能。Quartz能够基于数据库实现任务的高可用，但是不具备分布式并行调度的功能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4Njg0MzYwNw==&amp;amp;mid=2247483774&amp;amp;idx=1&amp;amp;sn=e5c2eed4a989bedd5c3b108c7dc18c37&amp;amp;chksm=fdf455c6ca83dcd0bccf71aa07639b8ef514e3b6e6d85c6aeb4bceae30d58f021c9d7ba8590b&amp;amp;token=1295430800&amp;amp;lang=zh_CN#rd&quot;&gt;-&amp;gt; QuartJob定时任务&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;elasticjob说明&quot;&gt;2、ElasticJob说明&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;基础简介&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Elastic-Job 是一个开源的分布式调度中间件，由两个相互独立的子项目 Elastic-Job-Lite 和 Elastic-Job-Cloud 组成。Elastic-Job-Lite 为轻量级无中心化解决方案，使用 jar 包提供分布式任务的调度和治理。 Elastic-Job-Cloud 是一个 Mesos Framework，依托于Mesos额外提供资源治理、应用分发以及进程隔离等服务。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;功能特点&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;分布式调度协调
弹性扩容缩容
失效转移
错过执行作业重触发
作业分片一致性，保证同一分片在分布式环境中仅一个执行实例&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;补刀&lt;/code&gt;：人家官网这样描述的，这里赘述一下，充实一下文章。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基础框架结构&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该图片来自ElasticJob官网。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1691717/202003/1691717-20200312073626272-1261035693.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由图可知如下内容：&lt;/p&gt;
&lt;p&gt;需要Zookeeper组件支持，作为分布式的调度任务，有良好的监听机制，和控制台，下面的案例也就冲这个图解来。&lt;/p&gt;
&lt;h2 id=&quot;分片管理&quot;&gt;3、分片管理&lt;/h2&gt;
&lt;p&gt;这个概念在ElasticJob中是最具有特点的，实用性极好。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;分片概念&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;任务的分布式执行，需要将一个任务拆分为多个独立的任务项，然后由分布式的服务器分别执行某一个或几个分片项。&lt;/p&gt;
&lt;p&gt;场景描述：假设有服务3台，分3片管理，要处理数据表100条，那就可以100%3，按照余数0,1,2分散到三台服务上执行，看到这里分库分表的基本逻辑涌上心头，这就是为何很多大牛讲说，编程思维很重要。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;个性化参数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;个性化参数即shardingItemParameter，可以和分片项匹配对应关系，用于将分片项的数字转换为更加可读的业务代码。&lt;/p&gt;
&lt;p&gt;场景描述：这里猛一读好像很飘逸，其实就是这个意思，如果分3片，取名[0，1，2]不好看，或者不好标识，可以分别给个别名标识一下，[0=A，1=B，2=C]。&lt;/p&gt;

&lt;h2 id=&quot;核心依赖包&quot;&gt;1、核心依赖包&lt;/h2&gt;
&lt;p&gt;这里使用2.0+的版本。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;elastic-job-lite-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;elastic-job-lite-spring&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;核心配置文件&quot;&gt;2、核心配置文件&lt;/h2&gt;
&lt;p&gt;这里主要配置一下Zookeeper中间件，分片和分片参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;zookeeper:
  server: 127.0.0.1:2181
  namespace: es-job

job-config:
  cron: 0/10 * * * * ?
  shardCount: 1
  shardItem: 0=A,1=B,2=C,3=D&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;自定义注解&quot;&gt;3、自定义注解&lt;/h2&gt;
&lt;p&gt;看了官方的案例，没看到好用的注解，这里只能自己编写一个，基于案例的加载过程和核心API作为参考。&lt;/p&gt;
&lt;p&gt;核心配置类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;com.dangdang.ddframe.job.lite.config.LiteJobConfiguration&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据自己想如何使用注解的思路，比如我只想注解定时任务名称和Cron表达式这两个功能，其他参数直接统一配置（这里可能是受QuartJob影响太深，可能根本就是想省事...）&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Inherited
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface TaskJobSign {

    @AliasFor(&quot;cron&quot;)
    String value() default &quot;&quot;;

    @AliasFor(&quot;value&quot;)
    String cron() default &quot;&quot;;

    String jobName() default &quot;&quot;;

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;作业案例&quot;&gt;4、作业案例&lt;/h2&gt;
&lt;p&gt;这里打印一些基本参数，对照配置和注解，一目了然。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
@TaskJobSign(cron = &quot;0/5 * * * * ?&quot;,jobName = &quot;Hello-Job&quot;)
public class HelloJob implements SimpleJob {

    private static final Logger LOG = LoggerFactory.getLogger(HelloJob.class.getName()) ;

    @Override
    public void execute(ShardingContext shardingContext) {
        LOG.info(&quot;当前线程: &quot;+Thread.currentThread().getId());
        LOG.info(&quot;任务分片：&quot;+shardingContext.getShardingTotalCount());
        LOG.info(&quot;当前分片：&quot;+shardingContext.getShardingItem());
        LOG.info(&quot;分片参数：&quot;+shardingContext.getShardingParameter());
        LOG.info(&quot;任务参数：&quot;+shardingContext.getJobParameter());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;加载定时任务&quot;&gt;5、加载定时任务&lt;/h2&gt;
&lt;p&gt;既然自定义注解，那加载过程自然也要自定义一下，读取自定义的注解，配置化，加入容器，然后初始化，等着任务执行就好。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Configuration
public class ElasticJobConfig {

    @Resource
    private ApplicationContext applicationContext ;
    @Resource
    private ZookeeperRegistryCenter zookeeperRegistryCenter;

    @Value(&quot;${job-config.cron}&quot;) private String cron ;
    @Value(&quot;${job-config.shardCount}&quot;) private int shardCount ;
    @Value(&quot;${job-config.shardItem}&quot;) private String shardItem ;
    
    /**
     * 配置任务监听器
     */
    @Bean
    public ElasticJobListener elasticJobListener() {
        return new TaskJobListener();
    }
    /**
     * 初始化配置任务
     */
    @PostConstruct
    public void initTaskJob() {
        Map&amp;lt;String, SimpleJob&amp;gt; jobMap = this.applicationContext.getBeansOfType(SimpleJob.class);
        Iterator iterator = jobMap.entrySet().iterator();
        while (iterator.hasNext()) {
            // 自定义注解管理
            Map.Entry&amp;lt;String, SimpleJob&amp;gt; entry = (Map.Entry)iterator.next();
            SimpleJob simpleJob = entry.getValue();
            TaskJobSign taskJobSign = simpleJob.getClass().getAnnotation(TaskJobSign.class);
            if (taskJobSign != null){
                String cron = taskJobSign.cron() ;
                String jobName = taskJobSign.jobName() ;
                // 生成配置
                SimpleJobConfiguration simpleJobConfiguration = new SimpleJobConfiguration(
                                                JobCoreConfiguration.newBuilder(jobName, cron, shardCount)
                                                .shardingItemParameters(shardItem).jobParameter(jobName).build(),
                                                simpleJob.getClass().getCanonicalName());
                LiteJobConfiguration liteJobConfiguration = LiteJobConfiguration.newBuilder(
                                                simpleJobConfiguration).overwrite(true).build();
                TaskJobListener taskJobListener = new TaskJobListener();
                // 初始化任务
                SpringJobScheduler jobScheduler = new SpringJobScheduler(
                                                simpleJob, zookeeperRegistryCenter,
                                                liteJobConfiguration, taskJobListener);
                jobScheduler.init();
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;絮叨一句&lt;/code&gt;：不要疑问这些API是怎么知道，看下官方文档的案例，他们怎么使用这些核心API，这里就是照着写过来，就是多一步自定义注解类的加载过程。当然官方文档大致读一遍还是很有必要的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;补刀一句&lt;/code&gt;：如何快速学习一些组件的用法，首先找到官方文档，或者开源库Wiki,再不济ReadMe文档（如果都没有，酌情放弃，另寻其他），熟悉基本功能是否符合自己的需求，如果符合，就看下基本用法案例，熟悉API，最后就是研究自己需要的功能模块，个人经验来看，该过程是弯路最少，坑最少的。&lt;/p&gt;
&lt;h2 id=&quot;任务监听&quot;&gt;6、任务监听&lt;/h2&gt;
&lt;p&gt;用法非常简单，实现ElasticJobListener接口。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class TaskJobListener implements ElasticJobListener {
    private static final Logger LOG = LoggerFactory.getLogger(TaskJobListener.class);

    private long beginTime = 0;

    @Override
    public void beforeJobExecuted(ShardingContexts shardingContexts) {
        beginTime = System.currentTimeMillis();
        LOG.info(shardingContexts.getJobName()+&quot;===&amp;gt;开始...&quot;);
    }

    @Override
    public void afterJobExecuted(ShardingContexts shardingContexts) {
        long endTime = System.currentTimeMillis();
        LOG.info(shardingContexts.getJobName()+
        &quot;===&amp;gt;结束...[耗时：&quot;+(endTime - beginTime)+&quot;]&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;絮叨一句&lt;/code&gt;：before和after执行前后，中间执行目标方法，标准的AOP切面思想，所以底层水平决定了对上层框架的理解速度，那本《Java编程思想》上的灰尘是不是该擦擦？&lt;/p&gt;

&lt;h2 id=&quot;作业任务&quot;&gt;1、作业任务&lt;/h2&gt;
&lt;p&gt;有部分场景需要动态添加和管理定时任务，基于上面的加载流程，在自定义一些步骤就可以。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class GetTimeJob implements SimpleJob {

    private static final Logger LOG = LoggerFactory.getLogger(GetTimeJob.class.getName()) ;

    private static final SimpleDateFormat format =
            new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;) ;

    @Override
    public void execute(ShardingContext shardingContext) {
        LOG.info(&quot;Job Name:&quot;+shardingContext.getJobName());
        LOG.info(&quot;Local Time:&quot;+format.format(new Date()));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;添加任务服务&quot;&gt;2、添加任务服务&lt;/h2&gt;
&lt;p&gt;这里就动态添加上面的任务。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
public class TaskJobService {

    @Resource
    private ZookeeperRegistryCenter zookeeperRegistryCenter;

    public void addTaskJob(final String jobName,final SimpleJob simpleJob,
                           final String cron,final int shardCount,final String shardItem) {
        // 配置过程
        JobCoreConfiguration jobCoreConfiguration = JobCoreConfiguration.newBuilder(
                                                    jobName, cron, shardCount)
                                                    .shardingItemParameters(shardItem).build();
        JobTypeConfiguration jobTypeConfiguration = new SimpleJobConfiguration(jobCoreConfiguration,
                                                    simpleJob.getClass().getCanonicalName());
        LiteJobConfiguration liteJobConfiguration = LiteJobConfiguration.newBuilder(
                                                    jobTypeConfiguration).overwrite(true).build();
        TaskJobListener taskJobListener = new TaskJobListener();
        // 加载执行
        SpringJobScheduler jobScheduler = new SpringJobScheduler(
                simpleJob, zookeeperRegistryCenter,
                liteJobConfiguration, taskJobListener);
        jobScheduler.init();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;补刀一句&lt;/code&gt;：这里添加之后，任务就会定时执行，如何停止任务又是一个问题，可以在任务名上做一些配置，比如在数据库生成一条记录[1,job1,state],如果调度到state为停止状态的任务，直接截胡即可。&lt;/p&gt;
&lt;h2 id=&quot;测试接口&quot;&gt;3、测试接口&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RestController
public class TaskJobController {

    @Resource
    private TaskJobService taskJobService ;

    @RequestMapping(&quot;/addJob&quot;)
    public String addJob(@RequestParam(&quot;cron&quot;) String cron,@RequestParam(&quot;jobName&quot;) String jobName,
                         @RequestParam(&quot;shardCount&quot;) Integer shardCount,
                         @RequestParam(&quot;shardItem&quot;) String shardItem) {
        taskJobService.addTaskJob(jobName, new GetTimeJob(), cron, shardCount, shardItem);
        return &quot;success&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code&gt;GitHub·地址
https://github.com/cicadasmile/middle-ware-parent
GitEE·地址
https://gitee.com/cicadasmile/middle-ware-parent&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1691717/201908/1691717-20190823075428183-1996768914.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 11 Mar 2020 23:52:00 +0000</pubDate>
<dc:creator>知了一笑</dc:creator>
<og:description>本文源码： &amp;quot;GitHub&amp;#183;点这里&amp;quot; || &amp;quot;GitEE&amp;#183;点这里&amp;quot; 一、ElasticJob简介 1、定时任务 在前面的文章中，说过Quar</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cicada-smile/p/12466930.html</dc:identifier>
</item>
<item>
<title>初探Linux - Howlet</title>
<link>http://www.cnblogs.com/Howlet/p/12464994.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Howlet/p/12464994.html</guid>
<description>&lt;hr/&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;这是一个小小新手根据自己对Linux的理解而写下的笔记，记录的是大体的学习内容。记录的笔记不全面，甚至没有整体的概念，但也希望能够给部分人一些入门的帮助，实机基于CentOS 7。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;导语学习一件新事物先从大体把握了解其组成部分然后再分模块去学习笔者是依据这样写下笔记的&quot;&gt;导语：学习一件新事物先从大体把握，了解其组成部分然后再分模块去学习，笔者是依据这样写下笔记的&lt;/h4&gt;


&lt;p&gt;Linux的组成可大致分为：&lt;strong&gt;内核&lt;/strong&gt;、&lt;strong&gt;shell&lt;/strong&gt;、&lt;strong&gt;文件系统&lt;/strong&gt;、&lt;strong&gt;应用程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内核（Kernal）：Linux最主要的部分，操作整个计算机的资源，提供内存管理，进程管理，驱动管理等基本功能&lt;/p&gt;
&lt;p&gt;Shell：提供用户与内核进行交互的接口，Shell是一个解析器负责解析命令，将用户传过来的命令解析过后通知内核执行相应的服务、Shell也可以解析Shell脚本，即Shell脚本可以像用户传命令过来一样有被执行的能力&lt;/p&gt;
&lt;p&gt;文件系统：提供文件存储、管理等功能。Linux抽象出虚拟文件系统以便适应不同类型的文件系统&lt;/p&gt;
&lt;p&gt;应用程序：计算器，编辑器，GIMP等&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200254108-602733991.jpg&quot;/&gt;&lt;/p&gt;


&lt;p&gt;从一切皆对象的Java变成一切皆文件的Linux了，因为Linux的系统资源都是以文件形式存在。首先来了解文件系统，其实就是认识各种目录结构及其作用，这里的内容有个印象即可，真要用到回来再看看&lt;/p&gt;

&lt;h3 id=&quot;文件系统结构&quot;&gt;2.1 文件系统结构&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;/ ：根目录&lt;/li&gt;
&lt;li&gt;/bin：二进制可执行文件，即常用的命令（cd、ls、mkdir）&lt;/li&gt;
&lt;li&gt;/sbin：二进制可执行文件，root专属命令&lt;/li&gt;
&lt;li&gt;/boot：系统引导文件&lt;/li&gt;
&lt;li&gt;/dev：设备文件&lt;/li&gt;
&lt;li&gt;/etc：系统配置文件&lt;/li&gt;
&lt;li&gt;/home：各用户的目录&lt;/li&gt;
&lt;li&gt;/root：管理专属目录，不放在home下&lt;/li&gt;
&lt;li&gt;/var：运行时需要改变数据的文件&lt;/li&gt;
&lt;li&gt;/lib ：库&lt;/li&gt;
&lt;li&gt;/usr ：系统应用程序&lt;/li&gt;
&lt;li&gt;/tmp：各种临时文件&lt;/li&gt;
&lt;li&gt;/opt：第三方应用程序&lt;/li&gt;
&lt;li&gt;/proc：系统内存映射，虚拟文件系统&lt;/li&gt;
&lt;li&gt;/mnt：临时文件系统挂载点&lt;/li&gt;
&lt;li&gt;/media：移动设备挂载点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件类型权限组&quot;&gt;2.2 文件类型、权限、组&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 文件类型
–：普通文件
d：目录文件
b：块文件
c：字符文件
l：符号链接文件
p：管道文件pipe
s：套字节文件socket


# 权限
r：可读，表示文件可读，目录可看列表
w：可改，表示文件可改，目录可在内部新建和删除文件
x：可运行，表示文件可运行，目录可进入
可用数字表示：4=r，2=w，1=x
467分别表示：可读，可读可写，可读可写可运行&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;输入命令&lt;code&gt;cd /&lt;/code&gt;，&lt;code&gt;ls -l&lt;/code&gt;显示根目录文件，首字母就表示文件类型，剩余表示权限，之后的数字表示连接数，跟着两个是所有者和所属组&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200711812-143571487.png&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;关于文件目录的命令&quot;&gt;2.3 关于文件目录的命令&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;cd：进入目录
ls：列出目录
mkdir：创建目录
touch：创建文件
mv：移动文件
rm：删除
cp：复制&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;文件打包与压缩&quot;&gt;2.4 文件打包与压缩&lt;/h3&gt;
&lt;p&gt;归档：也称打包，将多个文件或目录一起建立归档，一般是形成 .tar 文件&lt;/p&gt;
&lt;p&gt;压缩：利用算法对文件进行处理，达到压缩大小的目的&lt;/p&gt;
&lt;p&gt;注意：是不能直接压缩目录的，将多个文件或目录打包成一个 .tar 文件然后才能进行压缩，所以打包和压缩一般是同时进行的。压缩格式有：bz2，xz，zip，gz（最常见）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tar -zcvf：选项从左到右表示gzip压缩，打包文件，显示过程，指定文件名
tar -zxvf：其中z表示解压缩（同一选项不同功能），x表示解包
tar -zcvf file.tar.gz  file：表示将file打包与压缩并命名为file.tar.gz，其后缀是为了方便辨认&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;文本编辑器vim&quot;&gt;2.5 文本编辑器Vim&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200725235-780932935.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在一切皆文件下，学会使用文本编辑器很关键，这里介绍Vim&lt;/p&gt;
&lt;p&gt;在没有学Vim之前，笔者进入文本编辑器看着命令行不知所措，乱按一通没有效果，只好关机重启，居然被小小的文本编辑器打败了，不好意思说是计算机专业的，这和windows的记事本完全不一样。在进入Vim之前，请先看清楚使用方法，不然进去就和笔者一样要重启解决&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、Vim的三种模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Normal：默认进入时的模式，输入会被当成命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;i：进入Insert模式
gg：跳转文头
G：跳转文末
/：查找
n：下一个
y：复制
p：粘贴
x：删除
u：撤回&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Insert：输入的内容会插入到文件中（按 i 进入）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ESC键：退出Insert，进入Normal模式&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Command ：在Normal下输入&lt;code&gt;：&lt;/code&gt;会进入，在最后一行会有提示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:q   不保存退出
:q!  不保存强制退出
:w   保存但不退出
:w!  强制保存
:wq! 强制保存退出
:w [文件名] 另存为&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;二、Vim的进入：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim 文件名：直接进入&lt;/code&gt;
&lt;/pre&gt;



&lt;h3 id=&quot;应用程序安装&quot;&gt;3.1 应用程序安装&lt;/h3&gt;
&lt;p&gt;Linux应用程序的安装可分为源码安装和二进制安装&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;源码安装：&lt;/strong&gt;是编写出的源代码，需计算机编译成二进制文件后才可进行安装，其编译时间较长，安装步骤繁杂，若安装过程中报错，新手是很难解决的，但也有优势：可自由选择需要的功能甚至可以改写源代码，因为是编译安装所以更适合自己的系统，效率和稳定性也有提升（笔者还未接触到，不做说明）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二进制安装（举例rpm包管理器）：&lt;/strong&gt;是源码经过编译后的安装包，安装速度较快，不需要编译所以出错概率很小&lt;/p&gt;
&lt;p&gt;rpm安装是用默认安装路径的，不建议修改&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;i：安装
v：详情
h：进度
rpm -ivh 包全名：表示安装某一程序，注意要出现两次100%才是安装完成，第一次表示完成安装的准备&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rpm安装也有其缺点，因为程序间依赖关系复杂，若rpm安装过程中缺失依赖会报错，而且卸载时要从后安装的依赖开始卸载&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a：查询所有套件
q：查询是否安装某软件
|：管道符，将前面命令的输出交给后面的命令
grep：搜索

# 查询某程序是否安装
rpm -qa | grep 程序包名
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;查询 yum程序 是否安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200747089-129831499.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这些程序安装都过于繁杂，有没有适合新手的？ 当然有那就是yum了，yum是基于rpm的，所以也是二进制安装，安装速度较快，重要的是&lt;strong&gt;自动解决依赖问题，不需要手动下载&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;yum安装&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;y：安装过程中的选项都选择yes
install：安装rpm软件包
search：查看特定安装包
update：更新rpm软件包
check-update：检查是否有可用的更新rpm软件包
remove：删除指定的rpm软件包
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这里举例 gcc程序 的安装，gcc是C语言编译器，这学期上Linux程序设计需要用到&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum -y install gcc
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200802512-1303089816.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从安装过程可以看到，yum会自动解决依赖关系，一键安装的感觉&lt;/p&gt;

&lt;h3 id=&quot;程序的打开&quot;&gt;3.2 程序的打开&lt;/h3&gt;
&lt;p&gt;常规的程序在命令行输入程序名即可打开，其安装在 $PATH下，即 /bin，/usr/bin，/usr/local/bin中，系统会去 $PATH 下查找，类似于windows下的环境变量&lt;/p&gt;

&lt;p&gt;其他程序则要主动去到程序的安装目录下输入启动文件来打开，假如要打开lampp&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/opt/lampp/./lampp start
其中./表示当前目录，不然系统会去环境变量找
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;或者将这个程序的安装目录加入到 $PATH中，这样就可以在命令行直接输入来启动程序了（类似windows下添加jdk环境变量）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export PATH = $PATH:/opt/lampp
&lt;/code&gt;
&lt;/pre&gt;



&lt;h3 id=&quot;shell编程&quot;&gt;4.1 Shell编程&lt;/h3&gt;
&lt;p&gt;Shell编程是对Linux命令的逻辑化处理，笔者笔记的自动上传也是用了Shell编程，不要觉得很深奥，其实有了编程语言的基础，几分钟就可以入门。&lt;strong&gt;笔者挑出部分基础说明，达到让大家认识Shell编程的目的即可&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;简单入门&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;touch helloWorld.sh     （新建一个helloWorld.sh文件，`后缀`只是为了方便辨认，没有实质作用）
vim helloworld.sh       （文件中加入 echo &quot;helloworld&quot; ，echo表示输出，保存并退出vim）
chmod +x helloworld.sh  （增加可运行的权限）
./helloworld.sh         （运行Shell脚本）
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200817898-1638334015.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是很简单？&lt;/p&gt;

&lt;h3 id=&quot;与java的差异&quot;&gt;4.2 与Java的差异&lt;/h3&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;非&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;-o&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-a&lt;/td&gt;
&lt;td&gt;与&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-eq&lt;/td&gt;
&lt;td&gt;数字是否相等&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;-gt&lt;/td&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-lt&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;-z&lt;/td&gt;
&lt;td&gt;长度是否为0，为0返回true&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;str&lt;/td&gt;
&lt;td&gt;是否为空&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;if：（简单事例）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a=1;
b=1;

if [ $a -eq $b ]
then
   echo &quot;equal&quot;
elif [ $a -gt $b ]
then
   echo &quot;大于&quot;
else
   echo &quot;小于&quot;
fi
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;for：（简单事例）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/bash

for value in 1 3 5 7 9
do
    echo $value
done
exit 0
&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;内核提供进程管理，网络管理等功能，所以笔者将这些内容归到内核模块下&lt;/p&gt;

&lt;h3 id=&quot;进程--ps&quot;&gt;5.1 进程--ps&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;e：显示所有程序
f：显示UID,PPIP,C与STIME栏位
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200840092-2050920921.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UID：用户ID
PID：进程ID
PPID：父进程ID
C：优先级
STIME：进程启动的时间
TTY：使用终端
TIME：CPU时间
CMD：显示完整的启动进程所用的命令和参数
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;进程--kill&quot;&gt;5.2 进程--kill&lt;/h3&gt;
&lt;p&gt;关闭进程，那么首先需要知道进程ID。假如关闭运行的vim&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ps -ef | grep vim
kill [进程号]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200853511-1395812192.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左边为开着的vim进程&lt;/p&gt;

&lt;h3 id=&quot;进程--前后台&quot;&gt;5.3 进程--前后台&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;jobs：查看后台运行的进程
fg：将后台进程转至前台
bg：将前台进程转至后台
在命令行最后加入 &amp;amp;：也是将前台进程转至后台
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这里将下载redis的任务加入后台（快捷键 Ctrl + z），用jobs查看后台进程，再用fg将其调至前台&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200908563-1428442488.png&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;网络--端口&quot;&gt;5.4 网络--端口&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;netstat&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;n：不DNS轮询，显示IP
t：显示TCP端口
u：显示UDP端口
l：仅显示套接字
p：显示进程标识符和程序名称

# 查看80端口
netstat -ntp | grep 80
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;防火墙端口 firewall-cmd&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--query-port=&amp;lt;端口号&amp;gt;/&amp;lt;protocol&amp;gt;：查询指定端口
--add-port=&amp;lt;端口号&amp;gt;/&amp;lt;protocol&amp;gt;：开放端口
--remove-port=&amp;lt;端口号&amp;gt;/&amp;lt;protocol&amp;gt;：关闭端口

--zone=public：作用域
--permanent：永久生效
--reload：重启防火墙


# 查询是否开启
firewall-cmd --zone=public --query-port=80/tcp

# 开启防火墙端口
firewall-cmd --zone=public --add-port=80/tcp --permanent

# 重载防火墙
firewall-cmd --reload
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1737887/202003/1737887-20200311200919254-752459961.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这是笔者目前所浅显理解的Linux，Linux很优秀，需要在不断地使用中去挖掘&lt;/strong&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;CentOS 7&lt;/p&gt;
&lt;p&gt;​ 菜鸟教程&lt;/p&gt;
&lt;p&gt;《鸟哥的私房菜》&lt;/p&gt;

</description>
<pubDate>Wed, 11 Mar 2020 23:21:00 +0000</pubDate>
<dc:creator>Howlet</dc:creator>
<og:description>这是一个小小新手根据自己对Linux的理解而写下的笔记，记录的是大体的学习内容。记录的笔记不全面，甚至没有整体的概念，但也希望能够给部分人一些入门的帮助，实机基于CentOS 7。 导语：学习一件新事</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Howlet/p/12464994.html</dc:identifier>
</item>
<item>
<title>何为安全发布，又何为安全初始化？ - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/12459141.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/12459141.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;很多时候我们需要跨线程共享对象，若存在并发我们必须以线程安全的方式共享对象，此时将涉及到我们如何安全初始化对象从而进行安全发布，本节我们将来讨论安全初始化、安全发布，文中若有错误之处，还望批评指正。&lt;/p&gt;
&lt;h2&gt;安全发布&lt;/h2&gt;
&lt;p&gt;按照正常叙述逻辑来讲，我们应该首先讨论如何安全初始化，然后再进行安全发布分析，在这里呢，我们采取倒叙的方式，先通过非安全发布的方式讨论所出现的问题，然后最后给出如何进行安全初始化，如下，我们以单例模式为例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SynchronizedCLFactory {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Singleton instance;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Singleton get() {
        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                instance &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Singleton();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; instance;
        }
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Singleton {

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上提供了用于获取Singleton实例的公共方法，我们通过同步关键字保持线程安全，无论有多少个线程在请求一个Singleton，也不管当前状态如何，所有线程都将获得相同的Singleton实例，Singleton初始化在第一次请求Singleton时发生，而不是在初始化Singleton类时发生，至于是否惰性初始化并不是我们关注的重点，同时将对代码块加锁，使得Singleton状态的开销尽量保持最小。为了更加严谨而使得单例必须具备唯一实例，我们进行DCL（Double Check Lock），我们可能会进行如下改造：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SynchronizedCLFactory {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Singleton instance;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Singleton get() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    instance &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Singleton();
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; instance;
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Singleton {

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或许我们认为成功完成进行第一步判断之后，就可以正确初始化Singleton实例，然后可以将其返回，其实这是错误的理解，因为Singleton实例仅对构造线程完全可见，而无法保证在其他线程中能够正确看到Singleton实例，因为正在与初始化Singleton实例线程存在竞争，再者，即使最终已获得非空实例，也并不意味着我们能正确观察其内部状态，从JMM角度来看，在Singleton构造函数中的初始化存储与读取Singleton字段之间没有发生任何事情，我们也可以看到，在第一步判断和最后一步返回并没有进行任何同步的读取，Java内存模型的目的之一是允许对普通读取进行重排序（reordering），否则性能开销将可想而知，在规范方面，读取操作可以通过竞争观察无序写入，这是针对每个读取动作决定的，而与其他什么动作已经读取同一位置没有任何关系，在如上示例中，这意味着即使通过第一步判断可以读取非空实例，但代码随后继续返回它，然后又读取了一个原始值，并且可以读取将返回的空的实例。安全发布与常规发布在一个关键点上有所不同：&lt;span&gt;安全发布使发布之前编写的所有值对观察发布对象的所有线程可见，它大大简化了关于动作，命令等JMM约定规则。&lt;/span&gt;所以接下来我们来讲讲安全发布之前的动作即安全初始化。&lt;/p&gt;
&lt;h2&gt;安全初始化&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在初始化共享对象时，该对象必须只能由构造它的线程访问，但是，一旦初始化完成，就可以安全的发布对象即使该对象对其他线程可见，Java内存模型（JMM）允许多个线程在初始化开始后但结束之前观察对象，因此，我们写程序时必须防止发布部分初始化的对象，该规则禁止在初始化结束之前发布对部分初始化的成员对象实例的引用，特别适用于多线程代码中的安全性，在对象构造期间不要让this引用转义，以防止当前对象的this引用转义其构造函数。&lt;/span&gt;如下代码示例在Foo类的initialize方法中构造一个Holder对象，Holder对象的字段由其构造函数初始化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Holder holder;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Holder getHolder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; holder;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize() {
        holder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Holder(42&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Holder {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Holder(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.n =&lt;span&gt; n;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果线程在执行initialize方法之前使用getHolder方法访问Holder类，则该线程将观察到未初始化的holder程序字段，接下来如果一个线程调用initialize方法，而另一个调用getHolder方法，则第二个线程可以观察这几种情况之一：holder的引用为空、完全实例化的Holder对象中的n为42，具有未初始化n的部分初始化的Holder对象，其中包含字段的n默认值0，其主要原因在于，&lt;span&gt;JMM允许编译器在初始化新的Holder对象之前为新的Holder对象分配内存&lt;/span&gt;，并将对该内存的引用分配给holder字段，换句话说，编译器可以对holder实例字段的写入和初始化Holder对象的写入（即this.n = n）进行重排序，以至于使前者优先出现，这将出现一个竞争，在此期间其他线程可以观察到部分初始化的Holder对象实例。&lt;span&gt;在对象构造函数完成其初始化之前，不应发布对对象实例的引用，这会在对象构造期间造成this引用逸出。&lt;/span&gt;我们继续往下看如何正确的进行安全初始化。&lt;/p&gt;
&lt;h3&gt;同步机制&lt;/h3&gt;
&lt;p&gt;我们使用方法同步可以防止发布对部分初始化的对象的引用，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Holder holder;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; Holder getHolder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; holder;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize() {
        holder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Holder(42&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们将上述初始化和获取实例化的变量holder这两种方法进行同步，可确保它们不能同时执行，如果一个线程恰好在getHolder方法的线程之前调用initialize方法，则同步的initialize方法将始终首先完成，这是因为synchornized关键字在两个线程之间建立了事前发生（happens-before）的关系，因此调用getHolder方法的线程将看到完全初始化的Holder对象或缺少的Holder对象，也就是说，holder将包含空引用，这种方法保证了对不可变成员和可变成员的完全正确发布。&lt;/p&gt;
&lt;h3&gt;final关键字&lt;/h3&gt;
&lt;p&gt;JMM保证将声明为final的字段的完全初始化的值安全发布到每个线程，这些线程在不早于对象构造函数结尾的某个时间点读取这些值，如下代码示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Holder holder;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;  Foo(){
        holder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Holder(42&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Holder getHolder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; holder;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，此解决方案需要将新的Holder实例holder分配在Foo的构造函数中进行，&lt;span&gt;根据Java语言规范，在构造期间读取final字段：构造该对象的线程中对象的final字段的读取是根据通常的事前发生（happens-before）规则对构造函数中该字段的初始化进行排序的，如果在构造函数中设置了字段之后才进行读取，则它将看到为final字段分配的值，否则，它将看到的是默认值，因此，在Foo类的构造函数完成之前，对Holder实例的引用应保持未发布状态。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;final关键字和线程安全组合&lt;/h3&gt;
&lt;p&gt;我们知道在java中有一些集合类提供对包含元素的线程安全访问，当我们将Holder对象插入到这样的集合中时，可以确保在将其引用变为可见之前对其进行完全初始化，比如如下Vector集合。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Vector&amp;lt;Holder&amp;gt;&lt;span&gt; holders;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Foo() {
        holders &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Vector&amp;lt;&amp;gt;&lt;span&gt;();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Holder getHolder() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (holders.isEmpty()) {
            initialize();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;  holders.elementAt(0&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (holders.isEmpty()) {
            holders.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Holder(42&lt;span&gt;));
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将holder字段声明为final，以确保在进行任何访问之前始终创建对象Holder的集合Vector，可以通过调用同步的initialize方法安全地对其进行初始化，以确保仅将一个Holder对象添加到Vector中，如果在initialize方法之前调用，那么getHolder方法通过有条件地调用initialize方法来避免空指针从而取消引用的可能性，尽管getHolder方法中的isEmpty方法调用的是从不同步的上下文（允许多个线程决定必须调用初始化）进行的，但是仍然可能导致竞争条件，而这种竞争条件可能导致向Vector集合中添加第二个对象，同步的initialize方法还在添加新的Holder对象之前检查holder是否为空，并且最多一个线程可以随时执行initialize方法，因此，只有第一个执行initialize方法的线程才能看到一个空的Vector集合，而getHolder方法可以安全地忽略其自身的任何同步。&lt;/p&gt;
&lt;h3&gt;静态初始化&lt;/h3&gt;
&lt;p&gt;我们将holder字段静态初始化，以确保该字段引用的对象在其引用变为可见之前已完全初始化，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Holder holder = &lt;span&gt;new&lt;/span&gt; Holder(42&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Holder getHolder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; holder;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们需要将holder字段声明为final，以记录该类的不变性，&lt;span&gt;根据Java语言规范，静态final字段：类初始化的规则确保任何读取静态字段的线程将与该类的静态初始化同步，这是可以设置静态final字段的唯一位置，因此，对于静态final字段，JMM中不需要特殊规则。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;不可变对象（final关键字、volatile引用）&lt;/h3&gt;
&lt;p&gt;JMM保证在发布的对象变得可见之前，对象的所有final字段都将完全初始化，通过声明final使得Holder类变得不可变， 另外将holder字段声明为volatile以确保对不可变对象的共享引用的可见性，只有在完全初始化Holder之后，才能确保对调用getHolder方法的任何线程可见Holder的引用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; Holder holder;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Holder getHolder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; holder;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize() {
        holder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Holder(42&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Holder {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Holder(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.n =&lt;span&gt; n;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上将holder声明为volatile且Holder类是不可变的，如果辅助字段不是可变的，则将违反确保对不可变对象的共享引用的可见性，推荐提供公共静态工厂方法来返回Holder的新实例，这种方法允许在私有构造函数中创建Holder实例。&lt;span&gt;不可变对象永远线程安全，volatile确保其可见性使得共享对象能够完全正确安全发布。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;可变对象（线程安全和volatile引用）&lt;/h3&gt;
&lt;p&gt;当Holder虽可变但线程安全时，可以通过在Holder类的volatile中声明holder字段来安全地发布它：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; Holder holder;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Holder getHolder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; holder;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize() {
        holder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Holder(42&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Holder {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Holder(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.n =&lt;span&gt; n;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setN(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n) {
        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (lock) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.n =&lt;span&gt; n;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要进行同步以确保在初始发布之后可变成员的可见性，因为Holder对象可以在其构造后更改状态，同步setN方法以确保n字段的可见性，如果Holder类的同步不正确，则在Foo类中声明volatile的holder将只能保证Holder初始发布的可见性，可见性保证将排除后续状态更改的可见性，因此，仅可变引用不足以发布不是线程安全的对象，如果Foo类中的holder字段未声明为volatile，则必须将n字段声明为volatile，以在n的初始化与将Holder写入holder字段之间建立事先发生（happens-before）的关系，仅当无法信任调用方（类Foo）时将Holder类声明为volatile时才需要这样做，因为Holder类被声明为公共类，所以它使用私有锁来进行同步，使用私有的final锁定对象来同步可能与不受信任的代码。&lt;/p&gt;

&lt;p&gt;那么问题来了， 声明对象的volatile能与声明基本类型的volatile提供同样的保证吗？如果有可变或线程安全的对象我们是否有十分充足的理由声明为volatile呢？&lt;span&gt;声明对象的volatile不能提供与声明基本类型的volatile提供相同的保证，对于可变的对象应禁止声明为volatile，而是设置同步，因为同步化主要强调的是原子性，其次才是可见性，但volatile主要保证的是可见性，所以可变对象和volatile一同使用时会出现陷阱（仅当共享对象已完全构造或不可变时，才可以使用volatile安全发布），所以当通过正确性推断出可见性时，应该避免使用volatile变量，volatile主要是用来确保它所引用对象的可见性或用于标识重要的生命周期事件（比如初始化或关闭）的发生。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果一个对象不是不可变的，那么它必须要被安全发布，如何确保其他线程能够看到对象发布时的状态，必须解决对象发布后其他线程对其修改的可见性问题，为了安全发布对象，对象的引用以及对象的状态必须同时对其他线程可见，一个正确创建的对象可通过：&lt;/span&gt;&lt;span&gt;通过静态初始化器初始化对象的引用（因为JMM可确保共享对象已完全构造）、将对象引用存储到volatile或AtomicReference、将对象引用存储到正确创建的对象的final域中、将对象引用通过锁机制保护。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Java允许我们始终可以以安全发布的方式声明对象即为我们提供了安全初始化的机会，安全初始化使观察该对象的所有读者都可以看到构造函数中初始化的所有值，而不管对象是否被安全发布，如果对象中的所有字段都是final，并且构造函数中未初始化的对象没有逸出，那么Java内存模型（JMM）将更加对此提供强有力保障，我们应时刻谨记共享对象在进行安全发布之前必须避免被部分初始化即局部创建对象。&lt;/p&gt;
</description>
<pubDate>Wed, 11 Mar 2020 23:19:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<og:description>前言 很多时候我们需要跨线程共享对象，若存在并发我们必须以线程安全的方式共享对象，此时将涉及到我们如何安全初始化对象从而进行安全发布，本节我们将来讨论安全初始化、安全发布，文中若有错误之处，还望批评指</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/CreateMyself/p/12459141.html</dc:identifier>
</item>
<item>
<title>浅谈JS之setTimeout与setInterval - 爱在846</title>
<link>http://www.cnblogs.com/aizai846/p/12466726.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aizai846/p/12466726.html</guid>
<description>&lt;p&gt;本文简单的介绍了setTimeout和setInterval的概念及语法，并通过Vue实例演示了在实际项目的用法，通过本文可以彻底的掌握这两个Window 对象方法。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;84&quot;&gt;
&lt;h3&gt;概念&lt;/h3&gt;
&lt;p&gt;setTimeout与clearTimeout，以及setInterval与clearInterval均属于Window对象方法。&lt;/p&gt;
&lt;table class=&quot;gridtable&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;setTimeout&lt;/td&gt;
&lt;td&gt;在指定的毫秒数后调用函数或计算表达式。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;clearTimeout&lt;/td&gt;
&lt;td&gt;取消由 setInterval() 设置的 timeout。取消由 setTimeout() 方法设置的 timeout。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;setInterval&lt;/td&gt;
&lt;td&gt;按照指定的周期（以毫秒计）来调用函数或计算表达式。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;clearInterval&lt;/td&gt;
&lt;td&gt;取消由 setInterval() 设置的 timeout。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;具体语法&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;setTimeout&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;setTimeout(code, milliseconds)
setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;, milliseconds, param1, param2, ...)
&lt;/pre&gt;&lt;/div&gt;
&lt;table class=&quot;gridtable&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;th align=&quot;left&quot; width=&quot;20%&quot;&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot; width=&quot;80%&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;code/function&lt;/td&gt;
&lt;td&gt;必需。要调用一个代码串，也可以是一个函数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;milliseconds&lt;/td&gt;
&lt;td&gt;可选。执行或调用 code/function 需要等待的时间，以毫秒计。默认为 0。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;param1, param2, ...&lt;/td&gt;
&lt;td&gt;可选。 传给执行函数的其他参数（IE9 及其更早版本不支持该参数）。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class=&quot;gridtable&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;th&gt;返回值:&lt;/th&gt;
&lt;td&gt;返回一个 ID（数字），可以将这个ID传递给 clearTimeout() 来取消执行。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;setInterval&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;setInterval(code, milliseconds);
setInterval(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;, milliseconds, param1, param2, ...)
&lt;/pre&gt;&lt;/div&gt;
&lt;table class=&quot;gridtable&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;th align=&quot;left&quot; width=&quot;20%&quot;&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot; width=&quot;80%&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;code/function&lt;/td&gt;
&lt;td&gt;必需。要调用一个代码串，也可以是一个函数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;milliseconds&lt;/td&gt;
&lt;td&gt;必须。周期性执行或调用 code/function 之间的时间间隔，以毫秒计。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;param1, param2, ...&lt;/td&gt;
&lt;td&gt;可选。 传给执行函数的其他参数（IE9 及其更早版本不支持该参数）。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class=&quot;gridtable&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;th&gt;返回值:&lt;/th&gt;
&lt;td&gt;返回一个 ID（数字），可以将这个ID传递给clearInterval()，clearTimeout() 以取消执行。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;实例&lt;/h4&gt;
&lt;p&gt;实例简单描述：该实例是通过Vue实现的，具体操作要求是单击【开始游戏】按钮3秒钟后执行走马灯效果，单击【结束游戏】按钮停止走马灯效果，具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;走马灯效果&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./lib/vue-2.4.0.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;开始游戏&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;startGame&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;结束游戏&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;stopGame&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ msg }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
      el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
      data: {
        msg: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请点击开始游戏！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        intervalId: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;
      },
      methods: {
        startGame() {
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;敌军还有3秒到达战场……&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
          setTimeout(() &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;兄弟们冲啊~~~~~~&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.intervalId &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; setInterval(() &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; start &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg.substring(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; end &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg.substring(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
              &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; end &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; start;
            }, &lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;)
          }, &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;)
        },
        stopGame() {
          clearInterval(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.intervalId);
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.intervalId &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;游戏结束！请点击重新开始！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
      },
    })
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，用到了箭头函数，箭头函数表达式没有自己的this,arguments,super或new.target，所以可以在方法内部直接访问外边的this。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;作为一个IT工作者，一直在学习的路上，东西太多只有不断的练习和总结才能实现真正的自我提升，其实，写博客也是对自己的督促，自己要努力的坚持下去，同时也希望本文对你有所帮助！&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 11 Mar 2020 17:19:00 +0000</pubDate>
<dc:creator>爱在846</dc:creator>
<og:description>本文简单的介绍了setTimeout和setInterval的概念及语法，并通过Vue实例演示了在实际项目的用法，通过本文可以彻底的掌握这两个Window 对象方法。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/aizai846/p/12466726.html</dc:identifier>
</item>
<item>
<title>Nginx之负载均衡配置（一） - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/12458159.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/12458159.html</guid>
<description>&lt;div id=&quot;cnblogs_post_description&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/qiuhom-1874/1655970/o_200227010408o_200226171105timg.jpeg&quot; class=&quot;desc_img&quot;/&gt; 假如我们后端服务器有一台服务出现故障，nginx会不会把用户的请求调度到出现故障的服务器上呢？我们知道在lvs做调度器时，前端lvs会把用户的请求调度到出现故障的服务器上，我们需要借助keepalived或者其他辅助服务去实现对后端服务器做健康状态监测，才能把用户的请求不调度到有故障的后端服务器上，nginx会不会呢？&lt;/div&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;164.08253379852&quot;&gt;
&lt;p&gt;　　前文我们聊了下nginx作为反向代理服务器，代理后端动态应用服务器的配置，回顾请参考&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/12430543.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/12430543.html&lt;/a&gt;；今天我们来聊一聊nginx作为反向代理服务器，代理一组服务器的配置（负载均衡）；前边我们只说到了nginx怎么去代理后端服务器响应客户端的请求，它在响应客户端请求的流程是这样的，用户请求发送到nginx代理服务器上，此时nginx服务器扮演的就是服务端的角色，客户端是无法感知后端服务器的存在，而用户的报文被nginx接收后，nginx代理服务器它会把用户的请求报文拆开看，用户请求的资源，然后把用户的请求资源，拿到自己的location中进行匹配，如果匹配到了，就按照匹配到的location中定义的代理规则进行代理，在这之前nginx首先会看自己的缓存是否存在用户请求的资源，如果有，它就从缓存中响应用户，如果没有，它就扮演客户端的角色，重新对用户请求重新封装请求报文，发送给后端服务器，后端服务器收到请求后，把对应资源响应给nginx代理服务器，nginx会把后端服务器响应的资源，先缓存一份（如果允许缓存的话），然后在封装响应报文，响应客户端；从这样一个过程来看，nginx它既当服务器角色，又当客户端角色，而且nginx是可以把用户的报文拆开，然后再封装；这是nginx作为代理服务器代理后端服务器响应客户端请求的一个过程（后端服务器是一个的情况）；如果后端服务器有多个，都是提供者相同的服务，此时我们该怎么把客户端的请求代理到后端多台服务器呢？&lt;/p&gt;
&lt;p&gt;　　首先我们来了解下nginx的upstream模块，nginx的upstream模块有两个，一个是基于http协议的upstream，它主要是基于http协议定义后端服务器组，还有一个就是基于tcp协议的upstream，它主要是基于tcp协议定义后端服务器组；我们先说nginx的http里的upstream模块吧！！！&lt;/p&gt;
&lt;p&gt;　　一、ngx_http_upstream_module：此模块用于定义一组服务器，然后被proxy_pass、fastcgi_pass、uwsgi_pass、scgi_pass和memcached_pass指令引用的服务器组。意思很简单，就是把相同的多台服务器归并成一组服务器，然后nginx基于各种协议的代理，把请求代理到该组上，从而实现把用户请求代理到后端多台服务器上&lt;/p&gt;
&lt;p&gt;　　1、upstream name {……}：此指令只能用于http配置段中，意思是定义一组后端服务器组；&lt;/p&gt;
&lt;p&gt;　　2、server address [parameters]:此指令用于upstream配置段中，表示定义upstream配置段中的server成员，以及相关的参数；其中地址的格式支持IP地址加端口的形式，支持unix path路径，也支持主机名或域名加端口的形式；parameters表示参数，常用的参数有weight=number权重，默认是1，max_fails=number表示失败尝试最大次数；超出此处指定的次数，nginx将失败的server标记为不可用；fail_timeout=time表示设置将服务器标记为不可用状态的超时时长；max_conns表示当前的服务器的最大并发连接数；backup表示将服务器标记为“备用”，既所有服务器均不可用时，此服务器才会被启用，有点类似LVS里的sorry server的角色；down表示将服务器标记为“不可用”&lt;/p&gt;
&lt;p&gt;　　3、least_conn：此指令表示最少连接调度算法，当server拥有不同的权重时表示wlc算法&lt;/p&gt;
&lt;p&gt;　　4、ip_hash：此指令类似lvs里的sh算法（源地址哈希算法），同一客户端地址始终调度到同一台服务器上；&lt;/p&gt;
&lt;p&gt;　　5、hash key [consistent]：基于指定的key的hash表示实现对请求的调度，此处的key可以是文本、变量、或者二者的组合；作用是将请求分类，将同一类请求发往同一个upstream的server进行响应；&lt;/p&gt;
&lt;p&gt;　　6、keepalive connections：为每个worker进程保留的空闲的长连接数量；&lt;/p&gt;
&lt;p&gt;　　示例：&lt;/p&gt;
&lt;p&gt;　　定义一组服务器名为webserver&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311205549334-1464754842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：upstream 只能用于定义在http配置段中，它表示定义一组服务器，名为webserver ，后续调度直接将用户请求代理到该组上即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311210536201-1213986548.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：以上配置表示将用户访问www.proxy.com时将用户请求代理到webserver这个组上的服务器，默认情况下是轮询的；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202003/1503305-20200311212535116-326155839.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　提示：可以看到客户端的请求是可以通过nginx把请求代理到后端一组服务器上，从上面的响应结果来看，我们不配置任何权重，它默认就是轮询的（当然上面的结果也有重复的，这个还不太清楚为什么会重复，可能是每个报文的响应速度不一样吧，但总的响应是一样的每个后端服务器各占一半）；当然我们也是可以给不同的服务器加上不同的权重，此时nginx作为调度器就是使用的加权轮询，如下配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311214029246-517110432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  　　提示：以上配置表示 192.168.0.20这台服务器的权重是5，0.22的权重是2，意思就是7个请求中，0.20处理5个请求，0.22处理2个请求；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311214316385-1433134984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　假如我们后端服务器有一台服务出现故障，nginx会不会把用户的请求调度到出现故障的服务器上呢？我们知道在lvs做调度器时，前端lvs会把用户的请求调度到出现故障的服务器上，我们需要借助keepalived或者其他辅助服务去实现对后端服务器做健康状态监测，才能把用户的请求不调度到有故障的后端服务器上，nginx会不会呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202003/1503305-20200311220251837-1142040477.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到nginx不会把用户的请求调度到有故障的服务器上，这是因为nginx自身就有对后端服务器做健康状态监测的机制，能够及时的发现后端服务器的健康状态，及时的将服务不可用的后端主机从集群中下线，当然这种下线是当服务不可用时，自动触发的动作，我们也可以人为的把后端服务器标记为不可用状态，通常在做灰度发布时可能用到，直接在服务器后面明确用down来标记该服务器，不接受任何请求；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311221750924-202479459.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置表示把0.22这台主机从webserver组中下线，下线的意思就是不再往上调度请求；当然此时的组中服务器就只用0.20这一台主机，用户请求也只能调度到这台上，所以用户不管怎么请求，nginx都只会把请求调度到0.20这台后端主机上；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311221838118-153124061.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　假如后面的两台主机都宕机了，此时用户访问我们的网站会不会像lvs那样，有sorry server 来给用户说sorry 呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202003/1503305-20200311222553231-1091332372.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到当后端主机全部宕机后，没有像lvs里的有sorry server出来给用户说sorry 或者响应客户端请求的；在nginx里sorry server里的配置很简单，只需要在服务器的后面打上backup的标签即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311223010002-522647454.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置表示把127.0.0.1:80作为sorry server ,意思是组里的正常被代理的主机全部宕机后，这台主机才会被调度，当组里主机有一台恢复正常，这台主机就不被调度，用户请求将调度到正常的那一台主机上；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202003/1503305-20200311223731519-1454096086.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到当后端主机全部宕机后，sorry server就会被调度；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202003/1503305-20200311224127152-665027739.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：当后端主机恢复时，sorry server 就不会被调度，用户的请求将会被代理至恢复的那台主机上；&lt;/p&gt;
&lt;p&gt;　　以上就是nginx作为负载均衡的常用配置，接下来我们在说说调度算法&lt;/p&gt;
&lt;p&gt;　　基于源地址hash算法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311224815815-1222260267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置表示同一源地址的客户端请求将会调度到后端某一台server上进行响应&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202003/1503305-20200311225127092-709532697.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到同一客户段始终被调度到一台server上进行响应，这种就叫做源地址绑定；除了以上ip_hash;来指定绑定源地址，还可以通过hash key来指定，以上配置等同hash $remote_addr;&lt;/p&gt;
&lt;p&gt;　　基于用户请求的uri进行绑定，用户请求同一uri始终调度到某一server上响应，这样做的好处可以使缓存命中提高；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311225700597-1630533637.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置表示绑定用户请求的rui，不同的用户请求同一rui时，nginx会始终把同一rui的请求调度到同一台server上进行响应；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/i-beta/1503305/202003/1503305-20200311230838672-919902083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到同一客户端请求不同的uri时，会根据请求的uri随机调度到某一台server上进行响应；从上面的配置实例我们可以知道我们把什么当作key来hash，就可以实现基于什么来绑定后端服务器，比如基于用户请求的uri当作hash对象，那么用户请求同一uri就会被调度到同一server上进行响应，如果基于用户源ip地址当作hash对象，那么同一源IP地址的用户，不论请求什么uri都会被调度到同一server进行响应；按这个逻辑我们可以绑定用户的信息来做调度；&lt;/p&gt;
&lt;p&gt;　　以上就是nginx作为七层代理http请求的负载均衡的常用配置；总结一点nginx作为负载均衡使用其中核心的思想就是把同类服务的服务器先归并到一个组里，然后基于不同协议的代理来把用户的请求反代到该组上，然后基于某种调度算法来实现把用户请求调度到某一台server进行响应；&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 11 Mar 2020 15:44:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>前文我们聊了下nginx作为反向代理服务器，代理后端动态应用服务器的配置，回顾请参考https://www.cnblogs.com/qiuhom-1874/p/12430543.html；今天我们来聊</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/12458159.html</dc:identifier>
</item>
</channel>
</rss>