<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>九种高性能可用高并发的技术架构 - 萌萌丶小魔王</title>
<link>http://www.cnblogs.com/xiaomowang/p/13051101.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaomowang/p/13051101.html</guid>
<description>&lt;p&gt;分层架构是逻辑上的，在物理部署上，三层架构可以部署在同一个物理机器上，但是随着网站业务的发展，必然需要对已经分层的模块分离部署，即三层结构分别部署在不同的服务器上，是网站拥有更多的计算资源以应对越来越多的用户访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1、分层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分层是企业应用系统中最常见的一种架构模式，将系统在横向维度上切分成几个部分，每个部分负责一部分相对简单并比较单一的职责，然后通过上层对下层的依赖和维度组成一个完整的系统。&lt;/p&gt;
&lt;p&gt;在网站的分层架构中，常见的为3层，即应用层、服务层、数据层。应用层具体负责业务和视图的展示；服务层为应用层提供服务支持；数据库提供数据存储访问服务，如数据库、缓存、文件、搜索引擎等。&lt;/p&gt;
&lt;p&gt;分层架构是逻辑上的，在物理部署上，三层架构可以部署在同一个物理机上，但是随着网站业务的发展，必然需要对已经分层的模块分离部署，即三层结构分别部署在不同的服务器上，使网站拥有更多的计算资源以应对越来越多的用户访问。&lt;/p&gt;
&lt;p&gt;所以，虽然分层架构模式最初的目的是规划软件清晰的逻辑结构以便于开发维护，但在网站的发展过程中，分层结构对网站支持高并发向分布式方向的发展至关重要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/799221/202006/799221-20200605171422392-1754530218.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;2、冗余&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网站需要7*24小时连续运行，那么就得有相应的冗余机制，以防止某台机器宕掉时无法访问，而冗余则可以通过部署至少两台服务器构成一个集群实现服务高可用。数据库除了定期备份还需要实现冷热备份。甚至可以在全球范围内部署灾备数据中心。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、分离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果说分层将软件横向方面进行切分，那么分隔就是在纵向方面对软件进行切分。网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分离开来，包装成高内聚低耦合的模块单元，不仅有助于软件的开发维护，也便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力。&lt;/p&gt;
&lt;p&gt;大型网站分隔的粒度可能会很小。比如在应用层，将不同业务进行分隔，例如将购物、论坛、搜索、广告分隔成不同的应用，有独立的团队负责，部署在不同的服务器上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、异步&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用异步，业务之间的消息传递不是同步调用，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方法异步执行进行协作。&lt;/p&gt;
&lt;p&gt;具体实现则在单一服务器内部可用通过多线程共享内存的方式处理。在分布式系统中，可用通过分布式消息队列来实现异步。&lt;/p&gt;
&lt;p&gt;异步架构的典型就是生产者消费者方式，两者不存在直接调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、分布式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于大型网站，分层和分隔的一个主要目的时为了切分后的模块便于分布式部署，即将不同模块部署在不同的服务器上，通过远程调用协同工作。分布式以为着可以使用更多的计算机完成同样的工作，计算机越多，CPU、内存、存储资源就越多，能处理的高并发访问和数据量就越大，进而能够为更多的用户提供服务。&lt;/p&gt;
&lt;p&gt;在网站应用中，常用的分布式方案有以下几种：&lt;/p&gt;
&lt;p&gt;分布式应用和服务：将分层和分隔后的应用和服务模块分布式部署，可以改善网络性能和并发性、加快开发和发布速度、减少数据库连接资源消耗。&lt;/p&gt;
&lt;p&gt;分布式静态资源：网站的静态资源如JS、CSS、logo图片等资源独立分布部署，并采用独立的域名，即人们长多的动静分离。静态资源分布式部署可以减轻应用服务器的负载压力；通过使用独立域名加快浏览器并发加载速度。&lt;/p&gt;
&lt;p&gt;分布式数据和存储：大型网站需要处理以P为单位的海量数据，单台计算机无法提供如此大的存储控件，这些数据需要分布式存储。&lt;/p&gt;
&lt;p&gt;分布式计算：目前网站普遍使用Hadoop和MapReduce分布式计算框架进行此类批处理计算，其特点是移动计算而不是移动数据，将计算程序分发到数据所在的位置以加速计算和分布式计算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/799221/202006/799221-20200605173432720-1018693988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;6、安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网站在安全架构方面有许多模式：通过密码和手机校验码进行身份认证；登录、交以需要对网络通信进行加密；为了防止机器人程序滥用资源，需要使用验证码进行识别；对常见的XSS工即、SQL注入需要编码转换；垃圾信息需要过滤等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、自动化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体由自动化发布过程，自动化代码管理、自动化测试、自动化安全检测、自动化部署、自动化监控、自动化报警、自动化失效转移、自动化失效恢复等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于用户访问集中的模块需要将独立部署的服务器集群化，即多台服务器部署相同的应用够成一个集群，通过负载均衡设备共同对外提供服务。&lt;/p&gt;
&lt;p&gt;服务器集群能够为相同的服务提供更多的并发支持，因此当有更多的用户访问时，只需要向集群中加入新的机器即可；另外可以实现当其中的某台服务器发生故障时，可以通过负载均衡的失效转移机制将请求转移至集群中其他的服务器上，因此可以提高系统的可用性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/799221/202006/799221-20200605174341577-1380650803.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 9、缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓存目的就是减轻服务器的计算，使数据直接返回给用户，在现在的软件设计中，缓存已经无处不再，具体实现有CDN、反向代理、本地缓存、分布式缓存等。&lt;/p&gt;
&lt;p&gt;使用缓存有两个条件：访问数据热点不均衡，即某些频繁访问的数据需要放在缓存中；数据在某个时间段内有效，不会很快过期，不会因为数据过期而脏读，影响数据的正确性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/799221/202006/799221-20200605174705120-150010776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;以上为总结的9中高可用框架。&lt;/p&gt;
</description>
<pubDate>Sat, 06 Jun 2020 00:31:00 +0000</pubDate>
<dc:creator>萌萌丶小魔王</dc:creator>
<og:description>分层架构是逻辑上的，在物理部署上，三层架构可以部署在同一个物理机器上，但是随着网站业务的发展，必然需要对已经分层的模块分离部署，即三层结构分别部署在不同的服务器上，是网站拥有更多的计算资源以应对越来越</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaomowang/p/13051101.html</dc:identifier>
</item>
<item>
<title>【JVM故事】了解JVM的结构，好在面试时吹牛 - 编程新说(李新杰)</title>
<link>http://www.cnblogs.com/lixinjie/p/everyone-should-know-about-jvm-for-interview.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lixinjie/p/everyone-should-know-about-jvm-for-interview.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;
class文件格式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考上一篇文章《&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484277&amp;amp;idx=1&amp;amp;sn=502f986271edf08e0ddcb20d369d0038&amp;amp;chksm=fc333885cb44b1935ffc0d56ea063f7e8da1b1306bc479f59ef4b97a537fc28ff959976c453e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【JVM故事】一个Java字节码文件的诞生记&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》，后续还会专门讲解class文件的内部结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据类型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jvm包括两种数据类型，基本类型和引用类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基本类型&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;包括，数值类型，boolean类型，和returnAddress类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数值类型包括，整型，浮点型，和char类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;boolean类型同样只有true和false。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;returnAddress类型是一个指针，指向jvm指令的操作码，在Java中没有与之对应的类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;boolean类型的操作会被转化为int类型的操作进行，boolean数组会当成byte数组去操作。&lt;/span&gt;&lt;span&gt;1表示true，0表示false。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;引用类型&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;包括三种，类类型，数组类型，和接口类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它们的值是动态创建的类实例，数组，或实现接口的类实例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数组有component类型和element类型，component类型就是数组去掉最外层维度后剩下的类型，可能还是一个数组类型（对于多维数组）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;element类型就是数组里面存储的最小数据的类型，它必须是一个基本类型，类类型，或接口类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于一维数组的话，component类型和element类型是相同的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引用类型还有一个特殊值，就是null，表示没有引用任何对象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;运行时公有数据区&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;堆&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jvm有一个堆，在所有jvm线程间共享，堆是一个运行时数据区域，所有为类实例和数组分配的内存都来自于它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;堆在jvm启动时创建，堆中对象不用显式释放，gc会帮我们释放并回收内存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法区&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jvm有一个方法区，在所有jvm线程间共享，它存储每一个类的结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;像运行时常量池，字段和方法数据，方法和构造函数的代码，还有特殊的方法用于类和实例的初始化，以及接口的初始化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方法区在jvm启动时创建，虽然方法区在逻辑上是堆的一部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但简单实现时可以选择不进行gc和压缩，本规范没有强制要求方法区的位置，也没有要求管理已编译代码的策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行时常量池&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运行时常量池就是类或接口的字节码文件里的常量池的运行时表示形式，它包含几种常量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如在编译时就已经知道的数字字面量值，和必须在运行时解析的方法和字段的引用，运行时常量池的功能类似于传统语言的符号表，不过它包含的数据会更加宽泛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运行时常量池分配在jvm的方法区，类或接口的运行时常量池在类或接口被jvm创建时才会构建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;运行时私有数据区&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;pc寄存器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jvm支持一次运行多个线程，每个线程都有自己的pc寄存器，任何时候一个线程只能运行一个方法的代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果方法不是native的，pc寄存器包含当前正在被执行的jvm指令地址，如果方法是native的，pc寄存器的值是未定义的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;jvm栈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每一个jvm线程都有一个私有的jvm栈，随着线程的创建而创建，栈中存储的是帧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jvm栈和传统语言如C的栈相似，保存局部变量和部分计算结果，参与方法的调用和返回。&lt;/span&gt;&lt;span&gt;jvm栈主要用于帧的出栈和入栈，除此之外没有其它操作，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;帧可能是在堆上分配的，所以jvm栈使用的内存不必是连续的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;native方法栈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;native方法不是用Java语言写的，为了支持它需要使用传统栈，如C语言栈。&lt;/span&gt;&lt;span&gt;不过jvm不能加载native方法，所以也不需要提供native方法需要的栈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;帧&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每次当一个方法被调用时一个新的帧会被创建。&lt;/span&gt;&lt;span&gt;当方法调用完成时，与之对应的帧会被销毁，无论是正常完成还是抛异常结束。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以帧是方法调用的具体体现形式，或称方法调用是以帧的形式进行的。&lt;/span&gt;&lt;span&gt;帧用来存储数据和部分计算结果，和执行动态链接，方法返回值，分发异常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;帧分配在创建帧的线程的jvm栈上，每一个帧都有自己的本地变量数组，自己的操作数据栈，和一个对当前方法所在类的运行时常量池的引用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本地变量数组和操作数栈的大小在编译时就确定了，它们随着和帧关联的方法编译后的代码一起被提供，因此帧这种数据结构的大小只依赖于jvm的实现，这些结构所需的内存可以在方法调用时同时被分配。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在一个线程执行的任何时刻，都只会有一个帧是处于激活的。&lt;/span&gt;&lt;span&gt;这个帧被称为当前帧，与之对应的方法被称为当前方法，方法所在的类被称为当前类，此时用到的本地变量数组和操作数栈也都是当前帧的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个帧将不在继续是当前帧，如果它的方法调用了另一个方法，或者它的方法结束了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当一个方法被调用，一个新的帧被创建，当执行控制由原来的方法传递到新的方法时，这个新的帧变为当前帧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当方法返回时，当前帧把方法执行的结果传回到上一帧，当上一帧被激活的同时当前帧会被丢弃。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;本地变量数组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每一帧都包含一个变量数组，就是都熟知的本地变量存储的地方。&lt;/span&gt;&lt;span&gt;这个本地变量数组的长度在编译时确定，随着编译后的方法代码一起提供。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常一个本地变量（的位置）能够存储一个类型的值，但是long和double类型却需要两个本地变量（的位置）才能存一个值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本地变量按索引寻址，第一个本地变量的索引是0。&lt;/span&gt;&lt;span&gt;long和double需要消耗两个连续的索引，但却是按照较小的这个索引寻址的。&lt;/span&gt;&lt;span&gt;不能按照较大的那个索引去读数据，但是可以写入，当然这样将使本地变量内容错乱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在方法被调用时，jvm使用本地变量来接收传递进来的参数值。&lt;/span&gt;&lt;span&gt;在类（静态）方法调用时，所有参数被传入从索引0开始的连贯的本地变量数组里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实例（非静态）方法调用时，索引0处总是传入正在其上执行方法调用的那个对象的引用，（就是Java中的this了），所有参数被传入从1开始的连贯的本地变量数组里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;操作数栈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个帧包含一个后进先出的栈，用于存储正在执行的jvm指令的操作数，就是都熟知的操作数栈，这个栈的最大深度在编译时就已确定，随着编译后的方法代码一起提供。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当帧被创建时，操作数栈是空的，jvm提供一些指令用于加载常量值，本地变量值，字段值到操作数栈上，另一些jvm指令采用操作数栈上的操作数进行操作，并把结果放回到操作数栈上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;操作数栈也用于准备将要传递给方法调用的参数和接收方法调用返回的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;long和double类型的值占用两个单位的栈深度，其它类型的值占用一个单位的栈深度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;动态链接&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每一个帧都包含了对当前方法所属类型的运行时常量池的引用。&lt;/span&gt;&lt;span&gt;目的是为了支持方法代码的动态链接。&lt;/span&gt;&lt;span&gt;class文件中描述一个方法引用被调用的方法和被访问的变量的代码，是采用符号引用的形式实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;符号引用的形式可以粗略的认为是字符串的形式，就是用字符串标明需要调用哪个类的哪个方法或访问哪个字段或变量。&lt;/span&gt;&lt;span&gt;就像符号引用这个名字一样，这些仅仅是符号，是拿不到具体值的，所以必须要进行转换。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;动态链接就是把这些符号方法引用转换为具体的方法引用，在必要时加载类来解析尚未明确的符号，把符号变量的访问转换为这些变量运行时所在存储结构的适合的偏移量（索引）。&lt;/span&gt;&lt;span&gt;这样的方式又称为后期绑定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;方法调用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个方法调用正常完成（即没有抛异常）时，会根据所返回的值的类型执行一个适合的return指令，当前帧会去恢复调用者的状态，包括它的本地变量和操作数栈，使调用者的程序计数器适合的递增来跳过刚刚的那个方法调用指令。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;返回值会被放到调用者帧的操作数栈上，然后继续执行调用者方法的帧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个方法在调用时抛出了异常，且这个异常没有在这个方法内被捕获处理，将会导致这个方法调用的突然结束，这种情况下永远不会向方法的调用者返回一个值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;特殊方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;站在jvm的级别，每一个用Java写的构造函数都以一个实例初始化方法出现，且都是特殊的名字，就是&lt;/span&gt;&lt;span&gt;&amp;lt;init&amp;gt;&lt;/span&gt;&lt;span&gt;，这个名字是编译器提供的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实例初始化方法只能在jvm内部使用&lt;em&gt;invokespecial&lt;/em&gt;这个指令调用，且只能在尚未初始化的类实例上调用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个类或接口最多可以有一个类或接口初始化方法，通过调用这个方法被初始化。&lt;/span&gt;&lt;span&gt;类或接口的初始化方法也有特殊的名字，就是&lt;/span&gt;&lt;span&gt;&amp;lt;clinit&amp;gt;&lt;/span&gt;&lt;span&gt;，该方法没有参数，且返回值是void。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方法名称也是由编译器提供的，从Java7开始，在字节码中这个方法必须被标记为静态的才行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个初始化方法是被jvm隐式调用的，它们绝对不会直接被用任何jvm指令调用，仅作为类初始化进程的一部分被间接的调用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Java类库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jvm必须为Java类库的实现提供足够的支持。&lt;/span&gt;&lt;span&gt;一些类库中的类如果没有jvm协助是无法实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反射，就是在运行时获取某个类的类型相关信息，如它的字段信息，方法信息，构造函数信息，父类信息，实现的接口信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些信息都必须是把一个类加载完之后才可以知道的，只有jvm才可以加载类。&lt;/span&gt;&lt;span&gt;如java.lang.reflect这个包下的类和Class这个类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Java中加载一个类或接口用类加载器，即ClassLoader，背后还是委托给jvm来实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接和初始化一个类或接口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安全，如java.security包下的类，还有其它类像SecurityManager。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多线程，如线程这个类Thread。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;弱引用，像java.lang.ref包下的类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;公有设计，私有实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上内容只是jvm的一个“相对宽泛”的规范，它并不是实现方案，也不是实现细节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实现者可以根据自身的需要来实现jvm，如运行在后端服务器上的jvm和运行在移动设备上的jvm肯定侧重点有所不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从事Java的人都知道，事实上jvm是有较多的实现版本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于jvm是处在Java语言和操作系统之间的，所以它要向上提供对Java的支持，向下与操作系统良好交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高级语言（Java，C#）中的很多操作如文件操作，网络操作，内存操作，线程操作，I/O操作等，都不是高级语言自身能够实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也不是它们的虚拟机（JVM，CLR）能够实现的，实际最终是由操作系统实现的，因为这些都是系统资源，只有操作系统才有权限访问。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你用Java或C#代码创建了一个文件，千万不要以为是Java或C#创建了这个文件，它们只是层层向下调用了操作系统的API，然后到文件系统API，最后可能到磁盘驱动程序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由此可以看出，要想设计一门语言，不单单是关键字、语法、编译器，类库，虚拟机这些，还要深度了解操作系统，甚至是硬件，如CPU架构和CPU指令集等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，和语言相关的事情，每一项都是异常的繁琐复杂，都需要投入大量的人力、财力、时间去研究，最后即使研究成功了，可能没有生态，没人使用，自然也无法赚钱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，国人现在还没有一门属于自己的真正语言。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; 热门文章集锦 &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484219&amp;amp;idx=1&amp;amp;sn=e6c39138e44ce8f0c91aba4873fb42cd&amp;amp;chksm=fc3338cbcb44b1dde7ae372ed66b40bdf4f755d711008810eb837a8f78d884f00956ae7ce7a7&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;毕业10年，我有话说&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247483949&amp;amp;idx=1&amp;amp;sn=200c9ac4f8e4e877b0b253d45205712a&amp;amp;chksm=fc3339ddcb44b0cb5ac2957dbed41b2f9e11fbba14967d00f97012806a9d6af364b0f8135eee&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】我是如何面试别人List相关知识的，深度有点长文&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247483989&amp;amp;idx=1&amp;amp;sn=cf9ce5c3f7981c16b71047b868b1c1ab&amp;amp;chksm=fc3339a5cb44b0b3df524ce684e8cd76ab6d15a2ccf26ec2425ecbcdd26bc777b95a06994189&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;我是如何在毕业不久只用1年就升为开发组长的&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247483994&amp;amp;idx=1&amp;amp;sn=fb09e943331e89abcb99d8304ea6b677&amp;amp;chksm=fc3339aacb44b0bc2a120c79efebb46a43ce5b4d3148992d86b2841a89bb46bf5d8863e065ea&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;爸爸又给Spring MVC生了个弟弟叫Spring WebFlux&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484017&amp;amp;idx=1&amp;amp;sn=a2055640b142fc4cfa5a9901d22ec57f&amp;amp;chksm=fc333981cb44b09782c196da25dc613b38a9ede52de073bfaaaef6214a9deb294b6527091892&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】我是如何在面试别人Spring事务时“套路”对方的&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484029&amp;amp;idx=1&amp;amp;sn=44b05473af37fe008bb9659a35d1a9de&amp;amp;chksm=fc33398dcb44b09bbd25a7e14e7100419988479fbeb4bda7787f1b93dd932ec699dfd793df04&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】Spring事务面试考点吐血整理（建议珍藏）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484158&amp;amp;idx=1&amp;amp;sn=1ca952ba9166c5ccf0e3f40622335fc5&amp;amp;chksm=fc33390ecb44b01898bb2500ba61a15e38487a23f5c0405d738cc4c272cd705d2dbbf1a3f8e7&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】我是如何在面试别人Redis相关知识时“软怼”他的&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484164&amp;amp;idx=1&amp;amp;sn=390d911b19812d22aebd3f0f6522004c&amp;amp;chksm=fc3338f4cb44b1e20bc2344474586934a2b148f92eefdaecf134d57af10f64310579e196904a&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】吃透了这些Redis知识点，面试官一定觉得你很NB（干货 | 建议珍藏）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484184&amp;amp;idx=1&amp;amp;sn=37007efde0cc93e48c55a133dc9cc8d4&amp;amp;chksm=fc3338e8cb44b1fea0ed4af7f01de658e8a1bc7f573cb5bde2701d9b09ba14747139d2bcea39&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】如果你这样回答“什么是线程安全”，面试官都会对你刮目相看（建议珍藏）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484195&amp;amp;idx=1&amp;amp;sn=95c3acdaeb0f6a1d61f152550c3d2669&amp;amp;chksm=fc3338d3cb44b1c55f6046f6280da863d3514cca3ce50ef29e2d53b0eafe2b7efef062c51c27&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】迄今为止把同步/异步/阻塞/非阻塞/BIO/NIO/AIO讲的这么清楚的好文章（快快珍藏）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484201&amp;amp;idx=1&amp;amp;sn=7cf45aff64eecdff58d2acea8fb7c9fa&amp;amp;chksm=fc3338d9cb44b1cfc6b5c797a005c91ed19b0dd06587fdfb2e7b553e2b03104a145380a7a990&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】一篇文章帮你彻底搞清楚“I/O多路复用”和“异步I/O”的前世今生（深度好文，建议珍藏）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484206&amp;amp;idx=1&amp;amp;sn=9547fdad111ac1a8ac9311cb9e76b9dc&amp;amp;chksm=fc3338decb44b1c89aee789e80e32989ea43232321397cc265c99b1d0ce4057e6563bc00a3d3&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【面试】如果把线程当作一个人来对待，所有问题都瞬间明白了&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484214&amp;amp;idx=1&amp;amp;sn=0f677e8b0d61b5a5317a274cc8b33cbc&amp;amp;chksm=fc3338c6cb44b1d06aa20533aafb0b7b709b3bd88dbf6af6b8f3cb91288e4afc585ecb77489a&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Java多线程通关———基础知识挑战&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NzY1Nzc1OQ==&amp;amp;mid=2247484224&amp;amp;idx=1&amp;amp;sn=78a994d8311dd0abf3f9419108ff363a&amp;amp;chksm=fc3338b0cb44b1a6803dbeb8540c17ce753f1878e3b7cc86cf6508e81dc32736f84d7224f166&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;品Spring：帝国的基石&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;作者&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;是工作超过&lt;/span&gt;&lt;span&gt;&lt;strong&gt;10年&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的码农，现在任架构师。喜欢研究技术，崇尚简单快乐。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;追求以通俗易懂的语言解说技术，希望所有的读者都能看懂并记住。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;下面是公众号的二维码，欢迎关注！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/76066/201912/76066-20191215143847687-627992625.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
</description>
<pubDate>Fri, 05 Jun 2020 23:58:00 +0000</pubDate>
<dc:creator>编程新说(李新杰)</dc:creator>
<og:description>class文件格式参考上一篇文章《【JVM故事】一个Java字节码文件的诞生记》，后续还会专门讲解class文件的内部结构。数据类型jvm包括两种数据类型，基本类型和引用类型。基本类型包括，数值类型，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/lixinjie/p/everyone-should-know-about-jvm-for-interview.html</dc:identifier>
</item>
<item>
<title>博客园文章自动添加目录-3级 - 追逐时光者</title>
<link>http://www.cnblogs.com/Can-daydayup/p/13053213.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Can-daydayup/p/13053213.html</guid>
<description>&lt;h2&gt;展示效果&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意，在这里标题二代表一级，标题三代表二级，标题四代表三级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202006/1336199-20200606020004943-900929374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;设置方式&lt;/h2&gt;
&lt;p&gt;首先我们需要申请开通js权限，然后将目录js代码复制到博客侧边栏公告（支持HTML代码） &lt;span class=&quot;ng-star-inserted&quot;&gt;（支持 JS 代码）中，如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202006/1336199-20200606020321257-1947437326.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;生成目录JS代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生成目录索引列表&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; GenerateContentList()
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mainContent = $('#cnblogs_post_body'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;h2，大标标题内容&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; h2_list = $('#cnblogs_post_body h2');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果你的章节标题不是h2,只需要将这里的h2换掉即可&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt;(mainContent.length &amp;lt; 1&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(h2_list.length&amp;gt;0&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; content = '&amp;lt;a name=&quot;_labelTop&quot;&amp;gt;&amp;lt;/a&amp;gt;'&lt;span&gt;;
        content &lt;/span&gt;+= '&amp;lt;div id=&quot;navCategory&quot;&amp;gt;'&lt;span&gt;;
        content &lt;/span&gt;+= '&amp;lt;p style=&quot;font-size:18px&quot;&amp;gt;&amp;lt;b&amp;gt;思维导航：&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;'&lt;span&gt;;
        content &lt;/span&gt;+= '&amp;lt;ul&amp;gt;'&lt;span&gt;;
         
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;目录遍历&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;h2_list.length; i++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回到顶部&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; go_to_top = '&amp;lt;div style=&quot;text-align: right;&quot;&amp;gt;&amp;lt;a href=&quot;#_labelTop&quot;&amp;gt;&amp;lt;b style=&quot;font-family: &quot;Arial&quot;,&quot;Microsoft YaHei&quot;,&quot;黑体&quot;,&quot;宋体&quot;,sans-serif;&quot;&amp;gt;🚀回到顶部&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a name=&quot;_label' + i + '&quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;'&lt;span&gt;;
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回到顶部添加&lt;/span&gt;
&lt;span&gt;            $(h2_list[i]).before(go_to_top);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;h3列表数据&lt;/span&gt;
             &lt;span&gt;var&lt;/span&gt; h3_list = $(h2_list[i]).nextAll(&quot;h3&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(&quot;h3l列表数据&quot;);&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; li3_content = ''&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j=0; j&amp;lt;h3_list.length; j++&lt;span&gt;)
            {
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;h3内容&lt;/span&gt;
              &lt;span&gt;var&lt;/span&gt; tmp = $(h3_list[j]).prevAll('h2'&lt;span&gt;).first();
            
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;tmp.is(h2_list[i]))
                 &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; li3_anchor = '&amp;lt;a name=&quot;_label' + i + '_' + j + '&quot;&amp;gt;&amp;lt;/a&amp;gt;'&lt;span&gt;;
              $(h3_list[j]).before(li3_anchor);
              li3_content &lt;/span&gt;+= '&amp;lt;li  style=&quot;list-style-type:decimal;font-family: &quot;Arial&quot;,&quot;Microsoft YaHei&quot;,&quot;黑体&quot;,&quot;宋体&quot;,sans-serif;&quot;&amp;gt;&amp;lt;a href=&quot;#_label' + i + '_' + j + '&quot;&amp;gt;' + $(h3_list[j]).text().replace(/：/g,&quot;&quot;)+'&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;;

              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询h4导航内容遍历----2020-06-06\(^o^)/~&lt;/span&gt;
              &lt;span&gt;var&lt;/span&gt; li4_content=&quot;&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;h4遍历的列表数据&lt;/span&gt;
              &lt;span&gt;var&lt;/span&gt; h4_list = $(h3_list[j]).nextAll(&quot;h4&quot;&lt;span&gt;);
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据遍历&lt;/span&gt;
              &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; y=0;y&amp;lt;h4_list.length;y++&lt;span&gt;)
              {
                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一组h4的值&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; tmp4= $(h4_list[y]).prevAll('h3'&lt;span&gt;).first();
                     
                   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当遍历内容不等于该h3目录下的值时&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;tmp4.is(h3_list[j]))
                   &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; li4_anchor = '&amp;lt;a name=&quot;_label' +i+'_'+j+ '_' +y+ '&quot;&amp;gt;&amp;lt;/a&amp;gt;'&lt;span&gt;;
                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入对应的索引&lt;/span&gt;
&lt;span&gt;                $(h4_list[y]).before(li4_anchor);
                li4_content &lt;/span&gt;+= '&amp;lt;li style=&quot;list-style-type:lower-alpha&quot;&amp;gt;&amp;lt;a href=&quot;#_label' +i+'_' +j+ '_' + y+ '&quot;&amp;gt;' + $(h4_list[y]).text() + '&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;;
               }

              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(&quot;h4遍历结束了&quot;);&lt;/span&gt;
              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;h4遍历查询结束&lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt;(li4_content.length&amp;gt;0&lt;span&gt;)
              {
                li3_content&lt;/span&gt;+=&quot;&amp;lt;ul&amp;gt;&quot;+li4_content+&quot;&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;span&gt;;
              }
              &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
              {
                 li3_content&lt;/span&gt;+=&quot;&amp;lt;/li&amp;gt;&quot;&lt;span&gt;;
              }&lt;/span&gt;
&lt;span&gt;            }
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; li2_content = ''&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(li3_content.length &amp;gt; 0&lt;span&gt;)
                li2_content &lt;/span&gt;= '&amp;lt;li style=&quot;list-style-type:square&quot;&amp;gt;&amp;lt;a href=&quot;#_label' + i + '&quot;&amp;gt;' + $(h2_list[i]).text().replace(/：/g,&quot;&quot;)+'&amp;lt;/a&amp;gt;&amp;lt;ul&amp;gt;' + li3_content + '&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                li2_content &lt;/span&gt;= '&amp;lt;li style=&quot;list-style-type:square&quot;&amp;gt;&amp;lt;a href=&quot;#_label' + i + '&quot;&amp;gt;' + $(h2_list[i]).text().replace(/：/g,&quot;&quot;)+'&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;;
            content &lt;/span&gt;+=&lt;span&gt; li2_content;
        }

        content &lt;/span&gt;+= '&amp;lt;/ul&amp;gt;'&lt;span&gt;;
        content &lt;/span&gt;+= '&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;'&lt;span&gt;;
        content&lt;/span&gt;+='&amp;lt;p style=&quot;font-size:18px&quot;&amp;gt;&amp;lt;b&amp;gt;文章正文：&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($('#cnblogs_post_body').length != 0&lt;span&gt; )
        {
            $($(&lt;/span&gt;'#cnblogs_post_body')[0&lt;span&gt;]).prepend(content);
        }
    }   
}

GenerateContentList();
console.warn(&lt;/span&gt;&quot;想要突破自己，就要时刻的鞭策自己，我是大姚，一个永不认输的男人！！&quot;&lt;span&gt;);
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 05 Jun 2020 18:07:00 +0000</pubDate>
<dc:creator>追逐时光者</dc:creator>
<og:description>展示效果 注意，在这里标题二代表一级，标题三代表二级，标题四代表三级。 设置方式 首先我们需要申请开通js权限，然后将目录js代码复制到博客侧边栏公告（支持HTML代码）&amp;#160;（支持 JS 代码</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Can-daydayup/p/13053213.html</dc:identifier>
</item>
<item>
<title>不可不知的JSON处理库（cJSON） - 东小东</title>
<link>http://www.cnblogs.com/dongxiaodong/p/13053208.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongxiaodong/p/13053208.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;   1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;   2&lt;/span&gt; &lt;span&gt;  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
&lt;/span&gt;&lt;span&gt;   3&lt;/span&gt; 
&lt;span&gt;   4&lt;/span&gt; &lt;span&gt;  Permission is hereby granted, free of charge, to any person obtaining a copy
&lt;/span&gt;&lt;span&gt;   5&lt;/span&gt; &lt;span&gt;  of this software and associated documentation files (the &quot;Software&quot;), to deal
&lt;/span&gt;&lt;span&gt;   6&lt;/span&gt; &lt;span&gt;  in the Software without restriction, including without limitation the rights
&lt;/span&gt;&lt;span&gt;   7&lt;/span&gt; &lt;span&gt;  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
&lt;/span&gt;&lt;span&gt;   8&lt;/span&gt; &lt;span&gt;  copies of the Software, and to permit persons to whom the Software is
&lt;/span&gt;&lt;span&gt;   9&lt;/span&gt; &lt;span&gt;  furnished to do so, subject to the following conditions:
&lt;/span&gt;&lt;span&gt;  10&lt;/span&gt; 
&lt;span&gt;  11&lt;/span&gt; &lt;span&gt;  The above copyright notice and this permission notice shall be included in
&lt;/span&gt;&lt;span&gt;  12&lt;/span&gt; &lt;span&gt;  all copies or substantial portions of the Software.
&lt;/span&gt;&lt;span&gt;  13&lt;/span&gt; 
&lt;span&gt;  14&lt;/span&gt; &lt;span&gt;  THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
&lt;/span&gt;&lt;span&gt;  15&lt;/span&gt; &lt;span&gt;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
&lt;/span&gt;&lt;span&gt;  16&lt;/span&gt; &lt;span&gt;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
&lt;/span&gt;&lt;span&gt;  17&lt;/span&gt; &lt;span&gt;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
&lt;/span&gt;&lt;span&gt;  18&lt;/span&gt; &lt;span&gt;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
&lt;/span&gt;&lt;span&gt;  19&lt;/span&gt; &lt;span&gt;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
&lt;/span&gt;&lt;span&gt;  20&lt;/span&gt; &lt;span&gt;  THE SOFTWARE.
&lt;/span&gt;&lt;span&gt;  21&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  22&lt;/span&gt; 
&lt;span&gt;  23&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; cJSON &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  24&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; JSON parser in C. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  25&lt;/span&gt; 
&lt;span&gt;  26&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; disable warnings about old C89 functions in MSVC &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  27&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; !defined(_CRT_SECURE_NO_DEPRECATE) &amp;amp;&amp;amp; defined(_MSC_VER)
&lt;span&gt;  28&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; _CRT_SECURE_NO_DEPRECATE
&lt;span&gt;  29&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  30&lt;/span&gt; 
&lt;span&gt;  31&lt;/span&gt; &lt;span&gt;#ifdef __GNUC__
&lt;/span&gt;&lt;span&gt;  32&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; GCC visibility push(default)
&lt;span&gt;  33&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  34&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; defined(_MSC_VER)
&lt;span&gt;  35&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; warning (push)
&lt;span&gt;  36&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; disable warning about single line comments in system headers &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  37&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; warning (disable : 4001)
&lt;span&gt;  38&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  39&lt;/span&gt; 
&lt;span&gt;  40&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;  41&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;  42&lt;/span&gt; #include &amp;lt;math.h&amp;gt;
&lt;span&gt;  43&lt;/span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;span&gt;  44&lt;/span&gt; #include &amp;lt;limits.h&amp;gt;
&lt;span&gt;  45&lt;/span&gt; #include &amp;lt;ctype.h&amp;gt;
&lt;span&gt;  46&lt;/span&gt; #include &amp;lt;&lt;span&gt;float&lt;/span&gt;.h&amp;gt;
&lt;span&gt;  47&lt;/span&gt; 
&lt;span&gt;  48&lt;/span&gt; &lt;span&gt;#ifdef ENABLE_LOCALES
&lt;/span&gt;&lt;span&gt;  49&lt;/span&gt; #include &amp;lt;locale.h&amp;gt;
&lt;span&gt;  50&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  51&lt;/span&gt; 
&lt;span&gt;  52&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; defined(_MSC_VER)
&lt;span&gt;  53&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; warning (pop)
&lt;span&gt;  54&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  55&lt;/span&gt; &lt;span&gt;#ifdef __GNUC__
&lt;/span&gt;&lt;span&gt;  56&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; GCC visibility pop
&lt;span&gt;  57&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  58&lt;/span&gt; 
&lt;span&gt;  59&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cJSON.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  60&lt;/span&gt; 
&lt;span&gt;  61&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; define our own boolean type &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  62&lt;/span&gt; #ifdef &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;  63&lt;/span&gt; &lt;span&gt;#undef&lt;/span&gt; true
&lt;span&gt;  64&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  65&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; true ((cJSON_bool)1)
&lt;span&gt;  66&lt;/span&gt; 
&lt;span&gt;  67&lt;/span&gt; #ifdef &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;  68&lt;/span&gt; &lt;span&gt;#undef&lt;/span&gt; false
&lt;span&gt;  69&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  70&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; false ((cJSON_bool)0)
&lt;span&gt;  71&lt;/span&gt; 
&lt;span&gt;  72&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; define isnan and isinf for ANSI C, if in C99 or above, isnan and isinf has been defined in math.h &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  73&lt;/span&gt; &lt;span&gt;#ifndef isinf
&lt;/span&gt;&lt;span&gt;  74&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; isinf(d) (isnan((d - d)) &amp;amp;&amp;amp; !isnan(d))
&lt;span&gt;  75&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  76&lt;/span&gt; &lt;span&gt;#ifndef isnan
&lt;/span&gt;&lt;span&gt;  77&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; isnan(d) (d != d)
&lt;span&gt;  78&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  79&lt;/span&gt; 
&lt;span&gt;  80&lt;/span&gt; &lt;span&gt;#ifndef NAN
&lt;/span&gt;&lt;span&gt;  81&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; NAN 0.0/0.0
&lt;span&gt;  82&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;  83&lt;/span&gt; 
&lt;span&gt;  84&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;  85&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;json;
&lt;/span&gt;&lt;span&gt;  86&lt;/span&gt; &lt;span&gt;    size_t position;
&lt;/span&gt;&lt;span&gt;  87&lt;/span&gt; &lt;span&gt;} error;
&lt;/span&gt;&lt;span&gt;  88&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; error global_error = { NULL, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;  89&lt;/span&gt; 
&lt;span&gt;  90&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *) cJSON_GetErrorPtr(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  91&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  92&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*) (global_error.json +&lt;span&gt; global_error.position);
&lt;/span&gt;&lt;span&gt;  93&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;  94&lt;/span&gt; 
&lt;span&gt;  95&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;char&lt;/span&gt; *) cJSON_GetStringValue(cJSON *&lt;span&gt;item) 
&lt;/span&gt;&lt;span&gt;  96&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  97&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cJSON_IsString(item)) 
&lt;/span&gt;&lt;span&gt;  98&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  99&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 100&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 101&lt;/span&gt; 
&lt;span&gt; 102&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; item-&amp;gt;&lt;span&gt;valuestring;
&lt;/span&gt;&lt;span&gt; 103&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 104&lt;/span&gt; 
&lt;span&gt; 105&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;double&lt;/span&gt;) cJSON_GetNumberValue(cJSON *&lt;span&gt;item) 
&lt;/span&gt;&lt;span&gt; 106&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 107&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cJSON_IsNumber(item)) 
&lt;/span&gt;&lt;span&gt; 108&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 109&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NAN;
&lt;/span&gt;&lt;span&gt; 110&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 111&lt;/span&gt; 
&lt;span&gt; 112&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; item-&amp;gt;&lt;span&gt;valuedouble;
&lt;/span&gt;&lt;span&gt; 113&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 114&lt;/span&gt; 
&lt;span&gt; 115&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; This is a safeguard to prevent copy-pasters from using incompatible C and header files &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 116&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; (CJSON_VERSION_MAJOR != 1) || (CJSON_VERSION_MINOR != 7) || (CJSON_VERSION_PATCH != 13)
&lt;span&gt; 117&lt;/span&gt;     &lt;span&gt;#error&lt;/span&gt; cJSON.h and cJSON.c have different versions. Make sure that both have the same.
&lt;span&gt; 118&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt; 119&lt;/span&gt; 
&lt;span&gt; 120&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*) cJSON_Version(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 121&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 122&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; version[&lt;span&gt;15&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 123&lt;/span&gt;     sprintf(version, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%i.%i.%i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);
&lt;/span&gt;&lt;span&gt; 124&lt;/span&gt; 
&lt;span&gt; 125&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; version;
&lt;/span&gt;&lt;span&gt; 126&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 127&lt;/span&gt; 
&lt;span&gt; 128&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Case insensitive string comparison, doesn't consider two NULL pointers equal though &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 129&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; case_insensitive_strcmp(&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *string1, &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string2)
&lt;/span&gt;&lt;span&gt; 130&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 131&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((string1 == NULL) || (string2 ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt; 132&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 133&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 134&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 135&lt;/span&gt; 
&lt;span&gt; 136&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (string1 ==&lt;span&gt; string2)
&lt;/span&gt;&lt;span&gt; 137&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 138&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 139&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 140&lt;/span&gt; 
&lt;span&gt; 141&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(; tolower(*string1) == tolower(*string2); (&lt;span&gt;void&lt;/span&gt;)string1++, string2++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 142&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 143&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (*string1 == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 144&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 145&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 146&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 147&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 148&lt;/span&gt; 
&lt;span&gt; 149&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; tolower(*string1) - tolower(*&lt;span&gt;string2);
&lt;/span&gt;&lt;span&gt; 150&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 151&lt;/span&gt; 
&lt;span&gt; 152&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; internal_hooks
&lt;/span&gt;&lt;span&gt; 153&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 154&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; *(CJSON_CDECL *&lt;span&gt;allocate)(size_t size);
&lt;/span&gt;&lt;span&gt; 155&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; (CJSON_CDECL *deallocate)(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;pointer);
&lt;/span&gt;&lt;span&gt; 156&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; *(CJSON_CDECL *reallocate)(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;pointer, size_t size);
&lt;/span&gt;&lt;span&gt; 157&lt;/span&gt; &lt;span&gt;} internal_hooks;
&lt;/span&gt;&lt;span&gt; 158&lt;/span&gt; 
&lt;span&gt; 159&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; defined(_MSC_VER)
&lt;span&gt; 160&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; work around MSVC error C2322: '...' address of dllimport '...' is not static &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 161&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *&lt;span&gt; CJSON_CDECL internal_malloc(size_t size)
&lt;/span&gt;&lt;span&gt; 162&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 163&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;malloc&lt;/span&gt;&lt;span&gt;(size);
&lt;/span&gt;&lt;span&gt; 164&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 165&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; CJSON_CDECL internal_free(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;pointer)
&lt;/span&gt;&lt;span&gt; 166&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 167&lt;/span&gt;     &lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pointer);
&lt;/span&gt;&lt;span&gt; 168&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 169&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; * CJSON_CDECL internal_realloc(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;pointer, size_t size)
&lt;/span&gt;&lt;span&gt; 170&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 171&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;realloc&lt;/span&gt;&lt;span&gt;(pointer, size);
&lt;/span&gt;&lt;span&gt; 172&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 173&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt; 174&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; internal_malloc malloc
&lt;span&gt; 175&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; internal_free free
&lt;span&gt; 176&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; internal_realloc realloc
&lt;span&gt; 177&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt; 178&lt;/span&gt; 
&lt;span&gt; 179&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; strlen of character literals resolved at compile time &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 180&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; static_strlen(string_literal) (sizeof(string_literal) - sizeof(&quot;&quot;))
&lt;span&gt; 181&lt;/span&gt; 
&lt;span&gt; 182&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; internal_hooks global_hooks =&lt;span&gt; { internal_malloc, internal_free, internal_realloc };
&lt;/span&gt;&lt;span&gt; 183&lt;/span&gt; 
&lt;span&gt; 184&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;* cJSON_strdup(&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;* &lt;span&gt;string&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; internal_hooks * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; hooks)
&lt;/span&gt;&lt;span&gt; 185&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 186&lt;/span&gt;     size_t length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 187&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *copy =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 188&lt;/span&gt; 
&lt;span&gt; 189&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt; ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 190&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 191&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 192&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 193&lt;/span&gt; 
&lt;span&gt; 194&lt;/span&gt;     length = strlen((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)&lt;span&gt;string&lt;/span&gt;) + &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 195&lt;/span&gt;     copy = (unsigned &lt;span&gt;char&lt;/span&gt;*)hooks-&amp;gt;&lt;span&gt;allocate(length);
&lt;/span&gt;&lt;span&gt; 196&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (copy ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 197&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 198&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 199&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 200&lt;/span&gt;     memcpy(copy, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;, length);
&lt;/span&gt;&lt;span&gt; 201&lt;/span&gt; 
&lt;span&gt; 202&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; copy;
&lt;/span&gt;&lt;span&gt; 203&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 204&lt;/span&gt; 
&lt;span&gt; 205&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt;) cJSON_InitHooks(cJSON_Hooks*&lt;span&gt; hooks)
&lt;/span&gt;&lt;span&gt; 206&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 207&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (hooks ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 208&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 209&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Reset hooks &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 210&lt;/span&gt;         global_hooks.allocate = &lt;span&gt;malloc&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 211&lt;/span&gt;         global_hooks.deallocate = &lt;span&gt;free&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 212&lt;/span&gt;         global_hooks.reallocate = &lt;span&gt;realloc&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 213&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 214&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 215&lt;/span&gt; 
&lt;span&gt; 216&lt;/span&gt;     global_hooks.allocate = &lt;span&gt;malloc&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 217&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (hooks-&amp;gt;malloc_fn !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 218&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 219&lt;/span&gt;         global_hooks.allocate = hooks-&amp;gt;&lt;span&gt;malloc_fn;
&lt;/span&gt;&lt;span&gt; 220&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 221&lt;/span&gt; 
&lt;span&gt; 222&lt;/span&gt;     global_hooks.deallocate = &lt;span&gt;free&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 223&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (hooks-&amp;gt;free_fn !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 224&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 225&lt;/span&gt;         global_hooks.deallocate = hooks-&amp;gt;&lt;span&gt;free_fn;
&lt;/span&gt;&lt;span&gt; 226&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 227&lt;/span&gt; 
&lt;span&gt; 228&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; use realloc only if both free and malloc are used &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 229&lt;/span&gt;     global_hooks.reallocate =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 230&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((global_hooks.allocate == &lt;span&gt;malloc&lt;/span&gt;) &amp;amp;&amp;amp; (global_hooks.deallocate == &lt;span&gt;free&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 231&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 232&lt;/span&gt;         global_hooks.reallocate = &lt;span&gt;realloc&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 233&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 234&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 235&lt;/span&gt; 
&lt;span&gt; 236&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Internal constructor. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 237&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON *cJSON_New_Item(&lt;span&gt;const&lt;/span&gt; internal_hooks * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; hooks)
&lt;/span&gt;&lt;span&gt; 238&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 239&lt;/span&gt;     cJSON* node = (cJSON*)hooks-&amp;gt;allocate(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cJSON));
&lt;/span&gt;&lt;span&gt; 240&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (node)
&lt;/span&gt;&lt;span&gt; 241&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 242&lt;/span&gt;         memset(node, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cJSON));
&lt;/span&gt;&lt;span&gt; 243&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 244&lt;/span&gt; 
&lt;span&gt; 245&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt; 246&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 247&lt;/span&gt; 
&lt;span&gt; 248&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Delete a cJSON structure. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 249&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt;) cJSON_Delete(cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt; 250&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 251&lt;/span&gt;     cJSON *next =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 252&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (item !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 253&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 254&lt;/span&gt;         next = item-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt; 255&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!(item-&amp;gt;type &amp;amp; cJSON_IsReference) &amp;amp;&amp;amp; (item-&amp;gt;child !=&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt; 256&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 257&lt;/span&gt;             cJSON_Delete(item-&amp;gt;&lt;span&gt;child);
&lt;/span&gt;&lt;span&gt; 258&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 259&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!(item-&amp;gt;type &amp;amp; cJSON_IsReference) &amp;amp;&amp;amp; (item-&amp;gt;valuestring !=&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt; 260&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 261&lt;/span&gt;             global_hooks.deallocate(item-&amp;gt;&lt;span&gt;valuestring);
&lt;/span&gt;&lt;span&gt; 262&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 263&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!(item-&amp;gt;type &amp;amp; cJSON_StringIsConst) &amp;amp;&amp;amp; (item-&amp;gt;&lt;span&gt;string&lt;/span&gt; !=&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt; 264&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 265&lt;/span&gt;             global_hooks.deallocate(item-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 266&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 267&lt;/span&gt; &lt;span&gt;        global_hooks.deallocate(item);
&lt;/span&gt;&lt;span&gt; 268&lt;/span&gt;         item =&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt; 269&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 270&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 271&lt;/span&gt; 
&lt;span&gt; 272&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; get the decimal point character of the current locale &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 273&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; get_decimal_point(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 274&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 275&lt;/span&gt; &lt;span&gt;#ifdef ENABLE_LOCALES
&lt;/span&gt;&lt;span&gt; 276&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; lconv *lconv =&lt;span&gt; localeconv();
&lt;/span&gt;&lt;span&gt; 277&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (unsigned &lt;span&gt;char&lt;/span&gt;) lconv-&amp;gt;decimal_point[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 278&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt; 279&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 280&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt; 281&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 282&lt;/span&gt; 
&lt;span&gt; 283&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;
&lt;span&gt; 284&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 285&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;content;
&lt;/span&gt;&lt;span&gt; 286&lt;/span&gt; &lt;span&gt;    size_t length;
&lt;/span&gt;&lt;span&gt; 287&lt;/span&gt; &lt;span&gt;    size_t offset;
&lt;/span&gt;&lt;span&gt; 288&lt;/span&gt;     size_t depth; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; How deeply nested (in arrays/objects) is the input at the current offset. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 289&lt;/span&gt; &lt;span&gt;    internal_hooks hooks;
&lt;/span&gt;&lt;span&gt; 290&lt;/span&gt; &lt;span&gt;} parse_buffer;
&lt;/span&gt;&lt;span&gt; 291&lt;/span&gt; 
&lt;span&gt; 292&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check if the given size is left to read in a given parse buffer (starting with 1) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 293&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; can_read(buffer, size) ((buffer != NULL) &amp;amp;&amp;amp; (((buffer)-&amp;gt;offset + size) &amp;lt;= (buffer)-&amp;gt;length))
&lt;span&gt; 294&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check if the buffer can be accessed at the given index (starting with 0) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 295&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; can_access_at_index(buffer, index) ((buffer != NULL) &amp;amp;&amp;amp; (((buffer)-&amp;gt;offset + index) &amp;lt; (buffer)-&amp;gt;length))
&lt;span&gt; 296&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; cannot_access_at_index(buffer, index) (!can_access_at_index(buffer, index))
&lt;span&gt; 297&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; get a pointer to the buffer at the position &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 298&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; buffer_at_offset(buffer) ((buffer)-&amp;gt;content + (buffer)-&amp;gt;offset)
&lt;span&gt; 299&lt;/span&gt; 
&lt;span&gt; 300&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Parse the input text to generate a number, and populate the result into item. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 301&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_number(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer)
&lt;/span&gt;&lt;span&gt; 302&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 303&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; number = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 304&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *after_end =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 305&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; number_c_string[&lt;span&gt;64&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 306&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; decimal_point =&lt;span&gt; get_decimal_point();
&lt;/span&gt;&lt;span&gt; 307&lt;/span&gt;     size_t i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 308&lt;/span&gt; 
&lt;span&gt; 309&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((input_buffer == NULL) || (input_buffer-&amp;gt;content ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt; 310&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 311&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 312&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 313&lt;/span&gt; 
&lt;span&gt; 314&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; copy the number into a temporary buffer and replace '.' with the decimal point
&lt;/span&gt;&lt;span&gt; 315&lt;/span&gt; &lt;span&gt;     * of the current locale (for strtod)
&lt;/span&gt;&lt;span&gt; 316&lt;/span&gt; &lt;span&gt;     * This also takes care of '\0' not necessarily being available for marking the end of the input &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 317&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; (i &amp;lt; (&lt;span&gt;sizeof&lt;/span&gt;(number_c_string) - &lt;span&gt;1&lt;/span&gt;)) &amp;amp;&amp;amp; can_access_at_index(input_buffer, i); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 318&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 319&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (buffer_at_offset(input_buffer)[i])
&lt;/span&gt;&lt;span&gt; 320&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 321&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 322&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 323&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 324&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 325&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 326&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 327&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 328&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 329&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 330&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 331&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 332&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 333&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 334&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 335&lt;/span&gt;                 number_c_string[i] =&lt;span&gt; buffer_at_offset(input_buffer)[i];
&lt;/span&gt;&lt;span&gt; 336&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 337&lt;/span&gt; 
&lt;span&gt; 338&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 339&lt;/span&gt;                 number_c_string[i] =&lt;span&gt; decimal_point;
&lt;/span&gt;&lt;span&gt; 340&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 341&lt;/span&gt; 
&lt;span&gt; 342&lt;/span&gt;             &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 343&lt;/span&gt;                 &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; loop_end;
&lt;/span&gt;&lt;span&gt; 344&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 345&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 346&lt;/span&gt; &lt;span&gt;loop_end:
&lt;/span&gt;&lt;span&gt; 347&lt;/span&gt;     number_c_string[i] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 348&lt;/span&gt; 
&lt;span&gt; 349&lt;/span&gt;     number = strtod((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)number_c_string, (&lt;span&gt;char&lt;/span&gt;**)&amp;amp;&lt;span&gt;after_end);
&lt;/span&gt;&lt;span&gt; 350&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (number_c_string ==&lt;span&gt; after_end)
&lt;/span&gt;&lt;span&gt; 351&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 352&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse_error &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 353&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 354&lt;/span&gt; 
&lt;span&gt; 355&lt;/span&gt;     item-&amp;gt;valuedouble =&lt;span&gt; number;
&lt;/span&gt;&lt;span&gt; 356&lt;/span&gt; 
&lt;span&gt; 357&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; use saturation in case of overflow &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 358&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (number &amp;gt;=&lt;span&gt; INT_MAX)
&lt;/span&gt;&lt;span&gt; 359&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 360&lt;/span&gt;         item-&amp;gt;valueint =&lt;span&gt; INT_MAX;
&lt;/span&gt;&lt;span&gt; 361&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 362&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (number &amp;lt;= (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)INT_MIN)
&lt;/span&gt;&lt;span&gt; 363&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 364&lt;/span&gt;         item-&amp;gt;valueint =&lt;span&gt; INT_MIN;
&lt;/span&gt;&lt;span&gt; 365&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 366&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 367&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 368&lt;/span&gt;         item-&amp;gt;valueint = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)number;
&lt;/span&gt;&lt;span&gt; 369&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 370&lt;/span&gt; 
&lt;span&gt; 371&lt;/span&gt;     item-&amp;gt;type =&lt;span&gt; cJSON_Number;
&lt;/span&gt;&lt;span&gt; 372&lt;/span&gt; 
&lt;span&gt; 373&lt;/span&gt;     input_buffer-&amp;gt;offset += (size_t)(after_end -&lt;span&gt; number_c_string);
&lt;/span&gt;&lt;span&gt; 374&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 375&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 376&lt;/span&gt; 
&lt;span&gt; 377&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; don't ask me, but the original cJSON_SetNumberValue returns an integer or double &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 378&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;double&lt;/span&gt;) cJSON_SetNumberHelper(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; number)
&lt;/span&gt;&lt;span&gt; 379&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 380&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (number &amp;gt;=&lt;span&gt; INT_MAX)
&lt;/span&gt;&lt;span&gt; 381&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 382&lt;/span&gt;         &lt;span&gt;object&lt;/span&gt;-&amp;gt;valueint =&lt;span&gt; INT_MAX;
&lt;/span&gt;&lt;span&gt; 383&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 384&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (number &amp;lt;= (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)INT_MIN)
&lt;/span&gt;&lt;span&gt; 385&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 386&lt;/span&gt;         &lt;span&gt;object&lt;/span&gt;-&amp;gt;valueint =&lt;span&gt; INT_MIN;
&lt;/span&gt;&lt;span&gt; 387&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 388&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 389&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 390&lt;/span&gt;         &lt;span&gt;object&lt;/span&gt;-&amp;gt;valueint = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)number;
&lt;/span&gt;&lt;span&gt; 391&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 392&lt;/span&gt; 
&lt;span&gt; 393&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;-&amp;gt;valuedouble =&lt;span&gt; number;
&lt;/span&gt;&lt;span&gt; 394&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 395&lt;/span&gt; 
&lt;span&gt; 396&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;char&lt;/span&gt;*) cJSON_SetValuestring(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;valuestring)
&lt;/span&gt;&lt;span&gt; 397&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 398&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; *copy =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 399&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 400&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!(&lt;span&gt;object&lt;/span&gt;-&amp;gt;type &amp;amp; cJSON_String) || (&lt;span&gt;object&lt;/span&gt;-&amp;gt;type &amp;amp;&lt;span&gt; cJSON_IsReference))
&lt;/span&gt;&lt;span&gt; 401&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 402&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 403&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 404&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (strlen(valuestring) &amp;lt;= strlen(&lt;span&gt;object&lt;/span&gt;-&amp;gt;&lt;span&gt;valuestring))
&lt;/span&gt;&lt;span&gt; 405&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 406&lt;/span&gt;         strcpy(&lt;span&gt;object&lt;/span&gt;-&amp;gt;&lt;span&gt;valuestring, valuestring);
&lt;/span&gt;&lt;span&gt; 407&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;-&amp;gt;&lt;span&gt;valuestring;
&lt;/span&gt;&lt;span&gt; 408&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 409&lt;/span&gt;     copy = (&lt;span&gt;char&lt;/span&gt;*) cJSON_strdup((&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*)valuestring, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt; 410&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (copy ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 411&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 412&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 413&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 414&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;object&lt;/span&gt;-&amp;gt;valuestring !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 415&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 416&lt;/span&gt;         cJSON_free(&lt;span&gt;object&lt;/span&gt;-&amp;gt;&lt;span&gt;valuestring);
&lt;/span&gt;&lt;span&gt; 417&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 418&lt;/span&gt;     &lt;span&gt;object&lt;/span&gt;-&amp;gt;valuestring =&lt;span&gt; copy;
&lt;/span&gt;&lt;span&gt; 419&lt;/span&gt; 
&lt;span&gt; 420&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; copy;
&lt;/span&gt;&lt;span&gt; 421&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 422&lt;/span&gt; 
&lt;span&gt; 423&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;
&lt;span&gt; 424&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 425&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;buffer;
&lt;/span&gt;&lt;span&gt; 426&lt;/span&gt; &lt;span&gt;    size_t length;
&lt;/span&gt;&lt;span&gt; 427&lt;/span&gt; &lt;span&gt;    size_t offset;
&lt;/span&gt;&lt;span&gt; 428&lt;/span&gt;     size_t depth; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; current nesting depth (for formatted printing) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 429&lt;/span&gt; &lt;span&gt;    cJSON_bool noalloc;
&lt;/span&gt;&lt;span&gt; 430&lt;/span&gt;     cJSON_bool format; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; is this print a formatted print &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 431&lt;/span&gt; &lt;span&gt;    internal_hooks hooks;
&lt;/span&gt;&lt;span&gt; 432&lt;/span&gt; &lt;span&gt;} printbuffer;
&lt;/span&gt;&lt;span&gt; 433&lt;/span&gt; 
&lt;span&gt; 434&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; realloc printbuffer if necessary to have at least &quot;needed&quot; bytes more &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 435&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;* ensure(printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; p, size_t needed)
&lt;/span&gt;&lt;span&gt; 436&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 437&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *newbuffer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 438&lt;/span&gt;     size_t newsize = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 439&lt;/span&gt; 
&lt;span&gt; 440&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((p == NULL) || (p-&amp;gt;buffer ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt; 441&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 442&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 443&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 444&lt;/span&gt; 
&lt;span&gt; 445&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((p-&amp;gt;length &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (p-&amp;gt;offset &amp;gt;= p-&amp;gt;&lt;span&gt;length))
&lt;/span&gt;&lt;span&gt; 446&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 447&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; make sure that offset is valid &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 448&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 449&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 450&lt;/span&gt; 
&lt;span&gt; 451&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (needed &amp;gt;&lt;span&gt; INT_MAX)
&lt;/span&gt;&lt;span&gt; 452&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 453&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; sizes bigger than INT_MAX are currently not supported &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 454&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 455&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 456&lt;/span&gt; 
&lt;span&gt; 457&lt;/span&gt;     needed += p-&amp;gt;offset + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 458&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (needed &amp;lt;= p-&amp;gt;&lt;span&gt;length)
&lt;/span&gt;&lt;span&gt; 459&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 460&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; p-&amp;gt;buffer + p-&amp;gt;&lt;span&gt;offset;
&lt;/span&gt;&lt;span&gt; 461&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 462&lt;/span&gt; 
&lt;span&gt; 463&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (p-&amp;gt;&lt;span&gt;noalloc) {
&lt;/span&gt;&lt;span&gt; 464&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 465&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 466&lt;/span&gt; 
&lt;span&gt; 467&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; calculate new buffer size &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 468&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (needed &amp;gt; (INT_MAX / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 469&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 470&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; overflow of int, use INT_MAX if possible &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 471&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (needed &amp;lt;=&lt;span&gt; INT_MAX)
&lt;/span&gt;&lt;span&gt; 472&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 473&lt;/span&gt;             newsize =&lt;span&gt; INT_MAX;
&lt;/span&gt;&lt;span&gt; 474&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 475&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 476&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 477&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 478&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 479&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 480&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 481&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 482&lt;/span&gt;         newsize = needed * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 483&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 484&lt;/span&gt; 
&lt;span&gt; 485&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (p-&amp;gt;hooks.reallocate !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 486&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 487&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; reallocate with realloc if available &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 488&lt;/span&gt;         newbuffer = (unsigned &lt;span&gt;char&lt;/span&gt;*)p-&amp;gt;hooks.reallocate(p-&amp;gt;&lt;span&gt;buffer, newsize);
&lt;/span&gt;&lt;span&gt; 489&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (newbuffer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 490&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 491&lt;/span&gt;             p-&amp;gt;hooks.deallocate(p-&amp;gt;&lt;span&gt;buffer);
&lt;/span&gt;&lt;span&gt; 492&lt;/span&gt;             p-&amp;gt;length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 493&lt;/span&gt;             p-&amp;gt;buffer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 494&lt;/span&gt; 
&lt;span&gt; 495&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 496&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 497&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 498&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 499&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 500&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; otherwise reallocate manually &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 501&lt;/span&gt;         newbuffer = (unsigned &lt;span&gt;char&lt;/span&gt;*)p-&amp;gt;&lt;span&gt;hooks.allocate(newsize);
&lt;/span&gt;&lt;span&gt; 502&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;newbuffer)
&lt;/span&gt;&lt;span&gt; 503&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 504&lt;/span&gt;             p-&amp;gt;hooks.deallocate(p-&amp;gt;&lt;span&gt;buffer);
&lt;/span&gt;&lt;span&gt; 505&lt;/span&gt;             p-&amp;gt;length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 506&lt;/span&gt;             p-&amp;gt;buffer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 507&lt;/span&gt; 
&lt;span&gt; 508&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 509&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 510&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (newbuffer)
&lt;/span&gt;&lt;span&gt; 511&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 512&lt;/span&gt;             memcpy(newbuffer, p-&amp;gt;buffer, p-&amp;gt;offset + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 513&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 514&lt;/span&gt;         p-&amp;gt;hooks.deallocate(p-&amp;gt;&lt;span&gt;buffer);
&lt;/span&gt;&lt;span&gt; 515&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 516&lt;/span&gt;     p-&amp;gt;length =&lt;span&gt; newsize;
&lt;/span&gt;&lt;span&gt; 517&lt;/span&gt;     p-&amp;gt;buffer =&lt;span&gt; newbuffer;
&lt;/span&gt;&lt;span&gt; 518&lt;/span&gt; 
&lt;span&gt; 519&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; newbuffer + p-&amp;gt;&lt;span&gt;offset;
&lt;/span&gt;&lt;span&gt; 520&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 521&lt;/span&gt; 
&lt;span&gt; 522&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; calculate the new length of the string in a printbuffer and update the offset &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 523&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update_offset(printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; buffer)
&lt;/span&gt;&lt;span&gt; 524&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 525&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *buffer_pointer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 526&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((buffer == NULL) || (buffer-&amp;gt;buffer ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt; 527&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 528&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 529&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 530&lt;/span&gt;     buffer_pointer = buffer-&amp;gt;buffer + buffer-&amp;gt;&lt;span&gt;offset;
&lt;/span&gt;&lt;span&gt; 531&lt;/span&gt; 
&lt;span&gt; 532&lt;/span&gt;     buffer-&amp;gt;offset += strlen((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*&lt;span&gt;)buffer_pointer);
&lt;/span&gt;&lt;span&gt; 533&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 534&lt;/span&gt; 
&lt;span&gt; 535&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; securely comparison of floating-point variables &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 536&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool compare_double(&lt;span&gt;double&lt;/span&gt; a, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; b)
&lt;/span&gt;&lt;span&gt; 537&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 538&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; maxVal = fabs(a) &amp;gt; fabs(b) ?&lt;span&gt; fabs(a) : fabs(b);
&lt;/span&gt;&lt;span&gt; 539&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (fabs(a - b) &amp;lt;= maxVal *&lt;span&gt; DBL_EPSILON);
&lt;/span&gt;&lt;span&gt; 540&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 541&lt;/span&gt; 
&lt;span&gt; 542&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Render the number nicely from the given item into a string. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 543&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_number(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer)
&lt;/span&gt;&lt;span&gt; 544&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 545&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output_pointer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 546&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; d = item-&amp;gt;&lt;span&gt;valuedouble;
&lt;/span&gt;&lt;span&gt; 547&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 548&lt;/span&gt;     size_t i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 549&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; number_buffer[&lt;span&gt;26&lt;/span&gt;] = {&lt;span&gt;0&lt;/span&gt;}; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; temporary buffer to print the number into &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 550&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; decimal_point =&lt;span&gt; get_decimal_point();
&lt;/span&gt;&lt;span&gt; 551&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; test = &lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 552&lt;/span&gt; 
&lt;span&gt; 553&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_buffer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 554&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 555&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 556&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 557&lt;/span&gt; 
&lt;span&gt; 558&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; This checks for NaN and Infinity &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 559&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (isnan(d) ||&lt;span&gt; isinf(d))
&lt;/span&gt;&lt;span&gt; 560&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 561&lt;/span&gt;         length = sprintf((&lt;span&gt;char&lt;/span&gt;*)number_buffer, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 562&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 563&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 564&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 565&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Try 15 decimal places of precision to avoid nonsignificant nonzero digits &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 566&lt;/span&gt;         length = sprintf((&lt;span&gt;char&lt;/span&gt;*)number_buffer, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%1.15g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, d);
&lt;/span&gt;&lt;span&gt; 567&lt;/span&gt; 
&lt;span&gt; 568&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Check whether the original double can be recovered &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 569&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((sscanf((&lt;span&gt;char&lt;/span&gt;*)number_buffer, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;test) != &lt;span&gt;1&lt;/span&gt;) || !compare_double((&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)test, d))
&lt;/span&gt;&lt;span&gt; 570&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 571&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; If not, print with 17 decimal places of precision &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 572&lt;/span&gt;             length = sprintf((&lt;span&gt;char&lt;/span&gt;*)number_buffer, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%1.17g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, d);
&lt;/span&gt;&lt;span&gt; 573&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 574&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 575&lt;/span&gt; 
&lt;span&gt; 576&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; sprintf failed or buffer overrun occurred &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 577&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((length &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (length &amp;gt; (&lt;span&gt;int&lt;/span&gt;)(&lt;span&gt;sizeof&lt;/span&gt;(number_buffer) - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt; 578&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 579&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 580&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 581&lt;/span&gt; 
&lt;span&gt; 582&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; reserve appropriate space in the output &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 583&lt;/span&gt;     output_pointer = ensure(output_buffer, (size_t)length + &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 584&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 585&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 586&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 587&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 588&lt;/span&gt; 
&lt;span&gt; 589&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; copy the printed number to the output and replace locale
&lt;/span&gt;&lt;span&gt; 590&lt;/span&gt; &lt;span&gt;     * dependent decimal point with '.' &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 591&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ((size_t)length); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 592&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 593&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (number_buffer[i] ==&lt;span&gt; decimal_point)
&lt;/span&gt;&lt;span&gt; 594&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 595&lt;/span&gt;             output_pointer[i] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 596&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 597&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 598&lt;/span&gt; 
&lt;span&gt; 599&lt;/span&gt;         output_pointer[i] =&lt;span&gt; number_buffer[i];
&lt;/span&gt;&lt;span&gt; 600&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 601&lt;/span&gt;     output_pointer[i] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 602&lt;/span&gt; 
&lt;span&gt; 603&lt;/span&gt;     output_buffer-&amp;gt;offset +=&lt;span&gt; (size_t)length;
&lt;/span&gt;&lt;span&gt; 604&lt;/span&gt; 
&lt;span&gt; 605&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 606&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 607&lt;/span&gt; 
&lt;span&gt; 608&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse 4 digit hexadecimal number &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 609&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; unsigned parse_hex4(&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input)
&lt;/span&gt;&lt;span&gt; 610&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 611&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; h = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 612&lt;/span&gt;     size_t i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 613&lt;/span&gt; 
&lt;span&gt; 614&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;4&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 615&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 616&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse digit &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 617&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((input[i] &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; (input[i] &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 618&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 619&lt;/span&gt;             h += (unsigned &lt;span&gt;int&lt;/span&gt;) input[i] - &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 620&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 621&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((input[i] &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; (input[i] &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 622&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 623&lt;/span&gt;             h += (unsigned &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;10&lt;/span&gt; + input[i] - &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 624&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 625&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((input[i] &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; (input[i] &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 626&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 627&lt;/span&gt;             h += (unsigned &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;10&lt;/span&gt; + input[i] - &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 628&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 629&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; invalid &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 630&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 631&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 632&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 633&lt;/span&gt; 
&lt;span&gt; 634&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (i &amp;lt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 635&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 636&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; shift left to make place for the next nibble &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 637&lt;/span&gt;             h = h &amp;lt;&amp;lt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 638&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 639&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 640&lt;/span&gt; 
&lt;span&gt; 641&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; h;
&lt;/span&gt;&lt;span&gt; 642&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 643&lt;/span&gt; 
&lt;span&gt; 644&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; converts a UTF-16 literal to UTF-8
&lt;/span&gt;&lt;span&gt; 645&lt;/span&gt; &lt;span&gt; * A literal can be one or two sequences of the form \uXXXX &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 646&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; utf16_literal_to_utf8(&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; input_pointer, &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; input_end, unsigned &lt;span&gt;char&lt;/span&gt; **&lt;span&gt;output_pointer)
&lt;/span&gt;&lt;span&gt; 647&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 648&lt;/span&gt;     &lt;span&gt;long&lt;/span&gt; unsigned &lt;span&gt;int&lt;/span&gt; codepoint = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 649&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; first_code = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 650&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *first_sequence =&lt;span&gt; input_pointer;
&lt;/span&gt;&lt;span&gt; 651&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; utf8_length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 652&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; utf8_position = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 653&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; sequence_length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 654&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; first_byte_mark = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 655&lt;/span&gt; 
&lt;span&gt; 656&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((input_end - first_sequence) &amp;lt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 657&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 658&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; input ends unexpectedly &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 659&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 660&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 661&lt;/span&gt; 
&lt;span&gt; 662&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; get the first utf16 sequence &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 663&lt;/span&gt;     first_code = parse_hex4(first_sequence + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 664&lt;/span&gt; 
&lt;span&gt; 665&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check that the code is valid &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 666&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (((first_code &amp;gt;= &lt;span&gt;0xDC00&lt;/span&gt;) &amp;amp;&amp;amp; (first_code &amp;lt;= &lt;span&gt;0xDFFF&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt; 667&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 668&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 669&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 670&lt;/span&gt; 
&lt;span&gt; 671&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; UTF16 surrogate pair &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 672&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((first_code &amp;gt;= &lt;span&gt;0xD800&lt;/span&gt;) &amp;amp;&amp;amp; (first_code &amp;lt;= &lt;span&gt;0xDBFF&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 673&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 674&lt;/span&gt;         &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *second_sequence = first_sequence + &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 675&lt;/span&gt;         unsigned &lt;span&gt;int&lt;/span&gt; second_code = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 676&lt;/span&gt;         sequence_length = &lt;span&gt;12&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; \uXXXX\uXXXX &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 677&lt;/span&gt; 
&lt;span&gt; 678&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((input_end - second_sequence) &amp;lt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 679&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 680&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; input ends unexpectedly &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 681&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 682&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 683&lt;/span&gt; 
&lt;span&gt; 684&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((second_sequence[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) || (second_sequence[&lt;span&gt;1&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 685&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 686&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; missing second half of the surrogate pair &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 687&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 688&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 689&lt;/span&gt; 
&lt;span&gt; 690&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; get the second utf16 sequence &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 691&lt;/span&gt;         second_code = parse_hex4(second_sequence + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 692&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check that the code is valid &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 693&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((second_code &amp;lt; &lt;span&gt;0xDC00&lt;/span&gt;) || (second_code &amp;gt; &lt;span&gt;0xDFFF&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 694&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 695&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; invalid second half of the surrogate pair &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 696&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 697&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 698&lt;/span&gt; 
&lt;span&gt; 699&lt;/span&gt; 
&lt;span&gt; 700&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; calculate the unicode codepoint from the surrogate pair &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 701&lt;/span&gt;         codepoint = &lt;span&gt;0x10000&lt;/span&gt; + (((first_code &amp;amp; &lt;span&gt;0x3FF&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;10&lt;/span&gt;) | (second_code &amp;amp; &lt;span&gt;0x3FF&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 702&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 703&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 704&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 705&lt;/span&gt;         sequence_length = &lt;span&gt;6&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; \uXXXX &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 706&lt;/span&gt;         codepoint =&lt;span&gt; first_code;
&lt;/span&gt;&lt;span&gt; 707&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 708&lt;/span&gt; 
&lt;span&gt; 709&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; encode as UTF-8
&lt;/span&gt;&lt;span&gt; 710&lt;/span&gt; &lt;span&gt;     * takes at maximum 4 bytes to encode:
&lt;/span&gt;&lt;span&gt; 711&lt;/span&gt; &lt;span&gt;     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 712&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (codepoint &amp;lt; &lt;span&gt;0x80&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 713&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 714&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; normal ascii, encoding 0xxxxxxx &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 715&lt;/span&gt;         utf8_length = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 716&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 717&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (codepoint &amp;lt; &lt;span&gt;0x800&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 718&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 719&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; two bytes, encoding 110xxxxx 10xxxxxx &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 720&lt;/span&gt;         utf8_length = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 721&lt;/span&gt;         first_byte_mark = &lt;span&gt;0xC0&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 11000000 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 722&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 723&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (codepoint &amp;lt; &lt;span&gt;0x10000&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 724&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 725&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 726&lt;/span&gt;         utf8_length = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 727&lt;/span&gt;         first_byte_mark = &lt;span&gt;0xE0&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 11100000 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 728&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 729&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (codepoint &amp;lt;= &lt;span&gt;0x10FFFF&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 730&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 731&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 732&lt;/span&gt;         utf8_length = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 733&lt;/span&gt;         first_byte_mark = &lt;span&gt;0xF0&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 11110000 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 734&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 735&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 736&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 737&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; invalid unicode codepoint &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 738&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 739&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 740&lt;/span&gt; 
&lt;span&gt; 741&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; encode as utf8 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 742&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (utf8_position = (unsigned &lt;span&gt;char&lt;/span&gt;)(utf8_length - &lt;span&gt;1&lt;/span&gt;); utf8_position &amp;gt; &lt;span&gt;0&lt;/span&gt;; utf8_position--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 743&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 744&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 10xxxxxx &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 745&lt;/span&gt;         (*output_pointer)[utf8_position] = (unsigned &lt;span&gt;char&lt;/span&gt;)((codepoint | &lt;span&gt;0x80&lt;/span&gt;) &amp;amp; &lt;span&gt;0xBF&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 746&lt;/span&gt;         codepoint &amp;gt;&amp;gt;= &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 747&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 748&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; encode first byte &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 749&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (utf8_length &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 750&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 751&lt;/span&gt;         (*output_pointer)[&lt;span&gt;0&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;)((codepoint | first_byte_mark) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 752&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 753&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 754&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 755&lt;/span&gt;         (*output_pointer)[&lt;span&gt;0&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;)(codepoint &amp;amp; &lt;span&gt;0x7F&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 756&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 757&lt;/span&gt; 
&lt;span&gt; 758&lt;/span&gt;     *output_pointer +=&lt;span&gt; utf8_length;
&lt;/span&gt;&lt;span&gt; 759&lt;/span&gt; 
&lt;span&gt; 760&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sequence_length;
&lt;/span&gt;&lt;span&gt; 761&lt;/span&gt; 
&lt;span&gt; 762&lt;/span&gt; &lt;span&gt;fail:
&lt;/span&gt;&lt;span&gt; 763&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 764&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 765&lt;/span&gt; 
&lt;span&gt; 766&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Parse the input text into an unescaped cinput, and populate item. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 767&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_string(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer)
&lt;/span&gt;&lt;span&gt; 768&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 769&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *input_pointer = buffer_at_offset(input_buffer) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 770&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *input_end = buffer_at_offset(input_buffer) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 771&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output_pointer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 772&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 773&lt;/span&gt; 
&lt;span&gt; 774&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; not a string &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 775&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 776&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 777&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 778&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 779&lt;/span&gt; 
&lt;span&gt; 780&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 781&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; calculate approximate size of the output (overestimate) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 782&lt;/span&gt;         size_t allocation_length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 783&lt;/span&gt;         size_t skipped_bytes = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 784&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (((size_t)(input_end - input_buffer-&amp;gt;content) &amp;lt; input_buffer-&amp;gt;length) &amp;amp;&amp;amp; (*input_end != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 785&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 786&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; is escape sequence &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 787&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (input_end[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 788&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 789&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; ((size_t)(input_end + &lt;span&gt;1&lt;/span&gt; - input_buffer-&amp;gt;content) &amp;gt;= input_buffer-&amp;gt;&lt;span&gt;length)
&lt;/span&gt;&lt;span&gt; 790&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 791&lt;/span&gt;                     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; prevent buffer overflow when last input character is a backslash &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 792&lt;/span&gt;                     &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 793&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 794&lt;/span&gt;                 skipped_bytes++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 795&lt;/span&gt;                 input_end++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 796&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 797&lt;/span&gt;             input_end++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 798&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 799&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (((size_t)(input_end - input_buffer-&amp;gt;content) &amp;gt;= input_buffer-&amp;gt;length) || (*input_end != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 800&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 801&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; string ended unexpectedly &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 802&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 803&lt;/span&gt; 
&lt;span&gt; 804&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; This is at most how much we need for the output &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 805&lt;/span&gt;         allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) -&lt;span&gt; skipped_bytes;
&lt;/span&gt;&lt;span&gt; 806&lt;/span&gt;         output = (unsigned &lt;span&gt;char&lt;/span&gt;*)input_buffer-&amp;gt;hooks.allocate(allocation_length + &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 807&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (output ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 808&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 809&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; allocation failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 810&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 811&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 812&lt;/span&gt; 
&lt;span&gt; 813&lt;/span&gt;     output_pointer =&lt;span&gt; output;
&lt;/span&gt;&lt;span&gt; 814&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; loop through the string literal &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 815&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (input_pointer &amp;lt;&lt;span&gt; input_end)
&lt;/span&gt;&lt;span&gt; 816&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 817&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (*input_pointer != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 818&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 819&lt;/span&gt;             *output_pointer++ = *input_pointer++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 820&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 821&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; escape sequence &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 822&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 823&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 824&lt;/span&gt;             unsigned &lt;span&gt;char&lt;/span&gt; sequence_length = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 825&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((input_end - input_pointer) &amp;lt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 826&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 827&lt;/span&gt;                 &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 828&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 829&lt;/span&gt; 
&lt;span&gt; 830&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt; (input_pointer[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 831&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 832&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 833&lt;/span&gt;                     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 834&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 835&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 836&lt;/span&gt;                     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 837&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 838&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 839&lt;/span&gt;                     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 840&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 841&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 842&lt;/span&gt;                     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 843&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 844&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 845&lt;/span&gt;                     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 846&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 847&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 848&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 849&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 850&lt;/span&gt;                     *output_pointer++ = input_pointer[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 851&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 852&lt;/span&gt; 
&lt;span&gt; 853&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; UTF-16 literal &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 854&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 855&lt;/span&gt;                     sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &amp;amp;&lt;span&gt;output_pointer);
&lt;/span&gt;&lt;span&gt; 856&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (sequence_length == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 857&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 858&lt;/span&gt;                         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; failed to convert UTF16-literal to UTF-8 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 859&lt;/span&gt;                         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 860&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 861&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 862&lt;/span&gt; 
&lt;span&gt; 863&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 864&lt;/span&gt;                     &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt; 865&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 866&lt;/span&gt;             input_pointer +=&lt;span&gt; sequence_length;
&lt;/span&gt;&lt;span&gt; 867&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 868&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 869&lt;/span&gt; 
&lt;span&gt; 870&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; zero terminate the output &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 871&lt;/span&gt;     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 872&lt;/span&gt; 
&lt;span&gt; 873&lt;/span&gt;     item-&amp;gt;type =&lt;span&gt; cJSON_String;
&lt;/span&gt;&lt;span&gt; 874&lt;/span&gt;     item-&amp;gt;valuestring = (&lt;span&gt;char&lt;/span&gt;*&lt;span&gt;)output;
&lt;/span&gt;&lt;span&gt; 875&lt;/span&gt; 
&lt;span&gt; 876&lt;/span&gt;     input_buffer-&amp;gt;offset = (size_t) (input_end - input_buffer-&amp;gt;&lt;span&gt;content);
&lt;/span&gt;&lt;span&gt; 877&lt;/span&gt;     input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 878&lt;/span&gt; 
&lt;span&gt; 879&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 880&lt;/span&gt; 
&lt;span&gt; 881&lt;/span&gt; &lt;span&gt;fail:
&lt;/span&gt;&lt;span&gt; 882&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 883&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 884&lt;/span&gt;         input_buffer-&amp;gt;&lt;span&gt;hooks.deallocate(output);
&lt;/span&gt;&lt;span&gt; 885&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 886&lt;/span&gt; 
&lt;span&gt; 887&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (input_pointer !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 888&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 889&lt;/span&gt;         input_buffer-&amp;gt;offset = (size_t)(input_pointer - input_buffer-&amp;gt;&lt;span&gt;content);
&lt;/span&gt;&lt;span&gt; 890&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 891&lt;/span&gt; 
&lt;span&gt; 892&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 893&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 894&lt;/span&gt; 
&lt;span&gt; 895&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Render the cstring provided to an escaped version that can be printed. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 896&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_string_ptr(&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; input, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer)
&lt;/span&gt;&lt;span&gt; 897&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 898&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *input_pointer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 899&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 900&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output_pointer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 901&lt;/span&gt;     size_t output_length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 902&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; numbers of additional characters needed for escaping &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 903&lt;/span&gt;     size_t escape_characters = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 904&lt;/span&gt; 
&lt;span&gt; 905&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_buffer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 906&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 907&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 908&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 909&lt;/span&gt; 
&lt;span&gt; 910&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; empty string &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 911&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (input ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 912&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 913&lt;/span&gt;         output = ensure(output_buffer, &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 914&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (output ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 915&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 916&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 917&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 918&lt;/span&gt;         strcpy((&lt;span&gt;char&lt;/span&gt;*)output, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 919&lt;/span&gt; 
&lt;span&gt; 920&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 921&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 922&lt;/span&gt; 
&lt;span&gt; 923&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; set &quot;flag&quot; to 1 if something needs to be escaped &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 924&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (input_pointer = input; *input_pointer; input_pointer++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 925&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 926&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt; (*&lt;span&gt;input_pointer)
&lt;/span&gt;&lt;span&gt; 927&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 928&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 929&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 930&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 931&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 932&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 933&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 934&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 935&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; one character escape sequence &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 936&lt;/span&gt;                 escape_characters++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 937&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 938&lt;/span&gt;             &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 939&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (*input_pointer &amp;lt; &lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 940&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 941&lt;/span&gt;                     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; UTF-16 escape sequence uXXXX &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 942&lt;/span&gt;                     escape_characters += &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 943&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 944&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 945&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 946&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 947&lt;/span&gt;     output_length = (size_t)(input_pointer - input) +&lt;span&gt; escape_characters;
&lt;/span&gt;&lt;span&gt; 948&lt;/span&gt; 
&lt;span&gt; 949&lt;/span&gt;     output = ensure(output_buffer, output_length + &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 950&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 951&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 952&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 953&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 954&lt;/span&gt; 
&lt;span&gt; 955&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; no characters have to be escaped &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 956&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (escape_characters == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 957&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 958&lt;/span&gt;         output[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 959&lt;/span&gt;         memcpy(output + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, input, output_length);
&lt;/span&gt;&lt;span&gt; 960&lt;/span&gt;         output[output_length + &lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 961&lt;/span&gt;         output[output_length + &lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 962&lt;/span&gt; 
&lt;span&gt; 963&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 964&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 965&lt;/span&gt; 
&lt;span&gt; 966&lt;/span&gt;     output[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 967&lt;/span&gt;     output_pointer = output + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 968&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; copy the string &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 969&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (input_pointer = input; *input_pointer != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; (&lt;span&gt;void&lt;/span&gt;)input_pointer++, output_pointer++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 970&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 971&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((*input_pointer &amp;gt; &lt;span&gt;31&lt;/span&gt;) &amp;amp;&amp;amp; (*input_pointer != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; (*input_pointer != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 972&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 973&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; normal character, copy &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 974&lt;/span&gt;             *output_pointer = *&lt;span&gt;input_pointer;
&lt;/span&gt;&lt;span&gt; 975&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 976&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 977&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 978&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; character needs to be escaped &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 979&lt;/span&gt;             *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 980&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt; (*&lt;span&gt;input_pointer)
&lt;/span&gt;&lt;span&gt; 981&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 982&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 983&lt;/span&gt;                     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 984&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 985&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 986&lt;/span&gt;                     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 987&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 988&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 989&lt;/span&gt;                     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 990&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 991&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 992&lt;/span&gt;                     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 993&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 994&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 995&lt;/span&gt;                     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 996&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 997&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 998&lt;/span&gt;                     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 999&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;1001&lt;/span&gt;                     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1002&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1003&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;1004&lt;/span&gt;                     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; escape and print as unicode codepoint &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1005&lt;/span&gt;                     sprintf((&lt;span&gt;char&lt;/span&gt;*)output_pointer, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;u%04x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, *&lt;span&gt;input_pointer);
&lt;/span&gt;&lt;span&gt;1006&lt;/span&gt;                     output_pointer += &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1007&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1008&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1009&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1010&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1011&lt;/span&gt;     output[output_length + &lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1012&lt;/span&gt;     output[output_length + &lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1013&lt;/span&gt; 
&lt;span&gt;1014&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1015&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1016&lt;/span&gt; 
&lt;span&gt;1017&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Invoke print_string_ptr (which is useful) on an item. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1018&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_string(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; p)
&lt;/span&gt;&lt;span&gt;1019&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1020&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; print_string_ptr((unsigned &lt;span&gt;char&lt;/span&gt;*)item-&amp;gt;&lt;span&gt;valuestring, p);
&lt;/span&gt;&lt;span&gt;1021&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1022&lt;/span&gt; 
&lt;span&gt;1023&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Predeclare these prototypes. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1024&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_value(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer);
&lt;/span&gt;&lt;span&gt;1025&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_value(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer);
&lt;/span&gt;&lt;span&gt;1026&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_array(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer);
&lt;/span&gt;&lt;span&gt;1027&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_array(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer);
&lt;/span&gt;&lt;span&gt;1028&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_object(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer);
&lt;/span&gt;&lt;span&gt;1029&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_object(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer);
&lt;/span&gt;&lt;span&gt;1030&lt;/span&gt; 
&lt;span&gt;1031&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Utility to jump whitespace and cr/lf &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1032&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; parse_buffer *buffer_skip_whitespace(parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; buffer)
&lt;/span&gt;&lt;span&gt;1033&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1034&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((buffer == NULL) || (buffer-&amp;gt;content ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;1035&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1036&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1037&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1038&lt;/span&gt; 
&lt;span&gt;1039&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (cannot_access_at_index(buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1040&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1041&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; buffer;
&lt;/span&gt;&lt;span&gt;1042&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1043&lt;/span&gt; 
&lt;span&gt;1044&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (can_access_at_index(buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(buffer)[&lt;span&gt;0&lt;/span&gt;] &amp;lt;= &lt;span&gt;32&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1045&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1046&lt;/span&gt;        buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1047&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1048&lt;/span&gt; 
&lt;span&gt;1049&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (buffer-&amp;gt;offset == buffer-&amp;gt;&lt;span&gt;length)
&lt;/span&gt;&lt;span&gt;1050&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1051&lt;/span&gt;         buffer-&amp;gt;offset--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1052&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1053&lt;/span&gt; 
&lt;span&gt;1054&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; buffer;
&lt;/span&gt;&lt;span&gt;1055&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1056&lt;/span&gt; 
&lt;span&gt;1057&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1058&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; parse_buffer *skip_utf8_bom(parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; buffer)
&lt;/span&gt;&lt;span&gt;1059&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1060&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((buffer == NULL) || (buffer-&amp;gt;content == NULL) || (buffer-&amp;gt;offset != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1061&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1062&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1063&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1064&lt;/span&gt; 
&lt;span&gt;1065&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_access_at_index(buffer, &lt;span&gt;4&lt;/span&gt;) &amp;amp;&amp;amp; (strncmp((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)buffer_at_offset(buffer), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\xEF\xBB\xBF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1066&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1067&lt;/span&gt;         buffer-&amp;gt;offset += &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1068&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1069&lt;/span&gt; 
&lt;span&gt;1070&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; buffer;
&lt;/span&gt;&lt;span&gt;1071&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1072&lt;/span&gt; 
&lt;span&gt;1073&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *value, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; **&lt;span&gt;return_parse_end, cJSON_bool require_null_terminated)
&lt;/span&gt;&lt;span&gt;1074&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1075&lt;/span&gt; &lt;span&gt;    size_t buffer_length;
&lt;/span&gt;&lt;span&gt;1076&lt;/span&gt; 
&lt;span&gt;1077&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (NULL ==&lt;span&gt; value)
&lt;/span&gt;&lt;span&gt;1078&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1079&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1080&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1081&lt;/span&gt; 
&lt;span&gt;1082&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Adding null character size due to require_null_terminated. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1083&lt;/span&gt;     buffer_length = strlen(value) + &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1084&lt;/span&gt; 
&lt;span&gt;1085&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
&lt;/span&gt;&lt;span&gt;1086&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1087&lt;/span&gt; 
&lt;span&gt;1088&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Parse an object - create a new root, and populate. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1089&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *value, size_t buffer_length, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; **&lt;span&gt;return_parse_end, cJSON_bool require_null_terminated)
&lt;/span&gt;&lt;span&gt;1090&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1091&lt;/span&gt;     parse_buffer buffer = { &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, { &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; } };
&lt;/span&gt;&lt;span&gt;1092&lt;/span&gt;     cJSON *item =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1093&lt;/span&gt; 
&lt;span&gt;1094&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; reset error position &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1095&lt;/span&gt;     global_error.json =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1096&lt;/span&gt;     global_error.position = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1097&lt;/span&gt; 
&lt;span&gt;1098&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (value == NULL || &lt;span&gt;0&lt;/span&gt; ==&lt;span&gt; buffer_length)
&lt;/span&gt;&lt;span&gt;1099&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1100&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1101&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1102&lt;/span&gt; 
&lt;span&gt;1103&lt;/span&gt;     buffer.content = (&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*&lt;span&gt;)value;
&lt;/span&gt;&lt;span&gt;1104&lt;/span&gt;     buffer.length =&lt;span&gt; buffer_length; 
&lt;/span&gt;&lt;span&gt;1105&lt;/span&gt;     buffer.offset = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1106&lt;/span&gt;     buffer.hooks =&lt;span&gt; global_hooks;
&lt;/span&gt;&lt;span&gt;1107&lt;/span&gt; 
&lt;span&gt;1108&lt;/span&gt;     item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;1109&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item == NULL) &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; memory fail &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1110&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1111&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1112&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1113&lt;/span&gt; 
&lt;span&gt;1114&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&amp;amp;&lt;span&gt;buffer))))
&lt;/span&gt;&lt;span&gt;1115&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1116&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse failure. ep is set. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1117&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1118&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1119&lt;/span&gt; 
&lt;span&gt;1120&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; if we require null-terminated JSON without appended garbage, skip and then check for a null terminator &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1121&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (require_null_terminated)
&lt;/span&gt;&lt;span&gt;1122&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1123&lt;/span&gt;         buffer_skip_whitespace(&amp;amp;&lt;span&gt;buffer);
&lt;/span&gt;&lt;span&gt;1124&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((buffer.offset &amp;gt;= buffer.length) || buffer_at_offset(&amp;amp;buffer)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1125&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1126&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1127&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1128&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1129&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (return_parse_end)
&lt;/span&gt;&lt;span&gt;1130&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1131&lt;/span&gt;         *return_parse_end = (&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)buffer_at_offset(&amp;amp;&lt;span&gt;buffer);
&lt;/span&gt;&lt;span&gt;1132&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1133&lt;/span&gt; 
&lt;span&gt;1134&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;1135&lt;/span&gt; 
&lt;span&gt;1136&lt;/span&gt; &lt;span&gt;fail:
&lt;/span&gt;&lt;span&gt;1137&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1138&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1139&lt;/span&gt; &lt;span&gt;        cJSON_Delete(item);
&lt;/span&gt;&lt;span&gt;1140&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1141&lt;/span&gt; 
&lt;span&gt;1142&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (value !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1143&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1144&lt;/span&gt; &lt;span&gt;        error local_error;
&lt;/span&gt;&lt;span&gt;1145&lt;/span&gt;         local_error.json = (&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*&lt;span&gt;)value;
&lt;/span&gt;&lt;span&gt;1146&lt;/span&gt;         local_error.position = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1147&lt;/span&gt; 
&lt;span&gt;1148&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (buffer.offset &amp;lt;&lt;span&gt; buffer.length)
&lt;/span&gt;&lt;span&gt;1149&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1150&lt;/span&gt;             local_error.position =&lt;span&gt; buffer.offset;
&lt;/span&gt;&lt;span&gt;1151&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1152&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (buffer.length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1153&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1154&lt;/span&gt;             local_error.position = buffer.length - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1155&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1156&lt;/span&gt; 
&lt;span&gt;1157&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (return_parse_end !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1158&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1159&lt;/span&gt;             *return_parse_end = (&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)local_error.json +&lt;span&gt; local_error.position;
&lt;/span&gt;&lt;span&gt;1160&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1161&lt;/span&gt; 
&lt;span&gt;1162&lt;/span&gt;         global_error =&lt;span&gt; local_error;
&lt;/span&gt;&lt;span&gt;1163&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1164&lt;/span&gt; 
&lt;span&gt;1165&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1166&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1167&lt;/span&gt; 
&lt;span&gt;1168&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Default options for cJSON_Parse &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1169&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_Parse(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;value)
&lt;/span&gt;&lt;span&gt;1170&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1171&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; cJSON_ParseWithOpts(value, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1172&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1173&lt;/span&gt; 
&lt;span&gt;1174&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;value, size_t buffer_length)
&lt;/span&gt;&lt;span&gt;1175&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1176&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; cJSON_ParseWithLengthOpts(value, buffer_length, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1177&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1178&lt;/span&gt; 
&lt;span&gt;1179&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; cjson_min(a, b) (((a) &amp;lt; (b)) ? (a) : (b))
&lt;span&gt;1180&lt;/span&gt; 
&lt;span&gt;1181&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *print(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, cJSON_bool format, &lt;span&gt;const&lt;/span&gt; internal_hooks * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; hooks)
&lt;/span&gt;&lt;span&gt;1182&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1183&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; size_t default_buffer_size = &lt;span&gt;256&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1184&lt;/span&gt;     printbuffer buffer[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;1185&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *printed =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1186&lt;/span&gt; 
&lt;span&gt;1187&lt;/span&gt;     memset(buffer, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(buffer));
&lt;/span&gt;&lt;span&gt;1188&lt;/span&gt; 
&lt;span&gt;1189&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create buffer &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1190&lt;/span&gt;     buffer-&amp;gt;buffer = (unsigned &lt;span&gt;char&lt;/span&gt;*) hooks-&amp;gt;&lt;span&gt;allocate(default_buffer_size);
&lt;/span&gt;&lt;span&gt;1191&lt;/span&gt;     buffer-&amp;gt;length =&lt;span&gt; default_buffer_size;
&lt;/span&gt;&lt;span&gt;1192&lt;/span&gt;     buffer-&amp;gt;format =&lt;span&gt; format;
&lt;/span&gt;&lt;span&gt;1193&lt;/span&gt;     buffer-&amp;gt;hooks = *&lt;span&gt;hooks;
&lt;/span&gt;&lt;span&gt;1194&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (buffer-&amp;gt;buffer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1195&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1196&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1197&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1198&lt;/span&gt; 
&lt;span&gt;1199&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; print the value &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1200&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;print_value(item, buffer))
&lt;/span&gt;&lt;span&gt;1201&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1202&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1203&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1204&lt;/span&gt; &lt;span&gt;    update_offset(buffer);
&lt;/span&gt;&lt;span&gt;1205&lt;/span&gt; 
&lt;span&gt;1206&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check if reallocate is available &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1207&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (hooks-&amp;gt;reallocate !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1208&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1209&lt;/span&gt;         printed = (unsigned &lt;span&gt;char&lt;/span&gt;*) hooks-&amp;gt;reallocate(buffer-&amp;gt;buffer, buffer-&amp;gt;offset + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1210&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (printed ==&lt;span&gt; NULL) {
&lt;/span&gt;&lt;span&gt;1211&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1212&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1213&lt;/span&gt;         buffer-&amp;gt;buffer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1214&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1215&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; otherwise copy the JSON over to a new buffer &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1216&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1217&lt;/span&gt;         printed = (unsigned &lt;span&gt;char&lt;/span&gt;*) hooks-&amp;gt;allocate(buffer-&amp;gt;offset + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1218&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (printed ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1219&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1220&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1221&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1222&lt;/span&gt;         memcpy(printed, buffer-&amp;gt;buffer, cjson_min(buffer-&amp;gt;length, buffer-&amp;gt;offset + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;1223&lt;/span&gt;         printed[buffer-&amp;gt;offset] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; just to be sure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1224&lt;/span&gt; 
&lt;span&gt;1225&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; free the buffer &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1226&lt;/span&gt;         hooks-&amp;gt;deallocate(buffer-&amp;gt;&lt;span&gt;buffer);
&lt;/span&gt;&lt;span&gt;1227&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1228&lt;/span&gt; 
&lt;span&gt;1229&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; printed;
&lt;/span&gt;&lt;span&gt;1230&lt;/span&gt; 
&lt;span&gt;1231&lt;/span&gt; &lt;span&gt;fail:
&lt;/span&gt;&lt;span&gt;1232&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (buffer-&amp;gt;buffer !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1233&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;         hooks-&amp;gt;deallocate(buffer-&amp;gt;&lt;span&gt;buffer);
&lt;/span&gt;&lt;span&gt;1235&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1236&lt;/span&gt; 
&lt;span&gt;1237&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (printed !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1238&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1239&lt;/span&gt;         hooks-&amp;gt;&lt;span&gt;deallocate(printed);
&lt;/span&gt;&lt;span&gt;1240&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1241&lt;/span&gt; 
&lt;span&gt;1242&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1243&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1244&lt;/span&gt; 
&lt;span&gt;1245&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Render a cJSON item/entity/structure to text. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1246&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;char&lt;/span&gt; *) cJSON_Print(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;1247&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1248&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;*)print(item, &lt;span&gt;true&lt;/span&gt;, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;1249&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1250&lt;/span&gt; 
&lt;span&gt;1251&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;char&lt;/span&gt; *) cJSON_PrintUnformatted(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;1252&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1253&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;*)print(item, &lt;span&gt;false&lt;/span&gt;, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;1254&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1255&lt;/span&gt; 
&lt;span&gt;1256&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;char&lt;/span&gt; *) cJSON_PrintBuffered(&lt;span&gt;const&lt;/span&gt; cJSON *item, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; prebuffer, cJSON_bool fmt)
&lt;/span&gt;&lt;span&gt;1257&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1258&lt;/span&gt;     printbuffer p = { &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, { &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; } };
&lt;/span&gt;&lt;span&gt;1259&lt;/span&gt; 
&lt;span&gt;1260&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (prebuffer &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1261&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1262&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1263&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1264&lt;/span&gt; 
&lt;span&gt;1265&lt;/span&gt;     p.buffer = (unsigned &lt;span&gt;char&lt;/span&gt;*&lt;span&gt;)global_hooks.allocate((size_t)prebuffer);
&lt;/span&gt;&lt;span&gt;1266&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;p.buffer)
&lt;/span&gt;&lt;span&gt;1267&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1268&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1269&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1270&lt;/span&gt; 
&lt;span&gt;1271&lt;/span&gt;     p.length =&lt;span&gt; (size_t)prebuffer;
&lt;/span&gt;&lt;span&gt;1272&lt;/span&gt;     p.offset = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1273&lt;/span&gt;     p.noalloc = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1274&lt;/span&gt;     p.format =&lt;span&gt; fmt;
&lt;/span&gt;&lt;span&gt;1275&lt;/span&gt;     p.hooks =&lt;span&gt; global_hooks;
&lt;/span&gt;&lt;span&gt;1276&lt;/span&gt; 
&lt;span&gt;1277&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!print_value(item, &amp;amp;&lt;span&gt;p))
&lt;/span&gt;&lt;span&gt;1278&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1279&lt;/span&gt; &lt;span&gt;        global_hooks.deallocate(p.buffer);
&lt;/span&gt;&lt;span&gt;1280&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1281&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1282&lt;/span&gt; 
&lt;span&gt;1283&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;*&lt;span&gt;)p.buffer;
&lt;/span&gt;&lt;span&gt;1284&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1285&lt;/span&gt; 
&lt;span&gt;1286&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, &lt;span&gt;char&lt;/span&gt; *buffer, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;const&lt;/span&gt;&lt;span&gt; cJSON_bool format)
&lt;/span&gt;&lt;span&gt;1287&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1288&lt;/span&gt;     printbuffer p = { &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, { &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; } };
&lt;/span&gt;&lt;span&gt;1289&lt;/span&gt; 
&lt;span&gt;1290&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((length &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (buffer ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;1291&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1292&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1293&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1294&lt;/span&gt; 
&lt;span&gt;1295&lt;/span&gt;     p.buffer = (unsigned &lt;span&gt;char&lt;/span&gt;*&lt;span&gt;)buffer;
&lt;/span&gt;&lt;span&gt;1296&lt;/span&gt;     p.length =&lt;span&gt; (size_t)length;
&lt;/span&gt;&lt;span&gt;1297&lt;/span&gt;     p.offset = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1298&lt;/span&gt;     p.noalloc = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1299&lt;/span&gt;     p.format =&lt;span&gt; format;
&lt;/span&gt;&lt;span&gt;1300&lt;/span&gt;     p.hooks =&lt;span&gt; global_hooks;
&lt;/span&gt;&lt;span&gt;1301&lt;/span&gt; 
&lt;span&gt;1302&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; print_value(item, &amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;1303&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1304&lt;/span&gt; 
&lt;span&gt;1305&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Parser core - when encountering text, process appropriately. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1306&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_value(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer)
&lt;/span&gt;&lt;span&gt;1307&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1308&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((input_buffer == NULL) || (input_buffer-&amp;gt;content ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;1309&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1310&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; no input &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1311&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1312&lt;/span&gt; 
&lt;span&gt;1313&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse the different types of values &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1314&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; null &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1315&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_read(input_buffer, &lt;span&gt;4&lt;/span&gt;) &amp;amp;&amp;amp; (strncmp((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)buffer_at_offset(input_buffer), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1316&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1317&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_NULL;
&lt;/span&gt;&lt;span&gt;1318&lt;/span&gt;         input_buffer-&amp;gt;offset += &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1319&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1320&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1321&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; false &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1322&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_read(input_buffer, &lt;span&gt;5&lt;/span&gt;) &amp;amp;&amp;amp; (strncmp((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)buffer_at_offset(input_buffer), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1323&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1324&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_False;
&lt;/span&gt;&lt;span&gt;1325&lt;/span&gt;         input_buffer-&amp;gt;offset += &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1326&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1327&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1328&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; true &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1329&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_read(input_buffer, &lt;span&gt;4&lt;/span&gt;) &amp;amp;&amp;amp; (strncmp((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)buffer_at_offset(input_buffer), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1330&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1331&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_True;
&lt;/span&gt;&lt;span&gt;1332&lt;/span&gt;         item-&amp;gt;valueint = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1333&lt;/span&gt;         input_buffer-&amp;gt;offset += &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1334&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1335&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1336&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; string &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1337&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1338&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1339&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; parse_string(item, input_buffer);
&lt;/span&gt;&lt;span&gt;1340&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1341&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; number &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1342&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; ((buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) || ((buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))))
&lt;/span&gt;&lt;span&gt;1343&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1344&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; parse_number(item, input_buffer);
&lt;/span&gt;&lt;span&gt;1345&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1346&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; array &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1347&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1348&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1349&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; parse_array(item, input_buffer);
&lt;/span&gt;&lt;span&gt;1350&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1351&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; object &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1352&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1353&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1354&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; parse_object(item, input_buffer);
&lt;/span&gt;&lt;span&gt;1355&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1356&lt;/span&gt; 
&lt;span&gt;1357&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1358&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1359&lt;/span&gt; 
&lt;span&gt;1360&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Render a value to text. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1361&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_value(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer)
&lt;/span&gt;&lt;span&gt;1362&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1363&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1364&lt;/span&gt; 
&lt;span&gt;1365&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((item == NULL) || (output_buffer ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;1366&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1367&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1368&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1369&lt;/span&gt; 
&lt;span&gt;1370&lt;/span&gt;     &lt;span&gt;switch&lt;/span&gt; ((item-&amp;gt;type) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1371&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1372&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_NULL:
&lt;/span&gt;&lt;span&gt;1373&lt;/span&gt;             output = ensure(output_buffer, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1374&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (output ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1375&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1376&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1377&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1378&lt;/span&gt;             strcpy((&lt;span&gt;char&lt;/span&gt;*)output, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1379&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1380&lt;/span&gt; 
&lt;span&gt;1381&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_False:
&lt;/span&gt;&lt;span&gt;1382&lt;/span&gt;             output = ensure(output_buffer, &lt;span&gt;6&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1383&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (output ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1384&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1385&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1386&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1387&lt;/span&gt;             strcpy((&lt;span&gt;char&lt;/span&gt;*)output, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1388&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1389&lt;/span&gt; 
&lt;span&gt;1390&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_True:
&lt;/span&gt;&lt;span&gt;1391&lt;/span&gt;             output = ensure(output_buffer, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1392&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (output ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1393&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1394&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1395&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1396&lt;/span&gt;             strcpy((&lt;span&gt;char&lt;/span&gt;*)output, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1397&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1398&lt;/span&gt; 
&lt;span&gt;1399&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Number:
&lt;/span&gt;&lt;span&gt;1400&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; print_number(item, output_buffer);
&lt;/span&gt;&lt;span&gt;1401&lt;/span&gt; 
&lt;span&gt;1402&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Raw:
&lt;/span&gt;&lt;span&gt;1403&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1404&lt;/span&gt;             size_t raw_length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1405&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (item-&amp;gt;valuestring ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1406&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1407&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1408&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1409&lt;/span&gt; 
&lt;span&gt;1410&lt;/span&gt;             raw_length = strlen(item-&amp;gt;valuestring) + &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1411&lt;/span&gt;             output =&lt;span&gt; ensure(output_buffer, raw_length);
&lt;/span&gt;&lt;span&gt;1412&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (output ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1413&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1414&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1415&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1416&lt;/span&gt;             memcpy(output, item-&amp;gt;&lt;span&gt;valuestring, raw_length);
&lt;/span&gt;&lt;span&gt;1417&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1418&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1419&lt;/span&gt; 
&lt;span&gt;1420&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_String:
&lt;/span&gt;&lt;span&gt;1421&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; print_string(item, output_buffer);
&lt;/span&gt;&lt;span&gt;1422&lt;/span&gt; 
&lt;span&gt;1423&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Array:
&lt;/span&gt;&lt;span&gt;1424&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; print_array(item, output_buffer);
&lt;/span&gt;&lt;span&gt;1425&lt;/span&gt; 
&lt;span&gt;1426&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Object:
&lt;/span&gt;&lt;span&gt;1427&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; print_object(item, output_buffer);
&lt;/span&gt;&lt;span&gt;1428&lt;/span&gt; 
&lt;span&gt;1429&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;1430&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1431&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1432&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1433&lt;/span&gt; 
&lt;span&gt;1434&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Build an array from input text. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1435&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_array(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer)
&lt;/span&gt;&lt;span&gt;1436&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1437&lt;/span&gt;     cJSON *head = NULL; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; head of the linked list &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1438&lt;/span&gt;     cJSON *current_item =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1439&lt;/span&gt; 
&lt;span&gt;1440&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (input_buffer-&amp;gt;depth &amp;gt;=&lt;span&gt; CJSON_NESTING_LIMIT)
&lt;/span&gt;&lt;span&gt;1441&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1442&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; to deeply nested &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1443&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1444&lt;/span&gt;     input_buffer-&amp;gt;depth++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1445&lt;/span&gt; 
&lt;span&gt;1446&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1447&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1448&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; not an array &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1449&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1450&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1451&lt;/span&gt; 
&lt;span&gt;1452&lt;/span&gt;     input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1453&lt;/span&gt; &lt;span&gt;    buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1454&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1455&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1456&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; empty array &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1457&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; success;
&lt;/span&gt;&lt;span&gt;1458&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1459&lt;/span&gt; 
&lt;span&gt;1460&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check if we skipped to the end of the buffer &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1461&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (cannot_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1462&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1463&lt;/span&gt;         input_buffer-&amp;gt;offset--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1464&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1465&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1466&lt;/span&gt; 
&lt;span&gt;1467&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; step back to character in front of the first element &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1468&lt;/span&gt;     input_buffer-&amp;gt;offset--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1469&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; loop through the comma separated array elements &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1470&lt;/span&gt;     &lt;span&gt;do&lt;/span&gt;
&lt;span&gt;1471&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1472&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; allocate next item &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1473&lt;/span&gt;         cJSON *new_item = cJSON_New_Item(&amp;amp;(input_buffer-&amp;gt;&lt;span&gt;hooks));
&lt;/span&gt;&lt;span&gt;1474&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (new_item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1475&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1476&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; allocation failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1477&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1478&lt;/span&gt; 
&lt;span&gt;1479&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; attach next item to list &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1480&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (head ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1481&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1482&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; start the linked list &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1483&lt;/span&gt;             current_item = head =&lt;span&gt; new_item;
&lt;/span&gt;&lt;span&gt;1484&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1485&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;1486&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1487&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; add to the end and advance &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1488&lt;/span&gt;             current_item-&amp;gt;next =&lt;span&gt; new_item;
&lt;/span&gt;&lt;span&gt;1489&lt;/span&gt;             new_item-&amp;gt;prev =&lt;span&gt; current_item;
&lt;/span&gt;&lt;span&gt;1490&lt;/span&gt;             current_item =&lt;span&gt; new_item;
&lt;/span&gt;&lt;span&gt;1491&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1492&lt;/span&gt; 
&lt;span&gt;1493&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse next value &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1494&lt;/span&gt;         input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1495&lt;/span&gt; &lt;span&gt;        buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1496&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;parse_value(current_item, input_buffer))
&lt;/span&gt;&lt;span&gt;1497&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1498&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; failed to parse value &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1499&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt; &lt;span&gt;        buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1501&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1502&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;1503&lt;/span&gt; 
&lt;span&gt;1504&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (cannot_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) || buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1505&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1506&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; expected end of array &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1507&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1508&lt;/span&gt; 
&lt;span&gt;1509&lt;/span&gt; &lt;span&gt;success:
&lt;/span&gt;&lt;span&gt;1510&lt;/span&gt;     input_buffer-&amp;gt;depth--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1511&lt;/span&gt; 
&lt;span&gt;1512&lt;/span&gt;     item-&amp;gt;type =&lt;span&gt; cJSON_Array;
&lt;/span&gt;&lt;span&gt;1513&lt;/span&gt;     item-&amp;gt;child =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;1514&lt;/span&gt; 
&lt;span&gt;1515&lt;/span&gt;     input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1516&lt;/span&gt; 
&lt;span&gt;1517&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1518&lt;/span&gt; 
&lt;span&gt;1519&lt;/span&gt; &lt;span&gt;fail:
&lt;/span&gt;&lt;span&gt;1520&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (head !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1521&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1522&lt;/span&gt; &lt;span&gt;        cJSON_Delete(head);
&lt;/span&gt;&lt;span&gt;1523&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1524&lt;/span&gt; 
&lt;span&gt;1525&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1526&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1527&lt;/span&gt; 
&lt;span&gt;1528&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Render an array to text &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1529&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_array(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer)
&lt;/span&gt;&lt;span&gt;1530&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1531&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output_pointer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1532&lt;/span&gt;     size_t length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1533&lt;/span&gt;     cJSON *current_element = item-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;1534&lt;/span&gt; 
&lt;span&gt;1535&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_buffer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1536&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1537&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1538&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1539&lt;/span&gt; 
&lt;span&gt;1540&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Compose the output array. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1541&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; opening square bracket &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1542&lt;/span&gt;     output_pointer = ensure(output_buffer, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1543&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1544&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1545&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1546&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1547&lt;/span&gt; 
&lt;span&gt;1548&lt;/span&gt;     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1549&lt;/span&gt;     output_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1550&lt;/span&gt;     output_buffer-&amp;gt;depth++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1551&lt;/span&gt; 
&lt;span&gt;1552&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (current_element !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1553&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1554&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;print_value(current_element, output_buffer))
&lt;/span&gt;&lt;span&gt;1555&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1556&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1557&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1558&lt;/span&gt; &lt;span&gt;        update_offset(output_buffer);
&lt;/span&gt;&lt;span&gt;1559&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (current_element-&amp;gt;&lt;span&gt;next)
&lt;/span&gt;&lt;span&gt;1560&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1561&lt;/span&gt;             length = (size_t) (output_buffer-&amp;gt;format ? &lt;span&gt;2&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1562&lt;/span&gt;             output_pointer = ensure(output_buffer, length + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1563&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1564&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1565&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1566&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1567&lt;/span&gt;             *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1568&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(output_buffer-&amp;gt;&lt;span&gt;format)
&lt;/span&gt;&lt;span&gt;1569&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1570&lt;/span&gt;                 *output_pointer++ = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1571&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1572&lt;/span&gt;             *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1573&lt;/span&gt;             output_buffer-&amp;gt;offset +=&lt;span&gt; length;
&lt;/span&gt;&lt;span&gt;1574&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1575&lt;/span&gt;         current_element = current_element-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;1576&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1577&lt;/span&gt; 
&lt;span&gt;1578&lt;/span&gt;     output_pointer = ensure(output_buffer, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1579&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1580&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1581&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1582&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1583&lt;/span&gt;     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1584&lt;/span&gt;     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1585&lt;/span&gt;     output_buffer-&amp;gt;depth--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1586&lt;/span&gt; 
&lt;span&gt;1587&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1588&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1589&lt;/span&gt; 
&lt;span&gt;1590&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Build an object from the text. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1591&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool parse_object(cJSON * &lt;span&gt;const&lt;/span&gt; item, parse_buffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; input_buffer)
&lt;/span&gt;&lt;span&gt;1592&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1593&lt;/span&gt;     cJSON *head = NULL; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; linked list head &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1594&lt;/span&gt;     cJSON *current_item =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1595&lt;/span&gt; 
&lt;span&gt;1596&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (input_buffer-&amp;gt;depth &amp;gt;=&lt;span&gt; CJSON_NESTING_LIMIT)
&lt;/span&gt;&lt;span&gt;1597&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1598&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; to deeply nested &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1599&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1600&lt;/span&gt;     input_buffer-&amp;gt;depth++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1601&lt;/span&gt; 
&lt;span&gt;1602&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (cannot_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) || (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1603&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1604&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; not an object &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1605&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1606&lt;/span&gt; 
&lt;span&gt;1607&lt;/span&gt;     input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1608&lt;/span&gt; &lt;span&gt;    buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1609&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1610&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1611&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt; success; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; empty object &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1612&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1613&lt;/span&gt; 
&lt;span&gt;1614&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check if we skipped to the end of the buffer &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1615&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (cannot_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1616&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1617&lt;/span&gt;         input_buffer-&amp;gt;offset--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1618&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;1619&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1620&lt;/span&gt; 
&lt;span&gt;1621&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; step back to character in front of the first element &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1622&lt;/span&gt;     input_buffer-&amp;gt;offset--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1623&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; loop through the comma separated array elements &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1624&lt;/span&gt;     &lt;span&gt;do&lt;/span&gt;
&lt;span&gt;1625&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1626&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; allocate next item &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1627&lt;/span&gt;         cJSON *new_item = cJSON_New_Item(&amp;amp;(input_buffer-&amp;gt;&lt;span&gt;hooks));
&lt;/span&gt;&lt;span&gt;1628&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (new_item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1629&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1630&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; allocation failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1631&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1632&lt;/span&gt; 
&lt;span&gt;1633&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; attach next item to list &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1634&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (head ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1635&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1636&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; start the linked list &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1637&lt;/span&gt;             current_item = head =&lt;span&gt; new_item;
&lt;/span&gt;&lt;span&gt;1638&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1639&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;1640&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1641&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; add to the end and advance &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1642&lt;/span&gt;             current_item-&amp;gt;next =&lt;span&gt; new_item;
&lt;/span&gt;&lt;span&gt;1643&lt;/span&gt;             new_item-&amp;gt;prev =&lt;span&gt; current_item;
&lt;/span&gt;&lt;span&gt;1644&lt;/span&gt;             current_item =&lt;span&gt; new_item;
&lt;/span&gt;&lt;span&gt;1645&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1646&lt;/span&gt; 
&lt;span&gt;1647&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse the name of the child &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1648&lt;/span&gt;         input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1649&lt;/span&gt; &lt;span&gt;        buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1650&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;parse_string(current_item, input_buffer))
&lt;/span&gt;&lt;span&gt;1651&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1652&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; failed to parse name &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1653&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1654&lt;/span&gt; &lt;span&gt;        buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1655&lt;/span&gt; 
&lt;span&gt;1656&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; swap valuestring and string, because we parsed the name &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1657&lt;/span&gt;         current_item-&amp;gt;&lt;span&gt;string&lt;/span&gt; = current_item-&amp;gt;&lt;span&gt;valuestring;
&lt;/span&gt;&lt;span&gt;1658&lt;/span&gt;         current_item-&amp;gt;valuestring =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1659&lt;/span&gt; 
&lt;span&gt;1660&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (cannot_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) || (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1661&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1662&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; invalid object &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1663&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1664&lt;/span&gt; 
&lt;span&gt;1665&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; parse the value &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1666&lt;/span&gt;         input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1667&lt;/span&gt; &lt;span&gt;        buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1668&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;parse_value(current_item, input_buffer))
&lt;/span&gt;&lt;span&gt;1669&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1670&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; failed to parse value &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1671&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1672&lt;/span&gt; &lt;span&gt;        buffer_skip_whitespace(input_buffer);
&lt;/span&gt;&lt;span&gt;1673&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1674&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (can_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;1675&lt;/span&gt; 
&lt;span&gt;1676&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (cannot_access_at_index(input_buffer, &lt;span&gt;0&lt;/span&gt;) || (buffer_at_offset(input_buffer)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1677&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1678&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt; fail; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; expected end of object &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1679&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1680&lt;/span&gt; 
&lt;span&gt;1681&lt;/span&gt; &lt;span&gt;success:
&lt;/span&gt;&lt;span&gt;1682&lt;/span&gt;     input_buffer-&amp;gt;depth--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1683&lt;/span&gt; 
&lt;span&gt;1684&lt;/span&gt;     item-&amp;gt;type =&lt;span&gt; cJSON_Object;
&lt;/span&gt;&lt;span&gt;1685&lt;/span&gt;     item-&amp;gt;child =&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;1686&lt;/span&gt; 
&lt;span&gt;1687&lt;/span&gt;     input_buffer-&amp;gt;offset++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1688&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1689&lt;/span&gt; 
&lt;span&gt;1690&lt;/span&gt; &lt;span&gt;fail:
&lt;/span&gt;&lt;span&gt;1691&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (head !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1692&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1693&lt;/span&gt; &lt;span&gt;        cJSON_Delete(head);
&lt;/span&gt;&lt;span&gt;1694&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1695&lt;/span&gt; 
&lt;span&gt;1696&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1697&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1698&lt;/span&gt; 
&lt;span&gt;1699&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Render an object to text. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1700&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool print_object(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; item, printbuffer * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; output_buffer)
&lt;/span&gt;&lt;span&gt;1701&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1702&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; *output_pointer =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1703&lt;/span&gt;     size_t length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1704&lt;/span&gt;     cJSON *current_item = item-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;1705&lt;/span&gt; 
&lt;span&gt;1706&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_buffer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1707&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1708&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1710&lt;/span&gt; 
&lt;span&gt;1711&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Compose the output: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1712&lt;/span&gt;     length = (size_t) (output_buffer-&amp;gt;format ? &lt;span&gt;2&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;); &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; fmt: {\n &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1713&lt;/span&gt;     output_pointer = ensure(output_buffer, length + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1714&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1715&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1716&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1717&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1718&lt;/span&gt; 
&lt;span&gt;1719&lt;/span&gt;     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1720&lt;/span&gt;     output_buffer-&amp;gt;depth++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1721&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_buffer-&amp;gt;&lt;span&gt;format)
&lt;/span&gt;&lt;span&gt;1722&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1723&lt;/span&gt;         *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1724&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1725&lt;/span&gt;     output_buffer-&amp;gt;offset +=&lt;span&gt; length;
&lt;/span&gt;&lt;span&gt;1726&lt;/span&gt; 
&lt;span&gt;1727&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (current_item)
&lt;/span&gt;&lt;span&gt;1728&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1729&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (output_buffer-&amp;gt;&lt;span&gt;format)
&lt;/span&gt;&lt;span&gt;1730&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1731&lt;/span&gt; &lt;span&gt;            size_t i;
&lt;/span&gt;&lt;span&gt;1732&lt;/span&gt;             output_pointer = ensure(output_buffer, output_buffer-&amp;gt;&lt;span&gt;depth);
&lt;/span&gt;&lt;span&gt;1733&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1734&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1735&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1736&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1737&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; output_buffer-&amp;gt;depth; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1738&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1739&lt;/span&gt;                 *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1740&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1741&lt;/span&gt;             output_buffer-&amp;gt;offset += output_buffer-&amp;gt;&lt;span&gt;depth;
&lt;/span&gt;&lt;span&gt;1742&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1743&lt;/span&gt; 
&lt;span&gt;1744&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; print key &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1745&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!print_string_ptr((unsigned &lt;span&gt;char&lt;/span&gt;*)current_item-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;, output_buffer))
&lt;/span&gt;&lt;span&gt;1746&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1747&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1748&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1749&lt;/span&gt; &lt;span&gt;        update_offset(output_buffer);
&lt;/span&gt;&lt;span&gt;1750&lt;/span&gt; 
&lt;span&gt;1751&lt;/span&gt;         length = (size_t) (output_buffer-&amp;gt;format ? &lt;span&gt;2&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1752&lt;/span&gt;         output_pointer =&lt;span&gt; ensure(output_buffer, length);
&lt;/span&gt;&lt;span&gt;1753&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1754&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1755&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1756&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1757&lt;/span&gt;         *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1758&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (output_buffer-&amp;gt;&lt;span&gt;format)
&lt;/span&gt;&lt;span&gt;1759&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1760&lt;/span&gt;             *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1761&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1762&lt;/span&gt;         output_buffer-&amp;gt;offset +=&lt;span&gt; length;
&lt;/span&gt;&lt;span&gt;1763&lt;/span&gt; 
&lt;span&gt;1764&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; print value &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1765&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;print_value(current_item, output_buffer))
&lt;/span&gt;&lt;span&gt;1766&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1767&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1768&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1769&lt;/span&gt; &lt;span&gt;        update_offset(output_buffer);
&lt;/span&gt;&lt;span&gt;1770&lt;/span&gt; 
&lt;span&gt;1771&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; print comma if not last &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1772&lt;/span&gt;         length = ((size_t)(output_buffer-&amp;gt;format ? &lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;) + (size_t)(current_item-&amp;gt;next ? &lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;1773&lt;/span&gt;         output_pointer = ensure(output_buffer, length + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1774&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1775&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1776&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1777&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1778&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (current_item-&amp;gt;&lt;span&gt;next)
&lt;/span&gt;&lt;span&gt;1779&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1780&lt;/span&gt;             *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1781&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1782&lt;/span&gt; 
&lt;span&gt;1783&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (output_buffer-&amp;gt;&lt;span&gt;format)
&lt;/span&gt;&lt;span&gt;1784&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1785&lt;/span&gt;             *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1786&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1787&lt;/span&gt;         *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1788&lt;/span&gt;         output_buffer-&amp;gt;offset +=&lt;span&gt; length;
&lt;/span&gt;&lt;span&gt;1789&lt;/span&gt; 
&lt;span&gt;1790&lt;/span&gt;         current_item = current_item-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;1791&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1792&lt;/span&gt; 
&lt;span&gt;1793&lt;/span&gt;     output_pointer = ensure(output_buffer, output_buffer-&amp;gt;format ? (output_buffer-&amp;gt;depth + &lt;span&gt;1&lt;/span&gt;) : &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1794&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_pointer ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1795&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1796&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1797&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1798&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (output_buffer-&amp;gt;&lt;span&gt;format)
&lt;/span&gt;&lt;span&gt;1799&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1800&lt;/span&gt; &lt;span&gt;        size_t i;
&lt;/span&gt;&lt;span&gt;1801&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; (output_buffer-&amp;gt;depth - &lt;span&gt;1&lt;/span&gt;); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1802&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1803&lt;/span&gt;             *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1804&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1805&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1806&lt;/span&gt;     *output_pointer++ = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1807&lt;/span&gt;     *output_pointer = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1808&lt;/span&gt;     output_buffer-&amp;gt;depth--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt; 
&lt;span&gt;1810&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1811&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1812&lt;/span&gt; 
&lt;span&gt;1813&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Get Array size/item / object item. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1814&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;int&lt;/span&gt;) cJSON_GetArraySize(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;array)
&lt;/span&gt;&lt;span&gt;1815&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1816&lt;/span&gt;     cJSON *child =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1817&lt;/span&gt;     size_t size = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1818&lt;/span&gt; 
&lt;span&gt;1819&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (array ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1820&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1821&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1822&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1823&lt;/span&gt; 
&lt;span&gt;1824&lt;/span&gt;     child = array-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;1825&lt;/span&gt; 
&lt;span&gt;1826&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(child !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1827&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1828&lt;/span&gt;         size++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1829&lt;/span&gt;         child = child-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;1830&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1831&lt;/span&gt; 
&lt;span&gt;1832&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; FIXME: Can overflow here. Cannot be fixed without breaking the API &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1833&lt;/span&gt; 
&lt;span&gt;1834&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)size;
&lt;/span&gt;&lt;span&gt;1835&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1836&lt;/span&gt; 
&lt;span&gt;1837&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON* get_array_item(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;array, size_t index)
&lt;/span&gt;&lt;span&gt;1838&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1839&lt;/span&gt;     cJSON *current_child =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1840&lt;/span&gt; 
&lt;span&gt;1841&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (array ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1842&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1843&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1844&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1845&lt;/span&gt; 
&lt;span&gt;1846&lt;/span&gt;     current_child = array-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;1847&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; ((current_child != NULL) &amp;amp;&amp;amp; (index &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1848&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1849&lt;/span&gt;         index--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1850&lt;/span&gt;         current_child = current_child-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;1851&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1852&lt;/span&gt; 
&lt;span&gt;1853&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; current_child;
&lt;/span&gt;&lt;span&gt;1854&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1855&lt;/span&gt; 
&lt;span&gt;1856&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(&lt;span&gt;const&lt;/span&gt; cJSON *array, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; index)
&lt;/span&gt;&lt;span&gt;1857&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1858&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (index &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1859&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1860&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1861&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1862&lt;/span&gt; 
&lt;span&gt;1863&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; get_array_item(array, (size_t)index);
&lt;/span&gt;&lt;span&gt;1864&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1865&lt;/span&gt; 
&lt;span&gt;1866&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON *get_object_item(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; name, &lt;span&gt;const&lt;/span&gt;&lt;span&gt; cJSON_bool case_sensitive)
&lt;/span&gt;&lt;span&gt;1867&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1868&lt;/span&gt;     cJSON *current_element =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1869&lt;/span&gt; 
&lt;span&gt;1870&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;object&lt;/span&gt; == NULL) || (name ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;1871&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1872&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1873&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1874&lt;/span&gt; 
&lt;span&gt;1875&lt;/span&gt;     current_element = &lt;span&gt;object&lt;/span&gt;-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;1876&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (case_sensitive)
&lt;/span&gt;&lt;span&gt;1877&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1878&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; ((current_element != NULL) &amp;amp;&amp;amp; (current_element-&amp;gt;&lt;span&gt;string&lt;/span&gt; != NULL) &amp;amp;&amp;amp; (strcmp(name, current_element-&amp;gt;&lt;span&gt;string&lt;/span&gt;) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1879&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1880&lt;/span&gt;             current_element = current_element-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;1881&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1882&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1883&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;1884&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1885&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; ((current_element != NULL) &amp;amp;&amp;amp; (case_insensitive_strcmp((&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*)name, (&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*)(current_element-&amp;gt;&lt;span&gt;string&lt;/span&gt;)) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;1886&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1887&lt;/span&gt;             current_element = current_element-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;1888&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1889&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1890&lt;/span&gt; 
&lt;span&gt;1891&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((current_element == NULL) || (current_element-&amp;gt;&lt;span&gt;string&lt;/span&gt; ==&lt;span&gt; NULL)) {
&lt;/span&gt;&lt;span&gt;1892&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1893&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1894&lt;/span&gt; 
&lt;span&gt;1895&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; current_element;
&lt;/span&gt;&lt;span&gt;1896&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1897&lt;/span&gt; 
&lt;span&gt;1898&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1899&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1900&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; get_object_item(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1901&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1902&lt;/span&gt; 
&lt;span&gt;1903&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1904&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1905&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; get_object_item(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;1906&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1907&lt;/span&gt; 
&lt;span&gt;1908&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1909&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1910&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; cJSON_GetObjectItem(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;) ? &lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1911&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1912&lt;/span&gt; 
&lt;span&gt;1913&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Utility for array list handling. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1914&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; suffix_object(cJSON *prev, cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;1915&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1916&lt;/span&gt;     prev-&amp;gt;next =&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;1917&lt;/span&gt;     item-&amp;gt;prev =&lt;span&gt; prev;
&lt;/span&gt;&lt;span&gt;1918&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1919&lt;/span&gt; 
&lt;span&gt;1920&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Utility for handling references. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1921&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON *create_reference(&lt;span&gt;const&lt;/span&gt; cJSON *item, &lt;span&gt;const&lt;/span&gt; internal_hooks * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; hooks)
&lt;/span&gt;&lt;span&gt;1922&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1923&lt;/span&gt;     cJSON *reference =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1924&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1925&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1926&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1927&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1928&lt;/span&gt; 
&lt;span&gt;1929&lt;/span&gt;     reference =&lt;span&gt; cJSON_New_Item(hooks);
&lt;/span&gt;&lt;span&gt;1930&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (reference ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1931&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1932&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1933&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1934&lt;/span&gt; 
&lt;span&gt;1935&lt;/span&gt;     memcpy(reference, item, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cJSON));
&lt;/span&gt;&lt;span&gt;1936&lt;/span&gt;     reference-&amp;gt;&lt;span&gt;string&lt;/span&gt; =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1937&lt;/span&gt;     reference-&amp;gt;type |=&lt;span&gt; cJSON_IsReference;
&lt;/span&gt;&lt;span&gt;1938&lt;/span&gt;     reference-&amp;gt;next = reference-&amp;gt;prev =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1939&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; reference;
&lt;/span&gt;&lt;span&gt;1940&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1941&lt;/span&gt; 
&lt;span&gt;1942&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool add_item_to_array(cJSON *array, cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;1943&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1944&lt;/span&gt;     cJSON *child =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1945&lt;/span&gt; 
&lt;span&gt;1946&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((item == NULL) || (array == NULL) || (array ==&lt;span&gt; item))
&lt;/span&gt;&lt;span&gt;1947&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1948&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1949&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1950&lt;/span&gt; 
&lt;span&gt;1951&lt;/span&gt;     child = array-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;1952&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;1953&lt;/span&gt; &lt;span&gt;     * To find the last item in array quickly, we use prev in array
&lt;/span&gt;&lt;span&gt;1954&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1955&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (child ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;1956&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1957&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; list is empty, start new one &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1958&lt;/span&gt;         array-&amp;gt;child =&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;1959&lt;/span&gt;         item-&amp;gt;prev =&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;1960&lt;/span&gt;         item-&amp;gt;next =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;1961&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1962&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;1963&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;1964&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; append to the end &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1965&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (child-&amp;gt;&lt;span&gt;prev)
&lt;/span&gt;&lt;span&gt;1966&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1967&lt;/span&gt;             suffix_object(child-&amp;gt;&lt;span&gt;prev, item);
&lt;/span&gt;&lt;span&gt;1968&lt;/span&gt;             array-&amp;gt;child-&amp;gt;prev =&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;1969&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1970&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;1971&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;1972&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (child-&amp;gt;&lt;span&gt;next)
&lt;/span&gt;&lt;span&gt;1973&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;1974&lt;/span&gt;                 child = child-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;1975&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;1976&lt;/span&gt; &lt;span&gt;            suffix_object(child, item);
&lt;/span&gt;&lt;span&gt;1977&lt;/span&gt;             array-&amp;gt;child-&amp;gt;prev =&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;1978&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;1979&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;1980&lt;/span&gt; 
&lt;span&gt;1981&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;1982&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1983&lt;/span&gt; 
&lt;span&gt;1984&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Add item to array/object. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1985&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;1986&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1987&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; add_item_to_array(array, item);
&lt;/span&gt;&lt;span&gt;1988&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;1989&lt;/span&gt; 
&lt;span&gt;1990&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; defined(__clang__) || (defined(__GNUC__)  &amp;amp;&amp;amp; ((__GNUC__ &amp;gt; 4) || ((__GNUC__ == 4) &amp;amp;&amp;amp; (__GNUC_MINOR__ &amp;gt; 5))))
&lt;span&gt;1991&lt;/span&gt;     &lt;span&gt;#pragma&lt;/span&gt; GCC diagnostic push
&lt;span&gt;1992&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;1993&lt;/span&gt; &lt;span&gt;#ifdef __GNUC__
&lt;/span&gt;&lt;span&gt;1994&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; GCC diagnostic ignored &quot;-Wcast-qual&quot;
&lt;span&gt;1995&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;1996&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; helper function to cast away const &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;1997&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;* cast_away_const(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;* &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;1998&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;1999&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;void&lt;/span&gt;*)&lt;span&gt;string&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2000&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2001&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; defined(__clang__) || (defined(__GNUC__)  &amp;amp;&amp;amp; ((__GNUC__ &amp;gt; 4) || ((__GNUC__ == 4) &amp;amp;&amp;amp; (__GNUC_MINOR__ &amp;gt; 5))))
&lt;span&gt;2002&lt;/span&gt;     &lt;span&gt;#pragma&lt;/span&gt; GCC diagnostic pop
&lt;span&gt;2003&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;2004&lt;/span&gt; 
&lt;span&gt;2005&lt;/span&gt; 
&lt;span&gt;2006&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool add_item_to_object(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;, cJSON * &lt;span&gt;const&lt;/span&gt; item, &lt;span&gt;const&lt;/span&gt; internal_hooks * &lt;span&gt;const&lt;/span&gt; hooks, &lt;span&gt;const&lt;/span&gt;&lt;span&gt; cJSON_bool constant_key)
&lt;/span&gt;&lt;span&gt;2007&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2008&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; *new_key =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2009&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; new_type =&lt;span&gt; cJSON_Invalid;
&lt;/span&gt;&lt;span&gt;2010&lt;/span&gt; 
&lt;span&gt;2011&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;object&lt;/span&gt; == NULL) || (&lt;span&gt;string&lt;/span&gt; == NULL) || (item == NULL) || (&lt;span&gt;object&lt;/span&gt; ==&lt;span&gt; item))
&lt;/span&gt;&lt;span&gt;2012&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2013&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2014&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2015&lt;/span&gt; 
&lt;span&gt;2016&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (constant_key)
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;         new_key = (&lt;span&gt;char&lt;/span&gt;*)cast_away_const(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;         new_type = item-&amp;gt;type |&lt;span&gt; cJSON_StringIsConst;
&lt;/span&gt;&lt;span&gt;2020&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2022&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2023&lt;/span&gt;         new_key = (&lt;span&gt;char&lt;/span&gt;*)cJSON_strdup((&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*)&lt;span&gt;string&lt;/span&gt;&lt;span&gt;, hooks);
&lt;/span&gt;&lt;span&gt;2024&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (new_key ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2025&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2026&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2027&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2028&lt;/span&gt; 
&lt;span&gt;2029&lt;/span&gt;         new_type = item-&amp;gt;type &amp;amp; ~&lt;span&gt;cJSON_StringIsConst;
&lt;/span&gt;&lt;span&gt;2030&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2031&lt;/span&gt; 
&lt;span&gt;2032&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!(item-&amp;gt;type &amp;amp; cJSON_StringIsConst) &amp;amp;&amp;amp; (item-&amp;gt;&lt;span&gt;string&lt;/span&gt; !=&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2033&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2034&lt;/span&gt;         hooks-&amp;gt;deallocate(item-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2035&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2036&lt;/span&gt; 
&lt;span&gt;2037&lt;/span&gt;     item-&amp;gt;&lt;span&gt;string&lt;/span&gt; =&lt;span&gt; new_key;
&lt;/span&gt;&lt;span&gt;2038&lt;/span&gt;     item-&amp;gt;type =&lt;span&gt; new_type;
&lt;/span&gt;&lt;span&gt;2039&lt;/span&gt; 
&lt;span&gt;2040&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; add_item_to_array(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;, item);
&lt;/span&gt;&lt;span&gt;2041&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2042&lt;/span&gt; 
&lt;span&gt;2043&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;, cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;2044&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2045&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; add_item_to_object(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2046&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2047&lt;/span&gt; 
&lt;span&gt;2048&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Add an item to an object with constant string as key &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2049&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;, cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;2050&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2051&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; add_item_to_object(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, item, &amp;amp;global_hooks, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2052&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2053&lt;/span&gt; 
&lt;span&gt;2054&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;2055&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2056&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (array ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2057&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2058&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2059&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2060&lt;/span&gt; 
&lt;span&gt;2061&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; add_item_to_array(array, create_reference(item, &amp;amp;&lt;span&gt;global_hooks));
&lt;/span&gt;&lt;span&gt;2062&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2063&lt;/span&gt; 
&lt;span&gt;2064&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;, cJSON *&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;2065&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2066&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;object&lt;/span&gt; == NULL) || (&lt;span&gt;string&lt;/span&gt; ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2067&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2068&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2069&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2070&lt;/span&gt; 
&lt;span&gt;2071&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; add_item_to_object(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, create_reference(item, &amp;amp;global_hooks), &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2072&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2073&lt;/span&gt; 
&lt;span&gt;2074&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt;2075&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2076&lt;/span&gt;     cJSON *&lt;span&gt;null&lt;/span&gt; =&lt;span&gt; cJSON_CreateNull();
&lt;/span&gt;&lt;span&gt;2077&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, &lt;span&gt;null&lt;/span&gt;, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2078&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2079&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2080&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2081&lt;/span&gt; 
&lt;span&gt;2082&lt;/span&gt;     cJSON_Delete(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2083&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2084&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2085&lt;/span&gt; 
&lt;span&gt;2086&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt;2087&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2088&lt;/span&gt;     cJSON *true_item =&lt;span&gt; cJSON_CreateTrue();
&lt;/span&gt;&lt;span&gt;2089&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, true_item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2090&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2091&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; true_item;
&lt;/span&gt;&lt;span&gt;2092&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2093&lt;/span&gt; 
&lt;span&gt;2094&lt;/span&gt; &lt;span&gt;    cJSON_Delete(true_item);
&lt;/span&gt;&lt;span&gt;2095&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2096&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2097&lt;/span&gt; 
&lt;span&gt;2098&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt;2099&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2100&lt;/span&gt;     cJSON *false_item =&lt;span&gt; cJSON_CreateFalse();
&lt;/span&gt;&lt;span&gt;2101&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, false_item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2102&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2103&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; false_item;
&lt;/span&gt;&lt;span&gt;2104&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2105&lt;/span&gt; 
&lt;span&gt;2106&lt;/span&gt; &lt;span&gt;    cJSON_Delete(false_item);
&lt;/span&gt;&lt;span&gt;2107&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2108&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2109&lt;/span&gt; 
&lt;span&gt;2110&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; name, &lt;span&gt;const&lt;/span&gt;&lt;span&gt; cJSON_bool boolean)
&lt;/span&gt;&lt;span&gt;2111&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2112&lt;/span&gt;     cJSON *bool_item =&lt;span&gt; cJSON_CreateBool(boolean);
&lt;/span&gt;&lt;span&gt;2113&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, bool_item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2114&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2115&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; bool_item;
&lt;/span&gt;&lt;span&gt;2116&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2117&lt;/span&gt; 
&lt;span&gt;2118&lt;/span&gt; &lt;span&gt;    cJSON_Delete(bool_item);
&lt;/span&gt;&lt;span&gt;2119&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2120&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2121&lt;/span&gt; 
&lt;span&gt;2122&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; name, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; number)
&lt;/span&gt;&lt;span&gt;2123&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2124&lt;/span&gt;     cJSON *number_item =&lt;span&gt; cJSON_CreateNumber(number);
&lt;/span&gt;&lt;span&gt;2125&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, number_item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2126&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2127&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; number_item;
&lt;/span&gt;&lt;span&gt;2128&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2129&lt;/span&gt; 
&lt;span&gt;2130&lt;/span&gt; &lt;span&gt;    cJSON_Delete(number_item);
&lt;/span&gt;&lt;span&gt;2131&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2132&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2133&lt;/span&gt; 
&lt;span&gt;2134&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; name, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2135&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2136&lt;/span&gt;     cJSON *string_item = cJSON_CreateString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2137&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, string_item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2138&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2139&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; string_item;
&lt;/span&gt;&lt;span&gt;2140&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2141&lt;/span&gt; 
&lt;span&gt;2142&lt;/span&gt; &lt;span&gt;    cJSON_Delete(string_item);
&lt;/span&gt;&lt;span&gt;2143&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2144&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2145&lt;/span&gt; 
&lt;span&gt;2146&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; name, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; raw)
&lt;/span&gt;&lt;span&gt;2147&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2148&lt;/span&gt;     cJSON *raw_item =&lt;span&gt; cJSON_CreateRaw(raw);
&lt;/span&gt;&lt;span&gt;2149&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, raw_item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2150&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2151&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; raw_item;
&lt;/span&gt;&lt;span&gt;2152&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2153&lt;/span&gt; 
&lt;span&gt;2154&lt;/span&gt; &lt;span&gt;    cJSON_Delete(raw_item);
&lt;/span&gt;&lt;span&gt;2155&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2156&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2157&lt;/span&gt; 
&lt;span&gt;2158&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt;2159&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2160&lt;/span&gt;     cJSON *object_item =&lt;span&gt; cJSON_CreateObject();
&lt;/span&gt;&lt;span&gt;2161&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, object_item, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2162&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2163&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; object_item;
&lt;/span&gt;&lt;span&gt;2164&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2165&lt;/span&gt; 
&lt;span&gt;2166&lt;/span&gt; &lt;span&gt;    cJSON_Delete(object_item);
&lt;/span&gt;&lt;span&gt;2167&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2168&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2169&lt;/span&gt; 
&lt;span&gt;2170&lt;/span&gt; CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * &lt;span&gt;const&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt;2171&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2172&lt;/span&gt;     cJSON *array =&lt;span&gt; cJSON_CreateArray();
&lt;/span&gt;&lt;span&gt;2173&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (add_item_to_object(&lt;span&gt;object&lt;/span&gt;, name, array, &amp;amp;global_hooks, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2174&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2175&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; array;
&lt;/span&gt;&lt;span&gt;2176&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2177&lt;/span&gt; 
&lt;span&gt;2178&lt;/span&gt; &lt;span&gt;    cJSON_Delete(array);
&lt;/span&gt;&lt;span&gt;2179&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2180&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2181&lt;/span&gt; 
&lt;span&gt;2182&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2183&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2184&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((parent == NULL) || (item ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2185&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2186&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2187&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2188&lt;/span&gt; 
&lt;span&gt;2189&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item != parent-&amp;gt;&lt;span&gt;child)
&lt;/span&gt;&lt;span&gt;2190&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2191&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; not the first element &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2192&lt;/span&gt;         item-&amp;gt;prev-&amp;gt;next = item-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;2193&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2194&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item-&amp;gt;next !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2195&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2196&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; not the last element &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2197&lt;/span&gt;         item-&amp;gt;next-&amp;gt;prev = item-&amp;gt;&lt;span&gt;prev;
&lt;/span&gt;&lt;span&gt;2198&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2199&lt;/span&gt; 
&lt;span&gt;2200&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item == parent-&amp;gt;&lt;span&gt;child)
&lt;/span&gt;&lt;span&gt;2201&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2202&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; first element &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2203&lt;/span&gt;         parent-&amp;gt;child = item-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;2204&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2205&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; make sure the detached item doesn't point anywhere anymore &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2206&lt;/span&gt;     item-&amp;gt;prev =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2207&lt;/span&gt;     item-&amp;gt;next =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2208&lt;/span&gt; 
&lt;span&gt;2209&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2210&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2211&lt;/span&gt; 
&lt;span&gt;2212&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; which)
&lt;/span&gt;&lt;span&gt;2213&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2214&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (which &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2215&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2216&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2217&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2218&lt;/span&gt; 
&lt;span&gt;2219&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cJSON_DetachItemViaPointer(array, get_array_item(array, (size_t)which));
&lt;/span&gt;&lt;span&gt;2220&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2221&lt;/span&gt; 
&lt;span&gt;2222&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt;) cJSON_DeleteItemFromArray(cJSON *array, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; which)
&lt;/span&gt;&lt;span&gt;2223&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2224&lt;/span&gt; &lt;span&gt;    cJSON_Delete(cJSON_DetachItemFromArray(array, which));
&lt;/span&gt;&lt;span&gt;2225&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2226&lt;/span&gt; 
&lt;span&gt;2227&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2228&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2229&lt;/span&gt;     cJSON *to_detach = cJSON_GetObjectItem(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2230&lt;/span&gt; 
&lt;span&gt;2231&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; cJSON_DetachItemViaPointer(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;, to_detach);
&lt;/span&gt;&lt;span&gt;2232&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2233&lt;/span&gt; 
&lt;span&gt;2234&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2235&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2236&lt;/span&gt;     cJSON *to_detach = cJSON_GetObjectItemCaseSensitive(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2237&lt;/span&gt; 
&lt;span&gt;2238&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; cJSON_DetachItemViaPointer(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;, to_detach);
&lt;/span&gt;&lt;span&gt;2239&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2240&lt;/span&gt; 
&lt;span&gt;2241&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt;) cJSON_DeleteItemFromObject(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2242&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2243&lt;/span&gt;     cJSON_Delete(cJSON_DetachItemFromObject(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;2244&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2245&lt;/span&gt; 
&lt;span&gt;2246&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt;) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2247&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2248&lt;/span&gt;     cJSON_Delete(cJSON_DetachItemFromObjectCaseSensitive(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;2249&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2250&lt;/span&gt; 
&lt;span&gt;2251&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Replace array/object items with new ones. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2252&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, &lt;span&gt;int&lt;/span&gt; which, cJSON *&lt;span&gt;newitem)
&lt;/span&gt;&lt;span&gt;2253&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2254&lt;/span&gt;     cJSON *after_inserted =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2255&lt;/span&gt; 
&lt;span&gt;2256&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (which &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2257&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2258&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2259&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2260&lt;/span&gt; 
&lt;span&gt;2261&lt;/span&gt;     after_inserted =&lt;span&gt; get_array_item(array, (size_t)which);
&lt;/span&gt;&lt;span&gt;2262&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (after_inserted ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2263&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2264&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; add_item_to_array(array, newitem);
&lt;/span&gt;&lt;span&gt;2265&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2266&lt;/span&gt; 
&lt;span&gt;2267&lt;/span&gt;     newitem-&amp;gt;next =&lt;span&gt; after_inserted;
&lt;/span&gt;&lt;span&gt;2268&lt;/span&gt;     newitem-&amp;gt;prev = after_inserted-&amp;gt;&lt;span&gt;prev;
&lt;/span&gt;&lt;span&gt;2269&lt;/span&gt;     after_inserted-&amp;gt;prev =&lt;span&gt; newitem;
&lt;/span&gt;&lt;span&gt;2270&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (after_inserted == array-&amp;gt;&lt;span&gt;child)
&lt;/span&gt;&lt;span&gt;2271&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2272&lt;/span&gt;         array-&amp;gt;child =&lt;span&gt; newitem;
&lt;/span&gt;&lt;span&gt;2273&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2274&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2275&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2276&lt;/span&gt;         newitem-&amp;gt;prev-&amp;gt;next =&lt;span&gt; newitem;
&lt;/span&gt;&lt;span&gt;2277&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2278&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2279&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2280&lt;/span&gt; 
&lt;span&gt;2281&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * &lt;span&gt;const&lt;/span&gt; parent, cJSON * &lt;span&gt;const&lt;/span&gt; item, cJSON *&lt;span&gt; replacement)
&lt;/span&gt;&lt;span&gt;2282&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2283&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((parent == NULL) || (replacement == NULL) || (item ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2284&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2285&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2286&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2287&lt;/span&gt; 
&lt;span&gt;2288&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (replacement ==&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2289&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2290&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2291&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2292&lt;/span&gt; 
&lt;span&gt;2293&lt;/span&gt;     replacement-&amp;gt;next = item-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;2294&lt;/span&gt;     replacement-&amp;gt;prev = item-&amp;gt;&lt;span&gt;prev;
&lt;/span&gt;&lt;span&gt;2295&lt;/span&gt; 
&lt;span&gt;2296&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (replacement-&amp;gt;next !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2297&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2298&lt;/span&gt;         replacement-&amp;gt;next-&amp;gt;prev =&lt;span&gt; replacement;
&lt;/span&gt;&lt;span&gt;2299&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2300&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (parent-&amp;gt;child ==&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2301&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2302&lt;/span&gt;         parent-&amp;gt;child =&lt;span&gt; replacement;
&lt;/span&gt;&lt;span&gt;2303&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2304&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2305&lt;/span&gt;     {   &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;2306&lt;/span&gt; &lt;span&gt;         * To find the last item in array quickly, we use prev in array.
&lt;/span&gt;&lt;span&gt;2307&lt;/span&gt; &lt;span&gt;         * We can't modify the last item's next pointer where this item was the parent's child
&lt;/span&gt;&lt;span&gt;2308&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2309&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (replacement-&amp;gt;prev !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2310&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2311&lt;/span&gt;             replacement-&amp;gt;prev-&amp;gt;next =&lt;span&gt; replacement;
&lt;/span&gt;&lt;span&gt;2312&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2313&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2314&lt;/span&gt; 
&lt;span&gt;2315&lt;/span&gt;     item-&amp;gt;next =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2316&lt;/span&gt;     item-&amp;gt;prev =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2317&lt;/span&gt; &lt;span&gt;    cJSON_Delete(item);
&lt;/span&gt;&lt;span&gt;2318&lt;/span&gt; 
&lt;span&gt;2319&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2320&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2321&lt;/span&gt; 
&lt;span&gt;2322&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, &lt;span&gt;int&lt;/span&gt; which, cJSON *&lt;span&gt;newitem)
&lt;/span&gt;&lt;span&gt;2323&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2324&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (which &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2325&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2326&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2327&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2328&lt;/span&gt; 
&lt;span&gt;2329&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cJSON_ReplaceItemViaPointer(array, get_array_item(array, (size_t)which), newitem);
&lt;/span&gt;&lt;span&gt;2330&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2331&lt;/span&gt; 
&lt;span&gt;2332&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; cJSON_bool replace_item_in_object(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;, cJSON *&lt;span&gt;replacement, cJSON_bool case_sensitive)
&lt;/span&gt;&lt;span&gt;2333&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2334&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((replacement == NULL) || (&lt;span&gt;string&lt;/span&gt; ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2335&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2336&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2337&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2338&lt;/span&gt; 
&lt;span&gt;2339&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; replace the name in the replacement &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2340&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!(replacement-&amp;gt;type &amp;amp; cJSON_StringIsConst) &amp;amp;&amp;amp; (replacement-&amp;gt;&lt;span&gt;string&lt;/span&gt; !=&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2341&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2342&lt;/span&gt;         cJSON_free(replacement-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2343&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2344&lt;/span&gt;     replacement-&amp;gt;&lt;span&gt;string&lt;/span&gt; = (&lt;span&gt;char&lt;/span&gt;*)cJSON_strdup((&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*)&lt;span&gt;string&lt;/span&gt;, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2345&lt;/span&gt;     replacement-&amp;gt;type &amp;amp;= ~&lt;span&gt;cJSON_StringIsConst;
&lt;/span&gt;&lt;span&gt;2346&lt;/span&gt; 
&lt;span&gt;2347&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; cJSON_ReplaceItemViaPointer(&lt;span&gt;object&lt;/span&gt;, get_object_item(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;, case_sensitive), replacement);
&lt;/span&gt;&lt;span&gt;2348&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2349&lt;/span&gt; 
&lt;span&gt;2350&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;, cJSON *&lt;span&gt;newitem)
&lt;/span&gt;&lt;span&gt;2351&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2352&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; replace_item_in_object(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, newitem, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2353&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2354&lt;/span&gt; 
&lt;span&gt;2355&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;, cJSON *&lt;span&gt;newitem)
&lt;/span&gt;&lt;span&gt;2356&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2357&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; replace_item_in_object(&lt;span&gt;object&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, newitem, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2358&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2359&lt;/span&gt; 
&lt;span&gt;2360&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Create basic types: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2361&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateNull(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2362&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2363&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2364&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2365&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2366&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_NULL;
&lt;/span&gt;&lt;span&gt;2367&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2368&lt;/span&gt; 
&lt;span&gt;2369&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2370&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2371&lt;/span&gt; 
&lt;span&gt;2372&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2373&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2374&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2375&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2376&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2377&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_True;
&lt;/span&gt;&lt;span&gt;2378&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2379&lt;/span&gt; 
&lt;span&gt;2380&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2381&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2382&lt;/span&gt; 
&lt;span&gt;2383&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2384&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2385&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2386&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2387&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2388&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_False;
&lt;/span&gt;&lt;span&gt;2389&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2390&lt;/span&gt; 
&lt;span&gt;2391&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2392&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2393&lt;/span&gt; 
&lt;span&gt;2394&lt;/span&gt; CJSON_PUBLIC(cJSON *&lt;span&gt;) cJSON_CreateBool(cJSON_bool boolean)
&lt;/span&gt;&lt;span&gt;2395&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2396&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2397&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2398&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2399&lt;/span&gt;         item-&amp;gt;type = boolean ?&lt;span&gt; cJSON_True : cJSON_False;
&lt;/span&gt;&lt;span&gt;2400&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2401&lt;/span&gt; 
&lt;span&gt;2402&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2403&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2404&lt;/span&gt; 
&lt;span&gt;2405&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; num)
&lt;/span&gt;&lt;span&gt;2406&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2407&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2408&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2409&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2410&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_Number;
&lt;/span&gt;&lt;span&gt;2411&lt;/span&gt;         item-&amp;gt;valuedouble =&lt;span&gt; num;
&lt;/span&gt;&lt;span&gt;2412&lt;/span&gt; 
&lt;span&gt;2413&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; use saturation in case of overflow &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2414&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (num &amp;gt;=&lt;span&gt; INT_MAX)
&lt;/span&gt;&lt;span&gt;2415&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2416&lt;/span&gt;             item-&amp;gt;valueint =&lt;span&gt; INT_MAX;
&lt;/span&gt;&lt;span&gt;2417&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2418&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (num &amp;lt;= (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)INT_MIN)
&lt;/span&gt;&lt;span&gt;2419&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2420&lt;/span&gt;             item-&amp;gt;valueint =&lt;span&gt; INT_MIN;
&lt;/span&gt;&lt;span&gt;2421&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2422&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2423&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2424&lt;/span&gt;             item-&amp;gt;valueint = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)num;
&lt;/span&gt;&lt;span&gt;2425&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2426&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2427&lt;/span&gt; 
&lt;span&gt;2428&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2429&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2430&lt;/span&gt; 
&lt;span&gt;2431&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateString(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2432&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2433&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2434&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2435&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2436&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_String;
&lt;/span&gt;&lt;span&gt;2437&lt;/span&gt;         item-&amp;gt;valuestring = (&lt;span&gt;char&lt;/span&gt;*)cJSON_strdup((&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*)&lt;span&gt;string&lt;/span&gt;, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2438&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!item-&amp;gt;&lt;span&gt;valuestring)
&lt;/span&gt;&lt;span&gt;2439&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2440&lt;/span&gt; &lt;span&gt;            cJSON_Delete(item);
&lt;/span&gt;&lt;span&gt;2441&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2442&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2443&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2444&lt;/span&gt; 
&lt;span&gt;2445&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2446&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2447&lt;/span&gt; 
&lt;span&gt;2448&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2449&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2450&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2451&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2452&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2453&lt;/span&gt;         item-&amp;gt;type = cJSON_String |&lt;span&gt; cJSON_IsReference;
&lt;/span&gt;&lt;span&gt;2454&lt;/span&gt;         item-&amp;gt;valuestring = (&lt;span&gt;char&lt;/span&gt;*)cast_away_const(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2455&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2456&lt;/span&gt; 
&lt;span&gt;2457&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2458&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2459&lt;/span&gt; 
&lt;span&gt;2460&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;child)
&lt;/span&gt;&lt;span&gt;2461&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2462&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2463&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item !=&lt;span&gt; NULL) {
&lt;/span&gt;&lt;span&gt;2464&lt;/span&gt;         item-&amp;gt;type = cJSON_Object |&lt;span&gt; cJSON_IsReference;
&lt;/span&gt;&lt;span&gt;2465&lt;/span&gt;         item-&amp;gt;child = (cJSON*&lt;span&gt;)cast_away_const(child);
&lt;/span&gt;&lt;span&gt;2466&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2467&lt;/span&gt; 
&lt;span&gt;2468&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2469&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2470&lt;/span&gt; 
&lt;span&gt;2471&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;child) {
&lt;/span&gt;&lt;span&gt;2472&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2473&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item !=&lt;span&gt; NULL) {
&lt;/span&gt;&lt;span&gt;2474&lt;/span&gt;         item-&amp;gt;type = cJSON_Array |&lt;span&gt; cJSON_IsReference;
&lt;/span&gt;&lt;span&gt;2475&lt;/span&gt;         item-&amp;gt;child = (cJSON*&lt;span&gt;)cast_away_const(child);
&lt;/span&gt;&lt;span&gt;2476&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2477&lt;/span&gt; 
&lt;span&gt;2478&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2479&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2480&lt;/span&gt; 
&lt;span&gt;2481&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;raw)
&lt;/span&gt;&lt;span&gt;2482&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2483&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2484&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2485&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2486&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_Raw;
&lt;/span&gt;&lt;span&gt;2487&lt;/span&gt;         item-&amp;gt;valuestring = (&lt;span&gt;char&lt;/span&gt;*)cJSON_strdup((&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt;*)raw, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2488&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!item-&amp;gt;&lt;span&gt;valuestring)
&lt;/span&gt;&lt;span&gt;2489&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2490&lt;/span&gt; &lt;span&gt;            cJSON_Delete(item);
&lt;/span&gt;&lt;span&gt;2491&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2492&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2493&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2494&lt;/span&gt; 
&lt;span&gt;2495&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2496&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2497&lt;/span&gt; 
&lt;span&gt;2498&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateArray(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2499&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2500&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2501&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item)
&lt;/span&gt;&lt;span&gt;2502&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2503&lt;/span&gt;         item-&amp;gt;type=&lt;span&gt;cJSON_Array;
&lt;/span&gt;&lt;span&gt;2504&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2505&lt;/span&gt; 
&lt;span&gt;2506&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2507&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2508&lt;/span&gt; 
&lt;span&gt;2509&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateObject(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2510&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2511&lt;/span&gt;     cJSON *item = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2512&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (item)
&lt;/span&gt;&lt;span&gt;2513&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2514&lt;/span&gt;         item-&amp;gt;type =&lt;span&gt; cJSON_Object;
&lt;/span&gt;&lt;span&gt;2515&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2516&lt;/span&gt; 
&lt;span&gt;2517&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;2518&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2519&lt;/span&gt; 
&lt;span&gt;2520&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Create Arrays: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2521&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *numbers, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count)
&lt;/span&gt;&lt;span&gt;2522&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2523&lt;/span&gt;     size_t i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2524&lt;/span&gt;     cJSON *n =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2525&lt;/span&gt;     cJSON *p =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2526&lt;/span&gt;     cJSON *a =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2527&lt;/span&gt; 
&lt;span&gt;2528&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((count &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (numbers ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2529&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2530&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2531&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2532&lt;/span&gt; 
&lt;span&gt;2533&lt;/span&gt;     a =&lt;span&gt; cJSON_CreateArray();
&lt;/span&gt;&lt;span&gt;2534&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; a &amp;amp;&amp;amp; (i &amp;lt; (size_t)count); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2535&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2536&lt;/span&gt;         n =&lt;span&gt; cJSON_CreateNumber(numbers[i]);
&lt;/span&gt;&lt;span&gt;2537&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt;2538&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2539&lt;/span&gt; &lt;span&gt;            cJSON_Delete(a);
&lt;/span&gt;&lt;span&gt;2540&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2541&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2542&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;2543&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2544&lt;/span&gt;             a-&amp;gt;child =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2545&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2546&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2547&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2548&lt;/span&gt; &lt;span&gt;            suffix_object(p, n);
&lt;/span&gt;&lt;span&gt;2549&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2550&lt;/span&gt;         p =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2551&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2552&lt;/span&gt; 
&lt;span&gt;2553&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;2554&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2555&lt;/span&gt; 
&lt;span&gt;2556&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; *numbers, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count)
&lt;/span&gt;&lt;span&gt;2557&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2558&lt;/span&gt;     size_t i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2559&lt;/span&gt;     cJSON *n =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2560&lt;/span&gt;     cJSON *p =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2561&lt;/span&gt;     cJSON *a =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2562&lt;/span&gt; 
&lt;span&gt;2563&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((count &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (numbers ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2564&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2565&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2566&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2567&lt;/span&gt; 
&lt;span&gt;2568&lt;/span&gt;     a =&lt;span&gt; cJSON_CreateArray();
&lt;/span&gt;&lt;span&gt;2569&lt;/span&gt; 
&lt;span&gt;2570&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; a &amp;amp;&amp;amp; (i &amp;lt; (size_t)count); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2571&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2572&lt;/span&gt;         n = cJSON_CreateNumber((&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)numbers[i]);
&lt;/span&gt;&lt;span&gt;2573&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt;2574&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2575&lt;/span&gt; &lt;span&gt;            cJSON_Delete(a);
&lt;/span&gt;&lt;span&gt;2576&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2577&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2578&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;2579&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2580&lt;/span&gt;             a-&amp;gt;child =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2581&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2582&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2583&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2584&lt;/span&gt; &lt;span&gt;            suffix_object(p, n);
&lt;/span&gt;&lt;span&gt;2585&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2586&lt;/span&gt;         p =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2587&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2588&lt;/span&gt; 
&lt;span&gt;2589&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;2590&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2591&lt;/span&gt; 
&lt;span&gt;2592&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; *numbers, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count)
&lt;/span&gt;&lt;span&gt;2593&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2594&lt;/span&gt;     size_t i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2595&lt;/span&gt;     cJSON *n =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2596&lt;/span&gt;     cJSON *p =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2597&lt;/span&gt;     cJSON *a =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2598&lt;/span&gt; 
&lt;span&gt;2599&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((count &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (numbers ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2600&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2601&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2602&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2603&lt;/span&gt; 
&lt;span&gt;2604&lt;/span&gt;     a =&lt;span&gt; cJSON_CreateArray();
&lt;/span&gt;&lt;span&gt;2605&lt;/span&gt; 
&lt;span&gt;2606&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;a &amp;amp;&amp;amp; (i &amp;lt; (size_t)count); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2607&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2608&lt;/span&gt;         n =&lt;span&gt; cJSON_CreateNumber(numbers[i]);
&lt;/span&gt;&lt;span&gt;2609&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt;2610&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2611&lt;/span&gt; &lt;span&gt;            cJSON_Delete(a);
&lt;/span&gt;&lt;span&gt;2612&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2613&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2614&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;2615&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2616&lt;/span&gt;             a-&amp;gt;child =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2617&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2618&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2619&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2620&lt;/span&gt; &lt;span&gt;            suffix_object(p, n);
&lt;/span&gt;&lt;span&gt;2621&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2622&lt;/span&gt;         p =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2623&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2624&lt;/span&gt; 
&lt;span&gt;2625&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;2626&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2627&lt;/span&gt; 
&lt;span&gt;2628&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;const&lt;/span&gt; *strings, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count)
&lt;/span&gt;&lt;span&gt;2629&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2630&lt;/span&gt;     size_t i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2631&lt;/span&gt;     cJSON *n =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2632&lt;/span&gt;     cJSON *p =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2633&lt;/span&gt;     cJSON *a =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2634&lt;/span&gt; 
&lt;span&gt;2635&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((count &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (strings ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2636&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2637&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2638&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2639&lt;/span&gt; 
&lt;span&gt;2640&lt;/span&gt;     a =&lt;span&gt; cJSON_CreateArray();
&lt;/span&gt;&lt;span&gt;2641&lt;/span&gt; 
&lt;span&gt;2642&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; a &amp;amp;&amp;amp; (i &amp;lt; (size_t)count); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2643&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2644&lt;/span&gt;         n =&lt;span&gt; cJSON_CreateString(strings[i]);
&lt;/span&gt;&lt;span&gt;2645&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt;2646&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2647&lt;/span&gt; &lt;span&gt;            cJSON_Delete(a);
&lt;/span&gt;&lt;span&gt;2648&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2649&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2650&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;2651&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2652&lt;/span&gt;             a-&amp;gt;child =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2653&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2654&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2655&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2656&lt;/span&gt; &lt;span&gt;            suffix_object(p,n);
&lt;/span&gt;&lt;span&gt;2657&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2658&lt;/span&gt;         p =&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;2659&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2660&lt;/span&gt; 
&lt;span&gt;2661&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;2662&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2663&lt;/span&gt; 
&lt;span&gt;2664&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Duplication &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2665&lt;/span&gt; CJSON_PUBLIC(cJSON *) cJSON_Duplicate(&lt;span&gt;const&lt;/span&gt; cJSON *&lt;span&gt;item, cJSON_bool recurse)
&lt;/span&gt;&lt;span&gt;2666&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2667&lt;/span&gt;     cJSON *newitem =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2668&lt;/span&gt;     cJSON *child =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2669&lt;/span&gt;     cJSON *next =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2670&lt;/span&gt;     cJSON *newchild =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2671&lt;/span&gt; 
&lt;span&gt;2672&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Bail on bad ptr &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2673&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;item)
&lt;/span&gt;&lt;span&gt;2674&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2675&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;2676&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2677&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Create new item &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2678&lt;/span&gt;     newitem = cJSON_New_Item(&amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2679&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;newitem)
&lt;/span&gt;&lt;span&gt;2680&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2681&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;2682&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2683&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Copy over all vars &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2684&lt;/span&gt;     newitem-&amp;gt;type = item-&amp;gt;type &amp;amp; (~&lt;span&gt;cJSON_IsReference);
&lt;/span&gt;&lt;span&gt;2685&lt;/span&gt;     newitem-&amp;gt;valueint = item-&amp;gt;&lt;span&gt;valueint;
&lt;/span&gt;&lt;span&gt;2686&lt;/span&gt;     newitem-&amp;gt;valuedouble = item-&amp;gt;&lt;span&gt;valuedouble;
&lt;/span&gt;&lt;span&gt;2687&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item-&amp;gt;&lt;span&gt;valuestring)
&lt;/span&gt;&lt;span&gt;2688&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2689&lt;/span&gt;         newitem-&amp;gt;valuestring = (&lt;span&gt;char&lt;/span&gt;*)cJSON_strdup((unsigned &lt;span&gt;char&lt;/span&gt;*)item-&amp;gt;valuestring, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2690&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!newitem-&amp;gt;&lt;span&gt;valuestring)
&lt;/span&gt;&lt;span&gt;2691&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2692&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;2693&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2694&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2695&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2696&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2697&lt;/span&gt;         newitem-&amp;gt;&lt;span&gt;string&lt;/span&gt; = (item-&amp;gt;type&amp;amp;cJSON_StringIsConst) ? item-&amp;gt;&lt;span&gt;string&lt;/span&gt; : (&lt;span&gt;char&lt;/span&gt;*)cJSON_strdup((unsigned &lt;span&gt;char&lt;/span&gt;*)item-&amp;gt;&lt;span&gt;string&lt;/span&gt;, &amp;amp;&lt;span&gt;global_hooks);
&lt;/span&gt;&lt;span&gt;2698&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!newitem-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2699&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2700&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;2701&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2702&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2703&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; If non-recursive, then we're done! &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2704&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;recurse)
&lt;/span&gt;&lt;span&gt;2705&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2706&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; newitem;
&lt;/span&gt;&lt;span&gt;2707&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2708&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Walk the -&amp;gt;next chain for the child. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2709&lt;/span&gt;     child = item-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;2710&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (child !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2711&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2712&lt;/span&gt;         newchild = cJSON_Duplicate(child, &lt;span&gt;true&lt;/span&gt;); &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Duplicate (with recurse) each item in the -&amp;gt;next chain &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2713&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;newchild)
&lt;/span&gt;&lt;span&gt;2714&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2715&lt;/span&gt;             &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; fail;
&lt;/span&gt;&lt;span&gt;2716&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2717&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (next !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2718&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2719&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; If newitem-&amp;gt;child already set, then crosswire -&amp;gt;prev and -&amp;gt;next and move on &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2720&lt;/span&gt;             next-&amp;gt;next =&lt;span&gt; newchild;
&lt;/span&gt;&lt;span&gt;2721&lt;/span&gt;             newchild-&amp;gt;prev =&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt;2722&lt;/span&gt;             next =&lt;span&gt; newchild;
&lt;/span&gt;&lt;span&gt;2723&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2724&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;2725&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2726&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Set newitem-&amp;gt;child and move to it &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2727&lt;/span&gt;             newitem-&amp;gt;child =&lt;span&gt; newchild;
&lt;/span&gt;&lt;span&gt;2728&lt;/span&gt;             next =&lt;span&gt; newchild;
&lt;/span&gt;&lt;span&gt;2729&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2730&lt;/span&gt;         child = child-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;2731&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2732&lt;/span&gt; 
&lt;span&gt;2733&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; newitem;
&lt;/span&gt;&lt;span&gt;2734&lt;/span&gt; 
&lt;span&gt;2735&lt;/span&gt; &lt;span&gt;fail:
&lt;/span&gt;&lt;span&gt;2736&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (newitem !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2737&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2738&lt;/span&gt; &lt;span&gt;        cJSON_Delete(newitem);
&lt;/span&gt;&lt;span&gt;2739&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2740&lt;/span&gt; 
&lt;span&gt;2741&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;2742&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2743&lt;/span&gt; 
&lt;span&gt;2744&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; skip_oneline_comment(&lt;span&gt;char&lt;/span&gt; **&lt;span&gt;input)
&lt;/span&gt;&lt;span&gt;2745&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2746&lt;/span&gt;     *input += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2747&lt;/span&gt; 
&lt;span&gt;2748&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (; (*input)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; ++(*&lt;span&gt;input))
&lt;/span&gt;&lt;span&gt;2749&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2750&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((*input)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;2751&lt;/span&gt;             *input += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2752&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2753&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2754&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2755&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2756&lt;/span&gt; 
&lt;span&gt;2757&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; skip_multiline_comment(&lt;span&gt;char&lt;/span&gt; **&lt;span&gt;input)
&lt;/span&gt;&lt;span&gt;2758&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2759&lt;/span&gt;     *input += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2760&lt;/span&gt; 
&lt;span&gt;2761&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (; (*input)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; ++(*&lt;span&gt;input))
&lt;/span&gt;&lt;span&gt;2762&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2763&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (((*input)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; ((*input)[&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2764&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2765&lt;/span&gt;             *input += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2766&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2767&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2768&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2769&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2770&lt;/span&gt; 
&lt;span&gt;2771&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; minify_string(&lt;span&gt;char&lt;/span&gt; **input, &lt;span&gt;char&lt;/span&gt; **&lt;span&gt;output) {
&lt;/span&gt;&lt;span&gt;2772&lt;/span&gt;     (*output)[&lt;span&gt;0&lt;/span&gt;] = (*input)[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2773&lt;/span&gt;     *input += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2774&lt;/span&gt;     *output += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2775&lt;/span&gt; 
&lt;span&gt;2776&lt;/span&gt; 
&lt;span&gt;2777&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (; (*input)[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; (&lt;span&gt;void&lt;/span&gt;)++(*input), ++(*&lt;span&gt;output)) {
&lt;/span&gt;&lt;span&gt;2778&lt;/span&gt;         (*output)[&lt;span&gt;0&lt;/span&gt;] = (*input)[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2779&lt;/span&gt; 
&lt;span&gt;2780&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((*input)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;2781&lt;/span&gt;             (*output)[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2782&lt;/span&gt;             *input += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2783&lt;/span&gt;             *output += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2784&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2785&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (((*input)[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; ((*input)[&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;2786&lt;/span&gt;             (*output)[&lt;span&gt;1&lt;/span&gt;] = (*input)[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2787&lt;/span&gt;             *input += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2788&lt;/span&gt;             *output += static_strlen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2789&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2790&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2791&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2792&lt;/span&gt; 
&lt;span&gt;2793&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt;) cJSON_Minify(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;json)
&lt;/span&gt;&lt;span&gt;2794&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2795&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; *into =&lt;span&gt; json;
&lt;/span&gt;&lt;span&gt;2796&lt;/span&gt; 
&lt;span&gt;2797&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (json ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2798&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2799&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2800&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2801&lt;/span&gt; 
&lt;span&gt;2802&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (json[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2803&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2804&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt; (json[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;2805&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;2806&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2807&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2808&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2809&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2810&lt;/span&gt;                 json++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2811&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2812&lt;/span&gt; 
&lt;span&gt;2813&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2814&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (json[&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2815&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;2816&lt;/span&gt;                     skip_oneline_comment(&amp;amp;&lt;span&gt;json);
&lt;/span&gt;&lt;span&gt;2817&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;2818&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (json[&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2819&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;2820&lt;/span&gt;                     skip_multiline_comment(&amp;amp;&lt;span&gt;json);
&lt;/span&gt;&lt;span&gt;2821&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;2822&lt;/span&gt;                     json++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2823&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;2824&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2825&lt;/span&gt; 
&lt;span&gt;2826&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2827&lt;/span&gt;                 minify_string(&amp;amp;json, (&lt;span&gt;char&lt;/span&gt;**)&amp;amp;&lt;span&gt;into);
&lt;/span&gt;&lt;span&gt;2828&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2829&lt;/span&gt; 
&lt;span&gt;2830&lt;/span&gt;             &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2831&lt;/span&gt;                 into[&lt;span&gt;0&lt;/span&gt;] = json[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2832&lt;/span&gt;                 json++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2833&lt;/span&gt;                 into++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2834&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;2835&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2836&lt;/span&gt; 
&lt;span&gt;2837&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; and null-terminate. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2838&lt;/span&gt;     *into = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2839&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2840&lt;/span&gt; 
&lt;span&gt;2841&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2842&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2843&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2844&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2845&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2846&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2847&lt;/span&gt; 
&lt;span&gt;2848&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_Invalid;
&lt;/span&gt;&lt;span&gt;2849&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2850&lt;/span&gt; 
&lt;span&gt;2851&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2852&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2853&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2854&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2855&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2856&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2857&lt;/span&gt; 
&lt;span&gt;2858&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_False;
&lt;/span&gt;&lt;span&gt;2859&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2860&lt;/span&gt; 
&lt;span&gt;2861&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2862&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2863&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2864&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2865&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2866&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2867&lt;/span&gt; 
&lt;span&gt;2868&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xff&lt;/span&gt;) ==&lt;span&gt; cJSON_True;
&lt;/span&gt;&lt;span&gt;2869&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2870&lt;/span&gt; 
&lt;span&gt;2871&lt;/span&gt; 
&lt;span&gt;2872&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2873&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2874&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2875&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2876&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2877&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2878&lt;/span&gt; 
&lt;span&gt;2879&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; (cJSON_True | cJSON_False)) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2880&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2881&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2882&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2883&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2884&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2885&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2886&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2887&lt;/span&gt; 
&lt;span&gt;2888&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_NULL;
&lt;/span&gt;&lt;span&gt;2889&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2890&lt;/span&gt; 
&lt;span&gt;2891&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2892&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2893&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2894&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2895&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2896&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2897&lt;/span&gt; 
&lt;span&gt;2898&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_Number;
&lt;/span&gt;&lt;span&gt;2899&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2900&lt;/span&gt; 
&lt;span&gt;2901&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsString(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2902&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2903&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2904&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2905&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2906&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2907&lt;/span&gt; 
&lt;span&gt;2908&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_String;
&lt;/span&gt;&lt;span&gt;2909&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2910&lt;/span&gt; 
&lt;span&gt;2911&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2912&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2913&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2914&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2915&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2916&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2917&lt;/span&gt; 
&lt;span&gt;2918&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_Array;
&lt;/span&gt;&lt;span&gt;2919&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2920&lt;/span&gt; 
&lt;span&gt;2921&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2922&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2923&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2924&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2925&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2926&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2927&lt;/span&gt; 
&lt;span&gt;2928&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_Object;
&lt;/span&gt;&lt;span&gt;2929&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2930&lt;/span&gt; 
&lt;span&gt;2931&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; item)
&lt;/span&gt;&lt;span&gt;2932&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2933&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;2934&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2935&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2936&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2937&lt;/span&gt; 
&lt;span&gt;2938&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (item-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) ==&lt;span&gt; cJSON_Raw;
&lt;/span&gt;&lt;span&gt;2939&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2940&lt;/span&gt; 
&lt;span&gt;2941&lt;/span&gt; CJSON_PUBLIC(cJSON_bool) cJSON_Compare(&lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; a, &lt;span&gt;const&lt;/span&gt; cJSON * &lt;span&gt;const&lt;/span&gt; b, &lt;span&gt;const&lt;/span&gt;&lt;span&gt; cJSON_bool case_sensitive)
&lt;/span&gt;&lt;span&gt;2942&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2943&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((a == NULL) || (b == NULL) || ((a-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) != (b-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;)) ||&lt;span&gt; cJSON_IsInvalid(a))
&lt;/span&gt;&lt;span&gt;2944&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2945&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2946&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2947&lt;/span&gt; 
&lt;span&gt;2948&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; check if type is valid &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2949&lt;/span&gt;     &lt;span&gt;switch&lt;/span&gt; (a-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2950&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2951&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_False:
&lt;/span&gt;&lt;span&gt;2952&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_True:
&lt;/span&gt;&lt;span&gt;2953&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_NULL:
&lt;/span&gt;&lt;span&gt;2954&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Number:
&lt;/span&gt;&lt;span&gt;2955&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_String:
&lt;/span&gt;&lt;span&gt;2956&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Raw:
&lt;/span&gt;&lt;span&gt;2957&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Array:
&lt;/span&gt;&lt;span&gt;2958&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Object:
&lt;/span&gt;&lt;span&gt;2959&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2960&lt;/span&gt; 
&lt;span&gt;2961&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;2962&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2963&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2964&lt;/span&gt; 
&lt;span&gt;2965&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; identical objects are equal &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2966&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (a ==&lt;span&gt; b)
&lt;/span&gt;&lt;span&gt;2967&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2968&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2969&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;2970&lt;/span&gt; 
&lt;span&gt;2971&lt;/span&gt;     &lt;span&gt;switch&lt;/span&gt; (a-&amp;gt;type &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2972&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;2973&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; in these cases and equal type is enough &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;2974&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_False:
&lt;/span&gt;&lt;span&gt;2975&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_True:
&lt;/span&gt;&lt;span&gt;2976&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_NULL:
&lt;/span&gt;&lt;span&gt;2977&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2978&lt;/span&gt; 
&lt;span&gt;2979&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Number:
&lt;/span&gt;&lt;span&gt;2980&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (compare_double(a-&amp;gt;valuedouble, b-&amp;gt;&lt;span&gt;valuedouble))
&lt;/span&gt;&lt;span&gt;2981&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;2982&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2983&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;2984&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2985&lt;/span&gt; 
&lt;span&gt;2986&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_String:
&lt;/span&gt;&lt;span&gt;2987&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Raw:
&lt;/span&gt;&lt;span&gt;2988&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((a-&amp;gt;valuestring == NULL) || (b-&amp;gt;valuestring ==&lt;span&gt; NULL))
&lt;/span&gt;&lt;span&gt;2989&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;2990&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2991&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;2992&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (strcmp(a-&amp;gt;valuestring, b-&amp;gt;valuestring) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2993&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;2994&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2995&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;2996&lt;/span&gt; 
&lt;span&gt;2997&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2998&lt;/span&gt; 
&lt;span&gt;2999&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Array:
&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;3001&lt;/span&gt;             cJSON *a_element = a-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;3002&lt;/span&gt;             cJSON *b_element = b-&amp;gt;&lt;span&gt;child;
&lt;/span&gt;&lt;span&gt;3003&lt;/span&gt; 
&lt;span&gt;3004&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (; (a_element != NULL) &amp;amp;&amp;amp; (b_element !=&lt;span&gt; NULL);)
&lt;/span&gt;&lt;span&gt;3005&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;3006&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cJSON_Compare(a_element, b_element, case_sensitive))
&lt;/span&gt;&lt;span&gt;3007&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;3008&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3009&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;3010&lt;/span&gt; 
&lt;span&gt;3011&lt;/span&gt;                 a_element = a_element-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;3012&lt;/span&gt;                 b_element = b_element-&amp;gt;&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;3013&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;3014&lt;/span&gt; 
&lt;span&gt;3015&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; one of the arrays is longer than the other &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;3016&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (a_element !=&lt;span&gt; b_element) {
&lt;/span&gt;&lt;span&gt;3017&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3018&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;3019&lt;/span&gt; 
&lt;span&gt;3020&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3021&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;3022&lt;/span&gt; 
&lt;span&gt;3023&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; cJSON_Object:
&lt;/span&gt;&lt;span&gt;3024&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;3025&lt;/span&gt;             cJSON *a_element =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;3026&lt;/span&gt;             cJSON *b_element =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;3027&lt;/span&gt; &lt;span&gt;            cJSON_ArrayForEach(a_element, a)
&lt;/span&gt;&lt;span&gt;3028&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;3029&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; TODO This has O(n^2) runtime, which is horrible! &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;3030&lt;/span&gt;                 b_element = get_object_item(b, a_element-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;, case_sensitive);
&lt;/span&gt;&lt;span&gt;3031&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (b_element ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;3032&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;3033&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3034&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;3035&lt;/span&gt; 
&lt;span&gt;3036&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cJSON_Compare(a_element, b_element, case_sensitive))
&lt;/span&gt;&lt;span&gt;3037&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;3038&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3039&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;3040&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;3041&lt;/span&gt; 
&lt;span&gt;3042&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; doing this twice, once on a and b to prevent true comparison if a subset of b
&lt;/span&gt;&lt;span&gt;3043&lt;/span&gt; &lt;span&gt;             * TODO: Do this the proper way, this is just a fix for now &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;3044&lt;/span&gt; &lt;span&gt;            cJSON_ArrayForEach(b_element, b)
&lt;/span&gt;&lt;span&gt;3045&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;3046&lt;/span&gt;                 a_element = get_object_item(a, b_element-&amp;gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;, case_sensitive);
&lt;/span&gt;&lt;span&gt;3047&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (a_element ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;3048&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;3049&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3050&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;3051&lt;/span&gt; 
&lt;span&gt;3052&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cJSON_Compare(b_element, a_element, case_sensitive))
&lt;/span&gt;&lt;span&gt;3053&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;3054&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3055&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;3056&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;3057&lt;/span&gt; 
&lt;span&gt;3058&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3059&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;3060&lt;/span&gt; 
&lt;span&gt;3061&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;3062&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3063&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;3064&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;3065&lt;/span&gt; 
&lt;span&gt;3066&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;) cJSON_malloc(size_t size)
&lt;/span&gt;&lt;span&gt;3067&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3068&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; global_hooks.allocate(size);
&lt;/span&gt;&lt;span&gt;3069&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;3070&lt;/span&gt; 
&lt;span&gt;3071&lt;/span&gt; CJSON_PUBLIC(&lt;span&gt;void&lt;/span&gt;) cJSON_free(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;object&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3072&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3073&lt;/span&gt;     global_hooks.deallocate(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3074&lt;/span&gt; }
&lt;/pre&gt;</description>
<pubDate>Fri, 05 Jun 2020 17:55:00 +0000</pubDate>
<dc:creator>东小东</dc:creator>
<og:description>ANSI C中的超轻量级JSON解析器 JSON（JavaScript对象表示法）是一种轻量级的数据交换格式。人类易于阅读和书写。机器很容易解析和生成。它基于JavaScript编程语言标准ECMA-</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/dongxiaodong/p/13053208.html</dc:identifier>
</item>
<item>
<title>为.netcore助力--WebApiClient正式发布core版本 - jiulang</title>
<link>http://www.cnblogs.com/kewei/p/13052978.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kewei/p/13052978.html</guid>
<description>&lt;h3 id=&quot;1-前言&quot;&gt;1 前言&lt;/h3&gt;
&lt;p&gt;WebApiClient已成熟稳定，发布了WebApiClient.JIT和WebApiClient.AOT两个nuget包，累计近10w次下载。我对它的高可扩展性设计相当满意和自豪，但WebApiClient并不因此而停下脚步，在一年前，我产生了编写其core版本的想法，将asp.netcore服务端先进的思想融入到core版本，在性能与扩展性上得到进一步升华。&lt;br/&gt;对应的，给它叫了WebApiClientCore的名字，为了对得起名字里面的Core字，我在框架设计、性能优化上占用整体开发时间一半以上。&lt;/p&gt;
&lt;h3 id=&quot;2-框架设计&quot;&gt;2 框架设计&lt;/h3&gt;
&lt;h4 id=&quot;iactioninvoker&quot;&gt;IActionInvoker&lt;/h4&gt;
&lt;p&gt;WebApiClient时还没有IActionInvoker概念，对应的执行逻辑直接在ApiActionContext上实现。现在我觉得，Context应该是一个状态数据类，而不能也成为一个执行者，因为一个执行者的实例可以无限次地执行多个Context实例。&lt;/p&gt;
&lt;p&gt;Refit则更简单粗暴，将所有实现都在一个RequestBuilderImplementation的类上：你们只要也只能使用我内置的Attribute声明，一切执行在我这个类里面包办，因为我是一个万能类。&lt;/p&gt;
&lt;p&gt;Core版本增加了IActionInvoker概念，从中Context分开，用于执行Context，职责分明。在实现上又分为多种Invoker：Task声明返回执行者ActionInvoker、ITask声明返回处理处理者ActionTask，以及聚合的MultiplexedActionInvoker。&lt;/p&gt;
&lt;h4 id=&quot;middleware思想&quot;&gt;Middleware思想&lt;/h4&gt;
&lt;p&gt;WebApiClient时在处理各个特性、参数验证、返回值验证时没有使用Middleware思想，特别是在处理响应结果和异常短路逻辑难以维护。&lt;/p&gt;
&lt;p&gt;Refit还是简单粗暴，将所有特性的解释实现都在这个RequestBuilderImplementation的类上，因为我还是一个万能类。&lt;/p&gt;
&lt;p&gt;Core版本增加中间件Builder，将请求前的相关Attribute的执行编排Build为一个请求处理委托，将请求后相关Attribute的执行编排Build为一个响应处理委托，然后把两个委托与真实http请求串在一起，Build出一个完整的请求响应委托。&lt;/p&gt;
&lt;p&gt;得益于Middleware，流程中的请求前参数值验证、结果处理特性短路、异常短路、请求后结果值验和无条件执行IApiFilterAtrribue等这些复杂的流程变成简单的管道处理；另外接口也变成支持服务端响应多种格式内容，每种格式内容在一个IApiReturnAttribute上实现和处理，比如请求为&lt;code&gt;Accept: application/json, application/xml&lt;/code&gt;，不管服务器返回xml或json都能处理。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 创建执行委托
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;apiAction&quot;&amp;gt;action描述器&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
public static Func&amp;lt;ApiRequestContext, Task&amp;lt;ApiResponseContext&amp;gt;&amp;gt; Build(ApiActionDescriptor apiAction)
{
    var requestHandler = BuildRequestHandler(apiAction);
    var responseHandler = BuildResponseHandler(apiAction);

    return async request =&amp;gt;
    {
        await requestHandler(request).ConfigureAwait(false);
        var response = await HttpRequest.SendAsync(request).ConfigureAwait(false);
        await responseHandler(response).ConfigureAwait(false);
        return response;
    };
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;context思想&quot;&gt;Context思想&lt;/h4&gt;
&lt;p&gt;WebApiClient只有一个ApiActionContext，其Result和Exception属性在请求前就可以访问或设置，但实际上就算设置了值，流程也不会短路和中断，属于设计失误。&lt;/p&gt;
&lt;p&gt;Refit没有相关Context概念，因为它不提供给用户自定义扩展Attribute的能力，它内置的Attribute也没有执行能力，一个RequestBuilderImplementation类够了。&lt;/p&gt;
&lt;p&gt;Core版本将设计了多个Context概念，不同阶段有不同的Context，如同asp.netcore不同Filter的Context也不同一样。对于一个Action，请求阶段对应是ApiRequestContext，响应阶段是ApiResponseContext；对于Action的参数，对应是ApiParameterContext。每种Context里面都包含核心的HttpContext属性，HttpContext包含请求消息、响应消息和接口配置选项等。&lt;/p&gt;
&lt;h4 id=&quot;interface思想&quot;&gt;Interface思想&lt;/h4&gt;
&lt;p&gt;输入WebApiClientCore命名空间，会发现定义了很多Interface，这些Interface都是为了用户实现自定义特性用的，当然内置的所有特性，都是实现了这些接口而已。如果一个特性实现了多个接口，它就有多种能力，比如内置的HeaderAttribute，它既可以修饰于Interface和Method，也可以修饰参数。&lt;/p&gt;
&lt;p&gt;WebApiClientCore的Attribute描述的逻辑，是由Attribute自我实现，所以整个请求的数据装配逻辑是分散为各个Attribute上，用什么Attribute就有什么逻辑，包含框架之外的非内置的自定义Attribute。&lt;/p&gt;
&lt;p&gt;Refit的内置Attribute只有欲描述逻辑，没有实现逻辑，实现逻辑由RequestBuilderImplementation包办，所以它不需要接口也没有接口。&lt;/p&gt;
&lt;h3 id=&quot;3-性能优化&quot;&gt;3 性能优化&lt;/h3&gt;
&lt;h4 id=&quot;更快的字符串替换&quot;&gt;更快的字符串替换&lt;/h4&gt;
&lt;p&gt;像[HttpGet(&quot;objects/{id}&quot;)]这样的path参数，在restful中常常遇到，通过Span优化，Core版本在替换path参数值cpu占用时间降低为原版本的十分之一。&lt;/p&gt;
&lt;h4 id=&quot;更快的json序列化&quot;&gt;更快的json序列化&lt;/h4&gt;
&lt;p&gt;得益于Sytem.Text.Json，json序列化和反序列化上性能显明提升。&lt;/p&gt;
&lt;h4 id=&quot;更少的缓冲区分配&quot;&gt;更少的缓冲区分配&lt;/h4&gt;
&lt;p&gt;WebApiClientCore使用了可回收复用的IBufferWriter，在json序列化得到json、json装配为HttpContent只申请一次Buffer，而且HttpContent在发送之后，这个Buffer被回收复用。IBufferWriter还于用表单的uri编码，编码产生的Buffer不用申请新的内存内容，直接写入表单的HttpContent。&lt;/p&gt;
&lt;h4 id=&quot;更少的编码操作&quot;&gt;更少的编码操作&lt;/h4&gt;
&lt;p&gt;WebApiClientCore的json不再使用utf16的string中间类型，直接将对象序列化为网络请求需要的utf8编码二进制json；表单的key和Value编码时，也不产生string中间类型，而是编码后的二进制数据内容，然后写入表单的IBufferWriter。&lt;/p&gt;
&lt;h4 id=&quot;更快的缓存查找&quot;&gt;更快的缓存查找&lt;/h4&gt;
&lt;p&gt;WebApiClient创建代理类实例来执行一个请求时，要查找两次缓存：通过接口类型查找字典缓存的接口代理类，然后实例化代理类；在ApiInterceptor里面通过MethodInfo查找字典缓存的ApiActionDescriptor。&lt;/p&gt;
&lt;p&gt;Refit执行同样逻辑也使用了两次字典缓存，接口和接口代理类安全字典缓存TypeMapping，接口和接口方法描述的字典缓存interfaceHttpMethods。&lt;/p&gt;
&lt;p&gt;WebApiClientCore取消了字典缓存，使用静态泛型类的字段作缓存，因为字段访问远比字典查找高效。同时通过巧妙的设计，在代理类拦截方法执行时，直接回传IActionInvoker替换原来的MethodInfo，IActionInvoker包含了ApiActionDescriptor，而IActionInvoker与代理类型都一起缓存在静态泛型类的字段，减少了一次必须的字典缓存查找过程。&lt;/p&gt;
&lt;h4 id=&quot;性能对比&quot;&gt;性能对比&lt;/h4&gt;
&lt;p&gt;排除掉真实的网络请求IO等待时间，WebApiClientCore使用的cpu时间仅仅为WebApiClient.JIT和Refit的三分之一。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ini&quot;&gt;BenchmarkDotNet=v0.12.1, OS=Windows 10.0.18362.836 (1903/May2019Update/19H1)
Intel Core i3-4150 CPU 3.50GHz (Haswell), 1 CPU, 4 logical and 2 physical cores
.NET Core SDK=3.1.202
  [Host]     : .NET Core 3.1.4 (CoreCLR 4.700.20.20201, CoreFX 4.700.20.22101), X64 RyuJIT
  DefaultJob : .NET Core 3.1.4 (CoreCLR 4.700.20.20201, CoreFX 4.700.20.22101), X64 RyuJIT
&lt;/code&gt;
&lt;/pre&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Mean&lt;/th&gt;
&lt;th&gt;Error&lt;/th&gt;
&lt;th&gt;StdDev&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;HttpClient_GetAsync&lt;/td&gt;
&lt;td&gt;3.146 μs&lt;/td&gt;
&lt;td&gt;0.0396 μs&lt;/td&gt;
&lt;td&gt;0.0370 μs&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;WebApiClientCore_GetAsync&lt;/td&gt;
&lt;td&gt;12.421 μs&lt;/td&gt;
&lt;td&gt;0.2324 μs&lt;/td&gt;
&lt;td&gt;0.2174 μs&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Refit_GetAsync&lt;/td&gt;
&lt;td&gt;43.241 μs&lt;/td&gt;
&lt;td&gt;0.6713 μs&lt;/td&gt;
&lt;td&gt;0.6279 μs&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Mean&lt;/th&gt;
&lt;th&gt;Error&lt;/th&gt;
&lt;th&gt;StdDev&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;HttpClient_PostJsonAsync&lt;/td&gt;
&lt;td&gt;5.263 μs&lt;/td&gt;
&lt;td&gt;0.0784 μs&lt;/td&gt;
&lt;td&gt;0.0733 μs&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;WebApiClientCore_PostJsonAsync&lt;/td&gt;
&lt;td&gt;13.823 μs&lt;/td&gt;
&lt;td&gt;0.1874 μs&lt;/td&gt;
&lt;td&gt;0.1753 μs&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Refit_PostJsonAsync&lt;/td&gt;
&lt;td&gt;45.218 μs&lt;/td&gt;
&lt;td&gt;0.8166 μs&lt;/td&gt;
&lt;td&gt;0.7639 μs&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;4-nuget包与文档&quot;&gt;4 Nuget包与文档&lt;/h3&gt;
&lt;h4 id=&quot;nuget包&quot;&gt;Nuget包&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;PackageReference Include=&quot;WebApiClientCore&quot; Version=&quot;1.0.0&quot; /&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;项目地址与文档&quot;&gt;项目地址与文档&lt;/h4&gt;
&lt;p&gt;点击项目链接，带你GET到N种使用技能，不求star，只求提供良好建议。&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dotnetcore/WebApiClient&quot;&gt;https://github.com/dotnetcore/WebApiClient&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 05 Jun 2020 15:50:00 +0000</pubDate>
<dc:creator>jiulang</dc:creator>
<og:description>1 前言 WebApiClient已成熟稳定，发布了WebApiClient.JIT和WebApiClient.AOT两个nuget包，累计近10w次下载。我对它的高可扩展性设计相当满意和自豪，但We</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/kewei/p/13052978.html</dc:identifier>
</item>
<item>
<title>【原创】Linux中断子系统（二）-通用框架处理 - LoyenWang</title>
<link>http://www.cnblogs.com/LoyenWang/p/13052677.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LoyenWang/p/13052677.html</guid>
<description>&lt;ul&gt;&lt;li&gt;&lt;code&gt;Read the fucking source code!&lt;/code&gt; --By 鲁迅&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A picture is worth a thousand words.&lt;/code&gt; --By 高尔基&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Kernel版本：4.14&lt;/li&gt;
&lt;li&gt;ARM64处理器，Contex-A53，双核&lt;/li&gt;
&lt;li&gt;使用工具：Source Insight 3.5， Visio&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/LoyenWang/p/12996812.html&quot;&gt;【原创】Linux中断子系统（一）-中断控制器及驱动分析&lt;/a&gt;讲到了底层硬件GIC驱动，以及Arch-Specific的中断代码，本文将研究下通用的中断处理的过程，属于硬件无关层。当然，我还是建议你看一下上篇文章。&lt;/p&gt;
&lt;p&gt;这篇文章会解答两个问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;用户是怎么使用中断的（&lt;code&gt;中断注册&lt;/code&gt;）？&lt;/li&gt;
&lt;li&gt;外设触发中断信号时，最终是怎么调用到中断handler的（&lt;code&gt;中断处理&lt;/code&gt;）？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先来看一下总的数据结构，核心是围绕着&lt;code&gt;struct irq_desc&lt;/code&gt;来展开：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605223624401-1747243848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Linux内核的中断处理，围绕着中断描述符结构&lt;code&gt;struct irq_desc&lt;/code&gt;展开，内核提供了两种中断描述符组织形式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;打开&lt;code&gt;CONFIG_SPARSE_IRQ&lt;/code&gt;宏（中断编号不连续），中断描述符以&lt;code&gt;radix-tree&lt;/code&gt;来组织，用户在初始化时进行动态分配，然后再插入&lt;code&gt;radix-tree&lt;/code&gt;中；&lt;/li&gt;
&lt;li&gt;关闭&lt;code&gt;CONFIG_SPARSE_IRQ&lt;/code&gt;宏（中断编号连续），中断描述符以数组的形式组织，并且已经分配好；&lt;/li&gt;
&lt;li&gt;不管哪种形式，最终都可以通过&lt;code&gt;linux irq&lt;/code&gt;号来找到对应的中断描述符；&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;图的左侧灰色部分，主要在中断控制器驱动中进行初始化设置，包括各个结构中函数指针的指向等，其中&lt;code&gt;struct irq_chip&lt;/code&gt;用于对中断控制器的硬件操作，&lt;code&gt;struct irq_domain&lt;/code&gt;与中断控制器对应，完成的工作是硬件中断号到&lt;code&gt;Linux irq&lt;/code&gt;的映射；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;图的上侧灰色部分，中断描述符的创建（这里指&lt;code&gt;CONFIG_SPARSE_IRQ&lt;/code&gt;），主要在获取设备中断信息的过程中完成的，从而让设备树中的中断能与具体的中断描述符&lt;code&gt;irq_desc&lt;/code&gt;匹配；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;图中剩余部分，在设备申请注册中断的过程中进行设置，比如&lt;code&gt;struct irqaction&lt;/code&gt;中&lt;code&gt;handler&lt;/code&gt;的设置，这个用于指向我们设备驱动程序中的中断处理函数了；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;中断的处理主要有以下几个功能模块：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;硬件中断号到&lt;code&gt;Linux irq&lt;/code&gt;中断号的映射，并创建好&lt;code&gt;irq_desc&lt;/code&gt;中断描述符；&lt;/li&gt;
&lt;li&gt;中断注册时，先获取设备的中断号，根据中断号找到对应的&lt;code&gt;irq_desc&lt;/code&gt;，并将设备的中断处理函数添加到&lt;code&gt;irq_desc&lt;/code&gt;中；&lt;/li&gt;
&lt;li&gt;设备触发中断信号时，根据硬件中断号得到&lt;code&gt;Linux irq&lt;/code&gt;中断号，找到对应的&lt;code&gt;irq_desc&lt;/code&gt;，最终调用到设备的中断处理函数；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上述的描述比较简单，更详细的过程，往下看吧。&lt;/p&gt;

&lt;h2 id=&quot;31-中断注册&quot;&gt;3.1 中断注册&lt;/h2&gt;
&lt;p&gt;这一次，让我们以问题的方式来展开：&lt;br/&gt;先来让我们回答第一个问题：用户是怎么使用中断的？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;熟悉设备驱动的同学应该都清楚，经常会在驱动程序中调用&lt;code&gt;request_irq()&lt;/code&gt;接口或者&lt;code&gt;request_threaded_irq()&lt;/code&gt;接口来注册设备的中断处理函数；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request_irq()/request_threaded_irq&lt;/code&gt;接口中，都需要用到&lt;code&gt;irq&lt;/code&gt;，也就是中断号，那么这个中断号是从哪里来的呢？它是&lt;code&gt;Linux irq&lt;/code&gt;，它又是如何映射到具体的硬件设备的中断号的呢？&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;先来看第二个问题：设备硬件中断号到&lt;code&gt;Linux irq&lt;/code&gt;中断号的映射&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605222653356-1874117507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;硬件设备的中断信息都在设备树&lt;code&gt;device tree&lt;/code&gt;中进行了描述，在系统启动过程中，这些信息都已经加载到内存中并得到了解析；&lt;/li&gt;
&lt;li&gt;驱动中通常会使用&lt;code&gt;platform_get_irq&lt;/code&gt;或&lt;code&gt;irq_of_parse_and_map&lt;/code&gt;接口，去根据设备树的信息去创建映射关系（硬件中断号到&lt;code&gt;linux irq&lt;/code&gt;中断号映射）；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/LoyenWang/p/12996812.html&quot;&gt;【原创】Linux中断子系统（一）-中断控制器及驱动分析&lt;/a&gt;提到过&lt;code&gt;struct irq_domain&lt;/code&gt;用于完成映射工作，因此在&lt;code&gt;irq_create_fwspec_mapping&lt;/code&gt;接口中，会先去找到匹配的&lt;code&gt;irq domain&lt;/code&gt;，再去回调该&lt;code&gt;irq domain&lt;/code&gt;中的函数集，通常&lt;code&gt;irq domain&lt;/code&gt;都是在中断控制器驱动中初始化的，以&lt;code&gt;ARM GICv2&lt;/code&gt;为例，最终回调到&lt;code&gt;gic_irq_domain_hierarchy_ops&lt;/code&gt;中的函数；&lt;/li&gt;
&lt;li&gt;如果已经创建好了映射，那么可以直接进行返回&lt;code&gt;linux irq&lt;/code&gt;中断号了，否则的话需要&lt;code&gt;irq_domain_alloc_irqs&lt;/code&gt;来创建映射关系；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;irq_domain_alloc_irqs&lt;/code&gt;完成两个工作：
&lt;ol&gt;&lt;li&gt;针对&lt;code&gt;linux irq&lt;/code&gt;中断号创建一个&lt;code&gt;irq_desc&lt;/code&gt;中断描述符；&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;domain-&amp;gt;ops-&amp;gt;alloc&lt;/code&gt;函数来完成映射，在&lt;code&gt;ARM GICv2&lt;/code&gt;驱动中对应&lt;code&gt;gic_irq_domain_alloc&lt;/code&gt;函数，这个函数很关键，所以下文介绍一下；&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;gic_irq_domain_alloc&lt;/code&gt;函数如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605222839660-1799351554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;gic_irq_domain_translate&lt;/code&gt;：负责解析出设备树中描述的中断号和中断触发类型（边缘触发、电平触发等）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gic_irq_domain_map&lt;/code&gt;：将硬件中断号和linux中断号绑定到一个结构中，也就完成了映射，此外还绑定了&lt;code&gt;irq_desc&lt;/code&gt;结构中的其他字段，最重要的是设置了&lt;code&gt;irq_desc-&amp;gt;handle_irq&lt;/code&gt;的函数指针，这个最终是中断响应时往上执行的入口，这个是关键，下文讲述中断处理过程时还会提到；&lt;/li&gt;
&lt;li&gt;根据硬件中断号的范围设置&lt;code&gt;irq_desc-&amp;gt;handle_irq&lt;/code&gt;的指针，共享中断入口为&lt;code&gt;handle_fasteoi_irq&lt;/code&gt;，私有中断入口为&lt;code&gt;handle_percpu_devid_irq&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上述函数执行完成后，完成了两大工作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;硬件中断号与Linux中断号完成映射，并为Linux中断号创建了&lt;code&gt;irq_desc&lt;/code&gt;中断描述符；&lt;/li&gt;
&lt;li&gt;数据结构的绑定及初始化，关键的地方是设置了中断处理往上执行的入口；&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;再看第一个问题：中断是怎么来注册的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设备驱动中，获取到了&lt;code&gt;irq&lt;/code&gt;中断号后，通常就会采用&lt;code&gt;request_irq/request_threaded_irq&lt;/code&gt;来注册中断，其中&lt;code&gt;request_irq&lt;/code&gt;用于注册普通处理的中断，&lt;code&gt;request_threaded_irq&lt;/code&gt;用于注册线程化处理的中断；&lt;/p&gt;
&lt;p&gt;在讲具体的注册流程前，先看一下主要的中断标志位：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;#define IRQF_SHARED               0x00000080              //多个设备共享一个中断号，需要外设硬件支持
#define IRQF_PROBE_SHARED       0x00000100              //中断处理程序允许sharing mismatch发生
#define __IRQF_TIMER            0x00000200              //时钟中断
#define IRQF_PERCPU             0x00000400              //属于特定CPU的中断
#define IRQF_NOBALANCING        0x00000800              //禁止在CPU之间进行中断均衡处理
#define IRQF_IRQPOLL            0x00001000              //中断被用作轮训
#define IRQF_ONESHOT            0x00002000              //一次性触发的中断，不能嵌套，1）在硬件中断处理完成后才能打开中断；2）在中断线程化中保持关闭状态，直到该中断源上的所有thread_fn函数都执行完
#define IRQF_NO_SUSPEND         0x00004000              //系统休眠唤醒操作中，不关闭该中断
#define IRQF_FORCE_RESUME       0x00008000              //系统唤醒过程中必须强制打开该中断
#define IRQF_NO_THREAD          0x00010000              //禁止中断线程化
#define IRQF_EARLY_RESUME       0x00020000              //系统唤醒过程中在syscore阶段resume，而不用等到设备resume阶段
#define IRQF_COND_SUSPEND       0x00040000              //与NO_SUSPEND的用户共享中断时，执行本设备的中断处理函数
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605223042609-247616444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;request_irq&lt;/code&gt;也是调用&lt;code&gt;request_threaded_irq&lt;/code&gt;，只是在传参的时候，线程处理函数&lt;code&gt;thread_fn&lt;/code&gt;函数设置成NULL；&lt;/li&gt;
&lt;li&gt;由于在硬件中断号和Linux中断号完成映射后，&lt;code&gt;irq_desc&lt;/code&gt;已经创建好，可以通过&lt;code&gt;irq_to_desc&lt;/code&gt;接口去获取对应的&lt;code&gt;irq_desc&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;irqaction&lt;/code&gt;，并初始化该结构体中的各个字段，其中包括传入的中断处理函数赋值给对应的字段；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__setup_irq&lt;/code&gt;用于完成中断的相关设置，包括中断线程化的处理：
&lt;ol&gt;&lt;li&gt;中断线程化用于减少系统关中断的时间，增强系统的实时性；&lt;/li&gt;
&lt;li&gt;ARM64默认开启了&lt;code&gt;CONFIG_IRQ_FORCED_THREADING&lt;/code&gt;，引导参数传入&lt;code&gt;threadirqs&lt;/code&gt;时，则除了&lt;code&gt;IRQF_NO_THREAD&lt;/code&gt;外的中断，其他的都将强制线程化处理；&lt;/li&gt;
&lt;li&gt;中断线程化会为每个中断都创建一个内核线程，如果中断进行共享，对应&lt;code&gt;irqaction&lt;/code&gt;将连接成链表，每个&lt;code&gt;irqaction&lt;/code&gt;都有&lt;code&gt;thread_mask&lt;/code&gt;位图字段，当所有共享中断都处理完成后才能&lt;code&gt;unmask&lt;/code&gt;中断，解除中断屏蔽；&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;32-中断处理&quot;&gt;3.2 中断处理&lt;/h2&gt;
&lt;p&gt;当完成中断的注册后，所有结构的组织关系都已经建立好，剩下的工作就是当信号来临时，进行中断的处理工作。&lt;/p&gt;
&lt;p&gt;来回顾一下&lt;a href=&quot;https://www.cnblogs.com/LoyenWang/p/12996812.html&quot;&gt;【原创】Linux中断子系统（一）-中断控制器及驱动分析&lt;/a&gt;中的Arch-specific处理流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605223246669-1755658498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;中断收到之后，首先会跳转到异常向量表的入口处，进而逐级进行回调处理，最终调用到&lt;code&gt;generic_handle_irq&lt;/code&gt;来进行中断处理。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;generic_handle_irq&lt;/code&gt;处理如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605223306409-238446169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;generic_handle_irq&lt;/code&gt;函数最终会调用到&lt;code&gt;desc-&amp;gt;handle_irq()&lt;/code&gt;，这个也就是对应到上文中在建立映射关系的过程中，调用&lt;code&gt;irq_domain_set_info&lt;/code&gt;函数，设置好了函数指针，也就是&lt;code&gt;handle_fasteoi_irq&lt;/code&gt;和&lt;code&gt;handle_percpu_devid_irq&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_fasteoi_irq&lt;/code&gt;：处理共享中断，并且遍历&lt;code&gt;irqaction&lt;/code&gt;链表，逐个调用&lt;code&gt;action-&amp;gt;handler()&lt;/code&gt;函数，这个函数正是设备驱动程序调用&lt;code&gt;request_irq/request_threaded_irq&lt;/code&gt;接口注册的中断处理函数，此外如果中断线程化处理的话，还会调用&lt;code&gt;__irq_wake_thread()&lt;/code&gt;唤醒内核线程；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_percpu_devid_irq&lt;/code&gt;：处理per-CPU中断处理，在这个过程中会分别调用中断控制器的处理函数进行硬件操作，该函数调用&lt;code&gt;action-&amp;gt;handler()&lt;/code&gt;来进行中断处理；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;来看看中断线程化处理后的唤醒流程吧&lt;code&gt;__handle_irq_event_percpu-&amp;gt;__irq_wake_thread&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605223341892-243579938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;__handle_irq_event_percpu-&amp;gt;__irq_wake_thread&lt;/code&gt;将唤醒&lt;code&gt;irq_thread&lt;/code&gt;中断内核线程；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;irq_thread&lt;/code&gt;内核线程，将根据是否为强制中断线程化对函数指针&lt;code&gt;handler_fn&lt;/code&gt;进行初始化，以便后续进行调用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;irq_thread&lt;/code&gt;内核线程将&lt;code&gt;while(!irq_wait_for_interrupt)&lt;/code&gt;循环进行中断的处理，当满足条件时，执行&lt;code&gt;handler_fn&lt;/code&gt;，在该函数中最终调用&lt;code&gt;action-&amp;gt;thread_fn&lt;/code&gt;，也就是完成了中断的处理；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;irq_wait_for_interrupt&lt;/code&gt;函数，将会判断中断线程的唤醒条件，如果满足了，则将当前任务设置成&lt;code&gt;TASK_RUNNING&lt;/code&gt;状态，并返回0，这样就能执行中断的处理，否则就调用&lt;code&gt;schedule()&lt;/code&gt;进行调度，让出CPU，并将任务设置成&lt;code&gt;TASK_INTERRUPTIBLE&lt;/code&gt;可中断睡眠状态；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;33-总结&quot;&gt;3.3 总结&lt;/h2&gt;
&lt;p&gt;中断的处理，总体来说可以分为两部分来看：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;从上到下：围绕&lt;code&gt;irq_desc&lt;/code&gt;中断描述符建立好连接关系，这个过程就包括：中断源信息的解析（设备树），硬件中断号到Linux中断号的映射关系、&lt;code&gt;irq_desc&lt;/code&gt;结构的分配及初始化（内部各个结构的组织关系）、中断的注册（填充&lt;code&gt;irq_desc&lt;/code&gt;结构，包括handler处理函数）等，总而言之，就是完成静态关系创建，为中断处理做好准备；&lt;/li&gt;
&lt;li&gt;从下到上，当外设触发中断信号时，中断控制器接收到信号并发送到处理器，此时处理器进行异常模式切换，并逐步从处理器架构相关代码逐级回调。如果涉及到中断线程化，则还需要进行中断内核线程的唤醒操作，最终完成中断处理函数的执行。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;欢迎关注个人公众号，不定期分享Linux内核机制文章&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1771657/202006/1771657-20200605223526643-1362366537.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 05 Jun 2020 14:39:00 +0000</pubDate>
<dc:creator>LoyenWang</dc:creator>
<og:description>背景 Read the fucking source code! --By 鲁迅 A picture is worth a thousand words. --By 高尔基 说明： Kernel版本：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/LoyenWang/p/13052677.html</dc:identifier>
</item>
<item>
<title>Go文件操作 - itbsl</title>
<link>http://www.cnblogs.com/itbsl/p/13052631.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itbsl/p/13052631.html</guid>
<description>&lt;p&gt;对于文件，我们并不陌生，文件是数据源(保存数据的地方)的一种，比如大家经常使用的word文档，txt文件,Excel文件...等等都是文件。文件最主要的作用就是保存数据，它既可以保存一张图片，也可以保存视频，声音......&lt;br/&gt;文件在程序中是以流的形式来操作的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222309306-1647050472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流&lt;/strong&gt;：数据在数据源(文件)和程序(内存)之间经历的路径&lt;br/&gt;输出流：数据从程序(内存)到数据源(文件)的路径&lt;br/&gt;输入流：数据从数据源(文件)到程序(内存)的路径&lt;br/&gt;输入与输出都是相对于内存而言的，从内存向外流就是输出，从外部向内存流就是输入&lt;/p&gt;
&lt;p&gt;在Go中，我们操作文件的方法在os包中，会经常使用到os.File结构体 &lt;a href=&quot;https://studygolang.com/pkgdoc&quot;&gt;Go语言标准库文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222403814-1175317630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222435222-1135705862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222524234-1665009916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;示例1-打开和关闭文件&quot;&gt;示例1: 打开和关闭文件&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;fmt&quot;
    &quot;os&quot;
)

func main() {

    //打开文件(/Users/xxx/Go/src/file.txt)
    //概念说明:file的叫法
    //1.file 叫 file对象
    //2.file 叫 file指针
    //3.file 叫 file文件句柄
    file, err := os.Open(&quot;/Users/itbsl/Go/src/file.txt&quot;)
    if err != nil {
        fmt.Println(&quot;文件打开失败,原因是:&quot;, err)
        //os.Exit(0)
    }
    defer func() {
        //文件及时关闭
        err = file.Close()
        if err != nil {
            fmt.Println(&quot;文件关闭失败,原因是&quot;, err)
        }
    }()
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例2-打开文件并读取内容&quot;&gt;示例2: 打开文件并读取内容&lt;/h3&gt;
&lt;p&gt;使用Read()函数按照字节读&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;fmt&quot;
        &quot;io&quot;
        &quot;os&quot;
)

func main() {

        file, err := os.Open(&quot;./test.txt&quot;)
        if err != nil {
                fmt.Printf(&quot;open file failed, err:%v\n&quot;, err)
                return
        }
        defer func() {
                err = file.Close()
                if err != nil {
                        fmt.Printf(&quot;close file failed, err:%v\n&quot;, err)
                }
        }()

        var content []byte
        var tmp = make([]byte, 128)
        for {
                n, err := file.Read(tmp)
                //为什么是tmp[:n]而不是tmp[:]?
                //因为当读取到最后一行的内容长度不足tmp的长度的时候
                //新读取的内容只会覆盖前半部分上次读取到的tmp的内容,
                //后半部分还是上一次读取的内容,如果用tmp[:]就会导致
                //后半部分久内容又会被重新赋值一次,这其实是错误的
                content = append(content, tmp[:n]...)
                if err == io.EOF {//读到文件末尾
                        break
                }
        }
        fmt.Printf(&quot;读取出来的内容为:\n&quot;)
        fmt.Printf(&quot;%q\n&quot;, string(content))
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例3-一次性读取文件&quot;&gt;示例3: 一次性读取文件&lt;/h3&gt;
&lt;p&gt;读取文件内容并显示在终端，将文件内容一次性读取到终端，适用于文件不大的情况。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;fmt&quot;
    &quot;io/ioutil&quot;
)

func main() {

    //打开文件,文件路径相对于GOPATH开始,或者写全路径(/Users/xxx/Go/src/file.txt)
    file, err := ioutil.ReadFile(&quot;src/file.txt&quot;)
    if err != nil {
        fmt.Println(&quot;文件打开失败,原因是:&quot;, err)
    }

    fmt.Printf(&quot;%s&quot;, string(file))
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例4-带缓冲的reader读文件&quot;&gt;示例4: 带缓冲的Reader读文件&lt;/h3&gt;
&lt;p&gt;读取文件的内容并显示在终端(带缓冲区的方式),使用&lt;code&gt;os.Open&lt;/code&gt;, &lt;code&gt;file.Close&lt;/code&gt;,&lt;code&gt;bufio.NewReader&lt;/code&gt;,&lt;code&gt;reader.ReadString&lt;/code&gt;函数和方法。适合读取大文件&lt;br/&gt;1.使用ReadBytes方法&lt;br/&gt;代码1:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;bufio&quot;
        &quot;fmt&quot;
        &quot;io&quot;
        &quot;log&quot;
        &quot;os&quot;
)

func main() {

        file, err := os.Open(&quot;./test.txt&quot;)
        if err != nil {
                log.Fatalf(&quot;open file failed, err: %v\n&quot;, err)
        }
        defer func() {
                err = file.Close()
                if err != nil {
                        log.Fatalf(&quot;close file failed, err: %v\n&quot;, err)
                }
        }()

        //定义变量result用来存储读取结果
        var result string
        //创建一个带有缓冲区的reader
        reader := bufio.NewReader(file)
        for {
                buf, err := reader.ReadBytes('\n')
                if err != nil &amp;amp;&amp;amp; err == io.EOF { //EOF代表文件的末尾
                        //注意:为什么要判断err是否等于io.EOF?
                        //因为存在这种情况,文件有内容的最后那一行尾部没有换行
                        //当使用ReadBytes或者ReadString方法按照'\n'换行读取时,读到尾部没有换行的这种情况时就会报io.EOF错误
                        //此时buf是读取到了内容的,如果忽略掉了,那么最终的读取结果会少了最后一行的内容
                        result += string(buf)
                        break
                }
                result += string(buf)
        }
        fmt.Println(result)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码2:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;bufio&quot;
        &quot;fmt&quot;
        &quot;io&quot;
        &quot;log&quot;
        &quot;os&quot;
)

func main() {

        file, err := os.Open(&quot;./test.txt&quot;)
        if err != nil {
                log.Fatalf(&quot;open file failed, err: %v\n&quot;, err)
        }
        defer func() {
                err = file.Close()
                if err != nil {
                        log.Fatalf(&quot;close file failed, err: %v\n&quot;, err)
                }
        }()

        //定义变量result用来存储读取结果
        var result string
        //创建一个带有缓冲区的reader
        reader := bufio.NewReader(file)
        for {
                buf, err := reader.ReadBytes('\n')
                if err != nil {
                        if err == io.EOF { //EOF代表文件的末尾
                        //注意:为什么要判断err是否等于io.EOF?
                        //因为存在这种情况,文件有内容的最后那一行尾部没有换行
                        //当使用ReadBytes或者ReadString方法按照'\n'换行读取时,读到尾部没有换行的这种情况时就会报io.EOF错误
                        //此时buf是读取到了内容的,如果忽略掉了,那么最终的读取结果会少了最后一行的内容
                                result += string(buf)
                                break
                        } else {
                                log.Fatalf(&quot;ReadBytes failed, err: %v\n&quot;, err)
                        }
                }
                result += string(buf)
        }
        fmt.Println(result)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.ReadString方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;bufio&quot;
    &quot;fmt&quot;
    &quot;io&quot;
    &quot;os&quot;
)

func main() {

    //打开文件
    file, err := os.Open(&quot;./files/test.txt&quot;)
    if err != nil {
        fmt.Println(&quot;文件打开失败,原因是:&quot;, err)
        return
    }

    //当函数退出时,要及时的关闭file
    defer func() {
        //文件及时关闭
        err = file.Close()
        if err != nil {
            fmt.Println(&quot;文件关闭失败,原因是&quot;, err)
        }
    }()

    //创建一个 *Reader,是带缓冲的
    reader := bufio.NewReader(file)
    var result string
    //循环读取文件内容
    for {
        str, err := reader.ReadString('\n') //读到一个换行就结束
        result += str
        if err == io.EOF {//io.EOF代表文件的末尾
            //注意:如果文件最后一行文字没有换行,则会一直读取到文件末尾,
            //所以即使是判断读到了文件末尾,也要把读取的内容输出一下
            break
        }
    }
    fmt.Println(result)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例5-创建文件并写入内容&quot;&gt;示例5: 创建文件并写入内容&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222628825-589104591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二个参数:文件代开模式(可以组合)；第三个参数:权限控制(如0755)&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222639678-1763642532.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;fmt&quot;
        &quot;os&quot;
)

func main() {

        //1.创建文件file.txt
        file, err := os.OpenFile(&quot;src/file.txt&quot;, os.O_WRONLY | os.O_CREATE, 0755)
        if err != nil {
                fmt.Println(&quot;文件打开/创建失败,原因是:&quot;, err)
                return
        }

        defer func() {
                err  = file.Close()
                if err != nil {
                        fmt.Println(&quot;文件关闭失败,原因是:&quot;, err)
                }
        }()

        //写入数据
        var str = &quot;暗黑西游狮驼岭，斗战胜佛孙悟空。\n&quot;

        for i := 0; i &amp;lt; 5; i++ {
                file.WriteString(str)
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例6-写文件的四种方式&quot;&gt;示例6: 写文件的四种方式&lt;/h3&gt;
&lt;p&gt;1.使用WriteAt()搭配Seek()方法实现写文件功能&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;io&quot;
        &quot;log&quot;
        &quot;os&quot;
)

func main() {

        file, err := os.OpenFile(&quot;./test.txt&quot;, os.O_RDWR|os.O_CREATE, 0755)
        if err != nil {
                log.Fatalf(&quot;open file failed, err: %v\n&quot;, err)
        }
        defer func() {
                err = file.Close()
                if err != nil {
                        log.Fatalf(&quot;close file failed, err: %v\n&quot;, err)
                }
        }()
    //Seek(): 修改文件的读写指针位置.
    //参数1: 偏移量. 正:向文件尾部偏移, 负:向文件头部偏移
    //参数2: 偏移起始位置
    //       io.SeekStart: 文件起始位置
    //       io.SeekCurrent: 文件当前位置
    //       io.SeekEnd: 文件结尾位置
    //返回值：表示从文件起始位置，到当前文件读写指针位置的偏移量。
    //WriteAt(): 在文件指定偏移位置,写入[]byte,通常搭配Seek()
    //参数1: 待写入的数据
    //参数2: 偏移量
    //返回: 实际写出的字节数
        for i := 0; i &amp;lt; 5; i++ {
                offset, _ := file.Seek(-3, io.SeekEnd)
                _, _ = file.WriteAt([]byte(&quot;你好&quot;), offset)
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 由于使用的OpenFile函数打开的文件，所以在选择打开模式的时候不能选择&lt;code&gt;os.O_APPEND&lt;/code&gt;模式，因为该模式表示的是在文件末尾追加，这与WriteAt在指定的位置写是想冲突的，虽然我在测试的时候加上&lt;code&gt;os.O_APPEND&lt;/code&gt;模式并没有报错，但是代码执行完之后发现，想要写入的内容并没有真正的写入到文件中。&lt;br/&gt;写入前&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222701905-679738111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写入后&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/720430/202006/720430-20200605222711489-1916066275.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.一次性写文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;io/ioutil&quot;
        &quot;log&quot;
)

func main() {
        str := &quot;hello树先生&quot;
        //如果文件已存在,则会清空原来的内容,写入新内容,如果文件不存在,则会创建文件并写入内容
        err := ioutil.WriteFile(&quot;./test.txt&quot;, []byte(str), 0755)
        if err != nil {
                log.Fatalf(&quot;写入文件错误,错误为:%v\n&quot;, err)
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.使用带缓冲的方式写文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;bufio&quot;
        &quot;fmt&quot;
        &quot;os&quot;
)

func main() {

        //1.创建文件file.txt
        file, err := os.OpenFile(&quot;src/file.txt&quot;, os.O_WRONLY | os.O_CREATE | os.O_TRUNC, 0755)
        defer func() {
                err  = file.Close()
                if err != nil {
                        fmt.Println(&quot;文件关闭失败,原因是:&quot;, err)
                }
        }()

        if err != nil {
                fmt.Println(&quot;文件创建失败,原因是:&quot;, err)
                return
        }

        //写入数据
        var str = &quot;你好,世界\n&quot;

        //写入时，使用带缓存的*Writer
        writer := bufio.NewWriter(file)

        for i := 0; i &amp;lt; 5; i++ {
                writer.WriteString(str)
        }

        //因为writer是带缓存的，因此在调用writeString方法时，其实内容是先写入到缓存
        //因此需要调用Flush方法，将缓存数据写入到文件中，否则文件中会丢失数据
        writer.Flush()
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例7-把一个文件内容写入到另一个文件&quot;&gt;示例7: 把一个文件内容写入到另一个文件&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;fmt&quot;
    &quot;io/ioutil&quot;
)

func main() {

    //打开文件,文件路径相对于GOPATH开始,或者写全路径(/Users/xxx/Go/src/file.txt)
    data, err := ioutil.ReadFile(&quot;src/1.txt&quot;)
    if err != nil {
        fmt.Println(&quot;文件打开失败,原因是:&quot;, err)
    }

    err = ioutil.WriteFile(&quot;src/2.txt&quot;, data, 0755)

    if err != nil {
        fmt.Println(&quot;文件写入失败,原因是:&quot;, err)
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例8：使用bufio获取用户输入&quot;&gt;示例8：使用bufio获取用户输入&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;bufio&quot;
    &quot;fmt&quot;
    &quot;os&quot;
)

func main() {
    var s string
    var reader = bufio.NewReader(os.Stdin)
    s, _ = reader.ReadString('\n')
    fmt.Printf(&quot;读取到的内容为:%s\n&quot;, s)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例9-判断文件或目录是否存在&quot;&gt;示例9: 判断文件或目录是否存在&lt;/h3&gt;
&lt;p&gt;Go判断文件或文件夹是否存在的方法为使用os.Stat()函数返回的错误值进行判断:&lt;br/&gt;(1)如果返回的错误为nil,说明文件或文件夹存在&lt;br/&gt;(2)如果返回的类型使用os.IsNotExist()判断为true,说明文件或文件夹不存在&lt;br/&gt;(3)如果返回的错误为其它类型，则不确定是否存在&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;fmt&quot;
        &quot;os&quot;
)

func main() {

        isExist, err := isFileExists(&quot;src/sfile.txt&quot;)
        if err != nil {
                fmt.Println(&quot;发生错误:&quot;, err)
        }

        if isExist {
                fmt.Println(&quot;存在&quot;)
        } else {
                fmt.Println(&quot;不存在&quot;)
        }
}

//判断文件或者目录是否存在
func isFileExists(path string) (bool, error) {

        _, err := os.Stat(path)
        if err == nil {
                return true, nil
        }
        if os.IsNotExist(err) {
                return false, nil
        }
        return false, err
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例10-拷贝文件、图片音视频&quot;&gt;示例10: 拷贝文件、图片音视频&lt;/h3&gt;
&lt;p&gt;io.Copy方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;fmt&quot;
        &quot;io&quot;
        &quot;os&quot;
)
func CopyFile(srcFileName string, dstFileName string) (int64, error) {

        //源文件处理
        srcFile, err := os.Open(srcFileName)
        defer func() {
                err = srcFile.Close()
                if err != nil {
                        fmt.Println(&quot;源文件关闭失败,原因是:&quot;, err)
                }
        }()

        if err != nil {
                fmt.Println(&quot;源文件打开失败,原因是:&quot;, err)
                return 0, err
        }

        //目标文件处理
        dstFile, err := os.OpenFile(dstFileName, os.O_CREATE | os.O_WRONLY, 0755)
        defer func() {
                err = dstFile.Close()
                if err != nil {
                        fmt.Println(&quot;目标文件关闭失败,原因是:&quot;, err)
                }
        }()
        if err != nil {
                fmt.Println(&quot;目标文件打开失败,原因是:&quot;, err)
                return 0, err
        }

        return io.Copy(dstFile, srcFile)
}

func main() {

        result, err := CopyFile(&quot;src/dst.jpeg&quot;, &quot;src/哈哈.jpeg&quot;)

        if err == nil {
                fmt.Println(&quot;拷贝成功!拷贝的字节数为: &quot;, result)
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于大文件，我们还可以采用下面的方式&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;io&quot;
        &quot;log&quot;
        &quot;os&quot;
)

func CopyFile(srcFileName string, dstFileName string) {
        //打开源文件
        srcFile, err := os.Open(srcFileName)
        if err != nil {
                log.Fatalf(&quot;源文件读取失败,原因是:%v\n&quot;, err)
        }
        defer func() {
                err = srcFile.Close()
                if err != nil {
                        log.Fatalf(&quot;源文件关闭失败,原因是:%v\n&quot;, err)
                }
        }()

        //创建目标文件,稍后会向这个目标文件写入拷贝内容
        distFile, err := os.Create(dstFileName)
        if err != nil {
                log.Fatalf(&quot;目标文件创建失败,原因是:%v\n&quot;, err)
        }
        defer func() {
                err = distFile.Close()
                if err != nil {
                        log.Fatalf(&quot;目标文件关闭失败,原因是:%v\n&quot;, err)
                }
        }()
        //定义指定长度的字节切片,每次最多读取指定长度
        var tmp = make([]byte, 1024*4)
        //循环读取并写入
        for {
                n, err := srcFile.Read(tmp)
                n, _ = distFile.Write(tmp[:n])
                if err != nil {
                        if err == io.EOF {//读到了文件末尾,并且写入完毕,任务完成返回(关闭文件的操作由defer来完成)
                                return
                        } else {
                                log.Fatalf(&quot;拷贝过程中发生错误,错误原因为:%v\n&quot;, err)
                        }
                }
        }
}

func main() {
        CopyFile(&quot;./worm.mp4&quot;, &quot;./dist.mp4&quot;)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例11-遍历目录&quot;&gt;示例11: 遍历目录&lt;/h3&gt;
&lt;h4 id=&quot;遍历目录&quot;&gt;遍历目录&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

//我们读写的文件一般存放于目录中.因此,有时需要指定到某一个目录下,根据目录存储的状况
//再进行文件的特定操作.接下来我们看看目录的基本操作方法.
import (
        &quot;fmt&quot;
        &quot;log&quot;
        &quot;os&quot;
)
//打开目录
//打开目录我们也使用OpenFile函数,但要指定不同的参数来通知系统,要打开的是一个目录文件.
//func OpenFile(name string, flag int, perm FileMode) (file *File, err error)
//参数1: name,表示要打开的目录名称.使用绝对路径较多
//参数2: flag,表示打开文件的读写模式
//参数3: perm,表示打开权限.但对于目录来说有所不同,通常传os.ModeDir.
//返回值:由于是操作目录,所以file是指向目录的文件指针.err中保存错误信息

//读目录内容
//这与读文件有所不同.目录中存放的是文件名和子目录名.所以使用Readdir函数
//func (f *File) Readdir(n int) (fi []FileInfo, err error)
//如果n&amp;gt;0，Readdir函数会返回一个最多n个成员的切片。这时，如果Readdir返回一个空切片，
//它会返回一个非nil的错误说明原因。如果到达了目录f的结尾，返回值err会是io.EOF。
//
//如果n&amp;lt;=0，Readdir函数返回目录中剩余所有文件对象的FileInfo构成的切片。
//此时，如果Readdir调用成功（读取所有内容直到结尾），它会返回该切片和nil的错误值。
//如果在到达结尾前遇到错误，会返回之前成功读取的FileInfo构成的切片和该错误。

func main() {
        //不推荐,因为通过查看ioutil.ReadDir()函数可知,官方使用的是os.Open()函数打开的目录
        //file, err := os.OpenFile(&quot;./dir&quot;, os.O_RDWR, os.ModeDir)
        file, err := os.Open(&quot;./dir&quot;)
        if err != nil {
                log.Fatalf(&quot;文件打开失败,原因是:%v\n&quot;, err)
        }
        defer func() {
                err = file.Close()
                if err != nil {
                        log.Fatalf(&quot;文件关闭失败,原因是:%v\n&quot;, err)
                }
        }()
        //Readdir方法返回一个FileInfo接口类型的切片和一个error类型的错误
        infos, err := file.Readdir(-1)
        for _, info := range infos {
                fmt.Printf(&quot;%v, %v\n&quot;, info.Name(), info.IsDir())
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;仅遍历目录，忽略文件&quot;&gt;仅遍历目录，忽略文件&lt;/h4&gt;
&lt;p&gt;方法1：使用os包&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;fmt&quot;
    &quot;os&quot;
)

var dirNames = make([]string, 0, 50)
var pathSeparator = string(os.PathSeparator)
func traverseDir(filePath string) error {
    file, err := os.Open(filePath)
    if err != nil {
        return err
    }
    fileInfo, err := file.Readdir(0)
    if err != nil {
        return err
    }

    for _, value := range fileInfo {
        if value.IsDir() {
            dirNames = append(dirNames, value.Name())
            err = traverseDir(filePath+pathSeparator+value.Name())
            if err != nil {
                return err
            }
        }
    }
    return err
}

func main() {

    var filePath = &quot;./dir&quot;
    err := traverseDir(filePath)
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println(dirNames)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法2:使用ioutil包&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;fmt&quot;
    &quot;io/ioutil&quot;
    &quot;os&quot;
)

var dirNames = make([]string, 0, 50)
var pathSeparator = string(os.PathSeparator)
func traverseDir(filePath string) error {
    fileInfos, err := ioutil.ReadDir(filePath)
    if err != nil {
        return err
    }
    for _, fileInfo :=range fileInfos {
        if fileInfo.IsDir() {
            dirNames = append(dirNames, fileInfo.Name())
            err =  traverseDir(filePath+pathSeparator+fileInfo.Name())
            if err != nil {
                return err
            }
        }
    }
    return err
}

func main() {

    var filePath = &quot;./dir&quot;
    err := traverseDir(filePath)
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println(dirNames)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例12-修改文件名&quot;&gt;示例12: 修改文件名&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
    &quot;fmt&quot;
    &quot;io/ioutil&quot;
    &quot;os&quot;
    &quot;strings&quot;
)

var pathSeparator = string(os.PathSeparator)
//重命名文件
func renameFileName(filePath string, old string, new string) error {
    files, err := ioutil.ReadDir(filePath)
    if err != nil {
        return err
    }
    for _, fileInfo := range files {
        if !fileInfo.IsDir() {
            err = os.Rename(filePath + pathSeparator + fileInfo.Name(),
                filePath + pathSeparator + strings.Replace(fileInfo.Name(), old, new, -1),
            )
            if err != nil {
                return err
            }
        }
    }
    return err
}

func main() {
    var filePath = &quot;./dir&quot;
    err := renameFileName(filePath, &quot;f&quot;, &quot;kkk&quot;)
    if err != nil {
        fmt.Printf(&quot;错误: %v\n&quot;, err)
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例13：创建目录&quot;&gt;示例13：创建目录&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;fmt&quot;
        &quot;os&quot;
)

func main() {
        //Mkdir使用指定的权限和名称创建一个目录。如果出错，会返回*PathError底层类型的错误。
        err := os.Mkdir(&quot;./foo&quot;, 0755)
        if os.IsExist(err) {
                fmt.Println(&quot;目录已存在&quot;)
                return
        }

        //MkdirAll使用指定的权限和名称创建一个目录，包括任何必要的上级目录，并返回nil，否则返回错误。
        //权限位perm会应用在每一个被本函数创建的目录上。如果path指定了一个已经存在的目录，MkdirAll不做任何操作并返回nil。
        err = os.MkdirAll(&quot;./foo/bar&quot;, 0755)
        if err != nil {
                fmt.Printf(&quot;%v\n&quot;, err)
                return
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;示例14：删除文件&quot;&gt;示例14：删除文件&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;fmt&quot;
        &quot;os&quot;
)

func main() {
        //Remove删除name指定的文件或目录。如果出错，会返回*PathError底层类型的错误。
        //该方法不能删除非空目录，如果想删除目录以及目录下的所有文件，可以使用RemoveAll
        err := os.Remove(&quot;./def&quot;)
        if os.IsNotExist(err) {
                fmt.Println(&quot;您要删除的文件或目录不存在&quot;)
                return
        }
        if err != nil {
                fmt.Println(err)
        }

        //RemoveAll删除path指定的文件，或目录及它包含的任何下级对象。
        //它会尝试删除所有东西，除非遇到错误并返回。
        //如果path指定的对象不存在，RemoveAll会返回nil而不返回错误。
        err = os.RemoveAll(&quot;./def&quot;)
        if err != nil {
                fmt.Println(err)
        }
}
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 05 Jun 2020 14:28:00 +0000</pubDate>
<dc:creator>itbsl</dc:creator>
<og:description>对于文件，我们并不陌生，文件是数据源(保存数据的地方)的一种，比如大家经常使用的word文档，txt文件,Excel文件...等等都是文件。文件最主要的作用就是保存数据，它既可以保存一张图片，也可以保</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/itbsl/p/13052631.html</dc:identifier>
</item>
<item>
<title>kubernetes pod内抓包，telnet检查网络连接的几种方式 - 360linux</title>
<link>http://www.cnblogs.com/360linux/p/13052590.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/360linux/p/13052590.html</guid>
<description>&lt;p&gt;在日常kubernetes的运维中，经常遇到pod的网络问题，如pod间网络不通，或者端口不通，更复杂的，需要在容器里面抓包分析才能定位。而kubertnets的场景，pod使用的镜像一般都是尽量精简，很多都是基于alpine基础镜像制作的，因而pod内没有ping，telnet，nc，curl命令，更别说tcpdump这种复杂的工具了。除了在容器或者镜像内直接安装这些工具这种最原始的法子，我们探讨下其他法子。&lt;/p&gt;

&lt;h2 id=&quot;kubectl-debug插件方式&quot;&gt;kubectl debug插件方式&lt;/h2&gt;
&lt;p&gt;项目地址 &lt;a href=&quot;%5Bhttps://github.com/aylei/kubectl-debug%5D(https://mp.weixin.qq.com/s/OeJFOWrewIlRoaJZXsfrgw)&quot;&gt;kubect debug&lt;/a&gt;，&lt;a href=&quot;https://mp.weixin.qq.com/s/OeJFOWrewIlRoaJZXsfrgw&quot;&gt;https://github.com/aylei/kubectl-debug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl-debug&lt;/code&gt; 是一个简单的 kubectl 插件，能够帮助你便捷地进行 Kubernetes 上的 Pod 排障诊断。背后做的事情很简单: 在运行中的 Pod 上额外起一个新容器，并将新容器加入到目标容器的 &lt;code&gt;pid&lt;/code&gt;, &lt;code&gt;network&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt; 以及 &lt;code&gt;ipc&lt;/code&gt; namespace 中，这时我们就可以在新容器中直接用 &lt;code&gt;netstat&lt;/code&gt;, &lt;code&gt;tcpdump&lt;/code&gt; 这些熟悉的工具来解决问题了, 而旧容器可以保持最小化，不需要预装任何额外的排障工具。操作流程可以参见官方项目地址文档。&lt;/p&gt;
&lt;p&gt;一条 kubectl debug命令背后是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://360linux.oss-cn-hangzhou.aliyuncs.com/img/image-20200605194618522.png&quot; alt=&quot;image-20200605194618522&quot;/&gt;&lt;/p&gt;
&lt;p&gt;步骤分别是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;插件查询 ApiServer：demo-pod 是否存在，所在节点是什么&lt;/li&gt;
&lt;li&gt;ApiServer 返回 demo-pod 所在所在节点&lt;/li&gt;
&lt;li&gt;插件请求在目标节点上创建 Debug Agent Pod&lt;/li&gt;
&lt;li&gt;Kubelet 创建 Debug Agent Pod&lt;/li&gt;
&lt;li&gt;插件发现 Debug Agent 已经 Ready，发起 debug 请求（长连接）&lt;/li&gt;
&lt;li&gt;Debug Agent 收到 debug 请求，创建 Debug 容器并加入目标容器的各个 Namespace 中，创建完成后，与 Debug 容器的 tty 建立连接&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;接下来，客户端就可以开始通过 5，6 这两个连接开始 debug 操作。操作结束后，Debug Agent 清理 Debug 容器，插件清理 Debug Agent，一次 Debug 完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://360linux.oss-cn-hangzhou.aliyuncs.com/img/640.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;直接进入容器net-ns方式&quot;&gt;直接进入容器net ns方式&lt;/h2&gt;
&lt;p&gt;有2种进入pod 所在net ns的方式，前提都是需要登录到pod所在宿主机，且需要找出pod对应的容器ID或者名字。&lt;/p&gt;
&lt;h3 id=&quot;ip-netns方式&quot;&gt;ip netns方式&lt;/h3&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;获取pod对应容器的ID或者name&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;pid=&quot;$(docker inspect -f '{{.State.Pid}}' &amp;lt;container_name | uuid&amp;gt;)&quot; #替换为环境实际的容器名字或者uuid
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;创建容器对应netns&lt;/p&gt;
&lt;p&gt;ip netns会到/var/run/netns目录下寻找network namespace，把容器进程中netns连接到这个目录中后，ip netns才会感知到&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;$ sudo mkdir -p /var/run/netns

#docker默认不会创建这个链接，需要手动创建,这时候执行ip netns，就应当看到链接过来的network namespace
$ sudo ln -sf /proc/$pid/ns/net &quot;/var/run/netns/&amp;lt;container_name|uuid&amp;gt;&quot; 
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;执行ip netns &amp;lt;&amp;lt;container_name|uuid &amp;gt; bash,进入容器ns&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;ip netns exec &amp;lt;container_name|uuid&amp;gt;  bash
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;执行telnet，tcpdump等命令，此时执行ip a或者ifconfig，只能看到容器本身的IP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://360linux.oss-cn-hangzhou.aliyuncs.com/img/image-20200605211648653.png&quot; alt=&quot;image-20200605211648653&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://360linux.oss-cn-hangzhou.aliyuncs.com/img/image-20200605212230963.png&quot; alt=&quot;image-20200605212230963&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如下图，执行ifconfig，只看到容器本身的IP，此时执行telnet，tcpdump等于直接在容器内操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://360linux.oss-cn-hangzhou.aliyuncs.com/img/image-20200605212401419.png&quot; alt=&quot;image-20200605212401419&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;nsenter方式&quot;&gt;nsenter方式&lt;/h3&gt;
&lt;p&gt;nsenter为util-linux里面的一个工具，除了进入容器net ns，还支持其他很多操作，可以查看官方文档。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;pid=&quot;$(docker inspect -f '{{.State.Pid}}' &amp;lt;container_name | uuid&amp;gt;)&quot;
nsenter -t $pid -n /bin/bash
tcpdump -i eth0 -nn  #此时利用宿主机的tcpdump执行抓包操作，等于在容器内抓包
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://360linux.oss-cn-hangzhou.aliyuncs.com/img/image-20200605214331582.png&quot; alt=&quot;image-20200605214331582&quot;/&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;kubectl debug方式功能更强大，缺点是需要附加镜像，要在目标pod创建debug agent的容器，比较笨重，但是优点是能使用的工具更多，不需要ssh到pod所在节点，除了netstat，tcpdump工具，还能使用htop，iostat等其他高级工具，不仅能对网络进行debug，还能对IO等其他场景进行诊断，适用更复杂的debug场景。&lt;/li&gt;
&lt;li&gt;直接进入容器net ns方式相对比较轻量，复用pod所在宿主机工具，但鱼和熊掌不可兼得，缺点是只能进行网络方面的debug，且需要ssh登录到pod所在节点操作。&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Fri, 05 Jun 2020 14:16:00 +0000</pubDate>
<dc:creator>360linux</dc:creator>
<og:description>背景 在日常kubernetes的运维中，经常遇到pod的网络问题，如pod间网络不通，或者端口不通，更复杂的，需要在容器里面抓包分析才能定位。而kubertnets的场景，pod使用的镜像一般都是尽</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/360linux/p/13052590.html</dc:identifier>
</item>
<item>
<title>Alink漫谈(六) : TF-IDF算法的实现 - 罗西的思考</title>
<link>http://www.cnblogs.com/rossiXYZ/p/13052449.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rossiXYZ/p/13052449.html</guid>
<description>&lt;p&gt;Alink 是阿里巴巴基于实时计算引擎 Flink 研发的新一代机器学习算法平台，是业界首个同时支持批式算法、流式算法的机器学习平台。TF-IDF（term frequency–inverse document frequency）是一种用于信息检索与数据挖掘的常用加权技术。本文将为大家展现Alink如何实现TF-IDF。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;681.0399897556&quot;&gt;


&lt;h2 id=&quot;0x00-摘要&quot;&gt;0x00 摘要&lt;/h2&gt;
&lt;p&gt;Alink 是阿里巴巴基于实时计算引擎 Flink 研发的新一代机器学习算法平台，是业界首个同时支持批式算法、流式算法的机器学习平台。TF-IDF（term frequency–inverse document frequency）是一种用于信息检索与数据挖掘的常用加权技术。本文将为大家展现Alink如何实现TF-IDF。&lt;/p&gt;
&lt;h2 id=&quot;0x01-tf-idf&quot;&gt;0x01 TF-IDF&lt;/h2&gt;
&lt;p&gt;TF-IDF（term frequency–inverse document frequency）是一种统计方法，一种用于信息检索与数据挖掘的常用加权技术。&lt;/p&gt;
&lt;p&gt;TF是词频(Term Frequency)，IDF是逆文本频率指数(Inverse Document Frequency)。&lt;/p&gt;
&lt;p&gt;为什么要用TF-IDF？&lt;strong&gt;因为计算机只能识别数字，对于一个一个的单词，计算机是看不懂的&lt;/strong&gt;，更别说是一句话，或是一篇文章。&lt;strong&gt;而TF-IDF就是用来将文本转换成计算机看得懂的语言，或者说是机器学习或深度学习模型能够进行学习训练的数据集&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;11-原理&quot;&gt;1.1 原理&lt;/h3&gt;
&lt;p&gt;TF-IDF用以评估一个词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。&lt;/p&gt;
&lt;p&gt;TF-IDF的主要思想是：如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类。&lt;/p&gt;
&lt;p&gt;TF-IDF实际上是：TF * IDF，TF词频(Term Frequency)，IDF逆向文件频率(Inverse Document Frequency)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词频&lt;/strong&gt;（term frequency，TF）指的是某一个给定的词语在该文件中出现的频率。这个数字是对&lt;strong&gt;词数&lt;/strong&gt;(term count)的归一化，以防止它偏向长的文件（同一个词语在长文件里可能会比短文件有更高的词数，而不管该词语重要与否）。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;IDF逆向文件频率 (inverse document frequency, IDF)&lt;/strong&gt;反应了一个词在&lt;strong&gt;所有文本（整个文档）&lt;/strong&gt;中出现的频率，&lt;strong&gt;如果一个词在很多的文本中出现，那么它的IDF值应该低。而反过来如果一个词在比较少的文本中出现，那么它的IDF值应该高&lt;/strong&gt;。比如一些专业的名词如“Machine Learning”。这样的词IDF值应该高。一个极端的情况，如果一个词在所有的文本中都出现，那么它的IDF值应该为0。&lt;/p&gt;
&lt;p&gt;如果单单以TF或者IDF来计算一个词的重要程度都是片面的，因此TF-IDF综合了TF和IDF两者的优点，用以评估&lt;strong&gt;一字词&lt;/strong&gt;对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。上述引用总结就是：&lt;strong&gt;一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章，越能与其它文章区分开来。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;12-计算方法&quot;&gt;1.2 计算方法&lt;/h3&gt;
&lt;p&gt;TF的计算公式如下：&lt;/p&gt;
&lt;p&gt;\[TF_w = \frac {N_w}{N} \]&lt;/p&gt;
&lt;p&gt;其中 N_w 是在某一文本中词条w出现的次数，N 是该文本总词条数。&lt;/p&gt;
&lt;p&gt;IDF的计算公式如下：&lt;/p&gt;
&lt;p&gt;\[IDF_w = log(\frac {Y}{Y_w + 1}) \]&lt;/p&gt;
&lt;p&gt;其中 Y 是语料库的文档总数，Y_w 是包含词条w的文档数，分母加一是为了避免w 未出现在任何文档中从而导致分母为0 的情况。&lt;/p&gt;
&lt;p&gt;TF-IDF 就是将TF和IDF相乘 :&lt;/p&gt;
&lt;p&gt;\[TF-IDF_w = TF_w * IDF_w \]&lt;/p&gt;
&lt;p&gt;从以上计算公式便可以看出，某一特定文件内的高词语频率，以及该词语在整个文件集合中的低文件频率，可以产生出高权重的TF-IDF。因此，&lt;strong&gt;TF-IDF倾向于过滤掉常见的词语，保留重要的词语。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x02-alink示例代码&quot;&gt;0x02 Alink示例代码&lt;/h2&gt;
&lt;h3 id=&quot;21-示例代码&quot;&gt;2.1 示例代码&lt;/h3&gt;
&lt;p&gt;首先我们给出示例代码，下文是通过一些语料来训练出一个模型，然后用这个模型来做预测：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class DocCountVectorizerExample {

    AlgoOperator getData(boolean isBatch) {
        Row[] rows = new Row[]{
                Row.of(0, &quot;二手旧书:医学电磁成像&quot;),
                Row.of(1, &quot;二手美国文学选读（ 下册 ）李宜燮南开大学出版社 9787310003969&quot;),
                Row.of(2, &quot;二手正版图解象棋入门/谢恩思主编/华龄出版社&quot;),
                Row.of(3, &quot;二手中国糖尿病文献索引&quot;),
                Row.of(4, &quot;二手郁达夫文集（ 国内版 ）全十二册馆藏书&quot;)
        };

        String[] schema = new String[]{&quot;id&quot;, &quot;text&quot;};

        if (isBatch) {
            return new MemSourceBatchOp(rows, schema);
        } else {
            return new MemSourceStreamOp(rows, schema);
        }
    }

    public static void main(String[] args) throws Exception {
        DocCountVectorizerExample test = new DocCountVectorizerExample();
        BatchOperator batchData = (BatchOperator) test.getData(true);

         // 分词
        SegmentBatchOp segment = new SegmentBatchOp() 
                                                .setSelectedCol(&quot;text&quot;)
                                                .linkFrom(batchData);
        // TF-IDF训练
        DocCountVectorizerTrainBatchOp model = new DocCountVectorizerTrainBatchOp()
                                                .setSelectedCol(&quot;text&quot;)
                                                .linkFrom(segment);
        // TF-IDF预测
        DocCountVectorizerPredictBatchOp predictBatch = new 
                                                                                                                                                        DocCountVectorizerPredictBatchOp()
                                                .setSelectedCol(&quot;text&quot;)
                                                .linkFrom(model, segment);
        model.print();
        predictBatch.print();
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;22-tf-idf模型&quot;&gt;2.2 TF-IDF模型&lt;/h3&gt;
&lt;p&gt;TF-IDF模型打印出来如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;model_id|model_info
--------|----------
0|{&quot;minTF&quot;:&quot;1.0&quot;,&quot;featureType&quot;:&quot;\&quot;WORD_COUNT\&quot;&quot;}
1048576|{&quot;f0&quot;:&quot;二手&quot;,&quot;f1&quot;:0.0,&quot;f2&quot;:0}
2097152|{&quot;f0&quot;:&quot;/&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:1}
3145728|{&quot;f0&quot;:&quot;出版社&quot;,&quot;f1&quot;:0.6931471805599453,&quot;f2&quot;:2}
4194304|{&quot;f0&quot;:&quot;）&quot;,&quot;f1&quot;:0.6931471805599453,&quot;f2&quot;:3}
5242880|{&quot;f0&quot;:&quot;（&quot;,&quot;f1&quot;:0.6931471805599453,&quot;f2&quot;:4}
6291456|{&quot;f0&quot;:&quot;入门&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:5}
......
36700160|{&quot;f0&quot;:&quot;美国&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:34}
37748736|{&quot;f0&quot;:&quot;谢恩&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:35}
38797312|{&quot;f0&quot;:&quot;象棋&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:36}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;23-tf-idf预测&quot;&gt;2.3 TF-IDF预测&lt;/h3&gt;
&lt;p&gt;TF-IDF预测结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;id|text
--|----
0|$37$0:1.0 6:1.0 10:1.0 25:1.0 26:1.0 28:1.0
1|$37$0:1.0 1:1.0 2:1.0 4:1.0 11:1.0 15:1.0 16:1.0 19:1.0 20:1.0 32:1.0 34:1.0
2|$37$0:1.0 3:2.0 4:1.0 5:1.0 8:1.0 22:1.0 23:1.0 24:1.0 29:1.0 35:1.0 36:1.0
3|$37$0:1.0 12:1.0 27:1.0 31:1.0 33:1.0
4|$37$0:1.0 1:1.0 2:1.0 7:1.0 9:1.0 13:1.0 14:1.0 17:1.0 18:1.0 21:1.0 30:1.0
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;0x03-分词-segment&quot;&gt;0x03 分词 Segment&lt;/h2&gt;
&lt;p&gt;中文分词(Chinese Word Segmentation) 指的是将一个汉字序列切分成一个一个单独的词。分词就是将连续的字序列按照一定的规范重新组合成词序列的过程。&lt;/p&gt;
&lt;p&gt;示例代码中，分词部分如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;    SegmentBatchOp segment = new SegmentBatchOp() 
                                            .setSelectedCol(&quot;text&quot;)
                                            .linkFrom(batchData);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分词主要是如下两个类，其作用就是把中文文档分割成单词。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public final class SegmentBatchOp extends MapBatchOp &amp;lt;SegmentBatchOp&amp;gt;
        implements SegmentParams &amp;lt;SegmentBatchOp&amp;gt; {

        public SegmentBatchOp(Params params) {
                super(SegmentMapper::new, params);
        }
}

public class SegmentMapper extends SISOMapper {
        private JiebaSegmenter segmentor;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;31-结巴分词&quot;&gt;3.1 结巴分词&lt;/h3&gt;
&lt;p&gt;有经验的同学看到这里就会露出微笑：结巴分词。&lt;/p&gt;
&lt;p&gt;jieba分词是国内使用人数最多的中文分词工具https://github.com/fxsjy/jieba。jieba分词支持四种分词模式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;精确模式，试图将句子最精确地切开，适合文本分析；&lt;/li&gt;
&lt;li&gt;全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；&lt;/li&gt;
&lt;li&gt;搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。&lt;/li&gt;
&lt;li&gt;paddle模式，利用PaddlePaddle深度学习框架，训练序列标注（双向GRU）网络模型实现分词。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Alink使用了&lt;code&gt;com.alibaba.alink.operator.common.nlp.jiebasegment.viterbi.FinalSeg;&lt;/code&gt;来 完成分词。具体是在https://github.com/huaban/jieba-analysis的基础上稍微做了调整。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class JiebaSegmenter implements Serializable {
    private static FinalSeg finalSeg = FinalSeg.getInstance();
    private WordDictionary wordDict;
    ......
    private Map&amp;lt;Integer, List&amp;lt;Integer&amp;gt;&amp;gt; createDAG(String sentence) 
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从Alink代码中看，实现了索引分词和查询分词两种模式，应该是有分词粒度粗细之分。&lt;/p&gt;
&lt;p&gt;createDAG函数的作用是 ：在处理句子过程中，基于前缀词典实现高效的词图扫描，生成句子中汉字所有可能成词情况所构成的有向无环图 (DAG)。&lt;/p&gt;
&lt;p&gt;结巴分词对于未登录词，采用了基于汉字成词能力的 HMM 模型，使用了 Viterbi 算法。&lt;/p&gt;
&lt;h3 id=&quot;32-分词过程&quot;&gt;3.2 分词过程&lt;/h3&gt;
&lt;p&gt;分词过程主要是在SegmentMapper.mapColumn函数中完成的，当输入是 &quot;二手旧书:医学电磁成像&quot;，结巴分词将这个句子分成了六个单词。具体参见如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;input = &quot;二手旧书:医学电磁成像&quot;
tokens = {ArrayList@9619}  size = 6
 0 = {SegToken@9630} &quot;[二手, 0, 2]&quot;
 1 = {SegToken@9631} &quot;[旧书, 2, 4]&quot;
 2 = {SegToken@9632} &quot;[:, 4, 5]&quot;
 3 = {SegToken@9633} &quot;[医学, 5, 7]&quot;
 4 = {SegToken@9634} &quot;[电磁, 7, 9]&quot;
 5 = {SegToken@9635} &quot;[成像, 9, 11]&quot;
 
mapColumn:44, SegmentMapper (com.alibaba.alink.operator.common.nlp)
apply:-1, 35206803 (com.alibaba.alink.common.mapper.SISOMapper$$Lambda$646)
handleMap:75, SISOColsHelper (com.alibaba.alink.common.mapper)
map:52, SISOMapper (com.alibaba.alink.common.mapper)
map:21, MapperAdapter (com.alibaba.alink.common.mapper)
map:11, MapperAdapter (com.alibaba.alink.common.mapper)
collect:79, ChainedMapDriver (org.apache.flink.runtime.operators.chaining)
collect:35, CountingCollector (org.apache.flink.runtime.operators.util.metrics)
invoke:196, DataSourceTask (org.apache.flink.runtime.operators)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;0x04-训练&quot;&gt;0x04 训练&lt;/h2&gt;
&lt;p&gt;训练是在DocCountVectorizerTrainBatchOp类完成的，其通过linkFrom完成了模型的构建。其实计算TF IDF相对 简单，复杂之处在于之后的大规模排序。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public DocCountVectorizerTrainBatchOp linkFrom(BatchOperator&amp;lt;?&amp;gt;... inputs) {
        BatchOperator&amp;lt;?&amp;gt; in = checkAndGetFirst(inputs);
  
        DataSet&amp;lt;DocCountVectorizerModelData&amp;gt; resDocCountModel = generateDocCountModel(getParams(), in);

        DataSet&amp;lt;Row&amp;gt; res = resDocCountModel.mapPartition(new MapPartitionFunction&amp;lt;DocCountVectorizerModelData, Row&amp;gt;() {
            @Override
            public void mapPartition(Iterable&amp;lt;DocCountVectorizerModelData&amp;gt; modelDataList, Collector&amp;lt;Row&amp;gt; collector) {
                new DocCountVectorizerModelDataConverter().save(modelDataList.iterator().next(), collector);
            }
        });
        this.setOutput(res, new DocCountVectorizerModelDataConverter().getModelSchema());
        return this;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;41-计算idf&quot;&gt;4.1 计算IDF&lt;/h3&gt;
&lt;p&gt;计算 IDF 的工作是在generateDocCountModel完成的，具体步骤如下：&lt;/p&gt;
&lt;p&gt;第一步 通过DocWordSplitCount和UDTF的混合使用得到了&lt;strong&gt;文档中的单词数目docWordCnt&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;BatchOperator&amp;lt;?&amp;gt; docWordCnt = in.udtf(
        params.get(SELECTED_COL),
        new String[] {WORD_COL_NAME, DOC_WORD_COUNT_COL_NAME},
        new DocWordSplitCount(NLPConstant.WORD_DELIMITER),
        new String[] {});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;DocWordSplitCount.eval&lt;/code&gt;的输入是已经分词的句子，然后按照空格分词，按照单词计数。其结果是：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;map = {HashMap@9816}  size = 6
 &quot;医学&quot; -&amp;gt; {Long@9833} 1
 &quot;电磁&quot; -&amp;gt; {Long@9833} 1
 &quot;:&quot; -&amp;gt; {Long@9833} 1
 &quot;成像&quot; -&amp;gt; {Long@9833} 1
 &quot;旧书&quot; -&amp;gt; {Long@9833} 1
 &quot;二手&quot; -&amp;gt; {Long@9833} 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步 得到了&lt;strong&gt;文档数目docCnt&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;BatchOperator docCnt = in.select(&quot;COUNT(1) AS &quot; + DOC_COUNT_COL_NAME);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个数目会广播出去 &lt;code&gt;.withBroadcastSet(docCnt.getDataSet(), &quot;docCnt&quot;);，&lt;/code&gt;后面的CalcIdf会继续使用，进行 行数统计。&lt;/p&gt;
&lt;p&gt;第三步 会通过CalcIdf&lt;strong&gt;计算出每一个单词的DF和IDF&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;open时候会获取docCnt。然后reduce会计算IDF，具体计算如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;double idf = Math.log((1.0 + docCnt) / (1.0 + df));
collector.collect(Row.of(featureName, -wordCount, idf));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体得到如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;df = 1.0
wordCount = 1.0
featureName = &quot;中国&quot;
idf = 1.0986122886681098
docCnt = 5
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里一个重点是：&lt;u&gt;返回值中，是 -wordCount，因为单词越多权重越小，为了比较所以取负&lt;/u&gt;。&lt;/p&gt;
&lt;h3 id=&quot;42-排序&quot;&gt;4.2 排序&lt;/h3&gt;
&lt;p&gt;得到所有单词的IDF之后，就得到了一个IDF字典，&lt;u&gt;这时候需要对字典按照权重进行排序&lt;/u&gt;。排序具体分为两步。&lt;/p&gt;
&lt;h4 id=&quot;421--sortutilspsort&quot;&gt;4.2.1 SortUtils.pSort&lt;/h4&gt;
&lt;p&gt;第一步是SortUtils.pSort，大规模并行抽样排序。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;Tuple2&amp;lt;DataSet&amp;lt;Tuple2&amp;lt;Integer, Row&amp;gt;&amp;gt;, DataSet&amp;lt;Tuple2&amp;lt;Integer, Long&amp;gt;&amp;gt;&amp;gt; partitioned = SortUtils.pSort(sortInput, 1);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这步非常复杂，Alink参考了论文，如果有兴趣的兄弟可以深入了解下。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;* reference: Yang, X. (2014). Chong gou da shu ju tong ji (1st ed., pp. 25-29).
* Note: This algorithm is improved on the base of the parallel sorting by regular sampling(PSRS).
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;pSort返回值是：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;* @return f0: dataset which is indexed by partition id, f1: dataset which has partition id and count.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;pSort中又分如下几步&lt;/p&gt;
&lt;h5 id=&quot;采样samplesplitpoint&quot;&gt;采样SampleSplitPoint&lt;/h5&gt;
&lt;p&gt;SortUtils.SampleSplitPoint.mapPartition这里完成了采样。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;DataSet &amp;lt;Tuple2 &amp;lt;Object, Integer&amp;gt;&amp;gt; splitPoints = input
   .mapPartition(new SampleSplitPoint(index))
   .reduceGroup(new SplitPointReducer());
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的输入row就是上文IDF的返回数值。&lt;/p&gt;
&lt;p&gt;用allValues记录了本task目前处理的句子有多少个单词。&lt;/p&gt;
&lt;p&gt;用splitPoints做了采样。如何选择呢，通过genSampleIndex函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public static Long genSampleIndex(Long splitPointIdx, Long count, Long splitPointSize) {
   splitPointIdx++;
   splitPointSize++;

   Long div = count / splitPointSize;
   Long mod = count % splitPointSize;

   return div * splitPointIdx + ((mod &amp;gt; splitPointIdx) ? splitPointIdx : mod) - 1;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后续操作也使用同样的genSampleIndex函数来做选择，这样保证在操作所有序列上可以选取同样的采样点。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;allValues = {ArrayList@10264}  size = 8  //本task有多少单词
 0 = {Double@10266} -2.0
 1 = {Double@10271} -1.0
 2 = {Double@10272} -1.0
 3 = {Double@10273} -1.0
 4 = {Double@10274} -1.0
 5 = {Double@10275} -1.0
 6 = {Double@10276} -1.0
 7 = {Double@10277} -1.0
 
splitPoints = {ArrayList@10265}  size = 7 //采样了7个
 0 = {Double@10266} -2.0
 1 = {Double@10271} -1.0
 2 = {Double@10272} -1.0
 3 = {Double@10273} -1.0
 4 = {Double@10274} -1.0
 5 = {Double@10275} -1.0
 6 = {Double@10276} -1.0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后返回采样数据，返回时候附带当前taskID&lt;code&gt;new Tuple2 &amp;lt;Object, Integer&amp;gt;(obj,taskId)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里有一个trick点&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;  for (Object obj : splitPoints) {
     Tuple2 &amp;lt;Object, Integer&amp;gt; cur
        = new Tuple2 &amp;lt;Object, Integer&amp;gt;(
        obj,
        taskId); //这里返回的是类似 (-5.0,2) ：其中2就是task id，-5.0是-wordcount。
     out.collect(cur);
  }

  out.collect(new Tuple2(
     getRuntimeContext().getNumberOfParallelSubtasks(),
     -taskId - 1));//这里返回的是一个特殊元素，类似(4,-2) ：其中4是本应用中并行task数目，-2是当前-taskId - 1。这个task数目后续就会用到。
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体数据参见如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;row = {Row@10211} &quot;中国,-1.0,1.0986122886681098&quot;
 fields = {Object[3]@10214} 
 
cur = {Tuple2@10286} &quot;(-5.0,2)&quot; // 返回采样数据，返回时候附带当前taskID
 f0 = {Double@10285} -5.0 // -wordcount。
 f1 = {Integer@10300} 2 // 当前taskID
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;归并-splitpointreducer&quot;&gt;归并 SplitPointReducer&lt;/h5&gt;
&lt;p&gt;&lt;u&gt;归并所有task生成的sample。然后再次sample，把sample数据组成一个数据块，这个数据块选择的原则是：每个task都尽量选择若干sample&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里其实是有一个转换，就是从正常单词的抽样 转换到 某一类单词的抽样，这某一类的意思举例是：出现次数为一，或者出现次数为五 这种单词&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里all是所有采样数据，其中一个元素内容举例 (-5.0,2) ：其中2就是task id，-5.0是-wordcount。&lt;/p&gt;
&lt;p&gt;这里用 &lt;code&gt;Collections.sort(all, new PairComparator());&lt;/code&gt; 来对所有采样数据做排序。排序基准是首先对 -wordcount，然后对task ID。&lt;/p&gt;
&lt;p&gt;SplitPointReducer的返回采样数值就作为广播变量存储起来：&lt;code&gt;.withBroadcastSet(splitPoints, &quot;splitPoints&quot;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里的trick点是：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;for (Tuple2 &amp;lt;Object, Integer&amp;gt; value : values) {
   if (value.f1 &amp;lt; 0) { 
      instanceCount = (int) value.f0;  // 特殊数据，类似(4,-2) ：其中4是本应用中task数目，这个就是后续选择哪些taskid的基准
      continue;
   }
   all.add(new Tuple2 &amp;lt;&amp;gt;(value.f0, value.f1)); // (-5.0,2) 正常数据
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;选择sample index &lt;code&gt;splitPoints.add(allValues.get(index));&lt;/code&gt;也使用了同样的genSampleIndex。&lt;/p&gt;
&lt;p&gt;计算中具体数据如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;for (int i = 0; i &amp;lt; splitPointSize; ++i) {
                int index = genSampleIndex(
                                        Long.valueOf(i),
                                        Long.valueOf(count),
                                        Long.valueOf(splitPointSize))
                                        .intValue();
                spliters.add(all.get(index));
}
for (Tuple2 &amp;lt;Object, Integer&amp;gt; spliter : spliters) {
                out.collect(spliter);
}

count = 33
all = {ArrayList@10245}  size = 33 // 所有采样数据，
0 = {Tuple2@10256} &quot;(-5.0,2)&quot;// 2就是task id，-5.0是-wordcount。
1 = {Tuple2@10285} &quot;(-2.0,0)&quot;
......
6 = {Tuple2@10239} &quot;(-1.0,0)&quot;
7 = {Tuple2@10240} &quot;(-1.0,0)&quot;
8 = {Tuple2@10241} &quot;(-1.0,0)&quot;
9 = {Tuple2@10242} &quot;(-1.0,0)&quot;
10 = {Tuple2@10243} &quot;(-1.0,0)&quot;
11 = {Tuple2@10244} &quot;(-1.0,1)&quot;
......
16 = {Tuple2@10278} &quot;(-1.0,1)&quot;
......
24 = {Tuple2@10279} &quot;(-1.0,2)&quot;
......
32 = {Tuple2@10313} &quot;(-1.0,3)&quot;
  
// spliters是返回结果，这里分别选取了all中index为8,16,24这个三个record。每个task都选择了一个元素。
spliters = {HashSet@10246}  size = 3
 0 = {Tuple2@10249} &quot;(-1.0,0)&quot; // task 0 被选择。就是说，这里从task 0中选择了一个count是1的元素，具体选择哪个单词其实不重要，就是为了选择count是1的这种即可。
 1 = {Tuple2@10250} &quot;(-1.0,1)&quot; // task 1 被选择。具体同上。
 2 = {Tuple2@10251} &quot;(-1.0,2)&quot; // task 2 被选择。具体同上。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;splitdata把真实数据idf插入&quot;&gt;SplitData把真实数据IDF插入&lt;/h5&gt;
&lt;p&gt;use binary search to partition data into sorted subsets。前面函数给出的是词的count，但是没有IDF。这里将用二分法查找 找到IDF，然后把IDF插入到partition data中。&lt;/p&gt;
&lt;p&gt;首先要注意一点：&lt;u&gt;splitData的输入就是原始输入input, 和splitPoints的输入是一样 的&lt;/u&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;DataSet &amp;lt;Tuple2 &amp;lt;Integer, Row&amp;gt;&amp;gt; splitData = input
   .mapPartition(new SplitData(index))
   .withBroadcastSet(splitPoints, &quot;splitPoints&quot;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;open函数中会取出广播变量 splitPoints。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;splitPoints = {ArrayList@10248}  size = 3
 0 = {Tuple2@10257} &quot;(-1.0,0)&quot;
 1 = {Tuple2@10258} &quot;(-1.0,1)&quot;
 2 = {Tuple2@10259} &quot;(-1.0,2)&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本函数的输入举例&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;row = {Row@10232} &quot;入门,-1.0,1.0986122886681098&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会在splitPoints中二分法查找，得到splits中每一个 sample 对应的真实IDF。然后发送出去。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;这里需要特殊说明下，这个二分法查找查找的是IDF数值，比如count为1的这种单词对应的IDF数值，可能很多单词都是count为1，所以找到一个这样单词的IDF即可&lt;/strong&gt;&lt;/u&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;splitPoints = {ArrayList@10223}  size = 3
 0 = {Tuple2@10229} &quot;(-1.0,0)&quot;
 1 = {Tuple2@10230} &quot;(-1.0,1)&quot;
 2 = {Tuple2@10231} &quot;(-1.0,2)&quot;
curTuple.f0 = {Double@10224} -1.0
  
int bsIndex = Collections.binarySearch(splitPoints, curTuple, new PairComparator());

                int curIndex;
                if (bsIndex &amp;gt;= 0) {
                        curIndex = bsIndex;
                } else {
                        curIndex = -bsIndex - 1;
                }

// 假设单词是 &quot;入门&quot;，则发送的是 &quot;入门&quot; 这类单词在本partition的index，和 &quot;入门&quot; 的单词本身
// 其实，从调试过程看，是否发送单词信息本身并不重要，因为接下来的那一步操作中，并没有用到单词本身信息
out.collect(new Tuple2 &amp;lt;&amp;gt;(curIndex, row)); 
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;reducegroup计算同类型单词数目&quot;&gt;reduceGroup计算同类型单词数目&lt;/h5&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;这里是计算在某一partition中，某一种类单词的数目。比如count为1的单词，这种单词总共有多少个&lt;/strong&gt;&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;后续会把&lt;code&gt;new Tuple2 &amp;lt;&amp;gt;(id, count)&lt;/code&gt;作为partitionCnt广播变量存起来。&lt;/p&gt;
&lt;p&gt;id就是这类单词在这partition中间的index，我们暂时称之为partition index。count就是这类单词在本partition的数目。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 输入举例
value = {Tuple2@10312} &quot;(0,入门,-1.0,1.0986122886681098)&quot;
 f0 = {Integer@10313} 0
 
// 计算数目
for (Tuple2 &amp;lt;Integer, Row&amp;gt; value : values) {
                id = value.f0;
                count++;
}

out.collect(new Tuple2 &amp;lt;&amp;gt;(id, count));  
  
// 输出举例，假如是序号为0的这类单词，其总体数目是12。这个序号0就是这类单词在某一partition中的序号。就是上面的 curIndex。
id = {Integer@10313} 0
count = {Long@10338} 12
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;422-localsort&quot;&gt;4.2.2 localSort&lt;/h4&gt;
&lt;p&gt;第二步是localSort。Sort a partitioned dataset. 最终排序并且会返回最终数值，比如 (29, &quot;主编,-1.0,1.0986122886681098&quot;)， 29就是&quot;主编&quot; 这个单词在 IDF字典中的序号。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;DataSet&amp;lt;Tuple2&amp;lt;Long, Row&amp;gt;&amp;gt; ordered = localSort(partitioned.f0, partitioned.f1, 1);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;open函数中会获取partitionCnt。然后计算出某一种类单词，其在本partition之前所有partition中，这类单词数目。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public void open(Configuration parameters) throws Exception {
                List &amp;lt;Tuple2 &amp;lt;Integer, Long&amp;gt;&amp;gt; bc = getRuntimeContext().getBroadcastVariable(&quot;partitionCnt&quot;);
                startIdx = 0L;
                int taskId = getRuntimeContext().getIndexOfThisSubtask();
                for (Tuple2 &amp;lt;Integer, Long&amp;gt; pcnt : bc) {
                        if (pcnt.f0 &amp;lt; taskId) {
                                        startIdx += pcnt.f1;
                        }
                }
}

bc = {ArrayList@10303}  size = 4
 0 = {Tuple2@10309} &quot;(0,12)&quot;  // 就是task0里面，这种单词有12个
 1 = {Tuple2@10310} &quot;(2,9)&quot;// 就是task1里面，这种单词有2个
 2 = {Tuple2@10311} &quot;(1,7)&quot;// 就是task2里面，这种单词有1个
 3 = {Tuple2@10312} &quot;(3,9)&quot;// 就是task3里面，这种单词有3个
// 如果本task id是4,则其startIdx为30。就是所有partition之中，它前面index所有单词的和。  
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后进行排序。&lt;code&gt;Collections.sort(valuesList, new RowComparator(field));&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;valuesList = {ArrayList@10405}  size = 9
 0 = {Row@10421} &quot;:,-1.0,1.0986122886681098&quot;
 1 = {Row@10422} &quot;主编,-1.0,1.0986122886681098&quot;
 2 = {Row@10423} &quot;国内,-1.0,1.0986122886681098&quot;
 3 = {Row@10424} &quot;文献,-1.0,1.0986122886681098&quot;
 4 = {Row@10425} &quot;李宜燮,-1.0,1.0986122886681098&quot;
 5 = {Row@10426} &quot;糖尿病,-1.0,1.0986122886681098&quot;
 6 = {Row@10427} &quot;美国,-1.0,1.0986122886681098&quot;
 7 = {Row@10428} &quot;谢恩,-1.0,1.0986122886681098&quot;
 8 = {Row@10429} &quot;象棋,-1.0,1.0986122886681098&quot;
  
  
// 最后返回时候，就是  (29, &quot;主编,-1.0,1.0986122886681098&quot;)，29就是“主编”这个单词在最终字典中的序号。
// 这个序号是startIdx + cnt，startIdx是某一种类单词，其在本partition之前所有partition中，这类单词数目。比如在本partition之前，这类单词有28个，则本partition中，从29开始计数。就是最终序列号
        for (Row row : valuesList) {
                out.collect(Tuple2.of(startIdx + cnt, row));
                cnt++; // 这里就是在某一类单词中，单调递增，然后赋值一个字典序列而已
        }  
cnt = 1
row = {Row@10336} &quot;主编,-1.0,1.0986122886681098&quot;
 fields = {Object[3]@10339} 
startIdx = 28
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;43-过滤&quot;&gt;4.3 过滤&lt;/h3&gt;
&lt;p&gt;最后还要进行过滤，如果文字个数超出了字典大小，就抛弃多余文字。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;ordered.filter(new FilterFunction&amp;lt;Tuple2&amp;lt;Long, Row&amp;gt;&amp;gt;() {
    @Override
    public boolean filter(Tuple2&amp;lt;Long, Row&amp;gt; value) {
        return value.f0 &amp;lt; vocabSize;
    }
})
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;0x05-生成模型&quot;&gt;0x05 生成模型&lt;/h2&gt;
&lt;p&gt;具体生成模型代码如下。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;DataSet&amp;lt;DocCountVectorizerModelData&amp;gt; resDocCountModel = ordered.filter(new FilterFunction&amp;lt;Tuple2&amp;lt;Long, Row&amp;gt;&amp;gt;() {
    @Override
    public boolean filter(Tuple2&amp;lt;Long, Row&amp;gt; value) {
        return value.f0 &amp;lt; vocabSize;
    }
}).mapPartition(new BuildDocCountModel(params)).setParallelism(1);
return resDocCountModel;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中关键类是 DocCountVectorizerModelData 和 BuildDocCountModel。&lt;/p&gt;
&lt;h3 id=&quot;51-doccountvectorizermodeldata&quot;&gt;5.1 DocCountVectorizerModelData&lt;/h3&gt;
&lt;p&gt;这是向量信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * Save the data for DocHashIDFVectorizer.
 *
 * Save a HashMap: index(MurMurHash3 value of the word), value(Inverse document frequency of the word).
 */
public class DocCountVectorizerModelData {
    public List&amp;lt;String&amp;gt; list;
    public String featureType;
    public double minTF;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;52-builddoccountmodel&quot;&gt;5.2 BuildDocCountModel&lt;/h3&gt;
&lt;p&gt;最终生成的模型信息如下，这个也就是之前样例代码给出的输出。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;modelData = {DocCountVectorizerModelData@10411} 
 list = {ArrayList@10409}  size = 37
  0 = &quot;{&quot;f0&quot;:&quot;9787310003969&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:19}&quot;
  1 = &quot;{&quot;f0&quot;:&quot;下册&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:20}&quot;
  2 = &quot;{&quot;f0&quot;:&quot;全&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:21}&quot;
  3 = &quot;{&quot;f0&quot;:&quot;华龄&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:22}&quot;
  4 = &quot;{&quot;f0&quot;:&quot;图解&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:23}&quot;
  5 = &quot;{&quot;f0&quot;:&quot;思&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:24}&quot;
  6 = &quot;{&quot;f0&quot;:&quot;成像&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:25}&quot;
  7 = &quot;{&quot;f0&quot;:&quot;旧书&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:26}&quot;
  8 = &quot;{&quot;f0&quot;:&quot;索引&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:27}&quot;
  9 = &quot;{&quot;f0&quot;:&quot;:&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:28}&quot;
  10 = &quot;{&quot;f0&quot;:&quot;主编&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:29}&quot;
  11 = &quot;{&quot;f0&quot;:&quot;国内&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:30}&quot;
  12 = &quot;{&quot;f0&quot;:&quot;文献&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:31}&quot;
  13 = &quot;{&quot;f0&quot;:&quot;李宜燮&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:32}&quot;
  14 = &quot;{&quot;f0&quot;:&quot;糖尿病&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:33}&quot;
  15 = &quot;{&quot;f0&quot;:&quot;美国&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:34}&quot;
  16 = &quot;{&quot;f0&quot;:&quot;谢恩&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:35}&quot;
  17 = &quot;{&quot;f0&quot;:&quot;象棋&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:36}&quot;
  18 = &quot;{&quot;f0&quot;:&quot;二手&quot;,&quot;f1&quot;:0.0,&quot;f2&quot;:0}&quot;
  19 = &quot;{&quot;f0&quot;:&quot;）&quot;,&quot;f1&quot;:0.6931471805599453,&quot;f2&quot;:1}&quot;
  20 = &quot;{&quot;f0&quot;:&quot;/&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:2}&quot;
  21 = &quot;{&quot;f0&quot;:&quot;出版社&quot;,&quot;f1&quot;:0.6931471805599453,&quot;f2&quot;:3}&quot;
  22 = &quot;{&quot;f0&quot;:&quot;（&quot;,&quot;f1&quot;:0.6931471805599453,&quot;f2&quot;:4}&quot;
  23 = &quot;{&quot;f0&quot;:&quot;入门&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:5}&quot;
  24 = &quot;{&quot;f0&quot;:&quot;医学&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:6}&quot;
  25 = &quot;{&quot;f0&quot;:&quot;文集&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:7}&quot;
  26 = &quot;{&quot;f0&quot;:&quot;正版&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:8}&quot;
  27 = &quot;{&quot;f0&quot;:&quot;版&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:9}&quot;
  28 = &quot;{&quot;f0&quot;:&quot;电磁&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:10}&quot;
  29 = &quot;{&quot;f0&quot;:&quot;选读&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:11}&quot;
  30 = &quot;{&quot;f0&quot;:&quot;中国&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:12}&quot;
  31 = &quot;{&quot;f0&quot;:&quot;书&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:13}&quot;
  32 = &quot;{&quot;f0&quot;:&quot;十二册&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:14}&quot;
  33 = &quot;{&quot;f0&quot;:&quot;南开大学&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:15}&quot;
  34 = &quot;{&quot;f0&quot;:&quot;文学&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:16}&quot;
  35 = &quot;{&quot;f0&quot;:&quot;郁达夫&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:17}&quot;
  36 = &quot;{&quot;f0&quot;:&quot;馆藏&quot;,&quot;f1&quot;:1.0986122886681098,&quot;f2&quot;:18}&quot;
 featureType = &quot;WORD_COUNT&quot;
 minTF = 1.0
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;0x06-预测&quot;&gt;0x06 预测&lt;/h2&gt;
&lt;p&gt;预测业务逻辑是DocCountVectorizerModelMapper&lt;/p&gt;
&lt;p&gt;首先我们可以看到 FeatureType，这个可以用来配置输出哪种信息。比如可以输出以下若干种：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public enum FeatureType implements Serializable {
    /**
     * IDF type, the output value is inverse document frequency.
     */
    IDF(
        (idf, termFrequency, tokenRatio) -&amp;gt; idf
    ),
    /**
     * WORD_COUNT type, the output value is the word count.
     */
    WORD_COUNT(
        (idf, termFrequency, tokenRatio) -&amp;gt; termFrequency
    ),
    /**
     * TF_IDF type, the output value is term frequency * inverse document frequency.
     */
    TF_IDF(
        (idf, termFrequency, tokenRatio) -&amp;gt; idf * termFrequency * tokenRatio
    ),
    /**
     * BINARY type, the output value is 1.0.
     */
    BINARY(
        (idf, termFrequency, tokenRatio) -&amp;gt; 1.0
    ),
    /**
     * TF type, the output value is term frequency.
     */
    TF(
        (idf, termFrequency, tokenRatio) -&amp;gt; termFrequency * tokenRatio
    );
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其次，在open函数中，会加载模型，比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;wordIdWeight = {HashMap@10838}  size = 37
 &quot;医学&quot; -&amp;gt; {Tuple2@10954} &quot;(6,1.0986122886681098)&quot;
 &quot;选读&quot; -&amp;gt; {Tuple2@10956} &quot;(11,1.0986122886681098)&quot;
 &quot;十二册&quot; -&amp;gt; {Tuple2@10958} &quot;(14,1.0986122886681098)&quot;
...
 &quot;华龄&quot; -&amp;gt; {Tuple2@11022} &quot;(22,1.0986122886681098)&quot;
 &quot;索引&quot; -&amp;gt; {Tuple2@11024} &quot;(27,1.0986122886681098)&quot;
featureType = {DocCountVectorizerModelMapper$FeatureType@10834} &quot;WORD_COUNT&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，预测时候调用predictSparseVector函数，会针对输入 &lt;code&gt;二手 旧书 : 医学 电磁 成像&lt;/code&gt;来进行匹配。生成稀疏向量SparseVector。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;0|$37$0:1.0 6:1.0 10:1.0 25:1.0 26:1.0 28:1.0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上表示那几个单词 分别对应0 6 10 25 26 28 这几个字典中对应序号的单词，其在本句对应的出现数目都是一个。&lt;/p&gt;
&lt;h2 id=&quot;0x07-参考&quot;&gt;0x07 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/091383e86825&quot;&gt;Tf-Idf详解及应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;https://github.com/fxsjy/jieba&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 05 Jun 2020 13:52:00 +0000</pubDate>
<dc:creator>罗西的思考</dc:creator>
<og:description>Alink 是阿里巴巴基于实时计算引擎 Flink 研发的新一代机器学习算法平台，是业界首个同时支持批式算法、流式算法的机器学习平台。TF-IDF（term frequency–inverse doc</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/rossiXYZ/p/13052449.html</dc:identifier>
</item>
<item>
<title>“造轮运动”之 ORM框架系列（三）~ 干货呈上 - 攻城的狮</title>
<link>http://www.cnblogs.com/MaMaNongNong/p/12896787.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MaMaNongNong/p/12896787.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Auto Fill Adapter
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; =&amp;gt; Fill DataRow to Entity
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; EntityFillAdapter&amp;lt;Entity&amp;gt;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;DataRow, Entity&amp;gt; funcCache =&lt;span&gt; GetFactory();
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Entity AutoFill(DataRow row)
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(row);
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;DataRow, Entity&amp;gt;&lt;span&gt; GetFactory()
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;#region&lt;/span&gt; get Info through Reflection
&lt;span&gt; 17&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; entityType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Entity);
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rowType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DataRow);
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; convertType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Convert);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; typeType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Type);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; columnCollectionType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DataColumnCollection);
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; getTypeMethod = typeType.GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BindingFlags.Static | BindingFlags.Public, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) }, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; changeTypeMethod = convertType.GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChangeType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BindingFlags.Static | BindingFlags.Public, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;object&lt;/span&gt;), &lt;span&gt;typeof&lt;/span&gt;(Type) }, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; containsMethod = columnCollectionType.GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Contains&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rowIndexerGetMethod = rowType.GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get_Item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BindingFlags.Instance | BindingFlags.Public, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) }, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;new&lt;/span&gt; ParameterModifier(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) });
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; columnCollectionIndexerGetMethod = columnCollectionType.GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get_Item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BindingFlags.Instance | BindingFlags.Public, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;) }, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;new&lt;/span&gt; ParameterModifier(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) });
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; entityIndexerSetMethod = entityType.GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;set_Item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BindingFlags.Instance | BindingFlags.NonPublic, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;), &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;object&lt;/span&gt;) }, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; properties = entityType.GetProperties(BindingFlags.Instance |&lt;span&gt; BindingFlags.Public);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;#region&lt;/span&gt; some Expression class that can be repeat used
&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;DataRow row&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rowDeclare = Expression.Parameter(rowType, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Student entity&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; entityDeclare = Expression.Parameter(entityType, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;entity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Type propertyType&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; propertyTypeDeclare = Expression.Parameter(&lt;span&gt;typeof&lt;/span&gt;(Type), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;propertyType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;new Student()&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; newEntityExpression =&lt;span&gt; Expression.New(entityType);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row == null&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rowEqualnullExpression = Expression.Equal(rowDeclare, Expression.Constant(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row.Table.Columns&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rowTableColumns = Expression.Property(Expression.Property(rowDeclare, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Table&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;int loopIndex&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; loopIndexDeclare = Expression.Parameter(&lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loopIndex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row.Table.Columns[loopIndex].ColumnName&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; columnNameExpression = Expression.Property(Expression.Call(rowTableColumns, columnCollectionIndexerGetMethod, loopIndexDeclare), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ColumnName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;break;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;             LabelTarget labelBreak =&lt;span&gt; Expression.Label();
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;default(Student)&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; defaultEntityValue =&lt;span&gt; Expression.Default(entityType);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; setRowNotNullBlockExpressions = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Expression&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                         
&lt;span&gt; 56&lt;/span&gt;             &lt;span&gt;#region&lt;/span&gt; entity = new Student();loopIndex = 0;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            setRowNotNullBlockExpressions.Add(Expression.Assign(entityDeclare, newEntityExpression));
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             setRowNotNullBlockExpressions.Add(Expression.Assign(loopIndexDeclare, Expression.Constant(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;#region&lt;/span&gt; loop Fill DataRow's field to Entity Indexer
&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;             * while (true)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;             * {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;             *     if (loopIndex &amp;lt; row.Table.Columns.Count)
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;             *     {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;             *         entity[row.Table.Columns[loopIndex].ColumnName] = row[row.Table.Columns[loopIndex].ColumnName];
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;             *         loopIndex++;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;             *     }
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;             *     else break;
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;             * } 
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;              &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;            setRowNotNullBlockExpressions.Add(
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                Expression.Loop(
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;                    Expression.IfThenElse(
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                         Expression.LessThan(loopIndexDeclare, Expression.Property(rowTableColumns, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;                        Expression.Block(
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;                            Expression.Call(entityDeclare, entityIndexerSetMethod, columnNameExpression, Expression.Call(rowDeclare, rowIndexerGetMethod, columnNameExpression)),
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;                            Expression.PostIncrementAssign(loopIndexDeclare)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;                        ),
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                        Expression.Break(labelBreak)
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;                    ),
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;                    labelBreak
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;                )
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;#region&lt;/span&gt; assign for Entity property
&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; propertyInfo &lt;span&gt;in&lt;/span&gt;&lt;span&gt; properties)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; columnAttr = propertyInfo.GetCustomAttribute(&lt;span&gt;typeof&lt;/span&gt;(ColumnAttribute), &lt;span&gt;true&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ColumnAttribute;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; no column , no translation&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; == columnAttr) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (propertyInfo.CanWrite)
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; columnName = Expression.Constant(columnAttr.GetName(propertyInfo.Name), &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;entity.Id&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; propertyExpression =&lt;span&gt; Expression.Property(entityDeclare, propertyInfo);
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row[&quot;Id&quot;]&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; value =&lt;span&gt; Expression.Call(rowDeclare, rowIndexerGetMethod, columnName);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;default(string)&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; defaultValue =&lt;span&gt; Expression.Default(propertyInfo.PropertyType);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row.Table.Columns.Contains(&quot;Id&quot;)&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; checkIfContainsColumn =&lt;span&gt; Expression.Call(rowTableColumns, containsMethod, columnName);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;!row[&quot;Id&quot;].Equals(DBNull.Value)&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; checkDBNull =&lt;span&gt; Expression.NotEqual(value, Expression.Constant(System.DBNull.Value));
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                     
&lt;span&gt;114&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; propertyTypeName = Expression.Constant(propertyInfo.PropertyType.ToString(), &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt;                     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;                     * if (row.Table.Columns.Contains(&quot;Id&quot;) &amp;amp;&amp;amp; !row[&quot;Id&quot;].Equals(DBNull.Value))
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;                     * {
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;                     *     propertyType = Type.GetType(&quot;System.String&quot;);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;                     *     entity.Id = (string)Convert.ChangeType(row[&quot;Id&quot;], propertyType);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;                     * }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;                     * else
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;                     *     entity.Id = default(string);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;                    setRowNotNullBlockExpressions.Add(
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; 
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;                        Expression.IfThenElse(
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;                            Expression.AndAlso(checkIfContainsColumn, checkDBNull),
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;                            Expression.Block(
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;                                Expression.Assign(propertyTypeDeclare, Expression.Call(getTypeMethod, propertyTypeName)),
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;                                Expression.Assign(propertyExpression, Expression.Convert(Expression.Call(changeTypeMethod, value, propertyTypeDeclare), propertyInfo.PropertyType))
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;                            ),
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;                            Expression.Assign(propertyExpression, defaultValue)
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;                        )
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                    );
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; 
&lt;span&gt;139&lt;/span&gt;             &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; checkIfRowIsNull =&lt;span&gt; Expression.IfThenElse(
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;                rowEqualnullExpression,
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;                Expression.Assign(entityDeclare, defaultEntityValue),
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;                Expression.Block(setRowNotNullBlockExpressions)
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; 
&lt;span&gt;147&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; body =&lt;span&gt; Expression.Block(
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; 
&lt;span&gt;149&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt;&lt;span&gt;[] { entityDeclare, loopIndexDeclare, propertyTypeDeclare },
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;                checkIfRowIsNull,
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;                 entityDeclare   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return Student;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; 
&lt;span&gt;154&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Expression.Lambda&amp;lt;Func&amp;lt;DataRow, Entity&amp;gt;&amp;gt;&lt;span&gt;(body, rowDeclare).Compile();
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt;     &lt;span&gt;#region&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;public class Student : EntityDesign.EntityBase
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    [Column]
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    public string Id { get; set; }
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; 
&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    [Column(&quot;StudentName&quot;)]
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    public string Name { get; set; }
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt;/this is the template of &quot;GetFactory()&quot; created.&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;public static Student StudentFillAdapter(DataRow row)
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Student entity;
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    int loopIndex;
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Type propertyType;
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; 
&lt;span&gt;174&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    if (row == null)
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        entity = default(Student);
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    else
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        entity = new Student();
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        loopIndex = 0;
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; 
&lt;span&gt;181&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        while (true)
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            if (loopIndex &amp;lt; row.Table.Columns.Count)
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;                entity[row.Table.Columns[loopIndex].ColumnName] = row[row.Table.Columns[loopIndex].ColumnName];
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;                loopIndex++;
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            else break;
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; 
&lt;span&gt;191&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (row.Table.Columns.Contains(&quot;Id&quot;) &amp;amp;&amp;amp; !row[&quot;Id&quot;].Equals(DBNull.Value))
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            propertyType = Type.GetType(&quot;System.String&quot;);
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            entity.Id = (string)Convert.ChangeType(row[&quot;Id&quot;], propertyType);
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        else
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            entity.Id = default(string);
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; 
&lt;span&gt;199&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (row.Table.Columns.Contains(&quot;StudentName&quot;) &amp;amp;&amp;amp; !row[&quot;StudentName&quot;].Equals(DBNull.Value))
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            propertyType = Type.GetType(&quot;System.String&quot;);
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            entity.Name = (string)Convert.ChangeType(row[&quot;StudentName&quot;], propertyType);
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        else
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            entity.Name = default(string);
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; 
&lt;span&gt;208&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return entity;
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;210&lt;/span&gt;     &lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 05 Jun 2020 13:13:00 +0000</pubDate>
<dc:creator>攻城的狮</dc:creator>
<og:description>这一趴里面，我就来正式介绍一下CoffeeSQL的干货。 首先要给CoffeeSQL来个定位：最开始就是由于本人想要了解ORM框架内部的原理，所以就四处搜寻有关的博客与学习资料，就是在那个夏天，在博客</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/MaMaNongNong/p/12896787.html</dc:identifier>
</item>
</channel>
</rss>