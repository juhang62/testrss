<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>C#相等性 - “==” - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/10659745.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/10659745.html</guid>
<description>&lt;p&gt;今天写一下C#里的“==”这个操作符。&lt;/p&gt;

&lt;h2&gt;假象&lt;/h2&gt;
&lt;p&gt;在刚学C#的时候，我以为C#里的==和.NET里的object.Equals()方法是一样的，就是一个语法糖而已。其实它们的底层机制是不一样的，只不过它们给出的结果在大多数情况下恰好相同。&lt;/p&gt;
&lt;p&gt;看个例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406135324846-27086878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这俩方法给出的结果都是True。&lt;/p&gt;
&lt;p&gt;看起来这两种方式做了同样的动作，就是比较两个值。&lt;/p&gt;

&lt;h2&gt;底层原理&lt;/h2&gt;
&lt;p&gt;Build项目，然后使用ildasm看一下生成的il语言（ildasm位置大致在：C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.7.2 Tools）。&lt;/p&gt;
&lt;p&gt;使用ildasm打开生成的dll，首先查看Program类里面的ByEqualMethod方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406135641161-2124544684.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到C#源码里调用Equals()的地方直接被翻译成il语言里相应的Equals()方法了。。。。&lt;/p&gt;

&lt;p&gt;然后看一下ByEqualOperator这个方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406140124645-1752819154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在C#里该方法使用了==操作符，而在il语言里，我们只看到了一个叫做ceq的指令。ceq的意思是compare for equality，就是比较两个值是否相等，在运行时，它将会被转换为硬件上的比较，也许用的是CPU的寄存器。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;针对原始类型，C#的==操作符并没有使用.NET里提供的那些Equals方法，这时==操作符使用专用的汇编语言指令来进行判断相等性的&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;


&lt;p&gt;这里的引用类型不包含string。&lt;/p&gt;
&lt;p&gt;看例子，这里我使用==来比较自定义类MyClass的两个实例是否相等：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406200304364-1556282373.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而结果是两个False：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406200326604-859419036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;使用ildasm看一下ByEqualMethod()这个方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406200617230-1163729793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，a.Equals(b)调用的是virtual的object.Equals()方法，参数类型是object，这个应该都能理解。&lt;/p&gt;

&lt;p&gt;再看一下ByEqualOperator()方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406200804326-1801323425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;== 操作符翻译过来还是使用ceq对两个参数进行的比较，和之前int类型的例子一样，除了参数类型不同。&lt;/p&gt;
&lt;p&gt;所以这应该也是使用CPU的硬件来进行判断相等性的，那么像这种引用类型是怎么通过CPU硬件来比较的呢？因为这两个类型是引用类型，所以c1，c2两个变量里面保存的是它们对应的实例在托管堆中的内存地址，也就是两个数字而已，所以当然可以进行比较了。&lt;/p&gt;

&lt;h2&gt;string&lt;/h2&gt;
&lt;p&gt;我们都知道，==用来判断string相等性的时候，比较的是string值，而不是引用地址。&lt;/p&gt;
&lt;p&gt;看例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406201544240-340783113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果是两个True：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406201621781-1938033157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;首先，使用string.Copy()方法可以保证str1和str2是两个不同的引用。&lt;/p&gt;

&lt;p&gt;使用ildasm，先看ByEqualMethod()：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406201922087-338180325.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这里a.Equals(b)实际调用的是string实现的IEquatable&amp;lt;T&amp;gt;接口的Equals方法，它的参数是string。&lt;/p&gt;

&lt;p&gt;再看一下ByEqualOperator():&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406202233403-1361602261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这次没有使用ceq指令，而是调用了一个叫做op_Equality()的方法，这是个什么方法？&lt;/p&gt;
&lt;p&gt;其实它是C#里 == 操作符的一个重载：static bool op_Equality(string, string)。&lt;/p&gt;

&lt;p&gt;在C#里，当你定义一个类型的时候，你可以对==操作符进行重载，格式大概如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406202628318-974979426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为il语言里没有操作符的概念，而只有方法才能作为操作符的重载而存在于il里，所以这里使用的是静态方法，它会被翻译为一个特殊的静态方法叫做op_Equality()。&lt;/p&gt;

&lt;p&gt;我们也可以直接看一下string类的源码，里面也是这样对==进行重载的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406203159864-1469691895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，重载了==，也需要重载 !=。&lt;/p&gt;

&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;总结一下，使用==来判断引用类型的相等性，需要按下面的思路顺序进行考虑：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 该类型是否对 == 进行了重载？如果是，那就是用该重载方法；否则看2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 使用ceq指令来比较引用指向的内存地址&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;另外还需要再提醒一下的是，string类的==和Equals()方法永远都会给出一样的结果。&lt;/p&gt;
&lt;p&gt;还有一个原则就是，当你改变某个类型的相等性判断方法是，要确保==和Equals()方法做的是同样的事情。&lt;/p&gt;


&lt;h2&gt;非原始类型&lt;/h2&gt;
&lt;p&gt;看例子，这里有两个值类型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190406204207667-536298329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我使用==对它们进行比较的时候，直接报错了。&lt;/p&gt;
&lt;p&gt;因为默认情况下，不可以使用==来对非原始类型的值类型进行相等性判断。要想使用==，就必须提供重载方法。&lt;/p&gt;


&lt;p&gt;直接看例子：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413062941525-2032191346.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;119&quot; data-height=&quot;59&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413062947841-48413464.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;针对这两个tuple，我做了三个相等性判断，通过第一个ReferenceEquals方法我们可以知道这两个tuple变量指向不同的实例。&lt;/p&gt;
&lt;p&gt;而tp1.Equals(tp2)返回的是True，这是因为Tuple类（引用类型）重写了object.Equals()方法，从而比较的是Tuple里面的值。&lt;/p&gt;
&lt;p&gt;尽管微软为Tuple把object.Equals()方法重写了，但是它并没有处理==操作符，所以==还是在比较引用的相等性，所以会返回False。&lt;/p&gt;
&lt;p&gt;这样做确实挺让人迷惑的。。。&lt;/p&gt;



&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;655&quot; data-height=&quot;179&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413062954221-1012551421.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;通常情况下，尽量使用==操作符，但是有时候==不行，需要使用object.Equals()方法，例如涉及到继承或者泛型的时候。&lt;/p&gt;


&lt;p&gt;直接看例子：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;444&quot; data-height=&quot;153&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063007646-991045183.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这两个字符串我做了4个相等性判断，其结果为：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063014441-1814227889.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;无论是object的virtual Equals()方法，还是==操作符，还是object的static Equals()方法，都会返回True。&lt;/p&gt;
&lt;p&gt;但是我做一下小小的改动：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;446&quot; data-height=&quot;166&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063022812-1183801503.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我们看看结果会不会变：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;165&quot; data-height=&quot;79&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063031526-676247351.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;结果发生了变化，str1==str2这次返回了False。&lt;/p&gt;
&lt;p&gt;这是因为==操作符不是virtual的，它相当于是static的，而static的是无法virtual的。&lt;/p&gt;
&lt;p&gt;现在 str1 == str2 这句话，我们比较的是两个类型为object的变量，尽管我们知道它们都是string，但是编译器并不知道。而针对于非virtual的方法或操作符，到底调用哪个方法是在编译时决定的，因为这两个变量的类型是object，所以编译器会选择用来比较object的代码，而object又没有==操作符的重载，所以==做的就是比较引用的相等性，而这两个string是不同的实例，所以结果会返回False。&lt;/p&gt;
&lt;p&gt;所以(object)x == (object)y和ReferenceEquals(x, y)的结果总是一样的。&lt;/p&gt;
&lt;p&gt;针对涉及继承的相等性判断，最好还是使用object.Equals()方法，而不是==操作符。&lt;/p&gt;


&lt;p&gt;另一种不适合使用==操作符的情景是涉及泛型的时候，直接看例子：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;374&quot; data-height=&quot;87&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063142694-1746812397.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这个泛型方法直接报错了，因为==操作符无法应用于这两个操作数T，T可以是任何类型，例如T是非原始类型的struct，那么==就不可用。我们无法为泛型指定约束让其实现某个操作符。针对这个例子，我可以这样做，来保证可以编译：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;381&quot; data-height=&quot;130&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063147604-1279414730.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;现在T是引用类型了，代码可以编译了。我们使用以下该方法：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;548&quot; data-height=&quot;100&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063157585-1824563975.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;按理说这就相当于调用了Equals()方法，结果应该返回True。而实际结果是：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063207352-2151198.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;之所以返回了False，是因为泛型方法里的==操作符比较的是引用，而这又是因为尽管编译器知道可以把==操作符应用于类型T，但是它仍然不知道具体是哪个类型T会重载该操作符，所以它会假设T不会重载==操作符，从而对待这两个操作数如同object类型一样并编译，所以判断的是引用相等性。&lt;/p&gt;
&lt;p&gt;所以泛型方法不会选择任何的操作符重载，它对待泛型类就像对待object类型一样。&lt;/p&gt;
&lt;p&gt;综上，针对泛型方法，应该使用Equals()方法，而不是==操作符。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/986268/201904/986268-20190413063214568-569424894.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Fri, 12 Apr 2019 22:33:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<og:description>今天写一下C#里的“==”这个操作符。 原始类型 假象 在刚学C#的时候，我以为C#里的==和.NET里的object.Equals()方法是一样的，就是一个语法糖而已。其实它们的底层机制是不一样的，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/10659745.html</dc:identifier>
</item>
<item>
<title>[java核心技术01]__继承与多态、重载与重写、抽象类与接口 - 小舍先生</title>
<link>http://www.cnblogs.com/gemuxiaoshe/p/10699596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gemuxiaoshe/p/10699596.html</guid>
<description>&lt;ul&gt;&lt;li&gt;前言&lt;br/&gt;前面简单学习了面向对象的知识,知道了其两个重要的特性,继承与多态,今天就围绕着面向对象的这两个特性,将继承与多态及相关的几个几个定义重载与重写,抽象类与接口的相关知识具体学习一下.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;类的继承&lt;/strong&gt;&lt;br/&gt;关于类的继承定义,前面多少都有些了解了,可以简单的理解为父亲和儿子的关系,儿子会继承父亲的属性和方法,父亲就是父类,儿子就是子类.他们的关系就是继承关系.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;继承是面向对象的重要观念,它的作用是巨大的,它使得程序架构具有一定的弹性,在程序中复用一些已经定义完善的类可以减少软件的开发周期,也可以提高软件的可维护性.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;extends和implements关键字&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在Java语言中继承可以使用 extends 和 implements (用于继承接口)这两个关键字来实现.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;需要注意的是JAVA语言所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 java.lang 包中，所以不需要 import）祖先类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java语言中,类的继承是单一性的,即entends只能单一继承一个类.而implements的存在就是变相的实现了多继承,即一个类可以继承多个接口.接口会在后面讲到.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实例代码&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package java02.day_4_12;

import My_tools.Boundlinetool;
import My_tools.FormatTimetool;

/**
 * @outhor xiaoshe
 * @date 2019/4/12  - @time 21:36
 */public class sty_extends {
    public
 static void main(String[] args) {
        father father = new father(&quot;小舍的父亲&quot;, &quot;工人&quot;);
        son son = new son(&quot;小舍&quot;, &quot;男&quot;, &quot;程序员&quot;);
        System.out.println(father.getName());
        father.work();
        Boundlinetool.Minus();
        System.out.println(son.getName());
        son.work();
    }
}
// 构建父类
class father{
    private String name;
    private String work;
    // 成员方法
    public String getName() {
        return name;
    }
    public String getWork() {
        return work;
    }
    public void setName(String name) {
        this.name = name;
    }
    public void setWork(String work) {
        this.work = work;
    }
    //构造方法
    public  father(String name,String work){
        this.work=work;
        this.name=name;
    }
    // 新增方法
    public void work(){
        System.out.println(this.work);
    }
}
// 构建子类
class son extends father{  // 通过extends 继承父类
     private String sex;  // 添加新属性.

    // 重写构造方法,属性不仅继承了父类属性,还将新属性添加其中.
    public son(String name, String sex,String work) {
        super(name, work);
        this.sex=sex;
    }
    @Override
    // 直接调用父类的成员方法,获取和设置成员属性.
    public String getName() {
        return super.getName();
    }
    // 重写父类的work方法
    @Override
    public void work(){
        System.out.println(&quot;子类&quot;+super.getName()+&quot;的工作是:&quot;); // 重写内容
       super.work();  // 直接调用父类方法.
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8067684-345be2a0c3c7c75e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。&lt;/p&gt;
&lt;p&gt;我们在类的继承中知道子类不仅可以继承父类的属性方法,还可以定义自己的属性和方法,并且还可以对父类的方法进行重写,来实现自己的需求.重写在面向对象的思想里占重要的地位.它使程序具有了非常良好的扩展性.可以说能够通过重写方法解决一切问题.重写可以说是继承的一种特性.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; // 重写父类的work方法
    @Override
    public void work(){
        System.out.println(&quot;子类&quot;+super.getName()+&quot;的工作是:&quot;); // 重写内容
       super.work();  // 直接调用父类方法.
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重载就是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。&lt;/p&gt;
&lt;p&gt;就是说在类中方法的构建时,可以构建方法名相同而参数不同的方法,这就是方法的重载,重载在类的构造方法中使用的十分常见,我们经常会使用到某些类的构造方法,而且我们会发现通常情况下构造方法都会有很多个,可以通过不同类型的参数构建对象.这就是方法的重载.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8067684-9bd7dc4e85c1a819.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;多态就是同一个行为具有多个不同表现形式或形态的能力。多态就是同一个接口，使用不同的实例而执行不同操作.其实继承,重写就是多态的一种体现,我们可以通过不同的子类重写父类的同一个方法来实现不同的结果.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;多态的特性:
&lt;ol&gt;&lt;li&gt;消除类型之间的耦合关系&lt;/li&gt;
&lt;li&gt;可替换性&lt;/li&gt;
&lt;li&gt;可扩充性&lt;/li&gt;
&lt;li&gt;接口性&lt;/li&gt;
&lt;li&gt;灵活性&lt;/li&gt;
&lt;li&gt;简化性&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;多态存在的必要条件,就是继承,重写,父类引用指向子类对象.当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;多态的好处：&lt;br/&gt;可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。&lt;br/&gt;多态最常见的实现方式就是通过重写,或继承接口然后实现接口里的方法(其实就是通过重写接口里的方法来实现不同的作用).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抽象类和接口&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;package java02.day_4_12;

/**
 * @outhor xiaoshe
 * @date 2019/4/13  - @time 0:55
 * 抽象类
 */
public class sty_Polymorphism {
    public static void main(String[] args) {
        woman woman = new woman(&quot;女&quot;, &quot;黄&quot;); // 尽管不能实例抽象类,但可以实例其子类对象.
        System.out.println(woman.getSex()); // 可以直接调用抽象类允许的方法.
        System.out.println( woman.getColor()); // 可以直接调用抽象类允许的方法.
    }
}
// 定义抽象类人类
abstract class humanity{  // abstact关键字用来定义抽象类
    private String sex;
    private String color;
    public String getSex() {
        return sex;
    }
    public String getColor() {
        return color;
    }
    public void setSex(String sex) {
        this.sex = sex;
    }
    public void setColor(String color) {
        this.color = color;
    }
   humanity(String sex,String color){  //构造方法
        this.color=color;
        this.sex=sex;
   }
    @Override
    public String toString() {  //重写toString方法
        return(&quot;性别:&quot;+this.sex+&quot;肤色:&quot;+this.color);
    }
}
class woman extends humanity{  // 继承抽象类.woman类可以作为humanity类的一个对象,这就是向上转型.
    woman(String sex, String color) {  // 必须要有构造方法.
        super(sex, color);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;需要注意的是:接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。&lt;/li&gt;
&lt;li&gt;除非实现接口的类是抽象类，否则当该类继承这个接口后要定义接口中的所有方法。&lt;/li&gt;
&lt;li&gt;接口同样无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接口和类的区别:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;接口不能用于实例化对象。&lt;/li&gt;
&lt;li&gt;接口没有构造方法。&lt;/li&gt;
&lt;li&gt;接口中所有的方法必须是抽象方法。&lt;/li&gt;
&lt;li&gt;接口不能包含成员变量，除了 static 和 final 变量。&lt;/li&gt;
&lt;li&gt;接口不是被类继承了，而是要被类实现。&lt;/li&gt;
&lt;li&gt;接口支持多继承。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接口的特性:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract.&lt;/li&gt;
&lt;li&gt;接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量&lt;/li&gt;
&lt;li&gt;接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;抽象类和接口的区别:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。&lt;/li&gt;
&lt;li&gt;抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。&lt;/li&gt;
&lt;li&gt;接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。&lt;/li&gt;
&lt;li&gt;一个类只能继承一个抽象类，而一个类却可以实现多个接口。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;关于抽象方法:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;抽象方法就是只有方法名,而没有实现方法的方法体,需要在实现类里重写方法体来实现的方法.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public void work(String work);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接口的定义:&lt;br/&gt;和了id定义类似的接口通过inteface关键字来定义.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;interface man{
public void eat();
public void work();
public void play();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接口默认就是抽象的(abstract),所以不能实例化,接口的使用,必须被继承,并且其中的方法必须全部被定义实现.才能使用.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实例代码&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package java02.day_4_12;

/**
 * @outhor xiaoshe
 * @date 2019/4/13  - @time 1:35
 */
public class sty_interface {
    public static void main(String[] args) {
        // 然后可以通过实例化接口的实现类的对象,来调用其方法,
        achieveman achieveman = new achieveman();
        achieveman.eat();
        achieveman.work();
    }
}
// 定义一个man接口
interface man{
    public void eat();  // 抽象方法
    public void work();
}
class achieveman implements man {
// 继承接口后,接口内的方法必须的全部实现
    @Override
    public void eat() {
        System.out.println(&quot;男人吃饭&quot;);
    }
    @Override
    public void work() {
        System.out.println(&quot;男人工作&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;更新时间:&lt;br/&gt;2019-4-13&lt;br/&gt;1:49&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 17:56:00 +0000</pubDate>
<dc:creator>小舍先生</dc:creator>
<og:description>前言 前面简单学习了面向对象的知识,知道了其两个重要的特性,继承与多态,今天就围绕着面向对象的这两个特性,将继承与多态及相关的几个几个定义重载与重写,抽象类与接口的相关知识具体学习一下. 类的继承 关</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gemuxiaoshe/p/10699596.html</dc:identifier>
</item>
<item>
<title>Java基础篇——JVM之GC原理（干货满满） - 会炼钢的小白龙</title>
<link>http://www.cnblogs.com/baixianlong/p/10697554.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baixianlong/p/10697554.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;原创不易，如需转载，请注明出处&lt;a href=&quot;https://www.cnblogs.com/baixianlong/p/10697554.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/baixianlong/p/10697554.html&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt; &lt;strong&gt;，多多支持哈！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;一什么是gc&quot;&gt;一、什么是GC？&lt;/h2&gt;
&lt;p&gt;GC是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。Java程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一:System.gc() 或Runtime.getRuntime().gc()。&lt;/p&gt;
&lt;h2 id=&quot;二哪些内存需要回收&quot;&gt;二、哪些内存需要回收？&lt;/h2&gt;
&lt;p&gt;哪些内存需要回收是垃圾回收机制第一个要考虑的问题，所谓“要回收的垃圾”无非就是那些不可能再被任何途径使用的对象。那么如何找到这些对象？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;引用计数法：这种算法不能解决对象之间相互引用的情况，所以这种方法不靠谱&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可达性分析法：这个算法的基本思想是通过一系列称为“GC Roots”的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链（即GC Roots到对象不可达）时，则证明此对象是不可用的。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;那么问题又来了，如何选取GCRoots对象呢？在Java语言中，可以作为GCRoots的对象包括下面几种：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。&lt;/li&gt;
&lt;li&gt;方法区中的类静态属性引用的对象。&lt;/li&gt;
&lt;li&gt;方法区中常量引用的对象。&lt;/li&gt;
&lt;li&gt;本地方法栈中JNI(Native方法)引用的对象。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面给出一个GCRoots的例子，如下图，为GCRoots的引用链，obj8、obj9、obj10都没有到GCRoots对象的引用链，所以会进行回收。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/11/5caf58627e931.png&quot; alt=&quot;可达.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;三四种引用状以及基于可达性分析的内存回收原理&quot;&gt;三、四种引用状以及基于可达性分析的内存回收原理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/11/5caf62e756c0d.png&quot; alt=&quot;引用.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于可达性分析算法而言，未到达的对象并非是“非死不可”的，若要宣判一个对象死亡，至少需要经历两次标记阶段。&lt;/p&gt;
&lt;ol readability=&quot;8&quot;&gt;&lt;li&gt;如果对象在进行可达性分析后发现没有与GCRoots相连的引用链，则该对象被第一次标记并进行一次筛选，筛选条件为是否有必要执行该对象的finalize方法，若对象没有覆盖finalize方法或者该finalize方法是否已经被虚拟机执行过了，则均视作不必要执行该对象的finalize方法，即该对象将会被回收。反之，若对象覆盖了finalize方法并且该finalize方法并没有被执行过，那么，这个对象会被放置在一个叫F-Queue的队列中，之后会由虚拟机自动建立的、优先级低的Finalizer线程去执行，而虚拟机不必要等待该线程执行结束，即虚拟机只负责建立线程，其他的事情交给此线程去处理。&lt;/li&gt;
&lt;li readability=&quot;19&quot;&gt;
&lt;p&gt;对F-Queue中对象进行第二次标记，如果对象在finalize方法中拯救了自己，即关联上了GCRoots引用链，如把this关键字赋值给其他变量，那么在第二次标记的时候该对象将从“即将回收”的集合中移除，如果对象还是没有拯救自己，那就会被回收。如下代码演示了一个对象如何在finalize方法中拯救了自己，然而，它只能拯救自己一次，第二次就被回收了。具体代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; public class GC { 

     public static GC SAVE_HOOK = null; 

     public static void main(String[] args) throws InterruptedException {
         // 新建对象，因为SAVE_HOOK指向这个对象，对象此时的状态是(reachable,unfinalized)
         SAVE_HOOK = new GC(); 
         //将SAVE_HOOK设置成null，此时刚才创建的对象就不可达了，因为没有句柄再指向它了，对象此时状态是(unreachable，unfinalized)
         SAVE_HOOK = null; 
         //强制系统执行垃圾回收，系统发现刚才创建的对象处于unreachable状态，并检测到这个对象的类覆盖了finalize方法，因此把这个对象放入F-Queue队列，由低优先级线程执行它的finalize方法，此时对象的状态变成(unreachable, finalizable)或者是(finalizer-reachable,finalizable)
         System.gc(); 
         // sleep，目的是给低优先级线程从F-Queue队列取出对象并执行其finalize方法提供机会。在执行完对象的finalize方法中的super.finalize()时，对象的状态变成(unreachable,finalized)状态，但接下来在finalize方法中又执行了SAVE_HOOK = this;这句话，又有句柄指向这个对象了，对象又可达了。因此对象的状态又变成了(reachable, finalized)状态。
         Thread.sleep(500);
         // 这里楼主说对象处于(reachable,finalized)状态应该是合理的。对象的finalized方法被执行了，因此是finalized状态。又因为在finalize方法是执行了SAVE_HOOK=this这句话，本来是unreachable的对象，又变成reachable了。
         if (null != SAVE_HOOK) { //此时对象应该处于(reachable, finalized)状态 
             // 这句话会输出，注意对象由unreachable，经过finalize复活了。
             System.out.println(&quot;Yes , I am still alive&quot;); 
         } else { 
             System.out.println(&quot;No , I am dead&quot;); 
         } 
         // 再一次将SAVE_HOOK放空，此时刚才复活的对象，状态变成(unreachable,finalized)
         SAVE_HOOK = null; 
         // 再一次强制系统回收垃圾，此时系统发现对象不可达，虽然覆盖了finalize方法，但已经执行过了，因此直接回收。
         System.gc(); 
         // 为系统回收垃圾提供机会
         Thread.sleep(500); 
         if (null != SAVE_HOOK) { 
             // 这句话不会输出，因为对象已经彻底消失了。
             System.out.println(&quot;Yes , I am still alive&quot;); 
         } else { 
             System.out.println(&quot;No , I am dead&quot;); 
         } 
     } 

     @Override 
     protected void finalize() throws Throwable { 
         super.finalize(); 
         System.out.println(&quot;execute method finalize()&quot;); 
        // 这句话让对象的状态由unreachable变成reachable，就是对象复活
         SAVE_HOOK = this; 
     } 
 }  &lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    leesf
    null
    finalize method executed!
    leesf
    yes, i am still alive :)
    no, i am dead : (&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　由结果可知，该对象拯救了自己一次，第二次没有拯救成功，因为对象的finalize方法最多被虚拟机调用一次。此外，从结果我们可以得知，一个堆对象的this（放在局部变量表中的第一项）引用会永远存在，在方法体内可以将this引用赋值给其他变量，这样堆中对象就可以被其他变量所引用，即不会被回收。&lt;/p&gt;
&lt;h2 id=&quot;四方法区的垃圾回收&quot;&gt;四、方法区的垃圾回收&lt;/h2&gt;
&lt;p&gt;1、方法区的垃圾回收主要回收两部分内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;废弃常量&lt;/li&gt;
&lt;li&gt;无用的类&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、既然进行垃圾回收，就需要判断哪些是废弃常量，哪些是无用的类？&lt;/p&gt;
&lt;h2 id=&quot;五垃圾收集算法垃圾回收器都是基于这些算法来实现&quot;&gt;五、垃圾收集算法（垃圾回收器都是基于这些算法来实现）&lt;/h2&gt;
&lt;h3 id=&quot;标记-清除mark-sweep算法&quot;&gt;1、标记-清除（Mark-Sweep）算法&lt;/h3&gt;
&lt;p&gt;　　这是最基础的算法，标记-清除算法就如同它的名字样，分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象。这种算法的不足主要体现在效率和空间，从效率的角度讲，标记和清除两个过程的效率都不高；从空间的角度讲，标记清除后会产生大量不连续的内存碎片， 内存碎片太多可能会导致以后程序运行过程中在需要分配较大对象时，无法找到足够的连续内存而不得不提前触发一次垃圾收集动作。标记-清除算法执行过程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5caff6994cc9e.png&quot; alt=&quot;mark-sweep.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;复制copying算法&quot;&gt;2、复制（Copying）算法&lt;/h3&gt;
&lt;p&gt;　　复制算法是为了解决效率问题而出现的，它将可用的内存分为两块，每次只用其中一块，当这一块内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已经使用过的内存空间一次性清理掉。这样每次只需要对整个半区进行内存回收，内存分配时也不需要考虑内存碎片等复杂情况，只需要移动指针，按照顺序分配即可。复制算法的执行过程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5caff67f01cf1.png&quot; alt=&quot;copying.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　不过这种算法有个缺点，内存缩小为了原来的一半，这样代价太高了。现在的商用虚拟机都采用这种算法来回收新生代，不过研究表明1:1的比例非常不科学，因此新生代的内存被划分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。每次回收时，将Eden和Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden区和Survivor区的比例为8:1，意思是每次新生代中可用内存空间为整个新生代容量的90%。当然，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖老年代进行分配担保（Handle Promotion）。&lt;/p&gt;
&lt;h3 id=&quot;标记-整理mark-compact算法&quot;&gt;3、标记-整理（Mark-Compact）算法&lt;/h3&gt;
&lt;p&gt;　　复制算法在对象存活率较高的场景下要进行大量的复制操作，效率很低。万一对象100%存活，那么需要有额外的空间进行分配担保。老年代都是不易被回收的对象，对象存活率高，因此一般不能直接选用复制算法。根据老年代的特点，有人提出了另外一种标记-整理算法，过程与标记-清除算法一样，不过不是直接对可回收对象进行清理，而是让所有存活对象都向一端移动，然后直接清理掉边界以外的内存。标记-整理算法的工作过程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5caff6994cc9e.png&quot; alt=&quot;mark-sweep.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;六垃圾收集器&quot;&gt;六、垃圾收集器&lt;/h2&gt;
&lt;p&gt;　　垃圾收集器就是上面讲的理论知识的具体实现了。不同虚拟机所提供的垃圾收集器可能会有很大差别，我们使用的是HotSpot，HotSpot这个虚拟机所包含的所有收集器如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb051741aa6f.png&quot; alt=&quot;垃圾回收器总览.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，那说明它们可以搭配使用。虚拟机所处的区域说明它是属于新生代收集器还是老年代收集器。多说一句，我们必须明确一个观点：没有最好的垃圾收集器，更加没有万能的收集器，只能选择对具体应用最合适的收集器。这也是HotSpot为什么要实现这么多收集器的原因。OK，下面一个一个看一下收集器。&lt;/p&gt;
&lt;h3 id=&quot;serial收集器&quot;&gt;Serial收集器&lt;/h3&gt;
&lt;p&gt;　　最基本、发展历史最久的收集器，这个收集器是一个采用复制算法的单线程的收集器，单线程一方面意味着它只会使用一个CPU或一条线程去完成垃圾收集工作，另一方面也意味着它进行垃圾收集时必须暂停其他线程的所有工作，直到它收集结束为止。后者意味着，在用户不可见的情况下要把用户正常工作的线程全部停掉，这对很多应用是难以接受的。不过实际上到目前为止，Serial收集器依然是虚拟机运行在Client模式下的默认新生代收集器，因为它简单而高效。用户桌面应用场景中，分配给虚拟机管理的内存一般来说不会很大，收集几十兆甚至一两百兆的新生代停顿时间在几十毫秒最多一百毫秒，只要不是频繁发生，这点停顿是完全可以接受的。Serial收集器运行过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb05595d0a4b.png&quot; alt=&quot;Serial收集器.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　说明：1. 需要STW（Stop The World），停顿时间长。2. 简单高效，对于单个CPU环境而言，Serial收集器由于没有线程交互开销，可以获取最高的单线程收集效率。&lt;/p&gt;
&lt;h3 id=&quot;parnew收集器&quot;&gt;ParNew收集器&lt;/h3&gt;
&lt;p&gt;　　ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集外，其余行为和Serial收集器完全一样，包括使用的也是复制算法。ParNew收集器除了多线程以外和Serial收集器并没有太多创新的地方，但是它却是Server模式下的虚拟机首选的新生代收集器，其中有一个很重要的和性能无关的原因是，除了Serial收集器外，目前只有它能与CMS收集器配合工作（看图）。CMS收集器是一款几乎可以认为有划时代意义的垃圾收集器，因为它第一次实现了让垃圾收集线程与用户线程基本上同时工作。ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于线程交互的开销，该收集器在两个CPU的环境中都不能百分之百保证可以超越Serial收集器。当然，随着可用CPU数量的增加，它对于GC时系统资源的有效利用还是很有好处的。它默认开启的收集线程数与CPU数量相同，在CPU数量非常多的情况下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。ParNew收集器运行过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb059c723ced.png&quot; alt=&quot;ParNew收集器.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;parallel-scavenge收集器&quot;&gt;Parallel Scavenge收集器&lt;/h3&gt;
&lt;p&gt;　　Parallel Scavenge收集器也是一个新生代收集器，也是用复制算法的收集器，也是并行的多线程收集器，但是它的特点是它的关注点和其他收集器不同。介绍这个收集器主要还是介绍吞吐量的概念。CMS等收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是打到一个可控制的吞吐量。所谓吞吐量的意思就是CPU用于运行用户代码时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间），虚拟机总运行100分钟，垃圾收集1分钟，那吞吐量就是99%。另外，&lt;span&gt;Parallel Scavenge收集器是虚拟机运行在Server模式下的默认垃圾收集器&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　停顿时间短适合需要与用户交互的程序，良好的响应速度能提升用户体验；高吞吐量则可以高效率利用CPU时间，尽快完成运算任务，主要适合在后台运算而不需要太多交互的任务。&lt;/p&gt;
&lt;p&gt;　　虚拟机提供了-XX:MaxGCPauseMillis和-XX:GCTimeRatio两个参数来精确控制最大垃圾收集停顿时间和吞吐量大小。不过不要以为前者越小越好，GC停顿时间的缩短是以牺牲吞吐量和新生代空间换取的。由于与吞吐量关系密切，Parallel Scavenge收集器也被称为“吞吐量优先收集器”。&lt;span&gt;Parallel Scavenge收集器有一个-XX:+UseAdaptiveSizePolicy参数，这是一个开关参数，这个参数打开之后，就不需要手动指定新生代大小、Eden区和Survivor参数等细节参数了，虚拟机会根据当前系统的运行情况以及性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。&lt;/span&gt;如果对于垃圾收集器运作原理不太了解，以至于在优化比较困难的时候，使用Parallel Scavenge收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。&lt;/p&gt;
&lt;h3 id=&quot;serial-old收集器&quot;&gt;Serial Old收集器&lt;/h3&gt;
&lt;p&gt;Serial收集器的老年代版本，同样是一个单线程收集器，使用“标记-整理算法”，这个收集器的主要意义也是在于给Client模式下的虚拟机使用。&lt;/p&gt;
&lt;h3 id=&quot;parallel-old收集器&quot;&gt;Parallel Old收集器&lt;/h3&gt;
&lt;p&gt;　　Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器在JDK 1.6之后的出现，“吞吐量优先收集器”终于有了比较名副其实的应用组合，在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge收集器+Parallel Old收集器的组合。运行过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb05c0d6d148.png&quot; alt=&quot;Parallel Old收集器.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;cms收集器&quot;&gt;CMS收集器&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;CMS（Conrrurent Mark Sweep）收集器是以获取最短回收停顿时间为目标的收集器&lt;/span&gt;。使用标记 - 清除算法，收集过程分为如下四步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;初始标记，标记GCRoots能直接关联到的对象，时间很短。&lt;/li&gt;
&lt;li&gt;并发标记，进行GCRoots Tracing（可达性分析）过程，时间很长。&lt;/li&gt;
&lt;li&gt;重新标记，修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，时间较长。&lt;/li&gt;
&lt;li&gt;并发清除，回收内存空间，时间很长。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其中，并发标记与并发清除两个阶段耗时最长，但是可以与用户线程并发执行。运行过程如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb05d4c062d8.png&quot; alt=&quot;CMS收集器.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对CPU资源非常敏感，可能会导致应用程序变慢，吞吐率下降。&lt;/li&gt;
&lt;li&gt;无法处理浮动垃圾，因为在并发清理阶段用户线程还在运行，自然就会产生新的垃圾，而在此次收集中无法收集他们，只能留到下次收集，这部分垃圾为浮动垃圾，同时，由于用户线程并发执行，所以需要预留一部分老年代空间提供并发收集时程序运行使用。&lt;/li&gt;
&lt;li&gt;由于采用的标记 - 清除算法，会产生大量的内存碎片，不利于大对象的分配，可能会提前触发一次Full GC。虚拟机提供了-XX:+UseCMSCompactAtFullCollection参数来进行碎片的合并整理过程，这样会使得停顿时间变长，虚拟机还提供了一个参数配置，-XX:+CMSFullGCsBeforeCompaction，用于设置执行多少次不压缩的Full GC后，接着来一次带压缩的GC。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;g1收集器&quot;&gt;G1收集器&lt;/h3&gt;
&lt;p&gt;　　G1算法将堆划分为若干个区域（Region），它仍然属于分代收集器。不过，这些区域的一部分包含新生代，新生代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间。老年代也分成很多区域，G1收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作。这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。&lt;/p&gt;
&lt;p&gt;　　在G1中，还有一种特殊的区域，叫Humongous区域。 如果一个对象占用的空间超过了分区容量50%以上，G1收集器就认为这是一个巨型对象。这些巨型对象，默认直接会被分配在年老代，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放巨型对象。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区，有时候不得不启动Full GC。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb0758fba400.png&quot; alt=&quot;G1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;G1主要有以下特点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;并行和并发。使用多个CPU来缩短Stop The World停顿时间，与用户线程并发执行。&lt;/li&gt;
&lt;li&gt;分代收集。独立管理整个堆，但是能够采用不同的方式去处理新创建对象和已经存活了一段时间、熬过多次GC的旧对象，以获取更好的收集效果。&lt;/li&gt;
&lt;li&gt;空间整合。基于标记 - 整理算法，无内存碎片产生。&lt;/li&gt;
&lt;li&gt;可预测的停顿。能简历可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　在G1之前的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，&lt;span&gt;Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分（可以不连续）Region的集合&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&quot;七cms和g1对比过去-vs-未来&quot;&gt;七、CMS和G1对比（过去 vs 未来）&lt;/h2&gt;
&lt;h3 id=&quot;cms垃圾回收器&quot;&gt;CMS垃圾回收器&lt;/h3&gt;
&lt;h4 id=&quot;cms堆内存结构划分&quot;&gt;　CMS堆内存结构划分：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb077e19d454.png&quot; alt=&quot;cms-内存结构.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;新生代：eden space + 2个survivor&lt;/li&gt;
&lt;li&gt;老年代：old space&lt;/li&gt;
&lt;li&gt;持久代：1.8之前的perm space&lt;/li&gt;
&lt;li&gt;元空间：1.8之后的metaspace&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;注意：这些space必须是地址连续的空间&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;cms中垃圾回收模式&quot;&gt;CMS中垃圾回收模式&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;对象分配&lt;/p&gt;
&lt;ol readability=&quot;22.5&quot;&gt;&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;优先在Eden区分配&lt;/p&gt;
&lt;p&gt;　　在JVM内存模型一文中, 我们大致了解了VM年轻代堆内存可以划分为一块Eden区和两块Survivor区. 在大多数情况下, 对象在新生代Eden区中分配, 当Eden区没有足够空间分配时, VM发起一次Minor GC, 将Eden区和其中一块Survivor区内尚存活的对象放入另一块Survivor区域, 如果在Minor GC期间发现新生代存活对象无法放入空闲的Survivor区, 则会通过空间分配担保机制使对象提前进入老年代(空间分配担保见下).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;18&quot;&gt;
&lt;p&gt;大对象直接进入老年代&lt;/p&gt;
&lt;p&gt;　　Serial和ParNew两款收集器提供了-XX:PretenureSizeThreshold的参数, 令大于该值的大对象直接在老年代分配, 这样做的目的是避免在Eden区和Survivor区之间产生大量的内存复制(大对象一般指 需要大量连续内存的Java对象, 如很长的字符串和数组), 因此大对象容易导致还有不少空闲内存就提前触发GC以获取足够的连续空间.&lt;/p&gt;
&lt;p&gt;　　然而取历次晋升的对象的平均大小也是有一定风险的, 如果某次Minor GC存活后的对象突增,远远高于平均值的话,依然可能导致担保失败(Handle Promotion Failure, 老年代也无法存放这些对象了), 此时就只好在失败后重新发起一次Full GC(让老年代腾出更多空间).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;15&quot;&gt;
&lt;p&gt;空间分配担保&lt;/p&gt;
&lt;p&gt;　　在执行Minor GC前, VM会首先检查老年代是否有足够的空间存放新生代尚存活对象, 由于新生代使用复制收集算法, 为了提升内存利用率, 只使用了其中一个Survivor作为轮换备份, 因此当出现大量对象在Minor GC后仍然存活的情况时, 就需要老年代进行分配担保, 让Survivor无法容纳的对象直接进入老年代, 但前提是老年代需要有足够的空间容纳这些存活对象. 但存活对象的大小在实际完成GC前是无法明确知道的, 因此Minor GC前, VM会先首先检查老年代连续空间是否大于新生代对象总大小或历次晋升的平均大小, 如果条件成立, 则进行Minor GC, 否则进行Full GC(让老年代腾出更多空间).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象晋升&lt;/p&gt;
&lt;ol readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;年龄阈值&lt;/p&gt;
&lt;p&gt;　　VM为每个对象定义了一个对象年龄(Age)计数器, 对象在Eden出生如果经第一次Minor GC后仍然存活, 且能被Survivor容纳的话, 将被移动到Survivor空间中, 并将年龄设为1. 以后对象在Survivor区中每熬过一次Minor GC年龄就+1. 当增加到一定程度(-XX:MaxTenuringThreshold, 默认15), 将会晋升到老年代.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;提前晋升: 动态年龄判定&lt;/p&gt;
&lt;p&gt;　　然而VM并不总是要求对象的年龄必须达到MaxTenuringThreshold才能晋升老年代: 如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半, 年龄大于或等于该年龄的对象就可以直接进入老年代, 而无须等到晋升年龄.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;g1垃圾回收器&quot;&gt;G1垃圾回收器&lt;/h3&gt;
&lt;h4 id=&quot;g1堆内存结构划分它将整个java堆划分为多个大小相等的独立区域region&quot;&gt;G1堆内存结构划分（它将整个Java堆划分为多个大小相等的独立区域Region）&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/12/5cb07b2be349a.png&quot; alt=&quot;G1-内存结构.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;g1中提供了三种垃圾回收模式young-gcmixed-gc-和-full-gc&quot;&gt;G1中提供了三种垃圾回收模式：young gc、mixed gc 和 full gc&lt;/h4&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Young GC&lt;/p&gt;
&lt;p&gt;发生在年轻代的GC算法，一般对象（除了巨型对象）都是在eden region中分配内存，当所有eden region被耗尽无法申请内存时，就会触发一次young gc，这种触发机制和之前的young gc差不多，执行完一次young gc，活跃对象会被拷贝到survivor region或者晋升到old region中，空闲的region会被放入空闲列表中，等待下次被使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mixed GC&lt;/p&gt;
当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即mixed gc，该算法并不是一个old gc，除了回收整个young region，还会回收一部分的old region，这里需要注意：是一部分老年代，而不是全部老年代，可以选择哪些old region进行收集，从而可以对垃圾回收的耗时时间进行控制。&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Full GC&lt;/p&gt;
&lt;p&gt;如果对象内存分配速度过快，mixed gc来不及回收，导致老年代被填满，就会触发一次full gc，G1的full gc算法就是单线程执行的serial old gc，会导致异常长时间的暂停时间，需要进行不断的调优，尽可能的避免full gc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;八各种垃圾收集器的选用&quot;&gt;八、各种垃圾收集器的选用&lt;/h2&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;首先查看你使用的垃圾回收器是什么？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;java -XX:+PrintCommandLineFlags -version&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;根据自身系统需求选择最合适的垃圾回收器（没有最好的，只有最是适合的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/13/5cb0b6b151948.png&quot; alt=&quot;各种收集器配置.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;九总结&quot;&gt;九、总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;到此GC的内存就差不多了，其中不免有些错误的地方，或者理解有偏颇的地方欢迎大家提出来！&lt;/li&gt;
&lt;li&gt;关于GC更细粒度的调优，没敢妄言，今后有了实战事例在补上！！！&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;1.3453608247423&quot;&gt;
&lt;p&gt;个人博客地址：&lt;/p&gt;
&lt;blockquote readability=&quot;1.2558139534884&quot;&gt;
&lt;p&gt;csdn:&lt;a href=&quot;https://blog.csdn.net/tiantuo6513&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/tiantuo6513&lt;/a&gt;&lt;br/&gt;cnblogs:&lt;a href=&quot;https://www.cnblogs.com/baixianlong&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/baixianlong&lt;/a&gt;&lt;br/&gt;segmentfault:&lt;a href=&quot;https://segmentfault.com/u/baixianlong&quot; class=&quot;uri&quot;&gt;https://segmentfault.com/u/baixianlong&lt;/a&gt;&lt;br/&gt;github:&lt;a href=&quot;https://github.com/xianlongbai&quot; class=&quot;uri&quot;&gt;https://github.com/xianlongbai&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文参考：&lt;br/&gt;&lt;span&gt;https://www.cnblogs.com/xiaoxi/p/6486852.html&lt;/span&gt;&lt;br/&gt;&lt;span&gt;https://zhuanlan.zhihu.com/p/25539690&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 16:44:00 +0000</pubDate>
<dc:creator>会炼钢的小白龙</dc:creator>
<og:description>原创不易，如需转载，请注明出处 'https://www.cnblogs.com/baixianlong/p/10697554.html' ，多多支持哈！ 一、什么是GC？ GC是垃圾收集的意思，内存</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baixianlong/p/10697554.html</dc:identifier>
</item>
<item>
<title>LIS3DH三轴加速度计-实现欧拉角(俯仰角,横滚角) - NQian</title>
<link>http://www.cnblogs.com/lifexy/p/10699502.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lifexy/p/10699502.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. LIS3DH管脚定义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201904/1182576-20190413002257683-934115936.png&quot; alt=&quot;&quot; width=&quot;483&quot; height=&quot;180&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/span&gt;LIS3DH和mpu6050的X和Y方向是相反的, mpu6050如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201904/1182576-20190413002309141-1860656296.png&quot; alt=&quot;&quot; width=&quot;205&quot; height=&quot;165&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.LIS3DH加速度计介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于LIS3DH只可以得到XYZ加速度,无法获取角速度,所以LIS3DH是无法测出偏航角(yaw).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. LIS3DH之转换欧拉角介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1偏航角(yaw)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示,偏航角是指机头在水平面上的投影与地轴之间的夹角，以机头右偏为正.范围为[-180,180]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20171201105458187&quot; alt=&quot;&quot; width=&quot;328&quot; height=&quot;262&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/span&gt;由于LIS3DH无法测出,跳过.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2俯仰角(pitch)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示, 俯仰角是指机头与水平面的夹角,当飞机平行时则为0,抬头时则为正,范围为[-180,180]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img-blog.csdn.net/20171201105410311&quot; alt=&quot;&quot; width=&quot;294&quot; height=&quot;237&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;以45°为例,来解析LIS3DH&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201904/1182576-20190413003400079-67213026.png&quot; alt=&quot;&quot; width=&quot;341&quot; height=&quot;352&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;转换为角度图为:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201904/1182576-20190413003419008-1424628323.png&quot; alt=&quot;&quot; width=&quot;394&quot; height=&quot;264&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以转换为角度为:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
pitch = (&lt;span&gt;short&lt;/span&gt;)(atan2((&lt;span&gt;float&lt;/span&gt;)(&lt;span&gt;0&lt;/span&gt;-y),z) * &lt;span&gt;180&lt;/span&gt; / &lt;span&gt;3.14159&lt;/span&gt;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换为度数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 横滚角(roll)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示, 横滚角指飞机两翼所在的平面与平行线之间的夹角，机体向右滚为正,范围为[-180,180].&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20171201105534946&quot; alt=&quot;&quot; width=&quot;305&quot; height=&quot;246&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;横滚角和俯仰角类似,不过变成了X与Z轴之间比例了.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以转换为角度为:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
pitch = (&lt;span&gt;short&lt;/span&gt;)(atan2((&lt;span&gt;float&lt;/span&gt;)(&lt;span&gt;0&lt;/span&gt;-y),z) * &lt;span&gt;180&lt;/span&gt; / &lt;span&gt;3.14159&lt;/span&gt;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换为度数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.初始化代码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
unsigned &lt;span&gt;char&lt;/span&gt; Lis3dh_init(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
{
     u8 val;

     unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; data;

     i2cInit();

       
     data &lt;/span&gt;= &lt;span&gt;0x47&lt;/span&gt;&lt;span&gt;; 
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i2cwrite(&lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &amp;amp;data))&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;50HZ  reg1&lt;/span&gt;
&lt;span&gt;
     data &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i2cwrite(&lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x21&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &amp;amp;data))&lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; reg2&lt;/span&gt;
&lt;span&gt;
     data &lt;/span&gt;= &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;; 
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i2cwrite(&lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &amp;amp;data))&lt;span&gt;return&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; reg3&lt;/span&gt;
&lt;span&gt;
     data &lt;/span&gt;= &lt;span&gt;0X00&lt;/span&gt;&lt;span&gt;; 
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i2cwrite(&lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x23&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &amp;amp;data))&lt;span&gt;return&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; +-2g reg4&lt;/span&gt;
&lt;span&gt;
     data &lt;/span&gt;= &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;; 
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i2cwrite(&lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x24&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &amp;amp;data))&lt;span&gt;return&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; reg5&lt;/span&gt;

     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;设置为+2g量程,并且传感器刷新率为50hz,也就是说我们延时20ms左右去读一次传感器即可.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.运行代码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; CalcXYZ(&lt;span&gt;short&lt;/span&gt; x,&lt;span&gt;short&lt;/span&gt; y,&lt;span&gt;short&lt;/span&gt;&lt;span&gt; z)
{
    &lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt; pitch ,roll;
    u16 maxG&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 

    pitch  &lt;/span&gt;= (&lt;span&gt;short&lt;/span&gt;)(atan2((&lt;span&gt;float&lt;/span&gt;)(&lt;span&gt;0&lt;/span&gt;-y),z) * &lt;span&gt;180&lt;/span&gt; / &lt;span&gt;3.14159&lt;/span&gt;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换为度数&lt;/span&gt;&lt;span&gt;
    roll  &lt;/span&gt;= (&lt;span&gt;short&lt;/span&gt;)(atan2((&lt;span&gt;float&lt;/span&gt;)(x),z) * &lt;span&gt;180&lt;/span&gt; / &lt;span&gt;3.14159&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换为度数&lt;/span&gt;
&lt;span&gt;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x%03dmg y%03dmg z%03dmg pitch:%3d roll:%3d \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,x,y,z,pitch,roll);
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    u8 i;
    u8 buf[&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt; X,Y,Z;

    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Gsensor_init%d\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,Lis3dh_init());

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    {  
       i2cread(&lt;/span&gt;&lt;span&gt;0x18&lt;/span&gt;,&lt;span&gt;0x27&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;,&amp;amp;i);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取0x27,判断是否有数据&lt;/span&gt;
&lt;span&gt;       if&lt;/span&gt;((i&amp;amp;&lt;span&gt;0x08&lt;/span&gt;&lt;span&gt;))
       {&lt;br/&gt;&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;6&lt;/span&gt;;i++)            
&lt;span&gt;                i2cread(&lt;/span&gt;&lt;span&gt;0x18&lt;/span&gt;,&lt;span&gt;0X28&lt;/span&gt;+i, &lt;span&gt;1&lt;/span&gt;,&amp;amp;&lt;span&gt;buf[i]);

               X &lt;/span&gt;= buf[&lt;span&gt;1&lt;/span&gt;]*&lt;span&gt;256&lt;/span&gt;+ buf[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

               Y &lt;/span&gt;= buf[&lt;span&gt;3&lt;/span&gt;]*&lt;span&gt;256&lt;/span&gt; + buf[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];

               Z &lt;/span&gt;= buf[&lt;span&gt;5&lt;/span&gt;]*&lt;span&gt;256&lt;/span&gt; + buf[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];


               X&lt;/span&gt;=(&lt;span&gt;short&lt;/span&gt;)((&lt;span&gt;float&lt;/span&gt;)(X)*&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;65536&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);

               Y&lt;/span&gt;=(&lt;span&gt;short&lt;/span&gt;)((&lt;span&gt;float&lt;/span&gt;)(Y)*&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;65536&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);

               Z&lt;/span&gt;=(&lt;span&gt;short&lt;/span&gt;)((&lt;span&gt;float&lt;/span&gt;)(Z)*&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;65536&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);

               CalcXYZ(X,Y,Z);
           }
     }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.打印截图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.1当俯仰角pitch接近90°时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201904/1182576-20190413003813007-853837498.png&quot; alt=&quot;&quot; width=&quot;271&quot; height=&quot;243&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上图可以看到,y是&lt;span&gt;&lt;strong&gt;负的1000mg&lt;/strong&gt;&lt;/span&gt;,这是因为它的y方向向下,所以计算俯仰角时,我们用的&lt;span&gt;&lt;strong&gt;(0-y)&lt;/strong&gt;&lt;/span&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.1当俯仰角pitch为0,翻滚角为45°时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201904/1182576-20190413003934282-1431695964.png&quot; alt=&quot;&quot; width=&quot;296&quot; height=&quot;215&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上图可以看到X值为707左右,由于物体自重力为1000,所以707/1000,刚好对应&lt;span&gt;&lt;strong&gt;sin45°(0.707)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 16:41:00 +0000</pubDate>
<dc:creator>NQian</dc:creator>
<og:description>1. LIS3DH管脚定义 PS:LIS3DH和mpu6050的X和Y方向是相反的, mpu6050如下图所示: 2.LIS3DH加速度计介绍 由于LIS3DH只可以得到XYZ加速度,无法获取角速度,</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lifexy/p/10699502.html</dc:identifier>
</item>
<item>
<title>UML类图（Unified Modeling Language Class Diagrams) - DDKK64</title>
<link>http://www.cnblogs.com/wyzersblog/p/10699354.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyzersblog/p/10699354.html</guid>
<description>&lt;h2&gt;什么是UML？&lt;/h2&gt;
&lt;p&gt;　　UML是一种用于可视化描述系统，具有广泛用途的建模语言。作为一种标准化的图形语言，在软件工业中被用于软件系统部件的具体化，可视化，结构化描述以及撰写文档，同样在商业模型中也得到应用。&lt;/p&gt;
&lt;h2&gt;UML的优点：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;使复杂的软件设计更为简单，也能够实现像OOP（面向对象编程）这一类被广泛应用的概念。&lt;/li&gt;
&lt;li&gt;用理解起来可能更容易的图来描述，避免了大量的文字。&lt;/li&gt;
&lt;li&gt;是表达和交流概念或系统结构变得更容易。&lt;/li&gt;
&lt;li&gt;在一张图中就能够描绘出整个系统。&lt;/li&gt;
&lt;li&gt;程序员实用类图来描述实际需求时，可让问题更加清晰明了，实现起来更容易。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;UML的分类&lt;/h2&gt;
&lt;p&gt;　　UML通常分为两类：描述结构的UML图（Structural UML diagrams）和描述行为的UML图（Behavioral UML diagrams），具体见下表：&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;描述结构的UML图&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;描述行为的UML图&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;类图（Class diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;包图（Package diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;对象图（Object diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;组件图（Component daigram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;组合结构图（Composite structure diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;部署图（Deployment diagram）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;活动图（Activity diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;时序图（Sequence diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;用例图（Use case diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;状态图（State diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;协作图（Communication diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;交互关系概览图（Interaction overview diagram）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;时间线图（Timing diagram）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;UML | 类图&lt;/h2&gt;
&lt;p&gt;　　类图展示出OOP中的类，接口，及其中存在的关系，关联与协作。UML在类图中是标准化的。类是OOP的主要构件模块，而类图用恰当的结构展示OOP中遇到的一切，包括类，继承关系，类关系。它能够描述各种对象和它们之间的静态关系。使用类图的主要目的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;类图是唯一能够恰当的展示出OOP中各种不同概念的UML。&lt;/li&gt;
&lt;li&gt;利用类图来对应用程序做出优化的设计与分析高效而快速。&lt;/li&gt;
&lt;li&gt;类图是部署图和组件图的基础。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;类图一般的规则如下：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;每个类用一个矩形框表示，框内由类名，属性，及定义的操作三个子部件构成。&lt;/li&gt;
&lt;li&gt;三种表示可见性的修饰符：&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;+&lt;/span&gt; 表示public&lt;/li&gt;
&lt;li&gt;&lt;span&gt;#&lt;/span&gt; 表示protected&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-  &lt;/span&gt;表示private&lt;/li&gt;
&lt;li&gt;~  表示default（无修饰符）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;一些常用的构成模型的组件：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;类（Class）{名(name)，属性(attribute)，方法(method)&lt;/li&gt;
&lt;li&gt;对象（Object）&lt;/li&gt;
&lt;li&gt;接口（Interface）&lt;/li&gt;
&lt;li&gt;关系（Relationships） { 继承（inheritance），关联（association），泛化（generalization）}&lt;/li&gt;
&lt;li&gt;关联（association）{双向，单向（unidirectional，aggregation）}&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;常用表示关系的组件：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1611794/201904/1611794-20190412233021507-783735067.png&quot; alt=&quot;&quot; width=&quot;258&quot; height=&quot;172&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;关于绘制类图： &lt;/h3&gt;
&lt;p&gt;一些在线或离线的软件都能够完成类图的制作，比如Edraw max, lucid chart等。如果能在相关网站软件找到模板，制作类图更为方便。&lt;/p&gt;
&lt;p&gt;推荐网站&lt;a href=&quot;https://www.draw.io/&quot;&gt;https://www.draw.io/&lt;/a&gt;，可制作各种各样的diagram，使用很快捷，可保存文件到本地，免费无需登录。之前也经常用来画流程图。&lt;/p&gt;

&lt;h3&gt;例子：&lt;/h3&gt;
&lt;p&gt;下图为实现interface和aggregation的类图描述。MovablePoint, MovableCircle实现Movable。MovablePoint成为MovableCircle一部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1611794/201904/1611794-20190412233324404-254083819.png&quot; alt=&quot;&quot; width=&quot;571&quot; height=&quot;401&quot;/&gt;&lt;/p&gt;


&lt;p&gt;如下是一张类图，父类Animal有两个子类dog，cat。d1为子类dog的对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1611794/201904/1611794-20190412225700875-1670467098.png&quot; alt=&quot;&quot; width=&quot;725&quot; height=&quot;309&quot;/&gt;&lt;/p&gt;

&lt;p&gt;以下为对应代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; java.io.*&lt;span&gt;; 

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GFG { 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) 
    { 
        dog d1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; dog(); 
        d1.bark(); 
        d1.run(); 
        cat c1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; cat(); 
        c1.meww(); 
    } 
} 

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Animal { 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
    { 
        String name; 
        String colour; 

        System.out.println(&lt;/span&gt;&quot;animal is running&quot;&lt;span&gt;); 
    } 
} 

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; dog &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Animal { 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; bark() 
    { 
        System.out.println(&lt;/span&gt;&quot;wooh!wooh! dog is barking&quot;&lt;span&gt;); 
    } 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
    { 
        System.out.println(&lt;/span&gt;&quot;dog is running&quot;&lt;span&gt;); 
    } 
} 

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; cat &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Animal { 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; meww() 
    { 
        System.out.println(&lt;/span&gt;&quot;meww! meww!&quot;&lt;span&gt;); 
    } 
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;[1]. Unified Modeling Language (UML) | Class Diagrams - GeeksforGeeks     &lt;a href=&quot;https://www.geeksforgeeks.org/unified-modeling-language-uml-class-diagrams/&quot;&gt;https://www.geeksforgeeks.org/unified-modeling-language-uml-class-diagrams/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]. UML Class Diagrams Tutorial, Step by Step – Salma – Medium    &lt;a href=&quot;https://medium.com/@smagid_allThings/uml-class-diagrams-tutorial-step-by-step-520fd83b300b&quot;&gt;https://medium.com/@smagid_allThings/uml-class-diagrams-tutorial-step-by-step-520fd83b300b&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 15:44:00 +0000</pubDate>
<dc:creator>DDKK64</dc:creator>
<og:description>本文简要介绍UML及类图的相关知识。用少量例子讲述类图的一些语法规则，常用的符号表示。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyzersblog/p/10699354.html</dc:identifier>
</item>
<item>
<title>Node.js 命令行工具的编写 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/build_nodejs_command_line.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/build_nodejs_command_line.html</guid>
<description>&lt;p&gt;日常开发中，编写 Node.js 命令行工具来完成一些小任务是很常见的操作。其编写也不难，和日常编写 Node.js 代码并无二致。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;package.json&lt;/code&gt; 中的 &lt;code&gt;bin&lt;/code&gt; 字段&lt;/h2&gt;
&lt;p&gt;一个 npm 模块，如果在 &lt;code&gt;package.json&lt;/code&gt; 中指定了 &lt;code&gt;bin&lt;/code&gt; 字段，那说明该模块提供了可在命令行执行的命令，这些命令就是在 &lt;code&gt;bin&lt;/code&gt; 字段中指定的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-json&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
{
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bin&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;myapp&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./cli.js&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序安装后会可在命令行执行 &lt;code&gt;myapp&lt;/code&gt; 命令，实际执行的就是指定的这个 &lt;code&gt;cli.js&lt;/code&gt; 文件。如果是全局安装，会将这个目标 js 文件映射到 &lt;code&gt;prefix/bin&lt;/code&gt; 目录下，而如果是在项目中安装，则映射到 &lt;code&gt;./node_modules/.bin/&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;p&gt;比如上面的示例，全局安装后会将 &lt;code&gt;cli.js&lt;/code&gt; 映射到 &lt;code&gt;/usr/local/bin/myapp&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 查看项目中安装的所有可执行模块&lt;/span&gt;
$ ll node_modules/.bin
...
webpack -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ../webpack/bin/webpack.js
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你的 npm 包只提供了一个可执行的命令，可直接将 &lt;code&gt;bin&lt;/code&gt; 字段设置为目标文件，此时命令行中可执行的 CLI 命令名为 npm 包名（即 &lt;code&gt;name&lt;/code&gt; 字段）。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-json&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
{
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;my-program&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;1.2.5&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bin&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./path/to/program&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以上面的配置和下面这个配置是等效的。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-json&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
{
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;my-program&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;1.2.5&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bin&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;my-program&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./path/to/program&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ my-program 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;CLI 命令的编写&lt;/h2&gt;
&lt;p&gt;为项目添加 README 文件是很常见的操作，每次都从零开始是没必要的。这时候就可以通过创建一个 README 模板，然后写一个 CLI 工具来生成到项目中。这样，将工具安装到全局或通过 &lt;code&gt;npx&lt;/code&gt; 就可以方便地完成 README 文件的创建。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ npx mkreadme
README.md created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;初始化项目&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ npm init -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改 &lt;code&gt;package.json&lt;/code&gt; 文件为如下内容：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-json&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
{
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mkreadme&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bin&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./cli.js&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;0.1.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;license&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;MIT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;创建入口文件&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ touch cli.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;入口文件即 &lt;code&gt;bin&lt;/code&gt; 字段所指向的文件，它可以是任何文件名，只需要在行首指定运行环境即可。Node.js 的 CLI 命令，期望的运行环境当然是 Node.js。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;cli.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
 #&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;/&lt;/span&gt;usr&lt;span class=&quot;pl-pds&quot;&gt;/&lt;/span&gt;&lt;/span&gt;bin&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;env node
 &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 其他代码...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后添加我们的功能代码，从远端获取一个 README 模板文件到本地。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;cli.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;#!/usr/bin/env node&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fs&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;TEMPLATE_FILE&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https://raw.githubusercontent.com/wayou/readme-template/master/README.md&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;createWriteStream&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;README.md&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-smi&quot;&gt;https&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;TEMPLATE_FILE&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;resposne&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-smi&quot;&gt;resposne&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(file);
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;README.md created&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里，我们将模板文件放远端的一个位置然后通过网络请求下载下来，而不是直接放到 npm 模块中。这样做的好处是后面可以随时更新我们的模板文件而无须重新发布这个 npm 模块。&lt;/p&gt;
&lt;h3&gt;调试&lt;/h3&gt;
&lt;p&gt;通过在当前开发目录进行 &lt;code&gt;link&lt;/code&gt; 操作可进行本地调试。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ npm link
&lt;/pre&gt;&lt;/div&gt;
&lt;details readability=&quot;2.5&quot;&gt;link 操作的输出信息
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
npm WARN mkreadme@0.1.0 No description
npm WARN mkreadme@0.1.0 No repository field.

up to date &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; 3.435s
found 0 vulnerabilities

/Users/wayou/.nvm/versions/node/v11.14.0/bin/mkreadme -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; /Users/wayou/.nvm/versions/node/v11.14.0/lib/node_modules/mkreadme/cli.js
/Users/wayou/.nvm/versions/node/v11.14.0/lib/node_modules/mkreadme -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; /Users/wayou/Documents/dev/github/mkreadme
&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;然后就可以在任何地方执行刚刚创建的 CLI 命令了。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mkreadme
README.md created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;参数的获取&lt;/h3&gt;
&lt;p&gt;让命令支持参数可以实现更加灵活的功能。通过 &lt;code&gt;process.argv&lt;/code&gt; 在代码中能够获取到来自命令行的输入。但需要注意它返回的参数列表中前两位是 Node.js 的路径和当前项目的路径，从第三个元素开始才是命令中用户输入的数据。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;!/usr/bin/env node&lt;/span&gt;

const fs = require(&quot;fs&quot;);
const https = require(&quot;https&quot;);

const TEMPLATE_FILE =
  &quot;https://raw.githubusercontent.com/wayou/readme-template/master/README.md&quot;;

&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt; const [, , ...args] = process.argv;&lt;/span&gt;

const file = fs.createWriteStream(&quot;README.md&quot;);
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt; const url = args[0] || TEMPLATE_FILE;&lt;/span&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt; https.get(url, resposne =&amp;gt; {&lt;/span&gt;
  resposne.pipe(file);
  console.log(&quot;README.md created&quot;);
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过添加参数的支持，我们可以让使用者手动指定一个模板地址以下载对应的模板文件。&lt;/p&gt;
&lt;h3&gt;发布&lt;/h3&gt;
&lt;p&gt;最后一步就是发布出去，这样所有人就能安装使用了。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ npm publish --access public
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;安装与使用&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ npm i -g mkreadme
$ mkreadme
README.md created
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了像上面将命令安装到全局使用外，个人更加推荐的方式是通过 &lt;code&gt;npx&lt;/code&gt;。&lt;code&gt;npx&lt;/code&gt; 会自动查找本机是否有安装相应模块，如果没有的话，自动去远端查找并执行。通过 &lt;code&gt;npx&lt;/code&gt; 就不用安装到本地，每次运行都可以使用远端最新的版本。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ npx mkreadme
README.md created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;后续的优化&lt;/h3&gt;
&lt;p&gt;示例中只实现了基本的功能，作为一个功能健全的实用工具，可以做以下的优化：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;生成时做重名判断，如果已经存在 README 文件则提示是否覆盖。&lt;/li&gt;
&lt;li&gt;文件下载和创建过程中的异常处理及提示。&lt;/li&gt;
&lt;li&gt;提供并打印帮助信息，对使用者更加友好。&lt;/li&gt;
&lt;li&gt;对输出进行格式化，高亮输出相关信息，使信息更易读。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;完整的示例&lt;/h3&gt;
&lt;p&gt;上面示例中的代码可在 &lt;a href=&quot;https://github.com/wayou/mkreadme&quot;&gt;mkreadme&lt;/a&gt; 这个仓库中找到。同时也发布到了 npm，可直接使用体验该工具。&lt;/p&gt;
&lt;h2&gt;三方工具&lt;/h2&gt;
&lt;p&gt;命令行工具能够打印帮助和使用信息是很重要的，如果自己输出的话，会面临格式化这些内容的麻烦。&lt;br/&gt;如果提供的参数很多，解析处理用户输入的参数也是件很麻烦的事。&lt;/p&gt;
&lt;p&gt;像参数校验，错误提示及帮助信息的输出，这些命令行工具基本的功能已经有三方库比较成熟地解决了，比如 &lt;a href=&quot;https://github.com/tj/commander.js/&quot;&gt;commander.js&lt;/a&gt;。通过这个库可方便地编写更加复杂的命令行工具。&lt;/p&gt;
&lt;p&gt;至于将输出信息进行高亮加彩色进行展示，也有相应三方库比如 &lt;a href=&quot;https://github.com/chalk/chalk&quot;&gt;chalk&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Fri, 12 Apr 2019 15:16:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>日常开发中，编写 Node.js 命令行工具来完成一些小任务是很常见的操作。其编写也不难，和日常编写 Node.js 代码并无二致。 package.json 中的 bin 字段 一个 npm 模块，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/build_nodejs_command_line.html</dc:identifier>
</item>
<item>
<title>.NET Core 时代已经到了，你准备好了吗 - 张善友</title>
<link>http://www.cnblogs.com/shanyou/p/10699029.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanyou/p/10699029.html</guid>
<description>&lt;p&gt;今天很多人都收到了阿里云函数计算支持.NET Core的短信了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/510/201904/510-20190412222352628-664674494.png&quot;&gt;&lt;img width=&quot;244&quot; height=&quot;126&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/510/201904/510-20190412222353145-1042429423.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过访问 &lt;a title=&quot;https://help.aliyun.com/document_detail/112379.html&quot; href=&quot;https://help.aliyun.com/document_detail/112379.html&quot;&gt;https://help.aliyun.com/document_detail/112379.html&lt;/a&gt; 你可以看到最新的说明。现在和过去的两年不同，因为最恶劣的时期已经过去，经历过了最黑暗的时刻，我们正在走向光明的前程。.NET Core 在今年即将引来3.0版本，&lt;/p&gt;
&lt;p&gt;在经过了1.x的沉淀后，2.x版本趋向于风格上的稳定，有兴趣知道各个版本的一些特性和变化，可以参考&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/release-notes/aspnetcore-2.2?view=aspnetcore-2.2&quot;&gt;ASPNET.Core各个版本差异以及新特性&lt;/a&gt; ，有兴趣的还可以关注3.x的预览版。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/510/201904/510-20190412222353661-1076081913.png&quot;&gt;&lt;img width=&quot;179&quot; height=&quot;244&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/510/201904/510-20190412222354224-701552976.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个性能优化非常感人，具体大家可以看看这个PR &lt;a href=&quot;https://github.com/aspnet/AspNetCore/pull/8374&quot;&gt;https://github.com/aspnet/AspNetCore/pull/8374&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;从上面这两天这两个小小事件你应该感受到了.NET Core的新时代已经开启。随着互联网和电商公司从去年开始一家家的倒掉，你们会发现.NET正在重新成为市场焦点。BAT 都开始转向企业市场，在传统的企业市场有大量的.NET 应用，以至于这些搞互联网的同学接触到这些系统时都在感慨你们还在用”这么老的没人用的.NET”, 这两年发生了很多 .NET 被强制转Java的事件，现在还在上演。我希望随着.NET Core的成熟，这样的事件需要反转，从Java转.NET Core.&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 14:24:00 +0000</pubDate>
<dc:creator>张善友</dc:creator>
<og:description>今天很多人都收到了阿里云函数计算支持.NET Core的短信了。通过访问 https://help.aliyun.com/document_detail/112379.html 你可以看到最新的说明。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shanyou/p/10699029.html</dc:identifier>
</item>
<item>
<title>MongoDB通过Shell 实现集合的日常归档 - 东山絮柳仔</title>
<link>http://www.cnblogs.com/xuliuzai/p/10698241.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuliuzai/p/10698241.html</guid>
<description>&lt;h3&gt; 1.MongoDB数据归档的意义&lt;/h3&gt;
&lt;p&gt;和其他类型的数据库一样，归档对MongoDB同样重要。通过归档，可以保持集合中合适的数据量，对数据库的性能是一种保障，也就是大家常说的数据冷热分离。&lt;/p&gt;
&lt;p&gt;同时，归档对数据库的管理也带来了很大方便性，例如日常的备份、灾难恢复等。&lt;/p&gt;
&lt;p&gt;在此，不再展开叙述了。&lt;/p&gt;
&lt;h3&gt; 2.集合数据归档流程图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201904/780228-20190412185116364-223593053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.归档实现代码&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#
# The &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt; is used by cron to Archive the data of NeedArchiveColName_Archive collection,the collection is part of NeedArchiveDBColName DB.
# The &lt;/span&gt;&lt;span&gt;file&lt;/span&gt; is writed by DBA Carson Xu.If you &lt;span&gt;find&lt;/span&gt;&lt;span&gt; any error, please connect with me,thanks.
# The version is defined V.&lt;/span&gt;&lt;span&gt;001&lt;/span&gt;&lt;span&gt;
# Version   ModifyTime                ModifyBy              Desc
# Ver001    &lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;&lt;span&gt;         Carson Xu             Create the Scripts File
#
#
#&lt;/span&gt;!/bin/&lt;span&gt;bash
######mongodb可执行文件所在文档路径，此例为4.&lt;/span&gt;&lt;span&gt;04&lt;/span&gt; ，同时支持3.&lt;span&gt;4.4&lt;/span&gt;&lt;span&gt;

command_linebin&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/QQMSG/mongo_db/mongobin404/bin/mongo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
command_linebinT&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/QQMSG/mongo_db/mongobin404/bin/mongo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

######存放导出过渡文件的文档路径和文件名字，ColA可用你的集合名字替代
targetpath&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/data/mongodb_back/ArchiveDB_端口号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
bakcollectionname&lt;/span&gt;=NeedArchiveColName_$(&lt;span&gt;date&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+%Y%m%d%H%M&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

###### 登入账号信息
username&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
password&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账号密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;


#######start 设置备份集合的开始日期和结束日期 #####

ParamBakStartDate&lt;/span&gt;=$(&lt;span&gt;date&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-46 days&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+%Y-%m-%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份NeedArchiveColName时间参数中的开始时间为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $ParamBakStartDate 

ParamBakEndDate&lt;/span&gt;=$(&lt;span&gt;date&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-45 days&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+%Y-%m-%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份NeedArchiveColName时间参数中的结束时间为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $ParamBakEndDate 

ParamBakStartTimeS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(date -d $ParamBakStartDate +%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

ParamBakEndTimeS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(date -d $ParamBakEndDate  +%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份集合的时间转换为UTC时间秒数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $ParamBakStartTimeS  和 $ParamBakEndTimeS

ParamBakStartTimeMS&lt;/span&gt;=$[$ParamBakStartTimeS * &lt;span&gt;1000&lt;/span&gt;+&lt;span&gt;8&lt;/span&gt;*&lt;span&gt;60&lt;/span&gt;*&lt;span&gt;60&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;]
ParamBakEndTimeMS&lt;/span&gt;=$[$ParamBakEndTimeS * &lt;span&gt;1000&lt;/span&gt;+&lt;span&gt;8&lt;/span&gt;*&lt;span&gt;60&lt;/span&gt;*&lt;span&gt;60&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份集合的时间转换为UTC时间毫秒数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $ParamBakStartTimeMS  和 $ParamBakEndTimeMS

#######end ######

######## start 连接源Server DB ，检查此次集合备份的文档数
command_line&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${command_linebin} localhost:端口号/NeedArchiveDBColName -u$username -p$password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
export docQty&lt;/span&gt;=$(/bin/&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.NeedArchiveColName.find({NeedArchiveByField:{$gte:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$ParamBakStartDate\&quot;'),$lt:new Date('\&quot;$ParamBakEndDate\&quot;')}}).count()' | $command_line --quiet)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份前集合NeedArchiveColName的文档数据为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $docQty
###### End #####

###### Start 定义每次备份归档的最大阈值，防止意外情况的发生，例如：参数输入错误###
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $docQty -gt &lt;span&gt;2000000&lt;/span&gt; ];&lt;span&gt;then&lt;/span&gt;
  &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB-Archive-Exception:NeedArchiveDBColName库NeedArchiveColName集合指定时间段内的文档数过大，超过定义的安全阈值 2000000，归档终止，请检查！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  exit
&lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

####### end  ######

######## start 连接目标Server DB ，检查target DB 上是否已经存在此时间内的文档
command_lineT&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${command_linebinT} 归档实例IP:归档实例端口/归档数据库Name -u$username -p$password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
export docQtyT&lt;/span&gt;=$(/bin/&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.NeedArchiveColName.find({NeedArchiveByField:{$gte:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$ParamBakStartDate\&quot;'),$lt:new Date('\&quot;$ParamBakEndDate\&quot;')}}).count()' | $command_lineT --quiet)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份目标BKDB集合NeedArchiveColName备份归档前的文档数据为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $docQtyT
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $docQtyT -gt &lt;span&gt;0&lt;/span&gt; ];&lt;span&gt;then&lt;/span&gt;
  &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB-Archive-Exception:NeedArchiveDBColName库NeedArchiveColName集合检查发现指定时间段内目标数据库目标集合存在异常文档数，归档终止，请检查！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  exit
&lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

####### end  ######

####### start mongoexport  指定集合指定时间段内的文档，输出到指定路径下;并执行检查命令是否正常执行####
start()
{
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NeedArchiveDBColName库NeedArchiveColName集合备份输出开始&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/QQMSG/mongo_db/mongobin404/bin/mongoexport --port 端口号 -u $username -p $password -d NeedArchiveDBColName --authenticationDatabase NeedArchiveDBColName -c NeedArchiveColName -q &lt;span&gt;'&lt;/span&gt;&lt;span&gt; { NeedArchiveByField: { $gte:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;$ParamBakStartTimeMS&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),$lt:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;$ParamBakEndTimeMS&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) } } &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -o ${targetpath}/&lt;span&gt;${bakcollectionname}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NeedArchiveDBColName库NeedArchiveColName集合备份输出完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}
start
execute()
{
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $? -eq &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The MongoDB 集合 NeedArchiveColName 文档mongoexport完成!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The MongoDB 集合 NeedArchiveColName 文档mongoexport失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
exit
&lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
}
###### end  ######

###### Start mongomongoimport 将导出的备份集合导入到指定的BKDB 指定的集合中#####
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份输入开始&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/QQMSG/mongo_db/mongobin404/bin/mongoimport -h 归档实例IP --port 归档实例端口 -u $username -p $password -d 归档数据库Name --authenticationDatabase 归档数据库Name -c NeedArchiveColName  --&lt;span&gt;file&lt;/span&gt; ${targetpath}/&lt;span&gt;${bakcollectionname}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份输入完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

##### End #######

######## start 连接目标Server DB ，检查target DB 上是否已经存在此时间内的文档
export docQtyT2&lt;/span&gt;=$(/bin/&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.NeedArchiveColName.find({NeedArchiveByField:{$gte:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$ParamBakStartDate\&quot;'),$lt:new Date('\&quot;$ParamBakEndDate\&quot;')}}).count()' | $command_lineT --quiet)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;备份目标BKDB集合NeedArchiveColName备份归档后的文档数据为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $docQtyT2

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;比较docQty 和 docQtyT2 的大小&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; [ $docQty == $docQtyT2 ]; &lt;span&gt;then&lt;/span&gt;
     &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正常:时间段内源数据库集合中的文档数  和 目标数据库集合中还原后的文档数据 相等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; [ $docQty -gt $docQtyT2 ]; &lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB-Archive-Exception:时间段内源数据库集合中的文档数  大于  目标数据库集合中还原后的文档数据&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    exit
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
   &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB-Archive-Exception:时间段内源数据库集合中的文档数  小于  目标数据库集合中还原后的文档数据&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
   exit
&lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
########### End ##### 

########### Start Remove 源数据库源集合指定时间内的记录 ########

docQtyR&lt;/span&gt;=$(/bin/&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.NeedArchiveColName.remove({NeedArchiveByField:{$gte:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;$ParamBakStartTimeMS&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),$lt:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;$ParamBakEndTimeMS&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)}}).nRemoved&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; | $command_line --&lt;span&gt;quiet)
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;本次操作Remove集合NeedArchiveColName的文档数据为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $docQtyR
########## End  #########
###### 检查 Remove 后集合的文档数 ### 
docQty&lt;/span&gt;=$(/bin/&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.NeedArchiveColName.find({NeedArchiveByField:{$gte:new Date(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$ParamBakStartDate\&quot;'),$lt:new Date('\&quot;$ParamBakEndDate\&quot;')}}).count()' | $command_line --quiet)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NeedArchiveDBColName库NeedArchiveColName集合 此次 Remove 后指定时间剩余的文档数据为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $docQty
###### End ###

#########删除导出的文件#######
&lt;/span&gt;&lt;span&gt;rm&lt;/span&gt; -rf ${targetpath}/&lt;span&gt;${bakcollectionname}
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $? -eq &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正常：NeedArchiveDBColName库NeedArchiveColName集合导出的文件被删除:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ${targetpath}/&lt;span&gt;${bakcollectionname}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB-Archive-Exception:NeedArchiveDBColName库NeedArchiveColName集合导出的文件未被正常删除&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ${targetpath}/&lt;span&gt;${bakcollectionname}
&lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
######## End #####&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. 代码说明&lt;/h3&gt;
&lt;h4&gt;4.1 配置基本信息&lt;/h4&gt;
&lt;p&gt;主要包括：mongo bin 可执行文件所在路径；导出过渡文件的定义；归档账号和密码；集合数据保留天数。&lt;/p&gt;
&lt;h4&gt;4.2 代码中关键词&lt;/h4&gt;
&lt;p&gt;明白关键字的含义，可在部署运行前，批量替换&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;代码中关键词&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;关键词意义&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
NeedArchiveDBColName
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;需要归档的集合所在数据库；&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
NeedArchiveColName
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;需要归档的集合名字；&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;pre&gt;
归档数据库Name
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
归档数据库Name
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
NeedArchiveByField
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;归档依据的字段；此例中是Date类型的字段，其他类型还要调试。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt; /QQMSG/mongo_db/mongobin404/bin&lt;/td&gt;
&lt;td&gt; Mongo 可执行文件所在路径&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; 2000000&lt;/td&gt;
&lt;td&gt; 归档的最大阈值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; ArchiveDB_端口号&lt;/td&gt;
&lt;td&gt; 过渡文件所放的位置，一个数据库一个文档。不用细化到集合&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;端口号&lt;/td&gt;
&lt;td&gt;端口号分为源库所在实例端口，和目标库所在实例端口&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;4.3 在本例中，源库和目标库设置了相同的归档账号和对应密码&lt;/h4&gt;
&lt;h4&gt;4.4  通过crontab 实现日常归档，执行信息（异常错误）重定向到log文件&lt;/h4&gt;
&lt;p&gt;归档实现代码保存到文件中，通过crontab设置文件的定时任务，实现日常归档。&lt;/p&gt;
&lt;p&gt;执行情况 重定向（ &amp;gt;&amp;gt;）到指定文件。通过指定文件的监视可实现监控归档的执行情况。&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;本文版权归作者所有，未经作者同意不得转载&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;谢谢配合！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;本文版权归作者所有，未经作者同意不得转载&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;谢谢配合！！！&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文版权归作者所有，未经作者同意不得转载&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;谢谢配合！！！&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 14:11:00 +0000</pubDate>
<dc:creator>东山絮柳仔</dc:creator>
<og:description>1.MongoDB数据归档的意义 和其他类型的数据库一样，归档对MongoDB同样重要。通过归档，可以保持集合中合适的数据量，对数据库的性能是一种保障，也就是大家常说的数据冷热分离。 同时，归档对数据</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuliuzai/p/10698241.html</dc:identifier>
</item>
<item>
<title>Unity 几何着色器 - 君莫笑-93</title>
<link>http://www.cnblogs.com/Firepad-magic/p/10698749.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Firepad-magic/p/10698749.html</guid>
<description>&lt;p&gt;&lt;span class=&quot;tag blue label&quot;&gt;shader&lt;/span&gt;&lt;span class=&quot;tag blue label&quot;&gt;Geometry Shader&lt;/span&gt;&lt;span class=&quot;tag blue label&quot;&gt;几何着色器&lt;/span&gt;&lt;/p&gt;


&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;&lt;span class=&quot;mark mark_color mark_color_F44336&quot;&gt;如果学习不能带来价值，那将毫无意义&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h2&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;简介&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;    在顶点和片段着色器之间有一个可选的着色器，叫做几何着色器(Geometry Shader)。几何着色器以一个或多个表示为一个单独基本图形（primitive）即图元的顶点作为输入，比如可以是一个点或者三角形。几何着色器在将这些顶点发送到下一个着色阶段之前，可以将这些顶点转变为它认为合适的内容。&lt;strong&gt;几何着色器有意思的地方在于它可以把（一个或多个）顶点转变为完全不同的基本图形（primitive），从而生成比原来多得多的顶点。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h2&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;输入&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;    几何着色器阶段可将整个图元作为输入，并能够在输出上生成顶点。&lt;br/&gt;    必须首先指定单次调用几何着色器输出的顶点的最大数量（每个图元调用几何着色器）。这可以通过使用以下属性语法在着色器定义之前设置最大顶点数：&lt;br/&gt;[maxvertexcount(N)]&lt;br/&gt;    其中N是几何着色器为单个调用输出的顶点的最大数量。几何着色器可以在每次调用时输出的顶点数量是可变的，但不能超过定义的最大值。出于性能考虑，最大顶点数应尽可能小; [NVIDIA08]指出，当GS输出在1到20个标量之间时，可以实现GS的性能峰值，如果GS输出在27-40个标量之间，则性能下降50％。每次调用的标量输出数是最大顶点输出数和输出顶点类型结构中的标量数的乘积。&lt;/p&gt;
&lt;table class=&quot;table table-striped table-celled&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;基本图形&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;point&lt;/td&gt;
&lt;td&gt;绘制GL_POINTS基本图形的时候（1）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;line&lt;/td&gt;
&lt;td&gt;当绘制GL_LINES或GL_LINE_STRIP（2）时&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;lineadj&lt;/td&gt;
&lt;td&gt;输入图元具有邻接线段（4）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;triangle&lt;/td&gt;
&lt;td&gt;GL_TRIANGLES, GL_TRIANGLE_STRIP或GL_TRIANGLE_FAN（3）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;triangleadj&lt;/td&gt;
&lt;td&gt;输入图元具有邻接三角形（6）&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h2&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;输出&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;几何着色器通过将顶点附加到输出流对象来一次输出一个顶点。 流的拓扑由固定声明确定，选择 TriangleStream、LineStream 和 PointStream 作为 GS 阶段的输出。&lt;/p&gt;

&lt;h2 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h2&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;声明&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-glsl hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;[maxvertexcount(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)] 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; geometry_shader(point VS_OUTPUT IN[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; TriangleStream&amp;lt;GS_ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;OUTPUT&amp;gt; triStream) {  } 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h2&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;示例&lt;/span&gt;&lt;/h2&gt;

&lt;h3 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h3&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;不做处理&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;    几何着色器位于顶点着色器和片元着色器之间，下面示例中几何着色器没做多余的效果，仅仅相当于默认的数据传递。&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-glsl hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Shader &quot;ShaderCookbook/几何着色器/SimplePoint&quot; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Properties 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_MainTex (&quot;Texture&quot;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;D) = &quot;white&quot; {} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;SubShader 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Tags { &quot;RenderType&quot;=&quot;Opaque&quot; } 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;LOD &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Pass 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;CGPROGRAM 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma vertex vert&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma geometry geom&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma fragment frag&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#include &quot;UnityCG.cginc&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct appdata 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex : POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv : TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct v2g{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex:SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv:TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct g2f 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv : TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex : SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;sampler2D&lt;/span&gt; _MainTex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 _MainTex_ST; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g vert (appdata v) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex = UnityObjectToClipPos(v.vertex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv = TRANSFORM_TEX(v.uv, _MainTex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;[maxvertexcount(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)] 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; geom(triangle v2g input[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; TriangleStream&amp;lt;g2f&amp;gt; outStream){ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;i++){ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;g2f o=(g2f)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex=input[i].vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv=input[i].uv; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;outStream.Append(o); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;outStream.RestartStrip(); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 frag (g2f i) : SV_Target 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 col = tex2D(_MainTex, i.uv); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; col; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ENDCG 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h3&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;点&lt;/span&gt;&lt;/h3&gt;

&lt;h4 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h4&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;示例一：单纯的点&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;点&quot; src=&quot;https://img2018.cnblogs.com/blog/760344/201904/760344-20190412213707245-1119878193.jpg&quot; alt=&quot;点&quot; name=&quot;images/point.jpg&quot; data-src=&quot;./images/point.jpg&quot;/&gt;&lt;p&gt;点&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-glsl hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Shader &quot;ShaderCookbook/几何着色器/OnlyPoint&quot; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Properties 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_MainTex (&quot;Texture&quot;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;D) = &quot;white&quot; {} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;SubShader 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Tags { &quot;RenderType&quot;=&quot;Opaque&quot; } 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;LOD &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Pass 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;CGPROGRAM 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma vertex vert&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma geometry geom&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma fragment frag&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#include &quot;UnityCG.cginc&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct appdata 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex : POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv : TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct v2g{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex:SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv:TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct g2f 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv : TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex : SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;sampler2D&lt;/span&gt; _MainTex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 _MainTex_ST; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g vert (appdata v) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex = UnityObjectToClipPos(v.vertex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv = TRANSFORM_TEX(v.uv, _MainTex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;[maxvertexcount(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)] 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; geom(point v2g input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; PointStream&amp;lt;g2f&amp;gt; outStream){ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;g2f o=(g2f)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex=input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv=input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].uv; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;outStream.Append(o); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 frag (g2f i) : SV_Target 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 col = tex2D(_MainTex, i.uv); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; col; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ENDCG 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h4&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;示例二：散裂&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;    这里需要注意的是我们通过以v[0]为原点构建两个向量，通过这两个向量我们可以自定义点。&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;story_image_container story_block_image&quot; readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;story_image&quot; readability=&quot;33&quot;&gt;&lt;img title=&quot;由s,t构成的仿射坐标系&quot; src=&quot;https://img2018.cnblogs.com/blog/760344/201904/760344-20190412213707585-277242931.jpg&quot; alt=&quot;由s,t构成的仿射坐标系&quot; name=&quot;images/st.jpg&quot; data-src=&quot;./images/st.jpg&quot;/&gt;&lt;p&gt;由s,t构成的仿射坐标系&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;炸裂&quot; src=&quot;https://img2018.cnblogs.com/blog/760344/201904/760344-20190412213707903-128648325.jpg&quot; alt=&quot;炸裂&quot; name=&quot;images/dpoint.jpg&quot; data-src=&quot;./images/dpoint.jpg&quot;/&gt;&lt;p&gt;炸裂&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-glsl hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Shader &quot;ShaderCookbook/GeometryShader/分解&quot; { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Properties { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_MainTex(&quot;Texture&quot;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; D) = &quot;white&quot; {} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_Height(&quot;Length&quot;, &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_Offset(&quot;Offset&quot;, &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_StripColor(&quot;StripColor&quot;, Color) = (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_OutColor(&quot;OutColor&quot;, Color) = (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_InColor(&quot;InColor&quot;, Color) = (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;SubShader { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Cull off 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Pass { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Tags { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&quot;RenderType&quot; = &quot;Opaque&quot; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;CGPROGRAM&lt;span class=&quot;hljs-meta&quot;&gt;# pragma vertex vert# pragma fragment frag#include &quot;UnityCG.cginc&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct appdata { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex: POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct v2f { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex: SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 objPos: TEXCOORD1; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;sampler2D&lt;/span&gt; _MainTex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 _MainTex_ST; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; _Height; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; _Offset; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 _StripColor; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2f vert(appdata v) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2f o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex = UnityObjectToClipPos(v.vertex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.objPos = v.vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv = v.uv; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 frag(v2f i): SV_Target { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 col = tex2D(_MainTex, i.uv); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;clip(_Height + _Offset - i.objPos.y); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.objPos.y &amp;gt; _Height) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;col = _StripColor; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; col; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ENDCG 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;pass { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Tags { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&quot;RenderType&quot; = &quot;Opaque&quot; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;CGPROGRAM&lt;span class=&quot;hljs-meta&quot;&gt;# pragma vertex vert# pragma geometry geome# pragma fragment frag#include &quot;UnityCG.cginc&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 _OutColor; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 _InColor; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; _Height; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; _Offset; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct appdata { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex: POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float3 normal: NORMAL; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct v2g { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 objPos: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float3 normal: NORMAL; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct g2f { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex: SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 col: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; ADD_VERT(float4 v, g2f o, &lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; PointStream &amp;lt; g2f &amp;gt; outstream) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex = v; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;outstream.Append(o); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g vert(appdata v) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.objPos = v.vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.normal = v.normal; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;[maxvertexcount(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)] 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; geome(triangle v2g input[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; PointStream &amp;lt; g2f &amp;gt; outStream) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;g2f o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex = (input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].objPos + input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].objPos + input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].objPos) / &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float3 normal = (input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].normal + input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].normal + input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].normal) / &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (vertex.y &amp;lt; _Height + _Offset) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 s = input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].objPos - input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].objPos; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 t = input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].objPos - input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].objPos; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.col = _OutColor * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;input[i].objPos.xyz += input[i].normal * (vertex.y - _Height); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;input[i].objPos = UnityObjectToClipPos(input[i].objPos); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_VERT(input[i].objPos, o, outStream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.col = _InColor * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 v[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt; * s + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt; * t; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt; * s + &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt; * t; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt; * s + &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt; * t; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v[i].xyz += normal * (vertex.y - _Height); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v[i] = UnityObjectToClipPos(v[i]); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_VERT(v[i], o, outStream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 frag(g2f i): SV_Target { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 col = i.col; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; col; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ENDCG 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h3&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;线&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;线&quot; src=&quot;https://img2018.cnblogs.com/blog/760344/201904/760344-20190412213708464-906661513.jpg&quot; alt=&quot;线&quot; name=&quot;images/line.jpg&quot; data-src=&quot;./images/line.jpg&quot;/&gt;&lt;p&gt;线&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;h4 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h4&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;示例：wire frame&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-glsl hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Shader &quot;ShaderCookbook/几何着色器/TriangleLine&quot; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Properties 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_MainTex (&quot;Texture&quot;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;D) = &quot;white&quot; {} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;SubShader 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Tags { &quot;RenderType&quot;=&quot;Opaque&quot; } 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;LOD &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Pass 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;CGPROGRAM 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma vertex vert&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma geometry geom&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma fragment frag&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#include &quot;UnityCG.cginc&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct appdata 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex : POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv : TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct v2g{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex:SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv:TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct g2f 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv : TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex : SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;sampler2D&lt;/span&gt; _MainTex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 _MainTex_ST; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g vert (appdata v) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex = UnityObjectToClipPos(v.vertex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv = TRANSFORM_TEX(v.uv, _MainTex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;[maxvertexcount(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)] 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; geom(triangle v2g input[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; LineStream&amp;lt;g2f&amp;gt; outStream){ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;g2f o=(g2f)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex=input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv=input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].uv; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;outStream.Append(o); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex=input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv=input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].uv; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;outStream.Append(o); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex=input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv=input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].uv; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;outStream.Append(o); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 frag (g2f i) : SV_Target 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 col = tex2D(_MainTex, i.uv); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; col; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ENDCG 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h3&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;面&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/760344/201904/760344-20190412213709420-834037825.gif&quot; alt=&quot;enter description here&quot; name=&quot;images/尖刺.gif&quot; data-src=&quot;./images/%E5%B0%96%E5%88%BA.gif&quot;/&gt;&lt;p&gt;enter description here&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;h4 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h4&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;示例：尖刺&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-glsl hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Shader &quot;ShaderCookbook/GeometryShader/尖刺&quot; { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Properties { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_MainTex(&quot;Texture&quot;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;D) = &quot;white&quot; {} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;_Length(&quot;Length&quot;, &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;SubShader { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Tags { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&quot;RenderType&quot; = &quot;Opaque&quot; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;LOD &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;Pass { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;CGPROGRAM 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma vertex vert&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma geometry geom&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma fragment frag&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#pragma multi_compile_fog&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#include &quot;UnityCG.cginc&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct appdata { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex: POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct v2g { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 pos: SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;struct g2f { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 uv: TEXCOORD0; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 vertex: SV_POSITION; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;sampler2D&lt;/span&gt; _MainTex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float4 _MainTex_ST; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; _Length; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; ADD_VERT(float3 v, g2f o, &lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; TriangleStream &amp;lt; g2f &amp;gt; tristream) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.vertex = UnityObjectToClipPos(v); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;tristream.Append(o); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; ADD_TRI(float3 p0, float3 p1, float3 p2, g2f o, &lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; TriangleStream &amp;lt; g2f &amp;gt; tristream) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_VERT(p0, o, tristream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_VERT(p1, o, tristream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_VERT(p2, o, tristream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;tristream.RestartStrip(); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g vert(appdata v) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;v2g o = (v2g) &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.pos = v.vertex; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv = TRANSFORM_TEX(v.uv, _MainTex); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;[maxvertexcount(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)] 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; geom(triangle v2g input[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-keyword&quot;&gt;inout&lt;/span&gt; TriangleStream &amp;lt; g2f &amp;gt; outStream) { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;g2f o; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float3 s = (input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].pos - input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].pos).xyz; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float3 t = (input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].pos - input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].pos).xyz; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float3 normal = &lt;span class=&quot;hljs-built_in&quot;&gt;normalize&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;cross&lt;/span&gt;(s, t)); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float3 centerPos = (input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].pos.xyz + input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].pos.xyz + input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].pos.xyz) / &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;float2 centerUv = (input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].uv + input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].uv + input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].uv) / &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;o.uv = centerUv; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;centerPos += normal * _Length * &lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;(_Time.y * &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_TRI(input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].pos, centerPos, input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].pos, o, outStream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_TRI(input[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].pos, centerPos, input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].pos, o, outStream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ADD_TRI(input[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].pos, centerPos, input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].pos, o, outStream); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 frag(g2f i): SV_Target { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;fixed4 col = tex2D(_MainTex, i.uv); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; col; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;ENDCG 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h2&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;Other&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;项目工程：链接: &lt;a class=&quot;xsj_link xsj_auto_link&quot; href=&quot;https://pan.baidu.com/s/1eGk6GHIfWzIFcAX6pxTGRA&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1eGk6GHIfWzIFcAX6pxTGRA&lt;/a&gt; 提取码: fv75&lt;/p&gt;
&lt;p&gt;eqm2Bj23236&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_1&quot;&gt;&lt;a class=&quot;xsj_link xsj_manu_link&quot; href=&quot;https://learnopengl-cn.readthedocs.io/zh/latest/04%20Advanced%20OpenGL/09%20Geometry%20Shader/&quot; target=&quot;_blank&quot;&gt;参考一&lt;/a&gt;&lt;br/&gt;&lt;a class=&quot;xsj_link xsj_manu_link&quot; href=&quot;https://open.gl/geometry&quot; target=&quot;_blank&quot;&gt;参考二&lt;/a&gt;&lt;br/&gt;&lt;a class=&quot;xsj_link xsj_manu_link&quot; href=&quot;https://blog.csdn.net/qq_37925032/article/details/82936769&quot; target=&quot;_blank&quot;&gt;参考三&lt;/a&gt;&lt;br/&gt;&lt;a class=&quot;xsj_link xsj_manu_link&quot; href=&quot;https://api.assetstore.unity3d.com/affiliate/embed/package/68570/widget?aid=1011l5dHP%22&quot; target=&quot;_blank&quot;&gt;可视化shader编程工具&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;&lt;span class=&quot;mark mark_color mark_color_FF9800&quot;&gt;这里推荐一款可视化shader编程工具，对美术同学非常友好，就像建模工具中的材质编辑器一样&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 13:37:00 +0000</pubDate>
<dc:creator>君莫笑-93</dc:creator>
<og:description>Unity 几何着色器 shaderGeometry Shader几何着色器 Unity 几何着色器 如果学习不能带来价值，那将毫无意义 简介 在顶点和片段着色器之间有一个可选的着色器，叫做几何着色器</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Firepad-magic/p/10698749.html</dc:identifier>
</item>
<item>
<title>sqlserver 抓取所有执行语句  SQL语句分析 死锁 抓取 - black2bi</title>
<link>http://www.cnblogs.com/qiaqia-liu/p/10698643.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiaqia-liu/p/10698643.html</guid>
<description>&lt;p&gt;在多人开发中最头疼的是人少事多没有时间进行codereview,本来功能都没时间写,哪有时间来开会细细来分析代码.软件能跑就行,但是一些影响性能的语句写出来,有可能本人都不知道.找就更&lt;/p&gt;
&lt;p&gt;麻烦了.幸亏sqlserver提供了工具可以导出执行语句进行分析.可以看看是哪些语句影响整体性能.工具叫sql server profiler,这玩意可以抓取实例上执行的所有语句\死锁\事物,为分析提供帮助.&lt;/p&gt;
&lt;p&gt;开始-&amp;gt;sqlserver目录-&amp;gt;性能工具-&amp;gt;sql server profiler 打开软件新建连接你想抓的实例,然后你就可以看到这个了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/411120/201904/411120-20190412202400521-167589313.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击显示所有事件,会列出可以监视的所有状态.一般分析和用的多的话死TSQL\Stored ProcedureS\Lock 这三个.第一个很简单是SQL语句,第二个是存储过程,第三个是锁的情况.&lt;/p&gt;
&lt;p&gt;一般把前两个放在一起分析.可以找到所有的执行语句.第三个用来单独分析来找死锁.&lt;/p&gt;
&lt;p&gt;前两个选好以后,转到第一个选项卡,不要保存在文件,保存在文件给没有一样,直接保存到表,这时,你要另外找个数据库了.因为保存到表中相当于往保存的数据库中插入一条记录,然后这个语句&lt;/p&gt;
&lt;p&gt;又会产生一个语句,造成无限递归,一会就把服务器搞死,我们一次分析时,直接把要分析的库跟抓取的库放在同一个实例上,结果3分钟后整个SQL挂了,没有响应了,删了抓取表,重启实例服务,重启网站&lt;/p&gt;
&lt;p&gt;才好.还好是处理的快.简单说,&lt;span&gt;比如你要分析服务器上的一个实例所有的语句,你要把抓取的结果放在你本地的数据库实例中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;放到数据库表中后,因为是结构化数据,所以分析也特别容易,一下贴一张图.抓取的结果放在表中,是会覆盖原表中的数据.还有它抓取数据中,界面在不断的闪烁.也在列表中增加,如果服务器显卡不佳,一会&lt;/p&gt;
&lt;p&gt;就给卡死,所以开启以后直接最小化,抓取完毕直接用任务处理器杀掉进程就行.抓取时间跟你们要分析的片段有关.然后用SQL语句直接查出耗时前10,然后个人认领回去修改就行.我存在本地数据库&lt;/p&gt;
&lt;p&gt;名字DataA中的表InitTableInfo,这样我们就可以查询下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;use&lt;/span&gt;&lt;span&gt; DataA

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;top&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; &lt;span&gt;datediff&lt;/span&gt;&lt;span&gt;(second, StartTime, EndTime) costtime,
       RowNumber,
       TextData,
       ApplicationName,
       ClientProcessID,
       SPID
  &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; InitTableInfo
 &lt;/span&gt;&lt;span&gt;where&lt;/span&gt; StartTime &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;
   &lt;span&gt;and&lt;/span&gt; EndTime &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;
 &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; costtime &lt;span&gt;desc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是结果展示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/411120/201904/411120-20190412205427371-58127066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一个是花费的时间,还有对应的语句,以及一些额外的信息.可以看到一些用时最大的达到20多秒.很吓人的额.这样贴出来让个人认领去修改.达到提升执行效率的目的.&lt;/p&gt;
&lt;p&gt;2.死锁&lt;/p&gt;
&lt;p&gt;程序运行中一些关键模块,比如会员积分和金额代金券等,有些人写的因为不够注意或者当时水平不行,容易些一些死锁.这样我们需要有一个分析的路径.&lt;/p&gt;
&lt;p&gt;如果再程序中加入try catch来捕获,自己写的熟悉的模块还好,如果是别人写的另外时间紧任务重.你一时发现不了,你就可以启用死锁了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/411120/201904/411120-20190412211342905-1617080854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;deadlock graph 会把找到的deadlock放到一个xdl文件中,这玩意用文件夹也打的开,可以分别存储每个deadlock发生的语句和占用的资源.这时间你就可以根据这玩意处理了.&lt;/p&gt;
&lt;p&gt;一般处理死锁是相同顺序的读写\优化索引和最小限度的使用表里的数据,对于抓取数据,进行使用行级锁和页级锁.对于非必要的数据进行脏读.单独说又是很多了.这里只介绍工具&lt;/p&gt;
&lt;p&gt;保存好的死锁文件,可以送给你的各位同事,&lt;/p&gt;

</description>
<pubDate>Fri, 12 Apr 2019 13:19:00 +0000</pubDate>
<dc:creator>black2bi</dc:creator>
<og:description>在多人开发中最头疼的是人少事多没有时间进行codereview,本来功能都没时间写,哪有时间来开会细细来分析代码.软件能跑就行,但是一些影响性能的语句写出来,有可能本人都不知道.找就更 麻烦了.幸亏s</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiaqia-liu/p/10698643.html</dc:identifier>
</item>
</channel>
</rss>