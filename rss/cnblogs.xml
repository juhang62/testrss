<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>程序员学习技术的阶段 - 飞翔码农</title>
<link>http://www.cnblogs.com/feixiangmanon/p/10545269.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feixiangmanon/p/10545269.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;每个程序员对技术的学习和理解都是一段故事。而且每个人的学习过程和学习经历也各不相同。和很多资深的同事和朋友也聊过他们自己的学习过程，发现大家都经历过相同的阶段，获得了相同的结果，只是大家每个阶段花费的时间长短不一样而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;学习阶段&quot;&gt;学习阶段&lt;/h3&gt;
&lt;p&gt;学习阶段是学生走向职场第一个必经的阶段。这个阶段觉得自己过得特别充实。刚进入职场，一张白纸，反正啥也不会，对每个技术点都特别感兴趣，对个每个高深的技术都特别晕逼。对技术牛逼的人特别的崇拜。对一些工作中比较难理解、比较的绕的东西总是云里雾里。但是每个新人都特别的努力，上下班地铁看技术书，看电子书，记笔记，周末宅在家看书看视频。觉得每天都进步好大，每天都学习和掌握了很多的技术，几个月就掌握了很多工作的需要的技术点。&lt;/p&gt;
&lt;p&gt;自己的经历也是这样的。记得我刚开始上班的时候，那时候智能手机还没普及，每天上线班地铁上看书，发现不会的特别的多，而且对每项技术都特别有兴趣，我作为一个后端开发者，那时候还经常会学习CSS 和JS的东西。领导说啥都感觉一脸懵逼，开始阶段还感觉自己是学生的角色，脸皮薄，好面子，有的东西自己不知道，也不好意思打断领导的说话，领导说完之后，再去网上查询各种技术的用语。每天都很努力，每天都觉得自己很充实，每天都在进步，慢慢的从啥都不会，变得在工作中的开发越来越顺畅。但是每次线上出事故，都是老油条们在处理，自己也没有机会插手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个阶段的缺点：始终觉得内存啊IO啊跟自己没关系，索引也只是需要的时候加上，也不知道加上没加上有什么本质的区别，进程和线程也可能只知道概念，CPU的调度也可能只是知道原理。始终没觉得这些跟平常开发有啥关系。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;顿悟阶段&quot;&gt;顿悟阶段&lt;/h3&gt;
&lt;p&gt;和资深的同事朋友聊得时候，发现这个阶段是每个程序员最重要的阶段，基本上是技术的分水岭。但是每个程序员从学习阶段到顿悟阶段花费的时间各不一样，有的两年，有的三年，有的四五年，我自己反应慢，比较笨，感觉至少在三年以上。&lt;br/&gt;学习阶段比较漫长，有好多人比较迷茫，比较慌。学习了一段时间，至少几年，感觉没啥可学了，会的已经会了，不会的一直不会，发现不管怎么学都停滞不前了。这个阶段也早不是学习和领悟的疯狂阶段了，心态上也会有所变化，从原来的觉得自己好聪明，这个昨天学会的，这个今天学会的，这些明天或者下个月就学会了。到现在的，怎么特么的能这么笨呢，都特么两年还理解不了。&lt;br/&gt;生产的出了问题也没啥头绪，不知道该从哪下手，最终还是老油条解决了问题，而且码农比较内向腼腆，你如果不问他大概率也不会告诉是什么原因，怎么定位，怎么解决的。&lt;br/&gt;因为这个阶段没有解决线上问题的能力，工资也停滞不前，涨不上去了。&lt;br/&gt;最关键的时刻到了，有那么一刻时间，一下子顿悟了，一下子豁然开朗了。原来变量的内存是这么分配的，原来CPU是这么调度的，进程和线程是这么工作的，原来索引是这样引起查询速度快的...总之，有那么一瞬间觉得原来不懂不理解的东西，都理解了。这个精确的时间，阳光是辣么的灿烂，辣么的明媚，辣么的充满温馨，鸟儿们叫得是辣么的欢势和优美。总之，一切都特别好。&lt;/p&gt;
&lt;h3 id=&quot;解决问题的阶段&quot;&gt;解决问题的阶段&lt;/h3&gt;
&lt;p&gt;过了顿悟的一瞬间，慢慢的知识的链路就全部打通了，学习的知识也就全部串起来了。这个阶段看到的学习过的知识图谱，是一张全部知识的关系串联图。过了顿悟阶段，其实是越来越自信的，觉得自己已经具备了定位问题和解决问题的能力，心里已经这么想了。缺的只是机会，每次出问题的时候，自己心里已经有了一个大概的处理方案，然后自已推演，得到一个大概的结果，然后请教解决问题的人，是否跟自己的推演结果一致，发现大多时候是一致的。&lt;br/&gt;有一天，线上出故障了，解决问题的人或请假了或离职了，然后自己或被迫站出来，或默默站出来，根据机器故障的现象，寻找线索，根据线索定位问题，最后解决问题。然后这样的次数越来越多，领导越来越信任。嗯。好嗨呀，升值加薪，走上人生巅峰。自己又回到了刚开始自信的阶段，咋能这么聪明，这么短的时间就能解决问题了。都有种不相信自己的感觉。&lt;br/&gt;然后慢慢的解决问题的经验越来越丰富，慢慢带新人，教别人解决问题...&lt;/p&gt;
&lt;h3 id=&quot;结束语&quot;&gt;结束语&lt;/h3&gt;
&lt;p&gt;每个人的学习阶段到顿悟阶段的时间长短不一致，学习阶段，不要迷茫，不要气馁，不要灰心，不要放弃。不是因为笨，是因为每个人都会经历。要做的是努力学习，完善知识碎片，只有这样，等顿悟的时候，看到的关系串联图才能足够大，足够广。解决问题的都能用得上，因为定位问题需要方方面面的知识，网络知识，运维知识，CPU内存IO等等，还有各种工具的使用。&lt;br/&gt;加油吧，码农。&lt;/p&gt;
</description>
<pubDate>Sat, 16 Mar 2019 22:18:00 +0000</pubDate>
<dc:creator>飞翔码农</dc:creator>
<og:description>每个程序员对技术的学习和理解都是一段故事。而且每个人的学习过程和学习经历也各不相同。和很多资深的同事和朋友也聊过他们自己的学习过程，发现大家都经历过相同的阶段，获得了相同的结果，只是大家每个阶段花费的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feixiangmanon/p/10545269.html</dc:identifier>
</item>
<item>
<title>使用TPC-DS工具生成数据 - 秦无殇</title>
<link>http://www.cnblogs.com/webDepOfQWS/p/10544528.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/webDepOfQWS/p/10544528.html</guid>
<description>&lt;h2&gt;1、下载工具&lt;/h2&gt;
&lt;p&gt;两种渠道&lt;/p&gt;
&lt;p&gt; a、官网（建议直接跳过～）&lt;/p&gt;
&lt;p&gt;地址：http://www.tpc.org/tpc_documents_current_versions/current_specifications.asp&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190316220653569-490738447.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在信息填写正确的情况下，无法下载。看网友的解答，需要用谷歌浏览器才能下载。尝试未果。&lt;/p&gt;
&lt;p&gt;b、github上下载&lt;/p&gt;
&lt;p&gt;地址： &lt;a href=&quot;https://github.com/gregrahn/tpcds-kit.git&quot;&gt;&lt;span&gt;https://github.com/gregrahn/tpcds-kit.git&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps：官方的包生成sql的时候会报错，上面这个大神已经修复。&lt;/p&gt;
&lt;h2&gt;2、编译&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;操作环境：Ubuntu16&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;进入TPC-DS工具包所在目录，由于下载的是源码，需要编译后才能使用。&lt;/p&gt;
&lt;p&gt;a、解压&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;unzip&lt;/span&gt;  tpcds-kit-master.&lt;span&gt;zip&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b、编译&lt;/p&gt;
&lt;p&gt;编译之前请确认依赖环境ok&lt;/p&gt;
&lt;p&gt;ubuntu：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; &lt;span&gt;gcc&lt;/span&gt; &lt;span&gt;make&lt;/span&gt; flex bison byacc git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CentOS/RHEL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;gcc&lt;/span&gt; &lt;span&gt;make&lt;/span&gt; flex bison byacc git
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tpcds-kit-master/&lt;span&gt;tools

&lt;/span&gt;&lt;span&gt;make&lt;/span&gt;  -f  Makefile.suite
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译过程中报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190316222024094-1098747592.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;make: yacc: Command not found。报错是因为yacc没有安装 。&lt;/p&gt;
&lt;p&gt;安装yacc&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; -y byacc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次编译&lt;/p&gt;
&lt;p&gt;又报错对‘yy_create_buffer’未定义的引用。对C/C++不熟悉，搜索了一下也没有相关的解答。百思不得其解之下，换了个思路。可能是第一次编译报错生成的错误文件对第二次编译产生的影响。&lt;/p&gt;
&lt;p&gt;于是删除解压后的目录，重新编译成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190316232423116-768321521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果生成dsdgen和dsqgen且无报错，说明编译成功&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt; 3、生成数据&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;第一次使用这个工具我是一脸懵比的。因为官方的文档特喵的根本看不懂。回想一下，你碰到不熟悉的linux命令是怎么做的？man或者--help，对吧。这里也可以用--help。&lt;/p&gt;
&lt;p&gt;先不着急生成数据，看一下帮助信息先。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
./dsdgen  --help
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190316234636848-889367627.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DIR：数据存放目录。&lt;/li&gt;
&lt;li&gt;SCALE：数据量，以GB为单位。&lt;/li&gt;
&lt;li&gt;TABLE：生成哪张表的数据，一共有24张表哦。&lt;/li&gt;
&lt;li&gt;PARALLEL：生成的数据一共分为多少份，一般生成TB级数据才会用到。&lt;/li&gt;
&lt;li&gt; CHILD：当前数据是第几份，与PARALLEL配对使用。&lt;/li&gt;
&lt;li&gt;FORCE：强制写入数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;常用的参数就上面几个。下面我们来生成1G包含所有表的数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./dsdgen  -scale &lt;span&gt;1&lt;/span&gt; -&lt;span&gt;dir&lt;/span&gt; ../data/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190316235728076-771412288.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;等待dsdgen程序正常退出后，1G数据需要2～3min左右，进入data目录查看生成的数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
cd ../data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190317000122169-598507816.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;假如只想生成其中某一张表的数据呢？这就需要用到-table参数了，以web_returns表为例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./dsdgen  -scale &lt;span&gt;1&lt;/span&gt; -&lt;span&gt;dir&lt;/span&gt; ../data -table web_returns
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;报错了，信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190317000905328-482000586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;web_returns是子表，它是依赖于父表web_sales的。生成父表的时候也会同时生成子表，我们来验证一下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./dsdgen  -scale &lt;span&gt;1&lt;/span&gt; -&lt;span&gt;dir&lt;/span&gt; ../data -table web_sales
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190317001403910-1585865314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明一下，最终生成的数据量以少于scale值的。&lt;/p&gt;

&lt;p&gt;dsdgen的用法暂时先总结到这里。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 4、生成SQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查询SQL使用dsqgen生成，主要用于测试数据仓库的性能，一共99个。详细用法可以用--help查看帮助信息。这里不做介绍直接生成。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
./dsqgen  -DIRECTORY ../query_templates/ -TEMPLATE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;query1.tpl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -DIALECT netezza -FILTER Y &amp;gt; ../sql/query1.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;pre&gt;
-DIRECTORY：SQL模板的路径
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;pre&gt;
-TEMPLATE：SQL模板的名称
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;pre&gt;
-DIALECT：include query dialect defintions found in &amp;lt;s&amp;gt;.tpl
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;pre&gt;
-FILTER：重定向到标准输出。
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;查看生成的SQL：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190317003241504-1548677382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一共有99,每一个都要这样生成多费劲呀。来写个for循环一把生成所有的SQL。&lt;/p&gt;
&lt;p&gt;shell版：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #!/bin/&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; `&lt;span&gt;seq&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;99&lt;/span&gt;&lt;span&gt;`
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; ./dsqgen  -DIRECTORY ../query_templates/ -TEMPLATE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;query${i}.tpl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -DIALECT netezza -FILTER Y &amp;gt; ../sql/&lt;span&gt;query${i}.sql
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python3版：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;coding:utf-8&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;generate query sql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(1,100&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     tpl = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(i)+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.tpl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     qsql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +str(i) +&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.sql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;拼接命令&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     cmd = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./dsqgen  -DIRECTORY ../query_templates/ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-TEMPLATE &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+tpl+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; -DIALECT netezza -FILTER Y &amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../sql/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;qsql
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(cmd)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行命令&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     os.system(cmd)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;去sql目录下查看刚才生成的SQL：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190317010525254-399407806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种情况下还是shell更快一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、总结&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过TPC-DS，可以生成指定量级的数据。&lt;/li&gt;
&lt;li&gt;碰到报错不要慌，先google或bing，不要用某度，原因你懂的。&lt;/li&gt;
&lt;li&gt;TPC-DS基本用法已经总结完了，但是实际操作中还有很多问题，比如：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;我想要生成10T数据怎么搞？&lt;/li&gt;
&lt;li&gt;怎么判断生成的数据是否正确呢？&lt;/li&gt;
&lt;li&gt;child和parallel怎么使用？&lt;/li&gt;
&lt;li&gt;数据和SQL生成完了怎么测试？&lt;/li&gt;
&lt;li&gt;。。。。。。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;     后面有时间再总结。&lt;/p&gt;

</description>
<pubDate>Sat, 16 Mar 2019 17:27:00 +0000</pubDate>
<dc:creator>秦无殇</dc:creator>
<og:description>数据仓库测试中，如何使用TPC-DS工具生成指定量级的数据和查询SQL？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/webDepOfQWS/p/10544528.html</dc:identifier>
</item>
<item>
<title>我的一些关于现在职业的疑惑 - 海瑞菌·博客</title>
<link>http://www.cnblogs.com/wuhairui/p/10545188.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuhairui/p/10545188.html</guid>
<description>&lt;p&gt;我是做前端的，其实一直想跳槽，从去年开始。一直时不时的有这种念头，看着其他的同事想跳就跳掉了，而我面试了几个月却没有成功的（几乎电话面，请假要经过多重审批），总结的一些知识点，很多即使记录了也没有在当时答出来，或者答得很微妙，可能也是没有做过这类知识的项目经验吧，又或者我对它们的理解还尚太浅。因为这一家公司已经呆了4年了。技术能力因为业务需求和公司内部流程的关系，还有和外界使用很多不着边界的技术已经老技术，还有和领导和同事们之间的关系也一直一般，最多也就打打招呼。即使这样也呆了4年。虽然在我之后入职的同事都觉得我能力不错，但是却不能让领导赏识。尽管努力过多次，但依旧比不上领导觉得好的人。也累了这种一直只做一个项目。不断重构，需求坑，又好似安逸的工作和生活。想离职是因为很想改变现状（虽然不知道以后会如何）。一直在这家公司，很多能力已经严重脱节，但是又无法静下心来好好学习，甚至自己去完成一个自己想完成的完成的项目，就想快点，但大量的不喜欢的改造需求却占了很多时间和精力，多数的时间不是在写代码，而是在沟通。以及互联网上找不到的各种问题的解决方案。我想找回那种曾经初生牛犊不怕虎的样子，以前的我虽然很内向自卑，但不怕什么，喜欢的女孩就去表白，有过在一起一段时间的，即使最后还是失败。但现在的我，却变得更加瞻前顾后，害怕离职意味着找不到适合的公司。还有曾经前端也是自学的，没事爱写写博客文章。现在却找不到方向，生活又比较单一了。说起来也是有点可笑。甚至还想写文章请假网上的人。&lt;/p&gt;
</description>
<pubDate>Sat, 16 Mar 2019 17:27:00 +0000</pubDate>
<dc:creator>海瑞菌&amp;#183;博客</dc:creator>
<og:description>我是做前端的，其实一直想跳槽，从去年开始。一直时不时的有这种念头，看着其他的同事想跳就跳掉了，而我面试了几个月却没有成功的（几乎电话面，请假要经过多重审批），总结的一些知识点，很多即使记录了也没有在当</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuhairui/p/10545188.html</dc:identifier>
</item>
<item>
<title>使用 HttpRequester 更方便的发起 HTTP 请求 - WeihanLi</title>
<link>http://www.cnblogs.com/weihanli/p/fire-http-request-with-http-requester.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/weihanli/p/fire-http-request-with-http-requester.html</guid>
<description>&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;一直感觉 .net 里面（这里主要说的是 .net framework 下)发送 HTTP 请求的方式用着不是特别好用，而且在 .net framework 里发送 HTTP 请求的方式有好几种，如：&lt;code&gt;WebClient&lt;/code&gt;/&lt;code&gt;WebRequest&lt;/code&gt;/&lt;code&gt;HttpClient&lt;/code&gt;，于是自己封装了一个 HttpRequester&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WebClient&lt;/code&gt; 主要是用来下载，不能对 HTTP 做较多的自定义，&lt;code&gt;HttpClient&lt;/code&gt; 是微软后来加入的，也是比较推荐使用的处理 HTTP 请求的，但是在 .net framework 下如果不注意的话可能会造成很大的灾难，从 .net core 2.1 开始，微软引入了 &lt;code&gt;HttpClientFactory&lt;/code&gt; 去解决了一些问题，如果你是在 .net core 程序下跑的话，推荐使用 &lt;code&gt;HttpClient&lt;/code&gt;，如果在 .net framework 下跑的话可以使用 &lt;code&gt;WebRequest&lt;/code&gt;，这里说明一下，.net core 下，&lt;code&gt;WebRequest&lt;/code&gt; 内部也是基于 &lt;code&gt;HttpClient&lt;/code&gt; 的，详细可以参考 &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs#L1096&quot; class=&quot;uri&quot;&gt;https://github.com/dotnet/corefx/blob/master/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs#L1096&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2432073-eff4b1f3a0e72f80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;HttpWebRequest&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpRequester&lt;/code&gt; 是基于 &lt;code&gt;WebRequest&lt;/code&gt; 封装的，使用比较简洁的 Fluent API 的方式调用，如果是在 .net framework 下开发，可以尝试使用一下，具体使用可以参考下面的示例以及 Github 上的&lt;a href=&quot;https://github.com/WeihanLi/WeihanLi.Common/blob/dev/samples/DotNetCoreSample/HttpRequesterTest.cs&quot;&gt;示例代码&lt;/a&gt; &lt;a href=&quot;https://github.com/WeihanLi/WeihanLi.Common/blob/dev/samples/DotNetFxSample/HttpHelperSample.cs#L122&quot;&gt;示例代码2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;添加-nuget-包引用&quot;&gt;添加 Nuget 包引用&lt;/h2&gt;
&lt;p&gt;添加对 &lt;code&gt;WeihanLi.Common&lt;/code&gt; 的引用，需要 1.0.14 及以上版本&lt;/p&gt;
&lt;h2 id=&quot;使用-httprequester&quot;&gt;使用 &lt;code&gt;HttpRequester&lt;/code&gt;&lt;/h2&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;
var result = new HttpRequester(&quot;https://weihanli.xyz&quot;) // 使用 GET 方式请求 https://weihanli.xyz
                .Execute(); // 返回 responseText
System.Console.WriteLine(result);

 // 使用 POST 方法请求 https://accounting.weihanli.xyz/Account/LogOn
var loginResult = new HttpRequester(&quot;https://accounting.weihanli.xyz/Account/LogOn&quot;, HttpMethod.Post)
                .WithHeaders(new Dictionary&amp;lt;string, string&amp;gt;()
                {
                    { &quot;X-Requested-With&quot;, &quot;XMLHttpRequest&quot; },
                }) // 设置请求头
                // .AjaxRequest(true)
                // 设置 Referer，在做爬虫时会比较有用，还可以通过 WithProxy(&quot;proxyUrl&quot;) 设置代理
                .WithReferer(&quot;https://accounting.weihanli.xyz/Account/Login?ReturnUrl=%2F&quot;) 
                // 手动设置 UserAgent，默认会随机设置一个 UA
                .WithUserAgent(&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&quot;)
                .WithFormParameters(new Dictionary&amp;lt;string, string&amp;gt;()
                {
                    {&quot;Username&quot;,&quot;liweihan&quot; },
                    {&quot;Password&quot;, &quot;112233&quot; },
                    {&quot;RememberMe&quot;,&quot;false&quot; }
                }) // 设置 post 的 form 参数
                // 获取返回的 responseText，并 json 反序列化为一个强类型的Model
               .Execute&amp;lt;WeihanLi.Common.Models.JsonResultModel&amp;lt;bool&amp;gt;&amp;gt;(); 

            System.Console.WriteLine(loginResult.ToJson());

// 上传文件示例
var uploadFileResponse = new HttpRequester(&quot;https://graph.baidu.com/upload&quot;, HttpMethod.Post)
                .WithFile($@&quot;{System.Environment.GetEnvironmentVariable(&quot;USERPROFILE&quot;)}\Pictures\4e6ab53e383863ed4d15252039f70423.jpg&quot;, &quot;image&quot;, new Dictionary&amp;lt;string, string&amp;gt;()
                {
                    { &quot;tn&quot;,&quot;pc&quot; },
                    { &quot;from&quot;,&quot;pc&quot; },
                    { &quot;image_source&quot;,&quot;PC_UPLOAD_SEARCH_FILE&quot; },
                    { &quot;range&quot;,&quot;{\&quot;page_from\&quot;: \&quot;searchIndex\&quot;}&quot; },
                }) // 设置上传文件，并设置其它 form 参数信息
                .WithReferer(&quot;https://baidu.com/&quot;) // 设置 referer
                .WithUserAgent(&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&quot;)
                .ExecuteForResponse(); // 获取一个 HttpWebResponse 对象，可以使用 StatusCode/ ResponseHeader 等信息
            System.Console.WriteLine($&quot;Response status:{uploadFileResponse.StatusCode}, result:{uploadFileResponse.ReadToEnd()}&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;more&quot;&gt;More&lt;/h2&gt;
&lt;p&gt;除了 Header/Referer/UserAgent 之外，还可以设置 Proxy，设置 Cookie，Ajax 请求 等信息，而且还可以直接 PostJson 示例如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;new HttpRequester(&quot;requestUrl&quot;, HttpMethod.Post)
  .WithProxy(&quot;proxyUrl&quot;) // 使用代理 //.WithProxy(&quot;url&quot;, &quot;userName&quot;, &quot;password&quot;) // 配置带密码的代理
  .WithCookie(cookie) //带 Cookie 访问 //.WithCookie(&quot;url&quot;, cookie) // 只用指定路径的 cookie
  .WithJsonParameter(entity) // post 一个 json 对象，content-type 会自动设置为 `application/json`
  .AjaxRequest(true) // 设置该请求是 Ajax 请求
  .Execute();&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;memo&quot;&gt;Memo&lt;/h2&gt;
&lt;p&gt;欢迎体验~，如果有什么问题或者发现什么 bug 欢迎和我联系或者给我&lt;a href=&quot;https://github.com/WeihanLi/WeihanLi.Common/issues/new&quot;&gt;提 issue&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 16 Mar 2019 16:58:00 +0000</pubDate>
<dc:creator>WeihanLi</dc:creator>
<og:description>一个更好用的处理 HTTP 请求的API</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/weihanli/p/fire-http-request-with-http-requester.html</dc:identifier>
</item>
<item>
<title>日志终极总结 - 五色花的</title>
<link>http://www.cnblogs.com/luao/p/10545079.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luao/p/10545079.html</guid>
<description>&lt;ul&gt;&lt;li&gt;什么是日志&lt;/li&gt;
&lt;li&gt;常用日志框架&lt;/li&gt;
&lt;li&gt;日志级别详解&lt;/li&gt;
&lt;li&gt;日志的记录时机&lt;/li&gt;
&lt;li&gt;日志使用规约&lt;/li&gt;
&lt;li&gt;logback 配置示例&lt;/li&gt;
&lt;li&gt;loh4j2 配置示例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 简单的说，日志就是记录程序的运行轨迹，方便查找关键信息，也方便快速定位解决问题。我们 Java 程序员在开发项目时都是依赖 Eclipse/ Idea 等开发工具的 Debug 调试功能来跟踪解决 Bug，在开发环境可以这么做，但项目发布到了测试、生产环境呢？你有可能会说可以使用远程调试，但实际并不能允许让你这么做。所以，日志的作用就是在测试、生产环境没有 Debug 调试工具时开发、测试人员定位问题的手段。日志打得好，就能根据日志的轨迹快速定位并解决线上问题，反之，日志输出不好不能定位到问题不说反而会影响系统的性能。优秀的项目都是能根据日志定位问题的，而不是在线调试，或者半天找不到有用的日志。&lt;/p&gt;

&lt;p&gt;​ log4j、Logging、commons-logging、slf4j、logback，开发的同学对这几个日志相关的技术不陌生吧，为什么有这么多日志技术，它们都是什么区别和联系呢？相信大多数人搞不清楚它们的关系，下面我将一一介绍一下，以后大家再也不用傻傻分不清楚了。&lt;/p&gt;
&lt;h2 id=&quot;logging-java-自带工具&quot;&gt;2.1、Logging 【java 自带工具】&lt;/h2&gt;
&lt;p&gt;​ 这是 Java 自带的日志工具类，在 JDK 1.5 开始就已经有了，在java.util.logging 包下。&lt;/p&gt;
&lt;h2 id=&quot;log4j-框架实现&quot;&gt;2.2、Log4j 【框架实现】&lt;/h2&gt;
&lt;p&gt;​ Log4j 是 Apache 的一个开源日志框架，也是市场占有率最多的一个框架。大多数没用过 Java Logging， 但没人敢说没用过 Log4j 吧，反正从我接触 Java 开始就是这种情况，做 Java 项目必有 Log4j 日志框架。注意：log4j 在 2015/08/05 这一天被 Apache 宣布停止维护了，用户需要切换到 Log4j2上面去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;下面是官方宣布原文&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;On August 5, 2015 the Logging Services Project Management Committee announced that Log4j 1.x had reached end of life. For complete text of the announcement please see the Apache Blog. Users of Log4j 1 are recommended to upgrade to Apache Log4j 2.&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;commons-logging-日志接口&quot;&gt;2.3、Commons-logging 【日志接口】&lt;/h2&gt;
&lt;p&gt;​ 上面介绍的 log4j 是一个具体的日志框架的实现，而 commons-logging 就是日志门面接口，它也是 apache 最早提供的日志门面接口，用户可以根据喜好选择不同的日志实现框架，而不必改动日志定义，这就是日志门面的好处，符合面向接口抽象编程。&lt;/p&gt;
&lt;h2 id=&quot;slf4j-日志接口&quot;&gt;2.4、 Slf4j 【日志接口】&lt;/h2&gt;
&lt;p&gt;​ 全称：Simple Logging Facade for Java，即简单日志门面接口，和 Apache 的 commons-logging是一样的概念，它们都不是具体的日志框架，你可以指定其他主流的日志实现框架。Slf4j也是现在主流的日志门面框架，使用Slf4j可以很灵活的使用占位符进行参数占位，简化代码，拥有更好的可读性，这个后面会讲到。&lt;/p&gt;
&lt;h2 id=&quot;logback-框架实现&quot;&gt;2.5、 Logback 【框架实现】&lt;/h2&gt;
&lt;p&gt;​ Logback 是 Slf4j 的原生实现框架，同样也是出自 Log4j一个人之手，但拥有比log4j更多的优点、特性和更做强的性能，现在基本都用来代替 log4j 成为主流。&lt;/p&gt;
&lt;h2 id=&quot;日志框架总结&quot;&gt;2.6、日志框架总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;commons-loggin、slf4j 只是一种日志抽象门面，不是具体的日志框架。&lt;/li&gt;
&lt;li&gt;log4j、logback 是具体的日志实现框架。&lt;/li&gt;
&lt;li&gt;一般首选强烈推荐使用 slf4j + logback。当然也可以使用slf4j + log4j、commons-logging + log4j 这两种日志组合框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 日志的输出都是分级别的，不同的设置不同的场合打印不同的日志。下面拿最普遍用的 Log4j 日志框架来做个日志级别的说明，这个也比较全面，其他的日志框架也都大同小异。Log4j 的级别类 org.apache.log4j.Level 里面定义了日志级别，日志输出优先级由高到底分别为以下8种。&lt;/p&gt;
&lt;h2 id=&quot;日志级别及描述&quot;&gt;3.1 、日志级别及描述&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;ERROR：系统发生了错误事件，但仍然不影响系统的继续运行。系统需要将错误或异常细节记录ERROR日志中，方便后续人工回溯解决。&lt;/li&gt;
&lt;li&gt;WARN： 系统在业务处理时触发了异常流程(参数验证不过)，但系统可恢复到正常态，下一次业务可以正常执行。如程序调用了一个旧版本的接口，可选参数不合法，非业务预期的状态但仍可继续处理等&lt;/li&gt;
&lt;li&gt;INFO： 记录系统关键信息，旨在保留系统正常工作期间关键运行指标，开发人员可以将初始化系统配置、业务状态变化信息，或者用户业务流程中的核心处理记录到INFO日志中，方便日常运维工作以及错误回溯时上下文场景复现&lt;/li&gt;
&lt;li&gt;DEBUG： 可以将各类详细信息记录到DEBUG里，起到调试的作用，包括参数信息，调试细节信息，返回值信息等。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;日志优先级别标准顺序&quot;&gt;3.2 、日志优先级别标准顺序&lt;/h2&gt;
&lt;p&gt;​ ALL &amp;lt; TRACE &amp;lt; DEBUG &amp;lt; INFO &amp;lt; WARN &amp;lt; ERROR &amp;lt; FATAL &amp;lt; OFF&lt;/p&gt;
&lt;h2 id=&quot;设置级别和打印级别的关系&quot;&gt;3.3 、设置级别和打印级别的关系&lt;/h2&gt;
&lt;p&gt;​ 如果日志级别设置 INFO，只有输出级别为 INFO、WARN，后面的日志才会正常输出。&lt;/p&gt;

&lt;h2 id=&quot;系统初始化&quot;&gt;4.1、系统初始化&lt;/h2&gt;
&lt;p&gt;​ 系统初始化时会依赖一些关键配置，根据参数不同会提供不一样的服务。将系统的启动参数记录INFO日志，打印出参数以及服务启动完成状态。&lt;/p&gt;
&lt;h2 id=&quot;业务流程与预期不符&quot;&gt;4.2、业务流程与预期不符&lt;/h2&gt;
&lt;p&gt;​ 系统中结果与期望不符，应当记录日志。常见的合适场景包括外部参数不正确，数据处理问题导致返回码不在合理范围内等等。&lt;/p&gt;
&lt;h2 id=&quot;系统核心的关键动作&quot;&gt;4.3、系统核心的关键动作&lt;/h2&gt;
&lt;p&gt;​ 系统中核心角色触发的业务动作是需要多加关注的，是衡量系统正常运行的重要指标，建议记录INFO级别日志，比如微服务各服务节点交互等。&lt;/p&gt;
&lt;h2 id=&quot;捕获到异常时&quot;&gt;4.4、 捕获到异常时&lt;/h2&gt;
&lt;p&gt;​ 这类捕获的异常是系统告知开发人员需要加以关注的，应当记录日志，根据实际情况使用warn或者error级别。&lt;/p&gt;
&lt;h2 id=&quot;外部接口日志&quot;&gt;4.5、 外部接口日志&lt;/h2&gt;
&lt;p&gt;​ 这类日志涉及到与外部系统的交互，事关责任问题，建议将原始数据文件内容写入日志或数据库（如mongodb），核心处理逻辑关键业务数据也尽量写入日志。如果涉及到重发，建议将处理失败的原始数据文件日志写入数据库，以便重发执行。&lt;/p&gt;

&lt;ul readability=&quot;28&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用@SLF4J中的API进行日志打印。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;日志输出必须采用UTF-8字符集，推荐打印日志时输出英文，防止中文不支持而打印出乱码的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;不允许记录日志后又抛出异常，因为这样会多次记录日志，只允许记录一次日志，应抛出异常，顶层打印一次日志。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;try {
  // 错误  
 } catch (Exception e) { 
  log.error(&quot;xxxxxx&quot;, e);
  throw e；
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;输出Exceptions的全部堆栈信息，但是不能使用e.printStackTrace()&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 错误例子, 丢失掉StackTrace信息  
log.error(e.getMessage());  
// 错误例子,丢失掉StackTrace信息  
log.error(“Bad things : {}“, e.getMessage());  
// 正确例子 
log.error(“Bad things : {}“,e); 

// e.printStackTrace()的源码
public void printStackTrace() {    
      printStackTrace(System.err); 
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;禁止system.out 用于日志记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;线上必须关闭 DEBUG 级别日志。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;非正常的情况，需要根据情况选择打印warn 或 error 日志,不能使用错误的日志级别。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;try {    
 // ... 
     } catch (Exception e) {   
 // 错误LOG.info(&quot;XX 发生异常...&quot;, e); 
  }
 // 用 info 记录 error 日志，日志输出到了 info 日志文件中了，同事拼命地在 error 错误日志文件里面找怎么能找到呢？&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;日志输出，必须使用占位符的方式，因为即使信息不打印，也会执行字符串拼接，造成资源浪费。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;日志中不允许出现计算或方法调用，防止在打印日志的时候报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;输出的POJO类必须重写toString方法，否则只输出对象的hashCode值，没有参考意义。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;不记录对于排查故障毫无意义的日志信息，日志信息一定要带有业务信息。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;//错误 
log.error(“handle failed“);  
//正确
log.error(“handle failed，id= {}“, id);  &lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;禁止大量无效重复的日志输出，即通常情况下在程序日志里只记录一些比较有意义的状态数据，参考日志记录时机。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不可以讲敏感业务信息记录入日志文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;严防日志占满磁盘，定期检查磁盘（确定是否有磁盘告警）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;不要在千层循环中打印日志&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;for(int i=0; i&amp;lt;2000; i++){
     LOG.info(&quot;XX&quot;);
 }
// 这个是什么意思，如果你的框架使用了性能不高的 Log4j 框架，那就不要在上千个 for 循环中打印日志，
// 这样可能会拖垮你的应用程序，如果你的程序响应时间变慢，那要考虑是不是日志打印的过多了。&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置说明&quot;&gt;配置说明&lt;/h3&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;统一使用logback.xml配置，logback.xml 文件放在 classpath 目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;所有的jar包中不建议包含logback.xml文件，避免干扰实际的业务系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;通过在文件logback.xml中引入资源文件log.properties定义logback属性信息，log.properties根据不同的profile放置在不同位置；&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;property resource=&quot;log.properties&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;log.properties文件&lt;/p&gt;
&lt;ul readability=&quot;16&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;属性命名推荐使用统一使用大写，以下划线分隔，参考&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;APP_NAME = yourAppName
LOG_DIR = /export/home/logs/yourSystem/yourAppName
LOG_PATTERN = [%date{yyyy-MM-dd HH:mm:ss.SSS}] %level [%mdc{invokeNo}] %C{0}:%line - %message%n&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;注意Logger间的继承关系，推荐additivity设置false：&lt;/p&gt;
&lt;p&gt;​ 子logger会默认继承父logger的appender，将它们加入到自己的Appender中；除非加上了additivity=&quot;false&quot;，则不再继承父logger的appender。&lt;/p&gt;
&lt;p&gt;​ 子logger只在自己未定义输出级别的情况下，才会继承父logger的输出级别。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;将日志输出到文件当中，禁止使用FileAppender，推荐使用提供自动切换功能的RollingFileAppender Log文件位置和命名，目前Log文件的位置统一放在相同目录下面。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;/export/home/logs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认日志路径（所有日志的根路径）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;/export/home/logs/${SYSTEM_NAME}/${APP_NAME}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;log.properties中配置的日志全路径LOG_DIR&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/all.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;必选&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/ all-%d{yyyy-MM-dd}.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All历史文件命名&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/all_error.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;必选&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/sql.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可选&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;日志按天记录，单个日志文件最大不超过2000MB，考虑到有些bug按月规律出现，推荐历史日志保留30天&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&amp;gt;
        &amp;lt;fileNamePattern&amp;gt;${LOG_DIR}/all-%d{yyyy-MM-dd}.log&amp;lt;/fileNamePattern&amp;gt;
        &amp;lt;maxHistory&amp;gt;30&amp;lt;/maxHistory&amp;gt;
      &amp;lt;timeBasedFileNamingAndTriggeringPolicy
class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&amp;gt;
              &amp;lt;!-- 每个日志文件大小不超过2GB --&amp;gt;
              &amp;lt;maxFileSize&amp;gt;2000MB&amp;lt;/maxFileSize&amp;gt;
          &amp;lt;/timeBasedFileNamingAndTriggeringPolicy&amp;gt;
&amp;lt;/rollingPolicy&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;在出现问题之后，需要立即根据日志定位问题。对于INFO及以上级别的日志，要求按照一定顺序，输出以下必要的信息。参考日志格式定义&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;encoder charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;pattern&amp;gt;[%date{yyyy-MM-dd HH:mm:ss.SSS}] %level [%mdc{invokeNo}] %C{0}:%line - %message%n&amp;lt;/pattern&amp;gt;
&amp;lt;/encoder&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;一个完整的Appender配置如下&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;property resource=&quot;log.properties&quot;/&amp;gt; 
    &amp;lt;contextName&amp;gt;${APP_NAME}&amp;lt;/contextName&amp;gt;    
  &amp;lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&amp;gt;
        &amp;lt;encoder charset=&quot;UTF-8&quot;&amp;gt;
            &amp;lt;pattern&amp;gt;${LOG_PATTERN}&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
     &amp;lt;/appender&amp;gt;
  &amp;lt;appender name=&quot;all&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&amp;gt;
        &amp;lt;file&amp;gt;${LOG_DIR}/all.log&amp;lt;/file&amp;gt;
        &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&amp;gt;
        &amp;lt;!-- 日志每天进行rotate --&amp;gt;
      &amp;lt;fileNamePattern&amp;gt;${LOG_DIR}/all-%d{yyyy-MM-dd}.%i.log&amp;lt;/fileNamePattern&amp;gt;
              &amp;lt;maxHistory&amp;gt;30&amp;lt;/maxHistory&amp;gt;
          &amp;lt;timeBasedFileNamingAndTriggeringPolicy         
                                  class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&amp;gt;
              &amp;lt;!-- 每个日志文件大小不超过2GB --&amp;gt;
          &amp;lt;maxFileSize&amp;gt;2000MB&amp;lt;/maxFileSize&amp;gt;
          &amp;lt;/timeBasedFileNamingAndTriggeringPolicy&amp;gt;
        &amp;lt;/rollingPolicy&amp;gt;
        &amp;lt;encoder charset=&quot;UTF-8&quot;&amp;gt;
            &amp;lt;pattern&amp;gt;${LOG_PATTERN}&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&amp;gt;
            &amp;lt;level&amp;gt;info&amp;lt;/level&amp;gt;
        &amp;lt;/filter&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;appender name=&quot;all-error&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&amp;gt;
        &amp;lt;file&amp;gt;${LOG_DIR}/all-error.log&amp;lt;/file&amp;gt;
        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&amp;gt;
            &amp;lt;level&amp;gt;ERROR&amp;lt;/level&amp;gt;
            &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;
            &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt;
        &amp;lt;/filter&amp;gt;
        &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&amp;gt;
            &amp;lt;fileNamePattern&amp;gt;${LOG_DIR}/all-error-%d{yyyy-MM- dd}.%i.log&amp;lt;/fileNamePattern&amp;gt;
            &amp;lt;maxHistory&amp;gt;30&amp;lt;/maxHistory&amp;gt;
          &amp;lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&amp;gt;
              &amp;lt;!-- 每个日志文件大小不超过2GB --&amp;gt;
              &amp;lt;maxFileSize&amp;gt;2000MB&amp;lt;/maxFileSize&amp;gt;
          &amp;lt;/timeBasedFileNamingAndTriggeringPolicy&amp;gt;
        &amp;lt;/rollingPolicy&amp;gt;
        &amp;lt;encoder charset=&quot;UTF-8&quot;&amp;gt;
            &amp;lt;pattern&amp;gt;[%date{yyyy-MM-dd HH:mm:ss.SSS}] %level [%mdc{invokeNo}] %C{0}:%line - %message%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;
  &amp;lt;root level=&quot;debug&quot;&amp;gt;
        &amp;lt;appender-ref ref=&quot;all&quot;/&amp;gt;
        &amp;lt;appender-ref ref=&quot;all-error&quot;/&amp;gt;
        &amp;lt;appender-ref ref=&quot;console&quot;/&amp;gt;
    &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置说明-1&quot;&gt;配置说明&lt;/h3&gt;
&lt;ul readability=&quot;15&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;统一使用log4j2.xml配置，log4j2.xml 文件放在 resource目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;注意Logger间的继承关系，推荐additivity设置false：&lt;/p&gt;
&lt;p&gt;​ 子logger会默认继承父logger的appender，将它们加入到自己的Appender中；除非加上了additivity=&quot;false&quot;，则不再继承父logger的appender。&lt;/p&gt;
&lt;p&gt;​ 子logger只在自己未定义输出级别的情况下，才会继承父logger的输出级别。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将日志输出到文件当中，考虑到RollingRandomAccessFile比RollingFile更灵活，推荐统一使用RollingRandomAccessFile。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Log文件位置和命名，目前Log文件的位置统一放在相同目录下面。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;/export/home/logs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认日志路径（所有日志的根路径）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;/export/home/logs/${SYSTEM_NAME}/${APP_NAME}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;log.properties中配置的日志全路径LOG_DIR&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/all.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;必选&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/ all-%d{yyyy-MM-dd}.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All历史文件命名&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/all_error.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;必选&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;${LOG_DIR}/sql.log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可选&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;日志按天记录，单个日志文件最大不超过3000MB，考虑到有些bug按周规律出现，推荐历史日志保留14天。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;RollingRandomAccessFile name=&quot;all-append&quot; immediateFlush=&quot;true&quot; fileName=&quot;${LOG_DIR}/all.log&quot; filePattern=&quot;${LOG_DIR}/all-%d{yyyy-MM-dd}-%i.log&quot;&amp;gt;
  &amp;lt;Policies&amp;gt;
      &amp;lt;SizeBasedTriggeringPolicy size=&quot;3GB&quot; /&amp;gt;
      &amp;lt;TimeBasedTriggeringPolicy interval=&quot;8&quot; modulate=&quot;true&quot; /&amp;gt;
        &amp;lt;!-- 最多备份14天以内||日志文件大小达到50GB的日志||
              文件数量超过20此处为策略限制，Delete中可以按自己需要用正则表达式编写 --&amp;gt;
        &amp;lt;DefaultRolloverStrategy&amp;gt;
          &amp;lt;Delete basePath=&quot;${filePath}&quot; maxDepth=&quot;1&quot;&amp;gt;
              &amp;lt;IfLastModified age=&quot;14d&quot; /&amp;gt;
                &amp;lt;IfAccumulatedFileSize exceeds=&quot;50 GB&quot; /&amp;gt;
                &amp;lt;IfAccumulatedFileCount exceeds=&quot;20&quot; /&amp;gt;
          &amp;lt;/Delete&amp;gt;
&amp;lt;/DefaultRolloverStrategy&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;在出现问题之后，需要立即根据日志定位问题。对于INFO及以上级别的日志，要求按照一定顺序，输出以下必要的信息。参考日志格式定义&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;PatternLayout&amp;gt;
&amp;lt;Pattern&amp;gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%mdc{invokeNo}] %C{2}:%L %M - %msg%n&amp;lt;/Pattern&amp;gt;
&amp;lt;/PatternLayout&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;一个完整的Appender配置如下&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!-- 
  Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。 
  monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数。
--&amp;gt;
&amp;lt;configuration status=&quot;OFF&quot; monitorInterval=”600″&amp;gt;
  &amp;lt;properties&amp;gt;
  &amp;lt;property name=&quot;LOG_PATH&quot;&amp;gt;/export/home/logs/yourSystem/yourAppName&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;LOG_PATTERN&quot;&amp;gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%mdc{invokeNo}] %C{2}:%L %M - %msg%n &amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;EVERY_FILE_SIZE&quot;&amp;gt;3GB&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;OUTPUT_LOG_LEVEL&quot;&amp;gt;info&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;FILE_COUNT&quot;&amp;gt;20&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;ERROR_FILE_COUNT&quot;&amp;gt;3&amp;lt;/property&amp;gt;
    &amp;lt;/properties&amp;gt;

  &amp;lt;!--先定义所有的appender--&amp;gt;
  &amp;lt;appenders&amp;gt;
      &amp;lt;!--输出控制台的配置--&amp;gt;
      &amp;lt;Console name=&quot;console&quot; target=&quot;SYSTEM_OUT&quot;&amp;gt;
          &amp;lt;!--控制台只输出level及以上级别的信息（onMatch），
                      其他的直接拒绝（onMismatch）--&amp;gt;
          &amp;lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&amp;gt;
          &amp;lt;!--输出日志的格式--&amp;gt;
          &amp;lt;PatternLayout pattern=&quot;${LOG_PATTERN}&quot;/&amp;gt;
      &amp;lt;/Console&amp;gt;

      &amp;lt;!-- 打印信息，每次大小超过size，
              则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&amp;gt;
      &amp;lt;RollingRandomAccessFile 
          name=&quot;all&quot;
            immediateFlush=&quot;true&quot; 
          fileName=&quot;${LOG_DIR}/all.log&quot;
          filePattern=&quot;${LOG_DIR}/all-%d{yyyy-MM-dd}-%i.log&quot;&amp;gt;
            &amp;lt;Filters&amp;gt;
                &amp;lt;ThresholdFilter level=&quot;error&quot;
                                 onMatch=&quot;ACCEPT&quot; onMismatch=&quot;NEUTRAL&quot;/&amp;gt;
                &amp;lt;ThresholdFilter level=&quot;warn&quot; 
                                 onMatch=&quot;ACCEPT&quot; onMismatch=&quot;NEUTRAL&quot;/&amp;gt;
                &amp;lt;ThresholdFilter level=&quot;info&quot; 
                                 onMatch=&quot;ACCEPT&quot; onMismatch=&quot;NEUTRAL&quot;/&amp;gt;
                &amp;lt;ThresholdFilter level=&quot;trace&quot;
                                 onMatch=&quot;DENY&quot; onMismatch=&quot;DENY&quot;/&amp;gt;
            &amp;lt;/Filters&amp;gt;
          &amp;lt;PatternLayout&amp;gt;
                &amp;lt;Pattern&amp;gt;${LOG_PATTERN}&amp;lt;/Pattern&amp;gt;
            &amp;lt;/PatternLayout&amp;gt;
            &amp;lt;Policies&amp;gt;
                &amp;lt;SizeBasedTriggeringPolicy size=&quot;${EVERY_FILE_SIZE}&quot; /&amp;gt;
                &amp;lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot; /&amp;gt;
            &amp;lt;/Policies&amp;gt;
          &amp;lt;!-- DefaultRolloverStrategy属性如不设置，
                      则默认为最多同一文件夹下7个文件，这里设置了20 --&amp;gt;   
          &amp;lt;DefaultRolloverStrategy&amp;gt;
          &amp;lt;!-- 最多备14 天以内||日志文件大小达到50GB的日志||
                  文件数量超过20此处为策略限制，Delete中可以按自己需要用正则表达式编写 --&amp;gt;
              &amp;lt;Delete basePath=&quot;${LOG_DIR}&quot; maxDepth=&quot;1&quot;&amp;gt;

                  &amp;lt;IfLastModified age=&quot;14d&quot; /&amp;gt;
                  &amp;lt;IfAccumulatedFileSize exceeds=&quot;50 GB&quot; /&amp;gt;
                  &amp;lt;IfAccumulatedFileCount exceeds=&quot;20&quot; /&amp;gt;
              &amp;lt;/Delete&amp;gt;
          &amp;lt;/DefaultRolloverStrategy&amp;gt;格     
      &amp;lt;/RollingRandomAccessFile&amp;gt;

      &amp;lt;RollingRandomAccessFile 
          name=&quot;all-error&quot;
            immediateFlush=&quot;true&quot; 
          fileName=&quot;${LOG_DIR}/all-error.log&quot;
          filePattern=&quot;${LOG_DIR}/all-error-%d{yyyy-MM-dd}-%i.log&quot;&amp;gt;
            &amp;lt;Filters&amp;gt;
                &amp;lt;ThresholdFilter level=&quot;error&quot; 
                                 onMatch=&quot;ACCEPT&quot; onMismatch=&quot;NEUTRAL&quot;/&amp;gt;
                &amp;lt;ThresholdFilter level=&quot;warn&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&amp;gt;
            &amp;lt;/Filters&amp;gt;
          &amp;lt;PatternLayout&amp;gt;
                &amp;lt;Pattern&amp;gt;${LOG_PATTERN}&amp;lt;/Pattern&amp;gt;
            &amp;lt;/PatternLayout&amp;gt;
            &amp;lt;Policies&amp;gt;
                &amp;lt;SizeBasedTriggeringPolicy size=&quot;${EVERY_FILE_SIZE}&quot; /&amp;gt;
                &amp;lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot; /&amp;gt;
            &amp;lt;/Policies&amp;gt;
          &amp;lt;!-- DefaultRolloverStrategy属性如不设置，
                      则默认为最多同一文件夹下7个文件，这里设置了20 --&amp;gt;
          &amp;lt;DefaultRolloverStrategy max=&quot;${ERROR_FILE_COUNT}&quot;/&amp;gt;
      &amp;lt;/RollingRandomAccessFile&amp;gt;
  &amp;lt;/appenders&amp;gt;
  &amp;lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&amp;gt;
  &amp;lt;loggers&amp;gt;
      &amp;lt;!--默认的root的logger--&amp;gt;
      &amp;lt;Logger name=&quot;all&quot; level=&quot;info&quot; additivity=&quot;false&quot;&amp;gt;  
                      &amp;lt;AppenderRef ref=&quot;all&quot; /&amp;gt;  
              &amp;lt;/Logger&amp;gt;
      &amp;lt;Logger name=&quot;all-error&quot; level=&quot;error&quot; additivity=&quot;false&quot;&amp;gt;  
                   &amp;lt;AppenderRef ref=&quot;all-error&quot; /&amp;gt;  
              &amp;lt;/Logger&amp;gt;
      &amp;lt;root level=&quot;${OUTPUT_LOG_LEVEL}&quot;&amp;gt;
          &amp;lt;appender-ref ref=&quot;console&quot;/&amp;gt;
      &amp;lt;/root&amp;gt; 
  &amp;lt;/loggers&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 16 Mar 2019 16:12:00 +0000</pubDate>
<dc:creator>五色花的</dc:creator>
<og:description>目录 什么是日志 常用日志框架 日志级别详解 日志的记录时机 日志使用规约 logback 配置示例 loh4j2 配置示例 1、什么是日志？ ​ 简单的说，日志就是记录程序的运行轨迹，方便查找关键信</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luao/p/10545079.html</dc:identifier>
</item>
<item>
<title>我们为什么要学习 Spring Boot - 余同学的开发之路</title>
<link>http://www.cnblogs.com/YJK923/p/10545027.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YJK923/p/10545027.html</guid>
<description>&lt;p&gt;现在貌似大家都知道 Spring Boot 很火了，做 Java 的不知道 Spring Boot 的都已经 Out 了，但是又有多少人是跟风学习的呢？今天我们就来说一下为什么要学习 Spring Boot 。&lt;/p&gt;

&lt;p&gt;首先，要明确一个概念，Spring Boot 不是一个新的框架，它只是 Spring 公司下面的一个项目，也是由 Spring 演变出来的。什么？你还不知道 Spring，那就先学习 Spring 去吧。&lt;/p&gt;

&lt;p&gt;我们在使用 SSM 搭建一个项目的时候，不可避免的要使用很多的配置，这一点相信大家都知道，之前为了使创建项目变得简单，我还专门整理了一个纯净版的配置。&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MzY4Nzg0OQ==&amp;amp;mid=2247484133&amp;amp;idx=1&amp;amp;sn=c91738c2293780145b515d44f40b3095&amp;amp;chksm=eb1e36a3dc69bfb5bfd3adf1a736fe9dd8c0718c37411adc91081d7bbdeef647bd6a3d1bcd4e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;在这里。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;写作常用的手法都是先抑后扬，接下来就是这个模板，先说明 Spring 中的缺点有哪些，而 Spring Boot 又是怎么来解决的。这里我就不贴具体的代码和配置了，大家应该都明白。&lt;/p&gt;

&lt;p&gt;Spring 为我们提供了非常灵活的配置方式，基于 XML、注解、Java 配置、这些配置我们可以随意选用搭配，但是随之而来的就是复杂性的提高，对初学者就不是那么友好。&lt;/p&gt;

&lt;p&gt;简单回忆一下，使用 Spring 我们要配置哪些东西，注册各种 Bean，注入各种 Bean，配置事务，数据源，数据库管理对象、前端控制器，视图解析器，关键是像注册和注入 Bean 是每一个模块都需要重复的动作，为什么不能自动化呢？&lt;/p&gt;

&lt;p&gt;假如我们使用 Maven 来管理项目，那我们将会注入大量的依赖，不使用 Maven 就更坑了，添加大量的 jar 包，这点好像看起来没啥问题，就是长一点，需要啥添加啥就好，那是因为你没有见到 Spring Boot 的 Maven 配置~&lt;/p&gt;

&lt;p&gt;而且你有没有出现过不同的依赖之间由于版本问题而无法兼容的问题，这些都是事呀，Spring Boot 完全给你解决了。&lt;/p&gt;

&lt;p&gt;我们在运行项目的时候需要依赖 Servlet 容器，不管你是使用 Tomcat 还是 Jetty，最起码你的本地要有这个环境吧，没有的话你的项目立马熄火。想要快速的运行一个项目还真的不是那么容易呀。&lt;/p&gt;

&lt;p&gt;上面我们是给 Spring 一顿贬呀，但是，Spring 还是非常重要的，这只是鸡蛋里面挑骨头，没有这些问题，怎么会有 Spring Boot 的用武之地呢，这就是进步嘛。&lt;/p&gt;

&lt;p&gt;总结一下，我们刚刚提到的问题，在 Spring 搭建的项目中，我们有大量的配置，且大多类似，耽误了大量的时间，还容易出错，添加依赖的时候呢，一是太多，二是一不留神可能版本不兼容。&lt;/p&gt;

&lt;p&gt;先说说 Spring Boot 是怎么解决这些问题的，什么样的思路，Spring Boot 中不是没有配置，而是配置基本都是默认的常规配置，当然，你想改也行，Maven 的依赖管理也是如此，Spring Boot 提供了父级依赖，我们只需添加父级依赖便可。同理，不想用它的自己配置可行。&lt;/p&gt;

&lt;p&gt;具体整理一下 Spring Boot 的优点有 3 点：&lt;/p&gt;
&lt;p&gt;1、自动配置&lt;/p&gt;
&lt;p&gt;2、依赖管理变得简单&lt;/p&gt;
&lt;p&gt;3、内置 Tomcat、Jetty 容器&lt;/p&gt;

&lt;p&gt;好了，说了那么多 Spring Boot 的好，大家是不是特别想实现一波，嘿嘿，欲知后事如何，且听下回分解~&lt;/p&gt;
</description>
<pubDate>Sat, 16 Mar 2019 15:48:00 +0000</pubDate>
<dc:creator>余同学的开发之路</dc:creator>
<og:description>现在貌似大家都知道 Spring Boot 很火了，做 Java 的不知道 Spring Boot 的都已经 Out 了，但是又有多少人是跟风学习的呢？今天我们就来说一下为什么要学习 Spring B</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YJK923/p/10545027.html</dc:identifier>
</item>
<item>
<title>Java分页实现 - 张小振的博客</title>
<link>http://www.cnblogs.com/zhangxiaozhen/p/10545022.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxiaozhen/p/10545022.html</guid>
<description>&lt;p&gt;首先我们要清楚java分页的思路&lt;/p&gt;
&lt;p&gt;第一我们要明白前端页面需要向java后台传递当前页码数以及每页显示多少条数据&lt;/p&gt;
&lt;p&gt;第二java后台代码需要向前端页面传递每页显示的数据,以及总条数以及总页数&lt;/p&gt;


&lt;p&gt;代码如下:&lt;/p&gt;

&lt;p&gt;首先我们要创建一个分页类用来存储数据&lt;/p&gt;
&lt;p&gt;public class PageObject&amp;lt;T&amp;gt; implements Serializable {&lt;/p&gt;
&lt;p&gt;private static final long serialVersionUID = 1L;&lt;/p&gt;
&lt;p&gt;/** 当前页的页码值 */&lt;br/&gt;private Integer pageCurrent = 1;&lt;br/&gt;/** 页面大小 */&lt;br/&gt;private Integer pageSize = 10;&lt;br/&gt;/** 总行数(通过查询获得) */&lt;br/&gt;private Integer rowCount = 0;&lt;br/&gt;/** 总页数(通过计算获得) */&lt;br/&gt;private Integer pageCount = 0;&lt;br/&gt;/** 当前页记录 */&lt;br/&gt;private List&amp;lt;T&amp;gt; records;&lt;/p&gt;
&lt;p&gt;public Integer getPageCurrent() {&lt;br/&gt;return pageCurrent;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public void setPageCurrent(Integer pageCurrent) {&lt;br/&gt;this.pageCurrent = pageCurrent;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public Integer getPageSize() {&lt;br/&gt;return pageSize;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public void setPageSize(Integer pageSize) {&lt;br/&gt;this.pageSize = pageSize;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public Integer getRowCount() {&lt;br/&gt;return rowCount;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public void setRowCount(Integer rowCount) {&lt;br/&gt;this.rowCount = rowCount;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public Integer getPageCount() {&lt;br/&gt;pageCount = rowCount / pageSize;&lt;br/&gt;if (rowCount % pageSize != 0) {&lt;br/&gt;pageCount++;&lt;br/&gt;}&lt;br/&gt;return pageCount;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public void setPageCount(Integer pageCount) {&lt;br/&gt;this.pageCount = pageCount;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public List&amp;lt;T&amp;gt; getRecords() {&lt;br/&gt;return records;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public void setRecords(List&amp;lt;T&amp;gt; records) {&lt;br/&gt;this.records = records;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;@Override&lt;br/&gt;public String toString() {&lt;br/&gt;return &quot;PageObject [pageCurrent=&quot; + pageCurrent + &quot;, pageSize=&quot; + pageSize + &quot;, rowCount=&quot; + rowCount&lt;br/&gt;+ &quot;, pageCount=&quot; + pageCount + &quot;, records=&quot; + records + &quot;]&quot;;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;Controller层方法:&lt;/p&gt;

&lt;p&gt;@RequestMapping(&quot;/getLog&quot;)&lt;br/&gt;@ResponseBody&lt;/p&gt;
&lt;p&gt;public PageObject&amp;lt;SysLog&amp;gt; getLog(@RequestBody Map&amp;lt;String, Object&amp;gt; param) throws ParseException {&lt;br/&gt;System.out.println(&quot;Map集合参数&quot; + param);&lt;br/&gt;String user = (String) param.get(&quot;user&quot;);&lt;br/&gt;String date = (String) param.get(&quot;date&quot;);&lt;br/&gt;Date parse=null;&lt;br/&gt;if(date!=null) {&lt;/p&gt;&lt;p&gt;SimpleDateFormat dFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&lt;br/&gt;parse= dFormat.parse(date); // Date date = (Date) param.get(&quot;date&quot;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;System.out.println(&quot;解析后日期格式&quot; + parse);&lt;/p&gt;
&lt;p&gt;int pageCurrent = Integer.parseInt(&quot;&quot; + param.get(&quot;pageCurrent&quot;));&lt;br/&gt;int pageSize = Integer.parseInt(&quot;&quot; + param.get(&quot;pageSize&quot;));&lt;/p&gt;
&lt;p&gt;if (pageCurrent == 0) {&lt;br/&gt;pageCurrent = 1;&lt;br/&gt;}&lt;br/&gt;if (pageSize == 0) {&lt;br/&gt;pageSize = 10;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;return logService.getLog(pageCurrent, pageSize, user, parse);&lt;br/&gt;}&lt;/p&gt;

&lt;p&gt;Service层代码:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;@Autowired&lt;br/&gt;SysLogDao logdao;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;/***&lt;br/&gt;* 根据日期或者用户查询&lt;br/&gt;*/&lt;br/&gt;@Override&lt;br/&gt;public PageObject&amp;lt;SysLog&amp;gt; getLog( int pageCurrent, int pageSize,String user,Date date) {&lt;br/&gt;PageObject&amp;lt;SysLog&amp;gt; pageObject = new PageObject&amp;lt;SysLog&amp;gt;();&lt;br/&gt;// 设置当前页&lt;br/&gt;pageObject.setPageCurrent(pageCurrent);&lt;br/&gt;// 设置每页显示的条数&lt;br/&gt;pageObject.setPageSize(pageSize);&lt;br/&gt;// 设置总记录数&lt;/p&gt;&lt;p&gt;Map&amp;lt;String, Object&amp;gt; map=new HashMap&amp;lt;String, Object&amp;gt;();&lt;br/&gt;map.put(&quot;user&quot;, user);&lt;br/&gt;map.put(&quot;date&quot;, date);&lt;br/&gt;int count = logdao.getLogCount(user,date);&lt;br/&gt;System.out.println(&quot;=============&quot;);&lt;br/&gt;System.out.println(&quot;总条数&quot;+count);&lt;br/&gt;pageObject.setPageCount(count);&lt;br/&gt;// 设置总页数&lt;br/&gt;int page = count % pageSize == 0 ? count / pageSize : (count / pageSize) + 1;&lt;br/&gt;pageObject.setRowCount(page);&lt;br/&gt;// 设置每页显示数据集合&lt;br/&gt;// 开始的记录数&lt;br/&gt;int start = (pageCurrent - 1) * pageSize;&lt;br/&gt;System.out.println(start+&quot;-&quot;+pageSize);&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;List&amp;lt;SysLog&amp;gt; byPage = logdao.getLog( start, pageSize,user,date);&lt;/p&gt;&lt;p&gt;pageObject.setRecords(byPage);&lt;br/&gt;System.out.println(start+&quot;-&quot;+byPage);&lt;br/&gt;return pageObject;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Mapper.xml代码如下:&lt;/p&gt;

&lt;p&gt;&amp;lt;!-- 查询总条数 --&amp;gt;&lt;br/&gt;&amp;lt;select id=&quot;getLogCount&quot; resultType=&quot;int&quot;&amp;gt;&lt;br/&gt;select count(*) from sys_login_log&lt;br/&gt;&amp;lt;where&amp;gt;&lt;br/&gt;&amp;lt;if test=&quot;user !=null&quot;&amp;gt;&lt;br/&gt;and login_user=#{user}&lt;br/&gt;&amp;lt;/if&amp;gt;&lt;br/&gt;&amp;lt;if test=&quot;date !=null &quot;&amp;gt;&lt;br/&gt;and log_date=#{date}&lt;br/&gt;&amp;lt;/if&amp;gt;&lt;br/&gt;&amp;lt;/where&amp;gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/select&amp;gt;&lt;br/&gt;&amp;lt;!-- 查询每页显示条数 --&amp;gt;&lt;br/&gt;&amp;lt;select id=&quot;getLog&quot; resultType=&quot;SysLog&quot; &amp;gt;&lt;br/&gt;select * from sys_login_log&lt;br/&gt;&amp;lt;where&amp;gt;&lt;br/&gt;&amp;lt;if test=&quot;user!=null&quot;&amp;gt;&lt;br/&gt;and login_user=#{user}&lt;br/&gt;&amp;lt;/if&amp;gt;&lt;br/&gt;&amp;lt;if test=&quot;date !=null &quot;&amp;gt;&lt;br/&gt;and log_date=#{date}&lt;br/&gt;&amp;lt;/if&amp;gt;&lt;br/&gt;&amp;lt;/where&amp;gt;&lt;/p&gt;
&lt;p&gt;limit #{start},#{pageSize}&lt;br/&gt;&amp;lt;/select&amp;gt;&lt;/p&gt;

</description>
<pubDate>Sat, 16 Mar 2019 15:44:00 +0000</pubDate>
<dc:creator>张小振的博客</dc:creator>
<og:description>首先我们要清楚java分页的思路 第一我们要明白前端页面需要向java后台传递当前页码数以及每页显示多少条数据 第二java后台代码需要向前端页面传递每页显示的数据,以及总条数以及总页数 代码如下:</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxiaozhen/p/10545022.html</dc:identifier>
</item>
<item>
<title>.net辗转java系列（一）视野 - 哲智</title>
<link>http://www.cnblogs.com/zeje/p/10544888.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zeje/p/10544888.html</guid>
<description>&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;本文目的在于扩展你我视野，求各位大神&lt;/span&gt;帮忙补充下表格中的内容，特别是&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;的相关内容。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面的文字纯是为了凑足&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;&lt;span&gt;个字。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本人作为一名普通的&lt;/span&gt;&lt;span&gt;.net&lt;/span&gt;&lt;span&gt;程序员，也快混了十年了。在&lt;/span&gt;&lt;span&gt;.net&lt;/span&gt;&lt;span&gt;方面的知识面较广，但是深度严重不够。我们从最下层次的开发说起：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、&lt;span&gt;        &lt;/span&gt;&lt;/span&gt; &lt;span&gt;嵌入系统&lt;/span&gt;&lt;span&gt;wince&lt;/span&gt;&lt;span&gt;开发（基于&lt;/span&gt;&lt;span&gt;.net compack framwork&lt;/span&gt;&lt;span&gt;，&lt;/span&gt; &lt;span&gt;Visual Studio 2008&lt;/span&gt;&lt;span&gt;之后就不支持了）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、&lt;span&gt;        &lt;/span&gt;&lt;/span&gt; &lt;span&gt;上位机开发（&lt;/span&gt;&lt;span&gt;Winform&lt;/span&gt;&lt;span&gt;为主，主要是硬件信号的收集）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、&lt;span&gt;        &lt;/span&gt;&lt;/span&gt; &lt;span&gt;桌面程序开发（&lt;/span&gt;&lt;span&gt;Winform&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;WPF&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;UWP&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、&lt;span&gt;        &lt;/span&gt;&lt;/span&gt; &lt;span&gt;Web&lt;/span&gt;&lt;span&gt;开发（&lt;/span&gt;&lt;span&gt;WebForm&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;MVC&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、&lt;span&gt;        &lt;/span&gt;&lt;/span&gt; &lt;span&gt;服务类（一般处理程序、&lt;/span&gt;&lt;span&gt;Web Service&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;WCF&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;WebAPI&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、&lt;span&gt;        &lt;/span&gt;&lt;/span&gt; &lt;span&gt;云技术（&lt;/span&gt;&lt;span&gt;.net core&lt;/span&gt;&lt;span&gt;相关被&lt;/span&gt;&lt;span&gt;neter&lt;/span&gt;&lt;span&gt;热捧中）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从来都知道自己不是什么大牛。只因在实业单位中做开发，难免经常一个人承担很多种角色：项目经理&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;需求&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;产品&lt;/span&gt;&lt;span&gt;+UI+&lt;/span&gt;&lt;span&gt;前端&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;后台&lt;/span&gt;&lt;span&gt;+DB+&lt;/span&gt;&lt;span&gt;面试官等等。&lt;/span&gt;&lt;span&gt;最近迫于无奈，被要求转&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;，转Java前希望对Java整个生态有个全盘的了解。&lt;/span&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;923&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;86&quot;/&gt;&lt;col width=&quot;158&quot;/&gt;&lt;col width=&quot;303&quot;/&gt;&lt;col width=&quot;185&quot;/&gt;&lt;col width=&quot;191&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;19.46711173577&quot;&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td colspan=&quot;5&quot; height=&quot;18&quot; width=&quot;923&quot;&gt;.net辗转java系列（一）视野&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;.net系&lt;/td&gt;
&lt;td&gt;java系&lt;/td&gt;
&lt;td&gt;其它&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;语言&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;框架&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;.net Framework Standard&lt;/td&gt;
&lt;td&gt;java se&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;.net core&lt;/td&gt;
&lt;td&gt;java ee&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;jave me&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Java SE Subscription&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;.net compack framwork&lt;/td&gt;
&lt;td&gt;Java Embedded&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Java TV&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Java Card&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Java Magazine&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;桌面&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;winform&lt;/td&gt;
&lt;td&gt;javax.swing&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;20&quot;&gt;&lt;td height=&quot;20&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;wpf&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;uwp&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;windows服务&lt;/td&gt;
&lt;td&gt;JavaService&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;H5桌面&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Electron&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.baidu.com/link?url=PS71enNErfFv4PKMF7Ge7j2DmkMdBH4SA8FitsGE5bHa2tS_1sWIUfjbnQLm5viy-dPR0-17fIN6XgBKtGtVs8IubhoqonUdjQuWLPOjtyO&quot; target=&quot;_blank&quot; data-click=&quot;{ 'F':'778317EA', 'F1':'9D73F1E4', 'F2':'4CA6DE6B', 'F3':'54E5243F', 'T':'1552734309', 'y':'D6FBEF6F' }&quot;&gt;&lt;span&gt;Electron.net&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;Web&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;webform&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;asp.net mvc&lt;/td&gt;
&lt;td&gt;spring mvc&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;144&quot; readability=&quot;3&quot;&gt;&lt;td height=&quot;144&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;spring.net　&lt;/td&gt;
&lt;td&gt;spring&lt;/td&gt;
&lt;td width=&quot;191&quot;&gt;Spring Data&lt;br/&gt;Spring MVC&lt;br/&gt;Spring Boot&lt;br/&gt;Spring Cloud&lt;br/&gt;Spring Cloud Data Flow&lt;br/&gt;Spring Batch&lt;br/&gt;Spring Security&lt;br/&gt;Spring AMQP&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;服务&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;一般处理程序&lt;/td&gt;
&lt;td&gt;Servlet&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;web service&lt;/td&gt;
&lt;td&gt;Servlet&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;wcf&lt;/td&gt;
&lt;td&gt;Servlet&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;web api&lt;/td&gt;
&lt;td&gt;Servlet&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;移动端&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;android&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;IDE&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;idea&lt;/td&gt;
&lt;td&gt;Rider&lt;/td&gt;
&lt;td&gt;IntelliJ IDEA&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;4&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Visual Studio Code&lt;/td&gt;
&lt;td&gt;C# for Visual Studio Code&lt;/td&gt;
&lt;td&gt;Language support for Java&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Visual Studio&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Eclipse aCute &lt;/td&gt;
&lt;td&gt;Eclipse&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;MyEclipse&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;包管理&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Nuget&lt;/td&gt;
&lt;td&gt;Apache Ant&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Apache Maven&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Gradle&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;应用服务器&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;Web服务器&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;IIS&lt;/td&gt;
&lt;td&gt;nginx+tomcat&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Http.sys&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;KestrelServer&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;WebListenerServer&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;文档&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Sandcastle&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;DocFX&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;swagger&lt;/td&gt;
&lt;td&gt;Swashbuckle&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;实现&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;IOC&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;AutoFac&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Castle Windsor&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;MEF&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Ninject&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;StructureMap&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Unity&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;AOP&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;PostSharp&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Mr.Advice&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;校验&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;System.ComponentModel.DataAnnotations&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;FluentValidation&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;文件处理&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;TemplateEngine.Docx&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;iTextSharp&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;PDFsharp&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;PDF.NET&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;DocX&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;NOPI&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Aspose&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Html(Microsoft.mshtml.dll、Winista.HtmlParser.dll 和 HtmlAgilityPack.dll)&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;CSVHelper&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;ExcelDataReader&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Scryber&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;LinqToExcel&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;DB&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;ORM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;EntityFrameWork&lt;/td&gt;
&lt;td&gt;JPA&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Dapper.net&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Mybatis.net&lt;/td&gt;
&lt;td&gt;Mybatis&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;NHibernate&lt;/td&gt;
&lt;td&gt;Hibernate&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;PetaPoco&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;FluentData&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;ServiceStack.OrmLite&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;EmitMapper&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Deft&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Chloe.ORM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;CYQ.Data&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;TierDeveloper&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Lightspeed&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;LLBLGen&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Simple.Data，massive&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;SubSonic&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;NoSql&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;redis-desktop-manager&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;ServiceStack.Redis&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;StackExchange.Redis&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;NewLife.Redis&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;csredis&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;MongoDB&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;mongo-csharp-driver&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;模板&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;NVelocity&lt;/td&gt;
&lt;td&gt;Velocity&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;RazorEngine&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;JNTemplate&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;VTemplate&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;任务调度&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;quartz.net&lt;/td&gt;
&lt;td&gt;quartz&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Hangfire&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Azure WebJobs&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;FluentScheduler&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;elastic-job&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;XXL-JOB&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;身份认证&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Forms验证&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Passport验证&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;windows身份验证&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;claims-based认证&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;IdentityServer4&lt;/td&gt;
&lt;td&gt;Apache Shiro&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;单点登录(Single Sign-On，缩写为SSO)&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;LDAP&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;CAS（Central Authentication Service）&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;OAuth 2.0&lt;/td&gt;
&lt;td&gt;DotNetOpenAuth&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;双因素认证（2FA）&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;日志&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;log4net&lt;/td&gt;
&lt;td&gt;log4j&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Log4Net-Mongo&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Log4j 2&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;ExceptionLess&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;NLog&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Serilog&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Commons Logging&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Slf4j&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Logback&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Jul&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;全文检索&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Solr&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Elasticsearch.Net&lt;/td&gt;
&lt;td&gt;Elasticsearch&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;NEST&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Lucene.Net&lt;/td&gt;
&lt;td&gt;Lucene&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;消息队列&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;RabbitMQ(Erlang)&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;EasyNetQ&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;rabbitmq-dotnet-client&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;ActiveMQ&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;ZeroMQ(C语言)&lt;/td&gt;
&lt;td&gt;NetMQ&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Equeue&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Disque&lt;/td&gt;
&lt;td&gt;Disque.Net&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;流程引擎&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;E8.net BPM&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;flowportal&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;G2 BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;IBM BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Joget BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;K2 BPM&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Procwise BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;RDIFramework.NET&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;奥哲H3 BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;安码Ultimus BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;炎黄盈动AWS BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;起步X5 BPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;CCFlow&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;DragFlow&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;NetBPM&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Roadflow&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Windows Workflow Foundation&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;WorkflowEngine.NET&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;同步&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;SyncML&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;SyncFramework&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;后台开发框架&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Hplus&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;ymnets&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;ABP&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Aries&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Magicodes.Admin&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;X-admin&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;微信&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Senparc.Weixin&lt;/td&gt;
&lt;td&gt;weixin4j&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;WeixinSDK.net&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;大数据&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Hadoop&lt;/td&gt;
&lt;td&gt;HDInsight&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Apache Spark&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;WhereHows&lt;/td&gt;
&lt;td&gt;LinkedIn数据中心工具&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Druid&lt;/td&gt;
&lt;td&gt;一个拥有大数据实时查询和分析的高容错、高性能开源分布式系统（阿里）&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Tensor Flow&lt;/td&gt;
&lt;td&gt;开源机器学习框架&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;StreamSets&lt;/td&gt;
&lt;td&gt;侧重数据集成、数据加工流程构建的平台&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Apache&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Apache Kafka(Java)&lt;/td&gt;
&lt;td&gt;Rdkafka&lt;/td&gt;
&lt;td&gt;Kafka&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Apache Flink&lt;/td&gt;
&lt;td&gt;分布式处理引擎和框架&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Apache Samza&lt;/td&gt;
&lt;td&gt;分布式流处理框架&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Apache Spark &lt;/td&gt;
&lt;td&gt;Mobius&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;分布式&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;分布式事务&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;MS DTC&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;.NET Core CAP&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;分布式缓存&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Microsoft Velocity&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Actor模型同步框架&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Akka(Scala)&lt;/td&gt;
&lt;td&gt;Akka.NET&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Orleans&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;分布式分析系统&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Confluo(C++)&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;分布式云服务&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Azure微软系&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Service Fabric&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Google谷歌系&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;全链路&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;全链路-日志(Logging)&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;ELK（Elasticsearch+logstash+Kibana）&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;日志易&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;全链路-跟踪(Tracing)&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;可扩展应用程序性能管理 (APM) 服务&lt;/td&gt;
&lt;td&gt;Application Insights&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;OneAPM&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;听云&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Datadog&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;SkyAPM-dotnet&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;OpenTracking &lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;全链路-度量(Metrics)&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot; readability=&quot;2&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;App.Metrics(.net)+InfluxDB(go)+Grafana&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;tr height=&quot;18&quot;&gt;&lt;td height=&quot;18&quot;&gt;　&lt;/td&gt;
&lt;td&gt;Prometheus(go)+Grafana&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
</description>
<pubDate>Sat, 16 Mar 2019 15:06:00 +0000</pubDate>
<dc:creator>哲智</dc:creator>
<og:description>.net辗转java系列</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zeje/p/10544888.html</dc:identifier>
</item>
<item>
<title>JVM内存简单总结 - 吴永吉</title>
<link>http://www.cnblogs.com/wuyongji/p/10544693.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuyongji/p/10544693.html</guid>
<description>&lt;p&gt;　　根据自己的认识，简单总结下Java中的数据存储及内存分析。&lt;br/&gt;　　Java中的内存大致可以分为三块：栈内存、堆内存、方法区内存，看图说话。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1533339/201903/1533339-20190316222119807-1903776251.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1）、栈&lt;/p&gt;
&lt;p&gt;　　栈（stack）：栈是限定仅在表头进行插入和删除操作的线性表。栈作为一种数据结构，它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。在Java中，栈则是一个具有以上属性的动态内存区域。&lt;/p&gt;
&lt;p&gt;　　通常在栈中执行各种方法（包括main(...)方法）：首先通过方法区内存将方法通过压栈形式压入栈中进行执行（有先后顺序）。栈中存储基本数据类型和引用数据类型的地址--局部变量。还有就是栈是线程独享的，每一个线程都有自己的线程栈，所以栈可以有多个。JVM是基于栈的虚拟机，JVM为每个新创建的线程都分配一个栈。也就是说，对于一个Java程序来说，它的运行就是通过对栈的操作来完成的。栈以帧为单位保存线程的状态。JVM对栈只进行两种操作：以帧为单位的压栈和出栈操作。我们知道，某个线程正在执行的方法称为此线程的当前方法，我们可能不知道，当前方法使用的帧称为当前帧。当线程激活一个Java方法，JVM就会在线程的Java栈里新压入一个帧。这个帧自然成为了当前帧，在此方法执行期间，这个帧将用来保存参数，局部变量，中间计算过程和其他数据。从Java的这种分配机制来看，栈又可以这样理解：栈是操作系统在建立某个进程时或者线程（在支持多线程的操作系统中是线程）为这个线程建立的存储区域，该区域具有先进后出的特性。&lt;/p&gt;
&lt;p&gt;　　2）、堆&lt;/p&gt;
&lt;p&gt;　　堆（heap）：堆是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。堆中某个节点的值总是不大于或不小于其父节点的值，且堆总是一棵完全二叉树。&lt;/p&gt;
&lt;p&gt;　　每一个Java应用都唯一对应一个JVM实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中，并由应用所有的线程共享。跟C/C++不同，Java中分配堆内存是自动初始化的。Java中所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在栈中分配。也就是说，在建立一个对象时，从两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在栈中分配的内存实际上只是一个指向这个堆对象的引用而已。&lt;br/&gt;　　3）、方法区&lt;br/&gt;　　方法区（Method Area）：线程共享，存储已经被JVM加载的类信息、常量、静态变量、编译后的代码等等。&lt;/p&gt;
&lt;p&gt;　　通常方法区里面包括JVM已加载的类信息和运行时常量池。JVM已加载的类信息包括：类型信息、类型的常量池（存放该类型所用到的常量的有序集合，包括直接常量【如：字符串、整数、浮点数的常量】和对其他类型，字段，方法的符号引用）、字段信息（字段修饰符、字段的类型、字段名称）、方法信息（方法修饰符、方法返回类型、方法名、方法参数【个数，类型，顺序】、方法字节码）、类变量（静态变量）、指向类加载器的引用（每一个被JVM加载的类型，都保存这个类加载器的引用，类加载器动态链接时会用到）、指向Class实例的引用（类加载的过程中，虚拟机会创建这个类型的Class实例，方法区中必须保存对该对象的引用。通过类名.class.forName(String className)来查找获得该实例的引用，然后创建该类的对象）。&lt;/p&gt;
&lt;p&gt;　　运行时常量池：Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种字面常量和符号引用，这部分内容被类加载后进入方法区的运行时常量池中存放。运行时常量池相对于Class文件常量池的另外一个特征具有动态性，可以在运行期间将新的常量放入池中。&lt;/p&gt;
</description>
<pubDate>Sat, 16 Mar 2019 14:28:00 +0000</pubDate>
<dc:creator>吴永吉</dc:creator>
<og:description>栈内存、堆内存、方法区内存</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuyongji/p/10544693.html</dc:identifier>
</item>
<item>
<title>Phabricator服务的搭建 - 蜗牛大师</title>
<link>http://www.cnblogs.com/wuqinglong/p/10544642.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuqinglong/p/10544642.html</guid>
<description>&lt;p&gt;其实在网上搭建Phabricator环境文章很多，我写这篇文章的主要目的就是记录自己遇到的坑，顺便写一下安装步骤，其实安装步骤按照官网文档一步一步配置即可，很简单。只不过官方提供的一键安装脚本都是基于apache的，如果想使用Nginx的话，则不能使用官方提供过的脚本安装。&lt;/p&gt;

&lt;p&gt;为什么连接不上MySQL呢？？？使用&lt;code&gt;./bin/storage upgrade&lt;/code&gt;可以正常初始化Phabricator的数据库，但是使用页面访问时就是连接不上。&lt;/p&gt;
&lt;p&gt;搜了大量文章也没有说明这一点的，可能就是大家比较幸运，没遇到这个问题。这个问题的根源就是MySQL的问题，是这样的。&lt;/p&gt;
&lt;p&gt;Ubuntu中默认使用&lt;code&gt;apt install mysql-server&lt;/code&gt;安装MySQL，安装完之后启动mysql服务，发现使用&lt;code&gt;mysql -uroot -p&lt;/code&gt;登录时，无论怎么输入密码都能正确登录，即使我输错密码也可以，很奇怪。这时使用&lt;code&gt;./bin/storage upgrade&lt;/code&gt;初始化Phabricator的数据库没有问题，但是打开页面时却提示连接不上数据库。很奇怪，可能是哪里配置有问题，这种配置很讨厌，你不熟悉的话很容易被坑一下。还不如使用官方的方式安装MySQL。&lt;/p&gt;
&lt;p&gt;怎么解决？？？使用官方提供的MySQL安装方式，&lt;strong&gt;一定要完全卸载完旧的mysql再安装新的，包括配置文件，完全卸载！&lt;/strong&gt;。安装步骤在下面，但是这时还需要注意一下，安装时MySQL的密码加密方式，选择第二个（5.x）的方式，不要选择MySQL推荐的，否则会出现&lt;code&gt;./bin/storage upgrade&lt;/code&gt;时连接不上MySQL的问题。&lt;/p&gt;

&lt;p&gt;本文使用的系统是ubuntu-18.04.2，因为Phabricator是基于PHP开发的，所以我使用了Nginx配合php-fpm进行访问的。&lt;/p&gt;

&lt;h2 id=&quot;安装nginx&quot;&gt;安装Nginx&lt;/h2&gt;
&lt;p&gt;运行命令&lt;code&gt;apt install nginx&lt;/code&gt;安装Nginx即可。&lt;/p&gt;
&lt;p&gt;配置文件在：/etc/nginx/nginx.conf&lt;/p&gt;
&lt;h2 id=&quot;安装mysql&quot;&gt;安装MySQL&lt;/h2&gt;
&lt;p&gt;使用MySQL标准的安装步骤，从官网上下载deb包（mysql-apt-config_0.8.12-1_all.deb）。&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;dpkg -i mysql-apt-config_0.8.12-1_all.deb&lt;/code&gt;进行安装，进入字符界面，直接点OK即可。&lt;/p&gt;
&lt;p&gt;然后执行&lt;code&gt;apt update&lt;/code&gt;更新源，发现列出了MySQL的源。&lt;/p&gt;
&lt;p&gt;然后执行&lt;code&gt;apt install mysql-server&lt;/code&gt;，然后输入两次密码，选择密码加密方式，一定要选择第二个（5.x）的那个，选择第一个时Phabricator会连接不上。&lt;/p&gt;
&lt;h2 id=&quot;安装php&quot;&gt;安装PHP&lt;/h2&gt;
&lt;p&gt;运行&lt;code&gt;apt install php php-fpm php-mysql&lt;/code&gt;安装php。&lt;/p&gt;
&lt;p&gt;其中php-fpm是配置ngxin解析php的，php-mysql就是连接mysql的。&lt;/p&gt;
&lt;h2 id=&quot;下载phabricator&quot;&gt;下载Phabricator&lt;/h2&gt;
&lt;p&gt;使用git下载到你想要的目录中，我放在/var/www/phabricator目录中。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;cd /var/www/phabricator
git clone https://github.com/phacility/libphutil.git
git clone https://github.com/phacility/arcanist.git
git clone https://github.com/phacility/phabricator.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一定要保证libphutil、arcanist和phabricator位于同级目录。&lt;/p&gt;

&lt;h2 id=&quot;配置nginx和php&quot;&gt;配置nginx和php&lt;/h2&gt;
&lt;p&gt;进入nginx的&lt;code&gt;/etc/nginx/sites-enabled&lt;/code&gt;目录中，有一个默认的配置文件，因为该文件配置绑定了80端口，所以我们将其移除，因为该文件是连接文件，所以改名是无效的。移除后，新建phabricator.conf文件，将官方推荐配置写入&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;server {
  listen      80; # 官方没有加，这里需要加
  server_name phabricator.example.com;
  root        /var/www/phabricator/phabricator/webroot; # 修改为你的phabricator目录

  location / {
    index index.php;
    rewrite ^/(.*)$ /index.php?__path__=/$1 last;
  }

  location /index.php {
    fastcgi_pass   localhost:9000;
    fastcgi_index   index.php;

    #required if PHP was built with --enable-force-cgi-redirect
    fastcgi_param  REDIRECT_STATUS    200;

    #variables to make the $_SERVER populate in PHP
    fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
    fastcgi_param  QUERY_STRING       $query_string;
    fastcgi_param  REQUEST_METHOD     $request_method;
    fastcgi_param  CONTENT_TYPE       $content_type;
    fastcgi_param  CONTENT_LENGTH     $content_length;

    fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;

    fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
    fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

    fastcgi_param  REMOTE_ADDR        $remote_addr;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;写入完之后，配置php的user和group， 编辑&lt;code&gt;/etc/php/7.2/fpm/pool.d/www.conf&lt;/code&gt;文件，修改一下内容&lt;/p&gt;
&lt;pre class=&quot;sh&quot;&gt;
&lt;code&gt;user = nginx
group = nginx
# 注释掉listen = /run/php/php7.2-fpm.sock
# 增加listen = localhost:9000
listen = localhost:9000&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;运行如下命令配置连接数据库&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;cd phabricator
mkdir conf/custom
vim conf/custom/mysql.conf.php&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;写入如下信息&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
return array(
  'mysql.host' =&amp;gt; 'localhost',
  'mysql.port' =&amp;gt; '3306',
  'mysql.user' =&amp;gt; 'root',
  'mysql.pass' =&amp;gt; '',
);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将配置文件加入到phabricator的配置中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;echo custom/mysql &amp;gt; conf/local/ENVIRONMENT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后运行&lt;code&gt;./bin/storage upgrade&lt;/code&gt;进行phabricator的数据库初始化&lt;/p&gt;

&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;# 启动nginx
nginx

# 启动php-fpm
systemctl start php7.2-fpm&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后通过浏览器打开网页进行后续配置即可。&lt;/p&gt;
</description>
<pubDate>Sat, 16 Mar 2019 14:15:00 +0000</pubDate>
<dc:creator>蜗牛大师</dc:creator>
<og:description>[TOC] 概述 其实在网上搭建Phabricator环境文章很多，我写这篇文章的主要目的就是记录自己遇到的坑，顺便写一下安装步骤，其实安装步骤按照官网文档一步一步配置即可，很简单。只不过官方提供的一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuqinglong/p/10544642.html</dc:identifier>
</item>
</channel>
</rss>