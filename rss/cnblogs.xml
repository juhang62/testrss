<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【mysql】mysql 调优之 ——执行计划 explain - 沧海一粟，志取一瓢</title>
<link>http://www.cnblogs.com/bg2015-07-05/p/10579695.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bg2015-07-05/p/10579695.html</guid>
<description>&lt;h2&gt;1.what is explain(explain 是个什么东东)&lt;/h2&gt;
&lt;p&gt;explain(解释)，在 Mysql 中 作为一个关键词，用来解释 Mysql 是如何执行语句，可以连接 select 、delete、insert、update 语句。&lt;/p&gt;
&lt;p&gt;通常我们使用 explain 连接 一条 select 语句，查看运行状态，判断是否需要优化。&lt;/p&gt;
&lt;h2&gt;2.how to use explain（如何使用呢）&lt;/h2&gt;

&lt;p&gt;栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
explain select s.name,s.id,s.age,s.create_time from student s;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
|  1 | SIMPLE      | s     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    7 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
1 row in set, 1 warning (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;官方：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
EXPLAIN  [explain_type]  explainable_stmt


explain_type: {
    EXTENDED
  | PARTITIONS
  | FORMAT = format_name
}

explainable_stmt: {
    SELECT statement
  | DELETE statement
  | INSERT statement
  | REPLACE statement
  | UPDATE statement
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;输出的列名：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;id : select 标识符&lt;/li&gt;
&lt;li&gt;select_type:select 类型&lt;/li&gt;
&lt;/ul&gt;
&lt;table summary=&quot;select_type values and the meaning of each value.&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;25%&quot;/&gt;&lt;col width=&quot;25%&quot;/&gt;&lt;col width=&quot;50%&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th scope=&quot;col&quot;&gt;&lt;code class=&quot;literal&quot;&gt;select_type&lt;/code&gt; 可选值&lt;/th&gt;
&lt;th scope=&quot;col&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;SIMPLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;简单的 select，没有使用 UNION 或者 子查询&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;PRIMARY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最外一层的 select&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;UNION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UNION 中第二个或者后面的 select 语句&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;DEPENDENT UNION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UNION 中第二个或者后面的 select 语句，依赖于外层的 select&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;UNION RESULT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UNION 的结果&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;SUBQUERY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;子查询的第一个 select&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;DEPENDENT SUBQUERY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;子查询的第一个 select,取决于外层的 select&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;DERIVED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;派生表&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;MATERIALIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Materialized subquery&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;UNCACHEABLE SUBQUERY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无法缓存结果的子查询，必须为外部查询的每一行重新计算其结果&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td scope=&quot;row&quot;&gt;&lt;code class=&quot;literal&quot;&gt;UNCACHEABLE UNION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UNION 查询中不可缓存的子查询中的第二个或者后一个 select&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;table：输出行对应的表&lt;/li&gt;
&lt;li&gt;partitions：匹配的分区&lt;/li&gt;
&lt;li&gt;type：join 类型&lt;/li&gt;
&lt;li&gt;possible_keys：可选的索引&lt;/li&gt;
&lt;li&gt;key：实际选择的索引&lt;/li&gt;
&lt;li&gt;key_len：实际使用索引的长度&lt;/li&gt;
&lt;li&gt;ref：与索引比较的列&lt;/li&gt;
&lt;li&gt;rows：扫描行数的预估值&lt;/li&gt;
&lt;li&gt;filtered：按表条件筛选的行的百分比&lt;/li&gt;
&lt;li&gt;Extra：额外信息&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt; 3.重点关注的列&lt;/h2&gt;
&lt;p&gt; type 列&lt;/p&gt;
&lt;p&gt;type 列描述了表的 join 类型，以下以 &lt;span&gt;查询的&lt;/span&gt;&lt;span&gt;最优到最差的排序&lt;/span&gt;列出了可能值：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;system ：当表只有一条数据（= system table）时，为 system 类型，是 const 类型的 特例。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;const：当表最多只有一条数据相匹配时，为 const 类型。因为只有一行，所以优化器的其余部分可以将此行列中的值视为常量（constant）。const表非常快，因为它们只读一次。在使用 主键 或者 唯一索引 和常量比较时，即为 const 类型。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
explain select s.* from student s where s.id = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | s     | NULL       | const | PRIMARY       | PRIMARY | 8       | const |    1 |   100.00 | NULL  |
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;eq_ref：通常出现在多表 join 查询，并且 关联的字段是 主键 或者 唯一非空索引，即后表 只能匹配一条数据。&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;ref：通常出现在多表 join 查询，关联使用了 最左前缀 或者 关联的是非主键 或者 非 唯一索引（也就是说，join 不能根据索引选择 单行数据）&lt;/li&gt;
&lt;li&gt;fulltext：使用全文索引执行 join&lt;/li&gt;
&lt;li&gt;ref_or_null：在 ref 的基础上 ， 另外还搜索了包含空值的行&lt;/li&gt;
&lt;li&gt;index_merge:&lt;/li&gt;
&lt;li&gt;unique_subquery&lt;/li&gt;
&lt;li&gt;index_subquery&lt;/li&gt;
&lt;li&gt;range：&lt;/li&gt;
&lt;li&gt;index：和 all 类似 ，只不过 扫描的是 索引树&lt;/li&gt;
&lt;li&gt;all：全表扫描，效率最差，避免出现&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Sun, 24 Mar 2019 07:46:00 +0000</pubDate>
<dc:creator>沧海一粟，志取一瓢</dc:creator>
<og:description>1.what is explain(explain 是个什么东东) explain(解释)，在 Mysql 中 作为一个关键词，用来解释 Mysql 是如何执行语句，可以连接 select</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bg2015-07-05/p/10579695.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core中自定义路由约束 - weilence</title>
<link>http://www.cnblogs.com/Weilence/p/10587924.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Weilence/p/10587924.html</guid>
<description>&lt;p&gt;ASP.NET Core中，通过定义路由模板，可以在Url上传递变量，同时可以针对变量提供默认值、可选和约束。&lt;/p&gt;
&lt;p&gt;约束的使用方法是在属性路由上添加指定的约束名，用法如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;// 单个使用
[Route(&quot;users/{id:int}&quot;)]
public User GetUserById(int id) { }
// 组合使用
[Route(&quot;users/{id:int:min(1)}&quot;)]
public User GetUserById(int id) { }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;框架内部已经提供了一些约束，如下所示：&lt;br/&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;18&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;{id:int}&lt;/td&gt;
&lt;td&gt;123456789， -123456789&lt;/td&gt;
&lt;td&gt;匹配任何整数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;{active:bool}&lt;/td&gt;
&lt;td&gt;true， FALSE&lt;/td&gt;
&lt;td&gt;匹配 true或 false（区分大小写）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;datetime&lt;/td&gt;
&lt;td&gt;{dob:datetime}&lt;/td&gt;
&lt;td&gt;2016-12-31， 2016-12-31 7:32pm&lt;/td&gt;
&lt;td&gt;匹配有效的 DateTime 值（位于固定区域性中 - 查看警告）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;decimal&lt;/td&gt;
&lt;td&gt;{price:decimal}&lt;/td&gt;
&lt;td&gt;49.99， -1,000.01&lt;/td&gt;
&lt;td&gt;匹配有效的 decimal 值（位于固定区域性中 - 查看警告）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;{weight:double}&lt;/td&gt;
&lt;td&gt;1.234， -1,001.01e8&lt;/td&gt;
&lt;td&gt;匹配有效的 double 值（位于固定区域性中 - 查看警告）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;{weight:float}&lt;/td&gt;
&lt;td&gt;1.234， -1,001.01e8&lt;/td&gt;
&lt;td&gt;匹配有效的 float 值（位于固定区域性中 - 查看警告）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;guid&lt;/td&gt;
&lt;td&gt;{id:guid}&lt;/td&gt;
&lt;td&gt;CD2C1638-1638-72D5-1638-DEADBEEF1638， {CD2C1638-1638-72D5-1638-DEADBEEF1638}&lt;/td&gt;
&lt;td&gt;匹配有效的 Guid 值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;{ticks:long}&lt;/td&gt;
&lt;td&gt;123456789， -123456789&lt;/td&gt;
&lt;td&gt;匹配有效的 long 值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;minlength(value)&lt;/td&gt;
&lt;td&gt;{username:minlength(4)}&lt;/td&gt;
&lt;td&gt;Rick&lt;/td&gt;
&lt;td&gt;字符串必须至少为 4 个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;maxlength(value)&lt;/td&gt;
&lt;td&gt;{filename:maxlength(8)}&lt;/td&gt;
&lt;td&gt;Richard&lt;/td&gt;
&lt;td&gt;字符串不得超过 8 个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;length(length)&lt;/td&gt;
&lt;td&gt;{filename:length(12)}&lt;/td&gt;
&lt;td&gt;somefile.txt&lt;/td&gt;
&lt;td&gt;字符串必须正好为 12 个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;length(min,max)&lt;/td&gt;
&lt;td&gt;{filename:length(8,16)}&lt;/td&gt;
&lt;td&gt;somefile.txt&lt;/td&gt;
&lt;td&gt;字符串必须至少为 8 个字符，且不得超过 16 个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;min(value)&lt;/td&gt;
&lt;td&gt;{age:min(18)}&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;整数值必须至少为 18&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;max(value)&lt;/td&gt;
&lt;td&gt;{age:max(120)}&lt;/td&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;td&gt;整数值不得超过 120&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;range(min,max)&lt;/td&gt;
&lt;td&gt;{age:range(18,120)}&lt;/td&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;td&gt;整数值必须至少为 18，且不得超过 120&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;alpha&lt;/td&gt;
&lt;td&gt;{name:alpha}&lt;/td&gt;
&lt;td&gt;Rick&lt;/td&gt;
&lt;td&gt;字符串必须由一个或多个字母字符（a-z，区分大小写）组成&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;regex(expression)&lt;/td&gt;
&lt;td&gt;{ssn:regex(^\d{{3}}-\d{{2}}-\d{{4}}$)}&lt;/td&gt;
&lt;td&gt;123-45-6789&lt;/td&gt;
&lt;td&gt;字符串必须匹配正则表达式（参见有关定义正则表达式的提示）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;required&lt;/td&gt;
&lt;td&gt;{name:required}&lt;/td&gt;
&lt;td&gt;Rick&lt;/td&gt;
&lt;td&gt;用于强制在 URL 生成过程中存在非参数值&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;内置的约束能够适用于大部分常见的应用场景，但是有时候我们还是需要去自定义我们想要的效果。&lt;/p&gt;

&lt;p&gt;自定义约束是要实现&lt;code&gt;IRouteConstraint&lt;/code&gt;接口，然后重载&lt;code&gt;Match&lt;/code&gt;方法，该方法有四个参数。&lt;/p&gt;
&lt;p&gt;第一个参数&lt;code&gt;httpContext&lt;/code&gt;是当前请求的上下文&lt;br/&gt;第二个参数&lt;code&gt;route&lt;/code&gt;是当前约束所属的路由&lt;br/&gt;第三个参数&lt;code&gt;routeKey&lt;/code&gt;是当前检查的变量名，例如文章开头示例中的&lt;code&gt;id&lt;/code&gt;&lt;br/&gt;第四个参数&lt;code&gt;values&lt;/code&gt;是当前Url匹配的字典值，例如文章开头的示例的路由，如果Url是&lt;code&gt;users/1&lt;/code&gt;，那么就有一个字典，其&lt;code&gt;key = id&lt;/code&gt;，&lt;code&gt;value = 1&lt;/code&gt;。当然还有其他的变量的值，比如&lt;code&gt;controller&lt;/code&gt;，&lt;code&gt;action&lt;/code&gt;等。&lt;br/&gt;第五个参数&lt;code&gt;routeDirection&lt;/code&gt;是一个枚举值，代表是web请求的还是用&lt;code&gt;Url.Action&lt;/code&gt;等方法生成Url。&lt;/p&gt;
&lt;p&gt;举一个实例，我们想要定义一个约束，指定路由传过来的参数必须是指定的枚举值。&lt;/p&gt;
&lt;p&gt;我们先定义一个枚举：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public enum BoolEnum
{
    True,
    False
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后定义约束：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class EnumConstraint : IRouteConstraint
{
    private Type _enumType;

    public EnumConstraint(string enumTypeName)
    {
        _enumType = Type.GetType(enumTypeName);
    }

    public bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection)
    {
        var value = values[routeKey];
        if (value == null)
        {
            return false;
        }

        if (Enum.TryParse(_enumType, value.ToString(), out object result))
        {
            if (Enum.IsDefined(_enumType, result))
            {
                return true;
            }
        }

        return false;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;Startup.cs&lt;/code&gt;的&lt;code&gt;ConfigureServices&lt;/code&gt;方法添加自定义约束：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;services.Configure&amp;lt;RouteOptions&amp;gt;(options =&amp;gt;
{
    options.ConstraintMap.Add(&quot;enum&quot;, typeof(EnumConstraint));
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在路由上使用约束：&lt;br/&gt;(&lt;code&gt;WebApplicationTest&lt;/code&gt;是当前的&lt;code&gt;namespace&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;[Route(&quot;api/[controller]&quot;)]
[ApiController]
public class TestController : ControllerBase
{
    // GET: api/Test
    [HttpGet(&quot;{bool:enum(&quot; + nameof(WebApplicationTest) + &quot;.&quot; + nameof(BoolEnum) + &quot;)}&quot;)]
    public string Get(BoolEnum @bool)
    {
        return &quot;bool: &quot; + @bool;
    }

    [HttpGet(&quot;{id:int:min(2)}&quot;, Name = &quot;Get&quot;)]
    public string Get(int id)
    {
        return &quot;id: &quot; + id;
    }

    [HttpGet(&quot;{name}&quot;)]
    public string Get(string name)
    {
        return &quot;name: &quot; + name;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;{id:int:min(2)}&lt;/code&gt;路由必须使用&lt;code&gt;min(2)&lt;/code&gt;，否则对于&lt;code&gt;id = 0&lt;/code&gt;或&lt;code&gt;id = 1&lt;/code&gt;会有冲突。&lt;br/&gt;运行程序，当路由是&lt;code&gt;api/Test/0&lt;/code&gt;、&lt;code&gt;api/Test/1&lt;/code&gt;、&lt;code&gt;api/Test/True&lt;/code&gt;和&lt;code&gt;api/Test/False&lt;/code&gt;的时候，匹配我们的自定义约束。&lt;br/&gt;当路由是&lt;code&gt;api/Test/{大于2的整数}&lt;/code&gt;的时候，匹配第二个路由。&lt;br/&gt;其他情况匹配第三个路由。&lt;/p&gt;

&lt;p&gt;路由约束在某些场景下是非常有用的功能，可以减少&lt;code&gt;controller&lt;/code&gt;中校验参数，将部分参数校验的功能使用声明式的&lt;code&gt;attruibute&lt;/code&gt;来实现，某些重复的校验可以通过抽取成约束公共使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;constraint&lt;/code&gt;的构造函数可以使用注入，所以可以扩展性十分强，可以通过查询数据库做一些参数校验。&lt;/p&gt;
&lt;p&gt;官网上对于路由约束只是简单的提了一下，本文对路由约束的使用提供了具体的示例。&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 07:06:00 +0000</pubDate>
<dc:creator>weilence</dc:creator>
<og:description>路由约束 ASP.NET Core中，通过定义路由模板，可以在Url上传递变量，同时可以针对变量提供默认值、可选和约束。 约束的使用方法是在属性路由上添加指定的约束名，用法如下： 框架内部已经提供了一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Weilence/p/10587924.html</dc:identifier>
</item>
<item>
<title>.NET Core之微信支付之公众号、H5支付篇 - 潇十一郎</title>
<link>http://www.cnblogs.com/zhangxiaoyong/p/10588241.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxiaoyong/p/10588241.html</guid>
<description>&lt;p&gt;本篇主要记录微信支付中公众号及H5支付全过程。&lt;/p&gt;
&lt;h2&gt;准备篇&lt;/h2&gt;
&lt;p&gt;公众号或者服务号(并开通微信支付功能)、商户平台中开通JSAPI支付、H5支付。&lt;/p&gt;
&lt;h2&gt;配置篇&lt;/h2&gt;
&lt;p&gt;公众号或者服务号中 -------开发-------开发者工具---------web开发者工具-------绑定为开发者&lt;/p&gt;
&lt;p&gt;公众号或者服务号中 -------公众号设置--------功能设置   ：填写业务域名、JS安全域名、网页授权域名 示例：pay.one.com&lt;/p&gt;
&lt;p&gt;商户平台中--------产品中心-------开发配置------JSAPI支付授权目录填写：http://pay.one.com/    http://pay.one.com/WeChatPay/PubPay/-----H5支付填写：pay.one.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/762349/201903/762349-20190324141321805-225334316.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/762349/201903/762349-20190324141224191-519006046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/762349/201903/762349-20190324141050964-450817981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;若对配置还有疑问，可参考官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1421140842&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1421140842&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;amp;index=6&quot; target=&quot;_blank&quot;&gt;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;amp;index=6&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;开发篇&lt;/h2&gt;
&lt;h3&gt;JSAPI支付&lt;/h3&gt;
&lt;p&gt;本Demo是基于Payment 的SDK开发。具体详情可参考：&lt;a href=&quot;https://github.com/Essensoft/Payment&quot; target=&quot;_blank&quot;&gt;https://github.com/Essensoft/Payment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先 使用Nuget安装payment：&lt;/p&gt;
&lt;p&gt;Install-Package  ：Essensoft.AspNetCore.Payment.WeChatPay -Version 2.3.2&lt;/p&gt;
&lt;p&gt;建一个Model： WeChatPayPubPayViewModel&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeChatPayPubPayViewModel
    {
        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;out_trade_no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; OutTradeNo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Body { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_fee&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TotalFee { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spbill_create_ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SpbillCreateIp { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;notify_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; NotifyUrl { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trade_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TradeType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; OpenId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WeChatPayController：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;微信支付请求客户端（用于处理请求与响应）&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IWeChatPayClient _client;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; ILogger&amp;lt;WeChatPayController&amp;gt;&lt;span&gt; _logger;

 &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IHttpContextAccessor _accessor;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; WeChatPayController(IWeChatPayClient client, IHttpContextAccessor accessor, ILogger&amp;lt;WeChatPayController&amp;gt;&lt;span&gt; logger)
        {
            _client &lt;/span&gt;=&lt;span&gt; client;
            _accessor &lt;/span&gt;=&lt;span&gt; accessor;
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 公众号支付
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;  IActionResult PubPay()
        {
            WeChatPayPubPayViewModel payModel&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeChatPayPubPayViewModel()
            {
                Body &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;微信公众号支付测试&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                OutTradeNo &lt;/span&gt;= DateTime.Now.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyyMMddHHmmssfff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                TotalFee &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分 单位&lt;/span&gt;
                SpbillCreateIp = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                NotifyUrl &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://pay.one.com/notify/wechatpay/unifiedorder&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                TradeType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JSAPI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                OpenId &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处需进行授权 获取OpenId&lt;/span&gt;
&lt;span&gt;            };
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(payModel);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 公众号支付
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;viewModel&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; PubPay(WeChatPayPubPayViewModel viewModel)
        {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(viewModel.OpenId))
           {
               ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请返回上级重新进入此页面以获取最新数据&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
           }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeChatPayUnifiedOrderRequest
            {
                Body &lt;/span&gt;=&lt;span&gt; viewModel.Body,
                OutTradeNo &lt;/span&gt;=&lt;span&gt; viewModel.OutTradeNo,
                TotalFee &lt;/span&gt;=&lt;span&gt; viewModel.TotalFee,
                SpbillCreateIp &lt;/span&gt;=&lt;span&gt; viewModel.SpbillCreateIp,
                NotifyUrl &lt;/span&gt;=&lt;span&gt; viewModel.NotifyUrl,
                TradeType &lt;/span&gt;=&lt;span&gt; viewModel.TradeType,
                OpenId &lt;/span&gt;= viewModel.OpenId &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处需进行授权 获取OpenId&lt;/span&gt;
&lt;span&gt;            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _client.ExecuteAsync(request);&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (response.ReturnCode == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SUCCESS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&amp;amp; response.ResultCode == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SUCCESS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; req = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeChatPayH5CallPaymentRequest
                {
                    Package &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prepay_id=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; response.PrepayId
                };
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameter = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _client.ExecuteAsync(req);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将参数(parameter)给 公众号前端 让他在微信内H5调起支付(&lt;/span&gt;&lt;span&gt;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&lt;/span&gt;&lt;span&gt;&amp;amp;index=6)&lt;/span&gt;
                ViewData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; JsonConvert.SerializeObject(parameter);&lt;/span&gt;&lt;span&gt;
                ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; response.Body;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
            }
            ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; response.Body;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：公众号或者微信内支付，需要授权获取到用户的OpenId。所以，此处我们还需要进行微信授权，而授权方式有两种，一种是静默授权、一种是需要用户同意，区别是 静默授权只能拿到Openid，而经用户同意后可拿到 微信头像、昵称、性别等其他信息。&lt;/p&gt;
&lt;p&gt;具体可参阅文档：&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1421140842&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1421140842&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;页面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@using Newtonsoft.Json
@model WeChatPayPubPayViewModel
@{
    ViewData[&quot;Title&quot;] = &quot;公众号支付-统一下单&quot;;
}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;nav &lt;/span&gt;&lt;span&gt;aria-label&lt;/span&gt;&lt;span&gt;=&quot;breadcrumb&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;breadcrumb&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;breadcrumb-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-controller&lt;/span&gt;&lt;span&gt;=&quot;WeChatPay&quot;&lt;/span&gt;&lt;span&gt; asp-action&lt;/span&gt;&lt;span&gt;=&quot;Index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;微信支付&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;breadcrumb-item active&quot;&lt;/span&gt;&lt;span&gt; aria-current&lt;/span&gt;&lt;span&gt;=&quot;page&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@ViewData[&quot;Title&quot;]&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;nav&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;card&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;card-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;asp-controller&lt;/span&gt;&lt;span&gt;=&quot;WeChatPay&quot;&lt;/span&gt;&lt;span&gt; asp-action&lt;/span&gt;&lt;span&gt;=&quot;PubPay&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;asp-validation-summary&lt;/span&gt;&lt;span&gt;=&quot;All&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;text-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;OutTradeNo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;OutTradeNo&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model?.OutTradeNo&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;Body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;Body&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model?.Body&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;TotalFee&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;TotalFee&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model?.TotalFee&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;SpbillCreateIp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;SpbillCreateIp&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model?.SpbillCreateIp&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;NotifyUrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;NotifyUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model?.NotifyUrl&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;TradeType&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;TradeType&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model?.TradeType&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;OpenId&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;OpenId&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model?.OpenId&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提交请求&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-success&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;PayNow&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;立即支付&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Response:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;textarea &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; rows&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@ViewData[&quot;response&quot;]&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;textarea&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Parameter:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;textarea &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; rows&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@ViewData[&quot;parameter&quot;]&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;textarea&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
@section Scripts {
    @{await Html.RenderPartialAsync(&quot;_ValidationScriptsPartial&quot;); }
}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/lib/jquery/dist/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#PayNow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            const local &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://pay.one.com/WeChatPay/PayBack/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;
&lt;span&gt;              window.location.href &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://open.weixin.qq.com/connect/oauth2/authorize?appid=@ViewBaig.AppId&amp;amp;redirect_uri=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; encodeURIComponent(local)&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;response_type=code&amp;amp;scope=snsapi_base&amp;amp;state=a#wechat_redirect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        });
   
    });

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时：PayBack Action如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;  Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; PayBack()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; code = Request.Query[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; state = Request.Query[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;span&gt;
            OAuthToken tokenModel &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OAuthToken();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过code换取token&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(code))
            {
                _logger.LogWarning(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;授权成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                ViewBag.Code &lt;/span&gt;=&lt;span&gt; code;
                tokenModel &lt;/span&gt;=&lt;span&gt; OauthApi.GetAuthToken(code, wechatAppId);
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeChatPayUnifiedOrderRequest
            {
                Body &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;微信公众号支付测试&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                OutTradeNo &lt;/span&gt;= DateTime.Now.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyyMMddHHmmssfff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                TotalFee &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分 单位&lt;/span&gt;
                SpbillCreateIp = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                NotifyUrl &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://pay.one.com/notify/wechatpay/unifiedorder&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                TradeType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JSAPI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                OpenId &lt;/span&gt;= tokenModel.Openid &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处需进行授权 获取OpenId&lt;/span&gt;
&lt;span&gt;            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _client.ExecuteAsync(request);
            _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;统一下单接口返回：{response.ReturnCode}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (response.ReturnCode == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SUCCESS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&amp;amp; response.ResultCode == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SUCCESS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; req = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeChatPayH5CallPaymentRequest
                {
                    Package &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prepay_id=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; response.PrepayId
                };
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameter = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _client.ExecuteAsync(req);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将参数(parameter)给 公众号前端 让他在微信内H5调起支付(&lt;/span&gt;&lt;span&gt;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&lt;/span&gt;&lt;span&gt;&amp;amp;index=6)&lt;/span&gt;
                ViewData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; JsonConvert.SerializeObject(parameter);
                _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;统一下单成功，即将调起微信支付：{ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;parameter&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString()}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;
                ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; response.Body;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
            }
            ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; response.Body;

            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中：OAuthToken是网页授权 返回的实体：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9dd0f495-7dbf-4ba5-a370-f7486a2e35f8')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_9dd0f495-7dbf-4ba5-a370-f7486a2e35f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9dd0f495-7dbf-4ba5-a370-f7486a2e35f8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9dd0f495-7dbf-4ba5-a370-f7486a2e35f8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9dd0f495-7dbf-4ba5-a370-f7486a2e35f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取网页授权token时，返回的实体
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OAuthToken : BaseRes
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 网页授权接口调用凭证。注意：此access_token与基础支持的access_token不同
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [JsonProperty(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;access_token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; AccessToken { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _expiresIn;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; access_token接口调用凭证超时时间，单位（秒）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [JsonProperty(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;expires_in&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ExpiresIn
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _expiresIn; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;
            {
                ExpiresTime &lt;/span&gt;=&lt;span&gt; DateTime.Now.AddSeconds(value);
                _expiresIn &lt;/span&gt;=&lt;span&gt; value;
            }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用于刷新access_token
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [JsonProperty(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;refresh_token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; RefreshToken { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户唯一标识。请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的openid
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [JsonProperty(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Openid { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户授权的作用域，使用逗号（,）分隔
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [JsonProperty(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Scope { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [JsonProperty(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;expires_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ExpiresTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 只有在用户将公众号绑定到微信开放平台账号后，才会出现该字段
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [JsonProperty(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unionid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Unionid { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;最后 贴一下支付成功后的回调函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;notify/wechatpay&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeChatPayNotifyController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IWeChatPayNotifyClient _client;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; ILogger&amp;lt;WeChatPayNotifyController&amp;gt;&lt;span&gt; _logger;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; WeChatPayNotifyController(IWeChatPayNotifyClient client,ILogger&amp;lt;WeChatPayNotifyController&amp;gt;&lt;span&gt; logger)
        {
            _client &lt;/span&gt;=&lt;span&gt; client;
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 统一下单支付结果通知
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unifiedorder&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; Unifiedorder()
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进入回调&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; payconfig =&lt;span&gt; OpenApi.GetPayConfig();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; notify = &lt;span&gt;await&lt;/span&gt; _client.ExecuteAsync&amp;lt;WeChatPayUnifiedOrderNotify&amp;gt;&lt;span&gt;(Request);
                _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;返回状态码：{notify.ReturnCode}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (notify.ReturnCode == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SUCCESS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                {
                    _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;业务结果码：{notify.ResultCode}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (notify.ResultCode == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SUCCESS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    {
                        _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;支付方式：{notify.TradeType}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;商户订单号：{notify.OutTradeNo}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;微信支付订单号：{notify.TransactionId}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;支付金额：{notify.TotalFee}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; WeChatPayNotifyResult.Success;
                    }
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NoContent();
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception ex)
            {
                _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;回调失败：{ex.Message}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NoContent();
            }
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后测试一下支付,查看服务器Log如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/762349/201903/762349-20190324144124919-1726687644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;H5支付&lt;/h3&gt;
&lt;p&gt; H5支付是指再除开微信浏览器以外的移动端浏览器上进行微信回复操作。&lt;/p&gt;
&lt;p&gt;和上面步骤大体一致，有几个地方需要注意&lt;/p&gt;
&lt;p&gt;1：客户端IP问题：H5支付的时候，微信支付系统会根据客户端调起的当前Ip 作为支付Ip，若发现 发起支付请求时，ip有问题，则会支付失败，或者提示系统繁忙。这里贴一下我获取IP的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Utils.GetUserIp(_accessor.HttpContext)；&lt;strong&gt;&lt;span&gt;//页面上调用


&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;        ///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 穿过代理服务器获取真实IP
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetUserIp(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; HttpContext context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ip = context.Request.Headers[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X-Forwarded-For&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].FirstOrDefault();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(ip))
            {
                ip &lt;/span&gt;=&lt;span&gt; context.Connection.RemoteIpAddress.ToString();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ip;
            
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2:TradeType类型应该是：MWEB&lt;/p&gt;
&lt;p&gt;3：若调起微信支付成功后，默认回调到支付首页，若需要设置回调页面，则可以再URl中拼接：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; H5支付
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;viewModel&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; H5Pay(WeChatPayH5PayViewModel viewModel)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeChatPayUnifiedOrderRequest
            {
                Body &lt;/span&gt;=&lt;span&gt; viewModel.Body,
                OutTradeNo &lt;/span&gt;=&lt;span&gt; viewModel.OutTradeNo,
                TotalFee &lt;/span&gt;=&lt;span&gt; viewModel.TotalFee,
                SpbillCreateIp &lt;/span&gt;=&lt;span&gt; viewModel.SpbillCreateIp,
                NotifyUrl &lt;/span&gt;=&lt;span&gt; viewModel.NotifyUrl,
                TradeType &lt;/span&gt;=&lt;span&gt; viewModel.TradeType
            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _client.ExecuteAsync(request);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; mweb_url为拉起微信支付收银台的中间页面，可通过访问该url来拉起微信客户端，完成支付,mweb_url的有效期为5分钟。&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (response.MwebUrl == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                ViewData[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; response.ReturnMsg;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Redirect(response.MwebUrl);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/762349/201903/762349-20190324145028590-1325016919.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;更多详细可参考文档：&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4&quot; target=&quot;_blank&quot;&gt;https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4：支付结果通知：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、同样的通知可能会多次发送给商户系统。商户系统必须能够正确处理重复的通知。&lt;/p&gt;
&lt;p&gt;2、后台通知交互时，如果微信收到商户的应答不符合规范或超时，微信会判定本次通知失败，重新发送通知，直到成功为止（在通知一直不成功的情况下，微信总共会发起10次通知，通知频率为15s/15s/30s/3m/10m/20m/30m/30m/30m/60m/3h/3h/3h/6h/6h - 总计 24h4m），但微信不保证通知最终一定能成功。&lt;/p&gt;
&lt;p&gt;3、在订单状态不明或者没有收到微信支付结果通知的情况下，建议商户主动调用微信支付【&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_2&quot; target=&quot;_blank&quot;&gt;查询订单API&lt;/a&gt;】确认订单状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特别提醒：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、商户系统对于支付结果通知的内容一定要做&lt;span&gt;签名验证,并校验返回的订单金额是否与商户侧的订单金额一致&lt;/span&gt;，防止数据泄漏导致出现“假通知”，造成资金损失。&lt;/p&gt;
&lt;p&gt;2、当收到通知进行处理时，首先检查对应业务数据的状态，判断该通知是否已经处理过，如果没有处理过再进行处理，如果处理过直接返回结果成功。在对业务数据进行状态检查和处理之前，要采用数据锁进行并发控制，以避免函数重入造成的数据混乱。 &lt;/p&gt;

&lt;p&gt;最后可以测试下H5支付，查看返回的Log：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/762349/201903/762349-20190324145642431-814359733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 本文只是抛砖引玉，更多具体支付场景和代码，还需各位看官结合自己项目量身定做。&lt;/p&gt;
&lt;p&gt;  更多示例Demo可入群获取。&lt;/p&gt;

</description>
<pubDate>Sun, 24 Mar 2019 06:59:00 +0000</pubDate>
<dc:creator>潇十一郎</dc:creator>
<og:description>前言 本篇主要记录微信支付中公众号及H5支付全过程。 准备篇 公众号或者服务号(并开通微信支付功能)、商户平台中开通JSAPI支付、H5支付。 配置篇 公众号或者服务号中 开发 开发者工具 web开发</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxiaoyong/p/10588241.html</dc:identifier>
</item>
<item>
<title>Ubuntu服务器的anaconda环境修复办法（自动进入base环境怎么办？） - tuji_sjp</title>
<link>http://www.cnblogs.com/tuji-sjp/p/10588211.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tuji-sjp/p/10588211.html</guid>
<description>&lt;p&gt;&lt;span&gt;某天在服务器上更新了conda的版本，不知怎么回事我的python3.6就变成python2.7了，而且一进入服务器就会自动进入base环境（我的conda只装了base环境）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;仔细研究了半天，才发现它给我更新了个python2.7的conda，原本python3.6不知道去哪了（应该是没了，但是3的环境都还在），真的迷醉...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;谷歌了几十个网页，找不到一条类似的问题。问了好多大佬，他们都说不太懂怎么解决，建议我重新安装anaconda和需要的环境，可是我心疼我费好大功夫才装好的环境，而且重新安装太费时费力了，学校的网实在太差... 再说了我的环境还在呢，一定能解决的。所以我研究了好几天，一直死磕...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;直到昨天终于解决第一个问题：一进服务器就是base环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1298482/201903/1298482-20190324145232915-1977576815.png&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;72&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看你的.bashrc文件是否有下面这段代码，如果有，注释掉就可以解决了！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;记得修改完要 source ~/.bashrc 才会生效！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1298482/201903/1298482-20190324142613018-461426816.png&quot; alt=&quot;&quot; width=&quot;1152&quot; height=&quot;311&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今天又解决了第二个问题：把我的python3.6装回来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、查看path路径（python -m -site），可以知道你装的python版本及搜索位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1298482/201903/1298482-20190324143114067-1265850226.png&quot; alt=&quot;&quot; width=&quot;1045&quot; height=&quot;342&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、输入 python -m site -help&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1298482/201903/1298482-20190324143501285-1714901838.png&quot; alt=&quot;&quot; width=&quot;735&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、去红线的这个路径下找site.py文件，修改USER_BASE（可以不改，我没改）和USER_SITE（你要安装下载的site-packages的路径，一般是anaconda/lib/python3.x/site-packages/，每个人路径不同）这两个参数，它能准确定位你想要使用的python版本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1298482/201903/1298482-20190324143840594-274249028.png&quot; alt=&quot;&quot; width=&quot;788&quot; height=&quot;297&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、重新安装python3.6.x（或者你可以先不做以上三步，直接第四步，看看是否能解决你的问题）（做前三步是因为我不想浪费我之前安装的环境及包，可以重新使用它们）（conda list可以查看是否恢复了以前安装好的环境）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：conda install python=3.6.4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;确定安装即可。安装完成后输入python查看是否成功吧！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;添加一个&lt;/span&gt;&lt;span&gt;Python Source Releases&lt;/span&gt;&lt;span&gt;下载地址：&lt;a href=&quot;https://www.python.org/downloads/source/&quot;&gt;https://www.python.org/downloads/source/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下载anaconda地址：&lt;a class=&quot;navbar-brand&quot; href=&quot;https://mirrors.tuna.tsinghua.edu.cn/&quot;&gt;清华大学开源软件镜像站&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;最后感谢唯一能参考一点的博文：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/mukvintt/article/details/80908951&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;更改 Python 的 pip install 默认安装依赖路径&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;如果觉得本文还不错的，能成功解决你问题的朋友，请随手点个赞吧~ 评论也可以。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;版权声明：本文为博主自主原创，谢绝转载，请尊重个人成果，非常感谢！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/tuji-sjp/p/10588211.html&quot;&gt;https://www.cnblogs.com/tuji-sjp/p/10588211.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;









&lt;hr/&gt;
</description>
<pubDate>Sun, 24 Mar 2019 06:53:00 +0000</pubDate>
<dc:creator>tuji_sjp</dc:creator>
<og:description>某天在服务器上更新了conda的版本，不知怎么回事我的python3.6就变成python2.7了，而且一进入服务器就会自动进入base环境（我的conda只装了base环境） 仔细研究了半天，才发现</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tuji-sjp/p/10588211.html</dc:identifier>
</item>
<item>
<title>关于绑定导入表 - huity</title>
<link>http://www.cnblogs.com/huity35/p/10588134.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huity35/p/10588134.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;0x01&lt;/strong&gt; &lt;strong&gt;绑定导入表概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;绑定导入表&lt;/strong&gt;(The Bound Import Directory)&lt;/span&gt;。它包含了可以让加载器判断绑定的地址是否合法的信息。描述它的数据结构是IMAGE_BOUND_IMPORT_DESCRIPTOR，目录表就是这种结构的数组，每一项都对应一个被绑定过的DLL。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;每当PE装载器装入PE文件时，检查导入表并将相关DLL映射到进程空间地址。然后通过遍历IAT里的IMAGE_THUNK_DATA数组并用导入函数的真实地址替换它，这一步需要很多时间。如果程序员事先能正确预测函数地址，PE装载器就不用每次装入PE文件时都去修正IMAGE_THUNK_DATA值了，绑定导入就是这种思想的产物。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当一个可执行文件被绑定(例如通过绑定程序Visual Studio的Bind.exe)时，IAT中的IMAGE_THUNK_DATA结构被导入函数的实际地址改写了。磁盘中的可执行文件，他们的IAT里有的存放的是相关DLL导出函数的实际内存地址。这样可以使应用程序更快的进程初始化，并且使用较少的存储器。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在执行整个进程期间，bind程序做了两个重要假设：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;©当&lt;strong&gt;进程初始化时，需要的DLL实际加载到了它们的首选基地址&lt;/strong&gt;中。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;©自从&lt;strong&gt;绑定操作执行以来，DLL导出表中引用的符号位置一直没有改变&lt;/strong&gt;。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　当然，如果上面的两个假设中有一个是假的，IAT中所有地址均是无效的，加载器会检查这种情况并做出相应反应，加载器从INT表里获得所需要的信息来解决导入API的地址问题。对于一个可执行文件的装入，INT是不需要的。但是，如果没有，可执行文件是不能被绑定的。微软的链接器似乎总是生成一个INT,但是在很长一段时间里，Borland 的链接器(TLINK)没有这样做, 由Borland生成的文件是不能被绑定的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;      由于不知用户运行的是Windows 2000还是Windows XP，无法将系统DLL绑定起来，因此程序安装时是绑定程序的最佳时机。Windows 安装器的BindImage将做这些工作。另外，IMAGEHLP.DLL提供了BindImageEx函数。不管用什么方式，绑定都是一个好主意。如果加载器确定绑定信息是当前的，可执行文件的装入会更快，如果绑定信息已经变得陈旧了，也不会影响程序的运行。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;      &lt;strong&gt;对于加载器来说，使绑定变得有效的一个关键步骤是确定在IAT表中的绑定信息是否是当前的&lt;/strong&gt;。当一个可执行文件被绑定时，被参考的DLL信息放入了文件中，加载器检查这些信息来做一个快速的綁定有效性验证。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;      数据目录表( DataDirectory )的第11个成员指向绑定输入。绑定输入以一个IMAGE_BOUND_IMPORT_DESCRIPTOR结构的数组开始，一个绑定可执行文件包含一系列这样的结构，每个IBID结构都指出了一个已经被绑定输入DLL的时间/日期戳。IBID 的结构如下:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
 
      DWORD TimeDateStamp;
 
      WORD OffsetModuleName;
 
      WORD NumberOfModuleForwarderRefs;
 
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    &lt;strong&gt;TimeDateStamp&lt;/strong&gt;。包含一个被导入的DLL的时间/日期戳；允许加载器快速判定绑定是不是新的。这个成员必须和要引用的DLL的文件头信息相吻合，否则就会加载器去手动计算新IAT，这种情况一般发生在DLL版本不同时或者DLL映像被重定位时。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    &lt;strong&gt;OffsetModuleName&lt;/strong&gt;。包含了以第一个IMAGE_BOUND_IMPORT_DESCRIPTOR为基址，DLL名称字符串(ASCII且以null结束)的偏移（非RVA）。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;     &lt;strong&gt;NumberOfModuleForwarderRefs&lt;/strong&gt;。是紧接着本结构后的另一个IMAGE_BOUND_FORWARDER_REF结构数组的元素个数。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
typedef struct _IMAGE_BOUND_FORWARDER_REF {
 
      DWORD TimeDateStamp;
 
      WORD OffsetModuleName;
 
      WORD Reserved;
 
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这个结构数组干什么用的？注意到&lt;strong&gt;Forwarder&lt;/strong&gt;这个词，我们在导出表中的函数的转发，就是一个函数自己不实现而是把调用请求转发给另一个DLL中的函数。这里的IMAGE_BOUND_FORWARDER_REF结构就是&lt;strong&gt;用来记录接受转发的另一个DLL的校验信息，如果这个DLL还有导出转发，那么在该DLL中也有IMAGE_BOUND_FORWARDER_REF结构描述第三个DLL的校验信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当绑定一个API被转发到另一个DLL时，被转发到的DLL的有效性也要被检查。这样，IMAGE_BOUND_FORWARDER_REF和IMAGE_BOUND_IMPORT_DESCRIPTOR结构是交叉存取的。例如链接到HeapAlloc,它被转向到NTDLL中的RtlAllocateHeap,然后对可执行文件运行BIND。在EXE里，已经有一个针对KERNEL32.DLL 的IBID, 它后面跟着一个针对NTDLL.DLL 的IMAGE_BOUND_FORWARDER_REF。紧跟在后面可能是另外的你输入并绑定的针对其他DLL的IBID。Windows目录里的应用程序就是典型的绑定输入结构程序，其IAT已指向相关DLL的函数。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;为了方便实现，Microsoft 的一些编译器( 如Visual Studio)都提供了bind.exe 这样的工具，由它检查PE文件的导入表,并用导入函数的真实地址替换IAT里的IMAGE_THUNK_DATA值。当文件装入时，PE装载器必定检查地址的有效性。如果DLL版本不同于PE文件存放的相关信息，或DLE需要重定位那么装载器认为原先计算的地址是无效的，它必定遍历OriginalFirstThunk 指向的数组以获取输入函数新地址，产生一个新的IAT，绑定输入表去除是不会影响程序正常运行的，去除方法是将图10.19中的绑定数据清零，然后再将目录表中的Bound import的RVA与大小清零即可。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;总结：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;此数据项两个作用：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;1、根据TimeDateStamp和OffsetModuleName字段的值我们就可以判断IAT表中的信息是否已经过期。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;2、解决DLL转发问题&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;0x02&lt;/strong&gt; &lt;strong&gt;绑定导入表分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;以win7x86 下记事本程序为例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
*** wait with pending attach
Symbol search path is: srv*
Executable search path is:
ModLoad: 00120000 00150000   C:\Windows\system32\notepad.exe
ModLoad: 77a10000 77b4c000   C:\Windows\SYSTEM32\ntdll.dll
ModLoad: 765f0000 766c4000   C:\Windows\system32\kernel32.dll
ModLoad: 75a70000 75abb000   C:\Windows\system32\KERNELBASE.dll
ModLoad: 761b0000 76250000   C:\Windows\system32\ADVAPI32.dll
ModLoad: 76540000 765ec000   C:\Windows\system32\msvcrt.dll
ModLoad: 77ba0000 77bb9000   C:\Windows\SYSTEM32\sechost.dll
ModLoad: 76d10000 76db1000   C:\Windows\system32\RPCRT4.dll
ModLoad: 75fc0000 7600e000   C:\Windows\system32\GDI32.dll
ModLoad: 76c00000 76cc9000   C:\Windows\system32\USER32.dll
ModLoad: 77b80000 77b8a000   C:\Windows\system32\LPK.dll
ModLoad: 766d0000 7676d000   C:\Windows\system32\USP10.dll
ModLoad: 76770000 767eb000   C:\Windows\system32\COMDLG32.dll
ModLoad: 76250000 762a7000   C:\Windows\system32\SHLWAPI.dll
ModLoad: 74800000 7499e000   C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.7601.17514_none_41e6975e2bd6f2b2\COMCTL32.dll
ModLoad: 76dc0000 77a0a000   C:\Windows\system32\SHELL32.dll
ModLoad: 6fd90000 6fde1000   C:\Windows\system32\WINSPOOL.DRV
ModLoad: 76aa0000 76bfc000   C:\Windows\system32\ole32.dll
ModLoad: 76a10000 76a9f000   C:\Windows\system32\OLEAUT32.dll
ModLoad: 74d70000 74d79000   C:\Windows\system32\VERSION.dll
ModLoad: 77c20000 77c3f000   C:\Windows\system32\IMM32.DLL
ModLoad: 767f0000 768bc000   C:\Windows\system32\MSCTF.dll
ModLoad: 75920000 7592c000   C:\Windows\system32\CRYPTBASE.dll
ModLoad: 74560000 745a0000   C:\Windows\system32\uxtheme.dll
ModLoad: 74270000 74283000   C:\Windows\system32\dwmapi.dll
(a70.f44): Break instruction exception - code 80000003 (first chance)
eax=7ffdd000 ebx=00000000 ecx=00000000 edx=77aaf1d3 esi=00000000 edi=00000000
eip=77a44108 esp=0143fc94 ebp=0143fcc0 iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
ntdll!DbgBreakPoint:
77a44108 cc              int     3
 
0:001&amp;gt;  dt 00120000 _IMAGE_DOS_HEADER
ntdll!_IMAGE_DOS_HEADER
   +0x000 e_magic          : 0x5a4d
   +0x002 e_cblp           : 0x90
   +0x004 e_cp             : 3
   +0x006 e_crlc           : 0
   +0x008 e_cparhdr        : 4
   +0x00a e_minalloc       : 0
   +0x00c e_maxalloc       : 0xffff
   +0x00e e_ss             : 0
   +0x010 e_sp             : 0xb8
   +0x012 e_csum           : 0
   +0x014 e_ip             : 0
   +0x016 e_cs             : 0
   +0x018 e_lfarlc         : 0x40
   +0x01a e_ovno           : 0
   +0x01c e_res            : [4] 0
   +0x024 e_oemid          : 0
   +0x026 e_oeminfo        : 0
   +0x028 e_res2           : [10] 0
   +0x03c e_lfanew         : 0n224
 
0:001&amp;gt;  dt 00120000+e0 _IMAGE_NT_HEADERS
ntdll!_IMAGE_NT_HEADERS
   +0x000 Signature        : 0x4550
   +0x004 FileHeader       : _IMAGE_FILE_HEADER
   +0x018 OptionalHeader   : _IMAGE_OPTIONAL_HEADER
 
0:001&amp;gt; dt 1200f8  _IMAGE_OPTIONAL_HEADER
ntdll!_IMAGE_OPTIONAL_HEADER
   +0x000 Magic            : 0x10b
   +0x002 MajorLinkerVersion : 0x9 ''
   +0x003 MinorLinkerVersion : 0 ''
   +0x004 SizeOfCode       : 0xa800
   +0x008 SizeOfInitializedData : 0x22400
   +0x00c SizeOfUninitializedData : 0
   +0x010 AddressOfEntryPoint : 0x3689
   +0x014 BaseOfCode       : 0x1000
   +0x018 BaseOfData       : 0xc000
   +0x01c ImageBase        : 0x120000
   +0x020 SectionAlignment : 0x1000
   +0x024 FileAlignment    : 0x200
   +0x028 MajorOperatingSystemVersion : 6
   +0x02a MinorOperatingSystemVersion : 1
   +0x02c MajorImageVersion : 6
   +0x02e MinorImageVersion : 1
   +0x030 MajorSubsystemVersion : 6
   +0x032 MinorSubsystemVersion : 1
   +0x034 Win32VersionValue : 0
   +0x038 SizeOfImage      : 0x30000
   +0x03c SizeOfHeaders    : 0x400
   +0x040 CheckSum         : 0x39741
   +0x044 Subsystem        : 2
   +0x046 DllCharacteristics : 0x8140
   +0x048 SizeOfStackReserve : 0x40000
   +0x04c SizeOfStackCommit : 0x11000
   +0x050 SizeOfHeapReserve : 0x100000
   +0x054 SizeOfHeapCommit : 0x1000
   +0x058 LoaderFlags      : 0
   +0x05c NumberOfRvaAndSizes : 0x10
   +0x060 DataDirectory    : [16] _IMAGE_DATA_DIRECTORY
 
0:001&amp;gt; dt 0x120158+0x58 _IMAGE_DATA_DIRECTORY
ntdll!_IMAGE_DATA_DIRECTORY
   +0x000 VirtualAddress   : 0x278
   +0x004 Size             : 0x128
 
0:001&amp;gt; db 00120000 +0x278 l 130
00120278  7e d9 5b 4a 80 00 00 00-ad da 5b 4a 8d 00 01 00  ~.[J......[J....
00120288  db da 5b 4a 9a 00 00 00-dd d9 5b 4a a4 00 00 00  ..[J......[J....
00120298  2f db 5b 4a ae 00 00 00-6f da 5b 4a b9 00 00 00  /.[J....o.[J....
001202a8  25 da 5b 4a c4 00 00 00-01 db 5b 4a d1 00 00 00  %.[J......[J....
001202b8  4b db 5b 4a dd 00 00 00-c7 da 5b 4a ea 00 00 00  K.[J......[J....
001202c8  05 db 5b 4a f4 00 00 00-76 d9 5b 4a 00 01 00 00  ..[J....v.[J....
001202d8  ca da 5b 4a 0d 01 00 00-db da 5b 4a 9a 00 00 00  ..[J......[J....
001202e8  2b db 5b 4a 1a 01 00 00-00 00 00 00 00 00 00 00  +.[J............
001202f8  41 44 56 41 50 49 33 32-2e 64 6c 6c 00 4b 45 52  ADVAPI32.dll.KER
00120308  4e 45 4c 33 32 2e 64 6c-6c 00 4e 54 44 4c 4c 2e  NEL32.dll.NTDLL.
00120318  44 4c 4c 00 47 44 49 33-32 2e 64 6c 6c 00 55 53  DLL.GDI32.dll.US
00120328  45 52 33 32 2e 64 6c 6c-00 6d 73 76 63 72 74 2e  ER32.dll.msvcrt.
00120338  64 6c 6c 00 43 4f 4d 44-4c 47 33 32 2e 64 6c 6c  dll.COMDLG32.dll
00120348  00 53 48 45 4c 4c 33 32-2e 64 6c 6c 00 57 49 4e  .SHELL32.dll.WIN
00120358  53 50 4f 4f 4c 2e 44 52-56 00 6f 6c 65 33 32 2e  SPOOL.DRV.ole32.
00120368  64 6c 6c 00 53 48 4c 57-41 50 49 2e 64 6c 6c 00  dll.SHLWAPI.dll.
00120378  43 4f 4d 43 54 4c 33 32-2e 64 6c 6c 00 4f 4c 45  COMCTL32.dll.OLE
00120388  41 55 54 33 32 2e 64 6c-6c 00 56 45 52 53 49 4f  AUT32.dll.VERSIO
00120398  4e 2e 64 6c 6c 00 00 00-00 00 00 00 00 00 00 00  N.dll...........
&lt;/pre&gt;&lt;/div&gt;


&lt;p align=&quot;left&quot;&gt;分析一下，第一行4a5bd97eh为&lt;em&gt;TimeDateStamp&lt;/em&gt;值，80h为当前绑定dll名的相对偏移，00h表示当前dll转发dll个数为0,所以也就不存在IMAGE_BOUND_FORWARDER_REF结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
0:001&amp;gt; db 00120278+80
001202f8  41 44 56 41 50 49 33 32-2e 64 6c 6c 00 4b 45 52  ADVAPI32.dll.KER
&lt;/pre&gt;&lt;/div&gt;


&lt;p align=&quot;left&quot;&gt;第一行，右半部分，4a5bdaad为&lt;em&gt;TimeDateStamp&lt;/em&gt;值，8dh为当前绑定dll名的相对偏移，01h表示当前dll转发dll个数为1,所以后面跟着的8个字节，为IMAGE_BOUND_FORWARDER_REF结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
0:001&amp;gt; db 00120278+8d
00120305  4b 45 52 4e 45 4c 33 32-2e 64 6c 6c 00 4e 54 44  KERNEL32.dll.NTD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到在IMAGE_BOUND_FORWARDER_REF结构中，4a5bdadbh为&lt;em&gt;TimeDateStamp&lt;/em&gt;值，转发dll名字偏移为9d,查看内存发现时ntdll，也就是说调用kernel32.dll中函数时，会转发到ntdll中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
0:001&amp;gt; db 00120278+9a
00120312  4e 54 44 4c 4c 2e 44 4c-4c 00 47 44 49 33 32 2e  NTDLL.DLL.GDI32.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;观察当前保定导出表内存，发现大部分dll都没有转发，只有kernel32.dll转发到ntdll.dll。&lt;/p&gt;
&lt;p&gt;我们接着再以加载的&lt;span lang=&quot;EN-US&quot;&gt;Kernel32.dll为例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
0:001&amp;gt; dt 765f0000 _IMAGE_DOS_HEADER
ntdll!_IMAGE_DOS_HEADER
   +0x000 e_magic          : 0x5a4d
   +0x002 e_cblp           : 0x90
   +0x004 e_cp             : 3
   +0x006 e_crlc           : 0
   +0x008 e_cparhdr        : 4
   +0x00a e_minalloc       : 0
   +0x00c e_maxalloc       : 0xffff
   +0x00e e_ss             : 0
   +0x010 e_sp             : 0xb8
   +0x012 e_csum           : 0
   +0x014 e_ip             : 0
   +0x016 e_cs             : 0
   +0x018 e_lfarlc         : 0x40
   +0x01a e_ovno           : 0
   +0x01c e_res            : [4] 0
   +0x024 e_oemid          : 0
   +0x026 e_oeminfo        : 0
   +0x028 e_res2           : [10] 0
   +0x03c e_lfanew         : 0n240
0:001&amp;gt; dt 765f00f0 _IMAGE_NT_HEADERS
ntdll!_IMAGE_NT_HEADERS
   +0x000 Signature        : 0x4550
   +0x004 FileHeader       : _IMAGE_FILE_HEADER
   +0x018 OptionalHeader   : _IMAGE_OPTIONAL_HEADER
0:001&amp;gt; dt 765F0108 _IMAGE_OPTIONAL_HEADER
ntdll!_IMAGE_OPTIONAL_HEADER
   +0x000 Magic            : 0x10b
   +0x002 MajorLinkerVersion : 0x9 ''
   +0x003 MinorLinkerVersion : 0 ''
   +0x004 SizeOfCode       : 0xc5000
   +0x008 SizeOfInitializedData : 0xe000
   +0x00c SizeOfUninitializedData : 0
   +0x010 AddressOfEntryPoint : 0x4cd6f
   +0x014 BaseOfCode       : 0x1000
   +0x018 BaseOfData       : 0xc0000
   +0x01c ImageBase        : 0x765f0000
   +0x020 SectionAlignment : 0x1000
   +0x024 FileAlignment    : 0x1000
   +0x028 MajorOperatingSystemVersion : 6
   +0x02a MinorOperatingSystemVersion : 1
   +0x02c MajorImageVersion : 6
   +0x02e MinorImageVersion : 1
   +0x030 MajorSubsystemVersion : 6
   +0x032 MinorSubsystemVersion : 1
   +0x034 Win32VersionValue : 0
   +0x038 SizeOfImage      : 0xd4000
   +0x03c SizeOfHeaders    : 0x1000
   +0x040 CheckSum         : 0xdca19
   +0x044 Subsystem        : 3
   +0x046 DllCharacteristics : 0x140
   +0x048 SizeOfStackReserve : 0x40000
   +0x04c SizeOfStackCommit : 0x1000
   +0x050 SizeOfHeapReserve : 0x100000
   +0x054 SizeOfHeapCommit : 0x1000
   +0x058 LoaderFlags      : 0
   +0x05c NumberOfRvaAndSizes : 0x10
   +0x060 DataDirectory    : [16] _IMAGE_DATA_DIRECTORY
 
0:001&amp;gt; dt 765F0168+58  _IMAGE_DATA_DIRECTORY
ntdll!_IMAGE_DATA_DIRECTORY
   +0x000 VirtualAddress   : 0x288
   +0x004 Size             : 0x408
 
0:001&amp;gt; db 77a10000 +0x288
77a10288  00 00 00 00 40 00 00 42-00 00 00 00 00 00 00 00  ....@..B........
77a10298  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102a8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102b8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102c8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102d8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102e8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102f8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
 
0:001&amp;gt; db 77a10288+40
77a102c8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102d8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102e8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a102f8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a10308  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a10318  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a10328  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
77a10338  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以发现，加载的kernel32.dll中，虽然存在绑定导入表，但是内容却未空，意味着当前模块没有绑定其他模块。&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 06:36:00 +0000</pubDate>
<dc:creator>huity</dc:creator>
<og:description>在学习PE文件时，结合权威指南和加密与解密的介绍，自己分析了内存中的绑定导入表具体形式。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huity35/p/10588134.html</dc:identifier>
</item>
<item>
<title>tensorflow下基于DNN实现实时分辨人脸微表情 - 控球强迫症</title>
<link>http://www.cnblogs.com/XDU-Lakers/p/10587894.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/XDU-Lakers/p/10587894.html</guid>
<description>&lt;p&gt;&lt;span&gt;参加学校的国创比赛的时候，我们小组的项目有一部分内容需要用到利用摄像头实现实时检测人脸的表情，因为最近都在看深度学习方面的相关知识，所以就自己动手实现了一下这个小Demo.参考网上的资料，发现大部分是使用CNN和DNN进行学习，经过本人亲自实践，我发现DNN的识别效果更佳~（楼主接下来就要讲的是基于DNN的模型，要是你对CNN的模型感兴趣，欢迎私戳楼主~）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所需环境：opencv + tensorflow1.8 + pycharm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码以及模型的下载地址：&lt;a href=&quot;https://github.com/tgpcai/Microexpression_recognition&quot; target=&quot;_blank&quot;&gt;https://github.com/tgpcai/Microexpression_recognition&lt;/a&gt;(如果喜欢请帮楼主点个start~)&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后实现的结果图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324140643348-1060138443.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.数据集简介&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.代码实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（0）实现Demo的代码组织结构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）数据预处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）训练模型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）调用模型实现人脸微表情识别&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.个人遇坑以及总结&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.数据集简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;人脸表情识别程序所采用的数据集为FER2013（facial-expression-recognition 2013），该数据集需要在kaggle网&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;站上进行下载，下载地址为：&lt;a href=&quot;https://www.kaggle.com/c/challenges-in-representation-learning-facial-expression-recognition-challenge/data&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://www.kaggle.com/c/challenges-in-representation-learning-facial-expression-recognition-challenge/data&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324130003238-1163891459.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下载的数据是压缩文件，对其进行手动解压，解压后文件格式是csv，文件名为fer2013.csv，对这个文件进行提取可以得到三个文件，具体的提取过程会在后续进行介绍：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324130108275-1501510298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中train文件的emotion一共有7种，csv文件中每个数字对应一种表情，7种表情包括：&lt;span&gt;0 - 'angry', 1 - 'disgusted',&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2 - 'fearful', 3 - 'happy', 4 - 'sad', 5 - 'surprised', 6 - 'neutral'(这也是咱们能识别的表情)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;打开train.csv文件每一行除了emotion的标记之外，还有一幅影像，只不过在csv文件里，影像用灰度值表示了，csv文件打开之后，里面的内容如下：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324130452145-768589337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过可能由于FER2013数据集的质量不太好，大部分模型的验证精度只有60%（如googleNet和AlexNet都只有63%）左右，好一点的可以到70%。我自己训练的模型验证经度只有55-56左右！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;网上很多参考资料都把灰度值表示的影像变成了.jpg能看的图片，但实际上并不需要这样做，因为你把这灰度值的影像变为.jpg,后面还是需要经过一系列步骤在转换成灰度值，不过我也会贴出如何把这灰度值影响变为.jpg结尾的图片！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 2.代码实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; （0）实现Demo的代码组织结构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324134629785-999338108.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo.py 调用系统摄像头完成实时识别人脸微表情&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;main.py 包含训练模型、测试模型的接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;model.py DNN算法的实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;utils.py 对数据集合的预处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;（1）数据预处理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　有两种方式，第一种方式只是为了看看数据集的图片，而不是只能看到灰度值，而真正参与模型的训练的数据处理方式是第二种！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1）把这灰度值的影像变为.jpg&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; csv
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;数据集路径&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; database_path = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:/Users/tgp/Desktop/Machine Learning/人脸识别/fer2013&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将路径组合后返回&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; csv_file = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fer2013.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; train_csv = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;train.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; val_csv = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;val.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; test_csv = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;with open(csv_file) as f:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用csv中的reader()打开.csv文件&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     csvr =&lt;span&gt; csv.reader(f)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将迭代器指向文件的第二行，因为第一行为标签&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     header =&lt;span&gt; next(csvr)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     rows = [row &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; csvr]
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;按最后一列的标签将数据集进行分割&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     trn = [row[:-1] &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; rows &lt;span&gt;if&lt;/span&gt; row[-1] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Training&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]  
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     csv.writer(open(train_csv, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), lineterminator=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).writerows([header[:-1]] +&lt;span&gt; trn)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(len(trn))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;  
&lt;span&gt;26&lt;/span&gt;     val = [row[:-1] &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; rows &lt;span&gt;if&lt;/span&gt; row[-1] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PublicTest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     csv.writer(open(val_csv, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), lineterminator=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).writerows([header[:-1]] +&lt;span&gt; val)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(len(val))
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;  
&lt;span&gt;30&lt;/span&gt;     tst = [row[:-1] &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; rows &lt;span&gt;if&lt;/span&gt; row[-1] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PrivateTest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     csv.writer(open(test_csv, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), lineterminator=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).writerows([header[:-1]] +&lt;span&gt; tst)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(len(tst))
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; csv
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; PIL &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Image
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; database_path = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:/Users/tgp/Desktop/Machine Learning/人脸识别/fer2013&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; train_csv = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;train.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; val_csv = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;val.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; test_csv = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt; train_set = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;train&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; val_set = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;val&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; test_set = os.path.join(database_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; save_path, csv_file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; [(train_set, train_csv), (val_set, val_csv), (test_set, test_csv)]:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(save_path):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        os.makedirs(save_path)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;  
&lt;span&gt;20&lt;/span&gt;     num = 1
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    with open(csv_file) as f:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         csvr =&lt;span&gt; csv.reader(f)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         header =&lt;span&gt; next(csvr)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用enumerate遍历csvr中的标签(label)和特征值（pixel)&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i, (label, pixel) &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(csvr):
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将特征值的数组转化为48*48的矩阵&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             pixel = np.asarray([float(p) &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt; pixel.split()]).reshape(48, 48&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             subfolder =&lt;span&gt; os.path.join(save_path, label)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(subfolder):
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                os.makedirs(subfolder)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将该矩阵转化为RGB图像，再通过convert转化为8位灰度图像，L指灰度图模式，L=R*299/1000+G*587/1000+B*114/1000&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             im = Image.fromarray(pixel).convert(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             image_name = os.path.join(subfolder, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{:05d}.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(i))
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(image_name)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             im.save(image_name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;执行完上面的代码，你就可以在相应的路径看到如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324131656924-1886433272.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样就完成了从灰度图到可视化的转变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2）简便的数据预处理(训练模型时采用的办法)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;87&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; collections
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tensorflow.python.framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; dtypes, random_seed
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; load_data(data_file):
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     data =&lt;span&gt; pd.read_csv(data_file)
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     pixels = data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pixels&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].tolist()
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;     width = 48
&lt;span&gt; 11&lt;/span&gt;     height = 48
&lt;span&gt; 12&lt;/span&gt;     faces =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; pixel_sequence &lt;span&gt;in&lt;/span&gt;&lt;span&gt; pixels:
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从csv中获取人脸的数据&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         face = [int(pixel) &lt;span&gt;for&lt;/span&gt; pixel &lt;span&gt;in&lt;/span&gt; pixel_sequence.split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把脸的数据变为48*48像素，利用plt.imshow即可打印出图片&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         face =&lt;span&gt; np.asarray(face).reshape(width, height)
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;        faces.append(face)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把faces从列表变为三维矩阵。(35887,)-----&amp;gt;(35887,48,48)&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;     faces =&lt;span&gt; np.asarray(faces)
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加维度，将faces从(35887,48,48)------&amp;gt;(35887,48,48,1)&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;     faces = np.expand_dims(faces, -1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; one-hot编码，把属于该类表情置1，其余为0，并转换为矩阵&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;     emotions = pd.get_dummies(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;emotion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]).as_matrix()
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; faces, emotions
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSet(object):
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, images, labels, reshape=True, dtype=dtypes.float32, seed=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         seed1, seed2 =&lt;span&gt; random_seed.get_seed(seed)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         np.random.seed(seed1 &lt;span&gt;if&lt;/span&gt; seed &lt;span&gt;is&lt;/span&gt; None &lt;span&gt;else&lt;/span&gt;&lt;span&gt; seed2)
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; reshape:
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将images(35887,48,48,1)变为(35887,2304)&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;assert&lt;/span&gt; images.shape[3] == 1
&lt;span&gt; 35&lt;/span&gt;             images = images.reshape(images.shape[0],images.shape[1]*images.shape[2&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; 
&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 类型转换，并进行灰度处理&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; dtype ==&lt;span&gt; dtypes.float32:
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             images =&lt;span&gt; images.astype(np.float32)
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             images = np.multiply(images, 1.0 / 255.0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置私有属性&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;         self._num_examples =&lt;span&gt; images.shape[0]
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         self._images =&lt;span&gt; images
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         self._labels =&lt;span&gt; labels
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         self._epochs_completed =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         self._index_in_epoch =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; images(self):
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._images
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; 
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; labels(self):
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._labels
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; num_examples(self):
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.num_examples
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;    @property
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; epochs_completed(self):
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        self._epochs_completed
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 批量获取训练数据&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; next_batch(self, batch_size,shuffle=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         start =&lt;span&gt; self._index_in_epoch
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; self._epochs_completed == 0 &lt;span&gt;and&lt;/span&gt; start == 0 &lt;span&gt;and&lt;/span&gt;&lt;span&gt; shuffle:
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 打乱顺序&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;             perm0 =&lt;span&gt; np.arange(self._num_examples)
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;            np.random.shuffle(perm0)
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             self._images =&lt;span&gt; self._images[perm0]
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;             self._labels =&lt;span&gt; self._labels[perm0]
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; start + batch_size &amp;gt;&lt;span&gt; self._num_examples:
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             self._epochs_completed += 1
&lt;span&gt; 76&lt;/span&gt;             rest_num_examples = self._num_examples -&lt;span&gt; start
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             images_rest_part =&lt;span&gt; self._images[start:self._num_examples]
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             labels_rest_part =&lt;span&gt; self._labels[start:self._num_examples]
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当剩余的数据不够一次batch_size，就在之前的数据中随机选取并进行组合&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; shuffle:
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 perm =&lt;span&gt; np.arange(self._num_examples)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;                np.random.shuffle(perm)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 self._images =&lt;span&gt; self._images[perm]
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                 self._labels =&lt;span&gt; self._labels[perm]
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             start =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;             self._index_in_epoch = batch_size -&lt;span&gt; rest_num_examples
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             end =&lt;span&gt; self._index_in_epoch
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             images_new_part =&lt;span&gt; self._images[start:end]
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             labels_new_part =&lt;span&gt; self._labels[start:end]
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; np.concatenate((images_rest_part, images_new_part), axis=&lt;span&gt;0), np.concatenate(
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 (labels_rest_part, labels_new_part), axis=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;             self._index_in_epoch +=&lt;span&gt; batch_size
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             end =&lt;span&gt; self._index_in_epoch
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self._images[start:end], self._labels[start:end]
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; input_data(train_dir, dtype = dtypes.float32, reshape = True, seed=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     training_size = 28709
&lt;span&gt;100&lt;/span&gt;     validation_size = 3589
&lt;span&gt;101&lt;/span&gt;     test_size = 3589
&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt;     train_faces, train_emotions =&lt;span&gt; load_data(train_dir)
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data load success!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 验证数据&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;     validation_faces = train_faces[training_size: training_size +&lt;span&gt; validation_size]
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     validation_emotions = train_emotions[training_size: training_size +&lt;span&gt; validation_size]
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 测试数据&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;     test_faces = train_faces[training_size +&lt;span&gt; validation_size:]
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;     test_emotions = train_emotions[training_size +&lt;span&gt; validation_size:]
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 训练数据&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;     train_faces =&lt;span&gt; train_faces[: training_size]
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;     train_emotions =&lt;span&gt; train_emotions[: training_size]
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt;     Datasets = collections.namedtuple(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Datasets&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;train&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;validation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;     train = DataSet(train_faces, train_emotions, reshape=&lt;span&gt;reshape,)
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;     validation = DataSet(validation_faces, validation_emotions, dtype=dtype, reshape=reshape, seed=&lt;span&gt;seed)
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;     test = DataSet(test_faces, test_emotions, dtype=dtype, reshape=reshape, seed=&lt;span&gt;seed)
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; Datasets(train=train, validation=validation, test=test)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;到此，我们就完成了对fer2013数据的处理。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; （2）训练模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 采用的是DNN模型，个人感觉DNN的大致过程和CNN较为相似，楼主有一篇博客就是利用CNN实现手写数字的识别，感兴趣或者对于DNN实现算法不是很理解的，可以跳过去看看。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;104&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cv2
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; utils &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; EMOTIONS = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;angry&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;disgusted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fearful&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;happy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sad&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;surprised&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;neutral&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; deepnn(x):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     x_image = tf.reshape(x, [-1, 48, 48, 1&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; conv1&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     W_conv1 = weight_variables([5, 5, 1, 64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     b_conv1 = bias_variable([64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) +&lt;span&gt; b_conv1)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; pool1&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     h_pool1 =&lt;span&gt; maxpool(h_conv1)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; norm1&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     norm1 = tf.nn.lrn(h_pool1, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; conv2&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     W_conv2 = weight_variables([3, 3, 64, 64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     b_conv2 = bias_variable([64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) +&lt;span&gt; b_conv2)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     norm2 = tf.nn.lrn(h_conv2, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     h_pool2 =&lt;span&gt; maxpool(norm2)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Fully connected layer&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     W_fc1 = weight_variables([12 * 12 * 64, 384&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     b_fc1 = bias_variable([384&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     h_conv3_flat = tf.reshape(h_pool2, [-1, 12 * 12 * 64&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     h_fc1 = tf.nn.relu(tf.matmul(h_conv3_flat, W_fc1) +&lt;span&gt; b_fc1)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Fully connected layer&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     W_fc2 = weight_variables([384, 192&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     b_fc2 = bias_variable([192&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     h_fc2 = tf.matmul(h_fc1, W_fc2) +&lt;span&gt; b_fc2
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; linear&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     W_fc3 = weight_variables([192, 7&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     b_fc3 = bias_variable([7&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     y_conv =&lt;span&gt; tf.add(tf.matmul(h_fc2, W_fc3), b_fc3)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; y_conv
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; conv2d(x, W):
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; maxpool(x):
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; tf.nn.max_pool(x, ksize=[1, 3, 3, 1&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                         strides=[1, 2, 2, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; weight_variables(shape):
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     initial = tf.truncated_normal(shape, stddev=0.1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tf.Variable(initial)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; bias_variable(shape):
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     initial = tf.constant(0.1, shape=&lt;span&gt;shape)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tf.Variable(initial)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; train_model(train_data):
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;     fer2013 =&lt;span&gt; input_data(train_data)
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;     max_train_steps = 30001
&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt;     x = tf.placeholder(tf.float32, [None, 2304&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;     y_ = tf.placeholder(tf.float32, [None, 7&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt;     y_conv =&lt;span&gt; deepnn(x)
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt;     cross_entropy =&lt;span&gt; tf.reduce_mean(
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;         tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=&lt;span&gt;y_conv))
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     train_step = tf.train.AdamOptimizer(1e-4&lt;span&gt;).minimize(cross_entropy)
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;     correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;     accuracy =&lt;span&gt; tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt; &lt;span&gt;    with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;         saver =&lt;span&gt; tf.train.Saver()
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        sess.run(tf.global_variables_initializer())
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; 
&lt;span&gt;84&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; step &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(max_train_steps):
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;             batch = fer2013.train.next_batch(25&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; step % 100 ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;                 train_accuracy = accuracy.eval(feed_dict={x: batch[0], y_: batch[1&lt;span&gt;]})
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;step %d, training accuracy %g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (step, train_accuracy))
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; step + 1 ==&lt;span&gt; max_train_steps:
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;                 saver.save(sess, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;./models/emotion_model&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, global_step=step + 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;             train_step.run(feed_dict={x: batch[0], y_: batch[1&lt;span&gt;]})
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt; 
&lt;span&gt;93&lt;/span&gt; 
&lt;span&gt;94&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; image_to_tensor(image):
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;     tensor = np.asarray(image).reshape(-1, 2304) * 1 / 255.0
&lt;span&gt;96&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; tensor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;训练完模型后在你相应的文件夹里面会出现如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324132756268-1274200468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就是训练模型保存的参数，楼主最后也会贴出自己训练的模型，方便你们下载和使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（3）调用模型实现人脸微表情识别&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;采用的方法是调用摄像头实时识别人脸微表情，具体的过程为：&lt;span&gt;调用opencv自带的人脸识别器，调用系统摄像头拍摄出人脸图片，对人脸图片进行预处理，将处理完成的图片传入模型，最后将模型分析的结果反馈至运行的窗口&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示：这些都是opencv自带的有关脸部识别的识别器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324133721606-2046017846.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般采用的是这几个：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190324133759008-1132924496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中个人认为_alt2的识别器效果最好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体如何调用系统摄像头以及实时别人微表情的代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;115&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cv2
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PIL.Image as Image
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; model &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载opencv自带的人脸识别器&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; CASC_PATH = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:/Anaconda3/Lib/site-packages/cv2/data/haarcascade_frontalface_alt2.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; cascade_classifier =&lt;span&gt; cv2.CascadeClassifier(CASC_PATH)
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 人脸七种微表情&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; EMOTIONS = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;angry&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;disgusted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fearful&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;happy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sad&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;surprised&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;neutral&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; format_image(image):
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; image如果为彩色图：image.shape[0][1][2](水平、垂直像素、通道数)&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; len(image.shape) &amp;gt; 2 &lt;span&gt;and&lt;/span&gt; image.shape[2] == 3&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将图片变为灰度图&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;         image =&lt;span&gt; cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 它可以检测出图片中所有的人脸，并将人脸用vector保存各个人脸的坐标、大小（用矩形表示）&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调整scaleFactor参数的大小，可以增加识别的灵敏度，推荐1.1&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;         faces = cascade_classifier.detectMultiScale(image, scaleFactor=1.1, minNeighbors=5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果图片中没有检测到人脸，则返回None&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; len(faces) &amp;gt;&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None, None
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; max_are_face包含了人脸的坐标，大小&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;     max_are_face =&lt;span&gt; faces[0]
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在所有人脸中选一张最大的脸&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; face &lt;span&gt;in&lt;/span&gt;&lt;span&gt; faces:
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; face[2] * face[3] &amp;gt; max_are_face[2] * max_are_face[3&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;             max_are_face =&lt;span&gt; face
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这两步可有可无&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     face_coor =&lt;span&gt; max_are_face
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     image = image[face_coor[1]:(face_coor[1] + face_coor[2]), face_coor[0]:(face_coor[0] + face_coor[3&lt;span&gt;])]
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调整图片大小，变为48*48&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         image = cv2.resize(image, (48, 48), interpolation=&lt;span&gt;cv2.INTER_CUBIC)
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception:
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;problem during resize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None, None
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; image, face_coor
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; demo(modelPath, showBox=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用模型分析人脸微表情&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;    tf.reset_default_graph()&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;     face_x = tf.placeholder(tf.float32, [None, 2304&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     y_conv =&lt;span&gt; deepnn(face_x)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     probs =&lt;span&gt; tf.nn.softmax(y_conv)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载模型&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;     saver =&lt;span&gt; tf.train.Saver()
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     ckpt =&lt;span&gt; tf.train.get_checkpoint_state(modelPath)
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;     sess =&lt;span&gt; tf.Session()
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ckpt &lt;span&gt;and&lt;/span&gt;&lt;span&gt; ckpt.model_checkpoint_path:
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        saver.restore(sess, ckpt.model_checkpoint_path)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Restore model sucsses!!\nNOTE: Press 'a' on keyboard to capture face.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; feelings_facesy用来存储emojis表情&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;     feelings_faces =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; index, emotion &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(EMOTIONS):
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; imread函数(文件路径,读取方式)&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; cv2.IMREAD_COLOR：读入一副彩色图片；(1)返回三维矩阵，且为[120,120,3]&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; cv2.IMREAD_GRAYSCALE：以灰度模式读入图片；(0)返回二维矩阵，且为[120,120]&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; cv2.IMREAD_UNCHANGED：读入一幅图片，并包括其alpha通道(-1)返回三维矩阵，且为[120,120,4]&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         feelings_faces.append(cv2.imread(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:/Dict/Facial-Expression-Recognition-master/data/emojis/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + emotion + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取笔记本的摄像头，&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;     video_captor =&lt;span&gt; cv2.VideoCapture(0)
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;     emoji_face =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;     result =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取摄像头的每帧图片，若获得，则ret的值为True,frame就是每一帧的图像，是个三维矩阵&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         ret, frame =&lt;span&gt; video_captor.read()
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;         detected_face, face_coor =&lt;span&gt; format_image(frame)
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; showBox:
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; face_coor &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取人脸的坐标,并用矩形框出&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;                 [x, y, w, h] =&lt;span&gt; face_coor
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 255, 0), 2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每隔10ms刷新一次，并且等当键盘输入a的时候，截取图像，因为是64位系统所以必须要0xFF == ord('a')&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; cv2.waitKey(1) &amp;amp; 0xFF == ord(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; detected_face &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                 cv2.imwrite(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, detected_face)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(detected_face)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将图片变为tensorflow可以接受的格式&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;                 tensor =&lt;span&gt; image_to_tensor(detected_face)
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 result = sess.run(probs, feed_dict=&lt;span&gt;{face_x: tensor})
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(result)
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; index, emotion &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(EMOTIONS):
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将七种微表情的文字添加到图片中&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;                 cv2.putText(frame,emotion,(10,index*20 + 20),cv2.FONT_HERSHEY_PLAIN, 1, (0, 255, 0), 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将七种微表情的概率用矩形表现出来&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;                 cv2.rectangle(frame,(130, index*20 + 10),(130+int(result[0][index]*100), (index + 1) * 20 + 4), (255, 0, 0), -1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取人脸微表情相应的emojis表情&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;                 emoji_face =&lt;span&gt; feelings_faces[np.argmax(result[0])]
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将emojis表情添加到图片中的指定位置 方法1：&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;             frame[200:320, 10:130, :] =&lt;span&gt; emoji_face[:, :, :]
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             cv2.imwrite(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, frame)
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将emojis表情添加到图片中的指定位置 方法2：&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; for c in range(0, 1):&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     frame[200:320, 10:130, c] = emoji_face[:, :, c] * (emoji_face[:, :, 3] / 255.0) + frame[200:320, 10:130, c] * (1.0 - emoji_face[:, :, 3] / 255.0)&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt;         cv2.imshow(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;face&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, frame)
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; cv2.waitKey(10) &amp;amp; 0xFF == ord(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 释放系统摄像头，关闭窗口&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;    video_captor.release()
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;     cv2.destroyAllWindows()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;到此整个Demo就实现完成了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.个人遇坑以及总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）数据预处理过程，大多都需要用到pandas和numpy这两个库，所以必须能够较为熟练的掌握这两个库的使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）网上的考察资料中对于调用&lt;/span&gt;&lt;span&gt; cascade_classifier.detectMultiScale这个函数时，对其一个参数scaleFactor设置为1.3，这直接导致对于人脸的识别不够敏感，上网参阅相关资料后，得知这个值一般设置为1.1较为合适，且对于人脸的识别也比较敏感&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）因为对于opencv这个库使用不够熟练，一开始一直碰壁，所以你要是和我一样，建议先去这个网站了解一下OPENCV的大致使用方法：&lt;a href=&quot;https://docs.opencv.org/trunk/d6/d00/tutorial_py_root.html&quot; target=&quot;_blank&quot;&gt;https://docs.opencv.org/trunk/d6/d00/tutorial_py_root.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;参考资料：https://docs.opencv.org/trunk/d6/d00/tutorial_py_root.html&lt;/p&gt;
&lt;p&gt;　　　　　https://blog.csdn.net/labPqsdr/article/details/80704969&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;以上就是本次Demo的完成过程以及体会，欢迎交流&lt;/p&gt;

</description>
<pubDate>Sun, 24 Mar 2019 06:13:00 +0000</pubDate>
<dc:creator>控球强迫症</dc:creator>
<og:description>参加学校的国创比赛的时候，我们小组的项目有一部分内容需要用到利用摄像头实现实时检测人脸的表情，因为最近都在看深度学习方面的相关知识，所以就自己动手实现了一下这个小Demo.参考网上的资料，发现大部分是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/XDU-Lakers/p/10587894.html</dc:identifier>
</item>
<item>
<title>老兵的十年职场之路(一) - 美码师</title>
<link>http://www.cnblogs.com/littleatp/p/10587932.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littleatp/p/10587932.html</guid>
<description>&lt;p&gt;不知不觉已经到了工作的第十个年头，很难想象时间会消逝得这么的快，真是印证了那句成语叫“白驹过隙&quot;。&lt;br/&gt;白驹在不停的向前跑，我也从一个职场菜鸟变成了一名老兵，每当回想起以前的一段段经历时，总觉得自己应该要写点什么回顾一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201903/242916-20190324133948642-2036214817.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;初出茅庐&quot;&gt;初出茅庐&lt;/h2&gt;
&lt;p&gt;2009年是不平凡的一年，那会儿 sun 公司被甲骨文收购了。当大家都在津津乐道的讨论着 Java 的未来的时候，我才刚开始我的第一份工作。&lt;br/&gt;那时去的是一家做电信业务的小公司，主要做数据分析管理方面的软件。那会公司在生存方面还没有什么问题，由于老板跟客户高层的关系比较铁，基本上产品都能卖的出去，团队不容易饿死。&lt;br/&gt;但也因为是这样，公司的整个研发氛围比较&quot;浮夸&quot;，也就是形式主义上的东西很多，一个开发部差不多四五十来人，几乎每个月都要考一次试，内容就是编码规范、算法题云云。&lt;/p&gt;
&lt;p&gt;老员工们对这些是不齿的，所以基本都是一些校招的小兵们会拿个好成绩..其中也包括我。但是大家心里也明白，出了校园就不能再是&quot;高分低能&quot;一族了。何况这种事情根本算不得什么。&lt;br/&gt;所幸是同事都很热情，基本也不会跟我们计较什么。除了工作上的热心帮助之外，时不时也会经常聚餐。而且那时候由于公司还有加班餐券的福利，导致我们晚上个个成了楼下真功夫的常客，就连店里的服务员都爱跟我们调侃：&lt;br/&gt;&quot;你们公司福利那么好阿，收转行的服务员吗？“&lt;/p&gt;
&lt;p&gt;在技术方面，由于刚开始什么都不会(学校里真的什么都不会教，或者说自己除了混完学历什么都没学到..)，做什么也缺乏自信。于是我偷偷下载了12G的 Java 教学视频，每天晚上看1-2小时...就这样从一个最简单的“鼠标画图” 小程序开始了我的程序开发之旅。同事老张知道了这事，给我推荐了不少好书，其中就包括&lt;strong&gt;《Effective Java》、《Java编程思想》&lt;/strong&gt;这些，也就是后来，这些书让我对开发语言有了更加深入的掌握。&lt;br/&gt;尤其是Effective 系列，到&lt;strong&gt;十年后的今天仍然是Java领域的经典必读之作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;团队里一直都喜欢贯彻学习、改进方面的事情，这跟老板的做事风格也有很大关系。我最有印象的是有一次做代码Review时，一哥们的代码被拿出来当典型了，一个if/else 嵌套了十层... 后来这哥们几个月后也离职了。老张感慨说，&lt;strong&gt;&quot;其实写代码也就是 if、else这些东西&quot;&lt;/strong&gt;..&lt;br/&gt;那会想想也差不多如此，偶尔代码写得糟糕也是常事，只要不伤天害理不就行了。&lt;/p&gt;
&lt;p&gt;我所在的小组负责一个了数据抽取软件，就是会将很多异构的数据源进行整合，按一些业务规则做转换处理，然后写入目标数据库。技术上采用的C/S架构，客户端是基于 Eclipse RCP 框架做的界面，后端用 SpringFramework +Jetty 定制了一套RPC服务。&lt;br/&gt;那会凭着自己的兴趣深入学了下Swing、JWT/JFace，也做了很多小工具，只是到后来 Java 在小程序、客户端UI方面根本没发展起来，对于这块技术的积累也没有产生更大的意义。&lt;br/&gt;就从 web 前端技术在后来大肆流行的态势来看，当时的技术选择还是&quot;任性“了点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SpringFramework&lt;/strong&gt; 是团队里主要用的框架，在那两年主要用的版本还是 2.5，但是关于这块并没有做过多的深入了解，而只是应付一些普通的项目上的使用。为什么？我认为大多数人可能跟我一样，被 SpringFramework 的概念绕的有点玄乎，什么控制反转、依赖注入，这种概念化的东西最终在解释上又好像很简单，甚至都怀疑是不是我根本就理解错了。到后来发现也就是如此，Spring 框架只是实现了一层简单的对象装载能力，相比那些难懂的 EJB、Web容器来说轻量得多，很容易就被用到项目里头，跟各种开源组件做&quot;胶水式&quot;的整合。所以当时流行的SSH(Struts/Spring/Hibernate)三大框架里头，Spring 更像是一个&quot;拉皮条&quot;的角色：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Struts 做了表示层，搞定了MVC，Hibernate 做了持久层，搞定了ORM，然后 Spring 是..整合你们两个！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里扯的有点远，只是想表达的一点是：&lt;strong&gt;技术框架本身就是为了解决复杂度而生的，往往并不如想象中那么可怕&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在这个阶段，曾借助框架完成的一件有印象的事情是：&lt;/p&gt;
&lt;p&gt;把一个 4000 行的充满 if/else 的类进行了重构，硬生生拆成了20个毫不相干的子模块。最后还受到了领导的表扬..&lt;/p&gt;
&lt;h3 id=&quot;经历变动&quot;&gt;经历变动&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201903/242916-20190324134133607-1534523138.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;尽管这家公司不大，但我所在的三年里也经历了许多令人意外的变动。&lt;/p&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;第一件事是高层的政治斗争&lt;/strong&gt;，那会公司的研发副总是新上任的，其性格和做事方式上都非常强势，尤其是对于老员工一些混日子的态度特别看不惯，这点跟他非技术出身应该有很大的关系。于是在任职期间，他在公司里大搞特搞军事化管理，严查考勤，搞野外军训拓展。许多老员工都是敢怒不敢言，但由于老板从态度上更信任这位副总，很多人最终就选择了离职。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;第二件事是研发总监的出轨&lt;/strong&gt;，前面那件事里头，因为政治斗争的原因，公司里原来的总监也被离职了。这一位是后补的管理者，我对这个人的印象不深，只记得比较爱开玩笑，喜欢搞搞小团体。在公司里头推广了自研的一套web框架，一些核心项目的底层也给换成了这个框架。然后就是突然某一天人就没来上班了，才知道是这破事让许多人给知道了，然后是他带来的核心团队也一并走掉了，留下了一堆烂摊子。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;第三件事跟管理层就没有什么关系，主要是公司业务的发展遇到了瓶颈&lt;/strong&gt;，由于互联网的冲击，那会传统的软件厂商都是不好受的。&lt;br/&gt;在2010年底，当时华为想搞云计算大范围开放了社招，公司里头能干的人基本都跳槽过去了。&lt;br/&gt;而我呢，就在一次次的送别后自然而然的成为了项目组的骨干。当然除了人员离职的原因之外，我自身的成长也还是比较明显的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里提到了成长，一方面是对于企业而言，我的岗位能力提升了，对于公司的许多项目、流程机制都非常了解，已经具备带新人的条件。&lt;br/&gt;另一方面，在个人技能上，对于Java开发的能力有了相对全面的掌握，包括不限于多线程并发、网络编程、JVM结构这些东西；&lt;br/&gt;而在 Web 开发方面，基本上用SSH 做出一个网站项目也不是什么难事。得益于数据处理软件开发的特点，因此对各种关系型数据库都有涉猎。&lt;br/&gt;关于这些点，我都给写到了我后来求职的简历里面。&lt;/p&gt;
&lt;p&gt;那么之所以后来离开，也是因为觉得在那里的成长已经停滞了。当时有个说法叫 &lt;strong&gt;&quot;程序员，三年跳一跳，越来越美妙&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“当我在谈论 jvm结构和 rmi 技术时，身边的同事只会聊起八卦和体育彩票的事情，而我压根也不喜欢博彩类的东西。”&lt;br/&gt;当然另外一个原因是觉得薪资太低，觉得自己应该出去看一看新机会了。&lt;/p&gt;
&lt;p&gt;接下来，在移动互联网的大潮中，我选择了一家处于上升期的企业，开始了另一段职业上的旅程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201903/242916-20190324134311600-1238761022.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(未完待续)&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 05:44:00 +0000</pubDate>
<dc:creator>美码师</dc:creator>
<og:description>不知不觉已经到了工作的第十个年头，很难想象时间会消逝得这么的快，真是印证了那句成语叫“白驹过隙'。 白驹在不停的向前跑，我也从一个职场菜鸟变成了一名老兵，每当回想起以前的一段段经历时，总觉得自己应该要</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littleatp/p/10587932.html</dc:identifier>
</item>
<item>
<title>Spring Cache缓存技术的介绍 - 何以堪</title>
<link>http://www.cnblogs.com/ywjy/p/10587865.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ywjy/p/10587865.html</guid>
<description>&lt;p&gt;缓存用于提升系统的性能，特别适用于一些对资源需求比较高的操作。本文介绍如何基于spring boot cache技术，使用caffeine作为具体的缓存实现，对操作的结果进行缓存。&lt;/p&gt;

&lt;p&gt;本demo将创建一个web应用，提供两个Rest接口。一个接口用于接受查询请求，并有条件的缓存查询结果。另一个接口用于获取所有缓存的数据，用于监控缓存的内部状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/721161/201903/721161-20190324131842021-621994727.jpg&quot; alt=&quot;使用postman调用查询接口&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到这次查询耗时3秒左右。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/721161/201903/721161-20190324131924341-1706209169.jpg&quot; alt=&quot;使用postman调用获取缓存的接口&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到我们的查询结果已被缓存。这里将一次查询的结果缓存了两份，具体技术细节后面介绍。&lt;/p&gt;
&lt;p&gt;接下来介绍具体demo的实现过程。&lt;/p&gt;

&lt;p&gt;本demo已经上传到github，读者可以在github上&lt;a href=&quot;https://github.com/shouzheng/demo-spring-cache&quot;&gt;获取源码&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本demo使用Maven作为项目构建工具。按照作者的日常编程习惯，首先创建了一个root module，用于统一管理依赖。具体的功能在子module caffeine-cache中。&lt;/p&gt;
&lt;p&gt;本demo的代码结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;demo-spring-cache/
  |- pom.xml
  L caffeine-cache/
      |- pom.xml
      L src/
          L main/
              |- java/
              |   L heyikan
              |       |- Application.yml
              |       |- QueryController.java
              |       L QueryService.java
              L resources/
                  L application.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;创建root-module&quot;&gt;创建root module&lt;/h2&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;com.heyikan.demo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;demo-spring-cache&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;

    &amp;lt;modules&amp;gt;
        &amp;lt;module&amp;gt;caffeine-cache&amp;lt;/module&amp;gt;
    &amp;lt;/modules&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;maven.compiler.source&amp;gt;${java.version}&amp;lt;/maven.compiler.source&amp;gt;
        &amp;lt;maven.compiler.target&amp;gt;${java.version}&amp;lt;/maven.compiler.target&amp;gt;

        &amp;lt;spring-boot.version&amp;gt;2.1.3.RELEASE&amp;lt;/spring-boot.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;

&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;root module的主要作用是统一管理依赖。当项目中有多个module的时候，作者一般会构建一个root module，然后其他的moudule都继承自这个module，形成一个两级module的继承结构。&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;网上大部分的demo，一般是直接创建目标module，且继承自&lt;code&gt;spring-boot-starter-parent&lt;/code&gt;。&lt;code&gt;spring-boot-starter-parent&lt;/code&gt;管理了大部分常用的依赖，使用这些依赖我们不用再费心考虑版本的问题。&lt;/p&gt;
&lt;p&gt;但是maven是单继承结构，继承了&lt;code&gt;spring-boot-starter-parent&lt;/code&gt;就无法继承自己项目当中的parent module（root module）。在一个多module的项目当中，module之间的相互依赖就不是&lt;code&gt;spring-boot-starter-parent&lt;/code&gt;能预先管理的了。&lt;/p&gt;
&lt;p&gt;所以在实际项目当中，我们一般不会直接继承&lt;code&gt;spring-boot-starter-parent&lt;/code&gt;。而是通过在root module中import &lt;code&gt;spring-boot-dependencies&lt;/code&gt;，来享受spring-boot为我们管理依赖的便利，同时在root module管理额外的依赖。&lt;/p&gt;
&lt;p&gt;具体的技术细节需要读者参考Maven的知识。作者只是阐述下这么做的原因，实际上跟demo本身的功能没有多大关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建目标module&quot;&gt;创建目标module&lt;/h2&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;parent&amp;gt;
        &amp;lt;artifactId&amp;gt;demo-spring-cache&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.heyikan.demo&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;artifactId&amp;gt;caffeine-cache&amp;lt;/artifactId&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.github.ben-manes.caffeine&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;caffeine&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个module主要引入了三个依赖：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;spring-boot-starter-web&lt;br/&gt;打包了web项目的常规依赖&lt;/li&gt;
&lt;li&gt;spring-boot-starter-cache&lt;br/&gt;打包了依赖功能的常规依赖&lt;/li&gt;
&lt;li&gt;caffeine&lt;br/&gt;具体的依赖实现&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;spring cache提供了一层抽象和使用接口，底层可以切换不同的cache实现，caffeine就是其中之一，且性能表现较优。&lt;/p&gt;
&lt;p&gt;spring cache还可以与redis集成，提供分布式缓存的能力。&lt;/p&gt;
&lt;h2 id=&quot;创建application&quot;&gt;创建Application&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package heyikan;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;熟悉spring-boot项目的读者应该对此比较熟悉，spring-boot项目需要创建一个Application来启动整个应用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@EnableCaching&lt;/code&gt;注解用于启用缓存，没有这个注解，我们后面的缓存功能将不会生效。&lt;/p&gt;
&lt;h2 id=&quot;创建controller&quot;&gt;创建Controller&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package heyikan;

import com.github.benmanes.caffeine.cache.Cache;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;
import java.util.concurrent.ConcurrentMap;
import java.util.function.Function;
import java.util.stream.Collectors;

@RestController
public class QueryController {
    @Autowired
    private QueryService queryService;

    @GetMapping(&quot;/query&quot;)
    public ResponseEntity&amp;lt;?&amp;gt; query(String keyWord) {
        String result = queryService.query(keyWord);
        return ResponseEntity.ok(result);
    }

    @Autowired
    @SuppressWarnings(&quot;all&quot;)
    private CacheManager cacheManager;

    @GetMapping(&quot;/caches&quot;)
    public ResponseEntity&amp;lt;?&amp;gt; getCache() {
        Map&amp;lt;String, ConcurrentMap&amp;gt; cacheMap = cacheManager.getCacheNames().stream()
                .collect(Collectors.toMap(Function.identity(), name -&amp;gt; {
                    Cache cache = (Cache) cacheManager.getCache(name).getNativeCache();
                    return cache.asMap();
                }));
        return ResponseEntity.ok(cacheMap);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;QueryController提供了两个Rest接口，query用于模拟耗时的查询请求，getCache用于获取当前的缓存内容。&lt;/p&gt;
&lt;p&gt;QueryController中引入了QueryService依赖，它是提供查询和缓存功能的核心组件。&lt;/p&gt;
&lt;p&gt;QueryController中引入了CacheManager依赖，它持有所有的缓存，并提供了遍历的API。&lt;/p&gt;
&lt;h2 id=&quot;创建缓存组件&quot;&gt;创建缓存组件&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package heyikan;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

@Service
@CacheConfig(cacheNames = {&quot;query-result&quot;, &quot;demo&quot;})
public class QueryService {
    private static Logger LOG = LoggerFactory.getLogger(QueryService.class);

    @Cacheable(unless = &quot;#result.length() &amp;gt; 20&quot;)
    public String query(String keyWord) {
        LOG.info(&quot;do query by keyWord: {}&quot;, keyWord);
        String queryResult = doQuery(keyWord);
        return queryResult;
    }

    private String doQuery(String keyWord) {
        try {
            Thread.sleep(3000L);
            String result = &quot;result of &quot; + keyWord;
            return result;
        } catch (InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们使用&lt;code&gt;@CacheConfig&lt;/code&gt;配置缓存，如代码所示，数据将会同时缓存到&quot;query-result&quot;和&quot;demo&quot;中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;query&lt;/code&gt;方法是查询的入口，&lt;code&gt;@Cacheable&lt;/code&gt;注解用于表示query方法的返回结果将被放到缓存中，默认以方法的参数作为key。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Cacheable&lt;/code&gt;注解的unless属性补充了缓存的条件，按照代码所示，当query的返回结果其长度大于20的时候，就不会进行缓存。&lt;/p&gt;
&lt;p&gt;doQuery方法代表实际的查询操作，模拟耗时的查询过程。&lt;/p&gt;
&lt;h2 id=&quot;创建配置&quot;&gt;创建配置&lt;/h2&gt;
&lt;p&gt;application.yml文件内容如下：&lt;/p&gt;
&lt;pre class=&quot;yml&quot;&gt;
&lt;code&gt;spring:
  cache:
    caffeine:
      spec: maximumSize=500, expireAfterAccess=30s
logging:
  pattern:
    console: &quot;%-5level - %msg%n&quot;
  level:
    - error
    - heyikan=ALL&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;spring.cache.caffeine.spec&lt;/code&gt;配置了两个缓存指标：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;maximumSize&lt;br/&gt;配置缓存的最大容量，当快要达到容量上限的时候，缓存管理器会根据一定的策略将部分缓存项移除。&lt;/li&gt;
&lt;li&gt;expireAfterAccess&lt;br/&gt;配置缓存项的过期机制，如代码所示当缓存项被访问后30秒将会过期，从而被移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;缓存的结构&quot;&gt;缓存的结构&lt;/h2&gt;
&lt;p&gt;在上文获取缓存的接口中，我们得到的结果是：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
    &quot;query-result&quot;: {
        &quot;spring&quot;: &quot;result of spring&quot;
    },
    &quot;demo&quot;: {
        &quot;spring&quot;: &quot;result of spring&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;缓存的结构大概像&lt;code&gt;Map&amp;lt;cacheName, Map&amp;lt;key, value&amp;gt;&amp;gt;&lt;/code&gt;，其中每一对key-value又称为一个缓存项。&lt;/p&gt;
&lt;p&gt;上文中，我们缓存组件的query方法的返回结果，就是以参数为key，以结果为value，构建缓存项进行缓存的。&lt;/p&gt;
&lt;p&gt;另外，我们配置的超时时间，也是以缓存项为粒度进行控制的。&lt;/p&gt;
&lt;p&gt;包含缓存项的Map我们称为缓存实例，每一个实例有一个实例名（cacheName）。&lt;/p&gt;
&lt;p&gt;cache结构相关的类图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/721161/201903/721161-20190324132016261-699768358.jpg&quot; alt=&quot;spring-cache-class.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图简单绘制了Spring中定义的Cache接口和caffeine中定义的Cache接口。&lt;/p&gt;
&lt;p&gt;Spring的Cache定义了极其通用的方法，包括获取实例名、根据缓存项的key获取、更新和移除缓存项。&lt;/p&gt;
&lt;p&gt;Spring并没有限定缓存所使用的具体存储结构，不管使用哪一种存储结构，在Spring的Cache中都以nativeCache进行表示，注意它是Object类型的。&lt;/p&gt;
&lt;p&gt;caffeine的Cache接口，就是caffeine对nativeCache的又一层抽象，它提供了asMap方法可以对缓存项进行遍历。&lt;/p&gt;
&lt;h2 id=&quot;使用缓存&quot;&gt;使用缓存&lt;/h2&gt;
&lt;p&gt;在上文中，我们已经简单演示了如何使用缓存。除了获取缓存之外，我们几乎没有任何额外的代码，只是在合适的地方，添加了注解，就添加了缓存的功能。&lt;/p&gt;
&lt;p&gt;所以在日常开发中，如果我们意识到某个操作可能会有很大开销，不妨把它移到一个独立的组件，实现之后根据具体情况考虑是否为它添加缓存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果缓存的方法是组件内部调用的，可能没有缓存的效果。&lt;/p&gt;
&lt;p&gt;比如，上文中的QueryService的query方法，是由QueryController调用的，缓存生效了。如果该方法由QueryService自身的其他方法调用，缓存无效。&lt;/p&gt;
&lt;p&gt;在上文的demo中，我们已经使用了一些基本的功能，还有一些常用的功能如下：&lt;/p&gt;
&lt;h3 id=&quot;指定key构建规则&quot;&gt;指定key构建规则&lt;/h3&gt;
&lt;p&gt;在上文中，我们使用默认的规则来构建缓存项的key，即以参数keyWord作为key。&lt;/p&gt;
&lt;p&gt;在必要的情况下，我们可以指定key构建的规则，使用spring el表达式：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Cacheable(cacheNames=&quot;books&quot;, key=&quot;#isbn&quot;)
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)

@Cacheable(cacheNames=&quot;books&quot;, key=&quot;#isbn.rawNumber&quot;)
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)

@Cacheable(cacheNames=&quot;books&quot;, key=&quot;T(someType).hash(#isbn)&quot;)
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一个实例，我们使用三个参数中的其中一个来构建key。&lt;br/&gt;第二个实例，我们使用参数内部的field来构建key。&lt;br/&gt;第三个实例，我们使用静态方法来生成key。&lt;/p&gt;
&lt;p&gt;更多内容可以参考&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache-annotations-cacheable-key&quot;&gt;Custom Key Generation Declaration&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;有选择的cache&quot;&gt;有选择的cache&lt;/h3&gt;
&lt;p&gt;上文demo中我们使用unless属性对方法返回的结果进行判断，当返回结果满足一定条件时才进行缓存。&lt;/p&gt;
&lt;p&gt;另外，我们还可以使用condition属性对方法的参数进行判断：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Cacheable(cacheNames=&quot;book&quot;, condition=&quot;#name.length() &amp;lt; 32&quot;) 
public Book findBook(String name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码表示，只有当参数的长度小于32时，我们才会缓存。&lt;/p&gt;
&lt;p&gt;更多内容可以参考&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache-annotations-cacheable-condition&quot;&gt;Conditional Caching&lt;/a&gt;。&lt;/p&gt;

</description>
<pubDate>Sun, 24 Mar 2019 05:29:00 +0000</pubDate>
<dc:creator>何以堪</dc:creator>
<og:description>缓存用于提升系统的性能，特别适用于一些对资源需求比较高的操作。本文介绍如何基于spring boot cache技术，使用caffeine作为具体的缓存实现，对操作的结果进行缓存。 demo场景 本d</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ywjy/p/10587865.html</dc:identifier>
</item>
<item>
<title>智能管家（原型） - McKay</title>
<link>http://www.cnblogs.com/aarond/p/home-agent.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aarond/p/home-agent.html</guid>
<description>&lt;p&gt;最近研究物联网相关的东西，做了个小原型，称它为智能管家，能用语音控制设备以及手机APP控制设备。&lt;/p&gt;
&lt;p&gt;先看看结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201903/68230-20190324115813470-1641299784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;功能描述：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过语音控制器，说话，比如说出“帮我开灯”，led灯就量，或者说出“把这个灯给关了”，led灯就灭了&lt;/li&gt;
&lt;li&gt;手机APP上有手动开关来控制led灯的亮和灭&lt;/li&gt;
&lt;li&gt;支持全国范围覆盖，既不能局限于家里的LAN&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;目前为止，用到的设备主要就是ESPDuino。&lt;/p&gt;
&lt;p&gt;ESPDuino：WIFI+Arduino&lt;/p&gt;
&lt;p&gt;相关：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;ESP8266-01/ESP-01虽然很便宜但是用起来很麻烦，所以弃用&lt;/li&gt;
&lt;li&gt;Arduino Yun/Tian虽然功能强大，但是太贵700、800的节奏，弃用（不过这2个是带操作系统的，linino，基于openwrt）&lt;/li&gt;
&lt;li&gt;ESPDuino: 不带OS，集成WIFI功能，方便还便宜，大概40左右&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; 分别来介绍下，分为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;OneNet部分&lt;/li&gt;
&lt;li&gt;手机APP部分&lt;/li&gt;
&lt;li&gt;语音控制器部分&lt;/li&gt;
&lt;li&gt;ESPDuino执行部分&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里我们的主要工作是建立设备，记录下api_key，产品Id这些，并且我们使用的是MQTT协议进行通信（在产品定义中有）（需要新建产品以及新建设备2个步骤）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201903/68230-20190324122045641-274858058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;由于不会app开发，并且onenet提供了简单的app平台，因此就用onenet的来做，如下，新增一个应用后进入设计app界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201903/68230-20190324122830648-487876776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中代表，此时点击 ON button就会下发指令到设备espduino，并且指令为   开灯  字符串， OFF button则为指令  关灯  字符串。&lt;/p&gt;
&lt;p&gt;然后保存，需要在手机上看的话，需要安装onenet的app，需要自己找找，最终效果截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201903/68230-20190324123144434-730483552.png&quot; alt=&quot;&quot; width=&quot;456&quot; height=&quot;673&quot;/&gt;&lt;/p&gt;
&lt;p&gt;手机app部分也算完工了，很简陋，但是能控制就好。&lt;/p&gt;

&lt;p&gt;这个部分分成了2个部分：语音解析文本及命令解析、命令下发；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;语音解析文本及命令解析程序：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用的是讯飞语音api，c代码，我是用MFC做了个GUI程序，把demo代码嵌进去，把文本解析成相应的命令，如“开灯”、“关灯”&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令下发程序：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接收MFC发来的命令，比如“开灯”、“关灯”，然后调用onenet的api来下发指令到设备&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这部分是用C#做的，因为有很方便的现成的库，很容易的几行代码就搞定&lt;/p&gt;
&lt;p&gt;由于MFC比较复杂，这部分的我就截几段我认为关键的代码吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201903/68230-20190324124954716-661472743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; MFC代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;52&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
static void show_result(char *string, char is_over)
{
        COORD orig, current;
        CONSOLE_SCREEN_BUFFER_INFO info;
        HANDLE w = GetStdHandle(STD_OUTPUT_HANDLE);
        GetConsoleScreenBufferInfo(w, &amp;amp;info);
        current = info.dwCursorPosition;

        if (current.X == last_pos.X &amp;amp;&amp;amp; current.Y == last_pos.Y) {
                SetConsoleCursorPosition(w, begin_pos);
        }
        else {
                /* changed by other routines, use the new pos as start */
                begin_pos = current;
        }
        if (is_over)
                SetConsoleTextAttribute(w, FOREGROUND_GREEN);
        //printf(&quot;Result: [ %s ]\n&quot;, string);
        printf(string);
        if (is_over)
        {
                &lt;span&gt;CString s = CString(string);
                //AfxMessageBox(LPCTSTR(s));

                HWND m_hWnd = pFrame-&amp;gt;m_hWnd;//-&amp;gt;GetMainWnd()-&amp;gt;m_hWnd;

                SetDlgItemText(m_hWnd, IDC_STATIC, LPCTSTR(s));
                SetDlgItemText(m_hWnd, IDC_STATIC_ACTION, LPCTSTR(s));

                CString cmd = CString(&quot;C:\\Users\\Danny\\Desktop\\research\\Windows_iat1220_5c82a0db\\samples\\mqtt-publish\\bin\\Debug\\mqtt-publish.exe &quot;);
                if(s.Find(_T(&quot;开&quot;))&amp;gt;=0&amp;amp;&amp;amp; s.Find(_T(&quot;灯&quot;)) &amp;gt;= 0)
                        cmd += &quot;开灯&quot;;
                else if (s.Find(_T(&quot;关&quot;)) &amp;gt;= 0 &amp;amp;&amp;amp; s.Find(_T(&quot;灯&quot;)) &amp;gt;= 0)
                        cmd += &quot;关灯&quot;;
                else
                        cmd += &quot;UNKNOWN&quot;;

                USES_CONVERSION;
                LPCSTR lpcstr = (LPCSTR)T2A(cmd);

                WinExec(lpcstr, SW_HIDE);&lt;/span&gt;
                
                //PostMessage(pFrame-&amp;gt;GetMainWnd()-&amp;gt;m_hWnd, WM_MY_MESSAGE, NULL, NULL);
        }
        
        if (is_over)
                SetConsoleTextAttribute(w, info.wAttributes);

        GetConsoleScreenBufferInfo(w, &amp;amp;info);
        last_pos = info.dwCursorPosition;
}　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 上面的mqtt-publish.exe就是C#写的下发指令到设备的程序，核心代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
static void Main(string[] args)
        {
            if (args.Length == 0)
                return;

            string cmd = args[0];

            SendCmdRequest request = new SendCmdRequest();
            request.CmdContent = cmd;
            request.DeviceID = &lt;span&gt;520355898&lt;/span&gt;;
            request.IsByte = true;
            request.Protocol = Scheme.HTTP;

            DefaultOneNETClient client = new DefaultOneNETClient(&quot;api.heclouds.com&quot;, &quot;&lt;span&gt;vYKWEtx7jELTP2V4o=s1NgE1EdA=&lt;/span&gt;&quot;);
            var response=client.Execute(request);
            Console.WriteLine(response.Body);

        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C#很简单，红色部分是需要根据自己的onenet来改的，需要对应上，用到的nuget库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/68230/201903/68230-20190324125401380-1284989674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;花费的时间最多的地方是这个部分，其次是MFC部分&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;65&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
#include &amp;lt;ESP8266WiFi.h&amp;gt;
#include &amp;lt;ESP8266HTTPClient.h&amp;gt;
#include &amp;lt;PubSubClient.h&amp;gt;

 
const char *ssid = &quot;&lt;span&gt;你的wifi name&lt;/span&gt;&quot;;
const char *password = &quot;&lt;span&gt;你的wifi密码&lt;/span&gt;&quot;;


const char* mqtt_server = &quot;183.230.40.39&quot;;
const char* mqtt_device_id=&quot;&lt;span&gt;520355898&lt;/span&gt;&quot;;
const char* mqtt_product_id=&quot;&lt;span&gt;223168&lt;/span&gt;&quot;;
const char* mqtt_api_key=&quot;&lt;span&gt;vYKWEtx7jELTP2V4o=s1NgE1EdA=&lt;/span&gt;&quot;;

WiFiClient client;
PubSubClient mqttClient(client);

long lastMsg = 0;
char msg_buf[200];
char dataTemplete[]=&quot;{\&quot;kq\&quot;:%d}&quot;;
char msgJson[75];
char debug_buf[200];
int i;
unsigned short json_len=0;
uint8_t* packet_p;
uint8_t debug_buffer_start_index = 0;


void setup() {
  Serial.begin(115200);
  pinMode(BUILTIN_LED, OUTPUT);
  delay(10);
 
  WifiConnected();

  initMQTT();
}

void initMQTT()
{
    mqttClient.setServer(mqtt_server, 6002);
    mqttClient.connect(mqtt_device_id,mqtt_product_id,mqtt_api_key);
    mqttClient.setCallback(callback);
}

void callback(char* topic, byte* payload, unsigned int length) {
    Serial.print(&quot;Message arrived [&quot;);
    Serial.print(topic);
    Serial.print(&quot;] &quot;);
    for (int i = 0; i &amp;lt; length; i++) {
      Serial.print((char)payload[i]);
    }
    Serial.println();

    String s_payload=String((char *)payload).substring(0, length);
    Serial.println(s_payload);

    //开灯命令？   
    if (s_payload.equals(&quot;关灯&quot;)||s_payload.equals(&quot;\&quot;关灯\&quot;&quot;)) {
      digitalWrite(BUILTIN_LED, LOW);
    } else if (s_payload.equals(&quot;开灯&quot;)||s_payload.equals(&quot;\&quot;开灯\&quot;&quot;)){
      digitalWrite(BUILTIN_LED, HIGH);
    }
 
}


void reconnect() {
  // Loop until we're reconnected
  while (!mqttClient.connected()) {
    Serial.print(&quot;Attempting MQTT connection...&quot;);&lt;br/&gt;if (mqttClient.connect(mqtt_device_id,mqtt_product_id,mqtt_api_key)) {  //One net user name as product ID , and password as APIKey
      Serial.println(&quot;connected&quot;);
      // Once connected, publish an announcement...
      mqttClient.publish(&quot;outTopic&quot;, &quot;hello world&quot;);
      // ... and resubscribe
      mqttClient.subscribe(&quot;inTopic&quot;);
    } else {
      Serial.print(&quot;failed, rc=&quot;);
      Serial.print(mqttClient.state());
      Serial.println(&quot; try again in 5 seconds&quot;);
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void loop() {

    if (!mqttClient.connected()) {
      reconnect();
    }
    mqttClient.loop();

    long now = millis();
  if (now - lastMsg &amp;gt; 2000) {
    lastMsg = now;

    int kqValue=analogRead(A0);
    
    snprintf(msgJson,sizeof(msgJson),dataTemplete,kqValue);
    json_len=strlen(msgJson); //packet length count the end char '\0'
    msg_buf[0]=char(0x03);  //palyLoad packet byte 1, one_net mqtt Publish packet payload byte 1, type3 , json type2
    msg_buf[1]=char(json_len&amp;gt;&amp;gt;8);  //high 8 bits of json_len (16bits as short int type)
    msg_buf[2]=char(json_len&amp;amp;0xff); //low 8 bits of json_len (16bits as short int type)
   // snprintf(msg_buf+3,40,dataTemplete,value);
   
   memcpy(msg_buf+3,msgJson,strlen(msgJson));
   msg_buf[3+strlen(msgJson)] = 0;
    Serial.print(&quot;Publish message: &quot;);
    Serial.println(msgJson);
    mqttClient.publish(&quot;$dp&quot;,(uint8_t*)msg_buf,3+strlen(msgJson),false); 
  }
}




void WifiConnected() 
{
  WiFi.disconnect();
  WiFi.mode(WIFI_STA);
 
  Serial.println();
  Serial.print(&quot;Connecting to&quot;);
  Serial.println(ssid);
 
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_DISCONNECTED)
  {
    delay(500);
    Serial.print(&quot;.&quot;);
  }

  randomSeed(micros());
  
  Serial.println(&quot;&quot;); 
  Serial.println(&quot;WIFI connected&quot;); 
  Serial.println(WiFi.localIP());
 
}　　
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;至此，可以语音控制和手机控制了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;后续扩展命令会较容易，可以move带C#部分来做，如果觉得语音转文本有不准的地方，目前的想法是通过神经网络来做识别，而不是通过目前的这种很挫的判断办法&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; OK，完工。&lt;/p&gt;
&lt;p&gt;有要代码的就找我发给你。&lt;/p&gt;



</description>
<pubDate>Sun, 24 Mar 2019 05:07:00 +0000</pubDate>
<dc:creator>McKay</dc:creator>
<og:description>最近研究物联网相关的东西，做了个小原型，称它为智能管家，能用语音控制设备以及手机APP控制设备。 先看看结构图： 功能描述： 目前为止，用到的设备主要就是ESPDuino。 ESPDuino：WIFI</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aarond/p/home-agent.html</dc:identifier>
</item>
<item>
<title>Hashmap jdk7  死循环 - webglcn</title>
<link>http://www.cnblogs.com/webglcn/p/10587708.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/webglcn/p/10587708.html</guid>
<description>&lt;p&gt;&lt;span&gt;如果理解的有问题，欢迎大家指正。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Hashmap jdk8&quot; href=&quot;https://www.cnblogs.com/webglcn/p/10587708.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/webglcn/p/10587708.html&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;jdk7的hashmap 由数组和链表组成，存在几个问题：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;当key的hash碰撞频率高，导致链表内的数据过多，影响查询效率， 时间复杂度为O(n)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;不同的key经过hash运算，结果落到同一个table的元素中，元素内部是链表结构，新增的数据会直接插入到链表的结尾。当查询的时候，首先通过hash找到元素在hashmap中的table位置，然后遍历链表找到元素，遍历的时间复杂度为O(n).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多线程并发操作hashmap，导致链表查询死循环。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;并发扩容时，同时执行transfer方法，如果原始链表相邻的两个元素，扩容后仍是相邻的两个元素，由于采用了头插入，会造成两个元素形成互为首尾,形成死循环。举例如下。&lt;/p&gt;

&lt;p&gt;初始状态hashmap 的初始大小为 2^n （n=1）, hashmap的size是2， 插入两个元素3和7&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/325305/201903/325305-20190324124224138-611939927.png&quot; alt=&quot;&quot; width=&quot;505&quot; height=&quot;113&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 两个线程对hashmap进行扩容(调用transfer)， 假设&lt;span&gt;线程一&lt;/span&gt;执行到获取第一个元素3，CPU调度到&lt;span&gt;第二个线程&lt;/span&gt;, &lt;span&gt;第二个线程&lt;/span&gt;完成了全部的扩容操作,由于扩容采用了头插法，元素7插入到元素3之前，并作为链表的第一个元素。此时状态为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/325305/201903/325305-20190324131036380-383824665.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;线程一&lt;/span&gt;采用头插法，形成死循环&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/325305/201903/325305-20190324125257776-1086791092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;参考文献&lt;/p&gt;
&lt;p&gt;http://www.cnblogs.com/dongguacai/p/5599100.html&lt;/p&gt;

</description>
<pubDate>Sun, 24 Mar 2019 04:56:00 +0000</pubDate>
<dc:creator>webglcn</dc:creator>
<og:description>如果理解的有问题，欢迎大家指正。 https://www.cnblogs.com/webglcn/p/10587708.html jdk7的hashmap 由数组和链表组成，存在几个问题： 当key的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/webglcn/p/10587708.html</dc:identifier>
</item>
</channel>
</rss>