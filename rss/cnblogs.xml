<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【Python3爬虫】用Python实现发送天气预报邮件 - TM0831</title>
<link>http://www.cnblogs.com/TM0831/p/10126463.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/TM0831/p/10126463.html</guid>
<description>&lt;p&gt;&lt;span&gt;此次的目标是爬取指定城市的天气预报信息，然后再用Python发送邮件到指定的邮箱。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;1、首先是爬取天气预报的信息，用的网站是中国天气网，网址是&lt;a href=&quot;http://www.weather.com.cn/static/html/weather.shtml&quot; target=&quot;_blank&quot;&gt;http://www.weather.com.cn/static/html/weather.shtml&lt;/a&gt;，任意选择一个城市（比如&lt;a href=&quot;http://www.weather.com.cn/weather1d/101200101.shtml&quot; target=&quot;_blank&quot;&gt;武汉&lt;/a&gt;），然后要爬取的内容为下面的部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216142156940-807644545.png&quot; alt=&quot;&quot; width=&quot;674&quot; height=&quot;285&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216142108595-1663528889.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 先&lt;/span&gt;&lt;span&gt;查看网页源代码，并没有找到第一张图中的内容，说明是这些天气信息是通过别的方式加载出来的。我们打开开发者工具，点击XHR选项，发现没有任何内容，但是点击JS选项后可以找到如下内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216142758725-1815641132.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后就是把URL复制下来进行爬取，不过要注意加上User-Agent和Referer字段，而且如果一直用一个User-Agent的话就会被识别出来，所以我们需要定义一个函数来返回随机的User-Agent以供使用。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_agent():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     user_agent_list =&lt;span&gt; [
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    ]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; random.choice(user_agent_list)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 爬取后的结果如下：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;span&gt;{'PM2.5': '158',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'城市': '武汉',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'天气': '多云',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'日期': '12月16日(星期日)',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'洗车指数': '无雨且风力较小，易保持清洁度。',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'温度': '12℃',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'相对湿度': '47%',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'穿衣指数': '建议着厚外套加毛衣等服装。',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'紫外线指数': '涂擦SPF大于15、PA+防晒护肤品。',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'风力等级': '2级',&lt;/span&gt;&lt;br/&gt;&lt;span&gt;'风向': '西南风'}&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt; 2、我们已经能爬取天气预报的内容了，但是如果我们想要爬取任意城市的天气预报，又要怎么办呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先找几个城市对应的链接看一下：武汉（http://www.weather.com.cn/weather1d/101200101.shtml）、广州（http://www.weather.com.cn/weather/101280101.shtml?）、杭州（ http://www.weather.com.cn/weather1d/101210101.shtml），&lt;/span&gt;&lt;span&gt;很明显每个城市有一个对应的编码，而我们只要获得全国主要城市的编码信息，也就能得到这些城市的天气预报了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这一步花费了我不少时间，问题就在于从哪里得到这些编码信息，最后找到了一个办法。首先是查看&lt;a href=&quot;http://www.weather.com.cn/forecast/index.shtml&quot; target=&quot;_blank&quot;&gt;国内天气预报&lt;/a&gt;，当我们的鼠标移到某个省的地图上的时候，就会显示其省会的天气情况：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216145919917-1783834428.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 而当我们用鼠标左键点击的时候，就能够查看这个省的整体天气情况：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216150204489-1644657784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开开发者工具，点击XHR选项，可以发现有如下内容，而这些数据里就包含着我们需要的编码信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216150453240-1248621481.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;做到这一步我们就可以获得全国主要城市的编码信息了，不过要注意的是，这些编码并不都是能直接添加到我们的代码中进行使用的，通过观察可以发现，四个直辖市的编码是不需要做改变的，其余的省需要在得到的编码后面加上一个01。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;要使用Python来发送邮件，需要使用两个模块：smtplib和email。这两个模块是Python自带的，只需import即可使用，其中smtplib模块主要负责发送邮件，email模块主要负责构造邮件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我使用的是163邮箱，用别的邮箱也可以，不过方法会有所不同。在发送邮件之前，需要先设置授权码，在设置完之后，要记住你的授权码，在后面会用到的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216152346655-1602885298.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个测试的例子如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; smtplib
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; email.header &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Header
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; email.mime.text &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MIMEText
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; sender = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx@163.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发件人的邮箱&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; password = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这里的密码不是登陆邮箱的密码，而是授权码&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; receiver = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx@163.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 收件人的邮箱，可以是同一个&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; mail = MIMEText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是邮件内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;plain&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 邮件内容&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; mail[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Subject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = Header(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;这是邮件主题&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 邮件主题&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; mail[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;From&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = sender  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发件人&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; mail[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;To&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = receiver  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 收件人&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; smtp =&lt;span&gt; smtplib.SMTP()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; smtp.connect(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;smtp.163.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 25)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 连接邮箱服务器&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; smtp.login(sender, password)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 登录邮箱&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; smtp.sendmail(sender, receiver, mail.as_string())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第三个是把邮件内容变成字符串&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; smtp.quit()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发送完毕，退出&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;邮件已成功发送！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;有几点要注意的是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）mail['From']和mail['To']是一定要加上的，不能省略；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）由于使用的是163邮箱，所以连接服务器的时候使用的是smtp.163.com；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）邮件主题里不要使用“test”，不然会被标记为垃圾邮件。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;首先是程序运行的结果截图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216154132741-1915877828.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后打开邮箱查看：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201812/1450803-20181216154614147-860980085.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;完整代码已上传到GitHub：&lt;a href=&quot;https://github.com/QAQ112233/Weather&quot; target=&quot;_blank&quot;&gt;https://github.com/QAQ112233/Weather&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 07:56:00 +0000</pubDate>
<dc:creator>TM0831</dc:creator>
<og:description>此次的目标是爬取指定城市的天气预报信息，然后再用Python发送邮件到指定的邮箱。 一、爬取天气预报 1、首先是爬取天气预报的信息，用的网站是中国天气网，网址是http://www.weather.c</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/TM0831/p/10126463.html</dc:identifier>
</item>
<item>
<title>ML.NET 示例：深度学习之集成TensorFlow - feiyun0112</title>
<link>http://www.cnblogs.com/feiyun0112/p/10126408.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feiyun0112/p/10126408.html</guid>
<description>&lt;blockquote readability=&quot;5.3004115226337&quot;&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;准备近期将微软的machinelearning-samples翻译成中文，水平有限，如有错漏，请大家多多指正。&lt;br/&gt;如果有朋友对此感兴趣，可以加入我：&lt;a href=&quot;https://github.com/feiyun0112/machinelearning-samples.zh-cn&quot; class=&quot;uri&quot;&gt;https://github.com/feiyun0112/machinelearning-samples.zh-cn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;图像分类是许多业务场景中的常见情况。 对于这些情况，您可以使用预先训练的模型或训练自己的模型来对特定于自定义域的图像进行分类。&lt;/p&gt;
&lt;h2 id=&quot;数据集&quot;&gt;数据集&lt;/h2&gt;
&lt;p&gt;有两个数据源：&lt;code&gt;tsv&lt;/code&gt;文件和图像文件。&lt;a href=&quot;http://www.cnblogs.com/feiyun0112/p/ImageClassification/assets/inputs/images/tags.tsv&quot;&gt;tsv 文件&lt;/a&gt; 包含2列：第一个定义为&lt;code&gt;ImagePath&lt;/code&gt;，第二个定义为对应于图像的&lt;code&gt;Label&lt;/code&gt;。正如你所看到的，文件没有标题行，看起来像这样：&lt;/p&gt;
&lt;pre class=&quot;tsv&quot;&gt;
&lt;code&gt;broccoli.jpg    broccoli
broccoli.png    broccoli
canoe2.jpg  canoe
canoe3.jpg  canoe
canoe4.jpg  canoe
coffeepot.jpg   coffeepot
coffeepot2.jpg  coffeepot
coffeepot3.jpg  coffeepot
coffeepot4.jpg  coffeepot
pizza.jpg   pizza
pizza2.jpg  pizza
pizza3.jpg  pizza
teddy1.jpg  teddy bear
teddy2.jpg  teddy bear
teddy3.jpg  teddy bear
teddy4.jpg  teddy bear
teddy6.jpg  teddy bear
toaster.jpg toaster
toaster2.png    toaster
toaster3.jpg    toaster&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;训练和测试图像位于assets文件夹中。这些图像属于维基共享资源。&lt;/p&gt;
&lt;blockquote readability=&quot;2.344262295082&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://commons.wikimedia.org/w/index.php?title=Main_Page&amp;amp;oldid=313158208&quot;&gt;维基共享资源&lt;/a&gt;, 免费媒体存储库。&lt;/em&gt; 于 10:48, October 17, 2018 检索自:&lt;br/&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/Pizza&quot; class=&quot;uri&quot;&gt;https://commons.wikimedia.org/wiki/Pizza&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/Coffee_pot&quot; class=&quot;uri&quot;&gt;https://commons.wikimedia.org/wiki/Coffee_pot&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/Toaster&quot; class=&quot;uri&quot;&gt;https://commons.wikimedia.org/wiki/Toaster&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/Category:Canoes&quot; class=&quot;uri&quot;&gt;https://commons.wikimedia.org/wiki/Category:Canoes&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/Teddy_bear&quot; class=&quot;uri&quot;&gt;https://commons.wikimedia.org/wiki/Teddy_bear&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;预训练模型&quot;&gt;预训练模型&lt;/h2&gt;
&lt;p&gt;有多个模型被预先训练用于图像分类。在本例中，我们将使用基于Inception拓扑的模型，并用来自Image.Net的图像进行训练。这个模型可以从 &lt;a href=&quot;https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip&quot; class=&quot;uri&quot;&gt;https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip&lt;/a&gt; 下载, 也可以在 &lt;code&gt;/ src / ImageClassification / assets /inputs / inception / tensorflow_inception_graph.pb&lt;/code&gt; 找到。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;控制台应用程序项目&lt;code&gt;ImageClassification.Score&lt;/code&gt;可用于基于预先训练的Inception-v3 TensorFlow模型对样本图像进行分类。&lt;/p&gt;
&lt;p&gt;再次注意，此示例仅使用预先训练的TensorFlow模型和ML.NET API。 因此，它&lt;strong&gt;不会&lt;/strong&gt;训练任何ML.NET模型。 目前，在ML.NET中仅支持使用现有的TensorFlow训练模型进行评分/预测。&lt;/p&gt;
&lt;p&gt;您需要按照以下步骤执行分类测试：&lt;/p&gt;
&lt;p&gt;1) &lt;strong&gt;设置VS默认启动项目：&lt;/strong&gt; 将&lt;code&gt;ImageClassification.Score&lt;/code&gt;设置为Visual Studio中的启动项目。&lt;br/&gt;2) &lt;strong&gt;运行训练模型控制台应用程序:&lt;/strong&gt; 在Visual Studio中按F5。 在执行结束时，输出将类似于此屏幕截图：&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/feiyun0112/machinelearning-samples.zh-cn/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow/docs/images/train_console.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码演练&quot;&gt;代码演练&lt;/h2&gt;
&lt;p&gt;解决方案中有一个名为&lt;code&gt;ImageClassification.Score&lt;/code&gt;的项目，它负责以TensorFlow格式加载模型，然后对图像进行分类。&lt;/p&gt;
&lt;h3 id=&quot;ml.net模型评分&quot;&gt;ML.NET：模型评分&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;TextLoader.CreateReader()&lt;/code&gt;用于定义将用于在ML.NET模型中加载图像的文本文件的模式。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt; var loader = new TextLoader(env,
    new TextLoader.Arguments
    {
        Column = new[] {
            new TextLoader.Column(&quot;ImagePath&quot;, DataKind.Text, 0)
        }
    });

var data = loader.Read(new MultiFileSource(dataLocation));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用于加载图像的图像文件有两列：第一列定义为&lt;code&gt;ImagePath&lt;/code&gt; ，第二列是与图像对应的&lt;code&gt;Label&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;需要强调的是，在使用TensorFlow模型进行评分时，这里并没有真正使用标签。该文件仅作为测试预测时的参考，以便您可以将每个样本数据的实际标签与TensorFlow模型提供的预测标签进行比较。这就是为什么当使用上面的'TextLoader'加载文件时，您只需要获取ImagePath或文件的名称，但不需要获取标签。&lt;/p&gt;
&lt;pre class=&quot;csv&quot;&gt;
&lt;code&gt;broccoli.jpg    broccoli
bucket.png  bucket
canoe.jpg   canoe
snail.jpg   snail
teddy1.jpg  teddy bear&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正如您所看到的，文件没有标题行。&lt;/p&gt;
&lt;p&gt;第二步是定义估计器流水线。通常，在处理深度神经网络时，必须使图像适应网络期望的格式。这就是为什么图像被调整大小然后被转换的原因（主要是，像素值在所有R、G、B通道上被标准化）。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt; var pipeline = new ImageLoaderEstimator(env, imagesFolder, (&quot;ImagePath&quot;, &quot;ImageReal&quot;))
    .Append(new ImageResizerEstimator(env, &quot;ImageReal&quot;, &quot;ImageReal&quot;, ImageNetSettings.imageHeight, ImageNetSettings.imageWidth))
    .Append(new ImagePixelExtractorEstimator(env, new[] { new ImagePixelExtractorTransform.ColumnInfo(&quot;ImageReal&quot;, &quot;input&quot;, interleave: ImageNetSettings.channelsLast, offset: ImageNetSettings.mean) }))
    .Append(new TensorFlowEstimator(env, modelLocation, new[] { &quot;input&quot; }, new[] { &quot;softmax2&quot; }));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;您还需要检查神经网络，并检查输入/输出节点的名称。为了检查模型，可以使用&lt;a href=&quot;https://github.com/lutzroeder/netron&quot;&gt;Netron&lt;/a&gt;，它会随&lt;a href=&quot;https://visualstudio.microsoft.com/downloads/ai-tools-vs/&quot;&gt;Visual Studio Tools for AI&lt;/a&gt;一起安装。&lt;br/&gt;这些名称稍后在评估器管道的定义中使用：在初始网络的情况下，输入张量被命名为“input”，输出被命名为“softmax2”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/feiyun0112/machinelearning-samples.zh-cn/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow/docs/images/netron.png&quot; alt=&quot;inspecting neural network with netron&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，我们在&lt;em&gt;拟合&lt;/em&gt;评估器管道之后提取预测函数。 预测函数接收类型为&lt;code&gt;ImageNetData&lt;/code&gt;的对象（包含2个属性：&lt;code&gt;ImagePath&lt;/code&gt;和&lt;code&gt;Label&lt;/code&gt;）作为参数，然后返回类型为&lt;code&gt;ImagePrediction&lt;/code&gt;的对象。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; var modeld = pipeline.Fit(data);
 var predictionFunction = modeld.MakePredictionFunction&amp;lt;ImageNetData, ImageNetPrediction&amp;gt;(env);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在获得预测时，我们得到属性&lt;code&gt;PredictedLabels&lt;/code&gt;中的浮点数数组。数组中的每个位置都被分配给一个标签，例如，如果模型有5个不同的标签，那么数组长度将等于5。数组中的每个位置的值表示标签在该位置上的概率；所有数组值（概率）的总和等于1。然后，您需要选择最大值（概率）并检查指定给该位置的标签。&lt;/p&gt;
&lt;h3 id=&quot;引用&quot;&gt;引用&lt;/h3&gt;
&lt;p&gt;训练和预测图像&lt;/p&gt;
&lt;blockquote readability=&quot;4.8152866242038&quot;&gt;
&lt;p&gt;&lt;em&gt;维基共享资源, 免费媒体存储库。&lt;/em&gt; 于 10:48, October 17, 2018 检索自 &lt;a href=&quot;https://commons.wikimedia.org/w/index.php?title=Main_Page&amp;amp;oldid=313158208&quot; class=&quot;uri&quot;&gt;https://commons.wikimedia.org/w/index.php?title=Main_Page&amp;amp;oldid=313158208&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 16 Dec 2018 06:04:00 +0000</pubDate>
<dc:creator>feiyun0112</dc:creator>
<og:description>写在前面 准备近期将微软的machinelearning samples翻译成中文，水平有限，如有错漏，请大家多多指正。 如果有朋友对此感兴趣，可以加入我：https://github.com/fei</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feiyun0112/p/10126408.html</dc:identifier>
</item>
<item>
<title>RabbitMQ 消息中间件 - -Finley-</title>
<link>http://www.cnblogs.com/Finley/p/10126315.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Finley/p/10126315.html</guid>
<description>&lt;p&gt;RabbitMQ 是使用 Erlang 语言开发的消息中间件, 其遵循了高级消息队列协议(Advanced Message Queuing Protocol, AMQP)。&lt;/p&gt;
&lt;p&gt;与 Kafka 等消息队列相比，RabbitMQ 最大的优势在于其较高的可靠性:&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;提供确认(ACK)和重传机制保证消息完成消费, 消费者异常不会导致消息丢失&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;提供消息持久化机制, broker 崩溃不会导致消息丢失&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;集群模式下工作, 保证高可用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为具有较高可靠性和一致性, RabbitMQ 可以胜任订单处理、秒杀等一致性要求较高的业务场景。&lt;/p&gt;

&lt;p&gt;RabbitMQ 中的概念模型:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Broker: 消息中间件实例, 可能是单个节点也可能是运行在多节点集群上的逻辑实体&lt;/li&gt;
&lt;li&gt;消息(Message): 消息由消息头和消息体两部分组成。消息头中包括routing-key、priority等标准消息头以及其它自定义消息头，用于定义RabbitMQ对消息行为。消息体是字节流，包含消息内容。&lt;/li&gt;
&lt;li&gt;连接(Connection): 客户端与 Broker 之间的 TCP连接&lt;/li&gt;
&lt;li&gt;信道(Channel): Channel 是建立在 TCP 连接上的逻辑(虚拟)连接。多个 Channel 复用同一个 TCP 连接, 以避免建立 TCP 连接的巨大开销。 RabbitMQ 官方要求每个线程使用独立的 Channel, 禁止多个线程共用 Channel。&lt;/li&gt;
&lt;li&gt;生产者(Publisher): 发送消息的客户端线程&lt;/li&gt;
&lt;li&gt;消费者(Consumer): 处理消息的客户端线程&lt;/li&gt;
&lt;li&gt;交换机(Exchange): 交换机负责将消息投递到相应的队列&lt;/li&gt;
&lt;li&gt;队列(Queue): 接收并保存交换机投递的消息，直至被消费者成功消费。逻辑结构遵循先进先出FIFO。&lt;/li&gt;
&lt;li&gt;绑定(Binding): 将队列(Queue)注册到交换机(Exchange)的路由表&lt;/li&gt;
&lt;li&gt;虚拟主机(Vhost): 每个Broker下可建立多个vhost, 每个 vhost 可建立独立的 Exchange、Queue、绑定及权限系统。同一个 Broker 下的 vhost 共享 Connection、Channel 和 用户系统，就是说可以使用同一个用户身份使用同一个 Channel 访问不同 vhost。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;交换机(Exchange)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生产者发送的消息会首先送到交换机(Exchange), 交换机根据自身类型和消息的 routing-key 等信息将消息投递到绑定的消息队列中。&lt;/p&gt;
&lt;p&gt;RabbitMQ中的四种标准交换机:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;direct: 如果消息的 routing-key 与队列的 binding-key 完全相同，direct类型的交换机则会将消息投递到该队列中。
&lt;ul&gt;&lt;li&gt;多个队列可以使用相同的 binding-key 绑定到同一个 direct 交换机，direct 交换机会把消息投递到所有 binding-key 与消息 routing-key 相同的队列&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;topic: 允许队列的 binding-key 中包含通配符&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;#&lt;/code&gt;, topic 交换机会将消息投递到 binding-key 与 routing-key 匹配的队列中。
&lt;ul&gt;&lt;li&gt;通配符按照关键字进行匹配，如&lt;code&gt;news.cn.a&lt;/code&gt;中的关键字是&lt;code&gt;news&lt;/code&gt;、&lt;code&gt;cn&lt;/code&gt;和&lt;code&gt;a&lt;/code&gt;，即关键字按照&lt;code&gt;.&lt;/code&gt;分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;通配符匹配0个或多个关键字, &lt;code&gt;news.#.a&lt;/code&gt;可以匹配&lt;code&gt;news.a&lt;/code&gt;, &lt;code&gt;news.cn.a&lt;/code&gt;和&lt;code&gt;news.asia.cn.a&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;通配符匹配一个关键字, &lt;code&gt;news.*.a&lt;/code&gt;匹配&lt;code&gt;news.cn.a&lt;/code&gt;不匹配&lt;code&gt;news.a&lt;/code&gt;、&lt;code&gt;news.asia.cn.a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;fanout: fanout 交换机不进行任何匹配, 将消息投递到所有绑定的队列&lt;/li&gt;
&lt;li&gt;header: header 交换机根据消息头进行投递，现在已较少使用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们可以使用 RabbitMQ 的插件机制使用第三方交换机或自行开发交换机。如实现延时投递的&lt;a href=&quot;https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/&quot;&gt;delayed-message-exchange&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;消息头中的delivery-mode可以设置为 persistent(持久化) 或者 transient(易失)。 Exchange 和 Queue 在处理持久化的消息时都会先将消息写入磁盘中再进行下一步处理, 即使 RabbitMQ 崩溃也不会丢失。&lt;/p&gt;
&lt;p&gt;消费者客户端通常使用的&lt;code&gt;channel.basicConsume&lt;/code&gt;使用推(push)模式投递消息, 即当有新消息时 Broker 通过 channel 主动向客户端发送消息。客户端也可以使用&lt;code&gt;channel.basicGet&lt;/code&gt;从 Broker 拉取消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ACK机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ 提供了确认送达(acknowledge)机制保证消息被正确处理不会丢失。&lt;/p&gt;
&lt;p&gt;确认送达的回执有三种:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ACK: 消息已被成功处理&lt;/li&gt;
&lt;li&gt;NACK: 消息处理异常, 需要重新投递&lt;/li&gt;
&lt;li&gt;REJECT: 消息非法, 丢弃消息&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;RabbitMQ 的 Queue 可以设置 no_ack=true, 则消息被投递后即删除不等待回执。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;channel.basicConsume&lt;/code&gt; 可以指定auto_ack模式，若auto_ack=true当客户端收到完整消息后即会自动发出ACK回执，否则必须显式的发出回执。&lt;/p&gt;

&lt;p&gt;首先安装并启动RabbitMQ实例, Mac用户可以使用 Homebrew 进行安装:&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;brew install rabbitmq&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动服务:&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;brew services start rabbitmq&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者使用官方docker镜像:&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;docker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3-management&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://www.rabbitmq.com/install-windows.html&quot;&gt;RabbitMQ官网&lt;/a&gt;提供了Ubuntu、RPM以及Windows等多种平台安装方式。&lt;/p&gt;
&lt;p&gt;RabbitMQ默认TCP端口为5672, Web控制台默认端口15672。&lt;/p&gt;
&lt;p&gt;在Maven中添加依赖:&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.rabbitmq&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;amqp-client&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.5.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编写生产者:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package rabbit;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

/**
 * @author finley
 */
public class RabbitProducer {

    public static void main(String[] args) throws IOException, TimeoutException {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setUsername(&quot;guest&quot;);
        factory.setPassword(&quot;guest&quot;);
        factory.setHost(&quot;localhost&quot;);
        try (Connection conn = factory.newConnection();
             Channel channel = conn.createChannel()) {
            String exchangeName = &quot;test-exchange&quot;;
            channel.exchangeDeclare(exchangeName, &quot;direct&quot;, true);

            String routingKey = &quot;hello&quot;;

            byte[] msg = &quot;hello world&quot;.getBytes();
            AMQP.BasicProperties.Builder propsBuilder = new AMQP.BasicProperties.Builder();
            propsBuilder.deliveryMode(2); // persistent
            propsBuilder.priority(0); // normal
            propsBuilder.contentType(&quot;text/plain&quot;);
            channel.basicPublish(exchangeName, routingKey, propsBuilder.build(), msg);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编写消费者:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package rabbit;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.*;

/**
 * @author finley
 */
public class RabbitConsumer {

    public static void main(String[] args) throws IOException, TimeoutException {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setUsername(&quot;guest&quot;);
        factory.setPassword(&quot;guest&quot;);
        factory.setHost(&quot;localhost&quot;);
        try (Connection conn = factory.newConnection();
             Channel channel = conn.createChannel()) {
            String exchangeName = &quot;test-exchange&quot;;
            channel.exchangeDeclare(exchangeName, &quot;direct&quot;, true);

            String queueName = channel.queueDeclare().getQueue();
            String bindingKey = &quot;hello&quot;;
            channel.queueBind(queueName, exchangeName, bindingKey);

            while(true) {
                channel.basicConsume(queueName, false, &quot;&quot;, new DefaultConsumer(channel) {
                    @Override
                    public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
                        String routingKey = envelope.getRoutingKey();
                        String contentType = properties.getContentType();
                        String bodyStr = new String(body, &quot;UTF-8&quot;);
                        System.out.println(&quot;routingKey: &quot; + routingKey + &quot;, contentType: &quot; + contentType + &quot;, body: &quot; + bodyStr);
                        long deliveryTag = envelope.getDeliveryTag();
                        channel.basicAck(deliveryTag, false);
                    }
                });
            }
        }
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;RabbitMQ 的消息为字节, 可以将 Java 对象序列化后作为消息体发送。&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 05:32:00 +0000</pubDate>
<dc:creator>-Finley-</dc:creator>
<og:description>RabbitMQ 概念与使用示例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Finley/p/10126315.html</dc:identifier>
</item>
<item>
<title>Hadoop(25)-高可用集群配置,HDFS-HA和YARN-HA - nt杨</title>
<link>http://www.cnblogs.com/duoduotouhenying/p/10126317.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/duoduotouhenying/p/10126317.html</guid>
<description>&lt;p&gt;&lt;span&gt;一. HA概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1. 所谓HA（High Available），即高可用（7*24小时不中断服务）。&lt;/p&gt;
&lt;p&gt;2. 实现高可用最关键的策略是消除单点故障。HA严格来说应该分成各个组件的HA机制：HDFS的HA和YARN的HA。&lt;/p&gt;
&lt;p&gt;3. Hadoop2.0之前，在HDFS集群中NameNode存在单点故障（SPOF）。&lt;/p&gt;
&lt;p&gt;4 .   NameNode主要在以下两个方面影响HDFS集群&lt;/p&gt;
&lt;p&gt;       NameNode机器发生意外，如宕机，集群将无法使用，直到管理员重启&lt;/p&gt;
&lt;p&gt;       NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用&lt;/p&gt;
&lt;p&gt;HDFS HA功能通过配置Active/Standby两个NameNodes实现在集群中对NameNode的热备来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二.HDFS-HA工作机制和工作要点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过双NameNode消除单点故障&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;1. 元数据管理方式需要改变&lt;/p&gt;
&lt;p&gt;内存中各自保存一份元数据；&lt;/p&gt;
&lt;p&gt;Edits日志只有Active状态的NameNode节点可以做写操作；&lt;/p&gt;
&lt;p&gt;两个NameNode都可以读取Edits；&lt;/p&gt;
&lt;p&gt;共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）；&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;2.  需要一个状态管理功能模块&lt;/p&gt;
&lt;p&gt;实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在NameNode节点，利用zk进行状态标识，当需要进行状态切换时，由zkfailover来负责切换，切换时需要防止brain split现象的发生。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;3.  必须保证两个NameNode之间能够ssh无密码登录&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;4.  隔离（Fence），即同一时刻仅仅有一个NameNode对外提供服务&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;span&gt;三. HDFS-HA自动故障转移工作机制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;自动故障转移为HDFS部署增加了两个新组件：ZooKeeper和ZKFailoverController（ZKFC）进程。ZooKeeper是维护少量协调数据，通知客户端这些数据的改变和监视客户端故障的高可用服务。HA的自动故障转移依赖于ZooKeeper的以下功能：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1. 故障检测：集群中的每个NameNode在ZooKeeper中维护了一个持久会话，如果机器崩溃，ZooKeeper中的会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2. 现役NameNode选择：ZooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的排外锁以表明它应该成为现役NameNode。&lt;/p&gt;
&lt;p&gt;ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：&lt;/p&gt;
&lt;p&gt;1. 健康监测：ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。&lt;/p&gt;
&lt;p&gt;2. ZooKeeper会话管理：当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个特殊的znode锁，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除。&lt;/p&gt;
&lt;p&gt;3. 基于ZooKeeper的选择：如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为Active。故障转移进程与前面描述的手动故障转移相似，首先如果必要保护之前的现役NameNode，然后本地NameNode转换为Active状态。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/395849/201812/395849-20181216124813594-847448007.png&quot; alt=&quot;&quot; width=&quot;1078&quot; height=&quot;539&quot;/&gt;&lt;/p&gt;
&lt;p&gt;单节点相当不可靠,所以用多节点来解决.多节点就会涉及到两个问题--谁是主谁是从(一个写多个读),以及如何确保通信.&lt;/p&gt;
&lt;p&gt;既然每个节点都会宕机,所以写出去的edits.log就要放到一个第三方上--qjournal,而且qjournal也是一个集群,对外提供一致性接口.&lt;/p&gt;
&lt;p&gt;NameNode之间直接通信不可靠,所以需要一个ZooKeeper来作为中介,实时监控状态.状态为Active的才可以写,其他的只能读,以及更频繁的做原本2NN做的备份的事情&lt;/p&gt;
&lt;p&gt;Zkfc的出现,是为了不破坏已有的代码健壮性和稳定性&lt;/p&gt;
&lt;p&gt;如果不确定Active节点是宕机还是网络问题,千万不要贸然让另外的节点上位为Active.如果是之间的网络通信问题而贸然上位,将会产生非常严重的脑裂现象,让数据全部都不可靠&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;span&gt; 四. HDFS-HA集群配置&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;hadoop100&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;hadoop101&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;hadoop102&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NameNode    &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NameNode&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;JournalNode  &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;JournalNode  &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;JournalNode  &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;DataNode&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;DataNode&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;DataNode&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;ZK &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;ZK &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;ZK &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;ResourceManager&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NodeManager&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NodeManager&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NodeManager&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;1&quot;&gt;1. 配置Zookeeper集群,详见zookeeper系列文章&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;2. 配置HA集群 官方地址：&lt;a href=&quot;http://hadoop.apache.org/&quot;&gt;http://hadoop.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;1). 在/opt/module/目录下创建一个文件夹&lt;/p&gt;

&lt;p&gt;2). 将/opt/module目录下的hadoop2.7.2拷贝一份至ha目录下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cp&lt;/span&gt; -r hadoop-&lt;span&gt;2.7&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/ /opt/module/ha/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3). 删除/opt/module/ha/hadoop2.7.2目录下的data logs 以及其他没用的上传文件&lt;/p&gt;
&lt;p&gt;4).cd etc文件夹下, 重新配置core-site.xml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 把两个NameNode）的地址组装成一个集群mycluster &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fs.defaultFS&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hdfs://mycluster&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 指定hadoop运行时产生文件的存储目录 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.tmp.dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/opt/ha/hadoop-2.7.2/data/tmp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5). 重新配置hdfs-site.xml,如果没有配置机器间的无密登录,需要先去生成和设置.注意集群名称是要对应的,以及每个节点的host名称,以及路径,不要搞错咯~~&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 完全分布式集群名称 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.nameservices&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mycluster&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 集群中NameNode节点都有哪些 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.ha.namenodes.mycluster&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nn1,nn2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; nn1的RPC通信地址 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.rpc-address.mycluster.nn1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop100:9000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; nn2的RPC通信地址 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.rpc-address.mycluster.nn2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop101:9000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; nn1的http通信地址 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.http-address.mycluster.nn1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop100:50070&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; nn2的http通信地址 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.http-address.mycluster.nn2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop101:50070&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 指定NameNode元数据在JournalNode上的存放位置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.shared.edits.dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;qjournal://hadoop100:8485;hadoop101:8485;hadoop102:8485/mycluster&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置隔离机制，即同一时刻只能有一台服务器对外响应 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.ha.fencing.methods&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;sshfence&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用隔离机制时需要ssh无秘钥登录&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.ha.fencing.ssh.private-key-files&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/home/nty/.ssh/id_rsa&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 声明journalnode服务器存储目录&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.journalnode.edits.dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/opt/module/ha/hadoop-2.7.2/data/jn&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 关闭权限检查&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.permissions.enable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 访问代理类：client，mycluster，active配置失败自动切换实现方式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.client.failover.proxy.provider.mycluster&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6). 使用脚本,同步到hadoop101和hadoop102机器,(脚本参考这一章&lt;a href=&quot;https://www.cnblogs.com/duoduotouhenying/p/10060442.html&quot;&gt;Hadoop(4)-Hadoop集群环境搭建&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
xsync /opt/module/ha
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;五.启动HDFS-HA集群&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;1. 在各个JournalNode节点上，输入以下命令启动journalnode服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; start journalnode
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;1&quot;&gt;2. 在[nn1]上，对其进行格式化，并启动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  bin/hdfs namenode -&lt;span&gt;format

  sbin&lt;/span&gt;/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; start namenode
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;1&quot;&gt;3. 在[nn2]上，同步nn1的元数据信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  bin/hdfs namenode -bootstrapStandby
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;1&quot;&gt;4. 启动[nn2]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; start namenode
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;1&quot;&gt;5. 查看web页面显示&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;http://hadoop100:50070/dfshealth.html#tab-overview&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;http://hadoop101:50070/dfshealth.html#tab-overview&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;两个节点均为standby状态 &lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;6. 在[nn1]上，启动所有datanode&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  sbin/hadoop-daemons.&lt;span&gt;sh&lt;/span&gt; start datanode
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;六. 配置HDFS-HA故障自动转移&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1). 在hdfs-site.xml中增加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.ha.automatic-failover.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在core-site.xml中增加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ha.zookeeper.quorum&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop100:2181,hadoop101:2181,hadoop102:2181&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;xsync同步配置文件&lt;/p&gt;
&lt;p&gt;2). 启动&lt;/p&gt;
&lt;p&gt;关闭所有HDFS服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
sbin/stop-dfs.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动Zookeeper集群：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
bin/zkServer.&lt;span&gt;sh&lt;/span&gt; start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化HA在Zookeeper中状态：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
bin/hdfs zkfc -formatZK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动HDFS服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
sbin/start-dfs.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;1&quot;&gt;3). 验证&lt;/p&gt;
&lt;p&gt;将Active NameNode进程kill,观察另外一个节点是否自动成为Active&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;kill&lt;/span&gt; -&lt;span&gt;9&lt;/span&gt; namenode的进程id
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;七.YARN-HA配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1). 官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hadoop.apache.org/docs/r2.7.2/hadoop-yarn/hadoop-yarn-site/ResourceManagerHA.html&quot;&gt;http://hadoop.apache.org/docs/r2.7.2/hadoop-yarn/hadoop-yarn-site/ResourceManagerHA.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt; 2). yarn-ha工作机制&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/395849/201812/395849-20181216132034313-684385157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;1&quot;&gt; 3).集群规划&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;hadoop100　　&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;hadoop101 &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;hadoop102&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NameNode    &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NameNode&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;JournalNode  &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;JournalNode  &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;JournalNode  &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;DataNode&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;DataNode&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;DataNode&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;ZK&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;ZK&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;ZK&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;ResourceManager  &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;ResourceManager  &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;NodeManager&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p&gt;NodeManager&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;189&quot;&gt;
&lt;p class=&quot;a&quot;&gt;NodeManager&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;1&quot;&gt; 4). 配置yran-site.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce_shuffle&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;启用resourcemanager ha&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;声明两台resourcemanager的地址&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.cluster-id&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cluster-yarn1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.rm-ids&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;rm1,rm2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.hostname.rm1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop100&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.hostname.rm2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop101&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;指定zookeeper集群的地址&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop100:2181,hadoop101:2181,hadoop102:2181&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;启用自动恢复&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.recovery.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;指定resourcemanager的状态信息存储在zookeeper集群&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.store.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;     &lt;br/&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;   &amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;xsync配置文件到其他机器&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;5). 启动&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;先启动hdfs-ha&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;启动yarn-ha&lt;/p&gt;
&lt;p&gt;在hadoop100中执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
sbin/start-yarn.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在hadoop101中执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sbin/yarn-daemon.&lt;span&gt;sh&lt;/span&gt; start resourcemanager
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看服务状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
bin/yarn rmadmin -getServiceState rm1
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;1&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 05:29:00 +0000</pubDate>
<dc:creator>nt杨</dc:creator>
<og:description>一. HA概述 1. 所谓HA（High Available），即高可用（7*24小时不中断服务）。 2. 实现高可用最关键的策略是消除单点故障。HA严格来说应该分成各个组件的HA机制：HDFS的HA</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/duoduotouhenying/p/10126317.html</dc:identifier>
</item>
<item>
<title>MySQL数据库之视图 - 奥辰</title>
<link>http://www.cnblogs.com/chenhuabin/p/10126273.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenhuabin/p/10126273.html</guid>
<description>&lt;p&gt;         为了简化复杂SQL语句编写，以及提高数据库安全性，MySQL数据库视图特性。视图是一张虚拟表，不在数据库中以储存的数据值形式存在。在开发中，开发者往往只对某些特定数据和所负责的特定任务感兴趣,只需要看到这一部分数据即可。这时候就可以用到视图来完成。&lt;/p&gt;

&lt;h2&gt;2.1 什么是视图&lt;/h2&gt;
&lt;p&gt;　　数据库中的视图是一个虚拟表，但它同真实表一样，包含一系列带有名称的行和列数据。行和列数据来自由定义视图查询所引用的表，并且在应用视图时动态生成。另外，视图还可以在已经存在的视图的基础上定义。&lt;/p&gt;
&lt;p&gt;　　视图一经定义变存储在数据库中，与其相对应的数据并没有像表那样在数据库中再存储一份，通过视图看到的数据只是存储在基本表中的数据。对视图的操作与对标的操作一样，可以对其进行查询、修改和删除。当对通过视图看到的数据进行修改时，相应的基本表中的数据也会发生变化；同时，若是基本表的数据发生变化，则这种变化也会自动地反映在视图上。&lt;/p&gt;
&lt;h2&gt;2.2 视图的作用&lt;/h2&gt;
&lt;p&gt;         与直接从真实数据表中进行数据操作相比，视图具有以下的有点：&lt;/p&gt;
&lt;p&gt;         &lt;strong&gt;（1）简单化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         看到的就是需要的。视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而用户不必为以后的每一次操作指定全部的条件。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;    （2）安全性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         通过视图用户只能查询和修改他们所能看到的数据。数据库中的其他数据则既看不见也娶不到。数据库授权命令可以使每个用户对数据库的检索限制到特定的数据库对象上，但不能限制到特定行和特定列上。但通过视图，用户可以被限制到数据库的行列级别的子集上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;         （3）逻辑数据独立性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         视图可以帮助用户屏蔽真实表结构变化带来的影响。&lt;/p&gt;

&lt;p&gt;         视图包含了SELECT查询结果，因此属兔的创建基于SELECT语句和已存在的数据库，视图可以建立在一张表上，也可以建立在多张表上。&lt;/p&gt;
&lt;p&gt;         本篇博文中，所有操作基于以下两张数据表（emp表、dept表）进行：&lt;/p&gt;
&lt;p&gt;emp表：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216125307762-737293591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         emp表sql语句如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;90&quot;&gt;&lt;img id=&quot;code_img_closed_a420a46c-2c2a-48e1-9e00-d4fd47cc44ab&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a420a46c-2c2a-48e1-9e00-d4fd47cc44ab&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a420a46c-2c2a-48e1-9e00-d4fd47cc44ab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;175&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SET&lt;/span&gt;&lt;span&gt; NAMES utf8mb4;

&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

 

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; Table structure for emp&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `emp`;

&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `emp`  (

  `empno` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `ename` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `job` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;9&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `mgr` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `hiredate` date &lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `sal` &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;(&lt;span&gt;7&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `comm` &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;(&lt;span&gt;7&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `deptno` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`empno`) USING BTREE

) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; InnoDB &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Compact;

 

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; Records of emp&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7369&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SMITH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CLERK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7902&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1998-12-17&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;800.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7499&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLEN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SALESMAN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7698&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-02-20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1600.00&lt;/span&gt;, &lt;span&gt;300.00&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7521&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;WARD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SALESMAN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7698&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-02-22&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1250.00&lt;/span&gt;, &lt;span&gt;500.00&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7566&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JONES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MANAGER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7839&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-04-02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;2975.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7654&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MARTIN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SALESMAN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7698&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-09-28&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1250.00&lt;/span&gt;, &lt;span&gt;1400.00&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7698&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BLAKE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MANAGER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7839&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-05-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;2850.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7782&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CLARK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MANAGER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7839&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-06-09&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;2450.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7788&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SCOTT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANALYST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7566&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-11-17&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;3000.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7839&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;KING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PRESIDENT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-11-17&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;5000.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7844&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TURNER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SALESMAN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7698&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-09-08&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1500.00&lt;/span&gt;, &lt;span&gt;0.00&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7876&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ADAMS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CLERK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7788&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1987-05-23&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1100.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7900&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JAMES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CLERK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7698&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-12-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;950.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7902&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANALYST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7566&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1981-12-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;3000.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;7934&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MILLER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CLERK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7782&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1982-02-23&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1300.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `emp` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;8888&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CHB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CLERK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7369&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-12-10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;8000.00&lt;/span&gt;, &lt;span&gt;100.00&lt;/span&gt;, &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;);

 

&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;emp表SQL语句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　dept表：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216125422376-59931581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　dept表SQL语句如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_bd1af273-e92b-415d-b30d-0a2d67dd8118&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd1af273-e92b-415d-b30d-0a2d67dd8118&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd1af273-e92b-415d-b30d-0a2d67dd8118&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SET&lt;/span&gt;&lt;span&gt; NAMES utf8mb4;

&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

 

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; Table structure for dept&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `dept`;

&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `dept`  (

  `deptno` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `dname` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;14&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  `loc` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;13&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; latin1 COLLATE latin1_swedish_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,

  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`deptno`) USING BTREE

) ENGINE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; InnoDB &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; latin1 COLLATE &lt;span&gt;=&lt;/span&gt; latin1_swedish_ci ROW_FORMAT &lt;span&gt;=&lt;/span&gt;&lt;span&gt; Compact;

 

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; Records of dept&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;

&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `dept` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ACCOUNTING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NEW YORK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `dept` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;20&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;RESEARCH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DALLAS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `dept` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;30&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SALES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CHICAGO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `dept` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;40&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OPERATIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BOSTON&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

 

&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demp表SQL语句&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;3.1 创建视图的基本格式&lt;/h2&gt;
&lt;p&gt;         创建视图的基本格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;VIEW&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;视图名称&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;(column_list)&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;

　　&lt;span&gt;AS&lt;/span&gt; SELECT语句;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　虽然还有更加完整的详细语法格式，但一般情况下，使用上述基本格式就够用了。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（1）基于单个数据表建立视图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在使用emp表时，如果需要查询查询empno（编号）、ename（姓名）、job（职位）、hiredate（雇用日期）、sal（月薪）等字段，并指定中文拼音别名，SQL语句如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; empno bianhao , ename xinmin, job zhiwei, hiredate guyongriqi, sal yuexin &lt;span&gt;from&lt;/span&gt; emp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         如果需要频繁得进行该语句查询，那么每次都要重写这一行语句。使用视图可以简化操作，对empno、ename、job、hiredate、sal创建视图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;view&lt;/span&gt; view_01 &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; empno , ename , job , hiredate , sal &lt;span&gt;from&lt;/span&gt; emp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　执行完上述语句即可创建名为view_01的视图，如果你是通过Navicat等图形界面工具创建视图，在左侧视图栏下可找到view_01视图。&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216125654036-1891360895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在刚创建好的view_01视图进行查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; view_01 ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查询结果如下：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216125730923-1376342890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以发现，我们并未指定查询的字段，但查询效果却与直接在真实数据表上指定字段查询效果一样。但view_01视图并未实现字段别名，继续创建一个view_02为每个列添加别名：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;view&lt;/span&gt; view_02 (bianhao , xinmin , zhiwei , guyongriqi , yuexin) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; empno , ename , job , hiredate , sal &lt;span&gt;from&lt;/span&gt; emp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看view_02：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; view_02 ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结果如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216125821402-482402570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，每一个列的列名都是我们在创建视图时自己重新指定的。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（2）创建基于多个表上视图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         创建一个视图，视图中包含每个员工编号（empno）、姓名（ename）、职位（job）、领导编号（mgr）、领导姓名（empno）、部门名称（dname）、部门位置（loc），在真实数据表中查询语句如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt;&lt;span&gt; e1.empno bianhao, e1.ename xingming, e1.job zhiwei, e1.mgr lindaobianhao, e2.ename lindaoxingming, d.dname bumenmingchen, d.loc bumenweizhi

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; emp e1 , emp e2 , dept d

&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e1.mgr&lt;span&gt;=&lt;/span&gt;e2.empno &lt;span&gt;and&lt;/span&gt; e1.deptno&lt;span&gt;=&lt;/span&gt;d.deptno ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建视图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;view&lt;/span&gt; view_03 &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; e1.empno bianhao, e1.ename xingming, e1.job zhiwei, e1.mgr lindaobianhao, e2.ename lindaoxingming, &lt;br/&gt;d.dname bumenmingchen, d.loc bumenweizhi

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; emp e1 , emp e2 , dept d

&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e1.mgr&lt;span&gt;=&lt;/span&gt;e2.empno &lt;span&gt;and&lt;/span&gt; e1.deptno&lt;span&gt;=&lt;/span&gt;d.deptno ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对刚建立的view_03视图进行查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; view_03 ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查询结果如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216125941920-632513651.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以发现，在select中指定别名与在view视图中指定别名效果是一样的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　（1）查看视图基本信息：describe 视图名；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         查看上一章节创建的视图view_03的基本信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
describe view_03 ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130030599-177372154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　describe一般情况下都写成desc，两者是完全等效的。&lt;/p&gt;
&lt;p&gt;       另外还可以通过“show create view 视图名；”来查看视图详细信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（2）查看所有视图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在MySQL中，information_schema数据库下的views表中存储了所有视图的定义，通过对views表的查询，可以查看数据库中说哟视图的详细信息，查询语句如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; information_schema.views ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　部分查询结果如下所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130120227-1061512142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　（1）使用create or replace view语句修改视图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　create or replace view语句从字面上也可以理解：既可以创建视图，也可以修改视图（存在的话就修改，不存在就创建）。create or replace view语句的语法结构与创建视图的create语句语法结构是完全一样的。&lt;/p&gt;
&lt;p&gt;　　修改上文中创建的视图view_01，添加一个部门编号字段（deptno）:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; &lt;span&gt;replace&lt;/span&gt; &lt;span&gt;view&lt;/span&gt; view_02 (bianhao , xinmin , zhiwei , guyongriqi , yuexin , bumenbiaohao) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; empno , ename , job , hiredate , sal , &lt;br/&gt;deptno &lt;span&gt;from&lt;/span&gt; emp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再次查询view_02，发现确实多了部门编号这一列：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; view_02 ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130225775-1819774319.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　（2）使用alter语句修改视图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　alter语句是MySQL提供的另一种修改视图的方法，其语法结果与create or replace语句也是基本一样的。&lt;/p&gt;
&lt;p&gt;　　继续修改视图view_02，添加一个奖金字段（comm）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;view&lt;/span&gt; view_02 (bianhao , xinmin , zhiwei , guyongriqi , yuexin , bumenbiaohao , jiangjin) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; empno , ename , job , hiredate , sal ,&lt;br/&gt;deptno , comm &lt;span&gt;from&lt;/span&gt; emp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         查看view_01视图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130307938-788133096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　alter语句与create orreplace语句的区别是当视图不存在是，alter语句会报错。&lt;/p&gt;

&lt;p&gt;　　更新视图是指通过视图来插入、更新、删除表中的数据，因为视图是一个虚拟表，其中是没有数据的。通过视图更新的时候都是转到真实表上进行的。对视图的更新操作也包括update、insert和delete。&lt;/p&gt;
&lt;p&gt;         &lt;strong&gt;（1）update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         通过视图将员工编号为7369的员工月薪改为1000，在更新前，其数据为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; view_02 &lt;span&gt;where&lt;/span&gt; bianhao&lt;span&gt;=&lt;/span&gt;&lt;span&gt;7369&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130349783-188436316.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　用update语句进行更新&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;update&lt;/span&gt; view_02 &lt;span&gt;set&lt;/span&gt; yuexin&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; bianhao&lt;span&gt;=&lt;/span&gt;&lt;span&gt;7369&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再次通过视图查看数据，发现数据确实已更新：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130423069-1035031903.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         再看看真实表中数据有没有更新：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; emp &lt;span&gt;where&lt;/span&gt; empno&lt;span&gt;=&lt;/span&gt;&lt;span&gt;7369&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130507174-246942634.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;          可以看出，真实表中的数据也一起更新了，说明对视图的更新操作本质上是对真实表的更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）insert&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　先创建一个视图view_04，该视图结果与emp表一样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;view&lt;/span&gt; view_04 &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; emp ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用insert语句向view_04视图中插入一条数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; view_04 &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;8002&lt;/span&gt; , &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MARK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; , &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CLERK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ,  &lt;span&gt;7902&lt;/span&gt; , &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1998-12-12&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; , &lt;span&gt;1100&lt;/span&gt; ,  &lt;span&gt;20&lt;/span&gt; ,&lt;span&gt;500&lt;/span&gt; ) ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看真实emp表中是否添加这么一条数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; emp &lt;span&gt;where&lt;/span&gt; empno &lt;span&gt;=&lt;/span&gt;&lt;span&gt;8002&lt;/span&gt;  ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130601134-1172678466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　证明在视图进行insert操作是可以添加数据到真实表的。但一般来说，视图的表结构与视图的表结构可能不一样，若真实表中存在非空等约束，这通过视图的insert操作就回失败。所以，insert操作一般不会通过视图来进行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　（3）delete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　通过视图删除刚创建的empno为8002的记录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;delete&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; view_04 &lt;span&gt;where&lt;/span&gt; empno &lt;span&gt;=&lt;/span&gt;&lt;span&gt;8002&lt;/span&gt;  ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看真实表中数据是否删除：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; emp &lt;span&gt;where&lt;/span&gt; empno &lt;span&gt;=&lt;/span&gt;&lt;span&gt;8002&lt;/span&gt;  ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1539768/201812/1539768-20181216130641771-1546495021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　返回的是一个空表，证明真实表中的这条记录也已经被删除了。&lt;/p&gt;
&lt;p&gt;　　最后总结一下视图的更新操作，当视图中包含如下内容时，视图的更新操作将不能被执行：&lt;/p&gt;
&lt;p&gt;　　（1）视图中不包含真实表中被定义为非空的列（视图中没有，但真实表中为非空约束）。&lt;/p&gt;
&lt;p&gt;　　（2）在定义视图的select语句后的字段列表中使用了数学表达式。&lt;/p&gt;
&lt;p&gt;　　（3）在定义视图的select语句后的字段列表中使用了聚合函数。&lt;/p&gt;
&lt;p&gt;　　（4）在定义视图的select语句中使用了distinct，union，top， group by，或having子句。&lt;/p&gt;

&lt;p&gt;         本文是对MySQL数据中视图的详细总结，包括了对视图概念、特性的介绍，然后通过实际示例展示了对视图的增删改查操作。&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 05:11:00 +0000</pubDate>
<dc:creator>奥辰</dc:creator>
<og:description>为了简化复杂SQL语句编写以及提高数据库安全性，MySQL数据库提供了视图特性。视图是一张虚拟表，不以数据库中储存的数据值形式存在。在开发中，开发者往往只对某些特定数据和所负责的特定任务感兴趣，只需要</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenhuabin/p/10126273.html</dc:identifier>
</item>
<item>
<title>记一次WMS的系统改造（1）-分析问题 - 水一</title>
<link>http://www.cnblogs.com/breezeli/p/10126185.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/breezeli/p/10126185.html</guid>
<description>&lt;h3 id=&quot;海外落地中的困境&quot;&gt;海外落地中的困境﻿&lt;/h3&gt;
&lt;p&gt;目前面临主要的问题是“人”，仓储系统主要辅助仓储人员进行生产，所以人变了其实一切就都已经变了，系统在海外面临最大的问题就是人变了。﻿&lt;/p&gt;
&lt;p&gt;这套软件是在国内的运营体系下，用国内运营兄弟的设计一点一点打造出来的，虽有人员更替但运营理念和操作经验却被固化在生产环境中代代相传了下来。到国外后，有一些运营的兄弟过去做指导，但是毕竟只是少数人，由国内的人员过去覆盖的岗位只覆盖到大的运营管理层，到仓经理就已经是外籍人员了，更不要说下面的各种主管和操作员了。﻿&lt;/p&gt;
&lt;p&gt;对他们来说库房生产本来就是完全陌生的一个领域，所以在国内设计的各种“理所应当”和“约定俗成”就变的那么扎眼；同时因为他们对这个领域是完全陌生的，所以系统的作业指导就变的极其重要，但是咱们中国人是极其勤奋的，所以咱们的软件其实承载了一个很重要的隐含原则，就是别影响人员的发挥，软件设计中就尽量做的更开放更自由，让人员发挥到&lt;strong&gt;极致&lt;/strong&gt;。﻿&lt;/p&gt;
&lt;p&gt;各种软件的智能生产，更多是以辅助的定位出现的，到了国外后发现，国外人民生活很幸福，他们更多需要软件指导他们生产，来保证生产效率有&lt;strong&gt;基本的保障&lt;/strong&gt;，而不是什么发挥&lt;strong&gt;极致&lt;/strong&gt;了。﻿&lt;/p&gt;
&lt;p&gt;所以在国外对软件设计的总体定义有所变化，软件的定义主体从辅助生产变成了指导生产，这是应该是天翻地覆的变化。﻿&lt;/p&gt;
&lt;h3 id=&quot;生产系统的分层&quot;&gt;生产系统的分层﻿&lt;/h3&gt;
&lt;p&gt;一般来说，我们把这类生产系统分成几层来做﻿&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;生产记录﻿&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生产指导﻿&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运营监控﻿&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运营指导﻿&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每个研发阶段肯定都会包含，但是构建的重点一定是有区分的，纵观各种WMS系统构建的重心都是做在&lt;strong&gt;生产记录&lt;/strong&gt;、&lt;strong&gt;运营监控&lt;/strong&gt;两点上，&lt;strong&gt;生产指导&lt;/strong&gt;、&lt;strong&gt;运营指导&lt;/strong&gt;这两个高级部分都是星星点点的做，不成体系。所以，也不是我们的WMS不行，而是这个领域目前目前倾向还没有向智能化推进太多。﻿&lt;/p&gt;
&lt;p&gt;现在这变成了我们巨大的问题，做不好生产指导，就意味着大量的人工发挥不出他们应有的价值，物流这个行业管的就是细节，从一厘一分一毛中来盈利，人员这么巨大的成本不能不关注。﻿&lt;/p&gt;
&lt;h3 id=&quot;质控的困境&quot;&gt;质控的困境﻿&lt;/h3&gt;
&lt;p&gt;库房有个极其重要的岗位叫做&lt;strong&gt;质控&lt;/strong&gt;，这个职位承载的是生产全环节的异常处理和生产指导，所有库房内处理不了的货、卡死的流程、异常的情况全部都是他们来处理。不夸张的说，质控就是一个库房的灵魂所在，一个库房运行的是否高效，&lt;strong&gt;质控&lt;/strong&gt;要起到至关重要的作用。﻿&lt;/p&gt;
&lt;p&gt;但是，哪怕在国内，我们也并没有给他们提供太多的工具，广大的&lt;strong&gt;质控&lt;/strong&gt;人员更多是凭借自己丰富的仓储经验，结合各种数据报表来定位问题、处理问题。﻿&lt;/p&gt;
&lt;p&gt;在国外连基本的生产人员都欠缺的情况下，还希望有一群对仓储生产&lt;strong&gt;游刃有余&lt;/strong&gt;的人并能在没有任何辅助的情况工作就是一件极为苦难的事了。人员的问题可能不是我们研发部可以搞定的，但是工具一定要跟上，让&lt;strong&gt;质控&lt;/strong&gt;这个岗位的要求可以降低，便于他们对于&lt;strong&gt;质控&lt;/strong&gt;的培养，也提升质控的工作效率。﻿&lt;/p&gt;
&lt;h3 id=&quot;运营之殇&quot;&gt;运营之殇﻿&lt;/h3&gt;
&lt;p&gt;分析了一些问题，还有一些没有分析的问题，基于以上种种，海外的运营效率其实一直不高。﻿&lt;/p&gt;
&lt;p&gt;对于系统的改造迫在眉睫。﻿&lt;/p&gt;
&lt;p&gt;我们下一篇具体说说系统改造方案。&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 04:30:00 +0000</pubDate>
<dc:creator>水一</dc:creator>
<og:description>海外落地中的困境﻿ 目前面临主要的问题是“人”，仓储系统主要辅助仓储人员进行生产，所以人变了其实一切就都已经变了，系统在海外面临最大的问题就是人变了。﻿ 这套软件是在国内的运营体系下，用国内运营兄弟的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/breezeli/p/10126185.html</dc:identifier>
</item>
<item>
<title>Java基础教程(14)--嵌套类 - maconn</title>
<link>http://www.cnblogs.com/maconn/p/10126128.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/maconn/p/10126128.html</guid>
<description>&lt;p&gt;  Java允许在一个类中定义另外一个类，这样的类被称为嵌套类，就像下面这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class OuterClass {
    ...
    class NestedClass {
        ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  嵌套类分为两种：静态的和非静态的。声明为static的嵌套类被称为静态嵌套类，非静态嵌套类则被称为内部类：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class OuterClass {
    ...
    static class StaticNestedClass {
        ...
    }
    class InnerClass {
        ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  嵌套类是其所在的外部类的成员。内部类可以访问外部类中的其他成员，即使这个成员被private修饰。静态嵌套类则没有访问外部类中其他成员的权限。作为外部类的一个成员，嵌套类可以被声明为private、public、protected或者包私有的。&lt;br/&gt;  下面是几个为什么要使用嵌套的类原因：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;能够将仅在一个地方使用的类合理地组合。如果一个类可能只对于另外一个类有用，此时将前者组合到后者，可以使得程序包更加简洁。&lt;/li&gt;
&lt;li&gt;增强封装性。假如有两个类A和B，B类需要使用A类中的成员，而恰好该成员又是仅类内部可见（private）的，如果将B定义为A的嵌套类，则B可以使用A的任何成员，而且B也可以声明为外部不可见（private），将B隐藏起来。&lt;/li&gt;
&lt;li&gt;能够使代码可读性和维护性更强。嵌套的类代码相较于顶级类，更靠近它被使用的地方，方便查看。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;一.静态嵌套类&quot;&gt;一.静态嵌套类&lt;/h2&gt;
&lt;p&gt;  就像静态方法和静态变量一样，静态嵌套类是和外部类相关联的。和静态方法一样，静态嵌套类不能直接引用实例变量和实力方法，只能通过一个对象引用。实际上，可以将静态嵌套类看作是一个顶级类，只不过将其嵌套在其他类中方便打包。&lt;br/&gt;  静态嵌套类可以用过外部类的名字去访问：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;OuterClass.StaticNestedClass&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  可以使用下面的语法为静态嵌套类创建对象：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二.内部类&quot;&gt;二.内部类&lt;/h2&gt;
&lt;p&gt;  就像实例方法和实例变量一样，内部类与外部类的实例相关联并且可以直接访问外部类的方法和成员。并且，因为内部类与外部类的实例相关联，因此它内部不能定义静态成员。&lt;br/&gt;  要实例化内部类，必须创建外部类的对象，然后使用这个对象去创建内部类的对象：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;OuterClass outerObject = new OuterClass();
OuterClass.InnerClass innerObject = outerObject.new InnerClass();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  实际上，还有两种特殊的内部类————局部类和匿名类。有关这两种类的内容将会在下文中介绍。强烈建议不要对内部类（包括局部类和匿名类）进行序列化（把对象转换为字节序列的过程称为对象的序列化，有关序列化的内容会在以后的文章中进行介绍）。&lt;/p&gt;
&lt;h2 id=&quot;三.屏蔽现象&quot;&gt;三.屏蔽现象&lt;/h2&gt;
&lt;p&gt;  如果一个类型（例如成员变量或参数）与外部作用域中的类型同名，那么内部作用域中的声明将会屏蔽外部作用域中的声明，这样就不能直接通过名称去访问外部作用域中同名的类型。如下例所示：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class ShadowTest {
    public int x = 0;

    class FirstLevel {
        public int x = 1;

        void methodInFirstLevel(int x) {
            System.out.println(&quot;x = &quot; + x);
            System.out.println(&quot;this.x = &quot; + this.x);
            System.out.println(&quot;ShadowTest.this.x = &quot; + ShadowTest.this.x);
        }
    }

    public static void main(String... args) {
        ShadowTest st = new ShadowTest();
        ShadowTest.FirstLevel fl = st.new FirstLevel();
        fl.methodInFirstLevel(23);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  这个例子的输出如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;x = 23
this.x = 1
ShadowTest.this.x = 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  这个例子中定义了三个名为x的变量，分别是ShadowTest类的成员变量，内部类FirstLevel的成员变量，以及方法methodInFirstLevel的参数。方法methodInFirstLevel的参数x屏蔽了内部类FirstLevel的成员变量x和ShadowTest类的成员变量x。因此，在表示内部类FirstLevel的成员变量x时，要像下面这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;System.out.println(&quot;this.x = &quot; + this.x);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  在表示ShadowTest类的成员变量x时，要像下面这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;System.out.println(&quot;ShadowTest.this.x = &quot; + ShadowTest.this.x);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四.局部类&quot;&gt;四.局部类&lt;/h2&gt;
&lt;p&gt;  局部类是在块（由大括号包围的零条或多条语句）中定义的类。经常会在方法体中见到局部类。下面是一个定义在方法中的局部类：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class OuterClass {
    public void method() {
        ...
        class LocalClass {
            ...
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  局部类可以访问外部类的成员。此外，局部类还可以访问局部变量。然而，局部类只能访问由final修饰的局部变量。当一个局部类访问一个块中的局部变量或参数时，它就捕获了这个变量或者参数。从Java8开始，局部类不但可以访问由final修饰的局部变量和参数，还可以访问近似final的局部变量和参数。近似final的意思是说这个变量或参数的值自从初始化之后就没有修改过。此外，局部类中的变量也会屏蔽定义在外部的同名变量或参数。&lt;br/&gt;  局部类中基本不能定义静态成员。不过也有例外，可以在局部类中定义静态常变量（常变量是指类型为基本数据类型或者String，被声明为final，并且使用编译时常量表达式进行初始化的变量。编译时常量表达式通常是可以在编译时计算的字符串或算术表达式）。&lt;br/&gt;  定义在静态方法中的局部类，只能引用外部类的静态成员。不能在块中定义接口，因为接口是天生静态的。也不能在局部类中定义静态初始化器或者接口。&lt;/p&gt;
&lt;h2 id=&quot;五.匿名类&quot;&gt;五.匿名类&lt;/h2&gt;
&lt;p&gt;  匿名类让代码看上去更加简洁，它能让你同时声明和实例化一个类。它们类似于局部类，只不过匿名类没有名称。如果某个局部类只使用一次，可以将它定义为匿名类。&lt;br/&gt;  局部类是类的声明，而匿名类则是表达式，这意味着匿名类是在一个表达式中定义的。匿名类表达式的语法就像是调用构造器的语法，只不过构造器后面跟的是类的定义。就像下面这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;HelloWorldInterface frenchGreeting = new HelloWorldInterface() {
    String name = &quot;tout le monde&quot;;
    public void greet() {
        greetSomeone(&quot;tout le monde&quot;);
    }
    public void greetSomeone(String someone) {
        name = someone;
        System.out.println(&quot;Salut &quot; + name);
    }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  匿名类的语法包含以下几部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;new操作符；&lt;/li&gt;
&lt;li&gt;匿名类实现的接口或者继承的类；&lt;/li&gt;
&lt;li&gt;包含了构造器参数的小括号。注意，当匿名类实现了某个接口时，由于接口没有构造器，因此使用一个空的小括号来表示；&lt;/li&gt;
&lt;li&gt;匿名类的定义体。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  就像局部类一样，匿名类也可以捕获变量。下面是几条规则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;匿名类可以访问它的外部类的成员；&lt;/li&gt;
&lt;li&gt;匿名类不能访问外部范围中没有使用final修饰或不是近似final的局部变量。&lt;/li&gt;
&lt;li&gt;匿名类中会屏蔽外部范围中同名的类型。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  匿名类在成员的定义上和局部类有相同的规则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;不能在匿名类中声明静态初始化器或成员接口；&lt;/li&gt;
&lt;li&gt;匿名类中可以有静态成员，前提是这个静态成员必须是常变量。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  可以在匿名类中声明以下元素：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;域；&lt;/li&gt;
&lt;li&gt;额外的方法（接口中没有定义的方法）；&lt;/li&gt;
&lt;li&gt;非静态初始化块；&lt;/li&gt;
&lt;li&gt;局部类。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  不能在匿名类中定义构造方法。&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 04:08:00 +0000</pubDate>
<dc:creator>maconn</dc:creator>
<og:description>可以在类的内部定义另外一个类，这种类就是所谓的嵌套类。而嵌套类实际上又分为很多种。本文先介绍了嵌套类的整体概念，然后对每一种具体的嵌套类进行了详细的介绍。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/maconn/p/10126128.html</dc:identifier>
</item>
<item>
<title>SEGAN: Speech Enhancement Generative Adversarial Network - 凌逆战</title>
<link>http://www.cnblogs.com/LXP-Never/p/9986744.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LXP-Never/p/9986744.html</guid>
<description>&lt;p class=&quot;Post-Title&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1703.09452&quot; target=&quot;_blank&quot;&gt;论文原文地址&lt;/a&gt;，&lt;a href=&quot;https://www.cnblogs.com/LXP-Never/p/9986744.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;博客原地址&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;经典的语音增强（speech enhancement）方法有谱减法（spectral subtraction）、维纳滤波（Wiener filtering）、统计模型（statistical model-based methods）和子空间算法（subspace algorithms）。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;论文结合GAN网络提出了SEGAN，并通过实验发现，SEGAN主要优势有以下三点：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;1、提供一个快速语音增强过程，没有因果关系是必要的，因此没有像RNN那样的递归操作。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;2、它基于原始音频做处理，没有提取特征，因此没有对原始数据做出明确的假设。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;3、从不同的说话人和噪声类型中学习，并将他们合并到相同的共享参数中，这使得系统在这些维度上变得简单和一般化。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;　　论文的第二部分，是介绍GAN的，如果有GAN的基础可以跳过这一节。GAN网络是一种对抗模型，可以将样本服从Z分布的样本映射到服从X分布的x。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;关于GAN的更多解释：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;　　有人说GAN强大之处在于可以自动的学习原始真实样本集的数据分布。为什么大家会这么说。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;对于传统的机器学习方法，我们一般会先定义一个模型让数据去学习。(比如：假设我们知道原始数据是高斯分布的，只是不知道高斯分布的参数，这个时候我们定义一个高斯分布，然后利用数据去学习高斯分布的参数，最终得到我们的模型)，但是大家有没有觉得奇怪，感觉你好像事先知道数据该怎么映射一样，只是在学习模型的参数罢了。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;span&gt;GAN则不同，生成模型最后通过噪声生成一个完整的真实数据(比如人脸），说明生成模型已经掌握了从随机噪声到人脸数据的&lt;span&gt;分布规律&lt;/span&gt;。有了这个规律，想生成人脸还不容易，然而这个规律我们事先是不知道的，我们也不知道，如果让你说从随机噪声到人脸应该服从什么分布，你不可能知道。这是一层层映射之后组合起来的非常复杂的分布映射规律。然而GAN的机制可以学习到，也就是说GAN学习到了真实样本集的数据分布。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　我们有一个噪声的输入语音信$\tilde{x}$，我们想要去除噪声获得增强的语音信号$\hat{x}$，我们打算用SEGAN(语音增强生成对抗网络)来实现目的。G网络来执行增强操作，G网络的&lt;span&gt;输入&lt;/span&gt;是噪声语音信号$\tilde{x}$和潜在表示z，其&lt;span&gt;输出&lt;/span&gt;是增强的语音信号$x=G(\tilde{x})$，G网络被设计成完全卷积的，以至于根本没有全连接的网络层，这就使得在整个分层的过程中网络要紧密的关注输入信号之间的相关性，此外卷积网络还减少了训练的参数和训练时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　G网络的结构类似于自动编码器(auto-encoder)。在编码阶段，输入信号被投影，通过被多个strided卷积层压缩，其次是PReLUs(参数整流线性单元)，从滤波器的每个步骤获得卷积结果。我们选择&lt;span&gt;strided卷积&lt;/span&gt;，因为对于GAN训练它相对于其他的池化方法更稳定。抽取直到我们得到一个被称作思维向量c的压缩表示，它与前夫向量z相连接。在解码阶段，编码过程通过分数步长转置卷积(有时称为反卷积)，进行反转，之后就是PReLUs。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　G网络还具有跳过连接、将每个编码层连接到相应的解码层以及绕过在模型中间执行的压缩特性(图二)。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433301/201811/1433301-20181120005512965-986521182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 图二：生成器，encoder-decoder&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这是因为模型的输入和输出共享相同的底层结构，即自然语音。因此如果我们强制所有的信息流过压缩瓶颈，那么为了正确地重构语音波形，可能会丢失许多低级一点的细节。跳过连接直接将波形的细粒度信息传递给解码阶段(例如：相位、对准)。此外，他们提供了更好的训练行为，因为梯度可以更深地流过整个结构,而不会消失很多&lt;sup&gt;[24]&lt;/sup&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　G网络的一个重要特征就是它的端到端的结构，因此它处理16kHz采样的原始语音，去掉所有的中间变换来提取声学特征(与许多常见的管道形成对比)，在这类模型中，我们必须要小心典型的回归损失，如平均绝对误差或均方误差，如原始语音生成模型WaveNET中所提到的&lt;sup&gt;[25]&lt;/sup&gt;。这些损失在我们强假设产生的分布如何成形和强加一些重要的模型限制时起作用（例如不允许多模态分布和将预测偏向所有可能预测的平均值）。我们克服这些限制的解决方案是使用生成对抗设置。通过这种方式，D负责将信息传递给G哪个是真的，哪个是假的，这样G就可以朝向真实稍微修正它的输出波形，去除被D判别是假的噪声信号。D可以理解为学习一些损失，使得G的输出看起来真实。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在初步实验中，我们发现在G的损失上增加一个次要成分是很方便的，这样可以使G的世代与干净的例子之间的距离最小化。为了测量这样的距离，我们选择L1范数，因为它已经被证明在图像处理领域是有效的&lt;sup&gt;[20,26]&lt;/sup&gt;。通过这种方式，我们让对抗性组件添加更多的细粒度和现实的结果。L1范数的大小由一个新的超参数控制。因此，我们选择的LSGAN (Eq. 4)中的G损失变成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433301/201811/1433301-20181120161530054-656948631.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;4.1 数据集&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　为了评估SEGAN的有效性，我们使用Valentini等人的数据集[27]。我们之所以选择它，是因为它是开放的、可用的，而且数据的数量和类型符合我们这项工作的目的:概括了不同说话人的多种噪音。数据集是从语音语音库&lt;sup&gt;[28]&lt;/sup&gt;中选择的30个说话人:28个包含在训练集中，2个包含在测试集合中。为了建立噪声训练集，总共有40种不同的条件被考虑为&lt;sup&gt;[27]&lt;/sup&gt;，10种类型的噪声(2种人为噪声，8种来自于需求数据库&lt;sup&gt;[29]&lt;/sup&gt;)，每种信噪有4个信噪比(SNR)(15dB、10dB、5dB和0dB)。每个说话人在每个条件下都有大约10个不同的句子。为了建立测试集，总共考虑20个不同的条件&lt;sup&gt;[27]&lt;/sup&gt;，5种类型的噪声（全部来自需求数据库），每个噪声有4种信噪比(17.5dB、12.5dB、7.5dB和2.5 dB)。每个测试说话人在每个条件下大约有20个不同的句子。重要的是：使用不同的说话人和条件，测试集是完全看不见的(和训练集不同)。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;4.2 SEGAN步骤&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　模型使用RMSprop&lt;sup&gt;[30]&lt;/sup&gt;对86个epoch进行训练，学习率为0.0002，有效batch size为400，我们将训练示例分成两组(图3)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433301/201811/1433301-20181120163717727-1878054263.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;真实的一对(噪声信号和纯净的信号$(\tilde{x},x)$)和伪造的一对(噪声信号和增强的信号$(\tilde{x},\hat{x})$)。为了使数据集文件符合我们的波形生成目的，我们对原始语音进行下采样从48 kHz到16 kHz。在训练期间，我们通过每隔的500毫秒(50%的重叠)滑动窗口提取大约1秒钟的波形(16384个样本)。在测试期间，我们基本上在整个测试过程中滑动窗口，没有重叠，并在流的末尾连接结果。在训练和测试中，我们对所有输入样本都使用了系数为0.95的高频预强调滤波器(在测试过程中，输出相应地去加重)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　关于L1正则化的$\lambda $权，经过实验，我们将其设置为100，用于整个训练。我们最初将其设为1，但我们观察到，在对抗性的情况下，G损失是两个数量级，所以L1对学习没有实际影响。一旦我们把它设为100，我们就会看到L1中的最小化行为和对抗性的平衡行为。我们假设随着L1值的降低，输出样本的质量增加，有助于G在现实生成方面更有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在结构上，G由22个滤波器宽度31且阶梯N=2的一维阶梯卷积层组成。每层的滤波器数量增加，也就是随着宽度（信号在时间上的持续时间）变窄，深度变大。每一层是样本X特征的映射，每一层的维度是16384*1、8192*16、4096*32、2048*32、1024*64、512*64、256*128、128*128、64*256、32*256、16*512和8*1024。在这里，我们从先前的8*1024维正态分布N (0, I)中采样噪声样本z。如上所述，G的解码器阶段是具有相同滤波器宽度和每层相同滤波器数量的编码器的镜像。然而，忽略连接和添加潜在向量使得每一层的特征映射的数量加倍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　判别网络D的编码器采用和生成网络G相同的一维卷积结构。它适用于卷积分类网络和传统拓扑结构。不同之处在于&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）、得到了16384个双输入通道的样本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）、在$\alpha=0.3$的LeakyReLU非线性之前，它使用了virtual batch-norm&lt;sup&gt;[31]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3)、在最后一层激励层中，有一个一维卷积层(1*1卷积)，其中有一个宽度为1的滤波器，他不会对隐藏层的激励信号进行下采样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　后来(3)减少了分类神经元和隐藏激励线性全连接所需的参数数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;后来(3)减少了最终分类神经元所需参数的数量，该神经元完全连接到所有具有线性行为的隐藏激励。这意味着我们将全连接的组件中所需的参数量从8*1024=8192减少到8。并且1024个信道的合并方式可以通过卷积的参数来学习&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有的项目都是用TEnsorflow开发的，代码可以在&lt;a href=&quot;https://github.com/santi-pdp/segan&quot; target=&quot;_blank&quot;&gt;https://github.com/santi-pdp/segan&lt;/a&gt;找到。我们参考此资源以进一步实现我们的详细信息。在&lt;a href=&quot;http://veu.talp.cat/segan/&quot; target=&quot;_blank&quot;&gt;http://veu.talp.cat/segan/&lt;/a&gt;中提供了增强的语音样本。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;4.1  客观评价&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　为了评估增强语音的质量，我们计算以下客观度量(越高越好)。所有度量将增强后的语音信号与824个未处理的语音进行比较，它们是使用了包含在[1]中的实现来计算的，并可在出版商网站&lt;sup&gt;2&lt;/sup&gt;获取。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PESQ:语音质量感知评价，使用ITU-T P.862.2[33]中建议的宽带版本(0.5 - 4.5)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CSIG：仅关注语音信号&lt;sup&gt;[34]&lt;/sup&gt;(从1到5)的信号失真的平均意见评分(MOS)预测。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CBAK：背景噪声侵入性的MOS预测&lt;sup&gt;[34]&lt;/sup&gt;（从1到5）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;COVL:总体效应的MOS预测&lt;sup&gt;[34]&lt;/sup&gt;（从1到5）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SSNR：分段SNR&lt;sup&gt;[35，P 41]&lt;/sup&gt;（从0到1）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433301/201811/1433301-20181123155046045-1178922079.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;表一：目的比较噪声信号与维纳增强信号和分段增强信号的优劣。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　表一显示了这些度量的结果，为了具有比较参考，如[1]中所提供的，他还显示了当但直接应用有噪声信和基于先验SNR估计[36]使用wiener滤波的信号时，这些度量的结果。可以观察到SEGAN如何使PESQ稍微变差。然而&lt;/span&gt;&lt;span&gt;在所有其他与语音/噪声失真相关的度量中，SEGAN优于Wiener方法。它产生较少的语音失真（CSIG）和更有效地去除噪声（CBAK和SSNR）。因此，它在两个因素(COVL)之间取得了更好的平衡。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;4.2  主观评价&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　为了比较SEGAN增强的噪声信号和维纳基线，还进行了感知测试。为此从测试集中选择了20个句子，由于数据库没有说明每个文件的噪声的数量和类型，所以通过&lt;span&gt;侦听&lt;/span&gt;提供的一些噪声文件来进行选择，试图平衡不同的噪声类型，大多数文件具有低信噪比，但也有少数具有高信噪比的文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　总共有16名听众随机抽取20个句子，对于每个句子，都按随机顺序给出了以下三种形式：噪声信号、维纳增强信号和SEGAN增强信号。对于每个信号，听众使用从1到5的刻度对总体质量进行评级。在描述这5个类别时，指示它们注意信号失真和噪声侵入性(例如，5＝优秀：非常自然的语音，没有退化和不明显的噪声)。听众可以听任意次数的每个信号，并被要求注意三个信号的比较率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在表2中，可以观察到SEGAN如何优于噪声信号和维纳基线。然而，由于噪声信号的信噪比有较大的变化，MOS范围很大，Wiener和SEGAN之间的差异不明显。然而，当侦听者同时比较所有系统时，可以通过减去所比较的两个系统的MOS来计算比较MOS(CMOS)。图4描绘了这种相对比较。我们可以看到SEGAN产生的信号是如何优选的。更具体地，在67%的情况中，SEGAN优于原始（有噪声）信号，而在8%的情况中，有噪声信号是优选的（25%的情况中没有优选）。就Wiener系统而言，53%的案例优选SEGAN，23%的案例优选Wiener（24%的案例不优选）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433301/201811/1433301-20181123164336826-358009231.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;表二：主观评价结果比较噪声信号和维纳增强信号和SEGAN增强信号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433301/201811/1433301-20181123164416660-369572191.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图4：CMOS盒图（Seang-Wiener比较中线位于1）。正值意味着SEGAN是首选。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　本工作在生成对抗框架下实现了一种端到端的语音增强方法。该模型采用编码器-解码器的全卷积结构，能够快速地进行波形块的去噪处理。结果表明，该方法不仅可行，而且可以代表现有方法的有效替代方案。未来可能的工作包括探索更好的卷积结构并在对抗训练中加入感知权重，以便减少当前模型可能引入的高频伪影。需要做进一步的实验来比较SEGAN与其他竞争方式。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　这项工作是由项目TEC2015-69266 P（MiNeCo／FEDER，UE）支持的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;[1] P. C. Loizou, Speech Enhancement: Theory and Practice, 2nd ed.Boca Raton, FL, USA: CRC Press, Inc., 2013.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[2] L.-P. Yang and Q.-J. Fu, “Spectral subtraction-based speech enhancement for cochlear implant patients in background noise,” The Journal of the Acoustical Society of America, vol. 117, no. 3, pp. 1001–1004, 2005.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[3] D. Yu, L. Deng, J. Droppo, J. Wu, Y. Gong, and A. Acero, “A minimum-mean-square-error noise reduction algorithm on melfrequency cepstra for robust speech recognition,” in Proc. of the IEEE Int. Conf. on Acoustics, Speech and Signal Processing ICASSP). IEEE, 2008, pp. 4041–4044.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[4] A. L. Maas, Q. V. Le, T. M. O’Neil, O. Vinyals, P. Nguyen, and A. Y. Ng, “Recurrent neural networks for noise reduction in robust asr.” in Proc. of INTERSPEECH, 2012, pp. 22–25.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[5] J. Ortega-Garcia and J. Gonzalez-Rodriguez, “Overview of speech enhancement techniques for automatic speaker recognition,” in Spoken Language, 1996. ICSLP 96. Proceedings., Fourth International Conference on, vol. 2, Oct 1996, pp. 929–932 vol.2.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[6] M. Berouti, R. Schwartz, and J. Makhoul, “Enhancement of speech corrupted by acoustic noise,” in Proc. of the Int. Conf. on Acoustics, Speech, and Signal Processing (ICASS), vol. 4, Apr 1979, pp. 208–211.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[7] J. Lim and A. Oppenheim, “All-pole modeling of degraded speech,” IEEE Trans. on Acoustics, Speech, and Signal Processing, vol. 26, no. 3, pp. 197–210, Jun 1978.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[8] Y. Ephraim, “Statistical-model-based speech enhancement systems,” Proceedings of the IEEE, vol. 80, no. 10, pp. 1526–1555, Oct 1992.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[9] M. Dendrinos, S. Bakamidis, and G. Carayannis, “Speech enhancement from noise: A regenerative approach,” Speech Communication, vol. 10, no. 1, pp. 45–57, 1991.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[10] Y. Ephraim and H. L. Van Trees, “A signal subspace approach for speech enhancement,” IEEE Trans. on speech and audio processing, vol. 3, no. 4, pp. 251–266, 1995.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[11] S. Tamura and A. Waibel, “Noise reduction using connectionist models,” in Proc. of the IEEE Int. Conf. on Acoustics, Speech and Signal Processing (ICASSP), 1988, pp. 553–556.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[12] S. Parveen and P. Green, “Speech enhancement with missing data techniques using recurrent neural networks,” in Proc. of the IEEE Int. Conf. on Acoustics, Speech and Signal Processing (ICASSP), 2004, pp. 733–736.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[13] X. Lu, Y. Tsao, S. Matsuda, and C. Hori, “Speech enhancement based on deep denoising autoencoder.” in Proc. of INTERSPEECH, 2013, pp. 436–440.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[14] F. Weninger, H. Erdogan, S. Watanabe, E. Vincent, J. Le Roux, J. R. Hershey, and B. Schuller, “Speech enhancement with LSTM recurrent neural networks and its application to noise-robust ASR,” in Proc. of the Int. Conf. on Latent Variable Analysis and Signal Separation, 2015, pp. 91–99.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[15] Y. Xu, J. Du, L.-R. Dai, and C.-H. Lee, “A regression approach to speech enhancement based on deep neural networks,” IEEE/ACM Trans. on Audio, Speech and Language Processing, vol. 23, no. 1, pp. 7–19, 2015.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[16] A. Kumar and D. Florencio, “Speech enhancement in multiplenoise conditions using deep neural networks,” in Proc. of the Int. Speech Communication Association Conf. (INTERSPEECH), 2016, pp. 3738–3742.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[17] D. Wang and J. Lim, “The unimportance of phase in speech enhancement,” IEEE Trans. on Acoustics, Speech, and Signal Processing, vol. 30, no. 4, pp. 679–681, Aug 1982.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[18] K. Paliwal, K. W´ojcicki, and B. Shannon, “The importance of phase in speech enhancement,” Speech Communication, vol. 53, no. 4, pp. 465 – 494, 2011. [Online]. Available: http://www.sciencedirect.com/science/article/pii/S0167639310002086&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[19] I. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio, “Generative adversarial nets,” in Advances in Neural Information Processing Systems (NIPS), 2014, pp. 2672–2680.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[20] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros, “Image-toimage translation with conditional adversarial networks,” ArXiv: 1611.07004, 2016.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[21] X. Mao, Q. Li, H. Xie, R. Y. K. Lau, and Z. Wang, “Least squares generative adversarial networks,” ArXiv: 1611.04076, 2016.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[22] A. Radford, L. Metz, and S. Chintala, “Unsupervised representation learning with deep convolutional generative adversarial networks,” arXiv preprint arXiv:1511.06434, 2015.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[23] K. He, X. Zhang, S. Ren, and J. Sun, “Delving deep into rectifiers: Surpassing human-level performance on imagenet classification,” in Proc. of the IEEE Int. Conf. on Computer Vision (ICCV), 2015, pp. 1026–1034.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[24] ——, “Deep residual learning for image recognition,” in Proc. of the IEEE Conf. on Computer Vision and Pattern Recognition (CVPR), 2016, pp. 770–778.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[25] A. van den Oord, S. Dieleman, H. Zen, K. Simonyan, O. Vinyals, A. Graves, N. Kalchbrenner, A. Senior, and K. Kavukcuoglu, “Wavenet: A generative model for raw audio,” CoRR abs/1609.03499, 2016.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A. Efros, “Context encoders: Feature learning by inpainting,” in Proc. of the IEEE Conf. on Computer Vision and Pattern Recognition (CVPR), 2016, pp. 2536–2544.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[27] C. Valentini-Botinhao, X. Wang, S. Takaki, and J. Yamagishi, “Investigating rnn-based speech enhancement methods for noiserobust text-to-speech,” in 9th ISCA Speech Synthesis Workshop, pp. 146–152.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[28] C. Veaux, J. Yamagishi, and S. King, “The voice bank corpus: Design, collection and data analysis of a large regional accent speech database,” in Int. Conf. Oriental COCOSDA, held jointly with 2013 Conference on Asian Spoken Language Research and Evaluation (O-COCOSDA/CASLRE). IEEE, 2013, pp. 1–4.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[29] J. Thiemann, N. Ito, and E. Vincent, “The diverse environments multi-channel acoustic noise database: A database of multichannel environmental noise recordings,” The Journal of the Acoustical Society of America, vol. 133, no. 5, pp. 3591–3591, 2013.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[30] T. Tieleman and G. Hinton, “Lecture 6.5-RMSprop: divide the gradient by a running average of its recent magnitude,” COURSERA: Neural Networks for Machine Learning 4, 2, 2012.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[31] T. Salimans, I. Goodfellow, W. Zaremba, V. Cheung, A. Radford, and X. Chen, “Improved techniques for training gans,” in Advances in Neural Information Processing Systems (NIPS), 2016, pp. 2226–2234.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[32] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen, C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin et al., “Tensorflow: Large-scale machine learning on heterogeneous distributed systems,” arXiv preprint arXiv:1603.04467, 2016.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[33] P.862.2: Wideband extension to Recommendation P.862 for the assessment of wideband telephone networks and speech codecs, ITU-T Std. P.862.2, 2007.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[34] Y. Hu and P. C. Loizou, “Evaluation of objective quality measures for speech enhancement,” IEEE Trans. on Audio, Speech, and Language Processing, vol. 16, no. 1, pp. 229–238, Jan 2008.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[35] S. R. Quackenbush, T. P. Barnwell, and M. A. Clements, Objective Measures of Speech Quality. Englewood Cliffs, NJ: Prentice-Hall, 1988.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[36] P. Scalart and J. V. Filho, “Speech enhancement based on a priori signal to noise estimation,” in Proc. of the IEEE Int. Conf. on Acoustics, Speech, and Signal Processing (ICASSP), vol. 2, May 1996, pp. 629–632 vol. 2.&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 16 Dec 2018 04:01:00 +0000</pubDate>
<dc:creator>凌逆战</dc:creator>
<og:description>论文原文地址，博客原地址 一、引言 经典的语音增强（speech enhancement）方法有谱减法（spectral subtraction）、维纳滤波（Wiener filtering）、统计模</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LXP-Never/p/9986744.html</dc:identifier>
</item>
<item>
<title>ES5和ES6那些你必须知道的事儿(一) - 薛小白</title>
<link>http://www.cnblogs.com/yangyangxxb/p/10125913.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangyangxxb/p/10125913.html</guid>
<description>&lt;h2&gt;ES5和ES6那些你必须知道的事儿&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;ES5新增的东西&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一、数组方法&lt;/p&gt;
&lt;p&gt;　　1、&lt;span&gt;&lt;strong&gt;forEach&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　    用途：遍历，循环&lt;/p&gt;
&lt;p&gt;　　　 对于空数组不会执行回调函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用法&lt;/span&gt;
&lt;span&gt;
array.forEach(
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(currentValue, index, arr), 
    thisValue
)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;currentValue    必需。当前元素&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;index    可选。当前元素的索引值。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;arr    可选。当前元素所属的数组对象。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;thisValue    可选。传递给函数的值一般用 &quot;this&quot; 值。如果这个参数为空， &quot;undefined&quot; 会传递给 &quot;this&quot; 值&lt;/span&gt;

&amp;lt;button onclick=&quot;numbers.forEach(myFunction)&quot;&amp;gt;点我&amp;lt;/button&amp;gt;
 
&amp;lt;p&amp;gt;数组元素总和：&amp;lt;span id=&quot;demo&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
 
&amp;lt;script&amp;gt;
&lt;span&gt;var&lt;/span&gt; sum = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; numbers = [65, 44, 12, 4&lt;span&gt;];
 
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; myFunction(item) {
    sum &lt;/span&gt;+=&lt;span&gt; item;
    demo.innerHTML &lt;/span&gt;=&lt;span&gt; sum;
}
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2、&lt;strong&gt;&lt;span&gt;map&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　 用途：映射&lt;/p&gt;
&lt;p&gt;　　　 map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。&lt;/p&gt;
&lt;p&gt;　　　 map() 方法按照原始数组元素顺序依次处理元素。&lt;/p&gt;
&lt;p&gt;　　　 map() 方法不会对空数组进行检测。&lt;/p&gt;
&lt;p&gt;　　　 map() 方法不会改变原始数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用法&lt;/span&gt;
&lt;span&gt;
array.map(
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(currentValue,index,arr), 
    thisValue
)


&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; numbers = [65, 44, 12, 4&lt;span&gt;];

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; multiplyArrayElement(num) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; num * document.getElementById(&quot;multiplyWith&quot;&lt;span&gt;).value;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; myFunction() {
    document.getElementById(&lt;/span&gt;&quot;demo&quot;).innerHTML =&lt;span&gt; numbers.map(multiplyArrayElement);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　3、&lt;strong&gt;&lt;span&gt;filter&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　    用途：过滤器&lt;/p&gt;
&lt;p&gt;　　　 filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;          &lt;/strong&gt;filter() 不会对空数组进行检测。&lt;/p&gt;
&lt;p&gt;　　    filter() 不会改变原始数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用法&lt;/span&gt;
&lt;span&gt;
array.filter(
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(currentValue,index,arr), 
    thisValue
)




&lt;/span&gt;&amp;lt;p&amp;gt;最小年龄: &amp;lt;input type=&quot;number&quot; id=&quot;ageToCheck&quot; value=&quot;18&quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;button onclick=&quot;myFunction()&quot;&amp;gt;点我&amp;lt;/button&amp;gt;

&amp;lt;p&amp;gt;所有大于指定数组的元素有？ &amp;lt;span id=&quot;demo&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;script&amp;gt;
&lt;span&gt;var&lt;/span&gt; ages = [32, 33, 12, 40&lt;span&gt;];

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkAdult(age) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; age &amp;gt;= document.getElementById(&quot;ageToCheck&quot;&lt;span&gt;).value;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; myFunction() {
    document.getElementById(&lt;/span&gt;&quot;demo&quot;).innerHTML =&lt;span&gt; ages.filter(checkAdult);
}
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　4、&lt;strong&gt;&lt;span&gt;some&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　     用法：some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。&lt;/p&gt;
&lt;p&gt;　　　  some() 方法会依次执行数组的每个元素：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;　　如果有一个元素满足条件，则表达式返回&lt;em&gt;true&lt;/em&gt; , 剩余的元素不会再执行检测。&lt;/li&gt;
&lt;li&gt;　　如果没有满足条件的元素，则返回false。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　  some() 不会对空数组进行检测。&lt;/p&gt;
&lt;p&gt;　　　  some() 不会改变原始数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用法&lt;/span&gt;
&lt;span&gt;
array.some(
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(currentValue,index,arr),
    thisValue
)
&lt;br/&gt;&lt;/span&gt;&amp;lt;p&amp;gt;最小年龄: &amp;lt;input type=&quot;number&quot; id=&quot;ageToCheck&quot; value=&quot;18&quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;button onclick=&quot;myFunction()&quot;&amp;gt;点我&amp;lt;/button&amp;gt;

&amp;lt;p&amp;gt;判断结果: &amp;lt;span id=&quot;demo&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;script&amp;gt;
&lt;span&gt;var&lt;/span&gt; ages = [4, 12, 16, 20&lt;span&gt;];

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkAdult(age) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; age &amp;gt;= document.getElementById(&quot;ageToCheck&quot;&lt;span&gt;).value;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; myFunction() {
    document.getElementById(&lt;/span&gt;&quot;demo&quot;).innerHTML =&lt;span&gt; ages.some(checkAdult);
}
&lt;/span&gt;&amp;lt;/script&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为true或者false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　5、&lt;strong&gt;&lt;span&gt;every&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　 用法：every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。&lt;/p&gt;
&lt;p&gt;　　　 every() 方法使用指定函数检测数组中的所有元素：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;　　如果数组中检测到有一个元素不满足，则整个表达式返回 &lt;em&gt;false&lt;/em&gt; ，且剩余的元素不会再进行检测。&lt;/li&gt;
&lt;li&gt;　　如果所有元素都满足条件，则返回 true。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　 every() 不会对空数组进行检测。&lt;/p&gt;
&lt;p&gt;　　    every() 不会改变原始数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用法&lt;/span&gt;
&lt;span&gt;
array.every(
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(currentValue,index,arr), 
    thisValue
)



&lt;/span&gt;&amp;lt;p&amp;gt;最小年龄: &amp;lt;input type=&quot;number&quot; id=&quot;ageToCheck&quot; value=&quot;18&quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;button onclick=&quot;myFunction()&quot;&amp;gt;点我&amp;lt;/button&amp;gt;

&amp;lt;p&amp;gt;是否所有年龄都符号条件? &amp;lt;span id=&quot;demo&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;script&amp;gt;
&lt;span&gt;var&lt;/span&gt; ages = [32, 33, 12, 40&lt;span&gt;];

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkAdult(age) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; age &amp;gt;= document.getElementById(&quot;ageToCheck&quot;&lt;span&gt;).value;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; myFunction() {
    document.getElementById(&lt;/span&gt;&quot;demo&quot;).innerHTML =&lt;span&gt; ages.every(checkAdult);
}
&lt;/span&gt;&amp;lt;/script&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回true或者false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　6、&lt;strong&gt;&lt;span&gt;indexOf&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　       用法：indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。　 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用法&lt;/span&gt;
&lt;span&gt;
stringObject.indexOf(searchvalue,fromindex)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。&lt;/span&gt;


&lt;span&gt;//&lt;/span&gt;&lt;span&gt;searchvalue    必需。规定需检索的字符串值。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;fromindex    可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;indexOf() 方法对大小写敏感！&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果要检索的字符串值没有出现，则该方法返回 -1。&lt;/span&gt;



&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

&lt;span&gt;var&lt;/span&gt; str=&quot;Hello world!&quot;&lt;span&gt;
document.write(str.indexOf(&lt;/span&gt;&quot;Hello&quot;) + &quot;&amp;lt;br /&amp;gt;&quot;&lt;span&gt;)
document.write(str.indexOf(&lt;/span&gt;&quot;World&quot;) + &quot;&amp;lt;br /&amp;gt;&quot;&lt;span&gt;)
document.write(str.indexOf(&lt;/span&gt;&quot;world&quot;&lt;span&gt;))

&lt;/span&gt;&amp;lt;/script&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    0&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    -1&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　7、&lt;strong&gt;&lt;span&gt;lastIndexOf&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　    用法：lastIndexOf() 方法可返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。&lt;/p&gt;
&lt;p&gt;　　　 stringObject.lastIndexOf(searchvalue,fromindex)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果在 stringObject 中的 fromindex 位置之前存在 searchvalue，则返回的是出现的最后一个 searchvalue 的位置。&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该方法将从尾到头地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的结尾（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一个字符在 stringObject 中的位置。stringObject 中的字符位置是从 0 开始的。&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lastIndexOf() 方法对大小写敏感！&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果要检索的字符串值没有出现，则该方法返回 -1。&lt;/span&gt;




&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

&lt;span&gt;var&lt;/span&gt; str=&quot;Hello world!&quot;&lt;span&gt;
document.write(str.lastIndexOf(&lt;/span&gt;&quot;Hello&quot;) + &quot;&amp;lt;br /&amp;gt;&quot;&lt;span&gt;)
document.write(str.lastIndexOf(&lt;/span&gt;&quot;World&quot;) + &quot;&amp;lt;br /&amp;gt;&quot;&lt;span&gt;)
document.write(str.lastIndexOf(&lt;/span&gt;&quot;world&quot;&lt;span&gt;))

&lt;/span&gt;&amp;lt;/script&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    0&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    -1&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　8、&lt;strong&gt;&lt;span&gt;reduce&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　    用法：reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。&lt;/p&gt;
&lt;p&gt;　　    reduce() 可以作为一个高阶函数，用于函数的 compose。&lt;/p&gt;
&lt;p&gt;　　　 reduce() 对于空数组是不会执行回调函数的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用法&lt;/span&gt;
&lt;span&gt;
array.reduce(
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(
        total, 
        currentValue, 
        currentIndex, 
        arr
    ), 
    initialValue
)    

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;total    必需。初始值, 或者计算结束后的返回值。&lt;/span&gt;




&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例：四舍五入后计算数组元素的总和&lt;/span&gt;

&amp;lt;button onclick=&quot;myFunction()&quot;&amp;gt;点我&amp;lt;/button&amp;gt;
 
&amp;lt;p&amp;gt;数组元素之和: &amp;lt;span id=&quot;demo&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
 
&amp;lt;script&amp;gt;
&lt;span&gt;var&lt;/span&gt; numbers = [15.5, 2.3, 1.1, 4.7&lt;span&gt;];
 
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getSum(total, num) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; total +&lt;span&gt; Math.round(num);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; myFunction(item) {
    document.getElementById(&lt;/span&gt;&quot;demo&quot;).innerHTML = numbers.reduce(getSum, 0&lt;span&gt;);
}
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　9、&lt;strong&gt;&lt;span&gt;reduceRight&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　   reduceRight()&lt;/code&gt;方法的功能和&lt;code&gt;reduce()&lt;/code&gt;功能是一样的，&lt;/p&gt;
&lt;p&gt;　　　　不同的是&lt;code&gt;reduceRight()&lt;/code&gt;从数组的末尾向前将数组中的数组项做累加。&lt;/p&gt;

</description>
<pubDate>Sun, 16 Dec 2018 03:13:00 +0000</pubDate>
<dc:creator>薛小白</dc:creator>
<og:description>ES5和ES6那些你必须知道的事儿 ES5新增的东西 一、数组方法 1、forEach 用途：遍历，循环 对于空数组不会执行回调函数 2、map 用途：映射 map() 方法返回一个新数组，数组中的元</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangyangxxb/p/10125913.html</dc:identifier>
</item>
<item>
<title>程序猿修仙之路--算法之快速排序到底有多快 - 大菜</title>
<link>http://www.cnblogs.com/zhanlang/p/10125774.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanlang/p/10125774.html</guid>
<description>&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; readability=&quot;2&quot;&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;92322&quot;&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;86356&quot;&gt;&lt;section class=&quot;layout&quot; data-width=&quot;14%&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img src=&quot;https://mpt.135editor.com/mmbiz/cZV2hRpuAPialHghKLjic2ibD7sFcuQ6wraasg86rkGgT9iaficIEibT6z1Yia1NofeAFjibTibK8ibnlTmM4g1hJibEHLsnw/0&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;快排&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;layout&quot; data-width=&quot;86%&quot; readability=&quot;2&quot;&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;section class=&quot;135brush&quot; data-style=&quot;font-size:14px;text-align: justify; line-height: 1.75em;&quot; data-width=&quot;100%&quot; readability=&quot;4&quot;&gt;&lt;p&gt;&lt;span&gt;天下武功，唯快不破!!外功如此，内功亦是如此。今日我们来修炼一门比较快速的排序算法-快速排序。快速排序流行的原因是它实现简单，并且在多数应用中比其他排序算法快的多。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section/&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;习练快速排序，先要了解如下两个概念：&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93344&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;96%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;分治思想&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section readability=&quot;2.5&quot;&gt;&lt;section data-width=&quot;100%&quot; class=&quot;135brush&quot; data-brushtype=&quot;text&quot; readability=&quot;5&quot;&gt;&lt;p&gt;关于排序，江湖盛传有一种分治思想,能大幅度提高排序心法的性能。所谓分治，即：化大为小，分而治之。达到治小而治大的成效。多年来基于分治思想衍生出多种排序心法，然万变不离其宗！&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93344&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;96%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;递归思想&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section readability=&quot;2.5&quot;&gt;&lt;section data-width=&quot;100%&quot; class=&quot;135brush&quot; data-brushtype=&quot;text&quot; readability=&quot;5&quot;&gt;&lt;p&gt;关于递归，其实更像是一种解决问题的手段。我们把具有相同&lt;/p&gt;
&lt;p&gt;解决思路的部分提取出来，循环调用。在code的表现形式上我们更倾向于说：自己调用自己。&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;16401&quot;&gt;&lt;p&gt;&lt;img data-id=&quot;16401&quot; data-role=&quot;guide-img&quot; title=&quot;金属质感分割线&quot; src=&quot;http://image2.135editor.com/mmbiz/cZV2hRpuAPjEIibB1UYw1VMPzscNxReKZVxEh23qB9KgPqFq3uoyBy3M93PcFOunrvjkYVrtfvXMworbBuWAZ4A/0&quot; class=&quot;_135editor&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;16401&quot;&gt;&lt;section&gt;&lt;section&gt;       &lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93479&quot;&gt;&lt;section&gt;&lt;section readability=&quot;1.5&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;img src=&quot;https://image2.135editor.com/cache/remote/aHR0cHM6Ly9tbWJpei5xbG9nby5jbi9tbWJpel9wbmcvbGRGYUJOU2t2SGhmUmVpYlZyZktneE45N3FjRngzTFZ2eXlqdDFHZkhMYXFFN3dQQWNpY05DS2dPbUhIeTlVM21kQzZzcWNYcFNaTXR0N05RT0x4ekp4QS8w&quot; alt=&quot;&quot; data-width=&quot;80%&quot;/&gt;                &lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;135brush&quot; readability=&quot;3&quot;&gt;&lt;p&gt;虽然江湖上算法内功繁多，但是好的算法小编认为必须符合以下几个条件，方能真正提高习练者实力：&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;86014&quot;&gt;&lt;section readability=&quot;4&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;em class=&quot;autonum&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/em&gt;&lt;/span&gt;            &lt;/p&gt;
&lt;/section&gt;&lt;section data-bgless=&quot;spin&quot; data-bglessp=&quot;120&quot;&gt;&lt;span class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;时间复杂度（运行时间）&lt;/span&gt;        &lt;/section&gt;&lt;section data-style=&quot;text-align: justify;font-size: 12px; line-height: inherit;&quot; class=&quot;135brush&quot; readability=&quot;8&quot;&gt;&lt;p&gt;&lt;span&gt;在算法时间复杂度维度，我们主要对比较和交换的次数做对比，其他不交换元素的算法，主要会以访问数组的次数的维度做对比。。&lt;/span&gt;            &lt;/p&gt;
&lt;p&gt;&lt;span&gt;        其实有很多修炼者对于算法的时间复杂度有点模糊，分不清什么所谓的 O(n),O(nlogn),O(logn)...等，也许下图对一些人有一些更直观的认识。&lt;/span&gt; &lt;/p&gt;

&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;span data-role=&quot;width&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/i/608996/201408/141025088894028.png&quot; data-width=&quot;100%&quot; border=&quot;0&quot; mapurl=&quot;&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;                    &lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src=&quot;https://image2.135editor.com/cache/remote/aHR0cHM6Ly9tbWJpei5xbG9nby5jbi9tbWJpel9wbmcvN1FSVHZrSzJxQzdiVWtOT3k5YTRIMUg2Zld5WU16alROUmQxdUxMaWJKcVZ2cHNHUWhqTEpBc1pBdjkwa285S1ZZZGY1ZW5PREwxaWN1TTRJS28zOTlhdy8w&quot; data-width=&quot;100%&quot; alt=&quot;&quot;/&gt;                        &lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;86014&quot;&gt;&lt;section readability=&quot;2&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;2&lt;/em&gt;&lt;/span&gt;            &lt;/p&gt;
&lt;/section&gt;&lt;section data-bgless=&quot;spin&quot; data-bglessp=&quot;120&quot;&gt;&lt;span class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;空间复杂度（额外的内存使用）&lt;/span&gt;        &lt;/section&gt;&lt;section data-style=&quot;text-align: justify;font-size: 12px; line-height: inherit;&quot; class=&quot;135brush&quot; readability=&quot;4&quot;&gt;&lt;p&gt;&lt;span&gt;排序算法的额外内存开销和运行时间同等重要。 就算一个算法时间复杂度比较优秀，空间复杂度非常差，使用的额外内存非常大，菜菜认为它也算不上一个优秀的算法。&lt;/span&gt;&lt;br/&gt;           &lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;86014&quot;&gt;&lt;section readability=&quot;2&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;3&lt;/em&gt;&lt;/span&gt;            &lt;/p&gt;
&lt;/section&gt;&lt;section data-bgless=&quot;spin&quot; data-bglessp=&quot;120&quot;&gt;&lt;span class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;结果的正确性&lt;/span&gt;        &lt;/section&gt;&lt;section data-style=&quot;text-align: justify;font-size: 12px; line-height: inherit;&quot; class=&quot;135brush&quot; readability=&quot;4&quot;&gt;&lt;p&gt;&lt;span&gt;这个指标是菜菜自己加上的，我始终认为一个优秀的算法最终得到的结果必须是正确的。就算一个算法拥有非常优秀的时间和空间复杂度，但是结果不正确，导致修炼者经脉逆转，走火入魔，又有什么意义呢？&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;16401&quot;&gt;&lt;p&gt;&lt;img data-id=&quot;16401&quot; data-role=&quot;guide-img&quot; title=&quot;金属质感分割线&quot; src=&quot;http://image2.135editor.com/mmbiz/cZV2hRpuAPjEIibB1UYw1VMPzscNxReKZVxEh23qB9KgPqFq3uoyBy3M93PcFOunrvjkYVrtfvXMworbBuWAZ4A/0&quot; class=&quot;_135editor&quot; alt=&quot;&quot;/&gt;     &lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;86523&quot;&gt;&lt;section&gt;气运丹田，开启修炼之路&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;89715&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-id=&quot;89715&quot; data-role=&quot;guide-img&quot; title=&quot;向下箭头分割线GIF动态&quot; src=&quot;http://image2.135editor.com/mmbiz_gif/4BY4nn87ITkYibXSrg4akQicFianNJCG2W3iaKXPXwZkxWQF5Dth5XkjRDxFr7coiajCXeKoKL1jqLT501iazy11pxXw/0?wx_fmt=gif&quot; class=&quot;_135editor&quot; alt=&quot;&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93984&quot;&gt;&lt;section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;原理&lt;/section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;92737&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section class=&quot;135brush&quot;&gt;基本思想：选取一个元素作为分割点，通过遍历把小于分割点的元素放到分割点左边，把大于分割点的元素放到分割点元素右边。然后再按此方法对两部分数据分别排序，以此类推，直到分割的数组大小为1。 整个排序过程可以递归进行，以此达到整个数据变成有序序列。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot; readability=&quot;3&quot;&gt;&lt;p&gt;&lt;span&gt;实现快速排序的方式有很多，其中以类似指针移动方式最为常见，为什么最常见呢？因为它的空间复杂度为O（1），也就是说是原地排序&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot; readability=&quot;19&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  我们从待排序的记录序列中选取一个记录(通常第一个)作为基准元素(称为key)key=arr[left]，然后设置两个变量，left指向数列的最左部，right指向数据的最右部。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s1.51cto.com/images/20180507/1525656870344040.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.   &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;key首先与arr[right]进行比较，如果arr[right]&amp;lt;key，则arr[left]=arr[right]将这个比key小的数放到左边去，如果arr[right]&amp;gt;key则我们只需要将right--，right--之后，再拿arr[right]与key进行比较，直到arr[right]&amp;lt;key交换元素为止。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s1.51cto.com/images/20180507/1525656905815064.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.   &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;如果右边存在arr[right]&amp;lt;key的情况，将arr[left]=arr[right]，接下来，将转向left端，拿arr[left ]与key进行比较，如果arr[left]&amp;gt;key,则将arr[right]=arr[left]，如果arr[left]&amp;lt;key，则只需要将left++,然后再进行arr[left]与key的比较。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s1.51cto.com/images/20180507/1525656953849703.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.   &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;然后再移动right重复上述步骤&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s1.51cto.com/images/20180507/1525656981476751.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.   &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;最后得到 {23 58 13 10 57 62} 65 {106 78 95 85}，再对左子数列与右子数列进行同样的操作。最终得到一个有序的数列。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot;&gt;
&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;7&quot;&gt;&lt;section readability=&quot;3&quot;&gt;&lt;section class=&quot;135brush&quot; readability=&quot;6&quot;&gt;&lt;p&gt;{23 58 13 10 57 62} 65 {106 78   95 85}&lt;/p&gt;
&lt;p&gt;{10 13} 23 {58 57 62} 65 {85 78 95} 106&lt;/p&gt;
&lt;p&gt;10 13 23 57 58 62 65 78 85 95 106&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot;&gt;
&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93984&quot;&gt;&lt;section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;性能特点&lt;/section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;92737&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section class=&quot;135brush&quot;&gt;关于复杂度相关O（n）等公式，我这里需要强调一点,公式代表的是算法的复杂度增长的趋势，而不是具体计算复杂度的公式。比如：O（n²）和O（n）相比较，只是说明 O(n²)增长的趋势要比o(n)快，并不是说明O(n²)的算法比O(n)的算法所用时间一定就要多。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot;&gt;
&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot; readability=&quot;22&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 时间复杂度：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        快速排序平均时间复杂度为O(nlogn),最好情况下为O(nlogn)，最坏情况下O(n²)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 空间复杂度：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        基于以上例子来实现的快排，空间复杂度为O(1),也就是原地排序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 3. 稳定性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        举个例子：&lt;/span&gt;&lt;span&gt;待排序数组:int a[] ={1, 2, 2, 3, 4, 5, 6};&lt;/span&gt;&lt;span&gt;在快速排序的随机选择比较子(即pivot)阶段：&lt;/span&gt;&lt;span&gt;若选择a[2]（即数组中的第二个2）为比较子，，而把大于等于比较子的数均放置在大数数组中，则a[1]（即数组中的第一个2）会到pivot的右边， 那么数组中的两个2非原序（这就是“不稳定”）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;若选择a[1]为比较子，而把小于等于比较子的数均放置在小数数组中，则数组中的两个2顺序也非原序。可见快速排序不是稳定的排序。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot;&gt;
&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93984&quot;&gt;&lt;section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;改进&lt;/section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;7&quot;&gt;&lt;section&gt;&lt;section class=&quot;135brush&quot;&gt;通过以上分析各位侠士是否能够分析出来快速排序有哪些地方存在瑕疵呢？&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 切分不平衡：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        也就是说我们选取的切分元素距离数组中间值的元素位置很远，极端情况下会是数组最大或最小的元素，这就导致了划分出来的大数组会被划分为很多次。针对此情况，我们可以取数组多个元素来平衡这种情况，例如：我们可以随机选取三个或者五个元素，取其中间值的元素作为分割元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 小数组：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        当快速排序切分为比较小的数组时候，也会利用递归调用自己。在这种小数组的情况下，其实一些基础排序算法反而比快速排序要快。当数组比较小的时候不妨尝试一下切换到插入排序。具体多小是小呢？一般5-15吧，仅供参考。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 重复元素：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        在我们实际应用中经常会遇到重复元素比较多的情况，按照快排的思想，相同元素是会被频繁移动和划分的，其实这完全没有必要。我们该怎么办呢？我们可以把数组切换为三部分：大于-等于-小于 三部分数组，这样等于的那部分数组就可以避免移动了，不过落地的代码复杂度要高很多，有兴趣的同学可以实现一下。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93984&quot;&gt;&lt;section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;使用场景&lt;/section&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot; readability=&quot;9&quot;&gt;&lt;p&gt;&lt;span&gt;1. 当一个数组大小为中型以上的数量级时，菜菜认为可以使用快速排序，并且伴随着数组的持续增大，快速排序的性能趋于平均运行时间。至于多大的数组为中型，一般认为50+ 吧，仅供参考。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 当一个数组为无序并且重复元素不多时候，也适合快速排序。为什么提出重复元素这个点呢？因为如果重复元素过多，本来重复元素是无需排序的，但是快速排序还是要划分为更多的子数组来比较，这个时候也许插入排序更适合&lt;/span&gt;。&lt;/p&gt;
&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;16401&quot;&gt;&lt;p&gt;&lt;img data-id=&quot;16401&quot; data-role=&quot;guide-img&quot; title=&quot;金属质感分割线&quot; src=&quot;http://image2.135editor.com/mmbiz/cZV2hRpuAPjEIibB1UYw1VMPzscNxReKZVxEh23qB9KgPqFq3uoyBy3M93PcFOunrvjkYVrtfvXMworbBuWAZ4A/0&quot; class=&quot;_135editor&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot;&gt;
&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://mpt.135editor.com/mmbiz_gif/3TjM42ia414nZKc2icUulQYDHpl6xAj2MYrLvW9z4E2QkMnvicrlfGfVnqLzc1QXJeUQ97uLnZv7P9ic6bZiaYjgecQ/640?wx_fmt=gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;86523&quot;&gt;&lt;section&gt;试炼一发吧&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;89715&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-id=&quot;89715&quot; data-role=&quot;guide-img&quot; title=&quot;向下箭头分割线GIF动态&quot; src=&quot;http://image2.135editor.com/mmbiz_gif/4BY4nn87ITkYibXSrg4akQicFianNJCG2W3iaKXPXwZkxWQF5Dth5XkjRDxFr7coiajCXeKoKL1jqLT501iazy11pxXw/0?wx_fmt=gif&quot; class=&quot;_135editor&quot; alt=&quot;&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;88173&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;autonum&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;c#武器版本&lt;/p&gt;
&lt;/section&gt;&lt;section&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; class=&quot;_135editor&quot; readability=&quot;22&quot;&gt;&lt;pre data-source-line=&quot;69&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; Main(string[] args)
       {&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;            List&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt;();&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;            for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;; i++)&lt;/code&gt;&lt;code class=&quot;hljs&quot;&gt;            {
               data.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random(Guid.NewGuid().GetHashCode()).&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;));
           }            
           Console.&lt;span class=&quot;hljs-keyword&quot;&gt;WriteLine&lt;/span&gt;($&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;zh-hans&quot;&gt;原始数据：&lt;/span&gt; {string.Join(&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;, data)}&quot;&lt;/span&gt;);
           quickSort(data, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, data.&lt;span class=&quot;hljs-keyword&quot;&gt;Count&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);            
           Console.&lt;span class=&quot;hljs-keyword&quot;&gt;WriteLine&lt;/span&gt;($&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;zh-hans&quot;&gt;排序数据：&lt;/span&gt; {string.Join(&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;, data)}&quot;&lt;/span&gt;);
           Console.&lt;span class=&quot;hljs-keyword&quot;&gt;Read&lt;/span&gt;();&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;        } &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;    public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; quickSort(List &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; right)&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;        {  &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;            int&lt;/span&gt; pivot = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  &lt;/code&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;            if&lt;/span&gt;&lt;span&gt; (left &amp;lt; right)&lt;/span&gt;&lt;code class=&quot;hljs&quot;&gt;            {
               pivot = partition(&lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;, left, right);
               quickSort(&lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;, left, pivot - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
               quickSort(&lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;, pivot + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, right);
           }
       }        
       &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; partition(List&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; right)&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;        {   &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;            int&lt;/span&gt; key = &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;[left];  &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;            while&lt;/span&gt; (left &amp;lt; right)&lt;/code&gt;&lt;code class=&quot;hljs&quot;&gt;            {                
               &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (left &amp;lt; right &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;[right] &amp;gt;= key)
               {
                   right--;&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;                }&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;                source&lt;/span&gt;[left] = &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;[right]; &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;                while&lt;/span&gt; (left &amp;lt; right &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;[left] &amp;lt;= key)&lt;/code&gt;&lt;code class=&quot;hljs&quot;&gt;                {
                   left++;&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;                }   &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;                source&lt;/span&gt;[right] = &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;[left];&lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;            } &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;            source&lt;/span&gt;[left] = key;  &lt;/code&gt;&lt;br/&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;            return&lt;/span&gt; left;&lt;/code&gt;&lt;code class=&quot;hljs&quot;&gt;        }&lt;/code&gt;
&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;88173&quot;&gt;&lt;section readability=&quot;10&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;autonum&quot; data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;2&quot;&gt;2&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;golang 武器版&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;135brush&quot; readability=&quot;20&quot;&gt;&lt;pre data-source-line=&quot;118&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;package main&lt;/p&gt;
&lt;pre&gt;
&lt;br/&gt;import (&lt;br/&gt;&quot;fmt&quot;&lt;br/&gt;&quot;math/rand&quot; &lt;br/&gt;)&lt;br/&gt;func main() {&lt;br/&gt;var data []int  for i := 0; i &amp;lt; 10; i++ {&lt;br/&gt;data = append(data, rand.Intn(100))&lt;br/&gt;}&lt;br/&gt;fmt.Println(data)&lt;br/&gt;quickSort(data[:], 0, len(data)-1)&lt;br/&gt;fmt.Println(data) &lt;br/&gt;} &lt;br/&gt;func quickSort(source []int, left int, right int) {&lt;br/&gt;var pivot = 0&lt;br/&gt;if left &amp;lt; right {&lt;br/&gt;pivot = partition(source, left, right)&lt;br/&gt;quickSort(source, left, pivot-1)&lt;br/&gt;quickSort(source, pivot+1, right)&lt;br/&gt;} &lt;br/&gt;}&lt;br/&gt;func partition(source []int, left int, right int) int {&lt;br/&gt;var key = source[left]  for left &amp;lt; right {&lt;br/&gt;for left &amp;lt; right &amp;amp;&amp;amp; source[right] &amp;gt;= key {&lt;br/&gt;right--&lt;br/&gt;}&lt;br/&gt;source[left] = source[right]&lt;br/&gt;for left &amp;lt; right &amp;amp;&amp;amp; source[left] &amp;lt;= key {&lt;br/&gt;left++          &lt;br/&gt;&lt;span&gt;           &lt;/span&gt;}&lt;br/&gt;source[right] = source[left]&lt;br/&gt;}&lt;br/&gt;source[left] = key&lt;br/&gt;&lt;span&gt; &lt;/span&gt;return left&lt;br/&gt;}&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre data-source-line=&quot;162&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;_135editor&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;90129&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://mpt.135editor.com/mmbiz_png/fgnkxfGnnkQZKsfEiaKAKMiavDdiaVhEcheFPYyjl8SicH2KZMmw3aBo9HoibGFfWYR8QSmiaTwhk9OV7j2dghEFmdkA/0?wx_fmt=png&quot; data-width=&quot;80%&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;section data-role=&quot;paragraph&quot;&gt;
&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87549&quot;&gt;&lt;section/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93734&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src=&quot;https://www.cnblogs.com/images/cnblogs_com/zhanlang/1295643/o_qrcode_for_gh_4c89835a6125_344.jpg&quot; data-width=&quot;100%&quot; alt=&quot;&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;菜菜出品&lt;/section&gt;&lt;section&gt;见证成长之路&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;img src=&quot;http://image2.135editor.com/cache/remote/aHR0cHM6Ly9tbWJpei5xbG9nby5jbi9tbWJpel9wbmcvN1FSVHZrSzJxQzc4Q29xTUFFVXdLZXJ3Qm0walJ6ekdqQ3VyM1FaWGRqZzZzY1FtMVlZU3ozbkNUNWphVDQzUVo3aWF5dVNIZkVid2hGa2lhc2NCWHYydy8wP3d4X2ZtdD1wbmc=&quot; data-width=&quot;100%&quot; alt=&quot;&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;/section&gt;</description>
<pubDate>Sun, 16 Dec 2018 02:45:00 +0000</pubDate>
<dc:creator>大菜</dc:creator>
<og:description>快排 天下武功，唯快不破!!外功如此，内功亦是如此。今日我们来修炼一门比较快速的排序算法-快速排序。快速排序流行的原因是它实现简单，并且在多数应用中比其他排序算法快的多。 习练快速排序，先要了解如下两</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanlang/p/10125774.html</dc:identifier>
</item>
</channel>
</rss>