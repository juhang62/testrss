<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>CYQ.Data 支持分布式数据库（主从备）高可用及负载调试 - 路过秋天</title>
<link>http://www.cnblogs.com/cyq1162/p/10651706.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cyq1162/p/10651706.html</guid>
<description>&lt;p&gt;继上一篇，介绍 &lt;a href=&quot;https://github.com/cyq1162/cyqdata&quot; target=&quot;_blank&quot;&gt;CYQ.Data&lt;/a&gt; 在分布式缓存上支持高可用，详见：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/cyq1162/p/10634267.html&quot;&gt;CYQ.Data 对于分布式缓存Redis、MemCache高可用的改进及性能测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇介绍 CYQ.Data 在对数据库层面对分布式数据库的主从备的高可用的及负载调度。&lt;/p&gt;
&lt;p&gt;目前框架支持的数据库（及缓存）种类为：&lt;/p&gt;
&lt;p&gt;Support：Txt、Xml、Access、Sqlite、Mssql、Mysql、Oracle、Sybase、Postgres、Redis、MemCache。&lt;/p&gt;
&lt;p&gt;下面就开始介绍：&lt;/p&gt;

&lt;h3&gt;1、集群与故障转移&lt;/h3&gt;
&lt;p&gt;想当年，在北京联通的项目上，为了实现数据库集群故障转移，那可是一堆人在机房折腾的死去活来。&lt;/p&gt;
&lt;p&gt;还要开什么研论会，要机房，网络设计人员，和项目层面的三方人码动手。&lt;/p&gt;
&lt;p&gt;折腾到最后的结果，浪费了一台服务器做热备。&lt;/p&gt;
&lt;h3&gt;2、由客户端调度主从备，实现故障转移与负载。&lt;/h3&gt;
&lt;p&gt;CYQ.Data 在很早前，就实现了主从备的切换了，只是没有实现高可用。&lt;/p&gt;
&lt;p&gt;这一次，迎合NET Core 在未来分布式应用下的需求，补上了这个功能。&lt;/p&gt;

&lt;p&gt;下面来看简单的使用过程：&lt;/p&gt;
&lt;h3&gt;1、指定配置外链：&lt;/h3&gt;
&lt;p&gt;原有的配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;&amp;lt;connectionStrings&amp;gt;&lt;br/&gt;&amp;lt;add name=&quot;Conn&quot; connectionString=&quot;server=.;database=test;uid=sa;pwd=123456&quot;/&amp;gt;&lt;br/&gt;&amp;lt;add name=&quot;Conn_Bak&quot; connectionString=&quot;server=.;database=test;uid=sa;pwd=123456&quot;/&amp;gt;&lt;br/&gt;&amp;lt;add name=&quot;Conn_Slave1&quot; connectionString=&quot;.;database=test;uid=sa;pwd=123456&quot;/&amp;gt;&lt;br/&gt;&amp;lt;add name=&quot;Conn_Slave2&quot; connectionString=&quot;server=.;database=demo;uid=sa;pwd=123456&quot;/&amp;gt;&lt;br/&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将配置写在原的config中，是当修改时，会引发（Window下）整个程序重启（而NetCore默认不重启，需要特殊处理配置文件重新加载事件）。&lt;/p&gt;
&lt;p&gt;改进后配置（文件后缀可以指定*.ini，*.txt, *.json）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;add name=&quot;Conn&quot; value=&quot;conn.json&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对应的conn.json 文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;{&lt;br/&gt;　　&quot;Conn&quot;: {&lt;br/&gt;　　　　　　　　&quot;Master&quot;: &quot;server=.;database=demo;uid=sa;pwd=123456&quot;,&lt;br/&gt;　　　　　　　　&quot;Backup&quot;: &quot;server=.;database=test;uid=sa;pwd=123456&quot;,&lt;br/&gt;　　　　　　　　&quot;Slave&quot;: [&lt;br/&gt;　　　　　　　　　　　　　　&quot;server=.;database=test;uid=sa;pwd=123456&quot;,&lt;br/&gt;　　　　　　　　　　　　　　&quot;server=.;database=demo;uid=sa;pwd=123456&quot;&lt;br/&gt;　　　　　　　　　　　　　　]&lt;br/&gt;　　　　　　}&lt;br/&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;将配置外置后，程序会自动监控文件的变化，每次修改都会即时生效，内部自动调整算法，实现高可用。&lt;/p&gt;
&lt;p&gt;配置后好，剩下的问题就是你有多少台服务器可以安装数据库实例了。&lt;/p&gt;
&lt;h3&gt;2、数据库主从备的机制说明：&lt;/h3&gt;
&lt;p&gt;主备：当主库发生故障时，会自动切换到备库。&lt;/p&gt;
&lt;p&gt;主从：主库负责写，从库负责读。&lt;/p&gt;
&lt;h3&gt;3、关于读的负载调度：&lt;/h3&gt;
&lt;p&gt;只要是被加入Slave的链接，都会顺序被执行。&lt;/p&gt;
&lt;p&gt;因此，如果写的任务不多，可以把主库的链接也加入到Slave中，分担读的压力。&lt;/p&gt;
&lt;p&gt;再把备库的链接都加载入到Slave中，反正备库平时也用不上，一样可以继续分担读的压力。&lt;/p&gt;
&lt;p&gt;另外，Slave由于是顺序调度，所以要加大某实例的负载时，可以将该实例的链接复制多份，以提高被执行的概率。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;因此，只要配合服务器性能监控，再动态修改链接指向的配置文件，即可实现高可用的性能负载。&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;下面来做一个测试实验：&lt;/p&gt;

&lt;p&gt; 首先，创建了五个数据库：MasterDB、BackupDB、SlaveDB1、SlaveDB2、SlaveDB2。&lt;/p&gt;
&lt;p&gt;然后：数据库间的同步，这一步就先省了。&lt;/p&gt;
&lt;p&gt;写测试代码，运行两个线程，分别是读与写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MasterBackupSlave
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Start()
        {
            AppConfig.Log.LogConn &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Conn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ThreadPool.QueueUserWorkItem(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; WaitCallback(Read), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Read&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            ThreadPool.QueueUserWorkItem(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; WaitCallback(Write), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Write&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.Read();
        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Read(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; threadFlag)
        {
           
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (SysLogs logs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysLogs())
                {
                    logs.Fill(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Read : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ((MAction)logs).DataBase);
                }
                Thread.Sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
            }
        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Write(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; threadFlag)
        {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (SysLogs logs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysLogs())
                {
                    logs.Message &lt;/span&gt;=&lt;span&gt; Guid.NewGuid().ToString();
                    logs.Insert();

                    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--------------Write : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ((MAction)logs).DataBase);
                }
                Thread.Sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后运行，看到以下输出，写在主库，读在从库中切换：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/17408/201904/17408-20190403225220385-1319594767.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着，我们测试主备，把主库弄挂了，这时会切到从，再把主库恢复，这时候会切回来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/17408/201904/17408-20190403225325326-889163181.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，我们随时减少或增加从库负载的实例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/17408/201904/17408-20190403230119120-1241657046.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;没错，和分布式缓存一样，框架已经从单机的应用，向分布式高负载和高可用性进化了。&lt;/p&gt;

&lt;p&gt;别问我为什么，总之，就是这么强大。&lt;/p&gt;
</description>
<pubDate>Wed, 03 Apr 2019 15:40:00 +0000</pubDate>
<dc:creator>路过秋天</dc:creator>
<og:description>继上一篇，介绍 CYQ.Data 在分布式缓存上支持高可用，详见：CYQ.Data 对于分布式缓存Redis、MemCache高可用的改进及性能测试，本篇介绍 CYQ.Data 在对数据库层面对分布式</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cyq1162/p/10651706.html</dc:identifier>
</item>
<item>
<title>函数概述 - 马一特</title>
<link>http://www.cnblogs.com/mayite/p/10652470.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mayite/p/10652470.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;本文是Python通用编程系列教程，已全部更新完成，实现的目标是从零基础开始到精通Python编程语言。本教程不是对Python的内容进行泛泛而谈，而是精细化，深入化的讲解，共5个阶段，25章内容。所以，需要有耐心的学习，才能真正有所收获。虽不涉及任何框架的使用，但是会对操作系统和网络通信进行全局的讲解，甚至会对一些开源模块和服务器进行重写。学完之后，你所收获的不仅仅是精通一门Python编程语言，而且具备快速学习其他编程语言的能力，无障碍阅读所有Python源码的能力和对计算机与网络的全面认识。对于零基础的小白来说，是入门计算机领域并精通一门编程语言的绝佳教材。对于有一定Python基础的童鞋，相信这套教程会让你的水平更上一层楼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-函数介绍&quot;&gt;一 函数介绍&lt;/h2&gt;
&lt;h3 id=&quot;函数的由来&quot;&gt;1. 函数的由来&lt;/h3&gt;
&lt;p&gt;基于第一阶段的项目，我们可以发现存以下几个问题，函数就是用来解决这些问题的。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;程序组织结构不清晰，可读性差&lt;/li&gt;
&lt;li&gt;代码冗余&lt;/li&gt;
&lt;li&gt;管理维护的难度极大，扩展性&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;函数的定义与调用说明&quot;&gt;2. 函数的定义与调用说明&lt;/h3&gt;
&lt;p&gt;需要注意的是，函数名本质和变量类似(打印一个变量你直接看到的结果是变量的值，这是龟叔在内部做了转化，打印函数你直接看到的结果是一个内存地址，从底层上讲，变量名与函数名其实都是与内存地址对应的，因为定义的过程就是在开辟内存空间)，所以函数名定义规则与定义变量名一致。函数就像是一个功能，这个功能就是要执行一个动作，所以约定俗成写成动词或者动词词组。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;具备某一个功能的工具就是程序的中函数&lt;/li&gt;
&lt;li&gt;事先准备工具的过程就是函数的函数的定义&lt;/li&gt;
&lt;li&gt;把准备好的工具拿来就用即为函数的调用&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;所以函数的使用必须遵循：先定义，再调用&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二-函数的定义&quot;&gt;二 函数的定义&lt;/h2&gt;
&lt;h3 id=&quot;函数定义说明&quot;&gt;1. 函数定义说明&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def 函数名(参数1,参数2,...):
    &quot;&quot;&quot;
    文档注释
    &quot;&quot;&quot;
    代码块1
    代码块2
    代码块2
    return 返回值

# def:定义函数的关键字
# 函数名：是用来调用函数的，
# 函数名的命名必须能反映出函数的功能
# 文档注释：描述该函数，来增强函数的可读性
# 代码块：函数的功能实现代码
# return：函数的返回值&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有了函数之后，如需实现以下打印功能，我们可以使用函数来完成。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# print('========================')
# print('hello Albert')
# print('========================')

# 1 先定义
def print_sym(sym, count):  # print_sym=&amp;lt;function print_msg at 0x000001B2A33698C8&amp;gt;
    print(sym * count)


def print_msg(msg):
    print('\033[045m%s\033[0m' % msg)


# 2 再调用（函数名加括号就是在调用函数）

print(print_sym)  # 函数名对应一个内存地址
print_sym('#', 30)
print_msg('hello Albert')
print_sym('#', 30)

# 关于函数的参数，现在只需要知道定义的时候有几个参数，调用的时候就传入几个参数。&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义函数的三种形式&quot;&gt;2. 定义函数的三种形式：&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 1 有参函数：当函数体的功能依赖于传入的参数时，我们就使用有参函数
def max2(x, y):  # x=100,=y101

    if x &amp;gt; y:
        print(x)
    else:
        print(y)


max2(100, 101)

# 2 无参函数：当函数体的功能不使用传入的参数时，我们传入参数显然是没有必要的
def func():
    print('----------------------')
    print('---soft run-----------')
    print('----------------------')


def interact():
    name = input('username&amp;gt;&amp;gt;: ').strip()
    pwd = input('password&amp;gt;&amp;gt;: ').strip()
    print(name, pwd)


interact()  # 定义时无参，意味着调用时也无须传入参数
func()  # 定义时无参，意味着调用时也无须传入参数


# 3 空函数:函数体为pass，事先定义功能组织结构，通过调用函数执行某个功能
def auth(username, password):
    &quot;&quot;&quot;
    这是一个用户认证功能，在Pycharm中，当输入三引号回撤之后，下面的三行代码自动出现
    :param username: 
    :param password: 
    :return: 
    &quot;&quot;&quot;

def put():
    &quot;&quot;&quot;
    上传功能
    :return:
    &quot;&quot;&quot;
    pass


def get():
    &quot;&quot;&quot;
    下载功能
    :return:
    &quot;&quot;&quot;
    pass


def ls():
    &quot;&quot;&quot;
    list contents
    :return:
    &quot;&quot;&quot;
    pass&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三-函数的调用&quot;&gt;三 函数的调用&lt;/h2&gt;
&lt;h3 id=&quot;函数调用说明&quot;&gt;1. 函数调用说明&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 函数的使用必须遵循：先定义，后调用的原则
# 注意：如果没有事先定义函数而直接调用，就相当于在引用一个不存在的变量名

# 定义阶段：在定义阶段只检测语法，不执行函数体代码
# 调用阶段：根据函数名找到函数的内存地址，然后执行函数体代码


# 函数名加括号即调用函数


# 定义阶段
def foo():
    print('from foo')
    bar()


def bar():
    print('from bar')


# 调用阶段
foo()

&quot;&quot;&quot;
会报错
# 定义阶段
def foo():
    print('from foo')
    bar()


# 调用阶段
foo()


def bar():
    print('from bar')
&quot;&quot;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;调用函数的三种形式&quot;&gt;2. 调用函数的三种形式&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 1 基本的调用
def func():
    print('from func')


func()


# 2 调用并把返回结果赋值给变量
def max2(x, y):
    if x &amp;gt; y:
        return x
    else:
        return y


res = max2(10, 3)
print(res)
res = max2(10, 3) * 100  # 和上面类似，对返回结果再计算
print(res)

# 4 把返回结果再当做参数传入
res = max2(max2(10, 3), 11)
print(res)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四-函数的返回值&quot;&gt;四 函数的返回值&lt;/h2&gt;
&lt;h3 id=&quot;函数返回值说明&quot;&gt;1. 函数返回值说明&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 什么时候应该有返回值？
# 函数体代码运行完毕后需要有一个返回结果给调用者&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;函数返回值的三种形式&quot;&gt;2. 函数返回值的三种形式&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 1 没有return，或者return后面什么都不写，返回值None
def func():
    pass


def func1():
    return


def func2():
    return None


res = func()
res1 = func1()
res2 = func2()
print(res)
print(res1)
print(res2)


# 2 return后跟一个值,返回该值本身
def func3():
    return 1


res3 = func3()
print(res3)


# 3 return可以逗号分隔，返回多个值,会返回一个元组给调用者
def func4():
    return 1, 2, [1, 2, 3]


res4 = func4()
print(res4)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;return两点注意事项&quot;&gt;3. return两点注意事项&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;return返回值没有类型限制&lt;/li&gt;
&lt;li&gt;return是函数结束的标志，函数内可以写多个return，但执行一次，函数就立刻结束，并把return后的值作为本次调用的返回值&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def func5():
    print('first')
    return 1
    print('second')
    return 2
    print('third')
    return 3


res5 = func5()
print(res5)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;五-函数的参数&quot;&gt;五 函数的参数&lt;/h2&gt;
&lt;h3 id=&quot;行参与实参&quot;&gt;1. 行参与实参&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&quot;&quot;&quot;
形参（形式参数）：指的是在定义函数时，括号内定义的参数，形参其实就变量名
实参（实际参数）：指的是在调用函数时，括号内传入的值，实参其实就变量的值
&quot;&quot;&quot;


# x,y是形参
def func(x, y):  # x=10,y=11
    print(x)
    print(y)


# 10,11是实参
func(10, 11)

&quot;&quot;&quot;
注意：
实参值（变量的值）与形参（变量名）的绑定关系只在函数调用时才会生效/绑定
在函数调用结束后就立刻解除绑定
&quot;&quot;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;有参函数的四种传参方式&quot;&gt;2. 有参函数的四种传参方式&lt;/h3&gt;
&lt;h4 id=&quot;位置参数&quot;&gt;(1) 位置参数&lt;/h4&gt;
&lt;p&gt;以上所讲的行参与实参是有参函数的的两个概念，接下里是传参方式，位置参数就是最基本的传参方式。位置即顺序，位置参数指的就是按照从左到右的顺序依次定义的参数。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 在定义函数时，按照位置定义的形参，称为位置形参
def foo(x, y, z):
    print(x, y, z)


&quot;&quot;&quot;
注意：
位置形参的特性是：在调用函数时必须为其传值，而且多一个不行，少一个也不行
&quot;&quot;&quot;

# 在调用函数时，按照位置定义的实参，称为位置实参

# foo(1,2) # 报错
# foo(1,2,3,4) #报错
foo(1, 3, 2)  # x = 1, y = 3, z = 2
&quot;&quot;&quot;
注意：位置实参会与形参一一对应
&quot;&quot;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;关键字参数&quot;&gt;(2) 关键字参数&lt;/h4&gt;
&lt;p&gt;在调用函数时，按照key=value的形式定义的实参，称为关键字参数。关键字参数是指在位置行参的前提下，以关键字的形式为行参传值，所以它与位置参数的区别主要是体现在实参的传值上面。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def foo(x, y, z):
    print(x, y, z)


&quot;&quot;&quot;
注意：
1 相当于直呼其名地为形参传值，意味着即便是不按照顺序定义，仍然能为指定的参数传值
foo(2,1,3)  # x=2,y=1,z=3
foo(y=2,x=1,z=3)  # x=1,y=2,z=3

2 在调用函数时，位置实参与关键字实参可以混合使用，但必须遵循形参的规则 
foo(1,z=3)  # 报错

3 不能为同一个形参重复传值
foo(1,x=1,y=3,z=2)  # 报错

4 位置实参必须放到关键字实参的前面
foo(y=3,z=2,1)  # 报错
&quot;&quot;&quot;

foo(1, z=3, y=2)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;默认参数&quot;&gt;4. 默认参数&lt;/h3&gt;
&lt;p&gt;到目前行参只讲了一种就是位置行参，实参讲了两种分别是位置实参和关键字实参，接下来我们再来讲解一种行参，叫做默认参数。它指的是在定义阶段已经为某个形参赋值,那么该形参就称为默认参数。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 1 定义阶段已经有值,意味着调用阶段可以不传值
def register(name, age, sex='male'):
    print(name, age, sex)


register('Albert', 18, )
register('James', 34, )
register('林志玲', 20, 'female')
register('周星驰', 50)

# 2 位置形参必须在默认参数的前面
# def func(y=1,x): #报错
#     pass

# 3 默认参数的值只在定义阶段赋值一次,也就是说默认参数的值再定义阶段就固定死了
m = 10


def foo(x, y=m):
    print(x, y)


m = 'a'  # foo内的默认参数不会发生改变
foo(1)
foo(1, 11)


# 4 默认参数的值应该设置为不可变类型(重要)

# 假如默认参数不是不可变类型，我们以列表为例
def register(name, hobby, l=[]):
    l.append(hobby)
    print(name, l)


register('Kobe', 'play')
register('James', 'read')
register('Albert', 'music')


# 数据出错的原因就是每次掉用都会在同一个列表上作修改


# 为了实现同样的功能，修正后如下
def register(name, hobby, l=None):
    if l is None:
        l = []
    l.append(hobby)
    print(name, l)


register('Kobe', 'play')
register('James', 'read')
register('Albert', 'music')

# 应用场景:
# 对于经常需要变化的值,需要将对应的形参定义成位置形参
# 对于大多数情况值都一样的情况,需要将对应的形参定义成默认参数&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;可变长参数&quot;&gt;5. 可变长参数&lt;/h3&gt;
&lt;h4 id=&quot;可变长参数基本使用&quot;&gt;(1) 可变长参数基本使用&lt;/h4&gt;
&lt;p&gt;可变长度指的参数的个数可以不固定，实参有按位置定义的实参和按关键字定义的实参,所以可变长的实参指的就是按照这两种形式定义的实参个数可以不固定，然而实参终究是要给形参传值的，所以形参必须有两种对应的解决方案来分别处理以上两种形式可变长度的实参。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# *会将溢出的位置实参全部接收,然后保存成元组的形式赋值给一个变量args(可以任意命名，约定俗成args)
def foo(x, y, z, *args):  # args=(4,5,6,7,8)
    print(x, y, z)
    print(args)


foo(1, 2, 3, 4, 5, 6, 7, 8, )


# **会将溢出的关键字实参全部接收,然后保存成字典的形式赋值给kwargs
def foo(x, y, z, **kwargs):  # kwargs={'c':3,'a':1,'b':2}
    print(x, y, z)
    print(kwargs)


foo(x=1, y=2, z=3, a=1, b=2, c=3)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;星与星星打散&quot;&gt;(2) 星与星星(打散)&lt;/h4&gt;
&lt;p&gt;很多时候【*】的作用就是打散，在讲列表的方法append与extend的区别时，也做了一个简单的说明。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 一旦碰到实参加*,就把该实参的值打散
def foo(x, y, z, *args):  # args=([4,5,6,7,8],)
    print(x, y, z)
    print(args)


foo(1, 2, 3, *[4, 5, 6, 7, 8])  # foo(1,2,3,4,5,6,7,8)
foo(1, 2, 3, *(4, 5, 6, 7, 8))  # foo(1,2,3,4,5,6,7,8)
foo(1, 2, 3, *'hello')  # foo(1,2,3,'h','e','l','l','o')


def foo(x, y, z):
    print(x, y, z)


# foo(*[1, 2, 3, 4])  # foo(1,2,3,4) #报错
# foo(*[1, 2, ])  # foo(1,2,) #报错
foo(*[1, 2, 3])  # foo(1,2,3)


# 一旦碰到实参加**,就把该实参的值打散
def bar(x, y, z, **kwargs):
    print(x, y, z)
    print(kwargs)


bar(1, 2, 3, **{'a': 1, 'b': 2})  # foo(1,2,3,b=2,a=1)


def boo(x, y, z):
    print(x, y, z)


# boo(1, **{'z': 3, 'y': 2, 'x': 111})  # 报错 boo(1,z=3,y=2,x=111)
boo(1, **{'z': 3, 'y': 2})  # foo(1,z=3,y=2)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;组合使用重点&quot;&gt;(3) 组合使用(重点)&lt;/h4&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def index(name, age, gender):
    print('welcome %s %s %s' % (name, age, gender))


def wrapper(*args, **kwargs):  # args=(1,2,3),kwargs={'x':1,'y':2,'z':3}
    # print(args)
    # print(kwargs)
    index(*args, **kwargs)  # index(*(1,2,3),**{'x':1,'y':2,'z':3}) # index(1,2,3,z=3,y=2,x=2)


# wrapper(1,2,3,x=1,y=2,z=3)  # 报错

wrapper(name='Albert',age=18,gender='male')
wrapper('Albert', age=18, gender='male')
wrapper('Albert', 18, gender='male')
wrapper('Albert', 18, 'male')

&quot;&quot;&quot;
执行过程：
wrapper的所有参数都传给index，而index函数只接收三个位置参数
星与星星的组合使用在源码中非常常见，这也是装饰器的核心之一，这非常重要。
&quot;&quot;&quot;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 03 Apr 2019 15:39:00 +0000</pubDate>
<dc:creator>马一特</dc:creator>
<og:description>本文是Python通用编程系列教程，已全部更新完成，实现的目标是从零基础开始到精通Python编程语言。本教程不是对Python的内容进行泛泛而谈，而是精细化，深入化的讲解，共5个阶段，25章内容。所</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mayite/p/10652470.html</dc:identifier>
</item>
<item>
<title>Android之Retrofit详解（转载） - 故事爱人</title>
<link>http://www.cnblogs.com/WUXIAOCHANG/p/10652296.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WUXIAOCHANG/p/10652296.html</guid>
<description>&lt;p&gt;说明：该文章转载于&lt;a href=&quot;https://www.jianshu.com/p/a3e162261ab6&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/a3e162261ab6&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;在&lt;code&gt;Andrroid&lt;/code&gt;开发中，网络请求十分常用&lt;/li&gt;
&lt;li&gt;而在&lt;code&gt;Android&lt;/code&gt;网络请求库中，&lt;code&gt;Retrofit&lt;/code&gt;是当下最热的一个网络请求库&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;2020&quot; data-height=&quot;420&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-9be33c763c56a914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-9be33c763c56a914.png&quot; data-original-width=&quot;2020&quot; data-original-height=&quot;420&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;103723&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;今天，我将献上一份非常详细&lt;code&gt;Retrofit v2.0&lt;/code&gt;的使用教程，希望你们会喜欢。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;3.0260869565217&quot;&gt;
&lt;p&gt;如果对&lt;code&gt;Retrofit v2.0&lt;/code&gt;的源码感兴趣，可看文章：&lt;a href=&quot;https://www.jianshu.com/p/0c055ad46b6c&quot; target=&quot;_blank&quot;&gt;Android：手把手带你深入剖析 Retrofit 2.0 源码&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1124&quot; data-height=&quot;916&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-2bd80b234ae9d155.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-2bd80b234ae9d155.png&quot; data-original-width=&quot;1124&quot; data-original-height=&quot;916&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;131512&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1490&quot; data-height=&quot;1106&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-b6d3198d37590906.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-b6d3198d37590906.png&quot; data-original-width=&quot;1490&quot; data-original-height=&quot;1106&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;223326&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;特别注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;准确来说，Retrofit 是一个 RESTful 的 HTTP 网络请求框架的封装。&lt;/li&gt;
&lt;li&gt;原因：网络请求的工作本质上是 &lt;code&gt;OkHttp&lt;/code&gt; 完成，而 Retrofit 仅负责 网络请求接口的封装&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;771&quot; data-height=&quot;66&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-b5194f1d16673589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/771/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-b5194f1d16673589.png&quot; data-original-width=&quot;771&quot; data-original-height=&quot;66&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;9751&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;App应用程序通过 Retrofit 请求网络，实际上是使用 Retrofit 接口层封装请求参数、Header、Url 等信息，之后由 OkHttp 完成后续的请求操作&lt;/li&gt;
&lt;li&gt;在服务端返回数据之后，OkHttp 将原始的结果交给 Retrofit，Retrofit根据用户的需求对结果进行解析&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;除了Retrofit，如今Android中主流的网络请求框架有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Android-Async-Http&lt;/li&gt;
&lt;li&gt;Volley&lt;/li&gt;
&lt;li&gt;OkHttp&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面是简单介绍：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;930&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-3089d23889f04d87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/930/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-3089d23889f04d87.png&quot; data-original-width=&quot;930&quot; data-original-height=&quot;370&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;38220&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;一图让你了解全部的网络请求库和他们之间的区别！&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1000&quot; data-height=&quot;1115&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-58819416dfd2767a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-58819416dfd2767a.png&quot; data-original-width=&quot;1000&quot; data-original-height=&quot;1115&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;253796&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;附：各个主流网络请求库的Github地址&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;使用 Retrofit 的步骤共有7个：&lt;/p&gt;
&lt;p&gt;步骤1：添加Retrofit库的依赖&lt;br/&gt;步骤2：创建 接收服务器返回数据 的类&lt;br/&gt;步骤3：创建 用于描述网络请求 的接口&lt;br/&gt;步骤4：创建 Retrofit 实例&lt;br/&gt;步骤5：创建 网络请求接口实例 并 配置网络请求参数&lt;br/&gt;步骤6：发送网络请求（异步 / 同步）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;封装了 数据转换、线程切换的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**步骤7： **处理服务器返回的数据&lt;/p&gt;
&lt;p&gt;接下来，我们一步步进行讲解。&lt;/p&gt;
&lt;h3&gt;步骤1：添加Retrofit库的依赖&lt;/h3&gt;
&lt;p&gt;1. 在 &lt;code&gt;Gradle&lt;/code&gt;加入&lt;code&gt;Retrofit&lt;/code&gt;库的依赖&lt;/p&gt;
&lt;p&gt;&lt;em&gt;build.gradle&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;dependencies {
    compile &lt;span class=&quot;hljs-string&quot;&gt;'com.squareup.retrofit2:retrofit:2.0.2'
    &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2. 添加 网络权限&lt;br/&gt;&lt;em&gt;AndroidManifest.xml&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs xml&quot;&gt;
&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;uses-permission &lt;span class=&quot;hljs-attr&quot;&gt;android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;/&amp;gt;

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤2：创建 接收服务器返回数据 的类&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Reception.java&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Reception {
    ...
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤3：创建 用于描述网络请求 的接口&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Retrofit将 Http请求 抽象成 Java接口：采用 注解 描述网络请求参数 和配置网络请求参数&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;用 动态代理 动态 将该接口的注解“翻译”成一个 Http 请求，最后再执行 Http 请求&lt;/li&gt;
&lt;li&gt;注：接口中的每个方法的参数都需要使用注解标注，否则会报错&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;GetRequest_Interface.interface&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {

    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&lt;span class=&quot;hljs-string&quot;&gt;&quot;openapi.do?keyfrom=Yanzhikai&amp;amp;key=2032414398&amp;amp;type=data&amp;amp;doctype=json&amp;amp;version=1.1&amp;amp;q=car&quot;)
    &lt;span class=&quot;hljs-function&quot;&gt;Call&amp;lt;Translation&amp;gt;  &lt;span class=&quot;hljs-title&quot;&gt;getCall&lt;span class=&quot;hljs-params&quot;&gt;();
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面详细介绍Retrofit 网络请求接口 的注解类型。&lt;/p&gt;
&lt;h3&gt;注解类型&lt;/h3&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1144&quot; data-height=&quot;972&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-ee747d1e331ed5a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-ee747d1e331ed5a4.png&quot; data-original-width=&quot;1144&quot; data-original-height=&quot;972&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;91045&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;注解说明&lt;/h3&gt;
&lt;p&gt;第一类：网络请求方法&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;870&quot; data-height=&quot;385&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-e97379b8e0942459.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-e97379b8e0942459.png&quot; data-original-width=&quot;870&quot; data-original-height=&quot;385&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;36828&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;详细说明：&lt;br/&gt;a. @GET、@POST、@PUT、@DELETE、@HEAD&lt;br/&gt;以上方法分别对应 HTTP中的网络请求方式&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {

    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&lt;span class=&quot;hljs-string&quot;&gt;&quot;openapi.do?keyfrom=Yanzhikai&amp;amp;key=2032414398&amp;amp;type=data&amp;amp;doctype=json&amp;amp;version=1.1&amp;amp;q=car&quot;)
    &lt;span class=&quot;hljs-function&quot;&gt;Call&amp;lt;Translation&amp;gt;  &lt;span class=&quot;hljs-title&quot;&gt;getCall&lt;span class=&quot;hljs-params&quot;&gt;();
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处特意说明URL的组成：Retrofit把 网络请求的URL 分成了两部分设置：&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;/&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;网络请求的完整 Url =在创建Retrofit实例时通过.baseUrl()设置 +网络请求接口的注解设置（下面称 “path“ ）&lt;/li&gt;
&lt;li&gt;具体整合的规则如下：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;480&quot; data-height=&quot;399&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-3dc42017038302d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-3dc42017038302d3.png&quot; data-original-width=&quot;480&quot; data-original-height=&quot;399&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;45127&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;建议采用第三种方式来配置，并尽量使用同一种路径形式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;b. @HTTP&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：替换@GET、@POST、@PUT、@DELETE、@HEAD注解的作用 及 更多功能拓展&lt;/li&gt;
&lt;li&gt;具体使用：通过属性method、path、hasBody进行设置&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;第二类：标记&lt;/h3&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;870&quot; data-height=&quot;222&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-a6f1fc997c23a2e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-a6f1fc997c23a2e0.png&quot; data-original-width=&quot;870&quot; data-original-height=&quot;222&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;36223&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;a. @FormUrlEncoded&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：表示发送form-encoded的数据&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;每个键值对需要用@Filed来注解键名，随后的对象需要提供值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;b. @Multipart&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：表示发送form-encoded的数据（适用于 有文件 上传的场景）&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;每个键值对需要用@Part来注解键名，随后的对象需要提供值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体使用如下：&lt;br/&gt;&lt;em&gt;GetRequest_Interface&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {
        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;第三类：网络请求参数&lt;/h3&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;870&quot; data-height=&quot;447&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-c547f2344eef630b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-c547f2344eef630b.png&quot; data-original-width=&quot;870&quot; data-original-height=&quot;447&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;62247&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;详细说明&lt;/h4&gt;
&lt;p&gt;a. @Header &amp;amp; @Headers&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：添加请求头 &amp;amp;添加不固定的请求头&lt;/li&gt;
&lt;li&gt;具体使用如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;b. @Body&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：以 &lt;code&gt;Post&lt;/code&gt;方式 传递 自定义数据类型 给服务器&lt;/li&gt;
&lt;li&gt;特别注意：如果提交的是一个Map，那么作用相当于 &lt;code&gt;@Field&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;不过Map要经过 &lt;code&gt;FormBody.Builder&lt;/code&gt; 类处理成为符合 Okhttp 格式的表单，如：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;FormBody.Builder builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new FormBody.Builder();
builder.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;);

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;c. @Field &amp;amp; @FieldMap&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：发送 Post请求 时提交请求的表单字段&lt;/li&gt;
&lt;li&gt;具体使用：与 &lt;code&gt;@FormUrlEncoded&lt;/code&gt; 注解配合使用&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {
        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;d. @Part &amp;amp; @PartMap&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：发送 Post请求 时提交请求的表单字段&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;与@Field的区别：功能相同，但携带的参数类型更加丰富，包括数据流，所以适用于 有文件上传 的场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;具体使用：与 &lt;code&gt;@Multipart&lt;/code&gt; 注解配合使用&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {

          &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;e. @Query和@QueryMap&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：用于 &lt;code&gt;@GET&lt;/code&gt; 方法的查询参数（Query = Url 中 ‘?’ 后面的 key-value）&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;2.5342465753425&quot;&gt;
&lt;p&gt;如：url = &lt;a href=&quot;https://links.jianshu.com/go?to=http%3A%2F%2Fwww.println.net%2F%3Fcate%3Dandroid&quot; target=&quot;_blank&quot;&gt;http://www.println.net/?cate=android&lt;/a&gt;，其中，Query = cate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;具体使用：配置时只需要在接口方法中增加一个参数即可：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;   &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;)    
   &lt;span class=&quot;hljs-function&quot;&gt;Call&amp;lt;String&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;cate&lt;span class=&quot;hljs-params&quot;&gt;(@Query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cate&quot;) String cate);
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;f. @Path&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：URL地址的缺省值&lt;/li&gt;
&lt;li&gt;具体使用：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {

        &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&lt;span class=&quot;hljs-string&quot;&gt;&quot;users/{user}/repos&quot;)
        Call&amp;lt;ResponseBody&amp;gt;  getBlog（&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;) String user ）;
        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;g. @Url&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作用：直接传入一个请求的 URL变量 用于URL设置&lt;/li&gt;
&lt;li&gt;具体使用：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {

        &lt;span class=&quot;hljs-meta&quot;&gt;@GET
        &lt;span class=&quot;hljs-function&quot;&gt;Call&amp;lt;ResponseBody&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;testUrlAndQuery&lt;span class=&quot;hljs-params&quot;&gt;(@Url String url, @Query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;showAll&quot;) &lt;span class=&quot;hljs-keyword&quot;&gt;boolean showAll);
       &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;汇总&lt;/h2&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;870&quot; data-height=&quot;974&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-f9f8994497df7fd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-f9f8994497df7fd3.png&quot; data-original-width=&quot;870&quot; data-original-height=&quot;974&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;126811&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;步骤4：创建 Retrofit 实例&lt;/h2&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt; Retrofit retrofit = &lt;span class=&quot;hljs-keyword&quot;&gt;new Retrofit.Builder()
                .baseUrl(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://fanyi.youdao.com/&quot;) &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;a. 关于数据解析器（Converter）&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Retrofit支持多种数据解析方式&lt;/li&gt;
&lt;li&gt;使用时需要在Gradle添加依赖&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;数据解析器&lt;/th&gt;
&lt;th&gt;Gradle依赖&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Gson&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:converter-gson:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Jackson&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:converter-jackson:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Simple XML&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:converter-simplexml:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Protobuf&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:converter-protobuf:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Moshi&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:converter-moshi:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Wire&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:converter-wire:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Scalars&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:converter-scalars:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;b. 关于网络请求适配器（CallAdapter）&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Retrofit支持多种网络请求适配器方式：guava、Java8和rxjava&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用时如使用的是 &lt;code&gt;Android&lt;/code&gt; 默认的 &lt;code&gt;CallAdapter&lt;/code&gt;，则不需要添加网络请求适配器的依赖，否则则需要按照需求进行添加&lt;br/&gt;Retrofit 提供的 &lt;code&gt;CallAdapter&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;使用时需要在Gradle添加依赖：&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;网络请求适配器&lt;/th&gt;
&lt;th&gt;Gradle依赖&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;guava&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:adapter-guava:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Java8&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:adapter-java8:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;rxjava&lt;/td&gt;
&lt;td&gt;com.squareup.retrofit2:adapter-rxjava:2.0.2&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;步骤5：创建 网络请求接口实例&lt;/h3&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤6：发送网络请求（异步 / 同步）&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;封装了 数据转换、线程切换的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;/&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤7：处理返回数据&lt;/h3&gt;
&lt;p&gt;通过&lt;code&gt;response&lt;/code&gt;类的 &lt;code&gt;body（）&lt;/code&gt;对返回的数据进行处理&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;/&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;接下来，我将用两个实例分别对 Retrofit GET方式 和 POST方式进行 网络请求 讲解。&lt;/p&gt;
&lt;h3&gt;4.1 实例1&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;实现功能：将中文翻译成英文&lt;/li&gt;
&lt;li&gt;实现方案：采用&lt;code&gt;Get&lt;/code&gt;方法对 金山词霸API 发送网络请求&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;采用 &lt;code&gt;Gson&lt;/code&gt; 进行数据解析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1596&quot; data-height=&quot;414&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-104e737bcfb06d69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-104e737bcfb06d69.png&quot; data-original-width=&quot;1596&quot; data-original-height=&quot;414&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;48049&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;步骤说明&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;步骤1：添加Retrofit库的依赖&lt;br/&gt;步骤2：创建 接收服务器返回数据 的类&lt;br/&gt;步骤3：创建 用于描述网络请求 的接口&lt;br/&gt;步骤4：创建 Retrofit 实例&lt;br/&gt;步骤5：创建 网络请求接口实例 并 配置网络请求参数&lt;br/&gt;步骤6：发送网络请求（采用最常用的异步方式）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;封装了 数据转换、线程切换的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**步骤7： **处理服务器返回的数据&lt;/p&gt;
&lt;p&gt;接下来，我们一步步进行讲解。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;具体使用&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;步骤1：添加Retrofit库的依赖&lt;/h3&gt;
&lt;p&gt;1. 在 &lt;code&gt;Gradle&lt;/code&gt;加入&lt;code&gt;Retrofit&lt;/code&gt;库的依赖&lt;/p&gt;
&lt;p&gt;&lt;em&gt;build.gradle&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;dependencies {
    compile &lt;span class=&quot;hljs-string&quot;&gt;'com.squareup.retrofit2:retrofit:2.0.2'
    &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2. 添加 网络权限&lt;br/&gt;&lt;em&gt;AndroidManifest.xml&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs xml&quot;&gt;
&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;uses-permission &lt;span class=&quot;hljs-attr&quot;&gt;android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;/&amp;gt;

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤2：创建 接收服务器返回数据 的类&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;金山词霸API 的数据格式说明如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;/&gt;
&lt;/pre&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1114&quot; data-height=&quot;1078&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-38b09dee149d5e63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-38b09dee149d5e63.png&quot; data-original-width=&quot;1114&quot; data-original-height=&quot;1078&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;123290&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;根据 金山词霸API 的数据格式，创建 接收服务器返回数据 的类：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Translation.java&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Translation {
        &lt;span class=&quot;hljs-keyword&quot;&gt;private &lt;span class=&quot;hljs-keyword&quot;&gt;int status;

    &lt;span class=&quot;hljs-keyword&quot;&gt;private content content;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;content {
        &lt;span class=&quot;hljs-keyword&quot;&gt;private String from;
        &lt;span class=&quot;hljs-keyword&quot;&gt;private String to;
        &lt;span class=&quot;hljs-keyword&quot;&gt;private String vendor;
        &lt;span class=&quot;hljs-keyword&quot;&gt;private String out;
        &lt;span class=&quot;hljs-keyword&quot;&gt;private &lt;span class=&quot;hljs-keyword&quot;&gt;int errNo;
    }

    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤3：创建 用于描述网络请求 的接口&lt;/h3&gt;
&lt;p&gt;采用 **注解 ** 描述 网络请求参数。&lt;br/&gt;&lt;em&gt;GetRequest_Interface.java&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;GetRequest_Interface {

 &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ajax.php?a=fy&amp;amp;f=auto&amp;amp;t=auto&amp;amp;w=hello%20world&quot;)
    &lt;span class=&quot;hljs-function&quot;&gt;Call&amp;lt;Translation&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getCall&lt;span class=&quot;hljs-params&quot;&gt;();
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;接下来的步骤均在&lt;em&gt;GetRequest.java&lt;/em&gt;内实现（看注释）&lt;/h3&gt;
&lt;p&gt;步骤4：创建Retrofit对象&lt;br/&gt;步骤5：创建 网络请求接口 的实例&lt;br/&gt;步骤6：发送网络请求&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;以最常用的 异步请求 为例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;步骤7：处理返回数据&lt;/p&gt;
&lt;p&gt;&lt;em&gt;GetRequest.java&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;GetRequest &lt;span class=&quot;hljs-keyword&quot;&gt;extends &lt;span class=&quot;hljs-title&quot;&gt;AppCompatActivity {

    &lt;span class=&quot;hljs-meta&quot;&gt;@Override
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;onCreate&lt;span class=&quot;hljs-params&quot;&gt;(Bundle savedInstanceState) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        request();
        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于此处采用了 Gson 解析，所以需要在 Gradle加入依赖&lt;br/&gt;&lt;em&gt;build.gradle&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;compile &lt;span class=&quot;hljs-string&quot;&gt;'com.squareup.retrofit2:converter-gson:2.0.2'

&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;运行结果&lt;/h3&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;978&quot; data-height=&quot;202&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-e7b3bcb8915ccdd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/978/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-e7b3bcb8915ccdd2.png&quot; data-original-width=&quot;978&quot; data-original-height=&quot;202&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;45701&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Demo地址&lt;/h3&gt;
&lt;p&gt;Carson_Ho的Github：&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FCarson-Ho%2FRetrofitDemo&quot; target=&quot;_blank&quot;&gt;https://github.com/Carson-Ho/RetrofitDemo&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;4.2 实例2&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;实现的功能：将 英文 翻译成 中文&lt;/li&gt;
&lt;li&gt;实现方法：采用&lt;code&gt;Post方法&lt;/code&gt;对 有道API 发送网络请求&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;采用 &lt;code&gt;Gson&lt;/code&gt; 进行数据解析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;412&quot; data-height=&quot;88&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-0a1c28886902cad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/412/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-0a1c28886902cad0.png&quot; data-original-width=&quot;412&quot; data-original-height=&quot;88&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;23780&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;使用步骤&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;步骤1：添加Retrofit库的依赖&lt;br/&gt;步骤2：创建 接收服务器返回数据 的类&lt;br/&gt;步骤3：创建 用于描述网络请求 的接口&lt;br/&gt;步骤4：创建 Retrofit 实例&lt;br/&gt;步骤5：创建 网络请求接口实例 并 配置网络请求参数&lt;br/&gt;步骤6：发送网络请求（采用最常用的异步方式）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;封装了 数据转换、线程切换的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**步骤7： **处理服务器返回的数据&lt;/p&gt;
&lt;p&gt;接下来，我们一步步进行Retrofit的使用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;具体使用&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;步骤1：添加Retrofit库的依赖&lt;/h3&gt;
&lt;p&gt;1. 在 &lt;code&gt;Gradle&lt;/code&gt;加入&lt;code&gt;Retrofit&lt;/code&gt;库的依赖&lt;/p&gt;
&lt;p&gt;&lt;em&gt;build.gradle&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;dependencies {
    compile &lt;span class=&quot;hljs-string&quot;&gt;'com.squareup.retrofit2:retrofit:2.0.2'
    &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2. 添加 网络权限&lt;br/&gt;&lt;em&gt;AndroidManifest.xml&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs xml&quot;&gt;
&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;uses-permission &lt;span class=&quot;hljs-attr&quot;&gt;android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;/&amp;gt;

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤2：创建 接收服务器返回数据 的类&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;API 的数据格式说明如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;/&gt;
&lt;/pre&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1890&quot; data-height=&quot;1054&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-8d14618c78beb080.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-8d14618c78beb080.png&quot; data-original-width=&quot;1890&quot; data-original-height=&quot;1054&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;141760&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;根据 有道API 的数据格式，创建 接收服务器返回数据 的类：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Translation.java&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Translation1 {

    &lt;span class=&quot;hljs-keyword&quot;&gt;private String type;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private &lt;span class=&quot;hljs-keyword&quot;&gt;int errorCode;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private &lt;span class=&quot;hljs-keyword&quot;&gt;int elapsedTime;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private List&amp;lt;List&amp;lt;TranslateResultBean&amp;gt;&amp;gt; translateResult;

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getType&lt;span class=&quot;hljs-params&quot;&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return type;
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setType&lt;span class=&quot;hljs-params&quot;&gt;(String type) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;this.type = type;
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;getErrorCode&lt;span class=&quot;hljs-params&quot;&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return errorCode;
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setErrorCode&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int errorCode) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;this.errorCode = errorCode;
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;getElapsedTime&lt;span class=&quot;hljs-params&quot;&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return elapsedTime;
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setElapsedTime&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int elapsedTime) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;this.elapsedTime = elapsedTime;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public List&amp;lt;List&amp;lt;TranslateResultBean&amp;gt;&amp;gt; getTranslateResult() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return translateResult;
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setTranslateResult&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;List&amp;lt;TranslateResultBean&amp;gt;&amp;gt; translateResult) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;this.translateResult = translateResult;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;TranslateResultBean {
        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;步骤3：创建 用于描述网络请求 的接口&lt;/h3&gt;
&lt;p&gt;采用 注解 描述 网络请求参数。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PostRequest_Interface.java&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;PostRequest_Interface {

    &lt;span class=&quot;hljs-meta&quot;&gt;@POST(&lt;span class=&quot;hljs-string&quot;&gt;&quot;translate?doctype=json&amp;amp;jsonversion=&amp;amp;type=&amp;amp;keyfrom=&amp;amp;model=&amp;amp;mid=&amp;amp;imei=&amp;amp;vendor=&amp;amp;screen=&amp;amp;ssid=&amp;amp;network=&amp;amp;abtest=&quot;)
    &lt;span class=&quot;hljs-meta&quot;&gt;@FormUrlEncoded
    &lt;span class=&quot;hljs-function&quot;&gt;Call&amp;lt;Translation1&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getCall&lt;span class=&quot;hljs-params&quot;&gt;(@Field(&lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;) String targetSentence);
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;接下来的步骤均在PostRequest.java内实现（看注释）&lt;/h3&gt;
&lt;p&gt;步骤4：创建Retrofit对象&lt;br/&gt;步骤5：创建 网络请求接口 的实例&lt;br/&gt;步骤6：发送网络请求&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;以最常用的 异步请求 为例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;步骤7：处理返回数据&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PostRequest.java&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;PostRequest &lt;span class=&quot;hljs-keyword&quot;&gt;extends &lt;span class=&quot;hljs-title&quot;&gt;AppCompatActivity {

    &lt;span class=&quot;hljs-meta&quot;&gt;@Override
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;onCreate&lt;span class=&quot;hljs-params&quot;&gt;(Bundle savedInstanceState) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        request();
    }
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;request&lt;span class=&quot;hljs-params&quot;&gt;() {

        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于此处采用了 Gson 解析，所以需要在 &lt;code&gt;Gradle&lt;/code&gt; 加入依赖&lt;br/&gt;&lt;em&gt;build.gradle&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;compile &lt;span class=&quot;hljs-string&quot;&gt;'com.squareup.retrofit2:converter-gson:2.0.2'

&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;运行结果&lt;/h3&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1352&quot; data-height=&quot;72&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/944365-f9fc6659a3e00884.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/944365-f9fc6659a3e00884.png&quot; data-original-width=&quot;1352&quot; data-original-height=&quot;72&quot; data-original-format=&quot;&quot; data-original-filesize=&quot;19635&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Demo地址&lt;/h3&gt;
&lt;p&gt;Carson_Ho的Github：&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FCarson-Ho%2FRetrofitDemo&quot; target=&quot;_blank&quot;&gt;https://github.com/Carson-Ho/RetrofitDemo&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;Retrofit的使用场景非常丰富，如支持&lt;code&gt;RxJava&lt;/code&gt;和&lt;code&gt;Prototocobuff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;具体设置也非常简单 &amp;amp; 方便：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;&amp;lt;-- 主要在创建Retrofit对象中设置 --&amp;gt;
Retrofit retrofit = &lt;span class=&quot;hljs-keyword&quot;&gt;new Retrofit.Builder()
  .baseUrl(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;http:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 03 Apr 2019 15:01:00 +0000</pubDate>
<dc:creator>故事爱人</dc:creator>
<og:description>说明：该文章转载于https://www.jianshu.com/p/a3e162261ab6 前言 在Andrroid开发中，网络请求十分常用 而在Android网络请求库中，Retrofit是当下</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WUXIAOCHANG/p/10652296.html</dc:identifier>
</item>
<item>
<title>再议Java中的static关键字 - Matrix海子</title>
<link>http://www.cnblogs.com/dolphin0520/p/10651845.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dolphin0520/p/10651845.html</guid>
<description>&lt;h3 data-pm-slice=&quot;0 0 []&quot;&gt;再议Java中的static关键字&lt;/h3&gt;
&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;　　java中的static关键字在很久之前的一篇博文中已经讲到过了，感兴趣的朋友可以参考：《&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/3799052.html&quot; target=&quot;_blank&quot;&gt;Java中的static关键字解析&lt;/a&gt;》。&lt;/p&gt;
&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;　　今天我们再来谈一谈static关键字，今天我们侧重讲述static关键字的一些使用场景和方式，以下是本文目录大纲：&lt;/p&gt;
&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;　　一.static关键字使用场景&lt;/p&gt;
&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;　　二.static变量和普通成员变量区别&lt;/p&gt;
&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;　　三.类的构造器到底是不是static方法？&lt;/p&gt;
&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;　　若有不正之处，希望谅解并欢迎批评指正。&lt;/p&gt;
&lt;p&gt;　　请尊重作者劳动成果，转载请标明原文链接：&lt;/p&gt;
&lt;p&gt;　　https://www.cnblogs.com/dolphin0520/p/10651845.html&lt;/p&gt;
&lt;p data-pm-slice=&quot;0 0 []&quot;&gt; &lt;/p&gt;
&lt;h2 data-pm-slice=&quot;0 0 []&quot;&gt;一.static关键字使用场景&lt;/h2&gt;
&lt;p&gt;　　static关键字主要有以下5个使用场景：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）静态变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　把一个变量声明为静态变量通常基于以下三个目的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作为共享变量使用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;减少对象的创建&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;保留唯一副本&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　第一种比较容易理解，由于static变量在内存中只会存在一个副本，所以其可以作为共享变量使用，比如要定义一个全局配置、进行全局计数。如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class CarConstants {
　　// 全局配置,一般全局配置会和final一起配合使用, 作为共享变量
　　public static final int MAX_CAR_NUM = 10000;  
}

public class CarFactory {
　　// 计数器
　　private static int createCarNum = 0;
    
    public static Car createCar() {
      if (createCarNum &amp;gt; CarConstants.MAX_CAR_NUM) {
        throw new RuntimeException(&quot;超出最大可生产数量&quot;);
      }
      Car c = new Car();
      createCarNum++;
      return c;
    }
  
    public static getCreateCarNum() {
      return createCarNum;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第二种虽然场景不多，但是基本在每个工程里面都会使用到，比如声明Loggger变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
private static final Logger LOGGER = LogFactory.getLoggger(MyClass.class);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　实际上，如果把static去掉也是可行的，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
private final Logger LOGGER = LogFactory.getLoggger(MyClass.class);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样一来，对于每个MyClass的实例化对象都会拥有一个LOGGER，如果创建了1000个MyClass对象，则会多出1000个Logger对象，造成资源的浪费，因此通常会将Logger对象声明为static变量，这样一来，能够减少对内存资源的占用。&lt;/p&gt;
&lt;p&gt;　　第三种最经典的场景莫过于单例模式了，单例模式由于必须全局只保留一个副本，所以天然和static的初衷是吻合的，用static来修饰再合适不过了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Singleton {
    private static volatile Singleton singleton;

    private Singleton() {}

    public static Singleton getInstance() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                if (singleton == null) {
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2）静态方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　将一个方法声明为静态方法，通常是&lt;strong&gt;为了方便在不创建对象的情况下调用&lt;/strong&gt;。这种使用方式非常地常见，比如jdk的Collections类中的一些方法、单例模式的getInstance方法、工厂模式的create/build方法、util工具类中的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）静态代码块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　静态代码块通常来说是为了对静态变量进行一些初始化操作，比如单例模式、定义枚举类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;单例模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Singleton {
    private static Singleton instance;

    static {
        instance = new Singleton();
    }

    private Singleton() {}

    public static Singleton getInstance() {
        return instance;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;52&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public enum WeekDayEnum {
    MONDAY(1,&quot;周一&quot;),
    TUESDAY(2, &quot;周二&quot;),
    WEDNESDAY(3, &quot;周三&quot;),
    THURSDAY(4, &quot;周四&quot;),
    FRIDAY(5, &quot;周五&quot;),
    SATURDAY(6, &quot;周六&quot;),
    SUNDAY(7, &quot;周日&quot;);

    private int code;
    private String desc;

    WeekDayEnum(int code, String desc) {
        this.code = code;
        this.desc = desc;
    }

    private static final Map&amp;lt;Integer, WeekDayEnum&amp;gt; WEEK_ENUM_MAP = new HashMap&amp;lt;Integer, WeekDayEnum&amp;gt;();

    // 对map进行初始化
    static {
        for (WeekDayEnum weekDay : WeekDayEnum.values()) {
            WEEK_ENUM_MAP.put(weekDay.getCode(), weekDay);
        }
    }

    public static WeekDayEnum findByCode(int code) {
        return WEEK_ENUM_MAP.get(code);
    }

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }
}　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4）静态内部类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　关于内部类的使用场景可参考之前写的这篇文章 &lt;a id=&quot;&quot; class=&quot;ct-link&quot; title=&quot;https://www.cnblogs.com/dolphin0520/p/3811445.html&quot; href=&quot;https://www.cnblogs.com/dolphin0520/p/3811445.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/dolphin0520/p/3811445.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　内部类一般情况下使用不是特别多，如果需要在外部类里面定义一个内部类，通常是基于外部类和内部类有很强关联的前提下才去这么使用。&lt;/p&gt;
&lt;p&gt;　　在说静态内部类的使用场景之前，我们先来看一下静态内部类和非静态内部类的区别：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　非静态内部类对象持有外部类对象的引用（编译器会隐式地将外部类对象的引用作为内部类的构造器参数）；而静态内部类对象不会持有外部类对象的引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　由于非静态内部类的实例创建需要有外部类对象的引用，所以非静态内部类对象的创建必须依托于外部类的实例；而静态内部类的实例创建只需依托外部类；&lt;/p&gt;
&lt;p&gt;　　并且由于非静态内部类对象持有了外部类对象的引用，因此非静态内部类可以访问外部类的非静态成员；而静态内部类只能访问外部类的静态成员；&lt;/p&gt;

&lt;p&gt;　　两者的根本性区别其实也决定了用static去修饰内部类的真正意图：&lt;/p&gt;
&lt;p&gt;　　第一种是目前静态内部类使用比较多的场景，比如JDK集合中的Entry、builder设计模式。&lt;/p&gt;
&lt;p&gt;　　HashMap Entry：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/288799/201904/288799-20190403215349254-1649808678.png&quot; alt=&quot;&quot; width=&quot;506&quot; height=&quot;334&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　builder设计模式：&lt;/p&gt;
&lt;div class=&quot;ct-code&quot; data-language=&quot;Java&quot; data-theme=&quot;xq-light&quot; data-title=&quot;代码块&quot; data-expand=&quot;true&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Person {
    private String name;
    private int age;

    private Person(Builder builder) {
        this.name = builder.name;
        this.age = builder.age;
    }

    public static class Builder {

        private String name;
        private int age;

        public Builder() {
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }
        public Builder age(int age) {
            this.age=age;
            return this;
        }

        public Person build() {
            return new Person(this);
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

// 在需要创建Person对象的时候
Person person = new Person.Builder().name(&quot;张三&quot;).age(17).build();
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　第二种情况一般出现在多线程场景下，非静态内部类可能会引发内存溢出的问题，比如下面的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Task {

    public void onCreate() {
        // 匿名内部类, 会持有Task实例的引用
        new Thread() {
            public void run() {
                //...耗时操作
            };
        }.start();    
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面这段代码中的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
new Thread() {
  public void run() {
  //...耗时操作
  };
}.start(); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　声明并创建了一个匿名内部类对象，该对象持有外部类Task实例的引用，如果在在run方法中做的是耗时操作，将会导致外部类Task的实例迟迟不能被回收，如果Task对象创建过多，会引发内存溢出。&lt;/p&gt;
&lt;p&gt;　　优化方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Task {

    public void onCreate() {
        SubTask subTask = new SubTask();
        subTask.start();
    }
    
    static class SubTask extends Thread {
        @Override
        public void run() {
            //...耗时操作    
        }
        
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5）静态导入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态导入其实就是import static，用来导入某个类或者某个包中的静态方法或者静态变量。如下面这段代码所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
import static java.lang.Math.PI; 
 
    public  class MathUtils { 

    public static double calCircleArea(double r) {
        // 可以直接用 Math类中的静态变量PI
        return PI * r * r; 
    } 
} 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样在书写代码的时候确实能省一点代码，但是会影响代码可读性，所以一般情况下不建议这么使用。&lt;/p&gt;
&lt;h2&gt;2.static变量和普通成员变量区别&lt;/h2&gt;
&lt;p&gt;　　static变量和普通成员变量主要有以下4点区别：&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;区别1：所属不同。static变量属于类，不单属于任何对象；普通成员变量属于某个对象&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;区别2：存储区域不同。static变量位于方法区；普通成员变量位于堆区。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;区别3：生命周期不同。static变量生命周期与类的生命周期相同；普通成员变量和其所属的对象的生命周期相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;区别4：在对象序列化时（Serializable），static变量会被排除在外（因为static变量是属于类的，不属于对象）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;3.类的构造器到底是不是static方法？&lt;/h2&gt;
&lt;p&gt;　　关于类的构造器是否是static方法有很多争议，在《java编程思想》一书中提到“类的构造器虽然没有用static修饰，但是实际上是static方法”，个人认为这种说法有点欠妥，原因如下：&lt;/p&gt;
&lt;p&gt;　　1）在类的构造器中，实际上有一个隐藏的参数this引用，this是跟对象绑定的，也就是说在调用构造器之前，这个对象已经创建完毕了才能出现this引用。而构造器的作用是干什么的呢？它负责在创建一个实例对象的时候对实例进行初始化操作，即jvm在堆上为实例对象分配了相应的存储空间后，需要调用构造器对实例对象的成员变量进行初始化赋值操作。&lt;/p&gt;
&lt;p&gt;　　2）我们再来看static方法，由于static不依赖于任何对象就可以进行访问，也就是说和this是没有任何关联的。从这一层面去讲，类的构造器不是static方法&lt;/p&gt;
&lt;p&gt;　　3）从JVM指令层面去看，类的构造器不是static方法，我们先看一下下面这段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Person {
  private String name;
  
  public Person(String name) {
    this.name = name;
  }
  
  public static void create() {
    
  }
}


public class Main {
  public static void main(String[] args) {
    Person.create();
    Person p = new Person(&quot;Jack&quot;);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段代码反编译之后的字节码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/288799/201904/288799-20190403224804745-848375843.png&quot; alt=&quot;&quot; width=&quot;869&quot; height=&quot;502&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从上面可以看出，在调用static方法是调用的是invokestatic指令，而在调用类的构造器时实际上执行的是invokespecial指令，而这2个指令在JVM规范中的解释如下：&lt;/p&gt;
&lt;p&gt;　　https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.invokestatic&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/288799/201904/288799-20190403223829536-523329024.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;114&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/288799/201904/288799-20190403224940467-921049994.png&quot; alt=&quot;&quot; width=&quot;1020&quot; height=&quot;103&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看出，这2个指令的用途是完全不同的，invokestatic定义很清楚，就是用来调用执行static方法，而invokespecial用来调用实例方法，用来特殊调用父类方法、private方法和类的构造器。&lt;/p&gt;

</description>
<pubDate>Wed, 03 Apr 2019 14:53:00 +0000</pubDate>
<dc:creator>Matrix海子</dc:creator>
<og:description>再议Java中的static关键字 java中的static关键字在很久之前的一篇博文中已经讲到过了，感兴趣的朋友可以参考：《Java中的static关键字解析》。 今天我们再来谈一谈static关键</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dolphin0520/p/10651845.html</dc:identifier>
</item>
<item>
<title>Python 语言学习 第十一篇：numpy - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/10559388.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/10559388.html</guid>
<description>&lt;p&gt;numpy是Python中的基础模块，类型ndarray定义了一个具有矢量算术运算的多维数组，无需编写循环，就能对整个数组进行批量运算。通常情况下，导入numpy，设置别名为np。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; numpy as np 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;一，创建多维数组&lt;/h2&gt;
&lt;p&gt;ndarray是N-Dimension-Array的简称，该对象是一个快速而灵活的大数据集容器，该容器中存储的元素的数据类型都是相同的。&lt;/p&gt;
&lt;p&gt;创建矩阵的方法有array()、arange()、ones函数和zeros函数，array()是一个函数，用于创建ndarray类型的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，使用array()函数创建数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用array()函数创建数组，可以使用type()函数查看对象的类型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
a = np.array([1,2,3,4,5&lt;span&gt;])&lt;/span&gt;
a2 = np.array([[1,2,3,4,5],[6,7,8,9,10]])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过array()函数，使用列表创建的是一维数组，使用嵌套的列表创建的是多维数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，使用arange()函数创建矩阵&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过arange()函数创建矩阵，arange类似于Python的内置函数range，但返回的是一个ndarray，而不是列表。&lt;/p&gt;
&lt;p&gt;函数的参数分别是：start、end和step，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;a &lt;/span&gt;= np.arange(10) &lt;span&gt;#default&lt;/span&gt;&lt;span&gt; start=0, end=10(exclude 10)，step=1&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [0 1 2 3 4 5 6 7 8 9]&lt;/span&gt;&lt;span&gt;
a1 &lt;/span&gt;= np.arange(5,10) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; start=5, end=10（exclude=10），step=1&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [5 6 7 8 9]&lt;/span&gt;&lt;span&gt;
a2 &lt;/span&gt;= np.arange(5,20,2) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; start=5, end=20（exclude 20），step=2&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;[ 5  7  9 11 13 15 17 19]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3，使用ones()，zeros()和eye()函数创建数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用ones()创建元素都为1的数组，使用zeros()函数创建元素都是0的数组，参数是表示数组形状shape的元组，表示的是数组各个维度的元素数量。最简单的二维数组的shape元组是(row_num, column_num) ，它表示数组的行数量和列数量。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; a=np.ones(3&lt;span&gt;);
array([ &lt;/span&gt;1.,  1.,  1&lt;span&gt;.])
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; b=np.ones((3,2&lt;span&gt;));
array([[ &lt;/span&gt;1.,  1&lt;span&gt;.],
       [ &lt;/span&gt;1.,  1&lt;span&gt;.],
       [ &lt;/span&gt;1.,  1&lt;span&gt;.]])

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; c=np.zeros(3&lt;span&gt;)&lt;/span&gt;&lt;span&gt;
array([ 0.,  0.,  0.])
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; d=np.zeros((2,3&lt;span&gt;));   
array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;eye()创建一个正方形的NxN的单位矩阵，对角线的元素值是1，其余元素值是0&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;二，数组的属性&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数组对象的属性主要有：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;dtype：描述数组元素的类型&lt;/li&gt;
&lt;li&gt;shape：以tuple表示的数组形状&lt;/li&gt;
&lt;li&gt;ndim：数组的维度&lt;/li&gt;
&lt;li&gt;size：数组中元素的个数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1，dtype对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;dtype是一个特殊的对象，它表示数组元素的类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，shape对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以元组形式表示一个数组的维度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，ndim对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组各个维度的元素数量&lt;/p&gt;
&lt;h2&gt;三，索引和切片&lt;/h2&gt;
&lt;p&gt;ndarray对象的元素可以通过索引或切片来访问和修改，索引基于0。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，数组的索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一维数组很简单，从表面上看，一维数组的索引跟Python列表的功能差不多。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
arr = np.arange(10&lt;span&gt;)

arr[index]
arr[start:end]
arr[start:end:step]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一个二维数组中，各索引位置上的元素不再是标量，而是一维数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
arr2d=np.array([[1,2,3],[4,5,6],[7,8,9&lt;span&gt;]])

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; arr2d[2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; array([7,8,9])&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; arr2d[0][2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; arr2d[0,2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于更高维度的数组，一个中括号表示一个维度，索引的使用依此类推。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，数组的切片&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组切片是原始数组的视图，修改切片中的原始，会直接修改原始数据。数组的切片是Python基本切片的概念从一维到N维的扩展，通过中括号，start，stop和step参数提供给内置函数的slice函数来构造一个Python slice对象，此slice对象被传递给数组来提取数组的一部分。&lt;/p&gt;
&lt;p&gt;获取切片的格式是[start:end:step]，如果省略start，使用start的默认值0；如果省略end，那么end的默认值是：维度长度-1；如果省略step，使用step的默认值1。通常情况下，数组的切片是[start:end]，这就意味着使用step的默认值1。&lt;/p&gt;
&lt;p&gt;对于一维数组，数组切片上的任何修改都会直接修改原始数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
arr = np.arange(10&lt;span&gt;)
arr_slice&lt;/span&gt;=arr[5:8&lt;span&gt;]
arr_slice[&lt;/span&gt;1]=111
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;arr=array([0,1,2,3,4,5,111,7,8,9])&lt;/span&gt;
&lt;span&gt;
arr_slice[:]&lt;/span&gt;=222
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;arr=array([0,1,2,3,4,222,222,222,8,9])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于二维数组，一个中括号表示一个维度，依此类推。&lt;/p&gt;
&lt;h2&gt;四，数组的操作&lt;/h2&gt;
&lt;p&gt;numpy模块内置的函数能够对数组进行复杂而高效的操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，排序sort&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sort(axis,kind)函数用于对数组进行排序，axis指定排序的轴；kind指定排序算法，默认的排序算法是快速排序，np.sort()返回的是数组的已排序的副本，而就是排序则会修改数组本身。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;arr.sort()
arr_sort&lt;/span&gt;=np.sort(arr)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，argsort()函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;argsort()函数返回的是按照数组值从小到大的索引值，即返回的是索引值，索引值是按照元素值从小到大得到的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;x&lt;/span&gt;=np.array([1,4,3,-1,6,9&lt;span&gt;])
y=np.argsort(x)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;
array([3, 0, 2, 1, 4, 5], dtype=int64)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;元素-1的值是最小的，其索引是3，因此，argsort()的返回列表中是第一个item。&lt;/p&gt;
&lt;p&gt;argsort()函数是&lt;strong&gt;将x中的元素从小到大排列&lt;/strong&gt;，&lt;strong&gt;提取其对应的index(索引)，然后输出到y，&lt;/strong&gt;按照降序排序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
y=np.argsort(-x)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按照升序排序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
y=np.argsort(x)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3，vectorize 向量化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;numpy.vectorize()函数定义一个向量化函数，它以序列或numpy数组作为输入，对numpy数组做向量化操作。函数输出的数据类型是由otypes参数确定的，如果otypes=None，那么输出的数据类型是通过使用输入的第一个元素调用函数来确定的，该函数返回一个函数对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
numpy.vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数注释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pyfunc：函数对象&lt;/li&gt;
&lt;li&gt;otype：输出数据的类型（putput data type）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用vectorize()定义一个向量化函数，对数组做向量化操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; myfunc(a, b):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a-b &lt;span&gt;if&lt;/span&gt; a&amp;gt;b &lt;span&gt;else&lt;/span&gt; a+&lt;span&gt;b

vfunc &lt;/span&gt;=&lt;span&gt; np.vectorize(myfunc)
vfunc([&lt;/span&gt;1, 2, 3, 4], 2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;output array([3, 4, 1, 2])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4，tolost&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tolost()函数用于把一个矩阵转化为list列表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5，reshap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;reshap(array,newshape) ：返回一个给定shape的数组的副本，例如，下面的代码把一个一维数组转换为4行2列的二位数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;a&lt;/span&gt;=np.arange(8&lt;span&gt;)
np.reshape(a,(&lt;/span&gt;4,2))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;6，flatten&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;返回展平数组，原数组不改变&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;a&lt;/span&gt;=np.arange(8&lt;span&gt;)
b&lt;/span&gt;=np.reshape(a,(4,2&lt;span&gt;))
b.flatten()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;五，随机数生成&lt;/h2&gt;
&lt;p&gt;numpy.random模块是对Python内置的random的升级，增加了一些用于搞笑生成多种概率分布的样本值的函数。&lt;/p&gt;
&lt;p&gt;常用的numpy.random模块的函数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;seed：确定随机数生成器的种子&lt;/li&gt;
&lt;li&gt;permutation：返回一个序列的随机排列&lt;/li&gt;
&lt;li&gt;shuffle：对一个序列就地进行随机排列&lt;/li&gt;
&lt;li&gt;rand：产生均匀分布的样本值&lt;/li&gt;
&lt;li&gt;randint：从给定的上下限范围内随机选取正数&lt;/li&gt;
&lt;li&gt;randn：产生标准正态分布&lt;/li&gt;
&lt;li&gt;binomial：产生二项分布的样本值&lt;/li&gt;
&lt;li&gt;normal：产生高斯正态分布的样本值&lt;/li&gt;
&lt;li&gt;beta：产生Beta分布的样本值&lt;/li&gt;
&lt;li&gt;chisquare：产生卡方分布的样本值&lt;/li&gt;
&lt;li&gt;gamma：产生伽马分布的样本值&lt;/li&gt;
&lt;li&gt;uniform：产生在[0,1]范围中均匀分布的样本值&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，使用normal得到一个标准正态分布的4x4样本数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
samples=np.random.normal(size=(4,4))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考文档:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wj-1314/p/9722794.html&quot; target=&quot;_blank&quot;&gt;Python NumPy学习总结&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 03 Apr 2019 14:49:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<og:description>numpy是Python中的基础模块，类型ndarray定义了一个具有矢量算术运算的多维数组，无需编写循环，就能对整个数组进行批量运算。通常情况下，导入numpy，设置别名为np。 一，创建多维数组</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/10559388.html</dc:identifier>
</item>
<item>
<title>【SQL】ROW_NUMBER() OVER(partition by 分组列 order by 排序列)用法详解+经典实例 - willingtolove</title>
<link>http://www.cnblogs.com/willingtolove/p/10623841.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/willingtolove/p/10623841.html</guid>
<description>
&lt;h2&gt;#用法说明&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; row_number() &lt;span&gt;over&lt;/span&gt;(partition &lt;span&gt;by&lt;/span&gt; A &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; B ) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　A ：为分组字段&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　B：为分组后的排序字段。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　table 表的结构 多为：  多人 多条的相关数据。（比如：订单信息）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　此条sql语句，多用于对数据进行&lt;span&gt;&lt;strong&gt;分组排序&lt;/strong&gt;&lt;/span&gt;，并对每个组中的数据分别进行&lt;strong&gt;&lt;span&gt;编号&lt;/span&gt;&lt;/strong&gt;，编号从1开始递增，每个组内的编号不会重复；&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;#经典实例&lt;/h2&gt;
&lt;h3&gt;0、填充数据&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;OrderInfo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;  &lt;span&gt;IDENTITY&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;TotalPrice&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;OrderTime&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;OrderInfo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;            (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;            ,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;TotalPrice&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;            ,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;OrderTime&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;VALUES&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;111&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2011-01-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;112&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2011-01-02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;311&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;312&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;211&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2012-01-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;212&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2012-01-02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;113&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2011-01-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;213&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2012-01-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;            (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;313&lt;/span&gt;, &lt;span&gt;CAST&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;GO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1、使用row_number()函数对订单进行编号，按照订单时间倒序。（此需求多用于分页）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; Id,UserId,TotalPrice,OrderTime,ROW_NUMBER() &lt;span&gt;over&lt;/span&gt; (&lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; OrderTime &lt;span&gt;desc&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt; OrderInfo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720466/201904/720466-20190403205732274-1941403484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;#&lt;/strong&gt;&lt;/span&gt;分页场景：每页3条数据，取第2页&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;with&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;baseDate
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; Id,UserId,TotalPrice,OrderTime,ROW_NUMBER() &lt;span&gt;over&lt;/span&gt; (&lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; OrderTime &lt;span&gt;desc&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt;&lt;span&gt; OrderInfo
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; baseDate &lt;span&gt;where&lt;/span&gt; rowIndex&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; rowIndex&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2、所有订单按照客户进行分组，并按照客户下的订单的金额倒序排列。&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; Id,UserId,orderTime,ROW_NUMBER() &lt;span&gt;over&lt;/span&gt;(partition &lt;span&gt;by&lt;/span&gt; UserId &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; TotalPrice &lt;span&gt;desc&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt; OrderInfo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720466/201904/720466-20190403211248880-335914459.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3、筛选出客户第一次下的订单。&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　思路：利用rowIndex来判断订单是客户第几次下单；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;with&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;baseDate
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; Id,UserId,TotalPrice,orderTime,ROW_NUMBER() &lt;span&gt;over&lt;/span&gt; (partition &lt;span&gt;by&lt;/span&gt; UserId &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; orderTime) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt;&lt;span&gt; OrderInfo
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; baseDate &lt;span&gt;where&lt;/span&gt; rowIndex&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720466/201904/720466-20190403202423691-1604151513.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4、筛选出客户在‘2011年1月1日之后的第一次下的订单。&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　思路：在分组排序之前进行实践筛选；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在使用over等开窗函数时，over里头的分组及排序的执行晚于“where，group by，order by”的执行。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;with&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;baseDate
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; Id,UserId,TotalPrice,orderTime,ROW_NUMBER() &lt;span&gt;over&lt;/span&gt; (partition &lt;span&gt;by&lt;/span&gt; UserId &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; orderTime) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt;&lt;span&gt; OrderInfo
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;where&lt;/span&gt; OrderTime&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2011-1-1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; baseDate &lt;span&gt;where&lt;/span&gt; rowIndex&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720466/201904/720466-20190403204434721-21119350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5、只保留每个客户的最近的一次订单，其余的订单删掉。（常用于删除重复数据）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;with&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;baseDate
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; Id,UserId,TotalPrice,OrderTime,ROW_NUMBER()&lt;span&gt;over&lt;/span&gt; (partition &lt;span&gt;by&lt;/span&gt; UserId &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; OrderTime &lt;span&gt;desc&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt;&lt;span&gt; OrderInfo
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; baseDate &lt;span&gt;where&lt;/span&gt; rowIndex &lt;span&gt;&amp;lt;&amp;gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;6、统计&lt;span&gt;&lt;strong&gt;每一个客户&lt;/strong&gt;&lt;/span&gt;所有的订单中&lt;strong&gt;&lt;span&gt;金额最大&lt;/span&gt;&lt;/strong&gt;，并统计该订单是客户&lt;strong&gt;&lt;span&gt;第几次&lt;/span&gt;&lt;/strong&gt;购买；&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　思路：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1）先按照客户进行分组，然后按照客户下单的时间进行正序排列，并编号（rowIndex），生成临时表baseDate；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　2）再按照客户进行分组，然后按照客户下单的金额进行倒序排列，并编号（rowIndex），生成临时表basePrice；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　3）最后取basePrice中编号为1的数据，然后根据id到baseDate中去查，即可；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;with&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;baseDate
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; Id,UserId,TotalPrice,orderTime,ROW_NUMBER() &lt;span&gt;over&lt;/span&gt; (partition &lt;span&gt;by&lt;/span&gt; UserId &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; orderTime) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt;&lt;span&gt; OrderInfo
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;basePrice
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; Id,UserId,orderTime,ROW_NUMBER() &lt;span&gt;over&lt;/span&gt;(partition &lt;span&gt;by&lt;/span&gt; UserId &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; TotalPrice &lt;span&gt;desc&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; rowIndex &lt;span&gt;from&lt;/span&gt;&lt;span&gt; OrderInfo
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; baseDate 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; Id &lt;span&gt;in&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; Id &lt;span&gt;from&lt;/span&gt; basePrice &lt;span&gt;where&lt;/span&gt; rowIndex&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/720466/201904/720466-20190403202506723-1238269067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;#&lt;/strong&gt;&lt;/span&gt;图中的&lt;span&gt;&lt;strong&gt;rowIndex&lt;/strong&gt;&lt;/span&gt;字段就是该订单是第几次购买；&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 03 Apr 2019 14:12:00 +0000</pubDate>
<dc:creator>willingtolove</dc:creator>
<og:description>#用法说明 A ：为分组字段 B：为分组后的排序字段。 table 表的结构 多为： 多人 多条的相关数据。（比如：订单信息） 此条sql语句，多用于对数据进行分组排序，并对每个组中的数据分别进行编号</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/willingtolove/p/10623841.html</dc:identifier>
</item>
<item>
<title>大龄码农那些事——为什么要写博客 - helloyaren</title>
<link>http://www.cnblogs.com/helloyaren/p/10651910.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/helloyaren/p/10651910.html</guid>
<description>&lt;p&gt;      最近其实一直在想以什么方式来写博客，本来打算自己好好琢磨写一篇惊天地泣鬼神的不朽之作来作为我开篇之作，可惜事与愿违。&lt;/p&gt;
&lt;p&gt;今天终于写了一篇博客是关于我自己的，虽然好像是记的的流水账，但是我也是花了不少精力去写的。其中有些事情感觉记忆犹新，有些&lt;/p&gt;
&lt;p&gt;感觉恍若隔世。这种感觉真的很神奇，我希望有更多的人能分享自己的事情，尤其是不开心的事情，说出来让大家开心一下也挺好。&lt;/p&gt;
&lt;p&gt;      说了这么多，言归正传，我为什么要写博客？其实这个问题不难回答，我也博客其实主要的目的就一个，我想成为优秀的人，我想成为&lt;/p&gt;
&lt;p&gt;“著名”的人。万一这个梦想真的实现了呢？其实这个答案过于笼统，之所以想写博客主要有几个原因。&lt;/p&gt;
&lt;p&gt;      &lt;span&gt;&lt;strong&gt;第一、想从观众转变为演员。&lt;/strong&gt;&lt;/span&gt;我自以为算是一个混迹互联网的老鸟了，之前一直习惯潜水，看别人的文章。从中也收获到很多，自己每每&lt;/p&gt;
&lt;p&gt;在看到别人的优秀文章时，心中不免油然而生一种敬意，觉得这些人真的是太伟大了。啥时候我也能成为这样的人就好了。借用特朗普的话“&lt;/p&gt;
&lt;p&gt;Make me great again”，虽然我从来就没有伟大过。也许是这样一种潜伏在内心深处的敬意不断的激励我，你也可以去做，只要你用心和坚持。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;第二、想让自己变得更有毅力。&lt;/strong&gt;其实我之前也在博客园上有自己的博客，可是基本上都不发表任何文章，时间久了，连我自己的账号密码&lt;/p&gt;
&lt;p&gt;都忘记了，当我回想起自己当初新建账号时心底里还信誓旦旦的说这次要好好坚持分享，最终都不了了之。所以为了能改变自己这种不好的行为，&lt;/p&gt;
&lt;p&gt;就通过这种方式督促自己，同时也是让大家能监督我，鞭策我。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;第三、想找到更多志同道合的朋友。&lt;/strong&gt;做技术的一般都受限于自己的工作环境，人脉基本上比较单一单薄，有时候有一些想法想找人交流的时候，&lt;/p&gt;
&lt;p&gt;往往感觉找不到合适的人。我想通过写博客的方式，能扩大自己的朋友圈，当然如果找到能一起做点有趣的事的朋友就更好了。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;第四、想找到自己的价值。&lt;/strong&gt;作为从业近15年的中年码农来说，想看看自己有啥可能性？拓展一下自己的边界，认清自己。另外自己看到不少技术文章，&lt;/p&gt;
&lt;p&gt;虽然写的很好，但是总觉得写的太技术了，有些沉闷，自己一直想尝试换一种轻松的方式写一下《技术那些事系列》。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;第五、想让知识变为能力。&lt;/strong&gt;只有将知识不断的总结，分享，才能更好的掌握知识。我想大家都深有感触吧。如果知识不去回顾总结，不去分享，&lt;/p&gt;
&lt;p&gt;最终能记住的知识将会很有限。&lt;/p&gt;
&lt;p&gt;     总之，以上就是我写博客的源动力，希望大家能关注我的公众号“&lt;span&gt;&lt;strong&gt;大龄码农那些事&lt;/strong&gt;&lt;/span&gt;”。&lt;/p&gt;
</description>
<pubDate>Wed, 03 Apr 2019 14:09:00 +0000</pubDate>
<dc:creator>helloyaren</dc:creator>
<og:description>最近其实一直在想以什么方式来写博客，本来打算自己好好琢磨写一篇惊天地泣鬼神的不朽之作来作为我开篇之作，可惜事与愿违。 今天终于写了一篇博客是关于我自己的，虽然好像是记的的流水账，但是我也是花了不少精力</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/helloyaren/p/10651910.html</dc:identifier>
</item>
<item>
<title>《k8s-1.13版本源码分析》-调度器初始化 - CloudGeek</title>
<link>http://www.cnblogs.com/cloudgeek/p/10651660.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloudgeek/p/10651660.html</guid>
<description>&lt;p&gt;源码分析系列文章已经开源到github，地址如下：&lt;/p&gt;

&lt;hr/&gt;

&lt;h2 id=&quot;概述&quot;&gt;1. 概述&lt;/h2&gt;
&lt;p&gt;今天我们要做一些琐碎的知识点分析，比如调度器启动的时候默认配置是怎么来的？默认生效了哪些调度算法？自定义的算法是如何注入的？诸如这些问题，我们顺带会看一下调度器相关的一些数据结构的含义。看完前面这些节的分析后再看完本篇文章你可能会有一种醍醐灌顶的感觉哦～&lt;/p&gt;
&lt;h2 id=&quot;从_--config_开始&quot;&gt;2. 从 --config 开始&lt;/h2&gt;
&lt;p&gt;如果我们编译出来一个 kube-scheduler 二进制文件，运行&lt;code&gt;./kube-scheduler -h&lt;/code&gt;后会看到很多的帮助信息，这些信息是分组的，比如第一组 Misc，差不多是“大杂烩”的意思，不好分类的几个 flag，其实也是最重要的几个 flag，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farmer-hutao.github.io/k8s-source-code-analysis/core/scheduler/image/init/1554085596345.png&quot; alt=&quot;1554085596345&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很好理解，第一个红框框圈出来的&lt;code&gt;--config&lt;/code&gt;用于指定配置文件，老版本的各种参数基本都不建议使用了，所以这个 config flag 指定的 config 文件中基本包含了所有可配置项，我们看一下代码中获取这个 flag 的相关代码：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/options/options.go:143&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(o &lt;span class=&quot;token operator&quot;&gt;*Options&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;Flags&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(nfs apiserverflag&lt;span class=&quot;token punctuation&quot;&gt;.NamedFlagSets&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   fs &lt;span class=&quot;token operator&quot;&gt;:= nfs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;FlagSet&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token string&quot;&gt;&quot;misc&quot;&lt;span class=&quot;token punctuation&quot;&gt;)
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码中有几个点可以关注到：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;FlagSet 的含义，命令行输出的分组和这里的分组是对应的；&lt;/li&gt;
&lt;li&gt;除了认证授权、选举等“非关键”配置外，其他配置基本 Deprecated 了，也就意味着建议使用 config file；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上面代码中可以看到&lt;code&gt;o.ConfigFile&lt;/code&gt;接收了config配置，我们看看Option类型是什么样子的~&lt;/p&gt;
&lt;h3 id=&quot;options_Option_对象&quot;&gt;2.1. options.Option 对象&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Options&lt;/code&gt;对象包含运行一个 Scheduler 所需要的所有参数&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/options/options.go:55&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type Options &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;前面的 flag 相关代码中写到配置文件的内容给了&lt;code&gt;o.ConfigFile&lt;/code&gt;，也就是&lt;code&gt;Options.ConfigFile&lt;/code&gt;，那这个属性怎么使用呢？&lt;/p&gt;
&lt;p&gt;我们来看下面这个 ApplyTo() 函数，这个函数要做的事情是把 options 配置 apply 给 scheduler app configuration(这个对象后面会讲到)：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/options/options.go:162&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;/&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数中可以看到用 --config 和不用 --config 两种情况下 options 是如何应用到&lt;code&gt;schedulerappconfig.Config&lt;/code&gt;中的。那么这里提到的 Config 对象又是什么呢？&lt;/p&gt;
&lt;h3 id=&quot;config_Config对象&quot;&gt;2.2. config.Config对象&lt;/h3&gt;
&lt;p&gt;Config 对象包含运行一个 Scheduler 所需要的所有 context&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/config/config.go:32&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type Config &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;所以前面的&lt;code&gt;c.ComponentConfig = o.ComponentConfig&lt;/code&gt;这行代码也就是把 Options 中的 ComponentConfig 赋值给了 Config 中的 ComponentConfig；是哪里的逻辑让 Options 和 Config 对象产生了关联呢？(也就是说前面提到的 &lt;code&gt;ApplyTo()&lt;/code&gt; 方法是再哪里被调用的？)&lt;/p&gt;
&lt;p&gt;继续跟下去可以找到&lt;code&gt;Config()&lt;/code&gt;函数，从这个函数的返回值&lt;code&gt;*schedulerappconfig.Config&lt;/code&gt;可以看到它的目的，是需要得到一个 schedulerappconfig.Config，代码不长：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/options/options.go:221&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(o &lt;span class=&quot;token operator&quot;&gt;*Options&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;Config&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;*schedulerappconfig&lt;span class=&quot;token punctuation&quot;&gt;.Config&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;那调用这个&lt;code&gt;Config()&lt;/code&gt;函数的地方又在哪里呢？继续跟就到 runCommand 里面了～&lt;/p&gt;
&lt;h3 id=&quot;runCommand&quot;&gt;2.3. runCommand&lt;/h3&gt;
&lt;p&gt;runCommand 这个函数我们不陌生：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/server.go:117&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;runCommand&lt;span class=&quot;token punctuation&quot;&gt;(cmd &lt;span class=&quot;token operator&quot;&gt;*cobra&lt;span class=&quot;token punctuation&quot;&gt;.Command&lt;span class=&quot;token punctuation&quot;&gt;, args &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, opts &lt;span class=&quot;token operator&quot;&gt;*options&lt;span class=&quot;token punctuation&quot;&gt;.Options&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;error &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;runCommand 在最开始的时候我们有见到过，已经到 cobra 入口的 Run 中了：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/server.go:85&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;Run&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(cmd &lt;span class=&quot;token operator&quot;&gt;*cobra&lt;span class=&quot;token punctuation&quot;&gt;.Command&lt;span class=&quot;token punctuation&quot;&gt;, args &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;if err &lt;span class=&quot;token operator&quot;&gt;:= &lt;span class=&quot;token function&quot;&gt;runCommand&lt;span class=&quot;token punctuation&quot;&gt;(cmd&lt;span class=&quot;token punctuation&quot;&gt;, args&lt;span class=&quot;token punctuation&quot;&gt;, opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;; err &lt;span class=&quot;token operator&quot;&gt;!= &lt;span class=&quot;token boolean&quot;&gt;nil &lt;span class=&quot;token punctuation&quot;&gt;{
      fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Fprintf&lt;span class=&quot;token punctuation&quot;&gt;(os&lt;span class=&quot;token punctuation&quot;&gt;.Stderr&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;%v\n&quot;&lt;span class=&quot;token punctuation&quot;&gt;, err&lt;span class=&quot;token punctuation&quot;&gt;)
      os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Exit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token number&quot;&gt;1&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;上面涉及到2个知识点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ApplyFeatureGates&lt;/li&gt;
&lt;li&gt;Run 中的逻辑&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们下面分别来看看～&lt;/p&gt;
&lt;h2 id=&quot;ApplyFeatureGates&quot;&gt;3. ApplyFeatureGates&lt;/h2&gt;
&lt;p&gt;这个函数跟进去可以看到如下几行简单的代码，这里很自然我们能够想到继续跟&lt;code&gt;defaults.ApplyFeatureGates()&lt;/code&gt;，但是不能只看到这个函数哦，具体来看：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/algorithmprovider/plugins.go:17&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package algorithmprovider

&lt;span class=&quot;token keyword&quot;&gt;import &lt;span class=&quot;token punctuation&quot;&gt;(
   &lt;span class=&quot;token string&quot;&gt;&quot;k8s.io/kubernetes/pkg/scheduler/algorithmprovider/defaults&quot;
&lt;span class=&quot;token punctuation&quot;&gt;)

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;到这里分2条路：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;import defaults 这个 package 的时候有一个&lt;code&gt;init()&lt;/code&gt;函数调用的逻辑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaults.ApplyFeatureGates()&lt;/code&gt; 函数调用本身。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;默认算法注册&quot;&gt;3.1. 默认算法注册&lt;/h3&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/algorithmprovider/defaults/defaults.go:38&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;init&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;init()&lt;/code&gt;函数中我们先关注 registerAlgorithmProvider() 函数，这里从字面上可以得到不少信息，大胆猜一下：是不是注册了默认的预选算法和优选算法？&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/algorithmprovider/defaults/defaults.go:222&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;registerAlgorithmProvider&lt;span class=&quot;token punctuation&quot;&gt;(predSet&lt;span class=&quot;token punctuation&quot;&gt;, priSet sets&lt;span class=&quot;token punctuation&quot;&gt;.String&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;看到这里可以关注到 AlgorithmProvider 这个概念，后面会讲到。&lt;/p&gt;
&lt;p&gt;先看一下里面调用的注册函数是怎么实现的：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/plugins.go:387&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;RegisterAlgorithmProvider&lt;span class=&quot;token punctuation&quot;&gt;(name &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, predicateKeys&lt;span class=&quot;token punctuation&quot;&gt;, priorityKeys sets&lt;span class=&quot;token punctuation&quot;&gt;.String&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;string &lt;span class=&quot;token punctuation&quot;&gt;{
   schedulerFactoryMutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Lock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token keyword&quot;&gt;defer schedulerFactoryMutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Unlock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;validateAlgorithmNameOrDie&lt;span class=&quot;token punctuation&quot;&gt;(name&lt;span class=&quot;token punctuation&quot;&gt;)
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;首先，algorithmProviderMap 这个变量是一个包级变量，在86行做的定义：&lt;code&gt;algorithmProviderMap = make(map[string]AlgorithmProviderConfig)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里的 key 有2种情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&quot;DefaultProvider&quot;&lt;/li&gt;
&lt;li&gt;&quot;ClusterAutoscalerProvider&quot;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;混合云场景用得到 ClusterAutoscalerProvider，大家感兴趣可以研究一下 ClusterAutoscaler 特性，这块我们先不说。默认的情况是生效的 DefaultProvider，这块逻辑后面还会提到。&lt;/p&gt;
&lt;p&gt;然后这个 map 的 value 的类型是一个简单的 struct：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/plugins.go:99&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type AlgorithmProviderConfig &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   FitPredicateKeys     sets&lt;span class=&quot;token punctuation&quot;&gt;.String
   PriorityFunctionKeys sets&lt;span class=&quot;token punctuation&quot;&gt;.String
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;接着看一下&lt;code&gt;defaultPredicates()&lt;/code&gt;函数&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/algorithmprovider/defaults/defaults.go:106&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;defaultPredicates&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) sets&lt;span class=&quot;token punctuation&quot;&gt;.String &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;return sets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;NewString&lt;span class=&quot;token punctuation&quot;&gt;(
      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数里面就2中类型的玩法，简化一些可以理解成上面这个样子，我们一个个来看。&lt;/p&gt;
&lt;p&gt;先认识一下 &lt;code&gt;sets.NewString()&lt;/code&gt;函数要干嘛：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;vendor/k8s.io/apimachinery/pkg/util/sets/string.go:27&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type String &lt;span class=&quot;token keyword&quot;&gt;map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;]Empty

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;如上，很简单的类型封装。里面的Empty是：&lt;code&gt;type Empty struct{}&lt;/code&gt;，所以本质上就是要用&lt;code&gt;map[string]struct{}&lt;/code&gt;这个类型罢了。&lt;/p&gt;
&lt;p&gt;因此上面&lt;code&gt;defaultPredicates()&lt;/code&gt;函数中&lt;code&gt;sets.NewString()&lt;/code&gt;内每一个参数本质上就是一个 string类型了，我们来看这一个个 string 是怎么来的。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/plugins.go:195&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;RegisterFitPredicateFactory&lt;span class=&quot;token punctuation&quot;&gt;(name &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, predicateFactory FitPredicateFactory&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;string &lt;span class=&quot;token punctuation&quot;&gt;{
   schedulerFactoryMutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Lock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token keyword&quot;&gt;defer schedulerFactoryMutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Unlock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;validateAlgorithmNameOrDie&lt;span class=&quot;token punctuation&quot;&gt;(name&lt;span class=&quot;token punctuation&quot;&gt;)
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数要返回一个 string 我们已经知道了，里面的逻辑也只有这一行需要我们关注：&lt;code&gt;fitPredicateMap[name] = predicateFactory&lt;/code&gt;，这个 map 类型也是一个包级变量：&lt;code&gt;fitPredicateMap = make(map[string]FitPredicateFactory)&lt;/code&gt;，所以前面讲的注册本质也就是在填充这个变量而已。理解&lt;code&gt;fitPredicateMap[name] = predicateFactory&lt;/code&gt;中 fitPredicateMap的 key 和 value，也就知道了这里的 Register 要做什么。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaultPredicates()&lt;/code&gt;中的第二种注册方式 RegisterFitPredicate 区别不大，函数体也是调用的 RegisterFitPredicateFactory()：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/plugins.go:106&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;RegisterFitPredicate&lt;span class=&quot;token punctuation&quot;&gt;(name &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, predicate algorithm&lt;span class=&quot;token punctuation&quot;&gt;.FitPredicate&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;string &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;return &lt;span class=&quot;token function&quot;&gt;RegisterFitPredicateFactory&lt;span class=&quot;token punctuation&quot;&gt;(name&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(PluginFactoryArgs&lt;span class=&quot;token punctuation&quot;&gt;) algorithm&lt;span class=&quot;token punctuation&quot;&gt;.FitPredicate &lt;span class=&quot;token punctuation&quot;&gt;{ &lt;span class=&quot;token keyword&quot;&gt;return predicate &lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;)
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;特性开关&quot;&gt;3.2. 特性开关&lt;/h3&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/algorithmprovider/defaults/defaults.go:183&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;ApplyFeatureGates&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;if utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.DefaultFeatureGate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Enabled&lt;span class=&quot;token punctuation&quot;&gt;(features&lt;span class=&quot;token punctuation&quot;&gt;.TaintNodesByCondition&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{

      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemoveFitPredicate&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeConditionPred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemoveFitPredicate&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeMemoryPressurePred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemoveFitPredicate&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeDiskPressurePred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemoveFitPredicate&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodePIDPressurePred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemovePredicateKeyFromAlgorithmProviderMap&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeConditionPred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemovePredicateKeyFromAlgorithmProviderMap&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeMemoryPressurePred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemovePredicateKeyFromAlgorithmProviderMap&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeDiskPressurePred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RemovePredicateKeyFromAlgorithmProviderMap&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodePIDPressurePred&lt;span class=&quot;token punctuation&quot;&gt;)

      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RegisterMandatoryFitPredicate&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.PodToleratesNodeTaintsPred&lt;span class=&quot;token punctuation&quot;&gt;, predicates&lt;span class=&quot;token punctuation&quot;&gt;.PodToleratesNodeTaints&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RegisterMandatoryFitPredicate&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeUnschedulablePred&lt;span class=&quot;token punctuation&quot;&gt;, predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeUnschedulablePredicate&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;InsertPredicateKeyToAlgorithmProviderMap&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.PodToleratesNodeTaintsPred&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;InsertPredicateKeyToAlgorithmProviderMap&lt;span class=&quot;token punctuation&quot;&gt;(predicates&lt;span class=&quot;token punctuation&quot;&gt;.CheckNodeUnschedulablePred&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token punctuation&quot;&gt;}

   &lt;span class=&quot;token keyword&quot;&gt;if utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.DefaultFeatureGate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Enabled&lt;span class=&quot;token punctuation&quot;&gt;(features&lt;span class=&quot;token punctuation&quot;&gt;.ResourceLimitsPriorityFunction&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RegisterPriorityFunction2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token string&quot;&gt;&quot;ResourceLimitsPriority&quot;&lt;span class=&quot;token punctuation&quot;&gt;, priorities&lt;span class=&quot;token punctuation&quot;&gt;.ResourceLimitsPriorityMap&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token boolean&quot;&gt;nil&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token number&quot;&gt;1&lt;span class=&quot;token punctuation&quot;&gt;)
      factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;InsertPriorityKeyToAlgorithmProviderMap&lt;span class=&quot;token punctuation&quot;&gt;(factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RegisterPriorityFunction2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token string&quot;&gt;&quot;ResourceLimitsPriority&quot;&lt;span class=&quot;token punctuation&quot;&gt;, priorities&lt;span class=&quot;token punctuation&quot;&gt;.ResourceLimitsPriorityMap&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token boolean&quot;&gt;nil&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token number&quot;&gt;1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数看着几十行，实际上只在重复一件事情，增加或删除一些预选和优选算法。我们看一下这里的一些逻辑：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;utilfeature.DefaultFeatureGate.Enabled()&lt;/code&gt; 函数要做的事情是判断一个 feature 是否开启；函数参数本质只是一个字符串：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/features/kube_features.go:25&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const &lt;span class=&quot;token punctuation&quot;&gt;(
   AppArmor utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Feature &lt;span class=&quot;token operator&quot;&gt;= &lt;span class=&quot;token string&quot;&gt;&quot;AppArmor&quot;
   DynamicKubeletConfig utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Feature &lt;span class=&quot;token operator&quot;&gt;= &lt;span class=&quot;token string&quot;&gt;&quot;DynamicKubeletConfig&quot;
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里定义了很多的 feature，然后定义了哪些 feature 是开启的，处在 alpha 还是 beta 或者 GA 等：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/features/kube_features.go:405&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var defaultKubernetesFeatureGates &lt;span class=&quot;token operator&quot;&gt;= &lt;span class=&quot;token keyword&quot;&gt;map&lt;span class=&quot;token punctuation&quot;&gt;[utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Feature&lt;span class=&quot;token punctuation&quot;&gt;]utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.FeatureSpec&lt;span class=&quot;token punctuation&quot;&gt;{
   AppArmor&lt;span class=&quot;token punctuation&quot;&gt;:             &lt;span class=&quot;token punctuation&quot;&gt;{Default&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean&quot;&gt;true&lt;span class=&quot;token punctuation&quot;&gt;, PreRelease&lt;span class=&quot;token punctuation&quot;&gt;: utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Beta&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
   DynamicKubeletConfig&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token punctuation&quot;&gt;{Default&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean&quot;&gt;true&lt;span class=&quot;token punctuation&quot;&gt;, PreRelease&lt;span class=&quot;token punctuation&quot;&gt;: utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Beta&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
   ExperimentalHostUserNamespaceDefaultingGate&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token punctuation&quot;&gt;{Default&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean&quot;&gt;false&lt;span class=&quot;token punctuation&quot;&gt;, PreRelease&lt;span class=&quot;token punctuation&quot;&gt;: utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Beta&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
   ExperimentalCriticalPodAnnotation&lt;span class=&quot;token punctuation&quot;&gt;:           &lt;span class=&quot;token punctuation&quot;&gt;{Default&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean&quot;&gt;false&lt;span class=&quot;token punctuation&quot;&gt;, PreRelease&lt;span class=&quot;token punctuation&quot;&gt;: utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Alpha&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
   DevicePlugins&lt;span class=&quot;token punctuation&quot;&gt;:                               &lt;span class=&quot;token punctuation&quot;&gt;{Default&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean&quot;&gt;true&lt;span class=&quot;token punctuation&quot;&gt;, PreRelease&lt;span class=&quot;token punctuation&quot;&gt;: utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Beta&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
   TaintBasedEvictions&lt;span class=&quot;token punctuation&quot;&gt;:                         &lt;span class=&quot;token punctuation&quot;&gt;{Default&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean&quot;&gt;true&lt;span class=&quot;token punctuation&quot;&gt;, PreRelease&lt;span class=&quot;token punctuation&quot;&gt;: utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Beta&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
   RotateKubeletServerCertificate&lt;span class=&quot;token punctuation&quot;&gt;:              &lt;span class=&quot;token punctuation&quot;&gt;{Default&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean&quot;&gt;true&lt;span class=&quot;token punctuation&quot;&gt;, PreRelease&lt;span class=&quot;token punctuation&quot;&gt;: utilfeature&lt;span class=&quot;token punctuation&quot;&gt;.Beta&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;所以回到前面&lt;code&gt;ApplyFeatureGates()&lt;/code&gt;的逻辑，&lt;code&gt;utilfeature.DefaultFeatureGate.Enabled(features.TaintNodesByCondition)&lt;/code&gt;要判断的是 TaintNodesByCondition 这个特性是否开启了，如果开启了就把 predicates 中 &quot;CheckNodeCondition&quot;, &quot;CheckNodeMemoryPressure&quot;, &quot;CheckNodePIDPressurePred&quot;, &quot;CheckNodeDiskPressure&quot; 这几个算法去掉，把 &quot;PodToleratesNodeTaints&quot;, &quot;CheckNodeUnschedulable&quot; 加上。接着对于特性 &quot;ResourceLimitsPriorityFunction&quot; 的处理也是同一个逻辑。&lt;/p&gt;
&lt;h2 id=&quot;Scheduler_的创建&quot;&gt;4. Scheduler 的创建&lt;/h2&gt;
&lt;p&gt;我们换一条线，从 Scheduler 对象的创建再来看另外几个知识点。&lt;/p&gt;
&lt;p&gt;前面分析到&lt;code&gt;runCommand()&lt;/code&gt;函数的时候我们说到了需要关注最后一行&lt;code&gt;return Run(cc, stopCh)&lt;/code&gt;的逻辑，在&lt;code&gt;Run()&lt;/code&gt;函数中主要的逻辑就是创建 Scheduler 和启动 Scheduler；现在我们来看创建逻辑：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;cmd/kube-scheduler/app/server.go:174&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;sched&lt;span class=&quot;token punctuation&quot;&gt;, err &lt;span class=&quot;token operator&quot;&gt;:= scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;New&lt;span class=&quot;token punctuation&quot;&gt;(cc&lt;span class=&quot;token punctuation&quot;&gt;.Client&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Core&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Nodes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.PodInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Core&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;PersistentVolumes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Core&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;PersistentVolumeClaims&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Core&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;ReplicationControllers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Apps&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;ReplicaSets&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Apps&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;StatefulSets&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Core&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Services&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.InformerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Policy&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;V1beta1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;PodDisruptionBudgets&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   storageClassInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.Recorder&lt;span class=&quot;token punctuation&quot;&gt;,
   cc&lt;span class=&quot;token punctuation&quot;&gt;.ComponentConfig&lt;span class=&quot;token punctuation&quot;&gt;.AlgorithmSource&lt;span class=&quot;token punctuation&quot;&gt;,
   stopCh&lt;span class=&quot;token punctuation&quot;&gt;,
   scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;WithName&lt;span class=&quot;token punctuation&quot;&gt;(cc&lt;span class=&quot;token punctuation&quot;&gt;.ComponentConfig&lt;span class=&quot;token punctuation&quot;&gt;.SchedulerName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;WithHardPodAffinitySymmetricWeight&lt;span class=&quot;token punctuation&quot;&gt;(cc&lt;span class=&quot;token punctuation&quot;&gt;.ComponentConfig&lt;span class=&quot;token punctuation&quot;&gt;.HardPodAffinitySymmetricWeight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;WithEquivalenceClassCacheEnabled&lt;span class=&quot;token punctuation&quot;&gt;(cc&lt;span class=&quot;token punctuation&quot;&gt;.ComponentConfig&lt;span class=&quot;token punctuation&quot;&gt;.EnableContentionProfiling&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;WithPreemptionDisabled&lt;span class=&quot;token punctuation&quot;&gt;(cc&lt;span class=&quot;token punctuation&quot;&gt;.ComponentConfig&lt;span class=&quot;token punctuation&quot;&gt;.DisablePreemption&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;WithPercentageOfNodesToScore&lt;span class=&quot;token punctuation&quot;&gt;(cc&lt;span class=&quot;token punctuation&quot;&gt;.ComponentConfig&lt;span class=&quot;token punctuation&quot;&gt;.PercentageOfNodesToScore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
   scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;WithBindTimeoutSeconds&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;*cc&lt;span class=&quot;token punctuation&quot;&gt;.ComponentConfig&lt;span class=&quot;token punctuation&quot;&gt;.BindTimeoutSeconds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里调用了一个&lt;code&gt;New()&lt;/code&gt;函数，传了很多参数进去。&lt;code&gt;New()&lt;/code&gt;函数的定义如下：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:131&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;New&lt;span class=&quot;token punctuation&quot;&gt;(client clientset&lt;span class=&quot;token punctuation&quot;&gt;.Interface&lt;span class=&quot;token punctuation&quot;&gt;,
   nodeInformer coreinformers&lt;span class=&quot;token punctuation&quot;&gt;.NodeInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   podInformer coreinformers&lt;span class=&quot;token punctuation&quot;&gt;.PodInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   pvInformer coreinformers&lt;span class=&quot;token punctuation&quot;&gt;.PersistentVolumeInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   pvcInformer coreinformers&lt;span class=&quot;token punctuation&quot;&gt;.PersistentVolumeClaimInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   replicationControllerInformer coreinformers&lt;span class=&quot;token punctuation&quot;&gt;.ReplicationControllerInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   replicaSetInformer appsinformers&lt;span class=&quot;token punctuation&quot;&gt;.ReplicaSetInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   statefulSetInformer appsinformers&lt;span class=&quot;token punctuation&quot;&gt;.StatefulSetInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   serviceInformer coreinformers&lt;span class=&quot;token punctuation&quot;&gt;.ServiceInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   pdbInformer policyinformers&lt;span class=&quot;token punctuation&quot;&gt;.PodDisruptionBudgetInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   storageClassInformer storageinformers&lt;span class=&quot;token punctuation&quot;&gt;.StorageClassInformer&lt;span class=&quot;token punctuation&quot;&gt;,
   recorder record&lt;span class=&quot;token punctuation&quot;&gt;.EventRecorder&lt;span class=&quot;token punctuation&quot;&gt;,
   schedulerAlgorithmSource kubeschedulerconfig&lt;span class=&quot;token punctuation&quot;&gt;.SchedulerAlgorithmSource&lt;span class=&quot;token punctuation&quot;&gt;,
   stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
   opts &lt;span class=&quot;token operator&quot;&gt;...&lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(o &lt;span class=&quot;token operator&quot;&gt;*schedulerOptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;*Scheduler&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里涉及到的东西有点小多，我们一点点看：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;options := defaultSchedulerOptions&lt;/code&gt; 这行代码的 defaultSchedulerOptions 是一个 schedulerOptions 对象：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:121&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;/&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;回到&lt;code&gt;New()&lt;/code&gt;函数的逻辑：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:148&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for &lt;span class=&quot;token boolean&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;, opt &lt;span class=&quot;token operator&quot;&gt;:= &lt;span class=&quot;token keyword&quot;&gt;range opts &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token function&quot;&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;&amp;amp;options&lt;span class=&quot;token punctuation&quot;&gt;)
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里的 opts 定义在参数里：&lt;code&gt;opts ...func(o *schedulerOptions)&lt;/code&gt;，我们看一个实参来理解一下：&lt;code&gt;scheduler.WithName(cc.ComponentConfig.SchedulerName)&lt;/code&gt;：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:80&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;/&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这种方式设置一个对象的属性还是挺有意思的。&lt;/p&gt;
&lt;h3 id=&quot;调度算法源&quot;&gt;4.1. 调度算法源&lt;/h3&gt;
&lt;p&gt;我们继续往后面看&lt;code&gt;New()&lt;/code&gt;函数的其他逻辑：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source := schedulerAlgorithmSource&lt;/code&gt; 这行代码里的 schedulerAlgorithmSource 代表了什么？&lt;/p&gt;
&lt;p&gt;形参中有这个变量的定义：&lt;code&gt;schedulerAlgorithmSource kubeschedulerconfig.SchedulerAlgorithmSource&lt;/code&gt;，跟进去可以看到：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/apis/config/types.go:97&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;/&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这两个属性肯定得理解一下了，目测挺重要的样子：&lt;/p&gt;
&lt;p&gt;Policy&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/apis/config/types.go:106&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type SchedulerPolicySource &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;大家还记得我们在讲调度器设计的时候提到的 Policy 文件不？大概长这个样子：&lt;/p&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{
&lt;span class=&quot;token key atrule&quot;&gt;&quot;kind&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;Policy&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
&lt;span class=&quot;token key atrule&quot;&gt;&quot;apiVersion&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;v1&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
&lt;span class=&quot;token key atrule&quot;&gt;&quot;predicates&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token punctuation&quot;&gt;[
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token key atrule&quot;&gt;&quot;name&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;PodFitsHostPorts&quot;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token key atrule&quot;&gt;&quot;name&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;HostName&quot;&lt;span class=&quot;token punctuation&quot;&gt;}
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token punctuation&quot;&gt;,
&lt;span class=&quot;token key atrule&quot;&gt;&quot;priorities&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token punctuation&quot;&gt;[
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token key atrule&quot;&gt;&quot;name&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;LeastRequestedPriority&quot;&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token key atrule&quot;&gt;&quot;weight&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token number&quot;&gt;1&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token key atrule&quot;&gt;&quot;name&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;EqualPriority&quot;&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token key atrule&quot;&gt;&quot;weight&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token number&quot;&gt;1&lt;span class=&quot;token punctuation&quot;&gt;}
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token punctuation&quot;&gt;,
&lt;span class=&quot;token key atrule&quot;&gt;&quot;hardPodAffinitySymmetricWeight&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token number&quot;&gt;10&lt;span class=&quot;token punctuation&quot;&gt;,
&lt;span class=&quot;token key atrule&quot;&gt;&quot;alwaysCheckAllPredicates&quot; &lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token boolean important&quot;&gt;false
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;所以啊，这个 Policy原来是通过代码里的 SchedulerPolicySource 去配置的～&lt;/p&gt;
&lt;h3 id=&quot;policy___provider_如何生效&quot;&gt;4.2. policy / provider 如何生效&lt;/h3&gt;
&lt;p&gt;前面讲到调度算法从何而来(源头)，现在我们看一下这些算法配置如何生效的：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:173&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;source &lt;span class=&quot;token operator&quot;&gt;:= schedulerAlgorithmSource
&lt;span class=&quot;token keyword&quot;&gt;switch &lt;span class=&quot;token punctuation&quot;&gt;{
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码涉及到的2个类型我们再来关注一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;schedulerapi.Policy&lt;/li&gt;
&lt;li&gt;factory.Config&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这个 Policy 就是具体用于存放我们配置的 policy 的载体，对照着这个结构我们可以判断自己在配置 policy 的时候应该按照什么格式：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/api/types.go:47&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type Policy &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   metav1&lt;span class=&quot;token punctuation&quot;&gt;.TypeMeta
   Predicates &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]PredicatePolicy
   Priorities &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]PriorityPolicy
   ExtenderConfigs &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]ExtenderConfig
   HardPodAffinitySymmetricWeight &lt;span class=&quot;token builtin&quot;&gt;int32
   AlwaysCheckAllPredicates &lt;span class=&quot;token builtin&quot;&gt;bool
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个结构内部封装的一层层结构我就不继续贴了，大家感兴趣可以点开看一下，跟到底的落点都是基础类型的，string啊，int啊，bool啊这些～&lt;/p&gt;
&lt;p&gt;关于 &lt;code&gt;factory.Config&lt;/code&gt; 可能大家有印象，这个结构就是 Scheduler 对象的唯一属性：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:58&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type Scheduler &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   config &lt;span class=&quot;token operator&quot;&gt;*factory&lt;span class=&quot;token punctuation&quot;&gt;.Config
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;Config 结构体的属性不外乎 Scheduler 在落实调度、抢占等动作时所需要的一系列方法(或对象)；在&lt;code&gt;New()&lt;/code&gt;函数的最后有一行&lt;code&gt;sched := NewFromConfig(config)&lt;/code&gt;，实现是简单地实例化 Scheduler，然后将 config 赋值给 Scheduler 的 config 属性，然后返回 Scheduler 对象的地址。&lt;/p&gt;
&lt;h2 id=&quot;默认生效的算法&quot;&gt;5. 默认生效的算法&lt;/h2&gt;
&lt;p&gt;我们最后还是单独拎出来强调一下生效了哪些算法的具体逻辑吧，前面有提到一些了，我相信肯定有人很关注这个知识点。&lt;/p&gt;
&lt;p&gt;前面提到 Scheduler 创建的时候使用的 &lt;code&gt;New()&lt;/code&gt;函数，函数中 switch 判断 schedulerAlgorithmSource 是 Provider 还是 Policy，然后做了具体的初始化逻辑，我们具体看其中一个初始化， 串一下这些点：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sc, err := configurator.CreateFromProvider(*source.Provider)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果我们配置的是 Provider，这时候代码逻辑调用的是这样一行，这个函数的实现如下：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/factory.go:1156&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(c &lt;span class=&quot;token operator&quot;&gt;*configFactory&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;CreateFromProvider&lt;span class=&quot;token punctuation&quot;&gt;(providerName &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;*Config&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数里有2个点需要关注，第一个是&lt;code&gt;GetAlgorithmProvider()&lt;/code&gt;函数返回了什么：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/plugins.go:99&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type AlgorithmProviderConfig &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   FitPredicateKeys     sets&lt;span class=&quot;token punctuation&quot;&gt;.String
   PriorityFunctionKeys sets&lt;span class=&quot;token punctuation&quot;&gt;.String
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;看到这个返回值类型，心里就明朗了。&lt;/p&gt;
&lt;p&gt;我们继续看比较重要的&lt;code&gt;CreateFromKeys()&lt;/code&gt;方法调用的具体逻辑，这个函数的实参中 provider.FitPredicateKeys, provider.PriorityFunctionKeys 很明显和具体的 provider 相关，不同 provider 定义的预置算法不同。继续来看函数实现：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/factory.go:1255&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(c &lt;span class=&quot;token operator&quot;&gt;*configFactory&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;CreateFromKeys&lt;span class=&quot;token punctuation&quot;&gt;(predicateKeys&lt;span class=&quot;token punctuation&quot;&gt;, priorityKeys sets&lt;span class=&quot;token punctuation&quot;&gt;.String&lt;span class=&quot;token punctuation&quot;&gt;, extenders &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]algorithm&lt;span class=&quot;token punctuation&quot;&gt;.SchedulerExtender&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;*Config&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{

    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;上面的&lt;code&gt;NewGenericScheduler()&lt;/code&gt;函数接收了这些参数之后丢给了 genericScheduler 对象，这个对象中 predicates 属性对应参数 predicateFuncs，prioritizers 属性对应参数 priorityConfigs；&lt;/p&gt;
&lt;p&gt;从这里的代码可以看出来我们配置的算法源可以影响到 Scheduler 的初始化，最终体现在改变了 Scheduler 对象的 config 属性的 Algorithm 属性的 prioritizers 和 prioritizers 上。我们最后回顾一下这2个属性的类型，就和以前的预选、优选过程分析的时候关注的点对上了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;predicates --&amp;gt; map[string]algorithm.FitPredicate&lt;/li&gt;
&lt;li&gt;prioritizers --&amp;gt; []algorithm.PriorityConfig&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;是不是很熟悉呢？&lt;/p&gt;
&lt;p&gt;行，今天就讲到这里～&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/998740/201904/998740-20190403213332702-1874814803.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 03 Apr 2019 13:34:00 +0000</pubDate>
<dc:creator>CloudGeek</dc:creator>
<og:description>源码分析系列文章已经开源到github，地址如下： github：https://github.com/farmer-hutao/k8s-source-code-analysis gitbook：ht</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloudgeek/p/10651660.html</dc:identifier>
</item>
<item>
<title>9.1 翻译系列：数据注解特性之----Table【EF 6 Code-First 系列】 - 灰太狼的梦想</title>
<link>http://www.cnblogs.com/caofangsheng/p/10651529.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/caofangsheng/p/10651529.html</guid>
<description>&lt;p&gt;&lt;span&gt;原文地址：&lt;a href=&quot;http://www.entityframeworktutorial.net/code-first/table-dataannotations-attribute-in-code-first.aspx&quot; target=&quot;_blank&quot;&gt;http://www.entityframeworktutorial.net/code-first/table-dataannotations-attribute-in-code-first.aspx&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Table特性可以应用于一个领域类上面，用来在数据库中生成相应名称的数据表。它重写了EF 6和 EF Code 中默认的约定，根据默认约定，EF 6和EF Core创建的表的名称是实体名称+s(或者es),并且创建的数据表的列名称和实体属性名称一样。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Table Attribute: &lt;code&gt;[Table(string name, Properties:[Schema = string])&lt;/code&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;name:&lt;em&gt;数据表的名称&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Schema&lt;/em&gt;&lt;em&gt;:数据库的模式名称【可选的】&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403201746624-639752170.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上面的例子中，Table特性应用于Student实体上。所以,EF将会重写默认的约定，并且创建名称为StudentMaster的数据表，而不是名称为Students的数据表，例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403202138156-664907494.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;code&gt;Schema&lt;/code&gt; 属性来指定数据表的模式名称：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403202238362-1561499176.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;EF将会创建StudentMaster表，并且指定表的模式名为Admin：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403202347791-28111556.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好了，理论介绍完了，我们动手实践一下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.创建一个控制台应用程序，名称为：EFAnnotationTable&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403203411759-81996283.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403203559035-1851470271.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.安装EF：【install-package entityframework -version 6.2.0】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403203809341-1108357994.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 3. 创建一个Student类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; StudentID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4.创建一个上下文类EFDbContext：【base中的name=后面名称要和SQL连接字符串名称一样。】&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EFDbContext:DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; EFDbContext() : &lt;span&gt;base&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name=&lt;span&gt;Constr&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        {

        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Student&amp;gt; StudentTable { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5.配置文件中配置连接字符串：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; &amp;lt;connectionStrings&amp;gt;
    &amp;lt;add name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Constr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; connectionString=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server=.;Database=EFAnnotationTableDB;uid=sa;pwd=Password_1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; providerName=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data.SqlClient&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/connectionStrings&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;6.测试程序：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; db = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFDbContext())
            {
               List&lt;/span&gt;&amp;lt;Student&amp;gt; lstStuModel=&lt;span&gt; db.StudentTable.ToList();
            }
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.ReadKey();
        }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行程序：【出现success字样，说明已经生成数据库和数据表成功了！】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403204908718-1712623337.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们看一下数据库：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403205019383-1001955270.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 这就是EF默认为我们生成的数据表，可以看到，表名称默认是实体名称+s后缀。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们使用数据注解：修改一下Student实体：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403205222226-1739237223.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 运行之前，我们需要先手动删除一下刚才生成的数据库和数据表。因为这里我没有启用数据库迁移技术。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403205440216-1264115934.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到生成的表名是：StudentInfo了。现在我们使用数据注解，指定一下表的模式名称：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403205552912-1139138532.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算了，我还是修改一下代码：免得每次测试都要手动删除数据库。【PS：这里直接运行就会报下图错误：】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403205717010-1841034465.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们改一下：上下文类的代码，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403210015577-1094986573.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后运行：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403210033641-1366484320.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;成功了，我们看下数据库：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190403210109772-581946327.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看到了么，模式名，变成了我们设定的My.好了，这一篇数据注解之Table,就介绍完了，大家有不明白的可以留言，我会一一回复，谢谢支持！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 03 Apr 2019 13:03:00 +0000</pubDate>
<dc:creator>灰太狼的梦想</dc:creator>
<og:description>原文地址：http://www.entityframeworktutorial.net/code-first/table-dataannotations-attribute-in-code-first</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/caofangsheng/p/10651529.html</dc:identifier>
</item>
<item>
<title>语音识别ASR - HTK(HResults)计算字错率WER、句错率SER - Findyou</title>
<link>http://www.cnblogs.com/findyou/p/10646312.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/findyou/p/10646312.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       好久没发文，看到仍有这么多关注的小伙伴，觉得不发篇文对不住。确实好久没有输出经验总结相关的文档，抽了个时间，整理了下笔记，发一篇关于ASR常用测试指标。比如字错率、句错率指标，以及计算工具HResults的使用篇，后续慢慢找时间输出一些人工智能领域，小白可理解可用的基础知识，或者整理一些其他笔记发一发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;转载说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文为原创文章，如需转载，请在开篇显著位置注明作者&lt;a href=&quot;http://www.cnblogs.com/findyou/p/6925733.html%20&quot; target=&quot;_blank&quot;&gt;Findyou&lt;/a&gt;和出处&lt;/p&gt;



&lt;hr/&gt;&lt;h2&gt; 1.1、语音识别(ASR)&lt;/h2&gt;
&lt;p&gt;语音识别（speech recognition）技术，也被称为自动语音识别（英语：&lt;strong&gt;Automatic Speech Recognition,&lt;/strong&gt; ASR），&lt;/p&gt;
&lt;p&gt;狭隘一点白话说：&lt;span&gt;&lt;strong&gt;将语音转换为文字的技术。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/404051/201904/404051-20190403014535914-1610385026.jpg&quot; alt=&quot;&quot; width=&quot;508&quot; height=&quot;179&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Findyou：一般使用ASR缩写。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;1.2、句错率(SER)&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;SER = 错误句数 / 总句数&lt;/span&gt;&lt;/h3&gt;

&lt;h2&gt;1.3、句正确率(S.Corr）&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;句正确率：Sentence Correct&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;
&lt;p&gt;计算公式：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;S.Corr =  1 - SER = 正确句数 / 总句数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;1.4、字错率(WER/CER)&lt;/h2&gt;
&lt;p&gt;WER，Word error rate，词错率，但一般称为字错率，是语音识别领域的关键性评估指标，&lt;span&gt;WER&lt;span&gt;越低&lt;/span&gt;表示效果&lt;span&gt;越好&lt;/span&gt;&lt;/span&gt;！&lt;/p&gt;
&lt;p&gt;CER，Character Error Rate，字符错误率，中文一般用CER来表示字错率，原因请见1.4.3。&lt;/p&gt;

&lt;h3&gt;»1.4.1 、计算原理&lt;/h3&gt;
&lt;p&gt;字符串编辑距离（Levenshtein距离）算法&lt;/p&gt;

&lt;h3&gt;»1.4.2、计算公式(重要)&lt;/h3&gt;
&lt;h3&gt;&lt;strong&gt;&lt;span&gt;WER &lt;span&gt;=&lt;/span&gt; (S + D + I ) / N &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;(S + D + I ) / &lt;/strong&gt;&lt;strong&gt;(S + D + H ) &lt;/strong&gt;&lt;/span&gt; &lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/404051/201904/404051-20190402231917139-1333758974.png&quot; alt=&quot;&quot; width=&quot;524&quot; height=&quot;149&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（公式图片和文字一样，仅方便拷贝）&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;S 为替换的字数&lt;/strong&gt;，常用缩写WS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D 为删除的字数&lt;/strong&gt;，常用缩写WD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I  为插入的字数&lt;/strong&gt;，常用缩写WI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H 为正确的字数&lt;/strong&gt;，维基百科是C，&lt;span&gt;但我统一改用&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;H&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N 为（S替换+ D删除+ H正确）的字数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Findyou&lt;/strong&gt;：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;1.正确的字数：维基百科里用的是C代表，H = N - (S+D) = C，我这边直接改成H，减少过多概念与变量。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;2.大多数文章都没有给出N的计算方式，&lt;span&gt;很容易误以为是原句总字数或者识别结果总字数。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;3.不理解没关系，下面实例会帮助理解。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;»1.4.3、&lt;span&gt; 问题&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;问题1：为什么WER会大于100%&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为有插入字(识别多出来的字)，所以理论上WER有可能大于100%，在下面实例我会举例（请见2.3.5），但实际场景，特别是大样本量的时候，基本太不可能出现。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;问题2：说中文应该用CER，即“字符错误率”（Character Error Rate）&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Findyou举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
英文：hello   # 算一个Word
中文：你好     # 算两个字符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;啰嗦文字解释，就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;英文，因为最小单元是Word，语音识别应该用&quot;字错误率&quot;（WER），&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中文，因为最小单元是字符，语音识别应该用“字符错误率”（CER）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BUT(就是&lt;strong&gt;但是&lt;/strong&gt;的意思.&lt;strong&gt;..)，&lt;/strong&gt;他跟我前面那一句一样，说的都是废话！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们计算的时候谁不是按&lt;strong&gt;：中文的一个字符  = 英文的一个Word，&lt;/strong&gt;那这样用WER的公式有什么问题呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;谁再跟你咬文嚼字，怼他，使劲怼！&lt;/p&gt;
&lt;p&gt;怼完，说回严谨的话，建议采用CER表示，哈哈哈哈哈......&lt;/p&gt;

&lt;h2&gt;1.5、字正确率(W.Corr）&lt;/h2&gt;
&lt;p&gt;字正确率，Word Correct，一般国内宣传用的多，&lt;span&gt;&lt;strong&gt;识别率&lt;span&gt;(识别正确率)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;达到多少多少(请见1.7)。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;计算公式&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;W.Corr =   ( N - D - S ) / N = H / N&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;


&lt;h2&gt;1.6、字准确率(W.Acc）&lt;/h2&gt;
&lt;p&gt;字准确率，Word Accuracy&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计算公式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;W.Acc &lt;span&gt;=&lt;/span&gt;  1 - WER &lt;span&gt;=&lt;/span&gt; ( N - D - S - I ) / N &lt;span&gt;=&lt;/span&gt; (H - I) / N&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/404051/201904/404051-20190403013544886-1981703824.png&quot; alt=&quot;&quot; width=&quot;362&quot; height=&quot;53&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（图片和文字一样，方便拷贝，W.Acc是Findyou自己用的简写） &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;同WER，因为有插入字。换个说法，因为字准确率=1 - WER，而WER可能大于1，所以W.Acc会出现负数，但实际情况基本不存在。&lt;/p&gt;

&lt;h2&gt;1.7、聊点其他&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h3&gt;&lt;strong&gt;ASR影响素因&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;人群：男、女、老人、小孩...&lt;/li&gt;
&lt;li&gt;音量)&lt;/li&gt;
&lt;li&gt;距离(与拾音设备的距离)&lt;/li&gt;
&lt;li&gt;角度(与拾音设备的角度)&lt;/li&gt;
&lt;li&gt;设备(拾音设备的硬件)&lt;/li&gt;
&lt;li&gt;环境：安静、嘈杂(自噪、外噪)、家庭、商场...&lt;/li&gt;
&lt;li&gt;句长&lt;/li&gt;
&lt;li&gt;口音、方言&lt;/li&gt;
&lt;li&gt;语速&lt;/li&gt;
&lt;li&gt;语言：中文、英语&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;大概举例几个影响因素(懒得放脑图，文字也方便大家拷贝)，&lt;/p&gt;
&lt;p&gt;因为ASR的识别影响因素过多，所以很多时候会从各种纬度测试，比如：男生字错率、女生字错率，或者小孩字错率、平均字错率等等,&lt;/p&gt;
&lt;p&gt;如果没有公布测试数据与方法，不可信，因会存在几个操作，最大的问题是：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;过拟合：&lt;/strong&gt;训练数据、测试数据、验证数据是同一份，&lt;span&gt;打外比方说：&lt;/span&gt;要考试的卷子就是你前一天发的老师发的练习卷还带答案的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先扯到这，后面找时间再整理一篇ASR测试方法系统讲一讲，&lt;/p&gt;
&lt;p&gt;做为测试我们如何去测ASR以及制定各种测试标准。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
&lt;h3&gt;行业水平&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;英语-WER；
&lt;ul&gt;&lt;li&gt;IBM：行业标准Switchboard语音识别任务，2016年 6.9%，2017年 5.5% &lt;/li&gt;
&lt;li&gt;微软：行业标准Switchboard语音识别任务，2016年 6.3% -&amp;gt; 5.9%，2017年 5.1%，这个目前最低的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;说明：ICASSP2017上IBM说人类速记员WER是5.1%，一般认为5.9% 的字错率是人类速记员的水平。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;中文-WER/CER：
&lt;ul&gt;&lt;li&gt;小米：2018年 小米电视 2.81%&lt;/li&gt;
&lt;li&gt;百度：2016年 短语识别 3.7%&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;中文-W.Acc：&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;百度：2016年 识别准确率 97%&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;搜狗：2016年 识别准确率 97%&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;讯飞：2016年 识别准确率 97%&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Findyou部分数据来源：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;微软WER 5.9%：&lt;a href=&quot;https://arxiv.org/abs/1610.05256&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://arxiv.org/abs/1610.05256&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;微软WER 5.1%： &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/08/ms_swbd17-2.pdf&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/08/ms_swbd17-2.pdf&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;小米电视CER 2.81% ：&lt;a href=&quot;https://arxiv.org/pdf/1707.07167.pdf&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://arxiv.org/pdf/1707.07167.pdf&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;国内百度等同时宣布识别准确率97% ： &lt;a href=&quot;https://www.zhihu.com/question/53001402&quot;&gt;&lt;span&gt;https://www.zhihu.com/question/53001402&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;&lt;p&gt;了&lt;span&gt;解了ASR相关的指标，需要有工具来进行结果统计计算，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本次主要介绍HTK工具，python也有Levenshtein的库，但没有HResults现成的来的简单。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;2.1、HTK工具简介&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;HTK工具，HTK（HMM Toolkit）一款基于HMM模型(隐马尔可夫模型)的语音处理工具，&lt;strong&gt;&lt;span&gt;HTK主要用于语音识别研究&lt;/span&gt;&lt;/strong&gt;，尽管它已被用于许多其他应用，包括&lt;strong&gt;语音合成，字符识别和DNA测序的研究&lt;/strong&gt;。HTK最初是在剑桥大学工程系（CUED）的机器智能实验室 （以前称为语音视觉和机器人小组）开发的。后版权辗转到Microsoft，其保留了原始HTK代码的版权，具体介绍请移步HTK官网。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Findyou：下载你需要先注册用户，记住你的密码，FTP下载的时候需要。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;2.2、HResults简介与使用&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;HTK有一系列工具，但我主要想写的是HResults。 &lt;/p&gt;
&lt;p&gt;Centos系统编译后的HTK3.4.1版本,HResults下载地址&lt;/p&gt;
&lt;p&gt;百度网盘: &lt;a href=&quot;https://pan.baidu.com/s/1gfm9jjqjZzJXU0lyGrLrCA&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1gfm9jjqjZzJXU0lyGrLrCA&lt;/a&gt;      &lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;提取码: wbfp&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;»2.2.1 、使用帮助&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span readability=&quot;2&quot;&gt;$ HResults&lt;p&gt;USAGE: HResults [options] labelList recFiles...

 Option                                       Default

 &lt;/p&gt;&lt;/span&gt;-a s    Redefine &lt;span&gt;string&lt;/span&gt;&lt;span&gt; level label          SENT
 &lt;/span&gt;-&lt;span&gt;b s    Redefine unitlevel label             WORD
 &lt;/span&gt;-c      Ignore &lt;span&gt;case&lt;/span&gt;&lt;span&gt; differences              off
 &lt;/span&gt;-d N    Find best of N levels                &lt;span&gt;1&lt;/span&gt;
 -&lt;span&gt;e s t  Label t is equivalent to s
 &lt;/span&gt;-&lt;span&gt;f      Enable full results                  off
 &lt;/span&gt;-g &lt;span&gt;fmt&lt;/span&gt;  Set test label format to &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;         HTK
 &lt;/span&gt;-&lt;span&gt;h      Enable NIST style formatting         off
 &lt;/span&gt;-&lt;span&gt;k s    Results per spkr using mask s        off
 &lt;/span&gt;-&lt;span&gt;m N    Process only the first N rec files   all
 &lt;/span&gt;-&lt;span&gt;n      Use NIST alignment procedure         off
 &lt;/span&gt;-&lt;span&gt;p      Output phoneme statistics            off
 &lt;/span&gt;-&lt;span&gt;s      Strip triphone contexts              off
 &lt;/span&gt;-t      Output &lt;span&gt;time&lt;/span&gt;&lt;span&gt; aligned transcriptions   off
 &lt;/span&gt;-u f    False alarm &lt;span&gt;time&lt;/span&gt; units (hours)       &lt;span&gt;1.0&lt;/span&gt;
 -&lt;span&gt;w&lt;/span&gt;&lt;span&gt;      Enable word spotting analysis        off
 &lt;/span&gt;-z s    Redefine &lt;span&gt;null&lt;/span&gt; class name to s        ???
 -&lt;span&gt;A      Print command line arguments         off
 &lt;/span&gt;-C cf   Set config &lt;span&gt;file&lt;/span&gt;&lt;span&gt; to cf                default
 &lt;/span&gt;-&lt;span&gt;D      Display configuration variables      off
 &lt;/span&gt;-G &lt;span&gt;fmt&lt;/span&gt;  Set source label format to &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;       as config
 &lt;/span&gt;-I mlf  Load master label &lt;span&gt;file&lt;/span&gt;&lt;span&gt; mlf
 &lt;/span&gt;-L &lt;span&gt;dir&lt;/span&gt;  Set input label (or net) &lt;span&gt;dir&lt;/span&gt;&lt;span&gt;         current
 &lt;/span&gt;-S f    Set script &lt;span&gt;file&lt;/span&gt;&lt;span&gt; to f                 none
 &lt;/span&gt;-T N    Set trace flags to N                 &lt;span&gt;0&lt;/span&gt;
 -&lt;span&gt;V      Print version information            off
 &lt;/span&gt;-X ext  Set input label (or net) &lt;span&gt;file&lt;/span&gt; ext    lab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;HTKBook:  &lt;a href=&quot;https://labrosa.ee.columbia.edu/doc/HTKBook21/node233.html&quot;&gt;&lt;span&gt;https://labrosa.ee.columbia.edu/doc/HTKBook21/node233.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;»2.2.2 、文本转换为MLF文件&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;测试用例：src.txt  (暂时不要去管专业术语)&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1&lt;span&gt; 今天天气怎么样
&lt;/span&gt;2 明天天气怎么样
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Findyou:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.第一列是数字，主要是为了与ASR结果一一对应&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.我们一般会剔除标点符号计算WER，所以注意去标点符号&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;src.txt - &amp;gt; src.mlf 文件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!MLF!#&lt;/span&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*No1.lab&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
今
天
天
气
怎
么
样
.
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*No2.lab&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
明
天
天
气
怎
么
样
.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Findyou：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.注意第一行加：#!MLF!#&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.注意&quot;*xxx.lab&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.注意每句的点&lt;/span&gt;&lt;/p&gt;

&lt;ul data-source-line=&quot;107&quot;&gt;&lt;li&gt;ASR识别结果：testResult.txt 文件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1&lt;span&gt; 惊天天气
&lt;/span&gt;2 明天天气怎么样
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Findyou：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.很多时间是自动化执行，或手工执行得到识别结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.测试结果，第一列应该与src.txt对齐，通过第一列来识别需要对比的语料。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;例：HResults 会根据 &quot;*No1.lab&quot;  对应  &quot;*No1.rec&quot;  来找到对应的文本计算WER。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;testResult.txt - &amp;gt; testResult.mlf 文件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!MLF!#&lt;/span&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*No1.rec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
惊
天
天
气
.
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*No2.rec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
明
天
天
气
怎
么
样
.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Findyou：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.txt转换到mlf可以用脚本转换，注意双个mlf文件的不同，lab与rec关键字。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;»2.2.3 、TXT转换为MLF脚本&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;src2mlf.py&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,sys
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; to_mlf(xi):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     dx=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;零&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;一&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;二&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;五&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;六&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;七&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;八&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;九&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     d=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     eng=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     tx=[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;？&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; xi:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         u=x.encode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; u &lt;span&gt;in&lt;/span&gt;&lt;span&gt; tx:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; len(u)==1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; u &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dx:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 u=&lt;span&gt;dx[u]
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             eng.append(str(u, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; len(eng)&amp;gt;&lt;span&gt;0:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 d.append(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;.join(eng).upper())
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 eng=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             d.append(str(u, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; len(eng)&amp;gt;&lt;span&gt;0:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             d.append(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;.join(eng).upper())
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; d
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fn_to_lab(s):
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     x=&lt;span&gt;s.split()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; x:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         d=&lt;span&gt;to_mlf(i.strip())
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; len(d)&amp;gt;&lt;span&gt;0:
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.join(d))
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; fn=sys.argv[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#!MLF!#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; l &lt;span&gt;in&lt;/span&gt;&lt;span&gt; open(fn):
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     l=&lt;span&gt;l.strip()
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     x=&lt;span&gt;l.split()
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     k=&lt;span&gt;x[0].strip()
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     v=&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;.join(x[1&lt;span&gt;:])
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     t=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.join(k)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;*No%s.lab&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; t)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     fn_to_lab(v)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Findyou：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.此脚本是将测试用例转为src.mlf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.如需将测试结果testResult.txt 转testResult.mlf，则拷贝一份如 rec2mlf.py，改第53行的关键字lab为rec即可。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; 脚本使用&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; python src2mlf.py src.txt &amp;gt;&lt;span&gt;src.mlf
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; python rec2mlf.py testResult.txt &amp;gt;testResult.mlf
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;»2.2.4 、常用命令&lt;/h3&gt;
&lt;p&gt;以上文2.2.2 举例文本为例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Aligned transcription: *No.&lt;span&gt;1&lt;/span&gt;.lab vs *No.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.rec
 LAB: 今 天 天 气 好 吗
 REC: 惊 天 天 气
    ,&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;.
    &lt;/span&gt;| HTK Results Analysis at Wed Apr  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;            |
    | Ref: src.mlf                                                |
    | Rec: testResult.mlf                                         |
    |=============================================================|
    |           # Snt |  Corr    Sub    Del    Ins    Err  S. Err |
    |-------------------------------------------------------------|
    | Sum/Avg |    &lt;span&gt;2&lt;/span&gt;  |  &lt;span&gt;76.92&lt;/span&gt;   &lt;span&gt;7.69&lt;/span&gt;  &lt;span&gt;15.38&lt;/span&gt;   &lt;span&gt;0.00&lt;/span&gt;  &lt;span&gt;23.08&lt;/span&gt;  &lt;span&gt;50.00&lt;/span&gt; |&lt;span&gt;
    `&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Aligned transcription: &lt;/span&gt;*No.&lt;span&gt;1&lt;/span&gt;.lab vs *No.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.rec
 LAB: 今 天 天 气 好 吗
 REC: 惊 天 天 气
&lt;/span&gt;====================== HTK Results Analysis =======================&lt;span&gt;
  Date: Wed Apr  &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;&lt;span&gt;
  Ref : src.mlf
  Rec : testResult.mlf
&lt;/span&gt;------------------------ Overall Results --------------------------&lt;span&gt;
SENT: &lt;/span&gt;%Correct=&lt;span&gt;50.00&lt;/span&gt; [H=&lt;span&gt;1&lt;/span&gt;, S=&lt;span&gt;1&lt;/span&gt;, N=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]
WORD: &lt;/span&gt;%Corr=&lt;span&gt;76.92&lt;/span&gt;, Acc=&lt;span&gt;76.92&lt;/span&gt; [H=&lt;span&gt;10&lt;/span&gt;, D=&lt;span&gt;2&lt;/span&gt;, S=&lt;span&gt;1&lt;/span&gt;, I=&lt;span&gt;0&lt;/span&gt;, N=&lt;span&gt;13&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;===================================================================
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;2.3、HResults样例解析&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;以一句测试用例与测试结果为例，举实例让大家快速了解HResults的WER。&lt;/p&gt;
&lt;h3&gt;»2.3.1 只有删除(D)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 说明&lt;/span&gt;
&lt;span&gt;LAB:测试用例
REC:识别结果

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 结果&lt;/span&gt;
Aligned transcription: *No.1.lab vs *No.1&lt;span&gt;.rec
LAB: 今 天 天 气 怎 么 样
REC: 今 天 天 气
,&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;.
&lt;/span&gt;| HTK Results Analysis at Tue Apr  2 22:37:09 2019            |
| Ref: src.mlf                                                |
| Rec: testResult.mlf                                         |
|=============================================================|
|           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Snt |  Corr    Sub    Del    Ins    Err  S. Err |&lt;/span&gt;
|-------------------------------------------------------------|
| Sum/Avg |    1  |  57.14   0.00  42.86   0.00  42.86 100.00 |&lt;span&gt;
`&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;
...
&lt;/span&gt;------------------------ Overall Results --------------------------&lt;span&gt;
SENT: &lt;/span&gt;%Correct=0.00 [H=0, S=1, N=1&lt;span&gt;]
WORD: &lt;/span&gt;%Corr=57.14, Acc=57.14 [H=4, D=3, S=0, I=0, N=7&lt;span&gt;]
&lt;/span&gt;===================================================================
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;SER(句错率) = 1 / 1 = 100 %&lt;/li&gt;
&lt;li&gt;S.Correct(句正确率) = 0 S.H / 1 S.N = 0.00 %&lt;/li&gt;
&lt;li&gt;N = 0替换 + 3删除 + 4正确 = 7&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;WER(字错率) = ( S 0 + D 3 + I 0 ) / 7 = 42.86 %&lt;/li&gt;
&lt;li&gt;W.Correct(字正确率) = H / N = 4 / 7 = 57.14 %&lt;/li&gt;
&lt;li&gt;W.Accuracy(字准确率) = (H - I)/ N = 1 - W.Err = 57.14 %&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;»2.3.2 替换(S) + 删除(D) &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;LAB: 今 天 天 气 怎 么 样
REC: 惊 天 天 气
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 结果&lt;/span&gt;
&lt;span&gt;...
&lt;/span&gt;|=============================================================|
|           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Snt |  Corr    Sub    Del    Ins    Err  S. Err |&lt;/span&gt;
|-------------------------------------------------------------|
| Sum/Avg |    1  |  42.86  14.29  42.86   0.00  57.14 100.00 |&lt;span&gt;
`&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;...
SENT: &lt;/span&gt;%Correct=0.00 [H=0, S=1, N=1&lt;span&gt;]
WORD: &lt;/span&gt;%Corr=42.86, Acc=42.86 [H=3, D=3, S=1, I=0, N=7]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;SER = 1 - S.Corr = 100 %&lt;/li&gt;
&lt;li&gt;S.Correct = S.H / S.N = 0.00 %&lt;/li&gt;
&lt;li&gt;N = 1替 + 3删 + 3H = 7&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;WER = (S + D + I ) / N = 57.14 %&lt;/li&gt;
&lt;li&gt;W.Correct = H / N = 42.86 %&lt;/li&gt;
&lt;li&gt;W.Accuracy = (H - I) / N = 1 - W.Err = 42.86 %&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;»2.3.3 替换(S) + 删除(D) + 插入(I)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;LAB: 今 天     天 气 怎 么 样
REC: 惊 天 田 天 气
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 结果&lt;/span&gt;
&lt;span&gt;...
&lt;/span&gt;|=============================================================|
|           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Snt |  Corr    Sub    Del    Ins    Err  S. Err |&lt;/span&gt;
|-------------------------------------------------------------|
| Sum/Avg |    1  |  42.86  14.29  42.86  14.29  71.43 100.00 |&lt;span&gt;
`&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;...
SENT: &lt;/span&gt;%Correct=0.00 [H=0, S=1, N=1&lt;span&gt;]
WORD: &lt;/span&gt;%Corr=42.86, Acc=28.57 [H=3, D=3, S=1, I=1, N=7]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;SER = 1 - S.Corr = 100 %&lt;/li&gt;
&lt;li&gt;S.Correct = S.H / S.N = 0.00 %&lt;/li&gt;
&lt;li&gt;N = 1S + 3D + 3H = 7&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;WER = (S + D + I) / N = 5/7 = 71.43 %&lt;/li&gt;
&lt;li&gt;W.Correct = H / N = 42.86 %&lt;/li&gt;
&lt;li&gt;W.Accuracy = (H - I) / N = 1 - W.Err = 28.57 %&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;»2.3.4 全错（结果字数&amp;lt;语料字数）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;LAB: 今 天 天 气 好 吗
REC:             不 知 道&lt;br/&gt;...
&lt;/span&gt;|=============================================================|
|           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Snt |  Corr    Sub    Del    Ins    Err  S. Err |&lt;/span&gt;
|-------------------------------------------------------------|
| Sum/Avg |    1  |   0.00  50.00  50.00   0.00 100.00 100.00 |&lt;span&gt;
`&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;...
SENT: &lt;/span&gt;%Correct=0.00 [H=0, S=1, N=1&lt;span&gt;]
WORD: &lt;/span&gt;%Corr=0.00, Acc=0.00 [H=0, D=3, S=3, I=0, N=6]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;SER = 1 - S.Corr = 100 %&lt;/li&gt;
&lt;li&gt;S.Correct = S.H / S.N = 0.00 %&lt;/li&gt;
&lt;li&gt;N = 3S + 3D + 0H = 6&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;WER = (S + D + I) / N = 6/6 = 100.00 %&lt;/li&gt;
&lt;li&gt;W.Correct = H / N = 0.00 %&lt;/li&gt;
&lt;li&gt;W.Accuracy = (H - I) / N = 1 - W.Err = 0.00 %&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;»2.3.5 全错（结果字数&amp;gt;语料字数）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;LAB:     今 天 天 气 好 吗
REC: 惊 田 田 七 豪 嘛 嘛
...
&lt;/span&gt;|=============================================================|
|           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Snt |  Corr    Sub    Del    Ins    Err  S. Err |&lt;/span&gt;
|-------------------------------------------------------------|
| Sum/Avg |    1  |   0.00 100.00   0.00  16.67 116.67 100.00 |&lt;span&gt;
`&lt;/span&gt;-------------------------------------------------------------&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;...
SENT: &lt;/span&gt;%Correct=0.00 [H=0, S=1, N=1&lt;span&gt;]
WORD: &lt;/span&gt;%Corr=0.00, Acc=-16.67 [H=0, D=0, S=6, I=1, N=6]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;SER = 1 - S.Corr = 100 %&lt;/li&gt;
&lt;li&gt;S.Correct = S.H / S.N = 0.00 %&lt;/li&gt;
&lt;li&gt;N = 6S + 0D + 0H = 6&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;WER = (S + D + I) / N = 7/6 = 116.67 %&lt;/li&gt;
&lt;li&gt;W.Correct = H / N = 0.00 %&lt;/li&gt;
&lt;li&gt;W.Accuracy = (H - I) / N = 1 - W.Err = &lt;span&gt;-16.67 %&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;转载说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文为原创文章，如需转载，请在开篇显著位置注明作者&lt;a href=&quot;http://www.cnblogs.com/findyou/p/6925733.html%20&quot; target=&quot;_blank&quot;&gt;Findyou&lt;/a&gt;和出处&lt;/p&gt;

</description>
<pubDate>Wed, 03 Apr 2019 12:22:00 +0000</pubDate>
<dc:creator>Findyou</dc:creator>
<og:description>本文主要介绍AI测试中，语音识别(ASR)常用到一些性能指标，如字错率(WER/CER)、句错率(SER)。简单介绍HTK工具，着重介绍测试小伙伴常用工具HResults，并举例详解WER等指标计算。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/findyou/p/10646312.html</dc:identifier>
</item>
</channel>
</rss>