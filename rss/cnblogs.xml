<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>int类型按字节打印输出 - shell_nut</title>
<link>http://www.cnblogs.com/MisterXu/p/10828963.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MisterXu/p/10828963.html</guid>
<description>&lt;p&gt;  今天在项目编程中，遇到一个问题，u32类型的参数，要赋值给一个&lt;code&gt;u8 array[3]&lt;/code&gt;，想用&lt;code&gt;memcpy()&lt;/code&gt;函数进行赋值，由于类型大小不一致，一时不知道怎么做，经过查找，得以解决。说明如下;&lt;/p&gt;
&lt;p&gt;  项目是在内网中做，在查找过程中用自己笔记本做了一下实验，vs2013版本。&lt;/p&gt;
&lt;p&gt;  类似主题是int类型按字节打印数据，&lt;code&gt;sizeof(int)&lt;/code&gt;实验验证后为4字节，就分别打印出这4个字节中的数值。&lt;/p&gt;
&lt;p&gt;  先贴上代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

int main()
{
    int i = 128;
    
    cout &amp;lt;&amp;lt; sizeof(int) &amp;lt;&amp;lt; endl;

    unsigned char* cc = (unsigned char*)&amp;amp;i;

    for (int j = 0; j &amp;lt; 4; j++)
        printf(&quot;cc: %p \t *cc: %x\n&quot;, cc + j, *(cc + j));
    
    system(&quot;pause&quot;);
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1222913/201905/1222913-20190507233424319-24213930.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上是正确代码&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;以下对代码做改变&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;unsigned char* cc = (unsigned char*)&amp;amp;i;
改为
 char* cc = ( char*)&amp;amp;i;

 //代码如下：
#include&amp;lt;iostream&amp;gt;
using namespace std;

int main()
{
    int i = 128;
    
    cout &amp;lt;&amp;lt; sizeof(int) &amp;lt;&amp;lt; endl;

     char* cc = ( char*)&amp;amp;i;

    for (int j = 0; j &amp;lt; 4; j++)
        printf(&quot;cc: %p \t *cc: %x\n&quot;, cc + j, *(cc + j));
    
    system(&quot;pause&quot;);
    return 0;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1222913/201905/1222913-20190507233450960-308810046.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出为什么是&lt;code&gt;ffffff80&lt;/code&gt;呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  char类型是有符号字符型变量还是无符号字符型变量，要看编译器是怎么定义的，不能想当然。char变量为一个字节，8bit，&lt;code&gt;sighed char&lt;/code&gt;表示的范围是-128~127，（-128在内存中二进制表示为1000 0000,127在内存中二进制表示为0111 1111），&lt;code&gt;unsighed char&lt;/code&gt;表示的范围是0~255.&lt;/p&gt;
&lt;p&gt;  给 i 赋值128,十六进制0x80，二进制1000 0000,相当于是给char变量赋值-128.&lt;br/&gt;  printf()函数的参数&lt;code&gt;%x&lt;/code&gt;其含义为&lt;code&gt;Unsigned hexadecimal integer&lt;/code&gt;；即输出一个十六进制的整型，而在代码中，%x对应的是char类型，所以此时printf()函数会将char类型隐式转换为int类型。&lt;/p&gt;
&lt;p&gt;  对于int类型的对象，其值为-128，则其对应的内存值是0xFFFFFF80&lt;br/&gt;  所以，在printf()函数中，char类型隐式转换成int类型后，输出就会变成4字节的0xFFFFFF80&lt;/p&gt;
</description>
<pubDate>Tue, 07 May 2019 15:36:00 +0000</pubDate>
<dc:creator>shell_nut</dc:creator>
<og:description>  今天在项目编程中，遇到一个问题，u32类型的参数，要赋值给一个 ，想用 函数进行赋值，由于类型大小不一致，一时不知道怎么做，经过查找，得以解决。说明如下;  &amp;ems</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MisterXu/p/10828963.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core Web API + Angular 仿B站（二）后台模型创建以及数据库的初始化 - NanaseRuri</title>
<link>http://www.cnblogs.com/gokoururi/p/10688429.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gokoururi/p/10688429.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本系列文章主要为对所学 Angular 框架的一次微小的实践，对 b站页面作简单的模仿。&lt;/p&gt;
&lt;p&gt;本系列文章主要参考资料：&lt;/p&gt;
&lt;p&gt;微软文档：　　　　&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/getting-started/?view=aspnetcore-2.1&amp;amp;tabs=windows&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/zh-cn/aspnet/core/getting-started/?view=aspnetcore-2.1&amp;amp;tabs=windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Angular 文档：　　 &lt;a href=&quot;https://angular.cn/tutorial&quot; target=&quot;_blank&quot;&gt;https://angular.cn/tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typescript 文档：　&lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot; target=&quot;_blank&quot;&gt;https://www.typescriptlang.org/docs/home.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;此系列皆使用 C#+Typescript+Angular+EF Core 作为开发环境，使用 VSCode 对 Angular 进行开发同时作为命令行启动器，使用 VS2017 对 ASP.NET Core 进行开发。如果有什么问题或者意见欢迎在留言区进行留言。 &lt;/p&gt;
&lt;p&gt;如果图片看不清的话请在新窗口打开图片或保存本地查看。&lt;/p&gt;
&lt;p&gt;项目 github 地址：&lt;a href=&quot;https://github.com/NanaseRuri/FakeBilibili&quot; target=&quot;_blank&quot;&gt;https://github.com/NanaseRuri/FakeBilibili&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;本章内容&lt;/strong&gt;：后台模型分析以及建立数据库&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;strong&gt;一、模型分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190429211525686-440166850.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、创建模型以及数据库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用户登录信息：&lt;/p&gt;
&lt;p&gt;通过添加修饰 [DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None)] 可以手动设置 Id 属性插入数据库：&lt;/p&gt;
&lt;p&gt;增加一个 salt 用来接受随机字符串以进行加密。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserIdentity
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        [Key]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        [DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None)]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        [EmailAddress]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        [Required]        
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Salt { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;用户登录信息数据库，通过创建索引的方式为用户名和邮箱添加唯一约束：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserIdentityDbContext : DbContext
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; UserIdentityDbContext(DbContextOptions&amp;lt;UserIdentityDbContext&amp;gt; options):&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        { }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;UserIdentity&amp;gt; Users { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnModelCreating(ModelBuilder modelBuilder)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             modelBuilder.Entity&amp;lt;UserIdentity&amp;gt;().HasIndex(u =&amp;gt; &lt;span&gt;new&lt;/span&gt; { u.Email }).IsUnique(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             modelBuilder.Entity&amp;lt;UserIdentity&amp;gt;().HasIndex(u =&amp;gt; &lt;span&gt;new&lt;/span&gt; { u.UserName }).IsUnique(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在 appsetting.json 中添加数据库连接字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConnectionStrings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserIdentityDbContext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server=(localdb)\\mssqllocaldb;Database=UserIdentityDbContext;Trusted_Connection=True;MultipleActiveResultSets=true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserAndVideoDbContext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server=(localdb)\\mssqllocaldb;Database=UserAndVideoDbContext;Trusted_Connection=True;MultipleActiveResultSets=true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;   },
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;VS2017 PM控制台中添加迁移：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    add-migration UserIdentityDb -c FakeBilibili.Data.UserIdentityDbContext
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190411212942611-185304405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;添加数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    update-database -c FakeBilibili.Data.UserIdentityDbContext
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190411213047230-1229163320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;查看数据库中 User 表的定义，已添加唯一约束：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190422112631011-625311036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 用户信息类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        [Key]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        [DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None)]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        [EmailAddress]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; AvatarLocation { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 作品
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ICollection&amp;lt;Video&amp;gt; Works { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 关注，内部用 / 分隔
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Follows { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 粉丝
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Fans { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先新建枚举用于确定视频分类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; Category
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        动画,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;        番剧,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        音乐,
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;        数码,
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;        游戏,
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;        科技
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;视频信息类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Video
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        [Key]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Title { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; User Author { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; VideoLocation { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }     
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ThumbnailLocation { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }       
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; TimeSpan Duration { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DateTime PublishDateTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 类别
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Category Category { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 标签
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Tag { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 观看数
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; VideoView { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建用户信息和视频的数据库，并通过创建索引的方式为用户名和邮箱添加唯一约束：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserAndVideoDbContext:DbContext
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; UserAndVideoDbContext(DbContextOptions&amp;lt;UserAndVideoDbContext&amp;gt; options):&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options) { }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;User&amp;gt; Users { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Video&amp;gt; Videos { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnModelCreating(ModelBuilder modelBuilder)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             modelBuilder.Entity&amp;lt;User&amp;gt;().HasIndex(u =&amp;gt; &lt;span&gt;new&lt;/span&gt; { u.Email}).IsUnique(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             modelBuilder.Entity&amp;lt;User&amp;gt;().HasIndex(u =&amp;gt; &lt;span&gt;new&lt;/span&gt; { u.UserName }).IsUnique(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行迁移和更新命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     add-migration UserAndVideoDb -&lt;span&gt;c FakeBilibili.Data.UserAndVideoDbContext
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     update-database -c FakeBilibili.Data.UserAndVideoDbContext
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190411231627123-1074455838.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、数据库初始化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了方便添加盐值，添加一个 SaltGenerator 类：&lt;/p&gt;
&lt;p&gt;默认生成一个 8 位的随机字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SaltGenerator
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GenerateSalt()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; GenerateSalt(&lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GenerateSalt(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (length&amp;lt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; String.Empty;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;             StringBuilder salt = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             Random random=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();            
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             StringBuilder saltCharList=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将小写字母加入到列表中&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;97&lt;/span&gt;; i &amp;lt;= &lt;span&gt;122&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 saltCharList.Append((&lt;span&gt;char&lt;/span&gt;&lt;span&gt;) i);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将大写字母加入到列表中&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;65&lt;/span&gt;; i &amp;lt;=&lt;span&gt;90&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 saltCharList.Append((&lt;span&gt;char&lt;/span&gt;&lt;span&gt;) i);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             saltCharList.Append(&lt;span&gt;0123456789&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; saltIndex = &lt;span&gt;0&lt;/span&gt;; saltIndex &amp;lt; length; saltIndex++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 salt.Append(saltCharList[random.Next(&lt;span&gt;61&lt;/span&gt;&lt;span&gt;)]);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; salt.ToString();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了方便对密码进行加密，在此创建一个 Encryptor 类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Encryptor : IEncrypt
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; SHA256 sha256;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Encryptor()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             sha256 =&lt;span&gt; SHA256.Create();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Encrypt(&lt;span&gt;string&lt;/span&gt; password, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; salt)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password +&lt;span&gt; salt));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             StringBuilder hashPassword = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; hashByte &lt;span&gt;in&lt;/span&gt;&lt;span&gt; hashBytes)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                hashPassword.Append(hashByte);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; hashPassword.ToString();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;分别创建三个类进行登录用用户，用户以及视频的初始化：&lt;/p&gt;
&lt;p&gt;对登录用用户进行初始化，使用 SHA256 算法对密码进行加密：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserIdentityInitiator
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Initial(IServiceProvider provider)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             UserIdentityDbContext context = provider.GetRequiredService&amp;lt;UserIdentityDbContext&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             Encryptor encryptor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Encryptor();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;context.Users.Any())
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            {                
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;20&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; salt =&lt;span&gt; SaltGenerator.GenerateSalt();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     UserIdentity user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserIdentity()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                         UserName = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User{i+1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,                        
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         Password = encryptor.Encrypt($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User{i+1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,salt),
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         Salt =&lt;span&gt; salt,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         Id = i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         Email = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User{i + 1}@cnblog.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    };
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.Users.AddAsync(user);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.SaveChangesAsync();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在 Configure 方法最后一行中添加代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
             UserIdentityInitiator.Initial(app.ApplicationServices).Wait();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行程序后查看本地数据库：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190422112441502-1777588978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;对用户进行初始化：&lt;/p&gt;
&lt;p&gt;在此添加了一个 Avatar 文件夹并放入几张图片备用，对用户头像进行初始化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190414154811631-1160893821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInitiator
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Initial(IServiceProvider serviceProvider)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             UserAndVideoDbContext context = serviceProvider.GetRequiredService&amp;lt;UserAndVideoDbContext&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;context.Users.Any())
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; currentDirectory =&lt;span&gt; Directory.GetCurrentDirectory();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; pictureSerial = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;                  
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                                 
&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;20&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     pictureSerial = i % &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     User user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         AvatarLocation = Path.Combine(currentDirectory,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Avatar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,$&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{pictureSerial}.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         UserName = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User{i+1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         Id = i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                         Email = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User{i+1}@cnblog.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    };                    
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.Users.AddAsync(user);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.SaveChangesAsync();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在 Configure 方法最后一行添加方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            UserInitiator.InitialUsers(app.ApplicationServices).Wait();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201905/1408470-20190503151518237-991417853.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;对视频进行初始化：&lt;/p&gt;
&lt;p&gt;新建一个 Video 文件夹放置若干视频：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190416113601233-1562582603.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在.net core 中为了生成缩略图，需要引用 System.Drawing.Common 库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190416153455560-1237638417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;为了方便地获取视频封面，可以引用 Xabe.FFmpeg 库：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190416153538077-1098271453.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;由于 Xabe.FFmpeg 是 .NET 平台上对 FFmpeg 封装，基本功能依靠于 FFmpeg 实现，因此需要下载 FFmpeg：&lt;a href=&quot;https://ffmpeg.zeranoe.com/builds/&quot; target=&quot;_blank&quot;&gt;https://ffmpeg.zeranoe.com/builds/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190417092202925-1824803267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;解压文件后将文件夹添加到环境变量中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190417092424064-1066807767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 新建一个类用以在本地保存缩略图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PictureTrimmer
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    {        
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetLocalTrimmedPicture(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; fileName)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; newLocation = fileName.Insert(fileName.LastIndexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)+&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;min.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;             Image.FromFile(fileName).GetThumbnailImage(&lt;span&gt;320&lt;/span&gt;, &lt;span&gt;180&lt;/span&gt;, (() =&amp;gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;), IntPtr.Zero).Save(newLocation);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; newLocation;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;初始化视频：&lt;/p&gt;
&lt;p&gt;为 FFmpeg.ExecutablesPath 赋值，设置成 FFmpeg 解压后的位置：&lt;/p&gt;
&lt;p&gt;由于 Xabe.FFmpeg 创建图片时使用 FileStream 指定 FileMode 为 NewCreate，所以存在已有文件时会抛出异常，需保证创建的图片不与现有文件重名。&lt;/p&gt;
&lt;p&gt;在此全部视频由 ID 为1的用户上传：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; VideoInitiator
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Initial(IServiceProvider provider)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             FFmpeg.ExecutablesPath = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\office softwares\FFMpeg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;             UserAndVideoDbContext context = provider.GetRequiredService&amp;lt;UserAndVideoDbContext&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; videoDirectory = Path.Combine(Directory.GetCurrentDirectory(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Video&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;             User author = context.Users.Include(u =&amp;gt; u.Works).FirstOrDefault(u =&amp;gt; u.Id == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;context.Videos.Any())
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;6&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; videoPath = Path.Combine(videoDirectory, $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{i}.mp4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; picPath = Path.Combine(videoDirectory, $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{i}.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (File.Exists(picPath))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                        File.Delete(picPath);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取视频信息&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                     IMediaInfo mediaInfo = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; MediaInfo.Get(videoPath);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;以 0 秒时的画面作为封面图并保存在本地&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    Conversion.Snapshot(videoPath, picPath,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         TimeSpan.FromSeconds(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)).Start().Wait();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;                     Video video = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Video()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                         Title = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;轻音少女 第{i}集&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                         Author = context.Users.FirstOrDefault(u =&amp;gt; u.Id == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                         Category =&lt;span&gt; Category.番剧,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                         VideoLocation =&lt;span&gt; videoPath,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                         Duration =&lt;span&gt; mediaInfo.Duration,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                         PublishDateTime =&lt;span&gt; DateTime.Now,
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                         ThumbnailLocation =&lt;span&gt; PictureTrimmer.GetLocalTrimmedPicture(picPath),
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                         Tag = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;轻音少女&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                         VideoView = &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                    };
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                    author.Works.Add(video);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.Videos.AddAsync(video);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.SaveChangesAsync();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 在 Configure 方法最后一行调用初始化方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            VideoInitiator.Initial(app.ApplicationServices).Wait();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行程序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201904/1408470-20190416171838594-124108301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;至此数据库初始化工作完成。&lt;/p&gt;
</description>
<pubDate>Tue, 07 May 2019 15:34:00 +0000</pubDate>
<dc:creator>NanaseRuri</dc:creator>
<og:description>ASP.NET Core Web API + Angular 仿B站（二）后台模型创建以及数据库的初始化，ASP.NET Core,获取缩略图,获取视频某一帧图片,ffmpeg,Image,SHA25</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gokoururi/p/10688429.html</dc:identifier>
</item>
<item>
<title>杂谈 论实例化类的第六种方式 - 彤哥读源码</title>
<link>http://www.cnblogs.com/tong-yuan/p/Instantial.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tong-yuan/p/Instantial.html</guid>
<description>&lt;p&gt;你知道几种实例化一个类的方式？&lt;/p&gt;
&lt;p&gt;new？反射？还有呢？&lt;/p&gt;
&lt;p&gt;*******************************************美丽的分割线*******************************&lt;/p&gt;
&lt;p&gt;笔者总结了一下大概有以下六种方式：&lt;/p&gt;
&lt;p&gt;（1）通过构造方法实例化一个类；&lt;/p&gt;
&lt;p&gt;（2）通过Class实例化一个类；&lt;/p&gt;
&lt;p&gt;（3）通过反射实例化一个类；&lt;/p&gt;
&lt;p&gt;（4）通过克隆实例化一个类；&lt;/p&gt;
&lt;p&gt;（5）通过反序列化实例化一个类；&lt;/p&gt;
&lt;p&gt;（6）通过Unsafe实例化一个类；&lt;/p&gt;
&lt;p&gt;Let us 直接上代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class InstantialTest {

    private static Unsafe unsafe;
    static {
        try {
            Field f = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);
            f.setAccessible(true);
            unsafe = (Unsafe) f.get(null);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }
    
    public static void main(String[] args) throws Exception {
        // 1. 构造方法
        User user1 = new User();
        // 2. Class，里面实际也是反射
        User user2 = User.class.newInstance();
        // 3. 反射
        User user3 = User.class.getConstructor().newInstance();
        // 4. 克隆
        User user4 = (User) user1.clone();
        // 5. 反序列化
        User user5 = unserialize(user1);
        // 6. Unsafe
        User user6 = (User) unsafe.allocateInstance(User.class);

        System.out.println(user1.age);
        System.out.println(user2.age);
        System.out.println(user3.age);
        System.out.println(user4.age);
        System.out.println(user5.age);
        System.out.println(user6.age);
    }

    private static User unserialize(User user1) throws Exception {
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;D://object.txt&quot;));
        oos.writeObject(user1);
        oos.close();

        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;D://object.txt&quot;));
        // 反序列化
        User user5 = (User) ois.readObject();
        ois.close();
        return user5;
    }

    static class User implements Cloneable, Serializable {
        private int age = 20;

        public User() {
            this.age = 10;
        }

        @Override
        protected Object clone() throws CloneNotSupportedException {
            return super.clone();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先不要急着往下看，你猜猜上面六种方式打印语句输出各是多少？&lt;/p&gt;
&lt;p&gt;不要看！&lt;/p&gt;
&lt;p&gt;不要看！&lt;/p&gt;
&lt;p&gt;不要看！&lt;/p&gt;
&lt;p&gt;最后打印的结果是这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10
10
10
10
10
0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;意不意外？惊不惊喜？&lt;/p&gt;
&lt;p&gt;最后一种通过Unsafe实例化的类，里面的age的值竟然是0，而不是10或者20。&lt;/p&gt;
&lt;p&gt;这是因为调用Unsafe的allocateInstance()方法只会给对象分配内存，并不会初始化对象中的属性，所以int类型的默认值就是0。&lt;/p&gt;
&lt;p&gt;还有其它方式实例化类吗？欢迎补充！&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;欢迎关注我的公众号“彤哥读源码”，查看更多源码系列文章, 与彤哥一起畅游源码的海洋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E9%9B%86%E5%90%88%E7%B3%BB%E5%88%97/resource/qrcode_ss.jpg&quot; alt=&quot;qrcode&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 07 May 2019 15:34:00 +0000</pubDate>
<dc:creator>彤哥读源码</dc:creator>
<og:description>你知道几种实例化一个类的方式？ new？反射？还有呢？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tong-yuan/p/Instantial.html</dc:identifier>
</item>
<item>
<title>MD5 - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/10828916.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/10828916.html</guid>
<description>&lt;p&gt;　　MD5算法是一种散列(hash)算法（摘要算法，指纹算法），不是一种加密算法。任何长度的任意内容都可以用MD5计算出散列值。&lt;/p&gt;
&lt;p&gt;　　特点:&lt;/p&gt;
&lt;p&gt;　　　　1、MD5长度为32位的16进制数字和字符串组成。&lt;/p&gt;
&lt;p&gt;　　　　2、单向性。&lt;/p&gt;
&lt;p&gt;　　　　3、不同的“源数据”，生成不同的MD5，相同的“源数据”，产生相同的MD5值。&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&lt;strong&gt;4、使用编码不同，计算出的MD5值不同！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　工具助手：CalcMD5.exe&lt;/p&gt;
&lt;p&gt;工具链接：https://pan.baidu.com/s/1uUotZHYdJYKs1-yheLKOGQ&lt;br/&gt;提取码：9sqn&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; button1_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; msg = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; ret =&lt;span&gt; GetMd5String(msg);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            MessageBox.Show(ret);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetMd5String(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             StringBuilder SB = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、创建对象;&lt;span&gt;&lt;strong&gt;命名空间：using System.Security.Cryptography;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             MD5 m5 =&lt;span&gt;&lt;strong&gt; MD5.Create();
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将字符串转byte数组&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] buffer =&lt;span&gt; System.Text.Encoding.Default.GetBytes(msg);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、计算&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] bytes =&lt;span&gt;&lt;strong&gt; m5.ComputeHash(buffer);
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、返回&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 SB.Append(&lt;span&gt;&lt;strong&gt;bytes[i].ToString(&quot;x2&quot;)&lt;/strong&gt;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;x:小写的十六进制；X：大写的十六进制；2：一位时，前面补0&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&lt;strong&gt;m5.Clear(); //用完后，清除内存
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将byte数组以十六进制返回&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; SB.ToString();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetMd5String2(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; path)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             StringBuilder sb = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             MD5 m5 =&lt;span&gt; MD5.Create();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             FileStream fs =&lt;span&gt; File.OpenRead(path);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] buffer =&lt;span&gt; m5.ComputeHash(fs);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; buffer.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 sb.Append(buffer[i].ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            m5.Clear();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            fs.Close();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            fs.Dispose();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.ToString();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;对数据库中的密码进行加密&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;数据库数据及表结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201905/1504448-20190507234629381-411039227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;验证：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201905/1504448-20190507234700670-187191123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201905/1504448-20190507234955428-125246519.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目地址链接：https://pan.baidu.com/s/1Wb7cbU-nKrlySsEZivnghQ &lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;提取码：okga&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 07 May 2019 15:24:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>一、介绍 MD5算法是一种散列(hash)算法（摘要算法，指纹算法），不是一种加密算法。任何长度的任意内容都可以用MD5计算出散列值。 特点: 1、MD5长度为32位的16进制数字和字符串组成。 2、</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenyanbin/p/10828916.html</dc:identifier>
</item>
<item>
<title>koa2基于stream(流)进行文件上传和下载 - 龙恩0707</title>
<link>http://www.cnblogs.com/tugenhua0707/p/10828869.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tugenhua0707/p/10828869.html</guid>
<description>&lt;p&gt;一：上传文件(包括单个文件或多个文件上传)&lt;/p&gt;
&lt;p&gt;在之前一篇文章，我们了解到nodejs中的流的概念，也了解到了使用流的优点，具体看我之前那一篇&lt;a href=&quot;https://www.cnblogs.com/tugenhua0707/p/10821768.html&quot; target=&quot;_blank&quot;&gt;文章介绍&lt;/a&gt;的。&lt;br/&gt;现在我们想使用流做一些事情，来实践下它的应用场景及用法。今天我给大家分享的是koa2基于流的方式实现文件上传和下载功能。&lt;/p&gt;
&lt;p&gt;首先要实现文件上传或下载肯定是需要使用post请求，以前我们使用 koa-bodyparser这个插件来解析post请求的。但是今天给大家介绍另一个插件 koa-body, &lt;br/&gt;该插件即可以解析post请求，又支持文件上传功能，具体可以看这篇文章介绍(&lt;a href=&quot;http://www.ptbird.cn/koa-body.html&quot; target=&quot;_blank&quot;&gt;http://www.ptbird.cn/koa-body.html&lt;/a&gt;), 或看官网github(&lt;a href=&quot;https://github.com/dlau/koa-body&quot; target=&quot;_blank&quot;&gt;https://github.com/dlau/koa-body&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;其次就是koa-body的版本问题，如果旧版本的koa-body通过ctx.request.body.files获取上传的文件。而新版本是通过ctx.request.files获取上传的文件的。否则的话，你会一直报错：ctx.request.files.file ----------&amp;gt;终端提示undefined问题. 如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/561794/201905/561794-20190507230215225-1598897600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我这边的koa-body 是4版本以上的(&quot;koa-body&quot;: &quot;^4.1.0&quot;,), 因此使用 ctx.request.files.file; 来获取文件了。&lt;/p&gt;
&lt;p&gt;那么上传文件也有两种方式，第一种方式是使用form表单提交数据，第二种是使用ajax方式提交。那么二种方式的区别我想大家也应该了解，无非就是页面刷不刷新的问题了。下面我会使用这两种方式来上传文件演示下。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 上传单个文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先先来介绍下我项目的目录结构如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
|----&lt;span&gt;项目demo
&lt;/span&gt;|  |---&lt;span&gt; .babelrc       # 解决es6语法问题
&lt;/span&gt;|  |---&lt;span&gt; node_modules   # 所有依赖的包
&lt;/span&gt;|  |---&lt;span&gt; static
&lt;/span&gt;|  | |---&lt;span&gt; upload.html  # 上传html页面
&lt;/span&gt;|  | |---&lt;span&gt; load.html    # 下载html页面
&lt;/span&gt;|  | |---&lt;span&gt; upload       # 上传图片或文件都放在这个文件夹里面
&lt;/span&gt;|  |---&lt;span&gt; app.js         # 编写node相关的入口文件，比如上传，下载请求
&lt;/span&gt;|  |--- package.json   # 依赖的包文件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上就是我目前项目的基本架构。如上我会把所有上传的文件或图片会放到 /static/upload 文件夹内了。也就是说把上传成功后的文件存储到我本地文件内。然后上传成功后，我会返回一个json数据。&lt;/p&gt;
&lt;p&gt;在项目中，我用到了如下几个插件：koa, fs, path, koa-router, koa-body, koa-static. 如上几个插件我们并不陌生哦。下面我们分别引用进来，如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
const Koa = require('koa'&lt;span&gt;);
const fs &lt;/span&gt;= require('fs'&lt;span&gt;);
const path &lt;/span&gt;= require('path'&lt;span&gt;);
const router &lt;/span&gt;= require('koa-router'&lt;span&gt;)();
const koaBody &lt;/span&gt;= require('koa-body'&lt;span&gt;);
const static &lt;/span&gt;= require('koa-static'&lt;span&gt;);

const app &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Koa();

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
  koa-body 对应的API及使用 看这篇文章 http://www.ptbird.cn/koa-body.html
  或者看 github上的官网 https://github.com/dlau/koa-body
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
app.use(koaBody({
  multipart: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 支持文件上传&lt;/span&gt;
&lt;span&gt;  formidable: {
    maxFieldsSize: &lt;/span&gt;2 * 1024 * 1024, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大文件为2兆&lt;/span&gt;
    multipart: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否支持 multipart-formdate 的表单&lt;/span&gt;
&lt;span&gt;  }
}));

app.use(static(path.join(__dirname)));

app.use(router.routes());
app.use(router.allowedMethods());

app.listen(&lt;/span&gt;3001, () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'server is listen in 3001'&lt;span&gt;);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码就是我app.js 基本架构，使用koa来监听服务，端口号是3001，然后使用koa-router来做路由页面指向。使用koa-body插件来解析post请求，及支持上传文件的功能。使用 koa-static插件来解析静态目录资源。使用fs来使用流的功能，比如 fs.createWriteStream 写文件 或 fs.createReadStream 读文件功能。使用path插件来解析目录问题，比如 path.join(__dirname) 这样的。&lt;/p&gt;
&lt;p&gt;我们希望当我们 当我们访问 http://localhost:3001/ 的时候，希望页面指向 我们的 upload.html页面，因此app.js请求代码可以写成如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
router.get('/', (ctx) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置头类型, 如果不设置，会直接下载该页面&lt;/span&gt;
  ctx.type = 'html'&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取文件&lt;/span&gt;
  const pathUrl = path.join(__dirname, '/static/upload.html'&lt;span&gt;);
  ctx.body &lt;/span&gt;=&lt;span&gt; fs.createReadStream(pathUrl);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：如上 ctx.type = 'html', 一定要设置下，否则打开该页面直接会下载该页面的了。然后我们使用fs.createReadStream来读取我们的页面后，把该页面指向 ctx.body 了，因此当我们访问 http://localhost:3001/ 的时候 就指向了 我们项目中的 static/upload.html 了。&lt;/p&gt;
&lt;p&gt;下面我们来看下我们项目下的 /static/upload.html 页面代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=utf-8&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文件上传&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;http://localhost:3001/upload&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt; enctype&lt;/span&gt;&lt;span&gt;=&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上upload.html页面，就是一个form表单页面，然后一个上传文件按钮，上传后，我们点击提交，即可调用form表单中的action动作调用http://localhost:3001/upload这个接口，因此现在我们来看下app.js中 '/upload' 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
const uploadUrl = &quot;http://localhost:3001/static/upload&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上传文件&lt;/span&gt;
router.post('/upload', (ctx) =&amp;gt;&lt;span&gt; {

  const file &lt;/span&gt;=&lt;span&gt; ctx.request.files.file;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取文件流&lt;/span&gt;
  const fileReader =&lt;span&gt; fs.createReadStream(file.path);

  const filePath &lt;/span&gt;= path.join(__dirname, '/static/upload/'&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 组装成绝对路径&lt;/span&gt;
  const fileResource = filePath + `/${file.name}`;

  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
   使用 createWriteStream 写入数据，然后使用管道流pipe拼接
  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  const writeStream &lt;/span&gt;=&lt;span&gt; fs.createWriteStream(fileResource);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断 /static/upload 文件夹是否存在，如果不在的话就创建一个&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fs.existsSync(filePath)) {
    fs.mkdir(filePath, (err) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Error(err);
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        fileReader.pipe(writeStream);
        ctx.body &lt;/span&gt;=&lt;span&gt; {
          url: uploadUrl &lt;/span&gt;+ `/${file.name}`,
          code: 0&lt;span&gt;,
          message: &lt;/span&gt;'上传成功'&lt;span&gt;
        };
      }
    });
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    fileReader.pipe(writeStream);
    ctx.body &lt;/span&gt;=&lt;span&gt; {
      url: uploadUrl &lt;/span&gt;+ `/${file.name}`,
      code: 0&lt;span&gt;,
      message: &lt;/span&gt;'上传成功'&lt;span&gt;
    };
  }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码 '/post' 请求最主要做了以下几件事：&lt;br/&gt;1. 获取上传文件，使用 const file = ctx.request.files.file; 我们来打印下该file，输出如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/561794/201905/561794-20190507230533927-1384572226.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 我们使用 fs.createReadStream 来读取文件流；如代码：const fileReader = fs.createReadStream(file.path);  我们也可以打印下 fileReader 输出内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/561794/201905/561794-20190507230549004-1245043860.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 对当前上传的文件保存到 /static/upload 目录下，因此定义变量：const filePath = path.join(__dirname, '/static/upload/');&lt;/p&gt;
&lt;p&gt;4. 组装文件的绝对路径，代码：const fileResource = filePath + `/${file.name}`;&lt;/p&gt;
&lt;p&gt;5. 使用 fs.createWriteStream 把该文件写进去，如代码：const writeStream = fs.createWriteStream(fileResource);&lt;/p&gt;
&lt;p&gt;6. 下面这段代码就是判断是否有该目录，如果没有改目录，就创建一个 /static/upload 这个目录，如果有就直接使用管道流pipe拼接文件，如代码：fileReader.pipe(writeStream);&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fs.existsSync(filePath)) {
  fs.mkdir(filePath, (err) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Error(err);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      fileReader.pipe(writeStream);
      ctx.body &lt;/span&gt;=&lt;span&gt; {
        url: uploadUrl &lt;/span&gt;+ `/${file.name}`,
        code: 0&lt;span&gt;,
        message: &lt;/span&gt;'上传成功'&lt;span&gt;
      };
    }
  });
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  fileReader.pipe(writeStream);
  ctx.body &lt;/span&gt;=&lt;span&gt; {
    url: uploadUrl &lt;/span&gt;+ `/${file.name}`,
    code: 0&lt;span&gt;,
    message: &lt;/span&gt;'上传成功'&lt;span&gt;
  };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后我们使用 ctx.body 返回到页面来，因此如果我们上传成功了，就会在upload页面返回如下信息了；如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/561794/201905/561794-20190507230635869-2660426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;因此所有的app.js 代码如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
const Koa = require('koa'&lt;span&gt;);
const fs &lt;/span&gt;= require('fs'&lt;span&gt;);
const path &lt;/span&gt;= require('path'&lt;span&gt;);
const router &lt;/span&gt;= require('koa-router'&lt;span&gt;)();
const koaBody &lt;/span&gt;= require('koa-body'&lt;span&gt;);
const static &lt;/span&gt;= require('koa-static'&lt;span&gt;);

const app &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Koa();

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
  koa-body 对应的API及使用 看这篇文章 http://www.ptbird.cn/koa-body.html
  或者看 github上的官网 https://github.com/dlau/koa-body
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
app.use(koaBody({
  multipart: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 支持文件上传&lt;/span&gt;
&lt;span&gt;  formidable: {
    maxFieldsSize: &lt;/span&gt;2 * 1024 * 1024, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大文件为2兆&lt;/span&gt;
    multipart: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否支持 multipart-formdate 的表单&lt;/span&gt;
&lt;span&gt;  }
}));

const uploadUrl &lt;/span&gt;= &quot;http://localhost:3001/static/upload&quot;&lt;span&gt;;

router.get(&lt;/span&gt;'/', (ctx) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置头类型, 如果不设置，会直接下载该页面&lt;/span&gt;
  ctx.type = 'html'&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取文件&lt;/span&gt;
  const pathUrl = path.join(__dirname, '/static/upload.html'&lt;span&gt;);
  ctx.body &lt;/span&gt;=&lt;span&gt; fs.createReadStream(pathUrl);
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上传文件&lt;/span&gt;
router.post('/upload', (ctx) =&amp;gt;&lt;span&gt; {

  const file &lt;/span&gt;=&lt;span&gt; ctx.request.files.file;
  console.log(file);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取文件流&lt;/span&gt;
  const fileReader =&lt;span&gt; fs.createReadStream(file.path);
  console.log(fileReader);
  const filePath &lt;/span&gt;= path.join(__dirname, '/static/upload/'&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 组装成绝对路径&lt;/span&gt;
  const fileResource = filePath + `/${file.name}`;

  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
   使用 createWriteStream 写入数据，然后使用管道流pipe拼接
  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  const writeStream &lt;/span&gt;=&lt;span&gt; fs.createWriteStream(fileResource);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断 /static/upload 文件夹是否存在，如果不在的话就创建一个&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fs.existsSync(filePath)) {
    fs.mkdir(filePath, (err) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Error(err);
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        fileReader.pipe(writeStream);
        ctx.body &lt;/span&gt;=&lt;span&gt; {
          url: uploadUrl &lt;/span&gt;+ `/${file.name}`,
          code: 0&lt;span&gt;,
          message: &lt;/span&gt;'上传成功'&lt;span&gt;
        };
      }
    });
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    fileReader.pipe(writeStream);
    ctx.body &lt;/span&gt;=&lt;span&gt; {
      url: uploadUrl &lt;/span&gt;+ `/${file.name}`,
      code: 0&lt;span&gt;,
      message: &lt;/span&gt;'上传成功'&lt;span&gt;
    };
  }
});

app.use(static(path.join(__dirname)));

app.use(router.routes());
app.use(router.allowedMethods());

app.listen(&lt;/span&gt;3001, () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'server is listen in 3001'&lt;span&gt;);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上是使用 form表单提交的，我们也可以使用 ajax来提交，那么需要改下 upload.html代码了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 使用ajax方法提交。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=utf-8&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文件上传&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用form表单提交
  &amp;lt;form action=&quot;http://localhost:3001/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;input type=&quot;file&quot; name=&quot;file&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; file &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    const instance &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; axios.create({
      withCredentials: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    });
    file.onchange &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; f1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.target.files[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; fdata &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormData();
      fdata.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, f1);
      instance.post(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://localhost:3001/upload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, fdata).then(res &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
        console.log(res);
      }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(err &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
        console.log(err);
      });
    }
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上我们打印 console.log(res); 后，可以看到如下信息了；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/561794/201905/561794-20190507230750112-1884743922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 上传多个文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了支持多个文件上传，和单个文件上传，我们需要把代码改下，改成如下：&lt;/p&gt;
&lt;p&gt;html代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=utf-8&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文件上传&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用form表单提交
  &amp;lt;form action=&quot;http://localhost:3001/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;input type=&quot;file&quot; name=&quot;file&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  上传单个文件
  &amp;lt;div&amp;gt;
    &amp;lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    var file = document.getElementById('file');
    const instance = axios.create({
      withCredentials: true
    });
    file.onchange = function(e) {
      var f1 = e.target.files[0];
      var fdata = new FormData();
      fdata.append('file', f1);
      instance.post('http://localhost:3001/upload', fdata).then(res =&amp;gt; {
        console.log(res);
      }).catch(err =&amp;gt; {
        console.log(err);
      });
    }
  &amp;lt;/script&amp;gt;
  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; multiple&lt;/span&gt;&lt;span&gt;=&quot;multiple&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; file &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    const instance &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; axios.create({
      withCredentials: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    });
    file.onchange &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; files &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.target.files;
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; fdata &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormData();
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (files.length &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (let i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; files.length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {
          const f1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; files[i];
          fdata.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, f1);
        }
      }
      instance.post(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://localhost:3001/upload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, fdata).then(res &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
        console.log(res);
      }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(err &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
        console.log(err);
      });
    }
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上是多个文件上传的html代码和js代码，就是把多个数据使用formdata一次性传递多个数据过去，现在我们需要把app.js 代码改成如下了，app.js 代码改的有点多，最主要是要判断 传过来的文件是单个的还是多个的逻辑，所有代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
const Koa = require('koa'&lt;span&gt;);
const fs &lt;/span&gt;= require('fs'&lt;span&gt;);
const path &lt;/span&gt;= require('path'&lt;span&gt;);
const router &lt;/span&gt;= require('koa-router'&lt;span&gt;)();
const koaBody &lt;/span&gt;= require('koa-body'&lt;span&gt;);
const static &lt;/span&gt;= require('koa-static'&lt;span&gt;);

const app &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Koa();

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
  koa-body 对应的API及使用 看这篇文章 http://www.ptbird.cn/koa-body.html
  或者看 github上的官网 https://github.com/dlau/koa-body
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
app.use(koaBody({
  multipart: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 支持文件上传&lt;/span&gt;
&lt;span&gt;  formidable: {
    maxFieldsSize: &lt;/span&gt;2 * 1024 * 1024, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大文件为2兆&lt;/span&gt;
    multipart: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否支持 multipart-formdate 的表单&lt;/span&gt;
&lt;span&gt;  }
}));

const uploadUrl &lt;/span&gt;= &quot;http://localhost:3001/static/upload&quot;&lt;span&gt;;

router.get(&lt;/span&gt;'/', (ctx) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置头类型, 如果不设置，会直接下载该页面&lt;/span&gt;
  ctx.type = 'html'&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取文件&lt;/span&gt;
  const pathUrl = path.join(__dirname, '/static/upload.html'&lt;span&gt;);
  ctx.body &lt;/span&gt;=&lt;span&gt; fs.createReadStream(pathUrl);
});
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
 flag: 是否是多个文件上传
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
const uploadFilePublic &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(ctx, files, flag) {
  const filePath &lt;/span&gt;= path.join(__dirname, '/static/upload/'&lt;span&gt;);
  let file,
    fileReader,
    fileResource,
    writeStream;

  const fileFunc &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(file) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取文件流&lt;/span&gt;
    fileReader =&lt;span&gt; fs.createReadStream(file.path);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 组装成绝对路径&lt;/span&gt;
    fileResource = filePath + `/${file.name}`;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
     使用 createWriteStream 写入数据，然后使用管道流pipe拼接
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    writeStream &lt;/span&gt;=&lt;span&gt; fs.createWriteStream(fileResource);
    fileReader.pipe(writeStream);
  };
  const returnFunc &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(flag) {
    console.log(flag);
    console.log(files);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
      let url &lt;/span&gt;= ''&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let i = 0; i &amp;lt; files.length; i++&lt;span&gt;) {
        url &lt;/span&gt;+= uploadUrl + `/${files[i].name},`
&lt;span&gt;      }
      url &lt;/span&gt;= url.replace(/,$/gi, &quot;&quot;&lt;span&gt;);
      ctx.body &lt;/span&gt;=&lt;span&gt; {
        url: url,
        code: &lt;/span&gt;0&lt;span&gt;,
        message: &lt;/span&gt;'上传成功'&lt;span&gt;
      };
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      ctx.body &lt;/span&gt;=&lt;span&gt; {
        url: uploadUrl &lt;/span&gt;+ `/${files.name}`,
        code: 0&lt;span&gt;,
        message: &lt;/span&gt;'上传成功'&lt;span&gt;
      };
    }
  };
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多个文件上传&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (let i = 0; i &amp;lt; files.length; i++&lt;span&gt;) {
      const f1 &lt;/span&gt;=&lt;span&gt; files[i];
      fileFunc(f1);
    }
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    fileFunc(files);
  }
  
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断 /static/upload 文件夹是否存在，如果不在的话就创建一个&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fs.existsSync(filePath)) {
    fs.mkdir(filePath, (err) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Error(err);
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        returnFunc(flag);
      }
    });
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    returnFunc(flag);
  }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上传单个或多个文件&lt;/span&gt;
router.post('/upload', (ctx) =&amp;gt;&lt;span&gt; {
  let files &lt;/span&gt;=&lt;span&gt; ctx.request.files.file;
  const fileArrs &lt;/span&gt;=&lt;span&gt; [];
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (files.length ===&lt;span&gt; undefined) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上传单个文件，它不是数组，只是单个的对象&lt;/span&gt;
    uploadFilePublic(ctx, files, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
     uploadFilePublic(ctx, files, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
  }
});

app.use(static(path.join(__dirname)));

app.use(router.routes());
app.use(router.allowedMethods());

app.listen(&lt;/span&gt;3001, () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'server is listen in 3001'&lt;span&gt;);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我现在来演示下，当我选择多个文件，比如现在选择两个文件，会返回如下数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/561794/201905/561794-20190507230916554-673320577.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我现在只选择一个文件的时候，只会返回一个文件，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/561794/201905/561794-20190507230929979-1888130292.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上app.js改成之后的代码现在支持单个或多个文件上传了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;这边只是演示下多个文件上传的demo，但是在项目开发中，我不建议大家这样使用，而是多张图片多个请求比较好，因为大小有限制的，比如a.png 和 b.png 这两张图片，如果a图片比较小，b图片很大很大，那么如果两张图片一起上传的话，接口肯定会上传失败，但是如果把请求分开发，那么a图片会上传成功的，b图片是上传失败的。这样比较好。&lt;/p&gt;
&lt;p&gt;当然我们在上传之前我们还可以对文件进行压缩下或者对文件的上传进度实时显示下优化下都可以，但是目前我这边先不做了，下次再把所有的都弄下。这里只是演示下 fs.createReadStream 流的一些使用方式。&lt;/p&gt;

&lt;p&gt;二：下载文件&lt;/p&gt;
&lt;p&gt;文件下载需要使用到koa-send这个插件，该插件是一个静态文件服务的中间件，它可以用来实现文件下载的功能。&lt;/p&gt;
&lt;p&gt;html代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=utf-8&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文件下载演示&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;fileLoad()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文件下载&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iframe &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;iframeId&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;display:none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; fileLoad() {
      window.open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/fileload/Q4汇总.xlsx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;iframeId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    }
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;app.js 所有的代码改成如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
const Koa = require('koa'&lt;span&gt;);
const fs &lt;/span&gt;= require('fs'&lt;span&gt;);
const path &lt;/span&gt;= require('path'&lt;span&gt;);
const router &lt;/span&gt;= require('koa-router'&lt;span&gt;)();
const koaBody &lt;/span&gt;= require('koa-body'&lt;span&gt;);
const static &lt;/span&gt;= require('koa-static'&lt;span&gt;);
const send &lt;/span&gt;= require('koa-send'&lt;span&gt;);
const app &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Koa();
app.use(koaBody());

router.get(&lt;/span&gt;'/', (ctx) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置头类型, 如果不设置，会直接下载该页面&lt;/span&gt;
  ctx.type = 'html'&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取文件&lt;/span&gt;
  const pathUrl = path.join(__dirname, '/static/load.html'&lt;span&gt;);
  ctx.body &lt;/span&gt;=&lt;span&gt; fs.createReadStream(pathUrl);
});

router.get(&lt;/span&gt;'/fileload/:name', async (ctx) =&amp;gt;&lt;span&gt; {
  const name &lt;/span&gt;=&lt;span&gt; ctx.params.name;
  const path &lt;/span&gt;= `static/upload/&lt;span&gt;${name}`;
  ctx.attachment(path);
  await send(ctx, path);
});

app.use(static(path.join(__dirname)));
app.use(router.routes());
app.use(router.allowedMethods());

app.listen(&lt;/span&gt;3001, () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'server is listen in 3001'&lt;span&gt;);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码就可以了，当我页面访问 http://localhost:3001/ 这个的时候，会显示我项目下的 load.html页面，该页面有一个下载文件的按钮，当我点击该按钮的时候，就会下载我本地上某一个文件。比如上面的代码，我们使用了window.open. 跳转指定到了某个隐藏的iframe，如果我们使用window.open(url), 后面不指定任何参数的话，它会以 '_blank' 的方式打开，最后会导致页面会刷新下，然后下载，对于用户体验来说不好，隐藏我们就让他在iframe里面下载，因此页面看不到跳动的感觉了。&lt;br/&gt;当然如果我们使用window.open(url, '_self') 也是可以的，但是貌似有小问题，比如可能会触发 beforeunload 等页面事件，如果你的页面监听了该事件做一些操作的话，那就会有影响的。 所以我们使用隐藏的iframe去做这件事。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;上面的window.open('/fileload/Q4汇总.xlsx'); 中的 Q4汇总.xlsx 是我本地项目中刚刚上传的文件。也就是说该文件在我本地上有这个的文件的就可以下载的。如果我本地项目中没有该文件就下载不了的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/strong&gt;当然批量文件下载也是可以做的，这里就不折腾了。有空自己研究下，或者百度下都有类似的文章，自己折腾下即可。这篇文章最主要想使用 fs.createReadStream 的使用场景。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tugenhua0707/node-demo/tree/master/uploadAndLoad&quot; target=&quot;_blank&quot;&gt;查看github上的源码&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 07 May 2019 15:13:00 +0000</pubDate>
<dc:creator>龙恩0707</dc:creator>
<og:description>koa2基于stream(流)进行文件上传和下载</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tugenhua0707/p/10828869.html</dc:identifier>
</item>
<item>
<title>近几年总结 - MnCu</title>
<link>http://www.cnblogs.com/MnCu8261/p/10828567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MnCu8261/p/10828567.html</guid>
<description>&lt;p&gt;最近好懒，工作上有些杂事。自学暂停了近一个月了。。。博客也很长时间没有更新了，整个人处于一种停滞不前的状态。心理上的空虚浮躁似乎有些严重。&lt;/p&gt;
&lt;p&gt;需要整理一下自己的规划，重新按照既定路线发展，仔细思考一下当前的状态，不能这么颓废了。。&lt;/p&gt;
&lt;p&gt;今天下班比较早，又不想学习，就写一篇博客回顾一下这几年。&lt;/p&gt;
&lt;h3 id=&quot;回顾&quot;&gt;回顾&lt;/h3&gt;
&lt;h4 id=&quot;大学生活&quot;&gt;大学生活&lt;/h4&gt;
&lt;p&gt;13年进入大学，专业是农业机械化及其自动化，基本上就是拖拉机之类的东西。当时选专业的时候我就知道我不喜欢这个专业，但实在不知道该选择啥专业好，于是选了个感觉比较好找工作的，机械么，挺适合男生的，而且这个专业还算比较好，算是我们学校的王牌专业。进了大学基本上整天无所事事，本来一进来也没打算好好学习，正好当时英雄联盟很火，就天天去网吧，女朋友也不想谈，感觉浪费时间精力。&lt;/p&gt;
&lt;p&gt;我认为我并不是一个能够持之以恒的人，不管是学习或者是玩，特别懒，玩玩就感觉玩够了，当夜深人静或者偶尔感伤了之后我就会想以后该干啥，自己整天这样也不是个事儿。后来有机会接触到万学教育，就花了1万大洋报了个名，这算是转折点吧，尽管我报名万学教育后，就认真听了寥寥几节课，但感觉对我的影响是很大的，我确定了自己的IT方向，对自己是什么样的人以及要成为一个什么样的人有了大概的认知。&lt;/p&gt;
&lt;p&gt;我知道我是一个比较倔比较聪明比较任性的人，一般在做某些事之前自己会有大体的思路，别人的建议只会影响我但不会改变我，但对别人的我认为有用的建议我也会认证听取，但照不照做就看我的心情了，有的时候不照做是因为我不认可(我知道任何建议没有绝对的正确和错误，对于那些有用的建议我喜欢称其很有道理，很多很有道理的建议我也会不认可，但我会在事成之后再次回顾一下这些有道理的建议，做做不算深刻的总结，而比较有意思的是往往过了很多事以后，我经常在夜深人静反思自己时会偶尔想起时隔很远的有用建议，然后再做一做深刻的总结)；有的时候不照做是因为感觉很有用，但我的方式似乎也不差，用我小平爷爷的话来说“时间是检验真理的唯一标准”，选择太困难，做就是了，至于到底哪种方式更好，因为我感觉没有重来的机会所以实在无法比较，无法比较的东西我就尽量少操没用的闲心；还有的不照做的东西是因为我知道我不想成为这样的人，尽管这样做肯定比较管用，但我就是不想做，为了我的人设，为了我的理想，为了别人。。。&lt;/p&gt;
&lt;p&gt;确定了IT大方向，接下来就是学习了，两种方式：培训或者自学。没做过多犹豫就选择了自学，之所以选择自学主要是因为我感觉我的时间很多，另外穷也是另一个重要原因。一开始看马哥linux培训视频，基本上看完了以后就开始看老男孩python培训视频，中间穿插着三天打鱼两天晒网、夜深人静熬夜学习、不在状态的无效率浪费时间学习。最终也算是达到了一定的水平，但我可以肯定我的基础很差，所以读读源码，看看基础的东西也占了很大的时间。经过自学，我认为：“自学让人沉迷其中 无法自拔，让人精神崩溃，潸然落泪，自学是一种包含了人生极致苦乐的过程！ 是世界上最精彩，最有乐趣的学习方式！”，这个理念当时是很认可的，但现在工作了以后现在似乎离这个理念越来越远。。现在我依然认为这个理念很对，只是我自己似乎有些疲惫有些懈怠了。&lt;/p&gt;
&lt;p&gt;大学交了几个很棒的朋友，不管是打游戏还是k歌还是烧烤，陪伴他们让我很快乐。当时并没有深刻体会到这种感觉，只是现在工作了以后越发感觉明显。&lt;/p&gt;
&lt;p&gt;总之，大学4年生活很快过去，不说酸甜苦辣的废话，自认为还算满意。&lt;/p&gt;
&lt;h4 id=&quot;第一份工作&quot;&gt;第一份工作&lt;/h4&gt;
&lt;p&gt;17年毕业以后，来到北京开启工作之旅，找房子感谢我的老姐，让我基本没有操心。面试了几家公司，有好有坏。印象最深刻的是面试云英。&lt;/p&gt;
&lt;p&gt;面试云英是我认为真正意义上的用心并且表现出自己软实力的一个面试。当时觉得云计算公司很好很想进，大公司的没有信息，但感觉云英还可以，于是我在网上搜索这个公司的各种信息，首要目标是能找到一个给我内推的人，功夫不负有心人，用了两天我在领英上恰好能够加上一个云英python老乡，一番沟通他很痛快的给我内推了，感谢我老哥(说要请你吃饭，但后来你没空而我也懈怠了，实在对不起)。首先是笔试，100分的题目我大概做对了20分，然后是一面，一面当时穿着大裤衩，头发因为睡觉的原因一部分紧紧贴着头皮，一部分顽皮的翘了几个角，给我的第一印象是个大神(后来我老哥说他是大神，而且是面试通过率最低的面试官)，当时他看了我的笔试题后很不满意，随便问了几个问题，然后我回答的也不是很好，似乎有终止面试之意。我一看，感觉要凉，必须要自我抢救一下，不过我还是并不算紧张的，因为我知道我的基础确实很差劲，但&lt;strong&gt;我认为我是一个可塑之才，并且是非常优秀的可塑之才，我对此有着强大的信心&lt;/strong&gt;，所以我跟他说老哥你先不要走，听我把话说完，于是很用心地跟他介绍了我的自学之旅，介绍了我是如何费尽心机找到人给我内推的，介绍了我是一个多么真诚的充满干劲的小伙子，我把我的性格比较好的一面真真切切的展现给了他，虽然略有浮夸但在我脸皮可接受范围之内。于是一面跟我聊了大概一个小时，当然大多时候是我在说，最终一面说，小弟你在这等着，我去叫二面。当时我的内心十分激动！给了他一个我能展现的最灿烂的微笑。。。 二面来了以后就问我基础知识比较少了，问了问我的经历啥的(估计一面也跟他说了我的基础并不好)，但他还是给我出了一个算法题，当时虽然没怎么准备算法，但我还算比较聪明，在他的引导下也做了出来，同时我跟他聊天也旁敲侧击的展现了自己的性格，于是相谈甚欢，当然大部分时间是我在说。然后是三面了，三面是技术leader，他谈技术也很少，主要是谈以后的技术发展路线，给我讲他的发展史，这时候大部分是他在说，我在听。最终三面是都过了。然后hr让我回去过几天给我发offer。&lt;/p&gt;
&lt;p&gt;云英的面试是对我影响最大的一个面试，尽管后来因为某些原因没有去成。但我还是衷心感谢这次经历，感谢我所遇到的这些老哥们。&lt;/p&gt;
&lt;p&gt;最终我去了一家类似于做外包的小公司，之所以去是因为我的老大技术实力很强，并且他跟我说进来就能做事。于是我就来了，一开始工作压力很大，因为之前没有过任何工作或者实习经验，但我天资聪慧，硬撑着挺了下来，3个月后就开始负责了公司大多数业务的后端开发，我们公司后端就我和我老大两个人，他基本上经历放到了架构以及跑业务上，所以具体业务逻辑的编写几乎全在我这。当时业务也很多，各种模块诸如 巡更、工单、餐饮、支付、班车等等等等，我基本上负责了所有的项目，每天跟我老大加班到很晚，很多时候周六也要加班。我老大也很放心我，他没有时间搞的架构运维上的东西也放心的交给我，而我也很争气的完成了他给的任务，尽管可能我做的很多的东西并不能说优雅，但是我做到了上线很少出bug。极大的压力下我也收获了极大的成长，收获了和老大配合的默契与相互之间的信任和友谊。当然和同事的关系也处的不错，我这个人喜欢说骚话，搞笑有一手，脾气也好，除了和漂亮姑娘一起时脸皮薄点以外堪称完美。回顾这段工作经历也十分不错，工作时还不感觉，离职后回想一下真的超出了我的预期。这在家公司的一年里，我真的收获了很多，不管是技术还是友谊。最后的总结我觉得用我老大曾经对我的提问以及我的回答很适合：当时我们加班到很晚，下班后老大开车送我回住的地方，在车上他问我，化猛啊，你感觉来了以后最大的收获是啥？我说，额，应该就是自信了吧，刚来的时候我只是对自己的性格和天赋自信，但感觉我的技术上很差，来了这么长时间以后，我感觉不管你给我什么样的任务，当然太难的你也不会给，即使是你给出一些超过我当前技术栈以外的任务，只要超出的不是太多，我依然有信心完成，我也不知道为啥我这么有信心，但我确实感觉我可以。&lt;/p&gt;
&lt;p&gt;感谢我的老大，你是我微信上的大神我洋哥，愿你的闺女长得不像你，能漂亮一点，也愿她能性格上像你一样乐观，像你一样充满理性。&lt;/p&gt;
&lt;p&gt;最后我离职了，因为个人心态上的原因，具体原因我也不想写，如果哪天我能正确处理我的心态我会考虑加上。&lt;/p&gt;
&lt;h4 id=&quot;第二份工作之前&quot;&gt;第二份工作之前&lt;/h4&gt;
&lt;p&gt;和朋友去了一趟广州，见识了一下花花世界，主要是陪他跑一跑鳄鱼养殖场和皮具厂，期间部分事情难以启齿不太想说，但确实是让我见识了很多。这段经历十分丰富，感觉每个人各有各的活法，比我强也好比我差也罢，工作光鲜也好工作阴暗或者被大多数人鄙夷也罢，大开眼界！&lt;/p&gt;
&lt;h4 id=&quot;第二份工作&quot;&gt;第二份工作&lt;/h4&gt;
&lt;p&gt;第二份工作一直持续到现在，由于在上家公司积累的技术和经验面试了几个都过了，也有比较遗憾的没过的，总之来到这家公司后只能说工资涨了，但我对自己的规划上来说，我前期的几年不需要太在意工资的，所以这个我倒是并不太在意。然后是工作方面，来这里也大概有半年了，这是一家钢琴教育公司，公司有许多优质的漂亮小姐姐，这点很开心，再就是感觉跟我同龄的人要少一点，大多都比我大，感觉臭味相投的也少了很多，在这里以后我也没有办法再像上家公司一样把相当多的精力简单真心的投入到工作上，原因一个是自己变复杂了，另外是心态还是没有处理好(但我的心态正在往好的地方转变，以后它会好的)。工作中有闲季有忙季，我也可以抽出时间来自学自己喜欢的东西，但我的毅力似乎太差，没有别人的压力我似乎无法专心，我也深刻意识到我浮躁的心一直还在。总之&lt;strong&gt;来这里的成长速度小于我的预期，但原因还是在于我自己&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;文末总结&quot;&gt;文末总结&lt;/h3&gt;
&lt;p&gt;本文仅仅是回忆，并没有任何发人深省的地方，我比较喜欢压抑自己的情感，我的真正感触&lt;strong&gt;一般&lt;/strong&gt;不会写在外面供其他人欣赏。另外，本文充斥着各种自恋的文字，不想看就不要看，也不要骂我。最后感觉最近计划着找个女朋友，也不知道是被家人逼的还是说自己也确实想了，我自己也有些搞不清自己，不过还是希望自己能不是因为寂寞而谈恋爱。&lt;/p&gt;
&lt;p&gt;愿我能更快的稳定自己的心态，愿我能更快的成长。身体健康，大事顺利。&lt;/p&gt;
</description>
<pubDate>Tue, 07 May 2019 14:17:00 +0000</pubDate>
<dc:creator>MnCu</dc:creator>
<og:description>最近好懒，工作上有些杂事。自学暂停了近一个月了。。。博客也很长时间没有更新了，整个人处于一种停滞不前的状态。心理上的空虚浮躁似乎有些严重。 需要整理一下自己的规划，重新按照既定路线发展，仔细思考一下当</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MnCu8261/p/10828567.html</dc:identifier>
</item>
<item>
<title>C++消息框架-基于sigslot - 朝十晚八</title>
<link>http://www.cnblogs.com/swarmbees/p/10828138.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/swarmbees/p/10828138.html</guid>
<description>&lt;h2 id=&quot;一简介&quot;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;上一篇文章&lt;a href=&quot;https://www.cnblogs.com/swarmbees/p/10816139.html&quot;&gt;Qt信号槽-原理分析&lt;/a&gt;主要讲述了Qt的信号槽实现原理，当然除了Qt的信号槽以外，还有boost的signals，sigslot和sigc++等等，都是非常不错的信号槽学习资料&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;boost的信号槽机制很强大，但是依赖了其他模块，而且对于大多数人来说，标准C++已经够用&lt;/li&gt;
&lt;li&gt;sigc++功能也不错，但是文件数量比较多&lt;/li&gt;
&lt;li&gt;sigslot只有一个头文件，非常轻量，而且现有功能够我们使用&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;3.8383838383838&quot;&gt;
&lt;p&gt;了解sigslot用法可以参考&lt;a href=&quot;https://blog.csdn.net/moonshine99/article/details/8451650&quot;&gt;sigslots的简单例子&lt;/a&gt;这篇文章，使用起来还是相对简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇文章我们主要是使用sigslots来做一个简单的消息框架，主要是进行多个模块之间消息通信，当然也可以是插件之间通信。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我们的框架总的来说是一个简化版的消息通信机制，学习起来也比较轻松，如果用于实际的工程项目的话，还需要进一步的优化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下图所示，是我自己画的类图，我们通过signal1来发送消息，并传递给所有的Receiver，这里的接收者简单来说可以是一个类，如果是想复杂一些，也可以是一个插件，后边我会单独讲述怎么加载插件dll&lt;/p&gt;
&lt;center&gt;&lt;br/&gt;&lt;div&gt;&lt;br/&gt;&lt;img src=&quot;https://www.cnblogs.com/images/cnblogs_com/swarmbees/1454266/o_message_frame_new.png&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/center&gt;
&lt;br/&gt;&lt;h2 id=&quot;二消息&quot;&gt;二、消息&lt;/h2&gt;
&lt;p&gt;通常不同模块之间传递消息时我们需要定义一个消息结构，他可以作为函数回调时的参数，然后我们会根据参数中的唯一标识，来区分不同的消息，或者判断是不是我们想要处理的消息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/** 消息结构*/
struct Message
{
    std::string m_strMessage; ///消息类型  唯一ID
    void *      m_pUserData;  ///发送的数据
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如Message结构中的m_strMessage变量，他唯一标识了消息的类型，我们只需要判断是我们想处理的消息类型时，执行处理代码即可。&lt;/p&gt;
&lt;p&gt;sigslot库中的信号最多支持8个参数，可是在我门日常的开发工作中，可能会存在一些特殊的场景，超过8个参数；除此之外，根据参数类型的不同，往复杂里写我们可能需要写大量的适配工作。在这里我们使用一个简单的小技巧，通过void *来转发我们的数据，也就是m_pUserData，这样不管多少数据，我们都可以封装到一个变量中。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;m_pUserData里边我们可以存储任意类型的数据，只要我们在处理事件的时候知道怎么取出数据即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;三发送者&quot;&gt;三、发送者&lt;/h2&gt;
&lt;p&gt;知道观察者模式的同学应该都知道，被观察的对象（Subject）维护了一个观察者（Observer）列表，当我们的被观察者发生变化的时候，被观察者可以遍历自己维护的观察者列表，然后将变化通知给观察者。同样的我们这个框架也类似于这样的设计，只不过我们的发送者没有维护接收者列表，而是通过信号槽的绑定机制，把发送者的发送函数绑定到了接收者的接收函数，而且是一对多绑定，也就是说我们的信号可以对多个槽。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;这样的设计下，发送者和接收者还是有一定的耦合，后边有时间优化的话，我会引入一个第三方的管理者，帮助我们让发送者和接收者进行关联，这样也能提供最大的灵活性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下是发送者的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Sender
{
public:
    void sendMessage(const std::string &amp;amp; = &quot;&quot;, void * = 0);
    virtual void addReceiver(Receiver *);
    virtual void removeReceiver(Receiver *);

private:
    sigslot::signal1&amp;lt;Message *&amp;gt; m_pSender;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发送者包含3个接口，发送消息、添加接收者和移除接收者。而最重要的地方当属我们的m_pSender变量，他是sigslot库封装的信号，这个库总共提供了8种信号，但是我们只使用参数为1个的信号，因为我们把参数封装成了一个结构，也就是说我们的参数被包装成了一个对象。&lt;/p&gt;
&lt;p&gt;下面我们来分析下这三个函数&lt;/p&gt;
&lt;h3 id=&quot;发送消息函数&quot;&gt;1、发送消息函数&lt;/h3&gt;
&lt;p&gt;发送消息时，我们需要指定消息的id和消息的内容，并构造为一个Message对象，作为信号参数发送出去，这样槽函数就可以收到我们发送的内容。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;特别注意，Message对象的销毁是在所有槽函数执行完毕以后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;void Sender::sendMessage(const std::string &amp;amp; msgID, void * data)
{
    Message msg;
    msg.m_strMessage = msgID;
    msg.m_pUserData = data;

    m_pSender(&amp;amp;msg);//消息的接收者执行完后  msg被销毁
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;新增一个接收者函数&quot;&gt;2、新增一个接收者函数&lt;/h3&gt;
&lt;p&gt;新增接收者时，我们只需要使用connect把接收者的函数绑定到我们的信号上即可。是不是特别简单呢！&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void Sender::addReceiver(Receiver * receiver)
{
    m_pSender.connect(receiver, &amp;amp;Receiver::onMessage);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;移除一个接收者函数&quot;&gt;3、移除一个接收者函数&lt;/h3&gt;
&lt;p&gt;移除接受者时，我们只需要使用disconnect把接收者从绑定的接收者列表中移除即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void Sender::removeReceiver(Receiver * receiver)
{
    m_pSender.disconnect(receiver);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四接收者&quot;&gt;四、接收者&lt;/h2&gt;
&lt;p&gt;sigslot库要求我们，如果想要被signals信号连接，则我们的类必须从sigslot::has_slots&amp;lt;&amp;gt;继承，这里我们封装了一个Receiver类，方便后续我们写更多的功能类。这个类里我添加了一个onMessage函数，这个函数就是我们处理信号的回调函数，当signals发送信号时，onMessage函数就会被调用，我们在这里处理自己关注的事件即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Receiver : public sigslot::has_slots&amp;lt;&amp;gt;
{
public:
    virtual void onMessage(Message *) = 0;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我们在写新功能时，只需要继承Receiver类，并实现onMessage函数即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Message就是我们发送信号时构造的对象，里边包含了消息的类型ID和用户数据，我们只需要根据消息ID就可以知道，这个消失是否是我们需要处理的，如果需要处理，那我们将需要小心翼翼的从void *中取出相关用户数据，进行处理。&lt;/p&gt;
&lt;p&gt;例如下面代码，是一个简单的消息页面，当我们收到消息回调时，我们通过判断消息ID，他就是我们需要处理的消息NEW_ITEM_REPORT，然后我们打印了一句话，&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这里只是简单举了一个例子，实际开发中，代码复杂度往往都比较高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;class newsPage : public Receiver{
public:
    newsPage(Sender * sender) {
        sender-&amp;gt;addReceiver(this);//把自己加入到消息接收者队列中
    }
    virtual void onMessage(Message * msg)    {
        if (msg-&amp;gt;m_strMessage == &quot;NEW_ITEM_REPORT&quot;)        {
            std::cout &amp;lt;&amp;lt; &quot;收到一条新消息:&quot;;
        }
    }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;五功能测试&quot;&gt;五、功能测试&lt;/h2&gt;
&lt;p&gt;下面我们写两个实际的消息接收类，来测试下消息框架&lt;/p&gt;
&lt;h3 id=&quot;消息接收类&quot;&gt;1、消息接收类&lt;/h3&gt;
&lt;h4 id=&quot;a测试类1&quot;&gt;a、测试类1&lt;/h4&gt;
&lt;p&gt;消息接收类我们必须从Receiver来继承，并且需要把自己添加到信号对象的消息接收列表中。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;处理消息时，当我们发现消息ID是字符串“1”时，是我们要处理的消息，则打印消息内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;class testReceiver1 : public Receiver{
public:
    testReceiver1(Sender * sender) {
        sender-&amp;gt;addReceiver(this);//把自己加入到消息接收者队列中
    }
    virtual void onMessage(Message * msg)    {
        if (msg-&amp;gt;m_strMessage == &quot;1&quot;)        {
            std::cout &amp;lt;&amp;lt; &quot;testReceiver1:&quot; &amp;lt;&amp;lt; (char *)msg-&amp;gt;m_pUserData &amp;lt;&amp;lt; &quot;\n&quot;;
        }
    }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;b测试类2&quot;&gt;b、测试类2&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;消息接收类2同类1一样，只是处理消息时，判断的消息ID不一样，这里不做解释，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;class testReceiver2 : public Receiver{
public:
    testReceiver2(Sender * sender) {
        sender-&amp;gt;addReceiver(this);//把自己加入到消息接收者队列中
    }
    virtual void onMessage(Message * msg)    {
        if (msg-&amp;gt;m_strMessage == &quot;2&quot;)        {
            std::cout &amp;lt;&amp;lt; &quot;testReceiver2:&quot; &amp;lt;&amp;lt; (char *)msg-&amp;gt;m_pUserData &amp;lt;&amp;lt; &quot;\n&quot;;
        }
    }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;测试代码&quot;&gt;2、测试代码&lt;/h3&gt;
&lt;p&gt;测试代码如下，我们构造了一个Sender发送者，并声明了两个消息接收对象，然后直接使用send对象开始发送消息&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;实际使用过程中，Sender可能不会这样直接暴露出来，通常是通过一个单例来进行管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;int main()
{
    Sender send;
    testReceiver1 rece1(&amp;amp;send);
    testReceiver2 rece2(&amp;amp;send);

    send.sendMessage(&quot;1&quot;, &quot;Receiver1 deal&quot;);
    send.sendMessage(&quot;2&quot;, &quot;Receiver2 deal&quot;);

    getchar();

    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;测试结果&quot;&gt;3、测试结果&lt;/h3&gt;
&lt;p&gt;最终测试结果如下&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;接收者1处理了消息类型为“1”的事件，并打印了testReceiver1:send2Receiver1&lt;/li&gt;
&lt;li&gt;接收者2处理了消息类型为“2”的事件，并打印了testReceiver2:send2Receiver2&lt;/li&gt;
&lt;/ul&gt;&lt;center&gt;
&lt;div&gt;&lt;img src=&quot;https://www.cnblogs.com/images/cnblogs_com/swarmbees/1454266/o_signals_result.png&quot;/&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;h2 id=&quot;六源码&quot;&gt;六、源码&lt;/h2&gt;
&lt;p&gt;需要源码的留邮箱，现在的csdn简直太坑爹了。。。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;转载声明：本站文章无特别说明，皆为原创，版权所有，转载请注明：&lt;a href=&quot;https://www.cnblogs.com/swarmbees/&quot;&gt;朝十晚八&lt;/a&gt; or &lt;a href=&quot;https://www.jianshu.com/u/7673f8cfb4e6&quot;&gt;Twowords&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Tue, 07 May 2019 14:05:00 +0000</pubDate>
<dc:creator>朝十晚八</dc:creator>
<og:description>[TOC] 一、简介 上一篇文章 'Qt信号槽 原理分析' 主要讲述了Qt的信号槽实现原理，当然除了Qt的信号槽以外，还有boost的signals，sigslot和sigc++等等，都是非常不错的信</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/swarmbees/p/10828138.html</dc:identifier>
</item>
<item>
<title>MySQL 上亿大表优化实践 - Jia-Xin</title>
<link>http://www.cnblogs.com/YangJiaXin/p/10828244.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YangJiaXin/p/10828244.html</guid>
<description>&lt;hr/&gt;&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;XX实例（一主一从）xxx告警中每天凌晨在报SLA报警，该报警的意思是存在一定的主从延迟（若在此时发生主从切换，需要长时间才可以完成切换，要追延迟来保证主从数据的一致性）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;XX实例的慢查询数量最多（执行时间超过1s的sql会被记录），XX应用那方每天晚上在做删除一个月前数据的任务&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;使用pt-query-digest工具分析最近一周的mysql-slow.log&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;pt-query-digest --since=148h mysql-slow.log | less&lt;br/&gt;&lt;em&gt;结果第一部分&lt;/em&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179590/201905/1179590-20190507213728906-1969464777.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;最近一个星期内，总共记录的慢查询执行花费时间为25403s，最大的慢sql执行时间为266s，平均每个慢sql执行时间5s，平均扫描的行数为1766万&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;结果第二部分&lt;/em&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179590/201905/1179590-20190507213714609-948900643.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;select arrival_record操作记录的慢查询数量最多有4万多次，平均响应时间为4s，delete arrival_record记录了6次，平均响应时间258s&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;select-xxx_record语句&quot;&gt;select xxx_record语句&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;select arrival_record 慢查询语句都类似于如下所示，where语句中的参数字段是一样的，传入的参数值不一样&lt;br/&gt;select count(*) from arrival_record where product_id=26 and receive_time between '2019-03-25 14:00:00' and '2019-03-25 15:00:00' and receive_spend_ms&amp;gt;=0\G&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179590/201905/1179590-20190507213828675-409685501.png&quot;/&gt;&lt;br/&gt;&lt;strong&gt;&lt;em&gt;select arrival_record 语句在mysql中最多扫描的行数为5600万、平均扫描的行数为172万，推断由于扫描的行数多导致的执行时间长&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看执行计划&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;explain select count(&lt;em&gt;) from arrival_record where product_id=26 and receive_time between '2019-03-25 14:00:00' and '2019-03-25 15:00:00' and receive_spend_ms&amp;gt;=0\G;&lt;br/&gt;&lt;/em&gt;************************** 1. row ***************************&lt;br/&gt;id: 1&lt;br/&gt;select_type: SIMPLE&lt;br/&gt;table: arrival_record&lt;br/&gt;partitions: NULL&lt;br/&gt;type: ref&lt;br/&gt;possible_keys: IXFK_arrival_record&lt;br/&gt;key: &lt;strong&gt;IXFK_arrival_record&lt;/strong&gt;&lt;br/&gt;key_len: 8&lt;br/&gt;ref: const&lt;br/&gt;rows: &lt;strong&gt;32261320&lt;/strong&gt;&lt;br/&gt;filtered: 3.70&lt;br/&gt;Extra: Using index condition; Using where&lt;br/&gt;1 row in set, 1 warning (0.00 sec)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;用到了索引IXFK_arrival_record，但预计扫描的行数很多有3000多w行&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;show index from arrival_record;&lt;br/&gt;+----------------+------------+---------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+&lt;br/&gt;| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |&lt;br/&gt;+----------------+------------+---------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+&lt;br/&gt;| arrival_record | 0 | PRIMARY | 1 | id | A | &lt;strong&gt;107990720&lt;/strong&gt; | NULL | NULL | | BTREE | | |&lt;br/&gt;| arrival_record | 1 | IXFK_arrival_record | 1 | product_id | A | &lt;strong&gt;1344&lt;/strong&gt; | NULL | NULL | | BTREE | | |&lt;br/&gt;| arrival_record | 1 | IXFK_arrival_record | 2 | station_no | A | 22161 | NULL | NULL | YES | BTREE | | |&lt;br/&gt;| arrival_record | 1 | IXFK_arrival_record | 3 | sequence | A | 77233384 | NULL | NULL | | BTREE | | |&lt;br/&gt;| arrival_record | 1 | IXFK_arrival_record | 4 | receive_time | A | &lt;strong&gt;65854652&lt;/strong&gt; | NULL | NULL | YES | BTREE | | |&lt;br/&gt;| arrival_record | 1 | IXFK_arrival_record | 5 | arrival_time | A | 73861904 | NULL | NULL | YES | BTREE | | |&lt;br/&gt;+----------------+------------+---------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;show create table arrival_record;&lt;br/&gt;..........&lt;br/&gt;&lt;code&gt;arrival_spend_ms&lt;/code&gt; bigint(20) DEFAULT NULL,&lt;br/&gt;&lt;code&gt;total_spend_ms&lt;/code&gt; bigint(20) DEFAULT NULL,&lt;br/&gt;PRIMARY KEY (&lt;code&gt;id&lt;/code&gt;),&lt;br/&gt;KEY &lt;code&gt;IXFK_arrival_record&lt;/code&gt; (&lt;strong&gt;&lt;code&gt;product_id&lt;/code&gt;,&lt;code&gt;station_no&lt;/code&gt;,&lt;code&gt;sequence&lt;/code&gt;,&lt;code&gt;receive_time&lt;/code&gt;,&lt;code&gt;arrival_time&lt;/code&gt;&lt;/strong&gt;) USING BTREE,&lt;br/&gt;CONSTRAINT &lt;code&gt;FK_arrival_record_product&lt;/code&gt; FOREIGN KEY (&lt;code&gt;product_id&lt;/code&gt;) REFERENCES &lt;code&gt;product&lt;/code&gt; (&lt;code&gt;id&lt;/code&gt;) ON DELETE NO ACTION ON UPDATE NO ACTION&lt;br/&gt;) ENGINE=InnoDB AUTO_INCREMENT=614538979 DEFAULT CHARSET=utf8 COLLATE=utf8_bin |&lt;br/&gt;---&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;该表总记录数约1亿多条，表上只有一个复合索引，product_id字段基数很小，选择性不好&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;传入的过滤条件 where product_id=26 and receive_time between '2019-03-25 14:00:00' and '2019-03-25 15:00:00' and receive_spend_ms&amp;gt;=0 没有station_nu字段，使用不到复合索引 IXFK_arrival_record的 &lt;code&gt;product_id&lt;/code&gt;,&lt;code&gt;station_no&lt;/code&gt;,&lt;code&gt;sequence&lt;/code&gt;,&lt;code&gt;receive_time&lt;/code&gt; 这几个字段&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;根据最左前缀原则，select arrival_record只用到了复合索引IXFK_arrival_record的第一个字段product_id，而该字段选择性很差，导致扫描的行数很多，执行时间长&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;receive_time字段的基数大，选择性好，可对该字段单独建立索引，select arrival_record sql就会使用到该索引&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;现在已经知道了在慢查询中记录的select arrival_record where语句传入的参数字段有 product_id，receive_time，receive_spend_ms，还想知道对该表的访问有没有通过其它字段来过滤了？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;神器tcpdump出场的时候到了&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用tcpdump抓包一段时间对该表的select语句&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tcpdump -i bond0 -s 0 -l -w - dst port 3316 | strings | grep select | egrep -i 'arrival_record' &amp;gt;/tmp/select_arri.log&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取select 语句中from 后面的where条件语句&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;IFS_OLD=$IFS
IFS=$'\n'
for i in `cat /tmp/select_arri.log `;do echo ${i#*'from'}; done | less
IFS=$IFS_OLD&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=17 and arrivalrec0_.station_no='56742'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=22 and arrivalrec0_.station_no='S7100'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=24 and arrivalrec0_.station_no='V4631'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=22 and arrivalrec0_.station_no='S9466'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=24 and arrivalrec0_.station_no='V4205'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=24 and arrivalrec0_.station_no='V4105'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=24 and arrivalrec0_.station_no='V4506'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=24 and arrivalrec0_.station_no='V4617'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=22 and arrivalrec0_.station_no='S8356'&lt;br/&gt;arrival_record arrivalrec0_ where arrivalrec0_.sequence='2019-03-27 08:40' and arrivalrec0_.product_id=22 and arrivalrec0_.station_no='S8356'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;select 该表 where条件中有product_id,station_no,sequence字段，可以使用到复合索引IXFK_arrival_record的前三个字段&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;---&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;综上所示，优化方法为，删除复合索引IXFK_arrival_record，建立复合索引idx_sequence_station_no_product_id，并建立单独索引indx_receive_time&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;delete-xxx_record语句&quot;&gt;delete xxx_record语句&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179590/201905/1179590-20190507213849106-594528214.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;该delete操作平均扫描行数为1.1亿行，平均执行时间是262s&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;delete语句如下所示，每次记录的慢查询传入的参数值不一样&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;delete from arrival_record where receive_time &amp;lt; STR_TO_DATE('2019-02-23', '%Y-%m-%d')\G&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;执行计划&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;explain select * from arrival_record where receive_time &amp;lt; STR_TO_DATE('2019-02-23', '%Y-%m-%d')\G&lt;br/&gt;*************************** 1. row ***************************&lt;br/&gt;id: 1&lt;br/&gt;select_type: SIMPLE&lt;br/&gt;table: arrival_record&lt;br/&gt;partitions: NULL&lt;br/&gt;type: &lt;strong&gt;ALL&lt;/strong&gt;&lt;br/&gt;possible_keys: NULL&lt;br/&gt;key: NULL&lt;br/&gt;key_len: NULL&lt;br/&gt;ref: NULL&lt;br/&gt;rows: &lt;strong&gt;109501508&lt;/strong&gt;&lt;br/&gt;filtered: 33.33&lt;br/&gt;Extra: Using where&lt;br/&gt;1 row in set, 1 warning (0.00 sec)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;该delete语句没有使用索引（没有合适的索引可用），走的全表扫描，导致执行时间长&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;优化方法也是 建立单独索引indx_receive_time(receive_time)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;拷贝arrival_record表到测试实例上进行删除重新索引操作&lt;/em&gt;&lt;br/&gt;&lt;strong&gt;&lt;em&gt;XX实例arrival_record表信息&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;du -sh /datas/mysql/data/3316/cq_new_cimiss/arrival_record*&lt;br/&gt;12K /datas/mysql/data/3316/cq_new_cimiss/arrival_record.frm&lt;br/&gt;&lt;strong&gt;48G&lt;/strong&gt; /datas/mysql/data/3316/cq_new_cimiss/arrival_record.ibd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;select count(&lt;em&gt;) from &lt;code&gt;cq_new_cimiss&lt;/code&gt;.&lt;code&gt;arrival_record&lt;/code&gt;;&lt;br/&gt;+-----------+&lt;br/&gt;| count(&lt;/em&gt;) |&lt;br/&gt;+-----------+&lt;br/&gt;| 112294946 |&lt;br/&gt;+-----------+&lt;br/&gt;&lt;em&gt;1亿多记录数&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;20&quot;&gt;
&lt;p&gt;SELECT&lt;br/&gt;table_name,&lt;br/&gt;CONCAT(FORMAT(SUM(data_length) / 1024 / 1024,2),'M') AS dbdata_size,&lt;br/&gt;CONCAT(FORMAT(SUM(index_length) / 1024 / 1024,2),'M') AS dbindex_size,&lt;br/&gt;CONCAT(FORMAT(SUM(data_length + index_length) / 1024 / 1024 / 1024,2),'G') AS &lt;code&gt;table_size(G)&lt;/code&gt;,&lt;br/&gt;AVG_ROW_LENGTH,table_rows,update_time&lt;br/&gt;FROM&lt;br/&gt;information_schema.tables&lt;br/&gt;WHERE table_schema = 'cq_new_cimiss' and table_name='arrival_record';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;+----------------+-------------+--------------+------------+----------------+------------+---------------------+&lt;br/&gt;| table_name | dbdata_size | dbindex_size | table_size(G) | AVG_ROW_LENGTH | table_rows | update_time |&lt;br/&gt;+----------------+-------------+--------------+------------+----------------+------------+---------------------+&lt;br/&gt;| arrival_record | 18,268.02M | 13,868.05M | &lt;strong&gt;31.38G&lt;/strong&gt; | 175 | 109155053 | 2019-03-26 12:40:17 |&lt;br/&gt;+----------------+-------------+--------------+------------+----------------+------------+---------------------+&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;磁盘占用空间48G，mysql中该表大小为31G，存在17G左右的碎片，大多由于删除操作造成的（记录被删除了，空间没有回收)&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;备份还原该表到新的实例中，删除原来的复合索引，重新添加索引进行测试&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;mydumper并行压缩备份&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; user=root
  passwd=xxxx
 socket=/datas/mysql/data/3316/mysqld.sock
 db=cq_new_cimiss
 table_name=arrival_record
 backupdir=/datas/dump_$table_name
 mkdir -p $backupdir
 
   nohup echo `date +%T` &amp;amp;&amp;amp; mydumper -u $user -p $passwd -S $socket  -B $db -c  -T $table_name  -o $backupdir  -t 32 -r 2000000 &amp;amp;&amp;amp; echo `date +%T` &amp;amp;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;并行压缩备份所花时间（52s）和占用空间（1.2G，实际该表占用磁盘空间为48G，mydumper并行压缩备份压缩比相当高！）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Started dump at: 2019-03-26 12:46:04
........

Finished dump at: 2019-03-26 12:46:56

du -sh   /datas/dump_arrival_record/
1.2G    /datas/dump_arrival_record/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;拷贝dump数据到测试节点&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;scp -rp /datas/dump_arrival_record root@10.230.124.19:/datas&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;多线程导入数据&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;time myloader -u root -S /datas/mysql/data/3308/mysqld.sock -P 3308 -p root -B test -d /datas/dump_arrival_record -t 32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;real 126m42.885s&lt;br/&gt;user 1m4.543s&lt;br/&gt;sys 0m4.267s&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;逻辑导入该表后磁盘占用空间&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;du -h -d 1 /datas/mysql/data/3308/test/arrival_record.&lt;em&gt;&lt;br/&gt;12K /datas/mysql/data/3308/test/arrival_record.frm&lt;br/&gt;30G /datas/mysql/data/3308/test/arrival_record.ibd&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;没有碎片，和mysql的该表的大小一致&lt;/strong&gt;*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cp -rp /datas/mysql/data/3308 /datas&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;分别使用online DDL和 pt-osc工具来做删除重建索引操作&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;先删除外键，不删除外键，无法删除复合索引，外键列属于复合索引中第一列&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;nohup bash /tmp/ddl_index.sh &amp;amp;&lt;br/&gt;2019-04-04-10:41:39 begin stop mysqld_3308&lt;br/&gt;2019-04-04-10:41:41 begin rm -rf datadir and cp -rp datadir_bak&lt;br/&gt;2019-04-04-10:46:53 start mysqld_3308&lt;br/&gt;2019-04-04-&lt;strong&gt;10:46:59&lt;/strong&gt; online ddl begin&lt;br/&gt;2019-04-04-&lt;strong&gt;11:20:34&lt;/strong&gt; onlie ddl stop&lt;br/&gt;2019-04-04-11:20:34 begin stop mysqld_3308&lt;br/&gt;2019-04-04-11:20:36 begin rm -rf datadir and cp -rp datadir_bak&lt;br/&gt;2019-04-04-11:22:48 start mysqld_3308&lt;br/&gt;2019-04-04-&lt;strong&gt;11:22:53&lt;/strong&gt; pt-osc begin&lt;br/&gt;2019-04-04-&lt;strong&gt;12:19:15&lt;/strong&gt; pt-osc stop&lt;br/&gt;&lt;strong&gt;&lt;em&gt;online ddl 花费时间为34 分钟，pt-osc花费时间为57 分钟，使用onlne ddl时间约为pt-osc工具时间的一半&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;做DDL 参考&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179590/201905/1179590-20190507214926463-662272591.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;实施&quot;&gt;实施&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;由于是一主一从实例，应用是连接的vip，删除重建索引采用online ddl来做。停止主从复制后，先在从实例上做（不记录binlog），主从切换，再在新切换的从实例上做（不记录binlog)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function red_echo () {

        local what=&quot;$*&quot;
        echo -e &quot;$(date +%F-%T)  ${what}&quot;
}

function check_las_comm(){
    if [ &quot;$1&quot; != &quot;0&quot; ];then
        red_echo &quot;$2&quot;
        echo &quot;exit 1&quot;
        exit 1
    fi
}

red_echo &quot;stop slave&quot;
mysql -uroot -p$passwd --socket=/datas/mysql/data/${port}/mysqld.sock -e&quot;stop slave&quot;
check_las_comm &quot;$?&quot; &quot;stop slave failed&quot;

red_echo &quot;online ddl begin&quot;
 mysql -uroot -p$passwd --socket=/datas/mysql/data/${port}/mysqld.sock -e&quot;set sql_log_bin=0;select now() as  ddl_start;ALTER TABLE $db_.\`${table_name}\` DROP FOREIGN KEY FK_arrival_record_product,drop index IXFK_arrival_record,add index idx_product_id_sequence_station_no(product_id,sequence,station_no),add index idx_receive_time(receive_time);select now() as ddl_stop&quot; &amp;gt;&amp;gt;${log_file} 2&amp;gt;&amp;amp; 1
 red_echo &quot;onlie ddl stop&quot;
 red_echo &quot;add foreign key&quot;
 mysql -uroot -p$passwd --socket=/datas/mysql/data/${port}/mysqld.sock -e&quot;set sql_log_bin=0;ALTER TABLE $db_.${table_name} ADD CONSTRAINT _FK_${table_name}_product FOREIGN KEY (product_id) REFERENCES cq_new_cimiss.product (id) ON DELETE NO ACTION ON UPDATE NO ACTION;&quot; &amp;gt;&amp;gt;${log_file} 2&amp;gt;&amp;amp; 1
 check_las_comm &quot;$?&quot; &quot;add foreign key error&quot;
 red_echo &quot;add foreign key stop&quot;

red_echo &quot;start slave&quot;
mysql -uroot -p$passwd --socket=/datas/mysql/data/${port}/mysqld.sock -e&quot;start slave&quot;
check_las_comm &quot;$?&quot; &quot;start slave failed&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;执行时间&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;2019-04-08-11:17:36 stop slave&lt;br/&gt;mysql: [Warning] Using a password on the command line interface can be insecure.&lt;br/&gt;ddl_start&lt;br/&gt;2019-04-08 &lt;strong&gt;11:17:36&lt;/strong&gt;&lt;br/&gt;ddl_stop&lt;br/&gt;2019-04-08 &lt;strong&gt;11:45:13&lt;/strong&gt;&lt;br/&gt;2019-04-08-11:45:13 onlie ddl stop&lt;br/&gt;2019-04-08-&lt;strong&gt;11:45:13&lt;/strong&gt; add foreign key&lt;br/&gt;mysql: [Warning] Using a password on the command line interface can be insecure.&lt;br/&gt;2019-04-08-12:33:48 add foreign key stop&lt;br/&gt;2019-04-08-&lt;strong&gt;12:33:48&lt;/strong&gt; start slave&lt;br/&gt;&lt;strong&gt;删除重建索引花费时间为28分钟，添加外键约束时间为48分钟&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;再次查看delete 和select语句的执行计划&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;explain select count(&lt;em&gt;) from arrival_record where receive_time &amp;lt; STR_TO_DATE('2019-03-10', '%Y-%m-%d')\G&lt;br/&gt;&lt;/em&gt;************************** 1. row ***************************&lt;br/&gt;id: 1&lt;br/&gt;select_type: SIMPLE&lt;br/&gt;table: arrival_record&lt;br/&gt;partitions: NULL&lt;br/&gt;type: range&lt;br/&gt;possible_keys: idx_receive_time&lt;br/&gt;key: &lt;strong&gt;idx_receive_time&lt;/strong&gt;&lt;br/&gt;key_len: 6&lt;br/&gt;ref: NULL&lt;br/&gt;rows: 7540948&lt;br/&gt;filtered: 100.00&lt;br/&gt;Extra: Using where; Using index&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;explain select count(&lt;em&gt;) from arrival_record where product_id=26 and receive_time between '2019-03-25 14:00:00' and '2019-03-25 15:00:00' and receive_spend_ms&amp;gt;=0\G;&lt;br/&gt;&lt;/em&gt;************************** 1. row ***************************&lt;br/&gt;id: 1&lt;br/&gt;select_type: SIMPLE&lt;br/&gt;table: arrival_record&lt;br/&gt;partitions: NULL&lt;br/&gt;type: range&lt;br/&gt;possible_keys: idx_product_id_sequence_station_no,idx_receive_time&lt;br/&gt;key: &lt;strong&gt;idx_receive_time&lt;/strong&gt;&lt;br/&gt;key_len: 6&lt;br/&gt;ref: NULL&lt;br/&gt;rows: &lt;strong&gt;291448&lt;/strong&gt;&lt;br/&gt;filtered: 16.66&lt;br/&gt;Extra: Using index condition; Using where&lt;br/&gt;&lt;strong&gt;都使用到了idx_receive_time 索引，扫描的行数大大降低&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;索引优化后&quot;&gt;索引优化后&lt;/h2&gt;
&lt;p&gt;delete 还是花费了77s时间&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delete from arrival_record where receive_time &amp;lt; STR_TO_DATE('2019-03-10', '%Y-%m-%d')\G&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179590/201905/1179590-20190507214118441-1545276388.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;delete 语句通过receive_time的索引删除300多万的记录花费77s时间&lt;/strong&gt;*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;delete大表优化为小批量删除&quot;&gt;delete大表优化为小批量删除&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;应用端已优化成每次删除10分钟的数据（每次执行时间1s左右），xxx中没在出现SLA（主从延迟告警）&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179590/201905/1179590-20190507214111232-179183575.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;另一个方法是通过主键的顺序每次删除20000条记录&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#得到满足时间条件的最大主键ID
#通过按照主键的顺序去 顺序扫描小批量删除数据
#先执行一次以下语句
 SELECT MAX(id) INTO @need_delete_max_id FROM `arrival_record` WHERE receive_time&amp;lt;'2019-03-01' ;
 DELETE FROM arrival_record WHERE id&amp;lt;@need_delete_max_id LIMIT 20000;
 select ROW_COUNT();  #返回20000


#执行小批量delete后会返回row_count(), 删除的行数
#程序判断返回的row_count()是否为0，不为0执行以下循环，为0退出循环，删除操作完成
 DELETE FROM arrival_record WHERE id&amp;lt;@need_delete_max_id LIMIT 20000;
 select ROW_COUNT();
#程序睡眠0.5s

&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;表数据量太大时，除了关注访问该表的响应时间外，还要关注对该表的维护成本（如做DDL表更时间太长，delete历史数据）&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;对大表进行DDL操作时，要考虑表的实际情况（如对该表的并发表，是否有外键）来选择合适的DDL变更方式&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;对大数据量表进行delete，用小批量删除的方式，减少对主实例的压力和主从延迟&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Tue, 07 May 2019 13:51:00 +0000</pubDate>
<dc:creator>Jia-Xin</dc:creator>
<og:description>[toc] 背景 XX实例（一主一从）xxx告警中每天凌晨在报SLA报警，该报警的意思是存在一定的主从延迟（若在此时发生主从切换，需要长时间才可以完成切换，要追延迟来保证主从数据的一致性） XX实例的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YangJiaXin/p/10828244.html</dc:identifier>
</item>
<item>
<title>通过Gradle Plugin实现Git Hooks检测机制 - HappyCorn</title>
<link>http://www.cnblogs.com/lwbqqyumidi/p/10827960.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwbqqyumidi/p/10827960.html</guid>
<description>&lt;div readability=&quot;112&quot;&gt;
&lt;h3 class=&quot;heading&quot; data-id=&quot;heading-0&quot;&gt;背景&lt;/h3&gt;
&lt;p&gt;项目组多人协作进行项目开发时，经常遇到如下情况：如&lt;code&gt;Git Commit&lt;/code&gt;信息混乱，又如提交者信息用了自己非公司的私人邮箱等等。因此，有必要在&lt;code&gt;Git&lt;/code&gt;操作过程中的适当时间点上，进行必要的如统一规范、安全检测等常规性的例行检测。&lt;/p&gt;
&lt;p&gt;面对此类需求，&lt;code&gt;Git&lt;/code&gt;为我们提供了&lt;code&gt;Git Hooks&lt;/code&gt;机制。在每个项目根目录下，都存在一个隐藏的&lt;code&gt;.git&lt;/code&gt;目录，目录中除了&lt;code&gt;Git&lt;/code&gt;本身的项目代码版本控制以外，还带有一个名为&lt;code&gt;hooks&lt;/code&gt;的目录，默认情况下，内置了常用的一些&lt;code&gt;Git Hooks&lt;/code&gt;事件检测模板，并以&lt;code&gt;.sample&lt;/code&gt;结尾，其内部对应的是&lt;code&gt;shell&lt;/code&gt;脚本。实际使用时，需要将&lt;code&gt;.sample&lt;/code&gt;结尾去掉，且对应的脚本可以是其他类型，如大家用的比较多的&lt;code&gt;python&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;顾名思义，&lt;code&gt;Git Hooks&lt;/code&gt;称之为&lt;code&gt;Git 钩子&lt;/code&gt;，意指在进行&lt;code&gt;Git&lt;/code&gt;操作时，会对应触发相应的&lt;code&gt;钩子&lt;/code&gt;，类似于写代码时在特定时机用到的回调。这样，就可以在&lt;code&gt;钩子&lt;/code&gt;中进行一些逻辑判断，如实现大家常见的&lt;code&gt;Git Commit Message&lt;/code&gt;规范等，以及其他相对比较复杂的逻辑处理等。&lt;/p&gt;
&lt;p&gt;多人协作的项目开发，即便已经实现了&lt;code&gt;Git Hooks&lt;/code&gt;，但由于此目录并非属于&lt;code&gt;Git&lt;/code&gt;版本管理，因此也不能直接达到项目组成员公共使用并直接维护的目的。&lt;/p&gt;
&lt;p&gt;那么，是否可以有一种机制，可以间接的将其纳入到&lt;code&gt;Git&lt;/code&gt;项目版本管理的范畴，从而可以全组通用，且能直接维护？&lt;/p&gt;
&lt;p&gt;答案是可以的。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;Android&lt;/code&gt;项目开发，通过利用自定义的&lt;code&gt;Gradle Plugin&lt;/code&gt;插件，可以达到这一目的。&lt;/p&gt;
&lt;br/&gt;&lt;h3 class=&quot;heading&quot; data-id=&quot;heading-1&quot;&gt;实现&lt;/h3&gt;
&lt;p&gt;项目中应用自定义的&lt;code&gt;Gradle Plugin&lt;/code&gt;，并在&lt;code&gt;Gradle Plugin&lt;/code&gt;中处理好对应的&lt;code&gt;Git Hooks&lt;/code&gt;文件的逻辑。后续需要维护时，也只需要修改对应的&lt;code&gt;Gradle Plugin&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;下面主要通过实例展示具体的完整过程，以达到如下两个目的：&lt;br/&gt;1，统一规范&lt;code&gt;Git Commit&lt;/code&gt;时的&lt;code&gt;message&lt;/code&gt;格式，在不符合规范要求的情况下&lt;code&gt;commit&lt;/code&gt;失败；&lt;br/&gt;2，统一规范&lt;code&gt;Git Commit&lt;/code&gt;提交者的邮箱，只能使用公司的邮箱，具体通过检测邮箱后缀实现。&lt;/p&gt;
&lt;p&gt;具体过程如下：&lt;br/&gt;1，新建对应的&lt;code&gt;Git&lt;/code&gt;工程，包含默认的&lt;code&gt;app&lt;/code&gt;示例应用模块。&lt;br/&gt;2，新建模块，命名为&lt;code&gt;buildSrc&lt;/code&gt;，此模块主要是真正的实现自定的插件。此模块名称不可修改（因为此独立项目构建时，会将&lt;code&gt;buildSrc&lt;/code&gt;命名的模块自动加入到构建过程，这样，&lt;code&gt;app&lt;/code&gt;模块中只需要直接&lt;code&gt;apply plugin&lt;/code&gt;对应的插件名称即可）。&lt;br/&gt;3，自定义插件，实现主体逻辑。&lt;br/&gt;&lt;code&gt;buildSrc&lt;/code&gt;模块主要目录结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt;buildSrc
|____libs
|____build.gradle
|____src
| |____main
| | |____resources
| | | |____META-INF
| | | | |____gradle-plugins
| | | | | |____Git-Hooks-Plugin.properties
| | | |____commit-msg
| | |____groovy
| | | |____com
| | | | |____corn
| | | | | |____githooks
| | | | | | |____GitHooksUtil.groovy
| | | | | | |____GitHooksExtension.groovy
| | | | | | |____GitHooksPlugin.groovy
&lt;span class=&quot;copy-code-btn&quot;&gt;复制代码&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GitHooksPlugin&lt;/code&gt;实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt;package com.corn.githooks

import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project

class GitHooksPlugin implements Plugin&amp;lt;Project&amp;gt; {

        @Override
        void apply(Project project) {
            project.extensions.create(GitHooksExtension.NAME, GitHooksExtension, project)


            project.afterEvaluate {
                GitHooksExtension gitHooksExtension = project.extensions.getByName(GitHooksExtension.NAME)

                &lt;span class=&quot;hljs-keyword&quot;&gt;if (!GitHooksUtil.checkInstalledPython(project)) {
                    throw new GradleException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GitHook require python env, please install python first!&quot;, e)
                }

                File gitRootPathFile = GitHooksUtil.getGitHooksPath(project, gitHooksExtension)
                &lt;span class=&quot;hljs-keyword&quot;&gt;if (!gitRootPathFile.exists()) {
                    throw new GradleException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Can't found project git root file, please check your gitRootPath config value&quot;)
                }

                GitHooksUtil.saveHookFile(gitRootPathFile.absolutePath, &lt;span class=&quot;hljs-string&quot;&gt;&quot;commit-msg&quot;)

                File saveConfigFile = new File(gitRootPathFile.absolutePath + File.separator + &lt;span class=&quot;hljs-string&quot;&gt;&quot;git-hooks.conf&quot;)

                saveConfigFile.withWriter(&lt;span class=&quot;hljs-string&quot;&gt;'utf-8') { writer -&amp;gt;
                    writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;'## 程序自动生成，请勿手动改动此文件!!! ##'
                    writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;'[version]'
                    writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;&quot;v = &lt;span class=&quot;hljs-variable&quot;&gt;${GitHooksExtension.VERSION}&quot;
                    writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;'\n'
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if (gitHooksExtension.commit != null) {
                        writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;'[commit-msg]'
                        writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;&quot;cm_regex=&lt;span class=&quot;hljs-variable&quot;&gt;${gitHooksExtension.commit.regex}&quot;
                        writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;&quot;cm_doc_url=&lt;span class=&quot;hljs-variable&quot;&gt;${gitHooksExtension.commit.docUrl}&quot;
                        writer.writeLine &lt;span class=&quot;hljs-string&quot;&gt;&quot;cm_email_suffix=&lt;span class=&quot;hljs-variable&quot;&gt;${gitHooksExtension.commit.emailSuffix}&quot;
                    }
                }
            }
    }
}
&lt;span class=&quot;copy-code-btn&quot;&gt;复制代码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对应的&lt;code&gt;GitHooksExtension&lt;/code&gt;扩展为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt;package com.corn.githooks

import org.gradle.api.Project

class GitHooksExtension {

    public static final String NAME = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gitHooks&quot;
    public static final String VERSION = &lt;span class=&quot;hljs-string&quot;&gt;&quot;v1.0&quot;

    private Project project

    String gitRootPath
    Commit commit

    GitHooksExtension(Project project) {
        this.project = project
    }

    def commit(Closure closure) {
        commit = new Commit()
        project.configure(commit, closure)
    }


    class Commit {
        // commit规范正则
        String regex = &lt;span class=&quot;hljs-string&quot;&gt;''
        // commit规范文档url
        String docUrl = &lt;span class=&quot;hljs-string&quot;&gt;''
        String emailSuffix = &lt;span class=&quot;hljs-string&quot;&gt;''

        void regex(String regex) {
            this.regex = regex
        }

        void docUrl(String docUrl) {
            this.docUrl = docUrl
        }

        void emailSuffix(String emailSuffix){
            this.emailSuffix = emailSuffix
        }
    }
}
&lt;span class=&quot;copy-code-btn&quot;&gt;复制代码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GitHooksUtil&lt;/code&gt;工具类：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt;package com.corn.githooks

import org.gradle.api.GradleException
import org.gradle.api.Project
import org.gradle.process.ExecResult

import java.nio.file.Files

class GitHooksUtil {

    static File getGitHooksPath(Project project, GitHooksExtension config) {
        File configFile = new File(config.gitRootPath)
        &lt;span class=&quot;hljs-keyword&quot;&gt;if (configFile.exists()) {
            &lt;span class=&quot;hljs-built_in&quot;&gt;return new File(configFile.absolutePath + File.separator + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.git&quot; + File.separator + &lt;span class=&quot;hljs-string&quot;&gt;&quot;hooks&quot;)
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;else {
            &lt;span class=&quot;hljs-built_in&quot;&gt;return new File(project.rootProject.rootDir.absolutePath + File.separator + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.git&quot; + File.separator + &lt;span class=&quot;hljs-string&quot;&gt;&quot;hooks&quot;)
        }
    }

    static void saveHookFile(String gitRootPath, String fileName) {
        InputStream is = null
        FileOutputStream fos = null

        try {
            is = GitHooksUtil.class.getClassLoader().getResourceAsStream(fileName)
            File file = new File(gitRootPath + File.separator + fileName)
            file.setExecutable(&lt;span class=&quot;hljs-literal&quot;&gt;true)

            fos = new FileOutputStream(file)
            Files.copy(is, fos)

            fos.flush()
        } catch (Exception e) {
            throw new GradleException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Save hook file failed, file: &quot; + gitRootPath + &lt;span class=&quot;hljs-string&quot;&gt;&quot; e:&quot; + e, e)
        } finally {
            closeStream(is)
            closeStream(fos)
        }
    }

    static void closeStream(Closeable closeable) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if(closeable == null) {
            &lt;span class=&quot;hljs-built_in&quot;&gt;return
        }

        try {
            closeable.close()
        } catch (Exception e) {
            // ignore Exception
        }
    }


    static boolean checkInstalledPython(Project project) {
        ExecResult result
        try {
            result = project.exec {
                executable &lt;span class=&quot;hljs-string&quot;&gt;'python'
                args &lt;span class=&quot;hljs-string&quot;&gt;'--version'
            }
        } catch (Exception e) {
            e.printStackTrace()
        }

        &lt;span class=&quot;hljs-built_in&quot;&gt;return result != null &amp;amp;&amp;amp; result.exitValue == 0
    }
}
&lt;span class=&quot;copy-code-btn&quot;&gt;复制代码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;resources&lt;/code&gt;目录中，&lt;code&gt;META-INF.gradle-plugins&lt;/code&gt;实现对&lt;code&gt;Gradle Plugin&lt;/code&gt;的配置，文件&lt;code&gt;Git-Hooks-Plugin.properties&lt;/code&gt;文件名前缀&lt;code&gt;Git-Hooks-Plugin&lt;/code&gt;表示插件名，对应的&lt;code&gt;implementation-class&lt;/code&gt;指定插件的实际实现类。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt;|____resources
| | | |____META-INF
| | | | |____gradle-plugins
| | | | | |____Git-Hooks-Plugin.properties

--------------------------------------------
implementation-class=com.corn.githooks.GitHooksPlugin

&lt;span class=&quot;copy-code-btn&quot;&gt;复制代码&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而&lt;code&gt;commit-msg&lt;/code&gt;文件直接放到&lt;code&gt;resources&lt;/code&gt;目录中，通过代码拷贝到指定的&lt;code&gt;Git Hooks&lt;/code&gt;目录下。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;至此，&lt;code&gt;buildSrc&lt;/code&gt;模块插件部分已经完成。&lt;/p&gt;
&lt;p&gt;4，&lt;code&gt;app&lt;/code&gt;应用模块中应用插件，并测试效果。 &lt;code&gt;app&lt;/code&gt;应用模块的&lt;code&gt;build.gralde&lt;/code&gt;文件应用插件，并进行相应配置。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash copyable&quot; lang=&quot;bash&quot;&gt;app模块build.gralde相应配置：
----------------------------------------
apply plugin: &lt;span class=&quot;hljs-string&quot;&gt;'com.android.application'

....
....

apply plugin: &lt;span class=&quot;hljs-string&quot;&gt;'Git-Hooks-Plugin'

gitHooks {

    gitRootPath rootProject.rootDir.absolutePath

    commit {
        // git commit 强制规范
        regex &lt;span class=&quot;hljs-string&quot;&gt;&quot;^(新增：|特性：|：合并：|Lint：|Sonar：|优化：|Test：|合版：|发版：|Fix：|依赖库：|解决冲突：)&quot;
        // 对应提交规范具体说明文档
        docUrl &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xxxx&quot;

        // git commit 必须使用公司邮箱
        emailSuffix &lt;span class=&quot;hljs-string&quot;&gt;&quot;@corn.com&quot;
    }

}

....
....

&lt;span class=&quot;copy-code-btn&quot;&gt;复制代码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;应用插件后，来到项目工程的&lt;code&gt;.git/hooks/&lt;/code&gt;目录，查看是否有对应的&lt;code&gt;commit-msg&lt;/code&gt;及&lt;code&gt;git-hooks.conf&lt;/code&gt;文件生成，以及对应的脚本逻辑和配置是否符合预期，并实际提交项目代码，分别模拟&lt;code&gt;commit message&lt;/code&gt;和&lt;code&gt;git config email&lt;/code&gt;场景，测试结果是否与预期一致。&lt;/p&gt;
&lt;br/&gt;&lt;h3 class=&quot;heading&quot; data-id=&quot;heading-2&quot;&gt;结语&lt;/h3&gt;
&lt;p&gt;本文主要通过demo形式演示基于&lt;code&gt;Gradle Plugin&lt;/code&gt;插件形式实现&lt;code&gt;Git Hooks&lt;/code&gt;检测机制，以达到项目组通用及易维护的实际实现方案，实际主工程使用时，只需要将此独立独立&lt;code&gt;Git&lt;/code&gt;工程中的&lt;code&gt;buildSrc&lt;/code&gt;模块，直接发布到&lt;code&gt;marven&lt;/code&gt;，主工程在&lt;code&gt;buildscript&lt;/code&gt;的&lt;code&gt;dependencies&lt;/code&gt;中配置上对应的插件&lt;code&gt;classpath&lt;/code&gt;即可。其他跟上述示例中的&lt;code&gt;app&lt;/code&gt;应用模块一样，直接应用插件并对应配置即可使用。&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;Gradle Plugin&lt;/code&gt;，让我们实现了原本不属于项目版本管理范畴的逻辑整合和同步，从而可以实现整个项目组通用性的规范和易维护及扩展性的方案，不失为一种有效策略。&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;</description>
<pubDate>Tue, 07 May 2019 12:45:00 +0000</pubDate>
<dc:creator>HappyCorn</dc:creator>
<og:description>背景 项目组多人协作进行项目开发时，经常遇到如下情况：如Git Commit信息混乱，又如提交者信息用了自己非公司的私人邮箱等等。因此，有必要在Git操作过程中的适当时间点上，进行必要的如统一规范、安</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwbqqyumidi/p/10827960.html</dc:identifier>
</item>
<item>
<title>【带着canvas去流浪（9）】粒子动画 - 大史不说话</title>
<link>http://www.cnblogs.com/dashnowords/p/10827576.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dashnowords/p/10827576.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354575/201905/1354575-20190507193744649-989234539.jpg&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;3.2041884816754&quot;&gt;
&lt;p&gt;示例代码托管在：&lt;a href=&quot;https://github.com/dashnowords/blogs/tree/master/Demo/canvas-echarts/9.particle&quot;&gt;http://www.github.com/dashnowords/blogs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;博客园地址：&lt;a href=&quot;https://www.cnblogs.com/dashnowords/p/10127926.html&quot;&gt;《大史住在大前端》原创博文目录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;华为云社区地址：&lt;a href=&quot;https://bbs.huaweicloud.com/blogs/8ae7e6420a4611e9bd5a7ca23e93a891&quot;&gt;【你要的前端打怪升级指南】&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一.-粒子特效&quot;&gt;一. 粒子特效&lt;/h2&gt;
&lt;p&gt;粒子特效一般指密集点阵效果，它并不是canvas独有的，这个名词更多出现在&lt;code&gt;AE&lt;/code&gt;，&lt;code&gt;cocos2d&lt;/code&gt;，&lt;code&gt;Unity&lt;/code&gt;相关的教程中，并且提供了方便的编辑插件让使用者可以轻松地做出例如烟火，流星，光晕等等动态变化的效果，看起来非常酷炫。如果你接触过&lt;code&gt;Three.js&lt;/code&gt;，会发现三维空间的点阵效果看起来更生动。粒子特效的本质还是一个逐帧动画，所以我们仍然可以使用上一节中提到的动画编程范式来实现它。本节的教程将实现下面这样一个粒子效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354575/201905/1354575-20190507193801035-668855446.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是笔者第5个版本，看起来还挺像回事的吧，本篇中我们将逐步实现这样一个酷炫的粒子动画，也邀请你一起来看看开发过程中那些各种令人哭笑不得的问号黑人脸时刻。&lt;/p&gt;
&lt;h2 id=&quot;二.-开发中遇到的问题&quot;&gt;二. 开发中遇到的问题&lt;/h2&gt;
&lt;h3 id=&quot;卡顿&quot;&gt;2.1 卡顿&lt;/h3&gt;
&lt;p&gt;想实现上面的动画，我们首先要做的是构建一个静态的粒子点阵，构建的过程并不复杂，无非就是&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;两个方向上以固定间距来画点。如果我们将单个粒子定义为精灵，而不是粒子群，那么按照上一节的开发范式，我们会在逐帧动画的执行函数&lt;code&gt;step&lt;/code&gt;中按照如下的方式来更新粒子点阵的状态：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function step(){
    ...
    particles.map(particle=&amp;gt;{
        particle.update();
        particle.paint();
    })
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可画面在粒子点阵动起来后就变得巨卡无比，视觉体验很差。事实上，每一个精灵状态的&lt;code&gt;update( )&lt;/code&gt;方法仅仅是一些&lt;code&gt;javascript&lt;/code&gt;中的计算代码，执行速度是非常快的，而&lt;code&gt;paint( )&lt;/code&gt;方法中会经历路径绘制和渲染这两个阶段才能绘制出粒子，这个过程的高频执行相对来说就会很耗时，当舞台上的元素数量较少时并不会有什么问题，但在粒子点阵这样一个大量精灵元素的场景下，就很容易达到性能饱和。而解决的方式并不复杂，粒子是平铺在画纸上的，绘制的先后次序并不会导致画面覆盖，我们可以先描绘出所有粒子的路径（一个小半径圆圈），接着再最后调用&lt;code&gt;context.stroke()&lt;/code&gt;方法一次性将所有粒子的边线绘制出来，卡顿的问题立刻就解决了。就好像SPA框架中先收集变化并对新旧DOM树进行diff操作，然后集中进行DOM更新，以取代独立分散的DOM操作造成的性能损耗。&lt;/p&gt;
&lt;h3 id=&quot;轨迹&quot;&gt;2.2 轨迹&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354575/201905/1354575-20190507193812807-1968923700.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;构建完静态粒子阵列后，我希望从简单的特效还是做起，那就是鼠标移动到某个位置后，就把固定半径内所有的粒子沿径向爆炸开来，粒子将沿鼠标点和初始位置的连线运动。然而效果是上图那样的，虽然看起来还挺酷炫的，但它不是我们期望的效果。这里只是一个低级错误，就是在&lt;code&gt;step( )&lt;/code&gt;没有重绘画布，&lt;code&gt;canvas&lt;/code&gt;就像一张画纸，你所绘制的一切都保留在上面直到你用底色色块将其覆盖然后重绘，由于基本的视觉暂留，高速的重绘就成了动画。&lt;/p&gt;
&lt;h3 id=&quot;复位&quot;&gt;2.3 复位&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354575/201905/1354575-20190507193824829-1475979019.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们能够模拟粒子沿爆炸中心炸开的效果后，就需要考虑如何将其复位。起初笔者试图用&lt;code&gt;弹簧模型&lt;/code&gt;来模拟粒子行为，但是出现的问题就如同上图那样，有一部分粒子在初始点附近做起了简谐振动，通过设置&lt;strong&gt;最小复位距离&lt;/strong&gt;来强制复位也很难做到，如果值太小，总会出现捕获不到的点，如果值太大，又会造成复位效果失真。其实将复位点作为弹簧模型的平衡点是有问题的，因为简谐振动在过中点的时候虽然不受力，但其速度却达到最大，这就使得逐帧动画之间的位移变化很大，所以才会出现上述的&lt;strong&gt;最小复位距离&lt;/strong&gt;很难确定的问题。&lt;/p&gt;
&lt;p&gt;越贴近真实效果，粒子力场模型就会越复杂，如果感兴趣，你可以自行建立力场模型来进行仿真。本章的示例代码中我们采用一种简化的处理方式，就是在爆炸后，直接将粒子置于一个较远的位置，并以一个线性递减的速度来靠近其初始位置，越靠近初始位置速度就越小，当其距离小于&lt;strong&gt;最小复位距离&lt;/strong&gt;时将其归位。&lt;/p&gt;
&lt;h3 id=&quot;防护层&quot;&gt;2.4 防护层&lt;/h3&gt;
&lt;p&gt;当能够实现炸开的粒子复位后，最后要实现的效果就是防护圈，你可以想象一个透明的球体被扔进水里的效果，水在外围运动却无法穿透防护进入球体。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354575/201905/1354575-20190507193836334-1496087366.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;笔者首次建模后得到效果是上图这样的，使用的模型是一个&lt;code&gt;碰撞衰减&lt;/code&gt;模型，也就是将防护层当做钢体表面，当粒子在复位过程中进入防护层后，就将其速度向量进行反向，并乘以衰减系数，当其离开防护层后再重新将速度方向指向初始位置。那么这个模型有什么问题呢？其实上面的动画中已经能够看出，由于时间间隔的选择问题，粒子在两帧之间所移动的距离可能会非常大，导致粒子会突然穿透防护层；另一方面，当爆炸中心移动后，粒子复位时的速度方向和它与爆炸中心的连线可能并不重合，单纯地将速度沿原方向取反显然是失真的。&lt;/p&gt;
&lt;p&gt;实际上在防护层边界的处理上，需要对上述模型进行一些调整。我们换个角度思考一下，假如将防护罩展开成一个平面，那么粒子的运动轨迹就变得清晰了，如果爆炸中心没有移动，那么粒子的复位其实就相当于垂直下落的，如果爆炸中心和复位中心不重合，那么总可以将小球的速度分解为沿爆炸中心径向和沿爆炸中心切向，它的运动表现就和&lt;strong&gt;具有水平初速度和垂直加速度的物体遇到反弹平面&lt;/strong&gt;时是一致的，为了简化仿真处理，当小球即将和防护层碰撞时，可以直接将其沿爆炸中心径向的速度清零，只保留切向速度，这样当粒子碰到防护层而无法归位时，就会沿着防护层表面运动，这样粒子就不会穿透防护层了（示例代码中采用了更简化的仿真策略，下文会提及）。&lt;/p&gt;
&lt;h3 id=&quot;二维向量类&quot;&gt;2.5 二维向量类&lt;/h3&gt;
&lt;p&gt;在图形学的计算中，向量的使用频率是极高的，在计算距离或是判断点线面之间的关系等等场景中都会应用到，&lt;code&gt;canvas&lt;/code&gt;只是一张画布，其中的关系和距离等等都需要通过手动计算才能获得。如果不对常见的向量操作进行封装，代码中就会充斥着各种诸如用&lt;code&gt;Math.sqrt(A.x * A.x + A.y * A.y)&lt;/code&gt;求模运算这种细节完全暴露的代码，不仅书写起来非常繁琐，阅读和理解的困难也很高，所以我们需要建立一个二维向量类，把向量的求模，反向，相加，相减等常见操作挂载在原型链上，这就使得代码本身更具有意义，下面给出一个常见的二维向量类的实现，你可以根据自己的需求对其进行改造，后面的示例中我们也将直接使用这个类:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//二维向量类定义
Vector2 = function(x, y) { this.x = x; this.y = y; };
Vector2.prototype = {
    copy: function() { return new Vector2(this.x, this.y); },
    length: function() { return Math.sqrt(this.x * this.x + this.y * this.y); },
    sqrLength: function() { return this.x * this.x + this.y * this.y; },
    normalize: function() { var inv = 1 / this.length(); return new Vector2(this.x * inv, this.y * inv); },
    negate: function() { return new Vector2(-this.x, -this.y); },
    add: function(v) { return new Vector2(this.x + v.x, this.y + v.y); },
    subtract: function(v) { return new Vector2(this.x - v.x, this.y - v.y); },
    multiply: function(f) { return new Vector2(this.x * f, this.y * f); },
    divide: function(f) { var invf = 1 / f; return new Vector2(this.x * invf, this.y * invf); },
    dot: function(v) { return this.x * v.x + this.y * v.y; }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三.-实现讲解&quot;&gt;三. 实现讲解&lt;/h2&gt;
&lt;p&gt;本节中针对重点代码片段进行讲解，完整的示例代码可以从&lt;a href=&quot;http://www.github.com/dashnowords/blogs&quot;&gt;【我的github仓库】&lt;/a&gt;中获取到。&lt;/p&gt;
&lt;h3 id=&quot;粒子类的update方法&quot;&gt;3.1 粒子类的&lt;code&gt;update&lt;/code&gt;方法&lt;/h3&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;/*方法中涉及到的位置相关属性都是Vector2这个向量类的实例
*所以可以调用原型链方法进行向量计算
*/ 
update(){
        
        let nextPos;//模拟下一次落点

        
        const disV = this.pos0.subtract(this.pos);//当前位置到回归点的向量
        const disL = disV.length();//当前位置和初始点距离

        //1.计算速度（设定最小速度避免出现无限接近却无法归位的场景），并模拟下一次落点
        this.velocity = disV.multiply(kv * disL &amp;lt; minV ? minV : kv * disL);
        nextPos = this.pos.add(this.velocity.multiply(dt)); 

        //2.判断下一次落点是否和当前爆破范围保护层碰撞
        const disToE = nextPos.subtract(explodeCenter); //从爆破中心指向下一次落点的向量
        const disToEL = disToE.length();
        const disVnext = this.pos0.subtract(nextPos);//下一次落点指向回归点的向量
        const disLnext = disVnext.length();
        
        if (disToEL &amp;lt; explodeR) {
              //2.1 如果下一次落点会落在当前爆炸中心的范围内则处理
              nextPos = explodeCenter.add(disToE.normalize().multiply(explodeR * 1.05));
        }else{
              //2.2 如果下一次落点距离回归点小于最小回收距离则回收
            if (disLnext &amp;lt; resetDistance ) {
                this.pos = this.pos0;
                return;
            }
        }

        //3.确认更新位置
        this.pos = nextPos;      
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的位置更新策略的难点在于2.1中的计算方法，也就是粒子回归途中碰到防护层表面时的处理。为了避开复杂的向量计算，示例代码中对碰撞的处理是直接改变其下一个落点的位置，而不是通过速度和受力来计算其位置，具体的做法是从当前爆炸中心向下一次落点位置连线生成向量，然后强制将当前粒子置于1.05倍半径的地方，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354575/201905/1354575-20190507193851196-777655375.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;粒子群的绘制&quot;&gt;3.2 粒子群的绘制&lt;/h3&gt;
&lt;p&gt;为了节约渲染时的性能消耗，示例中对逐帧动画的模式进行了调整，先统一更新粒子状态，接着绘制所有粒子的路径，最后一次性调用&lt;code&gt;context.fill&lt;/code&gt;方法将粒子渲染出来。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//绘制粒子
function paintParticles() {
    ctx.fillStyle = 'white';
    ctx.beginPath();
    for(let i = 0; i &amp;lt; particles.length; i++){
        for(let j =0; j &amp;lt;particles[i].length; j++){
            //更新粒子状态
            particles[i][j].update();
            //绘制粒子
            ctx.moveTo(particles[i][j].pos.x,particles[i][j].pos.y);
            ctx.arc(particles[i][j].pos.x,particles[i][j].pos.y,0.9,0,Math.PI*2,false);
        }
    }
    ctx.fill();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;爆破层的仿真&quot;&gt;3.3 爆破层的仿真&lt;/h3&gt;
&lt;p&gt;粒子是否受到爆破中心的影响相对容易判断，我们只需要计算粒子当前位置距离爆破中心的距离是否小于设定的爆破层半径即可，本例中依旧使用直接计算位移的方式来替代基于爆破冲击力的仿真，当爆破发生时将受到影响的粒子直接沿爆破中心与当前位置连线方向移动至大于爆破半径的随即位置。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//爆炸时某个点的影响
function explodePoint(p,center) { 
    let factor= Math.random() * 10;
    let dis = new Vector2(p.pos.x - center.x, p.pos.y - center.y).length();
    //核心点炸开
    if (dis &amp;lt; 0.3 * explodeR) {  
        //初始位置
        p.pos = explodeCenter.add(new Vector2(p.pos.x - center.x, p.pos.y - center.y).normalize().multiply(explodeR*(1+Math.random()*6)));
    } else {
       //非核心点炸至半径附近
        p.pos = explodeCenter.add(new Vector2(p.pos.x - center.x, p.pos.y - center.y).normalize().multiply(explodeR*(1+Math.random()/10)));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其余的部分都是一些常规的逐帧动画框架代码，实现难度并不大，本文不再赘述。&lt;/p&gt;
</description>
<pubDate>Tue, 07 May 2019 11:39:00 +0000</pubDate>
<dc:creator>大史不说话</dc:creator>
<og:description>示例代码托管在： 'http://www.github.com/dashnowords/blogs' 博客园地址： '《大史住在大前端》原创博文目录' 华为云社区地址： '【你要的前端打怪升级指南】'</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dashnowords/p/10827576.html</dc:identifier>
</item>
</channel>
</rss>