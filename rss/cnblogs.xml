<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>程序猿小白上路之旅第一个星期 - 听说程序员都谢顶</title>
<link>http://www.cnblogs.com/shockheaded/p/10631573.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shockheaded/p/10631573.html</guid>
<description>&lt;p&gt;     这是来到达内的第一个星期，这个星期还没有正式开课主要就是熟悉环境，上一下训练营。训练营其实就是对完全没接触过编程的人的前期铺垫，当然我是例外。这个星期我主要是通过达内的内部资源（ppt和视频）自学，颇有收获，但是我想将这些留到后面讲。现在谈一下我偶然发现的问题。&lt;/p&gt;
&lt;p&gt;       一般的，我们通常只在一个.java文件中写一个类，但这个类中有时有一个和类名同名的方法且没有返回值有时又没有那么它到底是什么呢？&lt;/p&gt;
&lt;p&gt;       通过查阅资料我知道了它是构造器。&lt;/p&gt;
&lt;p&gt;       构造器其实就是一个方法但没有返回值，其作用就是初始化成员变量，一个类可以有多个构造器，构造器不能有以下非访问性质的修饰: abstract, final, native, static, 或者 synchronized。构造器分为缺省构造器和非缺省构造器。&lt;/p&gt;
&lt;p&gt;非缺省构造器又分为：实例构造器和静态构造器。实例构造器负责初始化类中的&lt;a href=&quot;https://baike.so.com/doc/2088801-2209690.html&quot; target=&quot;_blank&quot;&gt;实例变量&lt;/a&gt;，它只有在用户用new关键字为对象分配内存时才被调用。而且作为&lt;a href=&quot;https://baike.so.com/doc/8404494-8724195.html&quot; target=&quot;_blank&quot;&gt;引用类型&lt;/a&gt;的类，其实例化后的对象必然是分配在堆上。用户只声明对象是不会产生构造器调用的。&lt;/p&gt;
&lt;p&gt;缺省构造器是在一个类没有声明任何构造器的情况下，&lt;a href=&quot;https://baike.so.com/doc/6133192-6346352.html&quot; target=&quot;_blank&quot;&gt;编译器&lt;/a&gt;强制为该类添加的一个无参数的构造器，该构造器仅仅调用父类的无参数构造器。缺省构造器实际上是编译器为保证每一个类都有至少一个构造器而采取的附加规则。注意这里的三个要点:&lt;/p&gt;
&lt;p&gt;1.子类没有声明任何构造器;&lt;/p&gt;
&lt;p&gt;2.编译器为子类加的缺省构造器一定为无参数的构造器;&lt;/p&gt;
&lt;p&gt;3.父类一定要存在一个无参数的构造器。&lt;/p&gt;
&lt;p&gt;       构造器在继承时需要特别的注意，为了保证父类&lt;a href=&quot;https://baike.so.com/doc/2040229-2158790.html&quot; target=&quot;_blank&quot;&gt;成员变量&lt;/a&gt;的正确初始化，子类的任何构造器默认的都必须调用父类的某一构造器，具体调用哪个构造器要看构造器的初始化参数列表。如果没有初始化参数列表，那么子类的该构造器就调用父类的无参数构造器;如果有初始化参数列表，那么子类的该构造器就调用父类对应的参数构造器。&lt;/p&gt;
&lt;p&gt;我们看到类的构造器的声明中有public&lt;a href=&quot;https://baike.so.com/doc/2148389-2273126.html&quot; target=&quot;_blank&quot;&gt;修饰符&lt;/a&gt;，那么当然也可以有protected/private/ internal修饰符。根据修饰符规则，我们如果将一个类的构造器修饰为private，那么我们在继承该类的时候，我们将不能对这个private的构造器进行调用，我们是否就不能对它进行继承了吗?正是这样。实际上这样的类在我们的类内的&lt;a href=&quot;https://baike.so.com/doc/2040229-2158790.html&quot; target=&quot;_blank&quot;&gt;成员变量&lt;/a&gt;都是静态(static)时，而又不想让类的用户对它进行实例化，这时必须屏蔽&lt;a href=&quot;https://baike.so.com/doc/6133192-6346352.html&quot; target=&quot;_blank&quot;&gt;编译器&lt;/a&gt;为我们暗中添加的构造器(编译器添加的构造器都为public)，就很有必要作一个private的实例构造器了。protected/internal也有类似的用法。&lt;/p&gt;
&lt;p&gt;构造器是为了创建一个类的实例。这个过程也可以在创建一个对象的时候用到:Platypus p1 = new Platypus(); 构造器可以用来在初始化对象时初始化&lt;a href=&quot;https://baike.so.com/doc/2342639-2477468.html&quot; target=&quot;_blank&quot;&gt;数据成员&lt;/a&gt;，一个类可以有多个构造器。一个类的构造器的名称必须与该类的名称一致。要退出构造，可以使用返回语句&quot;return;&quot;。&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;p&gt;构造器和方法使用关键字this有很大的区别。方法引用this指向正在执行方法的类的实例。&lt;a href=&quot;https://baike.so.com/doc/500543-530006.html&quot; target=&quot;_blank&quot;&gt;静态方法&lt;/a&gt;不能使用this关键字，因为静态方法不属于类的实例，所以this也就没有什么东西去指向。构造器的this指向同一个类中，不同参数列表的另外一个构造器，&lt;/p&gt;

</description>
<pubDate>Sun, 31 Mar 2019 07:34:00 +0000</pubDate>
<dc:creator>听说程序员都谢顶</dc:creator>
<og:description>这是来到达内的第一个星期，这个星期还没有正式开课主要就是熟悉环境，上一下训练营。训练营其实就是对完全没接触过编程的人的前期铺垫，当然我是例外。这个星期我主要是通过达内的内部资源（ppt和视频）自学，颇</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shockheaded/p/10631573.html</dc:identifier>
</item>
<item>
<title>记一次腾讯微信面试 - ChessZhang</title>
<link>http://www.cnblogs.com/yugege/p/10631339.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yugege/p/10631339.html</guid>
<description>&lt;p&gt;2017年7月毕业至今，已经快两年了，这两年的的技术积累得到到底怎样呢？个人觉得，面试是检验技术的唯一标准。所以，决定准备一份简历，到顶尖的互联网公司试一下，广州这边，最好的公司，当然就是微信啦。正好有师姐是在微信的，所以把简历发给了她，同时，我自己也在boss直聘上投了一个岗位，但是后来尴尬的事情发生了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/698814/201903/698814-20190331144033510-1182898267.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我的简历被微信的其他部门锁定了！就是 boss直聘 投递的微信开放平台岗位锁定了，所以，我就找 HR 说明了情况，说我对另外一个部门比较感兴趣，要求释放我的简历。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/698814/201903/698814-20190331144119018-1137354284.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然 HR姐姐 还是不太愿意取消，不过最后在我的再三要求下，她还是取消了哈。这件事情也说明了一事实：一份好的简历，是多么的重要！好的简历，甚至会让同一个公司的不同部门抢着不放的。所以，如果你想找一份好的工作，必须要花时间，先好好的准备一下简历，个人觉得，写一份好的简历，最起码需要准备两天吧，把自己在平时工作中最有成就感的地方列出来。&lt;/p&gt;
&lt;p&gt;OK，简历被锁的问题搞定了，接下来就真正的到面试环节了。因为面试是一个十分敏感的事情，白天我不太好请假去面试啊，万一被老大知道我不安分、想跳槽了怎么办啊。所以，当3月27日早上微信的HR打电话来跟我约面试时间，我约了3月28日晚上7.30。也就是上周四的晚上哈。&lt;/p&gt;
&lt;p&gt;这可是我毕业后的第一次面试啊，而且还是微信，内心肯定是非常紧张的！好不容终于到了周四晚上6点钟了（其实还没有到下班时间，我们是6.30才能打卡的），我饭都没有来得及吃，匆匆的打车过去TIT创意园。从信息港过去那边虽然不到10公里，但是因为下班高峰期，差不多50分钟才到。&lt;/p&gt;
&lt;p&gt;7.30终于到了，面试官先让我做笔试题，给的时间是40分钟。这笔试什么题目都有，有Linux、MySql、C/C++、算法，当然因为是前端面试，也有一些前端的题目。其实这笔试题对我来说真的很难，因为太多东西都不会，像 MySql、Linux、C/C++ 这些我一个前端切图仔除了在大学课堂上学习一点儿之外，几乎是没有任何的实战过。&lt;/p&gt;
&lt;p&gt;大概8.20面试官说时间到了，他把我的答案大概看了看，然后就开始面试了。先是作自己介绍，接着就开始面试。印象中记得的题目是以下这些。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;先是看简历上写的项目经验，问一上些项目上的问题，比如如何编写 js-sdk, 如何去修改 weui 库，遇到最大的难题是什么及如何去解决的。&lt;/li&gt;
&lt;li&gt;数组去重的方法有哪些？&lt;/li&gt;
&lt;li&gt;如何判断左右小括号是否全部匹配。如 &lt;code&gt;( ( ))()((((()))))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JS 的事件机制&lt;/li&gt;
&lt;li&gt;如何劫持 XMLHttpRequest 的 send() 方法，调用他的时候，把参数输出到控制台。&lt;/li&gt;
&lt;li&gt;git 和svn 的区别，git 的本地仓库有什么用呢？&lt;/li&gt;
&lt;li&gt;react 和 vue 的区别&lt;/li&gt;
&lt;li&gt;为什么简单的项目选择使用 jQuery 而不用 vue 。&lt;/li&gt;
&lt;li&gt;跨域解决方案有哪些？jsonp 的原理及缺点？及如何判断 JS 加载完成了？IE7不支持 script.onload 事件怎么办？&lt;/li&gt;
&lt;li&gt;浏览器的渲染机制？&lt;/li&gt;
&lt;li&gt;浏览器最大并发量限制是多少个？及如何去突破这个限制？&lt;/li&gt;
&lt;li&gt;缓存机制？&lt;/li&gt;
&lt;li&gt;内存泄漏，及如何主动的去发现是否存在内存泄漏？&lt;/li&gt;
&lt;li&gt;你们平时项目的 JS 异常有做上报处理吗？是什么实现的？&lt;/li&gt;
&lt;li&gt;xss 攻击的原理和预防？&lt;/li&gt;
&lt;li&gt;eslint 是怎么使用的？&lt;/li&gt;
&lt;li&gt;webpac打包性能优化，如何分块打包，及 HMR 的实现原理。&lt;/li&gt;
&lt;li&gt;React的虚拟dom是什么？及 diff 算法原理？&lt;/li&gt;
&lt;li&gt;SSR(服务端渲染)的作用，及它有什么缺点？？？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些题目虽然看起来都很简单，大概都能答得出来，但是每个题目往深处或者底层展开讨论，就不容易了。特别是这个面试官，每个题目，他都会一层层的放深入去问。比如说，JS的事件机制，大家可能都知道通过 event loop 来实现的，但是如果再深入点，JS不是单线程的吗，那 event loop是怎么实现的？以及事件其实是分成宏任务和微任务两种的，可能很多人都不知道。再比如，webapck的 HMR 原理，可能很多人都知道当文件修改后，webpack 会对文件进行重新编译并通过 socket 发送通知给浏览器，但是这并不是原理，浏览器是怎么知道修改了哪里？该怎么去替换模块呢？ 和面试官深入展开的讨论的内容比较多，下次再单独写一篇文章整理出来。&lt;/p&gt;
&lt;p&gt;当然，可能朋友们最关心的问题是，这次面试过了吗。答案是： 不通过。我刚面试完后就问了师姐，面试官给的评价是：中规中矩，有点一般，要深入一下底层。当时就已经知道凉凉了~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/698814/201903/698814-20190331144153221-1408740010.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后第二天也收到了正式的短信通知，面试结果为：不通过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/698814/201903/698814-20190331144448323-882226416.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然结果没有通过，但是经历这次面试，认识到了自己最大的缺点：学习不够深入底层。学习要追根究底，不要大概懂了就停止，而是要彻底懂了才行！换句放说就是：不仅要知其然，还要知其所以然。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 06:43:00 +0000</pubDate>
<dc:creator>ChessZhang</dc:creator>
<og:description>2017年7月毕业至今，已经快两年了，这两年的的技术积累得到到底怎样呢？个人觉得，面试是检验技术的唯一标准。所以，决定准备一份简历，到顶尖的互联网公司试一下，广州这边，最好的公司，当然就是微信啦。正好</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yugege/p/10631339.html</dc:identifier>
</item>
<item>
<title>为什么你需要少看垃圾博客以及如何在Python里精确地四舍五入 - 青南</title>
<link>http://www.cnblogs.com/xieqiankun/p/the_truth_of_round.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieqiankun/p/the_truth_of_round.html</guid>
<description>&lt;p&gt;今天又有一个Python初学者被中文技术博客中的垃圾文章给误导了。&lt;/p&gt;
&lt;p&gt;这位初学者的问题是：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在Python中，如何精确地进行浮点数的四舍五入，保留两位小数？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你在Google或者百度上搜索，你会发现大量的来自CSDN或者简书上面的文章讲到这一点，但是他们的说法无外乎下面几种：&lt;/p&gt;
&lt;h2 id=&quot;连例子都不举的垃圾文章&quot;&gt;连例子都不举的垃圾文章&lt;/h2&gt;
&lt;p&gt;如下图所示，懒得吐槽。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-30-23-51-43.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用round函数&quot;&gt;使用round函数&lt;/h2&gt;
&lt;p&gt;他们举的例子为：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; round(1.234, 2)
1.23&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种文章，他只演示了&lt;code&gt;四舍&lt;/code&gt;，但是却没有演示&lt;code&gt;五入&lt;/code&gt;。所以如果你代码稍作修改，就会发现有问题：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; round(11.245, 2)
11.24&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;先放大再缩小&quot;&gt;先放大再缩小&lt;/h2&gt;
&lt;p&gt;这种文章稍微好一点，知道多举几个例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-30-23-53-12.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然而这种文章也是漏洞百出，只要你多尝试几个数字就会发现问题，在Python 2和Python 3下面，效果是不一样的。先来看看Python 2下面的运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-11-03-02.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Python 2里面，直接使用&lt;code&gt;round&lt;/code&gt;，&lt;code&gt;1.125&lt;/code&gt;精确到两位小数后为&lt;code&gt;1.13&lt;/code&gt;，而&lt;code&gt;1.115&lt;/code&gt;精确到两位小数后是&lt;code&gt;1.11&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再来看看Python 3下面的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-11-04-32.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Python 3下面，&lt;code&gt;1.125&lt;/code&gt;在精确到两位小数以后是&lt;code&gt;1.12&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;他举的例子，在Python 3中先放大再缩小，也并不总是正确。&lt;/p&gt;
&lt;h3 id=&quot;装逼货&quot;&gt;装逼货&lt;/h3&gt;
&lt;p&gt;还有一种装逼货，文章和先放大再缩小差不多，但是他还知道&lt;code&gt;decimal&lt;/code&gt;这个模块。&lt;/p&gt;
&lt;p&gt;不过他的使用方法，大家看他吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-00-12-22.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;具体原因不详&lt;/code&gt; ？？？？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;不推荐使用这个方法&lt;/code&gt;？？？&lt;/p&gt;
&lt;p&gt;这种人要先装个逼，表示自己知道有这样一个库，但是用起来发现有问题，而且不知道原因，所以不建议大家使用。&lt;/p&gt;
&lt;p&gt;decimal是专门为高精度计算用的模块，他竟然说不建议大家使用？？？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-09-36-51.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;round到底出了什么问题&quot;&gt;round到底出了什么问题？&lt;/h2&gt;
&lt;p&gt;骂完了，我们来说说，在Python 3里面，&lt;code&gt;round&lt;/code&gt;这个内置的函数到底有什么问题。&lt;/p&gt;
&lt;p&gt;网上有人说，因为在计算机里面，小数是不精确的，例如&lt;code&gt;1.115&lt;/code&gt;在计算机中实际上是&lt;code&gt;1.1149999999999999911182&lt;/code&gt;，所以当你对这个小数精确到小数点后两位的时候，实际上小数点后第三位是&lt;code&gt;4&lt;/code&gt;，所以四舍五入，因此结果为&lt;code&gt;1.11&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这种说法，对了一半。&lt;/p&gt;
&lt;p&gt;因为并不是所有的小数在计算机中都是不精确的。例如&lt;code&gt;0.125&lt;/code&gt;这个小数在计算机中就是精确的，它就是&lt;code&gt;0.125&lt;/code&gt;，没有省略后面的值，没有近似，它确确实实就是&lt;code&gt;0.125&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是如果我们在Python中把&lt;code&gt;0.125&lt;/code&gt;精确到小数点后两位，那么它的就会变成&lt;code&gt;0.12&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; round(0.125, 2)
0.12&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么在这里&lt;code&gt;四舍&lt;/code&gt;了？&lt;/p&gt;
&lt;p&gt;还有更奇怪的，另一个在计算机里面能够精确表示的小数&lt;code&gt;0.375&lt;/code&gt;，我们来看看精确到小数点后两位是多少：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; round(0.375, 2)
0.38&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么这里又&lt;code&gt;五入&lt;/code&gt;了？&lt;/p&gt;
&lt;p&gt;因为在Python 3里面，&lt;code&gt;round&lt;/code&gt;对小数的精确度采用了&lt;code&gt;四舍六入五成双&lt;/code&gt;的方式。&lt;/p&gt;
&lt;p&gt;如果你写过大学物理的实验报告，那么你应该会记得老师讲过，直接使用四舍五入，最后的结果可能会偏高。所以需要使用&lt;code&gt;奇进偶舍&lt;/code&gt;的处理方法。&lt;/p&gt;
&lt;p&gt;例如对于一个小数&lt;code&gt;a.bcd&lt;/code&gt;，需要精确到小数点后两位，那么就要看小数点后第三位：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果&lt;code&gt;d&lt;/code&gt;小于5，直接舍去&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;d&lt;/code&gt;大于5，直接进位&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;d&lt;/code&gt;等于5：
&lt;ol&gt;&lt;li&gt;&lt;code&gt;d&lt;/code&gt;后面没有数据，且c为&lt;code&gt;偶数&lt;/code&gt;，那么不进位，保留c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;后面没有数据，且c为&lt;code&gt;奇数&lt;/code&gt;，那么进位，c变成(c + 1)&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;d&lt;/code&gt;后面还有非0数字，例如实际上小数为&lt;code&gt;a.bcdef&lt;/code&gt;，此时一定要进位，c变成(c + 1)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;关于奇进偶舍，有兴趣的同学可以在维基百科搜索这两个词条：&lt;code&gt;数值修约&lt;/code&gt;和&lt;code&gt;奇进偶舍&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以，&lt;code&gt;round&lt;/code&gt;给出的结果如果与你设想的不一样，那么你需要考虑两个原因：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;你的这个小数在计算机中能不能被精确储存？如果不能，那么它可能并没有达到四舍五入的标准，例如&lt;code&gt;1.115&lt;/code&gt;，它的小数点后第三位实际上是&lt;code&gt;4&lt;/code&gt;，当然会被舍去。&lt;/li&gt;
&lt;li&gt;如果你的这个小数在计算机中能被精确表示，那么，&lt;code&gt;round&lt;/code&gt;采用的进位机制是&lt;code&gt;奇进偶舍&lt;/code&gt;，所以这取决于你要保留的那一位，它是奇数还是偶数，以及它的下一位后面还有没有数据。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;如何正确进行四舍五入&quot;&gt;如何正确进行四舍五入&lt;/h2&gt;
&lt;p&gt;如果要实现我们数学上的四舍五入，那么就需要使用decimal模块。&lt;/p&gt;
&lt;p&gt;如何正确使用decimal模块呢？&lt;/p&gt;
&lt;p&gt;看官方文档，不要看中文垃圾博客！！！&lt;/p&gt;
&lt;p&gt;看官方文档，不要看中文垃圾博客！！！&lt;/p&gt;
&lt;p&gt;看官方文档，不要看中文垃圾博客！！！&lt;/p&gt;
&lt;p&gt;不要担心看不懂英文，Python已经推出了官方中文文档（有些函数的使用方法还没有翻译完成）。&lt;/p&gt;
&lt;p&gt;我们来看一下：&lt;a href=&quot;https://docs.python.org/zh-cn/3/library/decimal.html#decimal.Decimal.quantize&quot; class=&quot;uri&quot;&gt;https://docs.python.org/zh-cn/3/library/decimal.html#decimal.Decimal.quantize&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方文档给出了具体的写法：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;Decimal('1.41421356').quantize(Decimal('1.000'))
Decimal('1.414')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么我们来测试一下，&lt;code&gt;0.125&lt;/code&gt;和&lt;code&gt;0.375&lt;/code&gt;分别保留两位小数是多少：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from decimal import Decimal
&amp;gt;&amp;gt;&amp;gt; Decimal('0.125').quantize(Decimal('0.00'))
Decimal('0.12')
&amp;gt;&amp;gt;&amp;gt; Decimal('0.375').quantize(Decimal('0.00'))
Decimal('0.38')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;怎么结果和&lt;code&gt;round&lt;/code&gt;一样？我们来看看文档中&lt;code&gt;quantize&lt;/code&gt;的函数原型和文档说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-27-41.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里提到了可以通过指定&lt;code&gt;rounding&lt;/code&gt;参数来确定进位方式。如果没有指定&lt;code&gt;rounding&lt;/code&gt;参数，那么默认使用上下文提供的进位方式。&lt;/p&gt;
&lt;p&gt;现在我们来查看一下默认上下文中的进位方式是什么：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from decimal import getcontext
&amp;gt;&amp;gt;&amp;gt; getcontext().rounding
'ROUND_HALF_EVEN'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-29-31.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ROUND_HALF_EVEN&lt;/code&gt;实际上就是&lt;code&gt;奇进偶舍&lt;/code&gt;！如果要指定真正的四舍五入，那么我们需要在&lt;code&gt;quantize&lt;/code&gt;中指定进位方式为&lt;code&gt;ROUND_HALF_UP&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from decimal import Decimal, ROUND_HALF_UP
&amp;gt;&amp;gt;&amp;gt; Decimal('0.375').quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
Decimal('0.38')
&amp;gt;&amp;gt;&amp;gt; Decimal('0.125').quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
Decimal('0.13')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在看起来一切都正常了。&lt;/p&gt;
&lt;p&gt;那么会不会有人进一步追问一下，如果Decimal接收的参数不是字符串，而是浮点数会怎么样呢？&lt;/p&gt;
&lt;p&gt;来实验一下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;
&amp;gt;&amp;gt;&amp;gt; Decimal(0.375).quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
Decimal('0.38')
&amp;gt;&amp;gt;&amp;gt; Decimal(0.125).quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
Decimal('0.13')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那是不是说明，在Decimal的第一个参数，可以直接传浮点数呢？&lt;/p&gt;
&lt;p&gt;我们换一个数来测试一下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Decimal(11.245).quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
Decimal('11.24')
&amp;gt;&amp;gt;&amp;gt; Decimal('11.245').quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
Decimal('11.25')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么浮点数&lt;code&gt;11.245&lt;/code&gt;和字符串&lt;code&gt;'11.245'&lt;/code&gt;，传进去以后，结果不一样？&lt;/p&gt;
&lt;p&gt;我们继续在文档在寻找答案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-36-13.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;官方文档已经很清楚地说明了，如果你传入的参数为浮点数，并且这个浮点值在计算机里面不能被精确存储，那么它会先被转换为一个不精确的二进制值，然后再把这个不精确的二进制值转换为&lt;code&gt;等效的十进制值&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于不能精确表示的小数，当你传入的时候，Python在拿到这个数前，这个数就已经被转成了一个不精确的数了。所以你虽然参数传入的是&lt;code&gt;11.245&lt;/code&gt;，但是Python拿到的实际上是&lt;code&gt;11.244999999999...&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是如果你传入的是字符串&lt;code&gt;'11.245'&lt;/code&gt;，那么Python拿到它的时候，就能知道这是&lt;code&gt;11.245&lt;/code&gt;，不会提前被转换为一个不精确的值，所以，建议给&lt;code&gt;Decimal&lt;/code&gt;的第一个参数传入字符串型的浮点数，而不是直接写浮点数。&lt;/p&gt;
&lt;p&gt;总结，如果想实现精确的四舍五入，代码应该这样写：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from decimal import Decimal, ROUND_HALF_UP

origin_num = Decimal('11.245')
answer_num = origin_num.quantize(Decimal('0.00'), rounding=ROUND_HALF_UP)
print(answer_num)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行效果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-44-23.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;特别注意，一旦要做精确计算，那么就不应该再单独使用浮点数，而是应该总是使用&lt;code&gt;Decimal('浮点数')&lt;/code&gt;。否则，当你赋值的时候，精度已经被丢失了，建议全程使用Decimal举例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = Decimal('0.1')
b = Decimal('0.2')
c = a + b
print(c)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，如果有同学想知道为什么0.125和0.375能被精确的储存，而1.115、11.245不能被精确储存，请在这篇文章下面留言，如果想知道的同学多，我就写一篇文章来说明。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 05:13:00 +0000</pubDate>
<dc:creator>青南</dc:creator>
<og:description>这篇文章深入分析了Python的round函数输出结果可能不符合预期的真正原因，同时给出了如何实现数学意义上真正的四舍五入的办法，最后吐槽了垃圾文章误导新人的问题。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieqiankun/p/the_truth_of_round.html</dc:identifier>
</item>
<item>
<title>netcore开发windows普通服务(非Web)并一键发布到服务器 - 鱼东东</title>
<link>http://www.cnblogs.com/yudongdong/p/10630835.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yudongdong/p/10630835.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;js-issue-title&quot;&gt;netcore下开发windows服务如果是web项目的话，由于aspnetcore本身是支持的，把默认的host.Run改为host.RunAsService就可以了。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;js-issue-title&quot;&gt;但是普通的netcore的控制台项目我终于找到了如下方式来实现：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331121950472-1730457397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;ol&gt;&lt;li&gt;Microsoft.Extensions.Hosting&lt;/li&gt;
&lt;li&gt;System.ServiceProcess.ServiceController&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceBaseLifetime : ServiceBase, IHostLifetime
{
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; TaskCompletionSource _delayStart = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TaskCompletionSource();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ServiceBaseLifetime(IApplicationLifetime applicationLifetime)
    {
        ApplicationLifetime &lt;/span&gt;= applicationLifetime ?? &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(applicationLifetime));
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; IApplicationLifetime ApplicationLifetime { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task WaitForStartAsync(CancellationToken cancellationToken)
    {
        cancellationToken.Register(() &lt;/span&gt;=&amp;gt;&lt;span&gt; _delayStart.TrySetCanceled());
        ApplicationLifetime.ApplicationStopping.Register(Stop);

        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(Run).Start(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Otherwise this would block and prevent IHost.StartAsync from finishing.&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _delayStart.Task;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Run()
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            Run(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This blocks until the service is stopped.&lt;/span&gt;
            _delayStart.TrySetException(&lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stopped without starting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
        {
            _delayStart.TrySetException(ex);
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StopAsync(CancellationToken cancellationToken)
    {
        Stop();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Called by base.Run when the service is ready to start.&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; OnStart(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
    {
        _delayStart.TrySetResult(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnStart(args);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Called by base.Stop. This may be called multiple times by service Stop, ApplicationStopping, and StopAsync.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; That's OK because StopApplication uses a CancellationTokenSource and prevents any recursion.&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnStop()
    {
        ApplicationLifetime.StopApplication();
        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnStop();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceBaseLifetimeHostExtensions
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IHostBuilder UseServiceBaseLifetime(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IHostBuilder hostBuilder)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; hostBuilder.ConfigureServices((hostContext, services) =&amp;gt; services.AddSingleton&amp;lt;IHostLifetime, ServiceBaseLifetime&amp;gt;&lt;span&gt;());
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RunAsService(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IHostBuilder hostBuilder)
    {
        hostBuilder.UseServiceBaseLifetime().Build().Run();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task RunAsServiceAsync(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IHostBuilder hostBuilder)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; hostBuilder.UseServiceBaseLifetime().Build().RunAsync(CancellationToken.None);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestService: IHostedService,IDisposable
{
&lt;/span&gt;&lt;span&gt;readonly&lt;/span&gt; System.Timers.Timer tmBak = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Timers.Timer();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TestService()
    {
        tmBak.Interval &lt;/span&gt;= &lt;span&gt;1000&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1秒执行1次&lt;/span&gt;
        tmBak.AutoReset = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行1次false,一直执行true&lt;/span&gt;
        tmBak.Enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        tmBak.Elapsed &lt;/span&gt;+= (sender, eventArgs) =&amp;gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (StreamWriter sw = &lt;span&gt;new&lt;/span&gt; StreamWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\log.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;))
            {
                sw.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AntDeploy Windows服务：{DateTime.Now:yyyy-MM-dd HH:mm:ss}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        };
    }


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StartAsync(CancellationToken cancellationToken)
    {
        tmBak.Start();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StopAsync(CancellationToken cancellationToken)
    {
        tmBak.Stop();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
    {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tmBak.Dispose();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; P/Invoke declarations for Windows.&lt;/span&gt;
[DllImport(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kernel32.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)] &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt;&lt;span&gt; IntPtr GetConsoleWindow();
[DllImport(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user32.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)] &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsWindowVisible(IntPtr hWnd);
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; HaveVisibleConsole()
{
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ?&lt;span&gt;
IsWindowVisible(GetConsoleWindow())
:
Console.WindowHeight &lt;/span&gt;&amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pathToExe =&lt;span&gt; Process.GetCurrentProcess().MainModule.FileName;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pathToContentRoot =&lt;span&gt; Path.GetDirectoryName(pathToExe);
        Directory.SetCurrentDirectory(pathToContentRoot);

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isService = !(Debugger.IsAttached || args.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--console&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (HaveVisibleConsole()) isService = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HostBuilder()
            .ConfigureServices((hostContext, services) &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                services.AddHostedService&lt;/span&gt;&amp;lt;TestService&amp;gt;&lt;span&gt;();
            });

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isService)
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; builder.RunAsServiceAsync();
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; builder.RunConsoleAsync();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AntDeploy是我开发的一款开源一键部署vs插件(也是支持脱离vs单独使用的一个开源工具)&lt;/p&gt;
&lt;p&gt;开源地址：&lt;a href=&quot;https://github.com/yuzd/AntDeployAgent&quot;&gt;https://github.com/yuzd/AntDeployAgent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122141020-1763237160.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;添加一个环境 名字叫 测试 然后 在 测试环境里面添加 windows服务器 这里我做测试就添加就是我本机，注意Host里面是填写格式为：ip:端口号&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122157539-1838794173.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 注意：Token不是windows服务器的密码！！！是安装agent后，agent的配置文件里面配置的Token(你自己自定义配置的)&lt;br/&gt;注意：Port不是你要发布的项目的端口号！！！是安装agent后，agent的配置文件里面配置的端口号(你自己自定义配置的)&lt;br/&gt;点击【Connect Test】按钮进行确认agent可以成功链接，否则会发布失败&lt;br/&gt;如果【Connect Fail】失败 请查看 &lt;a class=&quot;issue-link js-issue-link&quot; href=&quot;https://github.com/yuzd/AntDeployAgent/issues/10&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;422560124&quot; data-permission-text=&quot;Issue title is private&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/yuzd/AntDeployAgent/issues/10/hovercard&quot;&gt;#10&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;进入 WindowsService Tab界面&lt;/h2&gt;
&lt;p&gt;Sdk类型选择 netcore&lt;br/&gt;ServiceName 填写上面我们设置的名称：[TestService]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122223819-1838485080.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;点击 【Deploy】按钮进行发布&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122238100-1374087597.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;确认服务器无误 点击 【是】开始执行一键部署&lt;br/&gt;如果发布出现错误会出现下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122250168-52210655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可以在Log里面查看失败原因是因为我部署agent没有用管路员权限 报权限不足失败 需要用管理员权限运行agent才行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122313726-504622529.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 部署成功 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122324836-1923020849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 查看D盘下是否log.txt是否正常每隔1秒写入了当前时间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472365/201903/472365-20190331122335694-157298827.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里演示的是windows服务上没有这个service&lt;br/&gt;所以自动创建了。&lt;br/&gt;如果service已存在的情况 Deploy 就会全量覆盖 不会重新创建site的。&lt;br/&gt;如果想要覆盖时排除指定文件 可以在 Setting Tab界面的IgnoreList里面增加(支持正则)&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 04:28:00 +0000</pubDate>
<dc:creator>鱼东东</dc:creator>
<og:description>如何开发并一键发布WindowsService项目(netcore普通项目) netcore下开发windows服务如果是web项目的话，由于aspnetcore本身是支持的，把默认的host.Run</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yudongdong/p/10630835.html</dc:identifier>
</item>
<item>
<title>亲子编程玩Micro:bit-动力小车“麦昆” - 施炯</title>
<link>http://www.cnblogs.com/dearsj001/p/MicorbitMyQueen.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dearsj001/p/MicorbitMyQueen.html</guid>
<description>&lt;p&gt;    少儿编程之风已经吹进各大城市，编程猫、乐博机器人、童程童美等专业培训机构逐渐进入大家的视野，年龄段已经从K12逐渐降低到幼儿园中班。其实，少儿编程的门槛并不高，它不会让孩子一上手就去接触代码，而是会通过图形、模块、游戏等形式，从声音、光、外形等多种途径，帮助孩子们走进计算机世界。本文以一个父亲的角度，讲述如何与孩子一起，用图形化的方式，构建一个好玩的动力小车。&lt;/p&gt;

&lt;p&gt;    首先讲讲基础，从孩子和父亲两个方面来看。&lt;/p&gt;
&lt;p&gt;    孩子目前是幼儿园大班，在幼儿园中班的时候开始玩乐高，特别喜欢车，有一定的动手组装能力（乐高的大颗粒和小颗粒都玩过，就是小颗粒有些费劲），可以在大人的指导下，拼搭模型。&lt;/p&gt;
&lt;p&gt;    父亲是理工男，有编程能力和基础，所以可以快速入门后面的图形化编程。不过我相信，图形化编程这么简单，大部分没有基础的父母同样可以轻松入门。&lt;/p&gt;

&lt;p&gt;    套件和品牌有很多，淘宝上都可以买到，如DFRobot、makeblock和seeed等国内厂商都会生产自己的产品，或者代理国外的产品。Micro:bit 是一款由英国BBC设计的ARM架构的单片机，板载蓝牙、加速度计、电子罗盘、三个按钮、5 x 5 LED点阵，主要用于青少年的编程教育。用户可以利用它实现任何酷炫的小创意。淘宝上也有很多为Micro:bit设计的外围器件，包括各类传感器、显示屏、按钮、车架等等。这里使用的是国内厂商DFRobot生产为Micro:bit设计的小车车架“麦昆”。特性如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持Microsoft makecode，支持Scratch及python&lt;/li&gt;
&lt;li&gt;体积迷你，移动灵活&lt;/li&gt;
&lt;li&gt;全金属微型减速电机，质量优良，驱动力强&lt;/li&gt;
&lt;li&gt;巡线、氛围灯、LED车灯、超声波接口、蜂鸣器、I2C接口、金手指接口、机械扩展螺孔等等，功能齐全，扩展性强&lt;/li&gt;
&lt;li&gt;独家定制的赛钢材料支撑轮，灵活可靠，越障能力强&lt;/li&gt;
&lt;li&gt;安装简单，轻松上手&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;    拿到套件以后，拆开来，得到各个组件，包括车体（出厂已安装好电机和支撑轮）1个、轮子2个、3节7号电池盒1个、双面胶1片。如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120142656-246583283.jpg&quot;&gt;&lt;img title=&quot;IMG_5078&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120143495-983322624.jpg&quot; alt=&quot;IMG_5078&quot; width=&quot;644&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    另外，如果要远程遥控，还需要一个手柄，手柄和两块Micro:bit板子如下图（小车车架用一块Micro:bit，遥控手柄也用一块Micro:bit）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120144221-2095187710.jpg&quot;&gt;&lt;img title=&quot;IMG_5079&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120144783-280084659.jpg&quot; alt=&quot;IMG_5079&quot; width=&quot;644&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    小车车架安装的步骤不多，首先是安装轮子，把轮胎套在轮毂上，再把轮毂插入到电机。小朋友自己完全可以搞定。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120145291-488788227.jpg&quot;&gt;&lt;img title=&quot;IMG_5080&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120145691-1625301089.jpg&quot; alt=&quot;IMG_5080&quot; width=&quot;229&quot; height=&quot;304&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120146106-363903532.jpg&quot;&gt;&lt;img title=&quot;IMG_5083&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120146793-1953208030.jpg&quot; alt=&quot;IMG_5083&quot; width=&quot;404&quot; height=&quot;304&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    轮子装好以后，就安装超声波传感器，用于检测障碍物距离，自动避障。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120147243-354180128.jpg&quot;&gt;&lt;img title=&quot;IMG_5086&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120147966-1113502106.jpg&quot; alt=&quot;IMG_5086&quot; width=&quot;644&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    接着，插入Micro:bit板子到插槽，注意方向。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120148790-734460330.jpg&quot;&gt;&lt;img title=&quot;IMG_5087&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120149283-1160184340.jpg&quot; alt=&quot;IMG_5087&quot; width=&quot;644&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    把电池盒粘到小车上，并把电池的接线接到车架的电池接口。完成小车的安装。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120149707-1218246716.jpg&quot;&gt;&lt;img title=&quot;IMG_5090&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120150108-710438098.jpg&quot; alt=&quot;IMG_5090&quot; width=&quot;364&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    安装过程中要注意两点，第一：轮胎和轮毂有方向，不要装反。第二，电池接线要接到小车车架的电池接口上，不要连到Micro:bit板子的电池接口。小车的各个接口说明可以参考下图。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120150535-17057603.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120151165-450306478.png&quot; alt=&quot;image&quot; width=&quot;1028&quot; height=&quot;257&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    遥控手柄的安装比较简单，只需要将Micro:bit插入扩展插槽就可以，需要注意的是，方向不要插反。然后为其粘好电池盒，把接线接到电池接口。如下图所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120152086-1124100386.jpg&quot;&gt;&lt;img title=&quot;IMG_5111&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120152959-399795471.jpg&quot; alt=&quot;IMG_5111&quot; width=&quot;364&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    对于小车的编程，可以使用在线的Microsoft makecode：&lt;a href=&quot;https://www.microsoft.com/zh-cn/makecode?rtc=1&quot;&gt;https://www.microsoft.com/zh-cn/makecode?rtc=1&lt;/a&gt;，直接在线编写下载。当然，笔者还是推荐下载应用安装到本地的方式，这样不受网络的拘束。&lt;/p&gt;
&lt;h2&gt;4.1 &lt;strong&gt;Mind+编程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;    DFRobot自行发布了一款同时支持图形化和代码编辑功能的环境Mind+，具体步骤如下：&lt;/p&gt;
&lt;p&gt;    1、下载及安装软件。下载地址：&lt;a href=&quot;http://www.mindplus.cc&quot;&gt;http://www.mindplus.cc&lt;/a&gt; 详细教程：&lt;a href=&quot;http://wiki.dfrobot.com.cn/index.php?title=Mind%2B%E5%9F%BA%E7%A1%80wiki%E6%95%99%E7%A8%8B-%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85&quot;&gt;Mind+基础wiki教程-软件下载安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    2、切换到“上传模式”。 详细教程：&lt;a href=&quot;http://wiki.dfrobot.com.cn/index.php?title=Mind%2B%E5%9F%BA%E7%A1%80wiki%E6%95%99%E7%A8%8B-%E4%B8%8A%E4%BC%A0%E6%A8%A1%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%B5%81%E7%A8%8B&quot;&gt;Mind+基础wiki教程-上传模式编程流程&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://wiki.dfrobot.com.cn/images/0/08/1%E5%88%87%E6%8D%A2%E6%88%90%E4%B8%8A%E4%BC%A0%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%BC%8F.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;    3、“扩展”中选择“套件”中的“麦昆”。 详细教程：&lt;a href=&quot;http://wiki.dfrobot.com.cn/index.php?title=Mind%2B%E5%9F%BA%E7%A1%80wiki%E6%95%99%E7%A8%8B-%E5%8A%A0%E8%BD%BD%E6%89%A9%E5%B1%95%E5%BA%93%E6%B5%81%E7%A8%8B&quot;&gt;Mind+基础wiki教程-加载扩展库流程&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://wiki.dfrobot.com.cn/images/thumb/b/bc/341%E6%8B%93%E5%B1%95%E5%8A%9F%E8%83%BD.png/600px-341%E6%8B%93%E5%B1%95%E5%8A%9F%E8%83%BD.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;br/&gt;    4、进行编程&lt;br/&gt;    5、编程完毕以后，点击菜单“连接设备”，选择一个“COM-microbit”，然后点击“上传到设备”&lt;/p&gt;
&lt;p&gt;    在DFRobot的Wiki网页上，包含了多个图形化案例，包括电机控制、读取超声波距离、点亮LED车灯、点亮氛围灯、读取红外线键值、红外遥控、超声波避障、光控精灵、无线发送和无线接收（遥控手柄）等。具体可以参考：&lt;a href=&quot;http://wiki.dfrobot.com.cn/index.php?title=(SKU:ROB0148)_micro:Maqueen(V2.0)%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B0%8F%E8%BD%A6#.E4.BA.A7.E5.93.81.E7.AE.80.E4.BB.8B&quot;&gt;Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;4.2 Microsoft makecode编程&lt;/h2&gt;
&lt;p&gt;    微软专门为Microbit开发了一款图形化的环境makecode，用户可以从应用商店上直接免费下载。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120153776-1607386502.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120154237-1150676424.png&quot; alt=&quot;image&quot; width=&quot;644&quot; height=&quot;492&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    下载完成，运行应用，导入小车麦昆的库，地址是：&lt;a href=&quot;https://github.com/DFRobot/pxt-maqueen&quot;&gt;https://github.com/DFRobot/pxt-maqueen&lt;/a&gt;，步骤如下。&lt;/p&gt;
&lt;p&gt;    1. 在Makecode for microbit的主页面点击新建项目，然后点击设置-扩展，如下图所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120154898-1454151244.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120155273-712164532.png&quot; alt=&quot;image&quot; width=&quot;644&quot; height=&quot;252&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120155658-1191621387.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120156349-2025689371.png&quot; alt=&quot;image&quot; width=&quot;644&quot; height=&quot;207&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    2. 输入麦昆的库，点击搜索，就可以搜到。如下图所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120156817-1955769849.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120157395-1624491371.png&quot; alt=&quot;image&quot; width=&quot;644&quot; height=&quot;297&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120157821-836761111.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120158530-59944802.png&quot; alt=&quot;image&quot; width=&quot;644&quot; height=&quot;199&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    3. 点击该扩展，环境会自动下载并且安装，安装之后，可以在左边的控件栏中找到麦昆，如下图所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120159227-1209809417.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120159692-864273055.png&quot; alt=&quot;image&quot; width=&quot;644&quot; height=&quot;247&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120200160-394606348.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120200629-1648196951.png&quot; alt=&quot;image&quot; width=&quot;644&quot; height=&quot;212&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    环境搭建好之后，就可以开始图形化编程了。在DFRobot的Wiki网页上，包含了多个图形化案例，包括电机控制、读取超声波距离、LED车灯闪烁、点亮氛围灯、读取红外线键值、红外遥控、超声波避障、光控精灵、循迹驾驶、无线发送和无线接收（遥控手柄）等。具体可以参考：&lt;a href=&quot;http://wiki.dfrobot.com.cn/index.php?title=(SKU:ROB0148)_micro:Maqueen(V2.0)%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B0%8F%E8%BD%A6#.E4.BA.A7.E5.93.81.E7.AE.80.E4.BB.8B&quot;&gt;Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120201198-1251467397.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120201987-68269946.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;140&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120202390-1451223731.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120202887-1220077708.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;138&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120203590-65566794.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120204142-757716421.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;138&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120205075-1858875796.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120205545-1068835731.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;139&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120205874-1012078971.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120206198-1953549734.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;138&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120206599-113530455.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120207561-1137709133.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;138&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    有关这个问题，我们可以从下面几个方面来引导。&lt;/p&gt;
&lt;p&gt;    1. 从小车的运动控制方面，可以与孩子探讨，该如何控制小车的两个轮子，以达到小车前进、后退、左转、右转的目的？如，左右轮同时正转，小车就前进；同时反转，小车就后退。&lt;/p&gt;
&lt;p&gt;    2. 掌握了小车的运动控制以后，就可以与让孩子自己设计小车的运动路线了，比如，走个8字。&lt;/p&gt;
&lt;p&gt;    3. 小车配有两个LED车灯，可以结合实际情况，如我们开车时，要左转的时候，需要打开左侧的转向灯；右转时，打开右侧的转向灯。与孩子探讨如何加入LED转向灯的功能。&lt;/p&gt;
&lt;p&gt;    4. 小车的遥控手柄案例中，只有遥控其前进、后退、左转和右转功能。尝试与小孩一起探讨如何加入A、B键的控制功能，如播放声音、加速/减速等。&lt;/p&gt;
&lt;p&gt;    5. 用触摸屏的电脑将有助于孩子的参与度，比如，控件的拖动、参数的设置将变得非常方便。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120208047-2135976625.jpg&quot;&gt;&lt;img title=&quot;IMG_5095&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120208529-350905204.jpg&quot; alt=&quot;IMG_5095&quot; width=&quot;364&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120208895-143084462.jpg&quot;&gt;&lt;img title=&quot;IMG_5093&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120209499-514542269.jpg&quot; alt=&quot;IMG_5093&quot; width=&quot;364&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    6. 如果要用手机或者Pad编程的话，可以使用蓝牙功能下载（苹果手机和Andorid手机均有对应的App可以下载，体验和PC版本类似，如下图所示）。虽然配对的过程稍微有些繁琐，但是这将大大降低孩子参与的门槛。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120210107-1962374147.png&quot;&gt;&lt;img title=&quot;IMG_5158&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120211015-582189440.png&quot; alt=&quot;IMG_5158&quot; width=&quot;274&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120211699-2112726980.png&quot;&gt;&lt;img title=&quot;IMG_5157&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120212044-1489048895.png&quot; alt=&quot;IMG_5157&quot; width=&quot;274&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    当孩子们看到小车按照自己的想法运动起来的时候，会开心的欢呼和跳跃。这时，我们仿佛能够看到童年的自己。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120212472-977877921.jpg&quot;&gt;&lt;img title=&quot;IMG_5096&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120212861-804561848.jpg&quot; alt=&quot;IMG_5096&quot; width=&quot;364&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120213349-580759874.jpg&quot;&gt;&lt;img title=&quot;IMG_5108&quot; src=&quot;https://img2018.cnblogs.com/blog/41072/201903/41072-20190331120213724-523840754.jpg&quot; alt=&quot;IMG_5108&quot; width=&quot;364&quot; height=&quot;484&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 04:02:00 +0000</pubDate>
<dc:creator>施炯</dc:creator>
<og:description>少儿编程之风已经吹进各大城市，编程猫、乐博机器人、童程童美等专业培训机构逐渐进入大家的视野，年龄段已经从K12逐渐降低到幼儿园中班。其实，少儿编程的门槛并不高，它不会让孩子一上手就去接触代码，而是会通</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dearsj001/p/MicorbitMyQueen.html</dc:identifier>
</item>
<item>
<title>【系统监控】性能监测 vmstat,mpstat,iostat - FlinkMe</title>
<link>http://www.cnblogs.com/bigdata1024/p/10630690.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigdata1024/p/10630690.html</guid>
<description>&lt;h3 id=&quot;一系统整体性能监测工具uptime&quot;&gt;一、系统整体性能监测工具：uptime&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;[root@WebServer ~]# uptime （同w命令输出的第一行信息）
09:40:52 up 5 days, 57 min, 1 user, load average: 0.00, 0.00, 0.00&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;uptime命令用于查看服务器运行了多长时间以及有多少个用户登录，快速获知服务器运行的负载情况。&lt;br/&gt;load average，显示了最近1，5，15分钟的负荷情况。&lt;br/&gt;它的值代表等待CPU处理的进程数，如果CPU没有时间处理这些进程，load average值会升高；反之则会降低。&lt;br/&gt;在CPU数量不同的情况下，值有所不同。&lt;/p&gt;
&lt;h3 id=&quot;二cpu监测mpstat-请参考man手册&quot;&gt;二、CPU监测：mpstat （请参考MAN手册）&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;mpstat 1  111  [1秒刷新，111次]


语法：mpstat [ options... ] [ &amp;lt;interval&amp;gt; [ &amp;lt;count&amp;gt; ] ]
[root@WebServer ~]# mpstat 1
Linux 2.6.9-89.ELsmp (WebServer) 08/18/09

10:08:25 CPU %user %nice %system %iowait %irq %soft %idle intr/s
10:08:26 all 0.00 0.00 0.00 0.00 0.00 0.00 100.00 1005.00
10:08:27 all 0.00 0.00 0.00 0.12 0.00 0.00 99.88 1031.00
10:08:28 all 0.00 0.00 0.00 0.00 0.00 0.00 100.00 1009.00
10:08:29 all 0.00 0.00 0.00 0.00 0.00 0.00 100.00 1030.00
10:08:30 all 0.00 0.00 0.00 0.00 0.00 0.00 100.00 1006.00&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;13.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;1.CPU （处理器编号，all表示所有处理器的平均数值）&lt;br/&gt;Processor number. The keyword all indicates that statistics are calculated as averages among all processors.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;2.%user （用户态的CPU利用率百分比）&lt;br/&gt;Show the percentage of CPU utilization that occurred while executing at the user level (application).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;3.%nice （用户态的优先级别CPU的利用率百分比）&lt;br/&gt;Show the percentage of CPU utilization that occurred while executing at the user level with nice priority.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;4.%system （内核态的CPU利用率百分比）&lt;br/&gt;Show the percentage of CPU utilization that occurred while executing at the system level (kernel). Note that&lt;br/&gt;this does not include the time spent servicing interrupts or softirqs.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;5.%iowait （在interval间段内io的等待百分比，interval 为采样频率，如本文的1为每一秒钟采样一次）&lt;br/&gt;Show the percentage of time that the CPU or CPUs were idle during which the system had an outstanding disk I/O request.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;6.%irq （在interval间段内,CPU的中断百分比）&lt;br/&gt;Show the percentage of time spent by the CPU or CPUs to service interrupts.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;7.%soft （在interval间段内,CPU的软中断百分比）&lt;br/&gt;Show the percentage of time spent by the CPU or CPUs to service softirqs. A softirq (software interrupt) is&lt;br/&gt;one of up to 32 enumerated software interrupts which can run on multiple CPUs at once.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;8.%idle （在interval间段内，CPU的闲置百分比，不包括I/O请求的等待）&lt;br/&gt;Show the percentage of time that the CPU or CPUs were idle and the system did not have an outstanding&lt;br/&gt;disk I/O request.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;9.intr/s （在interval间段内所有的CPU每秒中断数）&lt;br/&gt;Show the total number of interrupts received per second by the CPU or CPUs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;三内存监测vmstat-请参考man手册&quot;&gt;三、内存监测：vmstat （请参考MAN手册）&lt;/h3&gt;
&lt;p&gt;vmstat是一个很全面的性能分析工具，可以观察到系统的进程状态、内存使用、虚拟内存使用、磁盘的IO、中断、上下文切换、CPU使用等。对于 Linux 的性能分析，100%理解 vmstat 输出内容的含义，并能灵活应用，那对系统性能分析的能力就算是基本掌握了。&lt;/p&gt;
&lt;p&gt;下面是vmstat命令的输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@monitor-www ~]# vmstat 1 5
procs — ———–memory——————–swap——io—– —-system— —–cpu—
r  b  swpd       free     buff      cache  si so  bi    bo       in    cs   us sy  id wa st
1 0 84780 909744 267428 1912076  0 0  20   94      0        0     2  1  95  1 0
1 2 84780 894968 267428 1912216  0 0   0 1396   2301 11337  8  3  89  0 0
1 0 84780 900680 267428 1912340  0 0 76 1428  1854 8082     7  2  90  0 0
1 0 84780 902544 267432 1912548  0 0 116 928  1655 7502    7  2  92   0 0
2 0 84780 900076 267432 1912948  0 0 180 904 1963 8703    10  3  87  0 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对输出解释如下：&lt;/p&gt;
&lt;p&gt;1）procs&lt;br/&gt;a.r 列表示运行和等待CPU时间片的进程数，这个值如果长期大于系统CPU个数，就说明CPU资源不足，可以考虑增加CPU；&lt;/p&gt;
&lt;p&gt;b.b列表示在等待资源的进程数，比如正在等待I/O或者内存交换等。&lt;/p&gt;
&lt;p&gt;2）memory&lt;/p&gt;
&lt;p&gt;a.swp 列表示切换到内存交换区的内存数量（以KB为单位）。如果swp的值不为0或者比较大，而且si、so的值长期为0，那么这种情况一般不用担心，不会影响系统性能；&lt;/p&gt;
&lt;p&gt;b.free列表示当前空闲的物理内存数量（以KB为单位）；&lt;/p&gt;
&lt;p&gt;c. buff列表示buffers cache的内存数量，一般对块设备的读写才需要缓冲；&lt;/p&gt;
&lt;p&gt;d. cache列表示page cached的内存数量，一般作文件系统的cached，频繁访问的文件都会被cached。如果cached值较大，就说明cached文件数较多。如果此时IO中的bi比较小，就说明文件系统效率比较好。&lt;/p&gt;
&lt;p&gt;3）swap&lt;/p&gt;
&lt;p&gt;a.si列表示由磁盘调入内存 ，也就是内存进入内存交换区的数量；&lt;/p&gt;
&lt;p&gt;b.so 列表示由内存调入磁盘 ，也就是内存交换区进入内存的数量&lt;/p&gt;
&lt;p&gt;c.一般情况下，si、so的值都为0，如果si、so的值长期不为0，则表示系统内存不足，需要考虑是否增加系统内存 。&lt;/p&gt;
&lt;p&gt;4）IO&lt;/p&gt;
&lt;p&gt;a.bi列表示从块设备读入的数据总量（即读磁盘，单位KB/秒）&lt;/p&gt;
&lt;p&gt;b.bo列表示写入到块设备的数据总量（即写磁盘，单位KB/秒）&lt;br/&gt;这里设置的bi+bo参考值为1000，如果超过1000，而且wa值比较大，则表示系统磁盘IO性能瓶颈。&lt;/p&gt;
&lt;p&gt;5）system&lt;/p&gt;
&lt;p&gt;a.in列表示在某一时间间隔中观察到的每秒设备中断数；&lt;/p&gt;
&lt;p&gt;b.cs列表示每秒产生的上下文切换次数。&lt;br/&gt;上面这两个值越大，会看到内核消耗的CPU时间就越多。&lt;/p&gt;
&lt;p&gt;6）CPU&lt;/p&gt;
&lt;p&gt;a.us列显示了用户进程消耗CPU的时间百分比。us的值比较高时，说明用户进程消耗的CPU时间多，如果长期大于50%，需要考虑优化程序啥的。&lt;/p&gt;
&lt;p&gt;b.sy列显示了内核进程消耗CPU的时间百分比。sy的值比较高时，就说明内核消耗的CPU时间多；如果us+sy超过80%，就说明CPU的资源存在不足。&lt;/p&gt;
&lt;p&gt;c.id列显示了CPU处在空闲状态的时间百分比；&lt;/p&gt;
&lt;p&gt;d.wa列表示IO等待所占的CPU时间百分比。wa值越高，说明IO等待越严重。如果wa值超过20%，说明IO等待严重 。&lt;/p&gt;
&lt;p&gt;e.st列一般不关注，虚拟机占用的时间百分比。 （Linux 2.6.11）&lt;/p&gt;
&lt;h3 id=&quot;四磁盘io性能监测-iostat&quot;&gt;四、磁盘io性能监测: iostat&lt;/h3&gt;
&lt;p&gt;iostat 吞吐量&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# iostat -x   1

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
                    24.13    0.00    8.22       2.50         0.00   65.15

Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
sda              17.51   107.98    9.98   14.52   250.06   980.07    50.20     3.23  131.70   2.53   6.19&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数 -d 表示，显示设备（磁盘）使用状态；&lt;/p&gt;
&lt;p&gt;-k 某些使用block为单位的列强制使用Kilobytes为单位；&lt;/p&gt;
&lt;p&gt;1 10表示，数据显示每隔1秒刷新一次，共显示10次。&lt;/p&gt;
&lt;p&gt;tin 显示了系统为所有 tty 读取的字符总数。&lt;/p&gt;
&lt;p&gt;tout 显示了系统为所有 tty 写入的字符总数。&lt;/p&gt;
&lt;p&gt;% user 显示了在用户级（应用程序）执行时产生的 CPU 使用率百分比。&lt;/p&gt;
&lt;p&gt;% sys 显示了在系统级（内核）执行时产生的 CPU 使用率百分比。&lt;/p&gt;
&lt;p&gt;% idle 显示了在 CPU 空闲并且系统没有未完成的磁盘 I/O 请求时的时间百分比。&lt;/p&gt;
&lt;p&gt;% iowait 显示了 CPU 空闲期间系统有未完成的磁盘 I/O 请求时的时间百分比。&lt;/p&gt;
&lt;p&gt;rrqm/s: 每秒进行 merge 的读操作数目.即 delta(rmerge)/s&lt;/p&gt;
&lt;p&gt;wrqm/s: 每秒进行 merge 的写操作数目.即 delta(wmerge)/s&lt;/p&gt;
&lt;p&gt;r/s: 每秒完成的读 I/O 设备次数.即 delta(rio)/s&lt;/p&gt;
&lt;p&gt;w/s : 每秒完成的写 I/O 设备次数.即 delta(wio)/s&lt;/p&gt;
&lt;p&gt;rsec/s: 每秒读扇区数.即 delta(rsect)/s&lt;/p&gt;
&lt;p&gt;wsec/s: 每秒写扇区数.即 delta(wsect)/s&lt;/p&gt;
&lt;p&gt;rkB/s: 每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节.(需要计算)&lt;/p&gt;
&lt;p&gt;wkB/s: 每秒写K字节数.是 wsect/s 的一半.(需要计算)&lt;/p&gt;
&lt;p&gt;avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区).delta(rsect+wsect)/delta(rio+wio)&lt;/p&gt;
&lt;p&gt;avgqu-sz : 平均I/O队列长度.即 delta(aveq)/s/1000 (因为aveq的单位为毫秒).&lt;/p&gt;
&lt;p&gt;await: 平均每次设备I/O操作的等待时间 (毫秒).即 delta(ruse+wuse)/delta(rio+wio)&lt;/p&gt;
&lt;p&gt;svctm: 平均每次设备I/O操作的服务时间 (毫秒).即 delta(use)/delta(rio+wio)&lt;/p&gt;
&lt;p&gt;%util : 一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的.即 delta(use)/s/1000 (因为use的单位为毫秒)&lt;/p&gt;
&lt;p&gt;如果 %util 接近 100%,说明产生的I/O请求太多,I/O系统已经满负荷,该磁盘可能存在瓶颈.&lt;/p&gt;
&lt;p&gt;idle小于70% IO压力就较大了,一般读取速度有较多的wait. 同时可以结合vmstat 查看查看b参数(等待资源的进程数) 和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)&lt;/p&gt;
&lt;p&gt;另外 await 的参数也要多和 svctm 来参考.差的过高就一定有 IO 的问题.&lt;br/&gt;avgqu-sz 也是个做 IO&lt;/p&gt;
&lt;p&gt;调优时需要注意的地方,这个就是直接每次操作的数据的大小,如果次数多,但数据拿的小的话,其实 IO 也会很小.如果数据拿的大,才IO 的数据会高.也可以通过 avgqu-sz × ( r/s or w/s ) = rsec/s or wsec/s.也就是讲,读定速度是这个来决定的.&lt;/p&gt;
&lt;p&gt;Linux系统出现了性能问题，一般我们可以通过top、iostat、free、vmstat等命令来查看初步定位问题。其中iostat可以给我们提供丰富的IO状态数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 基本使用&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$iostat -d -k 1 10&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数 -d 表示，显示设备（磁盘）使用状态；-k某些使用block为单位的列强制使用Kilobytes为单位；1 10表示，数据显示每隔1秒刷新一次，共显示10次。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$iostat -d -k 1 10

Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtn

sda 39.29 21.14 1.44 441339807 29990031

sda1 0.00 0.00 0.00 1623 523

sda2 1.32 1.43 4.54 29834273 94827104

sda3 6.30 0.85 24.95 17816289 520725244

sda5 0.85 0.46 3.40 9543503 70970116

sda6 0.00 0.00 0.00 550 236

sda7 0.00 0.00 0.00 406 0

sda8 0.00 0.00 0.00 406 0

sda9 0.00 0.00 0.00 406 0

sda10 60.68 18.35 71.43 383002263 1490928140

Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtn

sda 327.55 5159.18 102.04 5056 100 sda1 0.00 0.00 0.00 0 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;tps：该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。“一次传输”意思是“一次I/O请求”。多个逻辑请求可能会被合并为“一次I/O请求”。“一次传输”请求的大小是未知的。&lt;/p&gt;
&lt;p&gt;kB_read/s：每秒从设备（drive expressed）读取的数据量；&lt;/p&gt;
&lt;p&gt;kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；&lt;/p&gt;
&lt;p&gt;kB_read：读取的总数据量；&lt;/p&gt;
&lt;p&gt;kB_wrtn：写入的总数量数据量；&lt;/p&gt;
&lt;p&gt;这些单位都为Kilobytes。&lt;/p&gt;
&lt;p&gt;上面的例子中，我们可以看到磁盘sda以及它的各个分区的统计数据，当时统计的磁盘总TPS是39.29，下面是各个分区的TPS。（因为是瞬间值，所以总TPS并不严格等于各个分区TPS的总和）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.-x 参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用-x参数我们可以获得更多统计信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;iostat -d -x -k 1 10

Device: rrqm/s wrqm/s r/s w/s rsec/s wsec/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util

sda 1.56 28.31 7.80 31.49 42.51 2.92 21.26 1.46 1.16 0.03 0.79 2.62 10.28

Device: rrqm/s wrqm/s r/s w/s rsec/s wsec/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util

sda 2.00 20.00 381.00 7.00 12320.00 216.00 6160.00 108.00 32.31 1.75 4.50 2.17 84.20&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rrqm/s：每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）；wrqm/s：每秒这个设备相关的写入请求有多少被Merge了。&lt;/p&gt;
&lt;p&gt;rsec/s：每秒读取的扇区数；wsec/：每秒写入的扇区数。r/s：The number of read requests that were issued to the device per second；w/s：The number of write requests that were issued to the device per second；&lt;/p&gt;
&lt;p&gt;await：每一个IO请求的处理的平均时间（单位是微秒毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。&lt;/p&gt;
&lt;p&gt;%util：在统计时间内所有处理IO时间，除以总共统计时间。例如，如果统计间隔1秒，该设备有0.8秒在处理IO，而0.2秒闲置，那么该设备的%util = 0.8/1 = 80%，所以该参数暗示了设备的繁忙程度。一般地，如果该参数是100%表示设备已经接近满负荷运行了 （当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.-c 参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;iostat还可以用来获取cpu部分状态值：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;iostat -c 1 10

avg-cpu: %user %nice %sys %iowait %idle 1.98 0.00 0.35 11.45 86.22

avg-cpu: %user %nice %sys %iowait %idle 1.62 0.00 0.25 34.46 63.67&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.常见用法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$iostat -d -k 1 10 
#查看TPS和吞吐量信息 iostat -d -x -k 1 10 #查看设备使用率（%util）、响应时间（await） 
iostat -c 1 10 #查看cpu状态&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5.实例分析&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$iostat -d -k 1 |grep sda10

Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtn

sda10 60.72 18.95 71.53 395637647 1493241908

sda10 299.02 4266.67 129.41 4352 132

sda10 483.84 4589.90 4117.17 4544 4076

sda10 218.00 3360.00 100.00 3360 100

sda10 546.00 8784.00 124.00 8784 124

sda10 827.00 13232.00 136.00 13232 136&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面看到，磁盘每秒传输次数平均约400；每秒磁盘读取约5MB，写入约1MB。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;iostat -d -x -k 1

Device: rrqm/s wrqm/s r/s w/s rsec/s wsec/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util 

sda 1.56 28.31 7.84 31.50 43.65 3.16 21.82 1.58 1.19 0.03 0.80 2.61 10.29

sda 1.98 24.75 419.80 6.93 13465.35 253.47 6732.67 126.73 32.15 2.00 4.70 2.00 85.25

sda 3.06 41.84 444.90 54.08 14204.08 2048.98 7102.04 1024.49 32.57 2.10 4.21 1.85 92.24&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到磁盘的平均响应时间&amp;lt;5ms，磁盘使用率&amp;gt;80。磁盘响应正常，但是已经很繁忙了。&lt;/p&gt;
&lt;h3 id=&quot;五网络监测-lsof-请参考man手册&quot;&gt;五、网络监测： lsof （请参考MAN手册）&lt;/h3&gt;
&lt;p&gt;由于公司的程序要在一个端口监听，所以要监测该端口的状态信息。这里用22端口讲解&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@WebServer ~]# lsof -i:22
COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME
sshd 11664 root 3u IPv6 109820 TCP 192.168.0.157:22-&amp;gt;192.168.0.99:1174 (ESTABLISHED)
sshd 24927 root 3u IPv6 62643 TCP *:22 (LISTEN)&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 31 Mar 2019 03:58:00 +0000</pubDate>
<dc:creator>FlinkMe</dc:creator>
<og:description>一、系统整体性能监测工具：uptime uptime命令用于查看服务器运行了多长时间以及有多少个用户登录，快速获知服务器运行的负载情况。 load average，显示了最近1，5，15分钟的负荷情况</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bigdata1024/p/10630690.html</dc:identifier>
</item>
<item>
<title>.NET 基金会完成第一次全面改选 - 张善友</title>
<link>http://www.cnblogs.com/shanyou/p/10630588.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanyou/p/10630588.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/510/201903/510-20190331112054709-650077623.png&quot;&gt;&lt;img width=&quot;244&quot; height=&quot;83&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/510/201903/510-20190331112055093-1908616433.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET基金会是一个独立的组织，支持.NET社区和开源，旨在拓宽和加强.NET生态系统和社区。这可以通过多种方式完成，包括项目指导，指导，法律和营销帮助，技术和财务支持设置等，2014年微软组织成立.NET基金会，微软在成为主要的开源参与者的道路上又前进了一步。 2014年以来已经有众多知名公司加入.NET基金会, 仅在平台项目中，.NET平台上有87％贡献者其实不在Microsoft工作。随着这种令人难以置信的增长，基金会表示是时候将.NET Foundation提升到一个新的水平。&lt;/p&gt;
&lt;p&gt;2014年 .NET基金会的创始成员中有六位创始人，均非微软公司员工，随着微软的收购动作，Miguel 也成了微软员工，Migel一直在努力让.NET基金会独立于微软。.NET基金会改选结果参见&lt;a title=&quot;https://dotnetfoundation.org/blog/2019/03/28&quot; href=&quot;https://dotnetfoundation.org/blog/2019/03/28&quot;&gt;https://dotnetfoundation.org/blog/2019/03/28&lt;/a&gt;，微软的Scott Hunter和&lt;a href=&quot;https://twitter.com/migueldeicaza&quot;&gt;migueldeicaza&lt;/a&gt;都没有竞选董事会，董事会中的只有一个微软员工&lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/beth-massi.html&quot;&gt;Beth Massi&lt;/a&gt;，六位&lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/iris-classon.html&quot;&gt;新任&lt;/a&gt;董事加入：&lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/iris-classon.html&quot;&gt;Iris Classon&lt;/a&gt;， &lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/ben-adams.html&quot;&gt;Ben Adams&lt;/a&gt;， &lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/jon-skeet.html&quot;&gt;Jon Skeet&lt;/a&gt;， &lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/phil-haack.html&quot;&gt;Phil Haack&lt;/a&gt;， &lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/sara-chipps.html&quot;&gt;Sara Chipps&lt;/a&gt; 和&lt;a href=&quot;https://election.dotnetfoundation.org/campaign-2019/oren-novotny.html&quot;&gt;Oren Novotny&lt;/a&gt;，仔细看了一下这些新加入成员的资料，多为MVP，具备社区影响力的同学。将.NET基金会变成一个更加多样化和成员驱动的组织，这次改选很好的贯彻了Miguel 在2018.12 发布的 &lt;a title=&quot;https://tirania.org/blog/archive/2018/Dec-04.html&quot; href=&quot;https://tirania.org/blog/archive/2018/Dec-04.html&quot;&gt;https://tirania.org/blog/archive/2018/Dec-04.html&lt;/a&gt; 。微软把.NET 的发展真正交给社区，为了让OSS真正蓬勃发展，它需要从微软的阴影中走出来，成为一个真正的社区驱动的努力。虽然我很欣赏微软对开源软件的巨大贡献，但我们都正在努力帮助.NET OSS社区独立发展，发展成像Java那样蓬勃发展的社区。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 03:15:00 +0000</pubDate>
<dc:creator>张善友</dc:creator>
<og:description>.NET基金会是一个独立的组织，支持.NET社区和开源，旨在拓宽和加强.NET生态系统和社区。这可以通过多种方式完成，包括项目指导，指导，法律和营销帮助，技术和财务支持设置等，2014年微软组织成立.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shanyou/p/10630588.html</dc:identifier>
</item>
<item>
<title>Metabase 从 H2 迁移到 MySQL 踩坑指南 - Dy1an</title>
<link>http://www.cnblogs.com/Dy1an/p/10623086.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dy1an/p/10623086.html</guid>
<description>&lt;p class=&quot;my-title&quot;&gt;写在前面的话&lt;/p&gt;

&lt;p&gt;首先如果你看到了这篇文章，可能你就已经指定 Metabase 是啥了，我这里还是简单的做个说明：&lt;/p&gt;
&lt;p&gt;Metabase is the easy， open source way for everyone in your company to ask questions and learn from data。&lt;/p&gt;
&lt;p&gt;官网是这样描述的，这是一款 BI 开源工具，能让你的数据以漂亮的图表显示出来，虽然我觉得并不是很好看，但是还是叫漂亮吧。同类的产品还有 Superset，Redash 等等。&lt;/p&gt;
&lt;p&gt;感兴趣的可以看看官网：&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.metabase.com/&quot;&gt;https://www.metabase.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也可以研究下 GITHUB：&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/metabase/metabase&quot;&gt;https://github.com/metabase/metabase&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p class=&quot;my-title&quot;&gt;数据迁移&lt;/p&gt;

&lt;p&gt;故事是酱婶儿滴，公司准备搞一个这样的系统，然后交给就让我搭建了这几个出来做横向比较。当然，我就是把他运行起来，至于配置都丢给了数据组的老哥。然后这个环境就慢慢的配置越来越多。最后一拍脑门就选它了。于是不可能重新配置啊，这样就得把项目迁移到云上。&lt;/p&gt;
&lt;p&gt;问题出现了，因为之前我是以 demo 形式搭建丢给他们的，所有数据库这些啥都是默认是，Metabase 的默认是 H2 数据库。在搞这个之前我根本不知道这是啥。然后网上找了很多导出数据的方式都特么扯皮。各种报错或者根本不能用。&lt;/p&gt;
&lt;p&gt;问题出在哪里呢？就处在将数据导出到 MySQL 的时候，报错：&lt;strong&gt;&lt;span&gt;Data too long xxxx&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然说到这里，那就先回顾一下我的迁移过程：&lt;/p&gt;
&lt;p&gt;【1】首先我们先停止在运行 metabase 服务，我是直接 jar 形式运行的，kill 掉就行。&lt;/p&gt;
&lt;p&gt;【2】此时我们可以看到默认运行的时候，在 jar 的目录下存在两个数据库的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979767/201903/979767-20190329173014999-405154003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;上面两个 db 文件就是用到 H2 数据库了，&lt;/span&gt;&lt;span&gt;我们把这 3 个文件移动到其他目录备份，相当重要，不然挂了你就哭吧！！！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;【3】此时我们新建一个 metabase 的库（我的是 MySQL 5.7）:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;DATABASE&lt;/span&gt; metabase &lt;span&gt;default&lt;/span&gt;&lt;span&gt; charset utf8 COLLATE utf8_general_ci;
&lt;/span&gt;&lt;span&gt;grant&lt;/span&gt; &lt;span&gt;all&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; metabase.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;metabase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; identified &lt;span&gt;by&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;【4】配置好连接数据库的环境变量，由于我们是 jar 启动的，这个服务会默认去先读取环境变量（在 &lt;strong&gt;&lt;span&gt;/etc/profile&lt;/span&gt;&lt;/strong&gt; 里面追加）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
export MB_DB_TYPE=&lt;span&gt;mysql
export MB_DB_DBNAME&lt;/span&gt;=&lt;span&gt;metabase
export MB_DB_PORT&lt;/span&gt;=3306&lt;span&gt;
export MB_DB_USER&lt;/span&gt;=&lt;span&gt;metabase
export MB_DB_PASS&lt;/span&gt;=&lt;span&gt;123456
export MB_DB_HOST&lt;/span&gt;=192.168.10.204&lt;span&gt;
export MB_JETTY_PORT&lt;/span&gt;=8000&lt;span&gt;
export MB_JETTY_HOST&lt;/span&gt;=0.0.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我这里指定了数据库连接，已经服务启动以后监听的 IP 和端口，当然，数据库那一部分可以简写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export MB_DB_CONNECTION_URI=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql://192.168.10.204:3306/metabase?user=metabase&amp;amp;password=123456&amp;amp;useSSL=false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写成 jdbc 的样式，这样我们可以指定 SSL 为 false，否则日志有点恶心。&lt;/p&gt;
&lt;p&gt;记得让新增的环境变量生效：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
source /etc/profile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;【5】生效之后，我们就按照网上的方法开始同步，这也是问题开始的地方：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/opt/jdk1.8.0_45/bin/java -jar metabase.jar load-&lt;span&gt;from&lt;/span&gt;-h2 ./metabase.db
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们 jdk 是没有配置环境变量的，所有用的是绝对路径，你们可以根据自己修改。一切就这样往美滋滋的方向发展，MySQL 里面也已经开始创建新的表了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979767/201903/979767-20190329174539331-739131315.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正当一切过的美滋滋，准备搞完就休息的时候，不幸的事情发生了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979767/201903/979767-20190329174819433-1798871882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了方便需要的兄弟更容易检索这篇文章，我这里把错误贴出来：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Transfering 2224&lt;span&gt; instances of FieldValues...........[OK]
Transfering &lt;/span&gt;721&lt;span&gt; instances of Revision......BatchUpdateException:
 Message: Data truncation: Data too long &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; column &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; at row 1&lt;span&gt;
 SQLState: &lt;/span&gt;22001&lt;span&gt;
 Error Code: &lt;/span&gt;1406&lt;span&gt;
java.sql.BatchUpdateException: Data truncation: Data too long &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; column &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; at row 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提示数据过长，字段长度不够，导致数据传输报异常，传输终止。于是我在这个问题上面卡了至少两个小时，各种搜索文档，找 issue，都没有解决。可能是我英语太烂。&lt;/p&gt;
&lt;p&gt;最后还是回归到报错本身，既然长度不够，那我加长度呗，但是我下次同步会不会又把我的表干掉重新建立呢？最终抱着试一试的态度，我去修改表的字段。&lt;/p&gt;
&lt;p&gt;问题又来了，那这报错的表是哪一个呢？我们只知道字段啊。给大家推荐一个方法，遇到这种问题，我们完全可以把表结构导出来，然后去搜索指定的列。&lt;/p&gt;
&lt;p&gt;最终，在 revision 表中找到了这个字段，此时再看报错：Transfering 721 instances of &lt;strong&gt;&lt;span&gt;Revision&lt;/span&gt;&lt;/strong&gt;......BatchUpdateException:，这让我们更加确定就是这个字段。&lt;/p&gt;
&lt;p&gt;一看他的类型 text，于是我们将它改成 &lt;strong&gt;&lt;span&gt;longtext。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再次执行之前的命令同步，后面还会有几个字段出现类似的报错，类似 &lt;strong&gt;&lt;span&gt;report_card&lt;/span&gt;&lt;/strong&gt; 这些表，只需要再度修改为 &lt;strong&gt;&lt;span&gt;longtext&lt;/span&gt;&lt;/strong&gt; 类型即可。这里就不再赘述。&lt;/p&gt;

&lt;p&gt;【6】同步完成以后只需要启动服务即可使用以 MySQL 作为数据库的 Metabase 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/979767/201903/979767-20190331105428961-1577233020.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里附带一个我的 jar 服务启动脚本，可以方便我们管理这种单个服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 作者：Dylan &amp;lt;1214966109@qq.com&amp;gt;&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 时间：2018-03-29&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 用途：Metabase 启动管理&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; [ -f /etc/init.d/&lt;span&gt;functions ]; then 
    . &lt;/span&gt;/etc/init.d/&lt;span&gt;functions
fi


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 定义变量&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;
SERVICE_NAME=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;metabase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
SERVICE_PACKAGE&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME}.jar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
SERVICE_PATH&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/opt/METABASE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
LOG_PATH&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_PATH}/logs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
JAVA_CMD&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/opt/jdk1.8.0_45/bin/java&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 判断日志目录&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; [[ ! -&lt;span&gt;d ${LOG_PATH} ]]; then
    mkdir &lt;/span&gt;-&lt;span&gt;p ${LOG_PATH}
fi


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 定义命令&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;
&lt;span&gt;function START_COMMAND()
{
    ${JAVA_CMD} &lt;/span&gt;-Duser.timezone=Asia/Shanghai -Xms4g -Xmx4g -jar ${SERVICE_PATH}/${SERVICE_PACKAGE} &amp;gt;&amp;gt; ${LOG_PATH}/${SERVICE_NAME}.log &amp;amp;
    &lt;span&gt;if&lt;/span&gt; [[ $? -&lt;span&gt;eq 0 ]]; then
        action &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME} start successed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /bin/&lt;span&gt;true
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        action &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME} start failed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /bin/&lt;span&gt;false
    fi
}

function STOP_COMMAND()
{
    SERVICE_PID&lt;/span&gt;=`ps -ef | grep &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_PACKAGE}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; | grep -v &lt;span&gt;'&lt;/span&gt;&lt;span&gt;grep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; | awk &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ ${SERVICE_PID} == &lt;span&gt;''&lt;/span&gt;&lt;span&gt; ]]; then
        action &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME} is not running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /bin/&lt;span&gt;false
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        kill &lt;/span&gt;-9 ${SERVICE_PID} &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
        &lt;span&gt;if&lt;/span&gt; [[ $? -&lt;span&gt;eq 0 ]]; then
            action &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME} stop successed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /bin/&lt;span&gt;true
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            action &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME} stop failed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /bin/&lt;span&gt;false
        fi
    fi
}

function STATUS_COMMAND()
{
    SERVICE_PID&lt;/span&gt;=`ps -ef | grep &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_PACKAGE}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; | grep -v &lt;span&gt;'&lt;/span&gt;&lt;span&gt;grep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; | awk &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ ${SERVICE_PID} == &lt;span&gt;''&lt;/span&gt;&lt;span&gt; ]]; then
        action &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME} is not running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /bin/&lt;span&gt;false
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        action &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${SERVICE_NAME} is running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /bin/&lt;span&gt;true
    fi
}


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 定义命令&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;################################################################&lt;/span&gt;
case &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt;
    start)
        START_COMMAND
        ;;
    stop)
        STOP_COMMAND
        ;;
    restart&lt;/span&gt;|&lt;span&gt;reload)
        STOP_COMMAND
        START_COMMAND
        ;;
    status)
        STATUS_COMMAND
        ;;
    &lt;/span&gt;*&lt;span&gt;)
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Usage: $0 {start|stop|restart|status|reload}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ;;
esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&quot;my-title&quot;&gt;小结&lt;/p&gt;

&lt;p&gt;H2 迁移到 MySQL 出现问题可能大多都是字段的类型导致迁移失败，另外我们在迁移的时候也可能会出现：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;java.lang.IllegalArgumentException: No matching clause: :h2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这样的报错，这说明是环境变量的问题。&lt;/p&gt;
&lt;p&gt;如果还有其它迁移问题，也可以留言或者加我 QQ 大家讨论一下，如果你觉得这个还 OK，&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; 走一波~&lt;/p&gt;
&lt;p&gt;另外，如果你喜欢我这博客园主题，在我博客首页置顶文章有相关说明~&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/Dy1an/p/10490430.html&quot;&gt;https://www.cnblogs.com/Dy1an/p/10490430.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 31 Mar 2019 03:06:00 +0000</pubDate>
<dc:creator>Dy1an</dc:creator>
<og:description>写在前面的话 首先如果你看到了这篇文章，可能你就已经指定 Metabase 是啥了，我这里还是简单的做个说明： Metabase is the easy， open source way for ev</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dy1an/p/10623086.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——73.抛出合乎于抽象的异常 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/10630239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/10630239.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;书中的源代码地址：https://github.com/jbloch/effective-java-3e-source-code&lt;br/&gt;注意，书中的有些代码里方法是基于Java 9 API中的，所以JDK 最好下载 JDK 9以上的版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4366140-8966e457a14bc8b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当一个方法抛出一个与它所执行的任务没有明显关联的异常时，这是令人不安的。在方法传播由低层（lower-level）抽象抛出的异常时，会经常发生这种情况。它不仅令人不安，而且用实现细节“污染”了上层的API。如果上层（higher layer）的实现在以后的版本中发生变化，那么它抛出的异常也会发生变化，可能会破坏现有的客户端程序。&lt;/p&gt;
&lt;p&gt;为了避免这个问题，上层（higher layers）应该捕获低层（ lower-level ）的异常，并在它们的位置抛出可以用上层级别（higher-level ）抽象来解释的异常。这个习语被称为异常转译:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Exception Translation
try {
    ... // Use lower-level abstraction to do our bidding
} catch (LowerLevelException e) {
    throw new HigherLevelException(...);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下的异常转转译的示例是来自AbstractSequentialList类，该类是List接口的骨架实现（skeletal implementation ）（条目 20）。 在此示例中，异常转译由&lt;code&gt;List &amp;lt;E&amp;gt;&lt;/code&gt;接口中的get方法规范强制要求的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * Returns the element at the specified position in this list.
 * @throws IndexOutOfBoundsException if the index is out of range
 *         ({@code index &amp;lt;  0 || index &amp;gt;= size()}).
 */
public E get(int index) {
    ListIterator&amp;lt;E&amp;gt; i = listIterator(index);
    try {
        return i.next();
    } catch (NoSuchElementException e) {
        throw new IndexOutOfBoundsException(&quot;Index: &quot; + index);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果较低级别的异常可能有助于调试导致较高级别异常的问题，则需要一种称为异常链（exception chaining ）的特殊异常转译形式。低层异常(原因)传递给高层异常，高层异常提供一个访问器方法(Throwable的getCause方法)来检索低层异常:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Exception Chaining
try {
    ... // Use lower-level abstraction to do our bidding
} catch (LowerLevelException cause) {
    throw new HigherLevelException(cause);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;高级异常的构造方法将原因传递给一个感知链（chaining-aware）的父类构造方法，因此它最终被传递给Throwable的一个感知链的构造方法，比如Throwable(Throwable):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Exception with chaining-aware constructor
class HigherLevelException extends Exception {
    HigherLevelException(Throwable cause) {
        super(cause);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大多数标准异常都有感知链的构造方法。对于没有这样做的异常，可以使用Throwable的initCause方法设置原因。异常链接不仅允许你以编程方式访问原因(使用getCause)，而且还将原因的堆栈跟踪集成到更高级别异常的堆栈跟踪中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虽然异常转译优于低层异常的无意识传播，但不应过度使用&lt;/strong&gt;。 在可能的情况下，处理较低层异常的最佳方法是通过确保较低级别的方法成功执行来避免异常。 有时可以通过检查更高级别方法的参数的有效性，然后再将它们传递到较低层来完成此操作。&lt;/p&gt;
&lt;p&gt;如果不可能防止来自较低层的异常，那么接下来最好的事情就是让较高层静默地解决这些异常，从而使较高级别方法的调用者与较低级别的问题隔离开来。 在这些情况下，使用某些适当的日志记录工具（如java.util.logging）记录异常可能是适当的。 这允许程序员调查问题，同时把使用者和客户端代码隔离开。&lt;/p&gt;
&lt;p&gt;总之，如果无法阻止或处理较低层的异常，那么使用异常转译，除非较低级别的方法恰好保证其所有异常都适用于较高级别。 异常链接提供了两全其美的优势：它允许抛出适当的更高级别异常，同时可以捕获失败分析的根本原因（条目 75）。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 01:24:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<og:description>Tips 书中的源代码地址：https://github.com/jbloch/effective java 3e source code 注意，书中的有些代码里方法是基于Java 9 API中的，所</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/10630239.html</dc:identifier>
</item>
<item>
<title>Unity3D热更新之LuaFramework篇[02]--用Lua创建自己的面板 - 子非鱼`</title>
<link>http://www.cnblogs.com/imteach/p/10630099.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imteach/p/10630099.html</guid>
<description>&lt;blockquote readability=&quot;7.375&quot;&gt;
&lt;p&gt;在上篇文章 &lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;https://www.cnblogs.com/imteach/p/10604891.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Unity3D热更新之LuaFramework篇[01]--从零开始&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; 中，我们了解了怎么获得一个可用的LuaFramework框架。&lt;/p&gt;
&lt;p&gt;本篇将我会先介绍一下如何配置Lua开发环境，然后分析在此框架中加载面板的流程，以及如何创建自己的面板。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1、配置Lua开发环境&lt;/h2&gt;
&lt;blockquote readability=&quot;25.305439330544&quot;&gt;
&lt;p&gt;有一点要说明的是，使用此种方式（ToLua+LuaFramework）做热更新，则意味着你的大部分逻辑都需要改用Lua语言来编写。&lt;/p&gt;
&lt;p&gt;因此，开发前得先得配置好Lua开发环境。毕竟，工欲善其事，必先利其器。&lt;/p&gt;
&lt;p&gt;环境配置大概分以下三个步骤：&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;strong&gt;安装IntelliJ IDEA Community Edition 2018.2.4 x64&lt;/strong&gt;&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;官网地址 http://www.jetbrains.com/idea/download/#section=windows&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;直接下载即可，下载 Community 版本，也就是社区版，免费的&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;strong&gt;下载Lua For Windows&lt;/strong&gt;&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;https://github.com/rjpcomputing/luaforwindows/releases&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;下载最新的就行，然后安装。&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;strong&gt;安装emmylua插件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;安装插件有&lt;span lang=&quot;EN-US&quot;&gt;2种方法，可以直接搜插件库安装，或者下载好插件后本地加载。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以上安装步骤均来自：&lt;span&gt;&lt;a href=&quot;https://home.cnblogs.com/u/sanyejun/&quot;&gt;&lt;span&gt;三页菌&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; 的文章 &lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/sanyejun/p/9673198.html&quot;&gt;&lt;span&gt;最好用的lua编辑器--------emmylua使用汇总&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;其文章极其详细的介绍了如何搭建并配置一个好用的Lua开发环境，请自行参考。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 align=&quot;left&quot;&gt;&lt;span&gt;2、Lua中是怎么加载一个面板的&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;75&quot;&gt;
&lt;p&gt;在上一篇文章最后，我们运行框架，最终显示了一个Lua脚本动态创建的面板，即PromptPanel，如图2-1所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331035751098-52243231.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-1&lt;/p&gt;
&lt;p&gt;翻看框架的目录结构，会在Assets/LuaFrame/Examples/Builds/Prompt目录找到两个预制体，PromptPanel和PromptItem，也就是这个面板的主体和兽人头像，如图2-2所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331040208444-943141987.png&quot; alt=&quot;&quot; width=&quot;632&quot; height=&quot;374&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-2&lt;/p&gt;
&lt;p&gt;用上一节中安装的IntelliJ IDEA打开工程目录，在Controller目录和View目录会找到与PromptPanel密切相关的两个文件PromptCtrl.lua、PromptPanel.lua，如图2-3所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331044211576-560666993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-3&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;由目录名称可知，此框架采用了一种MVC结构，用以对代码功能做区分。XxxPanel负责页面显示逻辑，XxxCtrl负责事件处理，示例没有给出明显的Model层，读者可以根据自身项目酌情添加。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;继续查看框架代码，会在Logic/Game.lua中找到游戏的入口：Game.OnInitOK函数，见图2-4。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331045846972-1477370174.png&quot; alt=&quot;&quot; width=&quot;948&quot; height=&quot;497&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-4&lt;/p&gt;
&lt;p&gt; 在这个函数中，有3个重要逻辑：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、初始化View&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、初始化Ctrl&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、启动Ctrl&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt; 1、初始化View&lt;/h3&gt;
&lt;p&gt;初始化View就是调用InitViewPanels这个函数，InitViewPanels函数用于加载View目录下定义的XxxPanel，在Game.lua的17行中可以看到定义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Game.InitViewPanels()
   &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;, #PanelNames &lt;span&gt;do&lt;/span&gt;
      &lt;span&gt;require&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;View/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;..&lt;span&gt;tostring&lt;/span&gt;&lt;span&gt;(PanelNames[i]))
   &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;PanelName则是在LuaFramwwork/Lua/Common/define.lua的第7行中定义的，对应面板的名称。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
PanelNames =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PromptPanel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,    
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MessagePanel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2、初始化Ctrl&lt;/h3&gt;
&lt;p&gt;初始化Ctrl是指CtrlManager.Init();这句，可以在LuaFramwwork/Lua/Logic/CtrlManager.lua第9行中看到相关定义。这个函数中通过调用New函数创建了Ctrl的实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function CtrlManager.Init()
    logWarn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CtrlManager.Init-----&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    ctrlList[CtrlNames.Prompt] &lt;/span&gt;=&lt;span&gt; PromptCtrl.New();
    ctrlList[CtrlNames.Message] &lt;/span&gt;=&lt;span&gt; MessageCtrl.New();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; 3、启动Ctrl&lt;/h3&gt;
&lt;p&gt;启动就是根据CtrlNames找到对应的Ctrl的实例，然后调用其Awake方法，见代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    local ctrl =&lt;span&gt; CtrlManager.GetCtrl(CtrlNames.Prompt);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ctrl ~= nil and AppConst.ExampleMode == &lt;span&gt;1&lt;/span&gt;&lt;span&gt; then
        ctrl:Awake();
    end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上都是推测，&lt;/p&gt;
&lt;p&gt;为了验证猜测的对不对，我把&lt;strong&gt;CtrlManager.GetCtrl(CtrlNames.Prompt)&lt;/strong&gt;这一句改为&lt;strong&gt;CtrlManager.GetCtrl(CtrlNames.Message)&lt;/strong&gt;，如果这次加载出来的是MessagePanel，则说明上述过程推断正确。&lt;/p&gt;
&lt;p&gt;....&lt;/p&gt;
&lt;p&gt;改完后运行，发现加载的还是PromptPanel，难道确实是找错地方了？&lt;/p&gt;
&lt;p&gt;别急，这里还涉及另一个概念。&lt;/p&gt;
&lt;p&gt; 在热更框架中，程序运行的并不是我们在LuaFramework/lua目录下编写的代码，而是在Assets/StreamingAssets目录下的打包后的代码，见图2-5。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331052651556-2009047779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-5 &lt;/p&gt;
&lt;p&gt;那么有什么办法让我们刚刚改的代码生效呢？&lt;/p&gt;
&lt;p&gt;思路有两个：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;将们的写的代码打包到StreamAssets中；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;让程序直接运行打包前的代码；&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;思路1的操作方法是：执行LuaFramework菜单下的Build XXX Resources菜单（见图2-6），因为我现在的程序是运行在Windows平台，所以选择&lt;strong&gt;Build Windows Resource&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331053141190-704078087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-6&lt;/p&gt;
&lt;p&gt;点击菜单，等待重新打包完成。打包结束后，能看到整个StreamingAssets目录中的内容都更新了，在里边可以找到message和prompt相关的资源，见图2-7。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331053454242-931539476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-7&lt;/p&gt;
&lt;p&gt;重新运行后，得到了想的结果，程序直接加载了MessagePanel面板，见图2-8。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331053633165-1086433930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-8&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;由此印证我们对整个面板流程的加载的推测分析&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;关于思路2让程序直接运行打包前的代码，只需要关闭Lua的AssetBundle模式就好了。&lt;/p&gt;
&lt;p&gt;找到LuaFramework/Scripts/ConstDefine/AppConst.cs文件，将LuaBundleMode = true;改为&lt;/p&gt;
&lt;p&gt;LuaBundleMode = false;即可，见图2-8，图中是改过之后的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331054326998-876821832.png&quot; alt=&quot;&quot; width=&quot;748&quot; height=&quot;342&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-8&lt;/p&gt;
&lt;p&gt; LuaBundleMode 改为false之后，Lua代码修改后就无需重新Build xxx Resources就能直接看到效果。&lt;/p&gt;
&lt;p&gt;尽管思路1和思路2是二选一即可的，但为方便后边的示例，这里要统一修改为false。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;3、如何创建自己的面板&lt;/h2&gt;
&lt;blockquote readability=&quot;121.5&quot;&gt;
&lt;p&gt;在上一步的分析中，我们得知创建一个面板需要先初始化View，再实例化Ctrl，然后调用Ctrl的Awake。这些都是代码层面的，前提还有一个，我们需要一个XxxPanel预制体。&lt;/p&gt;
&lt;p&gt;总结一下，如果要创建一个我们自己的面板，则需要如下步骤：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、创建一个XxxPanel预制体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、创建对应的XxxView&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、创建对应的XxxCtrl&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、添加CtrlNames及PanelNames&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、加载XxxCtrl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面我将以FirstPanel为例进行演示。&lt;/p&gt;
&lt;h3&gt;1、创建FirstPanel预制体。&lt;/h3&gt;
&lt;p&gt;在Hierarchy面板中创建一个FirstPanel，并在LuaFramework目录下新建CustomPrj/FirstTest目录，将FirstPanel拖到此做成预制体，见图3-1。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331061101867-1505058491.png&quot; alt=&quot;&quot; width=&quot;746&quot; height=&quot;330&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-1&lt;/p&gt;
&lt;p&gt;然后删掉Hierarchy面板中的FirstPanel，因为后面我们会动态加载它。&lt;/p&gt;
&lt;h3&gt;2、创建FirstView.lua脚本。&lt;/h3&gt;
&lt;p&gt;在Lua/View目录下创建一个FirstView的lua脚本，脚本结构参照MessageView编写，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7b131c76-ee85-4315-8e3b-08f8d3d6f4f6')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7b131c76-ee85-4315-8e3b-08f8d3d6f4f6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7b131c76-ee85-4315-8e3b-08f8d3d6f4f6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7b131c76-ee85-4315-8e3b-08f8d3d6f4f6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7b131c76-ee85-4315-8e3b-08f8d3d6f4f6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;local&lt;/span&gt;&lt;span&gt; transform;
&lt;/span&gt;&lt;span&gt;local&lt;/span&gt;&lt;span&gt; gameObject;

FirstPanel &lt;/span&gt;=&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;local&lt;/span&gt; this =&lt;span&gt; FirstPanel;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;启动事件--&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstPanel.Awake(obj)
    gameObject &lt;/span&gt;=&lt;span&gt; obj;
    transform &lt;/span&gt;=&lt;span&gt; obj.transform;

    this.InitPanel();
    logWarn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Awake lua---&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;..gameObject.name);
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt;初始化面板--&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstPanel.InitPanel()
    &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;这句要注释掉，因为我们的FirstPanel中没有按钮&lt;/span&gt;
    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;this.btnClose = transform:FindChild(&quot;Button&quot;).gameObject;&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt;单击事件--&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstPanel.OnDestroy()
    logWarn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OnDestroy----&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;注：lua脚本的创建方法是在IDEA中，选中目录，右键-&amp;gt;New-&amp;gt;Lua File。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3、创建FirstCtrl.lua脚本。&lt;/h3&gt;
&lt;p&gt;在Lua/Controller目录下创建一个FirsCtrl的lua脚本，脚本结构参照MessagCtrl编写，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bc12db81-e5cc-4bcb-a048-b358cad12aeb')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_bc12db81-e5cc-4bcb-a048-b358cad12aeb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc12db81-e5cc-4bcb-a048-b358cad12aeb&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bc12db81-e5cc-4bcb-a048-b358cad12aeb',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bc12db81-e5cc-4bcb-a048-b358cad12aeb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; FirstCtrl =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;local&lt;/span&gt; this =&lt;span&gt; FirstCtrl;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;local&lt;/span&gt;&lt;span&gt; message;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;local&lt;/span&gt;&lt;span&gt; transform;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;local&lt;/span&gt;&lt;span&gt; gameObject;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;构建函数--&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstCtrl.New()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     logWarn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FirstCtrl.New---&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; this;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstCtrl.Awake()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     logWarn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FirstCtrl.Awake---&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     panelMgr:CreatePanel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;First&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, this.OnCreate);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;启动事件--&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstCtrl.OnCreate(obj)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     gameObject =&lt;span&gt; obj;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     message = gameObject:GetComponent(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LuaBehaviour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;--&lt;/span&gt;&lt;span&gt;这句要注释掉，因为我们的FirstPanel中没有按钮&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;--&lt;/span&gt;&lt;span&gt;message:AddClick(MessagePanel.btnClose, this.OnClick);&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     logWarn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Start lua---&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;..gameObject.name);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;单击事件--&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstCtrl.OnClick(go)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    destroy(gameObject);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;关闭事件--&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; FirstCtrl.Close()
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    panelMgr:ClosePanel(CtrlNames.Message);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;4、添加CtrlNames及PanelNames&lt;/h3&gt;
&lt;p&gt;在Lua/Common找到define.lua，在CtrlNames中添加 First = &quot;FirstCtrl&quot;,在PanelNames中添加&quot;FirstPanel&quot;，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
CtrlNames =&lt;span&gt; {
    Prompt &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PromptCtrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    Message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MessageCtrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    First &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FirstCtrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}

PanelNames &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PromptPanel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,    
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MessagePanel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FirstPanel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;5、加载FirstCtrl&lt;/h3&gt;
&lt;p&gt;在Lua/Logic/Game.lua文件的Game.OnInitOK函数中，将CtrlManager.GetCtrl()的参数修改为我们刚刚添加的CtrlNames.First，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    CtrlManager.Init();
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; ctrl =&lt;span&gt; CtrlManager.GetCtrl(&lt;strong&gt;CtrlNames.First&lt;/strong&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ctrl ~= &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; AppConst.ExampleMode == &lt;span&gt;1&lt;/span&gt; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        ctrl:Awake();
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;保存代码并运行&lt;/p&gt;
&lt;p&gt;..............&lt;/p&gt;
&lt;p&gt;嗯，什么都没加载出来。&lt;/p&gt;
&lt;p&gt;好吧，我得承认，在学习这个框架的过程中，每走一步都是坑。&lt;/p&gt;
&lt;p&gt;我就是在艰难的趟过这些坑来之后，才觉得有必要将这个过程记录下来，才有了这一系列文章，希望对后来人有所帮助。&lt;/p&gt;
&lt;p&gt;.............&lt;/p&gt;
&lt;p&gt;为什么我们自己的创建的面板没有加载呢？&lt;/p&gt;
&lt;p&gt;查看日志发现，在&quot;LuaFramework InitOK---&amp;gt;&amp;gt;&amp;gt;&quot;日志输出之前，PromptCtrl.New和MessageCtrl.New都被调用了一次，而我们新加的FirstCtrl却没有，见图3-2。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331065155471-228694550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-2&lt;/p&gt;
&lt;p&gt; 应该是我们某些地方少加了调用。&lt;/p&gt;
&lt;p&gt;查找后发现，确实有这样一个地方。在Lua/Logic/CtrlManager.lua脚本的Init方法，对所有Ctrl的New方法进行了调用。&lt;/p&gt;
&lt;p&gt;我们添加对FirstCtrl.New的调用，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; CtrlManager.Init()
    logWarn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CtrlManager.Init-----&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    ctrlList[CtrlNames.Prompt] &lt;/span&gt;=&lt;span&gt; PromptCtrl.New();
    ctrlList[CtrlNames.Message] &lt;/span&gt;=&lt;span&gt; MessageCtrl.New();
    &lt;strong&gt;ctrlList[CtrlNames.First] &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;=&lt;span&gt; FirstCtrl.New();
    &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; this;
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （其实第二节中我们发现了这个地方，本节中忘了将自己的代码加进去）&lt;/p&gt;

&lt;p&gt; 然后再运行&lt;/p&gt;
&lt;p&gt;.....&lt;/p&gt;
&lt;p&gt;报错了,说我们的FirstCtrl是一个nil value， 见图3-3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331070233577-1009487107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-3&lt;/p&gt;
&lt;p&gt;经查，是在CtrlManager中，我们没有加载对应的脚本，见图3-4（图中是已添加之后的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331070524315-1307050733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-4&lt;/p&gt;
&lt;p&gt;再次运行&lt;/p&gt;
&lt;p&gt;出现了更多的错误，见图3-5&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331070730591-377600341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-5&lt;/p&gt;
&lt;p&gt; ......&lt;/p&gt;
&lt;p&gt;有没有想崩溃的感觉，唉，我当初就是这么一步步过来的。&lt;/p&gt;
&lt;p&gt;这次的错误是缺少first.unity3d.&lt;/p&gt;
&lt;p&gt;这里的原因是，我们之前刚把Lua代码AssetBundle模式关掉（设置为false），lua代码不用AssetBundle模式了，但我们的资源（FirstPanel预制体）还 是使用的AssetBundle模式。&lt;/p&gt;
&lt;p&gt;并且资源的AssetBundle模式好像无法关闭，因此需要对FirstPanel预制体进行打包操作。&lt;/p&gt;
&lt;p&gt;操作如下：&lt;/p&gt;
&lt;p&gt;1、找到&lt;strong&gt;LuaFramework/Editor/Packager.cs&lt;/strong&gt;文件中的&lt;strong&gt;HandleExampleBundle&lt;/strong&gt;方法（约160行左右），添加对FirstPanel预制体打包的代码，包名为&quot;first&quot;，如下所示：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理框架实例包
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; HandleExampleBundle() {
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; resPath = AppDataPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + AppConst.AssetDir + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Directory.Exists(resPath)) Directory.CreateDirectory(resPath);

        AddBuildMap(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prompt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + AppConst.ExtName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*.prefab&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Assets/LuaFramework/Examples/Builds/Prompt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        AddBuildMap(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + AppConst.ExtName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*.prefab&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Assets/LuaFramework/Examples/Builds/Message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打包我们新加的FirstPanel预制体&lt;/span&gt;
        &lt;strong&gt;AddBuildMap(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + AppConst.ExtName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*.prefab&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Assets/LuaFramework/CustomPrj/FirstTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;

        AddBuildMap(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prompt_asset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + AppConst.ExtName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Assets/LuaFramework/Examples/Textures/Prompt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        AddBuildMap(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shared_asset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + AppConst.ExtName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Assets/LuaFramework/Examples/Textures/Shared&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、执行unity编辑器上方LuaFramework菜单中的&lt;strong&gt;Build Windows Resources&lt;/strong&gt;菜单项，进行打包操作。打包完成后，可以在StreamingAssets目录中看到first.unity3d文件。见图3-6&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331072314217-258081459.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-6&lt;/p&gt;

&lt;p&gt;再次运行，&lt;/p&gt;
&lt;p&gt;这次终于得到了我们想要的结果，我们自己创建的面板FirstPanel，就这么加载出来了。&lt;/p&gt;
&lt;p&gt;见图3-7&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/634826/201903/634826-20190331072424922-1790729497.png&quot; alt=&quot;&quot; width=&quot;793&quot; height=&quot;443&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-7&lt;/p&gt;

&lt;p&gt;真是太不容易了！&lt;/p&gt;

&lt;p&gt;现在，将我们改错的经过都加入到完整的步骤中，那么，加载一个我们自己创建的面板的完整步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、创建一个XxxPanel预制体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、创建对应的XxxView&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、创建对应的XxxCtrl&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、添加CtrlNames及PanelNames&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、在CtrlManager中加入对XxxCtrl.New的调用，并在头部require &quot;XxxCtrl&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、在Packager.cs文件中对XxxPanel预制体进行打包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、在Game.lua加载XxxCtrl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; 后续写模块的时候都会按这个流程来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;后记 &lt;/h2&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;在本篇文章的第二节的写作过程中，为什么我会用推测并验证的写法，而不是直接给出一个正确结论？第三节中，我为什么没有直接给出正确的操作步骤，而是边走边改错？&lt;/p&gt;
&lt;p&gt;因为我希望本文能如实还原我学LuaFramework的过程，记录每一个问题的发生条件，以及我解决问题的思路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 下一篇文章将会介绍如何加载非XXXPanel的预制体以及按钮事件处理。&lt;/p&gt;
</description>
<pubDate>Sun, 31 Mar 2019 00:16:00 +0000</pubDate>
<dc:creator>子非鱼`</dc:creator>
<og:description>在上篇文章 Unity3D热更新之LuaFramework篇[01]--从零开始 中，我们了解了怎么获得一个可用的LuaFramework框架。 本篇将我会先介绍一下如何配置Lua</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imteach/p/10630099.html</dc:identifier>
</item>
</channel>
</rss>